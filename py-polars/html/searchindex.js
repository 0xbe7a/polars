Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.date_range", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.time_range", "reference/api/polars.using_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.date_range.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.time_range.rst", "reference/api/polars.using_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.date_range", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.time_range", "polars.using_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.diff", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.any", "polars.apply", "polars.approx_unique", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.time", "polars.var", "polars.when", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.diff", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 91, 118, 135, 136, 237, 255, 269, 602, 710, 1002], "refer": [0, 31, 102, 103, 106, 141, 255, 343, 346, 428, 458, 498, 517, 518, 519, 522, 602, 790, 793, 894, 958, 959, 960, 963, 1002], "input": [0, 65, 93, 102, 103, 106, 136, 137, 148, 159, 187, 201, 208, 222, 232, 235, 255, 262, 269, 357, 377, 422, 437, 451, 488, 544, 545, 546, 547, 550, 552, 553, 554, 555, 561, 566, 567, 575, 576, 579, 586, 589, 590, 602, 613, 616, 626, 633, 659, 667, 672, 678, 682, 700, 710, 821, 872, 873, 875, 1002], "output": [0, 26, 28, 31, 32, 33, 34, 74, 106, 130, 136, 160, 161, 172, 182, 189, 198, 201, 228, 232, 255, 264, 269, 426, 427, 436, 541, 547, 556, 575, 602, 613, 634, 635, 644, 648, 649, 659, 678, 681, 684, 700, 710, 990, 1002], "seri": [0, 1, 23, 66, 67, 68, 69, 70, 73, 74, 90, 92, 95, 97, 100, 121, 125, 130, 132, 136, 144, 152, 154, 156, 157, 161, 162, 165, 166, 168, 170, 178, 179, 183, 194, 195, 210, 214, 217, 220, 221, 236, 255, 268, 269, 271, 272, 273, 274, 275, 276, 279, 280, 287, 295, 296, 300, 301, 313, 315, 319, 322, 326, 328, 330, 335, 339, 340, 342, 347, 350, 359, 360, 366, 375, 377, 379, 380, 381, 382, 383, 385, 386, 387, 395, 396, 397, 402, 405, 406, 413, 414, 417, 418, 419, 424, 426, 454, 458, 459, 460, 461, 462, 464, 470, 476, 477, 480, 483, 484, 491, 506, 511, 517, 518, 519, 522, 525, 531, 532, 533, 534, 540, 545, 546, 547, 548, 549, 551, 557, 559, 560, 561, 567, 568, 570, 572, 574, 575, 576, 577, 578, 579, 580, 582, 583, 586, 588, 589, 590, 591, 593, 602, 613, 630, 635, 683, 700, 994, 996, 998, 1001, 1003, 1006, 1007, 1008, 1010], "datafram": [0, 1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 72, 73, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 117, 120, 122, 123, 130, 133, 253, 254, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 341, 342, 343, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 572, 575, 576, 577, 578, 579, 580, 582, 586, 587, 588, 589, 590, 591, 593, 594, 602, 613, 620, 622, 626, 627, 631, 634, 639, 640, 641, 642, 644, 648, 649, 653, 657, 664, 665, 666, 667, 673, 674, 675, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 703, 709, 710, 724, 725, 734, 749, 750, 786, 817, 851, 892, 942, 954, 955, 970, 979, 980, 990, 1002, 1009, 1010], "lazyfram": [0, 1, 50, 51, 53, 55, 65, 66, 67, 68, 69, 72, 73, 113, 114, 115, 116, 117, 118, 120, 125, 130, 176, 188, 255, 363, 419, 602, 613, 699, 703, 1009, 1010], "express": [0, 70, 72, 74, 100, 122, 125, 127, 130, 132, 136, 137, 148, 150, 152, 159, 185, 189, 197, 201, 208, 222, 232, 235, 237, 255, 262, 264, 265, 266, 268, 269, 280, 293, 297, 298, 299, 302, 308, 310, 314, 332, 333, 336, 343, 353, 357, 360, 363, 367, 369, 370, 371, 375, 377, 381, 384, 389, 392, 393, 399, 401, 419, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 437, 440, 442, 444, 448, 450, 451, 453, 454, 455, 456, 461, 475, 476, 477, 479, 481, 486, 488, 492, 493, 498, 499, 500, 501, 507, 508, 527, 528, 531, 537, 538, 540, 543, 544, 545, 546, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 574, 575, 576, 579, 582, 583, 584, 585, 586, 587, 589, 590, 592, 594, 601, 613, 616, 620, 625, 626, 627, 630, 633, 653, 659, 662, 663, 664, 665, 667, 672, 678, 679, 682, 684, 700, 703, 710, 738, 739, 740, 748, 757, 779, 780, 783, 807, 821, 849, 851, 912, 919, 933, 934, 939, 940, 941, 942, 948, 949, 1002], "selector": [0, 590, 613], "extend": [0, 93, 255, 360, 602, 613, 709, 807, 1002], "function": [0, 31, 65, 66, 67, 68, 69, 91, 97, 102, 103, 106, 113, 123, 136, 141, 147, 154, 181, 188, 189, 219, 223, 226, 227, 237, 255, 265, 269, 308, 340, 354, 355, 356, 419, 426, 427, 451, 453, 464, 465, 466, 467, 468, 469, 471, 472, 473, 485, 535, 545, 546, 547, 559, 560, 561, 567, 568, 570, 575, 576, 579, 582, 590, 602, 613, 644, 648, 652, 675, 684, 700, 710, 748, 787, 801, 802, 803, 804, 817, 869, 892, 900, 914, 915, 921, 926, 984, 1002, 1010], "data": [0, 1, 6, 16, 19, 29, 30, 31, 32, 36, 50, 56, 65, 66, 68, 73, 75, 80, 81, 85, 87, 90, 91, 92, 93, 94, 95, 96, 100, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 120, 121, 123, 124, 125, 127, 132, 135, 136, 139, 149, 158, 159, 160, 161, 172, 173, 174, 176, 187, 188, 192, 197, 198, 206, 213, 218, 219, 232, 234, 253, 255, 266, 269, 282, 283, 284, 285, 294, 313, 341, 350, 353, 370, 371, 376, 383, 385, 392, 420, 425, 448, 450, 451, 458, 474, 475, 485, 498, 499, 517, 518, 519, 522, 535, 537, 538, 544, 553, 574, 583, 602, 613, 618, 619, 627, 633, 634, 635, 652, 664, 665, 678, 700, 709, 710, 724, 725, 732, 737, 741, 754, 756, 797, 817, 870, 894, 910, 911, 921, 926, 958, 959, 960, 963, 982, 983, 984, 985, 987, 992, 1001, 1002, 1009], "type": [0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 74, 80, 90, 92, 93, 94, 95, 96, 100, 102, 103, 105, 106, 113, 114, 119, 120, 121, 124, 125, 130, 132, 136, 154, 158, 160, 161, 162, 173, 174, 213, 219, 221, 224, 255, 269, 294, 295, 297, 298, 299, 315, 319, 322, 326, 328, 330, 335, 339, 342, 357, 372, 379, 381, 382, 406, 419, 428, 461, 512, 513, 514, 517, 535, 547, 553, 562, 563, 564, 566, 567, 574, 583, 592, 602, 613, 620, 625, 627, 634, 635, 639, 653, 663, 664, 665, 673, 700, 732, 734, 738, 739, 740, 758, 762, 765, 772, 774, 777, 782, 786, 789, 815, 856, 869, 921, 953, 954, 955, 958, 982, 983, 985, 993, 1002, 1009], "config": [0, 65, 201, 232, 255, 564, 613, 659, 678, 700], "except": [0, 163, 175, 177, 211, 255, 566, 613, 640, 700, 703, 816, 843, 972, 983, 992, 1002], "test": [0, 106, 613, 636, 643, 700], "util": [0, 97, 570, 613, 627, 700], "sql": [0, 29, 50, 54, 104, 174, 255, 587, 613], "These": [1, 31, 133, 255, 347, 601, 794], "allow": [1, 30, 31, 56, 80, 91, 113, 115, 116, 117, 118, 125, 127, 135, 172, 175, 176, 197, 198, 199, 219, 224, 234, 255, 336, 343, 346, 460, 475, 517, 518, 519, 602, 639, 640, 644, 648, 664, 665, 673, 679, 700, 703, 783, 790, 793, 896, 911, 913, 958, 959, 960, 984, 1002, 1010], "you": [1, 13, 31, 35, 55, 65, 73, 90, 92, 93, 94, 96, 100, 102, 103, 106, 107, 111, 113, 120, 132, 133, 136, 145, 149, 160, 161, 172, 185, 197, 198, 215, 218, 223, 237, 255, 269, 297, 298, 299, 332, 333, 339, 343, 346, 363, 377, 401, 419, 426, 428, 460, 465, 466, 467, 468, 469, 471, 472, 473, 502, 505, 517, 519, 549, 559, 568, 583, 602, 620, 623, 634, 635, 636, 640, 643, 663, 665, 700, 703, 709, 710, 738, 739, 740, 779, 780, 786, 790, 793, 821, 851, 896, 943, 946, 958, 960, 983, 992, 1002, 1010], "regist": [1, 50, 52, 53, 54, 55, 66, 67, 68, 69, 126, 128, 1009], "custom": [1, 31, 66, 67, 68, 69, 126, 127, 128, 136, 237, 255, 269, 343, 346, 419, 426, 464, 547, 575, 602, 644, 684, 700, 710, 790, 793, 869, 900, 1002, 1010], "dedic": [1, 91, 172, 198, 255], "namespac": [1, 254, 601, 613, 699], "underli": [1, 76, 83, 90, 92, 93, 94, 96, 111, 122, 125, 127, 149, 172, 173, 198, 213, 255, 288, 313, 314, 318, 321, 323, 324, 325, 327, 329, 331, 334, 337, 338, 339, 341, 348, 349, 350, 351, 460, 474, 492, 494, 602, 700, 703, 709, 727, 756, 757, 761, 764, 766, 767, 771, 773, 776, 778, 781, 784, 785, 786, 788, 795, 796, 797, 798, 896, 910, 921, 933, 935, 978, 983, 1002], "polar": [1, 255, 601, 602, 607, 613, 700, 703, 1002, 1009], "class": [1, 2, 3, 4, 5, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 95, 122, 123, 219, 255, 602, 607, 613, 700, 982, 983, 1002, 1009], "without": [1, 6, 97, 105, 108, 112, 114, 118, 226, 227, 255, 269, 308, 340, 465, 466, 467, 468, 469, 471, 472, 473, 586, 602, 675, 700, 748, 754, 787, 817, 892, 1002], "requir": [1, 30, 31, 35, 65, 95, 120, 121, 141, 197, 219, 255, 285, 354, 355, 356, 420, 480, 517, 518, 519, 538, 583, 602, 665, 700, 725, 802, 803, 804, 870, 920, 958, 959, 960, 983, 984, 987, 1002], "subclass": [1, 255], "mixin": 1, "exprar": [1, 6, 11, 15, 18, 26, 30, 31, 55, 56, 65, 74, 75, 82, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 118, 120, 121, 123, 125, 133, 135, 136, 137, 141, 145, 147, 150, 154, 159, 160, 161, 172, 174, 175, 176, 181, 182, 187, 197, 198, 201, 202, 208, 214, 219, 222, 227, 228, 232, 235, 255, 265, 304, 306, 307, 311, 312, 340, 347, 352, 354, 355, 356, 377, 379, 381, 382, 383, 385, 386, 387, 390, 419, 428, 451, 458, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 482, 485, 487, 488, 502, 505, 506, 517, 519, 529, 545, 546, 549, 550, 552, 554, 555, 556, 561, 576, 579, 586, 589, 590, 594, 595, 596, 598, 601, 602, 603, 604, 607, 608, 609, 610, 613, 616, 623, 628, 633, 634, 635, 636, 639, 640, 643, 644, 648, 649, 653, 656, 659, 660, 664, 665, 667, 672, 675, 678, 679, 682, 700, 703, 707, 709, 746, 747, 787, 794, 800, 801, 802, 803, 804, 814, 821, 825, 828, 829, 831, 832, 833, 834, 841, 869, 894, 898, 900, 906, 923, 926, 943, 946, 947, 958, 960, 971, 983, 984, 992, 994, 996, 998, 1002, 1003, 1006, 1007, 1008, 1010], "all": [1, 8, 15, 18, 23, 26, 31, 36, 52, 65, 72, 74, 90, 93, 95, 96, 102, 103, 105, 106, 107, 111, 113, 115, 116, 122, 123, 127, 142, 145, 151, 163, 168, 170, 172, 173, 176, 177, 181, 184, 185, 192, 197, 198, 207, 211, 216, 224, 226, 228, 255, 266, 267, 268, 286, 302, 308, 312, 357, 368, 372, 374, 376, 379, 382, 386, 387, 389, 393, 401, 406, 416, 419, 426, 427, 443, 449, 455, 458, 463, 480, 486, 488, 493, 499, 501, 504, 507, 508, 510, 516, 528, 541, 553, 561, 566, 568, 573, 582, 589, 590, 594, 602, 607, 613, 620, 623, 625, 627, 629, 644, 648, 653, 663, 666, 673, 679, 700, 703, 748, 750, 754, 816, 823, 838, 843, 851, 856, 866, 869, 894, 927, 934, 940, 942, 945, 948, 949, 951, 957, 972, 1002, 1009, 1010], "support": [1, 30, 31, 35, 73, 90, 91, 92, 93, 94, 95, 96, 97, 104, 105, 106, 114, 122, 127, 133, 135, 172, 173, 174, 198, 207, 208, 215, 219, 255, 414, 451, 486, 488, 511, 553, 602, 607, 639, 666, 667, 700, 703, 864, 927, 952, 984, 1002, 1009], "target": [1, 30, 31, 71, 255, 347, 498, 517, 518, 519, 939, 958, 959, 960], "thi": [1, 6, 8, 12, 13, 26, 28, 30, 31, 33, 35, 39, 50, 51, 55, 56, 65, 72, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 99, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 130, 133, 135, 136, 141, 145, 146, 147, 149, 154, 159, 160, 161, 162, 166, 168, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 190, 191, 192, 197, 198, 199, 201, 205, 207, 209, 210, 213, 215, 218, 219, 223, 224, 226, 227, 228, 229, 230, 232, 233, 237, 238, 254, 255, 265, 268, 269, 270, 279, 285, 292, 293, 295, 302, 308, 313, 324, 332, 333, 336, 339, 340, 343, 346, 350, 359, 375, 376, 377, 381, 393, 401, 402, 406, 415, 419, 420, 423, 424, 426, 432, 433, 434, 435, 436, 437, 446, 447, 451, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 471, 472, 473, 475, 477, 479, 480, 481, 486, 487, 488, 498, 503, 504, 509, 510, 516, 517, 519, 520, 524, 536, 538, 539, 540, 541, 545, 546, 548, 549, 554, 557, 559, 561, 567, 568, 570, 576, 579, 583, 586, 590, 602, 613, 614, 617, 620, 623, 625, 627, 633, 634, 635, 637, 639, 640, 644, 648, 649, 653, 656, 659, 662, 663, 664, 665, 666, 673, 675, 678, 679, 680, 681, 684, 685, 699, 700, 703, 709, 710, 719, 725, 731, 734, 748, 754, 756, 757, 767, 779, 780, 783, 786, 787, 790, 793, 797, 801, 806, 813, 814, 817, 822, 827, 828, 830, 835, 837, 839, 840, 842, 851, 852, 856, 865, 870, 874, 876, 877, 878, 879, 881, 882, 884, 885, 887, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 904, 907, 908, 909, 911, 914, 915, 916, 919, 920, 921, 922, 927, 928, 930, 939, 944, 945, 950, 951, 957, 958, 960, 961, 965, 966, 970, 971, 978, 980, 982, 983, 984, 986, 987, 989, 991, 992, 1002, 1009, 1010], "featur": [1, 35, 39, 56, 71, 255], "i": [1, 6, 12, 13, 15, 28, 30, 31, 32, 33, 34, 39, 50, 55, 56, 65, 70, 71, 72, 73, 74, 77, 79, 80, 82, 86, 88, 90, 91, 92, 93, 94, 95, 96, 99, 102, 103, 104, 105, 107, 111, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 127, 129, 130, 135, 136, 145, 147, 155, 158, 159, 160, 161, 162, 163, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 185, 187, 188, 189, 197, 198, 199, 207, 208, 209, 210, 211, 213, 219, 223, 224, 226, 227, 228, 229, 237, 238, 254, 255, 262, 265, 267, 268, 269, 270, 280, 293, 302, 308, 314, 323, 336, 340, 343, 347, 354, 355, 356, 359, 372, 375, 377, 390, 401, 404, 414, 418, 419, 423, 426, 428, 432, 435, 437, 451, 458, 460, 462, 465, 466, 467, 468, 469, 471, 472, 473, 475, 476, 477, 481, 482, 485, 486, 487, 488, 490, 492, 493, 498, 499, 501, 503, 504, 506, 507, 509, 510, 511, 514, 516, 517, 518, 519, 522, 524, 541, 542, 545, 546, 548, 549, 553, 554, 556, 557, 559, 560, 561, 568, 574, 576, 579, 583, 584, 585, 586, 588, 590, 593, 594, 602, 620, 623, 625, 627, 633, 634, 635, 638, 639, 640, 642, 644, 648, 649, 653, 663, 664, 665, 666, 667, 668, 673, 675, 676, 681, 684, 685, 700, 703, 708, 709, 710, 748, 757, 766, 783, 787, 790, 794, 801, 802, 803, 804, 806, 814, 815, 816, 817, 820, 822, 824, 830, 835, 836, 837, 839, 840, 841, 843, 851, 854, 864, 868, 869, 892, 894, 896, 898, 907, 909, 911, 912, 913, 914, 915, 916, 922, 923, 926, 927, 930, 933, 934, 939, 940, 942, 944, 945, 947, 948, 950, 951, 952, 955, 957, 958, 959, 960, 963, 965, 972, 978, 983, 984, 990, 991, 992, 1002, 1009, 1010], "primarili": 1, "intend": 1, "us": [1, 10, 12, 13, 18, 23, 24, 28, 29, 31, 35, 50, 51, 52, 53, 55, 56, 65, 73, 74, 91, 93, 94, 96, 98, 100, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 126, 127, 129, 130, 132, 136, 143, 145, 150, 151, 154, 159, 160, 161, 168, 170, 172, 173, 175, 179, 181, 184, 185, 188, 189, 197, 199, 201, 208, 209, 210, 216, 217, 219, 223, 224, 226, 227, 228, 229, 232, 235, 237, 255, 263, 269, 270, 280, 288, 289, 293, 295, 308, 311, 312, 339, 343, 346, 350, 352, 354, 355, 356, 362, 363, 376, 377, 390, 401, 419, 426, 428, 431, 451, 458, 460, 462, 465, 466, 467, 468, 469, 471, 472, 473, 475, 477, 480, 481, 485, 487, 488, 490, 492, 494, 495, 496, 498, 499, 502, 503, 507, 509, 511, 513, 515, 517, 518, 519, 522, 542, 545, 546, 547, 548, 549, 553, 555, 556, 559, 561, 568, 570, 574, 576, 579, 583, 584, 585, 586, 588, 589, 590, 593, 601, 602, 612, 613, 620, 622, 623, 628, 629, 633, 634, 635, 636, 640, 642, 643, 648, 659, 665, 667, 668, 673, 675, 676, 678, 682, 684, 700, 703, 710, 727, 728, 734, 748, 786, 790, 793, 797, 800, 802, 803, 804, 808, 809, 814, 817, 821, 841, 851, 869, 875, 894, 896, 898, 911, 914, 915, 916, 920, 922, 926, 930, 933, 935, 936, 939, 940, 943, 944, 948, 950, 952, 954, 958, 959, 960, 963, 973, 979, 981, 982, 983, 984, 991, 992, 1002, 1009, 1010], "librari": [1, 76, 83, 426, 602, 1010], "author": 1, "domain": [1, 499, 940], "specif": [1, 26, 30, 31, 90, 92, 94, 96, 102, 104, 105, 114, 124, 125, 172, 255, 343, 346, 464, 517, 518, 519, 522, 602, 700, 790, 793, 900, 958, 959, 960, 963, 1002, 1010], "capabl": [1, 31, 255], "which": [1, 18, 27, 28, 31, 32, 33, 34, 35, 65, 66, 67, 68, 69, 93, 102, 103, 104, 105, 106, 113, 114, 120, 126, 128, 137, 145, 149, 160, 161, 218, 222, 224, 255, 265, 343, 360, 377, 379, 382, 383, 385, 386, 387, 419, 437, 465, 466, 467, 468, 469, 471, 472, 473, 506, 594, 602, 616, 623, 625, 634, 635, 664, 665, 672, 673, 681, 700, 709, 790, 807, 821, 825, 829, 831, 832, 833, 834, 869, 914, 947, 1002, 1010], "mai": [1, 30, 39, 73, 90, 92, 93, 94, 96, 102, 105, 107, 114, 115, 118, 136, 147, 149, 175, 204, 205, 219, 226, 227, 255, 269, 308, 313, 324, 340, 413, 418, 419, 436, 465, 466, 467, 468, 469, 471, 472, 473, 478, 479, 517, 519, 559, 560, 568, 582, 602, 640, 644, 661, 662, 665, 675, 680, 684, 700, 709, 710, 748, 756, 767, 787, 801, 817, 863, 868, 892, 918, 919, 958, 960, 1002, 1010], "exist": [1, 29, 30, 31, 65, 105, 114, 125, 232, 255, 314, 347, 678, 700, 757], "belong": [1, 160, 255, 634, 700], "core": [1, 219, 255, 1010], "cannot": [1, 91, 102, 103, 106, 107, 120, 129, 136, 199, 237, 255, 288, 428, 475, 494, 513, 526, 602, 663, 700, 710, 727, 911, 935, 954, 1002], "overrid": [1, 31, 90, 92, 93, 94, 95, 96, 102, 122, 123, 127, 129, 255, 428, 602, 700, 875, 1002], "str": [1, 7, 9, 12, 14, 15, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 71, 74, 75, 90, 92, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 123, 125, 126, 127, 128, 130, 133, 137, 140, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 168, 170, 171, 172, 174, 175, 178, 179, 180, 181, 182, 183, 185, 187, 189, 191, 193, 194, 195, 196, 197, 198, 199, 202, 204, 205, 207, 208, 209, 210, 211, 214, 215, 216, 217, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 262, 263, 264, 269, 310, 315, 336, 339, 340, 343, 346, 347, 357, 361, 363, 365, 369, 375, 377, 384, 397, 398, 404, 405, 406, 414, 417, 419, 427, 428, 436, 438, 440, 451, 453, 455, 461, 463, 465, 466, 467, 468, 469, 471, 472, 473, 479, 480, 487, 488, 525, 526, 528, 531, 543, 544, 545, 547, 548, 551, 553, 555, 556, 557, 558, 559, 560, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 575, 577, 578, 580, 581, 582, 583, 584, 585, 587, 588, 589, 591, 592, 593, 602, 608, 616, 620, 621, 622, 623, 625, 626, 627, 630, 632, 633, 634, 635, 637, 639, 640, 648, 649, 653, 655, 656, 657, 660, 662, 663, 664, 665, 666, 667, 672, 673, 674, 675, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 703, 706, 732, 749, 750, 758, 783, 786, 787, 790, 793, 794, 809, 848, 849, 856, 869, 875, 884, 885, 892, 897, 914, 915, 966, 968, 979, 980, 981, 1002, 1006, 1009, 1010], "dt": [1, 65, 74, 161, 255, 564, 610, 635, 700, 703, 1008], "attempt": [1, 218, 255], "do": [1, 31, 65, 72, 73, 100, 113, 132, 149, 160, 161, 175, 213, 223, 226, 255, 308, 401, 451, 504, 510, 516, 583, 602, 620, 625, 634, 635, 640, 644, 653, 663, 664, 665, 700, 703, 709, 748, 851, 945, 951, 957, 983, 992, 1002], "so": [1, 56, 104, 113, 129, 158, 160, 161, 189, 255, 280, 293, 377, 404, 419, 504, 510, 516, 602, 634, 635, 700, 854, 945, 951, 957], "rais": [1, 14, 18, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 120, 121, 197, 255, 288, 339, 418, 436, 492, 494, 506, 517, 518, 519, 522, 574, 727, 786, 868, 933, 935, 947, 958, 959, 960, 963, 983, 992, 1002], "an": [1, 6, 26, 29, 30, 31, 39, 66, 68, 69, 70, 72, 74, 76, 80, 81, 83, 90, 100, 102, 103, 104, 105, 106, 108, 111, 113, 115, 123, 125, 127, 130, 132, 136, 138, 139, 147, 150, 152, 154, 160, 161, 172, 173, 175, 185, 189, 195, 197, 213, 218, 226, 232, 237, 255, 264, 265, 269, 288, 294, 297, 298, 299, 303, 304, 305, 306, 307, 308, 314, 339, 343, 350, 360, 363, 369, 389, 399, 401, 404, 418, 419, 426, 427, 437, 456, 464, 465, 466, 467, 468, 469, 471, 472, 473, 492, 494, 499, 517, 518, 519, 522, 531, 537, 545, 546, 549, 553, 561, 565, 570, 574, 576, 579, 582, 583, 586, 589, 590, 594, 602, 613, 618, 619, 620, 625, 627, 630, 634, 635, 640, 644, 653, 663, 678, 679, 684, 700, 703, 710, 727, 732, 737, 738, 739, 740, 741, 744, 745, 746, 747, 748, 757, 786, 790, 797, 801, 807, 830, 849, 851, 854, 868, 900, 901, 902, 903, 904, 905, 907, 908, 909, 914, 915, 933, 935, 940, 958, 959, 960, 963, 983, 992, 1002, 1009], "attributeerror": 1, "howev": [1, 93, 147, 255, 801, 1002], "can": [1, 13, 31, 55, 65, 74, 81, 93, 102, 103, 106, 107, 111, 113, 115, 117, 118, 123, 124, 125, 127, 129, 130, 133, 136, 137, 138, 146, 154, 160, 161, 168, 170, 185, 189, 201, 208, 218, 222, 223, 226, 232, 237, 255, 269, 293, 304, 307, 308, 332, 333, 336, 339, 347, 360, 376, 377, 401, 419, 436, 443, 451, 460, 465, 466, 467, 468, 469, 471, 472, 473, 477, 480, 482, 485, 488, 501, 504, 510, 516, 517, 519, 541, 549, 550, 553, 568, 570, 594, 601, 602, 612, 616, 620, 625, 634, 635, 659, 667, 672, 678, 680, 700, 703, 710, 748, 779, 780, 783, 786, 794, 807, 821, 851, 869, 880, 896, 914, 915, 916, 920, 923, 926, 942, 945, 951, 957, 958, 960, 1002, 1009], "other": [1, 18, 31, 55, 74, 102, 103, 106, 113, 120, 121, 145, 149, 155, 174, 175, 181, 182, 197, 201, 227, 232, 253, 255, 262, 266, 268, 280, 297, 298, 299, 310, 353, 367, 370, 371, 377, 381, 392, 397, 425, 428, 432, 435, 442, 444, 448, 450, 488, 527, 535, 537, 544, 545, 546, 552, 554, 555, 561, 576, 579, 586, 589, 590, 602, 613, 623, 639, 640, 648, 649, 659, 675, 678, 679, 700, 703, 709, 738, 739, 740, 752, 828, 847, 913, 985, 993, 1001, 1002], "onli": [1, 18, 26, 31, 50, 52, 56, 65, 71, 73, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 125, 127, 133, 136, 145, 160, 161, 172, 174, 175, 179, 198, 210, 215, 217, 228, 255, 263, 269, 280, 293, 296, 297, 298, 299, 336, 357, 366, 451, 460, 539, 602, 620, 623, 634, 635, 636, 639, 640, 643, 700, 735, 738, 739, 740, 783, 812, 830, 896, 978, 981, 1002, 1009, 1010], "gener": [1, 104, 122, 123, 124, 125, 127, 130, 141, 189, 199, 216, 223, 255, 475, 481, 583, 602, 700, 911, 922, 979, 1002, 1010], "userwarn": 1, "pl": [1, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 99, 100, 102, 103, 104, 105, 106, 107, 113, 114, 118, 119, 120, 121, 122, 123, 124, 125, 127, 130, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 587, 588, 589, 590, 591, 592, 593, 594, 602, 614, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 703, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 731, 732, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 803, 804, 807, 808, 809, 810, 812, 815, 816, 817, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 842, 850, 851, 852, 855, 856, 858, 863, 864, 865, 867, 869, 874, 875, 876, 877, 878, 879, 880, 881, 882, 888, 889, 890, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 918, 922, 923, 924, 925, 927, 928, 929, 930, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 963, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 1002, 1009, 1010], "register_expr_namespac": [1, 66, 68, 69], "greet": 1, "def": [1, 66, 67, 68, 69, 123, 124, 125, 127, 133, 188, 223, 255, 262, 453, 499, 544, 575, 602, 652, 700, 703, 940, 1010], "__init__": [1, 2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 122, 1009], "self": [1, 51, 52, 53, 55, 66, 67, 68, 69, 72, 138, 139, 142, 149, 163, 165, 166, 177, 178, 179, 180, 181, 183, 186, 187, 189, 191, 192, 194, 195, 199, 204, 206, 207, 209, 210, 211, 216, 223, 225, 228, 229, 230, 233, 234, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 286, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 602, 616, 617, 619, 620, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 700, 709, 710, 732, 741, 810, 818, 874, 875, 886, 889, 890, 895, 914, 915, 916, 928, 989, 993, 1002], "_expr": [1, 67], "hello": [1, 18, 51, 54, 504, 510, 516, 545, 856, 945, 951, 957], "return": [1, 26, 28, 31, 32, 33, 34, 50, 54, 65, 66, 67, 68, 69, 70, 71, 72, 74, 82, 84, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 112, 113, 114, 124, 130, 131, 132, 136, 137, 138, 141, 144, 145, 146, 147, 148, 150, 151, 154, 158, 159, 160, 161, 163, 165, 171, 172, 173, 174, 176, 177, 184, 185, 187, 188, 189, 197, 198, 199, 211, 212, 218, 219, 222, 223, 224, 228, 232, 234, 237, 240, 244, 249, 255, 265, 267, 271, 272, 273, 274, 275, 276, 279, 280, 287, 289, 292, 300, 301, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 345, 347, 348, 349, 351, 359, 373, 377, 379, 380, 381, 382, 383, 385, 386, 387, 394, 395, 396, 398, 402, 404, 405, 406, 417, 418, 424, 428, 437, 443, 453, 461, 462, 475, 476, 482, 483, 484, 491, 493, 495, 497, 498, 499, 501, 502, 503, 505, 506, 509, 511, 512, 513, 514, 524, 530, 531, 532, 533, 534, 536, 537, 539, 540, 541, 544, 545, 546, 547, 549, 550, 553, 562, 563, 564, 570, 572, 574, 575, 583, 586, 589, 591, 592, 594, 602, 616, 618, 620, 623, 624, 625, 627, 634, 635, 636, 642, 643, 644, 652, 653, 663, 664, 665, 670, 671, 672, 673, 678, 681, 687, 691, 696, 700, 706, 707, 708, 710, 717, 718, 720, 721, 726, 728, 731, 737, 749, 750, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 791, 792, 794, 795, 796, 798, 801, 806, 814, 816, 817, 823, 825, 826, 828, 829, 831, 832, 833, 834, 838, 840, 843, 845, 846, 848, 852, 854, 855, 856, 867, 868, 874, 875, 880, 892, 898, 899, 911, 912, 913, 915, 923, 932, 933, 934, 936, 938, 939, 940, 942, 943, 944, 946, 947, 950, 952, 953, 954, 955, 965, 972, 974, 986, 988, 989, 993, 1002, 1009, 1010], "lit": [1, 100, 132, 377, 389, 559, 568, 583, 594, 602, 809, 1002], "alia": [1, 12, 65, 67, 69, 74, 130, 160, 161, 177, 225, 232, 255, 262, 266, 269, 292, 297, 298, 299, 303, 304, 305, 306, 307, 309, 313, 314, 315, 318, 319, 320, 322, 324, 325, 326, 328, 330, 335, 336, 337, 339, 340, 341, 342, 343, 345, 346, 347, 349, 350, 353, 363, 365, 367, 370, 371, 375, 377, 380, 381, 389, 392, 393, 394, 399, 401, 425, 427, 428, 439, 442, 444, 448, 450, 452, 454, 455, 458, 460, 476, 492, 493, 496, 498, 499, 502, 505, 511, 513, 514, 515, 525, 526, 527, 528, 535, 536, 537, 543, 544, 545, 546, 547, 551, 552, 554, 555, 559, 560, 561, 564, 565, 568, 569, 575, 576, 579, 582, 583, 589, 590, 594, 602, 634, 635, 637, 643, 674, 678, 700, 756, 758, 763, 783, 786, 790, 792, 797, 843, 851, 875, 939, 940, 954, 955, 1002], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 18, 51, 54, 504, 510, 516, 856, 945, 951, 957], "select": [1, 29, 50, 51, 52, 65, 66, 67, 68, 70, 101, 102, 103, 104, 105, 107, 111, 113, 118, 124, 136, 171, 175, 185, 188, 197, 207, 220, 225, 228, 255, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 292, 296, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 364, 366, 368, 372, 374, 375, 376, 378, 379, 381, 382, 384, 388, 389, 390, 391, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 415, 416, 419, 420, 421, 422, 423, 424, 426, 427, 429, 430, 431, 441, 443, 445, 446, 447, 449, 450, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 497, 498, 499, 500, 501, 503, 504, 506, 509, 510, 512, 513, 514, 516, 517, 520, 521, 523, 525, 526, 528, 529, 532, 533, 534, 536, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 553, 554, 556, 557, 558, 559, 560, 561, 564, 566, 567, 568, 569, 570, 572, 576, 577, 578, 579, 580, 582, 583, 587, 588, 589, 590, 591, 593, 602, 621, 637, 640, 652, 666, 674, 679, 681, 700, 703, 724, 725, 786, 851, 914, 915, 927, 942, 958, 973, 1002, 1009], "shape": [1, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 50, 51, 52, 54, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 87, 90, 92, 93, 94, 95, 96, 97, 100, 113, 118, 125, 127, 130, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 156, 157, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 174, 175, 178, 179, 180, 181, 183, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 199, 201, 204, 205, 207, 208, 209, 210, 211, 212, 214, 216, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 572, 575, 576, 577, 578, 579, 580, 582, 583, 586, 587, 588, 589, 590, 591, 593, 594, 602, 616, 618, 620, 622, 623, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 659, 661, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 703, 709, 710, 711, 712, 713, 714, 715, 716, 719, 720, 721, 722, 723, 724, 725, 731, 732, 734, 735, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 803, 804, 807, 808, 809, 810, 812, 815, 816, 817, 820, 821, 823, 825, 828, 829, 831, 832, 833, 834, 838, 840, 850, 851, 852, 855, 856, 858, 863, 864, 865, 867, 869, 874, 875, 880, 888, 889, 890, 892, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 914, 915, 918, 922, 923, 924, 925, 927, 928, 929, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 963, 970, 972, 973, 974, 975, 976, 979, 980, 981, 985, 986, 987, 988, 989, 990, 993, 1002, 1009], "3": [1, 10, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 50, 52, 53, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 100, 104, 106, 113, 118, 119, 120, 121, 124, 125, 130, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 262, 263, 264, 265, 269, 279, 280, 281, 282, 283, 284, 285, 286, 292, 294, 295, 296, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 323, 329, 331, 337, 338, 339, 340, 341, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 390, 392, 393, 394, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 421, 422, 423, 424, 425, 427, 428, 442, 443, 444, 448, 449, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 485, 487, 488, 489, 492, 495, 496, 498, 499, 500, 502, 505, 507, 511, 512, 513, 514, 515, 518, 522, 525, 526, 527, 528, 530, 531, 532, 536, 539, 540, 541, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566, 567, 568, 569, 572, 574, 575, 576, 577, 578, 579, 582, 583, 586, 588, 589, 590, 591, 593, 594, 602, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 703, 706, 709, 710, 711, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 731, 732, 734, 735, 736, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 756, 757, 758, 761, 762, 763, 764, 766, 768, 769, 770, 772, 774, 775, 776, 778, 782, 784, 786, 787, 788, 790, 792, 793, 794, 796, 797, 801, 803, 804, 807, 808, 809, 810, 812, 815, 816, 817, 820, 821, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 841, 842, 850, 851, 852, 855, 858, 863, 864, 865, 867, 869, 874, 875, 876, 877, 878, 879, 880, 881, 882, 888, 889, 890, 892, 893, 894, 897, 898, 899, 900, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 918, 922, 924, 925, 926, 927, 928, 930, 936, 937, 939, 940, 941, 943, 946, 948, 952, 956, 959, 963, 970, 971, 972, 973, 974, 975, 976, 978, 979, 982, 983, 984, 986, 987, 988, 989, 990, 991, 993, 1002, 1009, 1010], "1": [1, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 100, 102, 103, 104, 105, 106, 107, 113, 114, 118, 119, 120, 121, 122, 125, 127, 130, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 292, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 602, 616, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 703, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 731, 732, 734, 735, 736, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 802, 803, 804, 807, 808, 809, 810, 812, 815, 816, 817, 820, 821, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 840, 842, 850, 851, 852, 854, 855, 858, 863, 864, 865, 867, 869, 874, 876, 877, 878, 879, 880, 881, 882, 888, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 939, 941, 942, 948, 954, 955, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 1002, 1009, 1010], "2": [1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 50, 52, 53, 55, 56, 65, 66, 67, 68, 69, 70, 73, 75, 90, 92, 93, 94, 95, 96, 97, 104, 113, 118, 119, 120, 121, 124, 125, 127, 130, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 176, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 266, 267, 268, 269, 270, 277, 279, 280, 281, 282, 283, 284, 285, 286, 292, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 315, 319, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 346, 347, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 442, 443, 444, 445, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 485, 486, 487, 488, 489, 491, 493, 496, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 510, 511, 513, 514, 515, 516, 517, 519, 520, 521, 523, 525, 526, 527, 528, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 572, 574, 575, 576, 577, 578, 579, 580, 582, 586, 587, 588, 589, 590, 591, 593, 594, 602, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 639, 641, 642, 643, 644, 645, 646, 647, 648, 650, 652, 653, 654, 656, 657, 658, 659, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 703, 706, 709, 710, 712, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 731, 734, 735, 736, 737, 741, 742, 745, 746, 747, 748, 749, 750, 751, 752, 757, 759, 760, 764, 769, 770, 776, 778, 779, 780, 785, 786, 787, 788, 791, 794, 796, 798, 800, 801, 802, 803, 804, 807, 808, 809, 810, 812, 815, 816, 817, 820, 821, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 842, 850, 851, 852, 855, 856, 858, 863, 864, 865, 867, 869, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 888, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 918, 922, 924, 926, 927, 928, 929, 930, 932, 934, 939, 940, 941, 942, 945, 946, 947, 948, 949, 951, 954, 955, 957, 958, 960, 961, 970, 971, 972, 973, 974, 975, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 990, 991, 993, 1002, 1009, 1010], "column_0": [1, 136, 223, 255], "register_dataframe_namespac": [1, 67, 68, 69], "split": [1, 66, 173, 255, 513, 514, 954, 955], "splitfram": [1, 66], "df": [1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 50, 51, 66, 67, 70, 90, 91, 92, 93, 94, 95, 96, 97, 103, 113, 123, 125, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 572, 575, 576, 577, 578, 579, 580, 582, 586, 587, 588, 589, 590, 591, 593, 594, 602, 635, 674, 675, 681, 684, 687, 696, 700, 703, 724, 725, 734, 786, 851, 942, 949, 954, 955, 980, 1002, 1010], "_df": [1, 66], "by_alternate_row": 1, "list": [1, 2, 30, 31, 38, 50, 54, 65, 66, 68, 72, 90, 92, 93, 94, 96, 97, 99, 101, 102, 103, 104, 105, 107, 111, 113, 114, 123, 124, 125, 127, 130, 140, 143, 146, 147, 148, 152, 157, 159, 160, 165, 172, 184, 187, 197, 198, 201, 208, 214, 215, 223, 224, 225, 226, 232, 235, 236, 255, 263, 285, 359, 365, 374, 426, 437, 438, 451, 461, 462, 464, 465, 466, 467, 468, 469, 471, 472, 473, 487, 488, 499, 512, 525, 526, 531, 535, 549, 550, 553, 554, 561, 565, 573, 574, 589, 590, 602, 621, 622, 624, 626, 630, 633, 634, 648, 659, 667, 673, 674, 678, 679, 682, 683, 700, 725, 736, 749, 801, 806, 810, 813, 817, 818, 828, 892, 898, 900, 901, 902, 903, 904, 905, 907, 908, 909, 912, 940, 953, 973, 982, 985, 1002, 1010], "with_row_count": [1, 255, 428, 602, 700, 915, 1002], "name": [1, 16, 20, 22, 29, 31, 33, 51, 52, 53, 54, 55, 66, 67, 68, 69, 73, 74, 79, 90, 92, 93, 94, 95, 96, 101, 102, 103, 105, 106, 107, 108, 111, 112, 113, 115, 116, 117, 121, 122, 123, 125, 126, 127, 128, 130, 136, 137, 140, 143, 144, 145, 148, 153, 156, 158, 159, 171, 172, 174, 175, 181, 187, 189, 193, 197, 198, 200, 201, 208, 214, 216, 218, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 255, 264, 269, 357, 377, 389, 419, 427, 436, 438, 451, 455, 488, 499, 525, 526, 528, 545, 546, 548, 550, 552, 553, 554, 555, 556, 558, 561, 566, 572, 573, 576, 579, 581, 583, 584, 585, 586, 589, 590, 591, 602, 616, 621, 622, 623, 626, 633, 639, 640, 648, 656, 658, 659, 667, 672, 673, 674, 675, 678, 680, 681, 682, 700, 703, 706, 737, 749, 869, 892, 897, 939, 940, 948, 966, 968, 979, 980, 984, 1002, 1009, 1010], "n": [1, 12, 15, 23, 34, 38, 40, 52, 53, 66, 67, 68, 69, 74, 99, 100, 102, 103, 113, 132, 136, 138, 149, 160, 163, 172, 173, 177, 198, 199, 209, 211, 212, 215, 217, 229, 240, 249, 255, 292, 308, 309, 313, 314, 320, 345, 350, 360, 373, 394, 400, 405, 417, 419, 452, 453, 461, 471, 473, 475, 485, 490, 507, 510, 513, 514, 516, 519, 530, 532, 536, 537, 542, 544, 556, 570, 572, 583, 584, 585, 588, 591, 593, 602, 618, 620, 634, 636, 643, 668, 670, 671, 676, 687, 696, 700, 703, 709, 731, 737, 748, 751, 756, 757, 763, 792, 797, 807, 816, 843, 850, 855, 867, 869, 888, 907, 909, 911, 926, 930, 948, 954, 955, 960, 972, 974, 981, 986, 991, 1002, 1009, 1010], "filter": [1, 66, 105, 113, 114, 118, 145, 168, 169, 170, 237, 255, 496, 515, 543, 568, 602, 623, 627, 637, 684, 700, 914, 1002], "col": [1, 12, 28, 31, 65, 66, 67, 68, 70, 94, 96, 113, 123, 125, 136, 148, 152, 159, 160, 161, 169, 171, 185, 188, 197, 201, 208, 225, 232, 235, 255, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 292, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 360, 363, 364, 365, 366, 367, 370, 371, 375, 376, 377, 378, 380, 381, 383, 384, 385, 388, 389, 390, 391, 392, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 415, 416, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 441, 442, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 520, 521, 523, 524, 525, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 552, 554, 555, 559, 560, 561, 564, 567, 568, 569, 570, 571, 576, 579, 581, 582, 590, 594, 602, 626, 630, 633, 634, 635, 637, 652, 659, 667, 674, 678, 679, 682, 700, 703, 724, 725, 734, 783, 786, 851, 898, 914, 915, 942, 958, 1002, 1010], "0": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 35, 50, 55, 65, 66, 67, 69, 70, 74, 100, 102, 103, 104, 106, 107, 111, 113, 115, 116, 117, 118, 119, 122, 123, 124, 125, 127, 130, 132, 136, 138, 139, 141, 142, 143, 146, 150, 151, 154, 155, 157, 158, 159, 160, 162, 166, 171, 172, 173, 174, 176, 178, 179, 180, 183, 184, 185, 186, 189, 190, 191, 195, 199, 200, 201, 205, 207, 208, 209, 210, 216, 217, 218, 219, 220, 223, 226, 228, 229, 232, 233, 235, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 261, 263, 266, 271, 272, 273, 274, 275, 276, 279, 280, 281, 294, 296, 298, 299, 300, 301, 303, 308, 311, 312, 321, 325, 326, 328, 329, 335, 341, 342, 353, 354, 355, 356, 358, 360, 361, 362, 366, 367, 370, 371, 372, 376, 379, 382, 383, 385, 386, 387, 389, 390, 392, 395, 396, 399, 401, 404, 410, 419, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 441, 442, 444, 446, 447, 448, 449, 450, 452, 453, 454, 457, 458, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 480, 482, 483, 484, 485, 489, 490, 498, 499, 517, 519, 524, 527, 529, 533, 534, 535, 537, 542, 549, 550, 551, 552, 554, 556, 558, 559, 563, 565, 568, 577, 578, 581, 582, 583, 592, 593, 594, 602, 618, 619, 622, 624, 628, 629, 633, 634, 639, 642, 647, 651, 653, 654, 658, 659, 662, 663, 665, 667, 668, 676, 678, 679, 680, 682, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 700, 703, 711, 712, 713, 714, 715, 716, 717, 719, 721, 732, 735, 737, 742, 743, 748, 749, 750, 752, 764, 768, 769, 770, 771, 772, 773, 774, 775, 776, 781, 782, 788, 789, 800, 802, 803, 804, 808, 812, 815, 817, 825, 827, 829, 831, 832, 833, 834, 840, 841, 851, 854, 869, 874, 877, 878, 888, 892, 893, 894, 900, 902, 903, 905, 906, 907, 909, 910, 911, 923, 924, 925, 929, 930, 932, 939, 940, 942, 958, 960, 965, 975, 976, 979, 984, 985, 989, 991, 992, 1002, 1010], "drop": [1, 93, 136, 144, 145, 224, 232, 255, 309, 311, 312, 400, 602, 623, 673, 678, 700, 751, 753, 754, 850, 1002], "aaa": [1, 31, 255, 492, 525, 526, 933], "bbb": [1, 31, 255, 525, 526, 703], "ccc": [1, 31, 255, 525, 526], "ddd": [1, 31, 255, 525, 526], "eee": [1, 31, 255, 703], "fff": 1, "column": [1, 15, 16, 19, 20, 22, 31, 33, 56, 65, 66, 73, 74, 77, 79, 90, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 120, 125, 130, 132, 135, 136, 137, 143, 144, 145, 146, 148, 153, 156, 158, 159, 160, 161, 165, 166, 171, 172, 174, 175, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 200, 201, 202, 208, 209, 210, 214, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 235, 255, 265, 267, 269, 279, 314, 318, 321, 323, 324, 325, 327, 329, 331, 334, 337, 338, 341, 343, 346, 348, 349, 351, 357, 359, 363, 365, 377, 389, 397, 402, 415, 418, 419, 428, 434, 436, 438, 451, 455, 459, 461, 462, 465, 466, 467, 468, 469, 471, 472, 473, 480, 487, 488, 497, 513, 514, 517, 518, 519, 520, 522, 528, 543, 545, 546, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 602, 616, 622, 623, 624, 626, 633, 634, 635, 639, 640, 644, 645, 646, 647, 648, 650, 651, 652, 654, 656, 658, 659, 660, 667, 668, 669, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 684, 700, 703, 707, 708, 749, 759, 760, 761, 764, 766, 767, 771, 773, 776, 778, 781, 784, 785, 788, 790, 791, 793, 795, 796, 798, 806, 847, 852, 865, 868, 892, 898, 920, 938, 954, 955, 958, 959, 960, 961, 963, 970, 979, 980, 1002, 1010], "txt": [1, 12, 113], "utf8": [1, 10, 18, 56, 75, 93, 97, 102, 103, 113, 122, 124, 127, 146, 147, 148, 154, 200, 218, 255, 343, 346, 406, 428, 491, 495, 498, 499, 501, 502, 511, 512, 513, 514, 517, 518, 519, 520, 522, 553, 555, 602, 624, 626, 658, 700, 703, 790, 793, 839, 856, 932, 936, 939, 940, 942, 943, 952, 953, 954, 955, 958, 959, 960, 961, 963, 1002], "register_lazyframe_namespac": [1, 66, 67, 69], "dtypeoper": [1, 68], "ldf": [1, 68, 682, 683, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695], "_ldf": [1, 68], "upcast_integer_typ": [1, 68], "with_column": [1, 12, 68, 130, 161, 188, 255, 262, 269, 280, 294, 295, 297, 298, 299, 304, 307, 309, 339, 343, 346, 353, 367, 370, 371, 372, 376, 377, 380, 383, 385, 386, 387, 389, 392, 401, 425, 427, 428, 442, 444, 448, 451, 452, 453, 454, 458, 492, 496, 499, 502, 505, 507, 508, 511, 513, 514, 515, 524, 527, 535, 537, 544, 547, 549, 552, 555, 561, 565, 575, 590, 594, 602, 635, 652, 700, 703, 734, 786, 851], "tp": [1, 68], "cast": [1, 67, 68, 75, 90, 154, 160, 161, 188, 219, 232, 255, 268, 295, 306, 307, 313, 343, 346, 428, 450, 453, 460, 500, 501, 524, 529, 535, 555, 602, 634, 635, 652, 678, 700, 703, 734, 746, 747, 756, 790, 793, 896, 941, 942, 971, 980, 985, 1002], "int64": [1, 31, 33, 67, 68, 97, 102, 146, 154, 160, 161, 188, 200, 213, 219, 255, 282, 283, 284, 285, 306, 307, 319, 322, 326, 328, 330, 335, 342, 357, 453, 460, 500, 529, 535, 549, 553, 566, 574, 583, 589, 602, 624, 634, 635, 652, 658, 681, 700, 722, 723, 724, 725, 746, 747, 762, 765, 772, 774, 777, 782, 789, 896, 913, 971, 983, 984, 985, 1002], "int8": [1, 68, 100, 132, 154, 255, 306, 307, 529, 583, 602, 746, 747, 751, 875, 899, 971, 989, 1002], "int16": [1, 68, 306, 307, 529, 602, 703, 746, 747, 875, 971, 981, 1002], "int32": [1, 68, 90, 93, 97, 124, 125, 160, 161, 173, 255, 294, 324, 351, 535, 583, 602, 634, 635, 700, 703, 767, 798, 874, 985, 1002], "b": [1, 27, 28, 30, 32, 35, 52, 53, 55, 56, 68, 73, 75, 90, 92, 93, 94, 95, 96, 97, 106, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 168, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 262, 264, 268, 269, 281, 286, 294, 295, 302, 310, 311, 312, 357, 361, 362, 363, 365, 368, 372, 374, 376, 377, 379, 382, 383, 384, 385, 386, 387, 389, 393, 397, 401, 406, 408, 427, 443, 449, 451, 453, 455, 458, 463, 480, 486, 488, 497, 500, 507, 528, 539, 541, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 565, 566, 567, 568, 569, 572, 575, 576, 577, 578, 579, 580, 582, 584, 585, 588, 589, 590, 591, 593, 602, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 636, 639, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 703, 709, 734, 750, 752, 800, 801, 809, 821, 828, 839, 851, 897, 913, 938, 941, 948, 970, 984, 988, 1002, 1009], "4": [1, 15, 23, 27, 28, 30, 31, 32, 35, 50, 52, 53, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 113, 119, 120, 121, 127, 130, 136, 137, 138, 139, 142, 145, 148, 149, 150, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 179, 181, 184, 185, 187, 188, 189, 190, 194, 198, 203, 208, 211, 212, 213, 214, 215, 216, 221, 222, 223, 225, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 266, 268, 269, 281, 282, 283, 284, 286, 292, 294, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 318, 322, 329, 330, 331, 337, 338, 340, 341, 342, 343, 346, 347, 348, 349, 351, 353, 358, 361, 362, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 386, 387, 389, 392, 393, 394, 399, 400, 401, 402, 405, 413, 414, 417, 422, 425, 427, 428, 442, 444, 448, 450, 451, 453, 454, 455, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 478, 479, 482, 486, 487, 488, 489, 492, 502, 503, 505, 506, 507, 509, 511, 513, 514, 517, 525, 526, 527, 528, 530, 531, 532, 535, 536, 537, 544, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 565, 567, 568, 572, 574, 575, 576, 577, 578, 579, 580, 588, 589, 590, 591, 593, 594, 602, 616, 618, 619, 620, 623, 625, 626, 627, 628, 629, 631, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 652, 653, 654, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 703, 709, 712, 719, 722, 723, 724, 731, 735, 736, 738, 748, 750, 752, 764, 765, 771, 773, 776, 777, 778, 779, 780, 781, 785, 787, 788, 789, 790, 793, 794, 795, 796, 808, 809, 816, 817, 820, 821, 823, 828, 831, 832, 833, 834, 838, 850, 851, 852, 855, 863, 864, 867, 875, 881, 888, 889, 890, 892, 894, 898, 903, 905, 906, 907, 908, 909, 911, 913, 923, 927, 928, 933, 943, 944, 946, 947, 950, 952, 954, 955, 958, 970, 972, 973, 974, 981, 984, 985, 986, 993, 1002, 1010], "c": [1, 27, 28, 30, 32, 35, 52, 53, 55, 56, 66, 68, 73, 75, 93, 95, 97, 106, 113, 123, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 152, 153, 154, 155, 157, 158, 159, 160, 163, 165, 166, 173, 174, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 193, 195, 196, 197, 199, 200, 201, 204, 205, 207, 208, 209, 210, 211, 213, 217, 218, 219, 220, 222, 223, 226, 227, 229, 230, 232, 235, 238, 239, 240, 241, 242, 243, 245, 248, 249, 255, 262, 269, 377, 389, 397, 406, 408, 451, 453, 480, 513, 517, 539, 541, 545, 546, 548, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 567, 568, 569, 572, 575, 576, 577, 578, 579, 580, 588, 590, 591, 593, 602, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 633, 634, 639, 642, 648, 651, 653, 656, 657, 658, 659, 663, 666, 667, 672, 675, 678, 679, 682, 685, 686, 687, 688, 689, 690, 692, 695, 696, 700, 703, 750, 821, 839, 954, 958, 988, 1002], "5": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 32, 35, 53, 55, 65, 66, 68, 69, 70, 73, 90, 93, 94, 95, 96, 97, 99, 103, 119, 125, 136, 138, 139, 142, 148, 149, 150, 151, 154, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 169, 171, 172, 175, 176, 177, 179, 181, 184, 185, 187, 189, 190, 191, 194, 198, 203, 208, 211, 212, 213, 214, 215, 218, 221, 226, 228, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 262, 263, 266, 292, 294, 295, 296, 297, 298, 299, 308, 309, 310, 314, 315, 319, 339, 341, 342, 343, 346, 348, 356, 357, 360, 366, 367, 370, 371, 373, 374, 377, 380, 383, 385, 386, 387, 389, 392, 394, 399, 401, 402, 405, 410, 416, 417, 442, 444, 450, 451, 452, 453, 455, 457, 458, 462, 463, 464, 465, 466, 468, 472, 474, 476, 482, 488, 493, 501, 502, 505, 506, 524, 527, 528, 530, 532, 536, 537, 547, 548, 551, 552, 554, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 572, 574, 575, 576, 577, 578, 579, 580, 582, 588, 590, 591, 593, 602, 618, 619, 620, 625, 626, 627, 628, 629, 631, 633, 634, 635, 636, 638, 640, 641, 642, 643, 646, 647, 648, 653, 661, 662, 663, 666, 667, 668, 669, 670, 671, 677, 678, 680, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 703, 709, 712, 716, 719, 731, 734, 736, 738, 744, 748, 749, 750, 751, 752, 757, 758, 759, 760, 761, 762, 786, 788, 789, 790, 791, 793, 795, 796, 804, 807, 816, 817, 820, 821, 851, 852, 855, 858, 867, 874, 875, 881, 888, 889, 890, 892, 893, 894, 898, 900, 901, 902, 904, 905, 908, 911, 913, 923, 929, 934, 942, 943, 947, 972, 986, 989, 993, 1002, 1010], "6": [1, 27, 28, 30, 31, 32, 33, 34, 35, 53, 55, 66, 68, 73, 90, 93, 94, 95, 96, 136, 140, 143, 144, 145, 146, 148, 149, 152, 153, 155, 156, 157, 158, 160, 161, 163, 165, 166, 167, 169, 171, 172, 174, 178, 179, 180, 181, 183, 186, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 204, 205, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 225, 226, 227, 228, 229, 230, 232, 233, 240, 248, 249, 255, 262, 266, 269, 286, 294, 306, 307, 310, 314, 336, 338, 341, 352, 361, 362, 368, 373, 374, 376, 394, 402, 450, 456, 458, 459, 462, 465, 466, 467, 468, 469, 471, 472, 473, 476, 488, 493, 497, 502, 505, 506, 527, 530, 532, 544, 545, 547, 559, 560, 561, 565, 568, 575, 590, 602, 620, 621, 622, 623, 624, 625, 626, 627, 630, 631, 634, 635, 636, 638, 639, 641, 643, 644, 648, 651, 653, 656, 658, 659, 661, 662, 663, 666, 667, 670, 671, 674, 675, 677, 678, 680, 681, 687, 695, 696, 700, 703, 709, 736, 742, 746, 747, 752, 783, 796, 817, 852, 881, 894, 898, 903, 905, 907, 909, 913, 934, 938, 943, 947, 971, 1002, 1009, 1010], "7": [1, 27, 28, 30, 31, 32, 33, 34, 35, 55, 66, 68, 73, 74, 119, 140, 141, 142, 143, 144, 146, 148, 152, 153, 155, 160, 161, 163, 165, 167, 174, 178, 179, 180, 183, 186, 189, 191, 193, 195, 197, 199, 200, 201, 204, 205, 207, 209, 210, 211, 212, 217, 218, 219, 220, 226, 227, 228, 229, 230, 255, 262, 266, 284, 307, 314, 318, 337, 339, 340, 347, 349, 351, 358, 373, 376, 394, 428, 450, 458, 462, 466, 472, 488, 520, 530, 532, 547, 559, 560, 568, 575, 590, 602, 621, 622, 624, 626, 630, 634, 635, 636, 638, 639, 643, 651, 654, 656, 658, 659, 670, 671, 675, 681, 700, 703, 716, 724, 757, 761, 767, 786, 787, 794, 796, 840, 875, 898, 908, 961, 1002, 1010], "float32": [1, 28, 68, 154, 217, 218, 255, 574, 700, 703, 824, 874, 1002], "lazi": [1, 50, 51, 52, 53, 55, 68, 73, 100, 113, 125, 132, 175, 188, 255, 269, 570, 583, 602, 613, 639, 640, 679, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 700, 1009, 1010], "i16": [1, 68, 480, 602, 703, 875, 981, 1002, 1010], "i32": [1, 68, 90, 93, 97, 124, 125, 201, 255, 294, 324, 351, 480, 506, 594, 602, 659, 700, 767, 798, 874, 947, 1002, 1010], "f32": [1, 68, 145, 217, 255, 401, 458, 480, 565, 602, 623, 700, 703, 851, 874, 894, 1002], "i64": [1, 15, 19, 50, 52, 66, 67, 68, 69, 73, 90, 92, 93, 94, 95, 96, 97, 113, 136, 137, 138, 139, 140, 143, 145, 146, 148, 149, 151, 152, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 174, 175, 178, 181, 183, 187, 188, 189, 190, 193, 194, 195, 196, 199, 201, 204, 205, 207, 208, 210, 211, 212, 214, 220, 222, 223, 224, 225, 226, 227, 228, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 245, 248, 249, 255, 262, 264, 268, 269, 282, 283, 284, 285, 286, 292, 295, 297, 298, 299, 304, 305, 306, 307, 309, 310, 319, 320, 322, 326, 328, 330, 335, 342, 345, 357, 360, 362, 363, 364, 365, 367, 368, 373, 374, 375, 376, 377, 380, 383, 385, 386, 387, 389, 391, 394, 400, 401, 402, 403, 404, 405, 407, 409, 411, 412, 413, 414, 415, 416, 417, 420, 424, 426, 427, 442, 443, 444, 451, 452, 453, 454, 455, 456, 458, 459, 460, 462, 463, 475, 477, 478, 480, 481, 482, 486, 487, 488, 507, 508, 525, 526, 527, 528, 529, 530, 531, 532, 536, 537, 538, 540, 543, 545, 547, 549, 552, 553, 555, 559, 560, 561, 564, 565, 566, 567, 568, 572, 574, 575, 576, 579, 582, 586, 587, 590, 591, 594, 602, 616, 618, 620, 622, 623, 626, 627, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 648, 650, 652, 653, 656, 657, 659, 661, 662, 666, 667, 669, 670, 671, 672, 673, 674, 675, 678, 680, 682, 683, 684, 686, 687, 688, 689, 692, 695, 696, 700, 703, 709, 710, 722, 723, 724, 725, 731, 734, 738, 741, 744, 745, 746, 747, 750, 762, 763, 765, 772, 774, 777, 782, 789, 792, 807, 809, 810, 816, 820, 828, 850, 851, 852, 855, 863, 864, 865, 867, 869, 880, 897, 898, 901, 904, 908, 911, 914, 915, 918, 922, 923, 927, 928, 970, 972, 973, 974, 980, 986, 987, 990, 993, 1002, 1009, 1010], "register_series_namespac": [1, 66, 67, 68], "math": [1, 69, 742, 924, 975, 1002], "mathshortcut": [1, 69], "": [1, 28, 31, 50, 53, 69, 90, 97, 102, 103, 114, 127, 137, 143, 145, 147, 148, 159, 160, 166, 174, 175, 187, 189, 194, 195, 201, 208, 212, 216, 222, 224, 225, 226, 232, 255, 320, 343, 346, 357, 390, 405, 406, 413, 414, 417, 437, 443, 446, 447, 451, 452, 460, 464, 488, 492, 498, 499, 502, 503, 505, 507, 509, 511, 512, 514, 517, 518, 519, 522, 524, 525, 526, 545, 546, 550, 553, 556, 561, 566, 569, 570, 576, 579, 586, 589, 590, 602, 616, 622, 623, 626, 633, 634, 640, 659, 667, 672, 673, 674, 678, 684, 700, 703, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 731, 732, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 757, 763, 779, 780, 787, 790, 793, 794, 801, 803, 804, 807, 808, 809, 810, 812, 815, 816, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 850, 852, 855, 856, 858, 863, 864, 865, 867, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 888, 889, 890, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 914, 915, 916, 918, 922, 923, 924, 925, 927, 928, 930, 933, 934, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 950, 951, 952, 955, 956, 957, 958, 959, 960, 961, 963, 965, 968, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 1002], "_": [1, 65, 69, 189, 216, 255, 499, 513, 940, 954, 979, 1002], "squar": [1, 69, 237, 390, 489, 602, 684, 841, 929, 1002], "cube": [1, 69, 454, 602], "s2": [1, 121, 154, 255, 709, 736, 752, 828, 840, 869, 881, 913, 984, 993, 1002], "renam": [1, 93, 102, 103, 201, 232, 235, 255, 264, 427, 439, 526, 586, 589, 602, 659, 678, 682, 700, 968, 980, 1002], "n2": [1, 419], "in_plac": [1, 165, 206, 230, 255, 895, 897, 921, 928, 1002], "true": [1, 6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 50, 52, 54, 70, 72, 73, 74, 75, 90, 91, 95, 97, 99, 100, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 130, 132, 133, 135, 137, 138, 139, 142, 151, 154, 155, 157, 158, 159, 160, 161, 166, 168, 169, 170, 172, 175, 176, 179, 184, 185, 187, 189, 190, 197, 198, 199, 201, 208, 214, 218, 219, 222, 223, 224, 225, 226, 228, 232, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 263, 265, 266, 267, 268, 269, 280, 288, 294, 303, 304, 305, 306, 307, 313, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 370, 371, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 392, 398, 415, 418, 419, 425, 448, 450, 460, 470, 475, 480, 485, 487, 488, 492, 494, 496, 500, 501, 506, 512, 513, 515, 517, 518, 519, 522, 525, 526, 531, 538, 541, 544, 545, 546, 547, 549, 550, 556, 557, 568, 583, 589, 594, 602, 616, 618, 619, 620, 625, 627, 629, 633, 634, 635, 639, 640, 642, 644, 648, 653, 659, 663, 664, 665, 667, 672, 673, 674, 678, 683, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 700, 703, 707, 708, 709, 710, 720, 727, 732, 736, 737, 756, 758, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 794, 795, 796, 797, 798, 800, 802, 803, 804, 810, 814, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 841, 865, 868, 881, 889, 890, 896, 906, 913, 926, 928, 933, 935, 937, 941, 942, 947, 953, 954, 956, 958, 959, 960, 963, 983, 984, 992, 993, 1002, 1009, 1010], "s3": [1, 30, 105, 114, 118, 255, 869, 1002], "n3": 1, "8": [1, 27, 28, 30, 32, 33, 34, 35, 46, 50, 55, 62, 64, 65, 66, 68, 69, 73, 119, 123, 125, 136, 140, 141, 142, 143, 144, 145, 146, 148, 152, 153, 155, 158, 163, 165, 174, 178, 179, 180, 183, 191, 193, 195, 197, 199, 200, 201, 204, 205, 207, 209, 210, 211, 212, 217, 218, 219, 220, 226, 227, 229, 230, 232, 255, 266, 268, 281, 302, 304, 307, 308, 311, 312, 314, 376, 393, 400, 401, 444, 450, 454, 455, 462, 463, 466, 467, 469, 471, 473, 480, 486, 488, 503, 509, 517, 528, 532, 544, 548, 551, 556, 557, 558, 560, 561, 565, 567, 572, 575, 576, 577, 578, 579, 580, 588, 590, 591, 593, 602, 621, 622, 623, 624, 626, 630, 636, 639, 643, 644, 653, 656, 658, 659, 670, 671, 675, 678, 681, 700, 703, 748, 767, 817, 840, 850, 851, 888, 892, 898, 900, 903, 905, 907, 909, 944, 950, 958, 1002, 1010], "9": [1, 27, 28, 30, 32, 35, 50, 55, 65, 73, 136, 141, 142, 154, 161, 163, 167, 201, 211, 226, 227, 230, 232, 248, 255, 262, 266, 268, 281, 302, 304, 307, 311, 312, 314, 318, 337, 348, 349, 376, 381, 389, 393, 400, 412, 415, 450, 462, 464, 466, 470, 472, 482, 486, 499, 520, 532, 547, 554, 559, 560, 602, 635, 636, 638, 643, 659, 670, 675, 678, 695, 700, 750, 761, 771, 773, 781, 787, 788, 794, 795, 828, 840, 850, 865, 898, 900, 906, 908, 910, 923, 940, 961, 1002], "27": [1, 69, 248, 307, 324, 338, 351, 602, 695, 1002, 1010], "16": [1, 31, 43, 59, 67, 160, 161, 232, 255, 304, 307, 376, 444, 454, 466, 506, 547, 559, 564, 565, 568, 602, 634, 635, 663, 678, 700, 703, 787, 794, 888, 924, 947, 975, 1002], "64": [1, 42, 45, 61, 67, 69, 444, 454, 602, 665, 700, 888, 1002], "25": [1, 31, 69, 74, 97, 125, 130, 142, 160, 161, 175, 228, 232, 255, 309, 324, 340, 347, 351, 537, 570, 602, 634, 635, 640, 646, 676, 678, 700, 703, 750, 751, 787, 794, 800, 817, 888, 892, 1002], "125": [1, 31, 69, 255, 262, 602, 888, 1002], "arg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 188, 219, 255, 453, 550, 569, 602, 652, 700, 710, 983, 984, 1002], "ani": [2, 3, 4, 5, 8, 28, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 71, 90, 91, 92, 93, 94, 95, 96, 102, 103, 105, 106, 107, 111, 113, 114, 115, 117, 122, 124, 125, 127, 133, 136, 141, 145, 149, 151, 152, 154, 171, 172, 173, 187, 188, 197, 198, 214, 215, 218, 219, 224, 226, 255, 262, 266, 269, 294, 341, 353, 362, 367, 370, 371, 381, 392, 397, 401, 425, 426, 428, 439, 442, 444, 448, 450, 451, 453, 462, 464, 476, 506, 517, 518, 519, 522, 527, 531, 537, 544, 545, 547, 556, 567, 574, 594, 602, 623, 629, 652, 673, 700, 709, 710, 752, 788, 809, 828, 840, 847, 851, 875, 898, 900, 912, 915, 947, 958, 959, 960, 963, 973, 982, 983, 984, 1002, 1009, 1010], "kwarg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 141, 188, 219, 255, 453, 602, 652, 700, 984, 1002, 1009], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 602, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 968, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 1002, 1009], "width": [2, 24, 31, 102, 103, 255, 282, 283, 284, 285, 503, 509, 524, 700, 722, 723, 724, 725, 944, 950, 965], "int": [2, 12, 13, 15, 23, 24, 28, 31, 35, 39, 52, 55, 67, 93, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 123, 124, 125, 126, 127, 128, 129, 132, 136, 137, 138, 147, 150, 151, 153, 162, 163, 164, 166, 171, 172, 173, 175, 177, 178, 179, 183, 184, 185, 195, 197, 199, 203, 204, 205, 207, 209, 210, 211, 212, 217, 220, 222, 226, 229, 231, 233, 240, 249, 255, 262, 286, 292, 297, 298, 299, 308, 309, 354, 355, 356, 360, 361, 362, 368, 372, 373, 394, 398, 400, 404, 405, 413, 414, 417, 418, 419, 450, 452, 453, 454, 458, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 486, 490, 498, 503, 506, 507, 509, 511, 513, 514, 520, 524, 530, 531, 532, 536, 542, 544, 549, 556, 557, 562, 563, 564, 570, 572, 578, 580, 583, 584, 585, 588, 589, 590, 591, 592, 593, 602, 616, 618, 627, 628, 629, 636, 640, 643, 653, 661, 662, 665, 666, 668, 670, 671, 672, 676, 677, 680, 687, 696, 700, 717, 718, 731, 732, 736, 737, 738, 739, 740, 748, 751, 801, 802, 803, 804, 807, 808, 809, 815, 816, 817, 840, 842, 843, 848, 849, 850, 854, 855, 863, 864, 867, 868, 869, 877, 881, 882, 884, 885, 886, 887, 888, 891, 894, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 918, 919, 922, 927, 930, 939, 944, 947, 948, 950, 952, 954, 955, 961, 965, 971, 972, 973, 974, 981, 986, 991, 1002, 1009, 1010], "inner": [2, 47, 56, 75, 124, 174, 227, 255, 282, 283, 284, 285, 310, 406, 535, 602, 639, 675, 681, 700, 722, 723, 724, 725, 752, 856, 985, 1002], "polarsdatatyp": [2, 47, 100, 102, 103, 108, 112, 113, 122, 123, 124, 125, 127, 132, 136, 146, 255, 269, 294, 357, 426, 428, 500, 547, 549, 553, 566, 574, 575, 583, 602, 624, 700, 703, 710, 732, 875, 941, 1002], "pythondatatyp": [2, 47], "null": [2, 28, 30, 52, 65, 73, 93, 102, 103, 113, 118, 135, 137, 138, 142, 145, 151, 154, 155, 167, 174, 179, 180, 186, 189, 191, 204, 205, 208, 209, 210, 214, 219, 222, 225, 227, 229, 232, 238, 255, 264, 268, 269, 279, 286, 288, 297, 298, 299, 302, 304, 307, 309, 311, 312, 319, 322, 326, 328, 330, 335, 342, 354, 355, 356, 357, 360, 361, 362, 363, 368, 376, 383, 384, 385, 386, 387, 393, 400, 403, 404, 407, 413, 418, 419, 428, 449, 452, 459, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 482, 487, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 506, 509, 511, 513, 514, 515, 524, 525, 526, 535, 543, 545, 552, 554, 555, 557, 566, 574, 584, 585, 589, 594, 602, 616, 618, 623, 629, 638, 639, 651, 661, 662, 667, 672, 674, 675, 678, 679, 681, 685, 700, 710, 719, 727, 737, 738, 751, 754, 762, 765, 772, 774, 777, 782, 789, 802, 803, 804, 807, 809, 814, 833, 834, 850, 863, 868, 869, 887, 888, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 913, 918, 919, 923, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 946, 947, 950, 952, 954, 955, 956, 981, 983, 984, 985, 992, 1002, 1009, 1010], "nest": [2, 47, 56, 97, 147, 255, 613, 801, 1002, 1009, 1010], "paramet": [2, 7, 11, 12, 13, 14, 15, 18, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 47, 50, 51, 52, 53, 55, 57, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 171, 172, 173, 174, 175, 177, 179, 181, 182, 184, 185, 187, 188, 189, 191, 193, 194, 195, 197, 198, 199, 201, 202, 204, 205, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 235, 237, 240, 247, 249, 255, 262, 264, 266, 268, 269, 279, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 299, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 320, 336, 339, 340, 341, 343, 345, 346, 347, 350, 352, 353, 354, 355, 356, 357, 360, 362, 363, 367, 368, 369, 370, 371, 372, 373, 376, 377, 381, 390, 392, 394, 397, 398, 399, 400, 401, 404, 405, 406, 413, 414, 415, 417, 418, 419, 420, 421, 425, 426, 427, 428, 442, 444, 448, 450, 451, 452, 453, 454, 455, 457, 458, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 530, 531, 536, 537, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 566, 568, 569, 570, 572, 573, 574, 575, 576, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 602, 616, 618, 620, 622, 623, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 639, 640, 643, 644, 648, 649, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 684, 687, 694, 696, 700, 703, 706, 709, 710, 719, 725, 726, 727, 728, 729, 730, 731, 732, 734, 737, 738, 739, 740, 744, 745, 746, 747, 748, 749, 750, 751, 752, 756, 757, 758, 763, 783, 786, 787, 788, 790, 792, 793, 794, 797, 800, 801, 802, 803, 804, 807, 808, 809, 810, 815, 816, 817, 820, 821, 830, 836, 837, 841, 843, 847, 848, 849, 850, 851, 854, 855, 856, 863, 864, 865, 867, 868, 869, 870, 875, 888, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 922, 926, 927, 928, 930, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 965, 966, 968, 972, 973, 979, 980, 981, 982, 983, 984, 986, 987, 990, 991, 992, 993, 1002, 1009], "The": [2, 18, 29, 31, 35, 47, 50, 54, 57, 65, 71, 90, 92, 93, 94, 96, 99, 102, 104, 111, 113, 129, 136, 144, 146, 158, 159, 160, 161, 162, 167, 172, 175, 182, 187, 197, 198, 201, 225, 228, 232, 235, 237, 255, 286, 287, 288, 289, 318, 331, 336, 337, 340, 343, 347, 348, 357, 360, 368, 372, 418, 426, 451, 458, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 482, 485, 491, 494, 495, 500, 502, 503, 504, 509, 510, 516, 517, 524, 553, 566, 570, 584, 585, 586, 589, 594, 595, 596, 598, 602, 603, 604, 608, 609, 610, 634, 635, 636, 638, 640, 643, 644, 649, 653, 659, 665, 674, 678, 682, 684, 700, 710, 726, 727, 728, 737, 761, 778, 783, 784, 787, 790, 794, 795, 807, 815, 820, 868, 894, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 923, 926, 932, 935, 936, 941, 943, 944, 945, 950, 951, 957, 958, 965, 994, 996, 998, 1002, 1003, 1006, 1007, 1008, 1010], "fix": [2, 106, 123, 125, 350, 465, 466, 467, 468, 469, 471, 472, 473, 602, 797], "size": [2, 13, 35, 102, 103, 123, 124, 125, 127, 129, 147, 160, 226, 255, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 549, 584, 585, 602, 634, 665, 700, 801, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 1002, 1010], "length": [2, 12, 73, 100, 113, 123, 132, 160, 161, 207, 255, 308, 340, 347, 414, 419, 437, 464, 465, 466, 467, 468, 469, 471, 472, 473, 486, 503, 505, 509, 511, 524, 549, 583, 584, 585, 602, 634, 635, 653, 666, 700, 736, 748, 749, 757, 787, 794, 842, 864, 869, 886, 892, 900, 901, 902, 903, 904, 905, 907, 908, 909, 927, 944, 946, 950, 952, 965, 1002], "datatyp": [2, 28, 33, 47, 63, 90, 92, 93, 94, 96, 98, 106, 108, 112, 127, 146, 148, 154, 200, 255, 294, 357, 402, 480, 497, 535, 553, 566, 574, 602, 613, 626, 658, 681, 700, 710, 732, 750, 830, 835, 837, 839, 852, 920, 938, 985, 1002], "valu": [2, 8, 11, 12, 15, 26, 28, 31, 33, 47, 48, 50, 54, 56, 63, 65, 73, 75, 93, 95, 102, 103, 104, 113, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 133, 135, 136, 137, 142, 145, 149, 150, 151, 155, 158, 160, 161, 162, 163, 167, 171, 172, 175, 177, 178, 179, 180, 181, 183, 185, 187, 189, 190, 191, 193, 197, 198, 199, 204, 205, 208, 209, 210, 211, 214, 215, 219, 222, 226, 227, 228, 229, 238, 239, 241, 242, 243, 245, 246, 255, 261, 262, 263, 265, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 304, 307, 308, 309, 311, 312, 314, 318, 331, 337, 348, 353, 354, 355, 356, 358, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 382, 383, 385, 386, 387, 388, 391, 392, 393, 395, 396, 399, 400, 403, 404, 405, 407, 409, 410, 411, 413, 416, 417, 420, 422, 424, 425, 426, 428, 429, 430, 431, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 457, 458, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 482, 483, 484, 485, 487, 488, 489, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 507, 508, 511, 513, 514, 515, 524, 527, 529, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 544, 546, 548, 552, 555, 557, 559, 560, 561, 567, 568, 573, 574, 576, 577, 578, 579, 580, 582, 583, 584, 585, 590, 594, 602, 616, 623, 628, 629, 634, 635, 637, 638, 640, 645, 646, 647, 648, 650, 651, 654, 656, 661, 662, 667, 668, 669, 672, 675, 676, 681, 685, 686, 688, 689, 690, 692, 693, 700, 703, 705, 707, 708, 709, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 727, 728, 729, 730, 734, 735, 738, 739, 740, 742, 743, 748, 749, 750, 751, 753, 754, 757, 761, 778, 784, 795, 801, 802, 803, 804, 807, 808, 809, 812, 814, 815, 816, 817, 818, 820, 821, 823, 825, 826, 828, 829, 831, 832, 833, 834, 838, 843, 845, 846, 849, 850, 853, 854, 855, 857, 859, 860, 861, 863, 867, 870, 875, 876, 877, 879, 880, 882, 884, 885, 886, 887, 888, 891, 892, 893, 894, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 918, 919, 923, 924, 925, 926, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 946, 948, 949, 952, 954, 955, 956, 965, 971, 972, 973, 974, 975, 976, 984, 985, 988, 990, 992, 993, 1002, 1010], "within": [2, 47, 120, 121, 160, 161, 175, 228, 255, 458, 488, 602, 634, 635, 640, 700, 1009], "method": [2, 3, 4, 5, 8, 27, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 73, 74, 91, 102, 103, 106, 122, 130, 133, 145, 159, 167, 172, 185, 191, 197, 198, 224, 232, 247, 255, 262, 265, 266, 343, 346, 353, 360, 367, 370, 371, 376, 392, 425, 442, 444, 448, 450, 454, 457, 458, 465, 466, 467, 468, 469, 471, 472, 473, 520, 527, 537, 539, 544, 556, 581, 583, 595, 596, 598, 602, 603, 604, 607, 608, 609, 610, 613, 623, 638, 654, 673, 678, 694, 700, 710, 790, 793, 807, 820, 893, 894, 905, 961, 985, 994, 996, 998, 1002, 1003, 1006, 1007, 1008], "attribut": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 122, 255, 595, 596, 598, 603, 604, 608, 609, 610, 700, 994, 996, 998, 1003, 1006, 1007, 1008], "A": [5, 28, 31, 50, 53, 72, 74, 97, 102, 103, 104, 111, 113, 129, 130, 154, 160, 175, 189, 198, 214, 226, 227, 228, 232, 255, 261, 314, 319, 322, 326, 328, 330, 335, 342, 353, 360, 370, 371, 379, 382, 383, 385, 392, 419, 425, 426, 427, 437, 448, 455, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 492, 493, 498, 499, 501, 507, 508, 524, 528, 554, 565, 569, 602, 634, 640, 656, 675, 678, 700, 703, 757, 762, 765, 772, 774, 777, 782, 789, 807, 900, 901, 902, 904, 907, 908, 909, 933, 934, 939, 940, 942, 948, 949, 965, 1002, 1009], "encod": [5, 64, 102, 103, 113, 288, 369, 494, 602, 727, 935], "set": [5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 23, 24, 26, 28, 30, 31, 32, 33, 34, 65, 66, 70, 74, 91, 93, 96, 100, 102, 103, 106, 107, 111, 113, 115, 116, 117, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 135, 140, 145, 159, 160, 161, 162, 172, 175, 181, 199, 201, 207, 216, 223, 224, 226, 232, 255, 269, 350, 372, 381, 414, 418, 419, 428, 453, 464, 465, 466, 467, 468, 469, 471, 472, 473, 475, 481, 485, 486, 504, 510, 511, 516, 517, 518, 519, 522, 549, 583, 584, 585, 589, 594, 602, 613, 621, 623, 625, 633, 634, 635, 639, 640, 644, 648, 659, 664, 665, 666, 673, 678, 681, 684, 700, 709, 710, 797, 815, 828, 864, 868, 869, 875, 900, 901, 902, 903, 904, 905, 907, 908, 909, 911, 915, 922, 926, 927, 945, 951, 952, 957, 958, 959, 960, 963, 983, 1002, 1010], "string": [5, 7, 9, 12, 13, 14, 18, 28, 31, 33, 34, 38, 50, 56, 64, 74, 75, 97, 102, 103, 113, 122, 123, 124, 127, 130, 131, 137, 154, 158, 159, 160, 161, 175, 201, 208, 217, 222, 226, 228, 232, 235, 255, 262, 290, 295, 336, 340, 343, 346, 347, 359, 365, 369, 377, 406, 428, 451, 453, 465, 466, 467, 468, 469, 471, 472, 473, 488, 491, 492, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 524, 545, 546, 550, 552, 554, 555, 561, 569, 576, 579, 586, 589, 590, 602, 616, 625, 632, 633, 634, 635, 640, 659, 667, 672, 678, 681, 682, 700, 703, 729, 734, 783, 787, 790, 793, 794, 806, 821, 856, 931, 932, 933, 937, 938, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 964, 965, 981, 1002, 1010], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 369, 602, 632, 655, 700], "activ": [6, 10, 16, 17, 19, 20, 21, 22, 25, 401, 499, 851, 940], "bool": [6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 35, 65, 70, 72, 73, 74, 75, 90, 91, 95, 97, 100, 102, 103, 107, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 135, 137, 138, 139, 151, 152, 154, 155, 157, 158, 159, 160, 161, 165, 166, 168, 169, 170, 175, 187, 189, 199, 202, 206, 208, 214, 218, 219, 222, 223, 224, 225, 228, 230, 232, 239, 241, 242, 245, 255, 265, 266, 267, 268, 269, 279, 285, 288, 294, 303, 304, 305, 306, 307, 308, 323, 339, 341, 352, 353, 354, 355, 356, 370, 371, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 392, 398, 401, 415, 418, 420, 425, 426, 432, 433, 434, 435, 448, 450, 458, 460, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 477, 480, 485, 487, 488, 492, 494, 496, 506, 507, 508, 512, 513, 515, 517, 518, 519, 522, 526, 538, 541, 544, 545, 546, 547, 549, 550, 556, 559, 574, 583, 589, 602, 616, 618, 620, 625, 627, 629, 630, 633, 634, 635, 639, 640, 644, 648, 653, 660, 663, 664, 665, 667, 672, 673, 674, 678, 686, 688, 689, 692, 700, 703, 707, 708, 709, 710, 719, 725, 727, 732, 737, 744, 745, 746, 747, 748, 749, 766, 786, 788, 800, 802, 803, 804, 810, 814, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 848, 849, 851, 865, 868, 870, 889, 890, 892, 894, 895, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 913, 915, 916, 921, 926, 928, 933, 935, 937, 947, 948, 949, 953, 954, 956, 958, 959, 960, 963, 982, 983, 984, 987, 990, 992, 1002, 1009], "decim": [6, 28, 31, 255, 474, 520, 602, 910, 961, 1002], "temporari": 6, "remov": [6, 8, 143, 227, 255, 269, 357, 427, 504, 510, 516, 517, 519, 566, 602, 622, 675, 700, 945, 951, 957, 958, 960], "later": 6, "onc": [6, 53, 102, 103, 106, 129, 135, 136, 199, 235, 255, 269, 293, 475, 602, 617, 682, 700, 710, 911, 1002], "stabil": 6, "happen": 6, "being": [6, 102, 103, 113, 118, 226, 227, 255, 269, 308, 340, 465, 466, 467, 468, 469, 471, 472, 473, 565, 602, 675, 700, 748, 787, 817, 892, 1002, 1010], "consid": [6, 102, 103, 113, 118, 136, 145, 155, 181, 224, 226, 227, 255, 269, 297, 298, 299, 308, 340, 465, 466, 467, 468, 469, 471, 472, 473, 559, 568, 602, 623, 636, 643, 648, 673, 675, 684, 700, 710, 738, 739, 740, 748, 787, 817, 830, 892, 913, 914, 915, 1002], "break": [6, 118, 226, 227, 255, 269, 308, 340, 465, 466, 467, 468, 469, 471, 472, 473, 602, 675, 700, 748, 787, 817, 892, 1002], "chang": [6, 26, 65, 102, 103, 118, 226, 227, 228, 255, 269, 308, 309, 340, 452, 465, 466, 467, 468, 469, 471, 472, 473, 602, 675, 700, 748, 787, 817, 888, 892, 921, 1002], "current": [6, 9, 26, 52, 91, 97, 104, 131, 135, 138, 139, 174, 255, 340, 419, 452, 602, 613, 618, 619, 639, 700, 703, 737, 741, 787, 888, 1002, 1009], "alpha": [6, 72, 269, 354, 355, 356, 602, 620, 625, 627, 653, 663, 700, 802, 803, 804, 1002], "state": [6, 8, 72, 83, 131, 559, 613, 620, 625, 627, 653, 663, 700], "cfg": [7, 8, 9, 15, 133], "previous": 7, "save": [7, 339, 613, 786], "share": [7, 56, 147, 255, 801, 1002], "option": [7, 8, 9, 26, 30, 31, 39, 65, 74, 102, 105, 106, 107, 111, 114, 115, 117, 119, 122, 123, 124, 125, 126, 127, 128, 171, 175, 181, 214, 218, 223, 255, 390, 464, 465, 466, 467, 468, 469, 471, 472, 473, 485, 511, 574, 589, 594, 602, 613, 639, 640, 648, 700, 703, 837, 841, 900, 901, 902, 903, 904, 905, 907, 908, 909, 926, 952, 980, 1002], "json": [7, 9, 33, 34, 109, 110, 116, 255, 369, 440, 500, 501, 602, 613, 632, 655, 681, 700, 941, 942], "produc": [7, 124, 125, 127, 399, 436, 575, 644, 700, 849], "reset": [8, 133], "default": [8, 13, 26, 27, 28, 30, 31, 32, 33, 34, 35, 65, 70, 73, 74, 90, 92, 93, 94, 95, 96, 97, 100, 102, 103, 106, 111, 113, 122, 123, 124, 125, 126, 127, 130, 132, 145, 147, 159, 161, 162, 172, 174, 175, 181, 187, 189, 197, 198, 199, 209, 216, 224, 226, 229, 233, 255, 295, 339, 352, 354, 355, 356, 372, 414, 418, 419, 421, 428, 446, 447, 452, 458, 465, 466, 467, 468, 469, 471, 472, 473, 475, 481, 490, 498, 504, 506, 510, 511, 516, 517, 518, 519, 522, 542, 549, 556, 570, 574, 583, 588, 589, 593, 602, 623, 625, 633, 635, 639, 640, 648, 665, 668, 673, 676, 681, 700, 734, 786, 800, 801, 802, 803, 804, 815, 864, 868, 869, 875, 884, 885, 888, 894, 911, 922, 930, 933, 939, 945, 947, 951, 952, 957, 958, 959, 960, 963, 991, 1002, 1010], "note": [8, 18, 30, 31, 39, 50, 54, 55, 65, 74, 90, 91, 92, 94, 96, 97, 100, 102, 104, 105, 111, 113, 114, 123, 125, 127, 129, 132, 133, 135, 136, 141, 150, 160, 161, 171, 172, 174, 175, 185, 188, 197, 198, 215, 218, 223, 227, 228, 232, 255, 269, 306, 307, 311, 312, 332, 333, 336, 340, 347, 377, 383, 385, 401, 418, 465, 466, 467, 468, 469, 470, 471, 472, 473, 485, 492, 498, 499, 502, 504, 505, 507, 510, 516, 517, 529, 537, 559, 568, 582, 583, 594, 602, 612, 620, 627, 628, 634, 635, 636, 640, 643, 656, 663, 675, 678, 700, 710, 746, 747, 779, 780, 783, 794, 851, 868, 906, 914, 915, 921, 926, 933, 939, 940, 943, 945, 946, 948, 951, 957, 958, 971, 1002, 1009], "oper": [8, 31, 56, 73, 80, 81, 90, 92, 93, 94, 95, 96, 102, 111, 136, 149, 154, 159, 166, 176, 182, 185, 187, 188, 192, 213, 218, 219, 223, 226, 234, 235, 255, 262, 263, 266, 303, 304, 305, 306, 307, 308, 353, 367, 370, 371, 389, 392, 419, 425, 439, 442, 444, 448, 450, 454, 460, 527, 537, 544, 545, 546, 554, 555, 565, 602, 613, 627, 633, 636, 639, 643, 648, 649, 682, 700, 709, 744, 745, 746, 747, 748, 896, 978, 982, 983, 984, 992, 1002], "from": [8, 28, 31, 50, 51, 52, 65, 73, 74, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 142, 143, 147, 149, 158, 160, 161, 172, 173, 175, 176, 181, 193, 197, 199, 201, 223, 224, 226, 228, 255, 303, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 357, 369, 376, 390, 419, 446, 447, 452, 453, 475, 488, 498, 499, 500, 506, 517, 518, 519, 522, 539, 541, 552, 562, 563, 564, 583, 588, 592, 601, 602, 622, 627, 632, 634, 635, 640, 648, 655, 656, 659, 673, 679, 700, 703, 709, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 837, 841, 869, 884, 885, 886, 888, 911, 939, 940, 941, 947, 958, 959, 960, 963, 990, 993, 1002, 1009, 1010], "environ": [8, 26, 126, 129], "local": [8, 30, 105, 114, 127, 255, 339, 759, 760, 786, 791, 889, 890, 1002], "non": [8, 31, 39, 65, 95, 173, 181, 201, 227, 232, 255, 377, 419, 452, 464, 465, 466, 467, 468, 469, 471, 472, 473, 493, 499, 545, 546, 552, 554, 555, 561, 576, 579, 584, 585, 586, 589, 590, 602, 648, 659, 675, 678, 700, 821, 869, 888, 900, 901, 902, 903, 904, 905, 907, 908, 909, 934, 940, 983, 1002], "env": [8, 128], "back": [8, 65, 149, 219, 255, 451, 602, 709, 984, 1002], "exampl": [8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 99, 100, 103, 104, 105, 106, 113, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 572, 574, 575, 576, 577, 578, 579, 580, 582, 583, 586, 587, 588, 589, 590, 591, 593, 594, 602, 613, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 731, 732, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 807, 808, 809, 810, 812, 815, 816, 817, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 842, 850, 851, 852, 855, 856, 858, 863, 864, 865, 867, 869, 874, 875, 876, 877, 878, 879, 880, 881, 882, 888, 889, 890, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 918, 922, 923, 924, 925, 927, 928, 930, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 963, 970, 971, 972, 973, 974, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 1002, 1009], "ascii": [10, 18, 503, 505, 509, 524, 944, 946, 950, 965], "charact": [10, 12, 18, 24, 28, 102, 103, 113, 255, 336, 497, 499, 502, 503, 504, 509, 510, 512, 513, 516, 524, 653, 700, 703, 783, 938, 940, 943, 944, 945, 950, 951, 953, 954, 957, 965], "displai": [10, 11, 12, 15, 17, 21, 23, 31, 255], "tabl": [10, 14, 15, 17, 18, 19, 20, 21, 23, 24, 29, 30, 31, 51, 52, 53, 55, 90, 97, 102, 103, 105, 113, 114, 189, 213, 219, 226, 227, 255, 675, 700, 984, 1002, 1009], "outlin": 10, "fals": [10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 33, 35, 50, 65, 70, 72, 74, 91, 95, 97, 100, 102, 103, 106, 107, 111, 113, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 130, 132, 135, 137, 138, 139, 142, 154, 155, 157, 158, 159, 160, 161, 165, 166, 168, 169, 170, 172, 175, 176, 179, 184, 185, 187, 189, 190, 197, 198, 199, 202, 206, 208, 214, 218, 219, 222, 223, 224, 228, 230, 232, 238, 239, 241, 242, 243, 245, 248, 255, 265, 266, 267, 269, 279, 285, 303, 304, 305, 306, 307, 308, 323, 339, 341, 352, 353, 354, 355, 356, 370, 371, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 392, 398, 401, 415, 418, 420, 425, 426, 448, 450, 458, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 477, 480, 485, 487, 488, 492, 496, 500, 506, 507, 508, 512, 513, 515, 517, 518, 519, 538, 541, 544, 545, 546, 549, 550, 556, 559, 574, 583, 589, 594, 602, 616, 618, 619, 620, 625, 627, 633, 634, 635, 639, 640, 642, 644, 653, 660, 663, 664, 665, 667, 672, 673, 678, 685, 686, 688, 689, 690, 692, 695, 700, 703, 709, 719, 725, 732, 736, 737, 744, 745, 746, 747, 748, 749, 766, 786, 788, 800, 802, 803, 804, 810, 821, 822, 823, 825, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 841, 851, 865, 868, 870, 881, 889, 890, 892, 894, 895, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 913, 916, 921, 926, 928, 933, 937, 941, 947, 948, 949, 953, 954, 956, 958, 959, 960, 982, 983, 984, 987, 990, 992, 993, 1002, 1009], "revert": 10, "abc": [10, 16, 17, 18, 19, 20, 21, 22, 23, 262, 499, 507, 602, 703, 940, 948], "xyz": [10, 16, 17, 18, 19, 20, 21, 22, 23, 262, 493, 499, 602, 934, 940, 980, 1002], "f64": [10, 14, 16, 17, 19, 20, 21, 22, 23, 50, 65, 67, 69, 93, 118, 125, 138, 139, 141, 142, 143, 146, 150, 151, 154, 157, 158, 159, 166, 174, 175, 179, 180, 189, 190, 191, 207, 208, 209, 229, 232, 235, 239, 241, 242, 243, 244, 245, 247, 248, 255, 261, 271, 272, 273, 274, 275, 276, 294, 296, 300, 301, 308, 311, 312, 341, 352, 353, 354, 355, 356, 357, 358, 366, 367, 370, 371, 376, 383, 385, 386, 387, 389, 390, 392, 410, 421, 422, 423, 425, 429, 430, 431, 441, 444, 446, 447, 448, 452, 454, 457, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 483, 484, 485, 489, 490, 533, 534, 537, 542, 551, 552, 554, 556, 558, 566, 577, 578, 588, 593, 602, 618, 622, 628, 629, 633, 639, 640, 646, 647, 654, 667, 668, 676, 678, 679, 682, 686, 688, 689, 690, 691, 692, 694, 695, 700, 703, 711, 712, 713, 714, 715, 716, 735, 742, 743, 748, 749, 750, 788, 803, 804, 808, 812, 817, 888, 892, 900, 902, 903, 905, 906, 907, 909, 910, 924, 925, 929, 975, 976, 989, 1002, 1010], "fmt": [11, 375, 569, 602, 637, 700], "floatfmt": 11, "mix": [11, 517, 519, 750, 958, 960, 1002], "control": [11, 31, 55, 73, 123, 255, 625, 700], "how": [11, 30, 31, 56, 65, 73, 75, 93, 96, 104, 145, 174, 226, 227, 255, 295, 309, 376, 399, 400, 451, 461, 470, 594, 602, 623, 639, 675, 700, 734, 751, 849, 850, 906, 1002], "float": [11, 31, 41, 42, 118, 120, 121, 122, 125, 127, 142, 147, 150, 175, 191, 199, 205, 247, 255, 296, 297, 298, 299, 311, 312, 341, 352, 353, 354, 355, 356, 361, 366, 370, 371, 376, 379, 382, 383, 385, 386, 387, 392, 398, 421, 425, 429, 441, 446, 447, 448, 454, 457, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 537, 551, 577, 578, 581, 583, 588, 590, 593, 602, 628, 640, 654, 662, 663, 694, 700, 703, 732, 735, 738, 739, 740, 749, 750, 752, 788, 800, 801, 802, 803, 804, 808, 812, 817, 827, 841, 848, 849, 871, 877, 878, 884, 885, 891, 892, 893, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 914, 915, 926, 930, 971, 991, 1002, 1010], "point": [11, 31, 41, 42, 125, 127, 150, 160, 176, 255, 296, 311, 312, 341, 361, 366, 383, 385, 474, 475, 602, 628, 634, 644, 656, 700, 735, 788, 808, 812, 827, 910, 911, 1002], "full": [11, 38, 65, 71, 73, 102, 103, 105, 113, 114, 160, 161, 255, 517, 518, 519, 522, 634, 635, 644, 700, 958, 959, 960, 963], "format": [11, 14, 18, 28, 31, 101, 102, 103, 113, 118, 148, 158, 172, 181, 198, 215, 253, 255, 340, 343, 346, 506, 517, 518, 519, 522, 546, 626, 632, 648, 681, 700, 790, 793, 947, 958, 959, 960, 963, 1001], "number": [11, 12, 13, 15, 23, 24, 28, 31, 35, 65, 84, 90, 92, 94, 96, 99, 102, 103, 106, 113, 116, 123, 125, 126, 128, 129, 137, 138, 147, 148, 150, 151, 163, 172, 173, 176, 177, 184, 185, 199, 204, 205, 209, 211, 222, 226, 229, 238, 240, 249, 255, 280, 286, 292, 302, 308, 309, 321, 324, 329, 331, 341, 348, 349, 351, 354, 355, 356, 360, 362, 368, 373, 383, 385, 393, 394, 400, 405, 413, 417, 419, 453, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 478, 479, 481, 490, 502, 505, 507, 513, 514, 520, 530, 536, 542, 556, 557, 572, 584, 585, 588, 591, 593, 602, 616, 618, 626, 627, 628, 629, 636, 643, 653, 661, 662, 665, 668, 670, 672, 676, 685, 687, 696, 700, 731, 737, 748, 751, 764, 767, 776, 778, 788, 795, 796, 798, 801, 802, 803, 804, 807, 809, 816, 827, 843, 850, 855, 863, 867, 869, 881, 882, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 918, 919, 922, 930, 943, 946, 948, 954, 955, 961, 972, 986, 991, 1002, 1010], "plai": [12, 555], "sam": 12, "As": [12, 90, 92, 93, 94, 96, 106, 255, 700], "time": [12, 30, 38, 40, 50, 55, 71, 72, 74, 113, 130, 149, 160, 161, 175, 228, 255, 292, 313, 314, 315, 320, 336, 339, 343, 345, 346, 350, 397, 398, 419, 517, 519, 522, 535, 536, 554, 555, 564, 570, 602, 620, 634, 635, 640, 653, 700, 703, 709, 731, 756, 757, 758, 763, 783, 786, 790, 792, 793, 797, 847, 849, 958, 960, 963, 985, 986, 1002, 1010], "goe": 12, "By": [12, 13, 65, 102, 103, 106, 113, 175, 209, 229, 255, 490, 506, 542, 556, 574, 588, 593, 602, 640, 668, 676, 700, 930, 947, 983, 991, 1002], "begin": [12, 354, 355, 356, 498, 602, 802, 803, 804, 939, 1002], "beauti": 12, "friendship": 12, "len": [12, 31, 123, 125, 173, 255, 303, 462, 503, 509, 524, 602, 749, 892, 898, 944, 950, 965, 1002], "u32": [12, 50, 70, 160, 186, 233, 238, 246, 248, 255, 263, 270, 277, 278, 279, 280, 281, 302, 303, 318, 321, 325, 329, 331, 337, 338, 341, 348, 349, 393, 395, 396, 399, 408, 428, 445, 449, 458, 476, 493, 502, 505, 535, 539, 548, 550, 557, 580, 602, 634, 651, 680, 685, 693, 695, 700, 719, 720, 721, 732, 761, 764, 771, 773, 776, 778, 781, 784, 785, 788, 795, 796, 817, 858, 894, 934, 943, 946, 985, 988, 990, 1002], "37": 12, "beaut": 12, "48": [12, 161, 255, 635, 700], "fmt_str_length": 12, "50": [12, 31, 149, 255, 297, 298, 299, 340, 347, 602, 738, 794, 1002], "print": [12, 15, 17, 18, 23, 103, 119, 146, 158, 159, 173, 176, 217, 234, 255, 375, 564, 602, 637, 700, 828, 900, 981, 1002, 1010], "overwrit": [13, 29, 30, 90, 92, 93, 94, 96, 102, 103, 113, 135, 255, 627, 700], "chunk": [13, 99, 102, 103, 111, 113, 115, 116, 117, 125, 127, 149, 173, 184, 255, 268, 459, 602, 665, 700, 709, 736, 813, 881, 895, 978, 1002], "stream": [13, 32, 72, 159, 174, 224, 255, 620, 625, 627, 633, 639, 644, 648, 653, 663, 664, 665, 673, 700], "engin": [13, 29, 104, 129, 136, 159, 174, 224, 237, 255, 633, 639, 644, 648, 673, 684, 700, 710, 1002], "determin": [13, 31, 63, 65, 73, 93, 96, 100, 102, 103, 106, 111, 113, 117, 132, 136, 154, 160, 161, 172, 173, 223, 228, 255, 295, 323, 339, 419, 428, 436, 461, 465, 466, 467, 468, 469, 471, 472, 473, 485, 520, 583, 602, 634, 635, 700, 734, 766, 786, 817, 869, 875, 926, 961, 1002], "schema": [13, 30, 50, 56, 66, 67, 68, 73, 75, 85, 86, 88, 90, 92, 93, 94, 96, 97, 102, 103, 108, 112, 113, 116, 123, 125, 136, 138, 139, 146, 147, 182, 185, 218, 255, 282, 283, 284, 419, 436, 544, 589, 602, 618, 619, 624, 644, 649, 681, 684, 700, 703, 724, 741, 1002], "thread": [13, 28, 99, 102, 103, 104, 129, 255, 269, 401, 602, 851], "pool": [13, 129], "For": [13, 30, 31, 104, 105, 106, 114, 149, 161, 174, 175, 237, 255, 294, 354, 355, 356, 419, 437, 460, 485, 492, 498, 499, 507, 559, 568, 569, 602, 635, 640, 684, 700, 709, 802, 803, 804, 896, 926, 933, 939, 940, 948, 983, 1002], "some": [13, 26, 30, 31, 93, 102, 103, 113, 145, 255, 623, 700, 828, 1002, 1010], "dataset": [13, 102, 103, 113, 118, 174, 255, 390, 602, 613, 639, 644, 700, 841, 1002], "esp": 13, "when": [13, 15, 17, 21, 31, 35, 55, 56, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 102, 103, 104, 107, 111, 113, 114, 115, 116, 125, 127, 136, 137, 146, 147, 149, 151, 154, 160, 161, 174, 188, 197, 201, 208, 216, 222, 224, 255, 297, 298, 299, 339, 354, 355, 356, 362, 419, 426, 428, 437, 453, 487, 488, 504, 510, 516, 517, 550, 559, 568, 602, 616, 629, 634, 635, 639, 644, 659, 665, 667, 672, 673, 700, 709, 738, 739, 740, 786, 801, 802, 803, 804, 809, 875, 914, 915, 945, 951, 957, 958, 979, 1002], "have": [13, 26, 31, 65, 75, 91, 102, 103, 106, 125, 127, 149, 161, 172, 192, 198, 215, 255, 293, 308, 354, 355, 356, 437, 458, 517, 519, 602, 635, 648, 663, 680, 700, 703, 709, 748, 802, 803, 804, 814, 894, 958, 960, 1002, 1010], "larg": [13, 65, 160, 161, 175, 228, 255, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 640, 700, 783, 787, 794], "element": [13, 23, 124, 127, 137, 171, 189, 197, 209, 222, 229, 255, 269, 271, 272, 273, 274, 275, 276, 292, 300, 301, 303, 304, 305, 306, 307, 308, 358, 372, 381, 399, 401, 402, 422, 423, 451, 452, 458, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 482, 483, 484, 489, 490, 513, 514, 520, 533, 534, 536, 542, 556, 584, 585, 588, 593, 602, 616, 668, 672, 676, 700, 710, 711, 712, 713, 714, 715, 716, 731, 737, 742, 743, 744, 745, 746, 747, 748, 805, 810, 816, 828, 840, 843, 849, 851, 852, 872, 873, 888, 894, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 912, 923, 924, 925, 929, 930, 954, 955, 961, 972, 975, 976, 981, 986, 987, 991, 1002], "too": [13, 160, 161, 175, 228, 255, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 640, 700, 783, 787, 794], "optimist": 13, "lead": [13, 97, 118, 160, 161, 255, 477, 504, 516, 524, 531, 541, 556, 602, 634, 635, 644, 684, 700, 916, 945, 957, 965, 1002], "out": [13, 97, 119, 161, 255, 288, 379, 382, 404, 418, 492, 494, 594, 602, 635, 664, 665, 700, 727, 854, 868, 933, 935], "memori": [13, 73, 90, 91, 94, 95, 96, 102, 103, 107, 111, 113, 115, 116, 117, 135, 136, 149, 206, 237, 255, 451, 459, 480, 602, 665, 700, 709, 710, 895, 920, 921, 1002], "error": [13, 30, 76, 102, 103, 113, 160, 161, 175, 197, 228, 255, 288, 294, 336, 340, 347, 389, 406, 418, 465, 466, 467, 468, 469, 471, 472, 473, 492, 494, 498, 500, 501, 517, 518, 519, 522, 602, 634, 635, 640, 684, 700, 727, 732, 783, 787, 794, 856, 868, 933, 935, 939, 941, 942, 958, 959, 960, 963, 1002], "row": [13, 18, 23, 28, 31, 33, 35, 65, 66, 68, 73, 82, 84, 89, 93, 94, 96, 97, 102, 103, 106, 107, 111, 113, 115, 116, 117, 120, 123, 125, 136, 137, 138, 145, 149, 152, 154, 158, 160, 162, 163, 168, 170, 171, 172, 173, 175, 176, 177, 181, 185, 199, 207, 211, 212, 215, 217, 222, 224, 226, 227, 233, 237, 240, 249, 255, 269, 280, 359, 373, 394, 402, 419, 451, 452, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 486, 488, 497, 530, 550, 559, 560, 568, 572, 576, 579, 582, 584, 585, 591, 594, 602, 616, 618, 620, 623, 627, 630, 631, 634, 636, 640, 641, 643, 644, 648, 665, 666, 670, 671, 672, 673, 675, 680, 684, 687, 696, 700, 709, 806, 816, 840, 852, 888, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 927, 938, 972, 1002, 1010], "per": [13, 28, 31, 123, 125, 137, 158, 185, 186, 208, 222, 244, 246, 247, 255, 269, 293, 401, 404, 418, 488, 550, 602, 616, 667, 672, 691, 693, 694, 700, 851, 854, 868], "everi": [13, 102, 103, 113, 160, 212, 215, 228, 255, 303, 304, 305, 306, 307, 308, 340, 347, 359, 395, 396, 400, 402, 404, 405, 414, 417, 497, 532, 559, 560, 602, 627, 634, 671, 700, 744, 745, 746, 747, 748, 787, 794, 806, 845, 846, 850, 852, 854, 855, 864, 867, 938, 974, 1002], "process": [13, 28, 129, 255, 664, 665, 700], "liter": [14, 18, 30, 50, 70, 74, 100, 106, 126, 127, 128, 130, 132, 158, 172, 178, 179, 183, 184, 187, 197, 198, 201, 210, 214, 227, 232, 255, 265, 267, 287, 314, 353, 360, 367, 370, 371, 377, 389, 392, 425, 442, 444, 448, 454, 492, 507, 508, 527, 537, 545, 546, 549, 552, 554, 555, 561, 562, 563, 574, 576, 579, 583, 586, 589, 590, 592, 602, 629, 659, 675, 678, 700, 703, 707, 708, 726, 757, 807, 821, 914, 915, 933, 948, 949, 1002, 1009], "left": [14, 52, 65, 74, 120, 121, 130, 160, 161, 174, 175, 227, 255, 354, 355, 356, 376, 377, 465, 466, 467, 468, 469, 471, 472, 473, 476, 503, 524, 535, 552, 559, 560, 568, 582, 594, 602, 634, 635, 639, 640, 675, 700, 802, 803, 804, 821, 912, 944, 965, 985, 1002], "center": [14, 31, 255, 354, 355, 356, 464, 465, 466, 467, 468, 469, 471, 472, 473, 602, 802, 803, 804, 900, 901, 902, 903, 904, 905, 907, 908, 909, 1002], "right": [14, 16, 31, 74, 102, 103, 120, 121, 130, 160, 161, 174, 175, 255, 354, 355, 356, 377, 465, 466, 467, 468, 469, 471, 472, 473, 476, 485, 509, 552, 602, 634, 635, 639, 640, 700, 802, 803, 804, 821, 912, 926, 950, 1002], "cell": 14, "align": [14, 31, 65, 73, 255, 524, 965], "keyerror": [14, 18], "recognis": [14, 18, 122], "column_abc": 14, "column_xyz": 14, "visibl": [15, 147, 255, 801, 1002], "eg": [15, 23, 31, 255, 340, 517, 519, 537, 602, 958, 960], "low": [15, 129], "rang": [15, 31, 74, 104, 130, 142, 147, 160, 173, 255, 318, 331, 337, 338, 340, 347, 348, 376, 549, 554, 562, 563, 592, 602, 634, 700, 749, 750, 761, 778, 784, 785, 787, 794, 795, 801, 888, 892, 1002], "100": [15, 31, 93, 96, 102, 103, 113, 116, 255, 520, 524, 700, 901, 902, 904, 961, 1002, 1010], "98": [15, 166, 255, 292, 487, 520, 531, 536, 602, 961], "99": [15, 31, 150, 151, 166, 169, 255, 263, 292, 360, 362, 487, 531, 536, 602, 628, 629, 700, 800, 807, 1002], "tbl_col": 15, "10": [15, 27, 28, 30, 31, 32, 35, 50, 65, 73, 74, 97, 104, 113, 125, 127, 130, 139, 149, 157, 160, 161, 163, 165, 166, 167, 184, 188, 190, 194, 195, 201, 211, 232, 235, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 268, 277, 278, 279, 281, 297, 302, 304, 307, 309, 311, 312, 314, 332, 333, 339, 340, 347, 350, 372, 373, 376, 381, 389, 393, 394, 400, 405, 413, 414, 417, 422, 452, 453, 466, 486, 524, 530, 544, 552, 559, 565, 568, 570, 572, 574, 575, 591, 602, 620, 634, 635, 636, 638, 643, 652, 653, 659, 665, 669, 670, 678, 682, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 700, 703, 710, 738, 749, 751, 757, 786, 794, 797, 800, 816, 828, 843, 850, 855, 863, 864, 867, 872, 888, 914, 915, 972, 1002, 1010], "95": [15, 263, 602], "96": [15, 263, 602], "97": [15, 166, 255, 263, 602], "move": [16, 354, 355, 356, 465, 466, 468, 472, 602, 802, 803, 804, 901, 902, 904, 908, 1002], "inlin": [16, 492, 498, 499, 507, 933, 939, 940, 948], "parenthes": 16, "below": [17, 31, 105, 114, 145, 255, 376, 594, 602, 623, 700], "ascii_ful": 18, "ascii_full_condens": 18, "ascii_no_bord": 18, "ascii_borders_onli": 18, "ascii_borders_only_condens": 18, "ascii_horizontal_onli": 18, "ascii_markdown": 18, "utf8_ful": [18, 65, 97], "utf8_full_condens": [18, 97], "utf8_no_bord": 18, "utf8_borders_onli": 18, "utf8_horizontal_onli": 18, "noth": [18, 493, 498, 501, 934, 939, 942], "none": [18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 48, 50, 52, 53, 55, 65, 74, 75, 90, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 133, 136, 138, 142, 145, 150, 151, 158, 160, 161, 162, 167, 171, 174, 175, 176, 179, 181, 185, 186, 189, 197, 199, 205, 207, 208, 214, 216, 219, 223, 224, 225, 226, 227, 228, 255, 264, 268, 269, 281, 286, 297, 298, 299, 302, 304, 307, 311, 312, 339, 340, 347, 354, 355, 356, 357, 360, 361, 362, 368, 372, 376, 377, 383, 384, 385, 386, 387, 393, 404, 414, 419, 426, 428, 440, 449, 452, 458, 459, 464, 465, 466, 467, 468, 469, 471, 472, 473, 475, 479, 480, 481, 482, 486, 487, 491, 492, 495, 496, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 522, 524, 525, 526, 535, 545, 547, 549, 552, 555, 557, 563, 564, 566, 567, 574, 575, 576, 579, 583, 584, 585, 588, 589, 592, 593, 594, 602, 618, 619, 623, 628, 629, 634, 635, 638, 639, 640, 642, 644, 648, 651, 662, 663, 664, 665, 666, 667, 673, 674, 675, 679, 681, 684, 700, 703, 710, 717, 718, 737, 738, 749, 750, 752, 768, 769, 770, 775, 786, 787, 794, 799, 800, 802, 803, 804, 807, 808, 809, 811, 814, 815, 817, 819, 820, 821, 830, 833, 834, 837, 840, 841, 854, 864, 869, 875, 876, 877, 878, 879, 883, 892, 893, 894, 897, 900, 901, 902, 903, 904, 905, 907, 908, 909, 911, 915, 917, 919, 922, 923, 926, 927, 930, 932, 933, 936, 937, 941, 942, 943, 944, 945, 946, 947, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 963, 977, 980, 981, 984, 985, 991, 992, 1002, 1009], "rounded_corn": 18, "style": [18, 31, 189, 255], "border": 18, "line": [18, 31, 102, 103, 106, 113, 158, 168, 170, 255, 498, 939], "includ": [18, 26, 28, 30, 31, 71, 105, 114, 125, 137, 142, 147, 160, 222, 223, 226, 255, 341, 377, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 510, 512, 513, 516, 559, 584, 585, 602, 616, 634, 672, 700, 750, 788, 801, 821, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 953, 954, 957, 992, 1002], "divid": [18, 340, 347, 354, 355, 356, 390, 602, 787, 794, 802, 803, 804, 841, 1002], "same": [18, 30, 31, 54, 56, 65, 72, 73, 75, 107, 113, 123, 133, 136, 143, 159, 208, 224, 232, 235, 237, 255, 261, 268, 347, 359, 432, 435, 451, 464, 465, 466, 467, 468, 469, 471, 472, 473, 488, 526, 553, 602, 622, 633, 644, 667, 673, 678, 682, 700, 705, 709, 710, 757, 806, 900, 901, 902, 903, 904, 905, 907, 908, 909, 993, 1002], "dens": [18, 158, 255, 458, 602, 894, 1002], "space": 18, "horizont": [18, 73, 154, 165, 226, 255, 545, 546, 554, 555, 559, 560, 561, 565, 568, 576, 579, 582, 590], "markdown": 18, "compat": [18, 31, 35, 104, 255, 492, 493, 498, 499, 507, 508, 665, 700, 703, 933, 934, 939, 940, 948, 949], "No": 18, "appli": [18, 28, 31, 50, 73, 113, 122, 125, 127, 154, 188, 255, 318, 321, 323, 324, 325, 327, 329, 331, 334, 337, 338, 341, 348, 349, 351, 355, 356, 426, 453, 464, 465, 466, 468, 472, 507, 517, 518, 519, 522, 544, 549, 559, 560, 568, 575, 582, 602, 636, 643, 644, 652, 700, 759, 760, 761, 764, 766, 767, 771, 773, 776, 778, 781, 784, 785, 788, 791, 795, 796, 798, 803, 804, 900, 901, 902, 904, 908, 948, 958, 959, 960, 963, 1002], "round": [18, 31, 67, 97, 255, 296, 366, 533, 602, 735, 812, 1002], "corner": [18, 97], "op": [18, 127, 255, 461, 517, 519, 602, 700, 958, 960, 1002], "one": [18, 29, 31, 55, 65, 82, 90, 92, 93, 94, 95, 96, 126, 127, 128, 133, 151, 152, 158, 159, 160, 161, 172, 181, 189, 197, 198, 202, 221, 236, 255, 263, 362, 389, 419, 423, 464, 487, 499, 531, 590, 594, 602, 629, 630, 633, 634, 635, 648, 660, 679, 683, 700, 709, 809, 837, 869, 873, 900, 940, 966, 1002], "more": [18, 31, 33, 35, 55, 65, 73, 89, 90, 91, 92, 93, 94, 95, 96, 105, 111, 114, 125, 127, 133, 136, 141, 142, 172, 176, 181, 185, 197, 198, 199, 224, 237, 255, 266, 269, 285, 297, 298, 299, 389, 390, 420, 423, 426, 450, 475, 485, 499, 517, 518, 519, 538, 590, 594, 602, 648, 665, 673, 700, 703, 710, 725, 738, 739, 740, 750, 837, 841, 870, 911, 926, 940, 958, 959, 960, 987, 1002, 1010], "semigraph": 18, "box": [18, 136, 255], "draw": [18, 23, 24, 124, 1010], "found": [18, 28, 52, 77, 86, 88, 93, 97, 146, 227, 255, 476, 501, 517, 519, 602, 675, 700, 912, 942, 958, 960, 1002, 1009], "unicod": 18, "block": [18, 159, 224, 255, 633, 656, 673, 680, 684, 700, 914, 915, 1002], "http": [18, 31, 91, 104, 135, 141, 255, 498, 939], "en": [18, 31, 255], "wikipedia": 18, "org": [18, 91, 104, 135, 141, 255], "wiki": 18, "drawing_charact": 18, "box_draw": 18, "mno": 18, "tbl_format": 18, "tbl_hide_column_data_typ": 18, "tbl_hide_dataframe_shap": 18, "hide": [19, 20, 21, 22, 31, 255], "etc": [19, 30, 31, 102, 105, 107, 111, 114, 115, 117, 255, 549, 703, 914, 915, 1002], "inform": [21, 71, 105, 114, 141, 255, 297, 298, 299, 390, 485, 492, 498, 499, 507, 602, 653, 700, 738, 739, 740, 841, 926, 933, 939, 940, 948, 1002], "separ": [22, 28, 99, 102, 103, 113, 187, 189, 216, 223, 225, 255, 269, 402, 406, 497, 555, 559, 560, 602, 674, 700, 852, 856, 938, 970, 979, 1002], "between": [22, 73, 122, 123, 125, 127, 191, 247, 255, 294, 310, 377, 406, 452, 457, 469, 491, 556, 558, 581, 584, 585, 602, 654, 694, 700, 732, 752, 821, 856, 888, 893, 905, 932, 1002], "set_tbl_column_data_type_inlin": 22, "max": [23, 31, 35, 50, 129, 142, 151, 159, 160, 161, 189, 255, 297, 298, 304, 362, 419, 451, 458, 465, 477, 514, 587, 602, 629, 633, 634, 635, 665, 700, 738, 739, 744, 750, 809, 869, 894, 901, 916, 955, 1002], "both": [23, 28, 56, 74, 104, 130, 160, 161, 174, 175, 182, 197, 255, 268, 377, 465, 466, 467, 468, 469, 471, 472, 473, 602, 612, 634, 635, 639, 640, 649, 700, 821, 830, 1002], "tbl_row": 23, "char": [24, 56, 75, 499, 505, 940, 946], "enabl": [25, 75, 131, 201, 232, 255, 477, 602, 659, 678, 700, 916, 1002], "addit": [25, 30, 31, 93, 105, 114, 123, 143, 148, 159, 187, 201, 202, 208, 225, 232, 235, 255, 262, 357, 360, 451, 488, 492, 498, 499, 507, 545, 546, 550, 552, 553, 554, 555, 561, 566, 576, 579, 586, 589, 590, 602, 622, 626, 633, 659, 660, 667, 674, 678, 682, 700, 807, 933, 939, 940, 948, 1002], "verbos": [25, 133, 499, 940], "debug": [25, 620, 627, 644, 700, 1010], "log": [25, 67, 292, 352, 423, 444, 454, 536, 602, 731, 800, 986, 1002], "if_set": 26, "env_onli": 26, "dict": [26, 30, 31, 35, 53, 66, 68, 71, 90, 92, 93, 94, 95, 96, 102, 103, 105, 106, 107, 108, 111, 112, 113, 114, 115, 117, 125, 172, 187, 193, 197, 198, 200, 214, 215, 255, 428, 602, 656, 658, 700, 875, 1002], "show": [26, 31, 54, 145, 158, 176, 186, 255, 623, 653, 663, 700], "variabl": [26, 52, 126, 129, 181, 216, 255, 648, 700, 979, 1002, 1009], "restrict": [26, 514, 955], "dictionari": [26, 31, 90, 92, 93, 94, 96, 102, 103, 108, 112, 113, 172, 187, 197, 198, 214, 215, 255, 428, 602, 700, 750, 875, 1002], "those": [26, 31, 102, 255, 458, 498, 602, 703, 894, 939, 1002], "been": [26, 31, 255, 458, 602, 894, 1002], "set_fmt_float": 26, "directli": [26, 52, 125, 127, 133, 354, 355, 356, 583, 602, 700, 802, 803, 804, 1002, 1010], "via": [26, 102, 103, 106, 113, 115, 116, 117, 172, 198, 255, 269, 602], "set_stat": 26, "all_stat": 26, "file": [27, 28, 32, 33, 34, 35, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 149, 255, 440, 627, 655, 664, 665, 681, 700, 709, 1002], "binaryio": [27, 32, 101, 102, 106, 107, 108, 111, 112, 255], "bytesio": [27, 28, 31, 32, 35, 101, 102, 103, 106, 107, 111, 255], "path": [27, 28, 30, 31, 32, 33, 34, 35, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 255, 440, 477, 501, 602, 655, 664, 665, 681, 700, 916, 942, 1002], "compress": [27, 32, 35, 255, 664, 665, 700], "avrocompress": [27, 255], "uncompress": [27, 32, 35, 107, 115, 255, 665, 700], "write": [27, 28, 29, 30, 31, 32, 33, 35, 103, 107, 133, 255, 297, 298, 299, 440, 602, 642, 663, 665, 681, 700, 738, 739, 740, 1002], "apach": [27, 35, 101, 104, 255], "avro": [27, 101, 255, 613], "should": [27, 28, 31, 32, 33, 34, 35, 73, 90, 92, 94, 96, 105, 113, 122, 123, 127, 135, 136, 143, 160, 161, 172, 175, 197, 198, 215, 216, 225, 228, 237, 255, 263, 269, 295, 308, 336, 340, 347, 350, 357, 383, 385, 401, 464, 465, 466, 467, 468, 469, 471, 472, 473, 476, 485, 553, 566, 573, 574, 584, 585, 594, 602, 622, 634, 635, 639, 640, 644, 663, 664, 665, 674, 681, 700, 703, 710, 734, 748, 783, 787, 794, 797, 851, 900, 901, 902, 903, 904, 905, 907, 908, 909, 912, 926, 1002], "written": [27, 28, 31, 32, 33, 34, 35, 255, 664, 665, 681, 700], "snappi": [27, 35, 255, 665, 700], "deflat": [27, 255], "import": [27, 28, 31, 32, 35, 38, 65, 74, 90, 94, 95, 113, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 142, 158, 160, 173, 175, 218, 219, 226, 228, 255, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 564, 613, 634, 640, 644, 700, 742, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 825, 829, 831, 832, 837, 900, 924, 975, 1002, 1010], "pathlib": [27, 28, 32, 35, 113, 255], "foo": [27, 28, 30, 32, 33, 34, 35, 54, 136, 140, 141, 143, 144, 145, 146, 149, 152, 153, 154, 155, 156, 157, 162, 163, 164, 165, 166, 167, 169, 174, 178, 179, 180, 183, 186, 189, 191, 193, 194, 195, 197, 199, 200, 201, 203, 204, 205, 207, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 223, 224, 225, 229, 230, 231, 234, 255, 264, 297, 298, 299, 336, 373, 375, 394, 398, 403, 404, 407, 408, 462, 478, 479, 491, 493, 495, 497, 499, 504, 510, 512, 514, 516, 521, 523, 530, 532, 545, 548, 551, 553, 556, 557, 558, 567, 571, 572, 576, 577, 578, 579, 580, 581, 586, 588, 591, 593, 594, 602, 621, 622, 623, 624, 630, 637, 638, 639, 651, 656, 658, 659, 673, 674, 677, 679, 681, 700, 703, 738, 783, 856, 898, 934, 936, 938, 940, 955, 1002], "bar": [27, 28, 30, 32, 33, 34, 35, 54, 136, 140, 141, 143, 144, 145, 146, 149, 152, 153, 154, 155, 156, 157, 163, 165, 166, 167, 169, 174, 178, 179, 180, 183, 186, 189, 191, 193, 194, 195, 197, 199, 200, 201, 204, 205, 207, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 224, 225, 229, 230, 234, 255, 264, 375, 408, 485, 495, 497, 512, 514, 545, 548, 551, 553, 556, 557, 558, 567, 572, 576, 577, 578, 579, 580, 586, 588, 591, 593, 594, 602, 621, 622, 623, 624, 630, 637, 638, 639, 651, 656, 658, 659, 673, 674, 677, 681, 700, 703, 856, 926, 936, 938, 955, 1002], "ham": [27, 28, 30, 32, 35, 140, 141, 143, 144, 145, 146, 152, 153, 155, 162, 163, 165, 174, 178, 179, 180, 183, 186, 191, 193, 195, 197, 199, 200, 201, 204, 205, 207, 209, 210, 211, 216, 217, 218, 219, 220, 224, 229, 230, 255, 553, 621, 622, 623, 624, 630, 639, 651, 656, 658, 659, 673, 679, 700], "d": [27, 28, 30, 32, 35, 56, 75, 93, 118, 142, 158, 162, 163, 166, 174, 211, 213, 226, 230, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 262, 320, 343, 346, 377, 453, 480, 493, 499, 513, 517, 518, 519, 552, 570, 602, 639, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 700, 763, 790, 793, 821, 934, 940, 954, 958, 959, 960, 1002], "e": [27, 28, 30, 32, 35, 56, 75, 91, 102, 103, 106, 107, 111, 115, 117, 142, 158, 160, 161, 163, 175, 211, 213, 226, 228, 255, 262, 269, 336, 340, 347, 352, 357, 377, 421, 428, 465, 466, 467, 468, 469, 471, 472, 473, 480, 485, 566, 594, 602, 634, 635, 640, 642, 656, 700, 703, 783, 787, 794, 800, 821, 913, 926, 983, 1002], "dirpath": [27, 28, 32, 35, 113, 255], "new_fil": [27, 28, 32, 35, 255], "has_head": [28, 31, 102, 103, 106, 113, 255], "quot": [28, 102, 103, 113, 255], "batch_siz": [28, 102, 103, 116, 255], "1024": [28, 102, 103, 116, 255, 665, 700], "datetime_format": [28, 255], "date_format": [28, 255], "time_format": [28, 255], "float_precis": [28, 31, 255], "null_valu": [28, 102, 103, 113, 255], "comma": [28, 255], "csv": [28, 102, 103, 106, 113, 255, 613, 664, 665, 700], "result": [28, 33, 34, 65, 73, 94, 96, 100, 104, 105, 113, 115, 117, 118, 127, 132, 149, 160, 161, 174, 185, 205, 219, 228, 235, 255, 343, 346, 354, 355, 356, 360, 390, 419, 451, 462, 464, 465, 466, 467, 468, 469, 471, 472, 473, 477, 479, 512, 513, 519, 537, 549, 559, 560, 575, 583, 584, 585, 602, 617, 634, 635, 639, 644, 653, 662, 664, 665, 681, 682, 700, 709, 790, 793, 802, 803, 804, 841, 898, 900, 901, 902, 903, 904, 905, 907, 908, 909, 916, 919, 953, 954, 960, 983, 1002, 1009, 1010], "If": [28, 30, 31, 32, 33, 34, 50, 56, 70, 71, 73, 74, 90, 91, 92, 93, 94, 95, 96, 100, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 126, 130, 132, 135, 136, 137, 145, 149, 158, 160, 161, 163, 171, 172, 175, 177, 181, 185, 198, 199, 207, 211, 215, 216, 218, 222, 223, 224, 226, 227, 255, 269, 297, 298, 299, 314, 332, 333, 339, 363, 390, 414, 419, 426, 428, 451, 458, 460, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 481, 485, 486, 500, 502, 504, 505, 510, 511, 512, 513, 514, 516, 517, 518, 519, 522, 545, 546, 547, 549, 556, 557, 559, 561, 568, 574, 576, 579, 583, 584, 585, 589, 590, 594, 602, 616, 623, 625, 634, 635, 639, 640, 644, 648, 656, 665, 666, 672, 673, 675, 681, 684, 700, 703, 709, 710, 738, 739, 740, 749, 757, 779, 780, 786, 814, 816, 817, 840, 841, 843, 864, 869, 892, 894, 896, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 916, 922, 926, 927, 941, 943, 945, 946, 951, 952, 953, 954, 955, 957, 958, 959, 960, 963, 972, 978, 983, 992, 1002, 1009], "instead": [28, 33, 34, 50, 54, 65, 70, 73, 74, 100, 102, 111, 125, 130, 132, 136, 160, 161, 172, 175, 185, 187, 197, 198, 201, 219, 228, 232, 255, 279, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 502, 504, 510, 516, 549, 576, 579, 583, 589, 602, 628, 634, 635, 640, 659, 678, 681, 700, 703, 719, 783, 787, 794, 914, 915, 943, 945, 951, 957, 984, 1002, 1009], "whether": [28, 74, 94, 96, 127, 130, 202, 255, 323, 339, 341, 433, 434, 477, 602, 644, 660, 700, 766, 786, 788, 1009], "header": [28, 31, 35, 97, 102, 103, 106, 113, 146, 189, 223, 255, 665, 700], "field": [28, 57, 86, 88, 93, 218, 225, 255, 419, 428, 499, 500, 513, 514, 526, 559, 560, 575, 589, 602, 674, 700, 869, 954, 955, 968, 970], "symbol": [28, 255], "byte": [28, 102, 103, 106, 107, 108, 111, 112, 113, 147, 255, 287, 290, 291, 502, 505, 665, 700, 726, 729, 730, 801, 943, 946, 1002], "specifi": [28, 31, 65, 74, 77, 86, 88, 106, 125, 137, 143, 147, 148, 151, 159, 174, 187, 197, 201, 202, 208, 222, 225, 232, 235, 255, 354, 355, 356, 357, 362, 428, 451, 461, 488, 503, 509, 545, 546, 550, 552, 553, 554, 555, 561, 566, 576, 579, 586, 589, 590, 602, 616, 622, 626, 629, 633, 639, 659, 660, 667, 672, 674, 678, 682, 700, 801, 802, 803, 804, 809, 944, 950, 1002], "defin": [28, 31, 38, 74, 122, 123, 125, 130, 136, 160, 161, 185, 188, 237, 255, 269, 377, 418, 453, 465, 466, 467, 468, 469, 471, 472, 473, 547, 574, 589, 602, 634, 635, 652, 684, 700, 710, 821, 868, 1002], "chrono": [28, 255, 343, 346, 517, 518, 519, 522, 790, 793, 958, 959, 960, 963], "rust": [28, 35, 83, 107, 111, 136, 237, 255, 710, 1002], "crate": [28, 255, 492, 493, 498, 499, 507, 508, 517, 518, 519, 522, 703, 933, 934, 939, 940, 948, 949, 958, 959, 960, 963], "fraction": [28, 120, 121, 199, 255, 341, 452, 475, 517, 519, 602, 788, 888, 911, 958, 960, 1002], "second": [28, 74, 124, 130, 160, 161, 175, 228, 255, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 517, 519, 563, 564, 592, 594, 602, 634, 635, 640, 700, 783, 787, 794, 958, 960, 1010], "precis": [28, 31, 39, 172, 198, 215, 255, 313, 520, 703, 756, 961], "infer": [28, 90, 92, 93, 94, 95, 96, 102, 103, 106, 113, 116, 136, 255, 462, 500, 517, 518, 519, 520, 522, 583, 602, 700, 898, 941, 958, 959, 960, 961, 963, 1002], "maximum": [28, 102, 103, 113, 123, 124, 125, 127, 178, 255, 395, 429, 446, 458, 576, 602, 645, 700, 738, 768, 845, 876, 884, 889, 894, 1002], "timeunit": [28, 38, 40, 74, 255, 313, 314, 345, 350, 519, 703, 756, 757, 792, 797, 960], "frame": [28, 29, 31, 50, 51, 52, 53, 54, 55, 65, 73, 93, 120, 125, 136, 138, 172, 173, 182, 185, 188, 197, 198, 219, 226, 255, 618, 649, 652, 700, 737, 1002, 1009, 1010], "datetim": [28, 31, 65, 74, 97, 125, 130, 142, 158, 160, 161, 173, 175, 228, 255, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 398, 465, 466, 467, 468, 469, 471, 472, 473, 517, 519, 535, 564, 570, 574, 602, 634, 635, 640, 700, 703, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 837, 848, 849, 884, 885, 915, 958, 960, 985, 1002], "place": [28, 137, 144, 165, 166, 194, 204, 205, 208, 222, 230, 255, 279, 406, 413, 478, 479, 487, 602, 616, 661, 662, 667, 672, 700, 719, 856, 863, 895, 897, 918, 919, 928, 1002], "float64": [28, 31, 93, 100, 102, 125, 132, 146, 147, 154, 200, 219, 232, 255, 271, 272, 273, 274, 275, 276, 294, 300, 301, 341, 357, 383, 385, 483, 484, 533, 534, 553, 566, 583, 602, 624, 658, 678, 700, 703, 788, 984, 989, 1002], "repres": [28, 48, 63, 74, 90, 92, 94, 95, 96, 130, 209, 229, 255, 383, 385, 490, 542, 545, 553, 556, 566, 574, 584, 585, 588, 593, 602, 668, 676, 700, 915, 930, 991, 1002], "empti": [28, 81, 93, 102, 103, 106, 113, 138, 139, 169, 181, 255, 574, 586, 618, 619, 648, 700, 703, 737, 741, 824, 1002], "table_nam": [29, 31, 255], "connection_uri": [29, 104, 255], "if_exist": [29, 255], "dbwritemod": [29, 255], "fail": [29, 30, 91, 105, 107, 114, 135, 224, 255, 280, 419, 517, 518, 519, 522, 602, 673, 700, 710, 958, 959, 960, 963, 1002], "dbwriteengin": [29, 255], "sqlalchemi": [29, 255], "databas": [29, 104, 255, 613], "append": [29, 30, 125, 149, 174, 175, 255, 459, 594, 602, 639, 640, 700, 1002], "creat": [29, 31, 74, 90, 94, 96, 114, 123, 124, 125, 126, 127, 128, 130, 138, 139, 160, 161, 186, 189, 228, 232, 255, 314, 340, 347, 419, 459, 511, 541, 549, 554, 562, 563, 564, 592, 602, 618, 619, 625, 634, 635, 678, 700, 737, 741, 749, 754, 757, 787, 794, 886, 892, 895, 952, 983, 1002, 1009, 1010], "connect": [29, 102, 104, 107, 111, 115, 117, 118, 255, 614], "uri": [29, 30, 104, 105, 114, 255], "postgresql": [29, 104, 255, 451, 602], "usernam": [29, 102, 104, 107, 111, 115, 117, 255], "password": [29, 102, 104, 107, 111, 115, 117, 255], "server": [29, 104, 255], "port": [29, 102, 104, 107, 111, 115, 117, 255], "replac": [29, 30, 102, 103, 113, 150, 151, 195, 223, 232, 255, 314, 339, 428, 508, 602, 628, 678, 700, 757, 786, 875, 914, 915, 949, 1002], "insert": [29, 102, 103, 107, 111, 113, 115, 116, 117, 166, 194, 223, 225, 255, 476, 491, 524, 602, 674, 700, 912, 932, 965, 1002], "mode": [29, 30, 50, 100, 132, 255, 499, 583, 602, 700, 940, 1002, 1009], "new": [29, 30, 31, 113, 133, 136, 145, 165, 166, 185, 186, 193, 194, 212, 225, 226, 232, 255, 264, 314, 359, 376, 427, 507, 508, 513, 514, 525, 526, 532, 602, 613, 623, 656, 671, 674, 678, 684, 700, 706, 754, 757, 806, 886, 897, 948, 949, 954, 955, 966, 968, 974, 980, 993, 1002, 1009], "alreadi": [29, 30, 255, 308, 401, 602, 748, 851, 1002], "adbc": [29, 104, 255], "deltalak": [30, 105, 114, 119, 255], "deltat": [30, 255], "ignor": [30, 124, 125, 127, 179, 210, 255, 309, 339, 354, 355, 356, 400, 446, 447, 602, 751, 786, 802, 803, 804, 850, 884, 885, 1002], "overwrite_schema": [30, 255], "storage_opt": [30, 102, 105, 107, 111, 114, 115, 117, 255], "delta_write_opt": [30, 255], "delta": [30, 40, 105, 114, 209, 229, 255, 471, 473, 490, 542, 556, 584, 585, 588, 593, 602, 613, 668, 676, 700, 907, 909, 930, 991, 1002], "like": [30, 74, 91, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 130, 168, 170, 174, 255, 401, 439, 458, 498, 590, 602, 627, 655, 700, 851, 894, 939, 1002], "categor": [30, 56, 75, 174, 216, 217, 255, 295, 428, 535, 602, 703, 733, 734, 985, 1002], "protocol": [30, 91, 104, 135, 255], "object": [30, 31, 32, 35, 55, 73, 74, 91, 92, 97, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 123, 125, 127, 130, 135, 159, 160, 161, 176, 218, 219, 255, 574, 613, 619, 634, 635, 637, 642, 655, 700, 703, 733, 755, 844, 931, 978, 1002], "handl": [30, 73, 97, 102, 103, 113, 118, 255, 309, 400, 524, 602, 751, 850, 965, 1002], "throw": [30, 91, 255, 294, 500, 501, 602, 732, 941, 942, 1002], "add": [30, 31, 103, 136, 149, 160, 232, 233, 255, 455, 528, 564, 568, 594, 602, 634, 639, 678, 679, 680, 700, 709, 1002], "anyth": [30, 197, 255, 499, 940], "updat": [30, 255, 700], "extra": [30, 35, 102, 105, 106, 107, 111, 114, 115, 117, 149, 255, 665, 700, 709, 1002], "storag": [30, 102, 105, 107, 111, 114, 115, 117, 255], "backend": [30, 104, 105, 114, 255], "cloud": [30, 105, 114, 118, 255], "configur": [30, 105, 114, 255], "authent": [30, 105, 114, 255], "see": [30, 31, 104, 105, 106, 114, 120, 121, 125, 127, 141, 174, 188, 255, 297, 298, 299, 362, 376, 390, 426, 485, 492, 498, 499, 507, 582, 602, 738, 739, 740, 841, 926, 933, 939, 940, 948, 1002, 1010], "here": [30, 31, 90, 92, 93, 94, 96, 104, 105, 114, 123, 125, 127, 255, 501, 700, 942], "gc": [30, 105, 114, 255], "azur": [30, 105, 114, 255], "keyword": [30, 53, 105, 111, 114, 141, 188, 197, 201, 232, 235, 255, 453, 586, 589, 602, 652, 659, 678, 682, 700, 1002], "argument": [30, 35, 74, 102, 105, 111, 114, 130, 141, 143, 148, 159, 160, 161, 179, 187, 188, 189, 201, 202, 208, 210, 219, 225, 228, 232, 235, 255, 340, 347, 357, 377, 451, 453, 465, 466, 467, 468, 469, 471, 472, 473, 488, 504, 510, 516, 545, 546, 550, 552, 553, 554, 555, 561, 566, 576, 579, 583, 586, 589, 590, 602, 622, 626, 633, 634, 635, 652, 659, 660, 667, 674, 678, 682, 700, 787, 794, 821, 945, 951, 957, 984, 1002], "while": [30, 103, 105, 106, 114, 125, 127, 172, 181, 223, 255, 648, 700], "lake": [30, 105, 114, 255, 613], "instanti": [30, 31, 201, 232, 255, 659, 678, 700], "basic": [30, 31, 255, 1010], "filesystem": [30, 105, 114, 255], "table_path": [30, 105, 114, 255], "doe": [30, 65, 73, 84, 90, 92, 93, 94, 96, 97, 102, 103, 105, 106, 113, 114, 118, 120, 121, 149, 173, 174, 197, 198, 224, 232, 255, 347, 350, 419, 428, 539, 567, 602, 627, 639, 644, 673, 678, 700, 709, 797, 814, 875, 921, 992, 1002], "match": [30, 31, 73, 84, 90, 92, 93, 94, 96, 120, 121, 151, 175, 197, 255, 434, 470, 492, 493, 496, 498, 499, 500, 501, 507, 508, 515, 517, 518, 519, 553, 602, 629, 640, 700, 703, 830, 837, 906, 933, 934, 937, 939, 940, 941, 942, 948, 949, 956, 958, 959, 960, 1002], "version": [30, 71, 74, 105, 114, 119, 130, 255, 332, 333, 517, 519, 582, 583, 779, 780, 958, 960], "old": [30, 193, 255, 656, 700], "existing_table_path": [30, 255], "store": [30, 102, 111, 149, 172, 198, 255, 709, 1002], "bucket": [30, 105, 114, 255, 340, 347, 787, 794, 817, 1002], "prefix": [30, 133, 255, 264, 291, 427, 515, 524, 528, 602, 703, 730, 956, 965], "aws_region": [30, 114, 255], "the_aws_region": [30, 255], "aws_access_key_id": [30, 105, 114, 255], "the_aws_access_key_id": [30, 105, 114, 255], "aws_secret_access_kei": [30, 105, 114, 255], "the_aws_secret_access_kei": [30, 105, 114, 255], "workbook": [31, 255], "worksheet": [31, 255], "posit": [31, 143, 148, 159, 187, 201, 202, 208, 225, 232, 235, 255, 354, 355, 356, 357, 451, 488, 506, 545, 546, 550, 552, 553, 554, 555, 561, 566, 576, 579, 586, 589, 590, 602, 622, 626, 633, 659, 660, 667, 674, 678, 682, 700, 802, 803, 804, 947, 1002], "tupl": [31, 104, 136, 172, 197, 198, 203, 234, 255, 462, 602, 653, 663, 700, 898, 1002], "a1": [31, 66, 68, 255], "table_styl": [31, 255], "column_format": [31, 255], "dtype_format": [31, 255], "oneormoredatatyp": [31, 123, 255, 837, 1002], "conditional_format": [31, 255], "conditionalformatdict": [31, 255], "column_tot": [31, 255], "columntotalsdefinit": [31, 255], "column_width": [31, 255], "row_tot": [31, 255], "rowtotalsdefinit": [31, 255], "row_height": [31, 255], "sparklin": [31, 255], "sequenc": [31, 57, 65, 72, 90, 92, 93, 94, 96, 99, 102, 103, 113, 123, 124, 125, 137, 142, 148, 149, 174, 175, 181, 185, 188, 189, 208, 216, 222, 224, 225, 226, 227, 228, 255, 381, 419, 426, 453, 488, 526, 547, 550, 559, 560, 568, 570, 575, 582, 602, 616, 626, 639, 640, 652, 667, 672, 673, 674, 675, 700, 709, 750, 752, 869, 915, 968, 1002], "formula": [31, 255, 352, 602, 800, 1002], "autofilt": [31, 255], "autofit": [31, 255], "hidden_column": [31, 255], "hide_gridlin": [31, 255], "sheet_zoom": [31, 255], "excel": [31, 106, 255, 613], "open": [31, 102, 103, 106, 107, 111, 115, 117, 255], "xlsxwriter": [31, 119, 255], "ha": [31, 65, 113, 135, 160, 161, 228, 255, 269, 292, 308, 389, 437, 536, 547, 602, 634, 635, 684, 700, 731, 737, 748, 750, 814, 827, 986, 1002], "close": [31, 74, 130, 160, 161, 255, 377, 423, 465, 466, 467, 468, 469, 471, 472, 473, 485, 602, 634, 635, 700, 821, 926, 1002], "xlsx": [31, 106, 255], "work": [31, 39, 103, 106, 194, 255, 269, 285, 296, 297, 298, 299, 357, 366, 401, 420, 451, 505, 538, 602, 725, 735, 738, 739, 740, 812, 851, 870, 946, 987, 1002], "directori": [31, 111, 255], "sheet1": [31, 255], "valid": [31, 50, 107, 111, 127, 133, 147, 174, 255, 308, 492, 493, 498, 499, 501, 507, 508, 602, 639, 700, 703, 748, 801, 814, 933, 934, 939, 940, 942, 948, 949, 1002], "notat": [31, 255], "integ": [31, 43, 44, 45, 46, 59, 60, 61, 62, 123, 125, 126, 128, 160, 161, 255, 296, 341, 366, 367, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 506, 544, 549, 570, 583, 602, 634, 635, 700, 703, 717, 718, 735, 788, 812, 830, 896, 906, 915, 947, 1002, 1009, 1010], "medium": [31, 255], "kei": [31, 65, 71, 73, 160, 174, 175, 182, 187, 189, 193, 196, 255, 589, 634, 639, 640, 649, 656, 657, 700], "contain": [31, 65, 71, 92, 95, 97, 105, 114, 120, 124, 137, 145, 173, 185, 189, 222, 255, 269, 381, 428, 493, 496, 498, 499, 501, 514, 515, 602, 616, 623, 653, 672, 700, 703, 875, 881, 934, 937, 939, 940, 942, 955, 956, 978, 1002], "follow": [31, 71, 102, 103, 105, 113, 114, 136, 160, 161, 175, 188, 228, 255, 269, 336, 340, 347, 453, 458, 465, 466, 467, 468, 469, 470, 471, 472, 473, 526, 537, 547, 594, 595, 596, 598, 602, 603, 604, 608, 609, 610, 634, 635, 640, 652, 700, 783, 787, 794, 894, 914, 915, 994, 996, 998, 1002, 1003, 1006, 1007, 1008, 1010], "first_column": [31, 255], "last_column": [31, 255], "banded_column": [31, 255], "banded_row": [31, 255], "sheet": [31, 106, 255], "chart": [31, 255, 653, 700], "subsequ": [31, 55, 192, 219, 255, 419, 625, 700], "colnam": [31, 113, 125, 146, 255, 624, 700], "given": [31, 50, 51, 65, 74, 90, 92, 93, 94, 96, 102, 103, 113, 122, 123, 125, 126, 127, 128, 130, 136, 137, 147, 148, 160, 161, 171, 187, 188, 197, 204, 205, 208, 222, 227, 255, 269, 315, 343, 345, 346, 352, 377, 398, 413, 419, 421, 451, 453, 458, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 476, 478, 479, 499, 517, 519, 526, 566, 583, 584, 585, 602, 616, 626, 634, 635, 644, 652, 661, 662, 667, 672, 675, 684, 700, 703, 710, 749, 758, 790, 792, 793, 800, 801, 817, 821, 840, 848, 863, 869, 871, 874, 886, 892, 894, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 912, 918, 919, 940, 958, 960, 989, 993, 1002, 1009, 1010], "dd": [31, 255], "mm": [31, 255], "yyyi": [31, 255], "00": [31, 74, 125, 130, 160, 175, 228, 255, 313, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 517, 519, 522, 564, 634, 640, 700, 703, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 795, 796, 797, 798, 958, 960, 963], "dtype": [31, 68, 75, 90, 92, 94, 96, 97, 100, 102, 103, 113, 122, 123, 124, 125, 127, 132, 135, 160, 161, 175, 217, 218, 219, 255, 269, 271, 272, 273, 274, 275, 276, 279, 294, 297, 298, 299, 300, 301, 306, 307, 319, 322, 326, 328, 330, 335, 342, 350, 357, 359, 395, 396, 397, 406, 418, 424, 426, 428, 460, 461, 465, 466, 467, 468, 469, 471, 472, 473, 480, 483, 484, 491, 500, 511, 517, 529, 531, 533, 534, 535, 540, 541, 547, 549, 557, 566, 570, 574, 575, 583, 589, 602, 634, 635, 640, 700, 703, 722, 723, 732, 737, 738, 739, 740, 746, 747, 750, 751, 762, 765, 772, 774, 777, 782, 789, 797, 801, 806, 824, 830, 837, 845, 846, 847, 856, 868, 874, 875, 899, 913, 920, 932, 941, 952, 958, 971, 981, 983, 984, 985, 989, 1002, 1010], "overridden": [31, 90, 92, 94, 96, 129, 255, 700], "basi": [31, 125, 255], "param": [31, 90, 92, 93, 94, 96, 102, 103, 113, 124, 125, 127, 197, 255, 700], "It": [31, 136, 182, 188, 237, 255, 269, 293, 436, 602, 644, 649, 684, 700, 914, 915, 1002], "also": [31, 55, 74, 93, 113, 123, 124, 125, 126, 127, 133, 146, 159, 160, 161, 182, 185, 201, 208, 232, 255, 304, 307, 339, 376, 377, 458, 465, 466, 467, 468, 469, 471, 472, 473, 488, 510, 516, 559, 560, 568, 570, 582, 594, 601, 602, 607, 633, 634, 635, 649, 659, 667, 678, 679, 700, 703, 786, 821, 894, 957, 1002], "group": [31, 35, 50, 103, 159, 160, 161, 173, 185, 187, 189, 226, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 263, 269, 365, 401, 451, 458, 487, 488, 492, 498, 499, 507, 531, 547, 602, 633, 634, 635, 665, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 703, 851, 933, 939, 940, 948], "float_dtyp": [31, 255], "simplifi": [31, 72, 255, 620, 625, 627, 653, 663, 664, 665, 700], "uniform": [31, 255], "condit": [31, 70, 145, 152, 197, 255, 496, 515, 568, 594, 623, 630, 700], "suppli": [31, 90, 92, 93, 94, 96, 197, 255, 453, 602, 700], "typenam": [31, 255], "3_color_scal": [31, 255], "data_bar": [31, 255], "make": [31, 57, 73, 90, 95, 102, 103, 104, 107, 111, 115, 117, 160, 161, 182, 185, 192, 228, 255, 355, 356, 428, 451, 461, 513, 524, 602, 634, 635, 649, 700, 803, 804, 817, 875, 954, 965, 1002, 1010], "icon": [31, 255], "multipl": [31, 53, 72, 73, 102, 103, 113, 115, 116, 117, 123, 127, 137, 143, 147, 149, 152, 159, 160, 165, 173, 187, 189, 201, 202, 208, 222, 232, 235, 255, 418, 433, 437, 443, 444, 451, 462, 465, 466, 467, 468, 469, 471, 472, 473, 488, 545, 546, 550, 553, 559, 560, 561, 568, 575, 576, 579, 582, 590, 594, 602, 616, 622, 630, 633, 634, 659, 660, 667, 672, 678, 682, 684, 700, 709, 801, 868, 880, 898, 1002], "singl": [31, 51, 65, 73, 102, 103, 104, 111, 113, 123, 143, 144, 145, 149, 156, 171, 174, 187, 197, 208, 255, 269, 336, 363, 399, 418, 426, 459, 462, 488, 491, 543, 545, 546, 547, 550, 553, 554, 555, 561, 575, 576, 579, 590, 602, 622, 623, 639, 667, 700, 709, 783, 849, 868, 895, 898, 932, 978, 1002], "across": [31, 65, 255, 545, 546, 561, 576, 579, 590], "effect": [31, 135, 154, 255, 269, 602, 680, 700], "heatmap": [31, 255], "min": [31, 35, 130, 142, 151, 160, 161, 189, 255, 297, 299, 305, 362, 451, 458, 468, 586, 602, 629, 634, 635, 665, 700, 738, 740, 745, 750, 809, 894, 904, 1002, 1010], "entir": [31, 255], "final": [31, 65, 117, 255, 354, 355, 356, 602, 627, 700, 802, 803, 804, 1002], "made": [31, 130, 255, 983, 1002], "up": [31, 57, 104, 172, 175, 198, 215, 255, 269, 296, 524, 602, 639, 640, 644, 700, 703, 735, 965, 1002], "abov": [31, 255, 347, 594], "order": [31, 50, 52, 65, 93, 120, 136, 137, 159, 160, 161, 187, 188, 189, 199, 202, 208, 222, 224, 228, 255, 269, 279, 285, 295, 415, 420, 458, 475, 476, 477, 487, 488, 526, 538, 539, 550, 602, 612, 616, 633, 634, 635, 648, 660, 664, 665, 667, 672, 673, 700, 710, 719, 725, 734, 749, 836, 865, 870, 892, 894, 899, 911, 912, 916, 928, 968, 987, 988, 1002], "than": [31, 74, 89, 94, 96, 102, 103, 113, 118, 125, 127, 136, 138, 158, 159, 172, 175, 187, 197, 198, 199, 226, 237, 255, 269, 370, 371, 389, 392, 425, 475, 485, 503, 509, 514, 524, 556, 590, 602, 633, 640, 664, 665, 700, 710, 911, 926, 944, 950, 955, 965, 1002, 1010], "total": [31, 147, 255, 801, 1002], "export": [31, 172, 173, 198, 215, 218, 255], "numer": [31, 175, 255, 262, 297, 298, 299, 367, 377, 423, 442, 444, 454, 461, 480, 527, 537, 602, 613, 640, 700, 703, 738, 739, 740, 750, 821, 835, 913, 920, 1002, 1010], "associ": [31, 51, 53, 65, 124, 255], "sum": [31, 50, 65, 147, 154, 159, 161, 171, 189, 235, 255, 269, 306, 307, 352, 363, 419, 465, 466, 468, 471, 472, 473, 543, 545, 559, 561, 568, 582, 602, 620, 625, 627, 633, 635, 651, 653, 663, 682, 700, 703, 746, 747, 800, 801, 901, 902, 904, 907, 908, 909, 1002], "pass": [31, 35, 53, 65, 74, 92, 106, 113, 123, 125, 127, 137, 141, 143, 159, 160, 161, 163, 177, 187, 188, 201, 208, 211, 222, 228, 232, 235, 255, 269, 320, 339, 360, 375, 451, 453, 465, 466, 467, 468, 469, 471, 472, 473, 488, 504, 510, 516, 545, 546, 550, 553, 561, 570, 576, 579, 589, 590, 602, 616, 622, 633, 634, 635, 637, 644, 652, 659, 663, 667, 672, 678, 682, 684, 700, 710, 763, 786, 807, 816, 843, 945, 951, 957, 972, 1002], "must": [31, 91, 92, 105, 114, 142, 148, 160, 161, 175, 182, 197, 255, 419, 426, 465, 466, 467, 468, 469, 471, 472, 473, 602, 626, 634, 635, 640, 644, 649, 700, 749, 750, 892, 1002], "funcnam": [31, 255], "averag": [31, 255, 354, 355, 356, 458, 602, 802, 803, 804, 894, 1002], "count_num": [31, 255], "count": [31, 50, 102, 103, 107, 111, 113, 115, 116, 117, 142, 160, 161, 175, 185, 186, 189, 223, 227, 228, 233, 237, 246, 255, 270, 303, 336, 393, 399, 445, 449, 465, 466, 467, 468, 469, 471, 472, 473, 493, 539, 541, 548, 580, 602, 634, 635, 640, 651, 675, 680, 684, 693, 700, 750, 783, 817, 849, 882, 887, 934, 988, 990, 1002], "std_dev": [31, 255], "var": [31, 128, 255, 602, 700, 1002], "pixel": [31, 255], "unit": [31, 38, 40, 74, 125, 127, 147, 255, 313, 314, 320, 345, 350, 424, 437, 517, 519, 540, 570, 602, 653, 700, 756, 757, 763, 792, 797, 801, 874, 958, 960, 989, 1002, 1010], "hand": [31, 102, 103, 113, 255], "side": [31, 160, 161, 255, 377, 465, 466, 467, 468, 469, 471, 472, 473, 476, 602, 634, 635, 700, 821, 912, 1002], "call": [31, 54, 103, 125, 127, 133, 136, 159, 160, 161, 176, 254, 255, 269, 304, 307, 576, 579, 602, 614, 633, 634, 635, 699, 700, 703, 710, 1002], "ad": [31, 93, 135, 160, 223, 232, 255, 268, 360, 559, 560, 602, 634, 678, 700, 807, 1002], "end": [31, 74, 102, 103, 111, 113, 130, 160, 255, 290, 336, 340, 341, 357, 377, 414, 492, 496, 499, 511, 515, 549, 553, 566, 594, 602, 634, 636, 643, 653, 700, 703, 729, 783, 787, 821, 864, 937, 940, 952, 956, 1002], "wise": [31, 65, 154, 255, 271, 272, 273, 274, 275, 276, 300, 301, 358, 422, 482, 483, 484, 533, 534, 559, 560, 568, 576, 579, 582, 602, 711, 712, 713, 714, 715, 716, 742, 743, 805, 872, 873, 923, 924, 925, 975, 976, 1002], "particip": [31, 255], "distinct": [31, 127, 187, 255, 285, 420, 458, 564, 602, 725, 870, 894, 1002, 1010], "referenc": [31, 255, 526], "differ": [31, 102, 118, 120, 149, 160, 161, 172, 198, 215, 223, 255, 309, 318, 336, 337, 339, 348, 400, 428, 446, 447, 517, 539, 567, 570, 602, 625, 634, 635, 700, 703, 709, 710, 751, 761, 783, 784, 786, 795, 850, 884, 885, 913, 958, 1002], "row_index": [31, 255], "height": [31, 145, 255], "provid": [31, 53, 102, 103, 104, 105, 113, 114, 125, 127, 171, 255, 288, 289, 419, 494, 495, 498, 500, 501, 570, 589, 613, 664, 665, 700, 727, 728, 817, 840, 935, 936, 939, 941, 942, 1002, 1009, 1010], "intersect": [31, 255, 703], "bodi": [31, 255], "start": [31, 74, 101, 102, 103, 107, 111, 113, 115, 116, 117, 129, 130, 159, 160, 176, 207, 228, 233, 255, 291, 318, 320, 321, 323, 324, 329, 331, 337, 338, 340, 341, 345, 347, 348, 349, 351, 357, 377, 414, 486, 492, 496, 499, 511, 515, 549, 553, 559, 566, 568, 594, 602, 633, 634, 653, 666, 680, 700, 703, 730, 756, 758, 761, 763, 764, 766, 771, 773, 776, 778, 781, 784, 785, 787, 788, 792, 794, 795, 796, 797, 798, 821, 864, 927, 937, 940, 952, 956, 1002, 1010], "zero": [31, 90, 91, 101, 102, 103, 107, 111, 124, 135, 151, 172, 197, 213, 218, 219, 255, 361, 362, 419, 423, 476, 485, 524, 537, 602, 618, 629, 700, 737, 809, 869, 926, 965, 978, 983, 984, 1002], "unless": [31, 65, 92, 219, 255, 510, 516, 583, 700, 957, 984, 992, 1002], "marker": [31, 255], "compliant": [31, 255], "case": [31, 65, 90, 92, 93, 94, 96, 117, 129, 136, 149, 160, 161, 172, 255, 426, 427, 436, 437, 492, 499, 507, 602, 634, 635, 700, 703, 709, 933, 940, 948, 1002], "three": [31, 221, 255, 419, 476, 602, 869], "avail": [31, 99, 105, 114, 123, 133, 254, 255, 458, 595, 596, 598, 601, 602, 603, 604, 607, 608, 609, 610, 613, 614, 627, 699, 700, 703, 894, 994, 996, 998, 1002, 1003, 1006, 1007, 1008], "insert_befor": [31, 255], "insert_aft": [31, 255], "respect": [31, 255], "direct": [31, 104, 111, 117, 226, 255], "far": [31, 255], "thei": [31, 93, 113, 120, 133, 176, 255, 464, 602, 703, 900, 1002], "strongli": [31, 129, 136, 197, 237, 255, 269, 602, 710, 1002], "advis": [31, 176, 255, 293, 602], "structur": [31, 81, 85, 87, 149, 188, 218, 255, 453, 602, 652, 700, 709, 1002], "your": [31, 65, 102, 103, 120, 121, 136, 172, 201, 232, 235, 255, 269, 293, 517, 518, 519, 602, 620, 636, 643, 644, 659, 678, 682, 700, 710, 958, 959, 960, 1002, 1010], "wherev": [31, 136, 237, 255, 269, 602, 710, 1002], "possibl": [31, 102, 136, 159, 172, 198, 224, 237, 255, 269, 424, 436, 514, 540, 602, 633, 673, 700, 710, 955, 1002], "simpl": [31, 127, 185, 255], "colx": [31, 55, 255, 1010], "coli": [31, 255, 1010], "after": [31, 55, 73, 93, 101, 102, 103, 107, 111, 113, 115, 116, 117, 149, 225, 254, 255, 357, 428, 451, 458, 524, 602, 674, 700, 709, 875, 894, 965, 1002], "befor": [31, 102, 113, 129, 133, 149, 160, 175, 225, 255, 306, 307, 308, 428, 451, 452, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 524, 529, 584, 585, 602, 634, 637, 640, 674, 700, 709, 746, 747, 748, 875, 888, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 965, 971, 1002], "most": [31, 52, 90, 102, 103, 113, 255, 437, 443, 452, 514, 541, 602, 880, 888, 955, 990, 1002, 1009], "mandatori": [31, 255], "return_dtyp": [31, 136, 255, 269, 426, 428, 547, 575, 602, 710, 875, 1002], "latter": [31, 149, 255, 709, 1002], "appropri": [31, 255, 458, 602, 894, 1002], "pure": [31, 255], "actual": [31, 93, 106, 125, 127, 255, 293, 602, 921, 1002], "indic": [31, 70, 101, 102, 103, 107, 111, 113, 122, 123, 127, 160, 161, 175, 202, 216, 228, 255, 280, 336, 340, 347, 379, 382, 383, 385, 386, 387, 418, 432, 435, 465, 466, 467, 468, 469, 471, 472, 473, 476, 482, 531, 550, 602, 634, 635, 640, 660, 700, 783, 787, 794, 825, 829, 831, 832, 833, 834, 868, 912, 923, 973, 979, 1002, 1010], "calcul": [31, 65, 160, 209, 229, 255, 309, 354, 355, 356, 390, 400, 424, 470, 485, 490, 540, 542, 545, 547, 556, 584, 585, 588, 593, 602, 634, 668, 676, 700, 751, 802, 803, 804, 841, 850, 906, 926, 930, 991, 1002], "individu": [31, 125, 161, 218, 255, 269, 499, 602, 635, 665, 700, 736, 940, 1002], "gridlin": [31, 255], "zoom": [31, 255], "level": [31, 35, 113, 115, 116, 117, 125, 136, 154, 185, 255, 363, 602, 636, 643, 665, 700], "definit": [31, 123, 255, 390, 602, 841, 1002], "take": [31, 125, 133, 154, 182, 188, 212, 255, 336, 488, 532, 565, 567, 602, 649, 671, 700, 783, 974, 993, 1002], "care": [31, 255, 269, 477, 602, 916, 1002], "rel": [31, 105, 114, 120, 121, 255, 336, 354, 355, 356, 602, 783, 802, 803, 804, 1002], "readthedoc": [31, 255], "io": [31, 255], "working_with_conditional_format": [31, 255], "html": [31, 91, 104, 135, 141, 255], "similarli": [31, 93, 255], "well": [31, 102, 103, 113, 148, 189, 255, 377, 602, 626, 700, 821, 1002], "adjac": [31, 255], "two": [31, 55, 92, 94, 96, 104, 130, 154, 181, 182, 189, 221, 236, 237, 255, 263, 310, 314, 419, 487, 531, 556, 558, 584, 585, 602, 648, 649, 683, 684, 700, 752, 757, 869, 1002], "help": [31, 255, 627, 700], "where": [31, 50, 65, 70, 104, 124, 145, 149, 172, 181, 198, 209, 229, 255, 280, 349, 352, 476, 485, 488, 490, 542, 556, 584, 585, 588, 593, 594, 602, 648, 668, 676, 700, 709, 720, 796, 800, 912, 926, 930, 991, 993, 1002, 1009], "appear": [31, 93, 120, 255, 539, 602, 988, 1002], "working_with_sparklin": [31, 255], "inject": [31, 65, 255], "locat": [31, 149, 195, 220, 225, 255, 476, 602, 674, 700, 709, 912, 915, 973, 1002], "syntax": [31, 136, 185, 255, 492, 498, 499, 507, 663, 700, 933, 939, 940, 948, 1002], "ensur": [31, 75, 124, 125, 127, 159, 187, 197, 255, 377, 541, 602, 633, 644, 700, 703, 983, 990, 1002], "correctli": [31, 255], "microsoft": [31, 119, 255], "com": [31, 104, 255, 354, 355, 356, 498, 499, 602, 802, 803, 804, 939, 940, 1002], "u": [31, 38, 40, 53, 74, 97, 172, 198, 215, 255, 313, 314, 320, 345, 350, 517, 519, 570, 756, 757, 763, 792, 797, 958, 960], "offic": [31, 255], "f5ed2452": [31, 255], "2337": [31, 255], "4f71": [31, 255], "bed3": [31, 255], "c8ae6d2b276": [31, 255], "random": [31, 123, 125, 127, 162, 199, 255, 372, 458, 475, 481, 602, 815, 894, 911, 922, 1002], "date": [31, 38, 65, 74, 102, 103, 104, 113, 118, 125, 142, 158, 160, 161, 173, 175, 228, 255, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 398, 465, 466, 467, 468, 469, 471, 472, 473, 517, 518, 535, 570, 574, 592, 602, 634, 635, 640, 700, 703, 756, 757, 758, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 837, 848, 849, 884, 885, 915, 958, 959, 985, 1002], "dtm": [31, 255, 314, 757], "2023": [31, 97, 119, 173, 255, 314, 574, 757], "num": [31, 221, 255, 377, 380, 524, 602, 821, 1002], "500": [31, 172, 227, 255, 627, 675, 700, 771, 773, 781, 788, 901, 902, 904, 1002], "val": [31, 196, 255, 295, 453, 535, 594, 602, 657, 700, 734], "10_000": [31, 255], "20_000": [31, 255], "30_000": [31, 255], "increas": [31, 65, 102, 111, 255, 308, 602, 748, 1002], "b4": [31, 255], "light": [31, 255], "twice": [31, 106, 255], "each": [31, 65, 103, 116, 120, 121, 123, 136, 158, 159, 160, 161, 173, 175, 187, 219, 225, 228, 234, 235, 237, 238, 240, 249, 255, 269, 336, 340, 347, 405, 417, 423, 458, 488, 499, 513, 514, 547, 550, 555, 589, 602, 634, 635, 640, 653, 674, 682, 684, 685, 687, 696, 700, 736, 783, 787, 794, 855, 867, 894, 940, 954, 955, 970, 1002, 1010], "titl": [31, 50, 255], "explicit": [31, 113, 123, 255, 549, 582], "integr": [31, 255, 1010], "multi_fram": [31, 255], "wb": [31, 255], "coordin": [31, 255], "advanc": [31, 255, 419, 869, 1010], "min_color": [31, 255], "76933c": [31, 255], "mid_color": [31, 255], "c4d79b": [31, 255], "max_color": [31, 255], "ebf1d": [31, 255], "data_bar_2010": [31, 255], "bar_color": [31, 255], "9bbb59": [31, 255], "bar_negative_color_sam": [31, 255], "bar_negative_border_color_sam": [31, 255], "000": [31, 255, 1010], "white": [31, 255], "w": [31, 52, 53, 255, 498, 703, 939, 951], "get_worksheet_by_nam": [31, 255], "fmt_titl": [31, 255], "add_format": [31, 255], "font_color": [31, 255], "4f6228": [31, 255], "font_siz": [31, 255], "12": [31, 65, 74, 97, 124, 125, 130, 160, 161, 175, 228, 255, 306, 314, 321, 324, 331, 332, 333, 338, 340, 347, 351, 452, 480, 520, 560, 562, 563, 575, 602, 634, 635, 636, 640, 643, 663, 670, 700, 703, 710, 749, 757, 778, 787, 794, 910, 961, 1002, 1010], "ital": [31, 255], "bold": [31, 255], "customis": [31, 255], "trend": [31, 255], "win_loss": [31, 255], "subtl": [31, 255], "tone": [31, 255], "hidden": [31, 255], "id": [31, 73, 237, 255, 507, 508, 539, 541, 602, 684, 988, 1002, 1010], "q1": [31, 255], "55": [31, 67, 255], "20": [31, 125, 130, 149, 165, 166, 188, 190, 194, 195, 255, 277, 278, 279, 309, 340, 347, 372, 376, 453, 570, 574, 602, 652, 700, 703, 751, 794, 1002], "35": [31, 119, 255, 309, 602, 751, 1002], "q2": [31, 255], "30": [31, 130, 149, 160, 165, 188, 194, 195, 214, 232, 255, 277, 278, 279, 309, 314, 319, 324, 332, 338, 339, 340, 347, 351, 372, 480, 574, 602, 634, 652, 678, 700, 703, 749, 751, 757, 762, 779, 786, 787, 794, 1002, 1010], "15": [31, 119, 124, 130, 136, 160, 161, 166, 255, 308, 309, 333, 340, 347, 453, 560, 583, 602, 634, 635, 700, 748, 751, 787, 794, 1002], "60": [31, 149, 255, 341, 342, 517, 784, 788, 789, 958], "q3": [31, 255], "40": [31, 149, 188, 255, 340, 347, 372, 520, 602, 652, 700, 767, 794, 961], "80": [31, 255], "q4": [31, 255], "75": [31, 142, 255, 266, 450, 602, 750, 817, 892, 1002, 1010], "account": [31, 97, 255, 336, 354, 355, 356, 602, 783, 802, 803, 804, 1002], "flavour": [31, 255], "integer_dtyp": [31, 201, 255, 659, 700, 703], "0_": [31, 255], "just": [31, 104, 113, 181, 255, 648, 700], "unifi": [31, 255, 703], "multi": [31, 102, 103, 255, 357, 498, 576, 579, 602, 939], "2_color_scal": [31, 255], "95b3d7": [31, 255], "ffffff": [31, 255], "base": [31, 36, 145, 152, 160, 161, 255, 352, 354, 355, 356, 421, 422, 506, 602, 623, 630, 634, 635, 700, 703, 800, 802, 803, 804, 817, 871, 872, 892, 947, 993, 1002, 1010], "standardis": [31, 255], "z": [31, 52, 73, 97, 123, 125, 147, 168, 170, 174, 181, 255, 262, 266, 295, 372, 397, 450, 461, 499, 517, 519, 583, 602, 639, 648, 666, 700, 703, 734, 809, 940, 958, 960, 1002, 1009], "score": [31, 255], "conjunct": [31, 106, 255], "a123": [31, 255], "b345": [31, 255], "c567": [31, 255], "d789": [31, 255], "e101": [31, 255], "45": [31, 130, 161, 255, 314, 340, 347, 493, 499, 574, 635, 700, 703, 757, 787, 794, 934, 940, 1010], "85": [31, 255, 1010], "font": [31, 255], "consola": [31, 255], "standard": [31, 119, 209, 218, 255, 324, 355, 471, 485, 490, 501, 588, 602, 668, 700, 767, 803, 926, 930, 942, 1002, 1010], "stdev": [31, 255], "ipccompress": [32, 255], "arrow": [32, 76, 90, 104, 107, 115, 213, 255, 664, 700, 978, 983, 1002], "ipc": [32, 107, 108, 115, 118, 255, 613], "binari": [32, 255, 287, 289, 290, 291, 546, 726, 728, 729, 730], "feather": [32, 107, 115, 255, 613], "lz4": [32, 35, 255, 664, 665, 700], "zstd": [32, 35, 255, 664, 665, 700], "pretti": [33, 255], "row_ori": [33, 255], "iobas": [33, 34, 109, 110, 255, 440, 655, 681, 700], "serial": [33, 34, 255], "represent": [33, 34, 217, 255, 295, 318, 321, 324, 325, 327, 329, 331, 334, 337, 338, 341, 348, 349, 351, 535, 602, 625, 642, 700, 734, 761, 764, 766, 767, 771, 773, 776, 778, 781, 784, 785, 788, 795, 796, 798, 981, 985, 1002], "orient": [33, 66, 68, 94, 96, 255, 700], "slower": [33, 94, 96, 136, 159, 187, 228, 237, 255, 633, 700, 710, 1002], "common": [33, 65, 73, 255, 607], "write_ndjson": [33, 255], "newlin": [34, 110, 116, 255], "delimit": [34, 102, 103, 110, 113, 116, 189, 216, 255, 491, 932, 979, 1002], "parquetcompress": [35, 255], "compression_level": [35, 255, 665, 700], "statist": [35, 102, 103, 111, 117, 142, 255, 355, 356, 390, 465, 466, 467, 468, 469, 470, 471, 472, 473, 485, 602, 665, 700, 750, 803, 804, 841, 906, 926, 1002], "row_group_s": [35, 255, 665, 700], "use_pyarrow": [35, 102, 107, 111, 255, 665, 700, 982, 983, 1002], "pyarrow_opt": [35, 105, 111, 114, 255], "parquet": [35, 111, 112, 117, 255, 613, 665, 700], "gzip": [35, 255, 665, 700], "lzo": [35, 255, 665, 700], "brotli": [35, 255, 665, 700], "choos": [35, 255, 664, 665, 700], "good": [35, 172, 255, 664, 665, 700], "perform": [35, 65, 81, 91, 102, 103, 107, 111, 113, 115, 116, 117, 135, 136, 160, 161, 175, 192, 237, 255, 269, 293, 451, 517, 518, 519, 602, 634, 635, 640, 664, 665, 680, 700, 710, 958, 959, 960, 1002], "fast": [35, 126, 128, 255, 360, 477, 602, 664, 665, 700, 807, 916, 1002, 1010], "decompress": [35, 255, 664, 665, 700], "backward": [35, 151, 175, 255, 286, 333, 362, 602, 629, 640, 665, 700, 780, 809, 1002], "guarante": [35, 91, 102, 103, 224, 255, 627, 665, 673, 700], "deal": [35, 172, 255, 339, 458, 517, 602, 665, 700, 786, 894, 958, 1002], "older": [35, 255, 665, 700], "reader": [35, 99, 102, 103, 107, 111, 255, 614, 665, 700], "higher": [35, 191, 247, 255, 457, 469, 581, 602, 654, 665, 694, 700, 893, 905, 1002], "mean": [35, 102, 103, 107, 111, 113, 142, 151, 159, 189, 235, 255, 359, 362, 466, 485, 498, 551, 602, 629, 633, 644, 665, 682, 700, 750, 806, 809, 814, 902, 926, 939, 1002], "smaller": [35, 147, 255, 627, 665, 700, 801, 1002], "disk": [35, 107, 255, 663, 664, 665, 700], "11": [35, 119, 125, 161, 255, 311, 312, 324, 332, 333, 336, 340, 347, 376, 452, 458, 472, 486, 524, 544, 553, 590, 602, 620, 635, 636, 643, 653, 665, 670, 700, 703, 710, 783, 787, 794, 900, 1002], "22": [35, 124, 255, 340, 347, 350, 517, 553, 665, 700, 787, 794, 797, 958, 1010], "comput": [35, 72, 73, 78, 147, 159, 175, 219, 224, 235, 247, 255, 261, 271, 272, 273, 274, 275, 276, 282, 283, 284, 300, 301, 303, 304, 305, 306, 307, 310, 352, 358, 390, 409, 410, 411, 421, 422, 423, 443, 451, 452, 456, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 482, 483, 484, 485, 489, 533, 534, 545, 546, 550, 556, 558, 561, 565, 576, 579, 584, 585, 590, 602, 633, 637, 639, 640, 665, 673, 679, 682, 694, 700, 705, 711, 712, 713, 714, 715, 716, 722, 723, 724, 742, 743, 744, 745, 746, 747, 752, 800, 801, 805, 841, 859, 860, 861, 871, 872, 873, 880, 888, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 923, 924, 925, 926, 929, 975, 976, 984, 1002], "512": [35, 255, 454, 602, 888, 1002], "implement": [35, 91, 135, 136, 237, 255, 269, 602, 684, 710, 914, 915, 1002], "v": [35, 52, 53, 147, 255, 476, 602, 749, 912, 1002], "At": [35, 255], "moment": [35, 141, 255, 390, 485, 602, 841, 926, 1002], "pyarrow": [35, 90, 95, 102, 105, 107, 111, 114, 118, 119, 173, 213, 218, 219, 255, 614, 978, 982, 983, 984, 1002], "write_t": [35, 255], "calendar": [37, 38, 160, 161, 175, 228, 255, 324, 336, 340, 347, 351, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 640, 700, 767, 783, 787, 794, 798], "time_unit": [38, 40, 74, 97, 313, 314, 320, 345, 350, 517, 519, 570, 703, 756, 757, 763, 792, 797, 958, 960], "time_zon": [38, 74, 97, 315, 339, 519, 758, 786, 960], "timezon": [38, 74], "m": [38, 40, 53, 74, 174, 255, 313, 314, 320, 343, 345, 346, 350, 498, 517, 518, 519, 522, 570, 639, 700, 703, 756, 757, 763, 790, 792, 793, 797, 939, 958, 959, 960, 963], "zone": [38, 74, 315, 339, 517, 519, 758, 786, 958, 960], "zoneinfo": 38, "run": [38, 72, 126, 128, 136, 159, 176, 189, 224, 237, 255, 269, 308, 401, 586, 602, 620, 625, 627, 633, 644, 648, 653, 663, 664, 665, 673, 700, 710, 748, 851, 1002, 1009, 1010], "available_timezon": 38, "128": [39, 67, 888, 1002], "bit": [39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 460, 492, 602, 896, 933, 1002], "neg": [39, 160, 163, 177, 204, 205, 207, 211, 255, 413, 414, 453, 478, 479, 486, 511, 602, 634, 661, 662, 666, 680, 700, 816, 843, 863, 864, 918, 919, 927, 952, 972, 1002], "scale": [39, 147, 255, 453, 520, 602, 801, 961, 1002], "experiment": [39, 118, 201, 226, 227, 232, 255, 308, 340, 465, 466, 467, 468, 469, 471, 472, 473, 602, 659, 675, 678, 700, 748, 787, 817, 892, 1002], "progress": 39, "expect": [39, 82, 84, 89, 269, 547, 574, 602, 642, 644, 700, 892, 1002], "32": [41, 44, 60, 67, 161, 171, 255, 444, 480, 602, 635, 700, 752, 784, 888, 905, 1002], "sign": [43, 44, 45, 46, 336, 460, 524, 602, 783, 830, 896, 965, 1002], "arrai": [47, 90, 94, 102, 103, 111, 147, 213, 218, 219, 255, 282, 283, 284, 285, 289, 297, 298, 299, 303, 304, 305, 306, 307, 397, 408, 409, 410, 411, 412, 415, 416, 422, 465, 466, 468, 471, 472, 473, 477, 493, 495, 498, 501, 565, 602, 700, 722, 723, 724, 725, 728, 738, 739, 740, 744, 745, 746, 747, 752, 801, 847, 858, 859, 860, 861, 862, 865, 866, 872, 873, 901, 902, 904, 907, 908, 909, 916, 921, 934, 936, 939, 942, 978, 983, 984, 992, 1002], "wrap": [49, 97, 377, 602], "arbitrari": [49, 125], "python": [49, 74, 102, 103, 119, 130, 136, 172, 198, 215, 237, 255, 269, 314, 426, 547, 594, 602, 607, 684, 710, 757, 768, 769, 770, 775, 982, 1002], "queri": [50, 52, 72, 104, 107, 113, 115, 116, 117, 149, 176, 188, 255, 428, 501, 602, 620, 625, 627, 636, 643, 653, 663, 680, 684, 700, 709, 942, 1002, 1009], "eager": [50, 51, 52, 53, 54, 55, 70, 74, 100, 130, 132, 160, 226, 255, 313, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 345, 347, 348, 349, 350, 351, 549, 570, 583, 589, 601, 613, 634, 700, 756, 758, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 794, 795, 796, 797, 798, 1009], "pars": [50, 102, 103, 106, 113, 115, 116, 137, 159, 201, 208, 222, 232, 235, 255, 377, 451, 488, 500, 506, 517, 519, 520, 545, 546, 550, 552, 554, 555, 561, 570, 576, 579, 586, 587, 589, 590, 602, 616, 633, 659, 667, 672, 678, 682, 700, 821, 941, 947, 958, 960, 961, 1002], "against": [50, 401, 700, 851, 1009, 1010], "eagerli": [50, 419], "unset": [50, 124, 339, 419, 786], "init": [50, 133], "eager_execut": [50, 1009], "itself": [50, 123, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 584, 585, 602, 642, 700, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 1002, 1009], "alwai": [50, 102, 124, 136, 237, 255, 436, 517, 594, 644, 700, 710, 958, 1002, 1009, 1010], "impact": [50, 160, 255, 634, 700, 1009], "declar": [50, 90, 92, 93, 94, 96, 255, 700], "godfath": 50, "1972": 50, "6_000_000": 50, "134_821_952": 50, "dark": 50, "knight": 50, "2008": 50, "185_000_000": 50, "533_316_061": 50, "schindler": 50, "1993": 50, "22_000_000": 50, "96_067_179": 50, "pulp": 50, "fiction": 50, "1994": 50, "8_000_000": 50, "107_930_000": 50, "shawshank": 50, "redempt": 50, "25_000_000": 50, "28_341_469": 50, "release_year": 50, "budget": 50, "gross": 50, "imdb_scor": 50, "ctx": [50, 51, 52, 53, 54, 55], "film": 50, "1990": 50, "BY": [50, 52], "desc": [50, 52], "AS": [50, 1009], "decad": 50, "total_gross": 50, "n_film": 50, "2000": [50, 323, 325, 332, 333, 336, 703, 766, 779, 780, 783], "533316061": 50, "232338648": 50, "1970": [50, 118], "134821952": 50, "register_glob": [51, 53, 55, 1009], "register_mani": [51, 52, 55], "unregist": [51, 52, 53, 1009], "frame_data": [51, 54], "execut": [51, 52, 54, 73, 176, 255, 293, 401, 602, 617, 644, 653, 700, 851, 1009], "collect": [51, 52, 55, 68, 72, 113, 114, 118, 125, 127, 130, 143, 145, 176, 213, 255, 269, 381, 549, 554, 570, 589, 602, 616, 622, 623, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 650, 651, 652, 654, 656, 657, 659, 661, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 678, 679, 680, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 700, 703, 828, 1002, 1009, 1010], "global": [52, 56, 75, 125, 131, 428, 602, 1009], "scope": [52, 55, 133, 612, 703, 1009], "automat": [52, 55, 90, 92, 93, 94, 96, 97, 102, 103, 104, 113, 125, 127, 129, 201, 232, 255, 428, 504, 510, 516, 602, 659, 678, 700, 875, 945, 951, 957, 1002, 1009], "map": [52, 53, 92, 93, 102, 103, 107, 108, 111, 112, 113, 115, 136, 146, 172, 193, 197, 198, 214, 255, 340, 347, 427, 428, 451, 541, 547, 602, 624, 656, 700, 787, 794, 875, 1002, 1009], "recent": [52, 452, 602, 888, 1002, 1009], "df1": [52, 54, 55, 56, 65, 73, 75, 120, 149, 155, 219, 230, 255], "x": [52, 53, 65, 73, 97, 102, 103, 104, 113, 123, 125, 147, 165, 168, 170, 174, 181, 189, 255, 262, 266, 269, 353, 367, 370, 371, 372, 392, 397, 406, 423, 425, 426, 442, 444, 448, 450, 454, 461, 482, 485, 513, 527, 535, 537, 544, 547, 559, 560, 568, 574, 575, 582, 602, 639, 644, 648, 666, 700, 703, 706, 710, 809, 839, 923, 926, 954, 985, 1002, 1009], "df2": [52, 54, 55, 56, 65, 73, 75, 120, 149, 155, 219, 230, 255], "t": [52, 53, 73, 106, 113, 136, 188, 224, 226, 255, 269, 308, 339, 352, 354, 355, 356, 401, 451, 453, 498, 504, 517, 519, 547, 594, 602, 652, 673, 700, 703, 710, 748, 786, 800, 802, 803, 804, 851, 913, 939, 945, 951, 958, 960, 992, 1002], "join": [52, 56, 65, 72, 73, 75, 175, 227, 255, 376, 451, 602, 620, 625, 627, 640, 653, 663, 675, 679, 700], "named_fram": [53, 1009], "lf1": [53, 55], "o": [53, 107, 115, 292, 308, 497, 536, 602, 731, 748, 938, 957, 986, 1002], "lf2": [53, 55, 700], "p": [53, 67, 188, 255, 453, 589, 602, 652, 700], "q": [53, 589], "r": [53, 453, 493, 497, 498, 499, 507, 602, 703, 934, 938, 939, 940, 948], "lf3": [53, 700], "lf4": [53, 700], "either": [53, 125, 161, 171, 176, 179, 187, 197, 210, 255, 517, 545, 550, 589, 635, 642, 700, 703, 958], "tbl1": [53, 55], "tbl2": [53, 55], "tbl3": 53, "tbl4": 53, "statement": [54, 594], "hello_world": 54, "baz": [54, 166, 167, 189, 225, 255, 512, 514, 638, 674, 700, 703, 955], "hello_data": 54, "foo_bar": [54, 574], "registr": [55, 613], "lifetim": [55, 133, 612], "context": [55, 56, 129, 130, 185, 238, 255, 263, 269, 293, 302, 363, 401, 436, 487, 488, 541, 547, 557, 567, 570, 583, 586, 601, 602, 612, 613, 679, 685, 700, 851, 1009], "manag": [55, 56, 612, 613, 1009], "often": [55, 133, 160, 161, 255, 399, 461, 602, 634, 635, 700, 849], "want": [55, 93, 100, 132, 136, 149, 185, 255, 269, 297, 298, 299, 363, 426, 428, 465, 466, 467, 468, 469, 471, 472, 473, 559, 568, 583, 602, 620, 636, 643, 700, 703, 709, 710, 738, 739, 740, 983, 1002], "df0": 55, "exit": [55, 56, 133, 1009], "construct": [55, 90, 92, 93, 94, 95, 96, 100, 132, 255, 369, 428, 583, 602, 632, 655, 700, 1002], "persist": [55, 664, 665, 700], "through": [55, 703, 1002], "tbl0": 55, "remain": [55, 102, 103, 113, 147, 255, 513, 514, 644, 700, 801, 954, 955, 1002], "text": [55, 505, 507, 508, 946, 1010], "misc": 55, "testing1234": 55, "test1": 55, "test2": 55, "test3": 55, "temporarili": [56, 129, 133, 160, 161, 255, 634, 635, 700], "cach": [56, 72, 75, 107, 113, 115, 117, 131, 428, 465, 466, 467, 468, 469, 471, 472, 473, 517, 518, 519, 522, 602, 612, 620, 625, 627, 653, 663, 700, 958, 959, 960, 963], "categori": [56, 75, 295, 734, 749, 817, 892, 1002], "until": [56, 176, 255, 293, 602], "finish": [56, 78, 149, 255, 709, 1002], "invalid": [56, 102, 103, 113, 500, 501, 506, 537, 602, 941, 942, 947], "outermost": 56, "color": [56, 75, 237, 684], "red": [56, 75, 237, 684], "green": [56, 75, 237, 684], "blue": [56, 75], "orang": [56, 75, 140, 238, 239, 241, 242, 243, 245, 247, 248, 255, 685, 686, 688, 689, 690, 692, 694, 695], "uint8": [56, 75, 122, 124, 217, 218, 255, 306, 307, 428, 529, 544, 602, 703, 746, 747, 971, 1002, 1010], "yellow": [56, 75], "black": [56, 75, 136, 255], "succe": [56, 102, 103, 113], "df_join": [56, 75], "cat": [56, 75, 217, 255, 492, 521, 523, 535, 555, 598, 602, 703, 749, 817, 892, 933, 998, 1002], "u8": [56, 75, 216, 217, 255, 428, 544, 602, 703, 979, 1002, 1010], "schemadict": [57, 90, 92, 93, 94, 95, 96, 113, 200, 255, 589, 644, 658, 684, 700], "composit": [57, 124, 1010], "dai": [58, 74, 160, 161, 173, 175, 228, 255, 320, 324, 331, 332, 333, 336, 337, 338, 340, 345, 347, 348, 349, 351, 465, 466, 467, 468, 469, 471, 472, 473, 562, 563, 564, 602, 634, 635, 640, 700, 779, 780, 783, 784, 787, 794, 796], "unsign": [59, 60, 61, 62, 460, 602, 830, 896, 1002], "could": [63, 78, 145, 160, 255, 294, 559, 568, 602, 623, 634, 700, 732, 1002], "static": [63, 684], "utf": 64, "frametyp": [65, 1009], "joinstrategi": [65, 174, 255, 639, 700], "outer": [65, 73, 174, 255, 639, 700], "descend": [65, 137, 202, 208, 222, 255, 279, 415, 458, 477, 487, 488, 550, 602, 616, 660, 667, 672, 700, 719, 836, 865, 894, 916, 928, 1002], "fill": [65, 73, 100, 132, 138, 150, 151, 205, 226, 255, 286, 304, 307, 361, 362, 368, 376, 465, 466, 468, 471, 472, 473, 479, 503, 509, 524, 569, 583, 602, 628, 629, 662, 679, 700, 808, 809, 886, 901, 902, 904, 907, 908, 909, 919, 944, 950, 965, 1002], "sort": [65, 66, 120, 124, 137, 160, 161, 175, 182, 188, 189, 202, 222, 228, 240, 249, 255, 279, 295, 363, 451, 477, 488, 541, 543, 550, 602, 616, 625, 634, 635, 640, 649, 652, 653, 660, 663, 672, 687, 696, 700, 703, 719, 734, 836, 916, 987, 990, 1002, 1010], "origin": [65, 102, 103, 224, 255, 339, 389, 428, 451, 460, 493, 498, 499, 501, 503, 509, 524, 602, 673, 700, 749, 786, 875, 892, 934, 939, 940, 942, 944, 950, 965, 1002], "In": [65, 105, 114, 117, 125, 127, 133, 136, 147, 149, 160, 161, 185, 255, 269, 602, 634, 635, 700, 709, 801, 895, 1002], "duplic": [65, 79, 168, 174, 175, 224, 255, 378, 602, 639, 640, 673, 700, 823, 1002], "behaviour": [65, 73, 492, 498, 499, 507, 537, 602, 933, 939, 940, 948], "strategi": [65, 73, 102, 122, 123, 124, 125, 127, 151, 160, 174, 175, 184, 255, 269, 362, 419, 602, 629, 634, 639, 640, 700, 809, 869, 1002], "suitabl": [65, 73, 123, 136, 255, 269, 476, 602, 710, 912, 1002, 1010], "get": [65, 74, 98, 108, 112, 129, 137, 140, 146, 156, 157, 160, 161, 163, 164, 168, 170, 171, 177, 184, 197, 200, 203, 207, 211, 222, 231, 240, 249, 255, 263, 277, 278, 279, 281, 285, 303, 304, 305, 306, 307, 320, 336, 364, 373, 378, 380, 388, 391, 394, 403, 407, 408, 420, 429, 430, 431, 436, 438, 441, 446, 447, 457, 486, 490, 502, 505, 529, 530, 538, 542, 567, 572, 576, 577, 578, 579, 588, 591, 593, 602, 616, 621, 624, 631, 634, 635, 636, 641, 643, 658, 666, 670, 672, 677, 687, 696, 700, 717, 718, 719, 720, 721, 725, 736, 744, 745, 746, 747, 763, 783, 813, 816, 821, 823, 826, 838, 843, 853, 857, 858, 870, 876, 878, 879, 881, 884, 885, 889, 890, 893, 927, 930, 943, 946, 972, 978, 979, 987, 991, 992, 1002], "speedup": [65, 136, 172, 255, 269, 602, 710, 1002], "receiv": [65, 113, 136, 188, 255, 453, 602, 652, 700, 1010], "now": [65, 161, 255, 517, 519, 635, 700, 958, 960], "One": [65, 142, 185, 189, 255, 266, 450, 602, 703, 750, 1002], "whose": [65, 175, 189, 255, 357, 566, 602, 640, 700], "uniqu": [65, 122, 123, 124, 127, 170, 174, 185, 246, 255, 270, 281, 380, 388, 445, 517, 518, 519, 522, 539, 541, 548, 580, 602, 639, 693, 700, 721, 750, 826, 838, 882, 958, 959, 960, 963, 988, 990, 1002], "post": 65, "constrain": 65, "newli": 65, "boolean": [65, 70, 137, 152, 154, 208, 222, 255, 265, 266, 267, 287, 323, 363, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 398, 450, 488, 500, 543, 544, 550, 589, 602, 616, 630, 667, 672, 700, 703, 707, 708, 720, 726, 766, 810, 821, 822, 823, 825, 826, 828, 829, 831, 832, 833, 834, 838, 848, 889, 890, 914, 933, 993, 1002], "know": [65, 419, 505, 946, 983, 992, 1002], "first": [65, 102, 103, 106, 113, 116, 124, 136, 158, 160, 163, 175, 177, 184, 188, 189, 211, 217, 223, 224, 228, 240, 255, 279, 281, 308, 333, 336, 340, 373, 380, 394, 401, 404, 405, 419, 428, 453, 476, 488, 498, 500, 501, 507, 508, 552, 559, 568, 572, 594, 602, 620, 634, 636, 640, 643, 652, 673, 679, 687, 700, 703, 719, 748, 750, 780, 783, 787, 816, 826, 843, 851, 854, 855, 869, 875, 912, 939, 941, 942, 948, 949, 972, 981, 1002, 1010], "2022": [65, 74, 142, 158, 160, 161, 175, 228, 255, 314, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 517, 564, 570, 602, 634, 635, 640, 700, 757, 767, 783, 787, 794, 958], "y": [65, 73, 97, 123, 125, 147, 168, 170, 174, 181, 189, 255, 262, 266, 343, 346, 353, 370, 371, 392, 397, 406, 425, 448, 450, 461, 517, 518, 519, 537, 544, 574, 602, 639, 648, 666, 700, 703, 706, 790, 793, 958, 959, 960, 1002], "df3": [65, 255], "set_tbl_format": 65, "09": [65, 125, 161, 255, 314, 324, 332, 333, 520, 635, 700, 761, 961], "01": [65, 74, 125, 130, 142, 158, 160, 161, 228, 255, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 517, 518, 519, 522, 564, 634, 635, 700, 703, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 958, 959, 960, 963], "02": [65, 74, 130, 158, 160, 161, 175, 228, 255, 313, 314, 320, 321, 322, 329, 330, 331, 332, 333, 336, 339, 340, 341, 342, 345, 347, 348, 350, 465, 466, 467, 468, 469, 471, 472, 473, 474, 517, 518, 519, 522, 564, 602, 634, 635, 640, 700, 703, 756, 757, 759, 760, 763, 764, 765, 768, 769, 770, 771, 773, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 795, 796, 797, 869, 958, 959, 960, 963], "03": [65, 74, 97, 160, 161, 228, 255, 313, 314, 315, 319, 320, 322, 330, 331, 332, 333, 339, 340, 341, 342, 343, 345, 346, 347, 348, 350, 518, 522, 634, 635, 700, 756, 757, 758, 761, 762, 763, 764, 765, 768, 769, 770, 771, 773, 775, 777, 778, 779, 780, 781, 784, 785, 786, 787, 788, 789, 790, 792, 793, 795, 796, 797, 959, 963], "af1": 65, "af2": 65, "af3": 65, "keep": [65, 102, 103, 113, 224, 227, 228, 255, 389, 428, 552, 602, 673, 675, 700, 749, 875, 892, 1002], "easili": [65, 201, 232, 235, 255, 553, 589, 659, 678, 682, 700], "dot": [65, 602, 663, 700, 1002], "product": [65, 141, 255, 306, 310, 547, 602, 746, 752, 1002], "fill_nul": [65, 150, 255, 602, 628, 679, 700, 1002], "167": 65, "47": 65, "callabl": [66, 67, 68, 69, 113, 136, 154, 188, 237, 255, 269, 419, 426, 427, 453, 464, 547, 559, 560, 568, 575, 582, 602, 644, 652, 684, 700, 710, 869, 900, 1002], "decor": [66, 67, 68, 69, 125, 127, 136, 255, 269, 602, 612, 613, 710, 1002], "under": [66, 67, 68, 69, 595, 596, 598, 603, 604, 608, 609, 610, 994, 996, 998, 1003, 1006, 1007, 1008], "access": [66, 67, 68, 69, 172, 197, 198, 255, 428, 602, 679, 700, 1010], "by_first_letter_of_column_nam": 66, "f": [66, 103, 142, 158, 173, 213, 223, 226, 255, 262, 269, 419, 480, 497, 517, 519, 547, 554, 575, 602, 869, 938, 958, 960], "fromkei": [66, 68], "by_first_letter_of_column_valu": 66, "starts_with": [66, 492, 496, 703, 937], "slice": [66, 72, 147, 163, 173, 211, 255, 405, 417, 464, 465, 466, 467, 468, 469, 471, 472, 473, 602, 620, 625, 627, 644, 653, 663, 664, 665, 700, 801, 816, 855, 867, 900, 901, 902, 903, 904, 905, 907, 908, 909, 972, 1002], "to_seri": [66, 70, 156, 255, 517, 583, 958], "xx": [66, 68, 124, 127, 703], "xy": [66, 68], "yy": [66, 68, 124, 127, 703], "yz": [66, 68], "a2": [66, 68], "b1": [66, 68], "b2": [66, 68], "pow_n": 67, "powersofn": 67, "next": [67, 286, 458, 602, 894, 1002], "ceil": [67, 602, 1002], "previou": [67, 133, 452, 526, 602, 888, 1002], "floor": [67, 602, 1002], "nearest": [67, 175, 191, 247, 255, 296, 366, 457, 469, 581, 602, 640, 654, 694, 700, 735, 812, 820, 893, 905, 1002], "24": [67, 119, 136, 147, 161, 255, 306, 308, 322, 444, 602, 635, 700, 748, 765, 840, 1002], "001": [67, 325, 326, 328, 335, 564, 772, 774, 782], "next_pow2": 67, "prev_pow2": 67, "nearest_pow2": 67, "split_by_column_dtyp": 68, "collect_al": 68, "31": [69, 74, 125, 314, 318, 319, 331, 332, 336, 348, 517, 562, 563, 570, 574, 703, 757, 761, 762, 779, 783, 958, 1010], "42": [69, 161, 162, 255, 635, 700, 815, 1002], "961": 69, "1764": 69, "4160": 69, "evalu": [70, 74, 100, 130, 132, 150, 152, 175, 255, 266, 280, 308, 375, 377, 381, 419, 428, 450, 545, 546, 549, 565, 583, 589, 594, 602, 630, 637, 639, 640, 700, 720, 748, 993, 1002], "immedi": [70, 74, 100, 130, 132, 458, 549, 583, 589, 602, 894, 1002], "arg_tru": [70, 602, 1002], "build": [71, 91, 703, 1010], "wa": 71, "compil": [71, 395, 396, 845, 846], "gate": 71, "info": [71, 105, 114, 119, 323, 766], "otherwis": [71, 124, 129, 182, 201, 255, 288, 297, 298, 299, 339, 354, 355, 356, 419, 453, 460, 465, 466, 467, 468, 469, 471, 472, 473, 492, 494, 545, 546, 561, 576, 579, 590, 594, 602, 649, 659, 700, 710, 727, 738, 739, 740, 786, 802, 803, 804, 869, 896, 914, 915, 933, 935, 1002], "depend": [71, 119, 269, 395, 396, 436, 458, 547, 567, 570, 602, 845, 846, 894, 1002, 1010], "host": [71, 102, 107, 111, 115, 117], "git": 71, "lazy_fram": 72, "type_coercion": [72, 620, 625, 627, 653, 663, 664, 665, 700], "predicate_pushdown": [72, 620, 625, 627, 644, 653, 663, 664, 665, 700], "projection_pushdown": [72, 620, 625, 627, 644, 653, 663, 664, 665, 700], "simplify_express": [72, 620, 625, 627, 653, 663, 664, 665, 700], "no_optim": [72, 620, 627, 644, 653, 664, 665, 700], "slice_pushdown": [72, 620, 625, 627, 644, 653, 663, 664, 665, 700], "common_subplan_elimin": [72, 620, 625, 627, 653, 663, 700], "graph": [72, 176, 255, 637, 679, 700], "parallel": [72, 73, 99, 104, 111, 117, 160, 175, 176, 188, 255, 308, 401, 602, 613, 634, 639, 640, 684, 700, 748, 851, 1002], "threadpool": [72, 129], "coercion": [72, 461, 602, 620, 625, 627, 653, 663, 664, 665, 700], "optim": [72, 111, 113, 115, 116, 117, 172, 176, 188, 192, 198, 224, 255, 620, 625, 627, 644, 653, 663, 664, 665, 673, 680, 684, 700], "predic": [72, 113, 115, 116, 117, 118, 152, 171, 197, 255, 363, 543, 568, 602, 620, 625, 627, 630, 644, 653, 656, 663, 664, 665, 680, 700, 810, 914, 915, 1002], "pushdown": [72, 620, 625, 627, 644, 653, 656, 663, 664, 665, 680, 700, 914, 915, 1002], "project": [72, 113, 115, 116, 117, 269, 487, 488, 602, 620, 625, 627, 644, 653, 656, 663, 664, 665, 681, 700], "turn": [72, 102, 103, 113, 541, 602, 620, 625, 627, 644, 653, 664, 665, 700], "off": [72, 102, 103, 113, 541, 602, 620, 625, 627, 644, 653, 664, 665, 700], "Will": [72, 223, 255, 620, 625, 627, 653, 663, 700, 1002], "try": [72, 85, 87, 102, 103, 106, 107, 111, 113, 115, 117, 620, 625, 627, 653, 663, 700], "branch": [72, 620, 625, 627, 653, 663, 700], "subplan": [72, 620, 625, 627, 653, 663, 700], "occur": [72, 399, 443, 458, 602, 620, 625, 627, 653, 663, 700, 849, 880, 894, 1002], "union": [72, 73, 620, 625, 627, 653, 663, 700, 703], "part": [72, 90, 125, 499, 513, 514, 620, 625, 627, 653, 663, 679, 700, 761, 764, 771, 773, 776, 778, 781, 788, 798, 940, 954, 955], "fashion": [72, 174, 255, 620, 625, 627, 653, 663, 700], "item": [73, 103, 197, 199, 255, 359, 398, 404, 406, 475, 514, 602, 806, 848, 854, 856, 911, 955, 1002], "iter": [73, 126, 128, 137, 159, 160, 161, 172, 173, 187, 197, 198, 201, 202, 208, 222, 223, 232, 234, 235, 255, 308, 357, 451, 488, 545, 546, 550, 552, 553, 554, 555, 561, 566, 576, 579, 586, 589, 590, 602, 616, 633, 634, 635, 659, 660, 667, 672, 678, 682, 700, 748, 1002, 1010], "polarstyp": 73, "concatmethod": 73, "vertic": [73, 149, 226, 230, 255, 491, 932], "rechunk": [73, 90, 95, 102, 103, 107, 111, 113, 115, 116, 117, 149, 255, 602, 709, 736, 881, 1002], "combin": [73, 74, 85, 87, 160, 161, 162, 175, 228, 255, 266, 280, 336, 347, 450, 504, 510, 516, 602, 634, 635, 640, 663, 700, 783, 794, 945, 951, 957], "concaten": [73, 154, 188, 255, 453, 554, 555, 602, 652, 700, 736, 881, 1002], "diagon": [73, 223, 255], "vstack": [73, 149, 255], "find": [73, 153, 255, 476, 602, 912, 1002], "miss": [73, 102, 103, 113, 150, 255, 286, 354, 355, 356, 368, 376, 383, 385, 602, 628, 700, 802, 803, 804, 992, 1002], "stack": [73, 165, 230, 255], "don": [73, 136, 224, 226, 255, 269, 308, 401, 451, 547, 602, 673, 700, 703, 710, 748, 851, 913, 992, 1002], "auto": [73, 90, 92, 93, 94, 96, 111, 117, 223, 255, 700, 1010], "logic": [73, 136, 237, 255, 266, 450, 535, 544, 602, 632, 639, 655, 681, 700, 710, 985, 1002], "align_fram": 73, "pattern": [73, 102, 103, 113, 115, 116, 117, 172, 255, 434, 492, 493, 498, 499, 507, 508, 684, 703, 914, 915, 933, 934, 939, 940, 948, 949, 1002], "collis": 73, "need": [73, 97, 100, 102, 103, 106, 120, 121, 132, 160, 161, 206, 218, 255, 419, 428, 480, 502, 520, 583, 602, 634, 635, 700, 920, 943, 961, 1002], "sure": [73, 90, 95, 102, 103, 104, 107, 111, 160, 161, 192, 255, 549, 634, 635, 700], "contigu": [73, 90, 95, 102, 103, 107, 111, 113, 115, 116, 117, 192, 255], "relev": 73, "df_h1": 73, "l1": 73, "l2": 73, "df_h2": 73, "r1": 73, "r2": 73, "r3": 73, "df_d1": 73, "df_d2": 73, "df_a1": 73, "df_a2": 73, "df_a3": 73, "interv": [74, 130, 160, 161, 228, 255, 323, 340, 341, 347, 377, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 700, 761, 763, 764, 766, 771, 773, 776, 778, 781, 784, 785, 787, 788, 792, 794, 795, 796, 798, 821, 1002], "timedelta": [74, 130, 160, 161, 228, 255, 318, 320, 321, 324, 329, 331, 336, 337, 338, 340, 341, 345, 347, 348, 349, 351, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 700, 768, 770, 775, 783, 787, 794, 884, 885, 1002], "1d": [74, 160, 161, 175, 228, 255, 313, 322, 330, 336, 340, 347, 350, 465, 466, 467, 468, 469, 471, 472, 473, 574, 602, 634, 635, 640, 700, 756, 763, 765, 768, 769, 770, 775, 777, 783, 787, 792, 794, 796, 797], "closedinterv": [74, 130, 160, 161, 255, 377, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 700, 821, 1002], "lower": [74, 113, 130, 160, 191, 247, 255, 297, 299, 377, 424, 427, 457, 460, 469, 549, 581, 602, 627, 634, 654, 694, 700, 740, 821, 874, 893, 896, 905, 989, 1002], "bound": [74, 102, 103, 130, 147, 160, 255, 297, 298, 299, 377, 404, 418, 419, 424, 540, 549, 602, 634, 700, 739, 740, 801, 821, 854, 868, 874, 989, 1002], "upper": [74, 102, 103, 130, 147, 160, 255, 297, 298, 377, 419, 540, 549, 602, 634, 700, 739, 801, 821, 874, 989, 1002], "period": [74, 130, 160, 161, 204, 205, 255, 340, 347, 354, 355, 356, 413, 452, 478, 479, 602, 634, 635, 661, 662, 700, 787, 794, 802, 803, 804, 863, 888, 918, 919, 1002], "durat": [74, 130, 133, 175, 228, 255, 319, 322, 326, 328, 330, 335, 342, 350, 535, 602, 640, 700, 703, 762, 765, 772, 774, 777, 782, 789, 797, 985, 1002], "3d12h4m25": [74, 160, 161, 175, 228, 255, 340, 347, 634, 635, 640, 700, 787, 794], "hour": [74, 130, 160, 161, 175, 228, 255, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 563, 564, 592, 602, 634, 635, 640, 700, 783, 787, 794], "minut": [74, 130, 160, 161, 175, 228, 255, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 563, 564, 592, 602, 634, 635, 640, 700, 783, 787, 794], "tempor": [74, 130, 160, 161, 172, 198, 215, 255, 377, 465, 466, 467, 468, 469, 471, 472, 473, 602, 613, 634, 635, 700, 703, 821, 837, 1002], "window": [74, 130, 160, 161, 255, 308, 340, 347, 354, 355, 356, 451, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 554, 584, 585, 602, 634, 635, 700, 748, 787, 794, 802, 803, 804, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 1002], "deprec": [74, 130, 517, 519, 583, 958, 960], "sinc": [74, 105, 114, 130, 320, 517, 519, 570, 583, 763, 958, 960], "18": [74, 97, 130, 161, 255, 307, 340, 347, 350, 376, 389, 517, 519, 602, 635, 653, 700, 703, 797, 958, 960], "granular": 74, "finer": 74, "permut": 74, "1mo": [74, 160, 161, 175, 228, 255, 315, 319, 332, 333, 336, 339, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 640, 700, 758, 762, 778, 779, 780, 783, 784, 785, 786, 787, 794, 795], "1985": 74, "04": [74, 118, 160, 228, 255, 314, 315, 318, 319, 322, 329, 330, 331, 332, 333, 337, 339, 340, 341, 342, 343, 346, 348, 349, 350, 517, 564, 634, 700, 758, 762, 765, 771, 773, 776, 777, 778, 779, 780, 781, 785, 786, 788, 789, 790, 793, 795, 796, 797, 958], "05": [74, 118, 120, 121, 125, 175, 228, 255, 314, 315, 319, 339, 341, 343, 346, 640, 700, 703, 757, 758, 759, 760, 761, 762, 786, 787, 790, 791, 793, 794, 796], "07": [74, 130, 314, 318, 337, 339, 340, 347, 349, 517, 570, 703, 757, 761, 786, 796, 958], "08": [74, 120, 121, 125, 130, 161, 255, 314, 340, 517, 564, 635, 700, 787, 794, 958], "america": 74, "new_york": 74, "\u03bc": [74, 97, 125, 160, 161, 175, 228, 255, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 517, 519, 564, 570, 634, 635, 640, 700, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 794, 795, 796, 797, 798, 958, 960], "est": 74, "month_end": 74, "last": [74, 137, 163, 175, 177, 189, 208, 211, 222, 224, 249, 255, 279, 308, 318, 332, 337, 347, 348, 404, 417, 487, 514, 530, 591, 602, 616, 640, 667, 670, 672, 673, 696, 700, 703, 719, 748, 761, 779, 784, 795, 816, 843, 854, 867, 955, 972, 1002], "month": [74, 160, 161, 175, 228, 255, 318, 332, 333, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 562, 563, 602, 634, 635, 640, 700, 761, 779, 780, 783, 787, 794], "28": [74, 160, 161, 175, 214, 228, 255, 262, 336, 339, 340, 347, 350, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 640, 700, 783, 786, 787, 794, 797, 1010], "disabl": [75, 131, 172, 255], "equal": [75, 102, 103, 113, 120, 121, 155, 160, 175, 182, 255, 353, 370, 392, 419, 464, 465, 466, 467, 468, 469, 471, 472, 473, 502, 503, 509, 524, 549, 584, 585, 602, 634, 640, 649, 700, 869, 900, 901, 902, 903, 904, 905, 907, 908, 909, 913, 943, 944, 950, 965, 1002, 1010], "encount": [76, 160, 255, 446, 447, 500, 501, 556, 559, 568, 602, 634, 700, 884, 885, 941, 942, 1002], "certain": [80, 105, 114, 166, 228, 255, 553, 620, 653, 664, 665, 700, 1002], "least": [82, 125, 452, 541, 602, 888, 990, 1002], "unexpect": [83, 255], "caus": [83, 91, 102, 103, 113, 135, 149, 255, 709, 1002], "panic": 83, "mismatch": 85, "incompat": 87, "pa": [90, 118], "chunkedarrai": [90, 184, 255, 752, 1002], "recordbatch": [90, 173, 255], "schemadefinit": [90, 92, 93, 94, 96, 255, 700], "schema_overrid": [90, 92, 93, 94, 95, 96, 173, 218, 255, 285, 700, 703, 725], "copi": [90, 91, 135, 138, 139, 173, 213, 218, 219, 232, 255, 360, 524, 602, 618, 619, 678, 700, 706, 737, 741, 754, 807, 965, 978, 983, 984, 1002], "closest": 90, "pair": [90, 92, 93, 94, 96, 124, 193, 255, 656, 700, 1010], "sever": [90, 92, 93, 94, 96, 255, 700, 1010], "wai": [90, 92, 93, 94, 96, 143, 159, 173, 188, 208, 235, 255, 451, 453, 488, 498, 553, 602, 622, 633, 652, 667, 682, 684, 700, 939], "equival": [90, 92, 93, 94, 96, 105, 171, 185, 255, 262, 266, 353, 367, 370, 371, 392, 425, 442, 444, 448, 450, 454, 505, 527, 537, 544, 602, 700, 840, 946, 962, 964, 1002], "form": [90, 92, 93, 94, 96, 172, 198, 226, 255, 452, 602, 700, 888, 1002], "them": [90, 92, 93, 94, 96, 113, 149, 160, 161, 175, 182, 228, 255, 377, 406, 446, 447, 451, 554, 602, 634, 635, 640, 649, 700, 703, 709, 856, 884, 885, 1002], "dimens": [90, 92, 94, 96, 255, 462, 602, 700, 898, 1002], "allow_copi": [91, 135], "interchang": [91, 135], "__dataframe__": 91, "convers": [91, 135, 173, 219, 255, 517, 518, 519, 522, 613, 958, 959, 960, 963, 982, 983, 984, 1002], "detail": [91, 104, 120, 121, 135, 255, 700, 1010], "latest": [91, 105, 114, 135, 368, 437, 602], "index": [91, 95, 98, 104, 119, 135, 153, 160, 161, 166, 171, 175, 189, 195, 197, 207, 220, 228, 233, 255, 263, 277, 278, 279, 281, 336, 395, 396, 404, 414, 418, 419, 465, 466, 467, 468, 469, 471, 472, 473, 476, 486, 498, 511, 531, 602, 634, 635, 640, 666, 680, 700, 717, 718, 719, 720, 721, 783, 840, 845, 846, 854, 864, 868, 869, 886, 912, 915, 927, 939, 952, 973, 1002], "runtimeerror": 91, "from_panda": [91, 106], "from_arrow": 91, "effici": [91, 173, 255], "clone": [92, 93, 94, 95, 96, 138, 218, 219, 255, 618, 700, 737, 982, 983, 984, 992, 1002], "dimension": [92, 94, 96, 255, 700, 1002], "infer_schema_length": [93, 96, 102, 103, 106, 113, 116, 255, 700], "NOT": [93, 120, 121, 435, 1009], "typic": [93, 136, 255, 703, 710, 1002], "clearer": 93, "load": [93, 95, 105, 114, 126, 128, 255, 613, 636, 643, 700, 1010], "_partial_": [93, 255, 700], "omit": [93, 97, 123, 125, 127, 130, 133, 185, 255], "mani": [93, 96, 104, 149, 255, 709, 1002], "scan": [93, 96, 102, 103, 111, 113, 114, 115, 116, 117, 118, 160, 161, 255, 627, 634, 635, 636, 643, 700], "slow": [93, 96, 102, 103, 113, 269, 308, 602, 684, 748, 1002], "partial": 93, "present": [93, 120, 125, 381, 602, 992, 1002], "np": [94, 152, 218, 255, 531, 602, 700, 825, 829, 831, 832, 900, 973, 1002], "ndarrai": [94, 152, 218, 255, 531, 602, 700, 752, 912, 915, 973, 983, 1002], "numpi": [94, 119, 141, 218, 219, 255, 446, 447, 602, 700, 825, 829, 831, 832, 884, 885, 900, 983, 984, 992, 1002], "columnar": [94, 96, 172, 198, 255], "interpret": [94, 96, 102, 103, 113, 255, 700], "yield": [94, 96, 102, 103, 113, 147, 149, 223, 255, 451, 602, 700, 709, 801, 1002], "conclus": [94, 96, 255, 700], "nan_to_nul": [95, 255, 700, 1002], "include_index": 95, "datetimeindex": [95, 752, 1002], "panda": [95, 106, 119, 219, 255, 332, 333, 535, 602, 700, 779, 780, 984, 985, 1002], "instal": [95, 102, 103, 104, 107, 111, 119, 141, 218, 219, 255, 663, 700, 984, 1002], "nan": [95, 120, 121, 125, 135, 150, 219, 255, 311, 312, 353, 361, 370, 371, 376, 383, 385, 386, 387, 392, 425, 429, 441, 446, 447, 448, 537, 556, 602, 628, 700, 712, 716, 753, 808, 831, 832, 884, 885, 900, 984, 1002, 1010], "convert": [95, 105, 106, 114, 135, 214, 215, 216, 217, 218, 221, 255, 315, 343, 346, 419, 427, 506, 517, 518, 519, 520, 522, 602, 700, 758, 790, 793, 869, 947, 958, 959, 960, 961, 963, 970, 981, 982, 983, 984, 992, 1002], "pd": [95, 106, 535, 602, 985, 1002], "pd_df": 95, "pd_seri": 95, "tbl": [97, 99, 103], "reconstruct": 97, "repr": [97, 125, 127], "trim": 97, "whitespac": [97, 504, 510, 516, 945, 951, 957], "prompt": 97, "extract": [97, 318, 319, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 337, 338, 341, 342, 348, 349, 351, 453, 499, 500, 501, 602, 759, 760, 761, 762, 764, 765, 767, 771, 772, 773, 774, 776, 777, 778, 781, 782, 784, 785, 788, 789, 791, 795, 796, 798, 940, 941, 942], "to_init_repr": [97, 255, 1002], "truncat": [97, 160, 255, 336, 634, 653, 700, 783], "identifi": [97, 181, 187, 224, 255, 648, 673, 700], "compound": 97, "struct": [97, 185, 201, 221, 225, 232, 255, 419, 428, 500, 513, 514, 541, 559, 560, 561, 575, 602, 659, 674, 678, 684, 700, 869, 941, 954, 955], "neither": [97, 106, 199, 255, 419, 869], "source_ac": 97, "source_cha": 97, "ident": [97, 138, 139, 255, 343, 618, 619, 700, 737, 741, 790, 1002], "timestamp": [97, 339, 570, 786], "tor_id": 97, "nnel_id": 97, "asia": [97, 759, 760, 791], "tokyo": 97, "123456780": 97, "9876543210": 97, "56": [97, 130, 533, 602], "59": [97, 124, 130, 314, 329, 341, 563, 592, 757, 776, 788], "663053": 97, "jst": 97, "803065983": 97, "2055938745": 97, "38": [97, 125], "050545": 97, "source_actor_id": 97, "source_channel_id": 97, "sr": [97, 706, 1002], "to_list": [97, 161, 255, 635, 700, 933, 1002], "datatypeclass": 98, "uint32": [98, 119, 147, 255, 279, 318, 321, 325, 327, 329, 331, 334, 337, 338, 341, 348, 349, 395, 396, 408, 461, 493, 502, 505, 531, 535, 602, 703, 720, 732, 761, 764, 771, 773, 776, 778, 781, 784, 785, 788, 795, 796, 801, 830, 845, 846, 858, 913, 934, 985, 1002], "regular": [98, 172, 197, 198, 228, 255, 357, 492, 493, 498, 499, 507, 508, 553, 566, 576, 579, 590, 602, 703, 933, 934, 939, 940, 948, 949], "uint64": [98, 162, 255, 372, 395, 396, 460, 602, 815, 845, 846, 896, 1002], "bigidx": 98, "read": [99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 149, 255, 369, 426, 594, 602, 627, 632, 655, 700, 709, 1002], "batch": [99, 103, 116, 644, 700], "over": [99, 102, 103, 105, 113, 125, 136, 149, 172, 173, 197, 198, 223, 234, 237, 255, 269, 308, 362, 376, 426, 427, 458, 464, 465, 466, 467, 468, 469, 471, 472, 473, 547, 559, 560, 568, 575, 582, 602, 684, 703, 709, 710, 748, 900, 901, 902, 904, 908, 1002], "fetch": [99, 113, 176, 255, 618, 620, 636, 643, 700], "ideal": 99, "read_csv_batch": [99, 614], "tpch": [99, 103], "tables_scale_100": [99, 103], "lineitem": [99, 103, 104], "try_parse_d": [99, 102, 103, 113], "polarsexprtyp": [100, 132, 583], "syntact": [100, 132, 227, 255, 566, 567, 571, 581, 586, 675, 700, 929, 1002], "sugar": [100, 132, 227, 255, 566, 567, 571, 581, 586, 675, 700, 929, 1002], "repeat": [100, 107, 115, 132, 459, 461, 602], "pre": [100, 132, 419, 583], "i8": [100, 132, 480, 583, 602, 751, 899, 989, 1002], "n_row": [101, 102, 103, 107, 111, 113, 115, 116, 117, 173, 255, 627, 700], "accept": [101, 102, 103, 105, 107, 111, 137, 148, 159, 201, 208, 222, 232, 235, 255, 262, 357, 377, 451, 488, 544, 545, 546, 550, 552, 553, 554, 555, 561, 566, 576, 579, 586, 589, 590, 602, 616, 626, 633, 659, 667, 672, 678, 682, 700, 821, 1002], "stop": [101, 102, 103, 107, 111, 113, 115, 116, 117, 130, 318, 320, 321, 323, 324, 329, 331, 337, 338, 340, 341, 345, 347, 348, 349, 351, 756, 758, 761, 763, 764, 766, 771, 773, 776, 778, 781, 784, 785, 787, 788, 792, 794, 795, 796, 797, 798], "textio": 102, "new_column": [102, 103, 106, 113, 194, 255], "comment_char": [102, 103, 113], "quote_char": [102, 103, 113], "skip_row": [102, 103, 113], "missing_utf8_is_empty_str": [102, 103, 113], "ignore_error": [102, 103, 113], "n_thread": [102, 103], "8192": 102, "csvencod": [102, 103, 113], "low_memori": [102, 103, 111, 113, 116, 117], "skip_rows_after_head": [102, 103, 113], "row_count_nam": [102, 103, 107, 111, 113, 115, 116, 117], "row_count_offset": [102, 103, 107, 111, 113, 115, 116, 117], "sample_s": [102, 103], "eol_char": [102, 103, 113], "we": [102, 103, 106, 113, 175, 255, 401, 506, 574, 594, 640, 644, 700, 710, 817, 851, 892, 947, 1002], "handler": [102, 103, 106], "g": [102, 103, 105, 106, 107, 111, 114, 115, 117, 160, 161, 175, 226, 228, 255, 262, 269, 336, 340, 347, 357, 465, 466, 467, 468, 469, 471, 472, 473, 480, 566, 602, 634, 635, 640, 656, 700, 783, 787, 794, 913, 983, 1002], "builtin": [102, 103, 106], "stringio": [102, 103], "fsspec": [102, 103, 107, 111, 114, 115, 117, 119], "remot": [102, 103, 107, 111], "autogener": [102, 103, 113], "column_x": [102, 103, 113], "enumer": [102, 103, 113, 173, 255], "shorter": [102, 103], "comment": [102, 103, 113], "instanc": [102, 103, 113, 125, 127, 133, 149, 154, 255, 294, 437, 465, 466, 467, 468, 469, 471, 472, 473, 559, 568, 602, 644, 680, 700, 709, 732, 1002], "special": [102, 103, 113, 499, 710, 940, 1002], "escap": [102, 103, 113], "dure": [102, 103, 113, 133, 149, 255, 709, 1002], "would": [102, 103, 113, 279, 404, 436, 458, 550, 602, 719, 854, 894, 983, 1002], "prefer": [102, 103, 105, 113, 128, 136, 149, 172, 197, 198, 237, 255, 269, 464, 602, 700, 709, 710, 900, 1002, 1010], "treat": [102, 103, 113, 492, 507, 508, 933, 948, 949], "10000": [102, 173, 255, 524], "check": [102, 103, 113, 120, 121, 155, 160, 161, 169, 171, 174, 255, 265, 267, 287, 290, 291, 377, 381, 398, 492, 496, 515, 602, 634, 635, 639, 644, 700, 707, 708, 726, 729, 730, 822, 824, 827, 828, 830, 835, 836, 837, 839, 840, 848, 913, 933, 937, 956, 1002], "might": [102, 103, 113, 129, 269, 539, 602, 984, 1002], "issu": [102, 103, 106, 113, 306, 307, 529, 602, 746, 747, 971, 1002], "iso8601": [102, 103, 113], "physic": [102, 103, 175, 255, 295, 535, 602, 617, 639, 640, 700, 734, 985, 1002], "cpu": [102, 103], "system": [102, 103], "wrongli": 102, "done": [102, 103, 113, 118, 158, 175, 255, 268, 270, 294, 451, 503, 509, 548, 602, 640, 700, 732, 944, 950, 1002], "buffer": [102, 103, 147, 172, 255, 801, 1002], "modifi": [102, 103, 113, 129, 133, 165, 172, 230, 255, 280, 339, 350, 492, 498, 499, 507, 602, 786, 797, 897, 933, 939, 940, 948, 962, 964, 1002], "lossi": [102, 103, 113], "decod": [102, 103], "reduc": [102, 103, 111, 113, 115, 116, 117, 242, 243, 245, 248, 480, 568, 602, 665, 689, 690, 692, 695, 700, 877, 891, 920, 971, 1002], "usag": [102, 103, 113, 125, 127, 206, 255, 703, 921, 1002], "expens": [102, 103, 111, 113, 116, 117, 126, 128, 136, 160, 161, 172, 197, 198, 223, 224, 255, 269, 602, 634, 635, 673, 700, 709, 710, 1002, 1010], "aggreg": [102, 103, 111, 154, 160, 161, 178, 179, 180, 183, 185, 189, 190, 191, 209, 210, 226, 229, 235, 236, 239, 241, 255, 263, 363, 374, 426, 451, 464, 465, 466, 467, 468, 469, 471, 472, 473, 541, 545, 546, 559, 560, 561, 568, 573, 576, 579, 582, 590, 602, 634, 635, 644, 645, 646, 647, 650, 651, 654, 668, 669, 676, 682, 683, 686, 688, 700, 818, 900, 901, 902, 904, 907, 908, 909, 1002], "nativ": [102, 107, 111, 123, 136, 172, 198, 215, 237, 255, 269, 602, 607, 710, 1002, 1010], "parser": 102, "even": [102, 453, 602], "regard": [102, 556], "sens": [102, 107, 111, 115, 117, 160, 161, 182, 228, 255, 451, 602, 634, 635, 649, 700], "particular": [102, 107, 111, 115, 117, 147, 255, 801, 1002], "skip": [102, 103, 106, 111, 113, 117, 226, 255, 710, 1002], "offset": [102, 103, 107, 111, 113, 115, 116, 117, 160, 161, 207, 228, 233, 255, 332, 333, 336, 340, 347, 414, 486, 511, 517, 519, 602, 634, 635, 666, 680, 700, 779, 780, 783, 787, 794, 864, 927, 952, 958, 960, 1002], "row_count": [102, 103, 107, 111, 113, 115, 116, 117], "sampl": [102, 103, 237, 255, 485, 602, 684, 926, 1002], "estim": [102, 103, 147, 255, 270, 355, 356, 390, 548, 602, 700, 801, 803, 804, 841, 1002], "alloc": [102, 103, 147, 192, 255, 801, 1002], "scan_csv": [102, 103, 664, 665, 700], "lazili": [102, 103, 113, 114, 115, 116, 117, 428, 602], "glob": [102, 103, 113, 115, 116, 117], "continu": [102, 111, 485, 602, 926, 1002], "benchmark": [102, 111, 293, 602], "50000": 103, "batchedcsvread": [103, 613], "upon": 103, "creation": 103, "gather": 103, "next_batch": 103, "big": 103, "interest": 103, "seen_group": 103, "big_fil": 103, "df_current_batch": 103, "concat": [103, 736, 881, 1002], "partition_df": 103, "partition_bi": [103, 173, 255], "as_dict": [103, 187, 255], "fh": 103, "write_csv": [103, 113, 255], "els": [103, 594], "partition_on": 104, "partition_rang": 104, "partition_num": 104, "dbreadengin": 104, "connectorx": [104, 119], "raw": 104, "partit": [104, 105, 111, 114, 118, 173, 187, 255], "transfer": 104, "document": [104, 106, 343, 346, 501, 517, 518, 519, 522, 790, 793, 942, 958, 959, 960, 963], "redshift": 104, "mysql": 104, "mariadb": 104, "clickhous": 104, "oracl": 104, "bigqueri": 104, "pleas": 104, "doc": [104, 141, 255], "github": 104, "sfu": 104, "db": 104, "connector": 104, "destin": 104, "sqlite": 104, "develop": [104, 125, 127], "flight_sql": 104, "further": [104, 984, 1002], "wide": [104, 158, 181, 226, 255, 648, 700], "adopt": 104, "significantli": [104, 1010], "better": [104, 136, 218, 237, 255, 269, 541, 602, 684, 914, 915, 1002], "driver": 104, "cpp": 104, "partition_col": 104, "explicitli": [104, 123, 125, 133, 428, 589, 602, 612], "delta_table_opt": [105, 114], "root": [105, 114, 389, 427, 438, 455, 489, 528, 601, 602, 929, 1002], "absolut": [105, 114, 120, 121, 261, 354, 355, 356, 602, 705, 802, 803, 804, 1002], "avoid": 105, "year": [105, 114, 160, 161, 175, 228, 255, 323, 324, 336, 337, 340, 347, 348, 465, 466, 467, 468, 469, 471, 472, 473, 562, 563, 602, 634, 635, 640, 700, 766, 767, 783, 784, 787, 794, 795], "2021": [105, 114, 142, 158, 160, 228, 255, 517, 574, 634, 700, 703, 759, 760, 767, 791, 837, 958, 1002], "aw": [105, 114], "googl": [105, 114], "service_account": [105, 114], "service_account_json_absolute_path": [105, 114], "az": [105, 114], "adl": [105, 114], "abf": [105, 114], "azure_storage_account_nam": [105, 114], "azure_storage_account_kei": [105, 114], "without_fil": [105, 114], "track": [105, 114, 136, 255, 419, 1009], "sheet_id": 106, "sheet_nam": 106, "xlsx2csv_option": 106, "read_csv_opt": 106, "noreturn": 106, "xlsx2csv": [106, 119], "read_csv": [106, 113], "nor": [106, 199, 255], "skip_empty_lin": 106, "my": [106, 118], "datasheet": 106, "correct": [106, 355, 356, 390, 470, 485, 602, 644, 700, 803, 804, 841, 906, 926, 1002], "look": [106, 287, 419, 726], "whole": [106, 487, 488, 498, 602, 684, 700, 939], "With": [106, 136, 171, 255, 269, 602, 710, 840, 1002], "1000": [106, 147, 217, 255, 325, 326, 524, 772, 981, 1002, 1010], "spreadsheet": [106, 189, 255], "xl": 106, "xlsm": 106, "xlsb": 106, "odf": 106, "od": 106, "odt": 106, "memory_map": [107, 111, 115], "v2": [107, 115], "greatli": [107, 115], "improv": [107, 115, 665, 700], "page": [107, 111, 115, 117, 255, 602, 613, 665, 700, 1002], "give": [107, 111, 115, 116, 117, 181, 224, 255, 320, 390, 461, 537, 602, 613, 648, 673, 700, 763, 841, 1002], "That": [107, 644, 700], "filenam": 107, "my_fil": 107, "write_ipc": [107, 255], "read_ndjson": 109, "parallelstrategi": [111, 117], "use_statist": [111, 117], "awar": [111, 172, 198, 215, 255, 517, 519, 958, 960], "stabl": [111, 141, 199, 255, 423, 602, 648, 700], "row_group": [111, 117], "pressur": [111, 116, 117, 480, 602, 665, 700, 920, 1002], "read_tabl": 111, "with_column_nam": 113, "push": [113, 115, 116, 117, 118], "down": [113, 115, 116, 117, 118, 366, 602, 812, 1002], "therebi": [113, 115, 116, 117], "potenti": [113, 115, 116, 117], "overhead": [113, 115, 116, 117], "realloc": [113, 115, 116, 149, 255, 709, 1002], "headerless": 113, "unlik": 113, "fewer": 113, "my_long_fil": 113, "doesn": [113, 352, 602, 800, 992, 1002], "thing": [113, 567], "less": [113, 175, 255, 392, 425, 503, 509, 514, 524, 602, 640, 700, 944, 950, 955, 965, 1010], "limit": [113, 151, 255, 286, 297, 298, 299, 362, 368, 602, 629, 636, 665, 700, 738, 739, 740, 809, 1002], "breezah": 113, "languag": [113, 160, 161, 175, 228, 255, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 640, 700, 783, 787, 794], "hard": [113, 644, 700], "mydf": 113, "lambda": [113, 136, 154, 188, 237, 255, 269, 354, 355, 356, 419, 426, 427, 464, 547, 559, 560, 568, 575, 582, 602, 644, 652, 684, 700, 710, 802, 803, 804, 869, 1002], "simpli": [113, 451, 559, 568, 602], "idx": [113, 160, 173, 255, 419, 634, 700, 869, 915, 1002], "uint16": [113, 306, 307, 529, 602, 703, 746, 747, 971, 1002], "u16": [113, 125, 1010], "eu": 114, "central": [114, 390, 485, 602, 841, 926, 1002], "allow_pyarrow_filt": 118, "comparison": 118, "dset": 118, "folder": 118, "stdout": [119, 133, 158, 255], "17": [119, 125, 130, 235, 474, 570, 583, 602, 682, 742, 787, 1002, 1010], "platform": 119, "linux": 119, "90": [119, 520, 961], "wsl2": 119, "x86_64": 119, "glibc2": 119, "main": 119, "apr": 119, "14": [119, 125, 130, 136, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 324, 376, 458, 602, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 787], "44": [119, 310, 602], "51": 119, "gcc": 119, "matplotlib": [119, 653, 663, 700], "check_dtyp": [120, 121], "check_exact": [120, 121], "rtol": [120, 121], "1e": [120, 121], "atol": [120, 121], "nans_compare_equ": [120, 121], "check_column_ord": 120, "check_row_ord": 120, "assertionerror": [120, 121], "compar": [120, 121, 155, 255, 353, 370, 371, 392, 425, 448, 546, 602, 913, 1002], "exactli": [120, 121, 124, 125, 127, 513, 514, 921, 954, 955, 1002], "toler": [120, 121, 175, 255, 640, 700], "inexact": [120, 121], "assert": [120, 121, 123, 125, 127, 161, 255, 613, 635, 700, 703, 814, 1002], "irrespect": 120, "unsort": 120, "check_nam": 121, "s1": [121, 154, 255, 840, 869, 984, 993, 1002], "searchstrategi": [122, 124, 125, 127], "null_prob": [122, 125, 127], "percentag": [122, 125, 127, 452, 602, 888, 1002], "chanc": [122, 125, 127, 1010], "independ": [122, 123, 125, 127], "flag": [122, 477, 492, 498, 499, 507, 602, 625, 644, 700, 916, 933, 939, 940, 948, 1002], "hypothesi": [122, 123, 124, 125, 126, 127, 1010], "sampled_from": [122, 1010], "unique_small_int": 122, "ccy": [122, 1010], "gbp": [122, 1010], "eur": [122, 142, 158, 255, 1010], "jpy": [122, 1010], "min_col": [123, 125], "max_col": [123, 125], "standalon": [123, 125], "mincol": 123, "assign": [123, 160, 255, 419, 451, 458, 513, 514, 602, 634, 700, 749, 869, 875, 892, 894, 954, 955, 1002], "exact": [123, 125, 127, 206, 255, 517, 518, 519, 537, 602, 958, 959, 960], "minimum": [123, 124, 125, 127, 154, 183, 255, 354, 355, 356, 441, 447, 458, 579, 602, 650, 665, 700, 738, 775, 802, 803, 804, 885, 890, 894, 1002, 1010], "especi": 123, "test_unique_xyz": 123, "assert_someth": 123, "punctuat": 123, "test_special_char_colname_init": 123, "inner_dtyp": [124, 127], "select_from": [124, 127], "min_siz": [124, 125, 127, 1010], "max_siz": [124, 125, 127, 1010], "anoth": [124, 159, 255, 308, 313, 418, 432, 435, 602, 633, 679, 700, 748, 756, 868, 913, 1002], "randomli": 124, "innermost": 124, "2x": 124, "lst": 124, "11330": 124, "24030": 124, "116": 124, "zz": [124, 127], "small": [124, 176, 255, 340, 627, 700, 1010], "uint8_pair": [124, 1010], "uint": [124, 1010], "zip": [124, 1010], "131": 124, "176": 124, "149": [124, 1010], "include_col": 125, "allow_infin": [125, 127], "allowed_dtyp": [125, 127, 1010], "excluded_dtyp": [125, 127], "describ": [125, 158, 255, 1002], "desir": [125, 419, 869], "n_chunk": [125, 127, 255, 1002], "randomis": 125, "onto": 125, "pct": 125, "preced": [125, 703], "disallow": [125, 127], "inf": [125, 127, 276, 379, 382, 537, 602, 716, 749, 817, 825, 829, 874, 888, 892, 989, 1002], "exclud": [125, 127, 304, 307, 377, 553, 602, 703, 821, 837, 1002], "deploi": [125, 127], "characterist": [125, 127], "concret": [125, 127], "test_repr": 125, "isinst": [125, 127, 255], "0x11f561580": 125, "known": [125, 419, 684, 869], "0565": 125, "34715": 125, "5844": 125, "33": [125, 469, 474, 553, 602, 905, 1002], "076854": 125, "3382": 125, "48662": 125, "7540": 125, "29": [125, 130, 160, 161, 175, 228, 255, 332, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 640, 700, 779, 783, 787, 794], "836271": 125, "4063": 125, "06": [125, 130, 228, 255, 314, 324, 338, 339, 351, 786, 787, 796], "39092": 125, "1889": 125, "13": [125, 130, 138, 139, 150, 151, 157, 161, 166, 176, 184, 232, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 464, 466, 520, 554, 559, 568, 593, 602, 618, 619, 628, 629, 635, 642, 678, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 700, 710, 787, 794, 795, 961, 1002], "41": [125, 1010], "874455": 125, "15836": 125, "1755e": 125, "575050513": 125, "profil": [126, 128, 700], "balanc": [126, 128, 1010], "set_environ": 126, "polars_hypothesis_profil": [126, 128], "1500": 126, "constructor": 127, "max_data_s": 127, "normal": [127, 160, 255, 352, 390, 485, 602, 634, 700, 800, 841, 926, 1002], "test_repr_is_valid_str": 127, "experi": 127, "create_list_strategi": [127, 1010], "polars_max_thread": 129, "behind": 129, "lock": 129, "reason": 129, "pyspark": 129, "udf": [129, 136, 188, 237, 255, 269, 453, 547, 602, 652, 684, 700, 710, 1002], "similar": [129, 154, 175, 255, 343, 346, 451, 594, 602, 640, 700, 790, 793], "recommend": [129, 172, 188, 255, 703], "1h": [130, 160, 161, 175, 228, 255, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 640, 700, 764, 783, 787, 794], "23": [130, 160, 161, 255, 314, 321, 340, 563, 592, 634, 635, 700, 757, 764, 1010], "999999": [130, 563, 592], "1h30m25": 130, "third": [130, 426, 602], "lf": [130, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 700, 1009, 1010], "6h": 130, "5h59m": 130, "1h29m": 130, "58": 130, "57": [130, 910, 1002, 1010], "19": [130, 161, 175, 255, 340, 520, 635, 640, 700, 787, 794, 961], "initi": [133, 559, 568, 594], "whatev": 133, "were": 133, "enter": 133, "advantag": [133, 188, 255], "initialis": [133, 700, 1009], "set_": 133, "set_verbos": 133, "do_various_th": 133, "restor": 133, "cleaner": 133, "breviti": 133, "vein": 133, "set_ascii_t": 133, "write_ascii_frame_to_stdout": 133, "sy": 133, "nan_as_nul": 135, "_pyarrowdatafram": 135, "nullabl": 135, "extens": [135, 219, 255, 984, 1002], "propag": [135, 179, 210, 255, 446, 447, 602, 884, 885, 1002], "inference_s": [136, 255], "256": [136, 255, 888, 1002], "user": [136, 188, 237, 255, 269, 453, 477, 547, 602, 652, 684, 700, 710, 916, 1002], "almost": [136, 237, 255, 517, 518, 519, 710, 958, 959, 960, 1002], "_significantly_": [136, 237, 255, 710, 1002], "intens": [136, 237, 255, 451, 602, 710, 1002], "becaus": [136, 147, 160, 176, 226, 237, 255, 401, 634, 684, 700, 710, 801, 851, 1002], "forc": [136, 175, 237, 255, 639, 640, 684, 700, 710, 1002], "materi": [136, 237, 255, 653, 684, 700, 703, 710, 1002], "parallelis": [136, 237, 255, 710, 1002], "optimis": [136, 237, 255, 700, 710, 914, 915, 1002], "achiev": [136, 237, 255, 269, 602, 710, 1002], "best": [136, 237, 255, 269, 602, 710, 1002], "tri": [136, 255], "arbitrarili": [136, 255], "rearrang": [136, 255], "transform": [136, 255, 426, 521, 523, 602], "preserv": [136, 218, 219, 255, 482, 602, 923, 984, 1002], "lru_cach": [136, 255, 269, 602, 710, 1002], "magnitud": [136, 255, 269, 602, 710, 1002], "column_1": [136, 223, 255], "scalar": [136, 171, 197, 255, 476, 547, 574, 602, 840, 912, 1002], "k": [137, 222, 255, 292, 295, 390, 536, 602, 616, 672, 700, 731, 734, 841, 986, 1002], "intoexpr": [137, 159, 160, 161, 201, 208, 222, 232, 235, 255, 377, 399, 451, 479, 488, 545, 546, 550, 552, 554, 555, 559, 561, 568, 576, 579, 586, 589, 590, 594, 602, 616, 633, 634, 635, 659, 667, 672, 678, 682, 700, 821, 1002], "nulls_last": [137, 208, 222, 255, 279, 487, 602, 616, 667, 672, 700, 719, 1002], "smallest": [137, 222, 255, 292, 602, 616, 672, 700, 731, 1002], "largest": [137, 160, 161, 175, 222, 228, 255, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 536, 602, 616, 634, 635, 640, 672, 700, 783, 787, 794, 986, 1002], "top": [137, 222, 255, 616, 672, 700], "top_k": [137, 255, 292, 602, 616, 700, 731, 1002], "greater": [138, 175, 255, 370, 371, 485, 514, 602, 640, 700, 926, 955, 1002], "cheap": [138, 139, 255, 618, 619, 700, 709, 737, 741, 1002], "deepcopi": [138, 139, 255, 618, 619, 700, 737, 741, 1002], "clear": [139, 255, 619, 700, 741, 1002], "properti": [140, 146, 164, 200, 203, 231, 255, 621, 624, 658, 677, 700, 703, 1010], "appl": [140, 165, 174, 193, 195, 214, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 455, 463, 496, 515, 528, 602, 639, 656, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 700, 937, 956], "banana": [140, 214, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 455, 463, 528, 602, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695], "pearson": [141, 255, 390, 485, 556, 602, 841, 926, 1002], "correl": [141, 255, 556, 584], "coeffici": [141, 255, 485, 602, 926, 1002], "corrcoef": [141, 255], "percentil": [142, 255, 750, 1002], "summari": [142, 255, 750, 1002], "glimps": [142, 163, 255], "usd": [142, 158, 255, 1010], "2020": [142, 158, 161, 255, 315, 319, 322, 325, 326, 328, 330, 335, 339, 342, 343, 346, 517, 518, 519, 635, 700, 703, 758, 762, 765, 772, 774, 777, 782, 786, 789, 790, 793, 958, 959, 960], "null_count": [142, 145, 255, 308, 602, 700, 748, 750, 1002], "266667": [142, 255], "666667": [142, 179, 229, 243, 255, 354, 602, 676, 690, 700], "std": [142, 255, 464, 602, 700, 750, 907, 1002], "101514": [142, 255], "707107": [142, 255, 355, 602, 803, 1002], "57735": [142, 255], "median": [142, 189, 255, 467, 602, 679, 700, 750, 903, 1002], "more_column": [143, 148, 202, 225, 255, 357, 566, 602, 622, 626, 660, 674, 700], "Or": [143, 159, 160, 161, 175, 208, 228, 235, 255, 451, 488, 553, 594, 602, 622, 633, 634, 635, 640, 667, 682, 700], "subset": [145, 185, 224, 255, 623, 673, 700], "snippet": [145, 255, 623, 700], "is_nul": [145, 255, 602, 623, 700, 1002], "sizeunit": [147, 255, 801, 1002], "heap": [147, 255, 801, 1002], "its": [147, 255, 314, 340, 347, 488, 602, 757, 787, 794, 801, 1002], "bitmap": [147, 255, 801, 1002], "therefor": [147, 255, 594, 801, 1002], "structarrai": [147, 255, 801, 1002], "constant": [147, 161, 255, 360, 602, 635, 700, 801, 807, 1002], "unchang": [147, 255, 535, 602, 644, 684, 700, 801, 985, 1002], "capac": [147, 206, 255, 801, 921, 1002], "ffi": [147, 255, 801, 1002], "kb": [147, 255, 801, 1002], "mb": [147, 255, 801, 1002], "gb": [147, 255, 801, 1002], "tb": [147, 255, 801, 1002], "revers": [147, 255, 303, 304, 305, 306, 307, 427, 455, 528, 602, 700, 744, 745, 746, 747, 1002], "1_000_000": [147, 255, 801, 1002], "25888898": [147, 255], "689577102661133": [147, 255], "long": [148, 181, 226, 255, 626, 648, 700], "letter": [148, 240, 249, 255, 357, 499, 566, 602, 626, 687, 696, 700, 703, 940], "thu": [149, 255, 556, 709, 1002], "faster": [149, 226, 255, 269, 464, 505, 539, 602, 664, 665, 700, 709, 710, 900, 946, 1002], "onlin": [149, 255, 709, 1002], "rerun": [149, 255, 709, 1002], "fill_valu": [150, 205, 226, 255, 479, 602, 662, 700, 919, 1002], "Not": [150, 255, 383, 385, 428, 602, 628, 700], "To": [150, 255, 311, 312, 336, 362, 492, 498, 499, 507, 590, 602, 628, 700, 783, 933, 939, 940, 948], "fillnullstrategi": [151, 255, 362, 602, 629, 700, 809, 1002], "matches_supertyp": [151, 255, 629, 700], "forward": [151, 175, 255, 332, 362, 368, 602, 629, 640, 700, 779, 809, 1002], "consecut": [151, 255, 286, 362, 368, 491, 602, 629, 700, 809, 932, 1002], "supertyp": [151, 255, 268, 602, 629, 700], "fill_nan": [151, 255, 602, 700, 1002], "OR": [152, 255, 546, 630, 700, 703], "reduct": [154, 255], "supercast": [154, 255], "parent": [154, 255], "rule": [154, 255], "arithmet": [154, 255], "zip_with": [154, 255, 1002], "foo11": [154, 255], "bar22": [154, 255], "null_equ": [155, 255, 913, 1002], "retriev": [156, 255, 395, 396, 525, 845, 846, 966], "return_as_str": [158, 255], "preview": [158, 255], "nice": [158, 255], "few": [158, 255], "rather": [158, 175, 255, 524, 640, 700, 965], "head": [158, 177, 211, 255, 268, 394, 602, 643, 700, 843, 972, 1002], "tail": [158, 163, 255, 268, 485, 602, 700, 816, 926, 1002], "more_bi": [159, 187, 208, 255, 488, 602, 633, 667, 700], "maintain_ord": [159, 187, 189, 224, 228, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 263, 269, 285, 420, 531, 538, 557, 602, 620, 625, 627, 633, 653, 663, 664, 665, 673, 683, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 700, 725, 749, 870, 892, 987, 1002], "consist": [159, 187, 255, 517, 633, 700, 958], "agg": [159, 160, 161, 255, 263, 269, 363, 365, 487, 488, 531, 543, 557, 602, 620, 625, 627, 633, 634, 635, 653, 663, 700, 703], "index_column": [160, 161, 255, 634, 635, 700], "include_boundari": [160, 255, 634, 700], "start_bi": [160, 255, 634, 700], "startbi": [160, 255, 634, 700], "check_sort": [160, 161, 255, 634, 635, 700], "dynamicgroupbi": [160, 255], "groupbi": [160, 161, 185, 255, 263, 269, 308, 363, 365, 401, 451, 487, 488, 531, 543, 547, 557, 602, 620, 625, 627, 634, 635, 653, 663, 700, 703, 748, 851, 1002], "member": [160, 255, 634, 700, 828, 1002], "seen": [160, 255, 286, 368, 602, 634, 700], "roll": [160, 161, 255, 332, 333, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 554, 584, 585, 602, 634, 635, 700, 779, 780, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 1002], "slot": [160, 255, 308, 309, 400, 602, 634, 700, 748, 751, 850, 1002], "1n": [160, 161, 175, 228, 255, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 640, 700, 783, 787, 794], "nanosecond": [160, 161, 175, 228, 255, 336, 340, 341, 347, 465, 466, 467, 468, 469, 471, 472, 473, 564, 602, 634, 635, 640, 700, 783, 787, 788, 794], "1u": [160, 161, 175, 228, 255, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 640, 700, 783, 787, 794], "microsecond": [160, 161, 175, 228, 255, 336, 340, 341, 347, 465, 466, 467, 468, 469, 471, 472, 473, 563, 564, 592, 602, 634, 635, 640, 653, 700, 783, 787, 794], "1m": [160, 161, 175, 228, 255, 325, 326, 328, 335, 336, 340, 342, 347, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 640, 700, 772, 774, 782, 783, 787, 789, 794], "millisecond": [160, 161, 175, 228, 255, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 564, 602, 634, 635, 640, 700, 783, 787, 794], "1w": [160, 161, 175, 228, 255, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 640, 700, 783, 787, 794], "week": [160, 161, 175, 228, 255, 336, 340, 347, 349, 465, 466, 467, 468, 469, 471, 472, 473, 564, 602, 634, 635, 640, 700, 783, 787, 794, 796], "1q": [160, 161, 175, 228, 255, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 640, 700, 783, 787, 794], "quarter": [160, 161, 175, 228, 255, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 640, 700, 783, 787, 794], "1y": [160, 161, 175, 228, 255, 323, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 640, 700, 766, 783, 787, 794, 798], "1i": [160, 161, 175, 228, 255, 336, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 640, 700, 783], "suffix": [160, 161, 174, 175, 201, 228, 232, 235, 255, 264, 290, 336, 340, 347, 383, 385, 386, 387, 427, 451, 455, 463, 465, 466, 467, 468, 469, 471, 472, 473, 496, 602, 634, 635, 639, 640, 659, 678, 679, 682, 700, 703, 729, 783, 787, 794, 937], "_satur": [160, 161, 175, 228, 255, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 640, 700, 783, 787, 794], "satur": [160, 161, 175, 228, 255, 336, 340, 347, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 635, 640, 700, 783, 787, 794], "10i": [160, 161, 255, 634, 635, 700], "ascend": [160, 161, 255, 634, 635, 700], "dynam": [160, 255, 419, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 700, 869], "matter": [160, 161, 172, 198, 215, 255, 634, 635, 700], "_lower_bound": [160, 255, 634, 700], "_upper_bound": [160, 255, 634, 700], "harder": [160, 255, 634, 700], "inclus": [160, 161, 255, 377, 465, 466, 467, 468, 469, 471, 472, 473, 512, 513, 602, 634, 635, 700, 821, 953, 954, 1002], "datapoint": [160, 255, 634, 700], "mondai": [160, 255, 349, 634, 700, 796], "tuesdai": [160, 255, 634, 700], "wednesdai": [160, 255, 634, 700], "thursdai": [160, 255, 634, 700], "fridai": [160, 255, 634, 700], "saturdai": [160, 255, 634, 700], "sundai": [160, 255, 349, 634, 700, 796], "sorted": [160, 161, 255, 634, 635, 700], "metadata": [160, 161, 255, 634, 635, 700], "verifi": [160, 161, 255, 634, 635, 700], "incorrectli": [160, 161, 255, 419, 634, 635, 700], "incorrect": [160, 161, 255, 350, 477, 602, 634, 635, 684, 700, 797, 916, 1002], "date_rang": [160, 228, 255, 313, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 345, 347, 348, 349, 350, 351, 634, 700, 756, 758, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 792, 794, 795, 796, 797, 798], "30m": [160, 255, 340, 347, 634, 700, 787, 794], "time_min": [160, 255, 634, 700], "time_max": [160, 255, 634, 700], "boundari": [160, 255, 297, 298, 299, 602, 634, 700, 738, 739, 740, 817, 1002], "time_count": [160, 255, 634, 700], "_lower_boundari": [160, 255, 634, 700], "_upper_boundari": [160, 255, 634, 700], "lower_bound": [160, 255, 297, 299, 377, 602, 634, 700, 738, 740, 821, 989, 1002], "upper_bound": [160, 255, 297, 298, 377, 419, 602, 634, 700, 738, 739, 821, 874, 1002], "time_agg_list": [160, 255, 634, 700], "arang": [160, 226, 237, 255, 634, 684, 700], "2i": [160, 255, 634, 700], "3i": [160, 255, 634, 700], "a_agg_list": [160, 255, 634, 700], "rollinggroupbi": [161, 255], "dynamic_groupbi": [161, 255, 635, 700], "groupby_dynam": [161, 255, 635, 700], "t_0": [161, 255, 465, 466, 467, 468, 469, 471, 472, 473, 602, 635, 700], "t_1": [161, 255, 465, 466, 467, 468, 469, 471, 472, 473, 602, 635, 700], "t_n": [161, 255, 465, 466, 467, 468, 469, 471, 472, 473, 602, 635, 700], "43": [161, 255, 307, 602, 635, 700], "strptime": [161, 255, 339, 635, 700, 786], "set_sort": [161, 175, 228, 255, 602, 635, 640, 700, 1002], "2d": [161, 218, 255, 574, 635, 700, 761], "sum_a": [161, 255, 635, 700], "min_a": [161, 255, 635, 700], "max_a": [161, 255, 635, 700], "seed": [162, 199, 255, 372, 458, 475, 481, 602, 815, 894, 911, 922, 1002], "seed_1": [162, 255, 372, 602, 815, 1002], "seed_2": [162, 255, 372, 602, 815, 1002], "seed_3": [162, 255, 372, 602, 815, 1002], "hash": [162, 255, 602, 1002], "u64": [162, 255, 372, 460, 602, 653, 700, 815, 1002], "10783150408545073287": [162, 255], "1438741209321515184": [162, 255], "10047419486152048166": [162, 255], "2047317070637311557": [162, 255], "ab": [163, 177, 211, 232, 255, 525, 526, 602, 678, 700, 816, 843, 972, 1002], "grown": [165, 255], "intermedi": [167, 255, 638, 700, 820, 1002, 1010], "linear": [167, 191, 247, 255, 376, 397, 431, 457, 469, 554, 555, 581, 602, 638, 654, 694, 700, 820, 847, 893, 905, 1002], "mask": [168, 170, 255, 287, 288, 378, 380, 388, 398, 492, 494, 602, 726, 727, 810, 821, 823, 826, 838, 848, 889, 890, 914, 933, 935, 993, 1002], "visual": [168, 170, 255], "buffer_s": [172, 255], "intern": [172, 255], "veri": [172, 223, 255, 269, 602, 619, 684, 700, 741, 1002], "fit": [172, 206, 226, 255, 480, 583, 602, 920, 921, 1002], "signific": [172, 255, 269, 602], "4x": [172, 255], "materialis": [172, 173, 197, 198, 255], "iter_row": [173, 197, 198, 255], "17_500": [173, 255], "klmnoopqrstuvwxyz": [173, 255], "__name__": [173, 255], "7500": [173, 255], "15_000": [173, 255], "record_batch": [173, 255], "to_arrow": [173, 255, 1002], "to_batch": [173, 255], "date32": [173, 255], "large_str": [173, 213, 219, 255], "15000": [173, 255], "2500": [173, 255], "left_on": [174, 175, 255, 639, 640, 700], "right_on": [174, 175, 255, 639, 640, 700], "_right": [174, 175, 255, 639, 640, 700], "semi": [174, 255, 639, 700], "anti": [174, 255, 639, 684, 700, 914, 915, 1002], "cross": [174, 255, 639, 700], "many_to_mani": [174, 255, 639, 700], "one_to_on": [174, 255, 639, 700], "one_to_mani": [174, 255, 639, 700], "many_to_on": [174, 255, 639, 700], "join_asof": [174, 255, 639, 700], "stringcach": [174, 255, 613], "other_df": [174, 255], "by_left": [175, 255, 640, 700], "by_right": [175, 255, 640, 700], "asofjoinstrategi": [175, 255, 640, 700], "allow_parallel": [175, 255, 639, 640, 700], "force_parallel": [175, 255, 639, 640, 700], "asof": [175, 255, 640, 700], "asof_join": [175, 255], "search": [175, 255, 640, 700], "distanc": [175, 255, 640, 700, 817, 1002], "plan": [175, 176, 255, 617, 625, 632, 639, 640, 655, 663, 681, 700], "gdp": [175, 255, 640, 700], "2016": [175, 255, 640, 700], "2017": [175, 255, 640, 700], "2018": [175, 255, 339, 640, 700, 786], "2019": [175, 255, 640, 700], "record": [175, 218, 255, 640, 700], "jan": [175, 255, 640, 700], "1st": [175, 255, 640, 700], "4164": [175, 255, 640, 700], "4411": [175, 255, 640, 700], "4566": [175, 255, 640, 700], "4696": [175, 255, 640, 700], "popul": [175, 255, 640, 700], "12th": [175, 255, 640, 700], "82": [175, 255, 640, 700], "66": [175, 255, 544, 602, 640, 700, 905, 1002], "83": [175, 255, 640, 700], "52": [175, 232, 255, 474, 602, 640, 678, 700], "request": [176, 255], "describe_plan": [176, 255], "unoptim": [176, 255], "describe_optimized_plan": [176, 255], "show_graph": [176, 255, 700], "un": [176, 255], "graphviz": [176, 255, 663, 700], "axi": [178, 179, 181, 183, 210, 255, 648, 700], "null_strategi": [179, 210, 255], "nullstrategi": [179, 210, 255], "spam": [179, 255, 499, 940], "id_var": [181, 255, 648, 700], "value_var": [181, 255, 648, 700], "variable_nam": [181, 255, 648, 700], "value_nam": [181, 255, 648, 700], "unpivot": [181, 255, 648, 700], "leav": [181, 255, 419, 648, 700], "massag": [181, 255, 648, 700], "measur": [181, 255, 648, 700], "merg": [182, 255, 649, 700], "caller": [182, 255, 419, 644, 649, 684, 700], "respons": [182, 255, 649, 700], "what": [185, 255, 983, 992, 1002], "pack": [185, 255], "expr_unique_subset": [185, 255], "df_nuniqu": [185, 255], "df_agg_nuniqu": [185, 255], "offer": [188, 255, 453, 602, 652, 700], "fulli": [188, 199, 255], "cast_str_to_int": [188, 255, 652, 700], "col_nam": [188, 255, 427, 602, 652, 700], "tdf": [188, 255, 652, 700], "aggregate_funct": [189, 255], "pivotagg": [189, 255], "nodefault": [189, 255], "_nodefault": [189, 255], "no_default": [189, 255], "sort_column": [189, 255], "predefin": [189, 255], "predict": [189, 192, 228, 255], "transpos": [189, 255], "discoveri": [189, 255], "col1": [189, 226, 255, 700, 1010], "col2": [189, 226, 255, 700, 1010], "col3": [189, 255, 1010], "tanh": [189, 255, 602, 1002], "998347": [189, 255], "964028": [189, 255], "999954": [189, 255], "interpol": [191, 247, 255, 362, 431, 457, 469, 581, 602, 654, 694, 700, 893, 905, 1002], "rollinginterpolationmethod": [191, 247, 255, 457, 469, 581, 602, 654, 694, 700, 893, 905, 1002], "midpoint": [191, 247, 255, 457, 469, 581, 602, 654, 694, 700, 893, 905, 1002], "by_pred": [197, 255], "accord": [197, 255, 428, 602, 767], "never": [197, 255], "mutual": [197, 255], "exclus": [197, 255, 544, 602], "addition": [197, 255], "clariti": [197, 255], "toomanyrowsreturnederror": [197, 255, 613], "norowsreturnederror": [197, 255, 613], "inherit": [197, 255], "rowserror": [197, 255, 613], "with_replac": [199, 255, 475, 602, 911, 1002], "shuffl": [199, 237, 255, 475, 602, 684, 911, 1002], "modul": [199, 255, 475, 481, 601, 602, 703, 911, 922, 1002], "named_expr": [201, 232, 255, 586, 589, 659, 678, 700], "threshold": [201, 255, 659, 700], "set_auto_structifi": [201, 232, 255, 659, 678, 700], "auto_structifi": [201, 232, 255, 659, 678, 700], "is_odd": [201, 255, 659, 700], "_is_odd": [201, 255, 659, 700], "shift_and_fil": [204, 255, 602, 700, 1002], "shift": [205, 255, 309, 400, 452, 479, 554, 602, 662, 700, 751, 850, 888, 919, 1002], "shrink": [206, 255, 480, 602, 920, 921, 1002], "hold": [206, 255], "ddof": [209, 229, 255, 471, 473, 490, 542, 556, 584, 585, 588, 593, 602, 668, 676, 700, 907, 909, 930, 991, 1002], "deviat": [209, 255, 355, 471, 490, 588, 602, 668, 700, 803, 930, 1002], "degre": [209, 229, 255, 471, 473, 490, 542, 556, 584, 585, 588, 593, 602, 668, 676, 700, 907, 909, 930, 991, 1002], "freedom": [209, 229, 255, 471, 473, 490, 542, 556, 584, 585, 588, 593, 602, 668, 676, 700, 907, 909, 930, 991, 1002], "divisor": [209, 229, 255, 471, 473, 490, 542, 556, 584, 585, 588, 593, 602, 668, 676, 700, 907, 909, 930, 991, 1002], "816497": [209, 255], "21": [210, 255, 570], "16a": [210, 255], "27b": [210, 255], "38c": [210, 255], "nth": [212, 255, 514, 532, 602, 671, 700, 955, 974, 1002], "mostli": [213, 255, 363, 602], "categoricaltyp": [213, 255], "as_seri": [214, 255], "fruit": [214, 255, 455, 463, 496, 515, 528, 602, 937, 956], "car": [214, 255, 455, 463, 528, 602], "beetl": [214, 255, 455, 463, 528, 602], "audi": [214, 255, 455, 463, 528, 602], "300": [214, 255, 901, 902, 904, 1002], "dummi": [216, 255, 979, 1002], "foo_1": [216, 255], "foo_2": [216, 255], "bar_3": [216, 255], "bar_4": [216, 255], "ham_a": [216, 255], "ham_b": [216, 255], "instantiat": [217, 255, 981, 1002], "from_repr": [217, 255, 981, 1002], "df_from_str_repr": [217, 255], "eval": [217, 255, 565, 981, 1002], "correspond": [218, 255, 324, 458, 602, 767, 894, 1002], "re": [218, 255, 332, 333, 779, 780, 1009], "ll": [218, 255], "u1": [218, 255], "f4": [218, 255], "view": [218, 255, 983, 1002], "recarrai": [218, 255], "rec": [218, 255], "use_pyarrow_extension_arrai": [219, 255, 984, 1002], "trigger": [219, 255, 984, 1002], "sent": [219, 255, 983, 984, 1002], "pandas_df1": [219, 255], "pandas_df2": [219, 255], "pandas_df2_pa": [219, 255], "na": [219, 255, 984, 1002], "get_column": [220, 255, 590], "four": [221, 255], "five": [221, 255, 1010], "bottom_k": [222, 255, 536, 602, 672, 700, 986, 1002], "include_head": [223, 255], "header_nam": [223, 255], "column_nam": [223, 255], "perhap": [223, 255], "column_2": [223, 255], "name_gener": [223, 255], "base_nam": [223, 255], "my_column_": [223, 255], "my_column_0": [223, 255], "my_column_1": [223, 255], "my_column_2": [223, 255], "uniquekeepstrategi": [224, 255, 673, 700], "kept": [224, 255, 673, 700], "decompos": [225, 255, 674, 700], "t_a": [225, 255, 674, 700], "t_b": [225, 255, 674, 700], "t_c": [225, 255, 674, 700], "t_d": [225, 255, 674, 700], "womp": [225, 255, 674, 700], "t_": [225, 255, 674, 700], "t_struct": [225, 255, 674, 700], "step": [226, 255, 549], "unstackdirect": [226, 255], "much": [226, 255, 308, 418, 602, 748, 868, 1002], "pivot": [226, 255], "phase": [226, 255], "subject": [226, 255], "ascii_uppercas": [226, 255], "h": [226, 255, 262, 343, 346, 480, 517, 519, 522, 602, 958, 960, 963], "col1_0": [226, 255], "col1_1": [226, 255], "col1_2": [226, 255], "col2_0": [226, 255], "col2_1": [226, 255], "col2_2": [226, 255], "coalesc": [227, 255, 517, 675, 700, 958], "400": [227, 255, 675, 700, 703, 901, 902, 904, 1002], "600": [227, 255, 675, 700, 703], "700": [227, 255, 675, 700], "new_df": [227, 255, 675, 700], "time_column": [228, 255], "frequenc": [228, 255], "forward_fil": [228, 255, 304, 307, 602], "varianc": [229, 255, 356, 390, 473, 542, 593, 602, 676, 700, 804, 841, 909, 991, 1002], "grow": [230, 255], "is_not": [232, 255, 602, 678, 700], "not_c": [232, 255, 678, 700], "diff": [232, 255, 319, 322, 326, 328, 330, 335, 342, 602, 678, 700, 762, 765, 772, 774, 777, 782, 789, 1002], "_diff": [232, 255, 678, 700], "row_nr": [233, 255, 428, 602, 680, 700, 915, 1002], "named_agg": [235, 682], "_sum": [235, 682], "_mean_squar": [235, 682], "b_sum": [235, 682], "c_mean_squar": [235, 682], "sub": [237, 282, 283, 284, 602, 722, 723, 724], "triangl": [237, 684], "group_df": [237, 684], "deem": [238, 302, 557, 602, 685], "nr": [240, 249, 687, 696], "maxim": [242, 277, 602, 689, 717, 1002], "833333": [243, 690], "minim": [245, 278, 396, 480, 488, 602, 692, 718, 846, 879, 920, 1002], "overview": [255, 602, 613, 700, 1002, 1010], "public": [255, 602, 613, 700, 1002], "frameinittyp": [255, 700], "variou": [255, 602, 700, 703, 1002], "entri": [255, 700, 1009], "prevent": [255, 306, 307, 389, 529, 602, 700, 746, 747, 971, 1002], "come": [255, 332, 333, 390, 602, 614, 699, 700, 779, 780, 841, 1002], "behavior": [255, 269, 418, 547, 602, 868], "mydatafram": 255, "notic": [255, 700, 1002], "df4": 255, "df5": 255, "df6": 255, "corr": 255, "drop_in_plac": 255, "drop_nul": [255, 311, 602, 700, 1002], "estimated_s": [255, 1002], "explod": [255, 365, 451, 462, 602, 700, 898, 1002], "find_idx_by_nam": 255, "fold": [255, 437, 552, 559, 560, 582], "frame_equ": [255, 340, 347], "groupby_rol": [255, 465, 466, 467, 468, 469, 471, 472, 473, 602, 634, 700], "hash_row": 255, "hstack": 255, "insert_at_idx": 255, "is_dupl": [255, 602, 1002], "is_empti": [255, 1002], "is_uniqu": [255, 602, 1002], "iter_slic": 255, "melt": [255, 700], "merge_sort": [255, 700], "n_uniqu": [255, 602, 1002], "pipe": [255, 602, 700], "quantil": [255, 469, 602, 700, 892, 905, 1002], "replace_at_idx": 255, "shrink_to_fit": [255, 1002], "take_everi": [255, 602, 700, 1002], "to_dict": 255, "to_dummi": [255, 1002], "to_numpi": [255, 426, 602, 1002], "to_panda": [255, 1002], "to_struct": [255, 499], "unnest": [255, 499, 513, 514, 526, 700, 869, 954, 955], "unstack": 255, "upsampl": 255, "write_avro": 255, "write_databas": 255, "write_delta": 255, "write_excel": 255, "write_json": [255, 655, 700], "write_parquet": 255, "cumprod": [262, 602, 1002], "ghi": [262, 499, 602, 703, 940], "94": [263, 602], "map_alia": [264, 455, 528, 602], "confus": [265, 383, 385, 602], "tt": [265, 602], "tf": [265, 267, 602], "ff": [265, 267, 602], "upcast": [268, 602], "skip_nul": [269, 602, 710, 1002], "pass_nam": [269, 602], "applystrategi": [269, 602], "thread_loc": [269, 602], "unknown": [269, 428, 498, 574, 602, 939], "stage": [269, 602], "speed": [269, 602, 665, 700], "code": [269, 477, 602, 642, 700, 916, 1002], "amount": [269, 602], "releas": [269, 602, 1010], "gil": [269, 602], "discourag": [269, 602], "loop": [269, 602], "a_times_2": [269, 602], "approx": [270, 548, 602, 700], "hyperloglog": [270, 548, 602, 700], "algorithm": [270, 548, 602, 700], "cardin": [270, 548, 602, 700], "invers": [271, 272, 273, 274, 275, 276, 602, 711, 712, 713, 714, 715, 716, 1002], "cosin": [271, 272, 300, 301, 426, 602, 711, 712, 742, 743, 1002], "570796": [271, 273, 602, 711, 713, 1002], "hyperbol": [272, 274, 276, 301, 484, 534, 602, 712, 714, 716, 743, 925, 976, 1002], "sine": [273, 274, 426, 483, 484, 602, 713, 714, 924, 925, 1002], "881374": [274, 602, 714, 1002], "tangent": [275, 276, 533, 534, 602, 715, 716, 975, 976, 1002], "785398": [275, 602, 715, 1002], "arg_wher": [280, 602], "maintain": [285, 420, 476, 538, 602, 664, 665, 700, 725, 870, 912, 987, 1002], "substr": [287, 290, 291, 492, 496, 507, 508, 512, 513, 514, 515, 703, 726, 729, 730, 933, 937, 948, 949, 953, 954, 955, 956], "transferencod": [288, 289, 494, 495, 727, 728, 935, 936], "strict": [288, 294, 492, 494, 506, 517, 518, 519, 522, 602, 727, 732, 913, 933, 935, 947, 958, 959, 960, 963, 1002], "hex": [288, 289, 494, 495, 506, 727, 728, 935, 936, 947], "base64": [288, 289, 494, 495, 727, 728, 935, 936], "complex": [292, 308, 536, 602, 731, 748, 986, 1002], "frac": [292, 354, 355, 356, 485, 536, 602, 731, 802, 803, 804, 926, 986, 1002], "hurt": [293, 602], "lot": [293, 602], "content": [293, 481, 541, 602, 922, 1002], "problem": [293, 602], "due": [294, 339, 602, 732, 786, 1002], "overflow": [294, 306, 307, 506, 529, 602, 732, 746, 747, 947, 971, 1002], "categoricalord": [295, 734], "lexic": [295, 703, 734], "foo_clip": [297, 298, 299, 602], "clip": [298, 299, 602, 739, 740, 1002], "543081": [301, 602, 743, 1002], "cumul": [303, 304, 305, 306, 307, 559, 560, 561, 602, 744, 745, 746, 747, 1002], "a_revers": [303, 304, 305, 306, 307, 427, 463, 528, 602], "value_cummax": [304, 602], "value_cummax_all_fil": [304, 602], "value_cumsum": [307, 602], "value_cumsum_all_fil": [307, 602], "min_period": [308, 354, 355, 356, 464, 465, 466, 467, 468, 469, 471, 472, 473, 584, 585, 602, 748, 802, 803, 804, 900, 901, 902, 903, 904, 905, 907, 908, 909, 1002], "slide": [308, 602, 748, 1002], "realli": [308, 602, 748, 1002], "visit": [308, 602, 748, 1002], "null_behavior": [309, 400, 602, 751, 850, 1002], "nullbehavior": [309, 400, 602, 751, 850, 1002], "th": [309, 400, 485, 602, 751, 850, 926, 1002], "discret": [309, 352, 400, 602, 749, 751, 800, 817, 850, 892, 1002], "drop_nan": [312, 602, 1002], "lose": [313, 756], "2001": [313, 318, 320, 321, 323, 324, 329, 331, 336, 337, 338, 340, 341, 345, 347, 348, 349, 350, 351, 517, 756, 761, 763, 764, 766, 768, 769, 770, 771, 773, 775, 776, 778, 781, 783, 784, 785, 787, 788, 792, 794, 795, 796, 797, 798, 958], "time_unit_m": [313, 756], "time_unit_n": [313, 756], "naiv": [314, 517, 519, 757, 958, 960], "compon": [314, 341, 517, 519, 564, 757, 788, 958, 960], "resolv": 314, "tm": [314, 703], "456000": [314, 757], "101000": 314, "456": [314, 703, 757, 980, 1002], "101": [314, 506, 947, 1010], "d1": 314, "d2": 314, "d3": 314, "utc": [315, 339, 517, 519, 758, 786, 958, 960], "europ": [315, 339, 758, 786], "london": [315, 339, 758, 786], "gmt": [315, 339, 758, 786], "bst": [315, 339, 758, 786], "weekdai": [318, 337], "day_of_month": [318, 337, 349], "ordinal_dai": [318, 349], "day_of_year": [318, 337, 349], "days_diff": 319, "epochtimeunit": [320, 570, 763], "unix": [320, 570, 763], "epoch_n": [320, 763], "epoch_": [320, 763], "978307200000000": [320, 345, 763, 792], "978307200": [320, 763], "978393600000000": [320, 345, 763, 792], "978393600": [320, 763], "978480000000000": [320, 345, 763, 792], "978480000": [320, 763], "hours_diff": 322, "leap": [323, 336, 766, 783], "2002": [323, 324, 336, 338, 351, 766, 783, 798], "iso": [324, 348, 349, 767, 795, 796], "2006": [324, 336, 783], "180": [324, 338, 351], "2004": [324, 336, 783], "2005": [324, 336, 783], "1_001": [325, 326, 328, 335], "002": [325, 326, 328, 335, 564, 772, 774, 782], "003": [325, 326, 328, 335], "3000": 325, "997": [325, 326, 328, 335], "997000": 325, "998": [325, 326, 328, 335], "998000": 325, "999": [325, 326, 328, 335, 1010], "999000": 325, "microseconds_diff": 326, "milliseconds_diff": 328, "minutes_diff": 330, "1440": [330, 777], "think": [332, 333, 779, 780], "vectoris": [332, 333, 779, 780], "tseri": [332, 333, 779, 780], "monthend": [332, 779], "rollforward": [332, 779], "monthbegin": [333, 780], "rollback": [333, 780], "nanoseconds_diff": 335, "1000000": [335, 524, 782], "minu": [336, 783], "dictat": [336, 783], "date_plus_1i": [336, 783], "1y2mo": [336, 783], "date_min": 336, "1998": [336, 783], "1999": [336, 703, 783], "2003": [336, 570, 783], "ordin": [337, 458, 602, 784, 894, 1002], "366": [337, 784], "use_earliest": [339, 786], "convert_time_zon": [339, 786], "ambigu": [339, 786], "sai": [339, 786], "daylight": [339, 786], "earliest": [339, 786], "london_timezon": [339, 786], "amsterdam": [339, 786], "london_to_amsterdam": [339, 786], "cet": [339, 786], "cest": [339, 786], "dst": [339, 786], "ts_local": [339, 786], "brussel": [339, 786], "half": [340, 354, 355, 356, 602, 787, 802, 803, 804, 1002], "225": [340, 347], "to_fram": [340, 347, 517, 914, 915, 954, 955, 958, 1002], "10m": [340, 347, 787, 794], "milli": [341, 788], "micro": [341, 788], "456789": 341, "654321": 341, "111110": 341, "765431": 341, "sec": [341, 1010], "11111": 341, "seconds_diff": 342, "to_str": [343, 790], "datetime_str": [343, 346], "timestamp_n": [345, 792], "timestamp_m": 345, "978307200000": 345, "978393600000": 345, "978480000000": 345, "strftime": [346, 793], "1mo_satur": 347, "53": [348, 795], "time_unit_u": [350, 797], "32971": [350, 797], "32974": [350, 797], "32976": [350, 797], "718281828459045": [352, 421, 602, 800, 871, 1002], "pk": [352, 602, 800, 1002], "probabl": [352, 602, 800, 1002], "459148": [352, 602], "754888": [352, 602], "span": [354, 355, 356, 602, 802, 803, 804, 1002], "half_lif": [354, 355, 356, 602, 802, 803, 804, 1002], "adjust": [354, 355, 356, 485, 602, 802, 803, 804, 926, 1002], "ignore_nul": [354, 355, 356, 602, 802, 803, 804, 992, 1002], "exponenti": [354, 355, 356, 358, 454, 602, 802, 803, 804, 805, 1002], "weight": [354, 355, 356, 464, 465, 466, 467, 468, 469, 471, 472, 473, 485, 602, 802, 803, 804, 900, 901, 902, 903, 904, 905, 907, 908, 909, 926, 1002], "decai": [354, 355, 356, 602, 802, 803, 804, 1002], "term": [354, 355, 356, 502, 505, 602, 802, 803, 804, 943, 946, 1002], "mass": [354, 355, 356, 602, 802, 803, 804, 1002], "gamma": [354, 355, 356, 602, 802, 803, 804, 1002], "foral": [354, 355, 356, 602, 802, 803, 804, 1002], "geq": [354, 355, 356, 602, 802, 803, 804, 1002], "theta": [354, 355, 356, 602, 802, 803, 804, 1002], "life": [354, 355, 356, 602, 802, 803, 804, 1002], "exp": [354, 355, 356, 602, 802, 803, 804, 1002], "ln": [354, 355, 356, 602, 802, 803, 804, 1002], "smooth": [354, 355, 356, 602, 802, 803, 804, 1002], "factor": [354, 355, 356, 535, 602, 802, 803, 804, 985, 1002], "leq": [354, 355, 356, 602, 802, 803, 804, 1002], "imbal": [354, 355, 356, 602, 802, 803, 804, 1002], "ew": [354, 355, 356, 602, 802, 803, 804, 1002], "w_i": [354, 355, 356, 602, 802, 803, 804, 1002], "recurs": [354, 355, 356, 602, 802, 803, 804, 1002], "y_0": [354, 355, 356, 602, 802, 803, 804, 1002], "x_0": [354, 355, 356, 602, 802, 803, 804, 1002], "y_t": [354, 355, 356, 602, 802, 803, 804, 1002], "y_": [354, 355, 356, 602, 802, 803, 804, 1002], "x_t": [354, 355, 356, 602, 802, 803, 804, 1002], "observ": [354, 355, 356, 602, 802, 803, 804, 1002], "x_2": [354, 355, 356, 602, 802, 803, 804, 1002], "428571": [354, 602], "bia": [355, 356, 390, 470, 485, 602, 803, 804, 841, 906, 926, 1002], "unbias": [355, 356, 602, 803, 804, 1002], "963624": [355, 602, 803, 1002], "928571": [356, 602, 804, 1002], "wildcard": [357, 553, 559, 560, 568, 582, 602], "regex": [357, 434, 492, 493, 496, 498, 499, 507, 508, 515, 566, 590, 602, 703, 933, 934, 937, 939, 940, 948, 949, 956], "aa": [357, 492, 566, 602, 933], "ba": [357, 566, 602, 703], "cc": [357, 566, 602], "718282": [358, 602], "389056": [358, 602], "54": [358, 602, 1010], "59815": [358, 602], "expand": [359, 433, 434, 461, 602, 806, 1002], "exprlistnamespac": [359, 365, 462, 602], "exprstringnamespac": [359, 602], "pythonliter": [360, 576, 579, 583, 602, 807, 876, 879, 1002], "extrem": [360, 602, 807, 1002], "group_col": [363, 543, 602], "g1": [363, 543, 602], "g2": [363, 543, 602], "lt": [363, 543, 602, 1002], "gte": [363, 543, 602], "divis": [367, 537, 602], "truediv": [367, 602], "9774092659964970114": [372, 602], "13614470193936745724": [372, 602], "1101441246220388612": [372, 602], "11638928888656214026": [372, 602], "13382926553367784577": [372, 602], "cumsum": [375, 527, 602, 637, 700, 840, 1002], "interpolationmethod": [376, 602, 820, 1002], "regrid": [376, 602], "grid": [376, 602], "df_original_grid": [376, 602], "grid_point": [376, 602], "df_new_grid": [376, 602], "conflat": [377, 602], "finit": [379, 537, 556, 602, 825, 1002], "primit": [381, 602, 983, 1002], "optional_memb": [381, 602, 828, 1002], "infinit": [382, 537, 602, 829, 1002], "_isnan": [383, 602], "b_isnan": [383, 602], "negat": [384, 602], "_is_not_nan": [385, 602], "b_is_not_nan": [385, 602], "_not_nul": [386, 602], "a_not_nul": [386, 602], "b_not_nul": [386, 602], "_isnul": [387, 602], "a_isnul": [387, 602], "b_isnul": [387, 602], "undo": [389, 439, 602], "duplicateerror": [389, 602, 613], "occurr": [389, 602, 817, 1002], "333333": [389, 473, 602, 888, 909, 1002], "fisher": [390, 485, 602, 841, 926, 1002], "fourth": [390, 602, 841, 1002], "subtract": [390, 527, 602, 841, 1002], "distribut": [390, 485, 602, 841, 926, 1002], "elimin": [390, 602, 841, 1002], "bias": [390, 485, 602, 841, 926, 1002], "scipi": [390, 485, 602, 841, 926, 1002], "stat": [390, 485, 602, 841, 926, 1002], "153061": [390, 602], "sublist": [395, 396, 398, 400, 403, 404, 405, 406, 407, 414, 417, 418, 419, 828, 845, 846, 848, 850, 853, 854, 855, 856, 857, 864, 867, 868, 869, 1002], "membership": [398, 848], "listcol": 399, "number_of_two": 399, "blindli": [401, 851], "worth": [401, 851], "enough": [401, 485, 602, 851, 926, 1002], "concat_list": [401, 565, 851], "rank": [401, 556, 565, 602, 851, 1002], "exprnamespac": 402, "reshap": [402, 602, 852, 1002], "flat": [402, 462, 602, 852, 898, 1002], "taken": [414, 511, 531, 602, 864, 952], "null_on_oob": [418, 868], "cheaper": [418, 868], "n_field_strategi": [419, 869], "tostructstrategi": [419, 869], "first_non_nul": [419, 869], "max_width": [419, 869], "field_0": [419, 869], "field_1": [419, 869], "field_n": [419, 869], "n0": 419, "n1": 419, "logarithm": [421, 422, 423, 602, 871, 872, 873, 1002], "584963": [421, 602], "30103": [422, 602], "60206": [422, 602], "natur": [423, 602, 873, 1002], "plu": [423, 602, 873, 1002], "693147": [423, 602], "098612": [423, 602], "386294": [423, 602], "lowest": [424, 602], "9223372036854775808": [424, 602], "agg_list": [426, 602], "elementwis": [426, 464, 465, 466, 467, 468, 469, 471, 472, 473, 602, 900, 901, 902, 903, 904, 905, 907, 908, 909, 1002], "parti": [426, 602], "book": [426, 602], "map_dict": [426, 602, 1002], "argmax": [426, 602], "_revers": [427, 463, 528, 602], "rsplit": [427, 602], "b_revers": [427, 463, 528, 602], "remap": [428, 602, 875, 1002], "lookup": [428, 602, 875, 1002], "country_code_dict": [428, 602], "ca": [428, 602], "canada": [428, 602], "de": [428, 602], "germani": [428, 602], "fr": [428, 602], "franc": [428, 602], "country_cod": [428, 602], "rest": [428, 602], "exprmetanamespac": [432, 435], "computeerror": [436, 506, 613, 947], "keep_nam": [439, 602], "modulu": [442, 602], "xlog2": [444, 454, 602], "poison": [446, 447, 602, 884, 885, 1002], "nanmax": [446, 447, 602, 884, 885, 1002], "wherea": [446, 447, 602, 636, 643, 700, 884, 885, 1002], "inequ": [448, 602], "more_expr": [451, 545, 546, 550, 552, 554, 555, 561, 576, 579, 590, 602], "mapping_strategi": [451, 602], "windowmappingstrategi": [451, 602], "group_to_row": [451, 602], "outcom": [451, 602], "group_dtyp": [451, 602], "warn": [451, 602], "flatten": [451, 602], "_max": [451, 602], "c_max": [451, 602], "_min": [451, 602], "c_min": [451, 602], "percent": [452, 602, 888, 1002], "090909": [452, 602], "extract_numb": [453, 602], "digit": [453, 474, 499, 524, 602, 910, 934, 940, 965, 1002, 1010], "scale_negative_even": [453, 602], "expon": [454, 602, 1002], "reverse_": [455, 602], "reverse_a": [455, 602], "reverse_fruit": [455, 602], "reverse_b": [455, 602], "reverse_car": [455, 602], "rankmethod": [458, 602, 894, 1002], "ti": [458, 602, 894, 1002], "competit": [458, 602, 894, 1002], "highest": [458, 540, 556, 602, 700, 894, 1002], "64bit": [460, 602, 896, 1002], "safe": [460, 517, 519, 602, 896, 958, 960, 983, 1002], "coerc": [461, 602], "fruits_revers": [463, 528, 602], "cars_revers": [463, 528, 602], "window_s": [464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 584, 585, 602, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 1002], "rolling_min": [464, 602, 900, 1002], "rolling_max": [464, 602, 900, 1002], "rolling_mean": [464, 602, 900, 1002], "rolling_sum": [464, 602, 900, 1002], "multipli": [464, 465, 466, 467, 468, 469, 471, 472, 473, 602, 900, 901, 902, 903, 904, 905, 907, 908, 909, 1002], "label": [464, 465, 466, 467, 468, 469, 471, 472, 473, 602, 653, 700, 749, 892, 900, 901, 902, 903, 904, 905, 907, 908, 909, 1002], "358899": [464, 602], "041452": [464, 602], "567764": [464, 602], "travers": [465, 466, 468, 471, 472, 473, 602, 901, 902, 904, 907, 908, 909, 1002], "vector": [465, 466, 468, 471, 472, 473, 602, 901, 902, 904, 907, 908, 909, 1002], "t_2": [465, 466, 467, 468, 469, 471, 472, 473, 602], "5h": [465, 466, 467, 468, 469, 471, 472, 473, 602], "skew": [470, 602, 906, 1002], "381802": [470, 602, 906, 1002], "47033": [470, 602, 906, 1002], "38180177416060584": [470, 602, 906, 1002], "47033046033698594": [470, 602, 906, 1002], "527525": [471, 602, 907, 1002], "searchsortedsid": [476, 602, 912, 1002], "leftmost": [476, 602, 912, 1002], "rightmost": [476, 602, 912, 1002], "six": [476, 602], "downstream": [477, 602, 916, 1002], "extrema": [480, 602, 920, 1002], "112": [480, 602, 1010], "129": [480, 602], "8589934592": [480, 602], "1073741824": [480, 602], "175201": [484, 602, 925, 1002], "about": [485, 492, 498, 499, 507, 602, 926, 933, 939, 940, 948, 1002, 1010], "unimod": [485, 602, 926, 1002], "skewtest": [485, 602, 926, 1002], "speak": [485, 602, 926, 1002], "g_1": [485, 602, 926, 1002], "m_3": [485, 602, 926, 1002], "m_2": [485, 602, 926, 1002], "m_i": [485, 602, 926, 1002], "sum_": [485, 602, 926, 1002], "texttt": [485, 602, 926, 1002], "k_3": [485, 602, 926, 1002], "k_2": [485, 602, 926, 1002], "sqrt": [485, 602, 926, 1002], "343622": [485, 602], "value1": [488, 602], "value2": [488, 602], "attain": [488, 602], "414214": [489, 602, 929, 1002], "ends_with": [492, 515, 703, 956], "sensit": [492, 499, 507, 933, 940, 948], "ilmsuxu": [492, 498, 499, 507, 933, 939, 940, 948], "default_match": 492, "insensitive_match": 492, "section": [492, 498, 499, 507, 933, 939, 940, 948], "crab": [492, 933], "dog": [492, 521, 523, 555, 933], "rab": [492, 933], "success": [493, 499, 934, 940], "overlap": [493, 499, 934, 940], "captur": [493, 498, 499, 934, 939, 940], "123": [493, 499, 508, 703, 934, 940, 949, 980, 1002], "bla": [493, 499, 934, 940], "asd": [493, 499, 934, 940], "678": [493, 499, 934, 940], "910t": [493, 499, 934, 940], "count_digit": 493, "666f6f": [495, 936], "626172": [495, 936], "mango": [496, 515, 937, 956], "go": [496, 937], "has_suffix": 496, "group_index": [498, 939], "nthose": [498, 939], "nodd": [498, 939], "nthe": [498, 939], "url": [498, 939], "vote": [498, 939], "ballon_dor": [498, 939], "404": [498, 939], "ref": [498, 939], "candid": [498, 939], "messi": [498, 939], "ronaldo": [498, 939], "did": [499, 940], "email": [499, 940], "real": [499, 940], "some_account": [499, 940], "somewher": [499, 940], "net": [499, 940], "jkl": [499, 940], "uvw": [499, 940], "co": [499, 602, 940, 1002], "uk": [499, 940], "address": 499, "xi": [499, 940], "insensit": [499, 507, 703, 933, 940, 948], "quantifi": [499, 940], "email_part": [499, 940], "extracted_nr": 499, "910": [499, 940], "json_path_match": [500, 941], "jsonpath": [500, 501, 941, 942], "json_path": [501, 942], "regardless": [501, 942], "json_val": [501, 942], "n_char": [502, 943], "caf\u00e9": [502, 505, 943, 946], "345": [502, 505, 943, 946], "\u6771\u4eac": [502, 505, 943, 946], "nchar": [502, 505], "fill_char": [503, 509, 944, 950], "justifi": [503, 509, 944, 950], "pad": [503, 509, 524, 944, 950, 965], "cow": [503, 509, 944, 950], "monkei": [503, 509, 944, 950], "hippopotamu": [503, 509, 944, 950], "strip": [504, 510, 945, 951], "tworld": [504, 945, 957], "wod": [504, 945], "rld": [504, 516, 945], "radix": [506, 947], "parseerror": [506, 947], "becom": [506, 947], "silent": [506, 947], "bin": [506, 544, 596, 602, 749, 817, 892, 947, 996, 1002], "110": [506, 947], "010": [506, 947], "fa1e": [506, 947], "ff00": [506, 947], "cafe": [506, 947], "64030": [506, 947], "65280": [506, 947], "51966": [506, 947], "replace_al": [507, 948], "citi": 507, "philadelphia": 507, "season": 507, "spring": 507, "summer": 507, "autumn": 507, "winter": 507, "weather": [507, 948], "raini": [507, 948], "sunni": [507, 948], "cloudi": 507, "snowi": 507, "foggi": [507, 948], "123abc": [507, 948], "abc456": [507, 948], "abcabc": [508, 949], "123a123": [508, 949], "bc": [508, 590, 949], "trail": [510, 516, 951, 957], "oldw": 510, "he": 510, "subslic": [511, 952], "pear": [511, 952], "papaya": [511, 952], "dragonfruit": [511, 952], "s_slice": 511, "ear": [511, 952], "aya": [511, 952], "uit": [511, 952], "ya": [511, 952], "onf": [511, 952], "a_1": [513, 954, 979, 1002], "d_4": [513, 954], "rename_field": [513, 514, 954, 955], "first_part": [513, 514, 954, 955], "second_part": [513, 514, 954, 955], "remaind": [514, 955], "app": [515, 956], "has_prefix": 515, "nworld": 516, "ow": 516, "hell": [516, 957], "polarstemporaltyp": [517, 958], "anywher": [517, 518, 519, 958, 959, 960], "introduc": [517, 518, 519, 958, 959, 960], "penalti": [517, 518, 519, 958, 959, 960], "clean": [517, 518, 519, 958, 959, 960], "beforehand": [517, 518, 519, 958, 959, 960], "certainli": [517, 518, 519, 958, 959, 960], "3f": [517, 519, 958, 960], "00z": [517, 519, 958, 960], "sun": [517, 958], "jul": [517, 958], "34": [517, 958], "inference_length": [520, 961], "3420": [520, 961], "120134": [520, 961], "3212": [520, 961], "143": [520, 961, 1010], "lowercas": [521, 962], "variant": [521, 523], "uppercas": [523, 964], "100000": 524, "0010": 524, "0001": 524, "00000": 524, "00001": 524, "cd": [525, 526], "struct_col": [525, 526], "www": 526, "xxx": 526, "yyi": 526, "zzz": 526, "obvious": 526, "structfieldnotfounderror": [526, 613], "761594": [534, 602, 976, 1002], "replic": [535, 602, 985, 1002], "vals_phys": [535, 602], "floordiv": [537, 602], "ieee": [537, 602], "754": [537, 602], "mathemat": [537, 565, 602], "undefin": [537, 602], "On": [537, 602], "operand": [537, 602], "infin": [537, 602], "value_count": [539, 602, 1002], "9223372036854775807": [540, 602], "multithread": [541, 602], "binary_str": [544, 602], "zfill": [544, 602], "250": [544, 602, 902, 1002, 1010], "bin_x": [544, 602], "bin_i": [544, 602], "xor_xi": [544, 602], "bin_xor_xi": [544, 602], "00001010": [544, 602], "00000001": [544, 602], "00001011": [544, 602], "00001000": [544, 602], "00000010": [544, 602], "11111010": [544, 602], "00000011": [544, 602], "249": [544, 602], "11111001": [544, 602], "01000010": [544, 602], "00000100": [544, 602], "70": [544, 602], "01000110": [544, 602], "bitwis": [545, 546], "AND": [545, 703], "returns_scalar": 547, "product_a": 547, "49": 547, "Be": 549, "more_nam": 553, "hamburg": 553, "lag": 554, "mimic": 554, "a_lag_": 554, "a_rol": 554, "swim": 555, "walk": 555, "full_sent": 555, "correlationmethod": 556, "propagate_nan": 556, "spearman": 556, "larger": [556, 664, 665, 700], "544705": 556, "covari": [558, 585], "acc": [559, 560, 568, 582], "include_init": 559, "accumul": [559, 560, 568, 582], "fn": [559, 560, 568, 582], "new_valu": [559, 560, 568, 582], "cumreduc": 559, "tbl_width_char": 564, "120": 564, "add_week": 564, "add_dai": 564, "add_second": 564, "add_milli": 564, "add_hour": 564, "a_b_doubl": 565, "f_string": 569, "placehold": 569, "hello_": 569, "_world": 569, "foo_": 569, "_bar_": 569, "foo_a_bar_1": 569, "foo_b_bar_2": 569, "foo_c_bar_3": 569, "epoch": 570, "timestep": 570, "1666683077": 570, "1666683099": 570, "39": 570, "12345": [570, 735, 812, 910, 1002], "12346": 570, "agg_group": [571, 602], "allow_object": 574, "valueexcept": 574, "test_func": 575, "605551": 588, "605551275463989": 588, "my_struct": 589, "chain": 594, "isn": 594, "thens": 594, "elif": 594, "pick": 594, "arr": [595, 983, 994, 1002], "sometim": 601, "and_": 602, "approx_uniqu": [602, 700], "arcco": [602, 1002], "arccosh": [602, 1002], "arcsin": [602, 1002], "arcsinh": [602, 1002], "arctan": [602, 1002], "arctanh": [602, 1002], "arg_max": [602, 1002], "arg_min": [602, 1002], "arg_sort": [602, 1002], "arg_uniqu": [602, 1002], "backward_fil": 602, "clip_max": [602, 1002], "clip_min": [602, 1002], "cosh": [602, 1002], "cumcount": 602, "cummax": [602, 1002], "cummin": [602, 1002], "cumulative_ev": [602, 1002], "entropi": [602, 1002], "eq": [602, 1002], "eq_miss": [602, 1002], "ewm_mean": [602, 1002], "ewm_std": [602, 1002], "ewm_var": [602, 1002], "extend_const": [602, 1002], "from_json": [602, 655, 700], "ge": [602, 1002], "gt": [602, 1002], "implod": [602, 1002], "inspect": [602, 700], "is_between": [602, 1002], "is_finit": [602, 1002], "is_first": [602, 1002], "is_in": [602, 1002], "is_infinit": [602, 1002], "is_nan": [602, 1002], "is_not_nan": [602, 1002], "is_not_nul": [602, 1002], "kurtosi": [602, 1002], "le": [602, 1002], "log10": [602, 1002], "log1p": [602, 1002], "mod": 602, "mul": 602, "nan_max": [602, 1002], "nan_min": [602, 1002], "ne": [602, 1002], "ne_miss": [602, 1002], "or_": 602, "pct_chang": [602, 1002], "pow": [602, 1002], "reinterpret": [602, 1002], "repeat_bi": 602, "rolling_appli": [602, 1002], "rolling_median": [602, 1002], "rolling_quantil": [602, 1002], "rolling_skew": [602, 1002], "rolling_std": [602, 1002], "rolling_var": [602, 1002], "search_sort": [602, 1002], "shrink_dtyp": [602, 1002], "sin": [602, 1002], "sinh": [602, 1002], "sort_bi": 602, "tan": [602, 1002], "to_phys": [602, 1002], "unique_count": [602, 1002], "xor": 602, "expos": 613, "miscellan": 613, "arrowerror": 613, "columnnotfounderror": 613, "invalidoperationerror": 613, "nodataerror": 613, "polarspanicerror": 613, "schemaerror": 613, "schemafieldnotfounderror": 613, "shapeerror": 613, "parametr": 613, "build_info": 613, "get_index_typ": 613, "show_vers": 613, "threadpool_s": 613, "sqlcontext": [613, 1009], "hit": [617, 700], "node": [617, 637, 644, 648, 653, 656, 700], "huge": [620, 700], "saver": [620, 700], "purpos": [627, 700], "influenc": [627, 644, 700], "read_json": [632, 681, 700], "lazygroupbi": [633, 634, 635, 700], "other_lf": [639, 700], "validate_output_schema": [644, 700], "streamabl": [644, 648, 700], "past": [644, 700], "assum": [644, 684, 700], "paramount": [644, 700], "bug": [644, 684, 700], "elig": [644, 700], "invari": [644, 700], "upheld": [644, 700], "prune": [644, 700], "show_plot": [653, 700], "truncate_nod": [653, 700], "figsiz": [653, 663, 700], "gantt": [653, 700], "plot": [653, 663, 700], "groupby_partit": [653, 700], "470": [653, 700], "475": [653, 700], "1964": [653, 700], "swap": [656, 700], "output_path": [663, 700], "raw_output": [663, 700], "figur": [663, 700], "ram": [664, 665, 700], "slightli": [664, 665, 700], "my_larger_than_ram_fil": [664, 665, 700], "data_pagesize_limit": [665, 700], "290994": [668, 700], "118034": [668, 700], "433013": [668, 700], "1875": [676, 700], "extern": [679, 700], "lf_other": [679, 700], "afoo": [679, 700], "cfoo": [679, 700], "train_lf": [679, 700], "feature_0": [679, 700], "feature_1": [679, 700], "test_lf": [679, 700], "_train": [679, 700], "feature_0_train": [679, 700], "dataframescan": [681, 700], "output_schema": [681, 700], "opaqu": 684, "idiomat": 684, "my_column": 684, "struct_seri": 684, "lf5": 700, "lf6": 700, "explain": 700, "sink_ipc": 700, "sink_parquet": 700, "with_context": 700, "intuit": 703, "relat": 703, "broadcast": 703, "emploi": 703, "complement": 703, "plenti": 703, "cde": 703, "fgg": 703, "jjk": 703, "lmn": 703, "opp": 703, "qqr": 703, "by_dtyp": 703, "as_expr": 703, "dispatch": 703, "2024": 703, "1_234_500": 703, "5_000_555": 703, "1234500": 703, "5000555": 703, "numeric_dtyp": [703, 1010], "2010": 703, "4_500_000": 703, "4500000": 703, "3265500": 703, "by_nam": 703, "zap": 703, "tstamp": 703, "600000": 703, "123000": 703, "dtime": 703, "987000": 703, "400500": 703, "987": 703, "include_categor": 703, "set_ord": 703, "2345": 703, "3456": 703, "new_aliased_sr": [706, 1002], "append_chunk": [709, 1002], "super": [709, 1002], "141593": [711, 1002], "292432": [712, 1002], "549306": [716, 1002], "catnamespac": 733, "56789": [735, 812, 910, 1002], "901234": [735, 812, 910, 1002], "pi": [742, 924, 975, 1002], "1232e": [742, 1002], "break_point_label": [749, 892, 1002], "break_point": [749, 817, 892, 1002], "category_label": [749, 892, 1002], "breakpoint": [749, 892, 1002], "quick": [750, 1002, 1010], "series_num": [750, 1002], "581139": [750, 1002], "series_str": [750, 1002], "datetimenamespac": 755, "ser": [759, 760, 791], "replace_time_zon": [759, 760, 791], "kathmandu": [759, 760, 791], "0545": [759, 760, 791], "500m": [771, 773, 781, 788], "500000": 771, "2m": 776, "500000000": 781, "date_minus_1y_2mon": 783, "165": [787, 794], "series_equ": [787, 794, 1002], "timestamp_u": 792, "978307200000000000": 792, "978393600000000000": 792, "978480000000000000": 792, "005": [800, 1002], "06293300616044681": [800, 1002], "65": [800, 1002], "8568409950394724": [800, 1002], "4000000": [801, 1002], "814697265625": [801, 1002], "listnamespac": [806, 844, 898, 1002], "stringnamespac": [806, 931, 1002], "bitmask": [814, 1002], "swiftli": [814, 1002], "10734580197236529959": [815, 1002], "3022416320763508302": [815, 1002], "13756996518000038261": [815, 1002], "bin_count": [817, 1002], "a_count": [817, 1002], "fall": [821, 1002], "field_2": 869, "n00": 869, "n01": 869, "n02": 869, "2147483648": [874, 1002], "iso3166": [875, 1002], "tur": [875, 1002], "jpn": [875, 1002], "nld": [875, 1002], "country_lookup": [875, 1002], "japan": [875, 1002], "t\u00fcrkiy": [875, 1002], "netherland": [875, 1002], "unrecognis": [875, 1002], "unspecifi": [875, 1002], "country_nam": [875, 1002], "166667": [888, 1002], "142857": [888, 1002], "peak": [889, 890, 1002], "quanil": [892, 1002], "nanstd": [900, 1002], "858612": [900, 1002], "200": [901, 902, 904, 1002], "150": [902, 1002], "350": [902, 1002], "450": [902, 1002], "dev": [907, 1002], "frequent": [914, 915, 1002], "mutat": [915, 1002], "2246e": [924, 975, 1002], "orld": 951, "6331e16": [975, 1002], "lib": [978, 1002], "int64arrai": [978, 1002], "a_2": [979, 1002], "a_3": [979, 1002], "s_from_str_repr": [981, 1002], "zero_copy_onli": [983, 1002], "writabl": [983, 1002], "complet": [983, 1002], "presenc": [983, 1002], "immut": [983, 1002], "127": [989, 1002], "seriesview": [992, 1002], "arraylik": 1002, "dtype_if_empti": 1002, "position": 1002, "scenario": 1002, "chunk_length": 1002, "cut": 1002, "get_chunk": 1002, "has_valid": 1002, "hist": 1002, "is_boolean": 1002, "is_float": 1002, "is_integ": 1002, "is_numer": [1002, 1010], "is_sort": 1002, "is_tempor": 1002, "is_utf8": 1002, "new_from_index": 1002, "peak_max": 1002, "peak_min": 1002, "power": 1002, "qcut": 1002, "set_at_idx": 1002, "two_a": 1009, "__enter__": 1009, "__exit__": 1009, "exc_typ": 1009, "baseexcept": 1009, "exc_val": 1009, "exc_tb": 1009, "tracebacktyp": 1009, "guid": 1010, "easi": 1010, "approxim": 1010, "own": 1010, "machin": 1010, "xdist": 1010, "vari": 1010, "hardwar": 1010, "setup": 1010, "null_probabililti": 1010, "test_numer": 1010, "col0": 1010, "col4": 1010, "29096": 1010, "485": 1010, "2147483647": 1010, "8257e14": 1010, "7508": 1010, "37338": 1010, "7264": 1010, "321": 1010, "16996": 1010, "121": 1010, "361": 1010, "63204": 1010, "1443e235": 1010, "conform": 1010, "ascii_lett": 1010, "id_char": 1010, "alphabet": 1010, "price": 1010, "min_valu": 1010, "max_valu": 1010, "test_price_calcul": 1010, "a101": 1010, "8nin": 1010, "qhoo": 1010, "714": 1010, "544": 1010, "i0e0": 1010, "0000": 1010, "colz": 1010, "test_miscellan": 1010, "235": 1010, "87": 1010, "186": 1010, "174": 1010, "179": 1010, "213": 1010, "221": 1010, "86": 1010, "255": 1010}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [36, 0, 1, "", "DataType"], [37, 0, 1, "", "Date"], [38, 0, 1, "", "Datetime"], [39, 0, 1, "", "Decimal"], [40, 0, 1, "", "Duration"], [41, 0, 1, "", "Float32"], [42, 0, 1, "", "Float64"], [43, 0, 1, "", "Int16"], [44, 0, 1, "", "Int32"], [45, 0, 1, "", "Int64"], [46, 0, 1, "", "Int8"], [47, 0, 1, "", "List"], [48, 0, 1, "", "Null"], [49, 0, 1, "", "Object"], [1009, 0, 1, "", "SQLContext"], [56, 0, 1, "", "StringCache"], [57, 0, 1, "", "Struct"], [58, 0, 1, "", "Time"], [59, 0, 1, "", "UInt16"], [60, 0, 1, "", "UInt32"], [61, 0, 1, "", "UInt64"], [62, 0, 1, "", "UInt8"], [63, 0, 1, "", "Unknown"], [64, 0, 1, "", "Utf8"], [65, 4, 1, "", "align_frames"], [545, 4, 1, "", "all"], [546, 4, 1, "", "any"], [547, 4, 1, "", "apply"], [548, 4, 1, "", "approx_unique"], [549, 4, 1, "", "arange"], [550, 4, 1, "", "arg_sort_by"], [70, 4, 1, "", "arg_where"], [551, 4, 1, "", "avg"], [71, 4, 1, "", "build_info"], [552, 4, 1, "", "coalesce"], [553, 4, 1, "", "col"], [72, 4, 1, "", "collect_all"], [73, 4, 1, "", "concat"], [554, 4, 1, "", "concat_list"], [555, 4, 1, "", "concat_str"], [556, 4, 1, "", "corr"], [557, 4, 1, "", "count"], [558, 4, 1, "", "cov"], [559, 4, 1, "", "cumfold"], [560, 4, 1, "", "cumreduce"], [561, 4, 1, "", "cumsum"], [562, 4, 1, "", "date"], [74, 4, 1, "", "date_range"], [563, 4, 1, "", "datetime"], [564, 4, 1, "", "duration"], [565, 4, 1, "", "element"], [75, 4, 1, "", "enable_string_cache"], [566, 4, 1, "", "exclude"], [567, 4, 1, "", "first"], [568, 4, 1, "", "fold"], [569, 4, 1, "", "format"], [90, 4, 1, "", "from_arrow"], [91, 4, 1, "", "from_dataframe"], [92, 4, 1, "", "from_dict"], [93, 4, 1, "", "from_dicts"], [570, 4, 1, "", "from_epoch"], [94, 4, 1, "", "from_numpy"], [95, 4, 1, "", "from_pandas"], [96, 4, 1, "", "from_records"], [97, 4, 1, "", "from_repr"], [98, 4, 1, "", "get_index_type"], [571, 4, 1, "", "groups"], [572, 4, 1, "", "head"], [573, 4, 1, "", "implode"], [574, 4, 1, "", "lit"], [575, 4, 1, "", "map"], [576, 4, 1, "", "max"], [577, 4, 1, "", "mean"], [578, 4, 1, "", "median"], [579, 4, 1, "", "min"], [580, 4, 1, "", "n_unique"], [100, 4, 1, "", "ones"], [581, 4, 1, "", "quantile"], [101, 4, 1, "", "read_avro"], [102, 4, 1, "", "read_csv"], [103, 4, 1, "", "read_csv_batched"], [104, 4, 1, "", "read_database"], [105, 4, 1, "", "read_delta"], [106, 4, 1, "", "read_excel"], [107, 4, 1, "", "read_ipc"], [108, 4, 1, "", "read_ipc_schema"], [109, 4, 1, "", "read_json"], [110, 4, 1, "", "read_ndjson"], [111, 4, 1, "", "read_parquet"], [112, 4, 1, "", "read_parquet_schema"], [582, 4, 1, "", "reduce"], [583, 4, 1, "", "repeat"], [584, 4, 1, "", "rolling_corr"], [585, 4, 1, "", "rolling_cov"], [113, 4, 1, "", "scan_csv"], [114, 4, 1, "", "scan_delta"], [115, 4, 1, "", "scan_ipc"], [116, 4, 1, "", "scan_ndjson"], [117, 4, 1, "", "scan_parquet"], [118, 4, 1, "", "scan_pyarrow_dataset"], [586, 4, 1, "", "select"], [703, 6, 0, "-", "selectors"], [119, 4, 1, "", "show_versions"], [587, 4, 1, "", "sql_expr"], [588, 4, 1, "", "std"], [589, 4, 1, "", "struct"], [590, 4, 1, "", "sum"], [591, 4, 1, "", "tail"], [129, 4, 1, "", "threadpool_size"], [592, 4, 1, "", "time"], [130, 4, 1, "", "time_range"], [131, 4, 1, "", "using_string_cache"], [593, 4, 1, "", "var"], [594, 4, 1, "", "when"], [132, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "restore_defaults"], [9, 1, 1, "", "save"], [10, 1, 1, "", "set_ascii_tables"], [11, 1, 1, "", "set_fmt_float"], [12, 1, 1, "", "set_fmt_str_lengths"], [13, 1, 1, "", "set_streaming_chunk_size"], [14, 1, 1, "", "set_tbl_cell_alignment"], [15, 1, 1, "", "set_tbl_cols"], [16, 1, 1, "", "set_tbl_column_data_type_inline"], [17, 1, 1, "", "set_tbl_dataframe_shape_below"], [18, 1, 1, "", "set_tbl_formatting"], [19, 1, 1, "", "set_tbl_hide_column_data_types"], [20, 1, 1, "", "set_tbl_hide_column_names"], [21, 1, 1, "", "set_tbl_hide_dataframe_shape"], [22, 1, 1, "", "set_tbl_hide_dtype_separator"], [23, 1, 1, "", "set_tbl_rows"], [24, 1, 1, "", "set_tbl_width_chars"], [25, 1, 1, "", "set_verbose"], [26, 1, 1, "", "state"]], "polars.DataFrame": [[135, 1, 1, "", "__dataframe__"], [136, 1, 1, "", "apply"], [137, 1, 1, "", "bottom_k"], [138, 1, 1, "", "clear"], [139, 1, 1, "", "clone"], [140, 2, 1, "", "columns"], [141, 1, 1, "", "corr"], [142, 1, 1, "", "describe"], [143, 1, 1, "", "drop"], [144, 1, 1, "", "drop_in_place"], [145, 1, 1, "", "drop_nulls"], [146, 2, 1, "", "dtypes"], [147, 1, 1, "", "estimated_size"], [148, 1, 1, "", "explode"], [149, 1, 1, "", "extend"], [150, 1, 1, "", "fill_nan"], [151, 1, 1, "", "fill_null"], [152, 1, 1, "", "filter"], [153, 1, 1, "", "find_idx_by_name"], [154, 1, 1, "", "fold"], [155, 1, 1, "", "frame_equal"], [156, 1, 1, "", "get_column"], [157, 1, 1, "", "get_columns"], [158, 1, 1, "", "glimpse"], [159, 1, 1, "", "groupby"], [160, 1, 1, "", "groupby_dynamic"], [161, 1, 1, "", "groupby_rolling"], [162, 1, 1, "", "hash_rows"], [163, 1, 1, "", "head"], [164, 2, 1, "", "height"], [165, 1, 1, "", "hstack"], [166, 1, 1, "", "insert_at_idx"], [167, 1, 1, "", "interpolate"], [168, 1, 1, "", "is_duplicated"], [169, 1, 1, "", "is_empty"], [170, 1, 1, "", "is_unique"], [171, 1, 1, "", "item"], [172, 1, 1, "", "iter_rows"], [173, 1, 1, "", "iter_slices"], [174, 1, 1, "", "join"], [175, 1, 1, "", "join_asof"], [176, 1, 1, "", "lazy"], [177, 1, 1, "", "limit"], [178, 1, 1, "", "max"], [179, 1, 1, "", "mean"], [180, 1, 1, "", "median"], [181, 1, 1, "", "melt"], [182, 1, 1, "", "merge_sorted"], [183, 1, 1, "", "min"], [184, 1, 1, "", "n_chunks"], [185, 1, 1, "", "n_unique"], [186, 1, 1, "", "null_count"], [187, 1, 1, "", "partition_by"], [188, 1, 1, "", "pipe"], [189, 1, 1, "", "pivot"], [190, 1, 1, "", "product"], [191, 1, 1, "", "quantile"], [192, 1, 1, "", "rechunk"], [193, 1, 1, "", "rename"], [194, 1, 1, "", "replace"], [195, 1, 1, "", "replace_at_idx"], [196, 1, 1, "", "reverse"], [197, 1, 1, "", "row"], [198, 1, 1, "", "rows"], [199, 1, 1, "", "sample"], [200, 2, 1, "", "schema"], [201, 1, 1, "", "select"], [202, 1, 1, "", "set_sorted"], [203, 2, 1, "", "shape"], [204, 1, 1, "", "shift"], [205, 1, 1, "", "shift_and_fill"], [206, 1, 1, "", "shrink_to_fit"], [207, 1, 1, "", "slice"], [208, 1, 1, "", "sort"], [209, 1, 1, "", "std"], [210, 1, 1, "", "sum"], [211, 1, 1, "", "tail"], [212, 1, 1, "", "take_every"], [213, 1, 1, "", "to_arrow"], [214, 1, 1, "", "to_dict"], [215, 1, 1, "", "to_dicts"], [216, 1, 1, "", "to_dummies"], [217, 1, 1, "", "to_init_repr"], [218, 1, 1, "", "to_numpy"], [219, 1, 1, "", "to_pandas"], [220, 1, 1, "", "to_series"], [221, 1, 1, "", "to_struct"], [222, 1, 1, "", "top_k"], [223, 1, 1, "", "transpose"], [224, 1, 1, "", "unique"], [225, 1, 1, "", "unnest"], [226, 1, 1, "", "unstack"], [227, 1, 1, "", "update"], [228, 1, 1, "", "upsample"], [229, 1, 1, "", "var"], [230, 1, 1, "", "vstack"], [231, 2, 1, "", "width"], [232, 1, 1, "", "with_columns"], [233, 1, 1, "", "with_row_count"], [27, 1, 1, "", "write_avro"], [28, 1, 1, "", "write_csv"], [29, 1, 1, "", "write_database"], [30, 1, 1, "", "write_delta"], [31, 1, 1, "", "write_excel"], [32, 1, 1, "", "write_ipc"], [33, 1, 1, "", "write_json"], [34, 1, 1, "", "write_ndjson"], [35, 1, 1, "", "write_parquet"]], "polars.DataType": [[36, 1, 1, "", "__init__"]], "polars.Date": [[37, 1, 1, "", "__init__"]], "polars.Datetime": [[38, 1, 1, "", "__init__"]], "polars.Decimal": [[39, 1, 1, "", "__init__"]], "polars.Duration": [[40, 1, 1, "", "__init__"]], "polars.Expr": [[261, 1, 1, "", "abs"], [262, 1, 1, "", "add"], [263, 1, 1, "", "agg_groups"], [264, 1, 1, "", "alias"], [265, 1, 1, "", "all"], [266, 1, 1, "", "and_"], [267, 1, 1, "", "any"], [268, 1, 1, "", "append"], [269, 1, 1, "", "apply"], [270, 1, 1, "", "approx_unique"], [271, 1, 1, "", "arccos"], [272, 1, 1, "", "arccosh"], [273, 1, 1, "", "arcsin"], [274, 1, 1, "", "arcsinh"], [275, 1, 1, "", "arctan"], [276, 1, 1, "", "arctanh"], [277, 1, 1, "", "arg_max"], [278, 1, 1, "", "arg_min"], [279, 1, 1, "", "arg_sort"], [280, 1, 1, "", "arg_true"], [281, 1, 1, "", "arg_unique"], [286, 1, 1, "", "backward_fill"], [292, 1, 1, "", "bottom_k"], [293, 1, 1, "", "cache"], [294, 1, 1, "", "cast"], [296, 1, 1, "", "ceil"], [297, 1, 1, "", "clip"], [298, 1, 1, "", "clip_max"], [299, 1, 1, "", "clip_min"], [300, 1, 1, "", "cos"], [301, 1, 1, "", "cosh"], [302, 1, 1, "", "count"], [303, 1, 1, "", "cumcount"], [304, 1, 1, "", "cummax"], [305, 1, 1, "", "cummin"], [306, 1, 1, "", "cumprod"], [307, 1, 1, "", "cumsum"], [308, 1, 1, "", "cumulative_eval"], [309, 1, 1, "", "diff"], [310, 1, 1, "", "dot"], [311, 1, 1, "", "drop_nans"], [312, 1, 1, "", "drop_nulls"], [352, 1, 1, "", "entropy"], [353, 1, 1, "", "eq"], [354, 1, 1, "", "ewm_mean"], [355, 1, 1, "", "ewm_std"], [356, 1, 1, "", "ewm_var"], [357, 1, 1, "", "exclude"], [358, 1, 1, "", "exp"], [359, 1, 1, "", "explode"], [360, 1, 1, "", "extend_constant"], [361, 1, 1, "", "fill_nan"], [362, 1, 1, "", "fill_null"], [363, 1, 1, "", "filter"], [364, 1, 1, "", "first"], [365, 1, 1, "", "flatten"], [366, 1, 1, "", "floor"], [367, 1, 1, "", "floordiv"], [368, 1, 1, "", "forward_fill"], [369, 1, 1, "", "from_json"], [370, 1, 1, "", "ge"], [371, 1, 1, "", "gt"], [372, 1, 1, "", "hash"], [373, 1, 1, "", "head"], [374, 1, 1, "", "implode"], [375, 1, 1, "", "inspect"], [376, 1, 1, "", "interpolate"], [377, 1, 1, "", "is_between"], [378, 1, 1, "", "is_duplicated"], [379, 1, 1, "", "is_finite"], [380, 1, 1, "", "is_first"], [381, 1, 1, "", "is_in"], [382, 1, 1, "", "is_infinite"], [383, 1, 1, "", "is_nan"], [384, 1, 1, "", "is_not"], [385, 1, 1, "", "is_not_nan"], [386, 1, 1, "", "is_not_null"], [387, 1, 1, "", "is_null"], [388, 1, 1, "", "is_unique"], [389, 1, 1, "", "keep_name"], [390, 1, 1, "", "kurtosis"], [391, 1, 1, "", "last"], [392, 1, 1, "", "le"], [393, 1, 1, "", "len"], [394, 1, 1, "", "limit"], [421, 1, 1, "", "log"], [422, 1, 1, "", "log10"], [423, 1, 1, "", "log1p"], [424, 1, 1, "", "lower_bound"], [425, 1, 1, "", "lt"], [426, 1, 1, "", "map"], [427, 1, 1, "", "map_alias"], [428, 1, 1, "", "map_dict"], [429, 1, 1, "", "max"], [430, 1, 1, "", "mean"], [431, 1, 1, "", "median"], [441, 1, 1, "", "min"], [442, 1, 1, "", "mod"], [443, 1, 1, "", "mode"], [444, 1, 1, "", "mul"], [445, 1, 1, "", "n_unique"], [446, 1, 1, "", "nan_max"], [447, 1, 1, "", "nan_min"], [448, 1, 1, "", "ne"], [449, 1, 1, "", "null_count"], [450, 1, 1, "", "or_"], [451, 1, 1, "", "over"], [452, 1, 1, "", "pct_change"], [453, 1, 1, "", "pipe"], [454, 1, 1, "", "pow"], [455, 1, 1, "", "prefix"], [456, 1, 1, "", "product"], [457, 1, 1, "", "quantile"], [458, 1, 1, "", "rank"], [459, 1, 1, "", "rechunk"], [460, 1, 1, "", "reinterpret"], [461, 1, 1, "", "repeat_by"], [462, 1, 1, "", "reshape"], [463, 1, 1, "", "reverse"], [464, 1, 1, "", "rolling_apply"], [465, 1, 1, "", "rolling_max"], [466, 1, 1, "", "rolling_mean"], [467, 1, 1, "", "rolling_median"], [468, 1, 1, "", "rolling_min"], [469, 1, 1, "", "rolling_quantile"], [470, 1, 1, "", "rolling_skew"], [471, 1, 1, "", "rolling_std"], [472, 1, 1, "", "rolling_sum"], [473, 1, 1, "", "rolling_var"], [474, 1, 1, "", "round"], [475, 1, 1, "", "sample"], [476, 1, 1, "", "search_sorted"], [477, 1, 1, "", "set_sorted"], [478, 1, 1, "", "shift"], [479, 1, 1, "", "shift_and_fill"], [480, 1, 1, "", "shrink_dtype"], [481, 1, 1, "", "shuffle"], [482, 1, 1, "", "sign"], [483, 1, 1, "", "sin"], [484, 1, 1, "", "sinh"], [485, 1, 1, "", "skew"], [486, 1, 1, "", "slice"], [487, 1, 1, "", "sort"], [488, 1, 1, "", "sort_by"], [489, 1, 1, "", "sqrt"], [490, 1, 1, "", "std"], [527, 1, 1, "", "sub"], [528, 1, 1, "", "suffix"], [529, 1, 1, "", "sum"], [530, 1, 1, "", "tail"], [531, 1, 1, "", "take"], [532, 1, 1, "", "take_every"], [533, 1, 1, "", "tan"], [534, 1, 1, "", "tanh"], [535, 1, 1, "", "to_physical"], [536, 1, 1, "", "top_k"], [537, 1, 1, "", "truediv"], [538, 1, 1, "", "unique"], [539, 1, 1, "", "unique_counts"], [540, 1, 1, "", "upper_bound"], [541, 1, 1, "", "value_counts"], [542, 1, 1, "", "var"], [543, 1, 1, "", "where"], [544, 1, 1, "", "xor"]], "polars.Expr.arr": [[282, 1, 1, "", "max"], [283, 1, 1, "", "min"], [284, 1, 1, "", "sum"], [285, 1, 1, "", "unique"]], "polars.Expr.bin": [[287, 1, 1, "", "contains"], [288, 1, 1, "", "decode"], [289, 1, 1, "", "encode"], [290, 1, 1, "", "ends_with"], [291, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[295, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[313, 1, 1, "", "cast_time_unit"], [314, 1, 1, "", "combine"], [315, 1, 1, "", "convert_time_zone"], [316, 1, 1, "", "date"], [317, 1, 1, "", "datetime"], [318, 1, 1, "", "day"], [319, 1, 1, "", "days"], [320, 1, 1, "", "epoch"], [321, 1, 1, "", "hour"], [322, 1, 1, "", "hours"], [323, 1, 1, "", "is_leap_year"], [324, 1, 1, "", "iso_year"], [325, 1, 1, "", "microsecond"], [326, 1, 1, "", "microseconds"], [327, 1, 1, "", "millisecond"], [328, 1, 1, "", "milliseconds"], [329, 1, 1, "", "minute"], [330, 1, 1, "", "minutes"], [331, 1, 1, "", "month"], [332, 1, 1, "", "month_end"], [333, 1, 1, "", "month_start"], [334, 1, 1, "", "nanosecond"], [335, 1, 1, "", "nanoseconds"], [336, 1, 1, "", "offset_by"], [337, 1, 1, "", "ordinal_day"], [338, 1, 1, "", "quarter"], [339, 1, 1, "", "replace_time_zone"], [340, 1, 1, "", "round"], [341, 1, 1, "", "second"], [342, 1, 1, "", "seconds"], [343, 1, 1, "", "strftime"], [344, 1, 1, "", "time"], [345, 1, 1, "", "timestamp"], [346, 1, 1, "", "to_string"], [347, 1, 1, "", "truncate"], [348, 1, 1, "", "week"], [349, 1, 1, "", "weekday"], [350, 1, 1, "", "with_time_unit"], [351, 1, 1, "", "year"]], "polars.Expr.list": [[395, 1, 1, "", "arg_max"], [396, 1, 1, "", "arg_min"], [397, 1, 1, "", "concat"], [398, 1, 1, "", "contains"], [399, 1, 1, "", "count_match"], [400, 1, 1, "", "diff"], [401, 1, 1, "", "eval"], [402, 1, 1, "", "explode"], [403, 1, 1, "", "first"], [404, 1, 1, "", "get"], [405, 1, 1, "", "head"], [406, 1, 1, "", "join"], [407, 1, 1, "", "last"], [408, 1, 1, "", "lengths"], [409, 1, 1, "", "max"], [410, 1, 1, "", "mean"], [411, 1, 1, "", "min"], [412, 1, 1, "", "reverse"], [413, 1, 1, "", "shift"], [414, 1, 1, "", "slice"], [415, 1, 1, "", "sort"], [416, 1, 1, "", "sum"], [417, 1, 1, "", "tail"], [418, 1, 1, "", "take"], [419, 1, 1, "", "to_struct"], [420, 1, 1, "", "unique"]], "polars.Expr.meta": [[432, 1, 1, "", "eq"], [433, 1, 1, "", "has_multiple_outputs"], [434, 1, 1, "", "is_regex_projection"], [435, 1, 1, "", "ne"], [436, 1, 1, "", "output_name"], [437, 1, 1, "", "pop"], [438, 1, 1, "", "root_names"], [439, 1, 1, "", "undo_aliases"], [440, 1, 1, "", "write_json"]], "polars.Expr.str": [[491, 1, 1, "", "concat"], [492, 1, 1, "", "contains"], [493, 1, 1, "", "count_match"], [494, 1, 1, "", "decode"], [495, 1, 1, "", "encode"], [496, 1, 1, "", "ends_with"], [497, 1, 1, "", "explode"], [498, 1, 1, "", "extract"], [499, 1, 1, "", "extract_all"], [500, 1, 1, "", "json_extract"], [501, 1, 1, "", "json_path_match"], [502, 1, 1, "", "lengths"], [503, 1, 1, "", "ljust"], [504, 1, 1, "", "lstrip"], [505, 1, 1, "", "n_chars"], [506, 1, 1, "", "parse_int"], [507, 1, 1, "", "replace"], [508, 1, 1, "", "replace_all"], [509, 1, 1, "", "rjust"], [510, 1, 1, "", "rstrip"], [511, 1, 1, "", "slice"], [512, 1, 1, "", "split"], [513, 1, 1, "", "split_exact"], [514, 1, 1, "", "splitn"], [515, 1, 1, "", "starts_with"], [516, 1, 1, "", "strip"], [517, 1, 1, "", "strptime"], [518, 1, 1, "", "to_date"], [519, 1, 1, "", "to_datetime"], [520, 1, 1, "", "to_decimal"], [521, 1, 1, "", "to_lowercase"], [522, 1, 1, "", "to_time"], [523, 1, 1, "", "to_uppercase"], [524, 1, 1, "", "zfill"]], "polars.Expr.struct": [[525, 1, 1, "", "field"], [526, 1, 1, "", "rename_fields"]], "polars.Float32": [[41, 1, 1, "", "__init__"]], "polars.Float64": [[42, 1, 1, "", "__init__"]], "polars.Int16": [[43, 1, 1, "", "__init__"]], "polars.Int32": [[44, 1, 1, "", "__init__"]], "polars.Int64": [[45, 1, 1, "", "__init__"]], "polars.Int8": [[46, 1, 1, "", "__init__"]], "polars.LazyFrame": [[616, 1, 1, "", "bottom_k"], [617, 1, 1, "", "cache"], [618, 1, 1, "", "clear"], [619, 1, 1, "", "clone"], [620, 1, 1, "", "collect"], [621, 2, 1, "", "columns"], [622, 1, 1, "", "drop"], [623, 1, 1, "", "drop_nulls"], [624, 2, 1, "", "dtypes"], [625, 1, 1, "", "explain"], [626, 1, 1, "", "explode"], [627, 1, 1, "", "fetch"], [628, 1, 1, "", "fill_nan"], [629, 1, 1, "", "fill_null"], [630, 1, 1, "", "filter"], [631, 1, 1, "", "first"], [632, 1, 1, "", "from_json"], [633, 1, 1, "", "groupby"], [634, 1, 1, "", "groupby_dynamic"], [635, 1, 1, "", "groupby_rolling"], [636, 1, 1, "", "head"], [637, 1, 1, "", "inspect"], [638, 1, 1, "", "interpolate"], [639, 1, 1, "", "join"], [640, 1, 1, "", "join_asof"], [641, 1, 1, "", "last"], [642, 1, 1, "", "lazy"], [643, 1, 1, "", "limit"], [644, 1, 1, "", "map"], [645, 1, 1, "", "max"], [646, 1, 1, "", "mean"], [647, 1, 1, "", "median"], [648, 1, 1, "", "melt"], [649, 1, 1, "", "merge_sorted"], [650, 1, 1, "", "min"], [651, 1, 1, "", "null_count"], [652, 1, 1, "", "pipe"], [653, 1, 1, "", "profile"], [654, 1, 1, "", "quantile"], [655, 1, 1, "", "read_json"], [656, 1, 1, "", "rename"], [657, 1, 1, "", "reverse"], [658, 2, 1, "", "schema"], [659, 1, 1, "", "select"], [660, 1, 1, "", "set_sorted"], [661, 1, 1, "", "shift"], [662, 1, 1, "", "shift_and_fill"], [663, 1, 1, "", "show_graph"], [664, 1, 1, "", "sink_ipc"], [665, 1, 1, "", "sink_parquet"], [666, 1, 1, "", "slice"], [667, 1, 1, "", "sort"], [668, 1, 1, "", "std"], [669, 1, 1, "", "sum"], [670, 1, 1, "", "tail"], [671, 1, 1, "", "take_every"], [672, 1, 1, "", "top_k"], [673, 1, 1, "", "unique"], [674, 1, 1, "", "unnest"], [675, 1, 1, "", "update"], [676, 1, 1, "", "var"], [677, 2, 1, "", "width"], [678, 1, 1, "", "with_columns"], [679, 1, 1, "", "with_context"], [680, 1, 1, "", "with_row_count"], [681, 1, 1, "", "write_json"]], "polars.List": [[47, 1, 1, "", "__init__"]], "polars.Null": [[48, 1, 1, "", "__init__"]], "polars.Object": [[49, 1, 1, "", "__init__"]], "polars.SQLContext": [[1009, 1, 1, "", "__enter__"], [1009, 1, 1, "", "__exit__"], [1009, 1, 1, "", "__init__"], [50, 1, 1, "", "execute"], [51, 1, 1, "", "register"], [52, 1, 1, "", "register_globals"], [53, 1, 1, "", "register_many"], [54, 1, 1, "", "tables"], [55, 1, 1, "", "unregister"]], "polars.Series": [[705, 1, 1, "", "abs"], [706, 1, 1, "", "alias"], [707, 1, 1, "", "all"], [708, 1, 1, "", "any"], [709, 1, 1, "", "append"], [710, 1, 1, "", "apply"], [711, 1, 1, "", "arccos"], [712, 1, 1, "", "arccosh"], [713, 1, 1, "", "arcsin"], [714, 1, 1, "", "arcsinh"], [715, 1, 1, "", "arctan"], [716, 1, 1, "", "arctanh"], [717, 1, 1, "", "arg_max"], [718, 1, 1, "", "arg_min"], [719, 1, 1, "", "arg_sort"], [720, 1, 1, "", "arg_true"], [721, 1, 1, "", "arg_unique"], [731, 1, 1, "", "bottom_k"], [732, 1, 1, "", "cast"], [733, 3, 1, "", "cat"], [735, 1, 1, "", "ceil"], [736, 1, 1, "", "chunk_lengths"], [737, 1, 1, "", "clear"], [738, 1, 1, "", "clip"], [739, 1, 1, "", "clip_max"], [740, 1, 1, "", "clip_min"], [741, 1, 1, "", "clone"], [742, 1, 1, "", "cos"], [743, 1, 1, "", "cosh"], [744, 1, 1, "", "cummax"], [745, 1, 1, "", "cummin"], [746, 1, 1, "", "cumprod"], [747, 1, 1, "", "cumsum"], [748, 1, 1, "", "cumulative_eval"], [749, 1, 1, "", "cut"], [750, 1, 1, "", "describe"], [751, 1, 1, "", "diff"], [752, 1, 1, "", "dot"], [753, 1, 1, "", "drop_nans"], [754, 1, 1, "", "drop_nulls"], [755, 3, 1, "", "dt"], [799, 3, 1, "", "dtype"], [800, 1, 1, "", "entropy"], [801, 1, 1, "", "estimated_size"], [802, 1, 1, "", "ewm_mean"], [803, 1, 1, "", "ewm_std"], [804, 1, 1, "", "ewm_var"], [805, 1, 1, "", "exp"], [806, 1, 1, "", "explode"], [807, 1, 1, "", "extend_constant"], [808, 1, 1, "", "fill_nan"], [809, 1, 1, "", "fill_null"], [810, 1, 1, "", "filter"], [811, 3, 1, "", "flags"], [812, 1, 1, "", "floor"], [813, 1, 1, "", "get_chunks"], [814, 1, 1, "", "has_validity"], [815, 1, 1, "", "hash"], [816, 1, 1, "", "head"], [817, 1, 1, "", "hist"], [818, 1, 1, "", "implode"], [819, 3, 1, "", "inner_dtype"], [820, 1, 1, "", "interpolate"], [821, 1, 1, "", "is_between"], [822, 1, 1, "", "is_boolean"], [823, 1, 1, "", "is_duplicated"], [824, 1, 1, "", "is_empty"], [825, 1, 1, "", "is_finite"], [826, 1, 1, "", "is_first"], [827, 1, 1, "", "is_float"], [828, 1, 1, "", "is_in"], [829, 1, 1, "", "is_infinite"], [830, 1, 1, "", "is_integer"], [831, 1, 1, "", "is_nan"], [832, 1, 1, "", "is_not_nan"], [833, 1, 1, "", "is_not_null"], [834, 1, 1, "", "is_null"], [835, 1, 1, "", "is_numeric"], [836, 1, 1, "", "is_sorted"], [837, 1, 1, "", "is_temporal"], [838, 1, 1, "", "is_unique"], [839, 1, 1, "", "is_utf8"], [840, 1, 1, "", "item"], [841, 1, 1, "", "kurtosis"], [842, 1, 1, "", "len"], [843, 1, 1, "", "limit"], [844, 3, 1, "", "list"], [871, 1, 1, "", "log"], [872, 1, 1, "", "log10"], [873, 1, 1, "", "log1p"], [874, 1, 1, "", "lower_bound"], [875, 1, 1, "", "map_dict"], [876, 1, 1, "", "max"], [877, 1, 1, "", "mean"], [878, 1, 1, "", "median"], [879, 1, 1, "", "min"], [880, 1, 1, "", "mode"], [881, 1, 1, "", "n_chunks"], [882, 1, 1, "", "n_unique"], [883, 3, 1, "", "name"], [884, 1, 1, "", "nan_max"], [885, 1, 1, "", "nan_min"], [886, 1, 1, "", "new_from_index"], [887, 1, 1, "", "null_count"], [888, 1, 1, "", "pct_change"], [889, 1, 1, "", "peak_max"], [890, 1, 1, "", "peak_min"], [891, 1, 1, "", "product"], [892, 1, 1, "", "qcut"], [893, 1, 1, "", "quantile"], [894, 1, 1, "", "rank"], [895, 1, 1, "", "rechunk"], [896, 1, 1, "", "reinterpret"], [897, 1, 1, "", "rename"], [898, 1, 1, "", "reshape"], [899, 1, 1, "", "reverse"], [900, 1, 1, "", "rolling_apply"], [901, 1, 1, "", "rolling_max"], [902, 1, 1, "", "rolling_mean"], [903, 1, 1, "", "rolling_median"], [904, 1, 1, "", "rolling_min"], [905, 1, 1, "", "rolling_quantile"], [906, 1, 1, "", "rolling_skew"], [907, 1, 1, "", "rolling_std"], [908, 1, 1, "", "rolling_sum"], [909, 1, 1, "", "rolling_var"], [910, 1, 1, "", "round"], [911, 1, 1, "", "sample"], [912, 1, 1, "", "search_sorted"], [913, 1, 1, "", "series_equal"], [914, 1, 1, "", "set"], [915, 1, 1, "", "set_at_idx"], [916, 1, 1, "", "set_sorted"], [917, 3, 1, "", "shape"], [918, 1, 1, "", "shift"], [919, 1, 1, "", "shift_and_fill"], [920, 1, 1, "", "shrink_dtype"], [921, 1, 1, "", "shrink_to_fit"], [922, 1, 1, "", "shuffle"], [923, 1, 1, "", "sign"], [924, 1, 1, "", "sin"], [925, 1, 1, "", "sinh"], [926, 1, 1, "", "skew"], [927, 1, 1, "", "slice"], [928, 1, 1, "", "sort"], [929, 1, 1, "", "sqrt"], [930, 1, 1, "", "std"], [931, 3, 1, "", "str"], [971, 1, 1, "", "sum"], [972, 1, 1, "", "tail"], [973, 1, 1, "", "take"], [974, 1, 1, "", "take_every"], [975, 1, 1, "", "tan"], [976, 1, 1, "", "tanh"], [977, 3, 1, "", "time_unit"], [978, 1, 1, "", "to_arrow"], [979, 1, 1, "", "to_dummies"], [980, 1, 1, "", "to_frame"], [981, 1, 1, "", "to_init_repr"], [982, 1, 1, "", "to_list"], [983, 1, 1, "", "to_numpy"], [984, 1, 1, "", "to_pandas"], [985, 1, 1, "", "to_physical"], [986, 1, 1, "", "top_k"], [987, 1, 1, "", "unique"], [988, 1, 1, "", "unique_counts"], [989, 1, 1, "", "upper_bound"], [990, 1, 1, "", "value_counts"], [991, 1, 1, "", "var"], [992, 1, 1, "", "view"], [993, 1, 1, "", "zip_with"]], "polars.Series.arr": [[722, 1, 1, "", "max"], [723, 1, 1, "", "min"], [724, 1, 1, "", "sum"], [725, 1, 1, "", "unique"]], "polars.Series.bin": [[726, 1, 1, "", "contains"], [727, 1, 1, "", "decode"], [728, 1, 1, "", "encode"], [729, 1, 1, "", "ends_with"], [730, 1, 1, "", "starts_with"]], "polars.Series.cat": [[734, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[756, 1, 1, "", "cast_time_unit"], [757, 1, 1, "", "combine"], [758, 1, 1, "", "convert_time_zone"], [759, 1, 1, "", "date"], [760, 1, 1, "", "datetime"], [761, 1, 1, "", "day"], [762, 1, 1, "", "days"], [763, 1, 1, "", "epoch"], [764, 1, 1, "", "hour"], [765, 1, 1, "", "hours"], [766, 1, 1, "", "is_leap_year"], [767, 1, 1, "", "iso_year"], [768, 1, 1, "", "max"], [769, 1, 1, "", "mean"], [770, 1, 1, "", "median"], [771, 1, 1, "", "microsecond"], [772, 1, 1, "", "microseconds"], [773, 1, 1, "", "millisecond"], [774, 1, 1, "", "milliseconds"], [775, 1, 1, "", "min"], [776, 1, 1, "", "minute"], [777, 1, 1, "", "minutes"], [778, 1, 1, "", "month"], [779, 1, 1, "", "month_end"], [780, 1, 1, "", "month_start"], [781, 1, 1, "", "nanosecond"], [782, 1, 1, "", "nanoseconds"], [783, 1, 1, "", "offset_by"], [784, 1, 1, "", "ordinal_day"], [785, 1, 1, "", "quarter"], [786, 1, 1, "", "replace_time_zone"], [787, 1, 1, "", "round"], [788, 1, 1, "", "second"], [789, 1, 1, "", "seconds"], [790, 1, 1, "", "strftime"], [791, 1, 1, "", "time"], [792, 1, 1, "", "timestamp"], [793, 1, 1, "", "to_string"], [794, 1, 1, "", "truncate"], [795, 1, 1, "", "week"], [796, 1, 1, "", "weekday"], [797, 1, 1, "", "with_time_unit"], [798, 1, 1, "", "year"]], "polars.Series.list": [[845, 1, 1, "", "arg_max"], [846, 1, 1, "", "arg_min"], [847, 1, 1, "", "concat"], [848, 1, 1, "", "contains"], [849, 1, 1, "", "count_match"], [850, 1, 1, "", "diff"], [851, 1, 1, "", "eval"], [852, 1, 1, "", "explode"], [853, 1, 1, "", "first"], [854, 1, 1, "", "get"], [855, 1, 1, "", "head"], [856, 1, 1, "", "join"], [857, 1, 1, "", "last"], [858, 1, 1, "", "lengths"], [859, 1, 1, "", "max"], [860, 1, 1, "", "mean"], [861, 1, 1, "", "min"], [862, 1, 1, "", "reverse"], [863, 1, 1, "", "shift"], [864, 1, 1, "", "slice"], [865, 1, 1, "", "sort"], [866, 1, 1, "", "sum"], [867, 1, 1, "", "tail"], [868, 1, 1, "", "take"], [869, 1, 1, "", "to_struct"], [870, 1, 1, "", "unique"]], "polars.Series.str": [[932, 1, 1, "", "concat"], [933, 1, 1, "", "contains"], [934, 1, 1, "", "count_match"], [935, 1, 1, "", "decode"], [936, 1, 1, "", "encode"], [937, 1, 1, "", "ends_with"], [938, 1, 1, "", "explode"], [939, 1, 1, "", "extract"], [940, 1, 1, "", "extract_all"], [941, 1, 1, "", "json_extract"], [942, 1, 1, "", "json_path_match"], [943, 1, 1, "", "lengths"], [944, 1, 1, "", "ljust"], [945, 1, 1, "", "lstrip"], [946, 1, 1, "", "n_chars"], [947, 1, 1, "", "parse_int"], [948, 1, 1, "", "replace"], [949, 1, 1, "", "replace_all"], [950, 1, 1, "", "rjust"], [951, 1, 1, "", "rstrip"], [952, 1, 1, "", "slice"], [953, 1, 1, "", "split"], [954, 1, 1, "", "split_exact"], [955, 1, 1, "", "splitn"], [956, 1, 1, "", "starts_with"], [957, 1, 1, "", "strip"], [958, 1, 1, "", "strptime"], [959, 1, 1, "", "to_date"], [960, 1, 1, "", "to_datetime"], [961, 1, 1, "", "to_decimal"], [962, 1, 1, "", "to_lowercase"], [963, 1, 1, "", "to_time"], [964, 1, 1, "", "to_uppercase"], [965, 1, 1, "", "zfill"]], "polars.Series.struct": [[966, 1, 1, "", "field"], [967, 3, 1, "", "fields"], [968, 1, 1, "", "rename_fields"], [969, 3, 1, "", "schema"], [970, 1, 1, "", "unnest"]], "polars.StringCache": [[56, 1, 1, "", "__init__"]], "polars.Struct": [[57, 1, 1, "", "__init__"]], "polars.Time": [[58, 1, 1, "", "__init__"]], "polars.UInt16": [[59, 1, 1, "", "__init__"]], "polars.UInt32": [[60, 1, 1, "", "__init__"]], "polars.UInt64": [[61, 1, 1, "", "__init__"]], "polars.UInt8": [[62, 1, 1, "", "__init__"]], "polars.Unknown": [[63, 1, 1, "", "__init__"]], "polars.Utf8": [[64, 1, 1, "", "__init__"]], "polars.api": [[66, 4, 1, "", "register_dataframe_namespace"], [67, 4, 1, "", "register_expr_namespace"], [68, 4, 1, "", "register_lazyframe_namespace"], [69, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[234, 1, 1, "", "__iter__"], [235, 1, 1, "", "agg"], [236, 1, 1, "", "all"], [237, 1, 1, "", "apply"], [238, 1, 1, "", "count"], [239, 1, 1, "", "first"], [240, 1, 1, "", "head"], [241, 1, 1, "", "last"], [242, 1, 1, "", "max"], [243, 1, 1, "", "mean"], [244, 1, 1, "", "median"], [245, 1, 1, "", "min"], [246, 1, 1, "", "n_unique"], [247, 1, 1, "", "quantile"], [248, 1, 1, "", "sum"], [249, 1, 1, "", "tail"]], "polars.exceptions": [[76, 5, 1, "", "ArrowError"], [77, 5, 1, "", "ColumnNotFoundError"], [78, 5, 1, "", "ComputeError"], [79, 5, 1, "", "DuplicateError"], [80, 5, 1, "", "InvalidOperationError"], [81, 5, 1, "", "NoDataError"], [82, 5, 1, "", "NoRowsReturnedError"], [83, 5, 1, "", "PolarsPanicError"], [84, 5, 1, "", "RowsError"], [85, 5, 1, "", "SchemaError"], [86, 5, 1, "", "SchemaFieldNotFoundError"], [87, 5, 1, "", "ShapeError"], [88, 5, 1, "", "StructFieldNotFoundError"], [89, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[99, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[682, 1, 1, "", "agg"], [683, 1, 1, "", "all"], [684, 1, 1, "", "apply"], [685, 1, 1, "", "count"], [686, 1, 1, "", "first"], [687, 1, 1, "", "head"], [688, 1, 1, "", "last"], [689, 1, 1, "", "max"], [690, 1, 1, "", "mean"], [691, 1, 1, "", "median"], [692, 1, 1, "", "min"], [693, 1, 1, "", "n_unique"], [694, 1, 1, "", "quantile"], [695, 1, 1, "", "sum"], [696, 1, 1, "", "tail"]], "polars.selectors": [[703, 4, 1, "", "all"], [703, 4, 1, "", "by_dtype"], [703, 4, 1, "", "by_name"], [703, 4, 1, "", "contains"], [703, 4, 1, "", "datetime"], [703, 4, 1, "", "ends_with"], [703, 4, 1, "", "first"], [703, 4, 1, "", "float"], [703, 4, 1, "", "integer"], [703, 4, 1, "", "last"], [703, 4, 1, "", "matches"], [703, 4, 1, "", "numeric"], [703, 4, 1, "", "starts_with"], [703, 4, 1, "", "string"], [703, 4, 1, "", "temporal"]], "polars.testing": [[120, 4, 1, "", "assert_frame_equal"], [121, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[122, 0, 1, "", "column"], [123, 4, 1, "", "columns"], [124, 4, 1, "", "create_list_strategy"], [125, 4, 1, "", "dataframes"], [126, 4, 1, "", "load_profile"], [127, 4, 1, "", "series"], [128, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[122, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"extend": [1, 149], "api": [1, 66, 67, 68, 69, 613], "provid": 1, "new": 1, "function": [1, 133, 601, 612, 703], "avail": 1, "registr": 1, "exampl": [1, 703, 1010], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 1010], "arrai": [2, 595, 994], "binari": [3, 596, 607, 996], "boolean": [4, 597, 997], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 133], "activate_decim": 6, "load": [7, 133], "restore_default": 8, "save": [9, 133], "set_ascii_t": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_streaming_chunk_s": 13, "set_tbl_cell_align": 14, "set_tbl_col": 15, "set_tbl_column_data_type_inlin": 16, "set_tbl_dataframe_shape_below": 17, "set_tbl_format": 18, "set_tbl_hide_column_data_typ": 19, "set_tbl_hide_column_nam": 20, "set_tbl_hide_dataframe_shap": 21, "set_tbl_hide_dtype_separ": 22, "set_tbl_row": 23, "set_tbl_width_char": 24, "set_verbos": 25, "state": [26, 133], "datafram": [27, 28, 29, 30, 31, 32, 33, 34, 35, 125, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255], "write_avro": 27, "write_csv": 28, "write_databas": 29, "write_delta": 30, "write_excel": 31, "write_ipc": 32, "write_json": [33, 440, 681], "write_ndjson": 34, "write_parquet": 35, "datatyp": 36, "date": [37, 316, 562, 759], "datetim": [38, 317, 563, 760], "decim": 39, "durat": [40, 564], "float32": 41, "float64": 42, "int16": 43, "int32": 44, "int64": 45, "int8": 46, "list": [47, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 603, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 1003], "null": 48, "object": 49, "sqlcontext": [50, 51, 52, 53, 54, 55], "execut": 50, "regist": 51, "register_glob": 52, "register_mani": 53, "tabl": 54, "unregist": 55, "stringcach": [56, 612], "struct": [57, 525, 526, 589, 609, 966, 967, 968, 969, 970, 1007], "time": [58, 344, 592, 791], "uint16": 59, "uint32": 60, "uint64": 61, "uint8": 62, "unknown": 63, "utf8": 64, "align_fram": 65, "register_dataframe_namespac": 66, "register_expr_namespac": 67, "register_lazyframe_namespac": 68, "register_series_namespac": 69, "arg_wher": 70, "build_info": 71, "collect_al": 72, "concat": [73, 397, 491, 847, 932], "date_rang": 74, "enable_string_cach": 75, "except": [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 259], "arrowerror": 76, "columnnotfounderror": 77, "computeerror": 78, "duplicateerror": 79, "invalidoperationerror": 80, "nodataerror": 81, "norowsreturnederror": 82, "polarspanicerror": 83, "rowserror": 84, "schemaerror": 85, "schemafieldnotfounderror": 86, "shapeerror": 87, "structfieldnotfounderror": 88, "toomanyrowsreturnederror": 89, "from_arrow": 90, "from_datafram": 91, "from_dict": [92, 93], "from_numpi": 94, "from_panda": 95, "from_record": 96, "from_repr": 97, "get_index_typ": 98, "io": 99, "csv": [99, 614], "batched_read": 99, "batchedcsvread": [99, 614], "next_batch": 99, "ones": 100, "read_avro": 101, "read_csv": 102, "read_csv_batch": 103, "read_databas": 104, "read_delta": 105, "read_excel": 106, "read_ipc": 107, "read_ipc_schema": 108, "read_json": [109, 655], "read_ndjson": 110, "read_parquet": 111, "read_parquet_schema": 112, "scan_csv": 113, "scan_delta": 114, "scan_ipc": 115, "scan_ndjson": 116, "scan_parquet": 117, "scan_pyarrow_dataset": 118, "show_vers": 119, "test": [120, 121, 122, 123, 124, 125, 126, 127, 128, 1010], "assert_frame_equ": 120, "assert_series_equ": 121, "parametr": [122, 123, 124, 125, 126, 127, 128, 1010], "column": [122, 123, 140, 599, 621], "create_list_strategi": 124, "load_profil": 126, "seri": [127, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 1002], "set_profil": 128, "threadpool_s": 129, "time_rang": 130, "using_string_cach": 131, "zero": 132, "option": 133, "current": 133, "us": 133, "context": 133, "manag": 133, "decor": 133, "aggreg": [134, 260, 615, 704], "__dataframe__": 135, "appli": [136, 237, 269, 547, 684, 710], "bottom_k": [137, 292, 616, 731], "clear": [138, 618, 737], "clone": [139, 619, 741], "corr": [141, 556], "describ": [142, 750], "drop": [143, 622], "drop_in_plac": 144, "drop_nul": [145, 312, 623, 754], "dtype": [146, 624, 799], "estimated_s": [147, 801], "explod": [148, 359, 402, 497, 626, 806, 852, 938], "fill_nan": [150, 361, 628, 808], "fill_nul": [151, 362, 629, 809], "filter": [152, 363, 630, 810], "find_idx_by_nam": 153, "fold": [154, 568], "frame_equ": 155, "get_column": [156, 157], "glimps": 158, "groupbi": [159, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 254, 633, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699], "groupby_dynam": [160, 634], "groupby_rol": [161, 635], "hash_row": 162, "head": [163, 240, 373, 405, 572, 636, 687, 816, 855], "height": 164, "hstack": 165, "insert_at_idx": 166, "interpol": [167, 376, 638, 820], "is_dupl": [168, 378, 823], "is_empti": [169, 824], "is_uniqu": [170, 388, 838], "item": [171, 840], "iter_row": 172, "iter_slic": 173, "join": [174, 406, 639, 856], "join_asof": [175, 640], "lazi": [176, 612, 642], "limit": [177, 394, 643, 843], "max": [178, 242, 282, 409, 429, 576, 645, 689, 722, 768, 859, 876], "mean": [179, 243, 410, 430, 577, 646, 690, 769, 860, 877], "median": [180, 244, 431, 578, 647, 691, 770, 878], "melt": [181, 648], "merge_sort": [182, 649], "min": [183, 245, 283, 411, 441, 579, 650, 692, 723, 775, 861, 879], "n_chunk": [184, 881], "n_uniqu": [185, 246, 445, 580, 693, 882], "null_count": [186, 449, 651, 887], "partition_bi": 187, "pipe": [188, 453, 652], "pivot": 189, "product": [190, 456, 891], "quantil": [191, 247, 457, 581, 654, 694, 893], "rechunk": [192, 459, 895], "renam": [193, 656, 897], "replac": [194, 507, 948], "replace_at_idx": 195, "revers": [196, 412, 463, 657, 862, 899], "row": [197, 198], "sampl": [199, 475, 911], "schema": [200, 658, 969], "select": [201, 257, 586, 606, 659, 702, 1005], "set_sort": [202, 477, 660, 916], "shape": [203, 917], "shift": [204, 413, 478, 661, 863, 918], "shift_and_fil": [205, 479, 662, 919], "shrink_to_fit": [206, 921], "slice": [207, 414, 486, 511, 666, 864, 927, 952], "sort": [208, 415, 487, 667, 865, 928], "std": [209, 490, 588, 668, 930], "sum": [210, 248, 284, 416, 529, 590, 669, 695, 724, 866, 971], "tail": [211, 249, 417, 530, 591, 670, 696, 867, 972], "take_everi": [212, 532, 671, 974], "to_arrow": [213, 978], "to_dict": [214, 215], "to_dummi": [216, 979], "to_init_repr": [217, 981], "to_numpi": [218, 983], "to_panda": [219, 984], "to_seri": 220, "to_struct": [221, 419, 869], "top_k": [222, 536, 672, 986], "transpos": 223, "uniqu": [224, 285, 420, 538, 673, 725, 870, 987], "unnest": [225, 674, 970], "unstack": 226, "updat": [227, 675], "upsampl": 228, "var": [229, 542, 593, 676, 991], "vstack": 230, "width": [231, 677], "with_column": [232, 678], "with_row_count": [233, 680], "__iter__": 234, "agg": [235, 682], "all": [236, 265, 545, 683, 707], "count": [238, 302, 557, 685], "first": [239, 364, 403, 567, 631, 686, 853], "last": [241, 391, 407, 641, 688, 857], "attribut": [250, 697, 995], "comput": [251, 600, 999], "descript": [252, 698, 1000], "export": [253, 1001], "miscellan": [256, 605, 612, 701, 1004], "manipul": [257, 606, 702, 1005], "data": 258, "type": 258, "numer": [258, 607], "tempor": [258, 610, 1008], "nest": 258, "other": 258, "expr": [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544], "ab": [261, 705], "add": 262, "agg_group": 263, "alia": [264, 706], "and_": 266, "ani": [267, 546, 708], "append": [268, 709], "approx_uniqu": [270, 548], "arcco": [271, 711], "arccosh": [272, 712], "arcsin": [273, 713], "arcsinh": [274, 714], "arctan": [275, 715], "arctanh": [276, 716], "arg_max": [277, 395, 717, 845], "arg_min": [278, 396, 718, 846], "arg_sort": [279, 719], "arg_tru": [280, 720], "arg_uniqu": [281, 721], "arr": [282, 283, 284, 285, 722, 723, 724, 725], "backward_fil": 286, "bin": [287, 288, 289, 290, 291, 726, 727, 728, 729, 730], "contain": [287, 398, 492, 726, 848, 933], "decod": [288, 494, 727, 935], "encod": [289, 495, 728, 936], "ends_with": [290, 496, 729, 937], "starts_with": [291, 515, 730, 956], "cach": [293, 617], "cast": [294, 732], "cat": [295, 733, 734], "set_ord": [295, 734], "ceil": [296, 735], "clip": [297, 738], "clip_max": [298, 739], "clip_min": [299, 740], "co": [300, 742], "cosh": [301, 743], "cumcount": 303, "cummax": [304, 744], "cummin": [305, 745], "cumprod": [306, 746], "cumsum": [307, 561, 747], "cumulative_ev": [308, 748], "diff": [309, 400, 751, 850], "dot": [310, 752], "drop_nan": [311, 753], "dt": [313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798], "cast_time_unit": [313, 756], "combin": [314, 757], "convert_time_zon": [315, 758], "dai": [318, 319, 761, 762], "epoch": [320, 763], "hour": [321, 322, 764, 765], "is_leap_year": [323, 766], "iso_year": [324, 767], "microsecond": [325, 326, 771, 772], "millisecond": [327, 328, 773, 774], "minut": [329, 330, 776, 777], "month": [331, 778], "month_end": [332, 779], "month_start": [333, 780], "nanosecond": [334, 335, 781, 782], "offset_bi": [336, 783], "ordinal_dai": [337, 784], "quarter": [338, 785], "replace_time_zon": [339, 786], "round": [340, 474, 787, 910], "second": [341, 342, 788, 789], "strftime": [343, 790], "timestamp": [345, 792], "to_str": [346, 793], "truncat": [347, 794], "week": [348, 795], "weekdai": [349, 796], "with_time_unit": [350, 797], "year": [351, 798], "entropi": [352, 800], "eq": [353, 432], "ewm_mean": [354, 802], "ewm_std": [355, 803], "ewm_var": [356, 804], "exclud": [357, 566], "exp": [358, 805], "extend_const": [360, 807], "flatten": 365, "floor": [366, 812], "floordiv": 367, "forward_fil": 368, "from_json": [369, 632], "ge": 370, "gt": 371, "hash": [372, 815], "implod": [374, 573, 818], "inspect": [375, 637], "is_between": [377, 821], "is_finit": [379, 825], "is_first": [380, 826], "is_in": [381, 828], "is_infinit": [382, 829], "is_nan": [383, 831], "is_not": 384, "is_not_nan": [385, 832], "is_not_nul": [386, 833], "is_nul": [387, 834], "keep_nam": 389, "kurtosi": [390, 841], "le": 392, "len": [393, 842], "count_match": [399, 493, 849, 934], "eval": [401, 851], "get": [404, 854], "length": [408, 502, 858, 943], "take": [418, 531, 868, 973], "log": [421, 871], "log10": [422, 872], "log1p": [423, 873], "lower_bound": [424, 874], "lt": 425, "map": [426, 575, 644], "map_alia": 427, "map_dict": [428, 875], "meta": [432, 433, 434, 435, 436, 437, 438, 439, 440, 604], "has_multiple_output": 433, "is_regex_project": 434, "ne": [435, 448], "output_nam": 436, "pop": 437, "root_nam": 438, "undo_alias": 439, "mod": 442, "mode": [443, 880], "mul": 444, "nan_max": [446, 884], "nan_min": [447, 885], "or_": 450, "over": 451, "pct_chang": [452, 888], "pow": 454, "prefix": 455, "rank": [458, 894], "reinterpret": [460, 896], "repeat_bi": 461, "reshap": [462, 898], "rolling_appli": [464, 900], "rolling_max": [465, 901], "rolling_mean": [466, 902], "rolling_median": [467, 903], "rolling_min": [468, 904], "rolling_quantil": [469, 905], "rolling_skew": [470, 906], "rolling_std": [471, 907], "rolling_sum": [472, 908], "rolling_var": [473, 909], "search_sort": [476, 912], "shrink_dtyp": [480, 920], "shuffl": [481, 922], "sign": [482, 923], "sin": [483, 924], "sinh": [484, 925], "skew": [485, 926], "sort_bi": 488, "sqrt": [489, 929], "str": [491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965], "extract": [498, 939], "extract_al": [499, 940], "json_extract": [500, 941], "json_path_match": [501, 942], "ljust": [503, 944], "lstrip": [504, 945], "n_char": [505, 946], "parse_int": [506, 947], "replace_al": [508, 949], "rjust": [509, 950], "rstrip": [510, 951], "split": [512, 953], "split_exact": [513, 954], "splitn": [514, 955], "strip": [516, 957], "strptime": [517, 958], "to_dat": [518, 959], "to_datetim": [519, 960], "to_decim": [520, 961], "to_lowercas": [521, 962], "to_tim": [522, 963], "to_uppercas": [523, 964], "zfill": [524, 965], "field": [525, 966, 967], "rename_field": [526, 968], "sub": 527, "suffix": 528, "tan": [533, 975], "tanh": [534, 976], "to_phys": [535, 985], "truediv": 537, "unique_count": [539, 988], "upper_bound": [540, 989], "value_count": [541, 990], "where": 543, "xor": 544, "arang": 549, "arg_sort_bi": 550, "avg": 551, "coalesc": 552, "col": 553, "concat_list": 554, "concat_str": 555, "cov": 558, "cumfold": 559, "cumreduc": 560, "element": 565, "format": 569, "from_epoch": 570, "group": 571, "lit": 574, "reduc": 582, "repeat": 583, "rolling_corr": 584, "rolling_cov": 585, "sql_expr": 587, "when": 594, "categori": [598, 998], "name": [599, 883], "express": 602, "oper": [607, 703], "conjunct": 607, "comparison": 607, "string": [608, 1006], "window": 611, "convers": 612, "eager": 612, "parallel": 612, "refer": 613, "input": 614, "output": 614, "feather": 614, "ipc": 614, "parquet": 614, "databas": 614, "json": 614, "avro": 614, "excel": 614, "delta": 614, "lake": 614, "dataset": 614, "lazyfram": [616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700], "collect": 620, "explain": 625, "fetch": 627, "profil": [653, 1010], "show_graph": 663, "sink_ipc": 664, "sink_parquet": 665, "with_context": 679, "lazygroupbi": [682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696], "read": 701, "write": 701, "logic": 701, "plan": 701, "selector": 703, "import": 703, "set": [703, 914], "chunk_length": 736, "cut": 749, "flag": 811, "get_chunk": 813, "has_valid": 814, "hist": 817, "inner_dtyp": 819, "is_boolean": 822, "is_float": 827, "is_integ": 830, "is_numer": 835, "is_sort": 836, "is_tempor": 837, "is_utf8": 839, "new_from_index": 886, "peak_max": 889, "peak_min": 890, "qcut": 892, "series_equ": 913, "set_at_idx": 915, "time_unit": 977, "to_fram": 980, "to_list": 982, "view": 992, "zip_with": 993, "sql": 1009, "method": 1009, "assert": 1010, "primit": 1010, "strategi": 1010, "helper": 1010, "util": 1011}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.exceptions.ColumnNotFoundError": [[77, "polars-exceptions-columnnotfounderror"]], "polars.testing.parametric.dataframes": [[125, "polars-testing-parametric-dataframes"]], "polars.exceptions.RowsError": [[84, "polars-exceptions-rowserror"]], "polars.enable_string_cache": [[75, "polars-enable-string-cache"]], "polars.concat": [[73, "polars-concat"]], "polars.DataFrame.__dataframe__": [[135, "polars-dataframe-dataframe"]], "polars.scan_pyarrow_dataset": [[118, "polars-scan-pyarrow-dataset"]], "polars.testing.parametric.set_profile": [[128, "polars-testing-parametric-set-profile"]], "polars.read_json": [[109, "polars-read-json"]], "Aggregation": [[134, "aggregation"], [704, "aggregation"], [615, "aggregation"], [260, "aggregation"]], "polars.from_dict": [[92, "polars-from-dict"]], "polars.time_range": [[130, "polars-time-range"]], "polars.from_records": [[96, "polars-from-records"]], "polars.DataFrame.bottom_k": [[137, "polars-dataframe-bottom-k"]], "polars.read_delta": [[105, "polars-read-delta"]], "polars.scan_parquet": [[117, "polars-scan-parquet"]], "polars.using_string_cache": [[131, "polars-using-string-cache"]], "polars.collect_all": [[72, "polars-collect-all"]], "polars.testing.parametric.create_list_strategy": [[124, "polars-testing-parametric-create-list-strategy"]], "polars.read_parquet_schema": [[112, "polars-read-parquet-schema"]], "polars.testing.assert_series_equal": [[121, "polars-testing-assert-series-equal"]], "polars.DataFrame.clone": [[139, "polars-dataframe-clone"]], "polars.DataFrame.columns": [[140, "polars-dataframe-columns"]], "polars.DataFrame.clear": [[138, "polars-dataframe-clear"]], "polars.exceptions.StructFieldNotFoundError": [[88, "polars-exceptions-structfieldnotfounderror"]], "polars.ones": [[100, "polars-ones"]], "polars.from_arrow": [[90, "polars-from-arrow"]], "polars.read_ipc": [[107, "polars-read-ipc"]], "polars.read_ndjson": [[110, "polars-read-ndjson"]], "polars.read_csv": [[102, "polars-read-csv"]], "polars.read_database": [[104, "polars-read-database"]], "polars.zeros": [[132, "polars-zeros"]], "polars.scan_delta": [[114, "polars-scan-delta"]], "polars.DataFrame.corr": [[141, "polars-dataframe-corr"]], "polars.testing.assert_frame_equal": [[120, "polars-testing-assert-frame-equal"]], "polars.testing.parametric.column": [[122, "polars-testing-parametric-column"]], "polars.exceptions.SchemaError": [[85, "polars-exceptions-schemaerror"]], "polars.exceptions.NoDataError": [[81, "polars-exceptions-nodataerror"]], "polars.from_pandas": [[95, "polars-from-pandas"]], "polars.from_repr": [[97, "polars-from-repr"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[99, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.exceptions.TooManyRowsReturnedError": [[89, "polars-exceptions-toomanyrowsreturnederror"]], "polars.testing.parametric.load_profile": [[126, "polars-testing-parametric-load-profile"]], "polars.build_info": [[71, "polars-build-info"]], "polars.exceptions.PolarsPanicError": [[83, "polars-exceptions-polarspanicerror"]], "polars.read_parquet": [[111, "polars-read-parquet"]], "polars.show_versions": [[119, "polars-show-versions"]], "polars.exceptions.ShapeError": [[87, "polars-exceptions-shapeerror"]], "polars.from_dicts": [[93, "polars-from-dicts"]], "polars.exceptions.SchemaFieldNotFoundError": [[86, "polars-exceptions-schemafieldnotfounderror"]], "polars.from_numpy": [[94, "polars-from-numpy"]], "polars.read_ipc_schema": [[108, "polars-read-ipc-schema"]], "polars.date_range": [[74, "polars-date-range"]], "polars.exceptions.InvalidOperationError": [[80, "polars-exceptions-invalidoperationerror"]], "polars.DataFrame.apply": [[136, "polars-dataframe-apply"]], "polars.read_avro": [[101, "polars-read-avro"]], "polars.read_csv_batched": [[103, "polars-read-csv-batched"]], "polars.get_index_type": [[98, "polars-get-index-type"]], "polars.exceptions.DuplicateError": [[79, "polars-exceptions-duplicateerror"]], "polars.exceptions.ArrowError": [[76, "polars-exceptions-arrowerror"]], "polars.scan_csv": [[113, "polars-scan-csv"]], "polars.exceptions.NoRowsReturnedError": [[82, "polars-exceptions-norowsreturnederror"]], "polars.exceptions.ComputeError": [[78, "polars-exceptions-computeerror"]], "polars.testing.parametric.series": [[127, "polars-testing-parametric-series"]], "polars.read_excel": [[106, "polars-read-excel"]], "Config": [[133, "config"]], "Config options": [[133, "config-options"]], "Config load, save, and current state": [[133, "config-load-save-and-current-state"]], "Use as a context manager": [[133, "use-as-a-context-manager"]], "Use as a function decorator": [[133, "use-as-a-function-decorator"]], "polars.scan_ipc": [[115, "polars-scan-ipc"]], "polars.threadpool_size": [[129, "polars-threadpool-size"]], "polars.testing.parametric.columns": [[123, "polars-testing-parametric-columns"]], "polars.scan_ndjson": [[116, "polars-scan-ndjson"]], "polars.from_dataframe": [[91, "polars-from-dataframe"]], "polars.DataFrame.write_avro": [[27, "polars-dataframe-write-avro"]], "polars.Config.restore_defaults": [[8, "polars-config-restore-defaults"]], "polars.DataFrame.write_ndjson": [[34, "polars-dataframe-write-ndjson"]], "polars.Config.save": [[9, "polars-config-save"]], "polars.StringCache": [[56, "polars-stringcache"]], "polars.Config.set_tbl_hide_dtype_separator": [[22, "polars-config-set-tbl-hide-dtype-separator"]], "polars.List": [[47, "polars-list"]], "polars.Int8": [[46, "polars-int8"]], "polars.Float32": [[41, "polars-float32"]], "polars.UInt16": [[59, "polars-uint16"]], "polars.DataFrame.write_csv": [[28, "polars-dataframe-write-csv"]], "polars.Config.set_tbl_hide_dataframe_shape": [[21, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_hide_column_data_types": [[19, "polars-config-set-tbl-hide-column-data-types"]], "polars.Decimal": [[39, "polars-decimal"]], "polars.Datetime": [[38, "polars-datetime"]], "polars.SQLContext.execute": [[50, "polars-sqlcontext-execute"]], "polars.SQLContext.register_many": [[53, "polars-sqlcontext-register-many"]], "polars.Duration": [[40, "polars-duration"]], "polars.Utf8": [[64, "polars-utf8"]], "polars.Date": [[37, "polars-date"]], "polars.align_frames": [[65, "polars-align-frames"]], "polars.api.register_lazyframe_namespace": [[68, "polars-api-register-lazyframe-namespace"]], "polars.Config.set_ascii_tables": [[10, "polars-config-set-ascii-tables"]], "polars.api.register_expr_namespace": [[67, "polars-api-register-expr-namespace"]], "polars.Config.set_tbl_column_data_type_inline": [[16, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_verbose": [[25, "polars-config-set-verbose"]], "polars.api.register_dataframe_namespace": [[66, "polars-api-register-dataframe-namespace"]], "polars.arg_where": [[70, "polars-arg-where"]], "polars.Config.set_tbl_formatting": [[18, "polars-config-set-tbl-formatting"]], "polars.SQLContext.tables": [[54, "polars-sqlcontext-tables"]], "polars.UInt32": [[60, "polars-uint32"]], "polars.Config.set_tbl_dataframe_shape_below": [[17, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Unknown": [[63, "polars-unknown"]], "polars.DataFrame.write_ipc": [[32, "polars-dataframe-write-ipc"]], "polars.api.register_series_namespace": [[69, "polars-api-register-series-namespace"]], "polars.Binary": [[3, "polars-binary"]], "polars.Int64": [[45, "polars-int64"]], "polars.Struct": [[57, "polars-struct"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.Int32": [[44, "polars-int32"]], "polars.SQLContext.unregister": [[55, "polars-sqlcontext-unregister"]], "polars.SQLContext.register_globals": [[52, "polars-sqlcontext-register-globals"]], "polars.UInt64": [[61, "polars-uint64"]], "polars.Array": [[2, "polars-array"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.Time": [[58, "polars-time"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1010, "examples"], [703, "examples"]], "polars.Config.set_tbl_hide_column_names": [[20, "polars-config-set-tbl-hide-column-names"]], "polars.Config.state": [[26, "polars-config-state"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Config.set_tbl_width_chars": [[24, "polars-config-set-tbl-width-chars"]], "polars.DataFrame.write_excel": [[31, "polars-dataframe-write-excel"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Null": [[48, "polars-null"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.SQLContext.register": [[51, "polars-sqlcontext-register"]], "polars.DataFrame.write_parquet": [[35, "polars-dataframe-write-parquet"]], "polars.Float64": [[42, "polars-float64"]], "polars.DataFrame.write_delta": [[30, "polars-dataframe-write-delta"]], "polars.Int16": [[43, "polars-int16"]], "polars.DataFrame.write_json": [[33, "polars-dataframe-write-json"]], "polars.Config.set_tbl_cell_alignment": [[14, "polars-config-set-tbl-cell-alignment"]], "polars.DataType": [[36, "polars-datatype"]], "polars.Config.set_streaming_chunk_size": [[13, "polars-config-set-streaming-chunk-size"]], "polars.DataFrame.write_database": [[29, "polars-dataframe-write-database"]], "polars.UInt8": [[62, "polars-uint8"]], "polars.Config.set_tbl_cols": [[15, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_rows": [[23, "polars-config-set-tbl-rows"]], "polars.Object": [[49, "polars-object"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.Series.str.split": [[953, "polars-series-str-split"]], "polars.Series.to_numpy": [[983, "polars-series-to-numpy"]], "polars.Series.take": [[973, "polars-series-take"]], "polars.Series.std": [[930, "polars-series-std"]], "polars.Series.sign": [[923, "polars-series-sign"]], "polars.Series.to_init_repr": [[981, "polars-series-to-init-repr"]], "polars.Series.to_list": [[982, "polars-series-to-list"]], "polars.Series.str.to_date": [[959, "polars-series-str-to-date"]], "polars.Series.struct.schema": [[969, "polars-series-struct-schema"]], "polars.Series.sort": [[928, "polars-series-sort"]], "polars.Series.str.to_time": [[963, "polars-series-str-to-time"]], "polars.Series.to_frame": [[980, "polars-series-to-frame"]], "polars.Series.zip_with": [[993, "polars-series-zip-with"]], "polars.Series.str.ends_with": [[937, "polars-series-str-ends-with"]], "polars.Series.str.contains": [[933, "polars-series-str-contains"]], "polars.Series.str.concat": [[932, "polars-series-str-concat"]], "polars.Series.to_arrow": [[978, "polars-series-to-arrow"]], "polars.Series.slice": [[927, "polars-series-slice"]], "polars.Series.unique": [[987, "polars-series-unique"]], "polars.Series.time_unit": [[977, "polars-series-time-unit"]], "polars.Series.tail": [[972, "polars-series-tail"]], "polars.Series.to_physical": [[985, "polars-series-to-physical"]], "polars.Series.view": [[992, "polars-series-view"]], "polars.Series.str.json_extract": [[941, "polars-series-str-json-extract"]], "polars.Series.top_k": [[986, "polars-series-top-k"]], "polars.Series.str.decode": [[935, "polars-series-str-decode"]], "polars.Series.sqrt": [[929, "polars-series-sqrt"]], "polars.Series.str.rjust": [[950, "polars-series-str-rjust"]], "polars.Series.str.parse_int": [[947, "polars-series-str-parse-int"]], "polars.Series.str.to_datetime": [[960, "polars-series-str-to-datetime"]], "polars.Series.str.zfill": [[965, "polars-series-str-zfill"]], "polars.Series.str.explode": [[938, "polars-series-str-explode"]], "polars.Series.tan": [[975, "polars-series-tan"]], "polars.Series.str.strip": [[957, "polars-series-str-strip"]], "polars.Series.sinh": [[925, "polars-series-sinh"]], "polars.Series.str.extract": [[939, "polars-series-str-extract"]], "polars.Series.str.ljust": [[944, "polars-series-str-ljust"]], "polars.Series.str.to_uppercase": [[964, "polars-series-str-to-uppercase"]], "polars.Series.struct.fields": [[967, "polars-series-struct-fields"]], "polars.Series.str": [[931, "polars-series-str"]], "polars.Series.str.rstrip": [[951, "polars-series-str-rstrip"]], "polars.Series.str.count_match": [[934, "polars-series-str-count-match"]], "polars.Series.str.split_exact": [[954, "polars-series-str-split-exact"]], "polars.Series.str.strptime": [[958, "polars-series-str-strptime"]], "polars.Series.str.slice": [[952, "polars-series-str-slice"]], "polars.Series.str.to_lowercase": [[962, "polars-series-str-to-lowercase"]], "polars.Series.struct.unnest": [[970, "polars-series-struct-unnest"]], "polars.Series.str.n_chars": [[946, "polars-series-str-n-chars"]], "polars.Series.str.lstrip": [[945, "polars-series-str-lstrip"]], "polars.Series.str.starts_with": [[956, "polars-series-str-starts-with"]], "polars.Series.str.replace": [[948, "polars-series-str-replace"]], "polars.Series.take_every": [[974, "polars-series-take-every"]], "polars.Series.sin": [[924, "polars-series-sin"]], "polars.Series.skew": [[926, "polars-series-skew"]], "polars.Series.tanh": [[976, "polars-series-tanh"]], "polars.Series.value_counts": [[990, "polars-series-value-counts"]], "polars.Series.to_pandas": [[984, "polars-series-to-pandas"]], "polars.Series.str.extract_all": [[940, "polars-series-str-extract-all"]], "polars.Series.unique_counts": [[988, "polars-series-unique-counts"]], "polars.Series.str.to_decimal": [[961, "polars-series-str-to-decimal"]], "polars.Series.upper_bound": [[989, "polars-series-upper-bound"]], "polars.Series.str.json_path_match": [[942, "polars-series-str-json-path-match"]], "polars.Series.str.encode": [[936, "polars-series-str-encode"]], "polars.Series.struct.rename_fields": [[968, "polars-series-struct-rename-fields"]], "polars.Series.str.lengths": [[943, "polars-series-str-lengths"]], "polars.Series.sum": [[971, "polars-series-sum"]], "polars.Series.var": [[991, "polars-series-var"]], "polars.Series.str.splitn": [[955, "polars-series-str-splitn"]], "polars.Series.str.replace_all": [[949, "polars-series-str-replace-all"]], "polars.Series.to_dummies": [[979, "polars-series-to-dummies"]], "polars.Series.struct.field": [[966, "polars-series-struct-field"]], "polars.Series.shuffle": [[922, "polars-series-shuffle"]], "polars.Series.peak_min": [[890, "polars-series-peak-min"]], "polars.Series.max": [[876, "polars-series-max"]], "polars.Series.list.reverse": [[862, "polars-series-list-reverse"]], "polars.Series.list.first": [[853, "polars-series-list-first"]], "polars.Series.log": [[871, "polars-series-log"]], "polars.Series.min": [[879, "polars-series-min"]], "polars.Series.new_from_index": [[886, "polars-series-new-from-index"]], "polars.Series.pct_change": [[888, "polars-series-pct-change"]], "polars.Series.list.get": [[854, "polars-series-list-get"]], "polars.Series.reverse": [[899, "polars-series-reverse"]], "polars.Series.set_sorted": [[916, "polars-series-set-sorted"]], "polars.Series.rolling_var": [[909, "polars-series-rolling-var"]], "polars.Series.shift": [[918, "polars-series-shift"]], "polars.Series.list.lengths": [[858, "polars-series-list-lengths"]], "polars.Series.null_count": [[887, "polars-series-null-count"]], "polars.Series.rolling_std": [[907, "polars-series-rolling-std"]], "polars.Series.map_dict": [[875, "polars-series-map-dict"]], "polars.Series.rolling_sum": [[908, "polars-series-rolling-sum"]], "polars.Series.shrink_dtype": [[920, "polars-series-shrink-dtype"]], "polars.Series.rolling_min": [[904, "polars-series-rolling-min"]], "polars.Series.log10": [[872, "polars-series-log10"]], "polars.Series.list.last": [[857, "polars-series-list-last"]], "polars.Series.reinterpret": [[896, "polars-series-reinterpret"]], "polars.Series.mean": [[877, "polars-series-mean"]], "polars.Series.quantile": [[893, "polars-series-quantile"]], "polars.Series.rank": [[894, "polars-series-rank"]], "polars.Series.name": [[883, "polars-series-name"]], "polars.Series.list.head": [[855, "polars-series-list-head"]], "polars.Series.rechunk": [[895, "polars-series-rechunk"]], "polars.Series.list.take": [[868, "polars-series-list-take"]], "polars.Series.reshape": [[898, "polars-series-reshape"]], "polars.Series.rolling_median": [[903, "polars-series-rolling-median"]], "polars.Series.rolling_quantile": [[905, "polars-series-rolling-quantile"]], "polars.Series.median": [[878, "polars-series-median"]], "polars.Series.rename": [[897, "polars-series-rename"]], "polars.Series.rolling_skew": [[906, "polars-series-rolling-skew"]], "polars.Series.sample": [[911, "polars-series-sample"]], "polars.Series.list.sort": [[865, "polars-series-list-sort"]], "polars.Series.mode": [[880, "polars-series-mode"]], "polars.Series.log1p": [[873, "polars-series-log1p"]], "polars.Series.rolling_max": [[901, "polars-series-rolling-max"]], "polars.Series.list.to_struct": [[869, "polars-series-list-to-struct"]], "polars.Series.shrink_to_fit": [[921, "polars-series-shrink-to-fit"]], "polars.Series.list.explode": [[852, "polars-series-list-explode"]], "polars.Series.nan_min": [[885, "polars-series-nan-min"]], "polars.Series.n_unique": [[882, "polars-series-n-unique"]], "polars.Series.qcut": [[892, "polars-series-qcut"]], "polars.Series.list.shift": [[863, "polars-series-list-shift"]], "polars.Series.n_chunks": [[881, "polars-series-n-chunks"]], "polars.Series.peak_max": [[889, "polars-series-peak-max"]], "polars.Series.list.sum": [[866, "polars-series-list-sum"]], "polars.Series.set_at_idx": [[915, "polars-series-set-at-idx"]], "polars.Series.round": [[910, "polars-series-round"]], "polars.Series.list.join": [[856, "polars-series-list-join"]], "polars.Series.series_equal": [[913, "polars-series-series-equal"]], "polars.Series.list.unique": [[870, "polars-series-list-unique"]], "polars.Series.lower_bound": [[874, "polars-series-lower-bound"]], "polars.Series.rolling_mean": [[902, "polars-series-rolling-mean"]], "polars.Series.set": [[914, "polars-series-set"]], "polars.Series.shift_and_fill": [[919, "polars-series-shift-and-fill"]], "polars.Series.list.slice": [[864, "polars-series-list-slice"]], "polars.Series.list.min": [[861, "polars-series-list-min"]], "polars.Series.search_sorted": [[912, "polars-series-search-sorted"]], "polars.Series.nan_max": [[884, "polars-series-nan-max"]], "polars.Series.product": [[891, "polars-series-product"]], "polars.Series.list.mean": [[860, "polars-series-list-mean"]], "polars.Series.shape": [[917, "polars-series-shape"]], "polars.Series.list.tail": [[867, "polars-series-list-tail"]], "polars.Series.rolling_apply": [[900, "polars-series-rolling-apply"]], "polars.Series.list.max": [[859, "polars-series-list-max"]], "polars.Series.is_duplicated": [[823, "polars-series-is-duplicated"]], "polars.Series.flags": [[811, "polars-series-flags"]], "polars.Series.dt.year": [[798, "polars-series-dt-year"]], "polars.Series.dt.replace_time_zone": [[786, "polars-series-dt-replace-time-zone"]], "polars.Series.is_empty": [[824, "polars-series-is-empty"]], "polars.Series.is_temporal": [[837, "polars-series-is-temporal"]], "polars.Series.len": [[842, "polars-series-len"]], "polars.Series.dt.strftime": [[790, "polars-series-dt-strftime"]], "polars.Series.is_nan": [[831, "polars-series-is-nan"]], "polars.Series.dt.nanosecond": [[781, "polars-series-dt-nanosecond"]], "polars.Series.dt.seconds": [[789, "polars-series-dt-seconds"]], "polars.Series.estimated_size": [[801, "polars-series-estimated-size"]], "polars.Series.dt.week": [[795, "polars-series-dt-week"]], "polars.Series.dt.weekday": [[796, "polars-series-dt-weekday"]], "polars.Series.list.diff": [[850, "polars-series-list-diff"]], "polars.Series.is_not_nan": [[832, "polars-series-is-not-nan"]], "polars.Series.hash": [[815, "polars-series-hash"]], "polars.Series.is_boolean": [[822, "polars-series-is-boolean"]], "polars.Series.interpolate": [[820, "polars-series-interpolate"]], "polars.Series.dt.round": [[787, "polars-series-dt-round"]], "polars.Series.has_validity": [[814, "polars-series-has-validity"]], "polars.Series.head": [[816, "polars-series-head"]], "polars.Series.hist": [[817, "polars-series-hist"]], "polars.Series.is_between": [[821, "polars-series-is-between"]], "polars.Series.is_utf8": [[839, "polars-series-is-utf8"]], "polars.Series.is_infinite": [[829, "polars-series-is-infinite"]], "polars.Series.item": [[840, "polars-series-item"]], "polars.Series.is_first": [[826, "polars-series-is-first"]], "polars.Series.kurtosis": [[841, "polars-series-kurtosis"]], "polars.Series.floor": [[812, "polars-series-floor"]], "polars.Series.is_sorted": [[836, "polars-series-is-sorted"]], "polars.Series.list.arg_max": [[845, "polars-series-list-arg-max"]], "polars.Series.list.contains": [[848, "polars-series-list-contains"]], "polars.Series.list.concat": [[847, "polars-series-list-concat"]], "polars.Series.dtype": [[799, "polars-series-dtype"]], "polars.Series.dt.quarter": [[785, "polars-series-dt-quarter"]], "polars.Series.dt.truncate": [[794, "polars-series-dt-truncate"]], "polars.Series.dt.offset_by": [[783, "polars-series-dt-offset-by"]], "polars.Series.list.arg_min": [[846, "polars-series-list-arg-min"]], "polars.Series.dt.ordinal_day": [[784, "polars-series-dt-ordinal-day"]], "polars.Series.extend_constant": [[807, "polars-series-extend-constant"]], "polars.Series.is_finite": [[825, "polars-series-is-finite"]], "polars.Series.is_null": [[834, "polars-series-is-null"]], "polars.Series.dt.timestamp": [[792, "polars-series-dt-timestamp"]], "polars.Series.inner_dtype": [[819, "polars-series-inner-dtype"]], "polars.Series.is_in": [[828, "polars-series-is-in"]], "polars.Series.explode": [[806, "polars-series-explode"]], "polars.Series.implode": [[818, "polars-series-implode"]], "polars.Series.is_not_null": [[833, "polars-series-is-not-null"]], "polars.Series.is_unique": [[838, "polars-series-is-unique"]], "polars.Series.dt.second": [[788, "polars-series-dt-second"]], "polars.Series.ewm_var": [[804, "polars-series-ewm-var"]], "polars.Series.dt.time": [[791, "polars-series-dt-time"]], "polars.Series.ewm_mean": [[802, "polars-series-ewm-mean"]], "polars.Series.ewm_std": [[803, "polars-series-ewm-std"]], "polars.Series.entropy": [[800, "polars-series-entropy"]], "polars.Series.fill_null": [[809, "polars-series-fill-null"]], "polars.Series.list.count_match": [[849, "polars-series-list-count-match"]], "polars.Series.list.eval": [[851, "polars-series-list-eval"]], "polars.Series.list": [[844, "polars-series-list"]], "polars.Series.get_chunks": [[813, "polars-series-get-chunks"]], "polars.Series.is_float": [[827, "polars-series-is-float"]], "polars.Series.dt.to_string": [[793, "polars-series-dt-to-string"]], "polars.Series.fill_nan": [[808, "polars-series-fill-nan"]], "polars.Series.is_numeric": [[835, "polars-series-is-numeric"]], "polars.Series.exp": [[805, "polars-series-exp"]], "polars.Series.limit": [[843, "polars-series-limit"]], "polars.Series.filter": [[810, "polars-series-filter"]], "polars.Series.dt.nanoseconds": [[782, "polars-series-dt-nanoseconds"]], "polars.Series.is_integer": [[830, "polars-series-is-integer"]], "polars.Series.dt.with_time_unit": [[797, "polars-series-dt-with-time-unit"]], "polars.Series.dot": [[752, "polars-series-dot"]], "polars.Series.cumsum": [[747, "polars-series-cumsum"]], "polars.Series.dt.hours": [[765, "polars-series-dt-hours"]], "polars.Series.dt.month_start": [[780, "polars-series-dt-month-start"]], "polars.Series.describe": [[750, "polars-series-describe"]], "polars.Series.dt.mean": [[769, "polars-series-dt-mean"]], "polars.Series.dt.month_end": [[779, "polars-series-dt-month-end"]], "polars.Series.cumulative_eval": [[748, "polars-series-cumulative-eval"]], "polars.Series.arr.max": [[722, "polars-series-arr-max"]], "polars.Series.dt.milliseconds": [[774, "polars-series-dt-milliseconds"]], "polars.Series.arcsin": [[713, "polars-series-arcsin"]], "polars.Series.dt.microsecond": [[771, "polars-series-dt-microsecond"]], "polars.Series.drop_nans": [[753, "polars-series-drop-nans"]], "polars.Series.dt.median": [[770, "polars-series-dt-median"]], "polars.Series.clip_max": [[739, "polars-series-clip-max"]], "polars.Series.cut": [[749, "polars-series-cut"]], "polars.Series.dt.combine": [[757, "polars-series-dt-combine"]], "polars.Series.dt": [[755, "polars-series-dt"]], "polars.Series.dt.day": [[761, "polars-series-dt-day"]], "polars.Series.dt.iso_year": [[767, "polars-series-dt-iso-year"]], "polars.Series.clone": [[741, "polars-series-clone"]], "polars.Series.dt.days": [[762, "polars-series-dt-days"]], "polars.Series.bottom_k": [[731, "polars-series-bottom-k"]], "polars.Series.arg_min": [[718, "polars-series-arg-min"]], "polars.Series.dt.convert_time_zone": [[758, "polars-series-dt-convert-time-zone"]], "polars.Series.arg_sort": [[719, "polars-series-arg-sort"]], "polars.Series.arr.min": [[723, "polars-series-arr-min"]], "polars.Series.apply": [[710, "polars-series-apply"]], "polars.Series.arctanh": [[716, "polars-series-arctanh"]], "polars.Series.bin.contains": [[726, "polars-series-bin-contains"]], "polars.Series.cumprod": [[746, "polars-series-cumprod"]], "polars.Series.dt.hour": [[764, "polars-series-dt-hour"]], "polars.Series.dt.minute": [[776, "polars-series-dt-minute"]], "polars.Series.arctan": [[715, "polars-series-arctan"]], "polars.Series.arccosh": [[712, "polars-series-arccosh"]], "polars.Series.arg_unique": [[721, "polars-series-arg-unique"]], "polars.Series.bin.encode": [[728, "polars-series-bin-encode"]], "polars.Series.ceil": [[735, "polars-series-ceil"]], "polars.Series.cos": [[742, "polars-series-cos"]], "polars.Series.cat": [[733, "polars-series-cat"]], "polars.Series.dt.datetime": [[760, "polars-series-dt-datetime"]], "polars.Series.clip": [[738, "polars-series-clip"]], "polars.Series.arccos": [[711, "polars-series-arccos"]], "polars.Series.arr.sum": [[724, "polars-series-arr-sum"]], "polars.Series.bin.decode": [[727, "polars-series-bin-decode"]], "polars.Series.dt.max": [[768, "polars-series-dt-max"]], "polars.Series.dt.cast_time_unit": [[756, "polars-series-dt-cast-time-unit"]], "polars.Series.cummin": [[745, "polars-series-cummin"]], "polars.Series.arg_true": [[720, "polars-series-arg-true"]], "polars.Series.bin.starts_with": [[730, "polars-series-bin-starts-with"]], "polars.Series.chunk_lengths": [[736, "polars-series-chunk-lengths"]], "polars.Series.clear": [[737, "polars-series-clear"]], "polars.Series.dt.minutes": [[777, "polars-series-dt-minutes"]], "polars.Series.arcsinh": [[714, "polars-series-arcsinh"]], "polars.Series.dt.microseconds": [[772, "polars-series-dt-microseconds"]], "polars.Series.drop_nulls": [[754, "polars-series-drop-nulls"]], "polars.Series.cast": [[732, "polars-series-cast"]], "polars.Series.dt.epoch": [[763, "polars-series-dt-epoch"]], "polars.Series.cosh": [[743, "polars-series-cosh"]], "polars.Series.arg_max": [[717, "polars-series-arg-max"]], "polars.Series.dt.date": [[759, "polars-series-dt-date"]], "polars.Series.cummax": [[744, "polars-series-cummax"]], "polars.Series.bin.ends_with": [[729, "polars-series-bin-ends-with"]], "polars.Series.clip_min": [[740, "polars-series-clip-min"]], "polars.Series.dt.is_leap_year": [[766, "polars-series-dt-is-leap-year"]], "polars.Series.cat.set_ordering": [[734, "polars-series-cat-set-ordering"]], "polars.Series.dt.month": [[778, "polars-series-dt-month"]], "polars.Series.dt.min": [[775, "polars-series-dt-min"]], "polars.Series.dt.millisecond": [[773, "polars-series-dt-millisecond"]], "polars.Series.diff": [[751, "polars-series-diff"]], "polars.Series.arr.unique": [[725, "polars-series-arr-unique"]], "Temporal": [[1008, "temporal"], [610, "temporal"], [258, "temporal"]], "Manipulation/selection": [[1005, "manipulation-selection"], [702, "manipulation-selection"], [606, "manipulation-selection"], [257, "manipulation-selection"]], "Categories": [[998, "categories"], [598, "categories"]], "Binary": [[996, "binary"], [596, "binary"], [607, "binary"]], "Boolean": [[997, "boolean"], [597, "boolean"]], "Array": [[994, "array"], [595, "array"]], "Export": [[1001, "export"], [253, "export"]], "Series": [[1002, "series"]], "List": [[1003, "list"], [603, "list"]], "Struct": [[1007, "struct"], [609, "struct"]], "Utils": [[1011, "utils"]], "Computation": [[999, "computation"], [600, "computation"], [251, "computation"]], "String": [[1006, "string"], [608, "string"]], "Testing": [[1010, "testing"]], "Asserts": [[1010, "asserts"]], "Parametric testing": [[1010, "parametric-testing"]], "Polars primitives": [[1010, "polars-primitives"]], "Strategy helpers": [[1010, "strategy-helpers"]], "Profiles": [[1010, "profiles"]], "Attributes": [[995, "attributes"], [697, "attributes"], [250, "attributes"]], "SQL": [[1009, "sql"]], "Methods": [[1009, "methods"]], "Descriptive": [[1000, "descriptive"], [698, "descriptive"], [252, "descriptive"]], "Miscellaneous": [[1004, "miscellaneous"], [701, "miscellaneous"], [605, "miscellaneous"], [612, "miscellaneous"], [256, "miscellaneous"]], "polars.Series.append": [[709, "polars-series-append"]], "polars.LazyFrame.set_sorted": [[660, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.select": [[659, "polars-lazyframe-select"]], "polars.LazyFrame.read_json": [[655, "polars-lazyframe-read-json"]], "polars.LazyFrame.top_k": [[672, "polars-lazyframe-top-k"]], "polars.LazyFrame.unique": [[673, "polars-lazyframe-unique"]], "polars.LazyFrame.show_graph": [[663, "polars-lazyframe-show-graph"]], "polars.LazyFrame.melt": [[648, "polars-lazyframe-melt"]], "polars.LazyFrame.mean": [[646, "polars-lazyframe-mean"]], "polars.LazyFrame.sum": [[669, "polars-lazyframe-sum"]], "polars.LazyFrame.tail": [[670, "polars-lazyframe-tail"]], "polars.LazyFrame.update": [[675, "polars-lazyframe-update"]], "polars.LazyFrame.median": [[647, "polars-lazyframe-median"]], "polars.LazyFrame.join_asof": [[640, "polars-lazyframe-join-asof"]], "polars.LazyFrame.width": [[677, "polars-lazyframe-width"]], "polars.LazyFrame.sort": [[667, "polars-lazyframe-sort"]], "polars.LazyFrame.join": [[639, "polars-lazyframe-join"]], "polars.LazyFrame.profile": [[653, "polars-lazyframe-profile"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[689, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[695, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.LazyFrame.last": [[641, "polars-lazyframe-last"]], "Read/write logical plan": [[701, "read-write-logical-plan"]], "polars.LazyFrame.schema": [[658, "polars-lazyframe-schema"]], "polars.LazyFrame.std": [[668, "polars-lazyframe-std"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[694, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.LazyFrame.unnest": [[674, "polars-lazyframe-unnest"]], "polars.LazyFrame.with_columns": [[678, "polars-lazyframe-with-columns"]], "polars.LazyFrame.with_context": [[679, "polars-lazyframe-with-context"]], "polars.LazyFrame.lazy": [[642, "polars-lazyframe-lazy"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[683, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.LazyFrame.pipe": [[652, "polars-lazyframe-pipe"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[684, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.LazyFrame.with_row_count": [[680, "polars-lazyframe-with-row-count"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[691, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.LazyFrame.null_count": [[651, "polars-lazyframe-null-count"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[692, "polars-lazyframe-groupby-lazygroupby-min"]], "LazyFrame": [[700, "lazyframe"]], "polars.Series.any": [[708, "polars-series-any"]], "polars.LazyFrame.write_json": [[681, "polars-lazyframe-write-json"]], "polars.LazyFrame.var": [[676, "polars-lazyframe-var"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[686, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.LazyFrame.map": [[644, "polars-lazyframe-map"]], "polars.LazyFrame.sink_parquet": [[665, "polars-lazyframe-sink-parquet"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[693, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.LazyFrame.min": [[650, "polars-lazyframe-min"]], "polars.LazyFrame.limit": [[643, "polars-lazyframe-limit"]], "polars.LazyFrame.merge_sorted": [[649, "polars-lazyframe-merge-sorted"]], "polars.Series.abs": [[705, "polars-series-abs"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[690, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.Series.all": [[707, "polars-series-all"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[687, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[682, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.LazyFrame.reverse": [[657, "polars-lazyframe-reverse"]], "GroupBy": [[699, "groupby"], [254, "groupby"]], "polars.LazyFrame.sink_ipc": [[664, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.take_every": [[671, "polars-lazyframe-take-every"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[688, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.LazyFrame.rename": [[656, "polars-lazyframe-rename"]], "polars.LazyFrame.shift": [[661, "polars-lazyframe-shift"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[685, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.LazyFrame.max": [[645, "polars-lazyframe-max"]], "polars.LazyFrame.quantile": [[654, "polars-lazyframe-quantile"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[696, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.LazyFrame.slice": [[666, "polars-lazyframe-slice"]], "Selectors": [[703, "selectors"]], "Importing": [[703, "importing"]], "Set operations": [[703, "set-operations"]], "Functions": [[703, "functions"], [601, "functions"], [612, "functions"]], "polars.LazyFrame.shift_and_fill": [[662, "polars-lazyframe-shift-and-fill"]], "polars.Series.alias": [[706, "polars-series-alias"]], "polars.apply": [[547, "polars-apply"]], "polars.Expr.str.split_exact": [[513, "polars-expr-str-split-exact"]], "polars.col": [[553, "polars-col"]], "polars.Expr.take": [[531, "polars-expr-take"]], "polars.cumsum": [[561, "polars-cumsum"]], "polars.Expr.str.extract": [[498, "polars-expr-str-extract"]], "polars.Expr.str.to_time": [[522, "polars-expr-str-to-time"]], "polars.Expr.struct.rename_fields": [[526, "polars-expr-struct-rename-fields"]], "polars.Expr.str.to_datetime": [[519, "polars-expr-str-to-datetime"]], "polars.avg": [[551, "polars-avg"]], "polars.count": [[557, "polars-count"]], "polars.Expr.str.to_date": [[518, "polars-expr-str-to-date"]], "polars.exclude": [[566, "polars-exclude"]], "polars.Expr.truediv": [[537, "polars-expr-truediv"]], "polars.Expr.str.strip": [[516, "polars-expr-str-strip"]], "polars.all": [[545, "polars-all"]], "polars.cumreduce": [[560, "polars-cumreduce"]], "polars.Expr.value_counts": [[541, "polars-expr-value-counts"]], "polars.approx_unique": [[548, "polars-approx-unique"]], "polars.Expr.str.rjust": [[509, "polars-expr-str-rjust"]], "polars.Expr.str.splitn": [[514, "polars-expr-str-splitn"]], "polars.Expr.unique_counts": [[539, "polars-expr-unique-counts"]], "polars.Expr.sum": [[529, "polars-expr-sum"]], "polars.Expr.str.to_uppercase": [[523, "polars-expr-str-to-uppercase"]], "polars.Expr.tanh": [[534, "polars-expr-tanh"]], "polars.datetime": [[563, "polars-datetime"]], "polars.Expr.tan": [[533, "polars-expr-tan"]], "polars.cumfold": [[559, "polars-cumfold"]], "polars.Expr.str.ljust": [[503, "polars-expr-str-ljust"]], "polars.Expr.upper_bound": [[540, "polars-expr-upper-bound"]], "polars.Expr.str.replace": [[507, "polars-expr-str-replace"]], "polars.Expr.str.to_lowercase": [[521, "polars-expr-str-to-lowercase"]], "polars.Expr.str.starts_with": [[515, "polars-expr-str-starts-with"]], "polars.Expr.var": [[542, "polars-expr-var"]], "polars.Expr.take_every": [[532, "polars-expr-take-every"]], "polars.Expr.sub": [[527, "polars-expr-sub"]], "polars.concat_list": [[554, "polars-concat-list"]], "polars.Expr.tail": [[530, "polars-expr-tail"]], "polars.Expr.str.json_extract": [[500, "polars-expr-str-json-extract"]], "polars.Expr.suffix": [[528, "polars-expr-suffix"]], "polars.Expr.str.to_decimal": [[520, "polars-expr-str-to-decimal"]], "polars.Expr.str.n_chars": [[505, "polars-expr-str-n-chars"]], "polars.Expr.str.parse_int": [[506, "polars-expr-str-parse-int"]], "polars.Expr.str.split": [[512, "polars-expr-str-split"]], "polars.Expr.top_k": [[536, "polars-expr-top-k"]], "polars.corr": [[556, "polars-corr"]], "polars.duration": [[564, "polars-duration"]], "polars.concat_str": [[555, "polars-concat-str"]], "polars.Expr.where": [[543, "polars-expr-where"]], "polars.cov": [[558, "polars-cov"]], "polars.arange": [[549, "polars-arange"]], "polars.Expr.str.explode": [[497, "polars-expr-str-explode"]], "polars.Expr.struct.field": [[525, "polars-expr-struct-field"]], "polars.element": [[565, "polars-element"]], "polars.arg_sort_by": [[550, "polars-arg-sort-by"]], "polars.Expr.str.extract_all": [[499, "polars-expr-str-extract-all"]], "polars.Expr.unique": [[538, "polars-expr-unique"]], "polars.Expr.str.strptime": [[517, "polars-expr-str-strptime"]], "polars.Expr.to_physical": [[535, "polars-expr-to-physical"]], "polars.any": [[546, "polars-any"]], "polars.date": [[562, "polars-date"]], "polars.Expr.str.rstrip": [[510, "polars-expr-str-rstrip"]], "polars.coalesce": [[552, "polars-coalesce"]], "polars.Expr.str.zfill": [[524, "polars-expr-str-zfill"]], "polars.Expr.str.json_path_match": [[501, "polars-expr-str-json-path-match"]], "polars.Expr.str.slice": [[511, "polars-expr-str-slice"]], "polars.Expr.xor": [[544, "polars-expr-xor"]], "polars.Expr.str.lstrip": [[504, "polars-expr-str-lstrip"]], "polars.Expr.str.lengths": [[502, "polars-expr-str-lengths"]], "polars.first": [[567, "polars-first"]], "polars.Expr.str.replace_all": [[508, "polars-expr-str-replace-all"]], "polars.Expr.sort": [[487, "polars-expr-sort"]], "polars.Expr.meta.has_multiple_outputs": [[433, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.meta.output_name": [[436, "polars-expr-meta-output-name"]], "polars.Expr.n_unique": [[445, "polars-expr-n-unique"]], "polars.Expr.rolling_mean": [[466, "polars-expr-rolling-mean"]], "polars.Expr.mode": [[443, "polars-expr-mode"]], "polars.Expr.prefix": [[455, "polars-expr-prefix"]], "polars.Expr.search_sorted": [[476, "polars-expr-search-sorted"]], "polars.Expr.pow": [[454, "polars-expr-pow"]], "polars.Expr.sample": [[475, "polars-expr-sample"]], "polars.Expr.meta.undo_aliases": [[439, "polars-expr-meta-undo-aliases"]], "polars.Expr.quantile": [[457, "polars-expr-quantile"]], "polars.Expr.str.contains": [[492, "polars-expr-str-contains"]], "polars.Expr.product": [[456, "polars-expr-product"]], "polars.Expr.nan_min": [[447, "polars-expr-nan-min"]], "polars.Expr.pipe": [[453, "polars-expr-pipe"]], "polars.Expr.rolling_sum": [[472, "polars-expr-rolling-sum"]], "polars.Expr.map_alias": [[427, "polars-expr-map-alias"]], "polars.Expr.rolling_std": [[471, "polars-expr-rolling-std"]], "polars.Expr.set_sorted": [[477, "polars-expr-set-sorted"]], "polars.Expr.repeat_by": [[461, "polars-expr-repeat-by"]], "polars.Expr.null_count": [[449, "polars-expr-null-count"]], "polars.Expr.max": [[429, "polars-expr-max"]], "polars.Expr.str.decode": [[494, "polars-expr-str-decode"]], "polars.Expr.meta.is_regex_projection": [[434, "polars-expr-meta-is-regex-projection"]], "polars.Expr.rechunk": [[459, "polars-expr-rechunk"]], "polars.Expr.min": [[441, "polars-expr-min"]], "polars.Expr.rolling_apply": [[464, "polars-expr-rolling-apply"]], "polars.Expr.meta.pop": [[437, "polars-expr-meta-pop"]], "polars.Expr.nan_max": [[446, "polars-expr-nan-max"]], "polars.Expr.mod": [[442, "polars-expr-mod"]], "polars.Expr.rolling_skew": [[470, "polars-expr-rolling-skew"]], "polars.Expr.pct_change": [[452, "polars-expr-pct-change"]], "polars.Expr.skew": [[485, "polars-expr-skew"]], "polars.Expr.shift_and_fill": [[479, "polars-expr-shift-and-fill"]], "polars.Expr.mul": [[444, "polars-expr-mul"]], "polars.Expr.median": [[431, "polars-expr-median"]], "polars.Expr.rolling_var": [[473, "polars-expr-rolling-var"]], "polars.Expr.reverse": [[463, "polars-expr-reverse"]], "polars.Expr.rank": [[458, "polars-expr-rank"]], "polars.Expr.meta.write_json": [[440, "polars-expr-meta-write-json"]], "polars.Expr.reshape": [[462, "polars-expr-reshape"]], "polars.Expr.sinh": [[484, "polars-expr-sinh"]], "polars.Expr.or_": [[450, "polars-expr-or"]], "polars.Expr.shrink_dtype": [[480, "polars-expr-shrink-dtype"]], "polars.Expr.sign": [[482, "polars-expr-sign"]], "polars.Expr.meta.ne": [[435, "polars-expr-meta-ne"]], "polars.Expr.round": [[474, "polars-expr-round"]], "polars.Expr.reinterpret": [[460, "polars-expr-reinterpret"]], "polars.Expr.std": [[490, "polars-expr-std"]], "polars.Expr.map_dict": [[428, "polars-expr-map-dict"]], "polars.Expr.shift": [[478, "polars-expr-shift"]], "polars.Expr.ne": [[448, "polars-expr-ne"]], "polars.Expr.over": [[451, "polars-expr-over"]], "polars.Expr.rolling_median": [[467, "polars-expr-rolling-median"]], "polars.Expr.sort_by": [[488, "polars-expr-sort-by"]], "polars.Expr.str.count_match": [[493, "polars-expr-str-count-match"]], "polars.Expr.str.ends_with": [[496, "polars-expr-str-ends-with"]], "polars.Expr.rolling_min": [[468, "polars-expr-rolling-min"]], "polars.Expr.sin": [[483, "polars-expr-sin"]], "polars.Expr.sqrt": [[489, "polars-expr-sqrt"]], "polars.Expr.map": [[426, "polars-expr-map"]], "polars.Expr.meta.root_names": [[438, "polars-expr-meta-root-names"]], "polars.Expr.str.encode": [[495, "polars-expr-str-encode"]], "polars.Expr.mean": [[430, "polars-expr-mean"]], "polars.Expr.str.concat": [[491, "polars-expr-str-concat"]], "polars.Expr.meta.eq": [[432, "polars-expr-meta-eq"]], "polars.Expr.slice": [[486, "polars-expr-slice"]], "polars.Expr.rolling_max": [[465, "polars-expr-rolling-max"]], "polars.Expr.shuffle": [[481, "polars-expr-shuffle"]], "polars.Expr.rolling_quantile": [[469, "polars-expr-rolling-quantile"]], "polars.Expr.list.unique": [[420, "polars-expr-list-unique"]], "polars.Expr.list.count_match": [[399, "polars-expr-list-count-match"]], "polars.Expr.is_between": [[377, "polars-expr-is-between"]], "polars.Expr.list.max": [[409, "polars-expr-list-max"]], "polars.Expr.is_nan": [[383, "polars-expr-is-nan"]], "polars.Expr.list.to_struct": [[419, "polars-expr-list-to-struct"]], "polars.Expr.is_null": [[387, "polars-expr-is-null"]], "polars.Expr.last": [[391, "polars-expr-last"]], "polars.Expr.is_unique": [[388, "polars-expr-is-unique"]], "polars.Expr.is_not_nan": [[385, "polars-expr-is-not-nan"]], "polars.Expr.list.arg_max": [[395, "polars-expr-list-arg-max"]], "polars.Expr.log": [[421, "polars-expr-log"]], "polars.Expr.floor": [[366, "polars-expr-floor"]], "polars.Expr.ge": [[370, "polars-expr-ge"]], "polars.Expr.flatten": [[365, "polars-expr-flatten"]], "polars.Expr.forward_fill": [[368, "polars-expr-forward-fill"]], "polars.Expr.list.sum": [[416, "polars-expr-list-sum"]], "polars.Expr.interpolate": [[376, "polars-expr-interpolate"]], "polars.Expr.list.diff": [[400, "polars-expr-list-diff"]], "polars.Expr.lt": [[425, "polars-expr-lt"]], "polars.Expr.list.eval": [[401, "polars-expr-list-eval"]], "polars.Expr.list.join": [[406, "polars-expr-list-join"]], "polars.Expr.list.min": [[411, "polars-expr-list-min"]], "polars.Expr.log10": [[422, "polars-expr-log10"]], "polars.Expr.first": [[364, "polars-expr-first"]], "polars.Expr.exclude": [[357, "polars-expr-exclude"]], "polars.Expr.inspect": [[375, "polars-expr-inspect"]], "polars.Expr.is_duplicated": [[378, "polars-expr-is-duplicated"]], "polars.Expr.is_in": [[381, "polars-expr-is-in"]], "polars.Expr.implode": [[374, "polars-expr-implode"]], "polars.Expr.is_not": [[384, "polars-expr-is-not"]], "polars.Expr.limit": [[394, "polars-expr-limit"]], "polars.Expr.ewm_var": [[356, "polars-expr-ewm-var"]], "polars.Expr.list.concat": [[397, "polars-expr-list-concat"]], "polars.Expr.kurtosis": [[390, "polars-expr-kurtosis"]], "polars.Expr.list.head": [[405, "polars-expr-list-head"]], "polars.Expr.ewm_std": [[355, "polars-expr-ewm-std"]], "polars.Expr.exp": [[358, "polars-expr-exp"]], "polars.Expr.log1p": [[423, "polars-expr-log1p"]], "polars.Expr.fill_nan": [[361, "polars-expr-fill-nan"]], "polars.Expr.extend_constant": [[360, "polars-expr-extend-constant"]], "polars.Expr.is_not_null": [[386, "polars-expr-is-not-null"]], "polars.Expr.gt": [[371, "polars-expr-gt"]], "polars.Expr.is_finite": [[379, "polars-expr-is-finite"]], "polars.Expr.hash": [[372, "polars-expr-hash"]], "polars.Expr.list.lengths": [[408, "polars-expr-list-lengths"]], "polars.Expr.list.tail": [[417, "polars-expr-list-tail"]], "polars.Expr.is_infinite": [[382, "polars-expr-is-infinite"]], "polars.Expr.list.contains": [[398, "polars-expr-list-contains"]], "polars.Expr.from_json": [[369, "polars-expr-from-json"]], "polars.Expr.list.slice": [[414, "polars-expr-list-slice"]], "polars.Expr.list.shift": [[413, "polars-expr-list-shift"]], "polars.Expr.list.first": [[403, "polars-expr-list-first"]], "polars.Expr.list.take": [[418, "polars-expr-list-take"]], "polars.Expr.lower_bound": [[424, "polars-expr-lower-bound"]], "polars.Expr.list.sort": [[415, "polars-expr-list-sort"]], "polars.Expr.fill_null": [[362, "polars-expr-fill-null"]], "polars.Expr.head": [[373, "polars-expr-head"]], "polars.Expr.keep_name": [[389, "polars-expr-keep-name"]], "polars.Expr.le": [[392, "polars-expr-le"]], "polars.Expr.filter": [[363, "polars-expr-filter"]], "polars.Expr.list.arg_min": [[396, "polars-expr-list-arg-min"]], "polars.Expr.list.get": [[404, "polars-expr-list-get"]], "polars.Expr.floordiv": [[367, "polars-expr-floordiv"]], "polars.Expr.list.reverse": [[412, "polars-expr-list-reverse"]], "polars.Expr.list.mean": [[410, "polars-expr-list-mean"]], "polars.Expr.is_first": [[380, "polars-expr-is-first"]], "polars.Expr.len": [[393, "polars-expr-len"]], "polars.Expr.explode": [[359, "polars-expr-explode"]], "polars.Expr.list.explode": [[402, "polars-expr-list-explode"]], "polars.Expr.list.last": [[407, "polars-expr-list-last"]], "polars.select": [[586, "polars-select"]], "polars.groups": [[571, "polars-groups"]], "polars.LazyFrame.drop_nulls": [[623, "polars-lazyframe-drop-nulls"]], "polars.min": [[579, "polars-min"]], "polars.LazyFrame.groupby": [[633, "polars-lazyframe-groupby"]], "polars.rolling_corr": [[584, "polars-rolling-corr"]], "polars.LazyFrame.from_json": [[632, "polars-lazyframe-from-json"]], "polars.map": [[575, "polars-map"]], "polars.LazyFrame.clear": [[618, "polars-lazyframe-clear"]], "polars.sum": [[590, "polars-sum"]], "polars.time": [[592, "polars-time"]], "polars.implode": [[573, "polars-implode"]], "polars.max": [[576, "polars-max"]], "polars.LazyFrame.fill_null": [[629, "polars-lazyframe-fill-null"]], "polars.LazyFrame.columns": [[621, "polars-lazyframe-columns"]], "polars.LazyFrame.fetch": [[627, "polars-lazyframe-fetch"]], "polars.n_unique": [[580, "polars-n-unique"]], "polars.when": [[594, "polars-when"]], "polars.from_epoch": [[570, "polars-from-epoch"]], "polars.LazyFrame.dtypes": [[624, "polars-lazyframe-dtypes"]], "polars.LazyFrame.fill_nan": [[628, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.groupby_dynamic": [[634, "polars-lazyframe-groupby-dynamic"]], "Input/output": [[614, "input-output"]], "CSV": [[614, "csv"]], "Feather/ IPC": [[614, "feather-ipc"]], "Parquet": [[614, "parquet"]], "Database": [[614, "database"]], "JSON": [[614, "json"]], "AVRO": [[614, "avro"]], "Excel": [[614, "excel"]], "Delta Lake": [[614, "delta-lake"]], "Datasets": [[614, "datasets"]], "BatchedCsvReader": [[614, "batchedcsvreader"]], "Expressions": [[602, "expressions"]], "polars.fold": [[568, "polars-fold"]], "polars.LazyFrame.groupby_rolling": [[635, "polars-lazyframe-groupby-rolling"]], "Window": [[611, "window"]], "polars.repeat": [[583, "polars-repeat"]], "polars.reduce": [[582, "polars-reduce"]], "polars.mean": [[577, "polars-mean"]], "polars.LazyFrame.explain": [[625, "polars-lazyframe-explain"]], "Columns / names": [[599, "columns-names"]], "polars.LazyFrame.inspect": [[637, "polars-lazyframe-inspect"]], "polars.LazyFrame.bottom_k": [[616, "polars-lazyframe-bottom-k"]], "polars.rolling_cov": [[585, "polars-rolling-cov"]], "polars.LazyFrame.collect": [[620, "polars-lazyframe-collect"]], "polars.format": [[569, "polars-format"]], "polars.LazyFrame.interpolate": [[638, "polars-lazyframe-interpolate"]], "polars.LazyFrame.first": [[631, "polars-lazyframe-first"]], "polars.tail": [[591, "polars-tail"]], "polars.std": [[588, "polars-std"]], "Conversion": [[612, "conversion"]], "Eager/Lazy functions": [[612, "eager-lazy-functions"]], "Parallelization": [[612, "parallelization"]], "StringCache": [[612, "stringcache"]], "polars.LazyFrame.explode": [[626, "polars-lazyframe-explode"]], "polars.lit": [[574, "polars-lit"]], "Meta": [[604, "meta"]], "polars.LazyFrame.drop": [[622, "polars-lazyframe-drop"]], "polars.quantile": [[581, "polars-quantile"]], "polars.var": [[593, "polars-var"]], "polars.median": [[578, "polars-median"]], "polars.head": [[572, "polars-head"]], "Operators": [[607, "operators"]], "Conjunction": [[607, "conjunction"]], "Comparison": [[607, "comparison"]], "Numeric": [[607, "numeric"], [258, "numeric"]], "polars.sql_expr": [[587, "polars-sql-expr"]], "polars.struct": [[589, "polars-struct"]], "polars.LazyFrame.clone": [[619, "polars-lazyframe-clone"]], "API reference": [[613, "api-reference"]], "polars.LazyFrame.cache": [[617, "polars-lazyframe-cache"]], "polars.LazyFrame.head": [[636, "polars-lazyframe-head"]], "polars.LazyFrame.filter": [[630, "polars-lazyframe-filter"]], "polars.Expr.dt.month_end": [[332, "polars-expr-dt-month-end"]], "polars.Expr.dt.replace_time_zone": [[339, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.timestamp": [[345, "polars-expr-dt-timestamp"]], "polars.Expr.cosh": [[301, "polars-expr-cosh"]], "polars.Expr.cache": [[293, "polars-expr-cache"]], "polars.Expr.dt.millisecond": [[327, "polars-expr-dt-millisecond"]], "polars.Expr.dt.truncate": [[347, "polars-expr-dt-truncate"]], "polars.Expr.dt.is_leap_year": [[323, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.nanosecond": [[334, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.epoch": [[320, "polars-expr-dt-epoch"]], "polars.Expr.bottom_k": [[292, "polars-expr-bottom-k"]], "polars.Expr.dt.cast_time_unit": [[313, "polars-expr-dt-cast-time-unit"]], "polars.Expr.diff": [[309, "polars-expr-diff"]], "polars.Expr.cummax": [[304, "polars-expr-cummax"]], "polars.Expr.cos": [[300, "polars-expr-cos"]], "polars.Expr.dt.week": [[348, "polars-expr-dt-week"]], "polars.Expr.dt.iso_year": [[324, "polars-expr-dt-iso-year"]], "polars.Expr.backward_fill": [[286, "polars-expr-backward-fill"]], "polars.Expr.dt.microsecond": [[325, "polars-expr-dt-microsecond"]], "polars.Expr.ewm_mean": [[354, "polars-expr-ewm-mean"]], "polars.Expr.dt.to_string": [[346, "polars-expr-dt-to-string"]], "polars.Expr.dt.date": [[316, "polars-expr-dt-date"]], "polars.Expr.count": [[302, "polars-expr-count"]], "polars.Expr.dt.ordinal_day": [[337, "polars-expr-dt-ordinal-day"]], "polars.Expr.entropy": [[352, "polars-expr-entropy"]], "polars.Expr.bin.starts_with": [[291, "polars-expr-bin-starts-with"]], "polars.Expr.cumprod": [[306, "polars-expr-cumprod"]], "polars.Expr.ceil": [[296, "polars-expr-ceil"]], "polars.Expr.drop_nans": [[311, "polars-expr-drop-nans"]], "polars.Expr.cummin": [[305, "polars-expr-cummin"]], "polars.Expr.bin.contains": [[287, "polars-expr-bin-contains"]], "polars.Expr.dt.microseconds": [[326, "polars-expr-dt-microseconds"]], "polars.Expr.dt.minutes": [[330, "polars-expr-dt-minutes"]], "polars.Expr.bin.encode": [[289, "polars-expr-bin-encode"]], "polars.Expr.cumulative_eval": [[308, "polars-expr-cumulative-eval"]], "polars.Expr.cast": [[294, "polars-expr-cast"]], "polars.Expr.dt.with_time_unit": [[350, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.strftime": [[343, "polars-expr-dt-strftime"]], "polars.Expr.clip": [[297, "polars-expr-clip"]], "polars.Expr.dt.nanoseconds": [[335, "polars-expr-dt-nanoseconds"]], "polars.Expr.bin.decode": [[288, "polars-expr-bin-decode"]], "polars.Expr.dt.hours": [[322, "polars-expr-dt-hours"]], "polars.Expr.dot": [[310, "polars-expr-dot"]], "polars.Expr.dt.datetime": [[317, "polars-expr-dt-datetime"]], "polars.Expr.cumcount": [[303, "polars-expr-cumcount"]], "polars.Expr.dt.month": [[331, "polars-expr-dt-month"]], "polars.Expr.dt.month_start": [[333, "polars-expr-dt-month-start"]], "polars.Expr.dt.weekday": [[349, "polars-expr-dt-weekday"]], "polars.Expr.dt.days": [[319, "polars-expr-dt-days"]], "polars.Expr.cat.set_ordering": [[295, "polars-expr-cat-set-ordering"]], "polars.Expr.bin.ends_with": [[290, "polars-expr-bin-ends-with"]], "polars.Expr.dt.second": [[341, "polars-expr-dt-second"]], "polars.Expr.arr.sum": [[284, "polars-expr-arr-sum"]], "polars.Expr.dt.seconds": [[342, "polars-expr-dt-seconds"]], "polars.Expr.clip_max": [[298, "polars-expr-clip-max"]], "polars.Expr.dt.quarter": [[338, "polars-expr-dt-quarter"]], "polars.Expr.cumsum": [[307, "polars-expr-cumsum"]], "polars.Expr.dt.time": [[344, "polars-expr-dt-time"]], "polars.Expr.clip_min": [[299, "polars-expr-clip-min"]], "polars.Expr.arr.unique": [[285, "polars-expr-arr-unique"]], "polars.Expr.dt.combine": [[314, "polars-expr-dt-combine"]], "polars.Expr.dt.convert_time_zone": [[315, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.hour": [[321, "polars-expr-dt-hour"]], "polars.Expr.dt.milliseconds": [[328, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.minute": [[329, "polars-expr-dt-minute"]], "polars.Expr.dt.offset_by": [[336, "polars-expr-dt-offset-by"]], "polars.Expr.eq": [[353, "polars-expr-eq"]], "polars.Expr.dt.year": [[351, "polars-expr-dt-year"]], "polars.Expr.dt.round": [[340, "polars-expr-dt-round"]], "polars.Expr.drop_nulls": [[312, "polars-expr-drop-nulls"]], "polars.Expr.dt.day": [[318, "polars-expr-dt-day"]], "polars.DataFrame.interpolate": [[167, "polars-dataframe-interpolate"]], "polars.DataFrame.quantile": [[191, "polars-dataframe-quantile"]], "polars.DataFrame.explode": [[148, "polars-dataframe-explode"]], "polars.DataFrame.median": [[180, "polars-dataframe-median"]], "polars.DataFrame.is_unique": [[170, "polars-dataframe-is-unique"]], "polars.DataFrame.limit": [[177, "polars-dataframe-limit"]], "polars.DataFrame.schema": [[200, "polars-dataframe-schema"]], "polars.DataFrame.slice": [[207, "polars-dataframe-slice"]], "polars.DataFrame.tail": [[211, "polars-dataframe-tail"]], "polars.DataFrame.groupby": [[159, "polars-dataframe-groupby"]], "polars.DataFrame.frame_equal": [[155, "polars-dataframe-frame-equal"]], "polars.DataFrame.pivot": [[189, "polars-dataframe-pivot"]], "polars.DataFrame.fill_nan": [[150, "polars-dataframe-fill-nan"]], "polars.DataFrame.glimpse": [[158, "polars-dataframe-glimpse"]], "polars.DataFrame.head": [[163, "polars-dataframe-head"]], "polars.DataFrame.describe": [[142, "polars-dataframe-describe"]], "polars.DataFrame.iter_rows": [[172, "polars-dataframe-iter-rows"]], "polars.DataFrame.melt": [[181, "polars-dataframe-melt"]], "polars.DataFrame.groupby_dynamic": [[160, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.groupby_rolling": [[161, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.shrink_to_fit": [[206, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.merge_sorted": [[182, "polars-dataframe-merge-sorted"]], "polars.DataFrame.get_columns": [[157, "polars-dataframe-get-columns"]], "polars.DataFrame.sample": [[199, "polars-dataframe-sample"]], "polars.DataFrame.sum": [[210, "polars-dataframe-sum"]], "polars.DataFrame.insert_at_idx": [[166, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.partition_by": [[187, "polars-dataframe-partition-by"]], "polars.DataFrame.drop_nulls": [[145, "polars-dataframe-drop-nulls"]], "polars.DataFrame.product": [[190, "polars-dataframe-product"]], "polars.DataFrame.set_sorted": [[202, "polars-dataframe-set-sorted"]], "polars.DataFrame.extend": [[149, "polars-dataframe-extend"]], "polars.DataFrame.drop_in_place": [[144, "polars-dataframe-drop-in-place"]], "polars.DataFrame.pipe": [[188, "polars-dataframe-pipe"]], "polars.DataFrame.replace": [[194, "polars-dataframe-replace"]], "polars.DataFrame.replace_at_idx": [[195, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.find_idx_by_name": [[153, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.reverse": [[196, "polars-dataframe-reverse"]], "polars.DataFrame.mean": [[179, "polars-dataframe-mean"]], "polars.DataFrame.join_asof": [[175, "polars-dataframe-join-asof"]], "polars.DataFrame.max": [[178, "polars-dataframe-max"]], "polars.DataFrame.min": [[183, "polars-dataframe-min"]], "polars.DataFrame.is_empty": [[169, "polars-dataframe-is-empty"]], "polars.DataFrame.height": [[164, "polars-dataframe-height"]], "polars.DataFrame.estimated_size": [[147, "polars-dataframe-estimated-size"]], "polars.DataFrame.row": [[197, "polars-dataframe-row"]], "polars.DataFrame.std": [[209, "polars-dataframe-std"]], "polars.DataFrame.shape": [[203, "polars-dataframe-shape"]], "polars.DataFrame.take_every": [[212, "polars-dataframe-take-every"]], "polars.DataFrame.rows": [[198, "polars-dataframe-rows"]], "polars.DataFrame.join": [[174, "polars-dataframe-join"]], "polars.DataFrame.shift": [[204, "polars-dataframe-shift"]], "polars.DataFrame.item": [[171, "polars-dataframe-item"]], "polars.DataFrame.sort": [[208, "polars-dataframe-sort"]], "polars.DataFrame.n_unique": [[185, "polars-dataframe-n-unique"]], "polars.DataFrame.get_column": [[156, "polars-dataframe-get-column"]], "polars.DataFrame.lazy": [[176, "polars-dataframe-lazy"]], "polars.DataFrame.n_chunks": [[184, "polars-dataframe-n-chunks"]], "polars.DataFrame.iter_slices": [[173, "polars-dataframe-iter-slices"]], "polars.DataFrame.null_count": [[186, "polars-dataframe-null-count"]], "polars.DataFrame.rename": [[193, "polars-dataframe-rename"]], "polars.DataFrame.shift_and_fill": [[205, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.hash_rows": [[162, "polars-dataframe-hash-rows"]], "polars.DataFrame.filter": [[152, "polars-dataframe-filter"]], "polars.DataFrame.rechunk": [[192, "polars-dataframe-rechunk"]], "polars.DataFrame.is_duplicated": [[168, "polars-dataframe-is-duplicated"]], "polars.DataFrame.dtypes": [[146, "polars-dataframe-dtypes"]], "polars.DataFrame.select": [[201, "polars-dataframe-select"]], "polars.DataFrame.hstack": [[165, "polars-dataframe-hstack"]], "polars.DataFrame.fold": [[154, "polars-dataframe-fold"]], "polars.DataFrame.drop": [[143, "polars-dataframe-drop"]], "polars.DataFrame.fill_null": [[151, "polars-dataframe-fill-null"]], "polars.dataframe.groupby.GroupBy.max": [[242, "polars-dataframe-groupby-groupby-max"]], "polars.DataFrame.to_series": [[220, "polars-dataframe-to-series"]], "polars.Expr.add": [[262, "polars-expr-add"]], "polars.Expr.arg_sort": [[279, "polars-expr-arg-sort"]], "polars.dataframe.groupby.GroupBy.agg": [[235, "polars-dataframe-groupby-groupby-agg"]], "polars.Expr.all": [[265, "polars-expr-all"]], "polars.dataframe.groupby.GroupBy.first": [[239, "polars-dataframe-groupby-groupby-first"]], "polars.DataFrame.top_k": [[222, "polars-dataframe-top-k"]], "polars.Expr.arcsin": [[273, "polars-expr-arcsin"]], "polars.Expr.arg_true": [[280, "polars-expr-arg-true"]], "polars.DataFrame.with_columns": [[232, "polars-dataframe-with-columns"]], "polars.DataFrame.to_dummies": [[216, "polars-dataframe-to-dummies"]], "polars.DataFrame.update": [[227, "polars-dataframe-update"]], "polars.dataframe.groupby.GroupBy.__iter__": [[234, "polars-dataframe-groupby-groupby-iter"]], "polars.Expr.arr.max": [[282, "polars-expr-arr-max"]], "polars.dataframe.groupby.GroupBy.n_unique": [[246, "polars-dataframe-groupby-groupby-n-unique"]], "polars.dataframe.groupby.GroupBy.quantile": [[247, "polars-dataframe-groupby-groupby-quantile"]], "polars.Expr.approx_unique": [[270, "polars-expr-approx-unique"]], "polars.Expr.arg_max": [[277, "polars-expr-arg-max"]], "polars.Expr.alias": [[264, "polars-expr-alias"]], "polars.DataFrame.upsample": [[228, "polars-dataframe-upsample"]], "polars.DataFrame.unstack": [[226, "polars-dataframe-unstack"]], "polars.dataframe.groupby.GroupBy.all": [[236, "polars-dataframe-groupby-groupby-all"]], "polars.dataframe.groupby.GroupBy.apply": [[237, "polars-dataframe-groupby-groupby-apply"]], "polars.Expr.append": [[268, "polars-expr-append"]], "polars.DataFrame.unique": [[224, "polars-dataframe-unique"]], "polars.DataFrame.to_dict": [[214, "polars-dataframe-to-dict"]], "DataFrame": [[255, "dataframe"]], "polars.Expr.abs": [[261, "polars-expr-abs"]], "polars.DataFrame.to_struct": [[221, "polars-dataframe-to-struct"]], "polars.Expr.arccos": [[271, "polars-expr-arccos"]], "polars.DataFrame.to_numpy": [[218, "polars-dataframe-to-numpy"]], "polars.DataFrame.width": [[231, "polars-dataframe-width"]], "polars.Expr.arr.min": [[283, "polars-expr-arr-min"]], "polars.dataframe.groupby.GroupBy.tail": [[249, "polars-dataframe-groupby-groupby-tail"]], "polars.DataFrame.to_arrow": [[213, "polars-dataframe-to-arrow"]], "polars.dataframe.groupby.GroupBy.count": [[238, "polars-dataframe-groupby-groupby-count"]], "polars.dataframe.groupby.GroupBy.last": [[241, "polars-dataframe-groupby-groupby-last"]], "polars.dataframe.groupby.GroupBy.min": [[245, "polars-dataframe-groupby-groupby-min"]], "Exceptions": [[259, "exceptions"]], "polars.Expr.arg_min": [[278, "polars-expr-arg-min"]], "polars.Expr.any": [[267, "polars-expr-any"]], "polars.DataFrame.to_pandas": [[219, "polars-dataframe-to-pandas"]], "polars.Expr.arctan": [[275, "polars-expr-arctan"]], "polars.Expr.agg_groups": [[263, "polars-expr-agg-groups"]], "Data types": [[258, "data-types"]], "Nested": [[258, "nested"]], "Other": [[258, "other"]], "polars.DataFrame.transpose": [[223, "polars-dataframe-transpose"]], "polars.dataframe.groupby.GroupBy.mean": [[243, "polars-dataframe-groupby-groupby-mean"]], "polars.dataframe.groupby.GroupBy.head": [[240, "polars-dataframe-groupby-groupby-head"]], "polars.Expr.arctanh": [[276, "polars-expr-arctanh"]], "polars.DataFrame.to_dicts": [[215, "polars-dataframe-to-dicts"]], "polars.dataframe.groupby.GroupBy.median": [[244, "polars-dataframe-groupby-groupby-median"]], "polars.Expr.arcsinh": [[274, "polars-expr-arcsinh"]], "polars.DataFrame.with_row_count": [[233, "polars-dataframe-with-row-count"]], "polars.Expr.apply": [[269, "polars-expr-apply"]], "polars.DataFrame.unnest": [[225, "polars-dataframe-unnest"]], "polars.DataFrame.var": [[229, "polars-dataframe-var"]], "polars.DataFrame.to_init_repr": [[217, "polars-dataframe-to-init-repr"]], "polars.Expr.and_": [[266, "polars-expr-and"]], "polars.dataframe.groupby.GroupBy.sum": [[248, "polars-dataframe-groupby-groupby-sum"]], "polars.Expr.arccosh": [[272, "polars-expr-arccosh"]], "polars.DataFrame.vstack": [[230, "polars-dataframe-vstack"]], "polars.Expr.arg_unique": [[281, "polars-expr-arg-unique"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[8, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[9, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[10, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[13, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[14, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[15, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[16, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[17, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[18, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[23, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[24, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[25, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[26, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[27, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[28, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[29, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[30, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[31, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[32, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[33, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[34, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[35, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[36, "polars.DataType"]], "__init__() (polars.datatype method)": [[36, "polars.DataType.__init__"]], "date (class in polars)": [[37, "polars.Date"]], "__init__() (polars.date method)": [[37, "polars.Date.__init__"]], "datetime (class in polars)": [[38, "polars.Datetime"]], "__init__() (polars.datetime method)": [[38, "polars.Datetime.__init__"]], "decimal (class in polars)": [[39, "polars.Decimal"]], "__init__() (polars.decimal method)": [[39, "polars.Decimal.__init__"]], "duration (class in polars)": [[40, "polars.Duration"]], "__init__() (polars.duration method)": [[40, "polars.Duration.__init__"]], "float32 (class in polars)": [[41, "polars.Float32"]], "__init__() (polars.float32 method)": [[41, "polars.Float32.__init__"]], "float64 (class in polars)": [[42, "polars.Float64"]], "__init__() (polars.float64 method)": [[42, "polars.Float64.__init__"]], "int16 (class in polars)": [[43, "polars.Int16"]], "__init__() (polars.int16 method)": [[43, "polars.Int16.__init__"]], "int32 (class in polars)": [[44, "polars.Int32"]], "__init__() (polars.int32 method)": [[44, "polars.Int32.__init__"]], "int64 (class in polars)": [[45, "polars.Int64"]], "__init__() (polars.int64 method)": [[45, "polars.Int64.__init__"]], "int8 (class in polars)": [[46, "polars.Int8"]], "__init__() (polars.int8 method)": [[46, "polars.Int8.__init__"]], "list (class in polars)": [[47, "polars.List"]], "__init__() (polars.list method)": [[47, "polars.List.__init__"]], "null (class in polars)": [[48, "polars.Null"]], "__init__() (polars.null method)": [[48, "polars.Null.__init__"]], "object (class in polars)": [[49, "polars.Object"]], "__init__() (polars.object method)": [[49, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[50, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[51, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[52, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[53, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[54, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[55, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[56, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[56, "polars.StringCache.__init__"]], "struct (class in polars)": [[57, "polars.Struct"]], "__init__() (polars.struct method)": [[57, "polars.Struct.__init__"]], "time (class in polars)": [[58, "polars.Time"]], "__init__() (polars.time method)": [[58, "polars.Time.__init__"]], "uint16 (class in polars)": [[59, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[59, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[60, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[60, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[61, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[61, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[62, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[62, "polars.UInt8.__init__"]], "unknown (class in polars)": [[63, "polars.Unknown"]], "__init__() (polars.unknown method)": [[63, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[64, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[64, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[65, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[66, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[67, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[68, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[69, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[70, "polars.arg_where"]], "build_info() (in module polars)": [[71, "polars.build_info"]], "collect_all() (in module polars)": [[72, "polars.collect_all"]], "concat() (in module polars)": [[73, "polars.concat"]], "date_range() (in module polars)": [[74, "polars.date_range"]], "enable_string_cache() (in module polars)": [[75, "polars.enable_string_cache"]], "arrowerror": [[76, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[77, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[78, "polars.exceptions.ComputeError"]], "duplicateerror": [[79, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[80, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[81, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[82, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[83, "polars.exceptions.PolarsPanicError"]], "rowserror": [[84, "polars.exceptions.RowsError"]], "schemaerror": [[85, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[86, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[87, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[88, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[89, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[90, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[91, "polars.from_dataframe"]], "from_dict() (in module polars)": [[92, "polars.from_dict"]], "from_dicts() (in module polars)": [[93, "polars.from_dicts"]], "from_numpy() (in module polars)": [[94, "polars.from_numpy"]], "from_pandas() (in module polars)": [[95, "polars.from_pandas"]], "from_records() (in module polars)": [[96, "polars.from_records"]], "from_repr() (in module polars)": [[97, "polars.from_repr"]], "get_index_type() (in module polars)": [[98, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[99, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[100, "polars.ones"]], "read_avro() (in module polars)": [[101, "polars.read_avro"]], "read_csv() (in module polars)": [[102, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[103, "polars.read_csv_batched"]], "read_database() (in module polars)": [[104, "polars.read_database"]], "read_delta() (in module polars)": [[105, "polars.read_delta"]], "read_excel() (in module polars)": [[106, "polars.read_excel"]], "read_ipc() (in module polars)": [[107, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[108, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[109, "polars.read_json"]], "read_ndjson() (in module polars)": [[110, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[111, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[112, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[113, "polars.scan_csv"]], "scan_delta() (in module polars)": [[114, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[115, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[116, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[117, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[118, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[119, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[120, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[121, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[122, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[122, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[123, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[124, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[125, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[126, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[127, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[128, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[129, "polars.threadpool_size"]], "time_range() (in module polars)": [[130, "polars.time_range"]], "using_string_cache() (in module polars)": [[131, "polars.using_string_cache"]], "zeros() (in module polars)": [[132, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[135, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[136, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[137, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[138, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[139, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[140, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[141, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[142, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[143, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[144, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[145, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[146, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[147, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[148, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[149, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[150, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[151, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[152, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[153, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[154, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[155, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[156, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[157, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[158, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[159, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[160, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[161, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[162, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[163, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[164, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[165, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[166, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[167, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[168, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[169, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[170, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[171, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[172, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[173, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[174, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[175, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[176, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[177, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[178, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[179, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[180, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[181, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[182, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[183, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[184, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[185, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[186, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[187, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[188, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[189, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[190, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[191, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[192, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[193, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[194, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[195, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[196, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[197, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[198, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[199, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[200, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[201, "polars.DataFrame.select"]], "set_sorted() (polars.dataframe method)": [[202, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[203, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[204, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[205, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[206, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[207, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[208, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[209, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[210, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[211, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[212, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[213, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[214, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[215, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[216, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[217, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[218, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[219, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[220, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[221, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[222, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[223, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[224, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[225, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[226, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[227, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[228, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[229, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[230, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[231, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[232, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[233, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[241, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[242, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[243, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[244, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[245, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[246, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[247, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[248, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[249, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[261, "polars.Expr.abs"]], "add() (polars.expr method)": [[262, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[263, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[264, "polars.Expr.alias"]], "all() (polars.expr method)": [[265, "polars.Expr.all"]], "and_() (polars.expr method)": [[266, "polars.Expr.and_"]], "any() (polars.expr method)": [[267, "polars.Expr.any"]], "append() (polars.expr method)": [[268, "polars.Expr.append"]], "apply() (polars.expr method)": [[269, "polars.Expr.apply"]], "approx_unique() (polars.expr method)": [[270, "polars.Expr.approx_unique"]], "arccos() (polars.expr method)": [[271, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[272, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[273, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[274, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[275, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[276, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[277, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[278, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[279, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[280, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[281, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[282, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[283, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[284, "polars.Expr.arr.sum"]], "unique() (polars.expr.arr method)": [[285, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[286, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[287, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[288, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[289, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[290, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[291, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[292, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[293, "polars.Expr.cache"]], "cast() (polars.expr method)": [[294, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[295, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[296, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[297, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[298, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[299, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[300, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[301, "polars.Expr.cosh"]], "count() (polars.expr method)": [[302, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[303, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[304, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[305, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[306, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[307, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[308, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[309, "polars.Expr.diff"]], "dot() (polars.expr method)": [[310, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[311, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[312, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[313, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[314, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[315, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[316, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[317, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[318, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[319, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[320, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[321, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[322, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[323, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[324, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[325, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[326, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[327, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[328, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[329, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[330, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[331, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[332, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[333, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[334, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[335, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[336, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[337, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[338, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[339, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[340, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[341, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[342, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[343, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[344, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[345, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[346, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[347, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[348, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[349, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[350, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[351, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[352, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[353, "polars.Expr.eq"]], "ewm_mean() (polars.expr method)": [[354, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[355, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[356, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[357, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[358, "polars.Expr.exp"]], "explode() (polars.expr method)": [[359, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[360, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[361, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[362, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[363, "polars.Expr.filter"]], "first() (polars.expr method)": [[364, "polars.Expr.first"]], "flatten() (polars.expr method)": [[365, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[366, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[367, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[368, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[369, "polars.Expr.from_json"]], "ge() (polars.expr method)": [[370, "polars.Expr.ge"]], "gt() (polars.expr method)": [[371, "polars.Expr.gt"]], "hash() (polars.expr method)": [[372, "polars.Expr.hash"]], "head() (polars.expr method)": [[373, "polars.Expr.head"]], "implode() (polars.expr method)": [[374, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[375, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[376, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[377, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[378, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[379, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[380, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[381, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[382, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[383, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[384, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[385, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[386, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[387, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[388, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[389, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[390, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[391, "polars.Expr.last"]], "le() (polars.expr method)": [[392, "polars.Expr.le"]], "len() (polars.expr method)": [[393, "polars.Expr.len"]], "limit() (polars.expr method)": [[394, "polars.Expr.limit"]], "arg_max() (polars.expr.list method)": [[395, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[396, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[397, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[398, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[399, "polars.Expr.list.count_match"]], "diff() (polars.expr.list method)": [[400, "polars.Expr.list.diff"]], "eval() (polars.expr.list method)": [[401, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[402, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[403, "polars.Expr.list.first"]], "get() (polars.expr.list method)": [[404, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[405, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[406, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[407, "polars.Expr.list.last"]], "lengths() (polars.expr.list method)": [[408, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[409, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[410, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[411, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[412, "polars.Expr.list.reverse"]], "shift() (polars.expr.list method)": [[413, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[414, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[415, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[416, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[417, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[418, "polars.Expr.list.take"]], "to_struct() (polars.expr.list method)": [[419, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[420, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[421, "polars.Expr.log"]], "log10() (polars.expr method)": [[422, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[423, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[424, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[425, "polars.Expr.lt"]], "map() (polars.expr method)": [[426, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[427, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[428, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[429, "polars.Expr.max"]], "mean() (polars.expr method)": [[430, "polars.Expr.mean"]], "median() (polars.expr method)": [[431, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[432, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[433, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[434, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[435, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[436, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[437, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[438, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[439, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[440, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[441, "polars.Expr.min"]], "mod() (polars.expr method)": [[442, "polars.Expr.mod"]], "mode() (polars.expr method)": [[443, "polars.Expr.mode"]], "mul() (polars.expr method)": [[444, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[445, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[446, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[447, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[448, "polars.Expr.ne"]], "null_count() (polars.expr method)": [[449, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[450, "polars.Expr.or_"]], "over() (polars.expr method)": [[451, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[452, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[453, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[454, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[455, "polars.Expr.prefix"]], "product() (polars.expr method)": [[456, "polars.Expr.product"]], "quantile() (polars.expr method)": [[457, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[458, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[459, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[460, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[461, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[462, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[463, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[464, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[465, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[466, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[467, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[468, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[469, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[470, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[471, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[472, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[473, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[474, "polars.Expr.round"]], "sample() (polars.expr method)": [[475, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[476, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[477, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[478, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[479, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[480, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[481, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[482, "polars.Expr.sign"]], "sin() (polars.expr method)": [[483, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[484, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[485, "polars.Expr.skew"]], "slice() (polars.expr method)": [[486, "polars.Expr.slice"]], "sort() (polars.expr method)": [[487, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[488, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[489, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[490, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[491, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[492, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[493, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[494, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[495, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[496, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[497, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[498, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[499, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[500, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[501, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[502, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[503, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[504, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[505, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[506, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[507, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[508, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[509, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[510, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[511, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[512, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[513, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[514, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[515, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[516, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[517, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[518, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[519, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[520, "polars.Expr.str.to_decimal"]], "to_lowercase() (polars.expr.str method)": [[521, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[522, "polars.Expr.str.to_time"]], "to_uppercase() (polars.expr.str method)": [[523, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[524, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[525, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[526, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[527, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[528, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[529, "polars.Expr.sum"]], "tail() (polars.expr method)": [[530, "polars.Expr.tail"]], "take() (polars.expr method)": [[531, "polars.Expr.take"]], "take_every() (polars.expr method)": [[532, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[533, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[534, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[535, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[536, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[537, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[538, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[539, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[540, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[541, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[542, "polars.Expr.var"]], "where() (polars.expr method)": [[543, "polars.Expr.where"]], "xor() (polars.expr method)": [[544, "polars.Expr.xor"]], "all() (in module polars)": [[545, "polars.all"]], "any() (in module polars)": [[546, "polars.any"]], "apply() (in module polars)": [[547, "polars.apply"]], "approx_unique() (in module polars)": [[548, "polars.approx_unique"]], "arange() (in module polars)": [[549, "polars.arange"]], "arg_sort_by() (in module polars)": [[550, "polars.arg_sort_by"]], "avg() (in module polars)": [[551, "polars.avg"]], "coalesce() (in module polars)": [[552, "polars.coalesce"]], "col() (in module polars)": [[553, "polars.col"]], "concat_list() (in module polars)": [[554, "polars.concat_list"]], "concat_str() (in module polars)": [[555, "polars.concat_str"]], "corr() (in module polars)": [[556, "polars.corr"]], "count() (in module polars)": [[557, "polars.count"]], "cov() (in module polars)": [[558, "polars.cov"]], "cumfold() (in module polars)": [[559, "polars.cumfold"]], "cumreduce() (in module polars)": [[560, "polars.cumreduce"]], "cumsum() (in module polars)": [[561, "polars.cumsum"]], "date() (in module polars)": [[562, "polars.date"]], "datetime() (in module polars)": [[563, "polars.datetime"]], "duration() (in module polars)": [[564, "polars.duration"]], "element() (in module polars)": [[565, "polars.element"]], "exclude() (in module polars)": [[566, "polars.exclude"]], "first() (in module polars)": [[567, "polars.first"]], "fold() (in module polars)": [[568, "polars.fold"]], "format() (in module polars)": [[569, "polars.format"]], "from_epoch() (in module polars)": [[570, "polars.from_epoch"]], "groups() (in module polars)": [[571, "polars.groups"]], "head() (in module polars)": [[572, "polars.head"]], "implode() (in module polars)": [[573, "polars.implode"]], "lit() (in module polars)": [[574, "polars.lit"]], "map() (in module polars)": [[575, "polars.map"]], "max() (in module polars)": [[576, "polars.max"]], "mean() (in module polars)": [[577, "polars.mean"]], "median() (in module polars)": [[578, "polars.median"]], "min() (in module polars)": [[579, "polars.min"]], "n_unique() (in module polars)": [[580, "polars.n_unique"]], "quantile() (in module polars)": [[581, "polars.quantile"]], "reduce() (in module polars)": [[582, "polars.reduce"]], "repeat() (in module polars)": [[583, "polars.repeat"]], "rolling_corr() (in module polars)": [[584, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[585, "polars.rolling_cov"]], "select() (in module polars)": [[586, "polars.select"]], "sql_expr() (in module polars)": [[587, "polars.sql_expr"]], "std() (in module polars)": [[588, "polars.std"]], "struct() (in module polars)": [[589, "polars.struct"]], "sum() (in module polars)": [[590, "polars.sum"]], "tail() (in module polars)": [[591, "polars.tail"]], "time() (in module polars)": [[592, "polars.time"]], "var() (in module polars)": [[593, "polars.var"]], "when() (in module polars)": [[594, "polars.when"]], "bottom_k() (polars.lazyframe method)": [[616, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[617, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[618, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[619, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[620, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[621, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[622, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[623, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[624, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[625, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[626, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[627, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[628, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[629, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[630, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[631, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[632, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[633, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[634, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[635, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[636, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[637, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[638, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[639, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[640, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[641, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[642, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[643, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[644, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[645, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[646, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[647, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[648, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[649, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[650, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[651, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[652, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[653, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[654, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[655, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[656, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[657, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[658, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[659, "polars.LazyFrame.select"]], "set_sorted() (polars.lazyframe method)": [[660, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[661, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[662, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[663, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[664, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[665, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[666, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[667, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[668, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[669, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[670, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[671, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[672, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[673, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[674, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[675, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[676, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[677, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[678, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[679, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[680, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[681, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[682, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[683, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[684, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[685, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[686, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[687, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[688, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[689, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[690, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[691, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[692, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[693, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[694, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[695, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[696, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[703, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[703, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[703, "polars.selectors.by_name"]], "contains() (in module polars.selectors)": [[703, "polars.selectors.contains"]], "datetime() (in module polars.selectors)": [[703, "polars.selectors.datetime"]], "ends_with() (in module polars.selectors)": [[703, "polars.selectors.ends_with"]], "first() (in module polars.selectors)": [[703, "polars.selectors.first"]], "float() (in module polars.selectors)": [[703, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[703, "polars.selectors.integer"]], "last() (in module polars.selectors)": [[703, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[703, "polars.selectors.matches"]], "module": [[703, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[703, "polars.selectors.numeric"]], "polars.selectors": [[703, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[703, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[703, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[703, "polars.selectors.temporal"]], "abs() (polars.series method)": [[705, "polars.Series.abs"]], "alias() (polars.series method)": [[706, "polars.Series.alias"]], "all() (polars.series method)": [[707, "polars.Series.all"]], "any() (polars.series method)": [[708, "polars.Series.any"]], "append() (polars.series method)": [[709, "polars.Series.append"]], "apply() (polars.series method)": [[710, "polars.Series.apply"]], "arccos() (polars.series method)": [[711, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[712, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[713, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[714, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[715, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[716, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[717, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[718, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[719, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[720, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[721, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[722, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[723, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[724, "polars.Series.arr.sum"]], "unique() (polars.series.arr method)": [[725, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[726, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[727, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[728, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[729, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[730, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[731, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[732, "polars.Series.cast"]], "cat (polars.series attribute)": [[733, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[734, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[735, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[736, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[737, "polars.Series.clear"]], "clip() (polars.series method)": [[738, "polars.Series.clip"]], "clip_max() (polars.series method)": [[739, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[740, "polars.Series.clip_min"]], "clone() (polars.series method)": [[741, "polars.Series.clone"]], "cos() (polars.series method)": [[742, "polars.Series.cos"]], "cosh() (polars.series method)": [[743, "polars.Series.cosh"]], "cummax() (polars.series method)": [[744, "polars.Series.cummax"]], "cummin() (polars.series method)": [[745, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[746, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[747, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[748, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[749, "polars.Series.cut"]], "describe() (polars.series method)": [[750, "polars.Series.describe"]], "diff() (polars.series method)": [[751, "polars.Series.diff"]], "dot() (polars.series method)": [[752, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[753, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[754, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[755, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[756, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[757, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[758, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[759, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[760, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[761, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[762, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[763, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[764, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[765, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[766, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[767, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[768, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[769, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[770, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[771, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[772, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[773, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[774, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[775, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[776, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[777, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[778, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[779, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[780, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[781, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[782, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[783, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[784, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[785, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[786, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[787, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[788, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[789, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[790, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[791, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[792, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[793, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[794, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[795, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[796, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[797, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[798, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[799, "polars.Series.dtype"]], "entropy() (polars.series method)": [[800, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[801, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[802, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[803, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[804, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[805, "polars.Series.exp"]], "explode() (polars.series method)": [[806, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[807, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[808, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[809, "polars.Series.fill_null"]], "filter() (polars.series method)": [[810, "polars.Series.filter"]], "flags (polars.series attribute)": [[811, "polars.Series.flags"]], "floor() (polars.series method)": [[812, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[813, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[814, "polars.Series.has_validity"]], "hash() (polars.series method)": [[815, "polars.Series.hash"]], "head() (polars.series method)": [[816, "polars.Series.head"]], "hist() (polars.series method)": [[817, "polars.Series.hist"]], "implode() (polars.series method)": [[818, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[819, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[820, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[821, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[822, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[823, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[824, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[825, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[826, "polars.Series.is_first"]], "is_float() (polars.series method)": [[827, "polars.Series.is_float"]], "is_in() (polars.series method)": [[828, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[829, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[830, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[831, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[832, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[833, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[834, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[835, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[836, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[837, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[838, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[839, "polars.Series.is_utf8"]], "item() (polars.series method)": [[840, "polars.Series.item"]], "kurtosis() (polars.series method)": [[841, "polars.Series.kurtosis"]], "len() (polars.series method)": [[842, "polars.Series.len"]], "limit() (polars.series method)": [[843, "polars.Series.limit"]], "list (polars.series attribute)": [[844, "polars.Series.list"]], "arg_max() (polars.series.list method)": [[845, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[846, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[847, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[848, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[849, "polars.Series.list.count_match"]], "diff() (polars.series.list method)": [[850, "polars.Series.list.diff"]], "eval() (polars.series.list method)": [[851, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[852, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[853, "polars.Series.list.first"]], "get() (polars.series.list method)": [[854, "polars.Series.list.get"]], "head() (polars.series.list method)": [[855, "polars.Series.list.head"]], "join() (polars.series.list method)": [[856, "polars.Series.list.join"]], "last() (polars.series.list method)": [[857, "polars.Series.list.last"]], "lengths() (polars.series.list method)": [[858, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[859, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[860, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[861, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[862, "polars.Series.list.reverse"]], "shift() (polars.series.list method)": [[863, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[864, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[865, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[866, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[867, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[868, "polars.Series.list.take"]], "to_struct() (polars.series.list method)": [[869, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[870, "polars.Series.list.unique"]], "log() (polars.series method)": [[871, "polars.Series.log"]], "log10() (polars.series method)": [[872, "polars.Series.log10"]], "log1p() (polars.series method)": [[873, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[874, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[875, "polars.Series.map_dict"]], "max() (polars.series method)": [[876, "polars.Series.max"]], "mean() (polars.series method)": [[877, "polars.Series.mean"]], "median() (polars.series method)": [[878, "polars.Series.median"]], "min() (polars.series method)": [[879, "polars.Series.min"]], "mode() (polars.series method)": [[880, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[881, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[882, "polars.Series.n_unique"]], "name (polars.series attribute)": [[883, "polars.Series.name"]], "nan_max() (polars.series method)": [[884, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[885, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[886, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[887, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[888, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[889, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[890, "polars.Series.peak_min"]], "product() (polars.series method)": [[891, "polars.Series.product"]], "qcut() (polars.series method)": [[892, "polars.Series.qcut"]], "quantile() (polars.series method)": [[893, "polars.Series.quantile"]], "rank() (polars.series method)": [[894, "polars.Series.rank"]], "rechunk() (polars.series method)": [[895, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[896, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[897, "polars.Series.rename"]], "reshape() (polars.series method)": [[898, "polars.Series.reshape"]], "reverse() (polars.series method)": [[899, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[900, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[901, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[902, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[903, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[904, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[905, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[906, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[907, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[908, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[909, "polars.Series.rolling_var"]], "round() (polars.series method)": [[910, "polars.Series.round"]], "sample() (polars.series method)": [[911, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[912, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[913, "polars.Series.series_equal"]], "set() (polars.series method)": [[914, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[915, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[916, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[917, "polars.Series.shape"]], "shift() (polars.series method)": [[918, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[919, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[920, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[921, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[922, "polars.Series.shuffle"]], "sign() (polars.series method)": [[923, "polars.Series.sign"]], "sin() (polars.series method)": [[924, "polars.Series.sin"]], "sinh() (polars.series method)": [[925, "polars.Series.sinh"]], "skew() (polars.series method)": [[926, "polars.Series.skew"]], "slice() (polars.series method)": [[927, "polars.Series.slice"]], "sort() (polars.series method)": [[928, "polars.Series.sort"]], "sqrt() (polars.series method)": [[929, "polars.Series.sqrt"]], "std() (polars.series method)": [[930, "polars.Series.std"]], "str (polars.series attribute)": [[931, "polars.Series.str"]], "concat() (polars.series.str method)": [[932, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[933, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[934, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[935, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[936, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[937, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[938, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[939, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[940, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[941, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[942, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[943, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[944, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[945, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[946, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[947, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[948, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[949, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[950, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[951, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[952, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[953, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[954, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[955, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[956, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[957, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[958, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[959, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[960, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[961, "polars.Series.str.to_decimal"]], "to_lowercase() (polars.series.str method)": [[962, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[963, "polars.Series.str.to_time"]], "to_uppercase() (polars.series.str method)": [[964, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[965, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[966, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[967, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[968, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[969, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[970, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[971, "polars.Series.sum"]], "tail() (polars.series method)": [[972, "polars.Series.tail"]], "take() (polars.series method)": [[973, "polars.Series.take"]], "take_every() (polars.series method)": [[974, "polars.Series.take_every"]], "tan() (polars.series method)": [[975, "polars.Series.tan"]], "tanh() (polars.series method)": [[976, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[977, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[978, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[979, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[980, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[981, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[982, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[983, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[984, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[985, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[986, "polars.Series.top_k"]], "unique() (polars.series method)": [[987, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[988, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[989, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[990, "polars.Series.value_counts"]], "var() (polars.series method)": [[991, "polars.Series.var"]], "view() (polars.series method)": [[992, "polars.Series.view"]], "zip_with() (polars.series method)": [[993, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1009, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1009, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1009, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1009, "polars.SQLContext.__init__"]]}})