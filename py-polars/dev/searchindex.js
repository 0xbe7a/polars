Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_many", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_dummies", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.SQLContext.register_many", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_dummies", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.any", "polars.apply", "polars.approx_unique", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 88, 98, 116, 128, 131, 132, 233, 251, 265, 590, 671, 696, 982], "refer": [0, 29, 100, 101, 104, 137, 251, 361, 364, 419, 448, 488, 507, 508, 509, 511, 590, 799, 802, 876, 940, 941, 942, 944, 982], "input": [0, 61, 90, 100, 101, 104, 132, 133, 144, 155, 183, 197, 204, 218, 228, 231, 251, 258, 265, 375, 394, 413, 428, 441, 478, 533, 534, 535, 536, 539, 541, 542, 543, 544, 550, 555, 556, 564, 565, 568, 579, 580, 590, 601, 604, 614, 621, 646, 654, 659, 665, 669, 687, 696, 830, 854, 855, 857, 982], "output": [0, 25, 27, 29, 30, 31, 32, 71, 104, 132, 156, 157, 168, 178, 185, 194, 197, 224, 228, 251, 260, 265, 417, 418, 427, 530, 536, 545, 564, 577, 590, 601, 622, 623, 632, 636, 637, 646, 665, 668, 671, 687, 696, 971, 982], "seri": [0, 1, 22, 62, 63, 64, 65, 66, 69, 70, 71, 87, 89, 92, 94, 98, 119, 123, 128, 132, 140, 148, 150, 152, 153, 158, 161, 162, 164, 166, 174, 175, 179, 190, 191, 206, 210, 213, 216, 217, 232, 251, 264, 265, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 280, 285, 288, 289, 296, 297, 300, 301, 302, 305, 313, 314, 318, 319, 331, 333, 337, 340, 344, 346, 348, 353, 357, 358, 360, 365, 368, 377, 378, 384, 392, 394, 396, 397, 398, 399, 400, 402, 403, 404, 415, 417, 444, 448, 449, 450, 451, 452, 454, 466, 467, 470, 473, 474, 481, 496, 501, 507, 508, 509, 511, 514, 520, 521, 522, 523, 529, 534, 535, 536, 537, 538, 540, 546, 548, 549, 550, 556, 557, 559, 561, 563, 564, 565, 566, 567, 568, 569, 572, 573, 576, 578, 579, 580, 581, 582, 590, 601, 618, 670, 687, 976, 978, 981, 983, 986, 987, 988, 990], "datafram": [0, 1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 49, 52, 61, 62, 63, 64, 65, 66, 68, 69, 70, 72, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 113, 114, 115, 118, 120, 121, 249, 250, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 298, 299, 302, 303, 304, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 561, 564, 565, 566, 567, 568, 569, 570, 572, 576, 577, 578, 579, 580, 581, 582, 583, 590, 601, 608, 610, 614, 615, 619, 622, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 640, 641, 644, 651, 652, 653, 654, 655, 656, 660, 661, 662, 663, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 695, 696, 715, 743, 758, 759, 795, 826, 874, 924, 936, 937, 951, 960, 961, 971, 982, 990], "lazyfram": [0, 1, 48, 50, 51, 61, 62, 63, 64, 65, 68, 69, 111, 112, 113, 114, 115, 116, 118, 123, 172, 184, 251, 302, 381, 590, 601, 686, 989, 990], "express": [0, 66, 68, 71, 120, 123, 125, 132, 133, 144, 146, 148, 155, 181, 185, 193, 197, 204, 218, 228, 231, 233, 251, 258, 260, 261, 262, 264, 265, 276, 282, 284, 302, 311, 315, 316, 317, 320, 326, 328, 332, 350, 351, 354, 361, 371, 375, 378, 381, 385, 387, 388, 392, 394, 398, 401, 406, 409, 410, 415, 416, 417, 418, 419, 423, 424, 425, 426, 427, 428, 432, 434, 438, 440, 441, 443, 444, 445, 446, 451, 465, 466, 467, 469, 471, 476, 478, 482, 483, 488, 489, 490, 491, 497, 498, 516, 517, 520, 526, 527, 529, 532, 533, 534, 535, 538, 539, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 563, 564, 565, 568, 570, 572, 573, 574, 575, 576, 577, 579, 580, 583, 589, 601, 604, 608, 613, 614, 615, 618, 621, 640, 646, 649, 650, 651, 652, 654, 659, 665, 666, 669, 671, 687, 696, 713, 715, 747, 748, 749, 757, 766, 788, 789, 792, 816, 830, 894, 901, 915, 916, 921, 922, 923, 924, 930, 931, 982], "extend": [0, 90, 251, 378, 590, 601, 695, 816, 982], "function": [0, 29, 62, 63, 64, 65, 70, 88, 94, 100, 101, 104, 111, 121, 132, 137, 143, 150, 177, 184, 185, 215, 219, 222, 223, 233, 251, 261, 265, 302, 326, 358, 372, 373, 374, 417, 418, 441, 443, 454, 455, 456, 457, 458, 459, 461, 462, 463, 475, 524, 534, 535, 536, 548, 549, 550, 556, 557, 559, 564, 565, 568, 572, 580, 590, 601, 632, 636, 639, 662, 671, 687, 696, 733, 757, 796, 810, 811, 812, 813, 826, 874, 882, 896, 897, 903, 908, 965, 982, 990], "data": [0, 1, 5, 15, 18, 28, 29, 30, 34, 52, 61, 62, 64, 69, 72, 77, 78, 82, 84, 87, 88, 89, 90, 91, 92, 93, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 118, 119, 121, 122, 123, 125, 131, 132, 134, 135, 145, 154, 155, 156, 168, 169, 170, 172, 183, 184, 188, 193, 194, 202, 209, 214, 215, 228, 230, 249, 251, 262, 265, 303, 312, 331, 359, 368, 371, 387, 388, 393, 400, 402, 409, 416, 438, 440, 448, 464, 465, 475, 488, 489, 507, 508, 509, 511, 524, 526, 527, 533, 542, 563, 577, 590, 601, 606, 607, 615, 621, 622, 639, 651, 652, 665, 687, 695, 696, 734, 741, 746, 750, 763, 765, 806, 826, 876, 892, 893, 903, 908, 940, 941, 942, 944, 963, 964, 965, 966, 968, 973, 981, 982], "type": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 71, 77, 87, 89, 90, 91, 92, 93, 98, 100, 101, 103, 104, 111, 112, 117, 118, 119, 122, 123, 128, 132, 150, 154, 156, 157, 158, 169, 209, 215, 217, 220, 251, 265, 289, 302, 312, 313, 315, 316, 317, 333, 337, 340, 344, 346, 348, 353, 357, 360, 375, 389, 396, 398, 399, 419, 451, 502, 503, 504, 507, 524, 536, 542, 551, 552, 553, 555, 556, 563, 590, 601, 608, 613, 615, 622, 623, 640, 650, 651, 652, 660, 687, 720, 733, 741, 743, 747, 748, 749, 767, 771, 774, 781, 783, 786, 791, 795, 798, 824, 903, 935, 936, 937, 940, 963, 964, 966, 974, 982], "config": [0, 61, 197, 228, 251, 553, 601, 646, 665, 687], "except": [0, 159, 171, 173, 207, 251, 555, 601, 628, 687, 825, 852, 953, 964, 973, 982], "test": [0, 104, 601, 624, 631, 687], "util": [0, 94, 559, 601, 615, 687], "sql": [0, 28, 48, 49, 102, 170, 251, 601], "These": [1, 29, 129, 251, 365, 589, 803], "allow": [1, 29, 52, 77, 88, 111, 113, 114, 115, 116, 123, 125, 131, 168, 171, 172, 193, 194, 195, 215, 220, 230, 251, 354, 361, 364, 450, 465, 507, 508, 509, 590, 627, 628, 632, 636, 651, 652, 660, 666, 687, 792, 799, 802, 878, 893, 895, 940, 941, 942, 965, 982, 990], "you": [1, 12, 29, 33, 61, 87, 89, 90, 91, 93, 98, 100, 101, 104, 105, 109, 111, 118, 128, 129, 132, 141, 145, 156, 157, 168, 171, 181, 193, 194, 211, 214, 219, 233, 251, 265, 284, 302, 315, 316, 317, 350, 351, 357, 361, 364, 381, 394, 417, 419, 450, 455, 456, 457, 458, 459, 461, 462, 463, 492, 495, 507, 509, 538, 548, 557, 590, 608, 611, 622, 623, 624, 628, 631, 650, 652, 671, 687, 695, 696, 715, 747, 748, 749, 788, 789, 795, 799, 802, 830, 878, 925, 928, 940, 942, 964, 973, 982, 990], "regist": [1, 51, 62, 63, 64, 65, 124, 126], "custom": [1, 29, 62, 63, 64, 65, 124, 125, 126, 132, 233, 251, 265, 302, 361, 364, 417, 454, 536, 564, 590, 632, 671, 687, 696, 733, 799, 802, 882, 982, 990], "dedic": [1, 88, 168, 194, 251], "namespac": [1, 250, 589, 601, 686], "underli": [1, 73, 80, 87, 89, 90, 91, 93, 109, 120, 123, 125, 145, 168, 169, 194, 209, 251, 306, 331, 332, 336, 339, 341, 342, 343, 345, 347, 349, 352, 355, 356, 357, 359, 366, 367, 368, 369, 450, 464, 482, 484, 590, 687, 695, 736, 765, 766, 770, 773, 775, 776, 780, 782, 785, 787, 790, 793, 794, 795, 797, 804, 805, 806, 807, 878, 892, 903, 915, 917, 959, 964, 982], "polar": [1, 251, 589, 590, 595, 601, 687, 982, 989], "class": [1, 2, 3, 4, 14, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 92, 120, 121, 215, 251, 590, 595, 601, 687, 963, 964, 982, 989], "without": [1, 5, 70, 94, 103, 106, 110, 112, 116, 222, 223, 251, 265, 326, 358, 455, 456, 457, 458, 459, 461, 462, 463, 576, 590, 662, 687, 757, 763, 796, 826, 874, 982], "requir": [1, 29, 33, 92, 118, 119, 137, 193, 215, 251, 303, 372, 373, 374, 470, 507, 508, 509, 527, 590, 652, 687, 734, 811, 812, 813, 902, 940, 941, 942, 964, 965, 968, 982], "subclass": [1, 251], "mixin": 1, "expr": [1, 61, 62, 63, 64, 65, 66, 69, 71, 144, 146, 148, 170, 171, 181, 185, 193, 197, 228, 251, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 590, 591, 592, 595, 596, 597, 598, 614, 616, 618, 627, 628, 641, 646, 649, 665, 687, 713, 715, 757, 766, 817, 901, 915, 919, 938, 954, 982], "ar": [1, 5, 10, 14, 17, 25, 29, 33, 52, 71, 72, 79, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 116, 118, 119, 121, 123, 129, 131, 132, 133, 137, 141, 143, 146, 150, 155, 156, 157, 168, 171, 172, 177, 178, 183, 193, 194, 197, 198, 204, 210, 215, 218, 223, 224, 228, 231, 251, 261, 302, 322, 324, 325, 329, 330, 358, 365, 370, 372, 373, 374, 394, 396, 398, 399, 400, 402, 403, 404, 407, 419, 441, 448, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 472, 475, 477, 478, 492, 495, 496, 518, 534, 535, 538, 539, 541, 543, 544, 545, 550, 565, 568, 577, 579, 580, 583, 584, 586, 589, 590, 591, 592, 595, 596, 597, 598, 601, 604, 611, 616, 621, 622, 623, 624, 628, 631, 632, 636, 637, 640, 643, 646, 647, 651, 652, 654, 659, 662, 665, 666, 669, 687, 693, 695, 733, 755, 756, 796, 803, 809, 810, 811, 812, 813, 823, 830, 834, 837, 838, 840, 841, 842, 843, 850, 876, 880, 882, 888, 905, 908, 925, 928, 929, 952, 964, 965, 973, 976, 978, 982, 983, 986, 987, 988, 990], "all": [1, 7, 14, 17, 22, 25, 29, 34, 68, 69, 71, 87, 90, 92, 93, 95, 100, 101, 103, 104, 105, 109, 111, 113, 114, 120, 121, 125, 138, 141, 147, 159, 164, 166, 168, 169, 172, 173, 177, 180, 181, 188, 193, 194, 203, 207, 212, 220, 222, 224, 251, 262, 263, 264, 284, 289, 299, 302, 304, 320, 326, 330, 375, 386, 389, 391, 393, 396, 399, 403, 404, 406, 410, 417, 418, 433, 439, 445, 448, 453, 470, 476, 478, 483, 489, 491, 494, 497, 498, 500, 506, 517, 530, 542, 550, 555, 557, 572, 579, 580, 583, 590, 595, 601, 608, 611, 613, 615, 617, 632, 636, 640, 650, 653, 660, 666, 687, 715, 720, 730, 733, 757, 759, 763, 825, 832, 847, 852, 876, 909, 916, 922, 924, 927, 930, 931, 933, 939, 953, 982, 990], "support": [1, 29, 33, 69, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 104, 112, 120, 125, 129, 131, 168, 169, 194, 203, 204, 211, 215, 251, 297, 441, 476, 478, 501, 542, 590, 595, 653, 654, 687, 728, 909, 934, 965, 982], "target": [1, 29, 67, 251, 365, 488, 507, 508, 509, 921, 940, 941, 942], "thi": [1, 5, 7, 12, 25, 27, 29, 31, 33, 37, 50, 51, 52, 61, 68, 69, 70, 72, 87, 89, 90, 91, 92, 93, 94, 97, 98, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 131, 132, 137, 141, 142, 143, 145, 150, 155, 156, 157, 158, 162, 164, 166, 167, 168, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 183, 186, 187, 188, 193, 194, 195, 197, 201, 203, 205, 206, 209, 211, 214, 215, 219, 220, 222, 223, 224, 225, 226, 228, 229, 233, 234, 250, 251, 261, 264, 265, 266, 275, 284, 285, 289, 298, 302, 303, 310, 311, 313, 320, 326, 331, 342, 350, 351, 354, 357, 358, 361, 364, 368, 377, 392, 393, 394, 398, 410, 414, 415, 417, 423, 424, 425, 426, 427, 428, 436, 437, 441, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 461, 462, 463, 465, 467, 469, 470, 471, 476, 477, 478, 488, 493, 494, 499, 500, 506, 507, 509, 513, 525, 527, 528, 529, 530, 534, 535, 537, 538, 543, 546, 548, 550, 556, 557, 559, 565, 568, 576, 580, 590, 601, 602, 605, 608, 611, 613, 615, 621, 622, 623, 625, 628, 632, 636, 637, 640, 643, 646, 649, 650, 651, 652, 653, 660, 662, 665, 666, 667, 668, 671, 672, 686, 687, 695, 696, 705, 715, 716, 720, 729, 734, 740, 743, 757, 763, 765, 766, 776, 788, 789, 792, 795, 796, 799, 802, 806, 810, 815, 822, 823, 826, 831, 836, 837, 839, 844, 846, 848, 849, 851, 856, 858, 859, 860, 861, 863, 864, 866, 867, 869, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 886, 889, 890, 891, 893, 896, 897, 898, 901, 902, 903, 904, 909, 910, 912, 921, 926, 927, 932, 933, 939, 940, 942, 946, 947, 951, 952, 959, 961, 963, 964, 965, 967, 968, 970, 972, 973, 982, 990], "featur": [1, 33, 37, 52, 67, 251], "i": [1, 5, 12, 14, 27, 29, 30, 31, 32, 37, 52, 61, 66, 67, 68, 69, 70, 71, 74, 76, 77, 79, 83, 85, 87, 88, 89, 90, 91, 92, 93, 97, 100, 101, 102, 103, 105, 109, 111, 112, 113, 114, 115, 116, 120, 121, 122, 123, 125, 127, 131, 132, 141, 143, 151, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 169, 171, 172, 173, 175, 177, 178, 181, 183, 184, 185, 193, 194, 195, 203, 204, 205, 206, 207, 209, 215, 219, 220, 222, 223, 224, 225, 233, 234, 250, 251, 258, 261, 263, 264, 265, 266, 276, 284, 287, 297, 301, 302, 311, 320, 326, 332, 341, 354, 358, 361, 365, 372, 373, 374, 377, 389, 392, 394, 407, 414, 417, 419, 423, 426, 428, 441, 448, 450, 452, 455, 456, 457, 458, 459, 461, 462, 463, 465, 466, 467, 471, 472, 475, 476, 477, 478, 480, 482, 483, 488, 489, 491, 493, 494, 496, 497, 499, 500, 501, 504, 506, 507, 508, 509, 511, 513, 530, 531, 534, 535, 537, 538, 542, 543, 545, 546, 548, 549, 550, 557, 563, 565, 568, 570, 574, 575, 576, 577, 578, 580, 582, 583, 590, 608, 611, 613, 615, 621, 622, 623, 626, 628, 630, 632, 636, 637, 640, 650, 651, 652, 653, 654, 655, 660, 662, 663, 668, 671, 672, 687, 694, 695, 696, 715, 718, 728, 732, 733, 757, 766, 775, 792, 796, 799, 803, 810, 811, 812, 813, 815, 823, 824, 825, 826, 829, 831, 833, 839, 844, 845, 846, 848, 849, 850, 852, 874, 876, 878, 880, 893, 894, 895, 896, 897, 898, 904, 905, 908, 909, 912, 915, 916, 921, 922, 924, 926, 927, 929, 930, 932, 933, 934, 937, 939, 940, 941, 942, 944, 946, 953, 959, 964, 965, 971, 972, 973, 982, 990], "primarili": 1, "intend": 1, "us": [1, 9, 11, 12, 17, 22, 23, 27, 28, 29, 33, 52, 61, 70, 71, 88, 90, 91, 93, 95, 96, 98, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 120, 121, 122, 123, 124, 125, 127, 128, 132, 139, 141, 146, 147, 150, 155, 156, 157, 164, 166, 168, 169, 171, 175, 177, 180, 181, 184, 185, 193, 195, 197, 204, 205, 206, 212, 213, 215, 219, 220, 222, 223, 224, 225, 228, 231, 233, 251, 259, 265, 266, 276, 284, 302, 306, 307, 313, 326, 329, 330, 357, 361, 364, 368, 370, 372, 373, 374, 380, 381, 393, 394, 407, 417, 419, 422, 441, 448, 450, 452, 455, 456, 457, 458, 459, 461, 462, 463, 465, 467, 470, 471, 475, 477, 478, 480, 482, 484, 485, 486, 488, 489, 492, 493, 497, 499, 501, 503, 505, 507, 508, 509, 511, 531, 534, 535, 536, 537, 538, 542, 544, 545, 548, 550, 557, 559, 563, 565, 568, 570, 573, 574, 575, 576, 577, 578, 579, 580, 582, 589, 590, 601, 608, 610, 611, 616, 617, 621, 622, 623, 624, 628, 630, 631, 636, 646, 652, 654, 655, 660, 662, 663, 665, 669, 671, 687, 696, 715, 733, 736, 737, 743, 757, 795, 799, 802, 806, 809, 811, 812, 813, 817, 818, 823, 826, 830, 850, 857, 876, 878, 880, 893, 896, 897, 898, 902, 904, 908, 912, 915, 917, 918, 921, 922, 925, 926, 930, 932, 934, 936, 940, 941, 942, 944, 954, 960, 962, 963, 964, 965, 972, 973, 982, 990], "librari": [1, 73, 80, 417, 590, 990], "author": 1, "domain": [1, 489, 922], "specif": [1, 25, 29, 87, 89, 91, 93, 100, 102, 103, 112, 122, 123, 168, 251, 361, 364, 454, 507, 508, 509, 511, 590, 687, 799, 802, 882, 940, 941, 942, 944, 982, 990], "capabl": [1, 29, 251], "which": [1, 17, 26, 27, 29, 30, 31, 32, 33, 61, 62, 63, 64, 65, 90, 100, 101, 102, 103, 104, 111, 112, 118, 124, 126, 133, 141, 145, 156, 157, 214, 218, 220, 251, 261, 302, 361, 378, 394, 396, 399, 400, 402, 403, 404, 428, 455, 456, 457, 458, 459, 461, 462, 463, 496, 583, 590, 604, 611, 613, 622, 623, 651, 652, 659, 660, 668, 687, 695, 733, 799, 816, 830, 834, 838, 840, 841, 842, 843, 896, 929, 982, 990], "mai": [1, 33, 37, 69, 70, 87, 89, 90, 91, 93, 100, 103, 105, 112, 113, 116, 132, 143, 145, 171, 200, 201, 215, 222, 223, 251, 265, 296, 301, 302, 326, 331, 342, 358, 427, 455, 456, 457, 458, 459, 461, 462, 463, 468, 469, 507, 509, 548, 549, 557, 572, 590, 628, 632, 648, 649, 652, 662, 667, 671, 687, 695, 696, 727, 732, 757, 765, 776, 796, 810, 826, 874, 900, 901, 940, 942, 982, 990], "exist": [1, 28, 29, 103, 112, 123, 228, 251, 332, 365, 665, 687, 766], "belong": [1, 156, 251, 622, 687], "core": [1, 215, 251, 990], "cannot": [1, 88, 100, 101, 104, 105, 118, 127, 132, 195, 233, 251, 306, 419, 465, 484, 503, 515, 590, 650, 671, 687, 696, 736, 893, 917, 936, 982], "overrid": [1, 29, 87, 89, 90, 91, 92, 93, 100, 120, 121, 125, 127, 251, 419, 590, 687, 857, 982], "str": [1, 6, 8, 13, 14, 17, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 48, 49, 50, 51, 52, 61, 62, 63, 64, 65, 67, 70, 71, 72, 87, 89, 90, 91, 93, 94, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 121, 123, 124, 125, 126, 133, 136, 138, 139, 140, 141, 142, 143, 144, 148, 149, 150, 152, 154, 155, 156, 157, 159, 161, 164, 166, 167, 168, 170, 171, 174, 175, 176, 177, 178, 179, 181, 183, 185, 187, 189, 190, 191, 192, 193, 194, 195, 198, 200, 201, 203, 204, 205, 206, 207, 210, 211, 212, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 258, 259, 260, 265, 280, 281, 282, 287, 288, 289, 297, 300, 302, 328, 333, 354, 357, 358, 361, 364, 365, 375, 379, 381, 383, 392, 394, 401, 418, 419, 427, 429, 441, 443, 445, 451, 453, 455, 456, 457, 458, 459, 461, 462, 463, 469, 470, 477, 478, 514, 515, 517, 520, 532, 533, 534, 536, 537, 540, 542, 544, 545, 546, 547, 548, 549, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 581, 582, 590, 596, 604, 608, 609, 610, 611, 613, 614, 615, 618, 620, 621, 622, 623, 625, 627, 628, 636, 637, 640, 642, 643, 644, 647, 649, 650, 651, 652, 653, 654, 659, 660, 661, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 692, 712, 713, 720, 733, 741, 758, 759, 767, 792, 795, 796, 799, 802, 803, 818, 857, 866, 867, 874, 879, 896, 897, 947, 949, 960, 961, 962, 982, 986, 990], "dt": [1, 61, 71, 157, 251, 553, 598, 623, 687, 988], "attempt": [1, 214, 251], "do": [1, 29, 61, 68, 111, 145, 171, 209, 219, 222, 251, 284, 326, 494, 500, 506, 590, 608, 613, 628, 632, 640, 650, 651, 652, 687, 695, 715, 757, 927, 933, 939, 964, 973, 982], "so": [1, 52, 102, 111, 127, 154, 156, 157, 185, 251, 276, 287, 302, 311, 394, 494, 500, 506, 590, 622, 623, 687, 718, 927, 933, 939], "rais": [1, 13, 17, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 118, 119, 193, 251, 301, 306, 357, 427, 482, 484, 496, 507, 508, 509, 511, 563, 732, 736, 795, 915, 917, 929, 940, 941, 942, 944, 964, 973, 982], "an": [1, 5, 25, 28, 29, 37, 62, 64, 65, 66, 68, 71, 73, 77, 78, 80, 87, 100, 101, 102, 103, 104, 106, 109, 111, 113, 121, 123, 125, 132, 134, 135, 143, 146, 148, 150, 156, 157, 168, 169, 171, 181, 185, 191, 193, 209, 214, 222, 228, 233, 251, 260, 261, 265, 282, 284, 287, 301, 302, 306, 312, 315, 316, 317, 321, 322, 323, 324, 325, 326, 332, 357, 361, 368, 378, 381, 406, 417, 418, 428, 446, 454, 455, 456, 457, 458, 459, 461, 462, 463, 482, 484, 489, 507, 508, 509, 511, 520, 526, 534, 535, 538, 542, 550, 554, 559, 563, 565, 568, 572, 573, 576, 579, 580, 583, 590, 601, 606, 607, 608, 613, 615, 618, 622, 623, 628, 632, 640, 650, 665, 666, 671, 687, 696, 713, 715, 718, 732, 736, 741, 746, 747, 748, 749, 750, 753, 754, 755, 756, 757, 766, 795, 799, 806, 810, 816, 839, 882, 883, 884, 885, 886, 887, 889, 890, 891, 896, 897, 915, 917, 922, 940, 941, 942, 944, 964, 973, 982], "attributeerror": 1, "howev": [1, 90, 143, 251, 810, 982], "can": [1, 12, 29, 61, 71, 78, 90, 100, 101, 104, 105, 109, 111, 113, 115, 116, 121, 122, 123, 125, 127, 129, 132, 133, 142, 150, 156, 157, 164, 166, 181, 185, 197, 204, 214, 218, 219, 222, 228, 233, 251, 265, 284, 302, 322, 325, 326, 350, 351, 354, 357, 365, 378, 393, 394, 427, 433, 450, 455, 456, 457, 458, 459, 461, 462, 463, 467, 470, 472, 475, 478, 491, 494, 500, 506, 507, 530, 538, 539, 542, 557, 559, 583, 589, 590, 604, 608, 613, 622, 623, 646, 654, 659, 665, 667, 671, 687, 696, 715, 733, 757, 788, 789, 792, 795, 803, 816, 830, 862, 878, 896, 897, 898, 902, 905, 908, 924, 927, 933, 939, 940, 982], "other": [1, 17, 29, 71, 100, 101, 104, 111, 118, 119, 141, 145, 151, 170, 171, 177, 178, 193, 197, 223, 228, 249, 251, 258, 262, 264, 276, 280, 315, 316, 317, 328, 371, 385, 387, 388, 394, 398, 409, 416, 419, 423, 426, 432, 434, 438, 440, 478, 516, 524, 526, 533, 534, 535, 541, 543, 544, 550, 565, 568, 579, 580, 590, 601, 611, 627, 628, 636, 637, 646, 662, 665, 666, 687, 695, 711, 747, 748, 749, 761, 837, 895, 966, 974, 981, 982], "onli": [1, 17, 25, 29, 52, 61, 67, 69, 100, 101, 103, 104, 105, 109, 111, 112, 113, 114, 115, 123, 125, 129, 132, 141, 156, 157, 168, 171, 175, 194, 206, 211, 213, 224, 251, 259, 265, 276, 311, 314, 315, 316, 317, 354, 375, 384, 450, 528, 573, 590, 608, 611, 622, 623, 624, 628, 631, 687, 744, 747, 748, 749, 792, 821, 839, 878, 959, 962, 982, 990], "gener": [1, 95, 102, 120, 121, 122, 123, 125, 137, 185, 195, 212, 219, 251, 465, 471, 590, 687, 893, 904, 960, 982, 990], "userwarn": 1, "pl": [1, 7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32, 33, 52, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 105, 111, 112, 116, 117, 118, 119, 120, 121, 122, 123, 125, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 576, 577, 578, 579, 580, 581, 582, 583, 590, 602, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 714, 715, 716, 719, 720, 722, 727, 728, 729, 731, 733, 740, 741, 743, 744, 745, 746, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 813, 816, 817, 818, 819, 821, 824, 825, 826, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 851, 856, 857, 858, 859, 860, 861, 862, 863, 864, 870, 871, 872, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 900, 904, 905, 906, 907, 909, 910, 911, 912, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 944, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 982, 990], "register_expr_namespac": [1, 62, 64, 65], "greet": 1, "def": [1, 62, 63, 64, 65, 121, 122, 123, 125, 184, 219, 251, 258, 443, 489, 533, 564, 590, 639, 687, 922, 990], "__init__": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 120], "self": [1, 62, 63, 64, 65, 68, 132, 133, 134, 135, 137, 138, 139, 141, 144, 145, 146, 147, 148, 155, 156, 157, 159, 161, 162, 163, 170, 171, 173, 174, 175, 176, 177, 178, 179, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 304, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 590, 604, 605, 606, 607, 608, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 687, 695, 696, 741, 750, 819, 827, 856, 857, 868, 871, 872, 877, 896, 897, 898, 910, 970, 974, 982], "_expr": [1, 63], "hello": [1, 494, 500, 506, 534, 720, 927, 933, 939], "return": [1, 25, 27, 29, 30, 31, 32, 48, 49, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 79, 81, 86, 87, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 122, 128, 132, 133, 134, 137, 140, 141, 142, 143, 144, 146, 147, 150, 154, 155, 156, 157, 159, 161, 167, 168, 169, 170, 172, 173, 180, 181, 183, 184, 185, 193, 194, 195, 207, 208, 214, 215, 218, 219, 220, 224, 228, 230, 233, 236, 240, 245, 251, 261, 263, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 281, 285, 287, 288, 289, 300, 301, 305, 307, 310, 318, 319, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 363, 365, 366, 367, 369, 377, 390, 394, 396, 397, 398, 399, 400, 402, 403, 404, 411, 415, 419, 428, 433, 443, 451, 452, 465, 466, 472, 473, 474, 481, 483, 485, 487, 488, 489, 491, 492, 493, 495, 496, 499, 501, 502, 503, 504, 513, 519, 520, 521, 522, 523, 525, 526, 528, 529, 530, 533, 534, 535, 536, 538, 539, 542, 551, 552, 553, 559, 561, 563, 564, 573, 576, 579, 581, 583, 590, 604, 606, 608, 611, 612, 613, 615, 622, 623, 624, 630, 631, 632, 639, 640, 650, 651, 652, 657, 658, 659, 660, 665, 668, 674, 678, 683, 687, 692, 693, 694, 696, 703, 704, 706, 707, 709, 710, 712, 716, 718, 719, 720, 731, 732, 735, 737, 740, 746, 758, 759, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 800, 801, 803, 804, 805, 807, 810, 815, 823, 825, 826, 832, 834, 835, 837, 838, 840, 841, 842, 843, 847, 849, 852, 856, 857, 862, 874, 880, 881, 893, 894, 895, 897, 905, 914, 915, 916, 918, 920, 921, 922, 924, 925, 926, 928, 929, 932, 934, 935, 936, 937, 946, 953, 955, 967, 969, 970, 974, 982, 990], "lit": [1, 98, 128, 394, 406, 548, 557, 583, 590, 818, 982], "alia": [1, 61, 63, 65, 156, 157, 173, 221, 228, 251, 258, 262, 265, 282, 284, 310, 315, 316, 317, 321, 322, 323, 324, 325, 327, 331, 332, 333, 336, 337, 338, 340, 342, 343, 344, 346, 348, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 367, 368, 371, 381, 383, 385, 387, 388, 392, 394, 397, 398, 406, 409, 410, 411, 416, 418, 419, 430, 432, 434, 438, 440, 442, 444, 445, 450, 466, 482, 483, 486, 488, 489, 492, 495, 501, 503, 504, 505, 514, 515, 516, 517, 524, 525, 526, 532, 533, 534, 535, 536, 540, 541, 543, 544, 548, 549, 550, 553, 554, 557, 558, 564, 565, 568, 572, 573, 579, 580, 583, 590, 622, 623, 625, 631, 661, 665, 687, 715, 765, 767, 772, 792, 795, 799, 801, 806, 852, 921, 922, 936, 937, 982], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 494, 500, 506, 720, 927, 933, 939], "select": [1, 28, 61, 62, 63, 64, 66, 99, 100, 101, 102, 103, 105, 109, 111, 116, 122, 132, 167, 171, 181, 184, 193, 203, 216, 221, 224, 251, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 298, 299, 302, 303, 304, 310, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 363, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 378, 382, 384, 386, 389, 391, 392, 393, 395, 396, 398, 399, 401, 405, 406, 407, 408, 410, 412, 413, 414, 415, 417, 418, 420, 421, 422, 431, 433, 435, 436, 437, 439, 440, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 487, 488, 489, 490, 491, 493, 494, 496, 499, 500, 502, 503, 504, 506, 507, 510, 512, 514, 515, 517, 518, 521, 522, 523, 525, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 542, 543, 545, 546, 547, 548, 549, 550, 553, 555, 556, 557, 558, 559, 561, 565, 566, 567, 568, 569, 570, 572, 577, 578, 579, 580, 581, 582, 590, 609, 625, 628, 639, 653, 661, 666, 668, 687, 715, 795, 896, 897, 909, 924, 940, 954, 982], "shape": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 52, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 84, 87, 89, 90, 91, 92, 93, 94, 95, 98, 111, 116, 123, 125, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 152, 153, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 170, 171, 174, 175, 176, 177, 179, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 195, 197, 200, 201, 203, 204, 205, 206, 207, 208, 210, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 561, 564, 565, 566, 567, 568, 569, 570, 572, 576, 577, 578, 579, 580, 581, 582, 583, 590, 604, 606, 608, 610, 611, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 646, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 695, 696, 697, 698, 699, 700, 701, 702, 705, 706, 707, 714, 715, 716, 719, 720, 722, 727, 728, 729, 731, 733, 740, 741, 743, 744, 746, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 812, 813, 816, 817, 818, 819, 821, 824, 825, 826, 829, 830, 832, 834, 837, 838, 840, 841, 842, 843, 847, 849, 856, 857, 862, 870, 871, 872, 874, 876, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 896, 897, 900, 904, 905, 906, 907, 909, 910, 911, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 944, 951, 953, 954, 955, 956, 957, 960, 961, 962, 966, 967, 968, 969, 970, 971, 974, 982], "3": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 52, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 87, 89, 90, 91, 92, 93, 94, 95, 102, 104, 111, 116, 117, 118, 119, 122, 123, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 258, 259, 260, 261, 265, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 304, 310, 312, 313, 314, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 341, 347, 349, 355, 356, 357, 358, 359, 361, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 432, 433, 434, 438, 439, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 475, 477, 478, 479, 482, 485, 486, 488, 489, 490, 492, 495, 497, 501, 502, 503, 504, 505, 508, 511, 514, 515, 516, 517, 519, 520, 521, 525, 528, 529, 530, 532, 533, 534, 535, 536, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 570, 572, 576, 577, 578, 579, 580, 581, 582, 583, 590, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 692, 695, 696, 697, 699, 700, 701, 703, 704, 705, 706, 707, 714, 715, 716, 719, 722, 727, 728, 729, 731, 733, 740, 741, 743, 744, 745, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 765, 766, 767, 770, 771, 772, 773, 775, 777, 778, 779, 781, 783, 784, 785, 787, 791, 793, 795, 796, 797, 799, 801, 802, 803, 805, 806, 810, 812, 813, 816, 817, 818, 819, 821, 824, 825, 826, 829, 830, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 850, 851, 856, 857, 858, 859, 860, 861, 862, 863, 864, 870, 871, 872, 874, 875, 876, 879, 880, 881, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 900, 904, 906, 907, 908, 909, 910, 912, 918, 919, 921, 922, 923, 925, 928, 930, 934, 938, 941, 944, 951, 952, 953, 954, 955, 956, 957, 959, 960, 963, 964, 965, 967, 968, 969, 970, 971, 972, 974, 982, 990], "1": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 52, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 87, 89, 90, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 111, 112, 116, 117, 118, 119, 120, 123, 125, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 310, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 485, 486, 487, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 590, 604, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 714, 715, 716, 718, 719, 722, 727, 728, 729, 731, 733, 740, 741, 743, 744, 745, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812, 813, 816, 817, 818, 819, 821, 824, 825, 826, 829, 830, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 849, 851, 856, 858, 859, 860, 861, 862, 863, 864, 870, 871, 872, 874, 875, 876, 879, 880, 881, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 921, 923, 924, 930, 936, 937, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 982, 990], "2": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 52, 61, 62, 63, 64, 65, 66, 69, 70, 72, 87, 89, 90, 91, 92, 93, 94, 95, 102, 111, 116, 117, 118, 119, 122, 123, 125, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 164, 165, 166, 167, 168, 170, 172, 174, 175, 176, 177, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 262, 263, 264, 265, 266, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 310, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 332, 333, 337, 339, 340, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 356, 357, 358, 359, 360, 361, 364, 365, 368, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 475, 476, 477, 478, 479, 481, 483, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 509, 510, 512, 514, 515, 516, 517, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 569, 570, 572, 576, 577, 578, 579, 580, 581, 582, 583, 590, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 627, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 692, 695, 696, 698, 702, 703, 704, 705, 706, 707, 714, 715, 716, 719, 720, 722, 727, 728, 729, 731, 733, 740, 743, 744, 745, 746, 750, 751, 754, 755, 756, 757, 758, 759, 760, 761, 766, 768, 769, 773, 778, 779, 785, 787, 788, 789, 794, 795, 796, 797, 800, 803, 805, 807, 809, 810, 811, 812, 813, 816, 817, 818, 819, 821, 824, 825, 826, 829, 830, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 851, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 870, 871, 872, 874, 875, 876, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 900, 904, 906, 908, 909, 910, 911, 912, 914, 916, 921, 922, 923, 924, 927, 928, 929, 930, 931, 933, 936, 937, 939, 940, 942, 951, 952, 953, 954, 955, 956, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 974, 982, 990], "column_0": [1, 132, 219, 251], "register_dataframe_namespac": [1, 63, 64, 65], "split": [1, 62, 169, 251, 503, 504, 936, 937], "splitfram": [1, 62], "df": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 62, 63, 66, 87, 88, 89, 90, 91, 92, 93, 94, 95, 101, 111, 121, 123, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 298, 299, 302, 303, 304, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 561, 564, 565, 566, 567, 568, 569, 570, 572, 576, 577, 578, 579, 580, 581, 582, 583, 590, 623, 661, 662, 668, 671, 674, 683, 687, 715, 743, 795, 924, 931, 936, 937, 961, 982, 990], "_df": [1, 62], "by_alternate_row": 1, "list": [1, 29, 36, 61, 62, 64, 68, 70, 87, 89, 90, 91, 93, 94, 97, 99, 100, 101, 102, 103, 105, 109, 111, 112, 121, 122, 123, 125, 136, 139, 142, 143, 144, 148, 153, 155, 156, 161, 168, 180, 183, 193, 194, 197, 204, 210, 211, 219, 220, 221, 222, 228, 231, 232, 251, 259, 280, 283, 284, 285, 288, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 377, 383, 391, 417, 428, 429, 441, 451, 452, 454, 455, 456, 457, 458, 459, 461, 462, 463, 469, 477, 478, 489, 502, 514, 515, 520, 524, 539, 542, 543, 550, 554, 563, 579, 580, 590, 609, 610, 612, 614, 618, 621, 622, 636, 646, 654, 660, 661, 665, 666, 669, 670, 687, 708, 711, 714, 715, 716, 718, 719, 720, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 745, 758, 810, 815, 819, 822, 826, 827, 837, 874, 880, 882, 883, 884, 885, 886, 887, 889, 890, 891, 894, 922, 935, 954, 963, 966, 982, 990], "with_row_count": [1, 251, 419, 590, 687, 897, 982], "name": [1, 15, 19, 21, 28, 29, 31, 50, 51, 62, 63, 64, 65, 70, 71, 76, 87, 89, 90, 91, 92, 93, 95, 99, 100, 101, 103, 104, 105, 106, 109, 110, 111, 113, 114, 115, 119, 120, 121, 123, 124, 125, 126, 132, 133, 136, 139, 140, 141, 144, 149, 152, 154, 155, 167, 168, 170, 171, 177, 183, 185, 189, 193, 194, 196, 197, 204, 210, 212, 214, 217, 218, 219, 220, 221, 222, 223, 228, 229, 230, 231, 251, 260, 265, 302, 358, 365, 375, 394, 406, 418, 427, 429, 441, 445, 478, 489, 514, 515, 517, 534, 535, 537, 539, 541, 542, 543, 544, 545, 547, 550, 555, 561, 562, 565, 568, 570, 571, 573, 574, 575, 577, 579, 580, 581, 590, 604, 609, 610, 611, 614, 621, 627, 628, 636, 643, 645, 646, 654, 659, 660, 661, 662, 665, 667, 668, 669, 687, 692, 733, 746, 758, 796, 803, 874, 879, 921, 922, 930, 947, 949, 960, 961, 965, 982, 990], "n": [1, 11, 14, 22, 32, 36, 38, 62, 63, 64, 65, 71, 97, 98, 100, 101, 111, 128, 132, 134, 145, 156, 159, 168, 169, 173, 194, 195, 205, 207, 208, 211, 213, 225, 236, 245, 251, 283, 288, 300, 302, 310, 326, 327, 331, 332, 338, 363, 368, 378, 390, 411, 442, 443, 451, 465, 475, 480, 497, 503, 504, 509, 519, 521, 525, 526, 531, 533, 545, 559, 561, 570, 573, 574, 575, 577, 578, 581, 582, 590, 606, 608, 622, 624, 631, 655, 657, 658, 663, 674, 683, 687, 695, 714, 719, 731, 733, 740, 746, 757, 760, 765, 766, 772, 801, 806, 816, 825, 852, 870, 893, 908, 912, 930, 936, 937, 942, 953, 955, 962, 967, 972, 982, 990], "filter": [1, 62, 103, 111, 112, 116, 141, 164, 165, 166, 233, 251, 486, 505, 532, 538, 557, 590, 611, 615, 625, 671, 687, 896, 982], "col": [1, 27, 29, 61, 62, 63, 64, 66, 91, 93, 111, 121, 123, 132, 144, 148, 155, 156, 157, 165, 167, 181, 184, 193, 197, 204, 221, 228, 231, 251, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 298, 299, 302, 303, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 378, 381, 382, 383, 384, 385, 387, 388, 392, 393, 394, 395, 397, 398, 400, 401, 402, 405, 406, 407, 408, 409, 412, 413, 414, 415, 416, 419, 420, 421, 422, 431, 432, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 512, 513, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 541, 543, 544, 548, 549, 550, 553, 556, 557, 558, 559, 560, 565, 568, 571, 572, 580, 583, 590, 614, 618, 621, 622, 623, 625, 639, 646, 654, 661, 665, 666, 669, 687, 715, 743, 792, 795, 880, 896, 897, 924, 940, 982, 990], "0": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 33, 61, 62, 63, 65, 66, 70, 71, 95, 100, 101, 102, 104, 105, 109, 111, 113, 114, 115, 116, 117, 120, 121, 122, 123, 125, 128, 132, 134, 135, 137, 138, 139, 142, 146, 147, 150, 151, 153, 154, 155, 156, 158, 162, 167, 168, 169, 170, 172, 174, 175, 176, 179, 180, 181, 182, 185, 186, 187, 191, 195, 196, 197, 201, 203, 204, 205, 206, 212, 213, 214, 215, 216, 219, 222, 224, 225, 228, 229, 231, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 257, 259, 262, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 282, 284, 287, 293, 302, 312, 314, 316, 317, 318, 319, 321, 326, 329, 330, 339, 343, 344, 346, 347, 353, 359, 360, 371, 372, 373, 374, 376, 378, 379, 380, 384, 385, 387, 388, 389, 393, 396, 399, 400, 402, 403, 404, 406, 407, 409, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 431, 432, 434, 436, 437, 438, 439, 440, 442, 443, 444, 447, 448, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 470, 472, 473, 474, 475, 479, 480, 488, 489, 507, 513, 516, 518, 522, 523, 524, 526, 531, 538, 539, 540, 541, 543, 545, 547, 548, 554, 557, 562, 566, 567, 570, 571, 572, 577, 582, 583, 590, 606, 607, 610, 612, 616, 617, 621, 622, 627, 630, 635, 640, 641, 645, 646, 649, 650, 652, 654, 655, 663, 665, 666, 667, 669, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 687, 697, 698, 699, 700, 701, 702, 703, 705, 707, 715, 718, 733, 741, 744, 746, 751, 752, 757, 758, 759, 761, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 790, 791, 797, 798, 809, 811, 812, 813, 817, 821, 824, 826, 834, 836, 838, 840, 841, 842, 843, 849, 850, 856, 859, 860, 870, 874, 875, 876, 882, 884, 885, 887, 888, 889, 891, 892, 893, 905, 906, 907, 911, 912, 914, 921, 922, 924, 940, 946, 956, 957, 960, 965, 966, 970, 972, 973, 982, 990], "drop": [1, 90, 132, 140, 141, 220, 228, 251, 283, 327, 329, 330, 507, 590, 611, 660, 665, 687, 714, 760, 762, 763, 940, 982], "aaa": [1, 29, 251, 482, 514, 515, 915], "bbb": [1, 29, 251, 514, 515], "ccc": [1, 29, 251, 514, 515], "ddd": [1, 29, 251, 514, 515], "eee": [1, 29, 251], "fff": 1, "column": [1, 14, 15, 18, 19, 21, 29, 31, 52, 61, 62, 69, 70, 71, 74, 76, 87, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 105, 106, 109, 110, 111, 112, 113, 114, 115, 118, 123, 131, 132, 133, 139, 140, 141, 142, 144, 149, 152, 154, 155, 156, 157, 161, 162, 167, 168, 170, 171, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 204, 205, 206, 210, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 231, 251, 261, 263, 265, 275, 280, 285, 298, 301, 302, 332, 336, 339, 341, 342, 343, 345, 347, 349, 352, 355, 356, 359, 361, 364, 366, 367, 369, 375, 377, 381, 383, 394, 406, 419, 425, 427, 429, 441, 445, 449, 451, 452, 455, 456, 457, 458, 459, 461, 462, 463, 470, 477, 478, 487, 503, 504, 507, 508, 509, 511, 517, 532, 534, 535, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 577, 578, 579, 580, 581, 582, 583, 590, 604, 610, 611, 612, 614, 621, 622, 623, 627, 628, 632, 633, 634, 635, 636, 638, 639, 641, 643, 645, 646, 647, 654, 655, 656, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 687, 693, 694, 711, 716, 729, 732, 758, 768, 769, 770, 773, 775, 776, 780, 782, 785, 787, 790, 793, 794, 797, 799, 800, 802, 804, 805, 807, 815, 874, 880, 902, 920, 936, 937, 940, 941, 942, 944, 951, 960, 961, 982, 990], "txt": [1, 111], "utf8": [1, 9, 17, 52, 72, 90, 94, 100, 101, 111, 120, 122, 125, 142, 143, 144, 150, 196, 214, 251, 289, 361, 364, 377, 419, 481, 485, 488, 489, 491, 492, 501, 502, 503, 504, 507, 508, 509, 511, 542, 544, 590, 612, 614, 645, 687, 720, 799, 802, 815, 848, 914, 918, 921, 922, 924, 925, 934, 935, 936, 937, 940, 941, 942, 944, 982], "register_lazyframe_namespac": [1, 62, 63, 65], "dtypeoper": [1, 64], "ldf": [1, 64, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683], "_ldf": [1, 64], "upcast_integer_typ": [1, 64], "with_column": [1, 64, 157, 184, 251, 258, 265, 276, 284, 312, 313, 315, 316, 317, 322, 325, 327, 357, 361, 364, 371, 385, 387, 388, 389, 393, 394, 397, 400, 402, 403, 404, 406, 409, 416, 418, 419, 432, 434, 438, 441, 442, 443, 444, 482, 486, 489, 492, 495, 497, 498, 501, 503, 504, 505, 513, 516, 524, 526, 533, 536, 538, 541, 544, 550, 554, 564, 580, 583, 590, 623, 639, 687, 715, 743, 795], "tp": [1, 64], "cast": [1, 63, 64, 72, 87, 150, 156, 157, 184, 215, 228, 251, 264, 313, 324, 325, 331, 361, 364, 419, 440, 443, 450, 490, 491, 513, 518, 524, 544, 590, 622, 623, 639, 665, 687, 743, 755, 756, 765, 799, 802, 878, 923, 924, 952, 961, 966, 982], "int64": [1, 29, 31, 63, 64, 94, 98, 100, 128, 142, 150, 156, 157, 184, 196, 209, 215, 251, 324, 325, 337, 340, 344, 346, 348, 353, 360, 375, 443, 450, 490, 518, 524, 538, 542, 555, 563, 579, 590, 612, 622, 623, 639, 645, 668, 687, 755, 756, 771, 774, 781, 783, 786, 791, 798, 878, 895, 952, 964, 965, 966, 982], "int8": [1, 64, 150, 251, 324, 325, 518, 590, 755, 756, 760, 857, 881, 952, 970, 982], "int16": [1, 64, 324, 325, 518, 590, 755, 756, 857, 952, 962, 982], "int32": [1, 64, 87, 90, 94, 122, 123, 156, 157, 169, 251, 312, 342, 369, 524, 590, 622, 623, 687, 776, 807, 856, 966, 982], "b": [1, 26, 27, 30, 33, 52, 64, 69, 72, 87, 89, 90, 91, 92, 93, 94, 95, 104, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 158, 159, 161, 162, 164, 166, 167, 168, 169, 170, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 197, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 258, 260, 264, 265, 277, 280, 284, 289, 291, 304, 312, 313, 320, 328, 329, 330, 375, 379, 380, 381, 383, 386, 389, 391, 393, 394, 396, 399, 400, 401, 402, 403, 404, 406, 410, 418, 433, 439, 441, 443, 445, 453, 470, 476, 478, 487, 490, 497, 517, 528, 530, 532, 534, 535, 536, 537, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 554, 555, 556, 557, 558, 561, 564, 565, 566, 567, 568, 569, 570, 572, 574, 575, 577, 578, 579, 580, 581, 582, 590, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 624, 627, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 695, 715, 743, 759, 761, 809, 810, 818, 830, 837, 848, 879, 895, 920, 923, 930, 951, 965, 969, 982], "4": [1, 14, 22, 26, 27, 29, 30, 33, 52, 61, 62, 63, 64, 65, 66, 69, 71, 72, 87, 89, 90, 91, 92, 93, 94, 95, 111, 117, 118, 119, 125, 132, 133, 134, 135, 138, 141, 144, 145, 146, 147, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 175, 177, 180, 181, 183, 184, 185, 186, 190, 194, 199, 204, 207, 208, 209, 210, 211, 212, 217, 218, 219, 221, 222, 223, 224, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 262, 264, 265, 277, 282, 283, 284, 285, 288, 296, 297, 300, 304, 310, 312, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 332, 336, 340, 347, 348, 349, 355, 356, 358, 359, 360, 361, 364, 365, 366, 367, 369, 371, 376, 379, 380, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 394, 403, 404, 406, 409, 410, 411, 413, 416, 418, 419, 432, 434, 438, 440, 441, 443, 444, 445, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 466, 468, 469, 472, 476, 477, 478, 479, 482, 492, 493, 495, 496, 497, 499, 501, 503, 504, 507, 514, 515, 516, 517, 519, 520, 521, 524, 525, 526, 533, 536, 537, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 554, 556, 557, 561, 563, 564, 565, 566, 567, 568, 569, 570, 577, 578, 579, 580, 581, 582, 583, 590, 604, 606, 607, 608, 611, 613, 614, 615, 616, 617, 619, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 648, 649, 650, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 695, 698, 705, 714, 715, 716, 719, 727, 728, 731, 740, 744, 745, 747, 757, 759, 761, 773, 774, 780, 782, 785, 786, 787, 788, 789, 790, 794, 796, 797, 798, 799, 802, 803, 804, 805, 817, 818, 825, 826, 829, 830, 832, 837, 840, 841, 842, 843, 847, 857, 863, 870, 871, 872, 874, 876, 880, 885, 887, 888, 889, 890, 891, 893, 895, 905, 909, 910, 915, 925, 926, 928, 929, 932, 934, 936, 937, 940, 951, 953, 954, 955, 962, 965, 966, 967, 974, 982, 990], "c": [1, 26, 27, 30, 33, 52, 62, 64, 72, 90, 92, 94, 104, 111, 121, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 148, 149, 150, 151, 153, 154, 155, 156, 159, 161, 162, 169, 170, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 185, 186, 187, 189, 191, 192, 193, 195, 196, 197, 200, 201, 203, 204, 205, 206, 207, 209, 213, 214, 215, 216, 218, 219, 222, 223, 225, 226, 228, 231, 234, 235, 236, 237, 238, 239, 241, 244, 245, 251, 258, 265, 280, 289, 291, 394, 406, 441, 443, 470, 503, 507, 528, 530, 534, 535, 537, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 556, 557, 558, 561, 564, 565, 566, 567, 568, 569, 570, 577, 578, 580, 581, 582, 590, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 618, 621, 622, 627, 630, 636, 640, 643, 644, 645, 646, 650, 653, 654, 659, 662, 665, 666, 669, 672, 673, 674, 675, 676, 677, 679, 682, 683, 687, 759, 830, 848, 936, 940, 969, 982], "5": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 30, 33, 61, 62, 64, 65, 66, 69, 70, 87, 90, 91, 92, 93, 94, 97, 98, 101, 117, 123, 128, 132, 134, 135, 138, 144, 145, 146, 147, 150, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 165, 167, 168, 171, 172, 173, 175, 177, 180, 181, 183, 185, 186, 187, 190, 194, 199, 204, 207, 208, 209, 210, 211, 214, 217, 222, 224, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 258, 259, 262, 282, 284, 285, 288, 293, 299, 300, 310, 312, 313, 314, 315, 316, 317, 326, 327, 328, 332, 333, 337, 357, 359, 360, 361, 364, 366, 374, 375, 378, 384, 385, 387, 388, 390, 391, 394, 397, 400, 402, 403, 404, 406, 409, 411, 432, 434, 440, 441, 442, 443, 445, 447, 448, 452, 453, 454, 455, 456, 458, 462, 464, 466, 472, 478, 483, 491, 492, 495, 496, 513, 516, 517, 519, 521, 525, 526, 536, 537, 540, 541, 543, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 561, 563, 564, 565, 566, 567, 568, 569, 570, 572, 577, 578, 580, 581, 582, 590, 606, 607, 608, 613, 614, 615, 616, 617, 619, 621, 622, 623, 624, 626, 628, 629, 630, 631, 634, 635, 636, 640, 648, 649, 650, 653, 654, 655, 656, 657, 658, 664, 665, 667, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 695, 698, 702, 705, 715, 716, 719, 722, 731, 740, 743, 745, 747, 753, 757, 758, 759, 760, 761, 766, 767, 768, 769, 770, 771, 795, 797, 798, 799, 800, 802, 804, 805, 813, 816, 825, 826, 829, 830, 856, 857, 863, 870, 871, 872, 874, 875, 876, 880, 882, 883, 884, 886, 887, 890, 893, 895, 905, 911, 916, 924, 925, 929, 953, 967, 970, 974, 982, 990], "6": [1, 26, 27, 29, 30, 31, 32, 33, 62, 64, 69, 87, 90, 91, 92, 93, 95, 132, 136, 139, 140, 141, 142, 144, 145, 148, 149, 151, 152, 153, 154, 156, 157, 159, 161, 162, 163, 165, 167, 168, 170, 174, 175, 176, 177, 179, 182, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 225, 226, 228, 229, 236, 244, 245, 251, 258, 262, 265, 285, 304, 312, 324, 325, 328, 332, 354, 356, 359, 370, 379, 380, 386, 390, 391, 393, 411, 440, 446, 448, 449, 452, 455, 456, 457, 458, 459, 461, 462, 463, 466, 478, 483, 487, 492, 495, 496, 516, 519, 521, 533, 534, 536, 548, 549, 550, 554, 557, 564, 580, 590, 608, 609, 610, 611, 612, 613, 614, 615, 618, 619, 622, 623, 624, 626, 627, 629, 631, 632, 636, 640, 643, 645, 646, 648, 649, 650, 653, 654, 657, 658, 661, 662, 664, 665, 667, 668, 674, 682, 683, 687, 695, 716, 745, 751, 755, 756, 761, 792, 805, 826, 863, 876, 880, 885, 887, 888, 889, 891, 895, 916, 920, 925, 929, 952, 982, 990], "7": [1, 26, 27, 29, 30, 31, 32, 33, 62, 64, 69, 71, 117, 136, 137, 138, 139, 140, 142, 144, 148, 149, 151, 156, 157, 159, 161, 163, 170, 174, 175, 176, 179, 182, 185, 187, 189, 191, 193, 195, 196, 197, 200, 201, 203, 205, 206, 207, 208, 213, 214, 215, 216, 222, 223, 224, 225, 226, 251, 258, 262, 325, 332, 336, 355, 357, 358, 365, 367, 369, 376, 390, 393, 411, 419, 440, 452, 456, 462, 478, 519, 521, 536, 548, 549, 557, 564, 580, 590, 609, 610, 612, 614, 618, 622, 623, 624, 626, 627, 631, 641, 643, 645, 646, 657, 658, 662, 668, 687, 702, 766, 770, 776, 795, 796, 803, 805, 849, 857, 880, 890, 982, 990], "float32": [1, 27, 64, 150, 213, 214, 251, 563, 687, 833, 856, 982], "lazi": [1, 64, 69, 71, 98, 111, 123, 128, 171, 184, 251, 265, 538, 559, 590, 601, 627, 628, 666, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 687, 990], "i16": [1, 64, 470, 590, 857, 962, 982, 990], "i32": [1, 64, 87, 90, 94, 122, 123, 197, 251, 312, 342, 369, 470, 496, 583, 590, 646, 687, 776, 807, 856, 929, 982, 990], "f32": [1, 64, 141, 213, 251, 284, 448, 470, 554, 590, 611, 687, 715, 856, 876, 982], "i64": [1, 14, 18, 62, 63, 64, 65, 69, 87, 89, 90, 91, 92, 93, 94, 98, 111, 128, 132, 133, 134, 135, 136, 139, 141, 142, 144, 145, 147, 148, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 166, 170, 171, 174, 177, 179, 183, 184, 185, 186, 189, 190, 191, 192, 195, 197, 200, 201, 203, 204, 206, 207, 208, 210, 216, 218, 219, 220, 221, 222, 223, 224, 226, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 241, 244, 245, 251, 258, 260, 264, 265, 283, 284, 285, 286, 287, 288, 290, 292, 294, 295, 296, 297, 298, 299, 300, 303, 304, 310, 313, 315, 316, 317, 322, 323, 324, 325, 327, 328, 337, 338, 340, 344, 346, 348, 353, 360, 363, 375, 378, 380, 381, 382, 383, 385, 386, 390, 391, 392, 393, 394, 397, 400, 402, 403, 404, 406, 408, 411, 415, 417, 418, 432, 433, 434, 441, 442, 443, 444, 445, 446, 449, 450, 452, 453, 465, 467, 468, 470, 471, 472, 476, 477, 478, 497, 498, 514, 515, 516, 517, 518, 519, 520, 521, 525, 526, 527, 529, 532, 534, 536, 541, 542, 544, 548, 549, 550, 553, 554, 555, 556, 557, 561, 563, 564, 565, 568, 572, 576, 580, 581, 583, 590, 604, 606, 608, 610, 611, 614, 615, 617, 618, 619, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 636, 638, 639, 640, 643, 644, 646, 648, 649, 653, 654, 656, 657, 658, 659, 660, 661, 662, 665, 667, 669, 670, 671, 673, 674, 675, 676, 679, 682, 683, 687, 695, 696, 714, 715, 716, 719, 727, 728, 729, 731, 733, 740, 743, 747, 750, 753, 754, 755, 756, 759, 771, 772, 774, 781, 783, 786, 791, 798, 801, 816, 818, 819, 825, 829, 837, 862, 879, 880, 883, 886, 890, 893, 896, 897, 900, 904, 905, 909, 910, 951, 953, 954, 955, 961, 967, 968, 971, 974, 982, 990], "register_series_namespac": [1, 62, 63, 64], "math": [1, 65, 751, 906, 956, 982], "mathshortcut": [1, 65], "": [1, 27, 29, 65, 70, 87, 94, 95, 100, 101, 112, 125, 133, 139, 141, 143, 144, 155, 156, 162, 170, 171, 183, 185, 190, 191, 197, 204, 208, 212, 218, 220, 221, 222, 251, 288, 289, 296, 297, 300, 338, 361, 364, 375, 407, 428, 433, 436, 437, 441, 442, 450, 454, 478, 482, 488, 489, 492, 493, 495, 497, 499, 501, 502, 504, 507, 508, 509, 511, 513, 514, 515, 534, 535, 539, 542, 545, 550, 555, 558, 559, 565, 568, 570, 579, 580, 590, 604, 610, 611, 614, 621, 622, 628, 646, 654, 659, 660, 661, 671, 687, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 714, 716, 719, 720, 722, 727, 728, 729, 731, 740, 741, 744, 745, 746, 747, 750, 751, 752, 753, 754, 755, 756, 757, 760, 761, 766, 772, 788, 789, 796, 799, 802, 803, 810, 812, 813, 816, 817, 818, 819, 821, 824, 825, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 850, 851, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 870, 871, 872, 875, 876, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 900, 904, 905, 906, 907, 909, 910, 912, 915, 916, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 932, 933, 934, 937, 938, 939, 940, 941, 942, 944, 946, 949, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 982], "_": [1, 61, 65, 95, 185, 212, 251, 489, 503, 922, 936, 960, 982], "squar": [1, 65, 233, 407, 479, 590, 671, 850, 911, 982], "cube": [1, 65, 444, 590], "s2": [1, 119, 150, 251, 695, 733, 745, 761, 837, 849, 863, 895, 965, 974, 982], "renam": [1, 90, 100, 101, 197, 228, 231, 251, 260, 418, 430, 515, 576, 579, 590, 646, 665, 669, 687, 857, 949, 961, 982], "n2": [1, 302], "in_plac": [1, 161, 202, 226, 251, 877, 879, 903, 910, 982], "true": [1, 5, 9, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 66, 68, 69, 71, 72, 87, 88, 92, 94, 97, 100, 101, 103, 104, 105, 109, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 123, 124, 125, 129, 131, 133, 134, 135, 138, 147, 150, 151, 153, 154, 155, 156, 162, 164, 165, 166, 168, 171, 172, 175, 180, 181, 183, 185, 186, 193, 194, 195, 197, 204, 210, 214, 215, 218, 219, 220, 221, 222, 224, 228, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 259, 261, 262, 263, 264, 265, 276, 281, 298, 301, 302, 306, 312, 321, 322, 323, 324, 325, 331, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 387, 388, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 416, 438, 440, 450, 460, 465, 470, 475, 477, 478, 482, 484, 486, 490, 491, 496, 502, 503, 505, 507, 508, 509, 511, 514, 515, 520, 527, 530, 533, 534, 535, 536, 538, 539, 545, 546, 557, 573, 577, 579, 583, 590, 604, 606, 607, 608, 613, 615, 617, 621, 622, 627, 628, 630, 632, 636, 640, 646, 650, 651, 652, 654, 659, 660, 661, 665, 670, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 687, 693, 694, 695, 696, 706, 729, 732, 736, 741, 745, 746, 765, 767, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 803, 804, 805, 806, 807, 809, 811, 812, 813, 819, 823, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 850, 863, 871, 872, 878, 888, 895, 908, 910, 915, 917, 919, 923, 924, 929, 935, 936, 938, 940, 941, 942, 944, 964, 965, 973, 974, 982, 990], "s3": [1, 103, 112, 116, 733, 982], "n3": 1, "8": [1, 26, 27, 30, 31, 32, 33, 44, 58, 60, 61, 62, 64, 65, 69, 70, 95, 117, 121, 123, 132, 136, 137, 138, 139, 140, 141, 142, 144, 148, 149, 151, 154, 159, 161, 170, 174, 175, 176, 179, 187, 189, 191, 193, 195, 196, 197, 200, 201, 203, 205, 206, 207, 208, 213, 214, 215, 216, 222, 223, 225, 226, 228, 251, 262, 264, 277, 283, 284, 320, 322, 325, 326, 329, 330, 332, 393, 410, 434, 440, 444, 445, 452, 453, 456, 457, 459, 461, 463, 470, 476, 478, 493, 499, 507, 517, 521, 533, 537, 540, 545, 546, 547, 549, 550, 554, 556, 561, 564, 565, 566, 567, 568, 569, 570, 577, 578, 580, 581, 582, 590, 609, 610, 611, 612, 614, 618, 624, 627, 631, 632, 640, 643, 645, 646, 657, 658, 662, 665, 668, 687, 714, 715, 757, 776, 826, 849, 870, 874, 880, 882, 885, 887, 888, 889, 891, 926, 932, 940, 982, 990], "9": [1, 26, 27, 30, 33, 61, 69, 132, 137, 138, 150, 157, 159, 163, 197, 207, 222, 223, 226, 228, 244, 251, 258, 262, 264, 277, 283, 295, 298, 320, 322, 325, 329, 330, 332, 336, 355, 366, 367, 393, 398, 406, 410, 440, 452, 454, 456, 462, 472, 476, 489, 521, 536, 543, 548, 549, 590, 623, 624, 626, 631, 646, 657, 662, 665, 682, 687, 714, 729, 759, 770, 780, 782, 790, 796, 797, 803, 804, 837, 849, 880, 882, 890, 892, 905, 922, 982], "27": [1, 65, 244, 325, 342, 356, 369, 590, 682, 982, 990], "16": [1, 29, 41, 55, 63, 70, 95, 156, 157, 228, 251, 322, 325, 393, 434, 444, 456, 496, 507, 536, 548, 553, 554, 557, 570, 577, 590, 622, 623, 650, 665, 687, 796, 803, 870, 906, 929, 940, 956, 982], "64": [1, 33, 40, 43, 57, 63, 65, 251, 434, 444, 590, 652, 687, 870, 982], "25": [1, 29, 65, 71, 94, 123, 138, 156, 157, 171, 224, 228, 251, 327, 342, 358, 365, 369, 526, 559, 590, 622, 623, 628, 634, 663, 665, 687, 759, 760, 796, 803, 809, 826, 870, 874, 982], "125": [1, 29, 65, 251, 258, 590, 870, 982], "arg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 60, 184, 215, 251, 443, 539, 558, 590, 639, 687, 696, 964, 965, 982], "ani": [2, 3, 4, 7, 27, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 56, 57, 58, 59, 60, 67, 87, 88, 89, 90, 91, 92, 93, 100, 101, 103, 104, 105, 109, 111, 112, 113, 115, 120, 122, 123, 125, 129, 132, 137, 141, 145, 147, 148, 150, 167, 168, 169, 183, 184, 193, 194, 210, 211, 214, 215, 220, 222, 251, 258, 262, 265, 280, 284, 312, 359, 371, 380, 385, 387, 388, 398, 409, 416, 417, 419, 430, 432, 434, 438, 440, 443, 452, 454, 466, 469, 496, 507, 508, 509, 511, 516, 520, 526, 533, 534, 536, 545, 556, 563, 577, 583, 590, 611, 617, 639, 660, 687, 695, 696, 711, 715, 761, 797, 818, 837, 849, 857, 880, 882, 894, 897, 929, 940, 941, 942, 944, 954, 963, 964, 965, 982, 990], "kwarg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 137, 184, 215, 251, 443, 590, 639, 687, 965, 982], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 590, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 982, 989], "method": [2, 3, 4, 7, 26, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 60, 88, 100, 101, 104, 120, 129, 141, 155, 163, 168, 181, 187, 193, 194, 220, 228, 243, 251, 258, 261, 262, 361, 364, 371, 378, 385, 387, 388, 393, 409, 416, 432, 434, 438, 440, 444, 447, 448, 455, 456, 457, 458, 459, 461, 462, 463, 516, 526, 528, 533, 545, 570, 571, 577, 584, 586, 590, 591, 592, 595, 596, 597, 598, 601, 611, 626, 641, 660, 665, 681, 687, 696, 799, 802, 816, 829, 875, 876, 887, 966, 976, 978, 982, 983, 986, 987, 988], "attribut": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 56, 57, 58, 59, 60, 120, 251, 584, 586, 591, 592, 596, 597, 598, 687, 976, 978, 983, 986, 987, 988], "A": [4, 27, 29, 48, 49, 51, 68, 71, 94, 100, 101, 102, 109, 111, 127, 150, 156, 171, 185, 194, 210, 222, 223, 224, 228, 251, 257, 302, 332, 337, 340, 344, 346, 348, 353, 360, 371, 378, 387, 388, 396, 399, 400, 402, 409, 416, 417, 418, 428, 438, 445, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 482, 483, 488, 489, 491, 497, 498, 513, 517, 543, 554, 558, 590, 622, 628, 643, 662, 665, 687, 766, 771, 774, 781, 783, 786, 791, 798, 816, 882, 883, 884, 886, 889, 890, 891, 915, 916, 921, 922, 924, 930, 931, 946, 982], "encod": [4, 60, 100, 101, 111, 306, 484, 736, 917], "set": [4, 5, 6, 7, 8, 9, 11, 13, 14, 17, 22, 23, 25, 27, 29, 30, 31, 32, 62, 66, 71, 88, 90, 93, 95, 100, 101, 104, 105, 109, 111, 113, 114, 115, 118, 119, 121, 122, 123, 124, 125, 126, 127, 129, 131, 136, 141, 155, 158, 168, 171, 177, 195, 197, 203, 212, 219, 220, 222, 228, 251, 265, 297, 301, 302, 368, 389, 398, 419, 443, 454, 455, 456, 457, 458, 459, 461, 462, 463, 465, 471, 475, 476, 494, 500, 501, 506, 507, 508, 509, 511, 538, 573, 574, 575, 579, 583, 590, 609, 611, 613, 621, 627, 628, 632, 636, 646, 651, 652, 653, 660, 665, 668, 671, 687, 695, 696, 728, 732, 733, 806, 824, 837, 857, 882, 883, 884, 885, 886, 887, 889, 890, 891, 893, 897, 904, 908, 909, 927, 933, 934, 939, 940, 941, 942, 944, 964, 982, 990], "string": [4, 6, 8, 11, 12, 13, 17, 27, 29, 31, 32, 36, 48, 49, 52, 60, 71, 72, 94, 100, 101, 111, 120, 121, 122, 125, 133, 150, 154, 155, 156, 157, 171, 197, 204, 213, 218, 222, 224, 228, 231, 251, 258, 289, 308, 313, 354, 358, 361, 364, 365, 377, 383, 394, 419, 441, 443, 455, 456, 457, 458, 459, 461, 462, 463, 478, 481, 482, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 513, 534, 535, 539, 541, 543, 544, 550, 558, 565, 568, 579, 580, 590, 604, 613, 620, 621, 622, 623, 628, 646, 654, 659, 665, 668, 669, 687, 720, 738, 743, 792, 796, 799, 802, 803, 815, 830, 913, 914, 915, 919, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 962, 982, 990], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 620, 642, 687], "activ": [5, 9, 15, 16, 18, 19, 20, 21, 24, 284, 489, 715, 922], "bool": [5, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 61, 66, 68, 69, 72, 87, 88, 92, 94, 100, 101, 105, 109, 111, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 131, 133, 134, 135, 147, 148, 150, 151, 153, 154, 155, 156, 161, 162, 164, 165, 166, 171, 183, 185, 195, 198, 202, 204, 210, 214, 215, 218, 219, 220, 221, 224, 226, 228, 235, 237, 238, 241, 251, 261, 262, 263, 264, 265, 275, 281, 282, 284, 298, 301, 303, 306, 312, 321, 322, 323, 324, 325, 326, 341, 357, 359, 370, 371, 372, 373, 374, 387, 388, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 416, 417, 423, 424, 425, 426, 438, 440, 448, 450, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 469, 470, 475, 477, 478, 482, 484, 486, 496, 497, 498, 502, 503, 505, 507, 508, 509, 511, 515, 527, 530, 533, 534, 535, 536, 538, 539, 545, 548, 563, 573, 577, 579, 590, 604, 606, 608, 613, 615, 617, 618, 621, 622, 627, 628, 632, 636, 640, 647, 650, 651, 652, 654, 659, 660, 661, 665, 673, 675, 676, 679, 687, 693, 694, 695, 696, 705, 712, 713, 715, 729, 732, 734, 736, 741, 746, 753, 754, 755, 756, 757, 758, 775, 795, 797, 809, 811, 812, 813, 819, 823, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 871, 872, 874, 876, 877, 878, 879, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 895, 897, 898, 903, 908, 910, 915, 917, 919, 929, 930, 931, 935, 936, 938, 940, 941, 942, 944, 963, 964, 965, 968, 971, 973, 982], "decim": [5, 27, 29, 251, 464, 590, 892, 982], "temporari": 5, "remov": [5, 7, 139, 223, 251, 265, 375, 418, 494, 500, 506, 507, 555, 562, 570, 577, 590, 610, 662, 687, 927, 933, 939, 940], "later": 5, "onc": [5, 100, 101, 104, 127, 131, 132, 195, 231, 251, 265, 311, 465, 590, 605, 669, 687, 696, 893, 982], "stabil": 5, "happen": 5, "being": [5, 70, 100, 101, 111, 116, 222, 223, 251, 265, 326, 358, 455, 456, 457, 458, 459, 461, 462, 463, 554, 590, 662, 687, 757, 796, 826, 874, 982, 990], "consid": [5, 70, 100, 101, 111, 116, 132, 141, 151, 177, 220, 222, 223, 251, 265, 315, 316, 317, 326, 358, 455, 456, 457, 458, 459, 461, 462, 463, 548, 557, 590, 611, 624, 631, 636, 660, 662, 687, 696, 747, 748, 749, 757, 796, 826, 839, 874, 895, 896, 897, 982], "break": [5, 70, 116, 222, 223, 251, 265, 326, 358, 455, 456, 457, 458, 459, 461, 462, 463, 590, 662, 687, 757, 796, 826, 874, 982], "chang": [5, 25, 61, 70, 100, 101, 116, 222, 223, 224, 251, 265, 326, 327, 358, 442, 455, 456, 457, 458, 459, 461, 462, 463, 590, 662, 687, 757, 796, 826, 870, 874, 903, 982], "current": [5, 8, 25, 88, 94, 102, 131, 134, 135, 251, 302, 358, 442, 590, 601, 606, 607, 687, 746, 750, 796, 870, 982], "alpha": [5, 68, 265, 372, 373, 374, 590, 608, 613, 615, 640, 650, 687, 811, 812, 813, 982], "state": [5, 7, 68, 80, 548, 601, 608, 613, 615, 640, 650, 687], "cfg": [6, 7, 8, 14, 129], "previous": 6, "save": [6, 357, 601, 795], "share": [6, 52, 143, 251, 810, 982], "option": [6, 7, 8, 25, 29, 37, 61, 71, 100, 103, 104, 105, 109, 112, 113, 115, 117, 120, 121, 122, 123, 124, 125, 126, 167, 171, 177, 210, 214, 219, 251, 407, 454, 455, 456, 457, 458, 459, 461, 462, 463, 475, 501, 563, 579, 583, 590, 601, 627, 628, 636, 687, 846, 850, 882, 883, 884, 885, 886, 887, 889, 890, 891, 908, 934, 961, 982], "paramet": [6, 10, 11, 12, 13, 14, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 38, 45, 48, 49, 50, 51, 53, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 167, 168, 169, 170, 171, 173, 175, 177, 178, 180, 181, 183, 184, 185, 187, 189, 190, 191, 193, 194, 195, 197, 198, 200, 201, 203, 204, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 231, 233, 236, 243, 245, 251, 258, 260, 262, 264, 265, 275, 280, 281, 282, 283, 284, 287, 288, 289, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 315, 316, 317, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 333, 338, 354, 357, 358, 359, 361, 363, 364, 365, 368, 370, 371, 372, 373, 374, 375, 378, 380, 381, 385, 386, 387, 388, 389, 390, 393, 394, 398, 407, 409, 411, 412, 416, 417, 418, 419, 432, 434, 438, 440, 441, 442, 443, 444, 445, 447, 448, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 513, 514, 515, 516, 517, 519, 520, 525, 526, 527, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 557, 558, 559, 561, 562, 563, 564, 565, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 590, 604, 606, 608, 610, 611, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 627, 628, 631, 632, 636, 637, 639, 640, 641, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 671, 674, 681, 683, 687, 692, 695, 696, 705, 711, 712, 713, 714, 715, 718, 719, 720, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 746, 747, 748, 749, 753, 754, 755, 756, 757, 758, 759, 760, 761, 765, 766, 767, 772, 792, 795, 796, 797, 799, 801, 802, 803, 806, 809, 810, 811, 812, 813, 816, 817, 818, 819, 824, 825, 826, 829, 830, 839, 845, 846, 850, 852, 857, 870, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 904, 908, 909, 910, 912, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 944, 946, 947, 949, 953, 954, 960, 961, 962, 963, 964, 965, 967, 968, 971, 972, 973, 974, 982], "json": [6, 8, 31, 32, 107, 108, 114, 251, 490, 491, 601, 620, 642, 668, 687, 923, 924], "produc": [6, 122, 123, 125, 282, 427, 564, 632, 687, 713], "reset": [7, 129], "default": [7, 12, 25, 26, 27, 29, 30, 31, 32, 33, 66, 71, 87, 89, 90, 91, 92, 93, 94, 95, 98, 100, 101, 104, 109, 111, 120, 121, 122, 123, 124, 125, 128, 141, 143, 155, 157, 158, 168, 171, 177, 183, 185, 193, 194, 195, 205, 212, 220, 222, 225, 229, 251, 297, 301, 302, 313, 357, 370, 372, 373, 374, 389, 412, 419, 436, 437, 442, 448, 465, 471, 480, 488, 494, 496, 500, 501, 506, 507, 508, 509, 511, 531, 538, 545, 559, 563, 570, 573, 577, 578, 579, 582, 590, 611, 613, 621, 623, 628, 636, 652, 655, 660, 663, 668, 687, 728, 732, 733, 743, 795, 809, 810, 811, 812, 813, 824, 857, 866, 867, 870, 876, 893, 904, 912, 915, 921, 927, 929, 933, 934, 939, 940, 941, 942, 944, 972, 982, 990], "note": [7, 17, 29, 37, 61, 71, 87, 88, 89, 91, 93, 94, 98, 100, 102, 103, 109, 111, 112, 121, 123, 125, 127, 128, 129, 131, 132, 137, 146, 156, 157, 167, 168, 170, 171, 181, 184, 193, 194, 211, 214, 219, 223, 224, 228, 251, 265, 284, 301, 324, 325, 329, 330, 350, 351, 354, 358, 365, 394, 400, 402, 455, 456, 457, 458, 459, 461, 462, 463, 475, 482, 488, 489, 492, 494, 495, 497, 500, 506, 507, 518, 526, 548, 557, 572, 583, 590, 608, 615, 616, 622, 623, 624, 628, 631, 643, 650, 662, 665, 687, 696, 715, 732, 755, 756, 788, 789, 792, 803, 896, 897, 903, 908, 915, 921, 922, 925, 927, 928, 930, 933, 939, 940, 952, 982], "oper": [7, 29, 52, 69, 77, 78, 87, 89, 90, 91, 92, 93, 100, 109, 132, 145, 150, 155, 162, 172, 178, 181, 183, 184, 188, 209, 214, 215, 219, 222, 230, 231, 251, 258, 259, 262, 302, 321, 322, 323, 324, 325, 326, 371, 385, 387, 388, 406, 409, 416, 430, 432, 434, 438, 440, 444, 450, 516, 526, 533, 534, 535, 543, 544, 554, 590, 615, 621, 624, 627, 631, 636, 637, 669, 687, 695, 753, 754, 755, 756, 757, 878, 959, 963, 964, 965, 973, 982], "from": [7, 27, 29, 61, 69, 71, 87, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 138, 139, 143, 145, 154, 156, 157, 168, 169, 171, 172, 177, 189, 193, 195, 197, 219, 220, 222, 224, 251, 302, 321, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 375, 393, 407, 436, 437, 442, 443, 465, 478, 488, 489, 490, 496, 507, 508, 509, 511, 528, 530, 541, 551, 552, 553, 577, 578, 589, 590, 610, 615, 620, 622, 623, 628, 636, 642, 643, 646, 660, 666, 687, 695, 733, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 846, 850, 866, 867, 868, 870, 893, 921, 922, 923, 929, 940, 941, 942, 944, 971, 974, 982, 990], "environ": [7, 25, 124, 127], "local": [7, 103, 112, 125, 357, 768, 769, 795, 800, 871, 872, 982], "non": [7, 29, 37, 61, 92, 169, 177, 197, 223, 228, 251, 302, 394, 442, 454, 455, 456, 457, 458, 459, 461, 462, 463, 483, 489, 534, 535, 541, 543, 544, 550, 565, 568, 574, 575, 579, 580, 590, 636, 646, 662, 665, 687, 733, 830, 870, 882, 883, 884, 885, 886, 887, 889, 890, 891, 916, 922, 964, 982], "env": [7, 126], "back": [7, 61, 145, 215, 251, 441, 590, 695, 965, 982], "valu": [7, 10, 11, 14, 25, 27, 29, 31, 45, 46, 52, 59, 61, 69, 70, 72, 90, 92, 100, 101, 102, 111, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 132, 133, 138, 141, 145, 146, 147, 151, 154, 156, 157, 158, 159, 163, 167, 168, 173, 174, 175, 176, 177, 179, 181, 183, 185, 186, 187, 189, 193, 194, 195, 200, 201, 204, 205, 206, 207, 210, 211, 215, 218, 222, 223, 224, 225, 234, 235, 237, 238, 239, 241, 242, 251, 257, 258, 259, 261, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 282, 283, 286, 287, 288, 290, 292, 293, 294, 296, 299, 300, 303, 304, 306, 307, 308, 309, 310, 313, 314, 315, 316, 317, 318, 319, 320, 322, 325, 326, 327, 329, 330, 332, 336, 349, 355, 366, 371, 372, 373, 374, 376, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 399, 400, 402, 403, 404, 405, 408, 409, 410, 413, 415, 416, 417, 419, 420, 421, 422, 431, 432, 433, 434, 435, 436, 437, 438, 439, 442, 443, 444, 447, 448, 451, 454, 455, 456, 457, 458, 459, 461, 462, 463, 465, 466, 467, 468, 469, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 497, 498, 501, 503, 504, 505, 513, 516, 518, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 533, 535, 537, 541, 544, 546, 548, 549, 550, 556, 557, 563, 565, 566, 567, 568, 569, 572, 573, 574, 575, 580, 583, 590, 604, 611, 616, 617, 622, 623, 625, 626, 633, 634, 635, 636, 638, 641, 643, 648, 649, 654, 655, 656, 659, 662, 663, 668, 672, 673, 675, 676, 677, 679, 680, 687, 691, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 713, 714, 717, 718, 719, 721, 723, 724, 725, 727, 731, 734, 736, 737, 738, 739, 743, 744, 747, 748, 749, 751, 752, 757, 758, 759, 760, 762, 763, 766, 770, 787, 793, 804, 810, 811, 812, 813, 816, 817, 818, 821, 823, 824, 825, 826, 827, 829, 830, 832, 834, 835, 837, 838, 840, 841, 842, 843, 847, 852, 857, 858, 859, 861, 862, 864, 866, 867, 868, 869, 870, 873, 874, 875, 876, 882, 883, 884, 885, 886, 887, 889, 890, 891, 893, 894, 895, 896, 897, 900, 901, 905, 906, 907, 908, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 928, 930, 931, 934, 936, 937, 938, 946, 952, 953, 954, 955, 956, 957, 965, 966, 969, 971, 973, 974, 982, 990], "exampl": [7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 52, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 101, 102, 103, 104, 111, 112, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 569, 570, 572, 576, 577, 578, 579, 580, 581, 582, 583, 590, 601, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 714, 715, 716, 719, 720, 722, 727, 728, 729, 731, 733, 740, 741, 743, 744, 745, 746, 747, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 811, 812, 813, 816, 817, 818, 819, 821, 824, 825, 826, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 849, 851, 856, 857, 858, 859, 860, 861, 862, 863, 864, 870, 871, 872, 874, 875, 876, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 900, 904, 905, 906, 907, 909, 910, 912, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 944, 951, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 982], "ascii": [9, 17, 493, 495, 499, 513, 926, 928, 932, 946], "charact": [9, 11, 17, 23, 27, 100, 101, 111, 251, 354, 487, 489, 492, 493, 494, 499, 500, 502, 503, 506, 513, 640, 687, 792, 920, 922, 925, 926, 927, 932, 933, 935, 936, 939, 946], "displai": [9, 10, 11, 14, 16, 20, 22, 29, 251], "tabl": [9, 13, 14, 16, 17, 18, 19, 20, 22, 23, 28, 29, 50, 87, 94, 100, 101, 103, 111, 112, 185, 209, 215, 222, 223, 251, 662, 687, 965, 982], "outlin": 9, "fals": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 29, 31, 33, 61, 66, 68, 71, 88, 92, 94, 100, 101, 104, 105, 109, 111, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 131, 133, 134, 135, 138, 150, 151, 153, 154, 155, 156, 161, 162, 164, 165, 166, 168, 171, 172, 175, 180, 181, 183, 185, 186, 193, 194, 195, 198, 202, 204, 210, 214, 215, 218, 219, 220, 224, 226, 228, 234, 235, 237, 238, 239, 241, 244, 251, 261, 262, 263, 265, 275, 281, 284, 298, 301, 303, 321, 322, 323, 324, 325, 326, 341, 357, 359, 370, 371, 372, 373, 374, 387, 388, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 409, 416, 417, 438, 440, 448, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 470, 475, 477, 478, 482, 486, 490, 496, 497, 498, 502, 503, 505, 507, 508, 509, 527, 530, 533, 534, 535, 538, 539, 545, 548, 563, 573, 577, 579, 583, 590, 604, 606, 607, 608, 613, 615, 621, 622, 627, 628, 630, 632, 640, 647, 650, 651, 652, 654, 659, 660, 665, 672, 673, 675, 676, 677, 679, 682, 687, 695, 705, 715, 729, 732, 734, 741, 745, 746, 753, 754, 755, 756, 757, 758, 775, 795, 797, 809, 811, 812, 813, 819, 830, 831, 832, 834, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 850, 863, 871, 872, 874, 876, 877, 879, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 895, 898, 903, 908, 910, 915, 919, 923, 929, 930, 931, 935, 936, 938, 940, 941, 942, 963, 964, 965, 968, 971, 973, 974, 982], "revert": 9, "abc": [9, 15, 16, 18, 19, 20, 21, 22, 258, 489, 497, 590, 922, 930], "xyz": [9, 15, 16, 18, 19, 20, 21, 22, 258, 483, 489, 590, 916, 922, 961, 982], "f64": [9, 13, 15, 16, 18, 19, 20, 21, 22, 61, 63, 65, 70, 90, 116, 123, 134, 135, 137, 138, 139, 142, 146, 147, 150, 153, 154, 155, 162, 170, 171, 175, 176, 185, 186, 187, 203, 204, 205, 225, 228, 231, 235, 237, 238, 239, 240, 241, 243, 244, 251, 257, 267, 268, 269, 270, 271, 272, 293, 312, 314, 318, 319, 326, 329, 330, 359, 370, 371, 372, 373, 374, 375, 376, 384, 385, 387, 388, 393, 400, 402, 403, 404, 406, 407, 409, 412, 413, 414, 416, 420, 421, 422, 431, 434, 436, 437, 438, 442, 444, 447, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 473, 474, 475, 479, 480, 522, 523, 526, 531, 540, 541, 543, 545, 547, 555, 566, 567, 570, 577, 578, 582, 590, 606, 610, 616, 617, 621, 627, 628, 634, 635, 641, 654, 655, 663, 665, 666, 669, 673, 675, 676, 677, 678, 679, 681, 682, 687, 697, 698, 699, 700, 701, 702, 744, 751, 752, 757, 758, 759, 797, 812, 813, 817, 821, 826, 870, 874, 882, 884, 885, 887, 888, 889, 891, 892, 906, 907, 911, 956, 957, 970, 982, 990], "fmt": [10, 392, 558, 590, 625, 687], "floatfmt": 10, "mix": [10, 507, 509, 759, 940, 942, 982], "control": [10, 29, 121, 251, 613, 687], "how": [10, 29, 52, 69, 72, 90, 93, 102, 141, 170, 222, 223, 251, 282, 283, 313, 327, 393, 441, 451, 583, 590, 611, 627, 662, 687, 713, 714, 743, 760, 982], "float": [10, 29, 39, 40, 70, 116, 118, 119, 120, 123, 125, 138, 143, 146, 171, 187, 195, 201, 243, 251, 281, 282, 314, 315, 316, 317, 329, 330, 359, 370, 371, 372, 373, 374, 379, 384, 387, 388, 393, 396, 399, 400, 402, 403, 404, 409, 412, 416, 420, 431, 436, 437, 438, 444, 447, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 469, 526, 540, 566, 567, 571, 573, 578, 580, 582, 590, 616, 628, 641, 649, 650, 681, 687, 712, 713, 741, 744, 747, 748, 749, 758, 759, 761, 797, 809, 810, 811, 812, 813, 817, 821, 826, 836, 850, 853, 859, 860, 866, 867, 873, 874, 875, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 894, 896, 897, 908, 912, 952, 972, 982, 990], "point": [10, 29, 39, 40, 123, 125, 146, 156, 172, 251, 314, 329, 330, 359, 379, 384, 400, 402, 464, 465, 590, 616, 622, 632, 643, 687, 744, 797, 817, 821, 836, 892, 893, 982], "full": [10, 36, 67, 100, 101, 103, 111, 112, 507, 508, 509, 511, 632, 687, 940, 941, 942, 944], "format": [10, 13, 17, 27, 29, 99, 100, 101, 111, 116, 144, 154, 168, 177, 194, 211, 249, 251, 358, 361, 364, 496, 507, 508, 509, 511, 535, 614, 620, 636, 668, 687, 799, 802, 929, 940, 941, 942, 944, 981], "number": [10, 11, 12, 14, 22, 23, 27, 29, 33, 61, 81, 87, 89, 91, 93, 97, 98, 100, 101, 104, 111, 114, 121, 123, 124, 126, 127, 128, 133, 134, 143, 144, 146, 147, 159, 168, 169, 172, 173, 180, 181, 195, 200, 201, 205, 207, 218, 222, 225, 234, 236, 245, 251, 276, 283, 288, 296, 300, 302, 304, 310, 320, 326, 327, 339, 342, 347, 349, 359, 366, 367, 369, 372, 373, 374, 378, 380, 386, 390, 400, 402, 410, 411, 443, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 468, 469, 471, 480, 492, 495, 497, 503, 504, 519, 525, 531, 545, 546, 561, 570, 574, 575, 577, 578, 581, 582, 590, 604, 606, 614, 615, 616, 617, 624, 631, 640, 648, 649, 652, 655, 657, 659, 663, 672, 674, 683, 687, 714, 719, 727, 731, 733, 740, 746, 757, 760, 773, 776, 785, 787, 797, 804, 805, 807, 810, 811, 812, 813, 816, 818, 825, 836, 852, 863, 864, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 893, 900, 901, 904, 912, 925, 928, 930, 936, 937, 953, 967, 972, 982, 990], "int": [11, 12, 14, 22, 23, 27, 29, 33, 37, 63, 90, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 143, 146, 147, 149, 158, 159, 160, 162, 167, 168, 169, 171, 173, 174, 175, 179, 180, 181, 191, 193, 195, 199, 200, 201, 203, 205, 206, 207, 208, 213, 216, 218, 222, 225, 227, 229, 236, 245, 251, 258, 281, 282, 283, 287, 288, 296, 297, 300, 301, 302, 304, 310, 315, 316, 317, 326, 327, 372, 373, 374, 378, 379, 380, 386, 389, 390, 411, 440, 442, 443, 444, 448, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 471, 476, 480, 488, 493, 496, 497, 499, 501, 503, 504, 513, 519, 520, 521, 525, 531, 533, 538, 545, 546, 551, 552, 553, 559, 561, 567, 569, 570, 573, 574, 575, 577, 578, 579, 580, 581, 582, 590, 604, 606, 615, 616, 617, 624, 628, 631, 640, 648, 649, 652, 653, 655, 657, 658, 659, 663, 664, 667, 674, 683, 687, 703, 704, 712, 713, 714, 718, 719, 727, 728, 731, 732, 733, 740, 741, 745, 746, 747, 748, 749, 757, 760, 810, 811, 812, 813, 816, 817, 818, 824, 825, 826, 849, 851, 852, 859, 863, 864, 866, 867, 868, 869, 870, 873, 876, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 900, 901, 904, 909, 912, 921, 926, 929, 930, 932, 934, 936, 937, 946, 952, 953, 954, 955, 962, 967, 972, 982, 990], "size": [12, 33, 100, 101, 121, 122, 123, 125, 127, 143, 156, 222, 251, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 538, 574, 575, 590, 622, 652, 687, 810, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 982, 990], "overwrit": [12, 28, 87, 89, 90, 91, 93, 100, 101, 111, 131, 251, 615, 687], "chunk": [12, 33, 97, 100, 101, 109, 111, 113, 114, 115, 123, 125, 145, 169, 180, 251, 264, 449, 590, 652, 687, 695, 745, 822, 863, 877, 959, 982], "stream": [12, 30, 68, 155, 220, 251, 608, 613, 615, 621, 632, 636, 640, 650, 651, 652, 660, 687], "engin": [12, 28, 102, 127, 132, 155, 220, 233, 251, 621, 632, 636, 660, 671, 687, 696, 982], "By": [12, 100, 101, 104, 111, 171, 205, 225, 251, 480, 496, 531, 545, 563, 570, 577, 578, 582, 590, 628, 655, 663, 687, 912, 929, 964, 972, 982], "determin": [12, 29, 59, 61, 69, 90, 93, 100, 101, 104, 109, 111, 115, 132, 150, 156, 157, 168, 169, 219, 224, 251, 302, 313, 341, 357, 419, 427, 451, 455, 456, 457, 458, 459, 461, 462, 463, 475, 590, 622, 623, 687, 733, 743, 775, 795, 826, 857, 908, 982], "schema": [12, 52, 62, 63, 64, 69, 72, 82, 83, 85, 87, 89, 90, 91, 93, 94, 100, 101, 106, 110, 111, 114, 121, 123, 132, 134, 135, 142, 143, 178, 181, 214, 251, 302, 427, 533, 579, 590, 606, 607, 612, 632, 637, 668, 671, 687, 750, 982], "thread": [12, 27, 97, 100, 101, 102, 127, 251, 265, 284, 590, 715], "pool": [12, 127], "For": [12, 29, 102, 103, 104, 112, 145, 157, 170, 171, 233, 251, 302, 312, 372, 373, 374, 428, 450, 475, 482, 488, 489, 497, 548, 557, 558, 590, 623, 628, 671, 687, 695, 811, 812, 813, 878, 908, 915, 921, 922, 930, 964, 982], "some": [12, 25, 29, 90, 100, 101, 111, 141, 251, 611, 687, 837, 982, 990], "dataset": [12, 100, 101, 111, 116, 407, 590, 601, 632, 687, 850, 982], "esp": 12, "when": [12, 14, 16, 20, 29, 33, 52, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 95, 100, 101, 102, 105, 109, 111, 112, 113, 114, 123, 125, 132, 133, 142, 143, 145, 147, 150, 156, 184, 193, 197, 204, 212, 218, 220, 251, 302, 315, 316, 317, 357, 372, 373, 374, 380, 417, 419, 428, 443, 477, 478, 494, 500, 506, 507, 539, 548, 557, 590, 604, 617, 622, 632, 646, 652, 654, 659, 660, 687, 695, 747, 748, 749, 795, 810, 811, 812, 813, 818, 857, 896, 897, 927, 933, 939, 940, 960, 982], "have": [12, 25, 29, 61, 72, 88, 100, 101, 104, 123, 125, 145, 168, 188, 194, 211, 251, 326, 372, 373, 374, 428, 448, 507, 509, 590, 636, 650, 667, 687, 695, 757, 811, 812, 813, 823, 876, 940, 942, 982, 990], "larg": [12, 156, 157, 171, 224, 251, 354, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 623, 628, 687, 792, 796, 803], "element": [12, 22, 98, 122, 125, 128, 133, 167, 185, 193, 205, 218, 225, 251, 265, 267, 268, 269, 270, 271, 272, 282, 284, 285, 310, 318, 319, 321, 322, 323, 324, 325, 326, 376, 389, 398, 413, 414, 442, 448, 451, 466, 472, 473, 474, 479, 480, 503, 504, 522, 523, 525, 531, 545, 570, 574, 575, 577, 578, 582, 590, 604, 655, 659, 663, 687, 696, 697, 698, 699, 700, 701, 702, 713, 715, 716, 740, 746, 751, 752, 753, 754, 755, 756, 757, 814, 819, 825, 837, 849, 852, 854, 855, 870, 876, 894, 905, 906, 907, 911, 912, 936, 937, 953, 956, 957, 962, 967, 968, 972, 982], "too": [12, 156, 157, 171, 224, 251, 354, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 623, 628, 687, 792, 796, 803], "optimist": 12, "lead": [12, 94, 116, 251, 467, 494, 506, 513, 520, 530, 545, 577, 590, 632, 671, 687, 898, 927, 939, 946, 982], "out": [12, 94, 117, 157, 251, 287, 301, 306, 396, 399, 482, 484, 583, 590, 623, 651, 652, 687, 718, 732, 736, 915, 917], "memori": [12, 33, 69, 87, 88, 91, 92, 93, 100, 101, 105, 109, 111, 113, 114, 115, 131, 132, 145, 202, 233, 251, 449, 470, 590, 652, 671, 687, 695, 696, 877, 902, 903, 982], "error": [12, 73, 100, 101, 111, 156, 157, 171, 193, 224, 251, 289, 301, 306, 312, 354, 358, 365, 406, 455, 456, 457, 458, 459, 461, 462, 463, 482, 484, 488, 490, 491, 507, 508, 509, 511, 590, 622, 623, 628, 671, 687, 720, 732, 736, 741, 792, 796, 803, 915, 917, 921, 923, 924, 940, 941, 942, 944, 982], "row": [12, 17, 22, 27, 29, 31, 33, 61, 62, 64, 79, 81, 86, 90, 91, 93, 94, 100, 101, 104, 105, 109, 111, 113, 114, 115, 118, 121, 123, 132, 133, 134, 141, 145, 148, 150, 154, 156, 158, 159, 164, 166, 167, 168, 169, 171, 172, 173, 177, 181, 195, 203, 207, 208, 211, 213, 218, 220, 222, 223, 229, 233, 236, 245, 251, 265, 276, 285, 302, 377, 390, 411, 442, 452, 476, 478, 487, 519, 539, 548, 549, 557, 561, 565, 568, 572, 581, 583, 590, 604, 606, 608, 611, 615, 618, 619, 622, 624, 628, 629, 631, 632, 636, 652, 653, 657, 658, 659, 660, 662, 667, 671, 674, 683, 687, 695, 716, 815, 825, 849, 870, 880, 909, 920, 953, 982, 990], "per": [12, 27, 29, 121, 123, 133, 154, 181, 182, 204, 218, 240, 242, 243, 251, 265, 284, 287, 301, 311, 478, 539, 590, 604, 654, 659, 678, 680, 681, 687, 715, 718, 732], "everi": [12, 100, 101, 111, 156, 208, 211, 224, 251, 278, 279, 283, 285, 287, 288, 297, 300, 321, 322, 323, 324, 325, 326, 358, 365, 377, 487, 521, 548, 549, 590, 615, 622, 658, 687, 709, 710, 714, 716, 718, 719, 728, 731, 753, 754, 755, 756, 757, 796, 803, 815, 920, 955, 982], "process": [12, 27, 127, 251, 651, 652, 687], "liter": [13, 17, 66, 71, 104, 124, 125, 126, 154, 168, 174, 175, 179, 180, 183, 193, 194, 197, 206, 210, 223, 228, 251, 261, 263, 305, 332, 371, 378, 385, 387, 388, 394, 406, 409, 416, 432, 434, 438, 444, 449, 482, 497, 498, 516, 526, 534, 535, 538, 541, 543, 544, 550, 551, 552, 563, 565, 568, 573, 579, 580, 590, 617, 646, 662, 665, 687, 693, 694, 735, 766, 816, 830, 896, 897, 915, 930, 931, 982], "left": [13, 71, 118, 119, 156, 157, 170, 171, 223, 251, 372, 373, 374, 393, 394, 455, 456, 457, 458, 459, 461, 462, 463, 466, 493, 513, 524, 541, 548, 549, 557, 572, 583, 590, 622, 623, 627, 628, 662, 687, 811, 812, 813, 830, 894, 926, 946, 966, 982], "center": [13, 29, 251, 372, 373, 374, 454, 455, 456, 457, 458, 459, 461, 462, 463, 590, 811, 812, 813, 882, 883, 884, 885, 886, 887, 889, 890, 891, 982], "right": [13, 15, 29, 71, 100, 101, 118, 119, 156, 157, 170, 171, 251, 372, 373, 374, 394, 455, 456, 457, 458, 459, 461, 462, 463, 466, 475, 499, 541, 590, 622, 623, 627, 628, 687, 811, 812, 813, 830, 894, 908, 932, 982], "cell": 13, "align": [13, 29, 61, 251, 513, 946], "keyerror": [13, 17], "recognis": [13, 17, 120], "column_abc": 13, "column_xyz": 13, "visibl": [14, 143, 251, 810, 982], "eg": [14, 22, 29, 251, 358, 507, 509, 526, 590, 940, 942], "low": [14, 127], "rang": [14, 29, 70, 71, 102, 138, 143, 156, 169, 251, 336, 349, 355, 356, 358, 365, 366, 393, 538, 543, 551, 552, 590, 622, 687, 758, 759, 770, 787, 793, 794, 796, 803, 804, 810, 870, 874, 982], "100": [14, 29, 90, 93, 100, 101, 111, 114, 251, 513, 538, 687, 883, 884, 886, 982, 990], "print": [14, 16, 22, 101, 117, 142, 154, 155, 169, 172, 213, 230, 251, 392, 553, 590, 625, 687, 837, 882, 962, 982, 990], "98": [14, 162, 251, 310, 477, 520, 525, 590], "99": [14, 29, 146, 147, 162, 165, 251, 259, 310, 378, 380, 477, 520, 525, 590, 616, 617, 687, 809, 816, 982], "tbl_col": 14, "10": [14, 26, 27, 29, 30, 33, 61, 69, 70, 71, 94, 102, 111, 123, 125, 135, 145, 153, 156, 157, 159, 161, 162, 163, 180, 184, 186, 190, 191, 197, 207, 228, 231, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 264, 273, 274, 275, 277, 283, 288, 296, 297, 300, 315, 320, 322, 325, 327, 329, 330, 332, 350, 351, 357, 358, 365, 368, 389, 390, 393, 398, 406, 410, 411, 413, 442, 443, 456, 476, 513, 519, 533, 541, 548, 554, 557, 559, 561, 563, 564, 570, 577, 581, 590, 608, 622, 623, 624, 626, 631, 639, 640, 646, 652, 656, 657, 665, 669, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 687, 696, 714, 719, 727, 728, 731, 747, 758, 760, 766, 795, 803, 806, 809, 825, 837, 852, 854, 870, 896, 897, 953, 982, 990], "95": [14, 259, 590], "96": [14, 259, 590], "97": [14, 162, 251, 259, 590], "move": [15, 372, 373, 374, 455, 456, 458, 462, 590, 811, 812, 813, 883, 884, 886, 890, 982], "inlin": [15, 482, 488, 489, 497, 915, 921, 922, 930], "parenthes": 15, "below": [16, 29, 103, 112, 141, 251, 393, 583, 590, 611, 687], "ascii_ful": 17, "ascii_full_condens": 17, "ascii_no_bord": 17, "ascii_borders_onli": 17, "ascii_borders_only_condens": 17, "ascii_horizontal_onli": 17, "ascii_markdown": 17, "utf8_ful": [17, 61, 94], "utf8_full_condens": [17, 94], "utf8_no_bord": 17, "utf8_borders_onli": 17, "utf8_horizontal_onli": 17, "noth": [17, 483, 488, 491, 916, 921, 924], "none": [17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 46, 50, 51, 61, 70, 71, 72, 87, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 132, 134, 138, 141, 146, 147, 154, 156, 157, 158, 163, 167, 170, 171, 172, 175, 177, 181, 182, 185, 193, 195, 197, 201, 203, 204, 210, 212, 215, 219, 220, 221, 222, 223, 224, 228, 231, 251, 260, 264, 265, 277, 287, 297, 302, 304, 315, 316, 317, 320, 322, 325, 329, 330, 357, 358, 365, 372, 373, 374, 375, 378, 379, 380, 386, 389, 393, 394, 400, 401, 402, 403, 404, 410, 417, 419, 439, 442, 448, 449, 454, 455, 456, 457, 458, 459, 461, 462, 463, 465, 469, 470, 471, 472, 476, 477, 481, 482, 485, 486, 490, 491, 492, 493, 494, 495, 496, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 511, 513, 514, 515, 524, 534, 536, 538, 541, 544, 546, 552, 553, 555, 556, 563, 564, 565, 568, 573, 574, 575, 576, 578, 579, 582, 583, 590, 606, 607, 611, 616, 617, 622, 623, 626, 627, 628, 630, 632, 636, 646, 649, 650, 651, 652, 653, 654, 660, 661, 662, 665, 666, 668, 669, 671, 687, 696, 703, 704, 718, 728, 733, 746, 747, 758, 759, 761, 777, 778, 779, 784, 795, 796, 803, 808, 809, 811, 812, 813, 816, 817, 818, 820, 823, 824, 826, 828, 829, 830, 839, 842, 843, 846, 849, 850, 857, 858, 859, 860, 861, 865, 874, 875, 876, 882, 883, 884, 885, 886, 887, 889, 890, 891, 893, 897, 899, 901, 904, 905, 908, 909, 912, 914, 915, 918, 919, 923, 924, 925, 926, 927, 928, 929, 932, 933, 934, 936, 937, 938, 939, 940, 941, 942, 944, 958, 961, 962, 965, 966, 972, 973, 982], "rounded_corn": 17, "style": [17, 29, 185, 251], "border": 17, "line": [17, 29, 100, 101, 104, 111, 154, 164, 166, 251, 488, 921], "includ": [17, 25, 27, 29, 67, 103, 112, 123, 133, 138, 143, 156, 218, 219, 222, 251, 359, 394, 502, 503, 548, 590, 604, 622, 659, 687, 759, 797, 810, 830, 935, 936, 973, 982], "divid": [17, 358, 365, 372, 373, 374, 407, 590, 796, 803, 811, 812, 813, 850, 982], "same": [17, 29, 52, 61, 68, 72, 105, 111, 121, 132, 139, 155, 204, 220, 228, 231, 233, 251, 257, 264, 365, 377, 423, 426, 441, 454, 455, 456, 457, 458, 459, 461, 462, 463, 478, 515, 542, 590, 610, 621, 632, 654, 660, 665, 669, 671, 687, 691, 695, 696, 766, 815, 882, 883, 884, 885, 886, 887, 889, 890, 891, 974, 982], "dens": [17, 154, 251, 448, 590, 876, 982], "space": 17, "horizont": [17, 69, 150, 161, 222, 251, 534, 535, 543, 544, 548, 549, 550, 554, 557, 565, 568, 572, 580], "markdown": 17, "compat": [17, 29, 33, 102, 251, 482, 483, 488, 489, 497, 498, 652, 687, 915, 916, 921, 922, 930, 931], "No": 17, "appli": [17, 27, 29, 48, 69, 111, 120, 123, 125, 150, 184, 251, 336, 339, 341, 342, 343, 345, 347, 349, 352, 355, 356, 359, 366, 367, 369, 373, 374, 417, 443, 454, 455, 456, 458, 462, 497, 507, 508, 509, 511, 533, 538, 548, 549, 557, 564, 572, 590, 624, 631, 632, 639, 687, 768, 769, 770, 773, 775, 776, 780, 782, 785, 787, 790, 793, 794, 797, 800, 804, 805, 807, 812, 813, 882, 883, 884, 886, 890, 930, 940, 941, 942, 944, 982], "round": [17, 29, 63, 94, 251, 314, 384, 522, 590, 744, 821, 982], "corner": [17, 94], "op": [17, 125, 251, 451, 590, 687, 982], "The": [17, 28, 29, 33, 45, 53, 61, 67, 87, 89, 90, 91, 93, 97, 100, 102, 109, 111, 127, 132, 140, 142, 154, 155, 156, 157, 158, 163, 168, 171, 178, 183, 193, 194, 197, 221, 224, 228, 231, 233, 251, 301, 304, 305, 306, 307, 336, 349, 354, 355, 358, 361, 365, 366, 375, 378, 386, 389, 417, 441, 448, 451, 454, 455, 456, 457, 458, 459, 461, 462, 463, 472, 475, 481, 484, 485, 490, 492, 493, 494, 499, 500, 506, 507, 513, 542, 555, 559, 574, 575, 576, 579, 583, 584, 586, 590, 591, 592, 596, 597, 598, 622, 623, 624, 626, 628, 631, 632, 637, 640, 646, 652, 661, 665, 669, 671, 687, 696, 732, 735, 736, 737, 746, 770, 787, 792, 793, 796, 799, 803, 804, 816, 824, 829, 876, 882, 883, 884, 885, 886, 887, 889, 890, 891, 905, 908, 914, 917, 918, 923, 925, 926, 927, 932, 933, 939, 940, 946, 976, 978, 982, 983, 986, 987, 988, 990], "one": [17, 28, 29, 61, 79, 87, 89, 90, 91, 92, 93, 124, 125, 126, 129, 147, 148, 154, 155, 156, 157, 168, 177, 185, 193, 194, 198, 217, 232, 251, 259, 302, 380, 406, 414, 454, 477, 489, 520, 580, 583, 590, 617, 618, 621, 622, 623, 636, 647, 666, 670, 687, 695, 733, 818, 846, 855, 882, 922, 947, 982], "more": [17, 29, 31, 33, 61, 86, 87, 88, 89, 90, 91, 92, 93, 103, 109, 112, 123, 125, 129, 132, 137, 138, 168, 172, 177, 181, 193, 194, 195, 220, 233, 251, 262, 265, 303, 315, 316, 317, 406, 407, 414, 417, 440, 465, 475, 489, 527, 580, 583, 590, 636, 652, 660, 671, 687, 696, 734, 747, 748, 749, 759, 846, 850, 893, 908, 922, 968, 982, 990], "semigraph": 17, "box": [17, 132, 251], "draw": [17, 22, 23, 122, 990], "found": [17, 27, 74, 83, 85, 90, 94, 142, 223, 251, 466, 491, 507, 509, 590, 662, 687, 894, 924, 940, 942, 982], "unicod": 17, "block": [17, 155, 220, 251, 621, 643, 660, 667, 687, 896, 897, 982], "http": [17, 29, 88, 102, 131, 137, 251, 488, 921], "en": [17, 29, 251], "wikipedia": 17, "org": [17, 88, 102, 131, 137, 251], "wiki": 17, "drawing_charact": 17, "box_draw": 17, "hide": [18, 19, 20, 21, 29, 251], "etc": [18, 29, 100, 103, 105, 109, 112, 113, 115, 251, 538, 896, 897, 982], "inform": [20, 67, 103, 112, 137, 251, 315, 316, 317, 407, 475, 482, 488, 489, 497, 590, 640, 687, 747, 748, 749, 850, 908, 915, 921, 922, 930, 982], "separ": [21, 27, 95, 97, 100, 101, 111, 183, 185, 212, 219, 221, 251, 265, 285, 289, 487, 544, 548, 549, 590, 661, 687, 716, 720, 920, 951, 960, 982], "between": [21, 69, 120, 121, 123, 125, 187, 243, 251, 289, 312, 328, 394, 442, 447, 459, 481, 545, 547, 570, 571, 574, 575, 577, 590, 641, 681, 687, 720, 741, 761, 830, 870, 875, 887, 914, 982], "set_tbl_column_data_type_inlin": 21, "max": [22, 29, 33, 127, 138, 147, 155, 156, 157, 185, 251, 302, 315, 316, 322, 380, 441, 448, 455, 467, 504, 590, 617, 621, 622, 623, 652, 687, 733, 747, 748, 753, 759, 818, 876, 883, 898, 937, 982], "both": [22, 27, 52, 71, 102, 156, 157, 170, 171, 178, 193, 251, 264, 394, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 623, 627, 628, 637, 687, 830, 839, 982], "tbl_row": 22, "width": [23, 29, 100, 101, 251, 493, 499, 513, 687, 926, 932, 946], "char": [23, 52, 72, 489, 495, 922, 928], "enabl": [24, 72, 197, 228, 251, 467, 590, 646, 665, 687, 898, 982], "addit": [24, 29, 90, 103, 112, 121, 139, 144, 155, 183, 197, 198, 204, 221, 228, 231, 251, 258, 375, 378, 441, 478, 482, 488, 489, 497, 534, 535, 539, 541, 542, 543, 544, 550, 555, 565, 568, 576, 579, 580, 590, 610, 614, 621, 646, 647, 654, 661, 665, 669, 687, 816, 915, 921, 922, 930, 982], "verbos": [24, 129, 489, 922], "debug": [24, 608, 615, 632, 687, 990], "log": [24, 63, 310, 370, 414, 434, 444, 525, 590, 740, 809, 967, 982], "if_set": 25, "env_onli": 25, "dict": [25, 29, 33, 51, 62, 64, 67, 87, 89, 90, 91, 92, 93, 100, 101, 103, 104, 105, 106, 109, 110, 111, 112, 113, 115, 123, 168, 183, 189, 193, 194, 196, 210, 211, 251, 419, 590, 643, 645, 687, 857, 982], "show": [25, 29, 141, 154, 172, 182, 251, 611, 640, 650, 687], "variabl": [25, 95, 124, 127, 177, 212, 251, 636, 687, 960, 982], "restrict": [25, 504, 937], "dictionari": [25, 29, 87, 89, 90, 91, 93, 100, 101, 106, 110, 111, 168, 183, 193, 194, 210, 211, 251, 419, 590, 687, 759, 857, 982], "those": [25, 29, 100, 251, 448, 488, 590, 876, 921, 982], "been": [25, 29, 70, 95, 251, 448, 590, 876, 982], "set_fmt_float": 25, "directli": [25, 123, 125, 129, 372, 373, 374, 590, 687, 811, 812, 813, 982, 990], "via": [25, 100, 101, 104, 111, 113, 114, 115, 168, 194, 251, 265, 590], "set_stat": 25, "all_stat": 25, "file": [26, 27, 30, 31, 32, 33, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 145, 251, 615, 642, 651, 652, 668, 687, 695, 982], "binaryio": [26, 30, 99, 100, 104, 105, 106, 109, 110, 251], "bytesio": [26, 27, 29, 30, 33, 99, 100, 101, 104, 105, 109, 251], "path": [26, 27, 29, 30, 31, 32, 33, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 251, 467, 491, 590, 642, 651, 652, 668, 687, 898, 924, 982], "compress": [26, 30, 33, 251, 651, 652, 687], "avrocompress": [26, 251], "uncompress": [26, 30, 33, 105, 113, 251, 652, 687], "write": [26, 27, 28, 29, 30, 31, 33, 101, 105, 251, 315, 316, 317, 590, 630, 650, 652, 668, 687, 747, 748, 749, 982], "apach": [26, 33, 99, 102, 251], "avro": [26, 99, 251, 601], "should": [26, 27, 29, 30, 31, 32, 33, 87, 89, 91, 93, 95, 98, 103, 111, 120, 121, 125, 128, 131, 132, 139, 156, 157, 168, 171, 193, 194, 211, 212, 221, 224, 233, 251, 259, 265, 284, 313, 326, 354, 358, 365, 368, 375, 400, 402, 454, 455, 456, 457, 458, 459, 461, 462, 463, 466, 475, 542, 555, 562, 563, 574, 575, 583, 590, 610, 622, 623, 627, 628, 632, 650, 651, 652, 661, 668, 671, 687, 696, 715, 743, 757, 792, 796, 803, 806, 882, 883, 884, 885, 886, 887, 889, 890, 891, 894, 908, 982], "written": [26, 27, 29, 30, 31, 32, 33, 251, 651, 652, 668, 687], "snappi": [26, 33, 251, 652, 687], "deflat": [26, 251], "import": [26, 27, 29, 30, 33, 36, 61, 71, 87, 91, 92, 111, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 138, 154, 156, 169, 171, 214, 215, 222, 224, 251, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 553, 622, 628, 632, 687, 751, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 834, 838, 840, 841, 846, 882, 906, 956, 982, 990], "pathlib": [26, 27, 30, 33, 111, 251], "foo": [26, 27, 30, 31, 32, 33, 95, 132, 136, 137, 139, 140, 141, 142, 145, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 165, 170, 174, 175, 176, 179, 182, 185, 187, 189, 190, 191, 193, 195, 196, 197, 199, 200, 201, 203, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 219, 220, 221, 225, 226, 227, 230, 251, 260, 281, 286, 287, 290, 291, 315, 316, 317, 354, 390, 392, 411, 452, 468, 469, 481, 483, 485, 487, 489, 494, 500, 502, 504, 506, 510, 512, 519, 521, 534, 537, 538, 540, 542, 545, 546, 547, 556, 560, 561, 565, 566, 567, 568, 569, 570, 571, 576, 577, 578, 581, 582, 583, 590, 609, 610, 611, 612, 618, 625, 626, 627, 643, 645, 646, 660, 661, 664, 666, 668, 687, 720, 747, 792, 880, 916, 918, 920, 922, 937, 982], "bar": [26, 27, 30, 31, 32, 33, 95, 132, 136, 137, 139, 140, 141, 142, 145, 148, 149, 150, 151, 152, 153, 159, 161, 162, 163, 165, 170, 174, 175, 176, 179, 182, 185, 187, 189, 190, 191, 193, 195, 196, 197, 200, 201, 203, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 220, 221, 225, 226, 230, 251, 260, 291, 392, 475, 485, 487, 502, 504, 534, 537, 540, 542, 545, 546, 547, 556, 561, 565, 566, 567, 568, 569, 570, 576, 577, 578, 581, 582, 583, 590, 609, 610, 611, 612, 618, 625, 626, 627, 643, 645, 646, 660, 661, 664, 668, 687, 720, 908, 918, 920, 937, 982], "ham": [26, 27, 30, 33, 95, 136, 137, 139, 140, 141, 142, 148, 149, 151, 158, 159, 161, 170, 174, 175, 176, 179, 182, 187, 189, 191, 193, 195, 196, 197, 200, 201, 203, 205, 206, 207, 212, 213, 214, 215, 216, 220, 225, 226, 251, 542, 609, 610, 611, 612, 618, 627, 643, 645, 646, 660, 666, 687], "d": [26, 27, 30, 33, 52, 69, 72, 90, 116, 138, 154, 158, 159, 162, 170, 207, 209, 222, 226, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 258, 338, 361, 364, 394, 443, 470, 483, 489, 503, 507, 508, 509, 541, 559, 590, 627, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 687, 772, 799, 802, 830, 916, 922, 936, 940, 941, 942, 982], "e": [26, 27, 30, 33, 52, 72, 88, 100, 101, 104, 105, 109, 113, 115, 138, 154, 156, 157, 159, 171, 207, 209, 222, 224, 251, 258, 265, 354, 358, 365, 370, 375, 394, 412, 419, 455, 456, 457, 458, 459, 461, 462, 463, 470, 475, 555, 583, 590, 622, 623, 628, 630, 643, 687, 792, 796, 803, 809, 830, 895, 908, 964, 982], "dirpath": [26, 27, 30, 33, 111, 251], "new_fil": [26, 27, 30, 33, 251], "has_head": [27, 29, 100, 101, 104, 111, 251], "quot": [27, 100, 101, 111, 251], "batch_siz": [27, 100, 101, 114, 251], "1024": [27, 33, 100, 101, 114, 251, 652, 687], "datetime_format": [27, 251], "date_format": [27, 251], "time_format": [27, 251], "float_precis": [27, 29, 251], "null_valu": [27, 100, 101, 111, 251], "comma": [27, 251], "csv": [27, 100, 101, 104, 111, 251, 601, 651, 652, 687], "result": [27, 31, 32, 61, 91, 93, 102, 103, 111, 113, 115, 116, 125, 145, 156, 157, 181, 201, 215, 224, 231, 251, 302, 361, 364, 372, 373, 374, 378, 407, 441, 452, 454, 455, 456, 457, 458, 459, 461, 462, 463, 467, 469, 502, 503, 509, 526, 538, 548, 549, 564, 574, 575, 590, 605, 622, 623, 632, 640, 649, 651, 652, 668, 669, 687, 695, 799, 802, 811, 812, 813, 850, 880, 882, 883, 884, 885, 886, 887, 889, 890, 891, 898, 901, 935, 936, 942, 964, 982, 990], "If": [27, 29, 30, 31, 32, 33, 52, 66, 67, 70, 71, 87, 88, 89, 90, 91, 92, 93, 95, 100, 101, 103, 104, 105, 109, 111, 112, 113, 114, 115, 124, 131, 132, 133, 141, 145, 154, 156, 157, 159, 167, 168, 171, 173, 177, 181, 194, 195, 203, 207, 211, 212, 214, 218, 219, 220, 222, 223, 251, 265, 297, 302, 315, 316, 317, 332, 350, 351, 357, 381, 407, 417, 419, 448, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 471, 475, 476, 490, 492, 494, 495, 500, 501, 502, 503, 504, 506, 507, 508, 509, 511, 534, 535, 536, 538, 545, 546, 548, 550, 557, 563, 565, 568, 573, 574, 575, 577, 579, 580, 583, 590, 604, 611, 613, 622, 623, 627, 628, 632, 636, 643, 652, 653, 659, 660, 662, 668, 671, 687, 695, 696, 728, 733, 747, 748, 749, 758, 766, 788, 789, 795, 823, 825, 826, 849, 850, 852, 874, 876, 878, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 898, 904, 908, 909, 923, 925, 927, 928, 933, 934, 935, 936, 937, 939, 940, 941, 942, 944, 953, 959, 964, 973, 982], "instead": [27, 31, 32, 66, 71, 98, 100, 109, 123, 128, 132, 156, 157, 168, 171, 181, 183, 193, 194, 197, 215, 224, 228, 251, 275, 354, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 492, 494, 500, 506, 538, 565, 568, 573, 579, 590, 616, 622, 623, 628, 646, 665, 668, 687, 705, 792, 796, 803, 896, 897, 925, 927, 933, 939, 965, 982], "whether": [27, 71, 91, 93, 125, 198, 251, 341, 357, 359, 424, 425, 467, 590, 632, 647, 687, 775, 795, 797], "header": [27, 29, 33, 94, 100, 101, 104, 111, 142, 185, 219, 251, 652, 687], "field": [27, 53, 83, 85, 90, 214, 221, 251, 302, 419, 489, 490, 503, 504, 515, 548, 549, 564, 579, 590, 661, 687, 733, 936, 937, 949, 951], "symbol": [27, 251], "byte": [27, 100, 101, 104, 105, 106, 109, 110, 111, 143, 251, 305, 308, 309, 492, 495, 652, 687, 735, 738, 739, 810, 925, 928, 982], "specifi": [27, 29, 61, 71, 74, 83, 85, 104, 123, 133, 139, 143, 144, 147, 155, 183, 193, 197, 198, 204, 218, 221, 228, 231, 251, 372, 373, 374, 375, 380, 419, 441, 451, 478, 493, 499, 534, 535, 539, 541, 542, 543, 544, 550, 555, 565, 568, 576, 579, 580, 590, 604, 610, 614, 617, 621, 646, 647, 654, 659, 661, 665, 669, 687, 810, 811, 812, 813, 818, 926, 932, 982], "defin": [27, 29, 36, 71, 120, 121, 123, 132, 156, 157, 181, 184, 233, 251, 265, 301, 394, 443, 455, 456, 457, 458, 459, 461, 462, 463, 536, 563, 579, 590, 622, 623, 639, 671, 687, 696, 732, 830, 982], "chrono": [27, 251, 361, 364, 507, 508, 509, 511, 799, 802, 940, 941, 942, 944], "rust": [27, 33, 80, 105, 109, 132, 233, 251, 671, 696, 982], "crate": [27, 251, 482, 483, 488, 489, 497, 498, 507, 508, 509, 511, 915, 916, 921, 922, 930, 931, 940, 941, 942, 944], "fraction": [27, 118, 119, 195, 251, 359, 442, 465, 507, 509, 590, 797, 870, 893, 940, 942, 982], "second": [27, 71, 122, 156, 157, 171, 224, 251, 354, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 507, 509, 552, 553, 583, 590, 622, 623, 628, 687, 792, 796, 803, 940, 942, 990], "precis": [27, 29, 37, 168, 194, 211, 251, 331, 765], "infer": [27, 87, 89, 90, 91, 92, 93, 100, 101, 104, 111, 114, 132, 251, 452, 490, 507, 508, 509, 511, 590, 687, 880, 923, 940, 941, 942, 944, 982], "maximum": [27, 100, 101, 111, 121, 122, 123, 125, 174, 251, 278, 420, 436, 448, 565, 590, 633, 687, 709, 747, 777, 858, 866, 871, 876, 982], "timeunit": [27, 36, 38, 71, 251, 331, 332, 363, 368, 509, 765, 766, 801, 806, 942], "frame": [27, 28, 29, 50, 51, 61, 90, 118, 123, 132, 134, 168, 169, 178, 181, 184, 193, 194, 215, 222, 251, 606, 637, 639, 687, 746, 982, 990], "datetim": [27, 29, 61, 71, 94, 123, 138, 154, 156, 157, 169, 171, 224, 251, 281, 282, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 455, 456, 457, 458, 459, 461, 462, 463, 507, 509, 524, 553, 559, 563, 573, 590, 622, 623, 628, 687, 712, 713, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 846, 866, 867, 897, 940, 942, 966, 982], "place": [27, 133, 140, 161, 162, 190, 200, 201, 204, 218, 226, 251, 275, 289, 296, 468, 469, 477, 590, 604, 648, 649, 654, 659, 687, 705, 720, 727, 877, 879, 900, 901, 910, 982], "float64": [27, 29, 90, 98, 100, 123, 128, 142, 143, 150, 196, 215, 228, 251, 267, 268, 269, 270, 271, 272, 312, 318, 319, 359, 375, 400, 402, 473, 474, 522, 523, 542, 555, 590, 612, 645, 665, 687, 797, 965, 970, 982], "datatyp": [27, 31, 45, 59, 87, 89, 90, 91, 93, 96, 98, 104, 106, 110, 125, 128, 142, 144, 150, 196, 251, 285, 312, 375, 470, 487, 524, 542, 555, 563, 590, 601, 614, 645, 668, 687, 696, 716, 741, 759, 839, 844, 846, 848, 902, 920, 966, 982], "repres": [27, 46, 59, 71, 87, 89, 91, 92, 93, 205, 225, 251, 400, 402, 480, 531, 534, 542, 545, 555, 563, 570, 574, 575, 577, 578, 582, 590, 655, 663, 687, 897, 912, 972, 982], "null": [27, 61, 69, 90, 100, 101, 111, 116, 131, 133, 134, 138, 141, 147, 150, 151, 163, 170, 175, 176, 182, 185, 187, 200, 201, 204, 205, 206, 210, 215, 218, 221, 223, 225, 228, 234, 251, 260, 264, 265, 275, 283, 286, 287, 290, 296, 301, 302, 304, 306, 315, 316, 317, 320, 322, 325, 327, 329, 330, 337, 340, 344, 346, 348, 353, 360, 372, 373, 374, 375, 378, 379, 380, 381, 386, 393, 400, 401, 402, 403, 404, 410, 419, 439, 442, 449, 454, 455, 456, 457, 458, 459, 461, 462, 463, 468, 469, 470, 472, 477, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 495, 496, 499, 501, 503, 504, 505, 513, 514, 515, 524, 532, 534, 541, 543, 544, 546, 555, 563, 574, 575, 579, 583, 590, 604, 606, 611, 617, 626, 627, 648, 649, 654, 659, 661, 662, 665, 666, 668, 672, 687, 696, 705, 714, 727, 732, 733, 736, 746, 747, 760, 763, 771, 774, 781, 783, 786, 791, 798, 811, 812, 813, 816, 818, 823, 842, 843, 869, 870, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 895, 900, 901, 905, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 928, 929, 932, 934, 936, 937, 938, 962, 964, 965, 966, 973, 982, 990], "empti": [27, 78, 90, 100, 101, 104, 111, 134, 135, 165, 177, 251, 563, 576, 606, 607, 636, 687, 746, 750, 833, 982], "table_nam": [28, 29, 251], "connection_uri": [28, 102, 251], "if_exist": [28, 251], "dbwritemod": [28, 251], "fail": [28, 88, 103, 105, 112, 131, 220, 251, 276, 302, 507, 508, 509, 511, 590, 660, 687, 696, 940, 941, 942, 944, 982], "dbwriteengin": [28, 251], "sqlalchemi": [28, 251], "databas": [28, 102, 251, 601], "append": [28, 123, 145, 170, 171, 251, 449, 583, 590, 627, 628, 687, 982], "creat": [28, 29, 70, 71, 87, 91, 93, 112, 121, 122, 123, 124, 125, 126, 134, 135, 156, 157, 182, 185, 224, 228, 251, 302, 332, 358, 365, 449, 501, 530, 538, 543, 551, 552, 553, 590, 606, 607, 613, 622, 623, 665, 687, 746, 750, 758, 763, 766, 796, 803, 868, 874, 877, 934, 964, 982, 990], "connect": [28, 100, 102, 105, 109, 113, 115, 116, 251, 602], "uri": [28, 102, 103, 112, 251], "postgresql": [28, 102, 251, 441, 590], "usernam": [28, 100, 102, 105, 109, 113, 115, 251], "password": [28, 100, 102, 105, 109, 113, 115, 251], "server": [28, 102, 251], "port": [28, 100, 102, 105, 109, 113, 115, 251], "replac": [28, 100, 101, 111, 146, 147, 191, 219, 228, 251, 332, 357, 419, 498, 590, 616, 665, 687, 766, 795, 857, 896, 897, 931, 982], "insert": [28, 100, 101, 105, 109, 111, 113, 114, 115, 162, 190, 219, 221, 251, 466, 481, 513, 590, 661, 687, 894, 914, 946, 982], "mode": [28, 251, 489, 573, 590, 687, 922, 982], "new": [28, 29, 98, 111, 128, 129, 132, 141, 161, 162, 181, 182, 189, 190, 208, 221, 222, 228, 251, 260, 332, 377, 393, 418, 497, 498, 503, 504, 514, 515, 521, 590, 601, 611, 643, 658, 661, 665, 671, 687, 692, 763, 766, 815, 868, 879, 930, 931, 936, 937, 947, 949, 955, 961, 974, 982], "alreadi": [28, 251, 284, 326, 590, 715, 757, 982], "adbc": [28, 102, 251], "workbook": [29, 251], "worksheet": [29, 251], "posit": [29, 139, 144, 155, 183, 197, 198, 204, 221, 228, 231, 251, 372, 373, 374, 375, 441, 478, 496, 534, 535, 539, 541, 542, 543, 544, 550, 555, 565, 568, 576, 579, 580, 590, 610, 614, 621, 646, 647, 654, 661, 665, 669, 687, 811, 812, 813, 929, 982], "tupl": [29, 102, 132, 168, 193, 194, 199, 230, 251, 452, 590, 640, 650, 687, 880, 982], "a1": [29, 62, 64, 251], "table_styl": [29, 251], "column_format": [29, 251], "dtype_format": [29, 251], "oneormoredatatyp": [29, 121, 251, 846, 982], "conditional_format": [29, 251], "conditionalformatdict": [29, 251], "column_tot": [29, 251], "columntotalsdefinit": [29, 251], "column_width": [29, 251], "row_tot": [29, 251], "rowtotalsdefinit": [29, 251], "row_height": [29, 251], "sparklin": [29, 251], "sequenc": [29, 53, 61, 68, 87, 89, 90, 91, 93, 95, 97, 100, 101, 111, 121, 122, 123, 133, 138, 139, 141, 144, 145, 170, 171, 177, 181, 184, 185, 204, 212, 218, 219, 220, 221, 222, 223, 224, 251, 302, 398, 417, 443, 478, 515, 536, 539, 548, 549, 557, 559, 564, 572, 590, 604, 610, 611, 614, 627, 628, 639, 654, 659, 660, 661, 662, 687, 695, 733, 759, 761, 897, 949, 982], "formula": [29, 251, 370, 590, 809, 982], "autofilt": [29, 251], "autofit": [29, 251], "hidden_column": [29, 251], "hide_gridlin": [29, 251], "sheet_zoom": [29, 251], "excel": [29, 104, 251, 601], "object": [29, 30, 33, 51, 71, 88, 89, 94, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 112, 121, 123, 125, 131, 155, 156, 157, 172, 214, 215, 251, 563, 601, 607, 622, 623, 625, 630, 642, 687, 708, 742, 764, 913, 959, 982], "open": [29, 100, 101, 104, 105, 109, 113, 115, 251], "xlsxwriter": [29, 117, 251], "ha": [29, 61, 70, 95, 111, 131, 224, 251, 265, 310, 326, 406, 428, 525, 536, 590, 671, 740, 746, 757, 759, 823, 836, 967, 982], "close": [29, 71, 156, 157, 251, 394, 414, 455, 456, 457, 458, 459, 461, 462, 463, 475, 590, 622, 623, 687, 830, 908, 982], "xlsx": [29, 104, 251], "work": [29, 37, 101, 104, 157, 190, 251, 265, 284, 303, 314, 315, 316, 317, 375, 384, 441, 495, 527, 590, 623, 687, 715, 734, 744, 747, 748, 749, 821, 928, 968, 982], "directori": [29, 109, 251], "sheet1": [29, 251], "valid": [29, 48, 49, 105, 109, 125, 129, 143, 251, 326, 482, 483, 488, 489, 491, 497, 498, 590, 757, 810, 823, 915, 916, 921, 922, 924, 930, 931, 982], "notat": [29, 251], "integ": [29, 41, 42, 43, 44, 55, 56, 57, 58, 121, 123, 124, 126, 156, 157, 251, 314, 359, 384, 385, 450, 455, 456, 457, 458, 459, 460, 461, 462, 463, 496, 533, 538, 559, 590, 622, 623, 687, 703, 704, 744, 797, 821, 839, 878, 888, 897, 929, 982, 990], "medium": [29, 251], "kei": [29, 61, 67, 156, 171, 178, 183, 185, 189, 192, 251, 622, 628, 637, 643, 644, 687], "contain": [29, 61, 67, 89, 92, 94, 103, 112, 118, 122, 133, 141, 169, 181, 185, 218, 251, 265, 398, 419, 483, 486, 488, 489, 491, 504, 505, 590, 604, 611, 640, 659, 687, 857, 863, 916, 919, 921, 922, 924, 937, 938, 959, 982], "follow": [29, 67, 100, 101, 103, 111, 112, 132, 156, 157, 171, 184, 224, 251, 265, 354, 358, 365, 443, 448, 455, 456, 457, 458, 459, 461, 462, 463, 515, 526, 536, 583, 584, 586, 590, 591, 592, 596, 597, 598, 622, 623, 628, 639, 687, 792, 796, 803, 876, 896, 897, 976, 978, 982, 983, 986, 987, 988, 990], "first_column": [29, 251], "last_column": [29, 251], "banded_column": [29, 251], "banded_row": [29, 251], "sheet": [29, 104, 251], "chart": [29, 251, 640, 687], "subsequ": [29, 188, 215, 251, 302, 613, 687], "colnam": [29, 111, 123, 142, 251, 612, 687], "given": [29, 48, 49, 50, 61, 70, 71, 87, 89, 90, 91, 93, 98, 100, 101, 111, 120, 121, 123, 124, 125, 126, 128, 132, 133, 143, 144, 167, 183, 184, 193, 200, 201, 204, 218, 223, 251, 265, 281, 296, 302, 333, 361, 363, 364, 370, 394, 412, 441, 443, 448, 451, 452, 455, 456, 458, 461, 462, 463, 466, 468, 469, 489, 507, 509, 515, 555, 590, 604, 614, 632, 639, 648, 649, 654, 659, 662, 671, 687, 696, 712, 727, 733, 758, 767, 799, 801, 802, 809, 810, 826, 830, 849, 853, 856, 868, 874, 876, 880, 883, 884, 886, 889, 890, 891, 894, 900, 901, 922, 940, 942, 970, 974, 982, 990], "here": [29, 87, 89, 90, 91, 93, 102, 103, 112, 121, 123, 125, 251, 491, 687, 924], "dd": [29, 251], "mm": [29, 251], "yyyi": [29, 251], "00": [29, 71, 123, 156, 171, 224, 251, 331, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 507, 509, 511, 553, 622, 628, 687, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 803, 804, 805, 806, 807, 940, 942, 944], "dtype": [29, 64, 72, 87, 89, 91, 93, 94, 98, 100, 101, 111, 120, 121, 122, 123, 125, 128, 131, 156, 157, 171, 213, 214, 215, 251, 265, 267, 268, 269, 270, 271, 272, 275, 278, 279, 280, 289, 301, 312, 315, 316, 317, 318, 319, 324, 325, 337, 340, 344, 346, 348, 353, 360, 368, 375, 377, 415, 417, 419, 450, 451, 455, 456, 457, 458, 459, 461, 462, 463, 470, 473, 474, 481, 490, 501, 507, 518, 520, 522, 523, 524, 529, 530, 536, 538, 546, 555, 559, 563, 564, 579, 590, 622, 623, 628, 687, 709, 710, 711, 720, 732, 741, 746, 747, 748, 749, 755, 756, 759, 760, 771, 774, 781, 783, 786, 791, 798, 806, 810, 815, 833, 839, 846, 856, 857, 881, 895, 902, 914, 923, 934, 940, 952, 962, 964, 965, 966, 970, 982, 990], "overridden": [29, 87, 89, 91, 93, 127, 251, 687], "basi": [29, 123, 251], "param": [29, 87, 89, 90, 91, 93, 100, 101, 111, 122, 123, 125, 193, 251, 687], "It": [29, 71, 132, 178, 184, 233, 251, 265, 427, 590, 632, 637, 671, 687, 896, 897, 982], "also": [29, 71, 90, 111, 121, 122, 123, 124, 125, 142, 155, 156, 157, 178, 181, 197, 204, 228, 251, 322, 325, 357, 393, 394, 448, 455, 456, 457, 458, 459, 461, 462, 463, 478, 548, 549, 557, 559, 572, 583, 589, 590, 595, 621, 622, 623, 637, 646, 654, 665, 666, 687, 795, 830, 876, 982], "group": [29, 33, 101, 155, 156, 157, 169, 181, 183, 185, 222, 224, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 259, 265, 284, 383, 441, 477, 478, 482, 488, 489, 497, 520, 536, 590, 621, 622, 623, 652, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 715, 915, 921, 922, 930], "float_dtyp": [29, 251], "simplifi": [29, 68, 251, 608, 613, 615, 640, 650, 651, 652, 687], "uniform": [29, 251], "condit": [29, 66, 141, 148, 193, 251, 486, 505, 557, 583, 611, 618, 687], "suppli": [29, 87, 89, 90, 91, 93, 193, 251, 443, 590, 687], "typenam": [29, 251], "3_color_scal": [29, 251], "data_bar": [29, 251], "make": [29, 53, 69, 87, 92, 100, 101, 102, 105, 109, 113, 115, 156, 157, 178, 181, 188, 224, 251, 373, 374, 419, 451, 503, 513, 590, 622, 623, 637, 687, 812, 813, 826, 857, 936, 946, 982, 990], "icon": [29, 251], "multipl": [29, 51, 68, 69, 100, 101, 111, 113, 114, 115, 121, 125, 133, 139, 143, 145, 148, 155, 156, 161, 169, 183, 185, 197, 198, 204, 218, 228, 231, 251, 301, 424, 428, 433, 434, 441, 452, 455, 456, 457, 458, 459, 461, 462, 463, 478, 534, 535, 539, 542, 548, 549, 550, 557, 564, 565, 568, 572, 580, 583, 590, 604, 610, 618, 621, 622, 646, 647, 654, 659, 665, 669, 687, 695, 732, 810, 862, 880, 982], "singl": [29, 61, 69, 100, 101, 102, 109, 111, 121, 139, 140, 141, 145, 152, 167, 183, 193, 204, 251, 265, 282, 301, 354, 381, 417, 449, 452, 478, 481, 532, 534, 535, 536, 539, 542, 543, 544, 550, 564, 565, 568, 573, 580, 590, 610, 611, 654, 687, 695, 713, 732, 792, 877, 880, 914, 959, 982], "across": [29, 251, 534, 535, 550, 565, 568, 580], "effect": [29, 131, 150, 251, 265, 590, 667, 687], "heatmap": [29, 251], "min": [29, 33, 138, 147, 156, 157, 185, 251, 315, 317, 323, 380, 441, 448, 458, 576, 590, 617, 622, 623, 652, 687, 747, 749, 754, 759, 818, 876, 886, 982, 990], "entir": [29, 251], "final": [29, 61, 115, 251, 372, 373, 374, 590, 615, 687, 811, 812, 813, 982], "made": [29, 251, 964, 982], "up": [29, 53, 102, 168, 171, 194, 211, 251, 265, 314, 513, 590, 627, 628, 632, 687, 744, 946, 982], "abov": [29, 251, 365, 583], "order": [29, 61, 90, 118, 132, 133, 155, 156, 157, 183, 184, 185, 195, 198, 204, 218, 220, 224, 251, 265, 275, 298, 303, 313, 448, 465, 466, 467, 477, 478, 515, 527, 528, 539, 590, 604, 621, 622, 623, 636, 647, 651, 652, 654, 659, 660, 687, 696, 705, 729, 734, 743, 758, 845, 874, 876, 881, 893, 894, 898, 910, 949, 968, 969, 982], "than": [29, 71, 86, 91, 93, 100, 101, 111, 116, 123, 125, 132, 154, 155, 168, 171, 183, 193, 194, 195, 222, 233, 251, 265, 387, 388, 406, 409, 416, 465, 475, 493, 499, 504, 513, 545, 577, 580, 590, 621, 628, 651, 652, 671, 687, 696, 893, 908, 926, 932, 937, 946, 982, 990], "add": [29, 50, 101, 132, 145, 156, 228, 229, 251, 445, 517, 553, 557, 583, 590, 622, 627, 665, 666, 667, 687, 695, 982], "total": [29, 143, 251, 810, 982], "export": [29, 168, 169, 194, 211, 214, 251], "numer": [29, 171, 251, 258, 315, 316, 317, 385, 394, 414, 432, 434, 444, 451, 470, 516, 526, 590, 601, 628, 687, 747, 748, 749, 759, 830, 844, 895, 902, 982, 990], "associ": [29, 61, 122, 251], "sum": [29, 61, 143, 150, 155, 157, 167, 185, 231, 251, 265, 302, 324, 325, 370, 381, 455, 456, 458, 461, 462, 463, 532, 534, 548, 550, 557, 572, 590, 608, 613, 615, 621, 623, 640, 650, 669, 687, 755, 756, 809, 810, 883, 884, 886, 889, 890, 891, 982], "pass": [29, 33, 61, 71, 89, 104, 111, 121, 123, 125, 133, 137, 139, 155, 156, 157, 159, 173, 183, 184, 197, 204, 207, 218, 224, 228, 231, 251, 265, 338, 357, 378, 392, 441, 443, 478, 494, 500, 506, 534, 535, 539, 542, 550, 559, 565, 568, 579, 580, 590, 604, 610, 621, 622, 623, 625, 632, 639, 646, 650, 654, 659, 665, 669, 687, 696, 772, 795, 816, 825, 852, 927, 933, 939, 953, 982], "must": [29, 70, 88, 89, 103, 112, 138, 144, 156, 157, 171, 178, 193, 251, 302, 417, 455, 456, 457, 458, 459, 461, 462, 463, 590, 614, 622, 623, 628, 632, 637, 687, 758, 759, 874, 982], "funcnam": [29, 251], "averag": [29, 251, 372, 373, 374, 448, 590, 811, 812, 813, 876, 982], "count_num": [29, 251], "count": [29, 100, 101, 105, 109, 111, 113, 114, 115, 138, 156, 157, 171, 181, 182, 185, 219, 223, 224, 229, 233, 242, 251, 266, 282, 321, 354, 410, 435, 439, 455, 456, 457, 458, 459, 461, 462, 463, 483, 528, 530, 537, 569, 590, 622, 623, 628, 662, 667, 671, 680, 687, 713, 759, 792, 826, 864, 869, 916, 969, 971, 982], "std_dev": [29, 251], "var": [29, 126, 251, 590, 687, 982], "pixel": [29, 251], "unit": [29, 36, 38, 71, 123, 125, 143, 251, 331, 332, 338, 363, 368, 415, 428, 507, 509, 529, 559, 590, 640, 687, 765, 766, 772, 801, 806, 810, 856, 940, 942, 970, 982, 990], "hand": [29, 100, 101, 111, 251], "side": [29, 156, 157, 251, 394, 455, 456, 457, 458, 459, 461, 462, 463, 466, 590, 622, 623, 687, 830, 894, 982], "call": [29, 101, 123, 125, 129, 132, 155, 156, 157, 172, 250, 251, 265, 322, 325, 565, 568, 590, 602, 621, 622, 623, 686, 687, 696, 982], "ad": [29, 90, 131, 156, 219, 228, 251, 264, 378, 548, 549, 590, 622, 665, 687, 816, 982], "end": [29, 71, 100, 101, 109, 111, 156, 251, 297, 308, 354, 358, 359, 375, 394, 482, 486, 489, 501, 505, 538, 542, 555, 583, 590, 622, 624, 631, 640, 687, 728, 738, 792, 796, 830, 919, 922, 934, 938, 982], "wise": [29, 61, 150, 251, 267, 268, 269, 270, 271, 272, 318, 319, 376, 413, 472, 473, 474, 522, 523, 548, 549, 557, 565, 568, 572, 590, 697, 698, 699, 700, 701, 702, 751, 752, 814, 854, 855, 905, 906, 907, 956, 957, 982], "match": [29, 69, 81, 87, 89, 90, 91, 93, 118, 119, 147, 171, 193, 251, 425, 482, 483, 486, 488, 489, 490, 491, 497, 498, 505, 507, 508, 509, 542, 617, 628, 687, 839, 846, 915, 916, 919, 921, 922, 923, 924, 930, 931, 938, 940, 941, 942, 982], "particip": [29, 251], "distinct": [29, 125, 183, 251, 303, 448, 553, 590, 734, 876, 982, 990], "referenc": [29, 251, 515], "differ": [29, 100, 116, 118, 145, 156, 157, 168, 194, 211, 219, 251, 283, 327, 336, 354, 355, 357, 366, 419, 436, 437, 507, 528, 556, 559, 590, 613, 622, 623, 687, 695, 696, 714, 760, 770, 792, 793, 795, 804, 866, 867, 895, 940, 982], "row_index": [29, 251], "height": [29, 141, 251], "provid": [29, 51, 100, 101, 102, 103, 111, 112, 123, 125, 167, 251, 302, 306, 307, 484, 485, 488, 490, 491, 559, 601, 651, 652, 687, 736, 737, 826, 849, 917, 918, 921, 923, 924, 982, 990], "intersect": [29, 251], "bodi": [29, 251], "start": [29, 71, 99, 100, 101, 105, 109, 111, 113, 114, 115, 127, 155, 156, 172, 203, 224, 229, 251, 297, 309, 336, 338, 339, 341, 342, 347, 349, 355, 356, 358, 359, 363, 365, 366, 367, 369, 375, 394, 476, 482, 486, 489, 501, 505, 538, 542, 548, 555, 557, 583, 590, 621, 622, 640, 653, 667, 687, 728, 739, 765, 767, 770, 772, 773, 775, 780, 782, 785, 787, 790, 793, 794, 796, 797, 801, 803, 804, 805, 806, 807, 830, 909, 919, 922, 934, 938, 982, 990], "zero": [29, 87, 88, 99, 100, 101, 105, 109, 122, 131, 134, 147, 168, 193, 209, 214, 215, 251, 302, 379, 380, 414, 466, 475, 513, 526, 590, 606, 617, 687, 733, 746, 818, 908, 946, 959, 964, 965, 982], "unless": [29, 61, 89, 215, 251, 687, 965, 973, 982], "marker": [29, 251], "compliant": [29, 251], "case": [29, 61, 87, 89, 90, 91, 93, 115, 127, 132, 145, 156, 157, 168, 251, 417, 418, 427, 428, 482, 489, 497, 590, 622, 623, 687, 695, 915, 922, 930, 982], "three": [29, 217, 251, 302, 466, 590, 733], "avail": [29, 97, 103, 112, 121, 129, 250, 251, 448, 584, 586, 589, 590, 591, 592, 595, 596, 597, 598, 601, 602, 615, 686, 687, 876, 976, 978, 982, 983, 986, 987, 988], "insert_befor": [29, 251], "insert_aft": [29, 251], "respect": [29, 251], "direct": [29, 102, 109, 115, 222, 251], "far": [29, 251], "thei": [29, 90, 111, 118, 129, 172, 251, 454, 590, 882, 982], "strongli": [29, 127, 132, 193, 233, 251, 265, 590, 671, 696, 982], "advis": [29, 172, 251], "structur": [29, 78, 82, 84, 145, 184, 214, 251, 443, 590, 639, 687, 695, 982], "your": [29, 100, 101, 118, 119, 132, 168, 197, 228, 231, 251, 265, 590, 608, 624, 631, 632, 646, 665, 669, 687, 696, 982, 990], "wherev": [29, 132, 233, 251, 265, 590, 671, 696, 982], "possibl": [29, 100, 132, 155, 168, 194, 220, 233, 251, 265, 415, 427, 504, 529, 590, 621, 660, 671, 687, 696, 937, 982], "simpl": [29, 125, 181, 251], "colx": [29, 251, 990], "coli": [29, 251, 990], "after": [29, 90, 99, 100, 101, 105, 109, 111, 113, 114, 115, 145, 221, 250, 251, 375, 419, 448, 513, 590, 661, 687, 695, 857, 876, 946, 982], "befor": [29, 100, 111, 127, 129, 145, 156, 171, 221, 251, 324, 325, 326, 419, 442, 454, 455, 456, 457, 458, 459, 461, 462, 463, 513, 518, 574, 575, 590, 622, 625, 628, 661, 687, 695, 755, 756, 757, 857, 870, 882, 883, 884, 885, 886, 887, 889, 890, 891, 946, 952, 982], "most": [29, 87, 100, 101, 111, 251, 428, 433, 442, 504, 530, 590, 862, 870, 937, 971, 982], "mandatori": [29, 251], "return_dtyp": [29, 132, 251, 265, 417, 419, 536, 564, 590, 696, 857, 982], "latter": [29, 145, 251, 695, 982], "appropri": [29, 251, 448, 590, 876, 982], "pure": [29, 251], "actual": [29, 90, 104, 123, 125, 251, 903, 982], "indic": [29, 66, 95, 99, 100, 101, 105, 109, 111, 120, 121, 125, 156, 157, 171, 198, 212, 224, 251, 276, 301, 354, 358, 365, 396, 399, 400, 402, 403, 404, 423, 426, 455, 456, 457, 458, 459, 461, 462, 463, 466, 472, 520, 539, 590, 622, 623, 628, 647, 687, 732, 792, 796, 803, 834, 838, 840, 841, 842, 843, 894, 905, 954, 960, 982, 990], "calcul": [29, 61, 156, 205, 225, 251, 283, 327, 372, 373, 374, 407, 415, 460, 475, 480, 529, 531, 534, 536, 545, 570, 574, 575, 577, 578, 582, 590, 622, 655, 663, 687, 714, 760, 811, 812, 813, 850, 888, 908, 912, 972, 982], "individu": [29, 123, 157, 214, 251, 265, 489, 590, 623, 652, 687, 745, 922, 982], "gridlin": [29, 251], "zoom": [29, 251], "level": [29, 33, 111, 113, 114, 115, 123, 132, 150, 181, 251, 381, 590, 624, 631, 652, 687], "definit": [29, 121, 251, 407, 590, 850, 982], "take": [29, 123, 129, 150, 178, 184, 208, 251, 354, 478, 521, 554, 556, 590, 637, 658, 687, 792, 955, 974, 982], "care": [29, 251, 265, 467, 590, 898, 982], "rel": [29, 103, 112, 118, 119, 251, 354, 372, 373, 374, 590, 792, 811, 812, 813, 982], "see": [29, 102, 103, 104, 112, 118, 119, 123, 125, 137, 170, 184, 251, 315, 316, 317, 380, 393, 407, 417, 475, 482, 488, 489, 497, 572, 590, 747, 748, 749, 850, 908, 915, 921, 922, 930, 982, 990], "readthedoc": [29, 251], "io": [29, 251], "working_with_conditional_format": [29, 251], "html": [29, 88, 102, 131, 137, 251], "similarli": [29, 90, 251], "well": [29, 100, 101, 111, 144, 185, 251, 394, 590, 614, 687, 830, 982], "adjac": [29, 251], "two": [29, 89, 91, 93, 102, 150, 177, 178, 185, 217, 232, 233, 251, 259, 302, 328, 332, 477, 520, 545, 547, 570, 574, 575, 577, 590, 636, 637, 670, 671, 687, 733, 761, 766, 982], "help": [29, 251, 615, 687], "where": [29, 66, 102, 122, 141, 145, 168, 177, 194, 205, 225, 251, 276, 367, 370, 466, 475, 478, 480, 531, 545, 570, 574, 575, 577, 578, 582, 583, 590, 636, 655, 663, 687, 695, 706, 805, 809, 894, 908, 912, 972, 974, 982], "appear": [29, 90, 118, 251, 528, 590, 969, 982], "working_with_sparklin": [29, 251], "inject": [29, 61, 251], "locat": [29, 145, 191, 216, 221, 251, 466, 590, 661, 687, 695, 894, 897, 954, 982], "syntax": [29, 132, 181, 251, 482, 488, 489, 497, 650, 687, 915, 921, 922, 930, 982], "ensur": [29, 72, 122, 123, 125, 155, 183, 193, 251, 394, 530, 590, 621, 632, 687, 964, 971, 982], "correctli": [29, 251], "microsoft": [29, 117, 251], "com": [29, 102, 251, 372, 373, 374, 488, 489, 590, 811, 812, 813, 921, 922, 982], "u": [29, 36, 38, 71, 94, 168, 194, 211, 251, 331, 332, 338, 363, 368, 507, 509, 559, 765, 766, 772, 801, 806, 940, 942], "offic": [29, 251], "f5ed2452": [29, 251], "2337": [29, 251], "4f71": [29, 251], "bed3": [29, 251], "c8ae6d2b276": [29, 251], "instanti": [29, 197, 228, 251, 646, 665, 687], "basic": [29, 251, 990], "random": [29, 121, 123, 125, 158, 195, 251, 389, 448, 465, 471, 590, 824, 876, 893, 904, 982], "date": [29, 36, 61, 71, 100, 101, 102, 111, 116, 123, 138, 154, 156, 157, 169, 171, 224, 251, 281, 282, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 455, 456, 457, 458, 459, 461, 462, 463, 507, 508, 524, 559, 563, 573, 590, 622, 623, 628, 687, 712, 713, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 846, 866, 867, 897, 940, 941, 966, 982], "dtm": [29, 251, 332, 766], "2023": [29, 94, 117, 169, 251, 332, 563, 766], "num": [29, 217, 251, 394, 397, 513, 590, 830, 982], "500": [29, 168, 223, 251, 615, 662, 687, 780, 782, 790, 797, 883, 884, 886, 982], "val": [29, 192, 251, 313, 443, 524, 583, 590, 644, 687, 743], "10_000": [29, 251], "20_000": [29, 251], "30_000": [29, 251], "increas": [29, 100, 109, 251, 326, 590, 757, 982], "b4": [29, 251], "light": [29, 251], "twice": [29, 104, 251], "each": [29, 61, 101, 114, 118, 119, 121, 132, 154, 155, 156, 157, 169, 171, 183, 215, 221, 224, 230, 231, 233, 234, 236, 245, 251, 265, 288, 300, 354, 358, 365, 414, 448, 478, 489, 503, 504, 536, 539, 544, 579, 590, 622, 623, 628, 640, 661, 669, 671, 672, 674, 683, 687, 719, 731, 745, 792, 796, 803, 876, 922, 936, 937, 951, 982, 990], "titl": [29, 251], "explicit": [29, 111, 121, 251, 538, 572], "integr": [29, 251, 990], "multi_fram": [29, 251], "wb": [29, 251], "coordin": [29, 251], "advanc": [29, 251, 302, 733, 990], "len": [29, 70, 121, 123, 169, 251, 321, 452, 493, 499, 513, 590, 758, 874, 880, 926, 932, 946, 982], "min_color": [29, 251], "76933c": [29, 251], "mid_color": [29, 251], "c4d79b": [29, 251], "max_color": [29, 251], "ebf1d": [29, 251], "data_bar_2010": [29, 251], "bar_color": [29, 251], "9bbb59": [29, 251], "bar_negative_color_sam": [29, 251], "bar_negative_border_color_sam": [29, 251], "000": [29, 251, 990], "white": [29, 251], "w": [29, 251, 488, 921], "get_worksheet_by_nam": [29, 251], "fmt_titl": [29, 251], "add_format": [29, 251], "font_color": [29, 251], "4f6228": [29, 251], "font_siz": [29, 251], "12": [29, 61, 70, 71, 94, 122, 123, 156, 157, 171, 224, 251, 324, 332, 339, 342, 349, 350, 351, 356, 358, 365, 369, 442, 470, 549, 551, 552, 564, 590, 622, 623, 624, 628, 631, 650, 657, 687, 696, 758, 766, 787, 796, 803, 892, 982, 990], "ital": [29, 251], "bold": [29, 251], "customis": [29, 251], "trend": [29, 251], "win_loss": [29, 251], "subtl": [29, 251], "tone": [29, 251], "hidden": [29, 251], "id": [29, 233, 251, 497, 498, 528, 530, 590, 671, 969, 982, 990], "q1": [29, 251], "55": [29, 63, 251], "20": [29, 123, 145, 161, 162, 184, 186, 190, 191, 251, 273, 274, 275, 327, 358, 365, 389, 393, 443, 559, 563, 590, 639, 687, 760, 803, 982], "35": [29, 117, 251, 327, 590, 760, 982], "q2": [29, 251], "30": [29, 70, 145, 156, 161, 184, 190, 191, 210, 228, 251, 273, 274, 275, 327, 332, 337, 342, 350, 356, 357, 358, 365, 369, 389, 470, 563, 590, 622, 639, 665, 687, 758, 760, 766, 771, 788, 795, 796, 803, 982, 990], "15": [29, 117, 122, 132, 156, 157, 162, 251, 326, 327, 351, 358, 365, 443, 549, 590, 622, 623, 687, 757, 760, 796, 803, 982], "60": [29, 145, 251, 359, 360, 507, 793, 797, 798, 940], "q3": [29, 251], "50": [29, 145, 251, 315, 316, 317, 358, 365, 590, 747, 803, 982], "40": [29, 145, 184, 251, 358, 365, 389, 590, 639, 687, 776, 803], "80": [29, 251], "q4": [29, 251], "75": [29, 138, 251, 262, 440, 590, 759, 826, 874, 982, 990], "account": [29, 94, 251, 354, 372, 373, 374, 590, 792, 811, 812, 813, 982], "flavour": [29, 251], "integer_dtyp": [29, 197, 251, 646, 687], "0_": [29, 251], "just": [29, 102, 111, 177, 251, 636, 687], "unifi": [29, 251], "multi": [29, 100, 101, 251, 375, 488, 565, 568, 590, 921], "2_color_scal": [29, 251], "95b3d7": [29, 251], "ffffff": [29, 251], "base": [29, 34, 141, 148, 156, 157, 251, 370, 372, 373, 374, 412, 413, 496, 590, 611, 618, 622, 623, 687, 809, 811, 812, 813, 826, 853, 854, 874, 929, 974, 982, 990], "standardis": [29, 251], "z": [29, 94, 121, 123, 143, 164, 166, 170, 177, 251, 258, 262, 280, 313, 389, 440, 451, 489, 507, 509, 590, 627, 636, 653, 687, 743, 818, 922, 940, 942, 982], "score": [29, 251], "conjunct": [29, 104, 251], "a123": [29, 251], "b345": [29, 251], "c567": [29, 251], "d789": [29, 251], "e101": [29, 251], "45": [29, 157, 251, 332, 358, 365, 483, 489, 563, 623, 687, 766, 796, 803, 916, 922, 990], "85": [29, 251, 990], "font": [29, 251], "consola": [29, 251], "standard": [29, 117, 205, 214, 251, 342, 373, 461, 475, 480, 491, 578, 590, 655, 687, 776, 812, 908, 912, 924, 982, 990], "stdev": [29, 251], "ipccompress": [30, 251], "arrow": [30, 73, 87, 102, 105, 113, 209, 251, 651, 687, 959, 964, 982], "ipc": [30, 105, 106, 113, 116, 251, 601], "binari": [30, 251, 305, 307, 308, 309, 535, 735, 737, 738, 739], "feather": [30, 105, 113, 251, 601], "lz4": [30, 33, 251, 651, 652, 687], "zstd": [30, 33, 251, 651, 652, 687], "pretti": [31, 251], "row_ori": [31, 251], "iobas": [31, 32, 107, 108, 251, 642, 668, 687], "serial": [31, 32, 251], "represent": [31, 32, 213, 251, 313, 336, 339, 342, 343, 345, 347, 349, 352, 355, 356, 359, 366, 367, 369, 524, 590, 613, 630, 687, 743, 770, 773, 775, 776, 780, 782, 785, 787, 790, 793, 794, 797, 804, 805, 807, 962, 966, 982], "orient": [31, 62, 64, 91, 93, 251, 687], "slower": [31, 91, 93, 132, 155, 183, 224, 233, 251, 621, 671, 687, 696, 982], "common": [31, 251, 595], "write_ndjson": [31, 251], "newlin": [32, 108, 114, 251], "delimit": [32, 95, 100, 101, 108, 111, 114, 185, 212, 251, 481, 914, 960, 982], "parquetcompress": [33, 251], "compression_level": [33, 251, 652, 687], "statist": [33, 100, 101, 109, 115, 138, 251, 373, 374, 407, 455, 456, 457, 458, 459, 460, 461, 462, 463, 475, 590, 652, 687, 759, 812, 813, 850, 888, 908, 982], "row_group_s": [33, 251, 652, 687], "use_pyarrow": [33, 100, 105, 109, 251, 652, 687, 963, 964, 982], "pyarrow_opt": [33, 103, 109, 112, 251], "parquet": [33, 109, 110, 115, 251, 601, 652, 687], "gzip": [33, 251, 652, 687], "lzo": [33, 251, 652, 687], "brotli": [33, 251, 652, 687], "choos": [33, 251, 651, 652, 687], "good": [33, 168, 251, 651, 652, 687], "perform": [33, 78, 88, 100, 101, 105, 109, 111, 113, 114, 115, 131, 132, 156, 157, 171, 188, 233, 251, 265, 441, 590, 622, 623, 628, 651, 652, 667, 671, 687, 696, 982], "fast": [33, 124, 126, 251, 378, 467, 590, 651, 652, 687, 816, 898, 982, 990], "decompress": [33, 251, 651, 652, 687], "backward": [33, 147, 171, 251, 304, 351, 380, 590, 617, 628, 652, 687, 789, 818, 982], "guarante": [33, 88, 100, 101, 220, 251, 615, 652, 660, 687], "deal": [33, 168, 251, 357, 448, 507, 590, 652, 687, 795, 876, 940, 982], "older": [33, 251, 652, 687], "reader": [33, 97, 100, 101, 105, 109, 251, 602, 652, 687], "higher": [33, 187, 243, 251, 447, 459, 571, 590, 641, 652, 681, 687, 875, 887, 982], "mean": [33, 100, 101, 105, 109, 111, 138, 147, 155, 185, 231, 251, 377, 380, 456, 475, 488, 540, 590, 617, 621, 632, 652, 669, 687, 759, 815, 818, 823, 884, 908, 921, 982], "smaller": [33, 143, 251, 615, 652, 687, 810, 982], "disk": [33, 105, 251, 650, 651, 652, 687], "11": [33, 117, 123, 157, 251, 329, 330, 342, 350, 351, 354, 358, 365, 393, 442, 462, 476, 513, 533, 542, 580, 590, 608, 623, 624, 631, 640, 652, 657, 687, 696, 792, 796, 803, 882, 982], "22": [33, 122, 251, 358, 365, 368, 507, 542, 652, 687, 796, 803, 806, 940, 990], "extra": [33, 100, 103, 104, 105, 109, 112, 113, 115, 145, 251, 652, 687, 695, 982], "comput": [33, 68, 69, 75, 143, 155, 171, 215, 220, 231, 243, 251, 257, 267, 268, 269, 270, 271, 272, 292, 293, 294, 318, 319, 321, 322, 323, 324, 325, 328, 370, 376, 407, 412, 413, 414, 433, 441, 442, 446, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 472, 473, 474, 475, 479, 522, 523, 534, 535, 539, 545, 547, 550, 554, 565, 568, 570, 574, 575, 577, 580, 590, 621, 625, 627, 628, 652, 660, 666, 669, 681, 687, 691, 697, 698, 699, 700, 701, 702, 723, 724, 725, 751, 752, 753, 754, 755, 756, 761, 809, 810, 814, 850, 853, 854, 855, 862, 870, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 905, 906, 907, 908, 911, 956, 957, 965, 982], "reduc": [33, 100, 101, 109, 111, 113, 114, 115, 238, 239, 241, 244, 251, 470, 557, 590, 652, 676, 677, 679, 682, 687, 859, 873, 902, 952, 982], "pressur": [33, 109, 114, 115, 251, 470, 590, 652, 687, 902, 982], "improv": [33, 105, 113, 251, 652, 687], "speed": [33, 251, 265, 590, 652, 687], "minimum": [33, 121, 122, 123, 125, 150, 179, 251, 372, 373, 374, 431, 437, 448, 568, 590, 638, 652, 687, 747, 784, 811, 812, 813, 867, 872, 876, 982, 990], "implement": [33, 88, 131, 132, 233, 251, 265, 590, 671, 696, 896, 897, 982], "v": [33, 70, 143, 251, 466, 590, 758, 894, 982], "At": [33, 251], "moment": [33, 137, 251, 407, 475, 590, 850, 908, 982], "argument": [33, 100, 103, 109, 112, 137, 139, 144, 155, 156, 157, 175, 183, 184, 185, 197, 198, 204, 206, 215, 221, 224, 228, 231, 251, 358, 365, 375, 394, 441, 443, 455, 456, 457, 458, 459, 461, 462, 463, 478, 494, 500, 506, 507, 534, 535, 539, 541, 542, 543, 544, 550, 555, 565, 568, 576, 579, 580, 590, 610, 614, 621, 622, 623, 639, 646, 647, 654, 661, 665, 669, 687, 796, 803, 830, 927, 933, 939, 940, 965, 982], "pyarrow": [33, 87, 92, 100, 103, 105, 109, 112, 116, 117, 169, 209, 214, 215, 251, 602, 959, 963, 964, 965, 982], "write_t": [33, 251], "calendar": [35, 36, 156, 157, 171, 224, 251, 342, 354, 358, 365, 369, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 623, 628, 687, 776, 792, 796, 803, 807], "time": [36, 38, 67, 68, 71, 111, 145, 156, 157, 171, 224, 251, 280, 281, 282, 302, 310, 331, 332, 333, 338, 354, 357, 361, 363, 364, 368, 507, 509, 511, 524, 525, 543, 544, 553, 559, 573, 590, 608, 622, 623, 628, 640, 687, 695, 711, 713, 740, 765, 766, 767, 772, 792, 795, 799, 801, 802, 806, 940, 942, 944, 966, 967, 982, 990], "time_unit": [36, 38, 71, 94, 331, 332, 338, 363, 368, 509, 559, 765, 766, 772, 801, 806, 942], "time_zon": [36, 71, 94, 333, 357, 509, 767, 795, 942], "timezon": [36, 71], "m": [36, 38, 71, 331, 332, 338, 361, 363, 364, 368, 488, 507, 508, 509, 511, 559, 765, 766, 772, 799, 801, 802, 806, 921, 940, 941, 942, 944], "zone": [36, 71, 333, 357, 507, 509, 767, 795, 940, 942], "zoneinfo": 36, "run": [36, 68, 124, 126, 132, 155, 172, 185, 220, 233, 251, 265, 284, 326, 576, 590, 608, 613, 615, 621, 632, 636, 640, 650, 651, 652, 660, 671, 687, 696, 715, 757, 982, 989, 990], "available_timezon": 36, "128": [37, 63, 870, 982], "bit": [37, 39, 40, 41, 42, 43, 44, 55, 56, 57, 58, 450, 482, 590, 878, 915, 982], "neg": [37, 156, 159, 173, 200, 201, 203, 207, 251, 296, 297, 443, 468, 469, 476, 501, 590, 622, 648, 649, 653, 667, 687, 727, 728, 825, 852, 900, 901, 909, 934, 953, 982], "scale": [37, 143, 251, 443, 590, 810, 982], "experiment": [37, 70, 116, 197, 222, 223, 228, 251, 326, 358, 455, 456, 457, 458, 459, 461, 462, 463, 590, 646, 662, 665, 687, 757, 796, 826, 874, 982], "progress": 37, "expect": [37, 79, 81, 86, 265, 536, 563, 590, 630, 632, 687, 874, 982], "delta": [38, 103, 112, 205, 225, 251, 480, 531, 545, 570, 574, 575, 577, 578, 582, 590, 601, 655, 663, 687, 912, 972, 982], "32": [39, 42, 56, 63, 157, 167, 251, 434, 470, 590, 623, 687, 761, 793, 870, 887, 982], "sign": [41, 42, 43, 44, 354, 450, 513, 590, 792, 839, 878, 946, 982], "inner": [45, 52, 72, 122, 170, 223, 251, 289, 328, 524, 590, 627, 662, 668, 687, 720, 761, 966, 982], "polarsdatatyp": [45, 98, 100, 101, 106, 110, 111, 120, 121, 122, 123, 125, 128, 132, 142, 251, 265, 312, 375, 417, 419, 490, 536, 538, 542, 555, 563, 564, 590, 612, 687, 696, 741, 857, 923, 982], "pythondatatyp": 45, "nest": [45, 52, 94, 143, 251, 601, 810, 982, 990], "arrai": [45, 87, 91, 100, 101, 109, 143, 209, 214, 215, 251, 280, 291, 292, 293, 294, 295, 298, 299, 307, 315, 316, 317, 321, 322, 323, 324, 325, 413, 455, 456, 458, 461, 462, 463, 467, 483, 485, 488, 491, 554, 590, 687, 711, 722, 723, 724, 725, 726, 729, 730, 737, 747, 748, 749, 753, 754, 755, 756, 761, 810, 854, 855, 883, 884, 886, 889, 890, 891, 898, 903, 916, 918, 921, 924, 959, 964, 965, 973, 982], "within": [45, 118, 119, 156, 157, 171, 224, 251, 478, 590, 622, 623, 628, 687], "wrap": [47, 94, 394, 590], "arbitrari": [47, 123], "python": [47, 71, 100, 101, 117, 132, 168, 194, 211, 233, 251, 265, 332, 417, 536, 583, 590, 595, 671, 696, 766, 777, 778, 779, 784, 963, 982], "queri": [48, 68, 102, 105, 111, 113, 114, 115, 145, 172, 184, 251, 419, 491, 590, 608, 613, 615, 624, 631, 640, 650, 667, 671, 687, 695, 924, 982, 989], "pars": [48, 49, 100, 101, 104, 111, 113, 114, 133, 155, 197, 204, 218, 228, 231, 251, 394, 441, 478, 490, 496, 507, 509, 534, 535, 539, 541, 543, 544, 550, 559, 565, 568, 579, 580, 590, 604, 621, 646, 654, 659, 665, 669, 687, 830, 923, 929, 940, 942, 982], "lazili": [48, 100, 101, 111, 112, 113, 114, 115, 419, 590], "execut": [49, 69, 172, 251, 284, 311, 590, 605, 632, 640, 687, 715], "eagerli": [49, 302], "under": [50, 62, 63, 64, 65, 584, 586, 591, 592, 596, 597, 598, 976, 978, 983, 986, 987, 988], "named_fram": 51, "map": [51, 89, 90, 100, 101, 105, 106, 109, 110, 111, 113, 132, 142, 168, 189, 193, 194, 210, 251, 358, 365, 418, 419, 530, 536, 590, 612, 643, 687, 796, 803, 857, 982], "context": [52, 127, 181, 234, 251, 259, 265, 284, 311, 320, 381, 427, 477, 478, 530, 536, 546, 556, 559, 576, 589, 590, 601, 666, 672, 687, 715], "manag": [52, 601], "categor": [52, 72, 95, 170, 212, 213, 251, 313, 419, 524, 590, 742, 743, 966, 982], "temporarili": [52, 127, 156, 157, 251, 622, 623, 687], "cach": [52, 68, 72, 105, 111, 113, 115, 419, 455, 456, 457, 458, 459, 461, 462, 463, 507, 508, 509, 511, 590, 608, 613, 615, 640, 650, 687, 940, 941, 942, 944], "categori": [52, 70, 72, 313, 743, 758, 826, 874, 982], "until": [52, 172, 251], "finish": [52, 75, 145, 251, 695, 982], "global": [52, 72, 123, 419, 590], "invalid": [52, 100, 101, 111, 490, 491, 496, 526, 590, 923, 924, 929], "outermost": 52, "exit": [52, 129], "df1": [52, 61, 69, 72, 118, 145, 151, 215, 226, 251], "color": [52, 72, 233, 671], "red": [52, 72, 233, 671], "green": [52, 72, 233, 671], "blue": [52, 72], "orang": [52, 72, 136, 234, 235, 237, 238, 239, 241, 243, 244, 251, 672, 673, 675, 676, 677, 679, 681, 682], "uint8": [52, 72, 120, 122, 213, 214, 251, 324, 325, 419, 518, 533, 590, 755, 756, 952, 982, 990], "df2": [52, 61, 69, 72, 118, 145, 151, 215, 226, 251], "yellow": [52, 72], "black": [52, 72, 132, 251], "join": [52, 61, 68, 72, 171, 223, 251, 393, 441, 590, 608, 613, 615, 628, 640, 650, 662, 666, 687], "succe": [52, 100, 101, 111], "df_join": [52, 72], "cat": [52, 70, 72, 213, 251, 482, 510, 512, 524, 544, 586, 590, 758, 826, 874, 915, 978, 982], "u8": [52, 72, 95, 212, 213, 251, 419, 533, 590, 960, 982, 990], "schemadict": [53, 87, 89, 90, 91, 92, 93, 111, 196, 251, 579, 632, 645, 671, 687], "composit": [53, 122, 990], "dai": [54, 71, 156, 157, 169, 171, 224, 251, 338, 342, 349, 350, 351, 354, 355, 356, 358, 363, 365, 366, 367, 369, 455, 456, 457, 458, 459, 461, 462, 463, 551, 552, 553, 590, 622, 623, 628, 687, 788, 789, 792, 793, 796, 803, 805], "unsign": [55, 56, 57, 58, 450, 590, 839, 878, 982], "could": [59, 75, 141, 156, 251, 312, 548, 557, 590, 611, 622, 687, 741, 982], "static": [59, 671], "utf": 60, "descend": [61, 133, 198, 204, 218, 251, 275, 298, 448, 467, 477, 478, 539, 590, 604, 647, 654, 659, 687, 705, 729, 845, 876, 898, 910, 982], "uniqu": [61, 120, 121, 122, 125, 166, 181, 242, 251, 266, 277, 397, 405, 435, 507, 508, 509, 511, 528, 530, 537, 569, 590, 680, 687, 707, 759, 835, 847, 864, 940, 941, 942, 944, 969, 971, 982], "fill": [61, 69, 98, 128, 146, 147, 201, 222, 251, 304, 322, 325, 379, 380, 386, 393, 455, 456, 458, 461, 462, 463, 469, 493, 499, 513, 558, 590, 616, 617, 649, 666, 687, 817, 818, 868, 883, 884, 886, 889, 890, 891, 901, 926, 932, 946, 982], "sort": [61, 62, 118, 122, 133, 156, 157, 171, 178, 184, 185, 198, 218, 224, 236, 245, 251, 275, 313, 381, 467, 478, 530, 532, 539, 590, 604, 613, 622, 623, 628, 637, 639, 640, 647, 650, 659, 674, 683, 687, 705, 743, 845, 898, 968, 971, 982, 990], "origin": [61, 100, 101, 220, 251, 357, 406, 419, 441, 450, 483, 488, 489, 491, 493, 499, 513, 590, 660, 687, 758, 795, 857, 874, 916, 921, 922, 924, 926, 932, 946, 982], "doe": [61, 81, 87, 89, 90, 91, 93, 94, 100, 101, 103, 104, 111, 112, 116, 118, 119, 145, 169, 193, 194, 220, 228, 251, 302, 365, 368, 419, 528, 556, 590, 615, 632, 660, 665, 687, 695, 806, 823, 857, 903, 973, 982], "receiv": [61, 111, 132, 184, 251, 443, 590, 639, 687, 990], "now": [61, 157, 251, 507, 623, 687, 940], "whose": [61, 171, 185, 251, 375, 555, 590, 628, 687], "post": 61, "constrain": 61, "newli": 61, "boolean": [61, 66, 133, 148, 150, 204, 218, 251, 261, 262, 263, 281, 305, 341, 381, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 440, 478, 490, 532, 533, 539, 579, 590, 604, 618, 654, 659, 687, 693, 694, 706, 712, 735, 775, 819, 830, 831, 832, 834, 835, 837, 838, 840, 841, 842, 843, 847, 871, 872, 896, 915, 974, 982], "2022": [61, 71, 138, 154, 156, 157, 171, 224, 251, 332, 354, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 507, 553, 559, 590, 622, 623, 628, 687, 766, 776, 792, 796, 803, 940], "x": [61, 94, 100, 101, 102, 111, 121, 123, 143, 161, 164, 166, 170, 177, 185, 251, 258, 262, 265, 280, 289, 371, 385, 387, 388, 389, 409, 414, 416, 417, 432, 434, 438, 440, 444, 451, 472, 475, 503, 516, 524, 526, 533, 536, 548, 549, 557, 563, 564, 572, 590, 627, 632, 636, 653, 687, 692, 696, 818, 848, 905, 908, 936, 966, 982], "y": [61, 94, 121, 123, 143, 164, 166, 170, 177, 185, 251, 258, 262, 280, 289, 361, 364, 371, 387, 388, 409, 416, 438, 440, 451, 507, 508, 509, 526, 533, 563, 590, 627, 636, 653, 687, 692, 799, 802, 940, 941, 942, 982], "df3": [61, 251], "set_tbl_format": 61, "09": [61, 123, 157, 251, 332, 342, 350, 351, 623, 687, 770], "01": [61, 71, 123, 138, 154, 156, 157, 224, 251, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 507, 508, 509, 511, 553, 622, 623, 687, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 940, 941, 942, 944], "02": [61, 71, 154, 156, 157, 171, 224, 251, 331, 332, 338, 339, 340, 347, 348, 349, 350, 351, 354, 357, 358, 359, 360, 363, 365, 366, 368, 455, 456, 457, 458, 459, 461, 462, 463, 464, 507, 508, 509, 511, 553, 590, 622, 623, 628, 687, 733, 765, 766, 768, 769, 772, 773, 774, 777, 778, 779, 780, 782, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 800, 801, 803, 804, 805, 806, 940, 941, 942, 944], "03": [61, 71, 94, 156, 157, 224, 251, 331, 332, 333, 337, 338, 340, 348, 349, 350, 351, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 508, 511, 622, 623, 687, 765, 766, 767, 770, 771, 772, 773, 774, 777, 778, 779, 780, 782, 784, 786, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 801, 802, 804, 805, 806, 941, 944], "af1": 61, "af2": 61, "af3": 61, "keep": [61, 100, 101, 111, 220, 223, 224, 251, 406, 419, 541, 590, 660, 662, 687, 758, 857, 874, 982], "easili": [61, 197, 228, 231, 251, 542, 579, 646, 665, 669, 687], "dot": [61, 590, 650, 687, 982], "product": [61, 137, 251, 324, 328, 536, 590, 755, 761, 982], "fill_nul": [61, 146, 251, 590, 616, 666, 687, 982], "167": 61, "47": 61, "callabl": [62, 63, 64, 65, 111, 132, 150, 184, 233, 251, 265, 302, 417, 418, 443, 454, 536, 548, 549, 557, 564, 572, 590, 632, 639, 671, 687, 696, 733, 882, 982], "decor": [62, 63, 64, 65, 123, 125, 132, 251, 265, 590, 696, 982], "access": [62, 63, 64, 65, 168, 193, 194, 251, 419, 590, 666, 687, 990], "by_first_letter_of_column_nam": 62, "f": [62, 101, 138, 154, 169, 209, 219, 222, 251, 258, 265, 302, 470, 487, 507, 509, 536, 543, 564, 590, 733, 920, 940, 942], "fromkei": [62, 64], "by_first_letter_of_column_valu": 62, "starts_with": [62, 482, 486, 919], "slice": [62, 68, 143, 159, 169, 207, 251, 288, 300, 454, 455, 456, 457, 458, 459, 461, 462, 463, 590, 608, 613, 615, 632, 640, 650, 651, 652, 687, 719, 731, 810, 825, 882, 883, 884, 885, 886, 887, 889, 890, 891, 953, 982], "to_seri": [62, 66, 152, 251, 507, 940], "xx": [62, 64, 122, 125], "xy": [62, 64], "yy": [62, 64, 122, 125], "yz": [62, 64], "a2": [62, 64], "b1": [62, 64], "b2": [62, 64], "pow_n": 63, "powersofn": 63, "next": [63, 304, 448, 590, 876, 982], "p": [63, 184, 251, 443, 579, 590, 639, 687], "ceil": [63, 590, 982], "previou": [63, 129, 442, 515, 590, 870, 982], "floor": [63, 590, 982], "nearest": [63, 171, 187, 243, 251, 314, 384, 447, 459, 571, 590, 628, 641, 681, 687, 744, 821, 829, 875, 887, 982], "24": [63, 117, 132, 143, 157, 251, 324, 326, 340, 434, 590, 623, 687, 757, 774, 849, 982], "001": [63, 343, 344, 346, 353, 553, 781, 783, 791], "next_pow2": 63, "prev_pow2": 63, "nearest_pow2": 63, "split_by_column_dtyp": 64, "collect": [64, 68, 111, 112, 116, 123, 125, 172, 209, 251, 265, 398, 538, 543, 559, 579, 590, 604, 610, 611, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 638, 639, 641, 643, 644, 646, 648, 649, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 687, 837, 982, 990], "31": [65, 71, 123, 332, 336, 337, 349, 350, 354, 366, 507, 551, 552, 559, 563, 766, 770, 771, 788, 792, 940, 990], "42": [65, 157, 158, 251, 623, 687, 824, 982], "961": 65, "1764": 65, "4160": 65, "eager": [66, 71, 156, 222, 251, 331, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 363, 365, 366, 367, 368, 369, 538, 559, 573, 579, 589, 601, 622, 687, 765, 767, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 803, 804, 805, 806, 807], "evalu": [66, 71, 146, 148, 171, 251, 262, 276, 302, 326, 392, 394, 398, 419, 440, 534, 535, 538, 554, 573, 579, 583, 590, 618, 625, 627, 628, 687, 706, 757, 974, 982], "immedi": [66, 71, 448, 538, 573, 579, 590, 876, 982], "arg_tru": [66, 590, 982], "u32": [66, 156, 182, 229, 234, 242, 244, 251, 259, 266, 273, 274, 275, 276, 277, 278, 279, 282, 291, 320, 321, 336, 339, 343, 347, 349, 355, 356, 359, 366, 367, 410, 419, 435, 439, 448, 466, 483, 492, 495, 524, 528, 537, 539, 546, 569, 590, 622, 667, 672, 680, 682, 687, 705, 706, 707, 722, 741, 770, 773, 780, 782, 785, 787, 790, 793, 794, 797, 804, 805, 826, 876, 916, 925, 928, 966, 969, 971, 982], "build": [67, 88, 990], "wa": 67, "compil": [67, 278, 279, 709, 710], "gate": 67, "info": [67, 103, 112, 117, 341, 775], "otherwis": [67, 122, 127, 178, 197, 251, 302, 306, 315, 316, 317, 357, 372, 373, 374, 443, 450, 482, 484, 534, 535, 550, 565, 568, 580, 583, 590, 637, 646, 687, 696, 733, 736, 747, 748, 749, 795, 811, 812, 813, 878, 896, 897, 915, 917, 982], "version": [67, 70, 71, 95, 103, 112, 117, 350, 351, 507, 562, 570, 572, 577, 788, 789, 940], "depend": [67, 117, 265, 278, 279, 427, 448, 536, 556, 559, 590, 709, 710, 876, 982, 990], "host": [67, 100, 105, 109, 113, 115], "git": 67, "lazy_fram": 68, "type_coercion": [68, 608, 613, 615, 640, 650, 651, 652, 687], "predicate_pushdown": [68, 608, 613, 615, 632, 640, 650, 651, 652, 687], "projection_pushdown": [68, 608, 613, 615, 632, 640, 650, 651, 652, 687], "simplify_express": [68, 608, 613, 615, 640, 650, 651, 652, 687], "no_optim": [68, 608, 615, 632, 640, 651, 652, 687], "slice_pushdown": [68, 608, 613, 615, 632, 640, 650, 651, 652, 687], "common_subplan_elimin": [68, 608, 613, 615, 640, 650, 687], "graph": [68, 172, 251, 625, 666, 687], "parallel": [68, 69, 97, 102, 109, 115, 156, 171, 172, 184, 251, 284, 326, 590, 601, 622, 627, 628, 687, 715, 757, 982], "threadpool": [68, 127], "coercion": [68, 451, 590, 608, 613, 615, 640, 650, 651, 652, 687], "optim": [68, 109, 111, 113, 114, 115, 168, 172, 184, 188, 194, 220, 251, 608, 613, 615, 632, 640, 650, 651, 652, 660, 667, 687], "predic": [68, 111, 113, 114, 115, 116, 148, 167, 193, 251, 381, 532, 557, 590, 608, 613, 615, 618, 632, 640, 643, 650, 651, 652, 667, 687, 819, 896, 897, 982], "pushdown": [68, 608, 613, 615, 632, 640, 643, 650, 651, 652, 667, 687, 896, 897, 982], "project": [68, 111, 113, 114, 115, 265, 477, 478, 590, 608, 613, 615, 632, 640, 643, 650, 651, 652, 668, 687], "turn": [68, 100, 101, 111, 530, 590, 608, 613, 615, 632, 640, 651, 652, 687], "off": [68, 100, 101, 111, 530, 590, 608, 613, 615, 632, 640, 651, 652, 687], "Will": [68, 219, 251, 608, 613, 615, 640, 650, 687, 982], "try": [68, 82, 84, 100, 101, 104, 105, 109, 111, 113, 115, 608, 613, 615, 640, 650, 687], "branch": [68, 608, 613, 615, 640, 650, 687], "subplan": [68, 608, 613, 615, 640, 650, 687], "occur": [68, 282, 433, 448, 590, 608, 613, 615, 640, 650, 687, 713, 862, 876, 982], "union": [68, 69, 608, 613, 615, 640, 650, 687], "part": [68, 87, 123, 489, 503, 504, 608, 613, 615, 640, 650, 666, 687, 770, 773, 780, 782, 785, 787, 790, 797, 807, 922, 936, 937], "fashion": [68, 170, 251, 608, 613, 615, 640, 650, 687], "item": [69, 101, 193, 195, 251, 281, 287, 289, 377, 465, 504, 590, 712, 718, 720, 815, 893, 937, 982], "iter": [69, 124, 126, 133, 155, 156, 157, 168, 169, 183, 193, 194, 197, 198, 204, 218, 219, 228, 230, 231, 251, 326, 375, 441, 478, 534, 535, 539, 541, 542, 543, 544, 550, 555, 565, 568, 576, 579, 580, 583, 590, 604, 621, 622, 623, 646, 647, 654, 659, 665, 669, 687, 757, 982, 990], "concatmethod": 69, "vertic": [69, 145, 222, 226, 251, 481, 914], "rechunk": [69, 87, 92, 100, 101, 105, 109, 111, 113, 114, 115, 145, 251, 590, 695, 745, 863, 982], "aggreg": [69, 100, 101, 109, 150, 156, 157, 174, 175, 176, 179, 181, 185, 186, 187, 205, 206, 222, 225, 231, 232, 235, 237, 251, 259, 381, 391, 417, 441, 454, 455, 456, 457, 458, 459, 461, 462, 463, 530, 534, 535, 548, 549, 550, 557, 562, 565, 568, 572, 580, 590, 622, 623, 632, 633, 634, 635, 638, 641, 655, 656, 663, 669, 670, 673, 675, 687, 827, 882, 883, 884, 886, 889, 890, 891, 982], "concaten": [69, 150, 184, 251, 443, 543, 544, 590, 639, 687, 745, 863, 982], "diagon": [69, 219, 251], "strategi": [69, 100, 120, 121, 122, 123, 125, 147, 156, 170, 171, 180, 251, 265, 302, 380, 590, 617, 622, 627, 628, 687, 733, 818, 982], "vstack": [69, 145, 251], "find": [69, 149, 251, 466, 590, 894, 982], "miss": [69, 100, 101, 111, 146, 251, 304, 372, 373, 374, 386, 393, 400, 402, 577, 590, 616, 687, 811, 812, 813, 973, 982], "stack": [69, 161, 226, 251], "length": [69, 70, 98, 111, 121, 128, 156, 157, 203, 251, 297, 302, 326, 358, 365, 428, 454, 455, 456, 457, 458, 459, 461, 462, 463, 476, 493, 495, 499, 501, 513, 538, 574, 575, 590, 622, 623, 640, 653, 687, 728, 733, 745, 757, 758, 766, 796, 803, 851, 868, 874, 882, 883, 884, 885, 886, 887, 889, 890, 891, 909, 926, 928, 932, 934, 946, 982], "don": [69, 132, 220, 222, 251, 265, 284, 326, 536, 590, 660, 687, 696, 715, 757, 895, 973, 982], "t": [69, 104, 111, 132, 184, 220, 222, 251, 265, 284, 326, 357, 370, 372, 373, 374, 443, 488, 494, 500, 506, 507, 509, 536, 583, 590, 639, 660, 687, 696, 715, 757, 795, 809, 811, 812, 813, 895, 921, 927, 933, 939, 940, 942, 973, 982], "sure": [69, 87, 92, 100, 101, 102, 105, 109, 188, 251, 538], "contigu": [69, 87, 92, 100, 101, 105, 109, 111, 113, 114, 115, 188, 251], "relev": 69, "df_h1": 69, "l1": 69, "l2": 69, "df_h2": 69, "r1": 69, "r2": 69, "r3": 69, "df_d1": 69, "df_d2": 69, "bin": [70, 496, 533, 584, 590, 758, 826, 874, 929, 976, 982], "label": [70, 454, 455, 456, 457, 458, 459, 461, 462, 463, 590, 640, 687, 758, 874, 882, 883, 884, 885, 886, 887, 889, 890, 891, 982], "break_point_label": [70, 758, 874, 982], "break_point": [70, 758, 826, 874, 982], "category_label": [70, 758, 874, 982], "discret": [70, 283, 327, 370, 590, 714, 758, 760, 809, 826, 874, 982], "deprec": [70, 71, 95, 507, 562, 570, 577, 687, 940], "sinc": [70, 71, 95, 103, 112, 338, 507, 559, 562, 570, 577, 772, 940], "assign": [70, 121, 156, 251, 302, 448, 503, 504, 590, 622, 687, 733, 758, 857, 874, 876, 936, 937, 982], "breakpoint": [70, 758, 874, 982], "inf": [70, 123, 125, 272, 396, 399, 526, 590, 702, 758, 826, 834, 838, 856, 870, 874, 970, 982], "interv": [71, 156, 157, 224, 251, 341, 358, 359, 365, 394, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 623, 687, 770, 772, 773, 775, 780, 782, 785, 787, 790, 793, 794, 796, 797, 801, 803, 804, 805, 807, 830, 982], "timedelta": [71, 156, 157, 224, 251, 336, 338, 339, 342, 347, 349, 354, 355, 356, 358, 359, 363, 365, 366, 367, 369, 455, 456, 457, 458, 459, 461, 462, 463, 573, 590, 622, 623, 687, 777, 779, 784, 792, 796, 803, 866, 867, 982], "1d": [71, 156, 157, 171, 224, 251, 331, 340, 348, 354, 358, 365, 368, 455, 456, 457, 458, 459, 461, 462, 463, 563, 590, 622, 623, 628, 687, 765, 772, 774, 777, 778, 779, 784, 786, 792, 796, 801, 803, 805, 806], "_nodefault": [71, 185, 251, 507, 940], "no_default": [71, 185, 251, 507, 940], "closedinterv": [71, 156, 157, 251, 394, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 623, 687, 830, 982], "lower": [71, 111, 156, 187, 243, 251, 315, 317, 394, 415, 418, 447, 450, 459, 538, 571, 590, 615, 622, 641, 681, 687, 749, 830, 856, 875, 878, 887, 970, 982], "bound": [71, 100, 101, 143, 156, 251, 287, 301, 302, 315, 316, 317, 394, 415, 529, 538, 590, 622, 687, 718, 732, 748, 749, 810, 830, 856, 970, 982], "upper": [71, 100, 101, 143, 156, 251, 302, 315, 316, 394, 529, 538, 590, 622, 687, 748, 810, 830, 856, 970, 982], "period": [71, 156, 157, 200, 201, 251, 296, 358, 365, 372, 373, 374, 442, 468, 469, 590, 622, 623, 648, 649, 687, 727, 796, 803, 811, 812, 813, 870, 900, 901, 982], "like": [71, 88, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 164, 166, 170, 251, 284, 430, 448, 488, 580, 590, 615, 642, 687, 715, 876, 921, 982], "durat": [71, 171, 224, 251, 337, 340, 344, 346, 348, 353, 360, 368, 524, 590, 628, 687, 771, 774, 781, 783, 786, 791, 798, 806, 966, 982], "3d12h4m25": [71, 156, 157, 171, 224, 251, 358, 365, 622, 623, 628, 687, 796, 803], "hour": [71, 156, 157, 171, 224, 251, 354, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 552, 553, 590, 622, 623, 628, 687, 792, 796, 803], "minut": [71, 156, 157, 171, 224, 251, 354, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 552, 553, 590, 622, 623, 628, 687, 792, 796, 803], "17": [71, 117, 123, 231, 464, 507, 559, 562, 590, 669, 751, 796, 940, 982, 990], "tempor": [71, 156, 157, 168, 194, 211, 251, 394, 455, 456, 457, 458, 459, 461, 462, 463, 590, 601, 622, 623, 687, 830, 846, 982], "window": [71, 156, 157, 251, 326, 358, 365, 372, 373, 374, 441, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 543, 574, 575, 590, 622, 623, 687, 757, 796, 803, 811, 812, 813, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 982], "granular": 71, "finer": 71, "permut": 71, "1mo": [71, 156, 157, 171, 224, 251, 333, 337, 350, 351, 354, 357, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 623, 628, 687, 767, 771, 787, 788, 789, 792, 793, 794, 795, 796, 803, 804], "dtrang": 71, "1985": 71, "04": [71, 116, 156, 224, 251, 332, 333, 336, 337, 340, 347, 348, 349, 350, 351, 355, 357, 358, 359, 360, 361, 364, 366, 367, 368, 507, 553, 622, 687, 767, 771, 774, 780, 782, 785, 786, 787, 788, 789, 790, 794, 795, 797, 798, 799, 802, 804, 805, 806, 940], "05": [71, 116, 118, 119, 123, 171, 224, 251, 332, 333, 337, 357, 359, 361, 364, 628, 687, 766, 767, 768, 769, 770, 771, 795, 796, 799, 800, 802, 803, 805], "07": [71, 332, 336, 355, 357, 358, 365, 367, 507, 559, 766, 770, 795, 805, 940], "08": [71, 118, 119, 123, 157, 251, 332, 358, 507, 553, 623, 687, 796, 803, 940], "america": 71, "new_york": 71, "\u03bc": [71, 94, 123, 156, 157, 171, 224, 251, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 507, 509, 553, 559, 622, 623, 628, 687, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 803, 804, 805, 806, 807, 940, 942], "est": 71, "combin": [71, 82, 84, 156, 157, 158, 171, 224, 251, 262, 276, 354, 365, 440, 494, 500, 506, 590, 622, 623, 628, 650, 687, 792, 803, 927, 933, 939], "month_end": 71, "get": [71, 96, 106, 110, 127, 133, 136, 142, 152, 153, 156, 157, 159, 160, 164, 166, 167, 173, 180, 193, 196, 199, 203, 207, 218, 227, 236, 245, 251, 259, 273, 274, 275, 277, 286, 290, 291, 303, 321, 322, 323, 324, 325, 338, 354, 382, 390, 395, 397, 405, 408, 411, 420, 421, 422, 427, 429, 431, 436, 437, 447, 476, 480, 492, 495, 518, 519, 527, 531, 556, 561, 565, 566, 567, 568, 578, 581, 582, 590, 604, 609, 612, 619, 622, 623, 624, 629, 631, 645, 653, 657, 659, 664, 674, 683, 687, 703, 704, 705, 706, 707, 717, 721, 722, 734, 745, 753, 754, 755, 756, 772, 792, 822, 825, 830, 832, 835, 847, 852, 858, 860, 861, 863, 866, 867, 871, 872, 875, 909, 912, 925, 928, 953, 959, 960, 968, 972, 973, 982], "last": [71, 133, 159, 171, 173, 185, 204, 207, 218, 220, 245, 251, 275, 287, 300, 326, 336, 350, 355, 365, 366, 477, 504, 519, 581, 590, 604, 628, 654, 657, 659, 660, 683, 687, 705, 718, 731, 757, 770, 788, 793, 804, 825, 852, 937, 953, 982], "month": [71, 156, 157, 171, 224, 251, 336, 350, 351, 354, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 551, 552, 590, 622, 623, 628, 687, 770, 788, 789, 792, 796, 803], "28": [71, 156, 157, 171, 210, 224, 251, 258, 354, 357, 358, 365, 368, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 623, 628, 687, 792, 795, 796, 803, 806, 990], "disabl": [72, 168, 251], "equal": [72, 100, 101, 111, 118, 119, 151, 156, 171, 178, 251, 302, 371, 387, 409, 454, 455, 456, 457, 458, 459, 461, 462, 463, 492, 493, 499, 513, 538, 574, 575, 590, 622, 628, 637, 687, 733, 882, 883, 884, 885, 886, 887, 889, 890, 891, 895, 925, 926, 932, 946, 982, 990], "encount": [73, 156, 251, 436, 437, 490, 491, 545, 548, 557, 577, 590, 622, 687, 866, 867, 923, 924, 982], "duplic": [76, 164, 170, 171, 220, 251, 395, 590, 627, 628, 660, 687, 832, 982], "certain": [77, 103, 112, 162, 224, 251, 542, 608, 640, 651, 652, 687, 982], "least": [79, 123, 442, 530, 590, 870, 971, 982], "unexpect": [80, 251], "caus": [80, 88, 100, 101, 111, 131, 145, 251, 695, 982], "panic": 80, "mismatch": 82, "incompat": 84, "pa": [87, 116], "chunkedarrai": [87, 180, 251, 761, 982], "recordbatch": [87, 169, 251], "schemadefinit": [87, 89, 90, 91, 93, 251, 687], "schema_overrid": [87, 89, 90, 91, 92, 93, 169, 214, 251, 687], "copi": [87, 88, 131, 134, 135, 169, 209, 214, 215, 228, 251, 378, 513, 590, 606, 607, 665, 687, 692, 746, 750, 763, 816, 946, 959, 964, 965, 982], "closest": 87, "pair": [87, 89, 90, 91, 93, 122, 189, 251, 643, 687, 990], "declar": [87, 89, 90, 91, 93, 251, 687], "sever": [87, 89, 90, 91, 93, 251, 687, 990], "wai": [87, 89, 90, 91, 93, 139, 155, 169, 184, 204, 231, 251, 441, 443, 478, 488, 542, 590, 610, 621, 639, 654, 669, 687, 921], "As": [87, 89, 90, 91, 93, 104, 251, 573, 687], "auto": [87, 89, 90, 91, 93, 109, 115, 219, 251, 507, 687, 940, 990], "automat": [87, 89, 90, 91, 93, 94, 100, 101, 102, 111, 123, 125, 127, 197, 228, 251, 419, 494, 500, 506, 507, 590, 646, 665, 687, 857, 927, 933, 939, 940, 982], "equival": [87, 89, 90, 91, 93, 103, 167, 181, 251, 258, 262, 371, 385, 387, 388, 409, 416, 432, 434, 438, 440, 444, 495, 516, 526, 533, 590, 687, 849, 928, 943, 945, 982], "form": [87, 89, 90, 91, 93, 168, 194, 222, 251, 442, 590, 687, 870, 982], "them": [87, 89, 90, 91, 93, 111, 145, 156, 157, 171, 178, 224, 251, 289, 394, 436, 437, 543, 590, 622, 623, 628, 637, 687, 695, 720, 866, 867, 982], "dimens": [87, 89, 91, 93, 251, 452, 590, 687, 880, 982], "construct": [87, 89, 90, 91, 92, 93, 251, 419, 590, 620, 642, 687, 982], "allow_copi": [88, 131], "interchang": [88, 131], "protocol": [88, 102, 131], "__dataframe__": 88, "convers": [88, 131, 169, 215, 251, 507, 508, 509, 511, 601, 940, 941, 942, 944, 963, 964, 965, 982], "detail": [88, 102, 118, 119, 131, 251, 687, 990], "latest": [88, 103, 112, 131, 386, 428, 590], "index": [88, 92, 96, 102, 117, 131, 149, 156, 157, 162, 167, 171, 185, 191, 193, 203, 216, 224, 229, 251, 259, 273, 274, 275, 277, 278, 279, 287, 297, 301, 302, 354, 455, 456, 457, 458, 459, 461, 462, 463, 466, 476, 488, 501, 520, 590, 622, 623, 628, 653, 667, 687, 703, 704, 705, 706, 707, 709, 710, 718, 728, 732, 733, 792, 849, 868, 894, 897, 909, 921, 934, 954, 982], "throw": [88, 312, 490, 491, 590, 741, 923, 924, 982], "runtimeerror": 88, "from_panda": [88, 104], "from_arrow": 88, "effici": [88, 169, 251], "clone": [89, 90, 91, 92, 93, 134, 214, 215, 251, 606, 687, 746, 963, 964, 965, 973, 982], "dimension": [89, 91, 93, 251, 687, 982], "infer_schema_length": [90, 93, 100, 101, 104, 111, 114, 251, 687], "NOT": [90, 118, 119, 426], "typic": [90, 132, 251, 696, 982], "clearer": 90, "load": [90, 92, 103, 112, 124, 126, 251, 601, 624, 631, 687, 990], "want": [90, 132, 145, 181, 251, 265, 315, 316, 317, 381, 417, 419, 455, 456, 457, 458, 459, 461, 462, 463, 548, 557, 590, 608, 624, 631, 687, 695, 696, 747, 748, 749, 964, 982], "_partial_": [90, 251, 687], "omit": [90, 94, 121, 123, 125, 129, 181, 251], "mani": [90, 93, 102, 145, 251, 695, 982], "scan": [90, 93, 100, 101, 109, 111, 112, 113, 114, 115, 116, 615, 624, 631, 687], "slow": [90, 93, 100, 101, 111, 265, 326, 590, 757, 982], "partial": 90, "present": [90, 118, 123, 398, 590, 973, 982], "np": [91, 148, 214, 251, 520, 590, 687, 834, 838, 840, 841, 882, 954, 982], "ndarrai": [91, 148, 214, 251, 520, 590, 687, 761, 894, 897, 954, 964, 982], "numpi": [91, 117, 137, 214, 215, 251, 436, 437, 590, 687, 834, 838, 840, 841, 866, 867, 882, 964, 965, 973, 982], "columnar": [91, 93, 168, 194, 251], "interpret": [91, 93, 100, 101, 111, 251, 687], "yield": [91, 93, 100, 101, 111, 143, 145, 219, 251, 687, 695, 810, 982], "conclus": [91, 93, 251, 687], "nan_to_nul": [92, 251, 687, 982], "include_index": 92, "datetimeindex": [92, 761, 982], "panda": [92, 104, 117, 215, 251, 350, 351, 524, 590, 687, 788, 789, 965, 966, 982], "instal": [92, 100, 101, 102, 105, 109, 117, 137, 214, 215, 251, 650, 687, 965, 982], "nan": [92, 118, 119, 123, 131, 146, 215, 251, 329, 330, 371, 379, 387, 388, 393, 400, 402, 403, 404, 409, 416, 420, 431, 436, 437, 438, 526, 545, 577, 590, 616, 687, 698, 702, 762, 817, 840, 841, 866, 867, 882, 965, 982, 990], "convert": [92, 95, 103, 104, 112, 131, 210, 211, 212, 213, 214, 217, 251, 302, 333, 361, 364, 418, 496, 507, 508, 509, 511, 590, 687, 733, 767, 799, 802, 929, 940, 941, 942, 944, 951, 962, 963, 964, 965, 973, 982], "pd": [92, 104, 524, 590, 966, 982], "pd_df": 92, "pd_seri": 92, "tbl": [94, 97, 101], "reconstruct": 94, "repr": [94, 123, 125], "need": [94, 100, 101, 104, 118, 119, 156, 157, 202, 214, 251, 302, 419, 470, 492, 590, 622, 623, 687, 902, 925, 982], "trim": 94, "whitespac": [94, 494, 500, 506, 927, 933, 939], "prompt": 94, "extract": [94, 336, 337, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 352, 353, 355, 356, 359, 360, 366, 367, 369, 443, 489, 490, 491, 590, 768, 769, 770, 771, 773, 774, 776, 780, 781, 782, 783, 785, 786, 787, 790, 791, 793, 794, 797, 798, 800, 804, 805, 807, 922, 923, 924], "to_init_repr": [94, 251, 982], "handl": [94, 100, 101, 111, 116, 283, 327, 513, 590, 714, 760, 946, 982], "truncat": [94, 156, 251, 354, 622, 640, 687, 792], "identifi": [94, 177, 183, 220, 251, 636, 660, 687], "compound": 94, "struct": [94, 181, 197, 217, 221, 228, 251, 302, 419, 490, 503, 504, 530, 548, 549, 550, 564, 590, 646, 661, 665, 687, 733, 923, 936, 937], "neither": [94, 104, 195, 251, 302, 733], "source_ac": 94, "source_cha": 94, "ident": [94, 134, 135, 251, 361, 606, 607, 687, 746, 750, 799, 982], "timestamp": [94, 357, 559, 795], "tor_id": 94, "nnel_id": 94, "asia": [94, 768, 769, 800], "tokyo": 94, "123456780": 94, "9876543210": 94, "56": [94, 522, 590], "59": [94, 122, 332, 347, 359, 552, 766, 785, 797], "663053": 94, "jst": 94, "803065983": 94, "2055938745": 94, "38": [94, 123], "18": [94, 157, 251, 325, 358, 365, 368, 393, 406, 590, 623, 640, 687, 806], "050545": 94, "source_actor_id": 94, "source_channel_id": 94, "sr": [94, 692, 982], "to_list": [94, 157, 251, 623, 687, 915, 982], "dummi": [95, 212, 251, 960, 982], "to_dummi": [95, 251, 982], "foo_1": [95, 212, 251], "foo_2": [95, 212, 251], "bar_3": [95, 212, 251], "bar_4": [95, 212, 251], "ham_a": [95, 212, 251], "ham_b": [95, 212, 251], "datatypeclass": 96, "uint32": [96, 117, 143, 251, 275, 278, 279, 291, 336, 339, 343, 345, 347, 349, 352, 355, 356, 359, 366, 367, 451, 483, 492, 495, 520, 524, 590, 706, 709, 710, 722, 741, 770, 773, 780, 782, 785, 787, 790, 793, 794, 797, 804, 805, 810, 839, 895, 916, 966, 982], "regular": [96, 168, 193, 194, 224, 251, 375, 482, 483, 488, 489, 497, 498, 542, 555, 565, 568, 580, 590, 915, 916, 921, 922, 930, 931], "uint64": [96, 158, 251, 278, 279, 389, 450, 590, 709, 710, 824, 878, 982], "bigidx": 96, "read": [97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 145, 251, 417, 583, 590, 615, 620, 642, 687, 695, 982], "batch": [97, 101, 114, 632, 687], "over": [97, 100, 101, 103, 111, 123, 132, 145, 168, 169, 193, 194, 219, 230, 233, 251, 265, 326, 380, 393, 417, 418, 454, 455, 456, 457, 458, 459, 461, 462, 463, 536, 548, 549, 557, 564, 572, 590, 671, 695, 696, 757, 882, 883, 884, 886, 890, 982], "fetch": [97, 111, 172, 251, 606, 608, 624, 631, 687], "ideal": 97, "read_csv_batch": [97, 602], "tpch": [97, 101], "tables_scale_100": [97, 101], "lineitem": [97, 101, 102], "try_parse_d": [97, 100, 101, 111], "In": [98, 103, 112, 115, 123, 125, 128, 132, 143, 145, 156, 157, 181, 251, 265, 590, 622, 623, 687, 695, 810, 877, 982], "probabl": [98, 128, 370, 590, 809, 982], "n_row": [99, 100, 101, 105, 109, 111, 113, 114, 115, 169, 251, 615, 687], "accept": [99, 100, 101, 103, 105, 109, 133, 144, 155, 197, 204, 218, 228, 231, 251, 258, 375, 394, 441, 478, 533, 534, 535, 539, 541, 542, 543, 544, 550, 555, 565, 568, 579, 580, 590, 604, 614, 621, 646, 654, 659, 665, 669, 687, 830, 982], "stop": [99, 100, 101, 105, 109, 111, 113, 114, 115, 336, 338, 339, 341, 342, 347, 349, 355, 356, 358, 359, 363, 365, 366, 367, 369, 765, 767, 770, 772, 773, 775, 780, 782, 785, 787, 790, 793, 794, 796, 797, 801, 803, 804, 805, 806, 807], "textio": 100, "new_column": [100, 101, 104, 111, 190, 251], "comment_char": [100, 101, 111], "quote_char": [100, 101, 111], "skip_row": [100, 101, 111], "missing_utf8_is_empty_str": [100, 101, 111], "ignore_error": [100, 101, 111], "n_thread": [100, 101], "8192": 100, "csvencod": [100, 101, 111], "low_memori": [100, 101, 109, 111, 114, 115], "storage_opt": [100, 103, 105, 109, 112, 113, 115], "skip_rows_after_head": [100, 101, 111], "row_count_nam": [100, 101, 105, 109, 111, 113, 114, 115], "row_count_offset": [100, 101, 105, 109, 111, 113, 114, 115], "sample_s": [100, 101], "eol_char": [100, 101, 111], "we": [100, 101, 104, 111, 171, 251, 284, 496, 563, 583, 628, 632, 687, 696, 715, 826, 874, 929, 982], "handler": [100, 101, 104], "g": [100, 101, 103, 104, 105, 109, 112, 113, 115, 156, 157, 171, 222, 224, 251, 258, 265, 354, 358, 365, 375, 455, 456, 457, 458, 459, 461, 462, 463, 470, 555, 590, 622, 623, 628, 643, 687, 792, 796, 803, 895, 964, 982], "builtin": [100, 101, 104], "stringio": [100, 101], "fsspec": [100, 101, 105, 109, 112, 113, 115, 117], "remot": [100, 101, 105, 109], "first": [100, 101, 104, 111, 114, 122, 132, 154, 156, 159, 171, 173, 180, 184, 185, 207, 213, 219, 220, 224, 236, 251, 275, 277, 284, 287, 288, 302, 326, 351, 354, 358, 390, 397, 411, 419, 443, 466, 478, 488, 490, 491, 497, 498, 541, 548, 557, 561, 583, 590, 608, 622, 624, 628, 631, 639, 660, 666, 674, 687, 705, 715, 718, 719, 733, 757, 759, 789, 792, 796, 825, 835, 852, 857, 894, 921, 923, 924, 930, 931, 953, 962, 982, 990], "autogener": [100, 101, 111], "column_x": [100, 101, 111], "enumer": [100, 101, 111, 169, 251], "shorter": [100, 101], "remain": [100, 101, 111, 143, 251, 503, 504, 632, 687, 810, 936, 937, 982], "comment": [100, 101, 111], "instanc": [100, 101, 111, 123, 125, 129, 145, 150, 251, 312, 428, 455, 456, 457, 458, 459, 461, 462, 463, 548, 557, 590, 632, 667, 687, 695, 741, 982], "special": [100, 101, 111, 489, 696, 922, 982], "escap": [100, 101, 111], "dure": [100, 101, 111, 129, 145, 251, 695, 982], "would": [100, 101, 111, 275, 287, 427, 448, 539, 590, 705, 718, 876, 964, 982], "prefer": [100, 101, 103, 111, 126, 132, 145, 168, 193, 194, 233, 251, 265, 454, 590, 671, 687, 695, 696, 882, 982, 990], "treat": [100, 101, 111, 482, 497, 498, 915, 930, 931], "10000": [100, 169, 251, 513], "check": [100, 101, 111, 118, 119, 151, 165, 167, 251, 261, 263, 281, 305, 308, 309, 394, 398, 482, 486, 505, 590, 632, 687, 693, 694, 712, 735, 738, 739, 831, 833, 836, 837, 839, 844, 845, 846, 848, 849, 895, 915, 919, 938, 982], "might": [100, 101, 111, 127, 265, 528, 590, 965, 982], "issu": [100, 101, 104, 111, 324, 325, 518, 590, 755, 756, 952, 982], "iso8601": [100, 101, 111], "alwai": [100, 122, 132, 233, 251, 427, 507, 583, 632, 671, 687, 696, 940, 982, 990], "physic": [100, 101, 171, 251, 313, 524, 590, 605, 627, 628, 687, 743, 966, 982], "cpu": [100, 101], "system": [100, 101], "wrongli": 100, "done": [100, 101, 111, 116, 154, 171, 251, 264, 266, 312, 493, 499, 537, 590, 628, 687, 741, 926, 932, 982], "buffer": [100, 101, 143, 168, 251, 810, 982], "modifi": [100, 101, 111, 127, 129, 161, 168, 226, 251, 276, 357, 368, 482, 488, 489, 497, 590, 795, 806, 879, 915, 921, 922, 930, 943, 945, 982], "lossi": [100, 101, 111], "decod": [100, 101], "usag": [100, 101, 111, 123, 125, 202, 251, 903, 982], "expens": [100, 101, 109, 111, 114, 115, 124, 126, 132, 168, 193, 194, 219, 220, 251, 265, 590, 660, 687, 695, 696, 982, 990], "nativ": [100, 105, 109, 121, 132, 168, 194, 211, 233, 251, 265, 590, 595, 671, 696, 982, 990], "parser": 100, "even": [100, 443, 590], "regard": [100, 545, 577], "sens": [100, 105, 109, 113, 115, 156, 157, 178, 224, 251, 622, 623, 637, 687], "particular": [100, 105, 109, 113, 115, 143, 251, 810, 982], "storag": [100, 103, 105, 109, 112, 113, 115], "skip": [100, 101, 104, 109, 111, 115, 222, 251, 696, 982], "offset": [100, 101, 105, 109, 111, 113, 114, 115, 156, 157, 203, 224, 229, 251, 297, 350, 351, 354, 358, 365, 476, 501, 507, 509, 590, 622, 623, 653, 667, 687, 728, 788, 789, 792, 796, 803, 909, 934, 940, 942, 982], "row_count": [100, 101, 105, 109, 111, 113, 114, 115], "sampl": [100, 101, 233, 251, 475, 590, 671, 908, 982], "estim": [100, 101, 143, 251, 266, 373, 374, 407, 537, 590, 687, 810, 812, 813, 850, 982], "alloc": [100, 101, 143, 188, 251, 810, 982], "scan_csv": [100, 101, 651, 652, 687], "glob": [100, 101, 111, 113, 114, 115], "pattern": [100, 101, 111, 113, 114, 115, 168, 251, 425, 482, 483, 488, 489, 497, 498, 896, 897, 915, 916, 921, 922, 930, 931, 982], "store": [100, 109, 145, 168, 194, 251, 695, 982], "continu": [100, 109, 475, 590, 908, 982], "benchmark": [100, 109], "50000": 101, "batchedcsvread": [101, 601], "upon": 101, "creation": 101, "gather": 101, "next_batch": 101, "big": 101, "interest": 101, "seen_group": 101, "big_fil": 101, "while": [101, 103, 104, 112, 123, 125, 168, 177, 219, 251, 636, 687], "df_current_batch": 101, "concat": [101, 745, 863, 982], "partition_df": 101, "partition_bi": [101, 169, 251], "as_dict": [101, 183, 251], "fh": 101, "write_csv": [101, 111, 251], "els": [101, 583], "partition_on": 102, "partition_rang": 102, "partition_num": 102, "dbreadengin": 102, "connectorx": [102, 117], "raw": 102, "partit": [102, 103, 109, 112, 116, 169, 183, 251], "backend": [102, 103, 112], "transfer": 102, "document": [102, 104, 361, 364, 491, 507, 508, 509, 511, 799, 802, 924, 940, 941, 942, 944], "redshift": 102, "mysql": 102, "mariadb": 102, "clickhous": 102, "oracl": 102, "bigqueri": 102, "pleas": 102, "doc": [102, 137, 251], "github": 102, "sfu": 102, "db": 102, "connector": 102, "destin": 102, "sqlite": 102, "develop": [102, 123, 125], "flight_sql": 102, "further": [102, 965, 982], "wide": [102, 154, 177, 222, 251, 636, 687], "adopt": 102, "significantli": [102, 990], "better": [102, 132, 214, 233, 251, 265, 530, 590, 671, 896, 897, 982], "driver": 102, "cpp": 102, "partition_col": 102, "explicitli": [102, 121, 123, 129, 419, 579, 590], "delta_table_opt": [103, 112], "lake": [103, 112, 601], "root": [103, 112, 406, 418, 429, 445, 479, 517, 589, 590, 911, 982], "filesystem": [103, 112], "absolut": [103, 112, 118, 119, 257, 372, 373, 374, 590, 691, 811, 812, 813, 982], "gc": [103, 112], "azur": [103, 112], "deltalak": [103, 112, 117], "cloud": [103, 112, 116], "configur": [103, 112], "authent": [103, 112], "keyword": [103, 109, 112, 137, 184, 193, 197, 228, 231, 251, 443, 576, 579, 590, 639, 646, 665, 669, 687, 982], "table_path": [103, 112], "avoid": 103, "year": [103, 112, 156, 157, 171, 224, 251, 341, 342, 354, 355, 358, 365, 366, 455, 456, 457, 458, 459, 461, 462, 463, 551, 552, 590, 622, 623, 628, 687, 775, 776, 792, 793, 796, 803, 804], "2021": [103, 112, 138, 154, 156, 224, 251, 507, 563, 622, 687, 768, 769, 776, 800, 846, 940, 982], "aw": [103, 112], "bucket": [103, 112, 358, 365, 796, 803, 826, 982], "aws_access_key_id": [103, 112], "the_aws_access_key_id": [103, 112], "aws_secret_access_kei": [103, 112], "the_aws_secret_access_kei": [103, 112], "googl": [103, 112], "service_account": [103, 112], "service_account_json_absolute_path": [103, 112], "az": [103, 112], "adl": [103, 112], "abf": [103, 112], "azure_storage_account_nam": [103, 112], "azure_storage_account_kei": [103, 112], "without_fil": [103, 112], "track": [103, 112, 132, 251, 302], "sheet_id": 104, "sheet_nam": 104, "xlsx2csv_option": 104, "read_csv_opt": 104, "noreturn": 104, "xlsx2csv": [104, 117], "read_csv": [104, 111], "nor": [104, 195, 251], "skip_empty_lin": 104, "my": [104, 116], "datasheet": 104, "correct": [104, 373, 374, 407, 460, 475, 590, 632, 687, 812, 813, 850, 888, 908, 982], "look": [104, 302, 305, 735], "fix": [104, 121, 123, 368, 455, 456, 457, 458, 459, 461, 462, 463, 590, 806], "whole": [104, 477, 478, 488, 590, 687, 921], "With": [104, 132, 167, 251, 265, 590, 696, 849, 982], "1000": [104, 143, 213, 251, 343, 344, 513, 781, 962, 982, 990], "spreadsheet": [104, 185, 251], "xl": 104, "xlsm": 104, "xlsb": 104, "odf": 104, "od": [104, 506, 939], "odt": 104, "memory_map": [105, 109, 113], "v2": [105, 113], "greatli": [105, 113], "repeat": [105, 113, 449, 451, 590], "o": [105, 113, 310, 326, 487, 525, 590, 740, 757, 920, 967, 982], "page": [105, 109, 113, 115, 251, 590, 601, 652, 687, 982], "give": [105, 109, 113, 114, 115, 177, 220, 251, 338, 407, 451, 526, 590, 601, 636, 660, 687, 772, 850, 982], "That": [105, 632, 687], "filenam": 105, "my_fil": 105, "write_ipc": [105, 251], "read_ndjson": 107, "parallelstrategi": [109, 115], "use_statist": [109, 115], "awar": [109, 168, 194, 211, 251, 507, 509, 940, 942], "stabl": [109, 137, 195, 251, 414, 590, 636, 687], "row_group": [109, 115], "read_tabl": 109, "with_column_nam": 111, "push": [111, 113, 114, 115, 116], "down": [111, 113, 114, 115, 116, 384, 590, 821, 982], "therebi": [111, 113, 114, 115], "potenti": [111, 113, 114, 115], "overhead": [111, 113, 114, 115], "realloc": [111, 113, 114, 145, 251, 695, 982], "headerless": 111, "unlik": 111, "fewer": 111, "my_long_fil": 111, "doesn": [111, 370, 590, 809, 973, 982], "thing": [111, 556], "less": [111, 171, 251, 409, 416, 493, 499, 504, 513, 590, 628, 687, 926, 932, 937, 946, 990], "limit": [111, 147, 251, 304, 315, 316, 317, 380, 386, 590, 617, 624, 652, 687, 747, 748, 749, 818, 982], "breezah": 111, "languag": [111, 156, 157, 171, 224, 251, 354, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 623, 628, 687, 792, 796, 803], "hard": [111, 632, 687], "mydf": 111, "lambda": [111, 132, 150, 184, 233, 251, 265, 302, 372, 373, 374, 417, 418, 454, 536, 548, 549, 557, 564, 572, 590, 632, 639, 671, 687, 696, 733, 811, 812, 813, 982], "simpli": [111, 548, 557], "idx": [111, 156, 169, 251, 302, 622, 687, 733, 897, 982], "uint16": [111, 324, 325, 518, 590, 755, 756, 952, 982], "u16": [111, 123, 990], "aws_region": 112, "eu": 112, "central": [112, 407, 475, 590, 850, 908, 982], "allow_pyarrow_filt": 116, "comparison": 116, "dset": 116, "folder": 116, "1970": 116, "stdout": [117, 154, 251], "platform": 117, "linux": 117, "90": 117, "wsl2": 117, "x86_64": 117, "glibc2": 117, "main": 117, "apr": 117, "14": [117, 123, 132, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 342, 393, 590, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 796], "44": [117, 328, 590], "51": 117, "gcc": 117, "matplotlib": [117, 640, 650, 687], "check_dtyp": [118, 119], "check_exact": [118, 119], "rtol": [118, 119], "1e": [118, 119], "atol": [118, 119], "nans_compare_equ": [118, 119], "check_column_ord": 118, "check_row_ord": 118, "assertionerror": [118, 119], "compar": [118, 119, 151, 251, 371, 387, 388, 409, 416, 438, 535, 590, 895, 982], "exactli": [118, 119, 122, 123, 125, 503, 504, 903, 936, 937, 982], "toler": [118, 119, 171, 251, 628, 687], "inexact": [118, 119], "assert": [118, 119, 121, 123, 125, 157, 251, 601, 623, 687, 823, 982], "irrespect": 118, "unsort": 118, "check_nam": 119, "s1": [119, 150, 251, 733, 849, 965, 974, 982], "searchstrategi": [120, 122, 123, 125], "null_prob": [120, 123, 125], "percentag": [120, 123, 125, 442, 590, 870, 982], "chanc": [120, 123, 125, 990], "independ": [120, 121, 123, 125], "flag": [120, 467, 482, 488, 489, 497, 590, 613, 632, 687, 898, 915, 921, 922, 930, 982], "hypothesi": [120, 121, 122, 123, 124, 125, 990], "sampled_from": [120, 990], "unique_small_int": 120, "ccy": [120, 990], "gbp": [120, 990], "eur": [120, 138, 154, 251, 990], "jpy": [120, 990], "min_col": [121, 123], "max_col": [121, 123], "suitabl": [121, 132, 251, 265, 466, 590, 696, 894, 982, 990], "standalon": [121, 123], "itself": [121, 630, 687], "mincol": 121, "exact": [121, 123, 125, 202, 251, 507, 508, 509, 526, 590, 940, 941, 942], "especi": 121, "test_unique_xyz": 121, "assert_someth": 121, "punctuat": 121, "test_special_char_colname_init": 121, "inner_dtyp": [122, 125], "select_from": [122, 125], "min_siz": [122, 123, 125, 990], "max_siz": [122, 123, 125, 990], "anoth": [122, 155, 251, 301, 326, 331, 423, 426, 590, 621, 666, 687, 732, 757, 765, 895, 982], "randomli": 122, "innermost": 122, "ignor": [122, 123, 125, 175, 206, 251, 283, 327, 357, 372, 373, 374, 436, 437, 590, 714, 760, 795, 811, 812, 813, 866, 867, 982], "unset": [122, 302, 357, 795], "2x": 122, "lst": 122, "11330": 122, "24030": 122, "116": 122, "zz": [122, 125], "small": [122, 172, 251, 358, 615, 687, 990], "uint8_pair": [122, 990], "uint": [122, 990], "zip": [122, 990], "131": 122, "176": 122, "149": [122, 990], "include_col": 123, "allow_infin": [123, 125], "allowed_dtyp": [123, 125, 990], "excluded_dtyp": [123, 125], "describ": [123, 154, 251, 982], "desir": [123, 302, 733], "n_chunk": [123, 125, 251, 982], "randomis": 123, "onto": 123, "either": [123, 157, 167, 172, 175, 183, 193, 206, 251, 507, 534, 539, 579, 623, 630, 687, 940], "pct": 123, "preced": 123, "disallow": [123, 125], "exclud": [123, 125, 322, 325, 394, 542, 577, 590, 830, 846, 982], "deploi": [123, 125], "characterist": [123, 125], "concret": [123, 125], "test_repr": 123, "isinst": [123, 125, 251], "0x11f561580": 123, "known": [123, 302, 671, 733], "0565": 123, "34715": 123, "5844": 123, "33": [123, 459, 464, 542, 590, 887, 982], "076854": 123, "3382": 123, "48662": 123, "7540": 123, "29": [123, 156, 157, 171, 224, 251, 350, 354, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 623, 628, 687, 788, 792, 796, 803], "836271": 123, "4063": 123, "06": [123, 224, 251, 332, 342, 356, 357, 369, 795, 796, 805], "39092": 123, "1889": 123, "13": [123, 134, 135, 146, 147, 153, 157, 162, 172, 180, 228, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 454, 456, 543, 548, 557, 582, 590, 606, 607, 616, 617, 623, 630, 665, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 687, 696, 796, 803, 804, 982], "41": [123, 990], "874455": 123, "15836": 123, "1755e": 123, "575050513": 123, "profil": [124, 126, 687], "balanc": [124, 126, 990], "set_environ": 124, "polars_hypothesis_profil": [124, 126], "1500": 124, "constructor": 125, "max_data_s": 125, "normal": [125, 156, 251, 370, 407, 475, 590, 622, 687, 809, 850, 908, 982], "test_repr_is_valid_str": 125, "experi": 125, "create_list_strategi": [125, 990], "polars_max_thread": 127, "behind": 127, "lock": 127, "reason": 127, "pyspark": 127, "udf": [127, 132, 184, 233, 251, 265, 443, 536, 590, 639, 671, 687, 696, 982], "similar": [127, 150, 171, 251, 361, 364, 441, 583, 590, 628, 687, 799, 802], "recommend": [127, 168, 184, 251], "scope": 129, "lifetim": 129, "initi": [129, 548, 557, 583], "whatev": 129, "were": 129, "enter": 129, "advantag": [129, 184, 251], "initialis": [129, 687], "set_": 129, "set_verbos": 129, "do_various_th": 129, "restor": 129, "init": 129, "prefix": [129, 260, 309, 418, 505, 513, 517, 590, 739, 938, 946], "breviti": 129, "nan_as_nul": 131, "_pyarrowdatafram": 131, "nullabl": 131, "extens": [131, 215, 251, 965, 982], "propag": [131, 175, 206, 251, 436, 437, 590, 866, 867, 982], "inference_s": [132, 251], "256": [132, 251, 870, 982], "user": [132, 184, 233, 251, 265, 443, 467, 536, 590, 639, 671, 687, 696, 898, 982], "logic": [132, 233, 251, 262, 440, 524, 533, 590, 620, 627, 642, 668, 671, 687, 696, 966, 982], "almost": [132, 233, 251, 671, 696, 982], "_significantly_": [132, 233, 251, 671, 696, 982], "intens": [132, 233, 251, 671, 696, 982], "becaus": [132, 143, 156, 172, 222, 233, 251, 284, 622, 671, 687, 696, 715, 810, 982], "forc": [132, 171, 233, 251, 627, 628, 671, 687, 696, 982], "materi": [132, 233, 251, 640, 671, 687, 696, 982], "parallelis": [132, 233, 251, 671, 696, 982], "optimis": [132, 233, 251, 671, 687, 696, 896, 897, 982], "achiev": [132, 233, 251, 265, 590, 671, 696, 982], "best": [132, 233, 251, 265, 590, 671, 696, 982], "tri": [132, 251], "arbitrarili": [132, 251], "rearrang": [132, 251], "transform": [132, 251, 417, 510, 512, 590], "preserv": [132, 214, 215, 251, 472, 590, 905, 965, 982], "lru_cach": [132, 251, 265, 590, 696, 982], "magnitud": [132, 251, 265, 590, 696, 982], "speedup": [132, 168, 251, 265, 590, 696, 982], "column_1": [132, 219, 251], "scalar": [132, 167, 193, 251, 466, 536, 563, 590, 849, 894, 982], "k": [133, 218, 251, 310, 313, 407, 525, 590, 604, 659, 687, 740, 743, 850, 967, 982], "intoexpr": [133, 155, 156, 157, 197, 204, 218, 228, 231, 251, 394, 441, 478, 534, 535, 539, 541, 543, 544, 548, 550, 557, 565, 568, 576, 579, 580, 583, 590, 604, 621, 622, 623, 646, 654, 659, 665, 669, 687, 830, 982], "nulls_last": [133, 204, 218, 251, 275, 477, 590, 604, 654, 659, 687, 705, 982], "smallest": [133, 218, 251, 310, 590, 604, 659, 687, 740, 982], "largest": [133, 156, 157, 171, 218, 224, 251, 354, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 525, 590, 604, 622, 623, 628, 659, 687, 792, 796, 803, 967, 982], "top": [133, 218, 251, 604, 659, 687], "top_k": [133, 251, 310, 590, 604, 687, 740, 982], "cheap": [134, 135, 251, 606, 607, 687, 695, 746, 750, 982], "deepcopi": [134, 135, 251, 606, 607, 687, 746, 750, 982], "clear": [135, 251, 607, 687, 750, 982], "properti": [136, 142, 160, 196, 199, 227, 251, 609, 612, 645, 664, 687, 990], "appl": [136, 161, 170, 189, 191, 210, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 445, 453, 486, 505, 517, 590, 627, 643, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 687, 919, 938], "banana": [136, 210, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 445, 453, 517, 590, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682], "pearson": [137, 251, 407, 475, 545, 570, 590, 850, 908, 982], "correl": [137, 251, 545, 570, 574, 577], "coeffici": [137, 251, 475, 590, 908, 982], "corrcoef": [137, 251], "percentil": [138, 251, 759, 982], "summari": [138, 251, 759, 982], "One": [138, 181, 185, 251, 262, 440, 590, 759, 982], "glimps": [138, 159, 251], "usd": [138, 154, 251, 990], "2020": [138, 154, 157, 251, 333, 337, 340, 343, 344, 346, 348, 353, 357, 360, 361, 364, 507, 508, 509, 623, 687, 767, 771, 774, 781, 783, 786, 791, 795, 798, 799, 802, 940, 941, 942], "null_count": [138, 141, 251, 326, 590, 757, 759, 982], "266667": [138, 251], "666667": [138, 175, 225, 239, 251, 372, 590, 663, 677, 687], "std": [138, 251, 454, 590, 687, 759, 889, 982], "101514": [138, 251], "707107": [138, 251, 373, 590, 812, 982], "57735": [138, 251], "median": [138, 185, 251, 457, 590, 666, 687, 759, 885, 982], "more_column": [139, 144, 198, 221, 251, 375, 555, 590, 610, 614, 647, 661, 687], "Or": [139, 155, 156, 157, 171, 204, 224, 231, 251, 441, 478, 542, 583, 590, 610, 621, 622, 623, 628, 654, 669, 687], "subset": [141, 181, 220, 251, 611, 660, 687], "snippet": [141, 251, 611, 687], "is_nul": [141, 251, 590, 611, 687, 982], "sizeunit": [143, 251, 810, 982], "heap": [143, 251, 810, 982], "its": [143, 251, 332, 358, 365, 478, 590, 766, 796, 803, 810, 982], "bitmap": [143, 251, 810, 982], "therefor": [143, 251, 583, 810, 982], "structarrai": [143, 251, 810, 982], "constant": [143, 157, 251, 378, 590, 623, 687, 810, 816, 982], "unchang": [143, 251, 524, 590, 632, 671, 687, 810, 966, 982], "capac": [143, 202, 251, 810, 903, 982], "ffi": [143, 251, 810, 982], "kb": [143, 251, 810, 982], "mb": [143, 251, 810, 982], "gb": [143, 251, 810, 982], "tb": [143, 251, 810, 982], "revers": [143, 251, 321, 322, 323, 324, 325, 418, 445, 517, 590, 687, 753, 754, 755, 756, 982], "1_000_000": [143, 251, 810, 982], "25888898": [143, 251], "689577102661133": [143, 251], "long": [144, 177, 222, 251, 614, 636, 687], "letter": [144, 236, 245, 251, 375, 489, 555, 590, 614, 674, 683, 687, 922], "thu": [145, 251, 545, 577, 695, 982], "faster": [145, 222, 251, 265, 454, 495, 528, 590, 651, 652, 687, 695, 696, 882, 928, 982], "onlin": [145, 251, 695, 982], "rerun": [145, 251, 695, 982], "fill_valu": [146, 201, 222, 251, 469, 590, 649, 687, 901, 982], "Not": [146, 251, 400, 402, 419, 590, 616, 687], "To": [146, 251, 329, 330, 354, 380, 482, 488, 489, 497, 580, 590, 616, 687, 792, 915, 921, 922, 930], "fillnullstrategi": [147, 251, 380, 590, 617, 687, 818, 982], "matches_supertyp": [147, 251, 617, 687], "forward": [147, 171, 251, 350, 380, 386, 590, 617, 628, 687, 788, 818, 982], "consecut": [147, 251, 304, 380, 386, 481, 590, 617, 687, 818, 914, 982], "supertyp": [147, 251, 264, 590, 617, 687], "fill_nan": [147, 251, 590, 687, 982], "OR": [148, 251, 535, 618, 687], "reduct": [150, 251], "supercast": [150, 251], "parent": [150, 251], "rule": [150, 251], "arithmet": [150, 251], "zip_with": [150, 251, 982], "foo11": [150, 251], "bar22": [150, 251], "null_equ": [151, 251, 895, 982], "retriev": [152, 251, 278, 279, 514, 709, 710, 947], "return_as_str": [154, 251], "preview": [154, 251], "nice": [154, 251], "few": [154, 251], "rather": [154, 171, 251, 513, 628, 687, 946], "head": [154, 173, 207, 251, 264, 411, 590, 631, 687, 852, 953, 982], "tail": [154, 159, 251, 264, 475, 590, 687, 825, 908, 982], "more_bi": [155, 183, 204, 251, 478, 590, 621, 654, 687], "maintain_ord": [155, 183, 185, 220, 224, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 259, 265, 303, 520, 527, 546, 590, 608, 613, 615, 621, 640, 650, 651, 652, 660, 670, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 687, 734, 758, 874, 968, 982], "consist": [155, 183, 251, 507, 621, 687, 940], "agg": [155, 156, 157, 251, 259, 265, 381, 383, 477, 478, 520, 532, 546, 590, 608, 613, 615, 621, 622, 623, 640, 650, 687], "index_column": [156, 157, 251, 622, 623, 687], "include_boundari": [156, 251, 622, 687], "start_bi": [156, 251, 622, 687], "startbi": [156, 251, 622, 687], "dynamicgroupbi": [156, 251], "groupbi": [156, 157, 181, 251, 259, 265, 284, 326, 381, 383, 441, 477, 478, 520, 532, 536, 546, 590, 608, 613, 615, 622, 623, 640, 650, 687, 715, 757, 982], "member": [156, 251, 622, 687, 837, 982], "seen": [156, 251, 304, 386, 590, 622, 687], "roll": [156, 157, 251, 350, 351, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 543, 574, 575, 590, 622, 623, 687, 788, 789, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 982], "slot": [156, 251, 283, 326, 327, 590, 622, 687, 714, 757, 760, 982], "1n": [156, 157, 171, 224, 251, 354, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 623, 628, 687, 792, 796, 803], "nanosecond": [156, 157, 171, 224, 251, 354, 358, 359, 365, 455, 456, 457, 458, 459, 461, 462, 463, 553, 590, 622, 623, 628, 687, 792, 796, 797, 803], "1u": [156, 157, 171, 224, 251, 354, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 623, 628, 687, 792, 796, 803], "microsecond": [156, 157, 171, 224, 251, 354, 358, 359, 365, 455, 456, 457, 458, 459, 461, 462, 463, 552, 553, 590, 622, 623, 628, 640, 687, 792, 796, 803], "1m": [156, 157, 171, 224, 251, 343, 344, 346, 353, 354, 358, 360, 365, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 623, 628, 687, 781, 783, 791, 792, 796, 798, 803], "millisecond": [156, 157, 171, 224, 251, 354, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 553, 590, 622, 623, 628, 687, 792, 796, 803], "1h": [156, 157, 171, 224, 251, 354, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 623, 628, 687, 773, 792, 796, 803], "1w": [156, 157, 171, 224, 251, 354, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 623, 628, 687, 792, 796, 803], "week": [156, 157, 171, 224, 251, 354, 358, 365, 367, 455, 456, 457, 458, 459, 461, 462, 463, 553, 590, 622, 623, 628, 687, 792, 796, 803, 805], "1y": [156, 157, 171, 224, 251, 341, 354, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 623, 628, 687, 775, 792, 796, 803, 807], "1i": [156, 157, 171, 224, 251, 354, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 623, 628, 687, 792], "suffix": [156, 157, 170, 171, 197, 224, 228, 231, 251, 260, 308, 354, 358, 365, 400, 402, 403, 404, 418, 441, 445, 453, 455, 456, 457, 458, 459, 461, 462, 463, 486, 590, 622, 623, 627, 628, 646, 665, 666, 669, 687, 738, 792, 796, 803, 919], "_satur": [156, 157, 171, 224, 251, 354, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 623, 628, 687, 792, 796, 803], "satur": [156, 157, 171, 224, 251, 354, 358, 365, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 623, 628, 687, 792, 796, 803], "10i": [156, 157, 251, 622, 623, 687], "ascend": [156, 157, 251, 622, 623, 687], "often": [156, 157, 251, 282, 451, 590, 622, 623, 687, 713], "dynam": [156, 251, 302, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 687, 733], "matter": [156, 157, 168, 194, 211, 251, 622, 623, 687], "_lower_bound": [156, 251, 622, 687], "_upper_bound": [156, 251, 622, 687], "impact": [156, 251, 622, 687], "harder": [156, 251, 622, 687], "inclus": [156, 157, 251, 394, 455, 456, 457, 458, 459, 461, 462, 463, 502, 503, 590, 622, 623, 687, 830, 935, 936, 982], "datapoint": [156, 251, 622, 687], "mondai": [156, 251, 367, 622, 687, 805], "tuesdai": [156, 251, 622, 687], "wednesdai": [156, 251, 622, 687], "thursdai": [156, 251, 622, 687], "fridai": [156, 251, 622, 687], "saturdai": [156, 251, 622, 687], "sundai": [156, 251, 367, 622, 687, 805], "date_rang": [156, 224, 251, 331, 333, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 363, 365, 366, 367, 368, 369, 622, 687, 765, 767, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 803, 804, 805, 806, 807], "30m": [156, 251, 358, 365, 622, 687, 796, 803], "time_min": [156, 251, 622, 687], "time_max": [156, 251, 622, 687], "23": [156, 157, 251, 332, 339, 358, 552, 622, 623, 687, 766, 773, 990], "boundari": [156, 251, 315, 316, 317, 590, 622, 687, 747, 748, 749, 826, 982], "time_count": [156, 251, 622, 687], "_lower_boundari": [156, 251, 622, 687], "_upper_boundari": [156, 251, 622, 687], "lower_bound": [156, 251, 315, 317, 394, 590, 622, 687, 747, 749, 830, 970, 982], "upper_bound": [156, 251, 302, 315, 316, 394, 590, 622, 687, 747, 748, 830, 856, 982], "time_agg_list": [156, 251, 622, 687], "arang": [156, 222, 233, 251, 622, 671, 687], "2i": [156, 251, 622, 687], "3i": [156, 251, 622, 687], "a_agg_list": [156, 251, 622, 687], "rollinggroupbi": [157, 251], "dynamic_groupbi": [157, 251, 623, 687], "groupby_dynam": [157, 251, 623, 687], "48": [157, 251, 623, 687], "19": [157, 171, 251, 358, 623, 628, 687, 796, 803], "43": [157, 251, 325, 590, 623, 687], "strptime": [157, 251, 357, 623, 687, 795], "set_sort": [157, 171, 224, 251, 590, 623, 628, 687, 982], "2d": [157, 214, 251, 563, 623, 687, 770], "sum_a": [157, 251, 623, 687], "min_a": [157, 251, 623, 687], "max_a": [157, 251, 623, 687], "seed": [158, 195, 251, 389, 448, 465, 471, 590, 824, 876, 893, 904, 982], "seed_1": [158, 251, 389, 590, 824, 982], "seed_2": [158, 251, 389, 590, 824, 982], "seed_3": [158, 251, 389, 590, 824, 982], "hash": [158, 251, 590, 982], "u64": [158, 251, 389, 450, 590, 640, 687, 824, 982], "10783150408545073287": [158, 251], "1438741209321515184": [158, 251], "10047419486152048166": [158, 251], "2047317070637311557": [158, 251], "ab": [159, 173, 207, 228, 251, 514, 515, 590, 665, 687, 825, 852, 953, 982], "grown": [161, 251], "baz": [162, 163, 185, 221, 251, 502, 504, 626, 661, 687, 937], "intermedi": [163, 251, 626, 687, 829, 982, 990], "linear": [163, 187, 243, 251, 280, 393, 422, 447, 459, 543, 544, 571, 590, 626, 641, 681, 687, 711, 829, 875, 887, 982], "mask": [164, 166, 251, 281, 305, 306, 395, 397, 405, 482, 484, 590, 712, 735, 736, 819, 830, 832, 835, 847, 871, 872, 896, 915, 917, 974, 982], "visual": [164, 166, 251], "buffer_s": [168, 251], "intern": [168, 251], "veri": [168, 219, 251, 265, 590, 607, 687, 750, 982], "fit": [168, 202, 222, 251, 470, 590, 902, 903, 982], "signific": [168, 251, 265, 590], "4x": [168, 251], "materialis": [168, 169, 193, 194, 251], "iter_row": [169, 193, 194, 251], "17_500": [169, 251], "klmnoopqrstuvwxyz": [169, 251], "__name__": [169, 251], "7500": [169, 251], "15_000": [169, 251], "record_batch": [169, 251], "to_arrow": [169, 251, 982], "to_batch": [169, 251], "date32": [169, 251], "large_str": [169, 209, 215, 251], "15000": [169, 251], "2500": [169, 251], "joinstrategi": [170, 251, 627, 687], "left_on": [170, 171, 251, 627, 628, 687], "right_on": [170, 171, 251, 627, 628, 687], "_right": [170, 171, 251, 627, 628, 687], "outer": [170, 251, 627, 687], "semi": [170, 251, 627, 687], "anti": [170, 251, 627, 687, 896, 897, 982], "cross": [170, 251, 627, 687], "join_asof": [170, 251, 627, 687], "stringcach": [170, 251, 601], "other_df": [170, 251], "by_left": [171, 251, 628, 687], "by_right": [171, 251, 628, 687], "asofjoinstrategi": [171, 251, 628, 687], "allow_parallel": [171, 251, 627, 628, 687], "force_parallel": [171, 251, 627, 628, 687], "asof": [171, 251, 628, 687], "asof_join": [171, 251], "search": [171, 251, 628, 687], "greater": [171, 251, 387, 388, 475, 504, 590, 628, 687, 908, 937, 982], "distanc": [171, 251, 628, 687, 826, 982], "plan": [171, 172, 251, 605, 613, 620, 627, 628, 642, 650, 668, 687], "gdp": [171, 251, 628, 687], "2016": [171, 251, 628, 687], "2017": [171, 251, 628, 687], "2018": [171, 251, 357, 628, 687, 795], "2019": [171, 251, 628, 687], "record": [171, 214, 251, 628, 687], "jan": [171, 251, 628, 687], "1st": [171, 251, 628, 687], "4164": [171, 251, 628, 687], "4411": [171, 251, 628, 687], "4566": [171, 251, 628, 687], "4696": [171, 251, 628, 687], "popul": [171, 251, 628, 687], "12th": [171, 251, 628, 687], "82": [171, 251, 628, 687], "66": [171, 251, 533, 590, 628, 687, 887, 982], "83": [171, 251, 628, 687], "52": [171, 228, 251, 464, 590, 628, 665, 687], "request": [172, 251], "describe_plan": [172, 251, 687], "unoptim": [172, 251, 687], "describe_optimized_plan": [172, 251, 687], "show_graph": [172, 251, 687], "un": [172, 251], "graphviz": [172, 251, 650, 687], "axi": [174, 175, 177, 179, 206, 251, 636, 687], "null_strategi": [175, 206, 251], "nullstrategi": [175, 206, 251], "spam": [175, 251, 489, 922], "id_var": [177, 251, 636, 687], "value_var": [177, 251, 636, 687], "variable_nam": [177, 251, 636, 687], "value_nam": [177, 251, 636, 687], "unpivot": [177, 251, 636, 687], "leav": [177, 251, 302, 636, 687], "massag": [177, 251, 636, 687], "measur": [177, 251, 636, 687], "merg": [178, 251, 637, 687], "caller": [178, 251, 302, 632, 637, 671, 687], "respons": [178, 251, 637, 687], "what": [181, 251, 964, 973, 982], "pack": [181, 251], "expr_unique_subset": [181, 251], "df_nuniqu": [181, 251], "df_agg_nuniqu": [181, 251], "offer": [184, 251, 443, 590, 639, 687], "fulli": [184, 195, 251], "cast_str_to_int": [184, 251, 639, 687], "col_nam": [184, 251, 418, 590, 639, 687], "tdf": [184, 251, 639, 687], "aggregate_funct": [185, 251], "pivotagg": [185, 251], "nodefault": [185, 251, 507, 940], "sort_column": [185, 251], "predefin": [185, 251], "predict": [185, 188, 224, 251], "transpos": [185, 251], "discoveri": [185, 251], "col1": [185, 222, 251, 687, 990], "col2": [185, 222, 251, 687, 990], "col3": [185, 251, 990], "tanh": [185, 251, 590, 982], "998347": [185, 251], "964028": [185, 251], "999954": [185, 251], "interpol": [187, 243, 251, 380, 422, 447, 459, 571, 590, 641, 681, 687, 875, 887, 982], "rollinginterpolationmethod": [187, 243, 251, 447, 459, 571, 590, 641, 681, 687, 875, 887, 982], "midpoint": [187, 243, 251, 447, 459, 571, 590, 641, 681, 687, 875, 887, 982], "old": [189, 251, 643, 687], "by_pred": [193, 251], "accord": [193, 251, 419, 590, 776], "never": [193, 251], "mutual": [193, 251], "exclus": [193, 251, 533, 590], "addition": [193, 251], "clariti": [193, 251], "anyth": [193, 251, 489, 922], "toomanyrowsreturnederror": [193, 251, 601], "norowsreturnederror": [193, 251, 601], "inherit": [193, 251], "rowserror": [193, 251, 601], "with_replac": [195, 251, 465, 590, 893, 982], "shuffl": [195, 233, 251, 465, 590, 671, 893, 982], "modul": [195, 251, 465, 471, 589, 590, 893, 904, 982], "more_expr": [197, 228, 251, 441, 534, 535, 539, 541, 543, 544, 550, 565, 568, 576, 579, 580, 590, 646, 665, 687], "named_expr": [197, 228, 251, 576, 579, 646, 665, 687], "threshold": [197, 251, 646, 687], "set_auto_structifi": [197, 228, 251, 646, 665, 687], "auto_structifi": [197, 228, 251, 646, 665, 687], "is_odd": [197, 251, 646, 687], "_is_odd": [197, 251, 646, 687], "shift_and_fil": [200, 251, 590, 687, 982], "shift": [201, 251, 283, 327, 442, 469, 543, 590, 649, 687, 714, 760, 870, 901, 982], "shrink": [202, 251, 470, 590, 902, 903, 982], "hold": [202, 251], "ddof": [205, 225, 251, 480, 531, 545, 570, 574, 575, 577, 578, 582, 590, 655, 663, 687, 912, 972, 982], "deviat": [205, 251, 373, 461, 480, 578, 590, 655, 687, 812, 912, 982], "degre": [205, 225, 251, 480, 531, 545, 570, 574, 575, 577, 578, 582, 590, 655, 663, 687, 912, 972, 982], "freedom": [205, 225, 251, 480, 531, 545, 570, 574, 575, 577, 578, 582, 590, 655, 663, 687, 912, 972, 982], "divisor": [205, 225, 251, 480, 531, 545, 570, 574, 575, 577, 578, 582, 590, 655, 663, 687, 912, 972, 982], "816497": [205, 251], "21": [206, 251, 559], "16a": [206, 251], "27b": [206, 251], "38c": [206, 251], "nth": [208, 251, 504, 521, 590, 658, 687, 937, 955, 982], "mostli": [209, 251, 381, 590], "categoricaltyp": [209, 251], "as_seri": [210, 251], "fruit": [210, 251, 445, 453, 486, 505, 517, 590, 919, 938], "car": [210, 251, 445, 453, 517, 590], "beetl": [210, 251, 445, 453, 517, 590], "audi": [210, 251, 445, 453, 517, 590], "300": [210, 251, 883, 884, 886, 982], "instantiat": [213, 251, 962, 982], "from_repr": [213, 251, 962, 982], "df_from_str_repr": [213, 251], "eval": [213, 251, 554, 962, 982], "correspond": [214, 251, 342, 448, 590, 776, 876, 982], "re": [214, 251, 350, 351, 788, 789], "ll": [214, 251], "u1": [214, 251], "f4": [214, 251], "view": [214, 251, 964, 982], "recarrai": [214, 251], "rec": [214, 251], "use_pyarrow_extension_arrai": [215, 251, 965, 982], "trigger": [215, 251, 965, 982], "sent": [215, 251, 964, 965, 982], "pandas_df1": [215, 251], "pandas_df2": [215, 251], "pandas_df2_pa": [215, 251], "na": [215, 251, 965, 982], "get_column": [216, 251, 580], "four": [217, 251], "five": [217, 251, 990], "bottom_k": [218, 251, 525, 590, 659, 687, 967, 982], "include_head": [219, 251], "header_nam": [219, 251], "column_nam": [219, 251], "perhap": [219, 251], "column_2": [219, 251], "name_gener": [219, 251], "base_nam": [219, 251], "my_column_": [219, 251], "my_column_0": [219, 251], "my_column_1": [219, 251], "my_column_2": [219, 251], "uniquekeepstrategi": [220, 251, 660, 687], "kept": [220, 251, 660, 687], "decompos": [221, 251, 661, 687], "t_a": [221, 251, 661, 687], "t_b": [221, 251, 661, 687], "t_c": [221, 251, 661, 687], "t_d": [221, 251, 661, 687], "womp": [221, 251, 661, 687], "t_": [221, 251, 661, 687], "t_struct": [221, 251, 661, 687], "step": [222, 251, 538], "unstackdirect": [222, 251], "much": [222, 251, 301, 326, 590, 732, 757, 982], "pivot": [222, 251], "phase": [222, 251], "subject": [222, 251], "ascii_uppercas": [222, 251], "h": [222, 251, 258, 361, 364, 470, 507, 509, 511, 590, 940, 942, 944], "col1_0": [222, 251], "col1_1": [222, 251], "col1_2": [222, 251], "col2_0": [222, 251], "col2_1": [222, 251], "col2_2": [222, 251], "syntact": [223, 251, 555, 556, 560, 571, 576, 662, 687, 911, 982], "sugar": [223, 251, 555, 556, 560, 571, 576, 662, 687, 911, 982], "coalesc": [223, 251, 507, 662, 687, 940], "400": [223, 251, 662, 687, 883, 884, 886, 982], "600": [223, 251, 662, 687], "700": [223, 251, 662, 687], "new_df": [223, 251, 662, 687], "time_column": [224, 251], "frequenc": [224, 251], "forward_fil": [224, 251, 322, 325, 590], "varianc": [225, 251, 374, 407, 463, 531, 582, 590, 663, 687, 813, 850, 891, 972, 982], "grow": [226, 251], "is_not": [228, 251, 590, 665, 687], "not_c": [228, 251, 665, 687], "diff": [228, 251, 337, 340, 344, 346, 348, 353, 360, 590, 665, 687, 771, 774, 781, 783, 786, 791, 798, 982], "_diff": [228, 251, 665, 687], "row_nr": [229, 251, 419, 590, 667, 687, 897, 982], "more_agg": [231, 669], "named_agg": [231, 669], "_sum": [231, 669], "_mean_squar": [231, 669], "b_sum": [231, 669], "c_mean_squar": [231, 669], "sub": [233, 590], "triangl": [233, 671], "group_df": [233, 671], "deem": [234, 320, 546, 590, 672], "nr": [236, 245, 674, 683], "maxim": [238, 273, 590, 676, 703, 982], "833333": [239, 677], "minim": [241, 274, 279, 470, 478, 590, 679, 704, 710, 861, 902, 982], "overview": [251, 590, 601, 687, 982, 990], "public": [251, 590, 601, 687, 982], "frameinittyp": [251, 687], "variou": [251, 590, 687, 982], "entri": [251, 687], "prevent": [251, 324, 325, 406, 518, 590, 687, 755, 756, 952, 982], "come": [251, 350, 351, 407, 590, 602, 686, 687, 788, 789, 850, 982], "behavior": [251, 265, 301, 536, 590, 732], "mydatafram": 251, "notic": [251, 687, 982], "df4": 251, "df5": 251, "df6": 251, "corr": [251, 570, 577], "drop_in_plac": 251, "drop_nul": [251, 329, 590, 687, 982], "estimated_s": [251, 982], "explod": [251, 383, 452, 590, 687, 880, 982], "find_idx_by_nam": 251, "fold": [251, 428, 541, 548, 549, 572], "frame_equ": [251, 358, 365], "groupby_rol": [251, 455, 456, 457, 458, 459, 461, 462, 463, 590, 622, 687], "hash_row": 251, "hstack": 251, "insert_at_idx": 251, "is_dupl": [251, 590, 982], "is_empti": [251, 982], "is_uniqu": [251, 590, 982], "iter_slic": 251, "melt": [251, 687], "merge_sort": [251, 687], "n_uniqu": [251, 590, 982], "pipe": [251, 590, 687], "quantil": [251, 459, 590, 687, 874, 887, 982], "replace_at_idx": 251, "shrink_to_fit": [251, 982], "take_everi": [251, 590, 687, 982], "to_dict": 251, "to_numpi": [251, 417, 590, 982], "to_panda": [251, 982], "to_struct": [251, 489], "unnest": [251, 489, 503, 504, 515, 687, 733, 936, 937], "unstack": 251, "updat": [251, 687], "upsampl": 251, "write_avro": 251, "write_databas": 251, "write_excel": 251, "write_json": [251, 642, 687], "write_parquet": 251, "cumprod": [258, 590, 982], "ghi": [258, 489, 590, 922], "94": [259, 590], "map_alia": [260, 445, 517, 590], "confus": [261, 400, 402, 590], "tt": [261, 590], "tf": [261, 263, 590], "ff": [261, 263, 590], "upcast": [264, 590], "skip_nul": [265, 590, 696, 982], "pass_nam": [265, 590], "applystrategi": [265, 590], "thread_loc": [265, 590], "unknown": [265, 419, 488, 563, 590, 921], "stage": [265, 590], "code": [265, 467, 590, 630, 687, 898, 982], "amount": [265, 590], "releas": [265, 590, 990], "gil": [265, 590], "discourag": [265, 590], "loop": [265, 590], "a_times_2": [265, 590], "approx": [266, 537, 590, 687], "hyperloglog": [266, 537, 590, 687], "algorithm": [266, 537, 590, 687], "cardin": [266, 537, 590, 687], "invers": [267, 268, 269, 270, 271, 272, 590, 697, 698, 699, 700, 701, 702, 982], "cosin": [267, 268, 318, 319, 417, 590, 697, 698, 751, 752, 982], "570796": [267, 269, 590, 697, 699, 982], "hyperbol": [268, 270, 272, 319, 474, 523, 590, 698, 700, 702, 752, 907, 957, 982], "sine": [269, 270, 417, 473, 474, 590, 699, 700, 906, 907, 982], "881374": [270, 590, 700, 982], "tangent": [271, 272, 522, 523, 590, 701, 702, 956, 957, 982], "785398": [271, 590, 701, 982], "arg_wher": [276, 590], "sublist": [278, 279, 281, 283, 286, 287, 288, 289, 290, 297, 300, 301, 302, 709, 710, 712, 714, 717, 718, 719, 720, 721, 728, 731, 732, 733, 837, 982], "membership": [281, 712], "listcol": 282, "number_of_two": 282, "null_behavior": [283, 327, 590, 714, 760, 982], "nullbehavior": [283, 327, 590, 714, 760, 982], "th": [283, 327, 475, 590, 714, 760, 908, 982], "against": [284, 687, 715, 989, 990], "blindli": [284, 715], "worth": [284, 715], "enough": [284, 475, 590, 715, 908, 982], "concat_list": [284, 554, 715], "rank": [284, 545, 554, 577, 590, 715, 982], "exprnamespac": 285, "reshap": [285, 590, 716, 982], "flat": [285, 452, 590, 716, 880, 982], "taken": [297, 501, 520, 590, 728, 934], "null_on_oob": [301, 732], "cheaper": [301, 732], "n_field_strategi": [302, 733], "tostructstrategi": [302, 733], "first_non_nul": [302, 733], "max_width": [302, 733], "field_0": [302, 733], "field_1": [302, 733], "field_n": [302, 733], "know": [302, 495, 928, 964, 973, 982], "incorrectli": 302, "pre": 302, "n0": 302, "n1": 302, "maintain": [303, 466, 527, 590, 651, 652, 687, 734, 894, 968, 982], "substr": [305, 308, 309, 482, 486, 497, 498, 502, 503, 504, 505, 735, 738, 739, 915, 919, 930, 931, 935, 936, 937, 938], "transferencod": [306, 307, 484, 485, 736, 737, 917, 918], "strict": [306, 312, 482, 484, 496, 507, 508, 509, 511, 590, 736, 741, 895, 915, 917, 929, 940, 941, 942, 944, 982], "hex": [306, 307, 484, 485, 496, 736, 737, 917, 918, 929], "base64": [306, 307, 484, 485, 736, 737, 917, 918], "complex": [310, 326, 525, 590, 740, 757, 967, 982], "frac": [310, 372, 373, 374, 475, 525, 590, 740, 811, 812, 813, 908, 967, 982], "due": [312, 357, 590, 741, 795, 982], "overflow": [312, 324, 325, 496, 518, 590, 741, 755, 756, 929, 952, 982], "categoricalord": [313, 743], "lexic": [313, 743], "foo_clip": [315, 316, 317, 590], "clip": [316, 317, 590, 748, 749, 982], "543081": [319, 590, 752, 982], "cumul": [321, 322, 323, 324, 325, 548, 549, 550, 590, 753, 754, 755, 756, 982], "a_revers": [321, 322, 323, 324, 325, 418, 453, 517, 590], "value_cummax": [322, 590], "value_cummax_all_fil": [322, 590], "value_cumsum": [325, 590], "value_cumsum_all_fil": [325, 590], "min_period": [326, 372, 373, 374, 454, 455, 456, 457, 458, 459, 461, 462, 463, 574, 575, 590, 757, 811, 812, 813, 882, 883, 884, 885, 886, 887, 889, 890, 891, 982], "slide": [326, 590, 757, 982], "realli": [326, 590, 757, 982], "visit": [326, 590, 757, 982], "drop_nan": [330, 590, 982], "lose": [331, 765], "2001": [331, 336, 338, 339, 341, 342, 347, 349, 354, 355, 356, 358, 359, 363, 365, 366, 367, 368, 369, 507, 765, 770, 772, 773, 775, 777, 778, 779, 780, 782, 784, 785, 787, 790, 792, 793, 794, 796, 797, 801, 803, 804, 805, 806, 807, 940], "time_unit_m": [331, 765], "time_unit_n": [331, 765], "naiv": [332, 766], "compon": [332, 359, 507, 509, 553, 766, 797, 940, 942], "resolv": 332, "tm": 332, "456000": [332, 766], "101000": 332, "456": [332, 766, 961, 982], "101": [332, 496, 929, 990], "d1": 332, "d2": 332, "d3": 332, "utc": [333, 357, 507, 509, 767, 795, 940, 942], "europ": [333, 357, 767, 795], "london": [333, 357, 767, 795], "gmt": [333, 357, 767, 795], "bst": [333, 357, 767, 795], "weekdai": [336, 355], "day_of_month": [336, 355, 367], "ordinal_dai": [336, 367], "day_of_year": [336, 355, 367], "days_diff": 337, "epochtimeunit": [338, 559, 772], "unix": [338, 559, 772], "epoch_n": [338, 772], "epoch_": [338, 772], "978307200000000": [338, 363, 772, 801], "978307200": [338, 772], "978393600000000": [338, 363, 772, 801], "978393600": [338, 772], "978480000000000": [338, 363, 772, 801], "978480000": [338, 772], "hours_diff": 340, "leap": [341, 354, 775, 792], "2000": [341, 343, 350, 351, 354, 775, 788, 789, 792], "2002": [341, 342, 354, 356, 369, 775, 792, 807], "iso": [342, 366, 367, 776, 804, 805], "2006": [342, 354, 792], "180": [342, 356, 369], "2004": [342, 354, 792], "2005": [342, 354, 792], "1_001": [343, 344, 346, 353], "002": [343, 344, 346, 353, 553, 781, 783, 791], "003": [343, 344, 346, 353], "3000": 343, "997": [343, 344, 346, 353], "997000": 343, "998": [343, 344, 346, 353], "998000": 343, "999": [343, 344, 346, 353, 990], "999000": 343, "microseconds_diff": 344, "milliseconds_diff": 346, "minutes_diff": 348, "1440": [348, 786], "think": [350, 351, 788, 789], "vectoris": [350, 351, 788, 789], "tseri": [350, 351, 788, 789], "monthend": [350, 788], "rollforward": [350, 788], "monthbegin": [351, 789], "rollback": [351, 789], "nanoseconds_diff": 353, "1000000": [353, 513, 791], "minu": [354, 792], "dictat": [354, 792], "date_plus_1i": [354, 792], "1y2mo": [354, 792], "date_min": 354, "1998": [354, 792], "1999": [354, 792], "2003": [354, 559, 792], "ordin": [355, 448, 590, 793, 876, 982], "366": [355, 793], "use_earliest": [357, 795], "convert_time_zon": [357, 795], "ambigu": [357, 795], "sai": [357, 795], "daylight": [357, 795], "earliest": [357, 795], "london_timezon": [357, 795], "amsterdam": [357, 795], "london_to_amsterdam": [357, 795], "cet": [357, 795], "cest": [357, 795], "dst": [357, 795], "ts_local": [357, 795], "brussel": [357, 795], "half": [358, 372, 373, 374, 590, 796, 811, 812, 813, 982], "225": [358, 365], "to_fram": [358, 365, 507, 896, 897, 936, 937, 940, 982], "10m": [358, 365, 796, 803], "milli": [359, 797], "micro": [359, 797], "456789": 359, "654321": 359, "111110": 359, "765431": 359, "sec": [359, 990], "11111": 359, "seconds_diff": 360, "to_str": [361, 799], "datetime_str": [361, 364], "timestamp_n": [363, 801], "timestamp_m": 363, "978307200000": 363, "978393600000": 363, "978480000000": 363, "strftime": [364, 802], "1mo_satur": 365, "53": [366, 804], "incorrect": [368, 467, 590, 671, 806, 898, 982], "time_unit_u": [368, 806], "32971": [368, 806], "32974": [368, 806], "32976": [368, 806], "718281828459045": [370, 412, 590, 809, 853, 982], "pk": [370, 590, 809, 982], "459148": [370, 590], "754888": [370, 590], "span": [372, 373, 374, 590, 811, 812, 813, 982], "half_lif": [372, 373, 374, 590, 811, 812, 813, 982], "adjust": [372, 373, 374, 475, 590, 811, 812, 813, 908, 982], "ignore_nul": [372, 373, 374, 590, 811, 812, 813, 973, 982], "exponenti": [372, 373, 374, 376, 444, 590, 811, 812, 813, 814, 982], "weight": [372, 373, 374, 454, 455, 456, 457, 458, 459, 461, 462, 463, 475, 590, 811, 812, 813, 882, 883, 884, 885, 886, 887, 889, 890, 891, 908, 982], "decai": [372, 373, 374, 590, 811, 812, 813, 982], "term": [372, 373, 374, 492, 495, 590, 811, 812, 813, 925, 928, 982], "mass": [372, 373, 374, 590, 811, 812, 813, 982], "gamma": [372, 373, 374, 590, 811, 812, 813, 982], "foral": [372, 373, 374, 590, 811, 812, 813, 982], "geq": [372, 373, 374, 590, 811, 812, 813, 982], "theta": [372, 373, 374, 590, 811, 812, 813, 982], "life": [372, 373, 374, 590, 811, 812, 813, 982], "exp": [372, 373, 374, 590, 811, 812, 813, 982], "ln": [372, 373, 374, 590, 811, 812, 813, 982], "smooth": [372, 373, 374, 590, 811, 812, 813, 982], "factor": [372, 373, 374, 524, 590, 811, 812, 813, 966, 982], "leq": [372, 373, 374, 590, 811, 812, 813, 982], "begin": [372, 373, 374, 488, 590, 811, 812, 813, 921, 982], "imbal": [372, 373, 374, 590, 811, 812, 813, 982], "ew": [372, 373, 374, 590, 811, 812, 813, 982], "w_i": [372, 373, 374, 590, 811, 812, 813, 982], "recurs": [372, 373, 374, 590, 811, 812, 813, 982], "y_0": [372, 373, 374, 590, 811, 812, 813, 982], "x_0": [372, 373, 374, 590, 811, 812, 813, 982], "y_t": [372, 373, 374, 590, 811, 812, 813, 982], "y_": [372, 373, 374, 590, 811, 812, 813, 982], "x_t": [372, 373, 374, 590, 811, 812, 813, 982], "observ": [372, 373, 374, 590, 811, 812, 813, 982], "x_2": [372, 373, 374, 590, 811, 812, 813, 982], "428571": [372, 590], "bia": [373, 374, 407, 460, 475, 590, 812, 813, 850, 888, 908, 982], "unbias": [373, 374, 590, 812, 813, 982], "963624": [373, 590, 812, 982], "928571": [374, 590, 813, 982], "wildcard": [375, 542, 548, 549, 557, 572, 590], "regex": [375, 425, 482, 483, 486, 488, 489, 497, 498, 505, 555, 580, 590, 915, 916, 919, 921, 922, 930, 931, 938], "aa": [375, 482, 555, 590, 915], "ba": [375, 555, 590], "cc": [375, 555, 590], "718282": [376, 590], "389056": [376, 590], "54": [376, 590, 990], "59815": [376, 590], "expand": [377, 424, 425, 451, 590, 815, 982], "exprlistnamespac": [377, 383, 452, 590], "exprstringnamespac": [377, 590], "pythonliter": [378, 565, 568, 590, 816, 858, 861, 982], "extrem": [378, 590, 816, 982], "group_col": [381, 532, 590], "g1": [381, 532, 590], "g2": [381, 532, 590], "lt": [381, 532, 590, 982], "gte": [381, 532, 590], "divis": [385, 526, 590], "truediv": [385, 590], "9774092659964970114": [389, 590], "13614470193936745724": [389, 590], "1101441246220388612": [389, 590], "11638928888656214026": [389, 590], "13382926553367784577": [389, 590], "cumsum": [392, 516, 590, 625, 687, 849, 982], "interpolationmethod": [393, 590, 829, 982], "regrid": [393, 590], "grid": [393, 590], "df_original_grid": [393, 590], "grid_point": [393, 590], "df_new_grid": [393, 590], "conflat": [394, 590], "finit": [396, 526, 545, 577, 590, 834, 982], "primit": [398, 590, 964, 982], "optional_memb": [398, 590, 837, 982], "infinit": [399, 526, 590, 838, 982], "_isnan": [400, 590], "b_isnan": [400, 590], "negat": [401, 590], "_is_not_nan": [402, 590], "b_is_not_nan": [402, 590], "_not_nul": [403, 590], "a_not_nul": [403, 590], "b_not_nul": [403, 590], "_isnul": [404, 590], "a_isnul": [404, 590], "b_isnul": [404, 590], "undo": [406, 430, 590], "duplicateerror": [406, 590, 601], "occurr": [406, 590, 826, 982], "333333": [406, 463, 590, 870, 891, 982], "fisher": [407, 475, 590, 850, 908, 982], "fourth": [407, 590, 850, 982], "subtract": [407, 516, 590, 850, 982], "distribut": [407, 475, 590, 850, 908, 982], "elimin": [407, 590, 850, 982], "bias": [407, 475, 590, 850, 908, 982], "scipi": [407, 475, 590, 850, 908, 982], "stat": [407, 475, 590, 850, 908, 982], "153061": [407, 590], "logarithm": [412, 413, 414, 590, 853, 854, 855, 982], "584963": [412, 590], "30103": [413, 590], "60206": [413, 590], "natur": [414, 590, 855, 982], "plu": [414, 590, 855, 982], "693147": [414, 590], "098612": [414, 590], "386294": [414, 590], "lowest": [415, 590], "9223372036854775808": [415, 590], "agg_list": [417, 590], "elementwis": [417, 454, 455, 456, 457, 458, 459, 461, 462, 463, 590, 882, 883, 884, 885, 886, 887, 889, 890, 891, 982], "third": [417, 590], "parti": [417, 590], "book": [417, 590], "map_dict": [417, 590, 982], "argmax": [417, 590], "_revers": [418, 453, 517, 590], "rsplit": [418, 590], "b_revers": [418, 453, 517, 590], "remap": [419, 590, 857, 982], "lookup": [419, 590, 857, 982], "country_code_dict": [419, 590], "ca": [419, 590], "canada": [419, 590], "de": [419, 590], "germani": [419, 590], "fr": [419, 590], "franc": [419, 590], "country_cod": [419, 590], "rest": [419, 590], "exprmetanamespac": [423, 426], "computeerror": [427, 496, 601, 929], "keep_nam": [430, 590], "modulu": [432, 590], "xlog2": [434, 444, 590], "poison": [436, 437, 590, 866, 867, 982], "nanmax": [436, 437, 590, 866, 867, 982], "wherea": [436, 437, 590, 624, 631, 687, 866, 867, 982], "inequ": [438, 590], "outcom": [441, 590], "_max": [441, 590], "c_max": [441, 590], "_min": [441, 590], "c_min": [441, 590], "recent": [442, 590, 870, 982], "percent": [442, 590, 870, 982], "090909": [442, 590], "extract_numb": [443, 590], "digit": [443, 464, 489, 513, 590, 892, 916, 922, 946, 982, 990], "r": [443, 483, 487, 488, 489, 497, 590, 916, 920, 921, 922, 930], "scale_negative_even": [443, 590], "expon": [444, 590, 982], "512": [444, 590, 870, 982], "reverse_": [445, 590], "reverse_a": [445, 590], "reverse_fruit": [445, 590], "reverse_b": [445, 590], "reverse_car": [445, 590], "rankmethod": [448, 590, 876, 982], "ti": [448, 590, 876, 982], "competit": [448, 590, 876, 982], "highest": [448, 529, 545, 577, 590, 687, 876, 982], "64bit": [450, 590, 878, 982], "safe": [450, 507, 590, 878, 940, 964, 982], "coerc": [451, 590], "fruits_revers": [453, 517, 590], "cars_revers": [453, 517, 590], "window_s": [454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 574, 575, 590, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 982], "rolling_min": [454, 590, 882, 982], "rolling_max": [454, 590, 882, 982], "rolling_mean": [454, 590, 882, 982], "rolling_sum": [454, 590, 882, 982], "multipli": [454, 455, 456, 457, 458, 459, 461, 462, 463, 590, 882, 883, 884, 885, 886, 887, 889, 890, 891, 982], "358899": [454, 590], "041452": [454, 590], "567764": [454, 590], "travers": [455, 456, 458, 461, 462, 463, 590, 883, 884, 886, 889, 890, 891, 982], "vector": [455, 456, 458, 461, 462, 463, 590, 883, 884, 886, 889, 890, 891, 982], "5h": [455, 456, 457, 458, 459, 461, 462, 463, 590], "skew": [460, 590, 888, 982], "527525": [461, 590, 889, 982], "searchsortedsid": [466, 590, 894, 982], "leftmost": [466, 590, 894, 982], "rightmost": [466, 590, 894, 982], "six": [466, 590], "downstream": [467, 590, 898, 982], "extrema": [470, 590, 902, 982], "112": [470, 590, 990], "129": [470, 590], "i8": [470, 590, 760, 881, 970, 982], "8589934592": [470, 590], "1073741824": [470, 590], "content": [471, 530, 590, 904, 982], "175201": [474, 590, 907, 982], "about": [475, 482, 488, 489, 497, 590, 908, 915, 921, 922, 930, 982, 990], "unimod": [475, 590, 908, 982], "skewtest": [475, 590, 908, 982], "speak": [475, 590, 908, 982], "g_1": [475, 590, 908, 982], "m_3": [475, 590, 908, 982], "m_2": [475, 590, 908, 982], "m_i": [475, 590, 908, 982], "sum_": [475, 590, 908, 982], "texttt": [475, 590, 908, 982], "k_3": [475, 590, 908, 982], "k_2": [475, 590, 908, 982], "sqrt": [475, 590, 908, 982], "343622": [475, 590], "value1": [478, 590], "value2": [478, 590], "attain": [478, 590], "414214": [479, 590, 911, 982], "ends_with": [482, 505, 938], "behaviour": [482, 488, 489, 497, 526, 590, 915, 921, 922, 930], "sensit": [482, 489, 497, 915, 922, 930], "ilmsuxu": [482, 488, 489, 497, 915, 921, 922, 930], "default_match": 482, "insensitive_match": 482, "section": [482, 488, 489, 497, 915, 921, 922, 930], "crab": [482, 915], "dog": [482, 510, 512, 544, 915], "rab": [482, 915], "success": [483, 489, 916, 922], "overlap": [483, 489, 916, 922], "captur": [483, 488, 489, 916, 921, 922], "123": [483, 489, 498, 916, 922, 931, 961, 982], "bla": [483, 489, 916, 922], "asd": [483, 489, 916, 922], "678": [483, 489, 916, 922], "910t": [483, 489, 916, 922], "count_digit": 483, "666f6f": [485, 918], "626172": [485, 918], "mango": [486, 505, 919, 938], "go": [486, 919], "has_suffix": 486, "group_index": [488, 921], "nthose": [488, 921], "nodd": [488, 921], "nthe": [488, 921], "url": [488, 921], "vote": [488, 921], "ballon_dor": [488, 921], "404": [488, 921], "ref": [488, 921], "candid": [488, 921], "messi": [488, 921], "ronaldo": [488, 921], "did": [489, 922], "email": [489, 922], "real": [489, 922], "some_account": [489, 922], "somewher": [489, 922], "net": [489, 922], "jkl": [489, 922], "uvw": [489, 922], "co": [489, 590, 922, 982], "uk": [489, 922], "address": 489, "xi": [489, 922], "insensit": [489, 497, 915, 922, 930], "quantifi": [489, 922], "arr": [489, 554, 591, 964, 982, 983], "email_part": [489, 922], "extracted_nr": 489, "910": [489, 922], "json_path_match": [490, 923], "jsonpath": [490, 491, 923, 924], "json_path": [491, 924], "regardless": [491, 924], "json_val": [491, 924], "n_char": [492, 925], "caf\u00e9": [492, 495, 925, 928], "345": [492, 495, 925, 928], "\u6771\u4eac": [492, 495, 925, 928], "nchar": [492, 495], "fill_char": [493, 499, 926, 932], "justifi": [493, 499, 926, 932], "pad": [493, 499, 513, 926, 932, 946], "cow": [493, 499, 926, 932], "monkei": [493, 499, 926, 932], "hippopotamu": [493, 499, 926, 932], "strip": [494, 500, 927, 933], "tworld": [494, 506, 927, 939], "wod": [494, 500, 927, 933], "rld": [494, 927], "text": [495, 497, 498, 928, 990], "radix": [496, 929], "parseerror": [496, 929], "becom": [496, 929], "silent": [496, 929], "110": [496, 929], "010": [496, 929], "fa1e": [496, 929], "ff00": [496, 929], "cafe": [496, 929], "64030": [496, 929], "65280": [496, 929], "51966": [496, 929], "replace_al": [497, 930], "citi": 497, "philadelphia": 497, "season": 497, "spring": 497, "summer": 497, "autumn": 497, "winter": 497, "weather": [497, 930], "raini": [497, 930], "sunni": [497, 930], "cloudi": 497, "snowi": 497, "foggi": [497, 930], "123abc": [497, 930], "abc456": [497, 930], "abcabc": [498, 931], "123a123": [498, 931], "bc": [498, 580, 931], "trail": [500, 506, 933, 939], "worl": [500, 506, 933, 939], "subslic": [501, 934], "pear": [501, 934], "papaya": [501, 934], "dragonfruit": [501, 934], "s_slice": 501, "ear": [501, 934], "aya": [501, 934], "uit": [501, 934], "ya": [501, 934], "onf": [501, 934], "a_1": [503, 936, 960, 982], "d_4": [503, 936], "rename_field": [503, 504, 936, 937], "first_part": [503, 504, 936, 937], "second_part": [503, 504, 936, 937], "remaind": [504, 937], "app": [505, 938], "has_prefix": 505, "polarstemporaltyp": [507, 940], "tz_awar": [507, 940], "anywher": [507, 508, 509, 940, 941, 942], "toggl": [507, 940], "futur": [507, 940], "3f": [507, 509, 940, 942], "00z": [507, 509, 940, 942], "sun": [507, 940], "jul": [507, 940], "34": [507, 940], "_tz_awar": 509, "lowercas": [510, 943], "variant": [510, 512], "uppercas": [512, 945], "100000": 513, "0010": 513, "0001": 513, "00000": 513, "00001": 513, "cd": [514, 515], "struct_col": [514, 515], "www": 515, "xxx": 515, "yyi": 515, "zzz": 515, "obvious": 515, "structfieldnotfounderror": [515, 601], "761594": [523, 590, 957, 982], "replic": [524, 590, 966, 982], "vals_phys": [524, 590], "floordiv": [526, 590], "ieee": [526, 590], "754": [526, 590], "mathemat": [526, 554, 590], "undefin": [526, 590], "On": [526, 590], "operand": [526, 590], "infin": [526, 590], "value_count": [528, 590, 982], "9223372036854775807": [529, 590], "multithread": [530, 590], "binary_str": [533, 590], "zfill": [533, 590], "250": [533, 590, 884, 982, 990], "bin_x": [533, 590], "bin_i": [533, 590], "xor_xi": [533, 590], "bin_xor_xi": [533, 590], "00001010": [533, 590], "00000001": [533, 590], "00001011": [533, 590], "00001000": [533, 590], "00000010": [533, 590], "11111010": [533, 590], "00000011": [533, 590], "249": [533, 590], "11111001": [533, 590], "01000010": [533, 590], "00000100": [533, 590], "70": [533, 590], "01000110": [533, 590], "bitwis": [534, 535], "AND": 534, "returns_scalar": 536, "product_a": 536, "49": 536, "Be": 538, "more_nam": 542, "hamburg": 542, "lag": 543, "mimic": 543, "a_lag_": 543, "a_rol": 543, "plai": 544, "swim": 544, "walk": 544, "full_sent": 544, "correlationmethod": 545, "propagate_nan": [545, 577], "spearman": [545, 577], "larger": [545, 577, 651, 652, 687], "544705": [545, 570], "covari": [547, 575], "acc": [548, 549, 557, 572], "include_init": 548, "accumul": [548, 549, 557, 572], "fn": [548, 549, 557, 572], "new_valu": [548, 549, 557, 572], "cumreduc": 548, "999999": 552, "tbl_width_char": 553, "120": 553, "add_week": 553, "add_dai": 553, "add_second": 553, "add_milli": 553, "add_hour": 553, "a_b_doubl": 554, "f_string": 558, "placehold": 558, "hello_": 558, "_world": 558, "foo_": 558, "_bar_": 558, "foo_a_bar_1": 558, "foo_b_bar_2": 558, "foo_c_bar_3": 558, "epoch": 559, "timestep": 559, "1666683077": 559, "1666683099": 559, "39": 559, "12345": [559, 744, 821, 892, 982], "12346": 559, "agg_group": [560, 590], "favor": [562, 570, 577], "implod": [562, 590, 982], "allow_object": 563, "valueexcept": 563, "foo_bar": 563, "test_func": 564, "605551": 578, "605551275463989": 578, "my_struct": 579, "q": 579, "selector": 580, "statement": 583, "chain": 583, "isn": 583, "thens": 583, "elif": 583, "pick": 583, "sometim": 589, "and_": 590, "approx_uniqu": [590, 687], "arcco": [590, 982], "arccosh": [590, 982], "arcsin": [590, 982], "arcsinh": [590, 982], "arctan": [590, 982], "arctanh": [590, 982], "arg_max": [590, 982], "arg_min": [590, 982], "arg_sort": [590, 982], "arg_uniqu": [590, 982], "backward_fil": 590, "clip_max": [590, 982], "clip_min": [590, 982], "cosh": [590, 982], "cumcount": 590, "cummax": [590, 982], "cummin": [590, 982], "cumulative_ev": [590, 982], "entropi": [590, 982], "eq": [590, 982], "ewm_mean": [590, 982], "ewm_std": [590, 982], "ewm_var": [590, 982], "extend_const": [590, 982], "flatten": 590, "ge": [590, 982], "gt": [590, 982], "inspect": [590, 687], "is_between": [590, 982], "is_finit": [590, 982], "is_first": [590, 982], "is_in": [590, 982], "is_infinit": [590, 982], "is_nan": [590, 982], "is_not_nan": [590, 982], "is_not_nul": [590, 982], "kurtosi": [590, 982], "le": [590, 982], "log10": [590, 982], "log1p": [590, 982], "mod": 590, "mul": 590, "nan_max": [590, 982], "nan_min": [590, 982], "ne": [590, 982], "or_": 590, "pct_chang": [590, 982], "pow": [590, 982], "reinterpret": [590, 982], "repeat_bi": 590, "rolling_appli": [590, 982], "rolling_median": [590, 982], "rolling_quantil": [590, 982], "rolling_skew": [590, 982], "rolling_std": [590, 982], "rolling_var": [590, 982], "search_sort": [590, 982], "shrink_dtyp": [590, 982], "sin": [590, 982], "sinh": [590, 982], "sort_bi": 590, "tan": [590, 982], "to_phys": [590, 982], "unique_count": [590, 982], "xor": 590, "expos": 601, "registr": 601, "miscellan": 601, "arrowerror": 601, "columnnotfounderror": 601, "invalidoperationerror": 601, "nodataerror": 601, "polarspanicerror": 601, "schemaerror": 601, "schemafieldnotfounderror": 601, "shapeerror": 601, "parametr": 601, "build_info": 601, "get_index_typ": 601, "show_vers": 601, "threadpool_s": 601, "sqlcontext": [601, 989], "lf": [604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 664, 665, 666, 667, 668, 687, 990], "hit": [605, 687], "node": [605, 625, 632, 636, 640, 643, 687], "huge": [608, 687], "saver": [608, 687], "purpos": [615, 687], "influenc": [615, 632, 687], "read_json": [620, 668, 687], "lazygroupbi": [621, 622, 623, 687], "other_lf": [627, 687], "validate_output_schema": [632, 687], "streamabl": [632, 636, 687], "past": [632, 687], "assum": [632, 671, 687], "paramount": [632, 687], "bug": [632, 671, 687], "elig": [632, 687], "invari": [632, 687], "upheld": [632, 687], "prune": [632, 687], "show_plot": [640, 687], "truncate_nod": [640, 687], "figsiz": [640, 650, 687], "gantt": [640, 687], "plot": [640, 650, 687], "groupby_partit": [640, 687], "470": [640, 687], "475": [640, 687], "1964": [640, 687], "from_json": [642, 687], "swap": [643, 687], "output_path": [650, 687], "raw_output": [650, 687], "figur": [650, 687], "persist": [651, 652, 687], "ram": [651, 652, 687], "slightli": [651, 652, 687], "my_larger_than_ram_fil": [651, 652, 687], "data_pagesize_limit": [652, 687], "290994": [655, 687], "118034": [655, 687], "433013": [655, 687], "1875": [663, 687], "extern": [666, 687], "lf_other": [666, 687], "afoo": [666, 687], "cfoo": [666, 687], "train_lf": [666, 687], "feature_0": [666, 687], "feature_1": [666, 687], "test_lf": [666, 687], "_train": [666, 687], "feature_0_train": [666, 687], "dataframescan": [668, 687], "output_schema": [668, 687], "lf2": 687, "lf3": 687, "lf4": 687, "lf5": 687, "lf6": 687, "explain": 687, "sink_ipc": 687, "sink_parquet": 687, "with_context": 687, "new_aliased_sr": [692, 982], "append_chunk": [695, 982], "super": [695, 982], "141593": [697, 982], "292432": [698, 982], "549306": [702, 982], "listnamespac": [708, 815, 880, 982], "field_2": 733, "n00": 733, "n01": 733, "n02": 733, "catnamespac": 742, "56789": [744, 821, 892, 982], "901234": [744, 821, 892, 982], "pi": [751, 906, 956, 982], "1232e": [751, 982], "quick": [759, 982, 990], "series_num": [759, 982], "581139": [759, 982], "series_str": [759, 982], "datetimenamespac": 764, "ser": [768, 769, 800], "replace_time_zon": [768, 769, 800], "kathmandu": [768, 769, 800], "0545": [768, 769, 800], "500m": [780, 782, 790, 797], "500000": 780, "2m": 785, "500000000": 790, "date_minus_1y_2mon": 792, "165": [796, 803], "series_equ": [796, 803, 982], "timestamp_u": 801, "978307200000000000": 801, "978393600000000000": 801, "978480000000000000": 801, "005": [809, 982], "06293300616044681": [809, 982], "65": [809, 982], "8568409950394724": [809, 982], "4000000": [810, 982], "814697265625": [810, 982], "stringnamespac": [815, 913, 982], "bitmask": [823, 982], "swiftli": [823, 982], "10734580197236529959": [824, 982], "3022416320763508302": [824, 982], "13756996518000038261": [824, 982], "bin_count": [826, 982], "a_count": [826, 982], "fall": [830, 982], "2147483648": [856, 982], "iso3166": [857, 982], "tur": [857, 982], "jpn": [857, 982], "nld": [857, 982], "country_lookup": [857, 982], "japan": [857, 982], "t\u00fcrkiy": [857, 982], "netherland": [857, 982], "unrecognis": [857, 982], "unspecifi": [857, 982], "country_nam": [857, 982], "166667": [870, 982], "142857": [870, 982], "peak": [871, 872, 982], "quanil": [874, 982], "nanstd": [882, 982], "858612": [882, 982], "200": [883, 884, 886, 982], "150": [884, 982], "350": [884, 982], "450": [884, 982], "381802": [888, 982], "dev": [889, 982], "57": [892, 982, 990], "frequent": [896, 897, 982], "mutat": [897, 982], "2246e": [906, 956, 982], "6331e16": [956, 982], "lib": [959, 982], "int64arrai": [959, 982], "a_2": [960, 982], "a_3": [960, 982], "s_from_str_repr": [962, 982], "zero_copy_onli": [964, 982], "writabl": [964, 982], "complet": [964, 982], "presenc": [964, 982], "immut": [964, 982], "127": [970, 982], "seriesview": [973, 982], "arraylik": 982, "dtype_if_empti": 982, "position": 982, "scenario": 982, "through": 982, "chunk_length": 982, "cut": 982, "get_chunk": 982, "has_valid": 982, "hist": 982, "is_boolean": 982, "is_float": 982, "is_integ": 982, "is_numer": [982, 990], "is_sort": 982, "is_tempor": 982, "is_utf8": 982, "new_from_index": 982, "peak_max": 982, "peak_min": 982, "power": 982, "qcut": 982, "set_at_idx": 982, "guid": 990, "easi": 990, "approxim": 990, "own": 990, "machin": 990, "xdist": 990, "vari": 990, "hardwar": 990, "setup": 990, "numeric_dtyp": 990, "null_probabililti": 990, "test_numer": 990, "col0": 990, "col4": 990, "29096": 990, "485": 990, "2147483647": 990, "8257e14": 990, "7508": 990, "37338": 990, "7264": 990, "321": 990, "16996": 990, "121": 990, "361": 990, "63204": 990, "1443e235": 990, "conform": 990, "ascii_lett": 990, "id_char": 990, "alphabet": 990, "price": 990, "min_valu": 990, "max_valu": 990, "test_price_calcul": 990, "a101": 990, "8nin": 990, "qhoo": 990, "714": 990, "544": 990, "i0e0": 990, "0000": 990, "colz": 990, "test_miscellan": 990, "143": 990, "235": 990, "87": 990, "186": 990, "174": 990, "179": 990, "213": 990, "221": 990, "86": 990, "255": 990}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [34, 0, 1, "", "DataType"], [35, 0, 1, "", "Date"], [36, 0, 1, "", "Datetime"], [37, 0, 1, "", "Decimal"], [38, 0, 1, "", "Duration"], [39, 0, 1, "", "Float32"], [40, 0, 1, "", "Float64"], [41, 0, 1, "", "Int16"], [42, 0, 1, "", "Int32"], [43, 0, 1, "", "Int64"], [44, 0, 1, "", "Int8"], [45, 0, 1, "", "List"], [46, 0, 1, "", "Null"], [47, 0, 1, "", "Object"], [989, 0, 1, "", "SQLContext"], [52, 0, 1, "", "StringCache"], [53, 0, 1, "", "Struct"], [54, 0, 1, "", "Time"], [55, 0, 1, "", "UInt16"], [56, 0, 1, "", "UInt32"], [57, 0, 1, "", "UInt64"], [58, 0, 1, "", "UInt8"], [59, 0, 1, "", "Unknown"], [60, 0, 1, "", "Utf8"], [61, 4, 1, "", "align_frames"], [534, 4, 1, "", "all"], [535, 4, 1, "", "any"], [536, 4, 1, "", "apply"], [537, 4, 1, "", "approx_unique"], [538, 4, 1, "", "arange"], [539, 4, 1, "", "arg_sort_by"], [66, 4, 1, "", "arg_where"], [540, 4, 1, "", "avg"], [67, 4, 1, "", "build_info"], [541, 4, 1, "", "coalesce"], [542, 4, 1, "", "col"], [68, 4, 1, "", "collect_all"], [69, 4, 1, "", "concat"], [543, 4, 1, "", "concat_list"], [544, 4, 1, "", "concat_str"], [545, 4, 1, "", "corr"], [546, 4, 1, "", "count"], [547, 4, 1, "", "cov"], [548, 4, 1, "", "cumfold"], [549, 4, 1, "", "cumreduce"], [550, 4, 1, "", "cumsum"], [70, 4, 1, "", "cut"], [551, 4, 1, "", "date"], [71, 4, 1, "", "date_range"], [552, 4, 1, "", "datetime"], [553, 4, 1, "", "duration"], [554, 4, 1, "", "element"], [72, 4, 1, "", "enable_string_cache"], [555, 4, 1, "", "exclude"], [556, 4, 1, "", "first"], [557, 4, 1, "", "fold"], [558, 4, 1, "", "format"], [87, 4, 1, "", "from_arrow"], [88, 4, 1, "", "from_dataframe"], [89, 4, 1, "", "from_dict"], [90, 4, 1, "", "from_dicts"], [559, 4, 1, "", "from_epoch"], [91, 4, 1, "", "from_numpy"], [92, 4, 1, "", "from_pandas"], [93, 4, 1, "", "from_records"], [94, 4, 1, "", "from_repr"], [95, 4, 1, "", "get_dummies"], [96, 4, 1, "", "get_index_type"], [560, 4, 1, "", "groups"], [561, 4, 1, "", "head"], [562, 4, 1, "", "list"], [563, 4, 1, "", "lit"], [564, 4, 1, "", "map"], [565, 4, 1, "", "max"], [566, 4, 1, "", "mean"], [567, 4, 1, "", "median"], [568, 4, 1, "", "min"], [569, 4, 1, "", "n_unique"], [98, 4, 1, "", "ones"], [570, 4, 1, "", "pearson_corr"], [571, 4, 1, "", "quantile"], [99, 4, 1, "", "read_avro"], [100, 4, 1, "", "read_csv"], [101, 4, 1, "", "read_csv_batched"], [102, 4, 1, "", "read_database"], [103, 4, 1, "", "read_delta"], [104, 4, 1, "", "read_excel"], [105, 4, 1, "", "read_ipc"], [106, 4, 1, "", "read_ipc_schema"], [107, 4, 1, "", "read_json"], [108, 4, 1, "", "read_ndjson"], [109, 4, 1, "", "read_parquet"], [110, 4, 1, "", "read_parquet_schema"], [572, 4, 1, "", "reduce"], [573, 4, 1, "", "repeat"], [574, 4, 1, "", "rolling_corr"], [575, 4, 1, "", "rolling_cov"], [111, 4, 1, "", "scan_csv"], [112, 4, 1, "", "scan_delta"], [113, 4, 1, "", "scan_ipc"], [114, 4, 1, "", "scan_ndjson"], [115, 4, 1, "", "scan_parquet"], [116, 4, 1, "", "scan_pyarrow_dataset"], [576, 4, 1, "", "select"], [117, 4, 1, "", "show_versions"], [577, 4, 1, "", "spearman_rank_corr"], [578, 4, 1, "", "std"], [579, 4, 1, "", "struct"], [580, 4, 1, "", "sum"], [581, 4, 1, "", "tail"], [127, 4, 1, "", "threadpool_size"], [582, 4, 1, "", "var"], [583, 4, 1, "", "when"], [128, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "activate_decimals"], [6, 1, 1, "", "load"], [7, 1, 1, "", "restore_defaults"], [8, 1, 1, "", "save"], [9, 1, 1, "", "set_ascii_tables"], [10, 1, 1, "", "set_fmt_float"], [11, 1, 1, "", "set_fmt_str_lengths"], [12, 1, 1, "", "set_streaming_chunk_size"], [13, 1, 1, "", "set_tbl_cell_alignment"], [14, 1, 1, "", "set_tbl_cols"], [15, 1, 1, "", "set_tbl_column_data_type_inline"], [16, 1, 1, "", "set_tbl_dataframe_shape_below"], [17, 1, 1, "", "set_tbl_formatting"], [18, 1, 1, "", "set_tbl_hide_column_data_types"], [19, 1, 1, "", "set_tbl_hide_column_names"], [20, 1, 1, "", "set_tbl_hide_dataframe_shape"], [21, 1, 1, "", "set_tbl_hide_dtype_separator"], [22, 1, 1, "", "set_tbl_rows"], [23, 1, 1, "", "set_tbl_width_chars"], [24, 1, 1, "", "set_verbose"], [25, 1, 1, "", "state"]], "polars.DataFrame": [[131, 1, 1, "", "__dataframe__"], [132, 1, 1, "", "apply"], [133, 1, 1, "", "bottom_k"], [134, 1, 1, "", "clear"], [135, 1, 1, "", "clone"], [136, 2, 1, "", "columns"], [137, 1, 1, "", "corr"], [138, 1, 1, "", "describe"], [139, 1, 1, "", "drop"], [140, 1, 1, "", "drop_in_place"], [141, 1, 1, "", "drop_nulls"], [142, 2, 1, "", "dtypes"], [143, 1, 1, "", "estimated_size"], [144, 1, 1, "", "explode"], [145, 1, 1, "", "extend"], [146, 1, 1, "", "fill_nan"], [147, 1, 1, "", "fill_null"], [148, 1, 1, "", "filter"], [149, 1, 1, "", "find_idx_by_name"], [150, 1, 1, "", "fold"], [151, 1, 1, "", "frame_equal"], [152, 1, 1, "", "get_column"], [153, 1, 1, "", "get_columns"], [154, 1, 1, "", "glimpse"], [155, 1, 1, "", "groupby"], [156, 1, 1, "", "groupby_dynamic"], [157, 1, 1, "", "groupby_rolling"], [158, 1, 1, "", "hash_rows"], [159, 1, 1, "", "head"], [160, 2, 1, "", "height"], [161, 1, 1, "", "hstack"], [162, 1, 1, "", "insert_at_idx"], [163, 1, 1, "", "interpolate"], [164, 1, 1, "", "is_duplicated"], [165, 1, 1, "", "is_empty"], [166, 1, 1, "", "is_unique"], [167, 1, 1, "", "item"], [168, 1, 1, "", "iter_rows"], [169, 1, 1, "", "iter_slices"], [170, 1, 1, "", "join"], [171, 1, 1, "", "join_asof"], [172, 1, 1, "", "lazy"], [173, 1, 1, "", "limit"], [174, 1, 1, "", "max"], [175, 1, 1, "", "mean"], [176, 1, 1, "", "median"], [177, 1, 1, "", "melt"], [178, 1, 1, "", "merge_sorted"], [179, 1, 1, "", "min"], [180, 1, 1, "", "n_chunks"], [181, 1, 1, "", "n_unique"], [182, 1, 1, "", "null_count"], [183, 1, 1, "", "partition_by"], [184, 1, 1, "", "pipe"], [185, 1, 1, "", "pivot"], [186, 1, 1, "", "product"], [187, 1, 1, "", "quantile"], [188, 1, 1, "", "rechunk"], [189, 1, 1, "", "rename"], [190, 1, 1, "", "replace"], [191, 1, 1, "", "replace_at_idx"], [192, 1, 1, "", "reverse"], [193, 1, 1, "", "row"], [194, 1, 1, "", "rows"], [195, 1, 1, "", "sample"], [196, 2, 1, "", "schema"], [197, 1, 1, "", "select"], [198, 1, 1, "", "set_sorted"], [199, 2, 1, "", "shape"], [200, 1, 1, "", "shift"], [201, 1, 1, "", "shift_and_fill"], [202, 1, 1, "", "shrink_to_fit"], [203, 1, 1, "", "slice"], [204, 1, 1, "", "sort"], [205, 1, 1, "", "std"], [206, 1, 1, "", "sum"], [207, 1, 1, "", "tail"], [208, 1, 1, "", "take_every"], [209, 1, 1, "", "to_arrow"], [210, 1, 1, "", "to_dict"], [211, 1, 1, "", "to_dicts"], [212, 1, 1, "", "to_dummies"], [213, 1, 1, "", "to_init_repr"], [214, 1, 1, "", "to_numpy"], [215, 1, 1, "", "to_pandas"], [216, 1, 1, "", "to_series"], [217, 1, 1, "", "to_struct"], [218, 1, 1, "", "top_k"], [219, 1, 1, "", "transpose"], [220, 1, 1, "", "unique"], [221, 1, 1, "", "unnest"], [222, 1, 1, "", "unstack"], [223, 1, 1, "", "update"], [224, 1, 1, "", "upsample"], [225, 1, 1, "", "var"], [226, 1, 1, "", "vstack"], [227, 2, 1, "", "width"], [228, 1, 1, "", "with_columns"], [229, 1, 1, "", "with_row_count"], [26, 1, 1, "", "write_avro"], [27, 1, 1, "", "write_csv"], [28, 1, 1, "", "write_database"], [29, 1, 1, "", "write_excel"], [30, 1, 1, "", "write_ipc"], [31, 1, 1, "", "write_json"], [32, 1, 1, "", "write_ndjson"], [33, 1, 1, "", "write_parquet"]], "polars.DataType": [[34, 1, 1, "", "__init__"]], "polars.Date": [[35, 1, 1, "", "__init__"]], "polars.Datetime": [[36, 1, 1, "", "__init__"]], "polars.Decimal": [[37, 1, 1, "", "__init__"]], "polars.Duration": [[38, 1, 1, "", "__init__"]], "polars.Expr": [[257, 1, 1, "", "abs"], [258, 1, 1, "", "add"], [259, 1, 1, "", "agg_groups"], [260, 1, 1, "", "alias"], [261, 1, 1, "", "all"], [262, 1, 1, "", "and_"], [263, 1, 1, "", "any"], [264, 1, 1, "", "append"], [265, 1, 1, "", "apply"], [266, 1, 1, "", "approx_unique"], [267, 1, 1, "", "arccos"], [268, 1, 1, "", "arccosh"], [269, 1, 1, "", "arcsin"], [270, 1, 1, "", "arcsinh"], [271, 1, 1, "", "arctan"], [272, 1, 1, "", "arctanh"], [273, 1, 1, "", "arg_max"], [274, 1, 1, "", "arg_min"], [275, 1, 1, "", "arg_sort"], [276, 1, 1, "", "arg_true"], [277, 1, 1, "", "arg_unique"], [304, 1, 1, "", "backward_fill"], [310, 1, 1, "", "bottom_k"], [311, 1, 1, "", "cache"], [312, 1, 1, "", "cast"], [314, 1, 1, "", "ceil"], [315, 1, 1, "", "clip"], [316, 1, 1, "", "clip_max"], [317, 1, 1, "", "clip_min"], [318, 1, 1, "", "cos"], [319, 1, 1, "", "cosh"], [320, 1, 1, "", "count"], [321, 1, 1, "", "cumcount"], [322, 1, 1, "", "cummax"], [323, 1, 1, "", "cummin"], [324, 1, 1, "", "cumprod"], [325, 1, 1, "", "cumsum"], [326, 1, 1, "", "cumulative_eval"], [327, 1, 1, "", "diff"], [328, 1, 1, "", "dot"], [329, 1, 1, "", "drop_nans"], [330, 1, 1, "", "drop_nulls"], [370, 1, 1, "", "entropy"], [371, 1, 1, "", "eq"], [372, 1, 1, "", "ewm_mean"], [373, 1, 1, "", "ewm_std"], [374, 1, 1, "", "ewm_var"], [375, 1, 1, "", "exclude"], [376, 1, 1, "", "exp"], [377, 1, 1, "", "explode"], [378, 1, 1, "", "extend_constant"], [379, 1, 1, "", "fill_nan"], [380, 1, 1, "", "fill_null"], [381, 1, 1, "", "filter"], [382, 1, 1, "", "first"], [383, 1, 1, "", "flatten"], [384, 1, 1, "", "floor"], [385, 1, 1, "", "floordiv"], [386, 1, 1, "", "forward_fill"], [387, 1, 1, "", "ge"], [388, 1, 1, "", "gt"], [389, 1, 1, "", "hash"], [390, 1, 1, "", "head"], [391, 1, 1, "", "implode"], [392, 1, 1, "", "inspect"], [393, 1, 1, "", "interpolate"], [394, 1, 1, "", "is_between"], [395, 1, 1, "", "is_duplicated"], [396, 1, 1, "", "is_finite"], [397, 1, 1, "", "is_first"], [398, 1, 1, "", "is_in"], [399, 1, 1, "", "is_infinite"], [400, 1, 1, "", "is_nan"], [401, 1, 1, "", "is_not"], [402, 1, 1, "", "is_not_nan"], [403, 1, 1, "", "is_not_null"], [404, 1, 1, "", "is_null"], [405, 1, 1, "", "is_unique"], [406, 1, 1, "", "keep_name"], [407, 1, 1, "", "kurtosis"], [408, 1, 1, "", "last"], [409, 1, 1, "", "le"], [410, 1, 1, "", "len"], [411, 1, 1, "", "limit"], [412, 1, 1, "", "log"], [413, 1, 1, "", "log10"], [414, 1, 1, "", "log1p"], [415, 1, 1, "", "lower_bound"], [416, 1, 1, "", "lt"], [417, 1, 1, "", "map"], [418, 1, 1, "", "map_alias"], [419, 1, 1, "", "map_dict"], [420, 1, 1, "", "max"], [421, 1, 1, "", "mean"], [422, 1, 1, "", "median"], [431, 1, 1, "", "min"], [432, 1, 1, "", "mod"], [433, 1, 1, "", "mode"], [434, 1, 1, "", "mul"], [435, 1, 1, "", "n_unique"], [436, 1, 1, "", "nan_max"], [437, 1, 1, "", "nan_min"], [438, 1, 1, "", "ne"], [439, 1, 1, "", "null_count"], [440, 1, 1, "", "or_"], [441, 1, 1, "", "over"], [442, 1, 1, "", "pct_change"], [443, 1, 1, "", "pipe"], [444, 1, 1, "", "pow"], [445, 1, 1, "", "prefix"], [446, 1, 1, "", "product"], [447, 1, 1, "", "quantile"], [448, 1, 1, "", "rank"], [449, 1, 1, "", "rechunk"], [450, 1, 1, "", "reinterpret"], [451, 1, 1, "", "repeat_by"], [452, 1, 1, "", "reshape"], [453, 1, 1, "", "reverse"], [454, 1, 1, "", "rolling_apply"], [455, 1, 1, "", "rolling_max"], [456, 1, 1, "", "rolling_mean"], [457, 1, 1, "", "rolling_median"], [458, 1, 1, "", "rolling_min"], [459, 1, 1, "", "rolling_quantile"], [460, 1, 1, "", "rolling_skew"], [461, 1, 1, "", "rolling_std"], [462, 1, 1, "", "rolling_sum"], [463, 1, 1, "", "rolling_var"], [464, 1, 1, "", "round"], [465, 1, 1, "", "sample"], [466, 1, 1, "", "search_sorted"], [467, 1, 1, "", "set_sorted"], [468, 1, 1, "", "shift"], [469, 1, 1, "", "shift_and_fill"], [470, 1, 1, "", "shrink_dtype"], [471, 1, 1, "", "shuffle"], [472, 1, 1, "", "sign"], [473, 1, 1, "", "sin"], [474, 1, 1, "", "sinh"], [475, 1, 1, "", "skew"], [476, 1, 1, "", "slice"], [477, 1, 1, "", "sort"], [478, 1, 1, "", "sort_by"], [479, 1, 1, "", "sqrt"], [480, 1, 1, "", "std"], [516, 1, 1, "", "sub"], [517, 1, 1, "", "suffix"], [518, 1, 1, "", "sum"], [519, 1, 1, "", "tail"], [520, 1, 1, "", "take"], [521, 1, 1, "", "take_every"], [522, 1, 1, "", "tan"], [523, 1, 1, "", "tanh"], [524, 1, 1, "", "to_physical"], [525, 1, 1, "", "top_k"], [526, 1, 1, "", "truediv"], [527, 1, 1, "", "unique"], [528, 1, 1, "", "unique_counts"], [529, 1, 1, "", "upper_bound"], [530, 1, 1, "", "value_counts"], [531, 1, 1, "", "var"], [532, 1, 1, "", "where"], [533, 1, 1, "", "xor"]], "polars.Expr.arr": [[278, 1, 1, "", "arg_max"], [279, 1, 1, "", "arg_min"], [280, 1, 1, "", "concat"], [281, 1, 1, "", "contains"], [282, 1, 1, "", "count_match"], [283, 1, 1, "", "diff"], [284, 1, 1, "", "eval"], [285, 1, 1, "", "explode"], [286, 1, 1, "", "first"], [287, 1, 1, "", "get"], [288, 1, 1, "", "head"], [289, 1, 1, "", "join"], [290, 1, 1, "", "last"], [291, 1, 1, "", "lengths"], [292, 1, 1, "", "max"], [293, 1, 1, "", "mean"], [294, 1, 1, "", "min"], [295, 1, 1, "", "reverse"], [296, 1, 1, "", "shift"], [297, 1, 1, "", "slice"], [298, 1, 1, "", "sort"], [299, 1, 1, "", "sum"], [300, 1, 1, "", "tail"], [301, 1, 1, "", "take"], [302, 1, 1, "", "to_struct"], [303, 1, 1, "", "unique"]], "polars.Expr.bin": [[305, 1, 1, "", "contains"], [306, 1, 1, "", "decode"], [307, 1, 1, "", "encode"], [308, 1, 1, "", "ends_with"], [309, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[313, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[331, 1, 1, "", "cast_time_unit"], [332, 1, 1, "", "combine"], [333, 1, 1, "", "convert_time_zone"], [334, 1, 1, "", "date"], [335, 1, 1, "", "datetime"], [336, 1, 1, "", "day"], [337, 1, 1, "", "days"], [338, 1, 1, "", "epoch"], [339, 1, 1, "", "hour"], [340, 1, 1, "", "hours"], [341, 1, 1, "", "is_leap_year"], [342, 1, 1, "", "iso_year"], [343, 1, 1, "", "microsecond"], [344, 1, 1, "", "microseconds"], [345, 1, 1, "", "millisecond"], [346, 1, 1, "", "milliseconds"], [347, 1, 1, "", "minute"], [348, 1, 1, "", "minutes"], [349, 1, 1, "", "month"], [350, 1, 1, "", "month_end"], [351, 1, 1, "", "month_start"], [352, 1, 1, "", "nanosecond"], [353, 1, 1, "", "nanoseconds"], [354, 1, 1, "", "offset_by"], [355, 1, 1, "", "ordinal_day"], [356, 1, 1, "", "quarter"], [357, 1, 1, "", "replace_time_zone"], [358, 1, 1, "", "round"], [359, 1, 1, "", "second"], [360, 1, 1, "", "seconds"], [361, 1, 1, "", "strftime"], [362, 1, 1, "", "time"], [363, 1, 1, "", "timestamp"], [364, 1, 1, "", "to_string"], [365, 1, 1, "", "truncate"], [366, 1, 1, "", "week"], [367, 1, 1, "", "weekday"], [368, 1, 1, "", "with_time_unit"], [369, 1, 1, "", "year"]], "polars.Expr.meta": [[423, 1, 1, "", "eq"], [424, 1, 1, "", "has_multiple_outputs"], [425, 1, 1, "", "is_regex_projection"], [426, 1, 1, "", "ne"], [427, 1, 1, "", "output_name"], [428, 1, 1, "", "pop"], [429, 1, 1, "", "root_names"], [430, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[481, 1, 1, "", "concat"], [482, 1, 1, "", "contains"], [483, 1, 1, "", "count_match"], [484, 1, 1, "", "decode"], [485, 1, 1, "", "encode"], [486, 1, 1, "", "ends_with"], [487, 1, 1, "", "explode"], [488, 1, 1, "", "extract"], [489, 1, 1, "", "extract_all"], [490, 1, 1, "", "json_extract"], [491, 1, 1, "", "json_path_match"], [492, 1, 1, "", "lengths"], [493, 1, 1, "", "ljust"], [494, 1, 1, "", "lstrip"], [495, 1, 1, "", "n_chars"], [496, 1, 1, "", "parse_int"], [497, 1, 1, "", "replace"], [498, 1, 1, "", "replace_all"], [499, 1, 1, "", "rjust"], [500, 1, 1, "", "rstrip"], [501, 1, 1, "", "slice"], [502, 1, 1, "", "split"], [503, 1, 1, "", "split_exact"], [504, 1, 1, "", "splitn"], [505, 1, 1, "", "starts_with"], [506, 1, 1, "", "strip"], [507, 1, 1, "", "strptime"], [508, 1, 1, "", "to_date"], [509, 1, 1, "", "to_datetime"], [510, 1, 1, "", "to_lowercase"], [511, 1, 1, "", "to_time"], [512, 1, 1, "", "to_uppercase"], [513, 1, 1, "", "zfill"]], "polars.Expr.struct": [[514, 1, 1, "", "field"], [515, 1, 1, "", "rename_fields"]], "polars.Float32": [[39, 1, 1, "", "__init__"]], "polars.Float64": [[40, 1, 1, "", "__init__"]], "polars.Int16": [[41, 1, 1, "", "__init__"]], "polars.Int32": [[42, 1, 1, "", "__init__"]], "polars.Int64": [[43, 1, 1, "", "__init__"]], "polars.Int8": [[44, 1, 1, "", "__init__"]], "polars.LazyFrame": [[604, 1, 1, "", "bottom_k"], [605, 1, 1, "", "cache"], [606, 1, 1, "", "clear"], [607, 1, 1, "", "clone"], [608, 1, 1, "", "collect"], [609, 2, 1, "", "columns"], [610, 1, 1, "", "drop"], [611, 1, 1, "", "drop_nulls"], [612, 2, 1, "", "dtypes"], [613, 1, 1, "", "explain"], [614, 1, 1, "", "explode"], [615, 1, 1, "", "fetch"], [616, 1, 1, "", "fill_nan"], [617, 1, 1, "", "fill_null"], [618, 1, 1, "", "filter"], [619, 1, 1, "", "first"], [620, 1, 1, "", "from_json"], [621, 1, 1, "", "groupby"], [622, 1, 1, "", "groupby_dynamic"], [623, 1, 1, "", "groupby_rolling"], [624, 1, 1, "", "head"], [625, 1, 1, "", "inspect"], [626, 1, 1, "", "interpolate"], [627, 1, 1, "", "join"], [628, 1, 1, "", "join_asof"], [629, 1, 1, "", "last"], [630, 1, 1, "", "lazy"], [631, 1, 1, "", "limit"], [632, 1, 1, "", "map"], [633, 1, 1, "", "max"], [634, 1, 1, "", "mean"], [635, 1, 1, "", "median"], [636, 1, 1, "", "melt"], [637, 1, 1, "", "merge_sorted"], [638, 1, 1, "", "min"], [639, 1, 1, "", "pipe"], [640, 1, 1, "", "profile"], [641, 1, 1, "", "quantile"], [642, 1, 1, "", "read_json"], [643, 1, 1, "", "rename"], [644, 1, 1, "", "reverse"], [645, 2, 1, "", "schema"], [646, 1, 1, "", "select"], [647, 1, 1, "", "set_sorted"], [648, 1, 1, "", "shift"], [649, 1, 1, "", "shift_and_fill"], [650, 1, 1, "", "show_graph"], [651, 1, 1, "", "sink_ipc"], [652, 1, 1, "", "sink_parquet"], [653, 1, 1, "", "slice"], [654, 1, 1, "", "sort"], [655, 1, 1, "", "std"], [656, 1, 1, "", "sum"], [657, 1, 1, "", "tail"], [658, 1, 1, "", "take_every"], [659, 1, 1, "", "top_k"], [660, 1, 1, "", "unique"], [661, 1, 1, "", "unnest"], [662, 1, 1, "", "update"], [663, 1, 1, "", "var"], [664, 2, 1, "", "width"], [665, 1, 1, "", "with_columns"], [666, 1, 1, "", "with_context"], [667, 1, 1, "", "with_row_count"], [668, 1, 1, "", "write_json"]], "polars.List": [[45, 1, 1, "", "__init__"]], "polars.Null": [[46, 1, 1, "", "__init__"]], "polars.Object": [[47, 1, 1, "", "__init__"]], "polars.SQLContext": [[48, 1, 1, "", "execute"], [49, 1, 1, "", "query"], [50, 1, 1, "", "register"], [51, 1, 1, "", "register_many"]], "polars.Series": [[691, 1, 1, "", "abs"], [692, 1, 1, "", "alias"], [693, 1, 1, "", "all"], [694, 1, 1, "", "any"], [695, 1, 1, "", "append"], [696, 1, 1, "", "apply"], [697, 1, 1, "", "arccos"], [698, 1, 1, "", "arccosh"], [699, 1, 1, "", "arcsin"], [700, 1, 1, "", "arcsinh"], [701, 1, 1, "", "arctan"], [702, 1, 1, "", "arctanh"], [703, 1, 1, "", "arg_max"], [704, 1, 1, "", "arg_min"], [705, 1, 1, "", "arg_sort"], [706, 1, 1, "", "arg_true"], [707, 1, 1, "", "arg_unique"], [708, 3, 1, "", "arr"], [740, 1, 1, "", "bottom_k"], [741, 1, 1, "", "cast"], [742, 3, 1, "", "cat"], [744, 1, 1, "", "ceil"], [745, 1, 1, "", "chunk_lengths"], [746, 1, 1, "", "clear"], [747, 1, 1, "", "clip"], [748, 1, 1, "", "clip_max"], [749, 1, 1, "", "clip_min"], [750, 1, 1, "", "clone"], [751, 1, 1, "", "cos"], [752, 1, 1, "", "cosh"], [753, 1, 1, "", "cummax"], [754, 1, 1, "", "cummin"], [755, 1, 1, "", "cumprod"], [756, 1, 1, "", "cumsum"], [757, 1, 1, "", "cumulative_eval"], [758, 1, 1, "", "cut"], [759, 1, 1, "", "describe"], [760, 1, 1, "", "diff"], [761, 1, 1, "", "dot"], [762, 1, 1, "", "drop_nans"], [763, 1, 1, "", "drop_nulls"], [764, 3, 1, "", "dt"], [808, 3, 1, "", "dtype"], [809, 1, 1, "", "entropy"], [810, 1, 1, "", "estimated_size"], [811, 1, 1, "", "ewm_mean"], [812, 1, 1, "", "ewm_std"], [813, 1, 1, "", "ewm_var"], [814, 1, 1, "", "exp"], [815, 1, 1, "", "explode"], [816, 1, 1, "", "extend_constant"], [817, 1, 1, "", "fill_nan"], [818, 1, 1, "", "fill_null"], [819, 1, 1, "", "filter"], [820, 3, 1, "", "flags"], [821, 1, 1, "", "floor"], [822, 1, 1, "", "get_chunks"], [823, 1, 1, "", "has_validity"], [824, 1, 1, "", "hash"], [825, 1, 1, "", "head"], [826, 1, 1, "", "hist"], [827, 1, 1, "", "implode"], [828, 3, 1, "", "inner_dtype"], [829, 1, 1, "", "interpolate"], [830, 1, 1, "", "is_between"], [831, 1, 1, "", "is_boolean"], [832, 1, 1, "", "is_duplicated"], [833, 1, 1, "", "is_empty"], [834, 1, 1, "", "is_finite"], [835, 1, 1, "", "is_first"], [836, 1, 1, "", "is_float"], [837, 1, 1, "", "is_in"], [838, 1, 1, "", "is_infinite"], [839, 1, 1, "", "is_integer"], [840, 1, 1, "", "is_nan"], [841, 1, 1, "", "is_not_nan"], [842, 1, 1, "", "is_not_null"], [843, 1, 1, "", "is_null"], [844, 1, 1, "", "is_numeric"], [845, 1, 1, "", "is_sorted"], [846, 1, 1, "", "is_temporal"], [847, 1, 1, "", "is_unique"], [848, 1, 1, "", "is_utf8"], [849, 1, 1, "", "item"], [850, 1, 1, "", "kurtosis"], [851, 1, 1, "", "len"], [852, 1, 1, "", "limit"], [853, 1, 1, "", "log"], [854, 1, 1, "", "log10"], [855, 1, 1, "", "log1p"], [856, 1, 1, "", "lower_bound"], [857, 1, 1, "", "map_dict"], [858, 1, 1, "", "max"], [859, 1, 1, "", "mean"], [860, 1, 1, "", "median"], [861, 1, 1, "", "min"], [862, 1, 1, "", "mode"], [863, 1, 1, "", "n_chunks"], [864, 1, 1, "", "n_unique"], [865, 3, 1, "", "name"], [866, 1, 1, "", "nan_max"], [867, 1, 1, "", "nan_min"], [868, 1, 1, "", "new_from_index"], [869, 1, 1, "", "null_count"], [870, 1, 1, "", "pct_change"], [871, 1, 1, "", "peak_max"], [872, 1, 1, "", "peak_min"], [873, 1, 1, "", "product"], [874, 1, 1, "", "qcut"], [875, 1, 1, "", "quantile"], [876, 1, 1, "", "rank"], [877, 1, 1, "", "rechunk"], [878, 1, 1, "", "reinterpret"], [879, 1, 1, "", "rename"], [880, 1, 1, "", "reshape"], [881, 1, 1, "", "reverse"], [882, 1, 1, "", "rolling_apply"], [883, 1, 1, "", "rolling_max"], [884, 1, 1, "", "rolling_mean"], [885, 1, 1, "", "rolling_median"], [886, 1, 1, "", "rolling_min"], [887, 1, 1, "", "rolling_quantile"], [888, 1, 1, "", "rolling_skew"], [889, 1, 1, "", "rolling_std"], [890, 1, 1, "", "rolling_sum"], [891, 1, 1, "", "rolling_var"], [892, 1, 1, "", "round"], [893, 1, 1, "", "sample"], [894, 1, 1, "", "search_sorted"], [895, 1, 1, "", "series_equal"], [896, 1, 1, "", "set"], [897, 1, 1, "", "set_at_idx"], [898, 1, 1, "", "set_sorted"], [899, 3, 1, "", "shape"], [900, 1, 1, "", "shift"], [901, 1, 1, "", "shift_and_fill"], [902, 1, 1, "", "shrink_dtype"], [903, 1, 1, "", "shrink_to_fit"], [904, 1, 1, "", "shuffle"], [905, 1, 1, "", "sign"], [906, 1, 1, "", "sin"], [907, 1, 1, "", "sinh"], [908, 1, 1, "", "skew"], [909, 1, 1, "", "slice"], [910, 1, 1, "", "sort"], [911, 1, 1, "", "sqrt"], [912, 1, 1, "", "std"], [913, 3, 1, "", "str"], [952, 1, 1, "", "sum"], [953, 1, 1, "", "tail"], [954, 1, 1, "", "take"], [955, 1, 1, "", "take_every"], [956, 1, 1, "", "tan"], [957, 1, 1, "", "tanh"], [958, 3, 1, "", "time_unit"], [959, 1, 1, "", "to_arrow"], [960, 1, 1, "", "to_dummies"], [961, 1, 1, "", "to_frame"], [962, 1, 1, "", "to_init_repr"], [963, 1, 1, "", "to_list"], [964, 1, 1, "", "to_numpy"], [965, 1, 1, "", "to_pandas"], [966, 1, 1, "", "to_physical"], [967, 1, 1, "", "top_k"], [968, 1, 1, "", "unique"], [969, 1, 1, "", "unique_counts"], [970, 1, 1, "", "upper_bound"], [971, 1, 1, "", "value_counts"], [972, 1, 1, "", "var"], [973, 1, 1, "", "view"], [974, 1, 1, "", "zip_with"]], "polars.Series.arr": [[709, 1, 1, "", "arg_max"], [710, 1, 1, "", "arg_min"], [711, 1, 1, "", "concat"], [712, 1, 1, "", "contains"], [713, 1, 1, "", "count_match"], [714, 1, 1, "", "diff"], [715, 1, 1, "", "eval"], [716, 1, 1, "", "explode"], [717, 1, 1, "", "first"], [718, 1, 1, "", "get"], [719, 1, 1, "", "head"], [720, 1, 1, "", "join"], [721, 1, 1, "", "last"], [722, 1, 1, "", "lengths"], [723, 1, 1, "", "max"], [724, 1, 1, "", "mean"], [725, 1, 1, "", "min"], [726, 1, 1, "", "reverse"], [727, 1, 1, "", "shift"], [728, 1, 1, "", "slice"], [729, 1, 1, "", "sort"], [730, 1, 1, "", "sum"], [731, 1, 1, "", "tail"], [732, 1, 1, "", "take"], [733, 1, 1, "", "to_struct"], [734, 1, 1, "", "unique"]], "polars.Series.bin": [[735, 1, 1, "", "contains"], [736, 1, 1, "", "decode"], [737, 1, 1, "", "encode"], [738, 1, 1, "", "ends_with"], [739, 1, 1, "", "starts_with"]], "polars.Series.cat": [[743, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[765, 1, 1, "", "cast_time_unit"], [766, 1, 1, "", "combine"], [767, 1, 1, "", "convert_time_zone"], [768, 1, 1, "", "date"], [769, 1, 1, "", "datetime"], [770, 1, 1, "", "day"], [771, 1, 1, "", "days"], [772, 1, 1, "", "epoch"], [773, 1, 1, "", "hour"], [774, 1, 1, "", "hours"], [775, 1, 1, "", "is_leap_year"], [776, 1, 1, "", "iso_year"], [777, 1, 1, "", "max"], [778, 1, 1, "", "mean"], [779, 1, 1, "", "median"], [780, 1, 1, "", "microsecond"], [781, 1, 1, "", "microseconds"], [782, 1, 1, "", "millisecond"], [783, 1, 1, "", "milliseconds"], [784, 1, 1, "", "min"], [785, 1, 1, "", "minute"], [786, 1, 1, "", "minutes"], [787, 1, 1, "", "month"], [788, 1, 1, "", "month_end"], [789, 1, 1, "", "month_start"], [790, 1, 1, "", "nanosecond"], [791, 1, 1, "", "nanoseconds"], [792, 1, 1, "", "offset_by"], [793, 1, 1, "", "ordinal_day"], [794, 1, 1, "", "quarter"], [795, 1, 1, "", "replace_time_zone"], [796, 1, 1, "", "round"], [797, 1, 1, "", "second"], [798, 1, 1, "", "seconds"], [799, 1, 1, "", "strftime"], [800, 1, 1, "", "time"], [801, 1, 1, "", "timestamp"], [802, 1, 1, "", "to_string"], [803, 1, 1, "", "truncate"], [804, 1, 1, "", "week"], [805, 1, 1, "", "weekday"], [806, 1, 1, "", "with_time_unit"], [807, 1, 1, "", "year"]], "polars.Series.str": [[914, 1, 1, "", "concat"], [915, 1, 1, "", "contains"], [916, 1, 1, "", "count_match"], [917, 1, 1, "", "decode"], [918, 1, 1, "", "encode"], [919, 1, 1, "", "ends_with"], [920, 1, 1, "", "explode"], [921, 1, 1, "", "extract"], [922, 1, 1, "", "extract_all"], [923, 1, 1, "", "json_extract"], [924, 1, 1, "", "json_path_match"], [925, 1, 1, "", "lengths"], [926, 1, 1, "", "ljust"], [927, 1, 1, "", "lstrip"], [928, 1, 1, "", "n_chars"], [929, 1, 1, "", "parse_int"], [930, 1, 1, "", "replace"], [931, 1, 1, "", "replace_all"], [932, 1, 1, "", "rjust"], [933, 1, 1, "", "rstrip"], [934, 1, 1, "", "slice"], [935, 1, 1, "", "split"], [936, 1, 1, "", "split_exact"], [937, 1, 1, "", "splitn"], [938, 1, 1, "", "starts_with"], [939, 1, 1, "", "strip"], [940, 1, 1, "", "strptime"], [941, 1, 1, "", "to_date"], [942, 1, 1, "", "to_datetime"], [943, 1, 1, "", "to_lowercase"], [944, 1, 1, "", "to_time"], [945, 1, 1, "", "to_uppercase"], [946, 1, 1, "", "zfill"]], "polars.Series.struct": [[947, 1, 1, "", "field"], [948, 3, 1, "", "fields"], [949, 1, 1, "", "rename_fields"], [950, 3, 1, "", "schema"], [951, 1, 1, "", "unnest"]], "polars.StringCache": [[52, 1, 1, "", "__init__"]], "polars.Struct": [[53, 1, 1, "", "__init__"]], "polars.Time": [[54, 1, 1, "", "__init__"]], "polars.UInt16": [[55, 1, 1, "", "__init__"]], "polars.UInt32": [[56, 1, 1, "", "__init__"]], "polars.UInt64": [[57, 1, 1, "", "__init__"]], "polars.UInt8": [[58, 1, 1, "", "__init__"]], "polars.Unknown": [[59, 1, 1, "", "__init__"]], "polars.Utf8": [[60, 1, 1, "", "__init__"]], "polars.api": [[62, 4, 1, "", "register_dataframe_namespace"], [63, 4, 1, "", "register_expr_namespace"], [64, 4, 1, "", "register_lazyframe_namespace"], [65, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[230, 1, 1, "", "__iter__"], [231, 1, 1, "", "agg"], [232, 1, 1, "", "all"], [233, 1, 1, "", "apply"], [234, 1, 1, "", "count"], [235, 1, 1, "", "first"], [236, 1, 1, "", "head"], [237, 1, 1, "", "last"], [238, 1, 1, "", "max"], [239, 1, 1, "", "mean"], [240, 1, 1, "", "median"], [241, 1, 1, "", "min"], [242, 1, 1, "", "n_unique"], [243, 1, 1, "", "quantile"], [244, 1, 1, "", "sum"], [245, 1, 1, "", "tail"]], "polars.exceptions": [[73, 5, 1, "", "ArrowError"], [74, 5, 1, "", "ColumnNotFoundError"], [75, 5, 1, "", "ComputeError"], [76, 5, 1, "", "DuplicateError"], [77, 5, 1, "", "InvalidOperationError"], [78, 5, 1, "", "NoDataError"], [79, 5, 1, "", "NoRowsReturnedError"], [80, 5, 1, "", "PolarsPanicError"], [81, 5, 1, "", "RowsError"], [82, 5, 1, "", "SchemaError"], [83, 5, 1, "", "SchemaFieldNotFoundError"], [84, 5, 1, "", "ShapeError"], [85, 5, 1, "", "StructFieldNotFoundError"], [86, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[97, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[669, 1, 1, "", "agg"], [670, 1, 1, "", "all"], [671, 1, 1, "", "apply"], [672, 1, 1, "", "count"], [673, 1, 1, "", "first"], [674, 1, 1, "", "head"], [675, 1, 1, "", "last"], [676, 1, 1, "", "max"], [677, 1, 1, "", "mean"], [678, 1, 1, "", "median"], [679, 1, 1, "", "min"], [680, 1, 1, "", "n_unique"], [681, 1, 1, "", "quantile"], [682, 1, 1, "", "sum"], [683, 1, 1, "", "tail"]], "polars.testing": [[118, 4, 1, "", "assert_frame_equal"], [119, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[120, 0, 1, "", "column"], [121, 4, 1, "", "columns"], [122, 4, 1, "", "create_list_strategy"], [123, 4, 1, "", "dataframes"], [124, 4, 1, "", "load_profile"], [125, 4, 1, "", "series"], [126, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[120, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 145], "api": [1, 62, 63, 64, 65, 601], "provid": 1, "new": 1, "function": [1, 589, 600], "avail": 1, "registr": 1, "exampl": [1, 990], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 990], "binari": [2, 584, 595, 976], "boolean": [3, 585, 977], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 129], "activate_decim": 5, "load": [6, 129], "restore_default": 7, "save": [8, 129], "set_ascii_t": 9, "set_fmt_float": 10, "set_fmt_str_length": 11, "set_streaming_chunk_s": 12, "set_tbl_cell_align": 13, "set_tbl_col": 14, "set_tbl_column_data_type_inlin": 15, "set_tbl_dataframe_shape_below": 16, "set_tbl_format": 17, "set_tbl_hide_column_data_typ": 18, "set_tbl_hide_column_nam": 19, "set_tbl_hide_dataframe_shap": 20, "set_tbl_hide_dtype_separ": 21, "set_tbl_row": 22, "set_tbl_width_char": 23, "set_verbos": 24, "state": [25, 129], "datafram": [26, 27, 28, 29, 30, 31, 32, 33, 123, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251], "write_avro": 26, "write_csv": 27, "write_databas": 28, "write_excel": 29, "write_ipc": 30, "write_json": [31, 668], "write_ndjson": 32, "write_parquet": 33, "datatyp": 34, "date": [35, 334, 551, 768], "datetim": [36, 335, 552, 769], "decim": 37, "durat": [38, 553], "float32": 39, "float64": 40, "int16": 41, "int32": 42, "int64": 43, "int8": 44, "list": [45, 562, 591, 983], "null": 46, "object": 47, "sqlcontext": [48, 49, 50, 51], "execut": 48, "queri": 49, "regist": 50, "register_mani": 51, "stringcach": [52, 600], "struct": [53, 514, 515, 579, 597, 947, 948, 949, 950, 951, 987], "time": [54, 362, 800], "uint16": 55, "uint32": 56, "uint64": 57, "uint8": 58, "unknown": 59, "utf8": 60, "align_fram": 61, "register_dataframe_namespac": 62, "register_expr_namespac": 63, "register_lazyframe_namespac": 64, "register_series_namespac": 65, "arg_wher": 66, "build_info": 67, "collect_al": 68, "concat": [69, 280, 481, 711, 914], "cut": [70, 758], "date_rang": 71, "enable_string_cach": 72, "except": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 255], "arrowerror": 73, "columnnotfounderror": 74, "computeerror": 75, "duplicateerror": 76, "invalidoperationerror": 77, "nodataerror": 78, "norowsreturnederror": 79, "polarspanicerror": 80, "rowserror": 81, "schemaerror": 82, "schemafieldnotfounderror": 83, "shapeerror": 84, "structfieldnotfounderror": 85, "toomanyrowsreturnederror": 86, "from_arrow": 87, "from_datafram": 88, "from_dict": [89, 90], "from_numpi": 91, "from_panda": 92, "from_record": 93, "from_repr": 94, "get_dummi": 95, "get_index_typ": 96, "io": 97, "csv": [97, 602], "batched_read": 97, "batchedcsvread": [97, 602], "next_batch": 97, "ones": 98, "read_avro": 99, "read_csv": 100, "read_csv_batch": 101, "read_databas": 102, "read_delta": 103, "read_excel": 104, "read_ipc": 105, "read_ipc_schema": 106, "read_json": [107, 642], "read_ndjson": 108, "read_parquet": 109, "read_parquet_schema": 110, "scan_csv": 111, "scan_delta": 112, "scan_ipc": 113, "scan_ndjson": 114, "scan_parquet": 115, "scan_pyarrow_dataset": 116, "show_vers": 117, "test": [118, 119, 120, 121, 122, 123, 124, 125, 126, 990], "assert_frame_equ": 118, "assert_series_equ": 119, "parametr": [120, 121, 122, 123, 124, 125, 126, 990], "column": [120, 121, 136, 587, 609], "create_list_strategi": 122, "load_profil": 124, "seri": [125, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 982], "set_profil": 126, "threadpool_s": 127, "zero": 128, "option": 129, "current": 129, "us": 129, "context": 129, "manag": 129, "aggreg": [130, 256, 603, 690], "__dataframe__": 131, "appli": [132, 233, 265, 536, 671, 696], "bottom_k": [133, 310, 604, 740], "clear": [134, 606, 746], "clone": [135, 607, 750], "corr": [137, 545], "describ": [138, 759], "drop": [139, 610], "drop_in_plac": 140, "drop_nul": [141, 330, 611, 763], "dtype": [142, 612, 808], "estimated_s": [143, 810], "explod": [144, 285, 377, 487, 614, 716, 815, 920], "fill_nan": [146, 379, 616, 817], "fill_nul": [147, 380, 617, 818], "filter": [148, 381, 618, 819], "find_idx_by_nam": 149, "fold": [150, 557], "frame_equ": 151, "get_column": [152, 153], "glimps": 154, "groupbi": [155, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 250, 621, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686], "groupby_dynam": [156, 622], "groupby_rol": [157, 623], "hash_row": 158, "head": [159, 236, 288, 390, 561, 624, 674, 719, 825], "height": 160, "hstack": 161, "insert_at_idx": 162, "interpol": [163, 393, 626, 829], "is_dupl": [164, 395, 832], "is_empti": [165, 833], "is_uniqu": [166, 405, 847], "item": [167, 849], "iter_row": 168, "iter_slic": 169, "join": [170, 289, 627, 720], "join_asof": [171, 628], "lazi": [172, 600, 630], "limit": [173, 411, 631, 852], "max": [174, 238, 292, 420, 565, 633, 676, 723, 777, 858], "mean": [175, 239, 293, 421, 566, 634, 677, 724, 778, 859], "median": [176, 240, 422, 567, 635, 678, 779, 860], "melt": [177, 636], "merge_sort": [178, 637], "min": [179, 241, 294, 431, 568, 638, 679, 725, 784, 861], "n_chunk": [180, 863], "n_uniqu": [181, 242, 435, 569, 680, 864], "null_count": [182, 439, 869], "partition_bi": 183, "pipe": [184, 443, 639], "pivot": 185, "product": [186, 446, 873], "quantil": [187, 243, 447, 571, 641, 681, 875], "rechunk": [188, 449, 877], "renam": [189, 643, 879], "replac": [190, 497, 930], "replace_at_idx": 191, "revers": [192, 295, 453, 644, 726, 881], "row": [193, 194], "sampl": [195, 465, 893], "schema": [196, 645, 950], "select": [197, 253, 576, 594, 646, 689, 985], "set_sort": [198, 467, 647, 898], "shape": [199, 899], "shift": [200, 296, 468, 648, 727, 900], "shift_and_fil": [201, 469, 649, 901], "shrink_to_fit": [202, 903], "slice": [203, 297, 476, 501, 653, 728, 909, 934], "sort": [204, 298, 477, 654, 729, 910], "std": [205, 480, 578, 655, 912], "sum": [206, 244, 299, 518, 580, 656, 682, 730, 952], "tail": [207, 245, 300, 519, 581, 657, 683, 731, 953], "take_everi": [208, 521, 658, 955], "to_arrow": [209, 959], "to_dict": [210, 211], "to_dummi": [212, 960], "to_init_repr": [213, 962], "to_numpi": [214, 964], "to_panda": [215, 965], "to_seri": 216, "to_struct": [217, 302, 733], "top_k": [218, 525, 659, 967], "transpos": 219, "uniqu": [220, 303, 527, 660, 734, 968], "unnest": [221, 661, 951], "unstack": 222, "updat": [223, 662], "upsampl": 224, "var": [225, 531, 582, 663, 972], "vstack": 226, "width": [227, 664], "with_column": [228, 665], "with_row_count": [229, 667], "__iter__": 230, "agg": [231, 669], "all": [232, 261, 534, 670, 693], "count": [234, 320, 546, 672], "first": [235, 286, 382, 556, 619, 673, 717], "last": [237, 290, 408, 629, 675, 721], "attribut": [246, 684, 975], "comput": [247, 588, 979], "descript": [248, 685, 980], "export": [249, 981], "miscellan": [252, 593, 600, 688, 984], "manipul": [253, 594, 689, 985], "data": 254, "type": 254, "numer": [254, 595], "tempor": [254, 598, 988], "nest": 254, "other": 254, "expr": [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533], "ab": [257, 691], "add": 258, "agg_group": 259, "alia": [260, 692], "and_": 262, "ani": [263, 535, 694], "append": [264, 695], "approx_uniqu": [266, 537], "arcco": [267, 697], "arccosh": [268, 698], "arcsin": [269, 699], "arcsinh": [270, 700], "arctan": [271, 701], "arctanh": [272, 702], "arg_max": [273, 278, 703, 709], "arg_min": [274, 279, 704, 710], "arg_sort": [275, 705], "arg_tru": [276, 706], "arg_uniqu": [277, 707], "arr": [278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734], "contain": [281, 305, 482, 712, 735, 915], "count_match": [282, 483, 713, 916], "diff": [283, 327, 714, 760], "eval": [284, 715], "get": [287, 718], "length": [291, 492, 722, 925], "take": [301, 520, 732, 954], "backward_fil": 304, "bin": [305, 306, 307, 308, 309, 735, 736, 737, 738, 739], "decod": [306, 484, 736, 917], "encod": [307, 485, 737, 918], "ends_with": [308, 486, 738, 919], "starts_with": [309, 505, 739, 938], "cach": [311, 605], "cast": [312, 741], "cat": [313, 742, 743], "set_ord": [313, 743], "ceil": [314, 744], "clip": [315, 747], "clip_max": [316, 748], "clip_min": [317, 749], "co": [318, 751], "cosh": [319, 752], "cumcount": 321, "cummax": [322, 753], "cummin": [323, 754], "cumprod": [324, 755], "cumsum": [325, 550, 756], "cumulative_ev": [326, 757], "dot": [328, 761], "drop_nan": [329, 762], "dt": [331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807], "cast_time_unit": [331, 765], "combin": [332, 766], "convert_time_zon": [333, 767], "dai": [336, 337, 770, 771], "epoch": [338, 772], "hour": [339, 340, 773, 774], "is_leap_year": [341, 775], "iso_year": [342, 776], "microsecond": [343, 344, 780, 781], "millisecond": [345, 346, 782, 783], "minut": [347, 348, 785, 786], "month": [349, 787], "month_end": [350, 788], "month_start": [351, 789], "nanosecond": [352, 353, 790, 791], "offset_bi": [354, 792], "ordinal_dai": [355, 793], "quarter": [356, 794], "replace_time_zon": [357, 795], "round": [358, 464, 796, 892], "second": [359, 360, 797, 798], "strftime": [361, 799], "timestamp": [363, 801], "to_str": [364, 802], "truncat": [365, 803], "week": [366, 804], "weekdai": [367, 805], "with_time_unit": [368, 806], "year": [369, 807], "entropi": [370, 809], "eq": [371, 423], "ewm_mean": [372, 811], "ewm_std": [373, 812], "ewm_var": [374, 813], "exclud": [375, 555], "exp": [376, 814], "extend_const": [378, 816], "flatten": 383, "floor": [384, 821], "floordiv": 385, "forward_fil": 386, "ge": 387, "gt": 388, "hash": [389, 824], "implod": [391, 827], "inspect": [392, 625], "is_between": [394, 830], "is_finit": [396, 834], "is_first": [397, 835], "is_in": [398, 837], "is_infinit": [399, 838], "is_nan": [400, 840], "is_not": 401, "is_not_nan": [402, 841], "is_not_nul": [403, 842], "is_nul": [404, 843], "keep_nam": 406, "kurtosi": [407, 850], "le": 409, "len": [410, 851], "log": [412, 853], "log10": [413, 854], "log1p": [414, 855], "lower_bound": [415, 856], "lt": 416, "map": [417, 564, 632], "map_alia": 418, "map_dict": [419, 857], "meta": [423, 424, 425, 426, 427, 428, 429, 430, 592], "has_multiple_output": 424, "is_regex_project": 425, "ne": [426, 438], "output_nam": 427, "pop": 428, "root_nam": 429, "undo_alias": 430, "mod": 432, "mode": [433, 862], "mul": 434, "nan_max": [436, 866], "nan_min": [437, 867], "or_": 440, "over": 441, "pct_chang": [442, 870], "pow": 444, "prefix": 445, "rank": [448, 876], "reinterpret": [450, 878], "repeat_bi": 451, "reshap": [452, 880], "rolling_appli": [454, 882], "rolling_max": [455, 883], "rolling_mean": [456, 884], "rolling_median": [457, 885], "rolling_min": [458, 886], "rolling_quantil": [459, 887], "rolling_skew": [460, 888], "rolling_std": [461, 889], "rolling_sum": [462, 890], "rolling_var": [463, 891], "search_sort": [466, 894], "shrink_dtyp": [470, 902], "shuffl": [471, 904], "sign": [472, 905], "sin": [473, 906], "sinh": [474, 907], "skew": [475, 908], "sort_bi": 478, "sqrt": [479, 911], "str": [481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946], "extract": [488, 921], "extract_al": [489, 922], "json_extract": [490, 923], "json_path_match": [491, 924], "ljust": [493, 926], "lstrip": [494, 927], "n_char": [495, 928], "parse_int": [496, 929], "replace_al": [498, 931], "rjust": [499, 932], "rstrip": [500, 933], "split": [502, 935], "split_exact": [503, 936], "splitn": [504, 937], "strip": [506, 939], "strptime": [507, 940], "to_dat": [508, 941], "to_datetim": [509, 942], "to_lowercas": [510, 943], "to_tim": [511, 944], "to_uppercas": [512, 945], "zfill": [513, 946], "field": [514, 947, 948], "rename_field": [515, 949], "sub": 516, "suffix": 517, "tan": [522, 956], "tanh": [523, 957], "to_phys": [524, 966], "truediv": 526, "unique_count": [528, 969], "upper_bound": [529, 970], "value_count": [530, 971], "where": 532, "xor": 533, "arang": 538, "arg_sort_bi": 539, "avg": 540, "coalesc": 541, "col": 542, "concat_list": 543, "concat_str": 544, "cov": 547, "cumfold": 548, "cumreduc": 549, "element": 554, "format": 558, "from_epoch": 559, "group": 560, "lit": 563, "pearson_corr": 570, "reduc": 572, "repeat": 573, "rolling_corr": 574, "rolling_cov": 575, "spearman_rank_corr": 577, "when": 583, "categori": [586, 978], "name": [587, 865], "express": 590, "oper": 595, "conjunct": 595, "comparison": 595, "string": [596, 986], "window": 599, "convers": 600, "eager": 600, "parallel": 600, "refer": 601, "input": 602, "output": 602, "feather": 602, "ipc": 602, "parquet": 602, "databas": 602, "json": 602, "avro": 602, "excel": 602, "delta": 602, "lake": 602, "dataset": 602, "lazyfram": [604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687], "collect": 608, "explain": 613, "fetch": 615, "from_json": 620, "profil": [640, 990], "show_graph": 650, "sink_ipc": 651, "sink_parquet": 652, "with_context": 666, "lazygroupbi": [669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683], "read": 688, "write": 688, "logic": 688, "plan": 688, "chunk_length": 745, "flag": 820, "get_chunk": 822, "has_valid": 823, "hist": 826, "inner_dtyp": 828, "is_boolean": 831, "is_float": 836, "is_integ": 839, "is_numer": 844, "is_sort": 845, "is_tempor": 846, "is_utf8": 848, "new_from_index": 868, "peak_max": 871, "peak_min": 872, "qcut": 874, "series_equ": 895, "set": 896, "set_at_idx": 897, "time_unit": 958, "to_fram": 961, "to_list": 963, "view": 973, "zip_with": 974, "sql": 989, "method": 989, "assert": 990, "primit": 990, "strategi": 990, "helper": 990, "util": 991}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.exceptions.ComputeError": [[75, "polars-exceptions-computeerror"]], "polars.exceptions.PolarsPanicError": [[80, "polars-exceptions-polarspanicerror"]], "polars.exceptions.RowsError": [[81, "polars-exceptions-rowserror"]], "polars.read_database": [[102, "polars-read-database"]], "polars.show_versions": [[117, "polars-show-versions"]], "polars.DataFrame.bottom_k": [[133, "polars-dataframe-bottom-k"]], "polars.DataFrame.apply": [[132, "polars-dataframe-apply"]], "polars.threadpool_size": [[127, "polars-threadpool-size"]], "polars.exceptions.ColumnNotFoundError": [[74, "polars-exceptions-columnnotfounderror"]], "polars.get_dummies": [[95, "polars-get-dummies"]], "polars.read_parquet": [[109, "polars-read-parquet"]], "polars.read_csv_batched": [[101, "polars-read-csv-batched"]], "polars.enable_string_cache": [[72, "polars-enable-string-cache"]], "polars.DataFrame.describe": [[138, "polars-dataframe-describe"]], "polars.scan_csv": [[111, "polars-scan-csv"]], "polars.DataFrame.columns": [[136, "polars-dataframe-columns"]], "polars.DataFrame.corr": [[137, "polars-dataframe-corr"]], "polars.from_arrow": [[87, "polars-from-arrow"]], "polars.exceptions.InvalidOperationError": [[77, "polars-exceptions-invalidoperationerror"]], "polars.read_csv": [[100, "polars-read-csv"]], "polars.testing.assert_frame_equal": [[118, "polars-testing-assert-frame-equal"]], "polars.zeros": [[128, "polars-zeros"]], "polars.from_dicts": [[90, "polars-from-dicts"]], "polars.testing.parametric.create_list_strategy": [[122, "polars-testing-parametric-create-list-strategy"]], "polars.exceptions.SchemaError": [[82, "polars-exceptions-schemaerror"]], "polars.read_excel": [[104, "polars-read-excel"]], "polars.from_dataframe": [[88, "polars-from-dataframe"]], "polars.testing.parametric.columns": [[121, "polars-testing-parametric-columns"]], "polars.read_json": [[107, "polars-read-json"]], "polars.date_range": [[71, "polars-date-range"]], "Aggregation": [[130, "aggregation"], [690, "aggregation"], [603, "aggregation"], [256, "aggregation"]], "polars.DataFrame.drop": [[139, "polars-dataframe-drop"]], "polars.ones": [[98, "polars-ones"]], "polars.read_ndjson": [[108, "polars-read-ndjson"]], "polars.read_parquet_schema": [[110, "polars-read-parquet-schema"]], "polars.scan_ipc": [[113, "polars-scan-ipc"]], "polars.testing.assert_series_equal": [[119, "polars-testing-assert-series-equal"]], "polars.exceptions.DuplicateError": [[76, "polars-exceptions-duplicateerror"]], "polars.scan_delta": [[112, "polars-scan-delta"]], "polars.testing.parametric.series": [[125, "polars-testing-parametric-series"]], "polars.from_pandas": [[92, "polars-from-pandas"]], "polars.testing.parametric.set_profile": [[126, "polars-testing-parametric-set-profile"]], "polars.from_dict": [[89, "polars-from-dict"]], "polars.DataFrame.clear": [[134, "polars-dataframe-clear"]], "polars.from_records": [[93, "polars-from-records"]], "polars.read_avro": [[99, "polars-read-avro"]], "polars.DataFrame.clone": [[135, "polars-dataframe-clone"]], "polars.exceptions.SchemaFieldNotFoundError": [[83, "polars-exceptions-schemafieldnotfounderror"]], "polars.cut": [[70, "polars-cut"]], "polars.testing.parametric.column": [[120, "polars-testing-parametric-column"]], "polars.from_numpy": [[91, "polars-from-numpy"]], "polars.exceptions.NoRowsReturnedError": [[79, "polars-exceptions-norowsreturnederror"]], "polars.get_index_type": [[96, "polars-get-index-type"]], "polars.scan_pyarrow_dataset": [[116, "polars-scan-pyarrow-dataset"]], "polars.scan_ndjson": [[114, "polars-scan-ndjson"]], "polars.exceptions.StructFieldNotFoundError": [[85, "polars-exceptions-structfieldnotfounderror"]], "polars.exceptions.NoDataError": [[78, "polars-exceptions-nodataerror"]], "polars.exceptions.ShapeError": [[84, "polars-exceptions-shapeerror"]], "polars.exceptions.TooManyRowsReturnedError": [[86, "polars-exceptions-toomanyrowsreturnederror"]], "polars.read_ipc": [[105, "polars-read-ipc"]], "polars.read_ipc_schema": [[106, "polars-read-ipc-schema"]], "polars.testing.parametric.load_profile": [[124, "polars-testing-parametric-load-profile"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[97, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "Config": [[129, "config"]], "Config options": [[129, "config-options"]], "Config load, save, and current state": [[129, "config-load-save-and-current-state"]], "Use as a context manager": [[129, "use-as-a-context-manager"]], "polars.exceptions.ArrowError": [[73, "polars-exceptions-arrowerror"]], "polars.read_delta": [[103, "polars-read-delta"]], "polars.scan_parquet": [[115, "polars-scan-parquet"]], "polars.testing.parametric.dataframes": [[123, "polars-testing-parametric-dataframes"]], "polars.from_repr": [[94, "polars-from-repr"]], "polars.DataFrame.__dataframe__": [[131, "polars-dataframe-dataframe"]], "polars.Int16": [[41, "polars-int16"]], "polars.DataFrame.write_ndjson": [[32, "polars-dataframe-write-ndjson"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.DataFrame.write_ipc": [[30, "polars-dataframe-write-ipc"]], "polars.Date": [[35, "polars-date"]], "polars.Config.set_tbl_hide_dataframe_shape": [[20, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.collect_all": [[68, "polars-collect-all"]], "polars.Config.set_streaming_chunk_size": [[12, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_tbl_hide_column_data_types": [[18, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_verbose": [[24, "polars-config-set-verbose"]], "polars.DataFrame.write_parquet": [[33, "polars-dataframe-write-parquet"]], "polars.Int32": [[42, "polars-int32"]], "polars.Config.state": [[25, "polars-config-state"]], "polars.Config.set_tbl_dataframe_shape_below": [[16, "polars-config-set-tbl-dataframe-shape-below"]], "polars.SQLContext.register": [[50, "polars-sqlcontext-register"]], "polars.Config.set_tbl_width_chars": [[23, "polars-config-set-tbl-width-chars"]], "polars.DataFrame.write_excel": [[29, "polars-dataframe-write-excel"]], "polars.Utf8": [[60, "polars-utf8"]], "polars.Float32": [[39, "polars-float32"]], "polars.Duration": [[38, "polars-duration"]], "polars.Config.set_tbl_hide_dtype_separator": [[21, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_cell_alignment": [[13, "polars-config-set-tbl-cell-alignment"]], "polars.Int8": [[44, "polars-int8"]], "polars.Config.set_fmt_float": [[10, "polars-config-set-fmt-float"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [990, "examples"]], "polars.DataFrame.write_json": [[31, "polars-dataframe-write-json"]], "polars.Config.set_ascii_tables": [[9, "polars-config-set-ascii-tables"]], "polars.UInt32": [[56, "polars-uint32"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Float64": [[40, "polars-float64"]], "polars.Unknown": [[59, "polars-unknown"]], "polars.Config.set_tbl_hide_column_names": [[19, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_column_data_type_inline": [[15, "polars-config-set-tbl-column-data-type-inline"]], "polars.build_info": [[67, "polars-build-info"]], "polars.Int64": [[43, "polars-int64"]], "polars.Time": [[54, "polars-time"]], "polars.UInt16": [[55, "polars-uint16"]], "polars.api.register_lazyframe_namespace": [[64, "polars-api-register-lazyframe-namespace"]], "polars.Binary": [[2, "polars-binary"]], "polars.DataFrame.write_avro": [[26, "polars-dataframe-write-avro"]], "polars.concat": [[69, "polars-concat"]], "polars.Config.activate_decimals": [[5, "polars-config-activate-decimals"]], "polars.Config.load": [[6, "polars-config-load"]], "polars.SQLContext.execute": [[48, "polars-sqlcontext-execute"]], "polars.DataType": [[34, "polars-datatype"]], "polars.align_frames": [[61, "polars-align-frames"]], "polars.arg_where": [[66, "polars-arg-where"]], "polars.api.register_dataframe_namespace": [[62, "polars-api-register-dataframe-namespace"]], "polars.Datetime": [[36, "polars-datetime"]], "polars.DataFrame.write_csv": [[27, "polars-dataframe-write-csv"]], "polars.Object": [[47, "polars-object"]], "polars.SQLContext.register_many": [[51, "polars-sqlcontext-register-many"]], "polars.api.register_series_namespace": [[65, "polars-api-register-series-namespace"]], "polars.StringCache": [[52, "polars-stringcache"]], "polars.SQLContext.query": [[49, "polars-sqlcontext-query"]], "polars.UInt8": [[58, "polars-uint8"]], "polars.UInt64": [[57, "polars-uint64"]], "polars.Config.set_fmt_str_lengths": [[11, "polars-config-set-fmt-str-lengths"]], "polars.api.register_expr_namespace": [[63, "polars-api-register-expr-namespace"]], "polars.Config.save": [[8, "polars-config-save"]], "polars.Config.set_tbl_formatting": [[17, "polars-config-set-tbl-formatting"]], "polars.Decimal": [[37, "polars-decimal"]], "polars.Config.restore_defaults": [[7, "polars-config-restore-defaults"]], "polars.Null": [[46, "polars-null"]], "polars.Config.set_tbl_cols": [[14, "polars-config-set-tbl-cols"]], "polars.Struct": [[53, "polars-struct"]], "polars.List": [[45, "polars-list"]], "polars.DataFrame.write_database": [[28, "polars-dataframe-write-database"]], "polars.Config.set_tbl_rows": [[22, "polars-config-set-tbl-rows"]], "polars.Series.top_k": [[967, "polars-series-top-k"]], "Computation": [[979, "computation"], [588, "computation"], [247, "computation"]], "polars.Series.struct.schema": [[950, "polars-series-struct-schema"]], "polars.Series.str.starts_with": [[938, "polars-series-str-starts-with"]], "polars.Series.str.ends_with": [[919, "polars-series-str-ends-with"]], "polars.Series.tanh": [[957, "polars-series-tanh"]], "polars.Series.struct.rename_fields": [[949, "polars-series-struct-rename-fields"]], "polars.Series.str.to_lowercase": [[943, "polars-series-str-to-lowercase"]], "polars.Series.struct.unnest": [[951, "polars-series-struct-unnest"]], "polars.Series.to_init_repr": [[962, "polars-series-to-init-repr"]], "polars.Series.to_physical": [[966, "polars-series-to-physical"]], "polars.Series.str.rstrip": [[933, "polars-series-str-rstrip"]], "Attributes": [[975, "attributes"], [684, "attributes"], [246, "attributes"]], "polars.Series.str.decode": [[917, "polars-series-str-decode"]], "polars.Series.str.json_path_match": [[924, "polars-series-str-json-path-match"]], "polars.Series.str.split": [[935, "polars-series-str-split"]], "polars.Series.sort": [[910, "polars-series-sort"]], "polars.Series.str.explode": [[920, "polars-series-str-explode"]], "polars.Series.str": [[913, "polars-series-str"]], "polars.Series.tail": [[953, "polars-series-tail"]], "polars.Series.struct.field": [[947, "polars-series-struct-field"]], "polars.Series.to_arrow": [[959, "polars-series-to-arrow"]], "polars.Series.unique": [[968, "polars-series-unique"]], "Binary": [[976, "binary"], [584, "binary"], [595, "binary"]], "Categories": [[978, "categories"], [586, "categories"]], "polars.Series.str.rjust": [[932, "polars-series-str-rjust"]], "polars.Series.str.parse_int": [[929, "polars-series-str-parse-int"]], "polars.Series.unique_counts": [[969, "polars-series-unique-counts"]], "polars.Series.str.replace": [[930, "polars-series-str-replace"]], "polars.Series.str.replace_all": [[931, "polars-series-str-replace-all"]], "polars.Series.time_unit": [[958, "polars-series-time-unit"]], "polars.Series.str.to_uppercase": [[945, "polars-series-str-to-uppercase"]], "polars.Series.struct.fields": [[948, "polars-series-struct-fields"]], "polars.Series.to_frame": [[961, "polars-series-to-frame"]], "polars.Series.value_counts": [[971, "polars-series-value-counts"]], "polars.Series.str.zfill": [[946, "polars-series-str-zfill"]], "polars.Series.str.json_extract": [[923, "polars-series-str-json-extract"]], "polars.Series.str.contains": [[915, "polars-series-str-contains"]], "polars.Series.str.encode": [[918, "polars-series-str-encode"]], "polars.Series.str.extract": [[921, "polars-series-str-extract"]], "polars.Series.str.slice": [[934, "polars-series-str-slice"]], "polars.Series.tan": [[956, "polars-series-tan"]], "polars.Series.str.strptime": [[940, "polars-series-str-strptime"]], "polars.Series.sum": [[952, "polars-series-sum"]], "polars.Series.take_every": [[955, "polars-series-take-every"]], "polars.Series.to_dummies": [[960, "polars-series-to-dummies"]], "polars.Series.str.ljust": [[926, "polars-series-str-ljust"]], "polars.Series.upper_bound": [[970, "polars-series-upper-bound"]], "Boolean": [[977, "boolean"], [585, "boolean"]], "polars.Series.to_pandas": [[965, "polars-series-to-pandas"]], "polars.Series.str.strip": [[939, "polars-series-str-strip"]], "polars.Series.str.n_chars": [[928, "polars-series-str-n-chars"]], "polars.Series.str.to_time": [[944, "polars-series-str-to-time"]], "polars.Series.std": [[912, "polars-series-std"]], "polars.Series.sqrt": [[911, "polars-series-sqrt"]], "polars.Series.str.count_match": [[916, "polars-series-str-count-match"]], "polars.Series.str.extract_all": [[922, "polars-series-str-extract-all"]], "polars.Series.str.to_date": [[941, "polars-series-str-to-date"]], "polars.Series.take": [[954, "polars-series-take"]], "polars.Series.to_list": [[963, "polars-series-to-list"]], "polars.Series.to_numpy": [[964, "polars-series-to-numpy"]], "polars.Series.view": [[973, "polars-series-view"]], "polars.Series.zip_with": [[974, "polars-series-zip-with"]], "polars.Series.str.to_datetime": [[942, "polars-series-str-to-datetime"]], "polars.Series.str.lstrip": [[927, "polars-series-str-lstrip"]], "polars.Series.str.split_exact": [[936, "polars-series-str-split-exact"]], "polars.Series.str.concat": [[914, "polars-series-str-concat"]], "polars.Series.var": [[972, "polars-series-var"]], "polars.Series.str.splitn": [[937, "polars-series-str-splitn"]], "polars.Series.str.lengths": [[925, "polars-series-str-lengths"]], "polars.Series.rechunk": [[877, "polars-series-rechunk"]], "polars.Series.set_sorted": [[898, "polars-series-set-sorted"]], "polars.Series.sign": [[905, "polars-series-sign"]], "polars.Series.reshape": [[880, "polars-series-reshape"]], "polars.Series.lower_bound": [[856, "polars-series-lower-bound"]], "polars.Series.series_equal": [[895, "polars-series-series-equal"]], "polars.Series.rolling_max": [[883, "polars-series-rolling-max"]], "polars.Series.peak_min": [[872, "polars-series-peak-min"]], "polars.Series.is_null": [[843, "polars-series-is-null"]], "polars.Series.pct_change": [[870, "polars-series-pct-change"]], "polars.Series.set": [[896, "polars-series-set"]], "polars.Series.set_at_idx": [[897, "polars-series-set-at-idx"]], "polars.Series.is_nan": [[840, "polars-series-is-nan"]], "polars.Series.rolling_median": [[885, "polars-series-rolling-median"]], "polars.Series.quantile": [[875, "polars-series-quantile"]], "polars.Series.reverse": [[881, "polars-series-reverse"]], "polars.Series.rolling_std": [[889, "polars-series-rolling-std"]], "polars.Series.search_sorted": [[894, "polars-series-search-sorted"]], "polars.Series.is_not_nan": [[841, "polars-series-is-not-nan"]], "polars.Series.new_from_index": [[868, "polars-series-new-from-index"]], "polars.Series.n_unique": [[864, "polars-series-n-unique"]], "polars.Series.shift": [[900, "polars-series-shift"]], "polars.Series.max": [[858, "polars-series-max"]], "polars.Series.kurtosis": [[850, "polars-series-kurtosis"]], "polars.Series.shrink_to_fit": [[903, "polars-series-shrink-to-fit"]], "polars.Series.map_dict": [[857, "polars-series-map-dict"]], "polars.Series.is_numeric": [[844, "polars-series-is-numeric"]], "polars.Series.rolling_quantile": [[887, "polars-series-rolling-quantile"]], "polars.Series.sin": [[906, "polars-series-sin"]], "polars.Series.shrink_dtype": [[902, "polars-series-shrink-dtype"]], "polars.Series.log": [[853, "polars-series-log"]], "polars.Series.is_utf8": [[848, "polars-series-is-utf8"]], "polars.Series.nan_max": [[866, "polars-series-nan-max"]], "polars.Series.is_temporal": [[846, "polars-series-is-temporal"]], "polars.Series.mode": [[862, "polars-series-mode"]], "polars.Series.n_chunks": [[863, "polars-series-n-chunks"]], "polars.Series.len": [[851, "polars-series-len"]], "polars.Series.slice": [[909, "polars-series-slice"]], "polars.Series.nan_min": [[867, "polars-series-nan-min"]], "polars.Series.rolling_skew": [[888, "polars-series-rolling-skew"]], "polars.Series.shift_and_fill": [[901, "polars-series-shift-and-fill"]], "polars.Series.product": [[873, "polars-series-product"]], "polars.Series.log10": [[854, "polars-series-log10"]], "polars.Series.rolling_mean": [[884, "polars-series-rolling-mean"]], "polars.Series.is_sorted": [[845, "polars-series-is-sorted"]], "polars.Series.rolling_apply": [[882, "polars-series-rolling-apply"]], "polars.Series.rename": [[879, "polars-series-rename"]], "polars.Series.is_not_null": [[842, "polars-series-is-not-null"]], "polars.Series.round": [[892, "polars-series-round"]], "polars.Series.peak_max": [[871, "polars-series-peak-max"]], "polars.Series.rank": [[876, "polars-series-rank"]], "polars.Series.skew": [[908, "polars-series-skew"]], "polars.Series.null_count": [[869, "polars-series-null-count"]], "polars.Series.rolling_sum": [[890, "polars-series-rolling-sum"]], "polars.Series.sample": [[893, "polars-series-sample"]], "polars.Series.name": [[865, "polars-series-name"]], "polars.Series.shape": [[899, "polars-series-shape"]], "polars.Series.limit": [[852, "polars-series-limit"]], "polars.Series.mean": [[859, "polars-series-mean"]], "polars.Series.sinh": [[907, "polars-series-sinh"]], "polars.Series.min": [[861, "polars-series-min"]], "polars.Series.is_unique": [[847, "polars-series-is-unique"]], "polars.Series.rolling_min": [[886, "polars-series-rolling-min"]], "polars.Series.rolling_var": [[891, "polars-series-rolling-var"]], "polars.Series.qcut": [[874, "polars-series-qcut"]], "polars.Series.reinterpret": [[878, "polars-series-reinterpret"]], "polars.Series.shuffle": [[904, "polars-series-shuffle"]], "polars.Series.item": [[849, "polars-series-item"]], "polars.Series.median": [[860, "polars-series-median"]], "polars.Series.log1p": [[855, "polars-series-log1p"]], "polars.Series.has_validity": [[823, "polars-series-has-validity"]], "polars.Series.extend_constant": [[816, "polars-series-extend-constant"]], "polars.Series.dt.nanoseconds": [[791, "polars-series-dt-nanoseconds"]], "polars.Series.dt.hours": [[774, "polars-series-dt-hours"]], "polars.Series.is_finite": [[834, "polars-series-is-finite"]], "polars.Series.filter": [[819, "polars-series-filter"]], "polars.Series.is_in": [[837, "polars-series-is-in"]], "polars.Series.entropy": [[809, "polars-series-entropy"]], "polars.Series.dt.epoch": [[772, "polars-series-dt-epoch"]], "polars.Series.dtype": [[808, "polars-series-dtype"]], "polars.Series.ewm_var": [[813, "polars-series-ewm-var"]], "polars.Series.implode": [[827, "polars-series-implode"]], "polars.Series.dt.month_start": [[789, "polars-series-dt-month-start"]], "polars.Series.inner_dtype": [[828, "polars-series-inner-dtype"]], "polars.Series.dt.weekday": [[805, "polars-series-dt-weekday"]], "polars.Series.interpolate": [[829, "polars-series-interpolate"]], "polars.Series.is_integer": [[839, "polars-series-is-integer"]], "polars.Series.is_between": [[830, "polars-series-is-between"]], "polars.Series.get_chunks": [[822, "polars-series-get-chunks"]], "polars.Series.dt.strftime": [[799, "polars-series-dt-strftime"]], "polars.Series.dt.minutes": [[786, "polars-series-dt-minutes"]], "polars.Series.is_boolean": [[831, "polars-series-is-boolean"]], "polars.Series.dt.min": [[784, "polars-series-dt-min"]], "polars.Series.dt.is_leap_year": [[775, "polars-series-dt-is-leap-year"]], "polars.Series.dt.milliseconds": [[783, "polars-series-dt-milliseconds"]], "polars.Series.dt.microsecond": [[780, "polars-series-dt-microsecond"]], "polars.Series.dt.days": [[771, "polars-series-dt-days"]], "polars.Series.dt.month_end": [[788, "polars-series-dt-month-end"]], "polars.Series.hist": [[826, "polars-series-hist"]], "polars.Series.is_duplicated": [[832, "polars-series-is-duplicated"]], "polars.Series.is_float": [[836, "polars-series-is-float"]], "polars.Series.is_empty": [[833, "polars-series-is-empty"]], "polars.Series.fill_nan": [[817, "polars-series-fill-nan"]], "polars.Series.is_infinite": [[838, "polars-series-is-infinite"]], "polars.Series.dt.timestamp": [[801, "polars-series-dt-timestamp"]], "polars.Series.dt.with_time_unit": [[806, "polars-series-dt-with-time-unit"]], "polars.Series.dt.nanosecond": [[790, "polars-series-dt-nanosecond"]], "polars.Series.dt.iso_year": [[776, "polars-series-dt-iso-year"]], "polars.Series.dt.truncate": [[803, "polars-series-dt-truncate"]], "polars.Series.dt.day": [[770, "polars-series-dt-day"]], "polars.Series.exp": [[814, "polars-series-exp"]], "polars.Series.dt.millisecond": [[782, "polars-series-dt-millisecond"]], "polars.Series.head": [[825, "polars-series-head"]], "polars.Series.dt.offset_by": [[792, "polars-series-dt-offset-by"]], "polars.Series.dt.week": [[804, "polars-series-dt-week"]], "polars.Series.flags": [[820, "polars-series-flags"]], "polars.Series.dt.median": [[779, "polars-series-dt-median"]], "polars.Series.dt.second": [[797, "polars-series-dt-second"]], "polars.Series.ewm_std": [[812, "polars-series-ewm-std"]], "polars.Series.hash": [[824, "polars-series-hash"]], "polars.Series.dt.year": [[807, "polars-series-dt-year"]], "polars.Series.estimated_size": [[810, "polars-series-estimated-size"]], "polars.Series.fill_null": [[818, "polars-series-fill-null"]], "polars.Series.dt.microseconds": [[781, "polars-series-dt-microseconds"]], "polars.Series.dt.to_string": [[802, "polars-series-dt-to-string"]], "polars.Series.dt.hour": [[773, "polars-series-dt-hour"]], "polars.Series.dt.quarter": [[794, "polars-series-dt-quarter"]], "polars.Series.dt.seconds": [[798, "polars-series-dt-seconds"]], "polars.Series.dt.round": [[796, "polars-series-dt-round"]], "polars.Series.dt.replace_time_zone": [[795, "polars-series-dt-replace-time-zone"]], "polars.Series.is_first": [[835, "polars-series-is-first"]], "polars.Series.dt.minute": [[785, "polars-series-dt-minute"]], "polars.Series.dt.month": [[787, "polars-series-dt-month"]], "polars.Series.dt.ordinal_day": [[793, "polars-series-dt-ordinal-day"]], "polars.Series.dt.mean": [[778, "polars-series-dt-mean"]], "polars.Series.floor": [[821, "polars-series-floor"]], "polars.Series.dt.max": [[777, "polars-series-dt-max"]], "polars.Series.dt.time": [[800, "polars-series-dt-time"]], "polars.Series.ewm_mean": [[811, "polars-series-ewm-mean"]], "polars.Series.explode": [[815, "polars-series-explode"]], "Temporal": [[988, "temporal"], [598, "temporal"], [254, "temporal"]], "Descriptive": [[980, "descriptive"], [685, "descriptive"], [248, "descriptive"]], "Testing": [[990, "testing"]], "Asserts": [[990, "asserts"]], "Parametric testing": [[990, "parametric-testing"]], "Polars primitives": [[990, "polars-primitives"]], "Strategy helpers": [[990, "strategy-helpers"]], "Profiles": [[990, "profiles"]], "Export": [[981, "export"], [249, "export"]], "Series": [[982, "series"]], "List": [[983, "list"], [591, "list"]], "Manipulation/selection": [[985, "manipulation-selection"], [689, "manipulation-selection"], [594, "manipulation-selection"], [253, "manipulation-selection"]], "Struct": [[987, "struct"], [597, "struct"]], "SQL": [[989, "sql"]], "Methods": [[989, "methods"]], "Utils": [[991, "utils"]], "String": [[986, "string"], [596, "string"]], "Miscellaneous": [[984, "miscellaneous"], [688, "miscellaneous"], [600, "miscellaneous"], [593, "miscellaneous"], [252, "miscellaneous"]], "polars.Series.arr.join": [[720, "polars-series-arr-join"]], "polars.Series.arr.first": [[717, "polars-series-arr-first"]], "polars.Series.arg_min": [[704, "polars-series-arg-min"]], "polars.Series.arr.shift": [[727, "polars-series-arr-shift"]], "polars.Series.arr.get": [[718, "polars-series-arr-get"]], "polars.Series.cat": [[742, "polars-series-cat"]], "polars.Series.arr.head": [[719, "polars-series-arr-head"]], "polars.Series.arr.min": [[725, "polars-series-arr-min"]], "polars.Series.ceil": [[744, "polars-series-ceil"]], "polars.Series.cumulative_eval": [[757, "polars-series-cumulative-eval"]], "polars.Series.dt.convert_time_zone": [[767, "polars-series-dt-convert-time-zone"]], "polars.Series.arr.take": [[732, "polars-series-arr-take"]], "polars.Series.arr.eval": [[715, "polars-series-arr-eval"]], "polars.Series.describe": [[759, "polars-series-describe"]], "polars.Series.arr.reverse": [[726, "polars-series-arr-reverse"]], "polars.Series.bin.starts_with": [[739, "polars-series-bin-starts-with"]], "polars.Series.arr.lengths": [[722, "polars-series-arr-lengths"]], "polars.Series.arr.arg_min": [[710, "polars-series-arr-arg-min"]], "polars.Series.clip": [[747, "polars-series-clip"]], "polars.Series.arr.to_struct": [[733, "polars-series-arr-to-struct"]], "polars.Series.drop_nulls": [[763, "polars-series-drop-nulls"]], "polars.Series.arr.count_match": [[713, "polars-series-arr-count-match"]], "polars.Series.cat.set_ordering": [[743, "polars-series-cat-set-ordering"]], "polars.Series.bin.encode": [[737, "polars-series-bin-encode"]], "polars.Series.bottom_k": [[740, "polars-series-bottom-k"]], "polars.Series.clear": [[746, "polars-series-clear"]], "polars.Series.arg_sort": [[705, "polars-series-arg-sort"]], "polars.Series.clip_max": [[748, "polars-series-clip-max"]], "polars.Series.arr.sort": [[729, "polars-series-arr-sort"]], "polars.Series.arg_unique": [[707, "polars-series-arg-unique"]], "polars.Series.arr.contains": [[712, "polars-series-arr-contains"]], "polars.Series.dt.datetime": [[769, "polars-series-dt-datetime"]], "polars.Series.dt.date": [[768, "polars-series-dt-date"]], "polars.Series.bin.ends_with": [[738, "polars-series-bin-ends-with"]], "polars.Series.arr.slice": [[728, "polars-series-arr-slice"]], "polars.Series.cumprod": [[755, "polars-series-cumprod"]], "polars.Series.clip_min": [[749, "polars-series-clip-min"]], "polars.Series.arr": [[708, "polars-series-arr"]], "polars.Series.bin.decode": [[736, "polars-series-bin-decode"]], "polars.Series.arg_max": [[703, "polars-series-arg-max"]], "polars.Series.chunk_lengths": [[745, "polars-series-chunk-lengths"]], "polars.Series.cummax": [[753, "polars-series-cummax"]], "polars.Series.dot": [[761, "polars-series-dot"]], "polars.Series.drop_nans": [[762, "polars-series-drop-nans"]], "polars.Series.arg_true": [[706, "polars-series-arg-true"]], "polars.Series.arr.diff": [[714, "polars-series-arr-diff"]], "polars.Series.arr.sum": [[730, "polars-series-arr-sum"]], "polars.Series.bin.contains": [[735, "polars-series-bin-contains"]], "polars.Series.dt.cast_time_unit": [[765, "polars-series-dt-cast-time-unit"]], "polars.Series.arctan": [[701, "polars-series-arctan"]], "polars.Series.diff": [[760, "polars-series-diff"]], "polars.Series.arcsinh": [[700, "polars-series-arcsinh"]], "polars.Series.arr.concat": [[711, "polars-series-arr-concat"]], "polars.Series.cosh": [[752, "polars-series-cosh"]], "polars.Series.arr.last": [[721, "polars-series-arr-last"]], "polars.Series.arr.unique": [[734, "polars-series-arr-unique"]], "polars.Series.arctanh": [[702, "polars-series-arctanh"]], "polars.Series.arr.explode": [[716, "polars-series-arr-explode"]], "polars.Series.clone": [[750, "polars-series-clone"]], "polars.Series.cumsum": [[756, "polars-series-cumsum"]], "polars.Series.cut": [[758, "polars-series-cut"]], "polars.Series.cast": [[741, "polars-series-cast"]], "polars.Series.cummin": [[754, "polars-series-cummin"]], "polars.Series.arr.tail": [[731, "polars-series-arr-tail"]], "polars.Series.dt": [[764, "polars-series-dt"]], "polars.Series.dt.combine": [[766, "polars-series-dt-combine"]], "polars.Series.arr.arg_max": [[709, "polars-series-arr-arg-max"]], "polars.Series.arr.mean": [[724, "polars-series-arr-mean"]], "polars.Series.arr.max": [[723, "polars-series-arr-max"]], "polars.Series.cos": [[751, "polars-series-cos"]], "polars.LazyFrame.reverse": [[644, "polars-lazyframe-reverse"]], "polars.LazyFrame.max": [[633, "polars-lazyframe-max"]], "polars.LazyFrame.pipe": [[639, "polars-lazyframe-pipe"]], "polars.LazyFrame.read_json": [[642, "polars-lazyframe-read-json"]], "polars.LazyFrame.with_columns": [[665, "polars-lazyframe-with-columns"]], "polars.Series.abs": [[691, "polars-series-abs"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[669, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.Series.any": [[694, "polars-series-any"]], "polars.LazyFrame.unnest": [[661, "polars-lazyframe-unnest"]], "polars.LazyFrame.lazy": [[630, "polars-lazyframe-lazy"]], "polars.LazyFrame.melt": [[636, "polars-lazyframe-melt"]], "polars.LazyFrame.median": [[635, "polars-lazyframe-median"]], "polars.LazyFrame.sink_parquet": [[652, "polars-lazyframe-sink-parquet"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[673, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.Series.alias": [[692, "polars-series-alias"]], "polars.LazyFrame.rename": [[643, "polars-lazyframe-rename"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[679, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.Series.append": [[695, "polars-series-append"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[675, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.LazyFrame.std": [[655, "polars-lazyframe-std"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[683, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.arccos": [[697, "polars-series-arccos"]], "polars.LazyFrame.min": [[638, "polars-lazyframe-min"]], "polars.LazyFrame.with_row_count": [[667, "polars-lazyframe-with-row-count"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[680, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[670, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[676, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[678, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.LazyFrame.update": [[662, "polars-lazyframe-update"]], "polars.LazyFrame.sort": [[654, "polars-lazyframe-sort"]], "polars.LazyFrame.set_sorted": [[647, "polars-lazyframe-set-sorted"]], "polars.Series.arcsin": [[699, "polars-series-arcsin"]], "polars.LazyFrame.select": [[646, "polars-lazyframe-select"]], "polars.LazyFrame.write_json": [[668, "polars-lazyframe-write-json"]], "polars.Series.apply": [[696, "polars-series-apply"]], "polars.Series.arccosh": [[698, "polars-series-arccosh"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[677, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.LazyFrame.sum": [[656, "polars-lazyframe-sum"]], "polars.LazyFrame.var": [[663, "polars-lazyframe-var"]], "polars.LazyFrame.unique": [[660, "polars-lazyframe-unique"]], "polars.LazyFrame.tail": [[657, "polars-lazyframe-tail"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[674, "polars-lazyframe-groupby-lazygroupby-head"]], "LazyFrame": [[687, "lazyframe"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[672, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.LazyFrame.limit": [[631, "polars-lazyframe-limit"]], "polars.LazyFrame.slice": [[653, "polars-lazyframe-slice"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[681, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.LazyFrame.mean": [[634, "polars-lazyframe-mean"]], "polars.LazyFrame.quantile": [[641, "polars-lazyframe-quantile"]], "polars.LazyFrame.with_context": [[666, "polars-lazyframe-with-context"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[671, "polars-lazyframe-groupby-lazygroupby-apply"]], "GroupBy": [[686, "groupby"], [250, "groupby"]], "polars.LazyFrame.profile": [[640, "polars-lazyframe-profile"]], "polars.LazyFrame.width": [[664, "polars-lazyframe-width"]], "polars.LazyFrame.show_graph": [[650, "polars-lazyframe-show-graph"]], "polars.LazyFrame.take_every": [[658, "polars-lazyframe-take-every"]], "polars.LazyFrame.top_k": [[659, "polars-lazyframe-top-k"]], "polars.Series.all": [[693, "polars-series-all"]], "polars.LazyFrame.schema": [[645, "polars-lazyframe-schema"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[682, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.LazyFrame.shift_and_fill": [[649, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.shift": [[648, "polars-lazyframe-shift"]], "polars.LazyFrame.sink_ipc": [[651, "polars-lazyframe-sink-ipc"]], "Read/write logical plan": [[688, "read-write-logical-plan"]], "polars.LazyFrame.map": [[632, "polars-lazyframe-map"]], "polars.LazyFrame.merge_sorted": [[637, "polars-lazyframe-merge-sorted"]], "polars.Expr.str.rjust": [[499, "polars-expr-str-rjust"]], "polars.Expr.take_every": [[521, "polars-expr-take-every"]], "polars.Expr.sum": [[518, "polars-expr-sum"]], "polars.concat_str": [[544, "polars-concat-str"]], "polars.Expr.str.split_exact": [[503, "polars-expr-str-split-exact"]], "polars.Expr.str.ljust": [[493, "polars-expr-str-ljust"]], "polars.Expr.str.strptime": [[507, "polars-expr-str-strptime"]], "polars.Expr.str.json_path_match": [[491, "polars-expr-str-json-path-match"]], "polars.cumreduce": [[549, "polars-cumreduce"]], "polars.Expr.xor": [[533, "polars-expr-xor"]], "polars.arg_sort_by": [[539, "polars-arg-sort-by"]], "polars.any": [[535, "polars-any"]], "polars.Expr.to_physical": [[524, "polars-expr-to-physical"]], "polars.Expr.str.json_extract": [[490, "polars-expr-str-json-extract"]], "polars.Expr.str.slice": [[501, "polars-expr-str-slice"]], "polars.all": [[534, "polars-all"]], "polars.cumfold": [[548, "polars-cumfold"]], "polars.Expr.str.replace": [[497, "polars-expr-str-replace"]], "polars.datetime": [[552, "polars-datetime"]], "polars.Expr.tail": [[519, "polars-expr-tail"]], "polars.fold": [[557, "polars-fold"]], "polars.Expr.struct.field": [[514, "polars-expr-struct-field"]], "polars.col": [[542, "polars-col"]], "polars.Expr.str.to_uppercase": [[512, "polars-expr-str-to-uppercase"]], "polars.Expr.suffix": [[517, "polars-expr-suffix"]], "polars.Expr.struct.rename_fields": [[515, "polars-expr-struct-rename-fields"]], "polars.Expr.str.lengths": [[492, "polars-expr-str-lengths"]], "polars.duration": [[553, "polars-duration"]], "polars.format": [[558, "polars-format"]], "polars.count": [[546, "polars-count"]], "polars.avg": [[540, "polars-avg"]], "polars.Expr.take": [[520, "polars-expr-take"]], "polars.Expr.str.to_time": [[511, "polars-expr-str-to-time"]], "polars.Expr.unique_counts": [[528, "polars-expr-unique-counts"]], "polars.Expr.str.starts_with": [[505, "polars-expr-str-starts-with"]], "polars.first": [[556, "polars-first"]], "polars.Expr.top_k": [[525, "polars-expr-top-k"]], "polars.Expr.truediv": [[526, "polars-expr-truediv"]], "polars.Expr.str.n_chars": [[495, "polars-expr-str-n-chars"]], "polars.cov": [[547, "polars-cov"]], "polars.Expr.str.split": [[502, "polars-expr-str-split"]], "polars.Expr.str.zfill": [[513, "polars-expr-str-zfill"]], "polars.Expr.tanh": [[523, "polars-expr-tanh"]], "polars.concat_list": [[543, "polars-concat-list"]], "polars.Expr.upper_bound": [[529, "polars-expr-upper-bound"]], "polars.Expr.value_counts": [[530, "polars-expr-value-counts"]], "polars.arange": [[538, "polars-arange"]], "polars.Expr.str.replace_all": [[498, "polars-expr-str-replace-all"]], "polars.Expr.str.strip": [[506, "polars-expr-str-strip"]], "polars.Expr.unique": [[527, "polars-expr-unique"]], "polars.from_epoch": [[559, "polars-from-epoch"]], "polars.cumsum": [[550, "polars-cumsum"]], "polars.date": [[551, "polars-date"]], "polars.Expr.str.splitn": [[504, "polars-expr-str-splitn"]], "polars.Expr.str.to_datetime": [[509, "polars-expr-str-to-datetime"]], "polars.Expr.tan": [[522, "polars-expr-tan"]], "polars.exclude": [[555, "polars-exclude"]], "polars.coalesce": [[541, "polars-coalesce"]], "polars.apply": [[536, "polars-apply"]], "polars.element": [[554, "polars-element"]], "polars.Expr.str.to_lowercase": [[510, "polars-expr-str-to-lowercase"]], "polars.corr": [[545, "polars-corr"]], "polars.approx_unique": [[537, "polars-approx-unique"]], "polars.Expr.var": [[531, "polars-expr-var"]], "polars.Expr.where": [[532, "polars-expr-where"]], "polars.Expr.str.to_date": [[508, "polars-expr-str-to-date"]], "polars.Expr.str.parse_int": [[496, "polars-expr-str-parse-int"]], "polars.Expr.sub": [[516, "polars-expr-sub"]], "polars.Expr.str.lstrip": [[494, "polars-expr-str-lstrip"]], "polars.Expr.str.rstrip": [[500, "polars-expr-str-rstrip"]], "polars.Expr.sort_by": [[478, "polars-expr-sort-by"]], "polars.Expr.rolling_sum": [[462, "polars-expr-rolling-sum"]], "polars.Expr.str.decode": [[484, "polars-expr-str-decode"]], "polars.Expr.rolling_mean": [[456, "polars-expr-rolling-mean"]], "polars.Expr.sort": [[477, "polars-expr-sort"]], "polars.Expr.reinterpret": [[450, "polars-expr-reinterpret"]], "polars.Expr.str.concat": [[481, "polars-expr-str-concat"]], "polars.Expr.rolling_quantile": [[459, "polars-expr-rolling-quantile"]], "polars.Expr.mod": [[432, "polars-expr-mod"]], "polars.Expr.mul": [[434, "polars-expr-mul"]], "polars.Expr.quantile": [[447, "polars-expr-quantile"]], "polars.Expr.shuffle": [[471, "polars-expr-shuffle"]], "polars.Expr.meta.output_name": [[427, "polars-expr-meta-output-name"]], "polars.Expr.str.extract": [[488, "polars-expr-str-extract"]], "polars.Expr.rolling_min": [[458, "polars-expr-rolling-min"]], "polars.Expr.over": [[441, "polars-expr-over"]], "polars.Expr.prefix": [[445, "polars-expr-prefix"]], "polars.Expr.meta.root_names": [[429, "polars-expr-meta-root-names"]], "polars.Expr.shrink_dtype": [[470, "polars-expr-shrink-dtype"]], "polars.Expr.str.count_match": [[483, "polars-expr-str-count-match"]], "polars.Expr.round": [[464, "polars-expr-round"]], "polars.Expr.pipe": [[443, "polars-expr-pipe"]], "polars.Expr.product": [[446, "polars-expr-product"]], "polars.Expr.pow": [[444, "polars-expr-pow"]], "polars.Expr.str.contains": [[482, "polars-expr-str-contains"]], "polars.Expr.or_": [[440, "polars-expr-or"]], "polars.Expr.sqrt": [[479, "polars-expr-sqrt"]], "polars.Expr.mode": [[433, "polars-expr-mode"]], "polars.Expr.meta.undo_aliases": [[430, "polars-expr-meta-undo-aliases"]], "polars.Expr.min": [[431, "polars-expr-min"]], "polars.Expr.nan_min": [[437, "polars-expr-nan-min"]], "polars.Expr.meta.pop": [[428, "polars-expr-meta-pop"]], "polars.Expr.max": [[420, "polars-expr-max"]], "polars.Expr.n_unique": [[435, "polars-expr-n-unique"]], "polars.Expr.nan_max": [[436, "polars-expr-nan-max"]], "polars.Expr.pct_change": [[442, "polars-expr-pct-change"]], "polars.Expr.rank": [[448, "polars-expr-rank"]], "polars.Expr.set_sorted": [[467, "polars-expr-set-sorted"]], "polars.Expr.meta.eq": [[423, "polars-expr-meta-eq"]], "polars.Expr.sign": [[472, "polars-expr-sign"]], "polars.Expr.meta.has_multiple_outputs": [[424, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.str.extract_all": [[489, "polars-expr-str-extract-all"]], "polars.Expr.sin": [[473, "polars-expr-sin"]], "polars.Expr.repeat_by": [[451, "polars-expr-repeat-by"]], "polars.Expr.rolling_median": [[457, "polars-expr-rolling-median"]], "polars.Expr.ne": [[438, "polars-expr-ne"]], "polars.Expr.sinh": [[474, "polars-expr-sinh"]], "polars.Expr.rechunk": [[449, "polars-expr-rechunk"]], "polars.Expr.search_sorted": [[466, "polars-expr-search-sorted"]], "polars.Expr.shift": [[468, "polars-expr-shift"]], "polars.Expr.skew": [[475, "polars-expr-skew"]], "polars.Expr.str.ends_with": [[486, "polars-expr-str-ends-with"]], "polars.Expr.meta.ne": [[426, "polars-expr-meta-ne"]], "polars.Expr.shift_and_fill": [[469, "polars-expr-shift-and-fill"]], "polars.Expr.std": [[480, "polars-expr-std"]], "polars.Expr.rolling_max": [[455, "polars-expr-rolling-max"]], "polars.Expr.rolling_skew": [[460, "polars-expr-rolling-skew"]], "polars.Expr.null_count": [[439, "polars-expr-null-count"]], "polars.Expr.sample": [[465, "polars-expr-sample"]], "polars.Expr.slice": [[476, "polars-expr-slice"]], "polars.Expr.median": [[422, "polars-expr-median"]], "polars.Expr.str.explode": [[487, "polars-expr-str-explode"]], "polars.Expr.str.encode": [[485, "polars-expr-str-encode"]], "polars.Expr.reverse": [[453, "polars-expr-reverse"]], "polars.Expr.rolling_std": [[461, "polars-expr-rolling-std"]], "polars.Expr.mean": [[421, "polars-expr-mean"]], "polars.Expr.meta.is_regex_projection": [[425, "polars-expr-meta-is-regex-projection"]], "polars.Expr.reshape": [[452, "polars-expr-reshape"]], "polars.Expr.rolling_var": [[463, "polars-expr-rolling-var"]], "polars.Expr.rolling_apply": [[454, "polars-expr-rolling-apply"]], "polars.Expr.dt.to_string": [[364, "polars-expr-dt-to-string"]], "polars.Expr.map": [[417, "polars-expr-map"]], "polars.Expr.dt.ordinal_day": [[355, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.quarter": [[356, "polars-expr-dt-quarter"]], "polars.Expr.extend_constant": [[378, "polars-expr-extend-constant"]], "polars.Expr.is_infinite": [[399, "polars-expr-is-infinite"]], "polars.Expr.ewm_var": [[374, "polars-expr-ewm-var"]], "polars.Expr.len": [[410, "polars-expr-len"]], "polars.Expr.dt.week": [[366, "polars-expr-dt-week"]], "polars.Expr.dt.nanoseconds": [[353, "polars-expr-dt-nanoseconds"]], "polars.Expr.forward_fill": [[386, "polars-expr-forward-fill"]], "polars.Expr.fill_null": [[380, "polars-expr-fill-null"]], "polars.Expr.keep_name": [[406, "polars-expr-keep-name"]], "polars.Expr.is_not": [[401, "polars-expr-is-not"]], "polars.Expr.dt.replace_time_zone": [[357, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.offset_by": [[354, "polars-expr-dt-offset-by"]], "polars.Expr.is_nan": [[400, "polars-expr-is-nan"]], "polars.Expr.inspect": [[392, "polars-expr-inspect"]], "polars.Expr.is_first": [[397, "polars-expr-is-first"]], "polars.Expr.kurtosis": [[407, "polars-expr-kurtosis"]], "polars.Expr.dt.timestamp": [[363, "polars-expr-dt-timestamp"]], "polars.Expr.flatten": [[383, "polars-expr-flatten"]], "polars.Expr.entropy": [[370, "polars-expr-entropy"]], "polars.Expr.log1p": [[414, "polars-expr-log1p"]], "polars.Expr.dt.strftime": [[361, "polars-expr-dt-strftime"]], "polars.Expr.exclude": [[375, "polars-expr-exclude"]], "polars.Expr.dt.round": [[358, "polars-expr-dt-round"]], "polars.Expr.ewm_std": [[373, "polars-expr-ewm-std"]], "polars.Expr.floordiv": [[385, "polars-expr-floordiv"]], "polars.Expr.gt": [[388, "polars-expr-gt"]], "polars.Expr.is_between": [[394, "polars-expr-is-between"]], "polars.Expr.dt.time": [[362, "polars-expr-dt-time"]], "polars.Expr.dt.second": [[359, "polars-expr-dt-second"]], "polars.Expr.ge": [[387, "polars-expr-ge"]], "polars.Expr.is_null": [[404, "polars-expr-is-null"]], "polars.Expr.is_unique": [[405, "polars-expr-is-unique"]], "polars.Expr.dt.month_start": [[351, "polars-expr-dt-month-start"]], "polars.Expr.log": [[412, "polars-expr-log"]], "polars.Expr.dt.nanosecond": [[352, "polars-expr-dt-nanosecond"]], "polars.Expr.is_not_nan": [[402, "polars-expr-is-not-nan"]], "polars.Expr.map_dict": [[419, "polars-expr-map-dict"]], "polars.Expr.dt.seconds": [[360, "polars-expr-dt-seconds"]], "polars.Expr.explode": [[377, "polars-expr-explode"]], "polars.Expr.map_alias": [[418, "polars-expr-map-alias"]], "polars.Expr.fill_nan": [[379, "polars-expr-fill-nan"]], "polars.Expr.ewm_mean": [[372, "polars-expr-ewm-mean"]], "polars.Expr.head": [[390, "polars-expr-head"]], "polars.Expr.implode": [[391, "polars-expr-implode"]], "polars.Expr.is_finite": [[396, "polars-expr-is-finite"]], "polars.Expr.last": [[408, "polars-expr-last"]], "polars.Expr.log10": [[413, "polars-expr-log10"]], "polars.Expr.filter": [[381, "polars-expr-filter"]], "polars.Expr.first": [[382, "polars-expr-first"]], "polars.Expr.dt.truncate": [[365, "polars-expr-dt-truncate"]], "polars.Expr.dt.year": [[369, "polars-expr-dt-year"]], "polars.Expr.limit": [[411, "polars-expr-limit"]], "polars.Expr.dt.month_end": [[350, "polars-expr-dt-month-end"]], "polars.Expr.floor": [[384, "polars-expr-floor"]], "polars.Expr.lt": [[416, "polars-expr-lt"]], "polars.Expr.exp": [[376, "polars-expr-exp"]], "polars.Expr.dt.weekday": [[367, "polars-expr-dt-weekday"]], "polars.Expr.hash": [[389, "polars-expr-hash"]], "polars.Expr.dt.with_time_unit": [[368, "polars-expr-dt-with-time-unit"]], "polars.Expr.is_in": [[398, "polars-expr-is-in"]], "polars.Expr.lower_bound": [[415, "polars-expr-lower-bound"]], "polars.Expr.eq": [[371, "polars-expr-eq"]], "polars.Expr.is_duplicated": [[395, "polars-expr-is-duplicated"]], "polars.Expr.le": [[409, "polars-expr-le"]], "polars.Expr.interpolate": [[393, "polars-expr-interpolate"]], "polars.Expr.is_not_null": [[403, "polars-expr-is-not-null"]], "polars.lit": [[563, "polars-lit"]], "polars.LazyFrame.clone": [[607, "polars-lazyframe-clone"]], "polars.LazyFrame.groupby": [[621, "polars-lazyframe-groupby"]], "polars.LazyFrame.last": [[629, "polars-lazyframe-last"]], "polars.rolling_corr": [[574, "polars-rolling-corr"]], "Functions": [[589, "functions"], [600, "functions"]], "polars.LazyFrame.head": [[624, "polars-lazyframe-head"]], "polars.max": [[565, "polars-max"]], "Meta": [[592, "meta"]], "polars.LazyFrame.interpolate": [[626, "polars-lazyframe-interpolate"]], "polars.sum": [[580, "polars-sum"]], "polars.LazyFrame.drop": [[610, "polars-lazyframe-drop"]], "polars.select": [[576, "polars-select"]], "polars.head": [[561, "polars-head"]], "polars.LazyFrame.groupby_rolling": [[623, "polars-lazyframe-groupby-rolling"]], "polars.min": [[568, "polars-min"]], "polars.spearman_rank_corr": [[577, "polars-spearman-rank-corr"]], "polars.pearson_corr": [[570, "polars-pearson-corr"]], "Conversion": [[600, "conversion"]], "Eager/Lazy functions": [[600, "eager-lazy-functions"]], "Parallelization": [[600, "parallelization"]], "StringCache": [[600, "stringcache"]], "polars.LazyFrame.columns": [[609, "polars-lazyframe-columns"]], "polars.LazyFrame.from_json": [[620, "polars-lazyframe-from-json"]], "Input/output": [[602, "input-output"]], "CSV": [[602, "csv"]], "Feather/ IPC": [[602, "feather-ipc"]], "Parquet": [[602, "parquet"]], "Database": [[602, "database"]], "JSON": [[602, "json"]], "AVRO": [[602, "avro"]], "Excel": [[602, "excel"]], "Delta Lake": [[602, "delta-lake"]], "Datasets": [[602, "datasets"]], "BatchedCsvReader": [[602, "batchedcsvreader"]], "polars.LazyFrame.fetch": [[615, "polars-lazyframe-fetch"]], "polars.list": [[562, "polars-list"]], "Columns / names": [[587, "columns-names"]], "polars.LazyFrame.groupby_dynamic": [[622, "polars-lazyframe-groupby-dynamic"]], "polars.median": [[567, "polars-median"]], "polars.LazyFrame.bottom_k": [[604, "polars-lazyframe-bottom-k"]], "polars.n_unique": [[569, "polars-n-unique"]], "polars.LazyFrame.inspect": [[625, "polars-lazyframe-inspect"]], "polars.groups": [[560, "polars-groups"]], "polars.when": [[583, "polars-when"]], "polars.LazyFrame.dtypes": [[612, "polars-lazyframe-dtypes"]], "polars.LazyFrame.explode": [[614, "polars-lazyframe-explode"]], "polars.LazyFrame.filter": [[618, "polars-lazyframe-filter"]], "Window": [[599, "window"]], "polars.LazyFrame.first": [[619, "polars-lazyframe-first"]], "polars.map": [[564, "polars-map"]], "polars.LazyFrame.clear": [[606, "polars-lazyframe-clear"]], "polars.std": [[578, "polars-std"]], "polars.var": [[582, "polars-var"]], "API reference": [[601, "api-reference"]], "polars.LazyFrame.cache": [[605, "polars-lazyframe-cache"]], "polars.LazyFrame.join_asof": [[628, "polars-lazyframe-join-asof"]], "polars.repeat": [[573, "polars-repeat"]], "polars.LazyFrame.collect": [[608, "polars-lazyframe-collect"]], "polars.LazyFrame.fill_null": [[617, "polars-lazyframe-fill-null"]], "polars.reduce": [[572, "polars-reduce"]], "polars.struct": [[579, "polars-struct"]], "polars.mean": [[566, "polars-mean"]], "polars.LazyFrame.fill_nan": [[616, "polars-lazyframe-fill-nan"]], "polars.quantile": [[571, "polars-quantile"]], "polars.LazyFrame.drop_nulls": [[611, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.join": [[627, "polars-lazyframe-join"]], "polars.LazyFrame.explain": [[613, "polars-lazyframe-explain"]], "polars.rolling_cov": [[575, "polars-rolling-cov"]], "polars.tail": [[581, "polars-tail"]], "Expressions": [[590, "expressions"]], "Operators": [[595, "operators"]], "Conjunction": [[595, "conjunction"]], "Comparison": [[595, "comparison"]], "Numeric": [[595, "numeric"], [254, "numeric"]], "polars.Expr.arr.take": [[301, "polars-expr-arr-take"]], "polars.Expr.dt.milliseconds": [[346, "polars-expr-dt-milliseconds"]], "polars.Expr.bottom_k": [[310, "polars-expr-bottom-k"]], "polars.Expr.bin.contains": [[305, "polars-expr-bin-contains"]], "polars.Expr.cumsum": [[325, "polars-expr-cumsum"]], "polars.Expr.arr.eval": [[284, "polars-expr-arr-eval"]], "polars.Expr.clip_min": [[317, "polars-expr-clip-min"]], "polars.Expr.cumcount": [[321, "polars-expr-cumcount"]], "polars.Expr.dt.day": [[336, "polars-expr-dt-day"]], "polars.Expr.dt.hours": [[340, "polars-expr-dt-hours"]], "polars.Expr.dt.combine": [[332, "polars-expr-dt-combine"]], "polars.Expr.dt.month": [[349, "polars-expr-dt-month"]], "polars.Expr.dt.is_leap_year": [[341, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.convert_time_zone": [[333, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.iso_year": [[342, "polars-expr-dt-iso-year"]], "polars.Expr.arr.explode": [[285, "polars-expr-arr-explode"]], "polars.Expr.arr.head": [[288, "polars-expr-arr-head"]], "polars.Expr.arr.unique": [[303, "polars-expr-arr-unique"]], "polars.Expr.count": [[320, "polars-expr-count"]], "polars.Expr.diff": [[327, "polars-expr-diff"]], "polars.Expr.dt.datetime": [[335, "polars-expr-dt-datetime"]], "polars.Expr.cat.set_ordering": [[313, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.days": [[337, "polars-expr-dt-days"]], "polars.Expr.bin.decode": [[306, "polars-expr-bin-decode"]], "polars.Expr.dt.millisecond": [[345, "polars-expr-dt-millisecond"]], "polars.Expr.clip": [[315, "polars-expr-clip"]], "polars.Expr.dt.epoch": [[338, "polars-expr-dt-epoch"]], "polars.Expr.cast": [[312, "polars-expr-cast"]], "polars.Expr.cosh": [[319, "polars-expr-cosh"]], "polars.Expr.dt.microsecond": [[343, "polars-expr-dt-microsecond"]], "polars.Expr.arr.lengths": [[291, "polars-expr-arr-lengths"]], "polars.Expr.arr.diff": [[283, "polars-expr-arr-diff"]], "polars.Expr.drop_nans": [[329, "polars-expr-drop-nans"]], "polars.Expr.arr.tail": [[300, "polars-expr-arr-tail"]], "polars.Expr.dt.minutes": [[348, "polars-expr-dt-minutes"]], "polars.Expr.bin.ends_with": [[308, "polars-expr-bin-ends-with"]], "polars.Expr.arr.sum": [[299, "polars-expr-arr-sum"]], "polars.Expr.cache": [[311, "polars-expr-cache"]], "polars.Expr.cumulative_eval": [[326, "polars-expr-cumulative-eval"]], "polars.Expr.arr.last": [[290, "polars-expr-arr-last"]], "polars.Expr.dt.minute": [[347, "polars-expr-dt-minute"]], "polars.Expr.bin.starts_with": [[309, "polars-expr-bin-starts-with"]], "polars.Expr.arr.shift": [[296, "polars-expr-arr-shift"]], "polars.Expr.arr.first": [[286, "polars-expr-arr-first"]], "polars.Expr.arr.to_struct": [[302, "polars-expr-arr-to-struct"]], "polars.Expr.drop_nulls": [[330, "polars-expr-drop-nulls"]], "polars.Expr.dot": [[328, "polars-expr-dot"]], "polars.Expr.arr.get": [[287, "polars-expr-arr-get"]], "polars.Expr.arr.join": [[289, "polars-expr-arr-join"]], "polars.Expr.ceil": [[314, "polars-expr-ceil"]], "polars.Expr.arr.mean": [[293, "polars-expr-arr-mean"]], "polars.Expr.arr.concat": [[280, "polars-expr-arr-concat"]], "polars.Expr.cummin": [[323, "polars-expr-cummin"]], "polars.Expr.cumprod": [[324, "polars-expr-cumprod"]], "polars.Expr.cos": [[318, "polars-expr-cos"]], "polars.Expr.dt.cast_time_unit": [[331, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.hour": [[339, "polars-expr-dt-hour"]], "polars.Expr.arr.min": [[294, "polars-expr-arr-min"]], "polars.Expr.backward_fill": [[304, "polars-expr-backward-fill"]], "polars.Expr.dt.date": [[334, "polars-expr-dt-date"]], "polars.Expr.bin.encode": [[307, "polars-expr-bin-encode"]], "polars.Expr.cummax": [[322, "polars-expr-cummax"]], "polars.Expr.arr.contains": [[281, "polars-expr-arr-contains"]], "polars.Expr.arr.sort": [[298, "polars-expr-arr-sort"]], "polars.Expr.dt.microseconds": [[344, "polars-expr-dt-microseconds"]], "polars.Expr.arr.reverse": [[295, "polars-expr-arr-reverse"]], "polars.Expr.arr.count_match": [[282, "polars-expr-arr-count-match"]], "polars.Expr.arr.max": [[292, "polars-expr-arr-max"]], "polars.Expr.clip_max": [[316, "polars-expr-clip-max"]], "polars.Expr.arr.slice": [[297, "polars-expr-arr-slice"]], "polars.DataFrame.shape": [[199, "polars-dataframe-shape"]], "polars.DataFrame.interpolate": [[163, "polars-dataframe-interpolate"]], "polars.DataFrame.insert_at_idx": [[162, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.sum": [[206, "polars-dataframe-sum"]], "polars.DataFrame.item": [[167, "polars-dataframe-item"]], "polars.DataFrame.extend": [[145, "polars-dataframe-extend"]], "polars.DataFrame.explode": [[144, "polars-dataframe-explode"]], "polars.DataFrame.n_unique": [[181, "polars-dataframe-n-unique"]], "polars.DataFrame.pivot": [[185, "polars-dataframe-pivot"]], "polars.DataFrame.reverse": [[192, "polars-dataframe-reverse"]], "polars.DataFrame.merge_sorted": [[178, "polars-dataframe-merge-sorted"]], "polars.DataFrame.shift_and_fill": [[201, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.tail": [[207, "polars-dataframe-tail"]], "polars.DataFrame.height": [[160, "polars-dataframe-height"]], "polars.DataFrame.iter_rows": [[168, "polars-dataframe-iter-rows"]], "polars.DataFrame.fill_null": [[147, "polars-dataframe-fill-null"]], "polars.DataFrame.limit": [[173, "polars-dataframe-limit"]], "polars.DataFrame.mean": [[175, "polars-dataframe-mean"]], "polars.DataFrame.iter_slices": [[169, "polars-dataframe-iter-slices"]], "polars.DataFrame.rechunk": [[188, "polars-dataframe-rechunk"]], "polars.DataFrame.rows": [[194, "polars-dataframe-rows"]], "polars.DataFrame.set_sorted": [[198, "polars-dataframe-set-sorted"]], "polars.DataFrame.sample": [[195, "polars-dataframe-sample"]], "polars.DataFrame.shift": [[200, "polars-dataframe-shift"]], "polars.DataFrame.null_count": [[182, "polars-dataframe-null-count"]], "polars.DataFrame.head": [[159, "polars-dataframe-head"]], "polars.DataFrame.median": [[176, "polars-dataframe-median"]], "polars.DataFrame.find_idx_by_name": [[149, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.melt": [[177, "polars-dataframe-melt"]], "polars.DataFrame.filter": [[148, "polars-dataframe-filter"]], "polars.DataFrame.is_unique": [[166, "polars-dataframe-is-unique"]], "polars.DataFrame.is_empty": [[165, "polars-dataframe-is-empty"]], "polars.DataFrame.fill_nan": [[146, "polars-dataframe-fill-nan"]], "polars.DataFrame.join_asof": [[171, "polars-dataframe-join-asof"]], "polars.DataFrame.drop_nulls": [[141, "polars-dataframe-drop-nulls"]], "polars.DataFrame.pipe": [[184, "polars-dataframe-pipe"]], "polars.DataFrame.join": [[170, "polars-dataframe-join"]], "polars.DataFrame.rename": [[189, "polars-dataframe-rename"]], "polars.DataFrame.groupby_dynamic": [[156, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.frame_equal": [[151, "polars-dataframe-frame-equal"]], "polars.DataFrame.replace_at_idx": [[191, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.sort": [[204, "polars-dataframe-sort"]], "polars.DataFrame.std": [[205, "polars-dataframe-std"]], "polars.DataFrame.dtypes": [[142, "polars-dataframe-dtypes"]], "polars.DataFrame.glimpse": [[154, "polars-dataframe-glimpse"]], "polars.DataFrame.row": [[193, "polars-dataframe-row"]], "polars.DataFrame.is_duplicated": [[164, "polars-dataframe-is-duplicated"]], "polars.DataFrame.product": [[186, "polars-dataframe-product"]], "polars.DataFrame.get_columns": [[153, "polars-dataframe-get-columns"]], "polars.DataFrame.select": [[197, "polars-dataframe-select"]], "polars.DataFrame.take_every": [[208, "polars-dataframe-take-every"]], "polars.DataFrame.schema": [[196, "polars-dataframe-schema"]], "polars.DataFrame.drop_in_place": [[140, "polars-dataframe-drop-in-place"]], "polars.DataFrame.groupby": [[155, "polars-dataframe-groupby"]], "polars.DataFrame.lazy": [[172, "polars-dataframe-lazy"]], "polars.DataFrame.hash_rows": [[158, "polars-dataframe-hash-rows"]], "polars.DataFrame.hstack": [[161, "polars-dataframe-hstack"]], "polars.DataFrame.to_arrow": [[209, "polars-dataframe-to-arrow"]], "polars.DataFrame.replace": [[190, "polars-dataframe-replace"]], "polars.DataFrame.partition_by": [[183, "polars-dataframe-partition-by"]], "polars.DataFrame.n_chunks": [[180, "polars-dataframe-n-chunks"]], "polars.DataFrame.estimated_size": [[143, "polars-dataframe-estimated-size"]], "polars.DataFrame.fold": [[150, "polars-dataframe-fold"]], "polars.DataFrame.quantile": [[187, "polars-dataframe-quantile"]], "polars.DataFrame.get_column": [[152, "polars-dataframe-get-column"]], "polars.DataFrame.slice": [[203, "polars-dataframe-slice"]], "polars.DataFrame.min": [[179, "polars-dataframe-min"]], "polars.DataFrame.max": [[174, "polars-dataframe-max"]], "polars.DataFrame.groupby_rolling": [[157, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.shrink_to_fit": [[202, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.unnest": [[221, "polars-dataframe-unnest"]], "polars.DataFrame.with_row_count": [[229, "polars-dataframe-with-row-count"]], "polars.Expr.arg_true": [[276, "polars-expr-arg-true"]], "polars.DataFrame.to_init_repr": [[213, "polars-dataframe-to-init-repr"]], "polars.dataframe.groupby.GroupBy.tail": [[245, "polars-dataframe-groupby-groupby-tail"]], "polars.dataframe.groupby.GroupBy.max": [[238, "polars-dataframe-groupby-groupby-max"]], "polars.Expr.arctanh": [[272, "polars-expr-arctanh"]], "polars.dataframe.groupby.GroupBy.all": [[232, "polars-dataframe-groupby-groupby-all"]], "polars.Expr.arr.arg_min": [[279, "polars-expr-arr-arg-min"]], "polars.Expr.arr.arg_max": [[278, "polars-expr-arr-arg-max"]], "polars.Expr.arg_min": [[274, "polars-expr-arg-min"]], "polars.DataFrame.unique": [[220, "polars-dataframe-unique"]], "polars.Expr.arg_max": [[273, "polars-expr-arg-max"]], "polars.Expr.apply": [[265, "polars-expr-apply"]], "polars.dataframe.groupby.GroupBy.sum": [[244, "polars-dataframe-groupby-groupby-sum"]], "DataFrame": [[251, "dataframe"]], "polars.Expr.arctan": [[271, "polars-expr-arctan"]], "polars.DataFrame.upsample": [[224, "polars-dataframe-upsample"]], "polars.dataframe.groupby.GroupBy.n_unique": [[242, "polars-dataframe-groupby-groupby-n-unique"]], "polars.DataFrame.with_columns": [[228, "polars-dataframe-with-columns"]], "polars.Expr.any": [[263, "polars-expr-any"]], "polars.DataFrame.to_dicts": [[211, "polars-dataframe-to-dicts"]], "polars.DataFrame.transpose": [[219, "polars-dataframe-transpose"]], "polars.Expr.abs": [[257, "polars-expr-abs"]], "polars.dataframe.groupby.GroupBy.apply": [[233, "polars-dataframe-groupby-groupby-apply"]], "polars.Expr.append": [[264, "polars-expr-append"]], "polars.DataFrame.to_struct": [[217, "polars-dataframe-to-struct"]], "polars.Expr.arg_unique": [[277, "polars-expr-arg-unique"]], "polars.DataFrame.to_dummies": [[212, "polars-dataframe-to-dummies"]], "polars.dataframe.groupby.GroupBy.agg": [[231, "polars-dataframe-groupby-groupby-agg"]], "polars.DataFrame.to_dict": [[210, "polars-dataframe-to-dict"]], "polars.dataframe.groupby.GroupBy.mean": [[239, "polars-dataframe-groupby-groupby-mean"]], "polars.DataFrame.vstack": [[226, "polars-dataframe-vstack"]], "polars.Expr.arcsin": [[269, "polars-expr-arcsin"]], "polars.DataFrame.to_pandas": [[215, "polars-dataframe-to-pandas"]], "Exceptions": [[255, "exceptions"]], "polars.DataFrame.to_series": [[216, "polars-dataframe-to-series"]], "polars.Expr.arcsinh": [[270, "polars-expr-arcsinh"]], "polars.dataframe.groupby.GroupBy.first": [[235, "polars-dataframe-groupby-groupby-first"]], "polars.DataFrame.var": [[225, "polars-dataframe-var"]], "polars.dataframe.groupby.GroupBy.__iter__": [[230, "polars-dataframe-groupby-groupby-iter"]], "polars.Expr.all": [[261, "polars-expr-all"]], "polars.Expr.arccos": [[267, "polars-expr-arccos"]], "polars.dataframe.groupby.GroupBy.quantile": [[243, "polars-dataframe-groupby-groupby-quantile"]], "Data types": [[254, "data-types"]], "Nested": [[254, "nested"]], "Other": [[254, "other"]], "polars.Expr.and_": [[262, "polars-expr-and"]], "polars.dataframe.groupby.GroupBy.last": [[237, "polars-dataframe-groupby-groupby-last"]], "polars.Expr.add": [[258, "polars-expr-add"]], "polars.DataFrame.top_k": [[218, "polars-dataframe-top-k"]], "polars.dataframe.groupby.GroupBy.min": [[241, "polars-dataframe-groupby-groupby-min"]], "polars.Expr.arg_sort": [[275, "polars-expr-arg-sort"]], "polars.DataFrame.to_numpy": [[214, "polars-dataframe-to-numpy"]], "polars.DataFrame.update": [[223, "polars-dataframe-update"]], "polars.dataframe.groupby.GroupBy.count": [[234, "polars-dataframe-groupby-groupby-count"]], "polars.Expr.approx_unique": [[266, "polars-expr-approx-unique"]], "polars.Expr.agg_groups": [[259, "polars-expr-agg-groups"]], "polars.DataFrame.unstack": [[222, "polars-dataframe-unstack"]], "polars.dataframe.groupby.GroupBy.median": [[240, "polars-dataframe-groupby-groupby-median"]], "polars.DataFrame.width": [[227, "polars-dataframe-width"]], "polars.dataframe.groupby.GroupBy.head": [[236, "polars-dataframe-groupby-groupby-head"]], "polars.Expr.arccosh": [[268, "polars-expr-arccosh"]], "polars.Expr.alias": [[260, "polars-expr-alias"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[5, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[6, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[7, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[8, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[9, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[10, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[11, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[12, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[13, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[14, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[15, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[16, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[17, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[22, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[23, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[24, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[25, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[26, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[27, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[28, "polars.DataFrame.write_database"]], "write_excel() (polars.dataframe method)": [[29, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[30, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[31, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[32, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[33, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[34, "polars.DataType"]], "__init__() (polars.datatype method)": [[34, "polars.DataType.__init__"]], "date (class in polars)": [[35, "polars.Date"]], "__init__() (polars.date method)": [[35, "polars.Date.__init__"]], "datetime (class in polars)": [[36, "polars.Datetime"]], "__init__() (polars.datetime method)": [[36, "polars.Datetime.__init__"]], "decimal (class in polars)": [[37, "polars.Decimal"]], "__init__() (polars.decimal method)": [[37, "polars.Decimal.__init__"]], "duration (class in polars)": [[38, "polars.Duration"]], "__init__() (polars.duration method)": [[38, "polars.Duration.__init__"]], "float32 (class in polars)": [[39, "polars.Float32"]], "__init__() (polars.float32 method)": [[39, "polars.Float32.__init__"]], "float64 (class in polars)": [[40, "polars.Float64"]], "__init__() (polars.float64 method)": [[40, "polars.Float64.__init__"]], "int16 (class in polars)": [[41, "polars.Int16"]], "__init__() (polars.int16 method)": [[41, "polars.Int16.__init__"]], "int32 (class in polars)": [[42, "polars.Int32"]], "__init__() (polars.int32 method)": [[42, "polars.Int32.__init__"]], "int64 (class in polars)": [[43, "polars.Int64"]], "__init__() (polars.int64 method)": [[43, "polars.Int64.__init__"]], "int8 (class in polars)": [[44, "polars.Int8"]], "__init__() (polars.int8 method)": [[44, "polars.Int8.__init__"]], "list (class in polars)": [[45, "polars.List"]], "__init__() (polars.list method)": [[45, "polars.List.__init__"]], "null (class in polars)": [[46, "polars.Null"]], "__init__() (polars.null method)": [[46, "polars.Null.__init__"]], "object (class in polars)": [[47, "polars.Object"]], "__init__() (polars.object method)": [[47, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[48, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[49, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[50, "polars.SQLContext.register"]], "register_many() (polars.sqlcontext method)": [[51, "polars.SQLContext.register_many"]], "stringcache (class in polars)": [[52, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[52, "polars.StringCache.__init__"]], "struct (class in polars)": [[53, "polars.Struct"]], "__init__() (polars.struct method)": [[53, "polars.Struct.__init__"]], "time (class in polars)": [[54, "polars.Time"]], "__init__() (polars.time method)": [[54, "polars.Time.__init__"]], "uint16 (class in polars)": [[55, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[55, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[56, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[56, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[57, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[57, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[58, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[58, "polars.UInt8.__init__"]], "unknown (class in polars)": [[59, "polars.Unknown"]], "__init__() (polars.unknown method)": [[59, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[60, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[60, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[61, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[62, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[63, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[64, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[65, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[66, "polars.arg_where"]], "build_info() (in module polars)": [[67, "polars.build_info"]], "collect_all() (in module polars)": [[68, "polars.collect_all"]], "concat() (in module polars)": [[69, "polars.concat"]], "cut() (in module polars)": [[70, "polars.cut"]], "date_range() (in module polars)": [[71, "polars.date_range"]], "enable_string_cache() (in module polars)": [[72, "polars.enable_string_cache"]], "arrowerror": [[73, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[74, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[75, "polars.exceptions.ComputeError"]], "duplicateerror": [[76, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[77, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[78, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[79, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[80, "polars.exceptions.PolarsPanicError"]], "rowserror": [[81, "polars.exceptions.RowsError"]], "schemaerror": [[82, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[83, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[84, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[85, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[86, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[87, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[88, "polars.from_dataframe"]], "from_dict() (in module polars)": [[89, "polars.from_dict"]], "from_dicts() (in module polars)": [[90, "polars.from_dicts"]], "from_numpy() (in module polars)": [[91, "polars.from_numpy"]], "from_pandas() (in module polars)": [[92, "polars.from_pandas"]], "from_records() (in module polars)": [[93, "polars.from_records"]], "from_repr() (in module polars)": [[94, "polars.from_repr"]], "get_dummies() (in module polars)": [[95, "polars.get_dummies"]], "get_index_type() (in module polars)": [[96, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[97, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[98, "polars.ones"]], "read_avro() (in module polars)": [[99, "polars.read_avro"]], "read_csv() (in module polars)": [[100, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[101, "polars.read_csv_batched"]], "read_database() (in module polars)": [[102, "polars.read_database"]], "read_delta() (in module polars)": [[103, "polars.read_delta"]], "read_excel() (in module polars)": [[104, "polars.read_excel"]], "read_ipc() (in module polars)": [[105, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[106, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[107, "polars.read_json"]], "read_ndjson() (in module polars)": [[108, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[109, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[110, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[111, "polars.scan_csv"]], "scan_delta() (in module polars)": [[112, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[113, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[114, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[115, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[116, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[117, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[118, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[119, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[120, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[120, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[121, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[122, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[123, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[124, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[125, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[126, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[127, "polars.threadpool_size"]], "zeros() (in module polars)": [[128, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[131, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[132, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[133, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[134, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[135, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[136, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[137, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[138, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[139, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[140, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[141, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[142, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[143, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[144, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[145, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[146, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[147, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[148, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[149, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[150, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[151, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[152, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[153, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[154, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[155, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[156, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[157, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[158, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[159, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[160, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[161, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[162, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[163, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[164, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[165, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[166, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[167, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[168, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[169, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[170, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[171, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[172, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[173, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[174, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[175, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[176, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[177, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[178, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[179, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[180, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[181, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[182, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[183, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[184, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[185, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[186, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[187, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[188, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[189, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[190, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[191, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[192, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[193, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[194, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[195, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[196, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[197, "polars.DataFrame.select"]], "set_sorted() (polars.dataframe method)": [[198, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[199, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[200, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[201, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[202, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[203, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[204, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[205, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[206, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[207, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[208, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[209, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[210, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[211, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[212, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[213, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[214, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[215, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[216, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[217, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[218, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[219, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[220, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[221, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[222, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[223, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[224, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[225, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[226, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[227, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[228, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[229, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[230, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[231, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[232, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[241, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[242, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[243, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[244, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[245, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[257, "polars.Expr.abs"]], "add() (polars.expr method)": [[258, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[259, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[260, "polars.Expr.alias"]], "all() (polars.expr method)": [[261, "polars.Expr.all"]], "and_() (polars.expr method)": [[262, "polars.Expr.and_"]], "any() (polars.expr method)": [[263, "polars.Expr.any"]], "append() (polars.expr method)": [[264, "polars.Expr.append"]], "apply() (polars.expr method)": [[265, "polars.Expr.apply"]], "approx_unique() (polars.expr method)": [[266, "polars.Expr.approx_unique"]], "arccos() (polars.expr method)": [[267, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[268, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[269, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[270, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[271, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[272, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[273, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[274, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[275, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[276, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[277, "polars.Expr.arg_unique"]], "arg_max() (polars.expr.arr method)": [[278, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[279, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[280, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[281, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[282, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[283, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[284, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[285, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[286, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[287, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[288, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[289, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[290, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[291, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[292, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[293, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[294, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[295, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[296, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[297, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[298, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[299, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[300, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[301, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[302, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[303, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[304, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[305, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[306, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[307, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[308, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[309, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[310, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[311, "polars.Expr.cache"]], "cast() (polars.expr method)": [[312, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[313, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[314, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[315, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[316, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[317, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[318, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[319, "polars.Expr.cosh"]], "count() (polars.expr method)": [[320, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[321, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[322, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[323, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[324, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[325, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[326, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[327, "polars.Expr.diff"]], "dot() (polars.expr method)": [[328, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[329, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[330, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[331, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[332, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[333, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[334, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[335, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[336, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[337, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[338, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[339, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[340, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[341, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[342, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[343, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[344, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[345, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[346, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[347, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[348, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[349, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[350, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[351, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[352, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[353, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[354, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[355, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[356, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[357, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[358, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[359, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[360, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[361, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[362, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[363, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[364, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[365, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[366, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[367, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[368, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[369, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[370, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[371, "polars.Expr.eq"]], "ewm_mean() (polars.expr method)": [[372, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[373, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[374, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[375, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[376, "polars.Expr.exp"]], "explode() (polars.expr method)": [[377, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[378, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[379, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[380, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[381, "polars.Expr.filter"]], "first() (polars.expr method)": [[382, "polars.Expr.first"]], "flatten() (polars.expr method)": [[383, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[384, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[385, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[386, "polars.Expr.forward_fill"]], "ge() (polars.expr method)": [[387, "polars.Expr.ge"]], "gt() (polars.expr method)": [[388, "polars.Expr.gt"]], "hash() (polars.expr method)": [[389, "polars.Expr.hash"]], "head() (polars.expr method)": [[390, "polars.Expr.head"]], "implode() (polars.expr method)": [[391, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[392, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[393, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[394, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[395, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[396, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[397, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[398, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[399, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[400, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[401, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[402, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[403, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[404, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[405, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[406, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[407, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[408, "polars.Expr.last"]], "le() (polars.expr method)": [[409, "polars.Expr.le"]], "len() (polars.expr method)": [[410, "polars.Expr.len"]], "limit() (polars.expr method)": [[411, "polars.Expr.limit"]], "log() (polars.expr method)": [[412, "polars.Expr.log"]], "log10() (polars.expr method)": [[413, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[414, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[415, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[416, "polars.Expr.lt"]], "map() (polars.expr method)": [[417, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[418, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[419, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[420, "polars.Expr.max"]], "mean() (polars.expr method)": [[421, "polars.Expr.mean"]], "median() (polars.expr method)": [[422, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[423, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[424, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[425, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[426, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[427, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[428, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[429, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[430, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[431, "polars.Expr.min"]], "mod() (polars.expr method)": [[432, "polars.Expr.mod"]], "mode() (polars.expr method)": [[433, "polars.Expr.mode"]], "mul() (polars.expr method)": [[434, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[435, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[436, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[437, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[438, "polars.Expr.ne"]], "null_count() (polars.expr method)": [[439, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[440, "polars.Expr.or_"]], "over() (polars.expr method)": [[441, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[442, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[443, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[444, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[445, "polars.Expr.prefix"]], "product() (polars.expr method)": [[446, "polars.Expr.product"]], "quantile() (polars.expr method)": [[447, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[448, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[449, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[450, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[451, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[452, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[453, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[454, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[455, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[456, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[457, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[458, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[459, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[460, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[461, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[462, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[463, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[464, "polars.Expr.round"]], "sample() (polars.expr method)": [[465, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[466, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[467, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[468, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[469, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[470, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[471, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[472, "polars.Expr.sign"]], "sin() (polars.expr method)": [[473, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[474, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[475, "polars.Expr.skew"]], "slice() (polars.expr method)": [[476, "polars.Expr.slice"]], "sort() (polars.expr method)": [[477, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[478, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[479, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[480, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[481, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[482, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[483, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[484, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[485, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[486, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[487, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[488, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[489, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[490, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[491, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[492, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[493, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[494, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[495, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[496, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[497, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[498, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[499, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[500, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[501, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[502, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[503, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[504, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[505, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[506, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[507, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[508, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[509, "polars.Expr.str.to_datetime"]], "to_lowercase() (polars.expr.str method)": [[510, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[511, "polars.Expr.str.to_time"]], "to_uppercase() (polars.expr.str method)": [[512, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[513, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[514, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[515, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[516, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[517, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[518, "polars.Expr.sum"]], "tail() (polars.expr method)": [[519, "polars.Expr.tail"]], "take() (polars.expr method)": [[520, "polars.Expr.take"]], "take_every() (polars.expr method)": [[521, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[522, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[523, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[524, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[525, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[526, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[527, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[528, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[529, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[530, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[531, "polars.Expr.var"]], "where() (polars.expr method)": [[532, "polars.Expr.where"]], "xor() (polars.expr method)": [[533, "polars.Expr.xor"]], "all() (in module polars)": [[534, "polars.all"]], "any() (in module polars)": [[535, "polars.any"]], "apply() (in module polars)": [[536, "polars.apply"]], "approx_unique() (in module polars)": [[537, "polars.approx_unique"]], "arange() (in module polars)": [[538, "polars.arange"]], "arg_sort_by() (in module polars)": [[539, "polars.arg_sort_by"]], "avg() (in module polars)": [[540, "polars.avg"]], "coalesce() (in module polars)": [[541, "polars.coalesce"]], "col() (in module polars)": [[542, "polars.col"]], "concat_list() (in module polars)": [[543, "polars.concat_list"]], "concat_str() (in module polars)": [[544, "polars.concat_str"]], "corr() (in module polars)": [[545, "polars.corr"]], "count() (in module polars)": [[546, "polars.count"]], "cov() (in module polars)": [[547, "polars.cov"]], "cumfold() (in module polars)": [[548, "polars.cumfold"]], "cumreduce() (in module polars)": [[549, "polars.cumreduce"]], "cumsum() (in module polars)": [[550, "polars.cumsum"]], "date() (in module polars)": [[551, "polars.date"]], "datetime() (in module polars)": [[552, "polars.datetime"]], "duration() (in module polars)": [[553, "polars.duration"]], "element() (in module polars)": [[554, "polars.element"]], "exclude() (in module polars)": [[555, "polars.exclude"]], "first() (in module polars)": [[556, "polars.first"]], "fold() (in module polars)": [[557, "polars.fold"]], "format() (in module polars)": [[558, "polars.format"]], "from_epoch() (in module polars)": [[559, "polars.from_epoch"]], "groups() (in module polars)": [[560, "polars.groups"]], "head() (in module polars)": [[561, "polars.head"]], "list() (in module polars)": [[562, "polars.list"]], "lit() (in module polars)": [[563, "polars.lit"]], "map() (in module polars)": [[564, "polars.map"]], "max() (in module polars)": [[565, "polars.max"]], "mean() (in module polars)": [[566, "polars.mean"]], "median() (in module polars)": [[567, "polars.median"]], "min() (in module polars)": [[568, "polars.min"]], "n_unique() (in module polars)": [[569, "polars.n_unique"]], "pearson_corr() (in module polars)": [[570, "polars.pearson_corr"]], "quantile() (in module polars)": [[571, "polars.quantile"]], "reduce() (in module polars)": [[572, "polars.reduce"]], "repeat() (in module polars)": [[573, "polars.repeat"]], "rolling_corr() (in module polars)": [[574, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[575, "polars.rolling_cov"]], "select() (in module polars)": [[576, "polars.select"]], "spearman_rank_corr() (in module polars)": [[577, "polars.spearman_rank_corr"]], "std() (in module polars)": [[578, "polars.std"]], "struct() (in module polars)": [[579, "polars.struct"]], "sum() (in module polars)": [[580, "polars.sum"]], "tail() (in module polars)": [[581, "polars.tail"]], "var() (in module polars)": [[582, "polars.var"]], "when() (in module polars)": [[583, "polars.when"]], "bottom_k() (polars.lazyframe method)": [[604, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[605, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[606, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[607, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[608, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[609, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[610, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[611, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[612, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[613, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[614, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[615, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[616, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[617, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[618, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[619, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[620, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[621, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[622, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[623, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[624, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[625, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[626, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[627, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[628, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[629, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[630, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[631, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[632, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[633, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[634, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[635, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[636, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[637, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[638, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[639, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[640, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[641, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[642, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[643, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[644, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[645, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[646, "polars.LazyFrame.select"]], "set_sorted() (polars.lazyframe method)": [[647, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[648, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[649, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[650, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[651, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[652, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[653, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[654, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[655, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[656, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[657, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[658, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[659, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[660, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[661, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[662, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[663, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[664, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[665, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[666, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[667, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[668, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[669, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[670, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[671, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[672, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[673, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[674, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[675, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[676, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[677, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[678, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[679, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[680, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[681, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[682, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[683, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[691, "polars.Series.abs"]], "alias() (polars.series method)": [[692, "polars.Series.alias"]], "all() (polars.series method)": [[693, "polars.Series.all"]], "any() (polars.series method)": [[694, "polars.Series.any"]], "append() (polars.series method)": [[695, "polars.Series.append"]], "apply() (polars.series method)": [[696, "polars.Series.apply"]], "arccos() (polars.series method)": [[697, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[698, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[699, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[700, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[701, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[702, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[703, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[704, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[705, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[706, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[707, "polars.Series.arg_unique"]], "arr (polars.series attribute)": [[708, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[709, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[710, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[711, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[712, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[713, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[714, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[715, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[716, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[717, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[718, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[719, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[720, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[721, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[722, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[723, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[724, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[725, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[726, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[727, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[728, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[729, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[730, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[731, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[732, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[733, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[734, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[735, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[736, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[737, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[738, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[739, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[740, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[741, "polars.Series.cast"]], "cat (polars.series attribute)": [[742, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[743, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[744, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[745, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[746, "polars.Series.clear"]], "clip() (polars.series method)": [[747, "polars.Series.clip"]], "clip_max() (polars.series method)": [[748, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[749, "polars.Series.clip_min"]], "clone() (polars.series method)": [[750, "polars.Series.clone"]], "cos() (polars.series method)": [[751, "polars.Series.cos"]], "cosh() (polars.series method)": [[752, "polars.Series.cosh"]], "cummax() (polars.series method)": [[753, "polars.Series.cummax"]], "cummin() (polars.series method)": [[754, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[755, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[756, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[757, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[758, "polars.Series.cut"]], "describe() (polars.series method)": [[759, "polars.Series.describe"]], "diff() (polars.series method)": [[760, "polars.Series.diff"]], "dot() (polars.series method)": [[761, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[762, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[763, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[764, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[765, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[766, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[767, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[768, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[769, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[770, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[771, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[772, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[773, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[774, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[775, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[776, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[777, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[778, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[779, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[780, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[781, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[782, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[783, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[784, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[785, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[786, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[787, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[788, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[789, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[790, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[791, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[792, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[793, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[794, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[795, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[796, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[797, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[798, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[799, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[800, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[801, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[802, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[803, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[804, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[805, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[806, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[807, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[808, "polars.Series.dtype"]], "entropy() (polars.series method)": [[809, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[810, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[811, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[812, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[813, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[814, "polars.Series.exp"]], "explode() (polars.series method)": [[815, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[816, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[817, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[818, "polars.Series.fill_null"]], "filter() (polars.series method)": [[819, "polars.Series.filter"]], "flags (polars.series attribute)": [[820, "polars.Series.flags"]], "floor() (polars.series method)": [[821, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[822, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[823, "polars.Series.has_validity"]], "hash() (polars.series method)": [[824, "polars.Series.hash"]], "head() (polars.series method)": [[825, "polars.Series.head"]], "hist() (polars.series method)": [[826, "polars.Series.hist"]], "implode() (polars.series method)": [[827, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[828, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[829, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[830, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[831, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[832, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[833, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[834, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[835, "polars.Series.is_first"]], "is_float() (polars.series method)": [[836, "polars.Series.is_float"]], "is_in() (polars.series method)": [[837, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[838, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[839, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[840, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[841, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[842, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[843, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[844, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[845, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[846, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[847, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[848, "polars.Series.is_utf8"]], "item() (polars.series method)": [[849, "polars.Series.item"]], "kurtosis() (polars.series method)": [[850, "polars.Series.kurtosis"]], "len() (polars.series method)": [[851, "polars.Series.len"]], "limit() (polars.series method)": [[852, "polars.Series.limit"]], "log() (polars.series method)": [[853, "polars.Series.log"]], "log10() (polars.series method)": [[854, "polars.Series.log10"]], "log1p() (polars.series method)": [[855, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[856, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[857, "polars.Series.map_dict"]], "max() (polars.series method)": [[858, "polars.Series.max"]], "mean() (polars.series method)": [[859, "polars.Series.mean"]], "median() (polars.series method)": [[860, "polars.Series.median"]], "min() (polars.series method)": [[861, "polars.Series.min"]], "mode() (polars.series method)": [[862, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[863, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[864, "polars.Series.n_unique"]], "name (polars.series attribute)": [[865, "polars.Series.name"]], "nan_max() (polars.series method)": [[866, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[867, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[868, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[869, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[870, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[871, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[872, "polars.Series.peak_min"]], "product() (polars.series method)": [[873, "polars.Series.product"]], "qcut() (polars.series method)": [[874, "polars.Series.qcut"]], "quantile() (polars.series method)": [[875, "polars.Series.quantile"]], "rank() (polars.series method)": [[876, "polars.Series.rank"]], "rechunk() (polars.series method)": [[877, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[878, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[879, "polars.Series.rename"]], "reshape() (polars.series method)": [[880, "polars.Series.reshape"]], "reverse() (polars.series method)": [[881, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[882, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[883, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[884, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[885, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[886, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[887, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[888, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[889, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[890, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[891, "polars.Series.rolling_var"]], "round() (polars.series method)": [[892, "polars.Series.round"]], "sample() (polars.series method)": [[893, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[894, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[895, "polars.Series.series_equal"]], "set() (polars.series method)": [[896, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[897, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[898, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[899, "polars.Series.shape"]], "shift() (polars.series method)": [[900, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[901, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[902, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[903, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[904, "polars.Series.shuffle"]], "sign() (polars.series method)": [[905, "polars.Series.sign"]], "sin() (polars.series method)": [[906, "polars.Series.sin"]], "sinh() (polars.series method)": [[907, "polars.Series.sinh"]], "skew() (polars.series method)": [[908, "polars.Series.skew"]], "slice() (polars.series method)": [[909, "polars.Series.slice"]], "sort() (polars.series method)": [[910, "polars.Series.sort"]], "sqrt() (polars.series method)": [[911, "polars.Series.sqrt"]], "std() (polars.series method)": [[912, "polars.Series.std"]], "str (polars.series attribute)": [[913, "polars.Series.str"]], "concat() (polars.series.str method)": [[914, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[915, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[916, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[917, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[918, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[919, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[920, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[921, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[922, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[923, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[924, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[925, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[926, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[927, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[928, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[929, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[930, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[931, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[932, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[933, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[934, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[935, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[936, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[937, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[938, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[939, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[940, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[941, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[942, "polars.Series.str.to_datetime"]], "to_lowercase() (polars.series.str method)": [[943, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[944, "polars.Series.str.to_time"]], "to_uppercase() (polars.series.str method)": [[945, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[946, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[947, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[948, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[949, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[950, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[951, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[952, "polars.Series.sum"]], "tail() (polars.series method)": [[953, "polars.Series.tail"]], "take() (polars.series method)": [[954, "polars.Series.take"]], "take_every() (polars.series method)": [[955, "polars.Series.take_every"]], "tan() (polars.series method)": [[956, "polars.Series.tan"]], "tanh() (polars.series method)": [[957, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[958, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[959, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[960, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[961, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[962, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[963, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[964, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[965, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[966, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[967, "polars.Series.top_k"]], "unique() (polars.series method)": [[968, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[969, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[970, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[971, "polars.Series.value_counts"]], "var() (polars.series method)": [[972, "polars.Series.var"]], "view() (polars.series method)": [[973, "polars.Series.view"]], "zip_with() (polars.series method)": [[974, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[989, "polars.SQLContext"]]}})