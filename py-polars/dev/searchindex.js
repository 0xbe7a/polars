Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_dummies", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.time_range", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.time_range.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_dummies", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.time_range", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.any", "polars.apply", "polars.approx_unique", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.time", "polars.var", "polars.when", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 91, 119, 135, 136, 237, 255, 269, 595, 677, 702, 988], "refer": [0, 30, 103, 104, 107, 141, 255, 365, 368, 423, 452, 492, 511, 512, 513, 515, 595, 805, 808, 882, 946, 947, 948, 950, 988], "input": [0, 64, 93, 103, 104, 107, 136, 137, 148, 159, 187, 201, 208, 222, 232, 235, 255, 262, 269, 379, 398, 417, 432, 445, 482, 537, 538, 539, 540, 543, 545, 546, 547, 548, 554, 559, 560, 568, 569, 572, 583, 584, 595, 606, 609, 619, 626, 652, 660, 665, 671, 675, 693, 702, 836, 860, 861, 863, 988], "output": [0, 25, 27, 30, 31, 32, 33, 74, 107, 131, 136, 160, 161, 172, 182, 189, 198, 201, 228, 232, 255, 264, 269, 421, 422, 431, 534, 540, 549, 568, 581, 595, 606, 627, 628, 637, 641, 642, 652, 671, 674, 677, 693, 702, 977, 988], "seri": [0, 1, 22, 65, 66, 67, 68, 69, 72, 73, 74, 90, 92, 95, 97, 101, 122, 126, 131, 132, 136, 144, 152, 154, 156, 157, 162, 165, 166, 168, 170, 178, 179, 183, 194, 195, 210, 214, 217, 220, 221, 236, 255, 268, 269, 271, 272, 273, 274, 275, 276, 279, 280, 282, 283, 284, 289, 292, 293, 300, 301, 304, 305, 306, 309, 317, 318, 322, 323, 335, 337, 341, 344, 348, 350, 352, 357, 361, 362, 364, 369, 372, 381, 382, 388, 396, 398, 400, 401, 402, 403, 404, 406, 407, 408, 419, 421, 448, 452, 453, 454, 455, 456, 458, 470, 471, 474, 477, 478, 485, 500, 505, 511, 512, 513, 515, 518, 524, 525, 526, 527, 533, 538, 539, 540, 541, 542, 544, 550, 552, 553, 554, 560, 561, 563, 565, 567, 568, 569, 570, 571, 572, 573, 576, 577, 580, 582, 583, 584, 585, 587, 595, 606, 623, 676, 693, 982, 984, 987, 989, 992, 993, 994, 996], "datafram": [0, 1, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 49, 50, 51, 52, 53, 54, 55, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 116, 117, 118, 121, 123, 124, 131, 253, 254, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 302, 303, 306, 307, 308, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 565, 568, 569, 570, 571, 572, 573, 574, 576, 580, 581, 582, 583, 584, 585, 587, 588, 595, 606, 613, 615, 619, 620, 624, 627, 632, 633, 634, 635, 637, 641, 642, 646, 650, 657, 658, 659, 660, 666, 667, 668, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 701, 702, 721, 749, 764, 765, 801, 832, 880, 930, 942, 943, 957, 966, 967, 977, 988, 995, 996], "lazyfram": [0, 1, 49, 50, 52, 54, 64, 65, 66, 67, 68, 71, 72, 114, 115, 116, 117, 118, 119, 121, 126, 131, 176, 188, 255, 306, 385, 595, 606, 692, 995, 996], "express": [0, 69, 71, 74, 101, 123, 126, 128, 131, 132, 136, 137, 148, 150, 152, 159, 185, 189, 197, 201, 208, 222, 232, 235, 237, 255, 262, 264, 265, 266, 268, 269, 280, 286, 288, 306, 315, 319, 320, 321, 324, 330, 332, 336, 354, 355, 358, 365, 375, 379, 382, 385, 389, 391, 392, 396, 398, 402, 405, 410, 413, 414, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 436, 438, 442, 444, 445, 447, 448, 449, 450, 455, 469, 470, 471, 473, 475, 480, 482, 486, 487, 492, 493, 494, 495, 501, 502, 520, 521, 524, 530, 531, 533, 536, 537, 538, 539, 542, 543, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 567, 568, 569, 572, 574, 576, 577, 578, 579, 580, 581, 583, 584, 586, 588, 594, 606, 609, 613, 618, 619, 620, 623, 626, 646, 652, 655, 656, 657, 658, 660, 665, 671, 672, 675, 677, 693, 702, 719, 721, 753, 754, 755, 763, 772, 794, 795, 798, 822, 836, 900, 907, 921, 922, 927, 928, 929, 930, 936, 937, 988], "extend": [0, 93, 255, 382, 595, 606, 701, 822, 988], "function": [0, 30, 64, 65, 66, 67, 68, 73, 91, 97, 103, 104, 107, 114, 124, 136, 141, 147, 154, 181, 188, 189, 219, 223, 226, 227, 237, 255, 265, 269, 306, 330, 362, 376, 377, 378, 421, 422, 445, 447, 458, 459, 460, 461, 462, 463, 465, 466, 467, 479, 528, 538, 539, 540, 552, 553, 554, 560, 561, 563, 568, 569, 572, 576, 584, 595, 606, 637, 641, 645, 668, 677, 693, 702, 739, 763, 802, 816, 817, 818, 819, 832, 880, 888, 902, 903, 909, 914, 971, 988, 996], "data": [0, 1, 5, 15, 18, 28, 29, 30, 31, 35, 49, 55, 64, 65, 67, 72, 75, 80, 81, 85, 87, 90, 91, 92, 93, 94, 95, 96, 101, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 121, 122, 124, 125, 126, 128, 132, 135, 136, 138, 139, 149, 158, 159, 160, 172, 173, 174, 176, 187, 188, 192, 197, 198, 206, 213, 218, 219, 232, 234, 253, 255, 266, 269, 307, 316, 335, 363, 372, 375, 391, 392, 397, 404, 406, 413, 420, 442, 444, 452, 468, 469, 479, 492, 493, 511, 512, 513, 515, 528, 530, 531, 537, 546, 567, 577, 581, 595, 606, 611, 612, 620, 626, 627, 645, 657, 658, 671, 693, 701, 702, 740, 747, 752, 756, 769, 771, 812, 832, 882, 898, 899, 909, 914, 946, 947, 948, 950, 969, 970, 971, 972, 974, 979, 987, 988, 995], "type": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 74, 80, 90, 92, 93, 94, 95, 96, 101, 103, 104, 106, 107, 114, 115, 120, 121, 122, 125, 126, 131, 132, 136, 154, 158, 160, 161, 162, 173, 213, 219, 221, 224, 255, 269, 293, 306, 316, 317, 319, 320, 321, 337, 341, 344, 348, 350, 352, 357, 361, 364, 379, 393, 400, 402, 403, 423, 455, 506, 507, 508, 511, 528, 540, 546, 555, 556, 557, 559, 560, 567, 577, 586, 595, 606, 613, 618, 620, 627, 628, 646, 656, 657, 658, 666, 693, 726, 739, 747, 749, 753, 754, 755, 773, 777, 780, 787, 789, 792, 797, 801, 804, 830, 909, 941, 942, 943, 946, 969, 970, 972, 980, 988, 995], "config": [0, 64, 201, 232, 255, 557, 606, 652, 671, 693], "except": [0, 163, 175, 177, 211, 255, 559, 606, 633, 693, 831, 858, 959, 970, 979, 988], "test": [0, 107, 606, 629, 636, 693], "util": [0, 97, 563, 606, 620, 693], "sql": [0, 28, 49, 53, 105, 174, 255, 606], "These": [1, 30, 133, 255, 369, 594, 809], "allow": [1, 29, 30, 55, 80, 91, 114, 116, 117, 118, 119, 126, 128, 135, 172, 175, 176, 197, 198, 199, 219, 224, 234, 255, 358, 365, 368, 454, 469, 511, 512, 513, 595, 632, 633, 637, 641, 657, 658, 666, 672, 693, 798, 805, 808, 884, 899, 901, 946, 947, 948, 971, 988, 996], "you": [1, 12, 30, 34, 54, 64, 72, 90, 92, 93, 94, 96, 101, 103, 104, 107, 108, 112, 114, 121, 132, 133, 136, 145, 149, 160, 161, 172, 175, 185, 197, 198, 215, 218, 223, 237, 255, 269, 288, 306, 319, 320, 321, 354, 355, 361, 365, 368, 385, 398, 421, 423, 454, 459, 460, 461, 462, 463, 465, 466, 467, 496, 499, 511, 513, 542, 552, 561, 577, 595, 613, 616, 627, 628, 629, 633, 636, 656, 658, 677, 693, 701, 702, 721, 753, 754, 755, 794, 795, 801, 805, 808, 836, 884, 931, 934, 946, 948, 970, 979, 988, 996], "regist": [1, 49, 51, 52, 53, 54, 65, 66, 67, 68, 127, 129, 995], "custom": [1, 30, 65, 66, 67, 68, 127, 128, 129, 136, 237, 255, 269, 306, 365, 368, 421, 458, 540, 568, 595, 637, 677, 693, 702, 739, 805, 808, 888, 988, 996], "dedic": [1, 91, 172, 198, 255], "namespac": [1, 254, 594, 606, 692], "underli": [1, 76, 83, 90, 92, 93, 94, 96, 112, 123, 126, 128, 149, 172, 173, 198, 213, 255, 310, 335, 336, 340, 343, 345, 346, 347, 349, 351, 353, 356, 359, 360, 361, 363, 370, 371, 372, 373, 454, 468, 486, 488, 595, 693, 701, 742, 771, 772, 776, 779, 781, 782, 786, 788, 791, 793, 796, 799, 800, 801, 803, 810, 811, 812, 813, 884, 898, 909, 921, 923, 965, 970, 988], "polar": [1, 255, 594, 595, 600, 606, 693, 988, 995], "class": [1, 2, 3, 4, 14, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 95, 123, 124, 219, 255, 595, 600, 606, 693, 969, 970, 988, 995], "without": [1, 5, 73, 97, 106, 109, 113, 115, 119, 226, 227, 255, 269, 330, 362, 459, 460, 461, 462, 463, 465, 466, 467, 580, 595, 668, 693, 763, 769, 802, 832, 880, 988], "requir": [1, 29, 30, 34, 64, 95, 121, 122, 141, 197, 219, 255, 307, 376, 377, 378, 474, 511, 512, 513, 531, 577, 595, 658, 693, 740, 817, 818, 819, 908, 946, 947, 948, 970, 971, 974, 988], "subclass": [1, 255], "mixin": 1, "expr": [1, 64, 65, 66, 67, 68, 69, 74, 101, 131, 132, 148, 150, 152, 174, 175, 185, 189, 197, 201, 232, 255, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 595, 596, 597, 600, 601, 602, 603, 619, 621, 623, 632, 633, 647, 652, 655, 671, 693, 719, 721, 763, 772, 823, 907, 921, 925, 944, 960, 988], "ar": [1, 5, 10, 14, 17, 25, 29, 30, 54, 55, 64, 74, 75, 82, 89, 90, 91, 92, 93, 94, 95, 96, 97, 103, 104, 105, 106, 107, 108, 112, 114, 115, 116, 117, 119, 121, 122, 124, 126, 133, 135, 136, 137, 141, 145, 147, 150, 154, 159, 160, 161, 172, 175, 176, 181, 182, 187, 197, 198, 201, 202, 208, 214, 219, 222, 227, 228, 232, 235, 255, 265, 306, 326, 328, 329, 333, 334, 362, 369, 374, 376, 377, 378, 398, 400, 402, 403, 404, 406, 407, 408, 411, 423, 445, 452, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 476, 479, 481, 482, 496, 499, 500, 522, 538, 539, 542, 543, 545, 547, 548, 549, 554, 569, 572, 581, 583, 584, 588, 589, 591, 594, 595, 596, 597, 600, 601, 602, 603, 606, 609, 616, 621, 626, 627, 628, 629, 633, 636, 637, 641, 642, 646, 649, 652, 653, 657, 658, 660, 665, 668, 671, 672, 675, 693, 699, 701, 739, 761, 762, 802, 809, 815, 816, 817, 818, 819, 829, 836, 840, 843, 844, 846, 847, 848, 849, 856, 882, 886, 888, 894, 911, 914, 931, 934, 935, 958, 970, 971, 979, 982, 984, 988, 989, 992, 993, 994, 996], "all": [1, 7, 14, 17, 22, 25, 30, 35, 51, 64, 71, 74, 90, 93, 95, 96, 98, 103, 104, 106, 107, 108, 112, 114, 116, 117, 123, 124, 128, 142, 145, 151, 163, 168, 170, 172, 173, 176, 177, 181, 184, 185, 192, 197, 198, 207, 211, 216, 224, 226, 228, 255, 266, 267, 268, 288, 293, 303, 306, 308, 324, 330, 334, 379, 390, 393, 395, 397, 400, 403, 407, 408, 410, 414, 421, 422, 437, 443, 449, 452, 457, 474, 480, 482, 487, 493, 495, 498, 501, 502, 504, 510, 521, 534, 546, 554, 559, 561, 576, 583, 584, 588, 595, 600, 606, 613, 616, 618, 620, 622, 637, 641, 646, 656, 659, 666, 672, 693, 721, 726, 736, 739, 763, 765, 769, 831, 838, 853, 858, 882, 915, 922, 928, 930, 933, 936, 937, 939, 945, 959, 988, 995, 996], "support": [1, 29, 30, 34, 72, 90, 91, 92, 93, 94, 95, 96, 97, 105, 106, 107, 115, 123, 128, 133, 135, 172, 173, 198, 207, 208, 215, 219, 255, 301, 445, 480, 482, 505, 546, 595, 600, 659, 660, 693, 734, 915, 940, 971, 988, 995], "target": [1, 29, 30, 70, 255, 369, 492, 511, 512, 513, 927, 946, 947, 948], "thi": [1, 5, 7, 11, 12, 25, 27, 29, 30, 32, 34, 38, 49, 50, 54, 55, 64, 71, 72, 73, 75, 90, 92, 93, 94, 95, 96, 97, 100, 103, 104, 105, 106, 107, 108, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 128, 130, 133, 135, 136, 141, 145, 146, 147, 149, 154, 159, 160, 161, 162, 166, 168, 170, 171, 172, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 190, 191, 192, 197, 198, 199, 201, 205, 207, 209, 210, 213, 215, 218, 219, 223, 224, 226, 227, 228, 229, 230, 232, 233, 237, 238, 254, 255, 265, 268, 269, 270, 279, 288, 289, 293, 302, 306, 307, 314, 315, 317, 324, 330, 335, 346, 354, 355, 358, 361, 362, 365, 368, 372, 381, 396, 397, 398, 402, 414, 418, 419, 421, 427, 428, 429, 430, 431, 432, 440, 441, 445, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 465, 466, 467, 469, 471, 473, 474, 475, 480, 481, 482, 492, 497, 498, 503, 504, 510, 511, 513, 517, 529, 531, 532, 533, 534, 538, 539, 541, 542, 547, 550, 552, 554, 560, 561, 563, 569, 572, 580, 584, 595, 606, 607, 610, 613, 616, 618, 620, 626, 627, 628, 630, 633, 637, 641, 642, 646, 649, 652, 655, 656, 657, 658, 659, 666, 668, 671, 672, 673, 674, 677, 678, 692, 693, 701, 702, 711, 721, 722, 726, 735, 740, 746, 749, 763, 769, 771, 772, 782, 794, 795, 798, 801, 802, 805, 808, 812, 816, 821, 828, 829, 832, 837, 842, 843, 845, 850, 852, 854, 855, 857, 862, 864, 865, 866, 867, 869, 870, 872, 873, 875, 879, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 892, 895, 896, 897, 899, 902, 903, 904, 907, 908, 909, 910, 915, 916, 918, 927, 932, 933, 938, 939, 945, 946, 948, 952, 953, 957, 958, 965, 967, 969, 970, 971, 973, 974, 976, 978, 979, 988, 995, 996], "featur": [1, 34, 38, 55, 70, 255], "i": [1, 5, 11, 12, 14, 27, 29, 30, 31, 32, 33, 38, 49, 54, 55, 64, 69, 70, 71, 72, 73, 74, 77, 79, 80, 82, 86, 88, 90, 91, 92, 93, 94, 95, 96, 100, 103, 104, 105, 106, 108, 112, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 128, 130, 131, 135, 136, 145, 147, 155, 158, 159, 160, 161, 162, 163, 166, 167, 169, 171, 172, 173, 175, 176, 177, 179, 181, 182, 185, 187, 188, 189, 197, 198, 199, 207, 208, 209, 210, 211, 213, 219, 223, 224, 226, 227, 228, 229, 237, 238, 254, 255, 262, 265, 267, 268, 269, 270, 280, 288, 291, 301, 305, 306, 315, 324, 330, 336, 345, 358, 362, 365, 369, 376, 377, 378, 381, 393, 396, 398, 411, 418, 421, 423, 427, 430, 432, 445, 452, 454, 456, 459, 460, 461, 462, 463, 465, 466, 467, 469, 470, 471, 475, 476, 479, 480, 481, 482, 484, 486, 487, 492, 493, 495, 497, 498, 500, 501, 503, 504, 505, 508, 510, 511, 512, 513, 515, 517, 534, 535, 538, 539, 541, 542, 546, 547, 549, 550, 552, 553, 554, 561, 567, 569, 572, 574, 577, 578, 579, 580, 581, 582, 584, 587, 588, 595, 613, 616, 618, 620, 626, 627, 628, 631, 633, 635, 637, 641, 642, 646, 656, 657, 658, 659, 660, 661, 666, 668, 669, 674, 677, 678, 693, 700, 701, 702, 721, 724, 734, 738, 739, 763, 772, 781, 798, 802, 805, 809, 816, 817, 818, 819, 821, 829, 830, 831, 832, 835, 837, 839, 845, 850, 851, 852, 854, 855, 856, 858, 880, 882, 884, 886, 899, 900, 901, 902, 903, 904, 910, 911, 914, 915, 918, 921, 922, 927, 928, 930, 932, 933, 935, 936, 938, 939, 940, 943, 945, 946, 947, 948, 950, 952, 959, 965, 970, 971, 977, 978, 979, 988, 995, 996], "primarili": 1, "intend": 1, "us": [1, 9, 11, 12, 17, 22, 23, 27, 28, 30, 34, 49, 50, 51, 52, 54, 55, 64, 72, 73, 74, 91, 93, 94, 96, 98, 99, 101, 103, 104, 105, 106, 107, 108, 112, 114, 115, 116, 117, 118, 119, 123, 124, 125, 126, 127, 128, 130, 131, 132, 136, 143, 145, 150, 151, 154, 159, 160, 161, 168, 170, 172, 173, 175, 179, 181, 184, 185, 188, 189, 197, 199, 201, 208, 209, 210, 216, 217, 219, 223, 224, 226, 227, 228, 229, 232, 235, 237, 255, 263, 269, 270, 280, 288, 306, 310, 311, 315, 317, 330, 333, 334, 361, 365, 368, 372, 374, 376, 377, 378, 384, 385, 397, 398, 411, 421, 423, 426, 445, 452, 454, 456, 459, 460, 461, 462, 463, 465, 466, 467, 469, 471, 474, 475, 479, 481, 482, 484, 486, 488, 489, 490, 492, 493, 496, 497, 501, 503, 505, 507, 509, 511, 512, 513, 515, 535, 538, 539, 540, 541, 542, 546, 548, 549, 552, 554, 561, 563, 567, 569, 572, 574, 577, 578, 579, 580, 581, 582, 583, 584, 587, 594, 595, 606, 613, 615, 616, 621, 622, 626, 627, 628, 629, 633, 635, 636, 641, 652, 658, 660, 661, 666, 668, 669, 671, 675, 677, 693, 702, 721, 739, 742, 743, 749, 763, 801, 805, 808, 812, 815, 817, 818, 819, 823, 824, 829, 832, 836, 856, 863, 882, 884, 886, 899, 902, 903, 904, 908, 910, 914, 918, 921, 923, 924, 927, 928, 931, 932, 936, 938, 940, 942, 946, 947, 948, 950, 960, 966, 968, 969, 970, 971, 978, 979, 988, 995, 996], "librari": [1, 76, 83, 421, 595, 996], "author": 1, "domain": [1, 493, 928], "specif": [1, 25, 29, 30, 90, 92, 94, 96, 103, 105, 106, 115, 125, 126, 172, 255, 365, 368, 458, 511, 512, 513, 515, 595, 693, 805, 808, 888, 946, 947, 948, 950, 988, 996], "capabl": [1, 30, 255], "which": [1, 17, 26, 27, 30, 31, 32, 33, 34, 64, 65, 66, 67, 68, 93, 103, 104, 105, 106, 107, 114, 115, 121, 127, 129, 137, 145, 149, 160, 161, 218, 222, 224, 255, 265, 306, 365, 382, 398, 400, 403, 404, 406, 407, 408, 432, 459, 460, 461, 462, 463, 465, 466, 467, 500, 588, 595, 609, 616, 618, 627, 628, 657, 658, 665, 666, 674, 693, 701, 739, 805, 822, 836, 840, 844, 846, 847, 848, 849, 902, 935, 988, 996], "mai": [1, 29, 38, 72, 73, 90, 92, 93, 94, 96, 103, 106, 108, 115, 116, 119, 136, 147, 149, 175, 204, 205, 219, 226, 227, 255, 269, 300, 305, 306, 330, 335, 346, 362, 431, 459, 460, 461, 462, 463, 465, 466, 467, 472, 473, 511, 513, 552, 553, 561, 576, 595, 633, 637, 654, 655, 658, 668, 673, 677, 693, 701, 702, 733, 738, 763, 771, 782, 802, 816, 832, 880, 906, 907, 946, 948, 988, 996], "exist": [1, 28, 29, 30, 64, 106, 115, 126, 232, 255, 336, 369, 671, 693, 772], "belong": [1, 160, 255, 627, 693], "core": [1, 219, 255, 996], "cannot": [1, 91, 103, 104, 107, 108, 121, 130, 136, 199, 237, 255, 310, 423, 469, 488, 507, 519, 595, 656, 677, 693, 702, 742, 899, 923, 942, 988], "overrid": [1, 30, 90, 92, 93, 94, 95, 96, 103, 123, 124, 128, 130, 255, 423, 595, 693, 863, 988], "str": [1, 6, 8, 11, 13, 14, 17, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 49, 50, 51, 52, 53, 54, 55, 64, 65, 66, 67, 68, 70, 73, 74, 75, 90, 92, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 124, 126, 127, 128, 129, 131, 132, 137, 140, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 168, 170, 171, 172, 174, 175, 178, 179, 180, 181, 182, 183, 185, 187, 189, 191, 193, 194, 195, 196, 197, 198, 199, 202, 204, 205, 207, 208, 209, 210, 211, 214, 215, 216, 217, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 262, 263, 264, 269, 284, 285, 286, 291, 292, 293, 301, 304, 306, 332, 337, 358, 361, 362, 365, 368, 369, 379, 383, 385, 387, 396, 398, 405, 422, 423, 431, 433, 445, 447, 449, 455, 457, 459, 460, 461, 462, 463, 465, 466, 467, 473, 474, 481, 482, 518, 519, 521, 524, 536, 537, 538, 540, 541, 544, 546, 548, 549, 550, 551, 552, 553, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 568, 570, 571, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 585, 586, 587, 595, 601, 609, 613, 614, 615, 616, 618, 619, 620, 623, 625, 626, 627, 628, 630, 632, 633, 641, 642, 646, 648, 649, 650, 653, 655, 656, 657, 658, 659, 660, 665, 666, 667, 668, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 698, 718, 719, 726, 739, 747, 764, 765, 773, 798, 801, 802, 805, 808, 809, 824, 863, 872, 873, 880, 885, 902, 903, 953, 955, 966, 967, 968, 988, 992, 995, 996], "dt": [1, 64, 74, 161, 255, 557, 603, 628, 693, 994], "attempt": [1, 218, 255], "do": [1, 30, 64, 71, 72, 101, 114, 132, 149, 175, 213, 223, 226, 255, 288, 330, 498, 504, 510, 577, 595, 613, 618, 633, 637, 646, 656, 657, 658, 693, 701, 721, 763, 933, 939, 945, 970, 979, 988], "so": [1, 55, 105, 114, 130, 158, 160, 161, 189, 255, 280, 291, 306, 315, 398, 498, 504, 510, 595, 627, 628, 693, 724, 933, 939, 945], "rais": [1, 13, 17, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 121, 122, 197, 255, 305, 310, 361, 431, 486, 488, 500, 511, 512, 513, 515, 567, 738, 742, 801, 921, 923, 935, 946, 947, 948, 950, 970, 979, 988], "an": [1, 5, 25, 28, 29, 30, 38, 65, 67, 68, 69, 71, 74, 76, 80, 81, 83, 90, 101, 103, 104, 105, 106, 107, 109, 112, 114, 116, 124, 126, 128, 131, 132, 136, 138, 139, 147, 150, 152, 154, 160, 161, 172, 173, 175, 185, 189, 195, 197, 213, 218, 226, 232, 237, 255, 264, 265, 269, 286, 288, 291, 305, 306, 310, 316, 319, 320, 321, 325, 326, 327, 328, 329, 330, 336, 361, 365, 372, 382, 385, 410, 421, 422, 432, 450, 458, 459, 460, 461, 462, 463, 465, 466, 467, 486, 488, 493, 511, 512, 513, 515, 524, 530, 538, 539, 542, 546, 554, 558, 563, 567, 569, 572, 576, 577, 580, 583, 584, 588, 595, 606, 611, 612, 613, 618, 620, 623, 627, 628, 633, 637, 646, 656, 671, 672, 677, 693, 702, 719, 721, 724, 738, 742, 747, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 772, 801, 805, 812, 816, 822, 845, 888, 889, 890, 891, 892, 893, 895, 896, 897, 902, 903, 921, 923, 928, 946, 947, 948, 950, 970, 979, 988, 995], "attributeerror": 1, "howev": [1, 93, 147, 255, 816, 988], "can": [1, 12, 30, 54, 64, 74, 81, 93, 103, 104, 107, 108, 112, 114, 116, 118, 119, 124, 125, 126, 128, 130, 131, 133, 136, 137, 146, 154, 160, 161, 168, 170, 185, 189, 201, 208, 218, 222, 223, 226, 232, 237, 255, 269, 288, 306, 315, 326, 329, 330, 354, 355, 358, 361, 369, 382, 397, 398, 431, 437, 454, 459, 460, 461, 462, 463, 465, 466, 467, 471, 474, 476, 479, 482, 495, 498, 504, 510, 511, 534, 542, 543, 546, 561, 563, 588, 594, 595, 609, 613, 618, 627, 628, 652, 660, 665, 671, 673, 677, 693, 702, 721, 739, 763, 794, 795, 798, 801, 809, 822, 836, 868, 884, 902, 903, 904, 908, 911, 914, 930, 933, 939, 945, 946, 988, 995], "other": [1, 17, 30, 54, 74, 103, 104, 107, 114, 121, 122, 145, 149, 155, 174, 175, 181, 182, 197, 201, 227, 232, 253, 255, 262, 266, 268, 280, 284, 319, 320, 321, 332, 375, 389, 391, 392, 398, 402, 413, 420, 423, 427, 430, 436, 438, 442, 444, 482, 520, 528, 530, 537, 538, 539, 545, 547, 548, 554, 569, 572, 583, 584, 595, 606, 616, 632, 633, 641, 642, 652, 668, 671, 672, 693, 701, 717, 753, 754, 755, 767, 843, 901, 972, 980, 987, 988], "onli": [1, 17, 25, 30, 49, 51, 55, 64, 70, 72, 103, 104, 106, 107, 108, 112, 114, 115, 116, 117, 118, 126, 128, 133, 136, 145, 160, 161, 172, 175, 179, 198, 210, 215, 217, 228, 255, 263, 269, 280, 315, 318, 319, 320, 321, 358, 379, 388, 454, 532, 595, 613, 616, 627, 628, 629, 633, 636, 693, 750, 753, 754, 755, 798, 827, 845, 884, 965, 968, 988, 995, 996], "gener": [1, 98, 105, 123, 124, 125, 126, 128, 131, 141, 189, 199, 216, 223, 255, 469, 475, 577, 595, 693, 899, 910, 966, 988, 996], "userwarn": 1, "pl": [1, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32, 33, 34, 49, 50, 51, 52, 53, 54, 55, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 104, 105, 106, 107, 108, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 581, 582, 583, 584, 585, 586, 587, 588, 595, 607, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 720, 721, 722, 725, 726, 728, 733, 734, 735, 737, 739, 746, 747, 749, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 818, 819, 822, 823, 824, 825, 827, 830, 831, 832, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 876, 877, 878, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 910, 911, 912, 913, 915, 916, 917, 918, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 950, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 988, 995, 996], "register_expr_namespac": [1, 65, 67, 68], "greet": 1, "def": [1, 65, 66, 67, 68, 124, 125, 126, 128, 188, 223, 255, 262, 447, 493, 537, 568, 595, 645, 693, 928, 996], "__init__": [1, 2, 3, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 123, 995], "self": [1, 50, 51, 52, 54, 65, 66, 67, 68, 71, 136, 137, 138, 139, 141, 142, 143, 145, 148, 149, 150, 151, 152, 159, 160, 161, 163, 165, 166, 167, 174, 175, 177, 178, 179, 180, 181, 182, 183, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 199, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 308, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 595, 609, 610, 611, 612, 613, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 693, 701, 702, 747, 756, 825, 833, 862, 863, 874, 877, 878, 883, 902, 903, 904, 916, 976, 980, 988], "_expr": [1, 66], "hello": [1, 17, 50, 53, 498, 504, 510, 538, 726, 933, 939, 945], "return": [1, 25, 27, 30, 31, 32, 33, 49, 53, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 82, 84, 89, 90, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 112, 113, 114, 115, 125, 131, 132, 136, 137, 138, 141, 144, 145, 146, 147, 148, 150, 151, 154, 158, 159, 160, 161, 163, 165, 171, 172, 173, 174, 176, 177, 184, 185, 187, 188, 189, 197, 198, 199, 211, 212, 218, 219, 222, 223, 224, 228, 232, 234, 237, 240, 244, 249, 255, 265, 267, 271, 272, 273, 274, 275, 276, 279, 280, 282, 283, 285, 289, 291, 292, 293, 304, 305, 309, 311, 314, 322, 323, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 367, 369, 370, 371, 373, 381, 394, 398, 400, 401, 402, 403, 404, 406, 407, 408, 415, 419, 423, 432, 437, 447, 455, 456, 469, 470, 476, 477, 478, 485, 487, 489, 491, 492, 493, 495, 496, 497, 499, 500, 503, 505, 506, 507, 508, 517, 523, 524, 525, 526, 527, 529, 530, 532, 533, 534, 537, 538, 539, 540, 542, 543, 546, 555, 556, 557, 563, 565, 567, 568, 577, 580, 583, 585, 586, 588, 595, 609, 611, 613, 616, 617, 618, 620, 627, 628, 629, 635, 636, 637, 645, 646, 656, 657, 658, 663, 664, 665, 666, 671, 674, 680, 684, 689, 693, 698, 699, 700, 702, 709, 710, 712, 713, 715, 716, 718, 722, 724, 725, 726, 737, 738, 741, 743, 746, 752, 764, 765, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 806, 807, 809, 810, 811, 813, 816, 821, 829, 831, 832, 838, 840, 841, 843, 844, 846, 847, 848, 849, 853, 855, 858, 862, 863, 868, 880, 886, 887, 899, 900, 901, 903, 911, 920, 921, 922, 924, 926, 927, 928, 930, 931, 932, 934, 935, 938, 940, 941, 942, 943, 952, 959, 961, 973, 975, 976, 980, 988, 995, 996], "lit": [1, 101, 132, 398, 410, 552, 561, 577, 588, 595, 824, 988], "alia": [1, 11, 64, 66, 68, 160, 161, 177, 225, 232, 255, 262, 266, 269, 286, 288, 314, 319, 320, 321, 325, 326, 327, 328, 329, 331, 335, 336, 337, 340, 341, 342, 344, 346, 347, 348, 350, 352, 357, 358, 359, 361, 362, 363, 364, 365, 367, 368, 369, 371, 372, 375, 385, 387, 389, 391, 392, 396, 398, 401, 402, 410, 413, 414, 415, 420, 422, 423, 434, 436, 438, 442, 444, 446, 448, 449, 454, 470, 486, 487, 490, 492, 493, 496, 499, 505, 507, 508, 509, 518, 519, 520, 521, 528, 529, 530, 536, 537, 538, 539, 540, 544, 545, 547, 548, 552, 553, 554, 557, 558, 561, 562, 568, 569, 572, 576, 583, 584, 588, 595, 627, 628, 630, 636, 667, 671, 693, 721, 771, 773, 778, 798, 801, 805, 807, 812, 858, 927, 928, 942, 943, 988], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 17, 50, 53, 498, 504, 510, 726, 933, 939, 945], "select": [1, 28, 49, 50, 51, 64, 65, 66, 67, 69, 102, 103, 104, 105, 106, 108, 112, 114, 119, 125, 136, 171, 175, 185, 188, 197, 207, 220, 225, 228, 255, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 302, 303, 306, 307, 308, 314, 318, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 367, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 382, 386, 388, 390, 393, 395, 396, 397, 399, 400, 402, 403, 405, 409, 410, 411, 412, 414, 416, 417, 418, 419, 421, 422, 424, 425, 426, 435, 437, 439, 440, 441, 443, 444, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 491, 492, 493, 494, 495, 497, 498, 500, 503, 504, 506, 507, 508, 510, 511, 514, 516, 518, 519, 521, 522, 525, 526, 527, 529, 531, 532, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 546, 547, 549, 550, 551, 552, 553, 554, 557, 559, 560, 561, 562, 563, 565, 569, 570, 571, 572, 573, 574, 576, 577, 581, 582, 583, 584, 585, 587, 595, 614, 630, 633, 645, 659, 667, 672, 674, 693, 721, 801, 902, 903, 915, 930, 946, 960, 988, 995], "shape": [1, 9, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 49, 50, 51, 53, 55, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 87, 90, 92, 93, 94, 95, 96, 97, 98, 101, 114, 119, 126, 128, 131, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 156, 157, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 174, 175, 178, 179, 180, 181, 183, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 199, 201, 204, 205, 207, 208, 209, 210, 211, 212, 214, 216, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 565, 568, 569, 570, 571, 572, 573, 574, 576, 577, 580, 581, 582, 583, 584, 585, 587, 588, 595, 609, 611, 613, 615, 616, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 652, 654, 655, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 720, 721, 722, 725, 726, 728, 733, 734, 735, 737, 739, 746, 747, 749, 750, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 818, 819, 822, 823, 824, 825, 827, 830, 831, 832, 835, 836, 838, 840, 843, 844, 846, 847, 848, 849, 853, 855, 862, 863, 868, 876, 877, 878, 880, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 902, 903, 906, 910, 911, 912, 913, 915, 916, 917, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 950, 957, 959, 960, 961, 962, 963, 966, 967, 968, 972, 973, 974, 975, 976, 977, 980, 988, 995], "3": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 34, 49, 51, 52, 54, 55, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 98, 101, 105, 107, 114, 119, 120, 121, 122, 125, 126, 131, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 262, 263, 264, 265, 269, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 308, 314, 316, 317, 318, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 345, 351, 353, 359, 360, 361, 362, 363, 365, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 436, 437, 438, 442, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 479, 481, 482, 483, 486, 489, 490, 492, 493, 494, 496, 499, 501, 505, 506, 507, 508, 509, 512, 515, 518, 519, 520, 521, 523, 524, 525, 529, 532, 533, 534, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 561, 562, 565, 566, 567, 568, 569, 570, 571, 572, 574, 576, 577, 580, 581, 582, 583, 584, 585, 587, 588, 595, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 698, 701, 702, 703, 705, 706, 707, 709, 710, 711, 712, 713, 720, 721, 722, 725, 728, 733, 734, 735, 737, 739, 746, 747, 749, 750, 751, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 771, 772, 773, 776, 777, 778, 779, 781, 783, 784, 785, 787, 789, 790, 791, 793, 797, 799, 801, 802, 803, 805, 807, 808, 809, 811, 812, 816, 818, 819, 822, 823, 824, 825, 827, 830, 831, 832, 835, 836, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 876, 877, 878, 880, 881, 882, 885, 886, 887, 888, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 910, 912, 913, 914, 915, 916, 918, 924, 925, 927, 928, 929, 931, 934, 936, 940, 944, 947, 950, 957, 958, 959, 960, 961, 962, 963, 965, 966, 969, 970, 971, 973, 974, 975, 976, 977, 978, 980, 988, 995, 996], "1": [1, 9, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 34, 49, 50, 51, 52, 53, 54, 55, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 98, 101, 103, 104, 105, 106, 107, 108, 114, 115, 119, 120, 121, 122, 123, 126, 128, 131, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 314, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 595, 609, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 720, 721, 722, 724, 725, 728, 733, 734, 735, 737, 739, 746, 747, 749, 750, 751, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 818, 819, 822, 823, 824, 825, 827, 830, 831, 832, 835, 836, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 855, 857, 862, 864, 865, 866, 867, 868, 869, 870, 876, 877, 878, 880, 881, 882, 885, 886, 887, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 927, 929, 930, 936, 942, 943, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 988, 995, 996], "2": [1, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 34, 49, 51, 52, 54, 55, 64, 65, 66, 67, 68, 69, 72, 73, 75, 90, 92, 93, 94, 95, 96, 97, 98, 105, 114, 119, 120, 121, 122, 125, 126, 128, 131, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 176, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 266, 267, 268, 269, 270, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 314, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 336, 337, 341, 343, 344, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 360, 361, 362, 363, 364, 365, 368, 369, 372, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 436, 437, 438, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 479, 480, 481, 482, 483, 485, 487, 490, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 504, 505, 507, 508, 509, 510, 511, 513, 514, 516, 518, 519, 520, 521, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 571, 572, 573, 574, 576, 580, 581, 582, 583, 584, 585, 587, 588, 595, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 632, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 698, 701, 702, 704, 708, 709, 710, 711, 712, 713, 720, 721, 722, 725, 726, 728, 733, 734, 735, 737, 739, 746, 749, 750, 751, 752, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 772, 774, 775, 779, 784, 785, 791, 793, 794, 795, 800, 801, 802, 803, 806, 809, 811, 813, 815, 816, 817, 818, 819, 822, 823, 824, 825, 827, 830, 831, 832, 835, 836, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 857, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 876, 877, 878, 880, 881, 882, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 910, 912, 914, 915, 916, 917, 918, 920, 922, 927, 928, 929, 930, 933, 934, 935, 936, 937, 939, 942, 943, 945, 946, 948, 957, 958, 959, 960, 961, 962, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 977, 978, 980, 988, 995, 996], "column_0": [1, 136, 223, 255], "register_dataframe_namespac": [1, 66, 67, 68], "split": [1, 65, 173, 255, 507, 508, 942, 943], "splitfram": [1, 65], "df": [1, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 34, 49, 50, 65, 66, 69, 90, 91, 92, 93, 94, 95, 96, 97, 98, 104, 114, 124, 126, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 302, 303, 306, 307, 308, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 565, 568, 569, 570, 571, 572, 573, 574, 576, 580, 581, 582, 583, 584, 585, 587, 588, 595, 628, 667, 668, 674, 677, 680, 689, 693, 721, 749, 801, 930, 937, 942, 943, 967, 988, 996], "_df": [1, 65], "by_alternate_row": 1, "list": [1, 29, 30, 37, 49, 53, 64, 65, 67, 71, 73, 90, 92, 93, 94, 96, 97, 100, 102, 103, 104, 105, 106, 108, 112, 114, 115, 124, 125, 126, 128, 131, 140, 143, 146, 147, 148, 152, 157, 159, 160, 165, 172, 184, 187, 197, 198, 201, 208, 214, 215, 223, 224, 225, 226, 232, 235, 236, 255, 263, 284, 287, 288, 289, 292, 293, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 381, 387, 395, 421, 432, 433, 445, 455, 456, 458, 459, 460, 461, 462, 463, 465, 466, 467, 473, 481, 482, 493, 506, 518, 519, 524, 528, 543, 546, 547, 554, 558, 567, 583, 584, 595, 614, 615, 617, 619, 623, 626, 627, 641, 652, 660, 666, 667, 671, 672, 675, 676, 693, 714, 717, 720, 721, 722, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 751, 764, 816, 821, 825, 828, 832, 833, 843, 880, 886, 888, 889, 890, 891, 892, 893, 895, 896, 897, 900, 928, 941, 960, 969, 972, 988, 996], "with_row_count": [1, 255, 423, 595, 693, 903, 988], "name": [1, 15, 19, 21, 28, 30, 32, 50, 51, 52, 53, 54, 65, 66, 67, 68, 72, 73, 74, 79, 90, 92, 93, 94, 95, 96, 98, 101, 102, 103, 104, 106, 107, 108, 109, 112, 113, 114, 116, 117, 118, 122, 123, 124, 126, 127, 128, 129, 131, 132, 136, 137, 140, 143, 144, 145, 148, 153, 156, 158, 159, 171, 172, 174, 175, 181, 187, 189, 193, 197, 198, 200, 201, 208, 214, 216, 218, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 255, 264, 269, 306, 362, 369, 379, 398, 410, 422, 431, 433, 445, 449, 482, 493, 518, 519, 521, 538, 539, 541, 543, 545, 546, 547, 548, 549, 551, 554, 559, 565, 566, 569, 572, 574, 575, 577, 578, 579, 581, 583, 584, 585, 595, 609, 614, 615, 616, 619, 626, 632, 633, 641, 649, 651, 652, 660, 665, 666, 667, 668, 671, 673, 674, 675, 693, 698, 739, 752, 764, 802, 809, 880, 885, 927, 928, 936, 953, 955, 966, 967, 971, 988, 995, 996], "n": [1, 11, 14, 22, 33, 37, 39, 51, 52, 65, 66, 67, 68, 74, 100, 101, 103, 104, 114, 132, 136, 138, 149, 160, 163, 172, 173, 177, 198, 199, 209, 211, 212, 215, 217, 229, 240, 249, 255, 287, 292, 304, 306, 314, 330, 331, 335, 336, 342, 367, 372, 382, 394, 415, 446, 447, 455, 469, 479, 484, 501, 507, 508, 513, 523, 525, 529, 530, 535, 537, 549, 563, 565, 574, 577, 578, 579, 581, 582, 585, 587, 595, 611, 613, 627, 629, 636, 661, 663, 664, 669, 680, 689, 693, 701, 720, 725, 737, 739, 746, 752, 763, 766, 771, 772, 778, 807, 812, 822, 831, 858, 876, 899, 914, 918, 936, 942, 943, 948, 959, 961, 968, 973, 978, 988, 995, 996], "filter": [1, 65, 106, 114, 115, 119, 145, 168, 169, 170, 237, 255, 490, 509, 536, 542, 561, 595, 616, 620, 630, 677, 693, 902, 988], "col": [1, 11, 27, 30, 64, 65, 66, 67, 69, 94, 96, 114, 124, 126, 136, 148, 152, 159, 160, 161, 169, 171, 185, 188, 197, 201, 208, 225, 232, 235, 255, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 302, 303, 306, 307, 314, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 382, 385, 386, 387, 388, 389, 391, 392, 396, 397, 398, 399, 401, 402, 404, 405, 406, 409, 410, 411, 412, 413, 416, 417, 418, 419, 420, 423, 424, 425, 426, 435, 436, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 516, 517, 518, 519, 520, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 545, 547, 548, 552, 553, 554, 557, 560, 561, 562, 563, 564, 569, 572, 575, 576, 584, 588, 595, 619, 623, 626, 627, 628, 630, 645, 652, 660, 667, 671, 672, 675, 693, 721, 749, 798, 801, 886, 902, 903, 930, 946, 988, 996], "0": [1, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 34, 49, 54, 64, 65, 66, 68, 69, 73, 74, 98, 101, 103, 104, 105, 107, 108, 112, 114, 116, 117, 118, 119, 120, 123, 124, 125, 126, 128, 131, 132, 136, 138, 139, 141, 142, 143, 146, 150, 151, 154, 155, 157, 158, 159, 160, 162, 166, 171, 172, 173, 174, 176, 178, 179, 180, 183, 184, 185, 186, 189, 190, 191, 195, 199, 200, 201, 205, 207, 208, 209, 210, 216, 217, 218, 219, 220, 223, 226, 228, 229, 232, 233, 235, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 261, 263, 266, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 286, 288, 291, 297, 306, 316, 318, 320, 321, 322, 323, 325, 330, 333, 334, 343, 347, 348, 350, 351, 357, 363, 364, 375, 376, 377, 378, 380, 382, 383, 384, 388, 389, 391, 392, 393, 397, 400, 403, 404, 406, 407, 408, 410, 411, 413, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 435, 436, 438, 440, 441, 442, 443, 444, 446, 447, 448, 451, 452, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 474, 476, 477, 478, 479, 483, 484, 492, 493, 511, 517, 520, 522, 526, 527, 528, 530, 535, 542, 543, 544, 545, 547, 549, 551, 552, 556, 558, 561, 566, 570, 571, 574, 575, 576, 581, 586, 587, 588, 595, 611, 612, 615, 617, 621, 622, 626, 627, 632, 635, 640, 644, 646, 647, 651, 652, 655, 656, 658, 660, 661, 669, 671, 672, 673, 675, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 693, 703, 704, 705, 706, 707, 708, 709, 711, 713, 721, 724, 739, 747, 750, 752, 757, 758, 763, 764, 765, 767, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 796, 797, 803, 804, 815, 817, 818, 819, 823, 827, 830, 832, 840, 842, 844, 846, 847, 848, 849, 855, 856, 862, 865, 866, 876, 880, 881, 882, 888, 890, 891, 893, 894, 895, 897, 898, 899, 911, 912, 913, 917, 918, 920, 927, 928, 930, 946, 952, 962, 963, 966, 971, 972, 976, 978, 979, 988, 996], "drop": [1, 93, 136, 144, 145, 224, 232, 255, 287, 331, 333, 334, 511, 595, 616, 666, 671, 693, 720, 766, 768, 769, 946, 988], "aaa": [1, 30, 255, 486, 518, 519, 921], "bbb": [1, 30, 255, 518, 519], "ccc": [1, 30, 255, 518, 519], "ddd": [1, 30, 255, 518, 519], "eee": [1, 30, 255], "fff": 1, "column": [1, 14, 15, 18, 19, 21, 30, 32, 55, 64, 65, 72, 73, 74, 77, 79, 90, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 108, 109, 112, 113, 114, 115, 116, 117, 118, 121, 126, 131, 132, 135, 136, 137, 143, 144, 145, 146, 148, 153, 156, 158, 159, 160, 161, 165, 166, 171, 172, 174, 175, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 200, 201, 202, 208, 209, 210, 214, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 235, 255, 265, 267, 269, 279, 284, 289, 302, 305, 306, 336, 340, 343, 345, 346, 347, 349, 351, 353, 356, 359, 360, 363, 365, 368, 370, 371, 373, 379, 381, 385, 387, 398, 410, 423, 429, 431, 433, 445, 449, 453, 455, 456, 459, 460, 461, 462, 463, 465, 466, 467, 474, 481, 482, 491, 507, 508, 511, 512, 513, 515, 521, 536, 538, 539, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 559, 560, 561, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 595, 609, 615, 616, 617, 619, 626, 627, 628, 632, 633, 637, 638, 639, 640, 641, 643, 644, 645, 647, 649, 651, 652, 653, 660, 661, 662, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 693, 699, 700, 717, 722, 735, 738, 764, 774, 775, 776, 779, 781, 782, 786, 788, 791, 793, 796, 799, 800, 803, 805, 806, 808, 810, 811, 813, 821, 880, 886, 908, 926, 942, 943, 946, 947, 948, 950, 957, 966, 967, 988, 996], "txt": [1, 11, 114], "utf8": [1, 9, 17, 55, 75, 93, 97, 103, 104, 114, 123, 125, 128, 146, 147, 148, 154, 200, 218, 255, 293, 365, 368, 381, 423, 485, 489, 492, 493, 495, 496, 505, 506, 507, 508, 511, 512, 513, 515, 546, 548, 595, 617, 619, 651, 693, 726, 805, 808, 821, 854, 920, 924, 927, 928, 930, 931, 940, 941, 942, 943, 946, 947, 948, 950, 988], "register_lazyframe_namespac": [1, 65, 66, 68], "dtypeoper": [1, 67], "ldf": [1, 67, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689], "_ldf": [1, 67], "upcast_integer_typ": [1, 67], "with_column": [1, 11, 67, 131, 161, 188, 255, 262, 269, 280, 288, 316, 317, 319, 320, 321, 326, 329, 331, 361, 365, 368, 375, 389, 391, 392, 393, 397, 398, 401, 404, 406, 407, 408, 410, 413, 420, 422, 423, 436, 438, 442, 445, 446, 447, 448, 486, 490, 493, 496, 499, 501, 502, 505, 507, 508, 509, 517, 520, 528, 530, 537, 540, 542, 545, 548, 554, 558, 568, 584, 588, 595, 628, 645, 693, 721, 749, 801], "tp": [1, 67], "cast": [1, 66, 67, 75, 90, 154, 160, 161, 188, 219, 232, 255, 268, 317, 328, 329, 335, 365, 368, 423, 444, 447, 454, 494, 495, 517, 522, 528, 548, 595, 627, 628, 645, 671, 693, 749, 761, 762, 771, 805, 808, 884, 929, 930, 958, 967, 972, 988], "int64": [1, 30, 32, 66, 67, 97, 103, 146, 154, 160, 161, 188, 200, 213, 219, 255, 328, 329, 341, 344, 348, 350, 352, 357, 364, 379, 447, 454, 494, 522, 528, 542, 546, 559, 567, 577, 583, 595, 617, 627, 628, 645, 651, 674, 693, 761, 762, 777, 780, 787, 789, 792, 797, 804, 884, 901, 958, 970, 971, 972, 988], "int8": [1, 67, 101, 132, 154, 255, 328, 329, 522, 577, 595, 761, 762, 766, 863, 887, 958, 976, 988], "int16": [1, 67, 328, 329, 522, 595, 761, 762, 863, 958, 968, 988], "int32": [1, 67, 90, 93, 97, 125, 126, 160, 161, 173, 255, 316, 346, 373, 528, 577, 595, 627, 628, 693, 782, 813, 862, 972, 988], "b": [1, 26, 27, 29, 31, 34, 51, 52, 54, 55, 67, 72, 75, 90, 92, 93, 94, 95, 96, 97, 98, 107, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 168, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 262, 264, 268, 269, 281, 284, 288, 293, 295, 308, 316, 317, 324, 332, 333, 334, 379, 383, 384, 385, 387, 390, 393, 395, 397, 398, 400, 403, 404, 405, 406, 407, 408, 410, 414, 422, 437, 443, 445, 447, 449, 457, 474, 480, 482, 491, 494, 501, 521, 532, 534, 536, 538, 539, 540, 541, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 558, 559, 560, 561, 562, 565, 568, 569, 570, 571, 572, 573, 574, 576, 578, 579, 581, 582, 583, 584, 585, 587, 595, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 629, 632, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 701, 721, 749, 765, 767, 815, 816, 824, 836, 843, 854, 885, 901, 926, 929, 936, 957, 971, 975, 988, 995], "4": [1, 14, 22, 26, 27, 29, 30, 31, 34, 49, 51, 52, 54, 55, 64, 65, 66, 67, 68, 69, 72, 74, 75, 90, 92, 93, 94, 95, 96, 97, 98, 114, 120, 121, 122, 128, 131, 136, 137, 138, 139, 142, 145, 148, 149, 150, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 179, 181, 184, 185, 187, 188, 189, 190, 194, 198, 203, 208, 211, 212, 213, 214, 215, 216, 221, 222, 223, 225, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 266, 268, 269, 281, 286, 287, 288, 289, 292, 300, 301, 304, 308, 314, 316, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 336, 340, 344, 351, 352, 353, 359, 360, 362, 363, 364, 365, 368, 369, 370, 371, 373, 375, 380, 383, 384, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 407, 408, 410, 413, 414, 415, 417, 420, 422, 423, 436, 438, 442, 444, 445, 447, 448, 449, 451, 452, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 470, 472, 473, 476, 480, 481, 482, 483, 486, 496, 497, 499, 500, 501, 503, 505, 507, 508, 511, 518, 519, 520, 521, 523, 524, 525, 528, 529, 530, 537, 540, 541, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 558, 560, 561, 565, 567, 568, 569, 570, 571, 572, 573, 574, 581, 582, 583, 584, 585, 587, 588, 595, 609, 611, 612, 613, 616, 618, 619, 620, 621, 622, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 646, 647, 654, 655, 656, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 701, 704, 711, 720, 721, 722, 725, 733, 734, 737, 746, 750, 751, 753, 763, 765, 767, 779, 780, 786, 788, 791, 792, 793, 794, 795, 796, 800, 802, 803, 804, 805, 808, 809, 810, 811, 823, 824, 831, 832, 835, 836, 838, 843, 846, 847, 848, 849, 853, 863, 869, 876, 877, 878, 880, 882, 886, 891, 893, 894, 895, 896, 897, 899, 901, 911, 915, 916, 921, 931, 932, 934, 935, 938, 940, 942, 943, 946, 957, 959, 960, 961, 968, 971, 972, 973, 980, 988, 996], "c": [1, 26, 27, 29, 31, 34, 51, 52, 54, 55, 65, 67, 72, 75, 93, 95, 97, 107, 114, 124, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 152, 153, 154, 155, 157, 158, 159, 160, 163, 165, 166, 173, 174, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 193, 195, 196, 197, 199, 200, 201, 204, 205, 207, 208, 209, 210, 211, 213, 217, 218, 219, 220, 222, 223, 226, 227, 229, 230, 232, 235, 238, 239, 240, 241, 242, 243, 245, 248, 249, 255, 262, 269, 284, 293, 295, 398, 410, 445, 447, 474, 507, 511, 532, 534, 538, 539, 541, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 560, 561, 562, 565, 568, 569, 570, 571, 572, 573, 574, 581, 582, 584, 585, 587, 595, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 623, 626, 627, 632, 635, 641, 644, 646, 649, 650, 651, 652, 656, 659, 660, 665, 668, 671, 672, 675, 678, 679, 680, 681, 682, 683, 685, 688, 689, 693, 765, 836, 854, 942, 946, 975, 988], "5": [1, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 29, 31, 34, 52, 54, 64, 65, 67, 68, 69, 72, 73, 90, 93, 94, 95, 96, 97, 100, 104, 120, 126, 136, 138, 139, 142, 148, 149, 150, 151, 154, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 169, 171, 172, 175, 176, 177, 179, 181, 184, 185, 187, 189, 190, 191, 194, 198, 203, 208, 211, 212, 213, 214, 215, 218, 221, 226, 228, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 262, 263, 266, 286, 288, 289, 292, 297, 303, 304, 314, 316, 317, 318, 319, 320, 321, 330, 331, 332, 336, 337, 341, 361, 363, 364, 365, 368, 370, 378, 379, 382, 388, 389, 391, 392, 394, 395, 398, 401, 404, 406, 407, 408, 410, 413, 415, 436, 438, 444, 445, 446, 447, 449, 451, 452, 456, 457, 458, 459, 460, 462, 466, 468, 470, 476, 482, 487, 495, 496, 499, 500, 517, 520, 521, 523, 525, 529, 530, 540, 541, 544, 545, 547, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 565, 567, 568, 569, 570, 571, 572, 573, 574, 576, 581, 582, 584, 585, 587, 595, 611, 612, 613, 618, 619, 620, 621, 622, 624, 626, 627, 628, 629, 631, 633, 634, 635, 636, 639, 640, 641, 646, 654, 655, 656, 659, 660, 661, 662, 663, 664, 670, 671, 673, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 701, 704, 708, 711, 721, 722, 725, 728, 737, 746, 749, 751, 753, 759, 763, 764, 765, 766, 767, 772, 773, 774, 775, 776, 777, 801, 803, 804, 805, 806, 808, 810, 811, 819, 822, 831, 832, 835, 836, 862, 863, 869, 876, 877, 878, 880, 881, 882, 886, 888, 889, 890, 892, 893, 896, 899, 901, 911, 917, 922, 930, 931, 935, 959, 973, 976, 980, 988, 996], "6": [1, 26, 27, 29, 30, 31, 32, 33, 34, 52, 54, 65, 67, 72, 90, 93, 94, 95, 96, 98, 136, 140, 143, 144, 145, 146, 148, 149, 152, 153, 155, 156, 157, 158, 160, 161, 163, 165, 166, 167, 169, 171, 172, 174, 178, 179, 180, 181, 183, 186, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 204, 205, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 225, 226, 227, 228, 229, 230, 232, 233, 240, 248, 249, 255, 262, 266, 269, 289, 308, 316, 328, 329, 332, 336, 358, 360, 363, 374, 383, 384, 390, 394, 395, 397, 415, 444, 450, 452, 453, 456, 459, 460, 461, 462, 463, 465, 466, 467, 470, 482, 487, 491, 496, 499, 500, 520, 523, 525, 537, 538, 540, 552, 553, 554, 558, 561, 568, 584, 595, 613, 614, 615, 616, 617, 618, 619, 620, 623, 624, 627, 628, 629, 631, 632, 634, 636, 637, 641, 644, 646, 649, 651, 652, 654, 655, 656, 659, 660, 663, 664, 667, 668, 670, 671, 673, 674, 680, 688, 689, 693, 701, 722, 751, 757, 761, 762, 767, 798, 811, 832, 869, 882, 886, 891, 893, 894, 895, 897, 901, 922, 926, 931, 935, 958, 988, 995, 996], "7": [1, 26, 27, 29, 30, 31, 32, 33, 34, 54, 65, 67, 72, 74, 120, 140, 141, 142, 143, 144, 146, 148, 152, 153, 155, 160, 161, 163, 165, 167, 174, 178, 179, 180, 183, 186, 189, 191, 193, 195, 197, 199, 200, 201, 204, 205, 207, 209, 210, 211, 212, 217, 218, 219, 220, 226, 227, 228, 229, 230, 255, 262, 266, 329, 336, 340, 359, 361, 362, 369, 371, 373, 380, 394, 397, 415, 423, 444, 456, 460, 466, 482, 523, 525, 540, 552, 553, 561, 568, 584, 595, 614, 615, 617, 619, 623, 627, 628, 629, 631, 632, 636, 644, 647, 649, 651, 652, 663, 664, 668, 674, 693, 708, 772, 776, 782, 801, 802, 809, 811, 855, 863, 886, 896, 988, 996], "float32": [1, 27, 67, 154, 217, 218, 255, 567, 693, 839, 862, 988], "lazi": [1, 49, 50, 51, 52, 54, 67, 72, 74, 101, 114, 126, 132, 175, 188, 255, 269, 542, 563, 577, 595, 606, 632, 633, 672, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 693, 995, 996], "i16": [1, 67, 474, 595, 863, 968, 988, 996], "i32": [1, 67, 90, 93, 97, 125, 126, 201, 255, 316, 346, 373, 474, 500, 588, 595, 652, 693, 782, 813, 862, 935, 988, 996], "f32": [1, 67, 145, 217, 255, 288, 452, 474, 558, 595, 616, 693, 721, 862, 882, 988], "i64": [1, 14, 18, 49, 51, 65, 66, 67, 68, 72, 90, 92, 93, 94, 95, 96, 97, 114, 136, 137, 138, 139, 140, 143, 145, 146, 148, 149, 151, 152, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 174, 175, 178, 181, 183, 187, 188, 189, 190, 193, 194, 195, 196, 199, 201, 204, 205, 207, 208, 210, 211, 212, 214, 220, 222, 223, 224, 225, 226, 227, 228, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 245, 248, 249, 255, 262, 264, 268, 269, 287, 288, 289, 290, 291, 292, 294, 296, 298, 299, 300, 301, 302, 303, 304, 307, 308, 314, 317, 319, 320, 321, 326, 327, 328, 329, 331, 332, 341, 342, 344, 348, 350, 352, 357, 364, 367, 379, 382, 384, 385, 386, 387, 389, 390, 394, 395, 396, 397, 398, 401, 404, 406, 407, 408, 410, 412, 415, 419, 421, 422, 436, 437, 438, 445, 446, 447, 448, 449, 450, 453, 454, 456, 457, 469, 471, 472, 474, 475, 476, 480, 481, 482, 501, 502, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 531, 533, 536, 538, 540, 545, 546, 548, 552, 553, 554, 557, 558, 559, 560, 561, 565, 567, 568, 569, 572, 576, 580, 584, 585, 588, 595, 609, 611, 613, 615, 616, 619, 620, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 641, 643, 645, 646, 649, 650, 652, 654, 655, 659, 660, 662, 663, 664, 665, 666, 667, 668, 671, 673, 675, 676, 677, 679, 680, 681, 682, 685, 688, 689, 693, 701, 702, 720, 721, 722, 725, 733, 734, 735, 737, 739, 746, 749, 753, 756, 759, 760, 761, 762, 765, 777, 778, 780, 787, 789, 792, 797, 804, 807, 822, 824, 825, 831, 835, 843, 868, 885, 886, 889, 892, 896, 899, 902, 903, 906, 910, 911, 915, 916, 957, 959, 960, 961, 967, 973, 974, 977, 980, 988, 995, 996], "register_series_namespac": [1, 65, 66, 67], "math": [1, 68, 757, 912, 962, 988], "mathshortcut": [1, 68], "": [1, 27, 30, 49, 52, 68, 73, 90, 97, 98, 103, 104, 115, 128, 137, 143, 145, 147, 148, 159, 160, 166, 174, 175, 187, 189, 194, 195, 201, 208, 212, 216, 222, 224, 225, 226, 255, 292, 293, 300, 301, 304, 342, 365, 368, 379, 411, 432, 437, 440, 441, 445, 446, 454, 458, 482, 486, 492, 493, 496, 497, 499, 501, 503, 505, 506, 508, 511, 512, 513, 515, 517, 518, 519, 538, 539, 543, 546, 549, 554, 559, 562, 563, 569, 572, 574, 583, 584, 595, 609, 615, 616, 619, 626, 627, 633, 652, 660, 665, 666, 667, 677, 693, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 720, 722, 725, 726, 728, 733, 734, 735, 737, 746, 747, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 766, 767, 772, 778, 794, 795, 802, 805, 808, 809, 816, 818, 819, 822, 823, 824, 825, 827, 830, 831, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 876, 877, 878, 881, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 910, 911, 912, 913, 915, 916, 918, 921, 922, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 938, 939, 940, 943, 944, 945, 946, 947, 948, 950, 952, 955, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 988], "_": [1, 64, 68, 98, 189, 216, 255, 493, 507, 928, 942, 966, 988], "squar": [1, 68, 237, 411, 483, 595, 677, 856, 917, 988], "cube": [1, 68, 448, 595], "s2": [1, 122, 154, 255, 701, 739, 751, 767, 843, 855, 869, 901, 971, 980, 988], "renam": [1, 93, 103, 104, 201, 232, 235, 255, 264, 422, 434, 519, 580, 583, 595, 652, 671, 675, 693, 863, 955, 967, 988], "n2": [1, 306], "in_plac": [1, 165, 206, 230, 255, 883, 885, 909, 916, 988], "true": [1, 5, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 30, 32, 49, 51, 53, 69, 71, 72, 74, 75, 90, 91, 95, 97, 100, 101, 103, 104, 106, 107, 108, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 126, 127, 128, 131, 132, 133, 135, 137, 138, 139, 142, 151, 154, 155, 157, 158, 159, 160, 166, 168, 169, 170, 172, 175, 176, 179, 184, 185, 187, 189, 190, 197, 198, 199, 201, 208, 214, 218, 219, 222, 223, 224, 225, 226, 228, 232, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 263, 265, 266, 267, 268, 269, 280, 285, 302, 305, 306, 310, 316, 325, 326, 327, 328, 329, 335, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 391, 392, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 413, 420, 442, 444, 454, 464, 469, 474, 479, 481, 482, 486, 488, 490, 494, 495, 500, 506, 507, 509, 511, 512, 513, 515, 518, 519, 524, 531, 534, 537, 538, 539, 540, 542, 543, 549, 550, 561, 577, 581, 583, 588, 595, 609, 611, 612, 613, 618, 620, 622, 626, 627, 632, 633, 635, 637, 641, 646, 652, 656, 657, 658, 660, 665, 666, 667, 671, 676, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 693, 699, 700, 701, 702, 712, 735, 738, 742, 747, 751, 752, 771, 773, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 809, 810, 811, 812, 813, 815, 817, 818, 819, 825, 829, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 856, 869, 877, 878, 884, 894, 901, 914, 916, 921, 923, 925, 929, 930, 935, 941, 942, 944, 946, 947, 948, 950, 970, 971, 979, 980, 988, 995, 996], "s3": [1, 29, 106, 115, 119, 255, 739, 988], "n3": 1, "8": [1, 26, 27, 29, 31, 32, 33, 34, 45, 49, 54, 61, 63, 64, 65, 67, 68, 72, 73, 98, 120, 124, 126, 136, 140, 141, 142, 143, 144, 145, 146, 148, 152, 153, 155, 158, 163, 165, 174, 178, 179, 180, 183, 191, 193, 195, 197, 199, 200, 201, 204, 205, 207, 209, 210, 211, 212, 217, 218, 219, 220, 226, 227, 229, 230, 232, 255, 266, 268, 281, 287, 288, 324, 326, 329, 330, 333, 334, 336, 397, 414, 438, 444, 448, 449, 456, 457, 460, 461, 463, 465, 467, 474, 480, 482, 497, 503, 511, 521, 525, 537, 541, 544, 549, 550, 551, 553, 554, 558, 560, 565, 568, 569, 570, 571, 572, 573, 574, 581, 582, 584, 585, 587, 595, 614, 615, 616, 617, 619, 623, 629, 632, 636, 637, 646, 649, 651, 652, 663, 664, 668, 671, 674, 693, 720, 721, 763, 782, 832, 855, 876, 880, 886, 888, 891, 893, 894, 895, 897, 932, 938, 946, 988, 996], "9": [1, 26, 27, 29, 31, 34, 49, 54, 64, 72, 136, 141, 142, 154, 161, 163, 167, 201, 211, 226, 227, 230, 232, 248, 255, 262, 266, 268, 281, 287, 299, 302, 324, 326, 329, 333, 334, 336, 340, 359, 370, 371, 397, 402, 410, 414, 444, 456, 458, 460, 466, 476, 480, 493, 525, 540, 547, 552, 553, 595, 628, 629, 631, 636, 652, 663, 668, 671, 688, 693, 720, 735, 765, 776, 786, 788, 796, 802, 803, 809, 810, 843, 855, 886, 888, 896, 898, 911, 928, 988], "27": [1, 68, 248, 329, 346, 360, 373, 595, 688, 988, 996], "16": [1, 30, 42, 58, 66, 73, 98, 160, 161, 232, 255, 326, 329, 397, 438, 448, 460, 500, 511, 540, 552, 557, 558, 561, 574, 581, 595, 627, 628, 656, 671, 693, 802, 809, 876, 912, 935, 946, 962, 988], "64": [1, 41, 44, 60, 66, 68, 438, 448, 595, 658, 693, 876, 988], "25": [1, 30, 68, 74, 97, 126, 131, 142, 160, 161, 175, 228, 232, 255, 331, 346, 362, 369, 373, 530, 563, 595, 627, 628, 633, 639, 669, 671, 693, 765, 766, 802, 809, 815, 832, 876, 880, 988], "125": [1, 30, 68, 255, 262, 595, 876, 988], "arg": [2, 3, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 188, 219, 255, 447, 543, 562, 595, 645, 693, 702, 970, 971, 988], "ani": [2, 3, 4, 7, 27, 29, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 56, 57, 58, 59, 60, 61, 62, 63, 70, 90, 91, 92, 93, 94, 95, 96, 103, 104, 106, 107, 108, 112, 114, 115, 116, 118, 123, 125, 126, 128, 133, 136, 141, 145, 149, 151, 152, 154, 171, 172, 173, 187, 188, 197, 198, 214, 215, 218, 219, 224, 226, 255, 262, 266, 269, 284, 288, 316, 363, 375, 384, 389, 391, 392, 402, 413, 420, 421, 423, 434, 436, 438, 442, 444, 447, 456, 458, 470, 473, 500, 511, 512, 513, 515, 520, 524, 530, 537, 538, 540, 549, 560, 567, 581, 588, 595, 616, 622, 645, 666, 693, 701, 702, 717, 721, 767, 803, 824, 843, 855, 863, 886, 888, 900, 903, 935, 946, 947, 948, 950, 960, 969, 970, 971, 988, 995, 996], "kwarg": [2, 3, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 141, 188, 219, 255, 447, 595, 645, 693, 971, 988, 995], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 595, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 955, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 988, 995], "method": [2, 3, 4, 7, 26, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 72, 91, 103, 104, 107, 123, 133, 145, 159, 167, 172, 185, 191, 197, 198, 224, 232, 247, 255, 262, 265, 266, 365, 368, 375, 382, 389, 391, 392, 397, 413, 420, 436, 438, 442, 444, 448, 451, 452, 459, 460, 461, 462, 463, 465, 466, 467, 520, 530, 532, 537, 549, 574, 575, 581, 589, 591, 595, 596, 597, 600, 601, 602, 603, 606, 616, 631, 647, 666, 671, 687, 693, 702, 805, 808, 822, 835, 881, 882, 893, 972, 982, 984, 988, 989, 992, 993, 994], "attribut": [2, 3, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 56, 57, 58, 59, 60, 61, 62, 63, 123, 255, 589, 591, 596, 597, 601, 602, 603, 693, 982, 984, 989, 992, 993, 994], "A": [4, 27, 30, 49, 52, 71, 74, 97, 103, 104, 105, 112, 114, 130, 131, 154, 160, 175, 189, 198, 214, 226, 227, 228, 232, 255, 261, 306, 336, 341, 344, 348, 350, 352, 357, 364, 375, 382, 391, 392, 400, 403, 404, 406, 413, 420, 421, 422, 432, 442, 449, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 486, 487, 492, 493, 495, 501, 502, 517, 521, 547, 558, 562, 595, 627, 633, 649, 668, 671, 693, 772, 777, 780, 787, 789, 792, 797, 804, 822, 888, 889, 890, 892, 895, 896, 897, 921, 922, 927, 928, 930, 936, 937, 952, 988, 995], "encod": [4, 63, 103, 104, 114, 310, 488, 742, 923], "set": [4, 5, 6, 7, 8, 9, 11, 13, 14, 17, 22, 23, 25, 27, 29, 30, 31, 32, 33, 64, 65, 69, 74, 91, 93, 96, 98, 101, 103, 104, 107, 108, 112, 114, 116, 117, 118, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 140, 145, 159, 162, 172, 175, 181, 199, 201, 207, 216, 223, 224, 226, 232, 255, 269, 301, 305, 306, 372, 393, 402, 423, 447, 458, 459, 460, 461, 462, 463, 465, 466, 467, 469, 475, 479, 480, 498, 504, 505, 510, 511, 512, 513, 515, 542, 577, 578, 579, 583, 588, 595, 614, 616, 618, 626, 632, 633, 637, 641, 652, 657, 658, 659, 666, 671, 674, 677, 693, 701, 702, 734, 738, 739, 812, 830, 843, 863, 888, 889, 890, 891, 892, 893, 895, 896, 897, 899, 903, 910, 914, 915, 933, 939, 940, 945, 946, 947, 948, 950, 970, 988, 996], "string": [4, 6, 8, 11, 12, 13, 17, 27, 30, 32, 33, 37, 49, 55, 63, 74, 75, 97, 103, 104, 114, 123, 124, 125, 128, 131, 137, 154, 158, 159, 160, 161, 175, 201, 208, 217, 222, 226, 228, 232, 235, 255, 262, 293, 312, 317, 358, 362, 365, 368, 369, 381, 387, 398, 423, 445, 447, 459, 460, 461, 462, 463, 465, 466, 467, 482, 485, 486, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 517, 538, 539, 543, 545, 547, 548, 554, 562, 569, 572, 583, 584, 595, 609, 618, 625, 626, 627, 628, 633, 652, 660, 665, 671, 674, 675, 693, 726, 744, 749, 798, 802, 805, 808, 809, 821, 836, 919, 920, 921, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 951, 952, 968, 988, 996], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 625, 648, 693], "activ": [5, 9, 15, 16, 18, 19, 20, 21, 24, 288, 493, 721, 928], "bool": [5, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 30, 32, 34, 64, 69, 71, 72, 75, 90, 91, 95, 97, 101, 103, 104, 108, 112, 114, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 135, 137, 138, 139, 151, 152, 154, 155, 157, 158, 159, 160, 165, 166, 168, 169, 170, 175, 187, 189, 199, 202, 206, 208, 214, 218, 219, 222, 223, 224, 225, 228, 230, 232, 239, 241, 242, 245, 255, 265, 266, 267, 268, 269, 279, 285, 286, 288, 302, 305, 307, 310, 316, 325, 326, 327, 328, 329, 330, 345, 361, 363, 374, 375, 376, 377, 378, 391, 392, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 413, 420, 421, 427, 428, 429, 430, 442, 444, 452, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 471, 473, 474, 479, 481, 482, 486, 488, 490, 500, 501, 502, 506, 507, 509, 511, 512, 513, 515, 519, 531, 534, 537, 538, 539, 540, 542, 543, 549, 552, 567, 577, 581, 583, 595, 609, 611, 613, 618, 620, 622, 623, 626, 627, 632, 633, 637, 641, 646, 653, 656, 657, 658, 660, 665, 666, 667, 671, 679, 681, 682, 685, 693, 699, 700, 701, 702, 711, 718, 719, 721, 735, 738, 740, 742, 747, 752, 759, 760, 761, 762, 763, 764, 781, 801, 803, 815, 817, 818, 819, 825, 829, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 877, 878, 880, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 901, 903, 904, 909, 914, 916, 921, 923, 925, 935, 936, 937, 941, 942, 944, 946, 947, 948, 950, 969, 970, 971, 974, 977, 979, 988, 995], "decim": [5, 27, 30, 255, 468, 595, 898, 988], "temporari": 5, "remov": [5, 7, 143, 227, 255, 269, 379, 422, 498, 504, 510, 511, 559, 566, 574, 581, 595, 615, 668, 693, 933, 939, 945, 946], "later": 5, "onc": [5, 52, 103, 104, 107, 130, 135, 136, 199, 235, 255, 269, 315, 469, 595, 610, 675, 693, 702, 899, 988], "stabil": 5, "happen": 5, "being": [5, 73, 103, 104, 114, 119, 226, 227, 255, 269, 330, 362, 459, 460, 461, 462, 463, 465, 466, 467, 558, 595, 668, 693, 763, 802, 832, 880, 988, 996], "consid": [5, 73, 103, 104, 114, 119, 136, 145, 155, 181, 224, 226, 227, 255, 269, 319, 320, 321, 330, 362, 459, 460, 461, 462, 463, 465, 466, 467, 552, 561, 595, 616, 629, 636, 641, 666, 668, 693, 702, 753, 754, 755, 763, 802, 832, 845, 880, 901, 902, 903, 988], "break": [5, 73, 119, 226, 227, 255, 269, 330, 362, 459, 460, 461, 462, 463, 465, 466, 467, 595, 668, 693, 763, 802, 832, 880, 988], "chang": [5, 25, 64, 73, 103, 104, 119, 226, 227, 228, 255, 269, 330, 331, 362, 446, 459, 460, 461, 462, 463, 465, 466, 467, 595, 668, 693, 763, 802, 832, 876, 880, 909, 988], "current": [5, 8, 25, 51, 91, 97, 105, 135, 138, 139, 255, 306, 362, 446, 595, 606, 611, 612, 693, 752, 756, 802, 876, 988, 995], "alpha": [5, 71, 269, 376, 377, 378, 595, 613, 618, 620, 646, 656, 693, 817, 818, 819, 988], "state": [5, 7, 71, 83, 552, 606, 613, 618, 620, 646, 656, 693], "cfg": [6, 7, 8, 14, 133], "previous": 6, "save": [6, 361, 606, 801], "share": [6, 55, 147, 255, 816, 988], "option": [6, 7, 8, 25, 29, 30, 38, 64, 74, 103, 106, 107, 108, 112, 115, 116, 118, 120, 123, 124, 125, 126, 127, 128, 129, 171, 175, 181, 214, 218, 223, 255, 411, 458, 459, 460, 461, 462, 463, 465, 466, 467, 479, 505, 567, 583, 588, 595, 606, 632, 633, 641, 693, 852, 856, 888, 889, 890, 891, 892, 893, 895, 896, 897, 914, 940, 967, 988], "paramet": [6, 10, 11, 12, 13, 14, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 39, 46, 49, 50, 51, 52, 54, 56, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 171, 172, 173, 174, 175, 177, 179, 181, 182, 184, 185, 187, 188, 189, 191, 193, 194, 195, 197, 198, 199, 201, 202, 204, 205, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 235, 237, 240, 247, 249, 255, 262, 264, 266, 268, 269, 279, 284, 285, 286, 287, 288, 291, 292, 293, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 317, 319, 320, 321, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 342, 358, 361, 362, 363, 365, 367, 368, 369, 372, 374, 375, 376, 377, 378, 379, 382, 384, 385, 389, 390, 391, 392, 393, 394, 397, 398, 402, 411, 413, 415, 416, 420, 421, 422, 423, 436, 438, 442, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 517, 518, 519, 520, 521, 523, 524, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 559, 561, 562, 563, 565, 566, 567, 568, 569, 572, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 595, 609, 611, 613, 615, 616, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 632, 633, 636, 637, 641, 642, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 677, 680, 687, 689, 693, 698, 701, 702, 711, 717, 718, 719, 720, 721, 724, 725, 726, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 752, 753, 754, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 771, 772, 773, 778, 798, 801, 802, 803, 805, 807, 808, 809, 812, 815, 816, 817, 818, 819, 822, 823, 824, 825, 830, 831, 832, 835, 836, 845, 851, 852, 856, 858, 863, 876, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 910, 914, 915, 916, 918, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 950, 952, 953, 955, 959, 960, 966, 967, 968, 969, 970, 971, 973, 974, 977, 978, 979, 980, 988, 995], "json": [6, 8, 32, 33, 110, 111, 117, 255, 494, 495, 606, 625, 648, 674, 693, 929, 930], "produc": [6, 125, 126, 128, 286, 431, 568, 637, 693, 719], "reset": [7, 133], "default": [7, 12, 25, 26, 27, 29, 30, 31, 32, 33, 34, 64, 69, 72, 74, 90, 92, 93, 94, 95, 96, 97, 98, 101, 103, 104, 107, 112, 114, 123, 124, 125, 126, 127, 128, 131, 132, 145, 147, 159, 161, 162, 172, 175, 181, 187, 189, 197, 198, 199, 209, 216, 224, 226, 229, 233, 255, 301, 305, 306, 317, 361, 374, 376, 377, 378, 393, 416, 423, 440, 441, 446, 452, 469, 475, 484, 492, 498, 500, 504, 505, 510, 511, 512, 513, 515, 535, 542, 549, 563, 567, 574, 577, 581, 582, 583, 587, 595, 616, 618, 626, 628, 633, 641, 658, 661, 666, 669, 674, 693, 734, 738, 739, 749, 801, 815, 816, 817, 818, 819, 830, 863, 872, 873, 876, 882, 899, 910, 918, 921, 927, 933, 935, 939, 940, 945, 946, 947, 948, 950, 978, 988, 996], "note": [7, 17, 29, 30, 38, 49, 53, 54, 64, 74, 90, 91, 92, 94, 96, 97, 101, 103, 105, 106, 112, 114, 115, 124, 126, 128, 130, 132, 133, 135, 136, 141, 150, 160, 161, 171, 172, 174, 175, 185, 188, 197, 198, 215, 218, 223, 227, 228, 232, 255, 269, 288, 305, 328, 329, 333, 334, 354, 355, 358, 362, 369, 398, 404, 406, 459, 460, 461, 462, 463, 465, 466, 467, 479, 486, 492, 493, 496, 498, 499, 501, 504, 510, 511, 522, 530, 552, 561, 576, 577, 588, 595, 613, 620, 621, 627, 628, 629, 633, 636, 649, 656, 668, 671, 693, 702, 721, 738, 761, 762, 794, 795, 798, 809, 902, 903, 909, 914, 921, 927, 928, 931, 933, 934, 936, 939, 945, 946, 958, 988, 995], "oper": [7, 30, 55, 72, 80, 81, 90, 92, 93, 94, 95, 96, 103, 112, 136, 149, 154, 159, 166, 176, 182, 185, 187, 188, 192, 213, 218, 219, 223, 226, 234, 235, 255, 262, 263, 266, 306, 325, 326, 327, 328, 329, 330, 375, 389, 391, 392, 410, 413, 420, 434, 436, 438, 442, 444, 448, 454, 520, 530, 537, 538, 539, 547, 548, 558, 595, 620, 626, 629, 632, 636, 641, 642, 675, 693, 701, 759, 760, 761, 762, 763, 884, 965, 969, 970, 971, 979, 988], "from": [7, 27, 30, 49, 50, 51, 64, 72, 74, 90, 91, 92, 93, 94, 95, 96, 97, 100, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 142, 143, 147, 149, 158, 160, 161, 172, 173, 175, 176, 181, 193, 197, 199, 201, 223, 224, 226, 228, 255, 306, 325, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 379, 397, 411, 440, 441, 446, 447, 469, 482, 492, 493, 494, 500, 511, 512, 513, 515, 532, 534, 545, 555, 556, 557, 577, 581, 582, 586, 594, 595, 615, 620, 625, 627, 628, 633, 641, 648, 649, 652, 666, 672, 693, 701, 739, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 816, 852, 856, 872, 873, 874, 876, 899, 927, 928, 929, 935, 946, 947, 948, 950, 977, 980, 988, 995, 996], "environ": [7, 25, 127, 130], "local": [7, 29, 106, 115, 128, 255, 361, 774, 775, 801, 806, 877, 878, 988], "non": [7, 30, 38, 64, 95, 173, 181, 201, 227, 232, 255, 306, 398, 446, 458, 459, 460, 461, 462, 463, 465, 466, 467, 487, 493, 538, 539, 545, 547, 548, 554, 569, 572, 578, 579, 583, 584, 595, 641, 652, 668, 671, 693, 739, 836, 876, 888, 889, 890, 891, 892, 893, 895, 896, 897, 922, 928, 970, 988], "env": [7, 129], "back": [7, 64, 149, 219, 255, 445, 595, 701, 971, 988], "valu": [7, 10, 11, 14, 25, 27, 30, 32, 46, 47, 49, 53, 55, 62, 64, 72, 73, 75, 93, 95, 103, 104, 105, 114, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 135, 136, 137, 142, 145, 149, 150, 151, 155, 158, 160, 161, 162, 163, 167, 171, 172, 177, 178, 179, 180, 181, 183, 185, 187, 189, 190, 191, 193, 197, 198, 199, 204, 205, 208, 209, 210, 211, 214, 215, 219, 222, 226, 227, 228, 229, 238, 239, 241, 242, 243, 245, 246, 255, 261, 262, 263, 265, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 286, 287, 290, 291, 292, 294, 296, 297, 298, 300, 303, 304, 307, 308, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 326, 329, 330, 331, 333, 334, 336, 340, 353, 359, 370, 375, 376, 377, 378, 380, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 403, 404, 406, 407, 408, 409, 412, 413, 414, 417, 419, 420, 421, 423, 424, 425, 426, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 448, 451, 452, 455, 458, 459, 460, 461, 462, 463, 465, 466, 467, 469, 470, 471, 472, 473, 476, 477, 478, 479, 481, 482, 483, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 501, 502, 505, 507, 508, 509, 517, 520, 522, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 537, 539, 541, 545, 548, 550, 552, 553, 554, 560, 561, 567, 569, 570, 571, 572, 573, 576, 577, 578, 579, 584, 588, 595, 609, 616, 621, 622, 627, 628, 630, 631, 638, 639, 640, 641, 643, 644, 647, 649, 654, 655, 660, 661, 662, 665, 668, 669, 674, 678, 679, 681, 682, 683, 685, 686, 693, 697, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 715, 716, 719, 720, 723, 724, 725, 727, 729, 730, 731, 733, 737, 740, 742, 743, 744, 745, 749, 750, 753, 754, 755, 757, 758, 763, 764, 765, 766, 768, 769, 772, 776, 793, 799, 810, 816, 817, 818, 819, 822, 823, 824, 827, 829, 830, 831, 832, 833, 835, 836, 838, 840, 841, 843, 844, 846, 847, 848, 849, 853, 858, 863, 864, 865, 867, 868, 870, 872, 873, 874, 875, 876, 879, 880, 881, 882, 888, 889, 890, 891, 892, 893, 895, 896, 897, 899, 900, 901, 902, 903, 906, 907, 911, 912, 913, 914, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 934, 936, 937, 940, 942, 943, 944, 952, 958, 959, 960, 961, 962, 963, 971, 972, 975, 977, 979, 980, 988, 996], "exampl": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 49, 50, 51, 52, 53, 54, 55, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 98, 100, 101, 104, 105, 106, 107, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 580, 581, 582, 583, 584, 585, 587, 588, 595, 606, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 698, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 720, 721, 722, 725, 726, 728, 733, 734, 735, 737, 739, 746, 747, 749, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 822, 823, 824, 825, 827, 830, 831, 832, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 857, 862, 863, 864, 865, 866, 867, 868, 869, 870, 876, 877, 878, 880, 881, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 906, 910, 911, 912, 913, 915, 916, 918, 920, 921, 922, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 950, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 988, 995], "ascii": [9, 17, 497, 499, 503, 517, 932, 934, 938, 952], "charact": [9, 11, 17, 23, 27, 103, 104, 114, 255, 358, 491, 493, 496, 497, 498, 503, 504, 506, 507, 510, 517, 646, 693, 798, 926, 928, 931, 932, 933, 938, 939, 941, 942, 945, 952], "displai": [9, 10, 11, 14, 16, 20, 22, 30, 255], "tabl": [9, 13, 14, 16, 17, 18, 19, 20, 22, 23, 28, 29, 30, 50, 51, 52, 54, 90, 97, 103, 104, 106, 114, 115, 189, 213, 219, 226, 227, 255, 668, 693, 971, 988, 995], "outlin": 9, "fals": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 29, 30, 32, 34, 49, 64, 69, 71, 74, 91, 95, 97, 101, 103, 104, 107, 108, 112, 114, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 135, 137, 138, 139, 142, 154, 155, 157, 158, 159, 160, 165, 166, 168, 169, 170, 172, 175, 176, 179, 184, 185, 187, 189, 190, 197, 198, 199, 202, 206, 208, 214, 218, 219, 222, 223, 224, 228, 230, 232, 238, 239, 241, 242, 243, 245, 248, 255, 265, 266, 267, 269, 279, 285, 288, 302, 305, 307, 325, 326, 327, 328, 329, 330, 345, 361, 363, 374, 375, 376, 377, 378, 391, 392, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 413, 420, 421, 442, 444, 452, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 471, 474, 479, 481, 482, 486, 490, 494, 500, 501, 502, 506, 507, 509, 511, 512, 513, 531, 534, 537, 538, 539, 542, 543, 549, 552, 567, 577, 581, 583, 588, 595, 609, 611, 612, 613, 618, 620, 626, 627, 632, 633, 635, 637, 646, 653, 656, 657, 658, 660, 665, 666, 671, 678, 679, 681, 682, 683, 685, 688, 693, 701, 711, 721, 735, 738, 740, 747, 751, 752, 759, 760, 761, 762, 763, 764, 781, 801, 803, 815, 817, 818, 819, 825, 836, 837, 838, 840, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 856, 869, 877, 878, 880, 882, 883, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 901, 904, 909, 914, 916, 921, 925, 929, 935, 936, 937, 941, 942, 944, 946, 947, 948, 969, 970, 971, 974, 977, 979, 980, 988, 995], "revert": 9, "abc": [9, 15, 16, 17, 18, 19, 20, 21, 22, 262, 493, 501, 595, 928, 936], "xyz": [9, 15, 16, 17, 18, 19, 20, 21, 22, 262, 487, 493, 595, 922, 928, 967, 988], "f64": [9, 13, 15, 16, 18, 19, 20, 21, 22, 49, 64, 66, 68, 73, 93, 119, 126, 138, 139, 141, 142, 143, 146, 150, 151, 154, 157, 158, 159, 166, 174, 175, 179, 180, 189, 190, 191, 207, 208, 209, 229, 232, 235, 239, 241, 242, 243, 244, 245, 247, 248, 255, 261, 271, 272, 273, 274, 275, 276, 297, 316, 318, 322, 323, 330, 333, 334, 363, 374, 375, 376, 377, 378, 379, 380, 388, 389, 391, 392, 397, 404, 406, 407, 408, 410, 411, 413, 416, 417, 418, 420, 424, 425, 426, 435, 438, 440, 441, 442, 446, 448, 451, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 477, 478, 479, 483, 484, 526, 527, 530, 535, 544, 545, 547, 549, 551, 559, 570, 571, 574, 581, 582, 587, 595, 611, 615, 621, 622, 626, 632, 633, 639, 640, 647, 660, 661, 669, 671, 672, 675, 679, 681, 682, 683, 684, 685, 687, 688, 693, 703, 704, 705, 706, 707, 708, 750, 757, 758, 763, 764, 765, 803, 818, 819, 823, 827, 832, 876, 880, 888, 890, 891, 893, 894, 895, 897, 898, 912, 913, 917, 962, 963, 976, 988, 996], "fmt": [10, 396, 562, 595, 630, 693], "floatfmt": 10, "mix": [10, 511, 513, 765, 946, 948, 988], "control": [10, 30, 54, 72, 124, 255, 618, 693], "how": [10, 29, 30, 55, 64, 72, 75, 93, 96, 105, 145, 174, 226, 227, 255, 286, 287, 317, 331, 397, 445, 455, 588, 595, 616, 632, 668, 693, 719, 720, 749, 766, 988], "float": [10, 30, 40, 41, 73, 119, 121, 122, 123, 126, 128, 142, 147, 150, 175, 191, 199, 205, 247, 255, 285, 286, 318, 319, 320, 321, 333, 334, 363, 374, 375, 376, 377, 378, 383, 388, 391, 392, 397, 400, 403, 404, 406, 407, 408, 413, 416, 420, 424, 435, 440, 441, 442, 448, 451, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 473, 530, 544, 570, 571, 575, 577, 582, 584, 587, 595, 621, 633, 647, 655, 656, 687, 693, 718, 719, 747, 750, 753, 754, 755, 764, 765, 767, 803, 815, 816, 817, 818, 819, 823, 827, 832, 842, 856, 859, 865, 866, 872, 873, 879, 880, 881, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 902, 903, 914, 918, 958, 978, 988, 996], "point": [10, 30, 40, 41, 126, 128, 150, 160, 176, 255, 318, 333, 334, 363, 383, 388, 404, 406, 468, 469, 595, 621, 627, 637, 649, 693, 750, 803, 823, 827, 842, 898, 899, 988], "full": [10, 37, 64, 70, 72, 103, 104, 106, 114, 115, 511, 512, 513, 515, 637, 693, 946, 947, 948, 950], "format": [10, 13, 17, 27, 30, 102, 103, 104, 114, 119, 148, 158, 172, 181, 198, 215, 253, 255, 362, 365, 368, 500, 511, 512, 513, 515, 539, 619, 625, 641, 674, 693, 805, 808, 935, 946, 947, 948, 950, 987], "number": [10, 11, 12, 14, 22, 23, 27, 30, 34, 64, 84, 90, 92, 94, 96, 100, 103, 104, 107, 114, 117, 124, 126, 127, 129, 130, 137, 138, 147, 148, 150, 151, 163, 172, 173, 176, 177, 184, 185, 199, 204, 205, 209, 211, 222, 226, 229, 238, 240, 249, 255, 280, 287, 292, 300, 304, 306, 308, 314, 324, 330, 331, 343, 346, 351, 353, 363, 370, 371, 373, 376, 377, 378, 382, 384, 390, 394, 404, 406, 414, 415, 447, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 472, 473, 475, 484, 496, 499, 501, 507, 508, 523, 529, 535, 549, 550, 565, 574, 578, 579, 581, 582, 585, 587, 595, 609, 611, 619, 620, 621, 622, 629, 636, 646, 654, 655, 658, 661, 663, 665, 669, 678, 680, 689, 693, 720, 725, 733, 737, 739, 746, 752, 763, 766, 779, 782, 791, 793, 803, 810, 811, 813, 816, 817, 818, 819, 822, 824, 831, 842, 858, 869, 870, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 906, 907, 910, 918, 931, 934, 936, 942, 943, 959, 973, 978, 988, 996], "int": [11, 12, 14, 22, 23, 27, 30, 34, 38, 51, 54, 66, 93, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 114, 115, 116, 117, 118, 124, 125, 126, 127, 128, 129, 130, 132, 136, 137, 138, 147, 150, 151, 153, 162, 163, 164, 166, 171, 172, 173, 175, 177, 178, 179, 183, 184, 185, 195, 197, 199, 203, 204, 205, 207, 209, 210, 211, 212, 217, 220, 222, 226, 229, 231, 233, 240, 249, 255, 262, 285, 286, 287, 291, 292, 300, 301, 304, 305, 306, 308, 314, 319, 320, 321, 330, 331, 376, 377, 378, 382, 383, 384, 390, 393, 394, 415, 444, 446, 447, 448, 452, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 475, 480, 484, 492, 497, 500, 501, 503, 505, 507, 508, 517, 523, 524, 525, 529, 535, 537, 542, 549, 550, 555, 556, 557, 563, 565, 571, 573, 574, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 595, 609, 611, 620, 621, 622, 629, 633, 636, 646, 654, 655, 658, 659, 661, 663, 664, 665, 669, 670, 673, 680, 689, 693, 709, 710, 718, 719, 720, 724, 725, 733, 734, 737, 738, 739, 746, 747, 751, 752, 753, 754, 755, 763, 766, 816, 817, 818, 819, 822, 823, 824, 830, 831, 832, 855, 857, 858, 865, 869, 870, 872, 873, 874, 875, 876, 879, 882, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 902, 903, 906, 907, 910, 915, 918, 927, 932, 935, 936, 938, 940, 942, 943, 952, 958, 959, 960, 961, 968, 973, 978, 988, 995, 996], "plai": [11, 548], "sam": 11, "As": [11, 90, 92, 93, 94, 96, 107, 255, 693], "time": [11, 29, 37, 39, 49, 54, 70, 71, 74, 114, 131, 149, 160, 161, 175, 228, 255, 284, 285, 286, 306, 314, 335, 336, 337, 342, 358, 361, 365, 367, 368, 372, 511, 513, 515, 528, 529, 547, 548, 557, 563, 595, 613, 627, 628, 633, 646, 693, 701, 717, 719, 746, 771, 772, 773, 778, 798, 801, 805, 807, 808, 812, 946, 948, 950, 972, 973, 988, 996], "goe": 11, "By": [11, 12, 64, 103, 104, 107, 114, 175, 209, 229, 255, 484, 500, 535, 549, 567, 574, 581, 582, 587, 595, 633, 661, 669, 693, 918, 935, 970, 978, 988], "begin": [11, 376, 377, 378, 492, 595, 817, 818, 819, 927, 988], "beauti": 11, "friendship": 11, "length": [11, 72, 73, 101, 114, 124, 132, 160, 161, 207, 255, 301, 306, 330, 362, 369, 432, 458, 459, 460, 461, 462, 463, 465, 466, 467, 480, 497, 499, 503, 505, 517, 542, 577, 578, 579, 595, 627, 628, 646, 659, 693, 734, 739, 751, 763, 764, 772, 802, 809, 857, 874, 880, 888, 889, 890, 891, 892, 893, 895, 896, 897, 915, 932, 934, 938, 940, 952, 988], "len": [11, 30, 73, 124, 126, 173, 255, 325, 456, 497, 503, 517, 595, 764, 880, 886, 932, 938, 952, 988], "u32": [11, 49, 69, 160, 186, 233, 238, 246, 248, 255, 263, 270, 277, 278, 279, 280, 281, 282, 283, 286, 295, 324, 325, 340, 343, 347, 351, 353, 359, 360, 363, 370, 371, 414, 423, 439, 443, 452, 470, 487, 496, 499, 528, 532, 541, 543, 550, 573, 595, 627, 644, 673, 678, 686, 688, 693, 711, 712, 713, 728, 747, 776, 779, 786, 788, 791, 793, 796, 799, 800, 803, 810, 811, 832, 882, 922, 931, 934, 972, 975, 977, 988], "37": 11, "beaut": 11, "48": [11, 161, 255, 628, 693], "fmt_str_length": 11, "50": [11, 30, 149, 255, 319, 320, 321, 362, 369, 595, 753, 809, 988], "print": [11, 14, 16, 17, 22, 104, 120, 146, 158, 159, 173, 176, 217, 234, 255, 396, 557, 595, 630, 693, 843, 888, 968, 988, 996], "size": [12, 34, 103, 104, 124, 125, 126, 128, 130, 147, 160, 226, 255, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 542, 578, 579, 595, 627, 658, 693, 816, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 988, 996], "overwrit": [12, 28, 29, 90, 92, 93, 94, 96, 103, 104, 114, 135, 255, 620, 693], "chunk": [12, 100, 103, 104, 112, 114, 116, 117, 118, 126, 128, 149, 173, 184, 255, 268, 453, 595, 658, 693, 701, 751, 828, 869, 883, 965, 988], "stream": [12, 31, 71, 159, 224, 255, 613, 618, 620, 626, 637, 641, 646, 656, 657, 658, 666, 693], "engin": [12, 28, 105, 130, 136, 159, 224, 237, 255, 626, 637, 641, 666, 677, 693, 702, 988], "determin": [12, 30, 62, 64, 72, 93, 96, 101, 103, 104, 107, 112, 114, 118, 132, 136, 154, 160, 161, 172, 173, 223, 228, 255, 306, 317, 345, 361, 423, 431, 455, 459, 460, 461, 462, 463, 465, 466, 467, 479, 577, 595, 627, 628, 693, 739, 749, 781, 801, 832, 863, 914, 988], "schema": [12, 29, 49, 55, 65, 66, 67, 72, 75, 85, 86, 88, 90, 92, 93, 94, 96, 97, 103, 104, 109, 113, 114, 117, 124, 126, 136, 138, 139, 146, 147, 182, 185, 218, 255, 306, 431, 537, 583, 595, 611, 612, 617, 637, 642, 674, 677, 693, 756, 988], "thread": [12, 27, 100, 103, 104, 105, 130, 255, 269, 288, 595, 721], "pool": [12, 130], "For": [12, 29, 30, 105, 106, 107, 115, 149, 161, 174, 175, 237, 255, 306, 316, 376, 377, 378, 432, 454, 479, 486, 492, 493, 501, 552, 561, 562, 595, 628, 633, 677, 693, 701, 817, 818, 819, 884, 914, 921, 927, 928, 936, 970, 988], "some": [12, 25, 29, 30, 93, 103, 104, 114, 145, 255, 616, 693, 843, 988, 996], "dataset": [12, 103, 104, 114, 119, 411, 595, 606, 637, 693, 856, 988], "esp": 12, "when": [12, 14, 16, 20, 30, 34, 54, 55, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98, 103, 104, 105, 108, 112, 114, 115, 116, 117, 126, 128, 136, 137, 146, 147, 149, 151, 154, 160, 188, 197, 201, 208, 216, 222, 224, 255, 306, 319, 320, 321, 361, 376, 377, 378, 384, 421, 423, 432, 447, 481, 482, 498, 504, 510, 511, 543, 552, 561, 595, 609, 622, 627, 637, 652, 658, 660, 665, 666, 693, 701, 753, 754, 755, 801, 816, 817, 818, 819, 824, 863, 902, 903, 933, 939, 945, 946, 966, 988], "have": [12, 25, 30, 64, 75, 91, 103, 104, 107, 126, 128, 149, 172, 192, 198, 215, 255, 315, 330, 376, 377, 378, 432, 452, 511, 513, 595, 641, 656, 673, 693, 701, 763, 817, 818, 819, 829, 882, 946, 948, 988, 996], "larg": [12, 64, 160, 161, 175, 228, 255, 358, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 633, 693, 798, 802, 809], "element": [12, 22, 125, 128, 137, 171, 189, 197, 209, 222, 229, 255, 269, 271, 272, 273, 274, 275, 276, 286, 288, 289, 314, 322, 323, 325, 326, 327, 328, 329, 330, 380, 393, 402, 417, 418, 446, 452, 455, 470, 476, 477, 478, 483, 484, 507, 508, 526, 527, 529, 535, 549, 574, 578, 579, 581, 582, 587, 595, 609, 661, 665, 669, 693, 702, 703, 704, 705, 706, 707, 708, 719, 721, 722, 746, 752, 757, 758, 759, 760, 761, 762, 763, 820, 825, 831, 843, 855, 858, 860, 861, 876, 882, 900, 911, 912, 913, 917, 918, 942, 943, 959, 962, 963, 968, 973, 974, 978, 988], "too": [12, 160, 161, 175, 228, 255, 358, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 633, 693, 798, 802, 809], "optimist": 12, "lead": [12, 97, 119, 255, 471, 498, 510, 517, 524, 534, 549, 581, 595, 637, 677, 693, 904, 933, 945, 952, 988], "out": [12, 97, 120, 161, 255, 291, 305, 310, 400, 403, 486, 488, 588, 595, 628, 657, 658, 693, 724, 738, 742, 921, 923], "memori": [12, 72, 90, 91, 94, 95, 96, 103, 104, 108, 112, 114, 116, 117, 118, 135, 136, 149, 206, 237, 255, 453, 474, 595, 658, 677, 693, 701, 702, 883, 908, 909, 988], "error": [12, 29, 76, 103, 104, 114, 160, 161, 175, 197, 228, 255, 293, 305, 310, 316, 358, 362, 369, 410, 459, 460, 461, 462, 463, 465, 466, 467, 486, 488, 492, 494, 495, 511, 512, 513, 515, 595, 627, 628, 633, 677, 693, 726, 738, 742, 747, 798, 802, 809, 921, 923, 927, 929, 930, 946, 947, 948, 950, 988], "row": [12, 17, 22, 27, 30, 32, 34, 64, 65, 67, 72, 82, 84, 89, 93, 94, 96, 97, 103, 104, 107, 108, 112, 114, 116, 117, 118, 121, 124, 126, 136, 137, 138, 145, 149, 152, 154, 158, 160, 162, 163, 168, 170, 171, 172, 173, 175, 176, 177, 181, 185, 199, 207, 211, 212, 215, 217, 222, 224, 226, 227, 233, 237, 240, 249, 255, 269, 280, 289, 306, 381, 394, 415, 446, 456, 480, 482, 491, 523, 543, 552, 553, 561, 565, 569, 572, 576, 585, 588, 595, 609, 611, 613, 616, 620, 623, 624, 627, 629, 633, 634, 636, 637, 641, 658, 659, 663, 664, 665, 666, 668, 673, 677, 680, 689, 693, 701, 722, 821, 831, 855, 876, 886, 915, 926, 959, 988, 996], "per": [12, 27, 30, 124, 126, 137, 158, 185, 186, 208, 222, 244, 246, 247, 255, 269, 288, 291, 305, 315, 482, 543, 595, 609, 660, 665, 684, 686, 687, 693, 721, 724, 738], "everi": [12, 103, 104, 114, 160, 212, 215, 228, 255, 282, 283, 287, 289, 291, 292, 301, 304, 325, 326, 327, 328, 329, 330, 362, 369, 381, 491, 525, 552, 553, 595, 620, 627, 664, 693, 715, 716, 720, 722, 724, 725, 734, 737, 759, 760, 761, 762, 763, 802, 809, 821, 926, 961, 988], "process": [12, 27, 130, 255, 657, 658, 693], "liter": [13, 17, 29, 49, 69, 74, 101, 107, 127, 128, 129, 132, 158, 172, 178, 179, 183, 184, 187, 197, 198, 201, 210, 214, 227, 232, 255, 265, 267, 309, 336, 375, 382, 389, 391, 392, 398, 410, 413, 420, 436, 438, 442, 448, 453, 486, 501, 502, 520, 530, 538, 539, 542, 545, 547, 548, 554, 555, 556, 567, 569, 572, 577, 583, 584, 586, 595, 622, 652, 668, 671, 693, 699, 700, 741, 772, 822, 836, 902, 903, 921, 936, 937, 988, 995], "left": [13, 51, 64, 74, 121, 122, 131, 160, 161, 174, 175, 227, 255, 376, 377, 378, 397, 398, 459, 460, 461, 462, 463, 465, 466, 467, 470, 497, 517, 528, 545, 552, 553, 561, 576, 588, 595, 627, 628, 632, 633, 668, 693, 817, 818, 819, 836, 900, 932, 952, 972, 988], "center": [13, 30, 255, 376, 377, 378, 458, 459, 460, 461, 462, 463, 465, 466, 467, 595, 817, 818, 819, 888, 889, 890, 891, 892, 893, 895, 896, 897, 988], "right": [13, 15, 30, 74, 103, 104, 121, 122, 131, 160, 161, 174, 175, 255, 376, 377, 378, 398, 459, 460, 461, 462, 463, 465, 466, 467, 470, 479, 503, 545, 595, 627, 628, 632, 633, 693, 817, 818, 819, 836, 900, 914, 938, 988], "cell": 13, "align": [13, 30, 64, 72, 255, 517, 952], "keyerror": [13, 17], "recognis": [13, 17, 123], "column_abc": 13, "column_xyz": 13, "visibl": [14, 147, 255, 816, 988], "eg": [14, 22, 30, 255, 362, 511, 513, 530, 595, 946, 948], "low": [14, 130], "rang": [14, 30, 73, 74, 105, 131, 142, 147, 160, 173, 255, 340, 353, 359, 360, 362, 369, 370, 397, 542, 547, 555, 556, 586, 595, 627, 693, 764, 765, 776, 793, 799, 800, 802, 809, 810, 816, 876, 880, 988], "100": [14, 30, 93, 96, 103, 104, 114, 117, 255, 517, 542, 693, 889, 890, 892, 988, 996], "98": [14, 166, 255, 314, 481, 524, 529, 595], "99": [14, 30, 150, 151, 166, 169, 255, 263, 314, 382, 384, 481, 524, 529, 595, 621, 622, 693, 815, 822, 988], "tbl_col": 14, "10": [14, 26, 27, 29, 30, 31, 34, 49, 64, 72, 73, 74, 97, 105, 114, 126, 128, 131, 139, 149, 157, 160, 161, 163, 165, 166, 167, 184, 188, 190, 194, 195, 201, 211, 232, 235, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 268, 277, 278, 279, 281, 287, 292, 300, 301, 304, 319, 324, 326, 329, 331, 333, 334, 336, 354, 355, 361, 362, 369, 372, 393, 394, 397, 402, 410, 414, 415, 417, 446, 447, 460, 480, 517, 523, 537, 545, 552, 558, 561, 563, 565, 567, 568, 574, 581, 585, 595, 613, 627, 628, 629, 631, 636, 645, 646, 652, 658, 662, 663, 671, 675, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 693, 702, 720, 725, 733, 734, 737, 753, 764, 766, 772, 801, 809, 812, 815, 831, 843, 858, 860, 876, 902, 903, 959, 988, 996], "95": [14, 263, 595], "96": [14, 263, 595], "97": [14, 166, 255, 263, 595], "move": [15, 376, 377, 378, 459, 460, 462, 466, 595, 817, 818, 819, 889, 890, 892, 896, 988], "inlin": [15, 486, 492, 493, 501, 921, 927, 928, 936], "parenthes": 15, "below": [16, 30, 106, 115, 145, 255, 397, 588, 595, 616, 693], "ascii_ful": 17, "ascii_full_condens": 17, "ascii_no_bord": 17, "ascii_borders_onli": 17, "ascii_borders_only_condens": 17, "ascii_horizontal_onli": 17, "ascii_markdown": 17, "utf8_ful": [17, 64, 97], "utf8_full_condens": [17, 97], "utf8_no_bord": 17, "utf8_borders_onli": 17, "utf8_horizontal_onli": 17, "noth": [17, 487, 492, 495, 922, 927, 930], "none": [17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 47, 49, 51, 52, 54, 64, 73, 74, 75, 90, 92, 93, 94, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 136, 138, 142, 145, 150, 151, 158, 160, 161, 162, 167, 171, 174, 175, 176, 179, 181, 185, 186, 189, 197, 199, 201, 205, 207, 208, 214, 216, 219, 223, 224, 225, 226, 227, 228, 232, 235, 255, 264, 268, 269, 281, 291, 301, 306, 308, 319, 320, 321, 324, 326, 329, 333, 334, 361, 362, 369, 376, 377, 378, 379, 382, 383, 384, 390, 393, 397, 398, 404, 405, 406, 407, 408, 414, 421, 423, 443, 446, 452, 453, 458, 459, 460, 461, 462, 463, 465, 466, 467, 469, 473, 474, 475, 476, 480, 481, 485, 486, 489, 490, 494, 495, 496, 497, 498, 499, 500, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 515, 517, 518, 519, 528, 538, 540, 542, 545, 548, 550, 556, 557, 559, 560, 567, 568, 569, 572, 577, 578, 579, 580, 582, 583, 586, 587, 588, 595, 611, 612, 616, 621, 622, 627, 628, 631, 632, 633, 635, 637, 641, 644, 652, 655, 656, 657, 658, 659, 660, 666, 667, 668, 671, 672, 674, 675, 677, 693, 702, 709, 710, 724, 734, 739, 752, 753, 764, 765, 767, 783, 784, 785, 790, 801, 802, 809, 814, 815, 817, 818, 819, 822, 823, 824, 826, 829, 830, 832, 834, 835, 836, 845, 848, 849, 852, 855, 856, 863, 864, 865, 866, 867, 871, 880, 881, 882, 888, 889, 890, 891, 892, 893, 895, 896, 897, 899, 903, 905, 907, 910, 911, 914, 915, 918, 920, 921, 924, 925, 929, 930, 931, 932, 933, 934, 935, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 950, 964, 967, 968, 971, 972, 978, 979, 988, 995], "rounded_corn": 17, "style": [17, 30, 189, 255], "border": 17, "line": [17, 30, 103, 104, 107, 114, 158, 168, 170, 255, 492, 927], "includ": [17, 25, 27, 29, 30, 70, 106, 115, 126, 137, 142, 147, 160, 222, 223, 226, 255, 363, 398, 506, 507, 552, 595, 609, 627, 665, 693, 765, 803, 816, 836, 941, 942, 979, 988], "divid": [17, 362, 369, 376, 377, 378, 411, 595, 802, 809, 817, 818, 819, 856, 988], "same": [17, 29, 30, 53, 55, 64, 71, 72, 75, 108, 114, 124, 136, 143, 159, 208, 224, 232, 235, 237, 255, 261, 268, 369, 381, 427, 430, 445, 458, 459, 460, 461, 462, 463, 465, 466, 467, 482, 519, 546, 595, 615, 626, 637, 660, 666, 671, 675, 677, 693, 697, 701, 702, 772, 821, 888, 889, 890, 891, 892, 893, 895, 896, 897, 980, 988], "dens": [17, 158, 255, 452, 595, 882, 988], "space": 17, "horizont": [17, 72, 154, 165, 226, 255, 538, 539, 547, 548, 552, 553, 554, 558, 561, 569, 572, 576, 584], "markdown": 17, "compat": [17, 30, 34, 105, 255, 486, 487, 492, 493, 501, 502, 658, 693, 921, 922, 927, 928, 936, 937], "No": 17, "appli": [17, 27, 30, 49, 72, 114, 123, 126, 128, 154, 188, 255, 340, 343, 345, 346, 347, 349, 351, 353, 356, 359, 360, 363, 370, 371, 373, 377, 378, 421, 447, 458, 459, 460, 462, 466, 501, 511, 512, 513, 515, 537, 542, 552, 553, 561, 568, 576, 595, 629, 636, 637, 645, 693, 774, 775, 776, 779, 781, 782, 786, 788, 791, 793, 796, 799, 800, 803, 806, 810, 811, 813, 818, 819, 888, 889, 890, 892, 896, 936, 946, 947, 948, 950, 988], "round": [17, 30, 66, 97, 255, 318, 388, 526, 595, 750, 827, 988], "corner": [17, 97], "op": [17, 128, 255, 455, 595, 693, 988], "The": [17, 28, 30, 34, 46, 49, 53, 56, 64, 70, 90, 92, 93, 94, 96, 100, 103, 105, 112, 114, 130, 136, 144, 146, 158, 159, 160, 161, 162, 167, 172, 175, 182, 187, 197, 198, 201, 225, 228, 232, 235, 237, 255, 305, 308, 309, 310, 311, 340, 353, 358, 359, 362, 365, 369, 370, 379, 382, 390, 393, 421, 445, 452, 455, 458, 459, 460, 461, 462, 463, 465, 466, 467, 476, 479, 485, 488, 489, 494, 496, 497, 498, 503, 504, 510, 511, 517, 546, 559, 563, 578, 579, 580, 583, 588, 589, 591, 595, 596, 597, 601, 602, 603, 627, 628, 629, 631, 633, 636, 637, 642, 646, 652, 658, 667, 671, 675, 677, 693, 702, 738, 741, 742, 743, 752, 776, 793, 798, 799, 802, 805, 809, 810, 822, 830, 835, 882, 888, 889, 890, 891, 892, 893, 895, 896, 897, 911, 914, 920, 923, 924, 929, 931, 932, 933, 938, 939, 945, 946, 952, 982, 984, 988, 989, 992, 993, 994, 996], "one": [17, 28, 30, 54, 64, 82, 90, 92, 93, 94, 95, 96, 127, 128, 129, 133, 151, 152, 158, 159, 160, 161, 172, 181, 189, 197, 198, 202, 221, 236, 255, 263, 306, 384, 410, 418, 458, 481, 493, 524, 584, 588, 595, 622, 623, 626, 627, 628, 641, 653, 672, 676, 693, 701, 739, 824, 852, 861, 888, 928, 953, 988], "more": [17, 30, 32, 34, 54, 64, 72, 89, 90, 91, 92, 93, 94, 95, 96, 106, 112, 115, 126, 128, 133, 136, 141, 142, 172, 176, 181, 185, 197, 198, 199, 224, 237, 255, 266, 269, 307, 319, 320, 321, 410, 411, 418, 421, 444, 469, 479, 493, 531, 584, 588, 595, 641, 658, 666, 677, 693, 702, 740, 753, 754, 755, 765, 852, 856, 899, 914, 928, 974, 988, 996], "semigraph": 17, "box": [17, 136, 255], "draw": [17, 22, 23, 125, 996], "found": [17, 27, 51, 77, 86, 88, 93, 97, 146, 227, 255, 470, 495, 511, 513, 595, 668, 693, 900, 930, 946, 948, 988, 995], "unicod": 17, "block": [17, 159, 224, 255, 626, 649, 666, 673, 693, 902, 903, 988], "http": [17, 30, 91, 105, 135, 141, 255, 492, 927], "en": [17, 30, 255], "wikipedia": 17, "org": [17, 91, 105, 135, 141, 255], "wiki": 17, "drawing_charact": 17, "box_draw": 17, "mno": 17, "tbl_format": 17, "tbl_hide_column_data_typ": 17, "tbl_hide_dataframe_shap": 17, "hide": [18, 19, 20, 21, 30, 255], "etc": [18, 29, 30, 103, 106, 108, 112, 115, 116, 118, 255, 542, 902, 903, 988], "inform": [20, 70, 106, 115, 141, 255, 319, 320, 321, 411, 479, 486, 492, 493, 501, 595, 646, 693, 753, 754, 755, 856, 914, 921, 927, 928, 936, 988], "separ": [21, 27, 98, 100, 103, 104, 114, 187, 189, 216, 223, 225, 255, 269, 289, 293, 491, 548, 552, 553, 595, 667, 693, 722, 726, 926, 957, 966, 988], "between": [21, 72, 123, 124, 126, 128, 191, 247, 255, 293, 316, 332, 398, 446, 451, 463, 485, 549, 551, 574, 575, 578, 579, 581, 595, 647, 687, 693, 726, 747, 767, 836, 876, 881, 893, 920, 988], "set_tbl_column_data_type_inlin": 21, "max": [22, 30, 34, 49, 130, 142, 151, 159, 160, 161, 189, 255, 306, 319, 320, 326, 384, 445, 452, 459, 471, 508, 595, 622, 626, 627, 628, 658, 693, 739, 753, 754, 759, 765, 824, 882, 889, 904, 943, 988], "both": [22, 27, 55, 74, 105, 131, 160, 161, 174, 175, 182, 197, 255, 268, 398, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 632, 633, 642, 693, 836, 845, 988], "tbl_row": 22, "width": [23, 30, 103, 104, 255, 497, 503, 517, 693, 932, 938, 952], "char": [23, 55, 75, 493, 499, 928, 934], "enabl": [24, 75, 201, 232, 255, 471, 595, 652, 671, 693, 904, 988], "addit": [24, 29, 30, 93, 106, 115, 124, 143, 148, 159, 187, 201, 202, 208, 225, 232, 235, 255, 262, 379, 382, 445, 482, 486, 492, 493, 501, 538, 539, 543, 545, 546, 547, 548, 554, 559, 569, 572, 580, 583, 584, 595, 615, 619, 626, 652, 653, 660, 667, 671, 675, 693, 822, 921, 927, 928, 936, 988], "verbos": [24, 133, 493, 928], "debug": [24, 613, 620, 637, 693, 996], "log": [24, 66, 314, 374, 418, 438, 448, 529, 595, 746, 815, 973, 988], "if_set": 25, "env_onli": 25, "dict": [25, 29, 30, 34, 52, 65, 67, 70, 90, 92, 93, 94, 95, 96, 103, 104, 106, 107, 108, 109, 112, 113, 114, 115, 116, 118, 126, 172, 187, 193, 197, 198, 200, 214, 215, 255, 423, 595, 649, 651, 693, 863, 988], "show": [25, 30, 53, 145, 158, 176, 186, 255, 616, 646, 656, 693], "variabl": [25, 51, 98, 127, 130, 181, 216, 255, 641, 693, 966, 988, 995], "restrict": [25, 508, 943], "dictionari": [25, 30, 90, 92, 93, 94, 96, 103, 104, 109, 113, 114, 172, 187, 197, 198, 214, 215, 255, 423, 595, 693, 765, 863, 988], "those": [25, 30, 103, 255, 452, 492, 595, 882, 927, 988], "been": [25, 30, 73, 98, 255, 452, 595, 882, 988], "set_fmt_float": 25, "directli": [25, 51, 126, 128, 133, 376, 377, 378, 577, 595, 693, 817, 818, 819, 988, 996], "via": [25, 103, 104, 107, 114, 116, 117, 118, 172, 198, 255, 269, 595], "set_stat": 25, "all_stat": 25, "file": [26, 27, 31, 32, 33, 34, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 149, 255, 620, 648, 657, 658, 674, 693, 701, 988], "binaryio": [26, 31, 102, 103, 107, 108, 109, 112, 113, 255], "bytesio": [26, 27, 30, 31, 34, 102, 103, 104, 107, 108, 112, 255], "path": [26, 27, 29, 30, 31, 32, 33, 34, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 255, 471, 495, 595, 648, 657, 658, 674, 693, 904, 930, 988], "compress": [26, 31, 34, 255, 657, 658, 693], "avrocompress": [26, 255], "uncompress": [26, 31, 34, 108, 116, 255, 658, 693], "write": [26, 27, 28, 29, 30, 31, 32, 34, 104, 108, 255, 319, 320, 321, 595, 635, 656, 658, 674, 693, 753, 754, 755, 988], "apach": [26, 34, 102, 105, 255], "avro": [26, 102, 255, 606], "should": [26, 27, 30, 31, 32, 33, 34, 72, 90, 92, 94, 96, 98, 106, 114, 123, 124, 128, 135, 136, 143, 160, 161, 172, 175, 197, 198, 215, 216, 225, 228, 237, 255, 263, 269, 288, 317, 330, 358, 362, 369, 372, 379, 404, 406, 458, 459, 460, 461, 462, 463, 465, 466, 467, 470, 479, 546, 559, 566, 567, 578, 579, 588, 595, 615, 627, 628, 632, 633, 637, 656, 657, 658, 667, 674, 677, 693, 702, 721, 749, 763, 798, 802, 809, 812, 888, 889, 890, 891, 892, 893, 895, 896, 897, 900, 914, 988], "written": [26, 27, 30, 31, 32, 33, 34, 255, 657, 658, 674, 693], "snappi": [26, 34, 255, 658, 693], "deflat": [26, 255], "import": [26, 27, 30, 31, 34, 37, 64, 74, 90, 94, 95, 114, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 142, 158, 160, 173, 175, 218, 219, 226, 228, 255, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 557, 627, 633, 637, 693, 757, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 840, 844, 846, 847, 852, 888, 912, 962, 988, 996], "pathlib": [26, 27, 31, 34, 114, 255], "foo": [26, 27, 29, 31, 32, 33, 34, 53, 98, 136, 140, 141, 143, 144, 145, 146, 149, 152, 153, 154, 155, 156, 157, 162, 163, 164, 165, 166, 167, 169, 174, 178, 179, 180, 183, 186, 189, 191, 193, 194, 195, 197, 199, 200, 201, 203, 204, 205, 207, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 223, 224, 225, 229, 230, 231, 234, 255, 264, 285, 290, 291, 294, 295, 319, 320, 321, 358, 394, 396, 415, 456, 472, 473, 485, 487, 489, 491, 493, 498, 504, 506, 508, 510, 514, 516, 523, 525, 538, 541, 542, 544, 546, 549, 550, 551, 560, 564, 565, 569, 570, 571, 572, 573, 574, 575, 580, 581, 582, 585, 587, 588, 595, 614, 615, 616, 617, 623, 630, 631, 632, 644, 649, 651, 652, 666, 667, 670, 672, 674, 693, 726, 753, 798, 886, 922, 924, 926, 928, 943, 988], "barham": [26, 27, 29, 31, 34, 98, 140, 141, 143, 144, 145, 146, 152, 153, 155, 162, 163, 165, 174, 178, 179, 180, 183, 186, 191, 193, 195, 197, 199, 200, 201, 204, 205, 207, 209, 210, 211, 216, 217, 218, 219, 220, 224, 229, 230, 255, 546, 614, 615, 616, 617, 623, 632, 644, 649, 651, 652, 666, 672, 693], "d": [26, 27, 29, 31, 34, 55, 75, 93, 119, 142, 158, 162, 163, 166, 174, 211, 213, 226, 230, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 262, 342, 365, 368, 398, 447, 474, 487, 493, 507, 511, 512, 513, 545, 563, 595, 632, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 693, 778, 805, 808, 836, 922, 928, 942, 946, 947, 948, 988], "e": [26, 27, 29, 31, 34, 55, 75, 91, 103, 104, 107, 108, 112, 116, 118, 142, 158, 160, 161, 163, 175, 211, 213, 226, 228, 255, 262, 269, 358, 362, 369, 374, 379, 398, 416, 423, 459, 460, 461, 462, 463, 465, 466, 467, 474, 479, 559, 588, 595, 627, 628, 633, 635, 649, 693, 798, 802, 809, 815, 836, 901, 914, 970, 988], "dirpath": [26, 27, 31, 34, 114, 255], "new_fil": [26, 27, 31, 34, 255], "has_head": [27, 30, 103, 104, 107, 114, 255], "quot": [27, 103, 104, 114, 255], "batch_siz": [27, 103, 104, 117, 255], "1024": [27, 103, 104, 117, 255, 658, 693], "datetime_format": [27, 255], "date_format": [27, 255], "time_format": [27, 255], "float_precis": [27, 30, 255], "null_valu": [27, 103, 104, 114, 255], "comma": [27, 255], "csv": [27, 103, 104, 107, 114, 255, 606, 657, 658, 693], "result": [27, 32, 33, 64, 72, 94, 96, 101, 105, 106, 114, 116, 118, 119, 128, 132, 149, 160, 161, 185, 205, 219, 228, 235, 255, 306, 365, 368, 376, 377, 378, 382, 411, 445, 456, 458, 459, 460, 461, 462, 463, 465, 466, 467, 471, 473, 506, 507, 513, 530, 542, 552, 553, 568, 577, 578, 579, 595, 610, 627, 628, 637, 646, 655, 657, 658, 674, 675, 693, 701, 805, 808, 817, 818, 819, 856, 886, 888, 889, 890, 891, 892, 893, 895, 896, 897, 904, 907, 941, 942, 948, 970, 988, 995, 996], "If": [27, 29, 30, 31, 32, 33, 49, 55, 69, 70, 72, 73, 74, 90, 91, 92, 93, 94, 95, 96, 98, 101, 103, 104, 106, 107, 108, 112, 114, 115, 116, 117, 118, 127, 131, 132, 135, 136, 137, 145, 149, 158, 160, 161, 163, 171, 172, 175, 177, 181, 185, 198, 199, 207, 211, 215, 216, 218, 222, 223, 224, 226, 227, 255, 269, 301, 306, 319, 320, 321, 336, 354, 355, 361, 385, 411, 421, 423, 452, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 475, 479, 480, 494, 496, 498, 499, 504, 505, 506, 507, 508, 510, 511, 512, 513, 515, 538, 539, 540, 542, 549, 550, 552, 554, 561, 567, 569, 572, 577, 578, 579, 581, 583, 584, 588, 595, 609, 616, 618, 627, 628, 632, 633, 637, 641, 649, 658, 659, 665, 666, 668, 674, 677, 693, 701, 702, 734, 739, 753, 754, 755, 764, 772, 794, 795, 801, 829, 831, 832, 855, 856, 858, 880, 882, 884, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 904, 910, 914, 915, 929, 931, 933, 934, 939, 940, 941, 942, 943, 945, 946, 947, 948, 950, 959, 965, 970, 979, 988, 995], "instead": [27, 32, 33, 49, 53, 64, 69, 72, 74, 101, 103, 112, 126, 131, 132, 136, 160, 161, 172, 175, 185, 187, 197, 198, 201, 219, 228, 232, 255, 279, 358, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 496, 498, 504, 510, 542, 569, 572, 577, 583, 595, 621, 627, 628, 633, 652, 671, 674, 693, 711, 798, 802, 809, 902, 903, 931, 933, 939, 945, 971, 988, 995], "whether": [27, 74, 94, 96, 128, 131, 202, 255, 345, 361, 363, 428, 429, 471, 595, 637, 653, 693, 781, 801, 803, 995], "header": [27, 30, 34, 97, 103, 104, 107, 114, 146, 189, 223, 255, 658, 693], "field": [27, 56, 86, 88, 93, 218, 225, 255, 306, 423, 493, 494, 507, 508, 519, 552, 553, 568, 583, 595, 667, 693, 739, 942, 943, 955, 957], "symbol": [27, 255], "byte": [27, 103, 104, 107, 108, 109, 112, 113, 114, 147, 255, 309, 312, 313, 496, 499, 658, 693, 741, 744, 745, 816, 931, 934, 988], "specifi": [27, 30, 64, 74, 77, 86, 88, 107, 126, 137, 143, 147, 148, 151, 159, 187, 197, 201, 202, 208, 222, 225, 232, 235, 255, 376, 377, 378, 379, 384, 423, 445, 455, 482, 497, 503, 538, 539, 543, 545, 546, 547, 548, 554, 559, 569, 572, 580, 583, 584, 595, 609, 615, 619, 622, 626, 652, 653, 660, 665, 667, 671, 675, 693, 816, 817, 818, 819, 824, 932, 938, 988], "defin": [27, 30, 37, 74, 123, 124, 126, 131, 136, 160, 161, 185, 188, 237, 255, 269, 305, 398, 447, 459, 460, 461, 462, 463, 465, 466, 467, 540, 567, 583, 595, 627, 628, 645, 677, 693, 702, 738, 836, 988], "chrono": [27, 255, 365, 368, 511, 512, 513, 515, 805, 808, 946, 947, 948, 950], "rust": [27, 34, 83, 108, 112, 136, 237, 255, 677, 702, 988], "crate": [27, 255, 486, 487, 492, 493, 501, 502, 511, 512, 513, 515, 921, 922, 927, 928, 936, 937, 946, 947, 948, 950], "fraction": [27, 121, 122, 199, 255, 363, 446, 469, 511, 513, 595, 803, 876, 899, 946, 948, 988], "second": [27, 74, 125, 131, 160, 161, 175, 228, 255, 358, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 511, 513, 556, 557, 586, 588, 595, 627, 628, 633, 693, 798, 802, 809, 946, 948, 996], "precis": [27, 30, 38, 172, 198, 215, 255, 335, 771], "infer": [27, 90, 92, 93, 94, 95, 96, 103, 104, 107, 114, 117, 136, 255, 456, 494, 511, 512, 513, 515, 577, 595, 693, 886, 929, 946, 947, 948, 950, 988], "maximum": [27, 103, 104, 114, 124, 125, 126, 128, 178, 255, 282, 424, 440, 452, 569, 595, 638, 693, 715, 753, 783, 864, 872, 877, 882, 988], "timeunit": [27, 37, 39, 74, 255, 335, 336, 367, 372, 513, 771, 772, 807, 812, 948], "frame": [27, 28, 30, 49, 50, 51, 52, 53, 54, 64, 72, 93, 121, 126, 136, 138, 172, 173, 182, 185, 188, 197, 198, 219, 226, 255, 611, 642, 645, 693, 752, 988, 995, 996], "datetim": [27, 30, 64, 74, 97, 126, 131, 142, 158, 160, 161, 173, 175, 228, 255, 285, 286, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 459, 460, 461, 462, 463, 465, 466, 467, 511, 513, 528, 557, 563, 567, 595, 627, 628, 633, 693, 718, 719, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 852, 872, 873, 903, 946, 948, 972, 988], "place": [27, 137, 144, 165, 166, 194, 204, 205, 208, 222, 230, 255, 279, 293, 300, 472, 473, 481, 595, 609, 654, 655, 660, 665, 693, 711, 726, 733, 883, 885, 906, 907, 916, 988], "float64": [27, 30, 93, 101, 103, 126, 132, 146, 147, 154, 200, 219, 232, 255, 271, 272, 273, 274, 275, 276, 316, 322, 323, 363, 379, 404, 406, 477, 478, 526, 527, 546, 559, 577, 595, 617, 651, 671, 693, 803, 971, 976, 988], "datatyp": [27, 32, 46, 62, 90, 92, 93, 94, 96, 99, 107, 109, 113, 128, 146, 148, 154, 200, 255, 289, 316, 379, 474, 491, 528, 546, 559, 567, 595, 606, 619, 651, 674, 693, 702, 722, 747, 765, 845, 850, 852, 854, 908, 926, 972, 988], "repres": [27, 47, 62, 74, 90, 92, 94, 95, 96, 131, 209, 229, 255, 404, 406, 484, 535, 538, 546, 549, 559, 567, 574, 578, 579, 581, 582, 587, 595, 661, 669, 693, 903, 918, 978, 988], "null": [27, 29, 51, 64, 72, 93, 103, 104, 114, 119, 135, 137, 138, 142, 145, 151, 154, 155, 167, 174, 179, 180, 186, 189, 191, 204, 205, 208, 209, 210, 214, 219, 222, 225, 227, 229, 232, 238, 255, 264, 268, 269, 279, 287, 290, 291, 294, 300, 305, 306, 308, 310, 319, 320, 321, 324, 326, 329, 331, 333, 334, 341, 344, 348, 350, 352, 357, 364, 376, 377, 378, 379, 382, 383, 384, 385, 390, 397, 404, 405, 406, 407, 408, 414, 423, 443, 446, 453, 458, 459, 460, 461, 462, 463, 465, 466, 467, 472, 473, 474, 476, 481, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 499, 500, 503, 505, 507, 508, 509, 517, 518, 519, 528, 536, 538, 545, 547, 548, 550, 559, 567, 578, 579, 583, 588, 595, 609, 611, 616, 622, 631, 632, 644, 654, 655, 660, 665, 667, 668, 671, 672, 674, 678, 693, 702, 711, 720, 733, 738, 739, 742, 752, 753, 766, 769, 777, 780, 787, 789, 792, 797, 804, 817, 818, 819, 822, 824, 829, 848, 849, 875, 876, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 901, 906, 907, 911, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 934, 935, 938, 940, 942, 943, 944, 968, 970, 971, 972, 979, 988, 995, 996], "empti": [27, 81, 93, 103, 104, 107, 114, 138, 139, 169, 181, 255, 567, 580, 611, 612, 641, 693, 752, 756, 839, 988], "table_nam": [28, 30, 255], "connection_uri": [28, 105, 255], "if_exist": [28, 255], "dbwritemod": [28, 255], "fail": [28, 29, 91, 106, 108, 115, 135, 224, 255, 280, 306, 511, 512, 513, 515, 595, 666, 693, 702, 946, 947, 948, 950, 988], "dbwriteengin": [28, 255], "sqlalchemi": [28, 255], "databas": [28, 105, 255, 606], "append": [28, 29, 126, 149, 174, 175, 255, 453, 588, 595, 632, 633, 693, 988], "creat": [28, 30, 73, 74, 90, 94, 96, 115, 124, 125, 126, 127, 128, 129, 131, 138, 139, 160, 161, 186, 189, 228, 232, 255, 306, 336, 362, 369, 453, 505, 534, 542, 547, 555, 556, 557, 586, 595, 611, 612, 618, 627, 628, 671, 693, 752, 756, 764, 769, 772, 802, 809, 874, 880, 883, 940, 970, 988, 995, 996], "connect": [28, 103, 105, 108, 112, 116, 118, 119, 255, 607], "uri": [28, 29, 105, 106, 115, 255], "postgresql": [28, 105, 255, 445, 595], "usernam": [28, 103, 105, 108, 112, 116, 118, 255], "password": [28, 103, 105, 108, 112, 116, 118, 255], "server": [28, 105, 255], "port": [28, 103, 105, 108, 112, 116, 118, 255], "replac": [28, 29, 103, 104, 114, 150, 151, 195, 223, 232, 255, 336, 361, 423, 502, 595, 621, 671, 693, 772, 801, 863, 902, 903, 937, 988], "insert": [28, 103, 104, 108, 112, 114, 116, 117, 118, 166, 194, 223, 225, 255, 470, 485, 517, 595, 667, 693, 900, 920, 952, 988], "mode": [28, 29, 49, 101, 132, 255, 493, 577, 595, 693, 928, 988, 995], "new": [28, 29, 30, 114, 133, 136, 145, 165, 166, 185, 186, 193, 194, 212, 225, 226, 232, 255, 264, 336, 381, 397, 422, 501, 502, 507, 508, 518, 519, 525, 595, 606, 616, 649, 664, 667, 671, 677, 693, 698, 769, 772, 821, 874, 885, 936, 937, 942, 943, 953, 955, 961, 967, 980, 988, 995], "alreadi": [28, 29, 255, 288, 330, 595, 721, 763, 988], "adbc": [28, 105, 255], "deltalak": [29, 106, 115, 120, 255], "deltat": [29, 255], "ignor": [29, 125, 126, 128, 179, 210, 255, 287, 331, 361, 376, 377, 378, 440, 441, 595, 720, 766, 801, 817, 818, 819, 872, 873, 988], "overwrite_schema": [29, 255], "storage_opt": [29, 103, 106, 108, 112, 115, 116, 118, 255], "delta_write_opt": [29, 255], "delta": [29, 39, 106, 115, 209, 229, 255, 484, 535, 549, 574, 578, 579, 581, 582, 587, 595, 606, 661, 669, 693, 918, 978, 988], "like": [29, 74, 91, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 131, 168, 170, 174, 255, 288, 434, 452, 492, 584, 595, 620, 648, 693, 721, 882, 927, 988], "categor": [29, 55, 75, 98, 174, 216, 217, 255, 317, 423, 528, 595, 748, 749, 972, 988], "protocol": [29, 91, 105, 135, 255], "object": [29, 30, 31, 34, 54, 72, 74, 91, 92, 97, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 115, 124, 126, 128, 131, 135, 159, 160, 161, 176, 218, 219, 255, 567, 606, 612, 627, 628, 630, 635, 648, 693, 714, 748, 770, 919, 965, 988, 995], "handl": [29, 72, 97, 103, 104, 114, 119, 255, 287, 331, 517, 595, 720, 766, 952, 988], "throw": [29, 91, 255, 316, 494, 495, 595, 747, 929, 930, 988], "add": [29, 30, 104, 136, 149, 160, 232, 233, 255, 449, 521, 557, 561, 588, 595, 627, 632, 671, 672, 673, 693, 701, 988], "anyth": [29, 197, 255, 493, 928], "updat": [29, 255, 693], "extra": [29, 34, 103, 106, 107, 108, 112, 115, 116, 118, 149, 255, 658, 693, 701, 988], "storag": [29, 103, 106, 108, 112, 115, 116, 118, 255], "backend": [29, 105, 106, 115, 255], "cloud": [29, 106, 115, 119, 255], "configur": [29, 106, 115, 255], "authent": [29, 106, 115, 255], "see": [29, 30, 105, 106, 107, 115, 121, 122, 126, 128, 141, 174, 188, 255, 319, 320, 321, 384, 397, 411, 421, 479, 486, 492, 493, 501, 576, 595, 753, 754, 755, 856, 914, 921, 927, 928, 936, 988, 996], "here": [29, 30, 90, 92, 93, 94, 96, 105, 106, 115, 124, 126, 128, 255, 495, 693, 930], "gc": [29, 106, 115, 255], "azur": [29, 106, 115, 255], "keyword": [29, 52, 106, 112, 115, 141, 188, 197, 201, 232, 235, 255, 447, 580, 583, 595, 645, 652, 671, 675, 693, 988], "argument": [29, 34, 103, 106, 112, 115, 141, 143, 148, 159, 160, 161, 179, 187, 188, 189, 201, 202, 208, 210, 219, 225, 228, 232, 235, 255, 362, 369, 379, 398, 445, 447, 459, 460, 461, 462, 463, 465, 466, 467, 482, 498, 504, 510, 511, 538, 539, 543, 545, 546, 547, 548, 554, 559, 569, 572, 580, 583, 584, 595, 615, 619, 626, 627, 628, 645, 652, 653, 660, 667, 671, 675, 693, 802, 809, 836, 933, 939, 945, 946, 971, 988], "while": [29, 104, 106, 107, 115, 126, 128, 172, 181, 223, 255, 641, 693], "lake": [29, 106, 115, 255, 606], "instanti": [29, 30, 201, 232, 255, 652, 671, 693], "basic": [29, 30, 255, 996], "filesystem": [29, 106, 115, 255], "table_path": [29, 106, 115, 255], "doe": [29, 64, 72, 84, 90, 92, 93, 94, 96, 97, 103, 104, 106, 107, 114, 115, 119, 121, 122, 149, 173, 197, 198, 224, 232, 255, 306, 369, 372, 423, 532, 560, 595, 620, 637, 666, 671, 693, 701, 812, 829, 863, 909, 979, 988], "match": [29, 30, 72, 84, 90, 92, 93, 94, 96, 121, 122, 151, 175, 197, 255, 429, 486, 487, 490, 492, 493, 494, 495, 501, 502, 509, 511, 512, 513, 546, 622, 633, 693, 845, 852, 921, 922, 925, 927, 928, 929, 930, 936, 937, 944, 946, 947, 948, 988], "version": [29, 70, 73, 74, 98, 106, 115, 120, 255, 354, 355, 511, 566, 574, 576, 581, 794, 795, 946], "old": [29, 193, 255, 649, 693], "existing_table_path": [29, 255], "store": [29, 103, 112, 149, 172, 198, 255, 701, 988], "bucket": [29, 106, 115, 255, 362, 369, 802, 809, 832, 988], "prefix": [29, 133, 255, 264, 313, 422, 509, 517, 521, 595, 745, 944, 952], "aws_region": [29, 115, 255], "the_aws_region": [29, 255], "aws_access_key_id": [29, 106, 115, 255], "the_aws_access_key_id": [29, 106, 115, 255], "aws_secret_access_kei": [29, 106, 115, 255], "the_aws_secret_access_kei": [29, 106, 115, 255], "workbook": [30, 255], "worksheet": [30, 255], "posit": [30, 143, 148, 159, 187, 201, 202, 208, 225, 232, 235, 255, 376, 377, 378, 379, 445, 482, 500, 538, 539, 543, 545, 546, 547, 548, 554, 559, 569, 572, 580, 583, 584, 595, 615, 619, 626, 652, 653, 660, 667, 671, 675, 693, 817, 818, 819, 935, 988], "tupl": [30, 105, 136, 172, 197, 198, 203, 234, 255, 456, 595, 646, 656, 693, 886, 988], "a1": [30, 65, 67, 255], "table_styl": [30, 255], "column_format": [30, 255], "dtype_format": [30, 255], "oneormoredatatyp": [30, 124, 255, 852, 988], "conditional_format": [30, 255], "conditionalformatdict": [30, 255], "column_tot": [30, 255], "columntotalsdefinit": [30, 255], "column_width": [30, 255], "row_tot": [30, 255], "rowtotalsdefinit": [30, 255], "row_height": [30, 255], "sparklin": [30, 255], "sequenc": [30, 56, 64, 71, 90, 92, 93, 94, 96, 98, 100, 103, 104, 114, 124, 125, 126, 137, 142, 143, 145, 148, 149, 174, 175, 181, 185, 188, 189, 208, 216, 222, 223, 224, 225, 226, 227, 228, 255, 306, 402, 421, 447, 482, 519, 540, 543, 552, 553, 561, 563, 568, 576, 595, 609, 615, 616, 619, 632, 633, 645, 660, 665, 666, 667, 668, 693, 701, 739, 765, 767, 903, 955, 988], "formula": [30, 255, 374, 595, 815, 988], "autofilt": [30, 255], "autofit": [30, 255], "hidden_column": [30, 255], "hide_gridlin": [30, 255], "sheet_zoom": [30, 255], "excel": [30, 107, 255, 606], "open": [30, 103, 104, 107, 108, 112, 116, 118, 255], "xlsxwriter": [30, 120, 255], "ha": [30, 64, 73, 98, 114, 135, 228, 255, 269, 314, 330, 410, 432, 529, 540, 595, 677, 746, 752, 763, 765, 829, 842, 973, 988], "close": [30, 74, 131, 160, 161, 255, 398, 418, 459, 460, 461, 462, 463, 465, 466, 467, 479, 595, 627, 628, 693, 836, 914, 988], "xlsx": [30, 107, 255], "work": [30, 38, 104, 107, 161, 194, 255, 269, 288, 307, 318, 319, 320, 321, 379, 388, 445, 499, 531, 595, 628, 693, 721, 740, 750, 753, 754, 755, 827, 934, 974, 988], "directori": [30, 112, 255], "sheet1": [30, 255], "valid": [30, 49, 108, 112, 128, 133, 147, 255, 330, 486, 487, 492, 493, 495, 501, 502, 595, 763, 816, 829, 921, 922, 927, 928, 930, 936, 937, 988], "notat": [30, 255], "integ": [30, 42, 43, 44, 45, 58, 59, 60, 61, 124, 126, 127, 129, 160, 161, 255, 318, 363, 388, 389, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 500, 537, 542, 563, 577, 595, 627, 628, 693, 709, 710, 750, 803, 827, 845, 884, 894, 903, 935, 988, 995, 996], "medium": [30, 255], "kei": [30, 64, 70, 72, 160, 175, 182, 187, 189, 193, 196, 255, 583, 627, 633, 642, 649, 650, 693], "contain": [30, 64, 70, 92, 95, 97, 106, 115, 121, 125, 137, 145, 173, 185, 189, 222, 255, 269, 402, 423, 487, 490, 492, 493, 495, 508, 509, 595, 609, 616, 646, 665, 693, 863, 869, 922, 925, 927, 928, 930, 943, 944, 965, 988], "follow": [30, 70, 103, 104, 106, 114, 115, 136, 160, 161, 175, 188, 228, 255, 269, 358, 362, 369, 447, 452, 459, 460, 461, 462, 463, 465, 466, 467, 519, 530, 540, 588, 589, 591, 595, 596, 597, 601, 602, 603, 627, 628, 633, 645, 693, 798, 802, 809, 882, 902, 903, 982, 984, 988, 989, 992, 993, 994, 996], "first_column": [30, 255], "last_column": [30, 255], "banded_column": [30, 255], "banded_row": [30, 255], "sheet": [30, 107, 255], "chart": [30, 255, 646, 693], "subsequ": [30, 54, 192, 219, 255, 306, 618, 693], "colnam": [30, 114, 126, 146, 255, 617, 693], "given": [30, 49, 50, 64, 73, 74, 90, 92, 93, 94, 96, 103, 104, 114, 123, 124, 126, 127, 128, 129, 131, 136, 137, 147, 148, 171, 187, 188, 197, 204, 205, 208, 222, 227, 255, 269, 285, 300, 306, 337, 365, 367, 368, 374, 398, 416, 445, 447, 452, 455, 456, 459, 460, 462, 465, 466, 467, 470, 472, 473, 493, 511, 513, 519, 559, 577, 595, 609, 619, 637, 645, 654, 655, 660, 665, 668, 677, 693, 702, 718, 733, 739, 764, 773, 805, 807, 808, 815, 816, 832, 836, 855, 859, 862, 874, 880, 882, 886, 889, 890, 892, 895, 896, 897, 900, 906, 907, 928, 946, 948, 976, 980, 988, 995, 996], "dd": [30, 255], "mm": [30, 255], "yyyi": [30, 255], "00": [30, 74, 126, 131, 160, 175, 228, 255, 335, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 511, 513, 515, 557, 627, 633, 693, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 810, 811, 812, 813, 946, 948, 950], "dtype": [30, 67, 75, 90, 92, 94, 96, 97, 101, 103, 104, 114, 123, 124, 125, 126, 128, 132, 135, 160, 161, 175, 217, 218, 219, 255, 269, 271, 272, 273, 274, 275, 276, 279, 282, 283, 284, 293, 305, 316, 319, 320, 321, 322, 323, 328, 329, 341, 344, 348, 350, 352, 357, 364, 372, 379, 381, 419, 421, 423, 454, 455, 459, 460, 461, 462, 463, 465, 466, 467, 474, 477, 478, 485, 494, 505, 511, 522, 524, 526, 527, 528, 533, 534, 540, 542, 550, 559, 563, 567, 568, 577, 583, 595, 627, 628, 633, 693, 715, 716, 717, 726, 738, 747, 752, 753, 754, 755, 761, 762, 765, 766, 777, 780, 787, 789, 792, 797, 804, 812, 816, 821, 839, 845, 852, 862, 863, 887, 901, 908, 920, 929, 940, 946, 958, 968, 970, 971, 972, 976, 988, 996], "overridden": [30, 90, 92, 94, 96, 130, 255, 693], "basi": [30, 126, 255], "param": [30, 90, 92, 93, 94, 96, 103, 104, 114, 125, 126, 128, 197, 255, 693], "It": [30, 136, 182, 188, 237, 255, 269, 315, 431, 595, 637, 642, 677, 693, 902, 903, 988], "also": [30, 54, 74, 93, 114, 124, 125, 126, 127, 128, 146, 159, 160, 161, 182, 185, 201, 208, 232, 255, 326, 329, 361, 397, 398, 452, 459, 460, 461, 462, 463, 465, 466, 467, 482, 552, 553, 561, 563, 576, 588, 594, 595, 600, 626, 627, 628, 642, 652, 660, 671, 672, 693, 801, 836, 882, 988], "group": [30, 34, 49, 104, 159, 160, 161, 173, 185, 187, 189, 226, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 263, 269, 288, 387, 445, 481, 482, 486, 492, 493, 501, 524, 540, 595, 626, 627, 628, 658, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 721, 921, 927, 928, 936], "float_dtyp": [30, 255], "simplifi": [30, 71, 255, 613, 618, 620, 646, 656, 657, 658, 693], "uniform": [30, 255], "condit": [30, 69, 145, 152, 197, 255, 490, 509, 561, 588, 616, 623, 693], "suppli": [30, 90, 92, 93, 94, 96, 197, 255, 447, 595, 693], "typenam": [30, 255], "3_color_scal": [30, 255], "data_bar": [30, 255], "make": [30, 56, 72, 90, 95, 103, 104, 105, 108, 112, 116, 118, 160, 161, 182, 185, 192, 228, 255, 377, 378, 423, 455, 507, 517, 595, 627, 628, 642, 693, 818, 819, 832, 863, 942, 952, 988, 996], "icon": [30, 255], "multipl": [30, 52, 71, 72, 103, 104, 114, 116, 117, 118, 124, 128, 137, 143, 147, 149, 152, 159, 160, 165, 173, 187, 189, 201, 202, 208, 222, 232, 235, 255, 305, 428, 432, 437, 438, 445, 456, 459, 460, 461, 462, 463, 465, 466, 467, 482, 538, 539, 543, 546, 552, 553, 554, 561, 568, 569, 572, 576, 584, 588, 595, 609, 615, 623, 626, 627, 652, 653, 660, 665, 671, 675, 693, 701, 738, 816, 868, 886, 988], "singl": [30, 50, 64, 72, 103, 104, 105, 112, 114, 124, 143, 144, 145, 149, 156, 171, 187, 197, 208, 255, 269, 286, 305, 358, 385, 421, 453, 456, 482, 485, 536, 538, 539, 540, 543, 546, 547, 548, 554, 568, 569, 572, 584, 595, 615, 616, 660, 693, 701, 719, 738, 798, 883, 886, 920, 965, 988], "across": [30, 64, 255, 538, 539, 554, 569, 572, 584], "effect": [30, 135, 154, 255, 269, 595, 673, 693], "heatmap": [30, 255], "min": [30, 34, 131, 142, 151, 160, 161, 189, 255, 319, 321, 327, 384, 445, 452, 462, 580, 595, 622, 627, 628, 658, 693, 753, 755, 760, 765, 824, 882, 892, 988, 996], "entir": [30, 255], "final": [30, 64, 118, 255, 376, 377, 378, 595, 620, 693, 817, 818, 819, 988], "made": [30, 131, 255, 970, 988], "up": [30, 56, 105, 172, 175, 198, 215, 255, 269, 318, 517, 595, 632, 633, 637, 693, 750, 952, 988], "abov": [30, 255, 369, 588], "order": [30, 49, 51, 64, 93, 121, 136, 137, 159, 160, 161, 187, 188, 189, 199, 202, 208, 222, 224, 228, 255, 269, 279, 302, 307, 317, 452, 469, 470, 471, 481, 482, 519, 531, 532, 543, 595, 609, 626, 627, 628, 641, 653, 657, 658, 660, 665, 666, 693, 702, 711, 735, 740, 749, 764, 851, 880, 882, 887, 899, 900, 904, 916, 955, 974, 975, 988], "than": [30, 74, 89, 94, 96, 103, 104, 114, 119, 126, 128, 136, 158, 159, 172, 175, 187, 197, 198, 199, 226, 237, 255, 269, 391, 392, 410, 413, 420, 469, 479, 497, 503, 508, 517, 549, 581, 584, 595, 626, 633, 657, 658, 677, 693, 702, 899, 914, 932, 938, 943, 952, 988, 996], "total": [30, 147, 255, 816, 988], "export": [30, 172, 173, 198, 215, 218, 255], "numer": [30, 175, 255, 262, 319, 320, 321, 389, 398, 418, 436, 438, 448, 455, 474, 520, 530, 595, 606, 633, 693, 753, 754, 755, 765, 836, 850, 901, 908, 988, 996], "associ": [30, 50, 52, 64, 125, 255], "sum": [30, 49, 64, 147, 154, 159, 161, 171, 189, 235, 255, 269, 306, 328, 329, 374, 385, 459, 460, 462, 465, 466, 467, 536, 538, 552, 554, 561, 576, 595, 613, 618, 620, 626, 628, 644, 646, 656, 675, 693, 761, 762, 815, 816, 889, 890, 892, 895, 896, 897, 988], "pass": [30, 34, 52, 64, 74, 92, 107, 114, 124, 126, 128, 137, 141, 143, 159, 160, 161, 163, 177, 187, 188, 201, 208, 211, 222, 228, 232, 235, 255, 269, 342, 361, 382, 396, 445, 447, 482, 498, 504, 510, 538, 539, 543, 546, 554, 563, 569, 572, 583, 584, 595, 609, 615, 626, 627, 628, 630, 637, 645, 652, 656, 660, 665, 671, 675, 693, 702, 778, 801, 822, 831, 858, 933, 939, 945, 959, 988], "must": [30, 73, 91, 92, 106, 115, 142, 148, 160, 161, 175, 182, 197, 255, 306, 421, 459, 460, 461, 462, 463, 465, 466, 467, 595, 619, 627, 628, 633, 637, 642, 693, 764, 765, 880, 988], "funcnam": [30, 255], "averag": [30, 255, 376, 377, 378, 452, 595, 817, 818, 819, 882, 988], "count_num": [30, 255], "count": [30, 49, 103, 104, 108, 112, 114, 116, 117, 118, 142, 160, 161, 175, 185, 186, 189, 223, 227, 228, 233, 237, 246, 255, 270, 286, 325, 358, 414, 439, 443, 459, 460, 461, 462, 463, 465, 466, 467, 487, 532, 534, 541, 573, 595, 627, 628, 633, 644, 668, 673, 677, 686, 693, 719, 765, 798, 832, 870, 875, 922, 975, 977, 988], "std_dev": [30, 255], "var": [30, 129, 255, 595, 693, 988], "pixel": [30, 255], "unit": [30, 37, 39, 74, 126, 128, 147, 255, 335, 336, 342, 367, 372, 419, 432, 511, 513, 533, 563, 595, 646, 693, 771, 772, 778, 807, 812, 816, 862, 946, 948, 976, 988, 996], "hand": [30, 103, 104, 114, 255], "side": [30, 160, 161, 255, 398, 459, 460, 461, 462, 463, 465, 466, 467, 470, 595, 627, 628, 693, 836, 900, 988], "call": [30, 53, 104, 126, 128, 133, 136, 159, 160, 161, 176, 254, 255, 269, 326, 329, 569, 572, 595, 607, 626, 627, 628, 692, 693, 702, 988], "ad": [30, 93, 135, 160, 223, 232, 255, 268, 382, 552, 553, 595, 627, 671, 693, 822, 988], "end": [30, 74, 103, 104, 112, 114, 131, 160, 255, 301, 312, 358, 362, 363, 379, 398, 486, 490, 493, 505, 509, 542, 546, 559, 588, 595, 627, 629, 636, 646, 693, 734, 744, 798, 802, 836, 925, 928, 940, 944, 988], "wise": [30, 64, 154, 255, 271, 272, 273, 274, 275, 276, 322, 323, 380, 417, 476, 477, 478, 526, 527, 552, 553, 561, 569, 572, 576, 595, 703, 704, 705, 706, 707, 708, 757, 758, 820, 860, 861, 911, 912, 913, 962, 963, 988], "particip": [30, 255], "distinct": [30, 128, 187, 255, 307, 452, 557, 595, 740, 882, 988, 996], "referenc": [30, 255, 519], "differ": [30, 103, 119, 121, 149, 160, 161, 172, 198, 215, 223, 255, 287, 331, 340, 358, 359, 361, 370, 423, 440, 441, 511, 532, 560, 563, 595, 618, 627, 628, 693, 701, 702, 720, 766, 776, 798, 799, 801, 810, 872, 873, 901, 946, 988], "row_index": [30, 255], "height": [30, 145, 255], "provid": [30, 52, 103, 104, 105, 106, 114, 115, 126, 128, 171, 255, 306, 310, 311, 488, 489, 492, 494, 495, 563, 583, 606, 657, 658, 693, 742, 743, 832, 855, 923, 924, 927, 929, 930, 988, 995, 996], "intersect": [30, 255], "bodi": [30, 255], "start": [30, 74, 102, 103, 104, 108, 112, 114, 116, 117, 118, 130, 131, 159, 160, 176, 207, 228, 233, 255, 301, 313, 340, 342, 343, 345, 346, 351, 353, 359, 360, 362, 363, 367, 369, 370, 371, 373, 379, 398, 480, 486, 490, 493, 505, 509, 542, 546, 552, 559, 561, 588, 595, 626, 627, 646, 659, 673, 693, 734, 745, 771, 773, 776, 778, 779, 781, 786, 788, 791, 793, 796, 799, 800, 802, 803, 807, 809, 810, 811, 812, 813, 836, 915, 925, 928, 940, 944, 988, 996], "zero": [30, 90, 91, 102, 103, 104, 108, 112, 125, 135, 138, 151, 172, 197, 213, 218, 219, 255, 306, 383, 384, 418, 470, 479, 517, 530, 595, 611, 622, 693, 739, 752, 824, 914, 952, 965, 970, 971, 988], "unless": [30, 64, 92, 219, 255, 577, 693, 971, 979, 988], "marker": [30, 255], "compliant": [30, 255], "case": [30, 64, 90, 92, 93, 94, 96, 118, 130, 136, 149, 160, 161, 172, 255, 421, 422, 431, 432, 486, 493, 501, 595, 627, 628, 693, 701, 921, 928, 936, 988], "three": [30, 221, 255, 306, 470, 577, 595, 739], "avail": [30, 100, 106, 115, 124, 133, 254, 255, 452, 589, 591, 594, 595, 596, 597, 600, 601, 602, 603, 606, 607, 620, 692, 693, 882, 982, 984, 988, 989, 992, 993, 994], "insert_befor": [30, 255], "insert_aft": [30, 255], "respect": [30, 255], "direct": [30, 105, 112, 118, 226, 255], "far": [30, 255], "thei": [30, 93, 114, 121, 133, 176, 255, 458, 595, 888, 988], "strongli": [30, 130, 136, 197, 237, 255, 269, 595, 677, 702, 988], "advis": [30, 176, 255, 315, 595], "structur": [30, 81, 85, 87, 149, 188, 218, 255, 447, 595, 645, 693, 701, 988], "your": [30, 64, 103, 104, 121, 122, 136, 172, 201, 232, 235, 255, 269, 315, 595, 613, 629, 636, 637, 652, 671, 675, 693, 702, 988, 996], "wherev": [30, 136, 237, 255, 269, 595, 677, 702, 988], "possibl": [30, 103, 136, 159, 172, 198, 224, 237, 255, 269, 419, 431, 508, 533, 595, 626, 666, 677, 693, 702, 943, 988], "simpl": [30, 128, 185, 255], "colx": [30, 54, 255, 996], "coli": [30, 255, 996], "after": [30, 54, 72, 93, 102, 103, 104, 108, 112, 114, 116, 117, 118, 149, 225, 254, 255, 379, 423, 452, 517, 595, 667, 693, 701, 863, 882, 952, 988], "befor": [30, 103, 114, 130, 133, 149, 160, 175, 225, 255, 328, 329, 330, 423, 446, 458, 459, 460, 461, 462, 463, 465, 466, 467, 517, 522, 578, 579, 595, 627, 630, 633, 667, 693, 701, 761, 762, 763, 863, 876, 888, 889, 890, 891, 892, 893, 895, 896, 897, 952, 958, 988], "most": [30, 51, 90, 103, 104, 114, 255, 432, 437, 446, 508, 534, 595, 868, 876, 943, 977, 988, 995], "mandatori": [30, 255], "return_dtyp": [30, 136, 255, 269, 421, 423, 540, 568, 595, 702, 863, 988], "latter": [30, 149, 255, 701, 988], "appropri": [30, 255, 452, 595, 882, 988], "pure": [30, 255], "actual": [30, 93, 107, 126, 128, 255, 315, 595, 909, 988], "indic": [30, 69, 98, 102, 103, 104, 108, 112, 114, 123, 124, 128, 160, 161, 175, 202, 216, 228, 255, 280, 305, 358, 362, 369, 400, 403, 404, 406, 407, 408, 427, 430, 459, 460, 461, 462, 463, 465, 466, 467, 470, 476, 524, 543, 595, 627, 628, 633, 653, 693, 738, 798, 802, 809, 840, 844, 846, 847, 848, 849, 900, 911, 960, 966, 988, 996], "calcul": [30, 64, 160, 209, 229, 255, 287, 331, 376, 377, 378, 411, 419, 464, 479, 484, 533, 535, 538, 540, 549, 574, 578, 579, 581, 582, 587, 595, 627, 661, 669, 693, 720, 766, 817, 818, 819, 856, 894, 914, 918, 978, 988], "individu": [30, 126, 161, 218, 255, 269, 493, 595, 628, 658, 693, 751, 928, 988], "gridlin": [30, 255], "zoom": [30, 255], "level": [30, 34, 114, 116, 117, 118, 126, 136, 154, 185, 255, 385, 595, 629, 636, 658, 693], "definit": [30, 124, 255, 411, 595, 856, 988], "take": [30, 126, 133, 154, 182, 188, 212, 255, 358, 482, 525, 558, 560, 595, 642, 664, 693, 798, 961, 980, 988], "care": [30, 255, 269, 471, 595, 904, 988], "rel": [30, 106, 115, 121, 122, 255, 358, 376, 377, 378, 595, 798, 817, 818, 819, 988], "readthedoc": [30, 255], "io": [30, 255], "working_with_conditional_format": [30, 255], "html": [30, 91, 105, 135, 141, 255], "similarli": [30, 93, 255], "well": [30, 103, 104, 114, 148, 189, 255, 398, 595, 619, 693, 836, 988], "adjac": [30, 255], "two": [30, 54, 92, 94, 96, 105, 131, 154, 181, 182, 189, 221, 236, 237, 255, 263, 306, 332, 336, 481, 524, 549, 551, 574, 578, 579, 581, 595, 641, 642, 676, 677, 693, 739, 767, 772, 988], "help": [30, 255, 620, 693], "where": [30, 49, 64, 69, 105, 125, 145, 149, 172, 181, 198, 209, 229, 255, 280, 371, 374, 470, 479, 482, 484, 535, 549, 574, 578, 579, 581, 582, 587, 588, 595, 641, 661, 669, 693, 701, 712, 811, 815, 900, 914, 918, 978, 980, 988, 995], "appear": [30, 93, 121, 255, 532, 595, 975, 988], "working_with_sparklin": [30, 255], "inject": [30, 64, 255], "locat": [30, 149, 195, 220, 225, 255, 470, 595, 667, 693, 701, 900, 903, 960, 988], "syntax": [30, 136, 185, 255, 486, 492, 493, 501, 656, 693, 921, 927, 928, 936, 988], "ensur": [30, 75, 125, 126, 128, 159, 187, 197, 255, 398, 534, 595, 626, 637, 693, 970, 977, 988], "correctli": [30, 255], "microsoft": [30, 120, 255], "com": [30, 105, 255, 376, 377, 378, 492, 493, 595, 817, 818, 819, 927, 928, 988], "u": [30, 37, 39, 52, 74, 97, 172, 198, 215, 255, 335, 336, 342, 367, 372, 511, 513, 563, 771, 772, 778, 807, 812, 946, 948], "offic": [30, 255], "f5ed2452": [30, 255], "2337": [30, 255], "4f71": [30, 255], "bed3": [30, 255], "c8ae6d2b276": [30, 255], "random": [30, 124, 126, 128, 162, 199, 255, 393, 452, 469, 475, 595, 830, 882, 899, 910, 988], "date": [30, 37, 64, 74, 103, 104, 105, 114, 119, 126, 142, 158, 160, 161, 173, 175, 228, 255, 285, 286, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 459, 460, 461, 462, 463, 465, 466, 467, 511, 512, 528, 563, 567, 586, 595, 627, 628, 633, 693, 718, 719, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 852, 872, 873, 903, 946, 947, 972, 988], "dtm": [30, 255, 336, 772], "2023": [30, 97, 120, 173, 255, 336, 567, 772], "num": [30, 221, 255, 398, 401, 517, 595, 836, 988], "500": [30, 172, 227, 255, 620, 668, 693, 786, 788, 796, 803, 889, 890, 892, 988], "val": [30, 196, 255, 317, 447, 528, 588, 595, 650, 693, 749], "10_000": [30, 255], "20_000": [30, 255], "30_000": [30, 255], "increas": [30, 64, 103, 112, 255, 330, 595, 763, 988], "b4": [30, 255], "light": [30, 255], "twice": [30, 107, 255], "each": [30, 64, 104, 117, 121, 122, 124, 136, 158, 159, 160, 161, 173, 175, 187, 219, 225, 228, 234, 235, 237, 238, 240, 249, 255, 269, 292, 304, 358, 362, 369, 418, 452, 482, 493, 507, 508, 540, 543, 548, 583, 595, 627, 628, 633, 646, 667, 675, 677, 678, 680, 689, 693, 725, 737, 751, 798, 802, 809, 882, 928, 942, 943, 957, 988, 996], "titl": [30, 49, 255], "explicit": [30, 114, 124, 255, 542, 576], "integr": [30, 255, 996], "multi_fram": [30, 255], "wb": [30, 255], "coordin": [30, 255], "advanc": [30, 255, 306, 739, 996], "min_color": [30, 255], "76933c": [30, 255], "mid_color": [30, 255], "c4d79b": [30, 255], "max_color": [30, 255], "ebf1d": [30, 255], "data_bar_2010": [30, 255], "bar_color": [30, 255], "9bbb59": [30, 255], "bar_negative_color_sam": [30, 255], "bar_negative_border_color_sam": [30, 255], "000": [30, 255, 996], "white": [30, 255], "w": [30, 51, 52, 255, 492, 927], "get_worksheet_by_nam": [30, 255], "fmt_titl": [30, 255], "add_format": [30, 255], "font_color": [30, 255], "4f6228": [30, 255], "font_siz": [30, 255], "12": [30, 64, 73, 74, 97, 125, 126, 131, 160, 161, 175, 228, 255, 328, 336, 343, 346, 353, 354, 355, 360, 362, 369, 373, 446, 474, 553, 555, 556, 568, 595, 627, 628, 629, 633, 636, 656, 663, 693, 702, 764, 772, 793, 802, 809, 898, 988, 996], "ital": [30, 255], "bold": [30, 255], "customis": [30, 255], "trend": [30, 255], "win_loss": [30, 255], "subtl": [30, 255], "tone": [30, 255], "hidden": [30, 255], "id": [30, 72, 237, 255, 501, 502, 532, 534, 595, 677, 975, 988, 996], "q1": [30, 255], "55": [30, 66, 255], "20": [30, 126, 131, 149, 165, 166, 188, 190, 194, 195, 255, 277, 278, 279, 331, 362, 369, 393, 397, 447, 563, 567, 595, 645, 693, 766, 809, 988], "35": [30, 120, 255, 331, 595, 766, 988], "q2": [30, 255], "30": [30, 73, 131, 149, 160, 165, 188, 194, 195, 214, 232, 255, 277, 278, 279, 331, 336, 341, 346, 354, 360, 361, 362, 369, 373, 393, 474, 567, 595, 627, 645, 671, 693, 764, 766, 772, 777, 794, 801, 802, 809, 988, 996], "15": [30, 120, 125, 131, 136, 160, 161, 166, 255, 330, 331, 355, 362, 369, 447, 553, 595, 627, 628, 693, 763, 766, 802, 809, 988], "60": [30, 149, 255, 363, 364, 511, 799, 803, 804, 946], "q3": [30, 255], "40": [30, 149, 188, 255, 362, 369, 393, 595, 645, 693, 782, 809], "80": [30, 255], "q4": [30, 255], "75": [30, 142, 255, 266, 444, 595, 765, 832, 880, 988, 996], "account": [30, 97, 255, 358, 376, 377, 378, 595, 798, 817, 818, 819, 988], "flavour": [30, 255], "integer_dtyp": [30, 201, 255, 652, 693], "0_": [30, 255], "just": [30, 105, 114, 181, 255, 641, 693], "unifi": [30, 255], "multi": [30, 103, 104, 255, 379, 492, 569, 572, 595, 927], "2_color_scal": [30, 255], "95b3d7": [30, 255], "ffffff": [30, 255], "base": [30, 35, 145, 152, 160, 161, 255, 374, 376, 377, 378, 416, 417, 500, 595, 616, 623, 627, 628, 693, 815, 817, 818, 819, 832, 859, 860, 880, 935, 980, 988, 996], "standardis": [30, 255], "z": [30, 51, 72, 97, 124, 126, 147, 168, 170, 174, 181, 255, 262, 266, 284, 317, 393, 444, 455, 493, 511, 513, 577, 595, 632, 641, 659, 693, 749, 824, 928, 946, 948, 988, 995], "score": [30, 255], "conjunct": [30, 107, 255], "a123": [30, 255], "b345": [30, 255], "c567": [30, 255], "d789": [30, 255], "e101": [30, 255], "45": [30, 131, 161, 255, 336, 362, 369, 487, 493, 567, 628, 693, 772, 802, 809, 922, 928, 996], "85": [30, 255, 996], "font": [30, 255], "consola": [30, 255], "standard": [30, 120, 209, 218, 255, 346, 377, 465, 479, 484, 495, 582, 595, 661, 693, 782, 818, 914, 918, 930, 988, 996], "stdev": [30, 255], "ipccompress": [31, 255], "arrow": [31, 76, 90, 105, 108, 116, 213, 255, 657, 693, 965, 970, 988], "ipc": [31, 108, 109, 116, 119, 255, 606], "binari": [31, 255, 309, 311, 312, 313, 539, 741, 743, 744, 745], "feather": [31, 108, 116, 255, 606], "lz4": [31, 34, 255, 657, 658, 693], "zstd": [31, 34, 255, 657, 658, 693], "pretti": [32, 255], "row_ori": [32, 255], "iobas": [32, 33, 110, 111, 255, 648, 674, 693], "serial": [32, 33, 255], "represent": [32, 33, 217, 255, 317, 340, 343, 346, 347, 349, 351, 353, 356, 359, 360, 363, 370, 371, 373, 528, 595, 618, 635, 693, 749, 776, 779, 781, 782, 786, 788, 791, 793, 796, 799, 800, 803, 810, 811, 813, 968, 972, 988], "orient": [32, 65, 67, 94, 96, 255, 693], "slower": [32, 94, 96, 136, 159, 187, 228, 237, 255, 626, 677, 693, 702, 988], "common": [32, 64, 72, 255, 600], "write_ndjson": [32, 255], "newlin": [33, 111, 117, 255], "delimit": [33, 98, 103, 104, 111, 114, 117, 189, 216, 255, 485, 920, 966, 988], "parquetcompress": [34, 255], "compression_level": [34, 255, 658, 693], "statist": [34, 103, 104, 112, 118, 142, 255, 377, 378, 411, 459, 460, 461, 462, 463, 464, 465, 466, 467, 479, 595, 658, 693, 765, 818, 819, 856, 894, 914, 988], "row_group_s": [34, 255, 658, 693], "use_pyarrow": [34, 103, 108, 112, 255, 658, 693, 969, 970, 988], "pyarrow_opt": [34, 106, 112, 115, 255], "parquet": [34, 112, 113, 118, 255, 606, 658, 693], "gzip": [34, 255, 658, 693], "lzo": [34, 255, 658, 693], "brotli": [34, 255, 658, 693], "choos": [34, 255, 657, 658, 693], "good": [34, 172, 255, 657, 658, 693], "perform": [34, 64, 81, 91, 103, 104, 108, 112, 114, 116, 117, 118, 135, 136, 160, 161, 175, 192, 237, 255, 269, 315, 445, 595, 627, 628, 633, 657, 658, 673, 677, 693, 702, 988], "fast": [34, 127, 129, 255, 382, 471, 595, 657, 658, 693, 822, 904, 988, 996], "decompress": [34, 255, 657, 658, 693], "backward": [34, 151, 175, 255, 308, 355, 384, 595, 622, 633, 658, 693, 795, 824, 988], "guarante": [34, 91, 103, 104, 224, 255, 620, 658, 666, 693], "deal": [34, 172, 255, 361, 452, 511, 595, 658, 693, 801, 882, 946, 988], "older": [34, 255, 658, 693], "reader": [34, 100, 103, 104, 108, 112, 255, 607, 658, 693], "higher": [34, 191, 247, 255, 451, 463, 575, 595, 647, 658, 687, 693, 881, 893, 988], "mean": [34, 103, 104, 108, 112, 114, 142, 151, 159, 189, 235, 255, 381, 384, 460, 479, 492, 544, 595, 622, 626, 637, 658, 675, 693, 765, 821, 824, 829, 890, 914, 927, 988], "smaller": [34, 147, 255, 620, 658, 693, 816, 988], "disk": [34, 108, 255, 656, 657, 658, 693], "11": [34, 120, 126, 161, 255, 333, 334, 346, 354, 355, 358, 362, 369, 397, 446, 466, 480, 517, 537, 546, 584, 595, 613, 628, 629, 636, 646, 658, 663, 693, 702, 798, 802, 809, 888, 988], "22": [34, 125, 255, 362, 369, 372, 511, 546, 658, 693, 802, 809, 812, 946, 996], "comput": [34, 71, 72, 78, 147, 159, 175, 219, 224, 235, 247, 255, 261, 271, 272, 273, 274, 275, 276, 296, 297, 298, 322, 323, 325, 326, 327, 328, 329, 332, 374, 380, 411, 416, 417, 418, 437, 445, 446, 450, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 476, 477, 478, 479, 483, 526, 527, 538, 539, 543, 549, 551, 554, 558, 569, 572, 574, 578, 579, 581, 584, 595, 626, 630, 632, 633, 658, 666, 672, 675, 687, 693, 697, 703, 704, 705, 706, 707, 708, 729, 730, 731, 757, 758, 759, 760, 761, 762, 767, 815, 816, 820, 856, 859, 860, 861, 868, 876, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 911, 912, 913, 914, 917, 962, 963, 971, 988], "512": [34, 255, 448, 595, 876, 988], "implement": [34, 91, 135, 136, 237, 255, 269, 595, 677, 702, 902, 903, 988], "v": [34, 51, 52, 73, 147, 255, 470, 595, 764, 900, 988], "At": [34, 255], "moment": [34, 141, 255, 411, 479, 595, 856, 914, 988], "pyarrow": [34, 90, 95, 103, 106, 108, 112, 115, 119, 120, 173, 213, 218, 219, 255, 607, 965, 969, 970, 971, 988], "write_t": [34, 255], "calendar": [36, 37, 160, 161, 175, 228, 255, 346, 358, 362, 369, 373, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 633, 693, 782, 798, 802, 809, 813], "time_unit": [37, 39, 74, 97, 335, 336, 342, 367, 372, 513, 563, 771, 772, 778, 807, 812, 948], "time_zon": [37, 74, 97, 337, 361, 513, 773, 801, 948], "timezon": [37, 74], "m": [37, 39, 52, 74, 335, 336, 342, 365, 367, 368, 372, 492, 511, 512, 513, 515, 563, 771, 772, 778, 805, 807, 808, 812, 927, 946, 947, 948, 950], "zone": [37, 74, 337, 361, 511, 513, 773, 801, 946, 948], "zoneinfo": 37, "run": [37, 71, 127, 129, 136, 159, 176, 189, 224, 237, 255, 269, 288, 330, 580, 595, 613, 618, 620, 626, 637, 641, 646, 656, 657, 658, 666, 677, 693, 702, 721, 763, 988, 995, 996], "available_timezon": 37, "128": [38, 66, 876, 988], "bit": [38, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 454, 486, 595, 884, 921, 988], "neg": [38, 160, 163, 177, 204, 205, 207, 211, 255, 300, 301, 447, 472, 473, 480, 505, 595, 627, 654, 655, 659, 673, 693, 733, 734, 831, 858, 906, 907, 915, 940, 959, 988], "scale": [38, 147, 255, 447, 595, 816, 988], "experiment": [38, 73, 119, 201, 226, 227, 232, 255, 330, 362, 459, 460, 461, 462, 463, 465, 466, 467, 595, 652, 668, 671, 693, 763, 802, 832, 880, 988], "progress": 38, "expect": [38, 82, 84, 89, 269, 540, 567, 595, 635, 637, 693, 880, 988], "32": [40, 43, 59, 66, 161, 171, 255, 438, 474, 595, 628, 693, 767, 799, 876, 893, 988], "sign": [42, 43, 44, 45, 358, 454, 517, 595, 798, 845, 884, 952, 988], "inner": [46, 55, 75, 125, 174, 227, 255, 293, 332, 528, 595, 632, 668, 674, 693, 726, 767, 972, 988], "polarsdatatyp": [46, 101, 103, 104, 109, 113, 114, 123, 124, 125, 126, 128, 132, 136, 146, 255, 269, 316, 379, 421, 423, 494, 540, 542, 546, 559, 567, 568, 577, 595, 617, 693, 702, 747, 863, 929, 988], "pythondatatyp": 46, "nest": [46, 55, 97, 147, 255, 606, 816, 988, 995, 996], "arrai": [46, 90, 94, 103, 104, 112, 147, 213, 218, 219, 255, 284, 295, 296, 297, 298, 299, 302, 303, 311, 319, 320, 321, 325, 326, 327, 328, 329, 417, 459, 460, 462, 465, 466, 467, 471, 487, 489, 492, 495, 558, 595, 693, 717, 728, 729, 730, 731, 732, 735, 736, 743, 753, 754, 755, 759, 760, 761, 762, 767, 816, 860, 861, 889, 890, 892, 895, 896, 897, 904, 909, 922, 924, 927, 930, 965, 970, 971, 979, 988], "within": [46, 121, 122, 160, 161, 175, 228, 255, 482, 595, 627, 628, 633, 693, 995], "wrap": [48, 97, 398, 595], "arbitrari": [48, 126], "python": [48, 74, 103, 104, 120, 131, 136, 172, 198, 215, 237, 255, 269, 336, 421, 540, 588, 595, 600, 677, 702, 772, 783, 784, 785, 790, 969, 988], "queri": [49, 51, 71, 105, 108, 114, 116, 117, 118, 149, 176, 188, 255, 423, 495, 595, 613, 618, 620, 629, 636, 646, 656, 673, 677, 693, 701, 930, 988, 995], "eager": [49, 50, 51, 52, 53, 54, 69, 74, 101, 131, 132, 160, 226, 255, 335, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 367, 369, 370, 371, 372, 373, 542, 563, 577, 583, 594, 606, 627, 693, 771, 773, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 809, 810, 811, 812, 813, 995], "pars": [49, 103, 104, 107, 114, 116, 117, 137, 159, 201, 208, 222, 232, 235, 255, 398, 445, 482, 494, 500, 511, 513, 538, 539, 543, 545, 547, 548, 554, 563, 569, 572, 583, 584, 595, 609, 626, 652, 660, 665, 671, 675, 693, 836, 929, 935, 946, 948, 988], "against": [49, 288, 693, 721, 995, 996], "eagerli": [49, 306], "unset": [49, 125, 306, 361, 801], "init": [49, 133], "eager_execut": [49, 995], "itself": [49, 124, 635, 693, 995], "alwai": [49, 103, 125, 136, 237, 255, 431, 511, 588, 637, 677, 693, 702, 946, 988, 995, 996], "impact": [49, 160, 255, 627, 693, 995], "declar": [49, 90, 92, 93, 94, 96, 255, 693], "godfath": 49, "1972": 49, "6_000_000": 49, "134_821_952": 49, "dark": 49, "knight": 49, "2008": 49, "185_000_000": 49, "533_316_061": 49, "schindler": 49, "1993": 49, "22_000_000": 49, "96_067_179": 49, "pulp": 49, "fiction": 49, "1994": 49, "8_000_000": 49, "107_930_000": 49, "shawshank": 49, "redempt": 49, "25_000_000": 49, "28_341_469": 49, "release_year": 49, "budget": 49, "gross": 49, "imdb_scor": 49, "ctx": [49, 50, 51, 52, 53, 54], "film": 49, "1990": 49, "BY": [49, 51], "desc": [49, 51], "AS": [49, 995], "decad": 49, "total_gross": 49, "n_film": 49, "2000": [49, 345, 347, 354, 355, 358, 781, 794, 795, 798], "533316061": 49, "232338648": 49, "1970": [49, 119], "134821952": 49, "register_glob": [50, 52, 995], "register_mani": [50, 51, 54], "frame_data": [50, 53], "execut": [50, 51, 53, 72, 176, 255, 288, 315, 595, 610, 637, 646, 693, 721, 995], "collect": [50, 51, 54, 67, 71, 114, 115, 119, 126, 128, 131, 176, 213, 255, 269, 402, 542, 547, 563, 583, 595, 609, 615, 616, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 643, 644, 645, 647, 649, 650, 652, 654, 655, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 693, 843, 988, 995, 996], "global": [51, 55, 75, 126, 423, 595, 995], "scope": [51, 54, 133, 995], "automat": [51, 54, 90, 92, 93, 94, 96, 97, 103, 104, 105, 114, 126, 128, 130, 201, 232, 255, 423, 498, 504, 510, 511, 595, 652, 671, 693, 863, 933, 939, 945, 946, 988, 995], "map": [51, 52, 92, 93, 103, 104, 108, 109, 112, 113, 114, 116, 136, 146, 172, 193, 197, 198, 214, 255, 362, 369, 422, 423, 534, 540, 595, 617, 649, 693, 802, 809, 863, 988, 995], "recent": [51, 446, 595, 876, 988, 995], "df1": [51, 53, 54, 55, 64, 72, 75, 121, 149, 155, 219, 230, 255], "x": [51, 52, 64, 72, 97, 103, 104, 105, 114, 124, 126, 147, 165, 168, 170, 174, 181, 189, 255, 262, 266, 269, 284, 293, 375, 389, 391, 392, 393, 413, 418, 420, 421, 436, 438, 442, 444, 448, 455, 476, 479, 507, 520, 528, 530, 537, 540, 552, 553, 561, 567, 568, 576, 595, 632, 637, 641, 659, 693, 698, 702, 824, 854, 911, 914, 942, 972, 988, 995], "df2": [51, 53, 54, 55, 64, 72, 75, 121, 149, 155, 219, 230, 255], "t": [51, 52, 72, 107, 114, 136, 188, 224, 226, 255, 269, 288, 330, 361, 374, 376, 377, 378, 447, 492, 498, 504, 510, 511, 513, 540, 588, 595, 645, 666, 693, 702, 721, 763, 801, 815, 817, 818, 819, 901, 927, 933, 939, 945, 946, 948, 979, 988], "join": [51, 55, 64, 71, 72, 75, 175, 227, 255, 397, 445, 595, 613, 618, 620, 633, 646, 656, 668, 672, 693], "named_fram": [52, 995], "lf1": [52, 54], "o": [52, 108, 116, 314, 330, 491, 529, 595, 746, 763, 926, 973, 988], "lf2": [52, 54, 693], "p": [52, 66, 188, 255, 447, 583, 595, 645, 693], "q": [52, 583], "r": [52, 447, 487, 491, 492, 493, 501, 595, 922, 926, 927, 928, 936], "lf3": [52, 693], "lf4": [52, 693], "either": [52, 126, 161, 171, 176, 179, 187, 197, 210, 255, 511, 538, 543, 583, 628, 635, 693, 946], "tbl1": [52, 54], "tbl2": [52, 54], "tbl3": 52, "tbl4": 52, "statement": [53, 588], "hello_world": 53, "baz": [53, 166, 167, 189, 225, 255, 506, 508, 631, 667, 693, 943], "hello_data": 53, "foo_bar": [53, 567], "registr": [54, 606], "lifetim": [54, 133], "context": [54, 55, 130, 131, 185, 238, 255, 263, 269, 288, 315, 324, 385, 431, 481, 482, 534, 540, 550, 560, 563, 577, 580, 594, 595, 606, 672, 678, 693, 721, 995], "manag": [54, 55, 606, 995], "often": [54, 160, 161, 255, 286, 455, 595, 627, 628, 693, 719], "want": [54, 93, 101, 132, 136, 149, 185, 255, 269, 319, 320, 321, 385, 421, 423, 459, 460, 461, 462, 463, 465, 466, 467, 552, 561, 577, 595, 613, 629, 636, 693, 701, 702, 753, 754, 755, 970, 988], "df0": 54, "exit": [54, 55, 133, 995], "construct": [54, 90, 92, 93, 94, 95, 96, 101, 132, 255, 423, 577, 595, 625, 648, 693, 988], "persist": [54, 657, 658, 693], "through": [54, 988], "tbl0": 54, "remain": [54, 103, 104, 114, 147, 255, 507, 508, 637, 693, 816, 942, 943, 988], "text": [54, 499, 501, 502, 934, 996], "misc": 54, "testing1234": 54, "test1": 54, "test2": 54, "test3": 54, "temporarili": [55, 130, 160, 161, 255, 627, 628, 693], "cach": [55, 71, 75, 108, 114, 116, 118, 423, 459, 460, 461, 462, 463, 465, 466, 467, 511, 512, 513, 515, 595, 613, 618, 620, 646, 656, 693, 946, 947, 948, 950], "categori": [55, 73, 75, 317, 749, 764, 832, 880, 988], "until": [55, 176, 255, 315, 595], "finish": [55, 78, 149, 255, 701, 988], "invalid": [55, 103, 104, 114, 494, 495, 500, 530, 595, 929, 930, 935], "outermost": 55, "color": [55, 75, 237, 677], "red": [55, 75, 237, 677], "green": [55, 75, 237, 677], "blue": [55, 75], "orang": [55, 75, 140, 238, 239, 241, 242, 243, 245, 247, 248, 255, 678, 679, 681, 682, 683, 685, 687, 688], "uint8": [55, 75, 123, 125, 217, 218, 255, 328, 329, 423, 522, 537, 595, 761, 762, 958, 988, 996], "yellow": [55, 75], "black": [55, 75, 136, 255], "succe": [55, 103, 104, 114], "df_join": [55, 75], "cat": [55, 73, 75, 217, 255, 486, 514, 516, 528, 548, 591, 595, 764, 832, 880, 921, 984, 988], "u8": [55, 75, 98, 216, 217, 255, 423, 537, 595, 966, 988, 996], "schemadict": [56, 90, 92, 93, 94, 95, 96, 114, 200, 255, 583, 637, 651, 677, 693], "composit": [56, 125, 996], "dai": [57, 74, 160, 161, 173, 175, 228, 255, 342, 346, 353, 354, 355, 358, 359, 360, 362, 367, 369, 370, 371, 373, 459, 460, 461, 462, 463, 465, 466, 467, 555, 556, 557, 595, 627, 628, 633, 693, 794, 795, 798, 799, 802, 809, 811], "unsign": [58, 59, 60, 61, 454, 595, 845, 884, 988], "could": [62, 78, 145, 160, 255, 316, 552, 561, 595, 616, 627, 693, 747, 988], "static": [62, 677], "utf": 63, "frametyp": [64, 995], "joinstrategi": [64, 174, 255, 632, 693], "outer": [64, 72, 174, 255, 632, 693], "descend": [64, 137, 202, 208, 222, 255, 279, 302, 452, 471, 481, 482, 543, 595, 609, 653, 660, 665, 693, 711, 735, 851, 882, 904, 916, 988], "fill": [64, 72, 101, 132, 150, 151, 205, 226, 255, 308, 326, 329, 383, 384, 390, 397, 459, 460, 462, 465, 466, 467, 473, 497, 503, 517, 562, 577, 595, 621, 622, 655, 672, 693, 823, 824, 874, 889, 890, 892, 895, 896, 897, 907, 932, 938, 952, 988], "sort": [64, 65, 121, 125, 137, 160, 161, 175, 182, 188, 189, 202, 222, 228, 240, 249, 255, 279, 317, 385, 471, 482, 534, 536, 543, 595, 609, 618, 627, 628, 633, 642, 645, 646, 653, 656, 665, 680, 689, 693, 711, 749, 851, 904, 974, 977, 988, 996], "origin": [64, 103, 104, 224, 255, 361, 410, 423, 445, 454, 487, 492, 493, 495, 497, 503, 517, 595, 666, 693, 764, 801, 863, 880, 922, 927, 928, 930, 932, 938, 952, 988], "In": [64, 106, 115, 118, 126, 128, 136, 147, 149, 160, 161, 185, 255, 269, 595, 627, 628, 693, 701, 816, 883, 988], "duplic": [64, 79, 168, 174, 175, 224, 255, 399, 595, 632, 633, 666, 693, 838, 988], "behaviour": [64, 72, 486, 492, 493, 501, 530, 595, 921, 927, 928, 936], "strategi": [64, 72, 103, 123, 124, 125, 126, 128, 151, 160, 174, 175, 184, 255, 269, 306, 384, 595, 622, 627, 632, 633, 693, 739, 824, 988], "suitabl": [64, 72, 124, 136, 255, 269, 470, 595, 702, 900, 988, 996], "get": [64, 74, 99, 109, 113, 130, 137, 140, 146, 156, 157, 160, 161, 163, 164, 168, 170, 171, 177, 184, 197, 200, 203, 207, 211, 222, 231, 240, 249, 255, 263, 277, 278, 279, 281, 290, 294, 295, 307, 325, 326, 327, 328, 329, 342, 358, 386, 394, 399, 401, 409, 412, 415, 424, 425, 426, 431, 433, 435, 440, 441, 451, 480, 484, 496, 499, 522, 523, 531, 535, 560, 565, 569, 570, 571, 572, 582, 585, 587, 595, 609, 614, 617, 624, 627, 628, 629, 634, 636, 651, 659, 663, 665, 670, 680, 689, 693, 709, 710, 711, 712, 713, 723, 727, 728, 740, 751, 759, 760, 761, 762, 778, 798, 828, 831, 836, 838, 841, 853, 858, 864, 866, 867, 869, 872, 873, 877, 878, 881, 915, 918, 931, 934, 959, 965, 966, 974, 978, 979, 988], "speedup": [64, 136, 172, 255, 269, 595, 702, 988], "receiv": [64, 114, 136, 188, 255, 447, 595, 645, 693, 996], "now": [64, 161, 255, 511, 628, 693, 946], "One": [64, 142, 185, 189, 255, 266, 444, 595, 765, 988], "whose": [64, 175, 189, 255, 379, 559, 595, 633, 693], "uniqu": [64, 123, 124, 125, 128, 170, 185, 246, 255, 270, 281, 401, 409, 439, 511, 512, 513, 515, 532, 534, 541, 573, 595, 686, 693, 713, 765, 841, 853, 870, 946, 947, 948, 950, 975, 977, 988], "post": 64, "constrain": 64, "newli": 64, "boolean": [64, 69, 137, 152, 154, 208, 222, 255, 265, 266, 267, 285, 309, 345, 385, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 444, 482, 494, 536, 537, 543, 583, 595, 609, 623, 660, 665, 693, 699, 700, 712, 718, 741, 781, 825, 836, 837, 838, 840, 841, 843, 844, 846, 847, 848, 849, 853, 877, 878, 902, 921, 980, 988], "know": [64, 306, 499, 934, 970, 979, 988], "first": [64, 103, 104, 107, 114, 117, 125, 136, 158, 160, 163, 175, 177, 184, 188, 189, 211, 217, 223, 224, 228, 240, 255, 279, 281, 288, 291, 292, 306, 330, 355, 358, 362, 394, 401, 415, 423, 447, 470, 482, 492, 494, 495, 501, 502, 545, 552, 561, 565, 588, 595, 613, 627, 629, 633, 636, 645, 666, 672, 680, 693, 711, 721, 724, 725, 739, 763, 765, 795, 798, 802, 831, 841, 858, 863, 900, 927, 929, 930, 936, 937, 959, 968, 988, 996], "2022": [64, 74, 142, 158, 160, 161, 175, 228, 255, 336, 358, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 511, 557, 563, 595, 627, 628, 633, 693, 772, 782, 798, 802, 809, 946], "y": [64, 72, 97, 124, 126, 147, 168, 170, 174, 181, 189, 255, 262, 266, 284, 293, 365, 368, 375, 391, 392, 413, 420, 442, 444, 455, 511, 512, 513, 530, 537, 567, 595, 632, 641, 659, 693, 698, 805, 808, 946, 947, 948, 988], "df3": [64, 255], "set_tbl_format": 64, "09": [64, 126, 161, 255, 336, 346, 354, 355, 628, 693, 776], "01": [64, 74, 126, 131, 142, 158, 160, 161, 228, 255, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 511, 512, 513, 515, 557, 627, 628, 693, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 946, 947, 948, 950], "02": [64, 74, 131, 158, 160, 161, 175, 228, 255, 335, 336, 342, 343, 344, 351, 352, 353, 354, 355, 358, 361, 362, 363, 364, 367, 369, 370, 372, 459, 460, 461, 462, 463, 465, 466, 467, 468, 511, 512, 513, 515, 557, 595, 627, 628, 633, 693, 739, 771, 772, 774, 775, 778, 779, 780, 783, 784, 785, 786, 788, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 810, 811, 812, 946, 947, 948, 950], "03": [64, 74, 97, 160, 161, 228, 255, 335, 336, 337, 341, 342, 344, 352, 353, 354, 355, 361, 362, 363, 364, 365, 367, 368, 369, 370, 372, 512, 515, 627, 628, 693, 771, 772, 773, 776, 777, 778, 779, 780, 783, 784, 785, 786, 788, 790, 792, 793, 794, 795, 796, 799, 800, 801, 802, 803, 804, 805, 807, 808, 810, 811, 812, 947, 950], "af1": 64, "af2": 64, "af3": 64, "keep": [64, 103, 104, 114, 224, 227, 228, 255, 410, 423, 545, 595, 666, 668, 693, 764, 863, 880, 988], "easili": [64, 201, 232, 235, 255, 546, 583, 652, 671, 675, 693], "dot": [64, 595, 656, 693, 988], "product": [64, 141, 255, 328, 332, 540, 595, 761, 767, 988], "fill_nul": [64, 150, 255, 595, 621, 672, 693, 988], "167": 64, "47": 64, "callabl": [65, 66, 67, 68, 114, 136, 154, 188, 237, 255, 269, 306, 421, 422, 447, 458, 540, 552, 553, 561, 568, 576, 595, 637, 645, 677, 693, 702, 739, 888, 988], "decor": [65, 66, 67, 68, 126, 128, 136, 255, 269, 595, 702, 988], "under": [65, 66, 67, 68, 589, 591, 596, 597, 601, 602, 603, 982, 984, 989, 992, 993, 994], "access": [65, 66, 67, 68, 172, 197, 198, 255, 423, 595, 672, 693, 996], "by_first_letter_of_column_nam": 65, "f": [65, 104, 142, 158, 173, 213, 223, 226, 255, 262, 269, 306, 474, 491, 511, 513, 540, 547, 568, 595, 739, 926, 946, 948], "fromkei": [65, 67], "by_first_letter_of_column_valu": 65, "starts_with": [65, 486, 490, 925], "slice": [65, 71, 147, 163, 173, 211, 255, 292, 304, 458, 459, 460, 461, 462, 463, 465, 466, 467, 595, 613, 618, 620, 637, 646, 656, 657, 658, 693, 725, 737, 816, 831, 888, 889, 890, 891, 892, 893, 895, 896, 897, 959, 988], "to_seri": [65, 69, 156, 255, 511, 577, 946], "xx": [65, 67, 125, 128], "xy": [65, 67], "yy": [65, 67, 125, 128], "yz": [65, 67], "a2": [65, 67], "b1": [65, 67], "b2": [65, 67], "pow_n": 66, "powersofn": 66, "next": [66, 308, 452, 595, 882, 988], "ceil": [66, 595, 988], "previou": [66, 133, 446, 519, 595, 876, 988], "floor": [66, 595, 988], "nearest": [66, 175, 191, 247, 255, 318, 388, 451, 463, 575, 595, 633, 647, 687, 693, 750, 827, 835, 881, 893, 988], "24": [66, 120, 136, 147, 161, 255, 328, 330, 344, 438, 595, 628, 693, 763, 780, 855, 988], "001": [66, 347, 348, 350, 357, 557, 787, 789, 797], "next_pow2": 66, "prev_pow2": 66, "nearest_pow2": 66, "split_by_column_dtyp": 67, "collect_al": 67, "31": [68, 74, 126, 336, 340, 341, 353, 354, 358, 370, 511, 555, 556, 563, 567, 772, 776, 777, 794, 798, 946, 996], "42": [68, 161, 162, 255, 628, 693, 830, 988], "961": 68, "1764": 68, "4160": 68, "evalu": [69, 74, 101, 131, 132, 150, 152, 175, 255, 266, 280, 306, 330, 396, 398, 402, 423, 444, 538, 539, 542, 558, 577, 583, 588, 595, 623, 630, 632, 633, 693, 712, 763, 980, 988], "immedi": [69, 74, 101, 131, 132, 452, 542, 577, 583, 595, 882, 988], "arg_tru": [69, 595, 988], "build": [70, 91, 996], "wa": 70, "compil": [70, 282, 283, 715, 716], "gate": 70, "info": [70, 106, 115, 120, 345, 781], "otherwis": [70, 125, 130, 182, 201, 255, 306, 310, 319, 320, 321, 361, 376, 377, 378, 447, 454, 486, 488, 538, 539, 554, 569, 572, 584, 588, 595, 642, 652, 693, 702, 739, 742, 753, 754, 755, 801, 817, 818, 819, 884, 902, 903, 921, 923, 988], "depend": [70, 120, 269, 282, 283, 431, 452, 540, 560, 563, 595, 715, 716, 882, 988, 996], "host": [70, 103, 108, 112, 116, 118], "git": 70, "lazy_fram": 71, "type_coercion": [71, 613, 618, 620, 646, 656, 657, 658, 693], "predicate_pushdown": [71, 613, 618, 620, 637, 646, 656, 657, 658, 693], "projection_pushdown": [71, 613, 618, 620, 637, 646, 656, 657, 658, 693], "simplify_express": [71, 613, 618, 620, 646, 656, 657, 658, 693], "no_optim": [71, 613, 620, 637, 646, 657, 658, 693], "slice_pushdown": [71, 613, 618, 620, 637, 646, 656, 657, 658, 693], "common_subplan_elimin": [71, 613, 618, 620, 646, 656, 693], "graph": [71, 176, 255, 630, 672, 693], "parallel": [71, 72, 100, 105, 112, 118, 160, 175, 176, 188, 255, 288, 330, 595, 606, 627, 632, 633, 693, 721, 763, 988], "threadpool": [71, 130], "coercion": [71, 455, 595, 613, 618, 620, 646, 656, 657, 658, 693], "optim": [71, 112, 114, 116, 117, 118, 172, 176, 188, 192, 198, 224, 255, 613, 618, 620, 637, 646, 656, 657, 658, 666, 673, 693], "predic": [71, 114, 116, 117, 118, 119, 152, 171, 197, 255, 385, 536, 561, 595, 613, 618, 620, 623, 637, 646, 649, 656, 657, 658, 673, 693, 825, 902, 903, 988], "pushdown": [71, 613, 618, 620, 637, 646, 649, 656, 657, 658, 673, 693, 902, 903, 988], "project": [71, 114, 116, 117, 118, 269, 481, 482, 595, 613, 618, 620, 637, 646, 649, 656, 657, 658, 674, 693], "turn": [71, 103, 104, 114, 534, 595, 613, 618, 620, 637, 646, 657, 658, 693], "off": [71, 103, 104, 114, 534, 595, 613, 618, 620, 637, 646, 657, 658, 693], "Will": [71, 223, 255, 613, 618, 620, 646, 656, 693, 988], "try": [71, 85, 87, 103, 104, 107, 108, 112, 114, 116, 118, 613, 618, 620, 646, 656, 693], "branch": [71, 613, 618, 620, 646, 656, 693], "subplan": [71, 613, 618, 620, 646, 656, 693], "occur": [71, 286, 437, 452, 595, 613, 618, 620, 646, 656, 693, 719, 868, 882, 988], "union": [71, 72, 613, 618, 620, 646, 656, 693], "part": [71, 90, 126, 493, 507, 508, 613, 618, 620, 646, 656, 672, 693, 776, 779, 786, 788, 791, 793, 796, 803, 813, 928, 942, 943], "fashion": [71, 174, 255, 613, 618, 620, 646, 656, 693], "item": [72, 104, 197, 199, 255, 285, 291, 293, 381, 469, 508, 595, 718, 724, 726, 821, 899, 943, 988], "iter": [72, 127, 129, 137, 159, 160, 161, 172, 173, 187, 197, 198, 201, 202, 208, 222, 223, 232, 234, 235, 255, 330, 379, 445, 482, 538, 539, 543, 545, 546, 547, 548, 554, 559, 569, 572, 580, 583, 584, 588, 595, 609, 626, 627, 628, 652, 653, 660, 665, 671, 675, 693, 763, 988, 996], "polarstyp": 72, "concatmethod": 72, "vertic": [72, 149, 226, 230, 255, 485, 920], "rechunk": [72, 90, 95, 103, 104, 108, 112, 114, 116, 117, 118, 149, 255, 595, 701, 751, 869, 988], "combin": [72, 74, 85, 87, 160, 161, 162, 175, 228, 255, 266, 280, 358, 369, 444, 498, 504, 510, 595, 627, 628, 633, 656, 693, 798, 809, 933, 939, 945], "concaten": [72, 154, 188, 255, 447, 547, 548, 595, 645, 693, 751, 869, 988], "diagon": [72, 223, 255], "vstack": [72, 149, 255], "find": [72, 153, 255, 470, 595, 900, 988], "miss": [72, 103, 104, 114, 150, 255, 308, 376, 377, 378, 390, 397, 404, 406, 581, 595, 621, 693, 817, 818, 819, 979, 988], "stack": [72, 165, 230, 255], "don": [72, 136, 224, 226, 255, 269, 288, 330, 540, 595, 666, 693, 702, 721, 763, 901, 979, 988], "auto": [72, 90, 92, 93, 94, 96, 112, 118, 223, 255, 511, 693, 946, 996], "logic": [72, 136, 237, 255, 266, 444, 528, 537, 595, 625, 632, 648, 674, 677, 693, 702, 972, 988], "align_fram": 72, "pattern": [72, 103, 104, 114, 116, 117, 118, 172, 255, 429, 486, 487, 492, 493, 501, 502, 902, 903, 921, 922, 927, 928, 936, 937, 988], "collis": 72, "need": [72, 97, 101, 103, 104, 107, 121, 122, 132, 160, 161, 206, 218, 255, 306, 423, 474, 496, 577, 595, 627, 628, 693, 908, 931, 988], "sure": [72, 90, 95, 103, 104, 105, 108, 112, 192, 255, 542], "contigu": [72, 90, 95, 103, 104, 108, 112, 114, 116, 117, 118, 192, 255], "relev": 72, "df_h1": 72, "l1": 72, "l2": 72, "df_h2": 72, "r1": 72, "r2": 72, "r3": 72, "df_d1": 72, "df_d2": 72, "df_a1": 72, "df_a2": 72, "df_a3": 72, "bin": [73, 500, 537, 589, 595, 764, 832, 880, 935, 982, 988], "label": [73, 458, 459, 460, 461, 462, 463, 465, 466, 467, 595, 646, 693, 764, 880, 888, 889, 890, 891, 892, 893, 895, 896, 897, 988], "break_point_label": [73, 764, 880, 988], "break_point": [73, 764, 832, 880, 988], "category_label": [73, 764, 880, 988], "discret": [73, 287, 331, 374, 595, 720, 764, 766, 815, 832, 880, 988], "deprec": [73, 74, 98, 511, 566, 574, 581, 693, 946], "sinc": [73, 74, 98, 106, 115, 342, 511, 563, 566, 574, 581, 778, 946], "assign": [73, 124, 160, 255, 306, 452, 507, 508, 595, 627, 693, 739, 764, 863, 880, 882, 942, 943, 988], "breakpoint": [73, 764, 880, 988], "inf": [73, 126, 128, 276, 400, 403, 530, 595, 708, 764, 832, 840, 844, 862, 876, 880, 976, 988], "interv": [74, 131, 160, 161, 228, 255, 345, 362, 363, 369, 398, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 693, 776, 778, 779, 781, 786, 788, 791, 793, 796, 799, 800, 802, 803, 807, 809, 810, 811, 813, 836, 988], "timedelta": [74, 131, 160, 161, 228, 255, 340, 342, 343, 346, 351, 353, 358, 359, 360, 362, 363, 367, 369, 370, 371, 373, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 693, 783, 785, 790, 798, 802, 809, 872, 873, 988], "1d": [74, 160, 161, 175, 228, 255, 335, 344, 352, 358, 362, 369, 372, 459, 460, 461, 462, 463, 465, 466, 467, 567, 595, 627, 628, 633, 693, 771, 778, 780, 783, 784, 785, 790, 792, 798, 802, 807, 809, 811, 812], "_nodefault": [74, 101, 132, 189, 255, 511, 946], "no_default": [74, 101, 132, 189, 255, 511, 946], "closedinterv": [74, 131, 160, 161, 255, 398, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 693, 836, 988], "lower": [74, 114, 131, 160, 191, 247, 255, 319, 321, 398, 419, 422, 451, 454, 463, 542, 575, 595, 620, 627, 647, 687, 693, 755, 836, 862, 881, 884, 893, 976, 988], "bound": [74, 103, 104, 131, 147, 160, 255, 291, 305, 306, 319, 320, 321, 398, 419, 533, 542, 595, 627, 693, 724, 738, 754, 755, 816, 836, 862, 976, 988], "upper": [74, 103, 104, 131, 147, 160, 255, 306, 319, 320, 398, 533, 542, 595, 627, 693, 754, 816, 836, 862, 976, 988], "period": [74, 131, 160, 161, 204, 205, 255, 300, 362, 369, 376, 377, 378, 446, 472, 473, 595, 627, 628, 654, 655, 693, 733, 802, 809, 817, 818, 819, 876, 906, 907, 988], "durat": [74, 131, 175, 228, 255, 341, 344, 348, 350, 352, 357, 364, 372, 528, 595, 633, 693, 777, 780, 787, 789, 792, 797, 804, 812, 972, 988], "3d12h4m25": [74, 160, 161, 175, 228, 255, 362, 369, 627, 628, 633, 693, 802, 809], "hour": [74, 131, 160, 161, 175, 228, 255, 358, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 556, 557, 586, 595, 627, 628, 633, 693, 798, 802, 809], "minut": [74, 131, 160, 161, 175, 228, 255, 358, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 556, 557, 586, 595, 627, 628, 633, 693, 798, 802, 809], "17": [74, 120, 126, 131, 235, 468, 511, 563, 566, 595, 675, 757, 802, 946, 988, 996], "tempor": [74, 131, 160, 161, 172, 198, 215, 255, 398, 459, 460, 461, 462, 463, 465, 466, 467, 595, 606, 627, 628, 693, 836, 852, 988], "window": [74, 131, 160, 161, 255, 330, 362, 369, 376, 377, 378, 445, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 547, 578, 579, 595, 627, 628, 693, 763, 802, 809, 817, 818, 819, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 988], "granular": 74, "finer": 74, "permut": 74, "1mo": [74, 160, 161, 175, 228, 255, 337, 341, 354, 355, 358, 361, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 633, 693, 773, 777, 793, 794, 795, 798, 799, 800, 801, 802, 809, 810], "dtrang": 74, "1985": 74, "04": [74, 119, 160, 228, 255, 336, 337, 340, 341, 344, 351, 352, 353, 354, 355, 359, 361, 362, 363, 364, 365, 368, 370, 371, 372, 511, 557, 627, 693, 773, 777, 780, 786, 788, 791, 792, 793, 794, 795, 796, 800, 801, 803, 804, 805, 808, 810, 811, 812, 946], "05": [74, 119, 121, 122, 126, 175, 228, 255, 336, 337, 341, 361, 363, 365, 368, 633, 693, 772, 773, 774, 775, 776, 777, 801, 802, 805, 806, 808, 809, 811], "07": [74, 131, 336, 340, 359, 361, 362, 369, 371, 511, 563, 772, 776, 801, 811, 946], "08": [74, 121, 122, 126, 131, 161, 255, 336, 362, 511, 557, 628, 693, 802, 809, 946], "america": 74, "new_york": 74, "\u03bc": [74, 97, 126, 160, 161, 175, 228, 255, 335, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 511, 513, 557, 563, 627, 628, 633, 693, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 810, 811, 812, 813, 946, 948], "est": 74, "month_end": 74, "last": [74, 137, 163, 175, 177, 189, 208, 211, 222, 224, 249, 255, 279, 291, 304, 330, 340, 354, 359, 369, 370, 481, 508, 523, 585, 595, 609, 633, 660, 663, 665, 666, 689, 693, 711, 724, 737, 763, 776, 794, 799, 810, 831, 858, 943, 959, 988], "month": [74, 160, 161, 175, 228, 255, 340, 354, 355, 358, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 555, 556, 595, 627, 628, 633, 693, 776, 794, 795, 798, 802, 809], "28": [74, 160, 161, 175, 214, 228, 255, 262, 358, 361, 362, 369, 372, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 633, 693, 798, 801, 802, 809, 812, 996], "disabl": [75, 172, 255], "equal": [75, 103, 104, 114, 121, 122, 155, 160, 175, 182, 255, 306, 375, 391, 413, 458, 459, 460, 461, 462, 463, 465, 466, 467, 496, 497, 503, 517, 542, 578, 579, 595, 627, 633, 642, 693, 739, 888, 889, 890, 891, 892, 893, 895, 896, 897, 901, 931, 932, 938, 952, 988, 996], "encount": [76, 160, 255, 440, 441, 494, 495, 549, 552, 561, 581, 595, 627, 693, 872, 873, 929, 930, 988], "certain": [80, 106, 115, 166, 228, 255, 546, 613, 646, 657, 658, 693, 988], "least": [82, 126, 446, 534, 595, 876, 977, 988], "unexpect": [83, 255], "caus": [83, 91, 103, 104, 114, 135, 149, 255, 701, 988], "panic": 83, "mismatch": 85, "incompat": 87, "pa": [90, 119], "chunkedarrai": [90, 184, 255, 767, 988], "recordbatch": [90, 173, 255], "schemadefinit": [90, 92, 93, 94, 96, 255, 693], "schema_overrid": [90, 92, 93, 94, 95, 96, 173, 218, 255, 693], "copi": [90, 91, 135, 138, 139, 173, 213, 218, 219, 232, 255, 382, 517, 595, 611, 612, 671, 693, 698, 752, 756, 769, 822, 952, 965, 970, 971, 988], "closest": 90, "pair": [90, 92, 93, 94, 96, 125, 193, 255, 649, 693, 996], "sever": [90, 92, 93, 94, 96, 255, 693, 996], "wai": [90, 92, 93, 94, 96, 143, 159, 173, 188, 208, 235, 255, 445, 447, 482, 492, 546, 595, 615, 626, 645, 660, 675, 693, 927], "equival": [90, 92, 93, 94, 96, 106, 171, 185, 255, 262, 266, 375, 389, 391, 392, 413, 420, 436, 438, 442, 444, 448, 499, 520, 530, 537, 595, 693, 855, 934, 949, 951, 988], "form": [90, 92, 93, 94, 96, 172, 198, 226, 255, 446, 595, 693, 876, 988], "them": [90, 92, 93, 94, 96, 114, 149, 160, 161, 175, 182, 228, 255, 293, 398, 440, 441, 547, 595, 627, 628, 633, 642, 693, 701, 726, 872, 873, 988], "dimens": [90, 92, 94, 96, 255, 456, 595, 693, 886, 988], "allow_copi": [91, 135], "interchang": [91, 135], "__dataframe__": 91, "convers": [91, 135, 173, 219, 255, 511, 512, 513, 515, 606, 946, 947, 948, 950, 969, 970, 971, 988], "detail": [91, 105, 121, 122, 135, 255, 693, 996], "latest": [91, 106, 115, 135, 390, 432, 595], "index": [91, 95, 99, 105, 120, 135, 153, 160, 161, 166, 171, 175, 189, 195, 197, 207, 220, 228, 233, 255, 263, 277, 278, 279, 281, 282, 283, 291, 301, 305, 306, 358, 459, 460, 461, 462, 463, 465, 466, 467, 470, 480, 492, 505, 524, 595, 627, 628, 633, 659, 673, 693, 709, 710, 711, 712, 713, 715, 716, 724, 734, 738, 739, 798, 855, 874, 900, 903, 915, 927, 940, 960, 988], "runtimeerror": 91, "from_panda": [91, 107], "from_arrow": 91, "effici": [91, 173, 255], "clone": [92, 93, 94, 95, 96, 138, 218, 219, 255, 611, 693, 752, 969, 970, 971, 979, 988], "dimension": [92, 94, 96, 255, 693, 988], "infer_schema_length": [93, 96, 103, 104, 107, 114, 117, 255, 693], "NOT": [93, 121, 122, 430, 995], "typic": [93, 136, 255, 702, 988], "clearer": 93, "load": [93, 95, 106, 115, 127, 129, 255, 606, 629, 636, 693, 996], "_partial_": [93, 255, 693], "omit": [93, 97, 124, 126, 128, 131, 133, 185, 255], "mani": [93, 96, 105, 149, 255, 701, 988], "scan": [93, 96, 103, 104, 112, 114, 115, 116, 117, 118, 119, 620, 629, 636, 693], "slow": [93, 96, 103, 104, 114, 269, 330, 595, 763, 988], "partial": 93, "present": [93, 121, 126, 402, 595, 979, 988], "np": [94, 152, 218, 255, 524, 595, 693, 840, 844, 846, 847, 888, 960, 988], "ndarrai": [94, 152, 218, 255, 524, 595, 693, 767, 900, 903, 960, 970, 988], "numpi": [94, 120, 141, 218, 219, 255, 440, 441, 595, 693, 840, 844, 846, 847, 872, 873, 888, 970, 971, 979, 988], "columnar": [94, 96, 172, 198, 255], "interpret": [94, 96, 103, 104, 114, 255, 693], "yield": [94, 96, 103, 104, 114, 147, 149, 223, 255, 693, 701, 816, 988], "conclus": [94, 96, 255, 693], "nan_to_nul": [95, 255, 693, 988], "include_index": 95, "datetimeindex": [95, 767, 988], "panda": [95, 107, 120, 219, 255, 354, 355, 528, 595, 693, 794, 795, 971, 972, 988], "instal": [95, 103, 104, 105, 108, 112, 120, 141, 218, 219, 255, 656, 693, 971, 988], "nan": [95, 121, 122, 126, 135, 150, 219, 255, 333, 334, 375, 383, 391, 392, 397, 404, 406, 407, 408, 413, 420, 424, 435, 440, 441, 442, 530, 549, 581, 595, 621, 693, 704, 708, 768, 823, 846, 847, 872, 873, 888, 971, 988, 996], "convert": [95, 98, 106, 107, 115, 135, 214, 215, 216, 217, 218, 221, 255, 306, 337, 365, 368, 422, 500, 511, 512, 513, 515, 595, 693, 739, 773, 805, 808, 935, 946, 947, 948, 950, 957, 968, 969, 970, 971, 979, 988], "pd": [95, 107, 528, 595, 972, 988], "pd_df": 95, "pd_seri": 95, "tbl": [97, 100, 104], "reconstruct": 97, "repr": [97, 126, 128], "trim": 97, "whitespac": [97, 498, 504, 510, 933, 939, 945], "prompt": 97, "extract": [97, 340, 341, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 359, 360, 363, 364, 370, 371, 373, 447, 493, 494, 495, 595, 774, 775, 776, 777, 779, 780, 782, 786, 787, 788, 789, 791, 792, 793, 796, 797, 799, 800, 803, 804, 806, 810, 811, 813, 928, 929, 930], "to_init_repr": [97, 255, 988], "truncat": [97, 160, 255, 358, 627, 646, 693, 798], "identifi": [97, 181, 187, 224, 255, 641, 666, 693], "compound": 97, "struct": [97, 185, 201, 221, 225, 232, 255, 306, 423, 494, 507, 508, 534, 552, 553, 554, 568, 595, 652, 667, 671, 693, 739, 929, 942, 943], "neither": [97, 107, 199, 255, 306, 739], "source_ac": 97, "source_cha": 97, "ident": [97, 138, 139, 255, 365, 611, 612, 693, 752, 756, 805, 988], "timestamp": [97, 361, 563, 801], "tor_id": 97, "nnel_id": 97, "asia": [97, 774, 775, 806], "tokyo": 97, "123456780": 97, "9876543210": 97, "56": [97, 131, 526, 595], "59": [97, 125, 131, 336, 351, 363, 556, 586, 772, 791, 803], "663053": 97, "jst": 97, "803065983": 97, "2055938745": 97, "38": [97, 126], "18": [97, 131, 161, 255, 329, 362, 369, 372, 397, 410, 595, 628, 646, 693, 812], "050545": 97, "source_actor_id": 97, "source_channel_id": 97, "sr": [97, 698, 988], "to_list": [97, 161, 255, 628, 693, 921, 988], "dummi": [98, 216, 255, 966, 988], "to_dummi": [98, 255, 988], "foo_1": [98, 216, 255], "foo_2": [98, 216, 255], "bar_3": [98, 216, 255], "bar_4": [98, 216, 255], "ham_a": [98, 216, 255], "ham_b": [98, 216, 255], "datatypeclass": 99, "uint32": [99, 120, 147, 255, 279, 282, 283, 295, 340, 343, 347, 349, 351, 353, 356, 359, 360, 363, 370, 371, 455, 487, 496, 499, 524, 528, 595, 712, 715, 716, 728, 747, 776, 779, 786, 788, 791, 793, 796, 799, 800, 803, 810, 811, 816, 845, 901, 922, 972, 988], "regular": [99, 172, 197, 198, 228, 255, 379, 486, 487, 492, 493, 501, 502, 546, 559, 569, 572, 584, 595, 921, 922, 927, 928, 936, 937], "uint64": [99, 162, 255, 282, 283, 393, 454, 595, 715, 716, 830, 884, 988], "bigidx": 99, "read": [100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 149, 255, 421, 588, 595, 620, 625, 648, 693, 701, 988], "batch": [100, 104, 117, 637, 693], "over": [100, 103, 104, 106, 114, 126, 136, 149, 172, 173, 197, 198, 223, 234, 237, 255, 269, 330, 384, 397, 421, 422, 458, 459, 460, 461, 462, 463, 465, 466, 467, 540, 552, 553, 561, 568, 576, 595, 677, 701, 702, 763, 888, 889, 890, 892, 896, 988], "fetch": [100, 114, 176, 255, 611, 613, 629, 636, 693], "ideal": 100, "read_csv_batch": [100, 607], "tpch": [100, 104], "tables_scale_100": [100, 104], "lineitem": [100, 104, 105], "try_parse_d": [100, 103, 104, 114], "syntact": [101, 132, 227, 255, 559, 560, 564, 575, 580, 668, 693, 917, 988], "sugar": [101, 132, 227, 255, 559, 560, 564, 575, 580, 668, 693, 917, 988], "repeat": [101, 108, 116, 132, 453, 455, 595], "pre": [101, 132, 306, 577], "i8": [101, 132, 474, 577, 595, 766, 887, 976, 988], "n_row": [102, 103, 104, 108, 112, 114, 116, 117, 118, 173, 255, 620, 693], "accept": [102, 103, 104, 106, 108, 112, 137, 148, 159, 201, 208, 222, 232, 235, 255, 262, 379, 398, 445, 482, 537, 538, 539, 543, 545, 546, 547, 548, 554, 559, 569, 572, 583, 584, 595, 609, 619, 626, 652, 660, 665, 671, 675, 693, 836, 988], "stop": [102, 103, 104, 108, 112, 114, 116, 117, 118, 131, 340, 342, 343, 345, 346, 351, 353, 359, 360, 362, 363, 367, 369, 370, 371, 373, 771, 773, 776, 778, 779, 781, 786, 788, 791, 793, 796, 799, 800, 802, 803, 807, 809, 810, 811, 812, 813], "textio": 103, "new_column": [103, 104, 107, 114, 194, 255], "comment_char": [103, 104, 114], "quote_char": [103, 104, 114], "skip_row": [103, 104, 114], "missing_utf8_is_empty_str": [103, 104, 114], "ignore_error": [103, 104, 114], "n_thread": [103, 104], "8192": 103, "csvencod": [103, 104, 114], "low_memori": [103, 104, 112, 114, 117, 118], "skip_rows_after_head": [103, 104, 114], "row_count_nam": [103, 104, 108, 112, 114, 116, 117, 118], "row_count_offset": [103, 104, 108, 112, 114, 116, 117, 118], "sample_s": [103, 104], "eol_char": [103, 104, 114], "we": [103, 104, 107, 114, 175, 255, 288, 500, 567, 588, 633, 637, 693, 702, 721, 832, 880, 935, 988], "handler": [103, 104, 107], "g": [103, 104, 106, 107, 108, 112, 115, 116, 118, 160, 161, 175, 226, 228, 255, 262, 269, 358, 362, 369, 379, 459, 460, 461, 462, 463, 465, 466, 467, 474, 559, 595, 627, 628, 633, 649, 693, 798, 802, 809, 901, 970, 988], "builtin": [103, 104, 107], "stringio": [103, 104], "fsspec": [103, 104, 108, 112, 115, 116, 118, 120], "remot": [103, 104, 108, 112], "autogener": [103, 104, 114], "column_x": [103, 104, 114], "enumer": [103, 104, 114, 173, 255], "shorter": [103, 104], "comment": [103, 104, 114], "instanc": [103, 104, 114, 126, 128, 133, 149, 154, 255, 316, 432, 459, 460, 461, 462, 463, 465, 466, 467, 552, 561, 595, 637, 673, 693, 701, 747, 988], "special": [103, 104, 114, 493, 702, 928, 988], "escap": [103, 104, 114], "dure": [103, 104, 114, 133, 149, 255, 701, 988], "would": [103, 104, 114, 279, 291, 431, 452, 543, 595, 711, 724, 882, 970, 988], "prefer": [103, 104, 106, 114, 129, 136, 149, 172, 197, 198, 237, 255, 269, 458, 595, 677, 693, 701, 702, 888, 988, 996], "treat": [103, 104, 114, 486, 501, 502, 921, 936, 937], "10000": [103, 173, 255, 517], "check": [103, 104, 114, 121, 122, 155, 169, 171, 255, 265, 267, 285, 309, 312, 313, 398, 402, 486, 490, 509, 595, 637, 693, 699, 700, 718, 741, 744, 745, 837, 839, 842, 843, 845, 850, 851, 852, 854, 855, 901, 921, 925, 944, 988], "might": [103, 104, 114, 130, 269, 532, 595, 971, 988], "issu": [103, 104, 107, 114, 328, 329, 522, 595, 761, 762, 958, 988], "iso8601": [103, 104, 114], "physic": [103, 104, 175, 255, 317, 528, 595, 610, 632, 633, 693, 749, 972, 988], "cpu": [103, 104], "system": [103, 104], "wrongli": 103, "done": [103, 104, 114, 119, 158, 175, 255, 268, 270, 316, 497, 503, 541, 595, 633, 693, 747, 932, 938, 988], "buffer": [103, 104, 147, 172, 255, 816, 988], "modifi": [103, 104, 114, 130, 133, 165, 172, 230, 255, 280, 361, 372, 486, 492, 493, 501, 595, 801, 812, 885, 921, 927, 928, 936, 949, 951, 988], "lossi": [103, 104, 114], "decod": [103, 104], "reduc": [103, 104, 112, 114, 116, 117, 118, 242, 243, 245, 248, 474, 561, 595, 658, 682, 683, 685, 688, 693, 865, 879, 908, 958, 988], "usag": [103, 104, 114, 126, 128, 206, 255, 909, 988], "expens": [103, 104, 112, 114, 117, 118, 127, 129, 136, 172, 197, 198, 223, 224, 255, 269, 595, 666, 693, 701, 702, 988, 996], "aggreg": [103, 104, 112, 154, 160, 161, 178, 179, 180, 183, 185, 189, 190, 191, 209, 210, 226, 229, 235, 236, 239, 241, 255, 263, 385, 395, 421, 445, 458, 459, 460, 461, 462, 463, 465, 466, 467, 534, 538, 539, 552, 553, 554, 561, 566, 569, 572, 576, 584, 595, 627, 628, 637, 638, 639, 640, 643, 644, 647, 661, 662, 669, 675, 676, 679, 681, 693, 833, 888, 889, 890, 892, 895, 896, 897, 988], "nativ": [103, 108, 112, 124, 136, 172, 198, 215, 237, 255, 269, 595, 600, 677, 702, 988, 996], "parser": 103, "even": [103, 447, 595], "regard": [103, 549, 581], "sens": [103, 108, 112, 116, 118, 160, 161, 182, 228, 255, 627, 628, 642, 693], "particular": [103, 108, 112, 116, 118, 147, 255, 816, 988], "skip": [103, 104, 107, 112, 114, 118, 226, 255, 702, 988], "offset": [103, 104, 108, 112, 114, 116, 117, 118, 160, 161, 207, 228, 233, 255, 301, 354, 355, 358, 362, 369, 480, 505, 511, 513, 595, 627, 628, 659, 673, 693, 734, 794, 795, 798, 802, 809, 915, 940, 946, 948, 988], "row_count": [103, 104, 108, 112, 114, 116, 117, 118], "sampl": [103, 104, 237, 255, 479, 595, 677, 914, 988], "estim": [103, 104, 147, 255, 270, 377, 378, 411, 541, 595, 693, 816, 818, 819, 856, 988], "alloc": [103, 104, 147, 192, 255, 816, 988], "scan_csv": [103, 104, 657, 658, 693], "lazili": [103, 104, 114, 115, 116, 117, 118, 423, 595], "glob": [103, 104, 114, 116, 117, 118], "continu": [103, 112, 479, 595, 914, 988], "benchmark": [103, 112, 315, 595], "50000": 104, "batchedcsvread": [104, 606], "upon": 104, "creation": 104, "gather": 104, "next_batch": 104, "big": 104, "interest": 104, "seen_group": 104, "big_fil": 104, "df_current_batch": 104, "concat": [104, 751, 869, 988], "partition_df": 104, "partition_bi": [104, 173, 255], "as_dict": [104, 187, 255], "fh": 104, "write_csv": [104, 114, 255], "els": [104, 588], "partition_on": 105, "partition_rang": 105, "partition_num": 105, "dbreadengin": 105, "connectorx": [105, 120], "raw": 105, "partit": [105, 106, 112, 115, 119, 173, 187, 255], "transfer": 105, "document": [105, 107, 365, 368, 495, 511, 512, 513, 515, 805, 808, 930, 946, 947, 948, 950], "redshift": 105, "mysql": 105, "mariadb": 105, "clickhous": 105, "oracl": 105, "bigqueri": 105, "pleas": 105, "doc": [105, 141, 255], "github": 105, "sfu": 105, "db": 105, "connector": 105, "destin": 105, "sqlite": 105, "develop": [105, 126, 128], "flight_sql": 105, "further": [105, 971, 988], "wide": [105, 158, 181, 226, 255, 641, 693], "adopt": 105, "significantli": [105, 996], "better": [105, 136, 218, 237, 255, 269, 534, 595, 677, 902, 903, 988], "driver": 105, "cpp": 105, "partition_col": 105, "explicitli": [105, 124, 126, 133, 423, 583, 595], "delta_table_opt": [106, 115], "root": [106, 115, 410, 422, 433, 449, 483, 521, 594, 595, 917, 988], "absolut": [106, 115, 121, 122, 261, 376, 377, 378, 595, 697, 817, 818, 819, 988], "avoid": 106, "year": [106, 115, 160, 161, 175, 228, 255, 345, 346, 358, 359, 362, 369, 370, 459, 460, 461, 462, 463, 465, 466, 467, 555, 556, 595, 627, 628, 633, 693, 781, 782, 798, 799, 802, 809, 810], "2021": [106, 115, 142, 158, 160, 228, 255, 511, 567, 627, 693, 774, 775, 782, 806, 852, 946, 988], "aw": [106, 115], "googl": [106, 115], "service_account": [106, 115], "service_account_json_absolute_path": [106, 115], "az": [106, 115], "adl": [106, 115], "abf": [106, 115], "azure_storage_account_nam": [106, 115], "azure_storage_account_kei": [106, 115], "without_fil": [106, 115], "track": [106, 115, 136, 255, 306, 995], "sheet_id": 107, "sheet_nam": 107, "xlsx2csv_option": 107, "read_csv_opt": 107, "noreturn": [107, 577], "xlsx2csv": [107, 120], "read_csv": [107, 114], "nor": [107, 199, 255], "skip_empty_lin": 107, "my": [107, 119], "datasheet": 107, "correct": [107, 377, 378, 411, 464, 479, 595, 637, 693, 818, 819, 856, 894, 914, 988], "look": [107, 306, 309, 741], "fix": [107, 124, 126, 372, 459, 460, 461, 462, 463, 465, 466, 467, 595, 812], "whole": [107, 481, 482, 492, 595, 693, 927], "With": [107, 136, 171, 255, 269, 595, 702, 855, 988], "1000": [107, 147, 217, 255, 347, 348, 517, 787, 968, 988, 996], "spreadsheet": [107, 189, 255], "xl": 107, "xlsm": 107, "xlsb": 107, "odf": 107, "od": [107, 510, 945], "odt": 107, "memory_map": [108, 112, 116], "v2": [108, 116], "greatli": [108, 116], "improv": [108, 116, 658, 693], "page": [108, 112, 116, 118, 255, 595, 606, 658, 693, 988], "give": [108, 112, 116, 117, 118, 181, 224, 255, 342, 411, 455, 530, 595, 606, 641, 666, 693, 778, 856, 988], "That": [108, 637, 693], "filenam": 108, "my_fil": 108, "write_ipc": [108, 255], "read_ndjson": 110, "parallelstrategi": [112, 118], "use_statist": [112, 118], "awar": [112, 172, 198, 215, 255, 511, 513, 946, 948], "stabl": [112, 141, 199, 255, 418, 595, 641, 693], "row_group": [112, 118], "pressur": [112, 117, 118, 474, 595, 658, 693, 908, 988], "read_tabl": 112, "with_column_nam": 114, "push": [114, 116, 117, 118, 119], "down": [114, 116, 117, 118, 119, 388, 595, 827, 988], "therebi": [114, 116, 117, 118], "potenti": [114, 116, 117, 118], "overhead": [114, 116, 117, 118], "realloc": [114, 116, 117, 149, 255, 701, 988], "headerless": 114, "unlik": 114, "fewer": 114, "my_long_fil": 114, "doesn": [114, 374, 595, 815, 979, 988], "thing": [114, 560], "less": [114, 175, 255, 413, 420, 497, 503, 508, 517, 595, 633, 693, 932, 938, 943, 952, 996], "limit": [114, 151, 255, 308, 319, 320, 321, 384, 390, 595, 622, 629, 658, 693, 753, 754, 755, 824, 988], "breezah": 114, "languag": [114, 160, 161, 175, 228, 255, 358, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 633, 693, 798, 802, 809], "hard": [114, 637, 693], "mydf": 114, "lambda": [114, 136, 154, 188, 237, 255, 269, 306, 376, 377, 378, 421, 422, 458, 540, 552, 553, 561, 568, 576, 595, 637, 645, 677, 693, 702, 739, 817, 818, 819, 988], "simpli": [114, 552, 561], "idx": [114, 160, 173, 255, 306, 627, 693, 739, 903, 988], "uint16": [114, 328, 329, 522, 595, 761, 762, 958, 988], "u16": [114, 126, 996], "eu": 115, "central": [115, 411, 479, 595, 856, 914, 988], "allow_pyarrow_filt": 119, "comparison": 119, "dset": 119, "folder": 119, "stdout": [120, 158, 255], "platform": 120, "linux": 120, "90": 120, "wsl2": 120, "x86_64": 120, "glibc2": 120, "main": 120, "apr": 120, "14": [120, 126, 131, 136, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 346, 397, 595, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 802], "44": [120, 332, 595], "51": 120, "gcc": 120, "matplotlib": [120, 646, 656, 693], "check_dtyp": [121, 122], "check_exact": [121, 122], "rtol": [121, 122], "1e": [121, 122], "atol": [121, 122], "nans_compare_equ": [121, 122], "check_column_ord": 121, "check_row_ord": 121, "assertionerror": [121, 122], "compar": [121, 122, 155, 255, 375, 391, 392, 413, 420, 442, 539, 595, 901, 988], "exactli": [121, 122, 125, 126, 128, 507, 508, 909, 942, 943, 988], "toler": [121, 122, 175, 255, 633, 693], "inexact": [121, 122], "assert": [121, 122, 124, 126, 128, 161, 255, 606, 628, 693, 829, 988], "irrespect": 121, "unsort": 121, "check_nam": 122, "s1": [122, 154, 255, 739, 855, 971, 980, 988], "searchstrategi": [123, 125, 126, 128], "null_prob": [123, 126, 128], "percentag": [123, 126, 128, 446, 595, 876, 988], "chanc": [123, 126, 128, 996], "independ": [123, 124, 126, 128], "flag": [123, 471, 486, 492, 493, 501, 595, 618, 637, 693, 904, 921, 927, 928, 936, 988], "hypothesi": [123, 124, 125, 126, 127, 128, 996], "sampled_from": [123, 996], "unique_small_int": 123, "ccy": [123, 996], "gbp": [123, 996], "eur": [123, 142, 158, 255, 996], "jpy": [123, 996], "min_col": [124, 126], "max_col": [124, 126], "standalon": [124, 126], "mincol": 124, "exact": [124, 126, 128, 206, 255, 511, 512, 513, 530, 595, 946, 947, 948], "minimum": [124, 125, 126, 128, 154, 183, 255, 376, 377, 378, 435, 441, 452, 572, 595, 643, 658, 693, 753, 790, 817, 818, 819, 873, 878, 882, 988, 996], "especi": 124, "test_unique_xyz": 124, "assert_someth": 124, "punctuat": 124, "test_special_char_colname_init": 124, "inner_dtyp": [125, 128], "select_from": [125, 128], "min_siz": [125, 126, 128, 996], "max_siz": [125, 126, 128, 996], "anoth": [125, 159, 255, 305, 330, 335, 427, 430, 595, 626, 672, 693, 738, 763, 771, 901, 988], "randomli": 125, "innermost": 125, "2x": 125, "lst": 125, "11330": 125, "24030": 125, "116": 125, "zz": [125, 128], "small": [125, 176, 255, 362, 620, 693, 996], "uint8_pair": [125, 996], "uint": [125, 996], "zip": [125, 996], "131": 125, "176": 125, "149": [125, 996], "include_col": 126, "allow_infin": [126, 128], "allowed_dtyp": [126, 128, 996], "excluded_dtyp": [126, 128], "describ": [126, 158, 255, 988], "desir": [126, 306, 739], "n_chunk": [126, 128, 255, 988], "randomis": 126, "onto": 126, "pct": 126, "preced": 126, "disallow": [126, 128], "exclud": [126, 128, 326, 329, 398, 546, 581, 595, 836, 852, 988], "deploi": [126, 128], "characterist": [126, 128], "concret": [126, 128], "test_repr": 126, "isinst": [126, 128, 255], "0x11f561580": 126, "known": [126, 306, 677, 739], "0565": 126, "34715": 126, "5844": 126, "33": [126, 463, 468, 546, 595, 893, 988], "076854": 126, "3382": 126, "48662": 126, "7540": 126, "29": [126, 131, 160, 161, 175, 228, 255, 354, 358, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 633, 693, 794, 798, 802, 809], "836271": 126, "4063": 126, "06": [126, 131, 228, 255, 336, 346, 360, 361, 373, 801, 802, 811], "39092": 126, "1889": 126, "13": [126, 131, 138, 139, 150, 151, 157, 161, 166, 176, 184, 232, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 458, 460, 547, 552, 561, 587, 595, 611, 612, 621, 622, 628, 635, 671, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 693, 702, 802, 809, 810, 988], "41": [126, 996], "874455": 126, "15836": 126, "1755e": 126, "575050513": 126, "profil": [127, 129, 693], "balanc": [127, 129, 996], "set_environ": 127, "polars_hypothesis_profil": [127, 129], "1500": 127, "constructor": 128, "max_data_s": 128, "normal": [128, 160, 255, 374, 411, 479, 595, 627, 693, 815, 856, 914, 988], "test_repr_is_valid_str": 128, "experi": 128, "create_list_strategi": [128, 996], "polars_max_thread": 130, "behind": 130, "lock": 130, "reason": 130, "pyspark": 130, "udf": [130, 136, 188, 237, 255, 269, 447, 540, 595, 645, 677, 693, 702, 988], "similar": [130, 154, 175, 255, 365, 368, 445, 588, 595, 633, 693, 805, 808], "recommend": [130, 172, 188, 255], "1h": [131, 160, 161, 175, 228, 255, 358, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 633, 693, 779, 798, 802, 809], "23": [131, 160, 161, 255, 336, 343, 362, 556, 586, 627, 628, 693, 772, 779, 996], "999999": [131, 556, 586], "1h30m25": 131, "tm": [131, 336], "third": [131, 421, 595], "lf": [131, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 693, 995, 996], "6h": 131, "5h59m": 131, "1h29m": 131, "58": 131, "57": [131, 898, 988, 996], "19": [131, 161, 175, 255, 362, 628, 633, 693, 802, 809], "initi": [133, 552, 561, 588], "whatev": 133, "were": 133, "enter": 133, "advantag": [133, 188, 255], "initialis": [133, 693, 995], "set_": 133, "set_verbos": 133, "do_various_th": 133, "restor": 133, "breviti": 133, "nan_as_nul": 135, "_pyarrowdatafram": 135, "nullabl": 135, "extens": [135, 219, 255, 971, 988], "propag": [135, 179, 210, 255, 440, 441, 595, 872, 873, 988], "inference_s": [136, 255], "256": [136, 255, 876, 988], "user": [136, 188, 237, 255, 269, 447, 471, 540, 595, 645, 677, 693, 702, 904, 988], "almost": [136, 237, 255, 677, 702, 988], "_significantly_": [136, 237, 255, 677, 702, 988], "intens": [136, 237, 255, 677, 702, 988], "becaus": [136, 147, 160, 176, 226, 237, 255, 288, 627, 677, 693, 702, 721, 816, 988], "forc": [136, 175, 237, 255, 632, 633, 677, 693, 702, 988], "materi": [136, 237, 255, 646, 677, 693, 702, 988], "parallelis": [136, 237, 255, 677, 702, 988], "optimis": [136, 237, 255, 677, 693, 702, 902, 903, 988], "achiev": [136, 237, 255, 269, 595, 677, 702, 988], "best": [136, 237, 255, 269, 595, 677, 702, 988], "tri": [136, 255], "arbitrarili": [136, 255], "rearrang": [136, 255], "transform": [136, 255, 421, 514, 516, 595], "preserv": [136, 218, 219, 255, 476, 595, 911, 971, 988], "lru_cach": [136, 255, 269, 595, 702, 988], "magnitud": [136, 255, 269, 595, 702, 988], "column_1": [136, 223, 255], "scalar": [136, 171, 197, 255, 470, 540, 567, 595, 855, 900, 988], "k": [137, 222, 255, 314, 317, 411, 529, 595, 609, 665, 693, 746, 749, 856, 973, 988], "intoexpr": [137, 159, 160, 161, 201, 208, 222, 232, 235, 255, 398, 445, 482, 538, 539, 543, 545, 547, 548, 552, 554, 561, 569, 572, 580, 583, 584, 588, 595, 609, 626, 627, 628, 652, 660, 665, 671, 675, 693, 836, 988], "nulls_last": [137, 208, 222, 255, 279, 481, 595, 609, 660, 665, 693, 711, 988], "smallest": [137, 222, 255, 314, 595, 609, 665, 693, 746, 988], "largest": [137, 160, 161, 175, 222, 228, 255, 358, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 529, 595, 609, 627, 628, 633, 665, 693, 798, 802, 809, 973, 988], "top": [137, 222, 255, 609, 665, 693], "top_k": [137, 255, 314, 595, 609, 693, 746, 988], "cheap": [138, 139, 255, 611, 612, 693, 701, 752, 756, 988], "deepcopi": [138, 139, 255, 611, 612, 693, 752, 756, 988], "clear": [139, 255, 612, 693, 756, 988], "properti": [140, 146, 164, 200, 203, 231, 255, 614, 617, 651, 670, 693, 996], "appl": [140, 165, 174, 193, 195, 214, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 449, 457, 490, 509, 521, 595, 632, 649, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 693, 925, 944], "banana": [140, 214, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 449, 457, 521, 595, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688], "pearson": [141, 255, 411, 479, 549, 574, 595, 856, 914, 988], "correl": [141, 255, 549, 574, 578, 581], "coeffici": [141, 255, 479, 595, 914, 988], "corrcoef": [141, 255], "percentil": [142, 255, 765, 988], "summari": [142, 255, 765, 988], "glimps": [142, 163, 255], "usd": [142, 158, 255, 996], "2020": [142, 158, 161, 255, 337, 341, 344, 347, 348, 350, 352, 357, 361, 364, 365, 368, 511, 512, 513, 628, 693, 773, 777, 780, 787, 789, 792, 797, 801, 804, 805, 808, 946, 947, 948], "null_count": [142, 145, 255, 330, 595, 693, 763, 765, 988], "266667": [142, 255], "666667": [142, 179, 229, 243, 255, 376, 595, 669, 683, 693], "std": [142, 255, 458, 595, 693, 765, 895, 988], "101514": [142, 255], "707107": [142, 255, 377, 595, 818, 988], "57735": [142, 255], "median": [142, 189, 255, 461, 595, 672, 693, 765, 891, 988], "more_column": [143, 148, 202, 225, 255, 379, 559, 595, 615, 619, 653, 667, 693], "Or": [143, 159, 160, 161, 175, 208, 228, 235, 255, 445, 482, 546, 588, 595, 615, 626, 627, 628, 633, 660, 675, 693], "subset": [145, 185, 224, 255, 616, 666, 693], "snippet": [145, 255, 616, 693], "is_nul": [145, 255, 595, 616, 693, 988], "sizeunit": [147, 255, 816, 988], "heap": [147, 255, 816, 988], "its": [147, 255, 336, 362, 369, 482, 595, 772, 802, 809, 816, 988], "bitmap": [147, 255, 816, 988], "therefor": [147, 255, 588, 816, 988], "structarrai": [147, 255, 816, 988], "constant": [147, 161, 255, 382, 595, 628, 693, 816, 822, 988], "unchang": [147, 255, 528, 595, 637, 677, 693, 816, 972, 988], "capac": [147, 206, 255, 816, 909, 988], "ffi": [147, 255, 816, 988], "kb": [147, 255, 816, 988], "mb": [147, 255, 816, 988], "gb": [147, 255, 816, 988], "tb": [147, 255, 816, 988], "revers": [147, 255, 325, 326, 327, 328, 329, 422, 449, 521, 595, 693, 759, 760, 761, 762, 988], "1_000_000": [147, 255, 816, 988], "25888898": [147, 255], "689577102661133": [147, 255], "long": [148, 181, 226, 255, 619, 641, 693], "letter": [148, 240, 249, 255, 379, 493, 559, 595, 619, 680, 689, 693, 928], "thu": [149, 255, 549, 581, 701, 988], "faster": [149, 226, 255, 269, 458, 499, 532, 595, 657, 658, 693, 701, 702, 888, 934, 988], "onlin": [149, 255, 701, 988], "rerun": [149, 255, 701, 988], "fill_valu": [150, 205, 226, 255, 473, 595, 655, 693, 907, 988], "Not": [150, 255, 404, 406, 423, 595, 621, 693], "To": [150, 255, 333, 334, 358, 384, 486, 492, 493, 501, 584, 595, 621, 693, 798, 921, 927, 928, 936], "fillnullstrategi": [151, 255, 384, 595, 622, 693, 824, 988], "matches_supertyp": [151, 255, 622, 693], "forward": [151, 175, 255, 354, 384, 390, 595, 622, 633, 693, 794, 824, 988], "consecut": [151, 255, 308, 384, 390, 485, 595, 622, 693, 824, 920, 988], "supertyp": [151, 255, 268, 595, 622, 693], "fill_nan": [151, 255, 595, 693, 988], "OR": [152, 255, 539, 623, 693], "reduct": [154, 255], "supercast": [154, 255], "parent": [154, 255], "rule": [154, 255], "arithmet": [154, 255], "zip_with": [154, 255, 988], "foo11": [154, 255], "bar22": [154, 255], "null_equ": [155, 255, 901, 988], "retriev": [156, 255, 282, 283, 518, 715, 716, 953], "return_as_str": [158, 255], "preview": [158, 255], "nice": [158, 255], "few": [158, 255], "rather": [158, 175, 255, 517, 633, 693, 952], "head": [158, 177, 211, 255, 268, 415, 595, 636, 693, 858, 959, 988], "tail": [158, 163, 255, 268, 479, 595, 693, 831, 914, 988], "more_bi": [159, 187, 208, 255, 482, 595, 626, 660, 693], "maintain_ord": [159, 187, 189, 224, 228, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 263, 269, 307, 524, 531, 550, 595, 613, 618, 620, 626, 646, 656, 657, 658, 666, 676, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 693, 740, 764, 880, 974, 988], "consist": [159, 187, 255, 511, 626, 693, 946], "agg": [159, 160, 161, 255, 263, 269, 385, 387, 481, 482, 524, 536, 550, 595, 613, 618, 620, 626, 627, 628, 646, 656, 693], "index_column": [160, 161, 255, 627, 628, 693], "include_boundari": [160, 255, 627, 693], "start_bi": [160, 255, 627, 693], "startbi": [160, 255, 627, 693], "dynamicgroupbi": [160, 255], "groupbi": [160, 161, 185, 255, 263, 269, 288, 330, 385, 387, 445, 481, 482, 524, 536, 540, 550, 595, 613, 618, 620, 627, 628, 646, 656, 693, 721, 763, 988], "member": [160, 255, 627, 693, 843, 988], "seen": [160, 255, 308, 390, 595, 627, 693], "roll": [160, 161, 255, 354, 355, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 547, 578, 579, 595, 627, 628, 693, 794, 795, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 988], "slot": [160, 255, 287, 330, 331, 595, 627, 693, 720, 763, 766, 988], "1n": [160, 161, 175, 228, 255, 358, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 633, 693, 798, 802, 809], "nanosecond": [160, 161, 175, 228, 255, 358, 362, 363, 369, 459, 460, 461, 462, 463, 465, 466, 467, 557, 595, 627, 628, 633, 693, 798, 802, 803, 809], "1u": [160, 161, 175, 228, 255, 358, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 633, 693, 798, 802, 809], "microsecond": [160, 161, 175, 228, 255, 358, 362, 363, 369, 459, 460, 461, 462, 463, 465, 466, 467, 556, 557, 586, 595, 627, 628, 633, 646, 693, 798, 802, 809], "1m": [160, 161, 175, 228, 255, 347, 348, 350, 357, 358, 362, 364, 369, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 633, 693, 787, 789, 797, 798, 802, 804, 809], "millisecond": [160, 161, 175, 228, 255, 358, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 557, 595, 627, 628, 633, 693, 798, 802, 809], "1w": [160, 161, 175, 228, 255, 358, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 633, 693, 798, 802, 809], "week": [160, 161, 175, 228, 255, 358, 362, 369, 371, 459, 460, 461, 462, 463, 465, 466, 467, 557, 595, 627, 628, 633, 693, 798, 802, 809, 811], "1y": [160, 161, 175, 228, 255, 345, 358, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 633, 693, 781, 798, 802, 809, 813], "1i": [160, 161, 175, 228, 255, 358, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 633, 693, 798], "suffix": [160, 161, 174, 175, 201, 228, 232, 235, 255, 264, 312, 358, 362, 369, 404, 406, 407, 408, 422, 445, 449, 457, 459, 460, 461, 462, 463, 465, 466, 467, 490, 595, 627, 628, 632, 633, 652, 671, 672, 675, 693, 744, 798, 802, 809, 925], "_satur": [160, 161, 175, 228, 255, 358, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 633, 693, 798, 802, 809], "satur": [160, 161, 175, 228, 255, 358, 362, 369, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 628, 633, 693, 798, 802, 809], "10i": [160, 161, 255, 627, 628, 693], "ascend": [160, 161, 255, 627, 628, 693], "dynam": [160, 255, 306, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 693, 739], "matter": [160, 161, 172, 198, 215, 255, 627, 628, 693], "_lower_bound": [160, 255, 627, 693], "_upper_bound": [160, 255, 627, 693], "harder": [160, 255, 627, 693], "inclus": [160, 161, 255, 398, 459, 460, 461, 462, 463, 465, 466, 467, 506, 507, 595, 627, 628, 693, 836, 941, 942, 988], "datapoint": [160, 255, 627, 693], "mondai": [160, 255, 371, 627, 693, 811], "tuesdai": [160, 255, 627, 693], "wednesdai": [160, 255, 627, 693], "thursdai": [160, 255, 627, 693], "fridai": [160, 255, 627, 693], "saturdai": [160, 255, 627, 693], "sundai": [160, 255, 371, 627, 693, 811], "date_rang": [160, 228, 255, 335, 337, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 367, 369, 370, 371, 372, 373, 627, 693, 771, 773, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 807, 809, 810, 811, 812, 813], "30m": [160, 255, 362, 369, 627, 693, 802, 809], "time_min": [160, 255, 627, 693], "time_max": [160, 255, 627, 693], "boundari": [160, 255, 319, 320, 321, 595, 627, 693, 753, 754, 755, 832, 988], "time_count": [160, 255, 627, 693], "_lower_boundari": [160, 255, 627, 693], "_upper_boundari": [160, 255, 627, 693], "lower_bound": [160, 255, 319, 321, 398, 595, 627, 693, 753, 755, 836, 976, 988], "upper_bound": [160, 255, 306, 319, 320, 398, 595, 627, 693, 753, 754, 836, 862, 988], "time_agg_list": [160, 255, 627, 693], "arang": [160, 226, 237, 255, 627, 677, 693], "2i": [160, 255, 627, 693], "3i": [160, 255, 627, 693], "a_agg_list": [160, 255, 627, 693], "rollinggroupbi": [161, 255], "dynamic_groupbi": [161, 255, 628, 693], "groupby_dynam": [161, 255, 628, 693], "43": [161, 255, 329, 595, 628, 693], "strptime": [161, 255, 361, 628, 693, 801], "set_sort": [161, 175, 228, 255, 595, 628, 633, 693, 988], "2d": [161, 218, 255, 567, 628, 693, 776], "sum_a": [161, 255, 628, 693], "min_a": [161, 255, 628, 693], "max_a": [161, 255, 628, 693], "seed": [162, 199, 255, 393, 452, 469, 475, 595, 830, 882, 899, 910, 988], "seed_1": [162, 255, 393, 595, 830, 988], "seed_2": [162, 255, 393, 595, 830, 988], "seed_3": [162, 255, 393, 595, 830, 988], "hash": [162, 255, 595, 988], "u64": [162, 255, 393, 454, 595, 646, 693, 830, 988], "10783150408545073287": [162, 255], "1438741209321515184": [162, 255], "10047419486152048166": [162, 255], "2047317070637311557": [162, 255], "ab": [163, 177, 211, 232, 255, 518, 519, 595, 671, 693, 831, 858, 959, 988], "grown": [165, 255], "intermedi": [167, 255, 631, 693, 835, 988, 996], "linear": [167, 191, 247, 255, 284, 397, 426, 451, 463, 547, 548, 575, 595, 631, 647, 687, 693, 717, 835, 881, 893, 988], "mask": [168, 170, 255, 285, 309, 310, 399, 401, 409, 486, 488, 595, 718, 741, 742, 825, 836, 838, 841, 853, 877, 878, 902, 921, 923, 980, 988], "visual": [168, 170, 255], "buffer_s": [172, 255], "intern": [172, 255], "veri": [172, 223, 255, 269, 595, 612, 693, 756, 988], "fit": [172, 206, 226, 255, 474, 577, 595, 908, 909, 988], "signific": [172, 255, 269, 595], "4x": [172, 255], "materialis": [172, 173, 197, 198, 255], "iter_row": [173, 197, 198, 255], "17_500": [173, 255], "klmnoopqrstuvwxyz": [173, 255], "__name__": [173, 255], "7500": [173, 255], "15_000": [173, 255], "record_batch": [173, 255], "to_arrow": [173, 255, 988], "to_batch": [173, 255], "date32": [173, 255], "large_str": [173, 213, 219, 255], "15000": [173, 255], "2500": [173, 255], "left_on": [174, 175, 255, 632, 633, 693], "right_on": [174, 175, 255, 632, 633, 693], "_right": [174, 175, 255, 632, 633, 693], "semi": [174, 255, 632, 693], "anti": [174, 255, 632, 693, 902, 903, 988], "cross": [174, 255, 632, 693], "join_asof": [174, 255, 632, 693], "stringcach": [174, 255, 606], "other_df": [174, 255], "by_left": [175, 255, 633, 693], "by_right": [175, 255, 633, 693], "asofjoinstrategi": [175, 255, 633, 693], "allow_parallel": [175, 255, 632, 633, 693], "force_parallel": [175, 255, 632, 633, 693], "asof": [175, 255, 633, 693], "asof_join": [175, 255], "search": [175, 255, 633, 693], "greater": [175, 255, 391, 392, 479, 508, 595, 633, 693, 914, 943, 988], "distanc": [175, 255, 633, 693, 832, 988], "plan": [175, 176, 255, 610, 618, 625, 632, 633, 648, 656, 674, 693], "gdp": [175, 255, 633, 693], "2016": [175, 255, 633, 693], "2017": [175, 255, 633, 693], "2018": [175, 255, 361, 633, 693, 801], "2019": [175, 255, 633, 693], "record": [175, 218, 255, 633, 693], "jan": [175, 255, 633, 693], "1st": [175, 255, 633, 693], "4164": [175, 255, 633, 693], "4411": [175, 255, 633, 693], "4566": [175, 255, 633, 693], "4696": [175, 255, 633, 693], "popul": [175, 255, 633, 693], "12th": [175, 255, 633, 693], "82": [175, 255, 633, 693], "66": [175, 255, 537, 595, 633, 693, 893, 988], "83": [175, 255, 633, 693], "52": [175, 232, 255, 468, 595, 633, 671, 693], "request": [176, 255], "describe_plan": [176, 255, 693], "unoptim": [176, 255, 693], "describe_optimized_plan": [176, 255, 693], "show_graph": [176, 255, 693], "un": [176, 255], "graphviz": [176, 255, 656, 693], "axi": [178, 179, 181, 183, 210, 255, 641, 693], "null_strategi": [179, 210, 255], "nullstrategi": [179, 210, 255], "spam": [179, 255, 493, 928], "id_var": [181, 255, 641, 693], "value_var": [181, 255, 641, 693], "variable_nam": [181, 255, 641, 693], "value_nam": [181, 255, 641, 693], "unpivot": [181, 255, 641, 693], "leav": [181, 255, 306, 641, 693], "massag": [181, 255, 641, 693], "measur": [181, 255, 641, 693], "merg": [182, 255, 642, 693], "caller": [182, 255, 306, 637, 642, 677, 693], "respons": [182, 255, 642, 693], "what": [185, 255, 970, 979, 988], "pack": [185, 255], "expr_unique_subset": [185, 255], "df_nuniqu": [185, 255], "df_agg_nuniqu": [185, 255], "offer": [188, 255, 447, 595, 645, 693], "fulli": [188, 199, 255], "cast_str_to_int": [188, 255, 645, 693], "col_nam": [188, 255, 422, 595, 645, 693], "tdf": [188, 255, 645, 693], "aggregate_funct": [189, 255], "pivotagg": [189, 255], "nodefault": [189, 255, 511, 946], "sort_column": [189, 255], "predefin": [189, 255], "predict": [189, 192, 228, 255], "transpos": [189, 255], "discoveri": [189, 255], "col1": [189, 226, 255, 693, 996], "col2": [189, 226, 255, 693, 996], "col3": [189, 255, 996], "tanh": [189, 255, 595, 988], "998347": [189, 255], "964028": [189, 255], "999954": [189, 255], "interpol": [191, 247, 255, 384, 426, 451, 463, 575, 595, 647, 687, 693, 881, 893, 988], "rollinginterpolationmethod": [191, 247, 255, 451, 463, 575, 595, 647, 687, 693, 881, 893, 988], "midpoint": [191, 247, 255, 451, 463, 575, 595, 647, 687, 693, 881, 893, 988], "by_pred": [197, 255], "accord": [197, 255, 423, 595, 782], "never": [197, 255], "mutual": [197, 255], "exclus": [197, 255, 537, 595], "addition": [197, 255], "clariti": [197, 255], "toomanyrowsreturnederror": [197, 255, 606], "norowsreturnederror": [197, 255, 606], "inherit": [197, 255], "rowserror": [197, 255, 606], "with_replac": [199, 255, 469, 595, 899, 988], "shuffl": [199, 237, 255, 469, 595, 677, 899, 988], "modul": [199, 255, 469, 475, 594, 595, 899, 910, 988], "more_expr": [201, 232, 255, 445, 538, 539, 543, 545, 547, 548, 554, 569, 572, 580, 583, 584, 595, 652, 671, 693], "named_expr": [201, 232, 255, 580, 583, 652, 671, 693], "threshold": [201, 255, 652, 693], "set_auto_structifi": [201, 232, 255, 652, 671, 693], "auto_structifi": [201, 232, 255, 652, 671, 693], "is_odd": [201, 255, 652, 693], "_is_odd": [201, 255, 652, 693], "shift_and_fil": [204, 255, 595, 693, 988], "shift": [205, 255, 287, 331, 446, 473, 547, 595, 655, 693, 720, 766, 876, 907, 988], "shrink": [206, 255, 474, 595, 908, 909, 988], "hold": [206, 255], "ddof": [209, 229, 255, 484, 535, 549, 574, 578, 579, 581, 582, 587, 595, 661, 669, 693, 918, 978, 988], "deviat": [209, 255, 377, 465, 484, 582, 595, 661, 693, 818, 918, 988], "degre": [209, 229, 255, 484, 535, 549, 574, 578, 579, 581, 582, 587, 595, 661, 669, 693, 918, 978, 988], "freedom": [209, 229, 255, 484, 535, 549, 574, 578, 579, 581, 582, 587, 595, 661, 669, 693, 918, 978, 988], "divisor": [209, 229, 255, 484, 535, 549, 574, 578, 579, 581, 582, 587, 595, 661, 669, 693, 918, 978, 988], "816497": [209, 255], "21": [210, 255, 563], "16a": [210, 255], "27b": [210, 255], "38c": [210, 255], "nth": [212, 255, 508, 525, 595, 664, 693, 943, 961, 988], "mostli": [213, 255, 385, 595], "categoricaltyp": [213, 255], "as_seri": [214, 255], "fruit": [214, 255, 449, 457, 490, 509, 521, 595, 925, 944], "car": [214, 255, 449, 457, 521, 595], "beetl": [214, 255, 449, 457, 521, 595], "audi": [214, 255, 449, 457, 521, 595], "300": [214, 255, 889, 890, 892, 988], "instantiat": [217, 255, 968, 988], "from_repr": [217, 255, 968, 988], "df_from_str_repr": [217, 255], "eval": [217, 255, 558, 968, 988], "correspond": [218, 255, 346, 452, 595, 782, 882, 988], "re": [218, 255, 354, 355, 794, 795, 995], "ll": [218, 255], "u1": [218, 255], "f4": [218, 255], "view": [218, 255, 970, 988], "recarrai": [218, 255], "rec": [218, 255], "use_pyarrow_extension_arrai": [219, 255, 971, 988], "trigger": [219, 255, 971, 988], "sent": [219, 255, 970, 971, 988], "pandas_df1": [219, 255], "pandas_df2": [219, 255], "pandas_df2_pa": [219, 255], "na": [219, 255, 971, 988], "get_column": [220, 255, 584], "four": [221, 255], "five": [221, 255, 996], "bottom_k": [222, 255, 529, 595, 665, 693, 973, 988], "include_head": [223, 255], "header_nam": [223, 255], "column_nam": [223, 255], "perhap": [223, 255], "column_2": [223, 255], "name_gener": [223, 255], "base_nam": [223, 255], "my_column_": [223, 255], "my_column_0": [223, 255], "my_column_1": [223, 255], "my_column_2": [223, 255], "uniquekeepstrategi": [224, 255, 666, 693], "kept": [224, 255, 666, 693], "decompos": [225, 255, 667, 693], "t_a": [225, 255, 667, 693], "t_b": [225, 255, 667, 693], "t_c": [225, 255, 667, 693], "t_d": [225, 255, 667, 693], "womp": [225, 255, 667, 693], "t_": [225, 255, 667, 693], "t_struct": [225, 255, 667, 693], "step": [226, 255, 542], "unstackdirect": [226, 255], "much": [226, 255, 305, 330, 595, 738, 763, 988], "pivot": [226, 255], "phase": [226, 255], "subject": [226, 255], "ascii_uppercas": [226, 255], "h": [226, 255, 262, 365, 368, 474, 511, 513, 515, 595, 946, 948, 950], "col1_0": [226, 255], "col1_1": [226, 255], "col1_2": [226, 255], "col2_0": [226, 255], "col2_1": [226, 255], "col2_2": [226, 255], "coalesc": [227, 255, 511, 668, 693, 946], "400": [227, 255, 668, 693, 889, 890, 892, 988], "600": [227, 255, 668, 693], "700": [227, 255, 668, 693], "new_df": [227, 255, 668, 693], "time_column": [228, 255], "frequenc": [228, 255], "forward_fil": [228, 255, 326, 329, 595], "varianc": [229, 255, 378, 411, 467, 535, 587, 595, 669, 693, 819, 856, 897, 978, 988], "grow": [230, 255], "is_not": [232, 255, 595, 671, 693], "not_c": [232, 255, 671, 693], "diff": [232, 255, 341, 344, 348, 350, 352, 357, 364, 595, 671, 693, 777, 780, 787, 789, 792, 797, 804, 988], "_diff": [232, 255, 671, 693], "row_nr": [233, 255, 423, 595, 673, 693, 903, 988], "more_agg": [235, 675], "named_agg": [235, 675], "_sum": [235, 675], "_mean_squar": [235, 675], "b_sum": [235, 675], "c_mean_squar": [235, 675], "sub": [237, 595], "triangl": [237, 677], "group_df": [237, 677], "deem": [238, 324, 550, 595, 678], "nr": [240, 249, 680, 689], "maxim": [242, 277, 595, 682, 709, 988], "833333": [243, 683], "minim": [245, 278, 283, 474, 482, 595, 685, 710, 716, 867, 908, 988], "overview": [255, 595, 606, 693, 988, 996], "public": [255, 595, 606, 693, 988], "frameinittyp": [255, 693], "variou": [255, 595, 693, 988], "entri": [255, 693, 995], "prevent": [255, 328, 329, 410, 522, 595, 693, 761, 762, 958, 988], "come": [255, 354, 355, 411, 595, 607, 692, 693, 794, 795, 856, 988], "behavior": [255, 269, 305, 540, 595, 738], "mydatafram": 255, "notic": [255, 693, 988], "df4": 255, "df5": 255, "df6": 255, "corr": [255, 574, 581], "drop_in_plac": 255, "drop_nul": [255, 333, 595, 693, 988], "estimated_s": [255, 988], "explod": [255, 387, 456, 595, 693, 886, 988], "find_idx_by_nam": 255, "fold": [255, 432, 545, 552, 553, 576], "frame_equ": [255, 362, 369], "groupby_rol": [255, 459, 460, 461, 462, 463, 465, 466, 467, 595, 627, 693], "hash_row": 255, "hstack": 255, "insert_at_idx": 255, "is_dupl": [255, 595, 988], "is_empti": [255, 988], "is_uniqu": [255, 595, 988], "iter_slic": 255, "melt": [255, 693], "merge_sort": [255, 693], "n_uniqu": [255, 595, 988], "pipe": [255, 595, 693], "quantil": [255, 463, 595, 693, 880, 893, 988], "replace_at_idx": 255, "shrink_to_fit": [255, 988], "take_everi": [255, 595, 693, 988], "to_dict": 255, "to_numpi": [255, 421, 595, 988], "to_panda": [255, 988], "to_struct": [255, 493], "unnest": [255, 493, 507, 508, 519, 693, 739, 942, 943], "unstack": 255, "upsampl": 255, "write_avro": 255, "write_databas": 255, "write_delta": 255, "write_excel": 255, "write_json": [255, 648, 693], "write_parquet": 255, "cumprod": [262, 595, 988], "ghi": [262, 493, 595, 928], "94": [263, 595], "map_alia": [264, 449, 521, 595], "confus": [265, 404, 406, 595], "tt": [265, 595], "tf": [265, 267, 595], "ff": [265, 267, 595], "upcast": [268, 595], "skip_nul": [269, 595, 702, 988], "pass_nam": [269, 595], "applystrategi": [269, 595], "thread_loc": [269, 595], "unknown": [269, 423, 492, 567, 595, 927], "stage": [269, 595], "speed": [269, 595, 658, 693], "code": [269, 471, 595, 635, 693, 904, 988], "amount": [269, 595], "releas": [269, 595, 996], "gil": [269, 595], "discourag": [269, 595], "loop": [269, 595], "a_times_2": [269, 595], "approx": [270, 541, 595, 693], "hyperloglog": [270, 541, 595, 693], "algorithm": [270, 541, 595, 693], "cardin": [270, 541, 595, 693], "invers": [271, 272, 273, 274, 275, 276, 595, 703, 704, 705, 706, 707, 708, 988], "cosin": [271, 272, 322, 323, 421, 595, 703, 704, 757, 758, 988], "570796": [271, 273, 595, 703, 705, 988], "hyperbol": [272, 274, 276, 323, 478, 527, 595, 704, 706, 708, 758, 913, 963, 988], "sine": [273, 274, 421, 477, 478, 595, 705, 706, 912, 913, 988], "881374": [274, 595, 706, 988], "tangent": [275, 276, 526, 527, 595, 707, 708, 962, 963, 988], "785398": [275, 595, 707, 988], "arg_wher": [280, 595], "sublist": [282, 283, 285, 287, 290, 291, 292, 293, 294, 301, 304, 305, 306, 715, 716, 718, 720, 723, 724, 725, 726, 727, 734, 737, 738, 739, 843, 988], "membership": [285, 718], "listcol": 286, "number_of_two": 286, "null_behavior": [287, 331, 595, 720, 766, 988], "nullbehavior": [287, 331, 595, 720, 766, 988], "th": [287, 331, 479, 595, 720, 766, 914, 988], "blindli": [288, 721], "worth": [288, 721], "enough": [288, 479, 595, 721, 914, 988], "concat_list": [288, 558, 721], "rank": [288, 549, 558, 581, 595, 721, 988], "exprnamespac": 289, "reshap": [289, 595, 722, 988], "flat": [289, 456, 595, 722, 886, 988], "taken": [301, 505, 524, 595, 734, 940], "null_on_oob": [305, 738], "cheaper": [305, 738], "n_field_strategi": [306, 739], "tostructstrategi": [306, 739], "first_non_nul": [306, 739], "max_width": [306, 739], "field_0": [306, 739], "field_1": [306, 739], "field_n": [306, 739], "incorrectli": 306, "n0": 306, "n1": 306, "maintain": [307, 470, 531, 595, 657, 658, 693, 740, 900, 974, 988], "substr": [309, 312, 313, 486, 490, 501, 502, 506, 507, 508, 509, 741, 744, 745, 921, 925, 936, 937, 941, 942, 943, 944], "transferencod": [310, 311, 488, 489, 742, 743, 923, 924], "strict": [310, 316, 486, 488, 500, 511, 512, 513, 515, 595, 742, 747, 901, 921, 923, 935, 946, 947, 948, 950, 988], "hex": [310, 311, 488, 489, 500, 742, 743, 923, 924, 935], "base64": [310, 311, 488, 489, 742, 743, 923, 924], "complex": [314, 330, 529, 595, 746, 763, 973, 988], "frac": [314, 376, 377, 378, 479, 529, 595, 746, 817, 818, 819, 914, 973, 988], "hurt": [315, 595], "lot": [315, 595], "content": [315, 475, 534, 595, 910, 988], "problem": [315, 595], "due": [316, 361, 595, 747, 801, 988], "overflow": [316, 328, 329, 500, 522, 595, 747, 761, 762, 935, 958, 988], "categoricalord": [317, 749], "lexic": [317, 749], "foo_clip": [319, 320, 321, 595], "clip": [320, 321, 595, 754, 755, 988], "543081": [323, 595, 758, 988], "cumul": [325, 326, 327, 328, 329, 552, 553, 554, 595, 759, 760, 761, 762, 988], "a_revers": [325, 326, 327, 328, 329, 422, 457, 521, 595], "value_cummax": [326, 595], "value_cummax_all_fil": [326, 595], "value_cumsum": [329, 595], "value_cumsum_all_fil": [329, 595], "min_period": [330, 376, 377, 378, 458, 459, 460, 461, 462, 463, 465, 466, 467, 578, 579, 595, 763, 817, 818, 819, 888, 889, 890, 891, 892, 893, 895, 896, 897, 988], "slide": [330, 595, 763, 988], "realli": [330, 595, 763, 988], "visit": [330, 595, 763, 988], "drop_nan": [334, 595, 988], "lose": [335, 771], "2001": [335, 340, 342, 343, 345, 346, 351, 353, 358, 359, 360, 362, 363, 367, 369, 370, 371, 372, 373, 511, 771, 776, 778, 779, 781, 783, 784, 785, 786, 788, 790, 791, 793, 796, 798, 799, 800, 802, 803, 807, 809, 810, 811, 812, 813, 946], "time_unit_m": [335, 771], "time_unit_n": [335, 771], "naiv": [336, 772], "compon": [336, 363, 511, 513, 557, 772, 803, 946, 948], "resolv": 336, "456000": [336, 772], "101000": 336, "456": [336, 772, 967, 988], "101": [336, 500, 935, 996], "d1": 336, "d2": 336, "d3": 336, "utc": [337, 361, 511, 513, 773, 801, 946, 948], "europ": [337, 361, 773, 801], "london": [337, 361, 773, 801], "gmt": [337, 361, 773, 801], "bst": [337, 361, 773, 801], "weekdai": [340, 359], "day_of_month": [340, 359, 371], "ordinal_dai": [340, 371], "day_of_year": [340, 359, 371], "days_diff": 341, "epochtimeunit": [342, 563, 778], "unix": [342, 563, 778], "epoch_n": [342, 778], "epoch_": [342, 778], "978307200000000": [342, 367, 778, 807], "978307200": [342, 778], "978393600000000": [342, 367, 778, 807], "978393600": [342, 778], "978480000000000": [342, 367, 778, 807], "978480000": [342, 778], "hours_diff": 344, "leap": [345, 358, 781, 798], "2002": [345, 346, 358, 360, 373, 781, 798, 813], "iso": [346, 370, 371, 782, 810, 811], "2006": [346, 358, 798], "180": [346, 360, 373], "2004": [346, 358, 798], "2005": [346, 358, 798], "1_001": [347, 348, 350, 357], "002": [347, 348, 350, 357, 557, 787, 789, 797], "003": [347, 348, 350, 357], "3000": 347, "997": [347, 348, 350, 357], "997000": 347, "998": [347, 348, 350, 357], "998000": 347, "999": [347, 348, 350, 357, 996], "999000": 347, "microseconds_diff": 348, "milliseconds_diff": 350, "minutes_diff": 352, "1440": [352, 792], "think": [354, 355, 794, 795], "vectoris": [354, 355, 794, 795], "tseri": [354, 355, 794, 795], "monthend": [354, 794], "rollforward": [354, 794], "monthbegin": [355, 795], "rollback": [355, 795], "nanoseconds_diff": 357, "1000000": [357, 517, 797], "minu": [358, 798], "dictat": [358, 798], "date_plus_1i": [358, 798], "1y2mo": [358, 798], "date_min": 358, "1998": [358, 798], "1999": [358, 798], "2003": [358, 563, 798], "ordin": [359, 452, 595, 799, 882, 988], "366": [359, 799], "use_earliest": [361, 801], "convert_time_zon": [361, 801], "ambigu": [361, 801], "sai": [361, 801], "daylight": [361, 801], "earliest": [361, 801], "london_timezon": [361, 801], "amsterdam": [361, 801], "london_to_amsterdam": [361, 801], "cet": [361, 801], "cest": [361, 801], "dst": [361, 801], "ts_local": [361, 801], "brussel": [361, 801], "half": [362, 376, 377, 378, 595, 802, 817, 818, 819, 988], "225": [362, 369], "to_fram": [362, 369, 511, 902, 903, 942, 943, 946, 988], "10m": [362, 369, 802, 809], "milli": [363, 803], "micro": [363, 803], "456789": 363, "654321": 363, "111110": 363, "765431": 363, "sec": [363, 996], "11111": 363, "seconds_diff": 364, "to_str": [365, 805], "datetime_str": [365, 368], "timestamp_n": [367, 807], "timestamp_m": 367, "978307200000": 367, "978393600000": 367, "978480000000": 367, "strftime": [368, 808], "1mo_satur": 369, "53": [370, 810], "incorrect": [372, 471, 595, 677, 812, 904, 988], "time_unit_u": [372, 812], "32971": [372, 812], "32974": [372, 812], "32976": [372, 812], "718281828459045": [374, 416, 595, 815, 859, 988], "pk": [374, 595, 815, 988], "probabl": [374, 595, 815, 988], "459148": [374, 595], "754888": [374, 595], "span": [376, 377, 378, 595, 817, 818, 819, 988], "half_lif": [376, 377, 378, 595, 817, 818, 819, 988], "adjust": [376, 377, 378, 479, 595, 817, 818, 819, 914, 988], "ignore_nul": [376, 377, 378, 595, 817, 818, 819, 979, 988], "exponenti": [376, 377, 378, 380, 448, 595, 817, 818, 819, 820, 988], "weight": [376, 377, 378, 458, 459, 460, 461, 462, 463, 465, 466, 467, 479, 595, 817, 818, 819, 888, 889, 890, 891, 892, 893, 895, 896, 897, 914, 988], "decai": [376, 377, 378, 595, 817, 818, 819, 988], "term": [376, 377, 378, 496, 499, 595, 817, 818, 819, 931, 934, 988], "mass": [376, 377, 378, 595, 817, 818, 819, 988], "gamma": [376, 377, 378, 595, 817, 818, 819, 988], "foral": [376, 377, 378, 595, 817, 818, 819, 988], "geq": [376, 377, 378, 595, 817, 818, 819, 988], "theta": [376, 377, 378, 595, 817, 818, 819, 988], "life": [376, 377, 378, 595, 817, 818, 819, 988], "exp": [376, 377, 378, 595, 817, 818, 819, 988], "ln": [376, 377, 378, 595, 817, 818, 819, 988], "smooth": [376, 377, 378, 595, 817, 818, 819, 988], "factor": [376, 377, 378, 528, 595, 817, 818, 819, 972, 988], "leq": [376, 377, 378, 595, 817, 818, 819, 988], "imbal": [376, 377, 378, 595, 817, 818, 819, 988], "ew": [376, 377, 378, 595, 817, 818, 819, 988], "w_i": [376, 377, 378, 595, 817, 818, 819, 988], "recurs": [376, 377, 378, 595, 817, 818, 819, 988], "y_0": [376, 377, 378, 595, 817, 818, 819, 988], "x_0": [376, 377, 378, 595, 817, 818, 819, 988], "y_t": [376, 377, 378, 595, 817, 818, 819, 988], "y_": [376, 377, 378, 595, 817, 818, 819, 988], "x_t": [376, 377, 378, 595, 817, 818, 819, 988], "observ": [376, 377, 378, 595, 817, 818, 819, 988], "x_2": [376, 377, 378, 595, 817, 818, 819, 988], "428571": [376, 595], "bia": [377, 378, 411, 464, 479, 595, 818, 819, 856, 894, 914, 988], "unbias": [377, 378, 595, 818, 819, 988], "963624": [377, 595, 818, 988], "928571": [378, 595, 819, 988], "wildcard": [379, 546, 552, 553, 561, 576, 595], "regex": [379, 429, 486, 487, 490, 492, 493, 501, 502, 509, 559, 584, 595, 921, 922, 925, 927, 928, 936, 937, 944], "aa": [379, 486, 559, 595, 921], "ba": [379, 559, 595], "cc": [379, 559, 595], "718282": [380, 595], "389056": [380, 595], "54": [380, 595, 996], "59815": [380, 595], "expand": [381, 428, 429, 455, 595, 821, 988], "exprlistnamespac": [381, 387, 456, 595], "exprstringnamespac": [381, 595], "pythonliter": [382, 569, 572, 577, 595, 822, 864, 867, 988], "extrem": [382, 595, 822, 988], "group_col": [385, 536, 595], "g1": [385, 536, 595], "g2": [385, 536, 595], "lt": [385, 536, 595, 988], "gte": [385, 536, 595], "divis": [389, 530, 595], "truediv": [389, 595], "9774092659964970114": [393, 595], "13614470193936745724": [393, 595], "1101441246220388612": [393, 595], "11638928888656214026": [393, 595], "13382926553367784577": [393, 595], "cumsum": [396, 520, 595, 630, 693, 855, 988], "interpolationmethod": [397, 595, 835, 988], "regrid": [397, 595], "grid": [397, 595], "df_original_grid": [397, 595], "grid_point": [397, 595], "df_new_grid": [397, 595], "conflat": [398, 595], "finit": [400, 530, 549, 581, 595, 840, 988], "primit": [402, 595, 970, 988], "optional_memb": [402, 595, 843, 988], "infinit": [403, 530, 595, 844, 988], "_isnan": [404, 595], "b_isnan": [404, 595], "negat": [405, 595], "_is_not_nan": [406, 595], "b_is_not_nan": [406, 595], "_not_nul": [407, 595], "a_not_nul": [407, 595], "b_not_nul": [407, 595], "_isnul": [408, 595], "a_isnul": [408, 595], "b_isnul": [408, 595], "undo": [410, 434, 595], "duplicateerror": [410, 595, 606], "occurr": [410, 595, 832, 988], "333333": [410, 467, 595, 876, 897, 988], "fisher": [411, 479, 595, 856, 914, 988], "fourth": [411, 595, 856, 988], "subtract": [411, 520, 595, 856, 988], "distribut": [411, 479, 595, 856, 914, 988], "elimin": [411, 595, 856, 988], "bias": [411, 479, 595, 856, 914, 988], "scipi": [411, 479, 595, 856, 914, 988], "stat": [411, 479, 595, 856, 914, 988], "153061": [411, 595], "logarithm": [416, 417, 418, 595, 859, 860, 861, 988], "584963": [416, 595], "30103": [417, 595], "60206": [417, 595], "natur": [418, 595, 861, 988], "plu": [418, 595, 861, 988], "693147": [418, 595], "098612": [418, 595], "386294": [418, 595], "lowest": [419, 595], "9223372036854775808": [419, 595], "agg_list": [421, 595], "elementwis": [421, 458, 459, 460, 461, 462, 463, 465, 466, 467, 595, 888, 889, 890, 891, 892, 893, 895, 896, 897, 988], "parti": [421, 595], "book": [421, 595], "map_dict": [421, 595, 988], "argmax": [421, 595], "_revers": [422, 457, 521, 595], "rsplit": [422, 595], "b_revers": [422, 457, 521, 595], "remap": [423, 595, 863, 988], "lookup": [423, 595, 863, 988], "country_code_dict": [423, 595], "ca": [423, 595], "canada": [423, 595], "de": [423, 595], "germani": [423, 595], "fr": [423, 595], "franc": [423, 595], "country_cod": [423, 595], "rest": [423, 595], "exprmetanamespac": [427, 430], "computeerror": [431, 500, 606, 935], "keep_nam": [434, 595], "modulu": [436, 595], "xlog2": [438, 448, 595], "poison": [440, 441, 595, 872, 873, 988], "nanmax": [440, 441, 595, 872, 873, 988], "wherea": [440, 441, 595, 629, 636, 693, 872, 873, 988], "inequ": [442, 595], "outcom": [445, 595], "_max": [445, 595], "c_max": [445, 595], "_min": [445, 595], "c_min": [445, 595], "percent": [446, 595, 876, 988], "090909": [446, 595], "extract_numb": [447, 595], "digit": [447, 468, 493, 517, 595, 898, 922, 928, 952, 988, 996], "scale_negative_even": [447, 595], "expon": [448, 595, 988], "reverse_": [449, 595], "reverse_a": [449, 595], "reverse_fruit": [449, 595], "reverse_b": [449, 595], "reverse_car": [449, 595], "rankmethod": [452, 595, 882, 988], "ti": [452, 595, 882, 988], "competit": [452, 595, 882, 988], "highest": [452, 533, 549, 581, 595, 693, 882, 988], "64bit": [454, 595, 884, 988], "safe": [454, 511, 595, 884, 946, 970, 988], "coerc": [455, 595], "fruits_revers": [457, 521, 595], "cars_revers": [457, 521, 595], "window_s": [458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 578, 579, 595, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 988], "rolling_min": [458, 595, 888, 988], "rolling_max": [458, 595, 888, 988], "rolling_mean": [458, 595, 888, 988], "rolling_sum": [458, 595, 888, 988], "multipli": [458, 459, 460, 461, 462, 463, 465, 466, 467, 595, 888, 889, 890, 891, 892, 893, 895, 896, 897, 988], "358899": [458, 595], "041452": [458, 595], "567764": [458, 595], "travers": [459, 460, 462, 465, 466, 467, 595, 889, 890, 892, 895, 896, 897, 988], "vector": [459, 460, 462, 465, 466, 467, 595, 889, 890, 892, 895, 896, 897, 988], "5h": [459, 460, 461, 462, 463, 465, 466, 467, 595], "skew": [464, 595, 894, 988], "527525": [465, 595, 895, 988], "searchsortedsid": [470, 595, 900, 988], "leftmost": [470, 595, 900, 988], "rightmost": [470, 595, 900, 988], "six": [470, 595], "downstream": [471, 595, 904, 988], "extrema": [474, 595, 908, 988], "112": [474, 595, 996], "129": [474, 595], "8589934592": [474, 595], "1073741824": [474, 595], "175201": [478, 595, 913, 988], "about": [479, 486, 492, 493, 501, 595, 914, 921, 927, 928, 936, 988, 996], "unimod": [479, 595, 914, 988], "skewtest": [479, 595, 914, 988], "speak": [479, 595, 914, 988], "g_1": [479, 595, 914, 988], "m_3": [479, 595, 914, 988], "m_2": [479, 595, 914, 988], "m_i": [479, 595, 914, 988], "sum_": [479, 595, 914, 988], "texttt": [479, 595, 914, 988], "k_3": [479, 595, 914, 988], "k_2": [479, 595, 914, 988], "sqrt": [479, 595, 914, 988], "343622": [479, 595], "value1": [482, 595], "value2": [482, 595], "attain": [482, 595], "414214": [483, 595, 917, 988], "ends_with": [486, 509, 944], "sensit": [486, 493, 501, 921, 928, 936], "ilmsuxu": [486, 492, 493, 501, 921, 927, 928, 936], "default_match": 486, "insensitive_match": 486, "section": [486, 492, 493, 501, 921, 927, 928, 936], "crab": [486, 921], "dog": [486, 514, 516, 548, 921], "rab": [486, 921], "success": [487, 493, 922, 928], "overlap": [487, 493, 922, 928], "captur": [487, 492, 493, 922, 927, 928], "123": [487, 493, 502, 922, 928, 937, 967, 988], "bla": [487, 493, 922, 928], "asd": [487, 493, 922, 928], "678": [487, 493, 922, 928], "910t": [487, 493, 922, 928], "count_digit": 487, "666f6f": [489, 924], "626172": [489, 924], "mango": [490, 509, 925, 944], "go": [490, 925], "has_suffix": 490, "group_index": [492, 927], "nthose": [492, 927], "nodd": [492, 927], "nthe": [492, 927], "url": [492, 927], "vote": [492, 927], "ballon_dor": [492, 927], "404": [492, 927], "ref": [492, 927], "candid": [492, 927], "messi": [492, 927], "ronaldo": [492, 927], "did": [493, 928], "email": [493, 928], "real": [493, 928], "some_account": [493, 928], "somewher": [493, 928], "net": [493, 928], "jkl": [493, 928], "uvw": [493, 928], "co": [493, 595, 928, 988], "uk": [493, 928], "address": 493, "xi": [493, 928], "insensit": [493, 501, 921, 928, 936], "quantifi": [493, 928], "arr": [493, 558, 596, 970, 988, 989], "email_part": [493, 928], "extracted_nr": 493, "910": [493, 928], "json_path_match": [494, 929], "jsonpath": [494, 495, 929, 930], "json_path": [495, 930], "regardless": [495, 930], "json_val": [495, 930], "n_char": [496, 931], "caf\u00e9": [496, 499, 931, 934], "345": [496, 499, 931, 934], "\u6771\u4eac": [496, 499, 931, 934], "nchar": [496, 499], "fill_char": [497, 503, 932, 938], "justifi": [497, 503, 932, 938], "pad": [497, 503, 517, 932, 938, 952], "cow": [497, 503, 932, 938], "monkei": [497, 503, 932, 938], "hippopotamu": [497, 503, 932, 938], "strip": [498, 504, 933, 939], "tworld": [498, 510, 933, 945], "wod": [498, 504, 933, 939], "rld": [498, 933], "radix": [500, 935], "parseerror": [500, 935], "becom": [500, 935], "silent": [500, 935], "110": [500, 935], "010": [500, 935], "fa1e": [500, 935], "ff00": [500, 935], "cafe": [500, 935], "64030": [500, 935], "65280": [500, 935], "51966": [500, 935], "replace_al": [501, 936], "citi": 501, "philadelphia": 501, "season": 501, "spring": 501, "summer": 501, "autumn": 501, "winter": 501, "weather": [501, 936], "raini": [501, 936], "sunni": [501, 936], "cloudi": 501, "snowi": 501, "foggi": [501, 936], "123abc": [501, 936], "abc456": [501, 936], "abcabc": [502, 937], "123a123": [502, 937], "bc": [502, 584, 937], "trail": [504, 510, 939, 945], "worl": [504, 510, 939, 945], "subslic": [505, 940], "pear": [505, 940], "papaya": [505, 940], "dragonfruit": [505, 940], "s_slice": 505, "ear": [505, 940], "aya": [505, 940], "uit": [505, 940], "ya": [505, 940], "onf": [505, 940], "a_1": [507, 942, 966, 988], "d_4": [507, 942], "rename_field": [507, 508, 942, 943], "first_part": [507, 508, 942, 943], "second_part": [507, 508, 942, 943], "remaind": [508, 943], "app": [509, 944], "has_prefix": 509, "polarstemporaltyp": [511, 946], "tz_awar": [511, 946], "anywher": [511, 512, 513, 946, 947, 948], "toggl": [511, 946], "futur": [511, 946], "3f": [511, 513, 946, 948], "00z": [511, 513, 946, 948], "sun": [511, 946], "jul": [511, 946], "34": [511, 946], "_tz_awar": 513, "lowercas": [514, 949], "variant": [514, 516], "uppercas": [516, 951], "100000": 517, "0010": 517, "0001": 517, "00000": 517, "00001": 517, "cd": [518, 519], "struct_col": [518, 519], "www": 519, "xxx": 519, "yyi": 519, "zzz": 519, "obvious": 519, "structfieldnotfounderror": [519, 606], "761594": [527, 595, 963, 988], "replic": [528, 595, 972, 988], "vals_phys": [528, 595], "floordiv": [530, 595], "ieee": [530, 595], "754": [530, 595], "mathemat": [530, 558, 595], "undefin": [530, 595], "On": [530, 595], "operand": [530, 595], "infin": [530, 595], "value_count": [532, 595, 988], "9223372036854775807": [533, 595], "multithread": [534, 595], "binary_str": [537, 595], "zfill": [537, 595], "250": [537, 595, 890, 988, 996], "bin_x": [537, 595], "bin_i": [537, 595], "xor_xi": [537, 595], "bin_xor_xi": [537, 595], "00001010": [537, 595], "00000001": [537, 595], "00001011": [537, 595], "00001000": [537, 595], "00000010": [537, 595], "11111010": [537, 595], "00000011": [537, 595], "249": [537, 595], "11111001": [537, 595], "01000010": [537, 595], "00000100": [537, 595], "70": [537, 595], "01000110": [537, 595], "bitwis": [538, 539], "AND": 538, "returns_scalar": 540, "product_a": 540, "49": 540, "Be": 542, "more_nam": 546, "hamburg": 546, "lag": 547, "mimic": 547, "a_lag_": 547, "a_rol": 547, "swim": 548, "walk": 548, "full_sent": 548, "correlationmethod": 549, "propagate_nan": [549, 581], "spearman": [549, 581], "larger": [549, 581, 657, 658, 693], "544705": [549, 574], "covari": [551, 579], "acc": [552, 553, 561, 576], "include_init": 552, "accumul": [552, 553, 561, 576], "fn": [552, 553, 561, 576], "new_valu": [552, 553, 561, 576], "cumreduc": 552, "tbl_width_char": 557, "120": 557, "add_week": 557, "add_dai": 557, "add_second": 557, "add_milli": 557, "add_hour": 557, "a_b_doubl": 558, "f_string": 562, "placehold": 562, "hello_": 562, "_world": 562, "foo_": 562, "_bar_": 562, "foo_a_bar_1": 562, "foo_b_bar_2": 562, "foo_c_bar_3": 562, "epoch": 563, "timestep": 563, "1666683077": 563, "1666683099": 563, "39": 563, "12345": [563, 750, 827, 898, 988], "12346": 563, "agg_group": [564, 595], "favor": [566, 574, 581], "implod": [566, 595, 988], "allow_object": 567, "valueexcept": 567, "test_func": 568, "605551": 582, "605551275463989": 582, "my_struct": 583, "selector": 584, "chain": 588, "isn": 588, "thens": 588, "elif": 588, "pick": 588, "sometim": 594, "and_": 595, "approx_uniqu": [595, 693], "arcco": [595, 988], "arccosh": [595, 988], "arcsin": [595, 988], "arcsinh": [595, 988], "arctan": [595, 988], "arctanh": [595, 988], "arg_max": [595, 988], "arg_min": [595, 988], "arg_sort": [595, 988], "arg_uniqu": [595, 988], "backward_fil": 595, "clip_max": [595, 988], "clip_min": [595, 988], "cosh": [595, 988], "cumcount": 595, "cummax": [595, 988], "cummin": [595, 988], "cumulative_ev": [595, 988], "entropi": [595, 988], "eq": [595, 988], "ewm_mean": [595, 988], "ewm_std": [595, 988], "ewm_var": [595, 988], "extend_const": [595, 988], "flatten": 595, "ge": [595, 988], "gt": [595, 988], "inspect": [595, 693], "is_between": [595, 988], "is_finit": [595, 988], "is_first": [595, 988], "is_in": [595, 988], "is_infinit": [595, 988], "is_nan": [595, 988], "is_not_nan": [595, 988], "is_not_nul": [595, 988], "kurtosi": [595, 988], "le": [595, 988], "log10": [595, 988], "log1p": [595, 988], "mod": 595, "mul": 595, "nan_max": [595, 988], "nan_min": [595, 988], "ne": [595, 988], "or_": 595, "pct_chang": [595, 988], "pow": [595, 988], "reinterpret": [595, 988], "repeat_bi": 595, "rolling_appli": [595, 988], "rolling_median": [595, 988], "rolling_quantil": [595, 988], "rolling_skew": [595, 988], "rolling_std": [595, 988], "rolling_var": [595, 988], "search_sort": [595, 988], "shrink_dtyp": [595, 988], "sin": [595, 988], "sinh": [595, 988], "sort_bi": 595, "tan": [595, 988], "to_phys": [595, 988], "unique_count": [595, 988], "xor": 595, "expos": 606, "miscellan": 606, "arrowerror": 606, "columnnotfounderror": 606, "invalidoperationerror": 606, "nodataerror": 606, "polarspanicerror": 606, "schemaerror": 606, "schemafieldnotfounderror": 606, "shapeerror": 606, "parametr": 606, "build_info": 606, "get_index_typ": 606, "show_vers": 606, "threadpool_s": 606, "sqlcontext": [606, 995], "hit": [610, 693], "node": [610, 630, 637, 641, 646, 649, 693], "huge": [613, 693], "saver": [613, 693], "purpos": [620, 693], "influenc": [620, 637, 693], "read_json": [625, 674, 693], "lazygroupbi": [626, 627, 628, 693], "other_lf": [632, 693], "validate_output_schema": [637, 693], "streamabl": [637, 641, 693], "past": [637, 693], "assum": [637, 677, 693], "paramount": [637, 693], "bug": [637, 677, 693], "elig": [637, 693], "invari": [637, 693], "upheld": [637, 693], "prune": [637, 693], "show_plot": [646, 693], "truncate_nod": [646, 693], "figsiz": [646, 656, 693], "gantt": [646, 693], "plot": [646, 656, 693], "groupby_partit": [646, 693], "470": [646, 693], "475": [646, 693], "1964": [646, 693], "from_json": [648, 693], "swap": [649, 693], "output_path": [656, 693], "raw_output": [656, 693], "figur": [656, 693], "ram": [657, 658, 693], "slightli": [657, 658, 693], "my_larger_than_ram_fil": [657, 658, 693], "data_pagesize_limit": [658, 693], "290994": [661, 693], "118034": [661, 693], "433013": [661, 693], "1875": [669, 693], "extern": [672, 693], "lf_other": [672, 693], "afoo": [672, 693], "cfoo": [672, 693], "train_lf": [672, 693], "feature_0": [672, 693], "feature_1": [672, 693], "test_lf": [672, 693], "_train": [672, 693], "feature_0_train": [672, 693], "dataframescan": [674, 693], "output_schema": [674, 693], "lf5": 693, "lf6": 693, "explain": 693, "sink_ipc": 693, "sink_parquet": 693, "with_context": 693, "new_aliased_sr": [698, 988], "append_chunk": [701, 988], "super": [701, 988], "141593": [703, 988], "292432": [704, 988], "549306": [708, 988], "listnamespac": [714, 821, 886, 988], "field_2": 739, "n00": 739, "n01": 739, "n02": 739, "catnamespac": 748, "56789": [750, 827, 898, 988], "901234": [750, 827, 898, 988], "pi": [757, 912, 962, 988], "1232e": [757, 988], "quick": [765, 988, 996], "series_num": [765, 988], "581139": [765, 988], "series_str": [765, 988], "datetimenamespac": 770, "ser": [774, 775, 806], "replace_time_zon": [774, 775, 806], "kathmandu": [774, 775, 806], "0545": [774, 775, 806], "500m": [786, 788, 796, 803], "500000": 786, "2m": 791, "500000000": 796, "date_minus_1y_2mon": 798, "165": [802, 809], "series_equ": [802, 809, 988], "timestamp_u": 807, "978307200000000000": 807, "978393600000000000": 807, "978480000000000000": 807, "005": [815, 988], "06293300616044681": [815, 988], "65": [815, 988], "8568409950394724": [815, 988], "4000000": [816, 988], "814697265625": [816, 988], "stringnamespac": [821, 919, 988], "bitmask": [829, 988], "swiftli": [829, 988], "10734580197236529959": [830, 988], "3022416320763508302": [830, 988], "13756996518000038261": [830, 988], "bin_count": [832, 988], "a_count": [832, 988], "fall": [836, 988], "2147483648": [862, 988], "iso3166": [863, 988], "tur": [863, 988], "jpn": [863, 988], "nld": [863, 988], "country_lookup": [863, 988], "japan": [863, 988], "t\u00fcrkiy": [863, 988], "netherland": [863, 988], "unrecognis": [863, 988], "unspecifi": [863, 988], "country_nam": [863, 988], "166667": [876, 988], "142857": [876, 988], "peak": [877, 878, 988], "quanil": [880, 988], "nanstd": [888, 988], "858612": [888, 988], "200": [889, 890, 892, 988], "150": [890, 988], "350": [890, 988], "450": [890, 988], "381802": [894, 988], "dev": [895, 988], "frequent": [902, 903, 988], "mutat": [903, 988], "2246e": [912, 962, 988], "6331e16": [962, 988], "lib": [965, 988], "int64arrai": [965, 988], "a_2": [966, 988], "a_3": [966, 988], "s_from_str_repr": [968, 988], "zero_copy_onli": [970, 988], "writabl": [970, 988], "complet": [970, 988], "presenc": [970, 988], "immut": [970, 988], "127": [976, 988], "seriesview": [979, 988], "arraylik": 988, "dtype_if_empti": 988, "position": 988, "scenario": 988, "chunk_length": 988, "cut": 988, "get_chunk": 988, "has_valid": 988, "hist": 988, "is_boolean": 988, "is_float": 988, "is_integ": 988, "is_numer": [988, 996], "is_sort": 988, "is_tempor": 988, "is_utf8": 988, "new_from_index": 988, "peak_max": 988, "peak_min": 988, "power": 988, "qcut": 988, "set_at_idx": 988, "two_a": 995, "__enter__": 995, "__exit__": 995, "exc_typ": 995, "baseexcept": 995, "exc_val": 995, "exc_tb": 995, "tracebacktyp": 995, "unregist": 995, "guid": 996, "easi": 996, "approxim": 996, "own": 996, "machin": 996, "xdist": 996, "vari": 996, "hardwar": 996, "setup": 996, "numeric_dtyp": 996, "null_probabililti": 996, "test_numer": 996, "col0": 996, "col4": 996, "29096": 996, "485": 996, "2147483647": 996, "8257e14": 996, "7508": 996, "37338": 996, "7264": 996, "321": 996, "16996": 996, "121": 996, "361": 996, "63204": 996, "1443e235": 996, "conform": 996, "ascii_lett": 996, "id_char": 996, "alphabet": 996, "price": 996, "min_valu": 996, "max_valu": 996, "test_price_calcul": 996, "a101": 996, "8nin": 996, "qhoo": 996, "714": 996, "544": 996, "i0e0": 996, "0000": 996, "colz": 996, "test_miscellan": 996, "143": 996, "235": 996, "87": 996, "186": 996, "174": 996, "179": 996, "213": 996, "221": 996, "86": 996, "255": 996}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [35, 0, 1, "", "DataType"], [36, 0, 1, "", "Date"], [37, 0, 1, "", "Datetime"], [38, 0, 1, "", "Decimal"], [39, 0, 1, "", "Duration"], [40, 0, 1, "", "Float32"], [41, 0, 1, "", "Float64"], [42, 0, 1, "", "Int16"], [43, 0, 1, "", "Int32"], [44, 0, 1, "", "Int64"], [45, 0, 1, "", "Int8"], [46, 0, 1, "", "List"], [47, 0, 1, "", "Null"], [48, 0, 1, "", "Object"], [995, 0, 1, "", "SQLContext"], [55, 0, 1, "", "StringCache"], [56, 0, 1, "", "Struct"], [57, 0, 1, "", "Time"], [58, 0, 1, "", "UInt16"], [59, 0, 1, "", "UInt32"], [60, 0, 1, "", "UInt64"], [61, 0, 1, "", "UInt8"], [62, 0, 1, "", "Unknown"], [63, 0, 1, "", "Utf8"], [64, 4, 1, "", "align_frames"], [538, 4, 1, "", "all"], [539, 4, 1, "", "any"], [540, 4, 1, "", "apply"], [541, 4, 1, "", "approx_unique"], [542, 4, 1, "", "arange"], [543, 4, 1, "", "arg_sort_by"], [69, 4, 1, "", "arg_where"], [544, 4, 1, "", "avg"], [70, 4, 1, "", "build_info"], [545, 4, 1, "", "coalesce"], [546, 4, 1, "", "col"], [71, 4, 1, "", "collect_all"], [72, 4, 1, "", "concat"], [547, 4, 1, "", "concat_list"], [548, 4, 1, "", "concat_str"], [549, 4, 1, "", "corr"], [550, 4, 1, "", "count"], [551, 4, 1, "", "cov"], [552, 4, 1, "", "cumfold"], [553, 4, 1, "", "cumreduce"], [554, 4, 1, "", "cumsum"], [73, 4, 1, "", "cut"], [555, 4, 1, "", "date"], [74, 4, 1, "", "date_range"], [556, 4, 1, "", "datetime"], [557, 4, 1, "", "duration"], [558, 4, 1, "", "element"], [75, 4, 1, "", "enable_string_cache"], [559, 4, 1, "", "exclude"], [560, 4, 1, "", "first"], [561, 4, 1, "", "fold"], [562, 4, 1, "", "format"], [90, 4, 1, "", "from_arrow"], [91, 4, 1, "", "from_dataframe"], [92, 4, 1, "", "from_dict"], [93, 4, 1, "", "from_dicts"], [563, 4, 1, "", "from_epoch"], [94, 4, 1, "", "from_numpy"], [95, 4, 1, "", "from_pandas"], [96, 4, 1, "", "from_records"], [97, 4, 1, "", "from_repr"], [98, 4, 1, "", "get_dummies"], [99, 4, 1, "", "get_index_type"], [564, 4, 1, "", "groups"], [565, 4, 1, "", "head"], [566, 4, 1, "", "list"], [567, 4, 1, "", "lit"], [568, 4, 1, "", "map"], [569, 4, 1, "", "max"], [570, 4, 1, "", "mean"], [571, 4, 1, "", "median"], [572, 4, 1, "", "min"], [573, 4, 1, "", "n_unique"], [101, 4, 1, "", "ones"], [574, 4, 1, "", "pearson_corr"], [575, 4, 1, "", "quantile"], [102, 4, 1, "", "read_avro"], [103, 4, 1, "", "read_csv"], [104, 4, 1, "", "read_csv_batched"], [105, 4, 1, "", "read_database"], [106, 4, 1, "", "read_delta"], [107, 4, 1, "", "read_excel"], [108, 4, 1, "", "read_ipc"], [109, 4, 1, "", "read_ipc_schema"], [110, 4, 1, "", "read_json"], [111, 4, 1, "", "read_ndjson"], [112, 4, 1, "", "read_parquet"], [113, 4, 1, "", "read_parquet_schema"], [576, 4, 1, "", "reduce"], [577, 4, 1, "", "repeat"], [578, 4, 1, "", "rolling_corr"], [579, 4, 1, "", "rolling_cov"], [114, 4, 1, "", "scan_csv"], [115, 4, 1, "", "scan_delta"], [116, 4, 1, "", "scan_ipc"], [117, 4, 1, "", "scan_ndjson"], [118, 4, 1, "", "scan_parquet"], [119, 4, 1, "", "scan_pyarrow_dataset"], [580, 4, 1, "", "select"], [120, 4, 1, "", "show_versions"], [581, 4, 1, "", "spearman_rank_corr"], [582, 4, 1, "", "std"], [583, 4, 1, "", "struct"], [584, 4, 1, "", "sum"], [585, 4, 1, "", "tail"], [130, 4, 1, "", "threadpool_size"], [586, 4, 1, "", "time"], [131, 4, 1, "", "time_range"], [587, 4, 1, "", "var"], [588, 4, 1, "", "when"], [132, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "activate_decimals"], [6, 1, 1, "", "load"], [7, 1, 1, "", "restore_defaults"], [8, 1, 1, "", "save"], [9, 1, 1, "", "set_ascii_tables"], [10, 1, 1, "", "set_fmt_float"], [11, 1, 1, "", "set_fmt_str_lengths"], [12, 1, 1, "", "set_streaming_chunk_size"], [13, 1, 1, "", "set_tbl_cell_alignment"], [14, 1, 1, "", "set_tbl_cols"], [15, 1, 1, "", "set_tbl_column_data_type_inline"], [16, 1, 1, "", "set_tbl_dataframe_shape_below"], [17, 1, 1, "", "set_tbl_formatting"], [18, 1, 1, "", "set_tbl_hide_column_data_types"], [19, 1, 1, "", "set_tbl_hide_column_names"], [20, 1, 1, "", "set_tbl_hide_dataframe_shape"], [21, 1, 1, "", "set_tbl_hide_dtype_separator"], [22, 1, 1, "", "set_tbl_rows"], [23, 1, 1, "", "set_tbl_width_chars"], [24, 1, 1, "", "set_verbose"], [25, 1, 1, "", "state"]], "polars.DataFrame": [[135, 1, 1, "", "__dataframe__"], [136, 1, 1, "", "apply"], [137, 1, 1, "", "bottom_k"], [138, 1, 1, "", "clear"], [139, 1, 1, "", "clone"], [140, 2, 1, "", "columns"], [141, 1, 1, "", "corr"], [142, 1, 1, "", "describe"], [143, 1, 1, "", "drop"], [144, 1, 1, "", "drop_in_place"], [145, 1, 1, "", "drop_nulls"], [146, 2, 1, "", "dtypes"], [147, 1, 1, "", "estimated_size"], [148, 1, 1, "", "explode"], [149, 1, 1, "", "extend"], [150, 1, 1, "", "fill_nan"], [151, 1, 1, "", "fill_null"], [152, 1, 1, "", "filter"], [153, 1, 1, "", "find_idx_by_name"], [154, 1, 1, "", "fold"], [155, 1, 1, "", "frame_equal"], [156, 1, 1, "", "get_column"], [157, 1, 1, "", "get_columns"], [158, 1, 1, "", "glimpse"], [159, 1, 1, "", "groupby"], [160, 1, 1, "", "groupby_dynamic"], [161, 1, 1, "", "groupby_rolling"], [162, 1, 1, "", "hash_rows"], [163, 1, 1, "", "head"], [164, 2, 1, "", "height"], [165, 1, 1, "", "hstack"], [166, 1, 1, "", "insert_at_idx"], [167, 1, 1, "", "interpolate"], [168, 1, 1, "", "is_duplicated"], [169, 1, 1, "", "is_empty"], [170, 1, 1, "", "is_unique"], [171, 1, 1, "", "item"], [172, 1, 1, "", "iter_rows"], [173, 1, 1, "", "iter_slices"], [174, 1, 1, "", "join"], [175, 1, 1, "", "join_asof"], [176, 1, 1, "", "lazy"], [177, 1, 1, "", "limit"], [178, 1, 1, "", "max"], [179, 1, 1, "", "mean"], [180, 1, 1, "", "median"], [181, 1, 1, "", "melt"], [182, 1, 1, "", "merge_sorted"], [183, 1, 1, "", "min"], [184, 1, 1, "", "n_chunks"], [185, 1, 1, "", "n_unique"], [186, 1, 1, "", "null_count"], [187, 1, 1, "", "partition_by"], [188, 1, 1, "", "pipe"], [189, 1, 1, "", "pivot"], [190, 1, 1, "", "product"], [191, 1, 1, "", "quantile"], [192, 1, 1, "", "rechunk"], [193, 1, 1, "", "rename"], [194, 1, 1, "", "replace"], [195, 1, 1, "", "replace_at_idx"], [196, 1, 1, "", "reverse"], [197, 1, 1, "", "row"], [198, 1, 1, "", "rows"], [199, 1, 1, "", "sample"], [200, 2, 1, "", "schema"], [201, 1, 1, "", "select"], [202, 1, 1, "", "set_sorted"], [203, 2, 1, "", "shape"], [204, 1, 1, "", "shift"], [205, 1, 1, "", "shift_and_fill"], [206, 1, 1, "", "shrink_to_fit"], [207, 1, 1, "", "slice"], [208, 1, 1, "", "sort"], [209, 1, 1, "", "std"], [210, 1, 1, "", "sum"], [211, 1, 1, "", "tail"], [212, 1, 1, "", "take_every"], [213, 1, 1, "", "to_arrow"], [214, 1, 1, "", "to_dict"], [215, 1, 1, "", "to_dicts"], [216, 1, 1, "", "to_dummies"], [217, 1, 1, "", "to_init_repr"], [218, 1, 1, "", "to_numpy"], [219, 1, 1, "", "to_pandas"], [220, 1, 1, "", "to_series"], [221, 1, 1, "", "to_struct"], [222, 1, 1, "", "top_k"], [223, 1, 1, "", "transpose"], [224, 1, 1, "", "unique"], [225, 1, 1, "", "unnest"], [226, 1, 1, "", "unstack"], [227, 1, 1, "", "update"], [228, 1, 1, "", "upsample"], [229, 1, 1, "", "var"], [230, 1, 1, "", "vstack"], [231, 2, 1, "", "width"], [232, 1, 1, "", "with_columns"], [233, 1, 1, "", "with_row_count"], [26, 1, 1, "", "write_avro"], [27, 1, 1, "", "write_csv"], [28, 1, 1, "", "write_database"], [29, 1, 1, "", "write_delta"], [30, 1, 1, "", "write_excel"], [31, 1, 1, "", "write_ipc"], [32, 1, 1, "", "write_json"], [33, 1, 1, "", "write_ndjson"], [34, 1, 1, "", "write_parquet"]], "polars.DataType": [[35, 1, 1, "", "__init__"]], "polars.Date": [[36, 1, 1, "", "__init__"]], "polars.Datetime": [[37, 1, 1, "", "__init__"]], "polars.Decimal": [[38, 1, 1, "", "__init__"]], "polars.Duration": [[39, 1, 1, "", "__init__"]], "polars.Expr": [[261, 1, 1, "", "abs"], [262, 1, 1, "", "add"], [263, 1, 1, "", "agg_groups"], [264, 1, 1, "", "alias"], [265, 1, 1, "", "all"], [266, 1, 1, "", "and_"], [267, 1, 1, "", "any"], [268, 1, 1, "", "append"], [269, 1, 1, "", "apply"], [270, 1, 1, "", "approx_unique"], [271, 1, 1, "", "arccos"], [272, 1, 1, "", "arccosh"], [273, 1, 1, "", "arcsin"], [274, 1, 1, "", "arcsinh"], [275, 1, 1, "", "arctan"], [276, 1, 1, "", "arctanh"], [277, 1, 1, "", "arg_max"], [278, 1, 1, "", "arg_min"], [279, 1, 1, "", "arg_sort"], [280, 1, 1, "", "arg_true"], [281, 1, 1, "", "arg_unique"], [308, 1, 1, "", "backward_fill"], [314, 1, 1, "", "bottom_k"], [315, 1, 1, "", "cache"], [316, 1, 1, "", "cast"], [318, 1, 1, "", "ceil"], [319, 1, 1, "", "clip"], [320, 1, 1, "", "clip_max"], [321, 1, 1, "", "clip_min"], [322, 1, 1, "", "cos"], [323, 1, 1, "", "cosh"], [324, 1, 1, "", "count"], [325, 1, 1, "", "cumcount"], [326, 1, 1, "", "cummax"], [327, 1, 1, "", "cummin"], [328, 1, 1, "", "cumprod"], [329, 1, 1, "", "cumsum"], [330, 1, 1, "", "cumulative_eval"], [331, 1, 1, "", "diff"], [332, 1, 1, "", "dot"], [333, 1, 1, "", "drop_nans"], [334, 1, 1, "", "drop_nulls"], [374, 1, 1, "", "entropy"], [375, 1, 1, "", "eq"], [376, 1, 1, "", "ewm_mean"], [377, 1, 1, "", "ewm_std"], [378, 1, 1, "", "ewm_var"], [379, 1, 1, "", "exclude"], [380, 1, 1, "", "exp"], [381, 1, 1, "", "explode"], [382, 1, 1, "", "extend_constant"], [383, 1, 1, "", "fill_nan"], [384, 1, 1, "", "fill_null"], [385, 1, 1, "", "filter"], [386, 1, 1, "", "first"], [387, 1, 1, "", "flatten"], [388, 1, 1, "", "floor"], [389, 1, 1, "", "floordiv"], [390, 1, 1, "", "forward_fill"], [391, 1, 1, "", "ge"], [392, 1, 1, "", "gt"], [393, 1, 1, "", "hash"], [394, 1, 1, "", "head"], [395, 1, 1, "", "implode"], [396, 1, 1, "", "inspect"], [397, 1, 1, "", "interpolate"], [398, 1, 1, "", "is_between"], [399, 1, 1, "", "is_duplicated"], [400, 1, 1, "", "is_finite"], [401, 1, 1, "", "is_first"], [402, 1, 1, "", "is_in"], [403, 1, 1, "", "is_infinite"], [404, 1, 1, "", "is_nan"], [405, 1, 1, "", "is_not"], [406, 1, 1, "", "is_not_nan"], [407, 1, 1, "", "is_not_null"], [408, 1, 1, "", "is_null"], [409, 1, 1, "", "is_unique"], [410, 1, 1, "", "keep_name"], [411, 1, 1, "", "kurtosis"], [412, 1, 1, "", "last"], [413, 1, 1, "", "le"], [414, 1, 1, "", "len"], [415, 1, 1, "", "limit"], [416, 1, 1, "", "log"], [417, 1, 1, "", "log10"], [418, 1, 1, "", "log1p"], [419, 1, 1, "", "lower_bound"], [420, 1, 1, "", "lt"], [421, 1, 1, "", "map"], [422, 1, 1, "", "map_alias"], [423, 1, 1, "", "map_dict"], [424, 1, 1, "", "max"], [425, 1, 1, "", "mean"], [426, 1, 1, "", "median"], [435, 1, 1, "", "min"], [436, 1, 1, "", "mod"], [437, 1, 1, "", "mode"], [438, 1, 1, "", "mul"], [439, 1, 1, "", "n_unique"], [440, 1, 1, "", "nan_max"], [441, 1, 1, "", "nan_min"], [442, 1, 1, "", "ne"], [443, 1, 1, "", "null_count"], [444, 1, 1, "", "or_"], [445, 1, 1, "", "over"], [446, 1, 1, "", "pct_change"], [447, 1, 1, "", "pipe"], [448, 1, 1, "", "pow"], [449, 1, 1, "", "prefix"], [450, 1, 1, "", "product"], [451, 1, 1, "", "quantile"], [452, 1, 1, "", "rank"], [453, 1, 1, "", "rechunk"], [454, 1, 1, "", "reinterpret"], [455, 1, 1, "", "repeat_by"], [456, 1, 1, "", "reshape"], [457, 1, 1, "", "reverse"], [458, 1, 1, "", "rolling_apply"], [459, 1, 1, "", "rolling_max"], [460, 1, 1, "", "rolling_mean"], [461, 1, 1, "", "rolling_median"], [462, 1, 1, "", "rolling_min"], [463, 1, 1, "", "rolling_quantile"], [464, 1, 1, "", "rolling_skew"], [465, 1, 1, "", "rolling_std"], [466, 1, 1, "", "rolling_sum"], [467, 1, 1, "", "rolling_var"], [468, 1, 1, "", "round"], [469, 1, 1, "", "sample"], [470, 1, 1, "", "search_sorted"], [471, 1, 1, "", "set_sorted"], [472, 1, 1, "", "shift"], [473, 1, 1, "", "shift_and_fill"], [474, 1, 1, "", "shrink_dtype"], [475, 1, 1, "", "shuffle"], [476, 1, 1, "", "sign"], [477, 1, 1, "", "sin"], [478, 1, 1, "", "sinh"], [479, 1, 1, "", "skew"], [480, 1, 1, "", "slice"], [481, 1, 1, "", "sort"], [482, 1, 1, "", "sort_by"], [483, 1, 1, "", "sqrt"], [484, 1, 1, "", "std"], [520, 1, 1, "", "sub"], [521, 1, 1, "", "suffix"], [522, 1, 1, "", "sum"], [523, 1, 1, "", "tail"], [524, 1, 1, "", "take"], [525, 1, 1, "", "take_every"], [526, 1, 1, "", "tan"], [527, 1, 1, "", "tanh"], [528, 1, 1, "", "to_physical"], [529, 1, 1, "", "top_k"], [530, 1, 1, "", "truediv"], [531, 1, 1, "", "unique"], [532, 1, 1, "", "unique_counts"], [533, 1, 1, "", "upper_bound"], [534, 1, 1, "", "value_counts"], [535, 1, 1, "", "var"], [536, 1, 1, "", "where"], [537, 1, 1, "", "xor"]], "polars.Expr.arr": [[282, 1, 1, "", "arg_max"], [283, 1, 1, "", "arg_min"], [284, 1, 1, "", "concat"], [285, 1, 1, "", "contains"], [286, 1, 1, "", "count_match"], [287, 1, 1, "", "diff"], [288, 1, 1, "", "eval"], [289, 1, 1, "", "explode"], [290, 1, 1, "", "first"], [291, 1, 1, "", "get"], [292, 1, 1, "", "head"], [293, 1, 1, "", "join"], [294, 1, 1, "", "last"], [295, 1, 1, "", "lengths"], [296, 1, 1, "", "max"], [297, 1, 1, "", "mean"], [298, 1, 1, "", "min"], [299, 1, 1, "", "reverse"], [300, 1, 1, "", "shift"], [301, 1, 1, "", "slice"], [302, 1, 1, "", "sort"], [303, 1, 1, "", "sum"], [304, 1, 1, "", "tail"], [305, 1, 1, "", "take"], [306, 1, 1, "", "to_struct"], [307, 1, 1, "", "unique"]], "polars.Expr.bin": [[309, 1, 1, "", "contains"], [310, 1, 1, "", "decode"], [311, 1, 1, "", "encode"], [312, 1, 1, "", "ends_with"], [313, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[317, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[335, 1, 1, "", "cast_time_unit"], [336, 1, 1, "", "combine"], [337, 1, 1, "", "convert_time_zone"], [338, 1, 1, "", "date"], [339, 1, 1, "", "datetime"], [340, 1, 1, "", "day"], [341, 1, 1, "", "days"], [342, 1, 1, "", "epoch"], [343, 1, 1, "", "hour"], [344, 1, 1, "", "hours"], [345, 1, 1, "", "is_leap_year"], [346, 1, 1, "", "iso_year"], [347, 1, 1, "", "microsecond"], [348, 1, 1, "", "microseconds"], [349, 1, 1, "", "millisecond"], [350, 1, 1, "", "milliseconds"], [351, 1, 1, "", "minute"], [352, 1, 1, "", "minutes"], [353, 1, 1, "", "month"], [354, 1, 1, "", "month_end"], [355, 1, 1, "", "month_start"], [356, 1, 1, "", "nanosecond"], [357, 1, 1, "", "nanoseconds"], [358, 1, 1, "", "offset_by"], [359, 1, 1, "", "ordinal_day"], [360, 1, 1, "", "quarter"], [361, 1, 1, "", "replace_time_zone"], [362, 1, 1, "", "round"], [363, 1, 1, "", "second"], [364, 1, 1, "", "seconds"], [365, 1, 1, "", "strftime"], [366, 1, 1, "", "time"], [367, 1, 1, "", "timestamp"], [368, 1, 1, "", "to_string"], [369, 1, 1, "", "truncate"], [370, 1, 1, "", "week"], [371, 1, 1, "", "weekday"], [372, 1, 1, "", "with_time_unit"], [373, 1, 1, "", "year"]], "polars.Expr.meta": [[427, 1, 1, "", "eq"], [428, 1, 1, "", "has_multiple_outputs"], [429, 1, 1, "", "is_regex_projection"], [430, 1, 1, "", "ne"], [431, 1, 1, "", "output_name"], [432, 1, 1, "", "pop"], [433, 1, 1, "", "root_names"], [434, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[485, 1, 1, "", "concat"], [486, 1, 1, "", "contains"], [487, 1, 1, "", "count_match"], [488, 1, 1, "", "decode"], [489, 1, 1, "", "encode"], [490, 1, 1, "", "ends_with"], [491, 1, 1, "", "explode"], [492, 1, 1, "", "extract"], [493, 1, 1, "", "extract_all"], [494, 1, 1, "", "json_extract"], [495, 1, 1, "", "json_path_match"], [496, 1, 1, "", "lengths"], [497, 1, 1, "", "ljust"], [498, 1, 1, "", "lstrip"], [499, 1, 1, "", "n_chars"], [500, 1, 1, "", "parse_int"], [501, 1, 1, "", "replace"], [502, 1, 1, "", "replace_all"], [503, 1, 1, "", "rjust"], [504, 1, 1, "", "rstrip"], [505, 1, 1, "", "slice"], [506, 1, 1, "", "split"], [507, 1, 1, "", "split_exact"], [508, 1, 1, "", "splitn"], [509, 1, 1, "", "starts_with"], [510, 1, 1, "", "strip"], [511, 1, 1, "", "strptime"], [512, 1, 1, "", "to_date"], [513, 1, 1, "", "to_datetime"], [514, 1, 1, "", "to_lowercase"], [515, 1, 1, "", "to_time"], [516, 1, 1, "", "to_uppercase"], [517, 1, 1, "", "zfill"]], "polars.Expr.struct": [[518, 1, 1, "", "field"], [519, 1, 1, "", "rename_fields"]], "polars.Float32": [[40, 1, 1, "", "__init__"]], "polars.Float64": [[41, 1, 1, "", "__init__"]], "polars.Int16": [[42, 1, 1, "", "__init__"]], "polars.Int32": [[43, 1, 1, "", "__init__"]], "polars.Int64": [[44, 1, 1, "", "__init__"]], "polars.Int8": [[45, 1, 1, "", "__init__"]], "polars.LazyFrame": [[609, 1, 1, "", "bottom_k"], [610, 1, 1, "", "cache"], [611, 1, 1, "", "clear"], [612, 1, 1, "", "clone"], [613, 1, 1, "", "collect"], [614, 2, 1, "", "columns"], [615, 1, 1, "", "drop"], [616, 1, 1, "", "drop_nulls"], [617, 2, 1, "", "dtypes"], [618, 1, 1, "", "explain"], [619, 1, 1, "", "explode"], [620, 1, 1, "", "fetch"], [621, 1, 1, "", "fill_nan"], [622, 1, 1, "", "fill_null"], [623, 1, 1, "", "filter"], [624, 1, 1, "", "first"], [625, 1, 1, "", "from_json"], [626, 1, 1, "", "groupby"], [627, 1, 1, "", "groupby_dynamic"], [628, 1, 1, "", "groupby_rolling"], [629, 1, 1, "", "head"], [630, 1, 1, "", "inspect"], [631, 1, 1, "", "interpolate"], [632, 1, 1, "", "join"], [633, 1, 1, "", "join_asof"], [634, 1, 1, "", "last"], [635, 1, 1, "", "lazy"], [636, 1, 1, "", "limit"], [637, 1, 1, "", "map"], [638, 1, 1, "", "max"], [639, 1, 1, "", "mean"], [640, 1, 1, "", "median"], [641, 1, 1, "", "melt"], [642, 1, 1, "", "merge_sorted"], [643, 1, 1, "", "min"], [644, 1, 1, "", "null_count"], [645, 1, 1, "", "pipe"], [646, 1, 1, "", "profile"], [647, 1, 1, "", "quantile"], [648, 1, 1, "", "read_json"], [649, 1, 1, "", "rename"], [650, 1, 1, "", "reverse"], [651, 2, 1, "", "schema"], [652, 1, 1, "", "select"], [653, 1, 1, "", "set_sorted"], [654, 1, 1, "", "shift"], [655, 1, 1, "", "shift_and_fill"], [656, 1, 1, "", "show_graph"], [657, 1, 1, "", "sink_ipc"], [658, 1, 1, "", "sink_parquet"], [659, 1, 1, "", "slice"], [660, 1, 1, "", "sort"], [661, 1, 1, "", "std"], [662, 1, 1, "", "sum"], [663, 1, 1, "", "tail"], [664, 1, 1, "", "take_every"], [665, 1, 1, "", "top_k"], [666, 1, 1, "", "unique"], [667, 1, 1, "", "unnest"], [668, 1, 1, "", "update"], [669, 1, 1, "", "var"], [670, 2, 1, "", "width"], [671, 1, 1, "", "with_columns"], [672, 1, 1, "", "with_context"], [673, 1, 1, "", "with_row_count"], [674, 1, 1, "", "write_json"]], "polars.List": [[46, 1, 1, "", "__init__"]], "polars.Null": [[47, 1, 1, "", "__init__"]], "polars.Object": [[48, 1, 1, "", "__init__"]], "polars.SQLContext": [[995, 1, 1, "", "__enter__"], [995, 1, 1, "", "__exit__"], [995, 1, 1, "", "__init__"], [49, 1, 1, "", "execute"], [50, 1, 1, "", "register"], [51, 1, 1, "", "register_globals"], [52, 1, 1, "", "register_many"], [53, 1, 1, "", "tables"], [54, 1, 1, "", "unregister"]], "polars.Series": [[697, 1, 1, "", "abs"], [698, 1, 1, "", "alias"], [699, 1, 1, "", "all"], [700, 1, 1, "", "any"], [701, 1, 1, "", "append"], [702, 1, 1, "", "apply"], [703, 1, 1, "", "arccos"], [704, 1, 1, "", "arccosh"], [705, 1, 1, "", "arcsin"], [706, 1, 1, "", "arcsinh"], [707, 1, 1, "", "arctan"], [708, 1, 1, "", "arctanh"], [709, 1, 1, "", "arg_max"], [710, 1, 1, "", "arg_min"], [711, 1, 1, "", "arg_sort"], [712, 1, 1, "", "arg_true"], [713, 1, 1, "", "arg_unique"], [714, 3, 1, "", "arr"], [746, 1, 1, "", "bottom_k"], [747, 1, 1, "", "cast"], [748, 3, 1, "", "cat"], [750, 1, 1, "", "ceil"], [751, 1, 1, "", "chunk_lengths"], [752, 1, 1, "", "clear"], [753, 1, 1, "", "clip"], [754, 1, 1, "", "clip_max"], [755, 1, 1, "", "clip_min"], [756, 1, 1, "", "clone"], [757, 1, 1, "", "cos"], [758, 1, 1, "", "cosh"], [759, 1, 1, "", "cummax"], [760, 1, 1, "", "cummin"], [761, 1, 1, "", "cumprod"], [762, 1, 1, "", "cumsum"], [763, 1, 1, "", "cumulative_eval"], [764, 1, 1, "", "cut"], [765, 1, 1, "", "describe"], [766, 1, 1, "", "diff"], [767, 1, 1, "", "dot"], [768, 1, 1, "", "drop_nans"], [769, 1, 1, "", "drop_nulls"], [770, 3, 1, "", "dt"], [814, 3, 1, "", "dtype"], [815, 1, 1, "", "entropy"], [816, 1, 1, "", "estimated_size"], [817, 1, 1, "", "ewm_mean"], [818, 1, 1, "", "ewm_std"], [819, 1, 1, "", "ewm_var"], [820, 1, 1, "", "exp"], [821, 1, 1, "", "explode"], [822, 1, 1, "", "extend_constant"], [823, 1, 1, "", "fill_nan"], [824, 1, 1, "", "fill_null"], [825, 1, 1, "", "filter"], [826, 3, 1, "", "flags"], [827, 1, 1, "", "floor"], [828, 1, 1, "", "get_chunks"], [829, 1, 1, "", "has_validity"], [830, 1, 1, "", "hash"], [831, 1, 1, "", "head"], [832, 1, 1, "", "hist"], [833, 1, 1, "", "implode"], [834, 3, 1, "", "inner_dtype"], [835, 1, 1, "", "interpolate"], [836, 1, 1, "", "is_between"], [837, 1, 1, "", "is_boolean"], [838, 1, 1, "", "is_duplicated"], [839, 1, 1, "", "is_empty"], [840, 1, 1, "", "is_finite"], [841, 1, 1, "", "is_first"], [842, 1, 1, "", "is_float"], [843, 1, 1, "", "is_in"], [844, 1, 1, "", "is_infinite"], [845, 1, 1, "", "is_integer"], [846, 1, 1, "", "is_nan"], [847, 1, 1, "", "is_not_nan"], [848, 1, 1, "", "is_not_null"], [849, 1, 1, "", "is_null"], [850, 1, 1, "", "is_numeric"], [851, 1, 1, "", "is_sorted"], [852, 1, 1, "", "is_temporal"], [853, 1, 1, "", "is_unique"], [854, 1, 1, "", "is_utf8"], [855, 1, 1, "", "item"], [856, 1, 1, "", "kurtosis"], [857, 1, 1, "", "len"], [858, 1, 1, "", "limit"], [859, 1, 1, "", "log"], [860, 1, 1, "", "log10"], [861, 1, 1, "", "log1p"], [862, 1, 1, "", "lower_bound"], [863, 1, 1, "", "map_dict"], [864, 1, 1, "", "max"], [865, 1, 1, "", "mean"], [866, 1, 1, "", "median"], [867, 1, 1, "", "min"], [868, 1, 1, "", "mode"], [869, 1, 1, "", "n_chunks"], [870, 1, 1, "", "n_unique"], [871, 3, 1, "", "name"], [872, 1, 1, "", "nan_max"], [873, 1, 1, "", "nan_min"], [874, 1, 1, "", "new_from_index"], [875, 1, 1, "", "null_count"], [876, 1, 1, "", "pct_change"], [877, 1, 1, "", "peak_max"], [878, 1, 1, "", "peak_min"], [879, 1, 1, "", "product"], [880, 1, 1, "", "qcut"], [881, 1, 1, "", "quantile"], [882, 1, 1, "", "rank"], [883, 1, 1, "", "rechunk"], [884, 1, 1, "", "reinterpret"], [885, 1, 1, "", "rename"], [886, 1, 1, "", "reshape"], [887, 1, 1, "", "reverse"], [888, 1, 1, "", "rolling_apply"], [889, 1, 1, "", "rolling_max"], [890, 1, 1, "", "rolling_mean"], [891, 1, 1, "", "rolling_median"], [892, 1, 1, "", "rolling_min"], [893, 1, 1, "", "rolling_quantile"], [894, 1, 1, "", "rolling_skew"], [895, 1, 1, "", "rolling_std"], [896, 1, 1, "", "rolling_sum"], [897, 1, 1, "", "rolling_var"], [898, 1, 1, "", "round"], [899, 1, 1, "", "sample"], [900, 1, 1, "", "search_sorted"], [901, 1, 1, "", "series_equal"], [902, 1, 1, "", "set"], [903, 1, 1, "", "set_at_idx"], [904, 1, 1, "", "set_sorted"], [905, 3, 1, "", "shape"], [906, 1, 1, "", "shift"], [907, 1, 1, "", "shift_and_fill"], [908, 1, 1, "", "shrink_dtype"], [909, 1, 1, "", "shrink_to_fit"], [910, 1, 1, "", "shuffle"], [911, 1, 1, "", "sign"], [912, 1, 1, "", "sin"], [913, 1, 1, "", "sinh"], [914, 1, 1, "", "skew"], [915, 1, 1, "", "slice"], [916, 1, 1, "", "sort"], [917, 1, 1, "", "sqrt"], [918, 1, 1, "", "std"], [919, 3, 1, "", "str"], [958, 1, 1, "", "sum"], [959, 1, 1, "", "tail"], [960, 1, 1, "", "take"], [961, 1, 1, "", "take_every"], [962, 1, 1, "", "tan"], [963, 1, 1, "", "tanh"], [964, 3, 1, "", "time_unit"], [965, 1, 1, "", "to_arrow"], [966, 1, 1, "", "to_dummies"], [967, 1, 1, "", "to_frame"], [968, 1, 1, "", "to_init_repr"], [969, 1, 1, "", "to_list"], [970, 1, 1, "", "to_numpy"], [971, 1, 1, "", "to_pandas"], [972, 1, 1, "", "to_physical"], [973, 1, 1, "", "top_k"], [974, 1, 1, "", "unique"], [975, 1, 1, "", "unique_counts"], [976, 1, 1, "", "upper_bound"], [977, 1, 1, "", "value_counts"], [978, 1, 1, "", "var"], [979, 1, 1, "", "view"], [980, 1, 1, "", "zip_with"]], "polars.Series.arr": [[715, 1, 1, "", "arg_max"], [716, 1, 1, "", "arg_min"], [717, 1, 1, "", "concat"], [718, 1, 1, "", "contains"], [719, 1, 1, "", "count_match"], [720, 1, 1, "", "diff"], [721, 1, 1, "", "eval"], [722, 1, 1, "", "explode"], [723, 1, 1, "", "first"], [724, 1, 1, "", "get"], [725, 1, 1, "", "head"], [726, 1, 1, "", "join"], [727, 1, 1, "", "last"], [728, 1, 1, "", "lengths"], [729, 1, 1, "", "max"], [730, 1, 1, "", "mean"], [731, 1, 1, "", "min"], [732, 1, 1, "", "reverse"], [733, 1, 1, "", "shift"], [734, 1, 1, "", "slice"], [735, 1, 1, "", "sort"], [736, 1, 1, "", "sum"], [737, 1, 1, "", "tail"], [738, 1, 1, "", "take"], [739, 1, 1, "", "to_struct"], [740, 1, 1, "", "unique"]], "polars.Series.bin": [[741, 1, 1, "", "contains"], [742, 1, 1, "", "decode"], [743, 1, 1, "", "encode"], [744, 1, 1, "", "ends_with"], [745, 1, 1, "", "starts_with"]], "polars.Series.cat": [[749, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[771, 1, 1, "", "cast_time_unit"], [772, 1, 1, "", "combine"], [773, 1, 1, "", "convert_time_zone"], [774, 1, 1, "", "date"], [775, 1, 1, "", "datetime"], [776, 1, 1, "", "day"], [777, 1, 1, "", "days"], [778, 1, 1, "", "epoch"], [779, 1, 1, "", "hour"], [780, 1, 1, "", "hours"], [781, 1, 1, "", "is_leap_year"], [782, 1, 1, "", "iso_year"], [783, 1, 1, "", "max"], [784, 1, 1, "", "mean"], [785, 1, 1, "", "median"], [786, 1, 1, "", "microsecond"], [787, 1, 1, "", "microseconds"], [788, 1, 1, "", "millisecond"], [789, 1, 1, "", "milliseconds"], [790, 1, 1, "", "min"], [791, 1, 1, "", "minute"], [792, 1, 1, "", "minutes"], [793, 1, 1, "", "month"], [794, 1, 1, "", "month_end"], [795, 1, 1, "", "month_start"], [796, 1, 1, "", "nanosecond"], [797, 1, 1, "", "nanoseconds"], [798, 1, 1, "", "offset_by"], [799, 1, 1, "", "ordinal_day"], [800, 1, 1, "", "quarter"], [801, 1, 1, "", "replace_time_zone"], [802, 1, 1, "", "round"], [803, 1, 1, "", "second"], [804, 1, 1, "", "seconds"], [805, 1, 1, "", "strftime"], [806, 1, 1, "", "time"], [807, 1, 1, "", "timestamp"], [808, 1, 1, "", "to_string"], [809, 1, 1, "", "truncate"], [810, 1, 1, "", "week"], [811, 1, 1, "", "weekday"], [812, 1, 1, "", "with_time_unit"], [813, 1, 1, "", "year"]], "polars.Series.str": [[920, 1, 1, "", "concat"], [921, 1, 1, "", "contains"], [922, 1, 1, "", "count_match"], [923, 1, 1, "", "decode"], [924, 1, 1, "", "encode"], [925, 1, 1, "", "ends_with"], [926, 1, 1, "", "explode"], [927, 1, 1, "", "extract"], [928, 1, 1, "", "extract_all"], [929, 1, 1, "", "json_extract"], [930, 1, 1, "", "json_path_match"], [931, 1, 1, "", "lengths"], [932, 1, 1, "", "ljust"], [933, 1, 1, "", "lstrip"], [934, 1, 1, "", "n_chars"], [935, 1, 1, "", "parse_int"], [936, 1, 1, "", "replace"], [937, 1, 1, "", "replace_all"], [938, 1, 1, "", "rjust"], [939, 1, 1, "", "rstrip"], [940, 1, 1, "", "slice"], [941, 1, 1, "", "split"], [942, 1, 1, "", "split_exact"], [943, 1, 1, "", "splitn"], [944, 1, 1, "", "starts_with"], [945, 1, 1, "", "strip"], [946, 1, 1, "", "strptime"], [947, 1, 1, "", "to_date"], [948, 1, 1, "", "to_datetime"], [949, 1, 1, "", "to_lowercase"], [950, 1, 1, "", "to_time"], [951, 1, 1, "", "to_uppercase"], [952, 1, 1, "", "zfill"]], "polars.Series.struct": [[953, 1, 1, "", "field"], [954, 3, 1, "", "fields"], [955, 1, 1, "", "rename_fields"], [956, 3, 1, "", "schema"], [957, 1, 1, "", "unnest"]], "polars.StringCache": [[55, 1, 1, "", "__init__"]], "polars.Struct": [[56, 1, 1, "", "__init__"]], "polars.Time": [[57, 1, 1, "", "__init__"]], "polars.UInt16": [[58, 1, 1, "", "__init__"]], "polars.UInt32": [[59, 1, 1, "", "__init__"]], "polars.UInt64": [[60, 1, 1, "", "__init__"]], "polars.UInt8": [[61, 1, 1, "", "__init__"]], "polars.Unknown": [[62, 1, 1, "", "__init__"]], "polars.Utf8": [[63, 1, 1, "", "__init__"]], "polars.api": [[65, 4, 1, "", "register_dataframe_namespace"], [66, 4, 1, "", "register_expr_namespace"], [67, 4, 1, "", "register_lazyframe_namespace"], [68, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[234, 1, 1, "", "__iter__"], [235, 1, 1, "", "agg"], [236, 1, 1, "", "all"], [237, 1, 1, "", "apply"], [238, 1, 1, "", "count"], [239, 1, 1, "", "first"], [240, 1, 1, "", "head"], [241, 1, 1, "", "last"], [242, 1, 1, "", "max"], [243, 1, 1, "", "mean"], [244, 1, 1, "", "median"], [245, 1, 1, "", "min"], [246, 1, 1, "", "n_unique"], [247, 1, 1, "", "quantile"], [248, 1, 1, "", "sum"], [249, 1, 1, "", "tail"]], "polars.exceptions": [[76, 5, 1, "", "ArrowError"], [77, 5, 1, "", "ColumnNotFoundError"], [78, 5, 1, "", "ComputeError"], [79, 5, 1, "", "DuplicateError"], [80, 5, 1, "", "InvalidOperationError"], [81, 5, 1, "", "NoDataError"], [82, 5, 1, "", "NoRowsReturnedError"], [83, 5, 1, "", "PolarsPanicError"], [84, 5, 1, "", "RowsError"], [85, 5, 1, "", "SchemaError"], [86, 5, 1, "", "SchemaFieldNotFoundError"], [87, 5, 1, "", "ShapeError"], [88, 5, 1, "", "StructFieldNotFoundError"], [89, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[100, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[675, 1, 1, "", "agg"], [676, 1, 1, "", "all"], [677, 1, 1, "", "apply"], [678, 1, 1, "", "count"], [679, 1, 1, "", "first"], [680, 1, 1, "", "head"], [681, 1, 1, "", "last"], [682, 1, 1, "", "max"], [683, 1, 1, "", "mean"], [684, 1, 1, "", "median"], [685, 1, 1, "", "min"], [686, 1, 1, "", "n_unique"], [687, 1, 1, "", "quantile"], [688, 1, 1, "", "sum"], [689, 1, 1, "", "tail"]], "polars.testing": [[121, 4, 1, "", "assert_frame_equal"], [122, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[123, 0, 1, "", "column"], [124, 4, 1, "", "columns"], [125, 4, 1, "", "create_list_strategy"], [126, 4, 1, "", "dataframes"], [127, 4, 1, "", "load_profile"], [128, 4, 1, "", "series"], [129, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[123, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 149], "api": [1, 65, 66, 67, 68, 606], "provid": 1, "new": 1, "function": [1, 594, 605], "avail": 1, "registr": 1, "exampl": [1, 996], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 996], "binari": [2, 589, 600, 982], "boolean": [3, 590, 983], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 133], "activate_decim": 5, "load": [6, 133], "restore_default": 7, "save": [8, 133], "set_ascii_t": 9, "set_fmt_float": 10, "set_fmt_str_length": 11, "set_streaming_chunk_s": 12, "set_tbl_cell_align": 13, "set_tbl_col": 14, "set_tbl_column_data_type_inlin": 15, "set_tbl_dataframe_shape_below": 16, "set_tbl_format": 17, "set_tbl_hide_column_data_typ": 18, "set_tbl_hide_column_nam": 19, "set_tbl_hide_dataframe_shap": 20, "set_tbl_hide_dtype_separ": 21, "set_tbl_row": 22, "set_tbl_width_char": 23, "set_verbos": 24, "state": [25, 133], "datafram": [26, 27, 28, 29, 30, 31, 32, 33, 34, 126, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255], "write_avro": 26, "write_csv": 27, "write_databas": 28, "write_delta": 29, "write_excel": 30, "write_ipc": 31, "write_json": [32, 674], "write_ndjson": 33, "write_parquet": 34, "datatyp": 35, "date": [36, 338, 555, 774], "datetim": [37, 339, 556, 775], "decim": 38, "durat": [39, 557], "float32": 40, "float64": 41, "int16": 42, "int32": 43, "int64": 44, "int8": 45, "list": [46, 566, 596, 989], "null": 47, "object": 48, "sqlcontext": [49, 50, 51, 52, 53, 54], "execut": 49, "regist": 50, "register_glob": 51, "register_mani": 52, "tabl": 53, "unregist": 54, "stringcach": [55, 605], "struct": [56, 518, 519, 583, 602, 953, 954, 955, 956, 957, 993], "time": [57, 366, 586, 806], "uint16": 58, "uint32": 59, "uint64": 60, "uint8": 61, "unknown": 62, "utf8": 63, "align_fram": 64, "register_dataframe_namespac": 65, "register_expr_namespac": 66, "register_lazyframe_namespac": 67, "register_series_namespac": 68, "arg_wher": 69, "build_info": 70, "collect_al": 71, "concat": [72, 284, 485, 717, 920], "cut": [73, 764], "date_rang": 74, "enable_string_cach": 75, "except": [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 259], "arrowerror": 76, "columnnotfounderror": 77, "computeerror": 78, "duplicateerror": 79, "invalidoperationerror": 80, "nodataerror": 81, "norowsreturnederror": 82, "polarspanicerror": 83, "rowserror": 84, "schemaerror": 85, "schemafieldnotfounderror": 86, "shapeerror": 87, "structfieldnotfounderror": 88, "toomanyrowsreturnederror": 89, "from_arrow": 90, "from_datafram": 91, "from_dict": [92, 93], "from_numpi": 94, "from_panda": 95, "from_record": 96, "from_repr": 97, "get_dummi": 98, "get_index_typ": 99, "io": 100, "csv": [100, 607], "batched_read": 100, "batchedcsvread": [100, 607], "next_batch": 100, "ones": 101, "read_avro": 102, "read_csv": 103, "read_csv_batch": 104, "read_databas": 105, "read_delta": 106, "read_excel": 107, "read_ipc": 108, "read_ipc_schema": 109, "read_json": [110, 648], "read_ndjson": 111, "read_parquet": 112, "read_parquet_schema": 113, "scan_csv": 114, "scan_delta": 115, "scan_ipc": 116, "scan_ndjson": 117, "scan_parquet": 118, "scan_pyarrow_dataset": 119, "show_vers": 120, "test": [121, 122, 123, 124, 125, 126, 127, 128, 129, 996], "assert_frame_equ": 121, "assert_series_equ": 122, "parametr": [123, 124, 125, 126, 127, 128, 129, 996], "column": [123, 124, 140, 592, 614], "create_list_strategi": 125, "load_profil": 127, "seri": [128, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 988], "set_profil": 129, "threadpool_s": 130, "time_rang": 131, "zero": 132, "option": 133, "current": 133, "us": 133, "context": 133, "manag": 133, "aggreg": [134, 260, 608, 696], "__dataframe__": 135, "appli": [136, 237, 269, 540, 677, 702], "bottom_k": [137, 314, 609, 746], "clear": [138, 611, 752], "clone": [139, 612, 756], "corr": [141, 549], "describ": [142, 765], "drop": [143, 615], "drop_in_plac": 144, "drop_nul": [145, 334, 616, 769], "dtype": [146, 617, 814], "estimated_s": [147, 816], "explod": [148, 289, 381, 491, 619, 722, 821, 926], "fill_nan": [150, 383, 621, 823], "fill_nul": [151, 384, 622, 824], "filter": [152, 385, 623, 825], "find_idx_by_nam": 153, "fold": [154, 561], "frame_equ": 155, "get_column": [156, 157], "glimps": 158, "groupbi": [159, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 254, 626, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692], "groupby_dynam": [160, 627], "groupby_rol": [161, 628], "hash_row": 162, "head": [163, 240, 292, 394, 565, 629, 680, 725, 831], "height": 164, "hstack": 165, "insert_at_idx": 166, "interpol": [167, 397, 631, 835], "is_dupl": [168, 399, 838], "is_empti": [169, 839], "is_uniqu": [170, 409, 853], "item": [171, 855], "iter_row": 172, "iter_slic": 173, "join": [174, 293, 632, 726], "join_asof": [175, 633], "lazi": [176, 605, 635], "limit": [177, 415, 636, 858], "max": [178, 242, 296, 424, 569, 638, 682, 729, 783, 864], "mean": [179, 243, 297, 425, 570, 639, 683, 730, 784, 865], "median": [180, 244, 426, 571, 640, 684, 785, 866], "melt": [181, 641], "merge_sort": [182, 642], "min": [183, 245, 298, 435, 572, 643, 685, 731, 790, 867], "n_chunk": [184, 869], "n_uniqu": [185, 246, 439, 573, 686, 870], "null_count": [186, 443, 644, 875], "partition_bi": 187, "pipe": [188, 447, 645], "pivot": 189, "product": [190, 450, 879], "quantil": [191, 247, 451, 575, 647, 687, 881], "rechunk": [192, 453, 883], "renam": [193, 649, 885], "replac": [194, 501, 936], "replace_at_idx": 195, "revers": [196, 299, 457, 650, 732, 887], "row": [197, 198], "sampl": [199, 469, 899], "schema": [200, 651, 956], "select": [201, 257, 580, 599, 652, 695, 991], "set_sort": [202, 471, 653, 904], "shape": [203, 905], "shift": [204, 300, 472, 654, 733, 906], "shift_and_fil": [205, 473, 655, 907], "shrink_to_fit": [206, 909], "slice": [207, 301, 480, 505, 659, 734, 915, 940], "sort": [208, 302, 481, 660, 735, 916], "std": [209, 484, 582, 661, 918], "sum": [210, 248, 303, 522, 584, 662, 688, 736, 958], "tail": [211, 249, 304, 523, 585, 663, 689, 737, 959], "take_everi": [212, 525, 664, 961], "to_arrow": [213, 965], "to_dict": [214, 215], "to_dummi": [216, 966], "to_init_repr": [217, 968], "to_numpi": [218, 970], "to_panda": [219, 971], "to_seri": 220, "to_struct": [221, 306, 739], "top_k": [222, 529, 665, 973], "transpos": 223, "uniqu": [224, 307, 531, 666, 740, 974], "unnest": [225, 667, 957], "unstack": 226, "updat": [227, 668], "upsampl": 228, "var": [229, 535, 587, 669, 978], "vstack": 230, "width": [231, 670], "with_column": [232, 671], "with_row_count": [233, 673], "__iter__": 234, "agg": [235, 675], "all": [236, 265, 538, 676, 699], "count": [238, 324, 550, 678], "first": [239, 290, 386, 560, 624, 679, 723], "last": [241, 294, 412, 634, 681, 727], "attribut": [250, 690, 981], "comput": [251, 593, 985], "descript": [252, 691, 986], "export": [253, 987], "miscellan": [256, 598, 605, 694, 990], "manipul": [257, 599, 695, 991], "data": 258, "type": 258, "numer": [258, 600], "tempor": [258, 603, 994], "nest": 258, "other": 258, "expr": [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537], "ab": [261, 697], "add": 262, "agg_group": 263, "alia": [264, 698], "and_": 266, "ani": [267, 539, 700], "append": [268, 701], "approx_uniqu": [270, 541], "arcco": [271, 703], "arccosh": [272, 704], "arcsin": [273, 705], "arcsinh": [274, 706], "arctan": [275, 707], "arctanh": [276, 708], "arg_max": [277, 282, 709, 715], "arg_min": [278, 283, 710, 716], "arg_sort": [279, 711], "arg_tru": [280, 712], "arg_uniqu": [281, 713], "arr": [282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740], "contain": [285, 309, 486, 718, 741, 921], "count_match": [286, 487, 719, 922], "diff": [287, 331, 720, 766], "eval": [288, 721], "get": [291, 724], "length": [295, 496, 728, 931], "take": [305, 524, 738, 960], "backward_fil": 308, "bin": [309, 310, 311, 312, 313, 741, 742, 743, 744, 745], "decod": [310, 488, 742, 923], "encod": [311, 489, 743, 924], "ends_with": [312, 490, 744, 925], "starts_with": [313, 509, 745, 944], "cach": [315, 610], "cast": [316, 747], "cat": [317, 748, 749], "set_ord": [317, 749], "ceil": [318, 750], "clip": [319, 753], "clip_max": [320, 754], "clip_min": [321, 755], "co": [322, 757], "cosh": [323, 758], "cumcount": 325, "cummax": [326, 759], "cummin": [327, 760], "cumprod": [328, 761], "cumsum": [329, 554, 762], "cumulative_ev": [330, 763], "dot": [332, 767], "drop_nan": [333, 768], "dt": [335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813], "cast_time_unit": [335, 771], "combin": [336, 772], "convert_time_zon": [337, 773], "dai": [340, 341, 776, 777], "epoch": [342, 778], "hour": [343, 344, 779, 780], "is_leap_year": [345, 781], "iso_year": [346, 782], "microsecond": [347, 348, 786, 787], "millisecond": [349, 350, 788, 789], "minut": [351, 352, 791, 792], "month": [353, 793], "month_end": [354, 794], "month_start": [355, 795], "nanosecond": [356, 357, 796, 797], "offset_bi": [358, 798], "ordinal_dai": [359, 799], "quarter": [360, 800], "replace_time_zon": [361, 801], "round": [362, 468, 802, 898], "second": [363, 364, 803, 804], "strftime": [365, 805], "timestamp": [367, 807], "to_str": [368, 808], "truncat": [369, 809], "week": [370, 810], "weekdai": [371, 811], "with_time_unit": [372, 812], "year": [373, 813], "entropi": [374, 815], "eq": [375, 427], "ewm_mean": [376, 817], "ewm_std": [377, 818], "ewm_var": [378, 819], "exclud": [379, 559], "exp": [380, 820], "extend_const": [382, 822], "flatten": 387, "floor": [388, 827], "floordiv": 389, "forward_fil": 390, "ge": 391, "gt": 392, "hash": [393, 830], "implod": [395, 833], "inspect": [396, 630], "is_between": [398, 836], "is_finit": [400, 840], "is_first": [401, 841], "is_in": [402, 843], "is_infinit": [403, 844], "is_nan": [404, 846], "is_not": 405, "is_not_nan": [406, 847], "is_not_nul": [407, 848], "is_nul": [408, 849], "keep_nam": 410, "kurtosi": [411, 856], "le": 413, "len": [414, 857], "log": [416, 859], "log10": [417, 860], "log1p": [418, 861], "lower_bound": [419, 862], "lt": 420, "map": [421, 568, 637], "map_alia": 422, "map_dict": [423, 863], "meta": [427, 428, 429, 430, 431, 432, 433, 434, 597], "has_multiple_output": 428, "is_regex_project": 429, "ne": [430, 442], "output_nam": 431, "pop": 432, "root_nam": 433, "undo_alias": 434, "mod": 436, "mode": [437, 868], "mul": 438, "nan_max": [440, 872], "nan_min": [441, 873], "or_": 444, "over": 445, "pct_chang": [446, 876], "pow": 448, "prefix": 449, "rank": [452, 882], "reinterpret": [454, 884], "repeat_bi": 455, "reshap": [456, 886], "rolling_appli": [458, 888], "rolling_max": [459, 889], "rolling_mean": [460, 890], "rolling_median": [461, 891], "rolling_min": [462, 892], "rolling_quantil": [463, 893], "rolling_skew": [464, 894], "rolling_std": [465, 895], "rolling_sum": [466, 896], "rolling_var": [467, 897], "search_sort": [470, 900], "shrink_dtyp": [474, 908], "shuffl": [475, 910], "sign": [476, 911], "sin": [477, 912], "sinh": [478, 913], "skew": [479, 914], "sort_bi": 482, "sqrt": [483, 917], "str": [485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952], "extract": [492, 927], "extract_al": [493, 928], "json_extract": [494, 929], "json_path_match": [495, 930], "ljust": [497, 932], "lstrip": [498, 933], "n_char": [499, 934], "parse_int": [500, 935], "replace_al": [502, 937], "rjust": [503, 938], "rstrip": [504, 939], "split": [506, 941], "split_exact": [507, 942], "splitn": [508, 943], "strip": [510, 945], "strptime": [511, 946], "to_dat": [512, 947], "to_datetim": [513, 948], "to_lowercas": [514, 949], "to_tim": [515, 950], "to_uppercas": [516, 951], "zfill": [517, 952], "field": [518, 953, 954], "rename_field": [519, 955], "sub": 520, "suffix": 521, "tan": [526, 962], "tanh": [527, 963], "to_phys": [528, 972], "truediv": 530, "unique_count": [532, 975], "upper_bound": [533, 976], "value_count": [534, 977], "where": 536, "xor": 537, "arang": 542, "arg_sort_bi": 543, "avg": 544, "coalesc": 545, "col": 546, "concat_list": 547, "concat_str": 548, "cov": 551, "cumfold": 552, "cumreduc": 553, "element": 558, "format": 562, "from_epoch": 563, "group": 564, "lit": 567, "pearson_corr": 574, "reduc": 576, "repeat": 577, "rolling_corr": 578, "rolling_cov": 579, "spearman_rank_corr": 581, "when": 588, "categori": [591, 984], "name": [592, 871], "express": 595, "oper": 600, "conjunct": 600, "comparison": 600, "string": [601, 992], "window": 604, "convers": 605, "eager": 605, "parallel": 605, "refer": 606, "input": 607, "output": 607, "feather": 607, "ipc": 607, "parquet": 607, "databas": 607, "json": 607, "avro": 607, "excel": 607, "delta": 607, "lake": 607, "dataset": 607, "lazyfram": [609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693], "collect": 613, "explain": 618, "fetch": 620, "from_json": 625, "profil": [646, 996], "show_graph": 656, "sink_ipc": 657, "sink_parquet": 658, "with_context": 672, "lazygroupbi": [675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689], "read": 694, "write": 694, "logic": 694, "plan": 694, "chunk_length": 751, "flag": 826, "get_chunk": 828, "has_valid": 829, "hist": 832, "inner_dtyp": 834, "is_boolean": 837, "is_float": 842, "is_integ": 845, "is_numer": 850, "is_sort": 851, "is_tempor": 852, "is_utf8": 854, "new_from_index": 874, "peak_max": 877, "peak_min": 878, "qcut": 880, "series_equ": 901, "set": 902, "set_at_idx": 903, "time_unit": 964, "to_fram": 967, "to_list": 969, "view": 979, "zip_with": 980, "sql": 995, "method": 995, "assert": 996, "primit": 996, "strategi": 996, "helper": 996, "util": 997}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.from_dict": [[92, "polars-from-dict"]], "polars.build_info": [[70, "polars-build-info"]], "polars.read_csv_batched": [[104, "polars-read-csv-batched"]], "polars.exceptions.ColumnNotFoundError": [[77, "polars-exceptions-columnnotfounderror"]], "polars.DataFrame.clone": [[139, "polars-dataframe-clone"]], "polars.exceptions.PolarsPanicError": [[83, "polars-exceptions-polarspanicerror"]], "polars.scan_csv": [[114, "polars-scan-csv"]], "polars.exceptions.StructFieldNotFoundError": [[88, "polars-exceptions-structfieldnotfounderror"]], "polars.zeros": [[132, "polars-zeros"]], "polars.ones": [[101, "polars-ones"]], "polars.read_parquet": [[112, "polars-read-parquet"]], "polars.from_pandas": [[95, "polars-from-pandas"]], "polars.from_records": [[96, "polars-from-records"]], "polars.testing.parametric.load_profile": [[127, "polars-testing-parametric-load-profile"]], "polars.DataFrame.__dataframe__": [[135, "polars-dataframe-dataframe"]], "polars.exceptions.ShapeError": [[87, "polars-exceptions-shapeerror"]], "polars.testing.assert_frame_equal": [[121, "polars-testing-assert-frame-equal"]], "polars.concat": [[72, "polars-concat"]], "polars.from_dataframe": [[91, "polars-from-dataframe"]], "polars.from_repr": [[97, "polars-from-repr"]], "polars.testing.parametric.column": [[123, "polars-testing-parametric-column"]], "polars.exceptions.TooManyRowsReturnedError": [[89, "polars-exceptions-toomanyrowsreturnederror"]], "polars.testing.parametric.dataframes": [[126, "polars-testing-parametric-dataframes"]], "polars.testing.parametric.series": [[128, "polars-testing-parametric-series"]], "polars.collect_all": [[71, "polars-collect-all"]], "Aggregation": [[134, "aggregation"], [696, "aggregation"], [608, "aggregation"], [260, "aggregation"]], "polars.DataFrame.apply": [[136, "polars-dataframe-apply"]], "polars.exceptions.DuplicateError": [[79, "polars-exceptions-duplicateerror"]], "polars.read_excel": [[107, "polars-read-excel"]], "polars.read_database": [[105, "polars-read-database"]], "polars.from_numpy": [[94, "polars-from-numpy"]], "polars.exceptions.ArrowError": [[76, "polars-exceptions-arrowerror"]], "polars.scan_delta": [[115, "polars-scan-delta"]], "polars.cut": [[73, "polars-cut"]], "polars.read_ndjson": [[111, "polars-read-ndjson"]], "polars.exceptions.NoDataError": [[81, "polars-exceptions-nodataerror"]], "polars.read_csv": [[103, "polars-read-csv"]], "polars.testing.parametric.set_profile": [[129, "polars-testing-parametric-set-profile"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[100, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.get_index_type": [[99, "polars-get-index-type"]], "polars.show_versions": [[120, "polars-show-versions"]], "polars.DataFrame.bottom_k": [[137, "polars-dataframe-bottom-k"]], "polars.exceptions.InvalidOperationError": [[80, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.ComputeError": [[78, "polars-exceptions-computeerror"]], "polars.read_json": [[110, "polars-read-json"]], "polars.exceptions.SchemaFieldNotFoundError": [[86, "polars-exceptions-schemafieldnotfounderror"]], "Config": [[133, "config"]], "Config options": [[133, "config-options"]], "Config load, save, and current state": [[133, "config-load-save-and-current-state"]], "Use as a context manager": [[133, "use-as-a-context-manager"]], "polars.date_range": [[74, "polars-date-range"]], "polars.read_ipc": [[108, "polars-read-ipc"]], "polars.testing.parametric.create_list_strategy": [[125, "polars-testing-parametric-create-list-strategy"]], "polars.scan_ipc": [[116, "polars-scan-ipc"]], "polars.read_ipc_schema": [[109, "polars-read-ipc-schema"]], "polars.testing.parametric.columns": [[124, "polars-testing-parametric-columns"]], "polars.threadpool_size": [[130, "polars-threadpool-size"]], "polars.enable_string_cache": [[75, "polars-enable-string-cache"]], "polars.scan_pyarrow_dataset": [[119, "polars-scan-pyarrow-dataset"]], "polars.exceptions.NoRowsReturnedError": [[82, "polars-exceptions-norowsreturnederror"]], "polars.exceptions.RowsError": [[84, "polars-exceptions-rowserror"]], "polars.from_dicts": [[93, "polars-from-dicts"]], "polars.get_dummies": [[98, "polars-get-dummies"]], "polars.scan_parquet": [[118, "polars-scan-parquet"]], "polars.DataFrame.clear": [[138, "polars-dataframe-clear"]], "polars.read_delta": [[106, "polars-read-delta"]], "polars.from_arrow": [[90, "polars-from-arrow"]], "polars.read_avro": [[102, "polars-read-avro"]], "polars.exceptions.SchemaError": [[85, "polars-exceptions-schemaerror"]], "polars.time_range": [[131, "polars-time-range"]], "polars.read_parquet_schema": [[113, "polars-read-parquet-schema"]], "polars.testing.assert_series_equal": [[122, "polars-testing-assert-series-equal"]], "polars.scan_ndjson": [[117, "polars-scan-ndjson"]], "polars.Config.set_tbl_hide_dtype_separator": [[21, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Struct": [[56, "polars-struct"]], "polars.api.register_expr_namespace": [[66, "polars-api-register-expr-namespace"]], "polars.Config.restore_defaults": [[7, "polars-config-restore-defaults"]], "polars.Date": [[36, "polars-date"]], "polars.Config.save": [[8, "polars-config-save"]], "polars.Int64": [[44, "polars-int64"]], "polars.Int32": [[43, "polars-int32"]], "polars.UInt32": [[59, "polars-uint32"]], "polars.UInt8": [[61, "polars-uint8"]], "polars.Config.state": [[25, "polars-config-state"]], "polars.Config.set_tbl_hide_dataframe_shape": [[20, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.api.register_dataframe_namespace": [[65, "polars-api-register-dataframe-namespace"]], "polars.DataFrame.write_parquet": [[34, "polars-dataframe-write-parquet"]], "polars.UInt16": [[58, "polars-uint16"]], "polars.Utf8": [[63, "polars-utf8"]], "polars.DataFrame.write_delta": [[29, "polars-dataframe-write-delta"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.DataFrame.write_database": [[28, "polars-dataframe-write-database"]], "polars.Int16": [[42, "polars-int16"]], "polars.SQLContext.register_globals": [[51, "polars-sqlcontext-register-globals"]], "polars.DataFrame.write_ndjson": [[33, "polars-dataframe-write-ndjson"]], "polars.Decimal": [[38, "polars-decimal"]], "polars.Config.set_tbl_rows": [[22, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_formatting": [[17, "polars-config-set-tbl-formatting"]], "polars.align_frames": [[64, "polars-align-frames"]], "polars.Config.set_fmt_float": [[10, "polars-config-set-fmt-float"]], "polars.DataFrame.write_ipc": [[31, "polars-dataframe-write-ipc"]], "polars.Binary": [[2, "polars-binary"]], "polars.api.register_series_namespace": [[68, "polars-api-register-series-namespace"]], "polars.Config.set_tbl_cell_alignment": [[13, "polars-config-set-tbl-cell-alignment"]], "polars.SQLContext.register": [[50, "polars-sqlcontext-register"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [996, "examples"]], "polars.Int8": [[45, "polars-int8"]], "polars.DataFrame.write_excel": [[30, "polars-dataframe-write-excel"]], "polars.DataFrame.write_avro": [[26, "polars-dataframe-write-avro"]], "polars.Unknown": [[62, "polars-unknown"]], "polars.SQLContext.tables": [[53, "polars-sqlcontext-tables"]], "polars.Config.set_verbose": [[24, "polars-config-set-verbose"]], "polars.Config.set_fmt_str_lengths": [[11, "polars-config-set-fmt-str-lengths"]], "polars.Duration": [[39, "polars-duration"]], "polars.Float32": [[40, "polars-float32"]], "polars.Datetime": [[37, "polars-datetime"]], "polars.Object": [[48, "polars-object"]], "polars.Config.set_tbl_cols": [[14, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_dataframe_shape_below": [[16, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.load": [[6, "polars-config-load"]], "polars.Config.set_tbl_hide_column_data_types": [[18, "polars-config-set-tbl-hide-column-data-types"]], "polars.api.register_lazyframe_namespace": [[67, "polars-api-register-lazyframe-namespace"]], "polars.SQLContext.unregister": [[54, "polars-sqlcontext-unregister"]], "polars.StringCache": [[55, "polars-stringcache"]], "polars.UInt64": [[60, "polars-uint64"]], "polars.DataType": [[35, "polars-datatype"]], "polars.Config.activate_decimals": [[5, "polars-config-activate-decimals"]], "polars.Config.set_tbl_column_data_type_inline": [[15, "polars-config-set-tbl-column-data-type-inline"]], "polars.DataFrame.write_csv": [[27, "polars-dataframe-write-csv"]], "polars.Float64": [[41, "polars-float64"]], "polars.arg_where": [[69, "polars-arg-where"]], "polars.SQLContext.register_many": [[52, "polars-sqlcontext-register-many"]], "polars.Config.set_streaming_chunk_size": [[12, "polars-config-set-streaming-chunk-size"]], "polars.SQLContext.execute": [[49, "polars-sqlcontext-execute"]], "polars.DataFrame.write_json": [[32, "polars-dataframe-write-json"]], "polars.Null": [[47, "polars-null"]], "polars.Config.set_ascii_tables": [[9, "polars-config-set-ascii-tables"]], "polars.Config.set_tbl_hide_column_names": [[19, "polars-config-set-tbl-hide-column-names"]], "polars.List": [[46, "polars-list"]], "polars.Config.set_tbl_width_chars": [[23, "polars-config-set-tbl-width-chars"]], "polars.Time": [[57, "polars-time"]], "polars.Series.tan": [[962, "polars-series-tan"]], "polars.Series.tanh": [[963, "polars-series-tanh"]], "polars.Series.str.strip": [[945, "polars-series-str-strip"]], "polars.Series.unique_counts": [[975, "polars-series-unique-counts"]], "polars.Series.struct.unnest": [[957, "polars-series-struct-unnest"]], "polars.Series.take": [[960, "polars-series-take"]], "polars.Series.sin": [[912, "polars-series-sin"]], "polars.Series.str.to_lowercase": [[949, "polars-series-str-to-lowercase"]], "polars.Series.struct.field": [[953, "polars-series-struct-field"]], "polars.Series.time_unit": [[964, "polars-series-time-unit"]], "polars.Series.sign": [[911, "polars-series-sign"]], "polars.Series.str.replace_all": [[937, "polars-series-str-replace-all"]], "polars.Series.str.zfill": [[952, "polars-series-str-zfill"]], "polars.Series.str.ljust": [[932, "polars-series-str-ljust"]], "polars.Series.str.n_chars": [[934, "polars-series-str-n-chars"]], "polars.Series.str.replace": [[936, "polars-series-str-replace"]], "polars.Series.str.concat": [[920, "polars-series-str-concat"]], "polars.Series.tail": [[959, "polars-series-tail"]], "polars.Series.str.lengths": [[931, "polars-series-str-lengths"]], "polars.Series.str.encode": [[924, "polars-series-str-encode"]], "polars.Series.value_counts": [[977, "polars-series-value-counts"]], "polars.Series.struct.fields": [[954, "polars-series-struct-fields"]], "polars.Series.str.strptime": [[946, "polars-series-str-strptime"]], "polars.Series.str.splitn": [[943, "polars-series-str-splitn"]], "polars.Series.str.extract": [[927, "polars-series-str-extract"]], "polars.Series.str.decode": [[923, "polars-series-str-decode"]], "polars.Series.upper_bound": [[976, "polars-series-upper-bound"]], "polars.Series.str.parse_int": [[935, "polars-series-str-parse-int"]], "polars.Series.str.json_extract": [[929, "polars-series-str-json-extract"]], "polars.Series.struct.schema": [[956, "polars-series-struct-schema"]], "polars.Series.to_frame": [[967, "polars-series-to-frame"]], "polars.Series.str.to_time": [[950, "polars-series-str-to-time"]], "polars.Series.std": [[918, "polars-series-std"]], "polars.Series.str.to_datetime": [[948, "polars-series-str-to-datetime"]], "polars.Series.to_dummies": [[966, "polars-series-to-dummies"]], "polars.Series.to_numpy": [[970, "polars-series-to-numpy"]], "polars.Series.str.lstrip": [[933, "polars-series-str-lstrip"]], "polars.Series.to_pandas": [[971, "polars-series-to-pandas"]], "polars.Series.shuffle": [[910, "polars-series-shuffle"]], "polars.Series.str.split_exact": [[942, "polars-series-str-split-exact"]], "polars.Series.slice": [[915, "polars-series-slice"]], "polars.Series.str.to_uppercase": [[951, "polars-series-str-to-uppercase"]], "polars.Series.sum": [[958, "polars-series-sum"]], "polars.Series.to_list": [[969, "polars-series-to-list"]], "polars.Series.str": [[919, "polars-series-str"]], "polars.Series.skew": [[914, "polars-series-skew"]], "polars.Series.sort": [[916, "polars-series-sort"]], "polars.Series.str.rstrip": [[939, "polars-series-str-rstrip"]], "polars.Series.struct.rename_fields": [[955, "polars-series-struct-rename-fields"]], "polars.Series.to_init_repr": [[968, "polars-series-to-init-repr"]], "polars.Series.str.json_path_match": [[930, "polars-series-str-json-path-match"]], "polars.Series.unique": [[974, "polars-series-unique"]], "polars.Series.to_physical": [[972, "polars-series-to-physical"]], "polars.Series.str.rjust": [[938, "polars-series-str-rjust"]], "polars.Series.str.count_match": [[922, "polars-series-str-count-match"]], "polars.Series.to_arrow": [[965, "polars-series-to-arrow"]], "polars.Series.str.contains": [[921, "polars-series-str-contains"]], "polars.Series.str.explode": [[926, "polars-series-str-explode"]], "polars.Series.take_every": [[961, "polars-series-take-every"]], "polars.Series.top_k": [[973, "polars-series-top-k"]], "polars.Series.view": [[979, "polars-series-view"]], "polars.Series.var": [[978, "polars-series-var"]], "polars.Series.str.split": [[941, "polars-series-str-split"]], "polars.Series.sqrt": [[917, "polars-series-sqrt"]], "polars.Series.str.extract_all": [[928, "polars-series-str-extract-all"]], "polars.Series.str.ends_with": [[925, "polars-series-str-ends-with"]], "polars.Series.str.starts_with": [[944, "polars-series-str-starts-with"]], "polars.Series.str.to_date": [[947, "polars-series-str-to-date"]], "polars.Series.str.slice": [[940, "polars-series-str-slice"]], "polars.Series.sinh": [[913, "polars-series-sinh"]], "polars.Series.nan_max": [[872, "polars-series-nan-max"]], "polars.Series.shrink_to_fit": [[909, "polars-series-shrink-to-fit"]], "polars.Series.n_unique": [[870, "polars-series-n-unique"]], "polars.Series.round": [[898, "polars-series-round"]], "polars.Series.item": [[855, "polars-series-item"]], "polars.Series.rolling_quantile": [[893, "polars-series-rolling-quantile"]], "polars.Series.max": [[864, "polars-series-max"]], "polars.Series.is_infinite": [[844, "polars-series-is-infinite"]], "polars.Series.n_chunks": [[869, "polars-series-n-chunks"]], "polars.Series.is_not_null": [[848, "polars-series-is-not-null"]], "polars.Series.len": [[857, "polars-series-len"]], "polars.Series.name": [[871, "polars-series-name"]], "polars.Series.rolling_max": [[889, "polars-series-rolling-max"]], "polars.Series.rolling_var": [[897, "polars-series-rolling-var"]], "polars.Series.lower_bound": [[862, "polars-series-lower-bound"]], "polars.Series.qcut": [[880, "polars-series-qcut"]], "polars.Series.quantile": [[881, "polars-series-quantile"]], "polars.Series.rank": [[882, "polars-series-rank"]], "polars.Series.rolling_skew": [[894, "polars-series-rolling-skew"]], "polars.Series.search_sorted": [[900, "polars-series-search-sorted"]], "polars.Series.kurtosis": [[856, "polars-series-kurtosis"]], "polars.Series.nan_min": [[873, "polars-series-nan-min"]], "polars.Series.rename": [[885, "polars-series-rename"]], "polars.Series.set_sorted": [[904, "polars-series-set-sorted"]], "polars.Series.mode": [[868, "polars-series-mode"]], "polars.Series.shape": [[905, "polars-series-shape"]], "polars.Series.log": [[859, "polars-series-log"]], "polars.Series.is_float": [[842, "polars-series-is-float"]], "polars.Series.is_null": [[849, "polars-series-is-null"]], "polars.Series.set": [[902, "polars-series-set"]], "polars.Series.is_finite": [[840, "polars-series-is-finite"]], "polars.Series.shift_and_fill": [[907, "polars-series-shift-and-fill"]], "polars.Series.peak_min": [[878, "polars-series-peak-min"]], "polars.Series.log10": [[860, "polars-series-log10"]], "polars.Series.product": [[879, "polars-series-product"]], "polars.Series.peak_max": [[877, "polars-series-peak-max"]], "polars.Series.rolling_sum": [[896, "polars-series-rolling-sum"]], "polars.Series.shift": [[906, "polars-series-shift"]], "polars.Series.log1p": [[861, "polars-series-log1p"]], "polars.Series.reinterpret": [[884, "polars-series-reinterpret"]], "polars.Series.is_not_nan": [[847, "polars-series-is-not-nan"]], "polars.Series.min": [[867, "polars-series-min"]], "polars.Series.mean": [[865, "polars-series-mean"]], "polars.Series.null_count": [[875, "polars-series-null-count"]], "polars.Series.reshape": [[886, "polars-series-reshape"]], "polars.Series.set_at_idx": [[903, "polars-series-set-at-idx"]], "polars.Series.rolling_min": [[892, "polars-series-rolling-min"]], "polars.Series.limit": [[858, "polars-series-limit"]], "polars.Series.is_utf8": [[854, "polars-series-is-utf8"]], "polars.Series.is_unique": [[853, "polars-series-is-unique"]], "polars.Series.is_integer": [[845, "polars-series-is-integer"]], "polars.Series.sample": [[899, "polars-series-sample"]], "polars.Series.rechunk": [[883, "polars-series-rechunk"]], "polars.Series.median": [[866, "polars-series-median"]], "polars.Series.is_nan": [[846, "polars-series-is-nan"]], "polars.Series.map_dict": [[863, "polars-series-map-dict"]], "polars.Series.rolling_mean": [[890, "polars-series-rolling-mean"]], "polars.Series.reverse": [[887, "polars-series-reverse"]], "polars.Series.rolling_median": [[891, "polars-series-rolling-median"]], "polars.Series.is_temporal": [[852, "polars-series-is-temporal"]], "polars.Series.series_equal": [[901, "polars-series-series-equal"]], "polars.Series.pct_change": [[876, "polars-series-pct-change"]], "polars.Series.is_first": [[841, "polars-series-is-first"]], "polars.Series.is_numeric": [[850, "polars-series-is-numeric"]], "polars.Series.rolling_std": [[895, "polars-series-rolling-std"]], "polars.Series.is_in": [[843, "polars-series-is-in"]], "polars.Series.rolling_apply": [[888, "polars-series-rolling-apply"]], "polars.Series.shrink_dtype": [[908, "polars-series-shrink-dtype"]], "polars.Series.is_sorted": [[851, "polars-series-is-sorted"]], "polars.Series.new_from_index": [[874, "polars-series-new-from-index"]], "polars.Series.dt.quarter": [[800, "polars-series-dt-quarter"]], "polars.Series.dt.hour": [[779, "polars-series-dt-hour"]], "polars.Series.implode": [[833, "polars-series-implode"]], "polars.Series.dt.datetime": [[775, "polars-series-dt-datetime"]], "polars.Series.dt.hours": [[780, "polars-series-dt-hours"]], "polars.Series.dt.with_time_unit": [[812, "polars-series-dt-with-time-unit"]], "polars.Series.filter": [[825, "polars-series-filter"]], "polars.Series.dt.mean": [[784, "polars-series-dt-mean"]], "polars.Series.dt.millisecond": [[788, "polars-series-dt-millisecond"]], "polars.Series.dt.minutes": [[792, "polars-series-dt-minutes"]], "polars.Series.dt.convert_time_zone": [[773, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.cast_time_unit": [[771, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.min": [[790, "polars-series-dt-min"]], "polars.Series.hash": [[830, "polars-series-hash"]], "polars.Series.is_between": [[836, "polars-series-is-between"]], "polars.Series.dt.max": [[783, "polars-series-dt-max"]], "polars.Series.dt.to_string": [[808, "polars-series-dt-to-string"]], "polars.Series.estimated_size": [[816, "polars-series-estimated-size"]], "polars.Series.explode": [[821, "polars-series-explode"]], "polars.Series.dt.microsecond": [[786, "polars-series-dt-microsecond"]], "polars.Series.dt.ordinal_day": [[799, "polars-series-dt-ordinal-day"]], "polars.Series.inner_dtype": [[834, "polars-series-inner-dtype"]], "polars.Series.has_validity": [[829, "polars-series-has-validity"]], "polars.Series.hist": [[832, "polars-series-hist"]], "polars.Series.ewm_mean": [[817, "polars-series-ewm-mean"]], "polars.Series.dt.truncate": [[809, "polars-series-dt-truncate"]], "polars.Series.dt.round": [[802, "polars-series-dt-round"]], "polars.Series.dt.time": [[806, "polars-series-dt-time"]], "polars.Series.dt.month_end": [[794, "polars-series-dt-month-end"]], "polars.Series.dt.timestamp": [[807, "polars-series-dt-timestamp"]], "polars.Series.fill_nan": [[823, "polars-series-fill-nan"]], "polars.Series.floor": [[827, "polars-series-floor"]], "polars.Series.extend_constant": [[822, "polars-series-extend-constant"]], "polars.Series.is_boolean": [[837, "polars-series-is-boolean"]], "polars.Series.dt.month_start": [[795, "polars-series-dt-month-start"]], "polars.Series.dt.strftime": [[805, "polars-series-dt-strftime"]], "polars.Series.dt.month": [[793, "polars-series-dt-month"]], "polars.Series.dt.week": [[810, "polars-series-dt-week"]], "polars.Series.dt.median": [[785, "polars-series-dt-median"]], "polars.Series.flags": [[826, "polars-series-flags"]], "polars.Series.dt.weekday": [[811, "polars-series-dt-weekday"]], "polars.Series.ewm_var": [[819, "polars-series-ewm-var"]], "polars.Series.dt.minute": [[791, "polars-series-dt-minute"]], "polars.Series.ewm_std": [[818, "polars-series-ewm-std"]], "polars.Series.dt.year": [[813, "polars-series-dt-year"]], "polars.Series.dt.nanoseconds": [[797, "polars-series-dt-nanoseconds"]], "polars.Series.dt.second": [[803, "polars-series-dt-second"]], "polars.Series.is_empty": [[839, "polars-series-is-empty"]], "polars.Series.get_chunks": [[828, "polars-series-get-chunks"]], "polars.Series.dt.iso_year": [[782, "polars-series-dt-iso-year"]], "polars.Series.dt.epoch": [[778, "polars-series-dt-epoch"]], "polars.Series.dt.milliseconds": [[789, "polars-series-dt-milliseconds"]], "polars.Series.dt.combine": [[772, "polars-series-dt-combine"]], "polars.Series.dt": [[770, "polars-series-dt"]], "polars.Series.dt.day": [[776, "polars-series-dt-day"]], "polars.Series.dt.offset_by": [[798, "polars-series-dt-offset-by"]], "polars.Series.dt.replace_time_zone": [[801, "polars-series-dt-replace-time-zone"]], "polars.Series.head": [[831, "polars-series-head"]], "polars.Series.dt.microseconds": [[787, "polars-series-dt-microseconds"]], "polars.Series.entropy": [[815, "polars-series-entropy"]], "polars.Series.interpolate": [[835, "polars-series-interpolate"]], "polars.Series.is_duplicated": [[838, "polars-series-is-duplicated"]], "polars.Series.dt.is_leap_year": [[781, "polars-series-dt-is-leap-year"]], "polars.Series.dt.seconds": [[804, "polars-series-dt-seconds"]], "polars.Series.exp": [[820, "polars-series-exp"]], "polars.Series.dtype": [[814, "polars-series-dtype"]], "polars.Series.dt.date": [[774, "polars-series-dt-date"]], "polars.Series.dt.nanosecond": [[796, "polars-series-dt-nanosecond"]], "polars.Series.fill_null": [[824, "polars-series-fill-null"]], "polars.Series.dt.days": [[777, "polars-series-dt-days"]], "polars.Series.arccosh": [[704, "polars-series-arccosh"]], "polars.Series.arr.contains": [[718, "polars-series-arr-contains"]], "polars.Series.arr.tail": [[737, "polars-series-arr-tail"]], "polars.Series.arccos": [[703, "polars-series-arccos"]], "polars.Series.clip_max": [[754, "polars-series-clip-max"]], "polars.Series.clone": [[756, "polars-series-clone"]], "polars.Series.arr.join": [[726, "polars-series-arr-join"]], "polars.Series.arr.lengths": [[728, "polars-series-arr-lengths"]], "polars.Series.cumsum": [[762, "polars-series-cumsum"]], "polars.Series.arr.concat": [[717, "polars-series-arr-concat"]], "polars.Series.arr.explode": [[722, "polars-series-arr-explode"]], "polars.Series.clip": [[753, "polars-series-clip"]], "polars.Series.arr.eval": [[721, "polars-series-arr-eval"]], "polars.Series.clip_min": [[755, "polars-series-clip-min"]], "polars.Series.arr.min": [[731, "polars-series-arr-min"]], "polars.Series.describe": [[765, "polars-series-describe"]], "polars.Series.arg_max": [[709, "polars-series-arg-max"]], "polars.Series.arr.diff": [[720, "polars-series-arr-diff"]], "polars.Series.arg_true": [[712, "polars-series-arg-true"]], "polars.Series.arr.unique": [[740, "polars-series-arr-unique"]], "polars.Series.arcsin": [[705, "polars-series-arcsin"]], "polars.Series.arr": [[714, "polars-series-arr"]], "polars.Series.arr.count_match": [[719, "polars-series-arr-count-match"]], "polars.Series.arr.take": [[738, "polars-series-arr-take"]], "polars.Series.bin.ends_with": [[744, "polars-series-bin-ends-with"]], "polars.Series.ceil": [[750, "polars-series-ceil"]], "polars.Series.cummax": [[759, "polars-series-cummax"]], "polars.Series.cat.set_ordering": [[749, "polars-series-cat-set-ordering"]], "polars.Series.arr.to_struct": [[739, "polars-series-arr-to-struct"]], "polars.Series.clear": [[752, "polars-series-clear"]], "polars.Series.drop_nulls": [[769, "polars-series-drop-nulls"]], "polars.Series.bin.contains": [[741, "polars-series-bin-contains"]], "polars.Series.cosh": [[758, "polars-series-cosh"]], "polars.Series.arcsinh": [[706, "polars-series-arcsinh"]], "polars.Series.any": [[700, "polars-series-any"]], "polars.Series.arr.last": [[727, "polars-series-arr-last"]], "polars.Series.arr.max": [[729, "polars-series-arr-max"]], "polars.Series.arr.sum": [[736, "polars-series-arr-sum"]], "polars.Series.cos": [[757, "polars-series-cos"]], "polars.Series.drop_nans": [[768, "polars-series-drop-nans"]], "polars.Series.bin.starts_with": [[745, "polars-series-bin-starts-with"]], "polars.Series.arg_sort": [[711, "polars-series-arg-sort"]], "polars.Series.bin.decode": [[742, "polars-series-bin-decode"]], "polars.Series.arr.reverse": [[732, "polars-series-arr-reverse"]], "polars.Series.cummin": [[760, "polars-series-cummin"]], "polars.Series.cast": [[747, "polars-series-cast"]], "polars.Series.dot": [[767, "polars-series-dot"]], "polars.Series.arg_unique": [[713, "polars-series-arg-unique"]], "polars.Series.cumulative_eval": [[763, "polars-series-cumulative-eval"]], "polars.Series.bin.encode": [[743, "polars-series-bin-encode"]], "polars.Series.arr.arg_min": [[716, "polars-series-arr-arg-min"]], "polars.Series.arctan": [[707, "polars-series-arctan"]], "polars.Series.arr.get": [[724, "polars-series-arr-get"]], "polars.Series.arr.shift": [[733, "polars-series-arr-shift"]], "polars.Series.diff": [[766, "polars-series-diff"]], "polars.Series.append": [[701, "polars-series-append"]], "polars.Series.arr.arg_max": [[715, "polars-series-arr-arg-max"]], "polars.Series.arr.mean": [[730, "polars-series-arr-mean"]], "polars.Series.arr.sort": [[735, "polars-series-arr-sort"]], "polars.Series.chunk_lengths": [[751, "polars-series-chunk-lengths"]], "polars.Series.bottom_k": [[746, "polars-series-bottom-k"]], "polars.Series.apply": [[702, "polars-series-apply"]], "polars.Series.arr.first": [[723, "polars-series-arr-first"]], "polars.Series.arctanh": [[708, "polars-series-arctanh"]], "polars.Series.arr.slice": [[734, "polars-series-arr-slice"]], "polars.Series.cut": [[764, "polars-series-cut"]], "polars.Series.cat": [[748, "polars-series-cat"]], "polars.Series.cumprod": [[761, "polars-series-cumprod"]], "polars.Series.arr.head": [[725, "polars-series-arr-head"]], "polars.Series.arg_min": [[710, "polars-series-arg-min"]], "Binary": [[982, "binary"], [589, "binary"], [600, "binary"]], "String": [[992, "string"], [601, "string"]], "Boolean": [[983, "boolean"], [590, "boolean"]], "Categories": [[984, "categories"], [591, "categories"]], "Export": [[987, "export"], [253, "export"]], "Attributes": [[981, "attributes"], [690, "attributes"], [250, "attributes"]], "Computation": [[985, "computation"], [593, "computation"], [251, "computation"]], "Temporal": [[994, "temporal"], [603, "temporal"], [258, "temporal"]], "Descriptive": [[986, "descriptive"], [691, "descriptive"], [252, "descriptive"]], "polars.Series.zip_with": [[980, "polars-series-zip-with"]], "Series": [[988, "series"]], "Testing": [[996, "testing"]], "Asserts": [[996, "asserts"]], "Parametric testing": [[996, "parametric-testing"]], "Polars primitives": [[996, "polars-primitives"]], "Strategy helpers": [[996, "strategy-helpers"]], "Profiles": [[996, "profiles"]], "Utils": [[997, "utils"]], "Manipulation/selection": [[991, "manipulation-selection"], [695, "manipulation-selection"], [599, "manipulation-selection"], [257, "manipulation-selection"]], "List": [[989, "list"], [596, "list"]], "Miscellaneous": [[990, "miscellaneous"], [694, "miscellaneous"], [598, "miscellaneous"], [605, "miscellaneous"], [256, "miscellaneous"]], "Struct": [[993, "struct"], [602, "struct"]], "SQL": [[995, "sql"]], "Methods": [[995, "methods"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[678, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.LazyFrame.median": [[640, "polars-lazyframe-median"]], "polars.LazyFrame.var": [[669, "polars-lazyframe-var"]], "polars.LazyFrame.sort": [[660, "polars-lazyframe-sort"]], "polars.LazyFrame.std": [[661, "polars-lazyframe-std"]], "polars.LazyFrame.width": [[670, "polars-lazyframe-width"]], "polars.LazyFrame.write_json": [[674, "polars-lazyframe-write-json"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[685, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.LazyFrame.max": [[638, "polars-lazyframe-max"]], "polars.LazyFrame.rename": [[649, "polars-lazyframe-rename"]], "polars.LazyFrame.interpolate": [[631, "polars-lazyframe-interpolate"]], "polars.LazyFrame.merge_sorted": [[642, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.update": [[668, "polars-lazyframe-update"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[683, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.LazyFrame.join": [[632, "polars-lazyframe-join"]], "polars.Series.all": [[699, "polars-series-all"]], "polars.LazyFrame.sink_parquet": [[658, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.min": [[643, "polars-lazyframe-min"]], "polars.LazyFrame.with_row_count": [[673, "polars-lazyframe-with-row-count"]], "polars.Series.alias": [[698, "polars-series-alias"]], "polars.LazyFrame.limit": [[636, "polars-lazyframe-limit"]], "polars.LazyFrame.shift_and_fill": [[655, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.set_sorted": [[653, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.with_context": [[672, "polars-lazyframe-with-context"]], "GroupBy": [[692, "groupby"], [254, "groupby"]], "polars.LazyFrame.unique": [[666, "polars-lazyframe-unique"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[681, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.LazyFrame.melt": [[641, "polars-lazyframe-melt"]], "LazyFrame": [[693, "lazyframe"]], "polars.LazyFrame.lazy": [[635, "polars-lazyframe-lazy"]], "polars.LazyFrame.reverse": [[650, "polars-lazyframe-reverse"]], "Read/write logical plan": [[694, "read-write-logical-plan"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[679, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.LazyFrame.show_graph": [[656, "polars-lazyframe-show-graph"]], "polars.LazyFrame.tail": [[663, "polars-lazyframe-tail"]], "polars.LazyFrame.top_k": [[665, "polars-lazyframe-top-k"]], "polars.LazyFrame.schema": [[651, "polars-lazyframe-schema"]], "polars.LazyFrame.profile": [[646, "polars-lazyframe-profile"]], "polars.LazyFrame.sink_ipc": [[657, "polars-lazyframe-sink-ipc"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[688, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.LazyFrame.pipe": [[645, "polars-lazyframe-pipe"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[677, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.LazyFrame.join_asof": [[633, "polars-lazyframe-join-asof"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[687, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[682, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[684, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.LazyFrame.quantile": [[647, "polars-lazyframe-quantile"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[686, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.LazyFrame.inspect": [[630, "polars-lazyframe-inspect"]], "polars.LazyFrame.with_columns": [[671, "polars-lazyframe-with-columns"]], "polars.LazyFrame.slice": [[659, "polars-lazyframe-slice"]], "polars.LazyFrame.map": [[637, "polars-lazyframe-map"]], "polars.LazyFrame.unnest": [[667, "polars-lazyframe-unnest"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[680, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[676, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.LazyFrame.take_every": [[664, "polars-lazyframe-take-every"]], "polars.LazyFrame.mean": [[639, "polars-lazyframe-mean"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[689, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.LazyFrame.null_count": [[644, "polars-lazyframe-null-count"]], "polars.Series.abs": [[697, "polars-series-abs"]], "polars.LazyFrame.select": [[652, "polars-lazyframe-select"]], "polars.LazyFrame.read_json": [[648, "polars-lazyframe-read-json"]], "polars.LazyFrame.sum": [[662, "polars-lazyframe-sum"]], "polars.LazyFrame.shift": [[654, "polars-lazyframe-shift"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[675, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.LazyFrame.last": [[634, "polars-lazyframe-last"]], "polars.Expr.str.to_date": [[512, "polars-expr-str-to-date"]], "polars.Expr.str.replace": [[501, "polars-expr-str-replace"]], "polars.Expr.str.strptime": [[511, "polars-expr-str-strptime"]], "polars.concat_list": [[547, "polars-concat-list"]], "polars.Expr.str.zfill": [[517, "polars-expr-str-zfill"]], "polars.all": [[538, "polars-all"]], "polars.Expr.str.split_exact": [[507, "polars-expr-str-split-exact"]], "polars.Expr.tanh": [[527, "polars-expr-tanh"]], "polars.Expr.to_physical": [[528, "polars-expr-to-physical"]], "polars.Expr.upper_bound": [[533, "polars-expr-upper-bound"]], "polars.Expr.sum": [[522, "polars-expr-sum"]], "polars.Expr.unique_counts": [[532, "polars-expr-unique-counts"]], "polars.count": [[550, "polars-count"]], "polars.Expr.str.extract": [[492, "polars-expr-str-extract"]], "polars.Expr.tail": [[523, "polars-expr-tail"]], "polars.corr": [[549, "polars-corr"]], "polars.Expr.struct.rename_fields": [[519, "polars-expr-struct-rename-fields"]], "polars.Expr.value_counts": [[534, "polars-expr-value-counts"]], "polars.Expr.xor": [[537, "polars-expr-xor"]], "polars.datetime": [[556, "polars-datetime"]], "polars.Expr.str.split": [[506, "polars-expr-str-split"]], "polars.Expr.str.rjust": [[503, "polars-expr-str-rjust"]], "polars.approx_unique": [[541, "polars-approx-unique"]], "polars.apply": [[540, "polars-apply"]], "polars.Expr.str.starts_with": [[509, "polars-expr-str-starts-with"]], "polars.date": [[555, "polars-date"]], "polars.Expr.str.strip": [[510, "polars-expr-str-strip"]], "polars.Expr.var": [[535, "polars-expr-var"]], "polars.Expr.take_every": [[525, "polars-expr-take-every"]], "polars.Expr.str.ljust": [[497, "polars-expr-str-ljust"]], "polars.avg": [[544, "polars-avg"]], "polars.Expr.str.lengths": [[496, "polars-expr-str-lengths"]], "polars.element": [[558, "polars-element"]], "polars.Expr.take": [[524, "polars-expr-take"]], "polars.cumsum": [[554, "polars-cumsum"]], "polars.col": [[546, "polars-col"]], "polars.Expr.suffix": [[521, "polars-expr-suffix"]], "polars.Expr.str.rstrip": [[504, "polars-expr-str-rstrip"]], "polars.Expr.str.explode": [[491, "polars-expr-str-explode"]], "polars.concat_str": [[548, "polars-concat-str"]], "polars.Expr.where": [[536, "polars-expr-where"]], "polars.Expr.str.to_time": [[515, "polars-expr-str-to-time"]], "polars.exclude": [[559, "polars-exclude"]], "polars.cov": [[551, "polars-cov"]], "polars.Expr.str.replace_all": [[502, "polars-expr-str-replace-all"]], "polars.Expr.str.lstrip": [[498, "polars-expr-str-lstrip"]], "polars.Expr.str.to_lowercase": [[514, "polars-expr-str-to-lowercase"]], "polars.cumfold": [[552, "polars-cumfold"]], "polars.Expr.str.slice": [[505, "polars-expr-str-slice"]], "polars.Expr.truediv": [[530, "polars-expr-truediv"]], "polars.coalesce": [[545, "polars-coalesce"]], "polars.Expr.top_k": [[529, "polars-expr-top-k"]], "polars.Expr.str.n_chars": [[499, "polars-expr-str-n-chars"]], "polars.Expr.str.ends_with": [[490, "polars-expr-str-ends-with"]], "polars.Expr.str.extract_all": [[493, "polars-expr-str-extract-all"]], "polars.duration": [[557, "polars-duration"]], "polars.Expr.str.json_extract": [[494, "polars-expr-str-json-extract"]], "polars.Expr.str.parse_int": [[500, "polars-expr-str-parse-int"]], "polars.Expr.struct.field": [[518, "polars-expr-struct-field"]], "polars.Expr.tan": [[526, "polars-expr-tan"]], "polars.Expr.unique": [[531, "polars-expr-unique"]], "polars.arange": [[542, "polars-arange"]], "polars.cumreduce": [[553, "polars-cumreduce"]], "polars.Expr.str.splitn": [[508, "polars-expr-str-splitn"]], "polars.arg_sort_by": [[543, "polars-arg-sort-by"]], "polars.Expr.str.to_datetime": [[513, "polars-expr-str-to-datetime"]], "polars.Expr.str.json_path_match": [[495, "polars-expr-str-json-path-match"]], "polars.Expr.str.to_uppercase": [[516, "polars-expr-str-to-uppercase"]], "polars.any": [[539, "polars-any"]], "polars.Expr.sub": [[520, "polars-expr-sub"]], "polars.Expr.map_alias": [[422, "polars-expr-map-alias"]], "polars.Expr.mul": [[438, "polars-expr-mul"]], "polars.Expr.rolling_median": [[461, "polars-expr-rolling-median"]], "polars.Expr.pow": [[448, "polars-expr-pow"]], "polars.Expr.mod": [[436, "polars-expr-mod"]], "polars.Expr.shift_and_fill": [[473, "polars-expr-shift-and-fill"]], "polars.Expr.sign": [[476, "polars-expr-sign"]], "polars.Expr.over": [[445, "polars-expr-over"]], "polars.Expr.rechunk": [[453, "polars-expr-rechunk"]], "polars.Expr.rolling_skew": [[464, "polars-expr-rolling-skew"]], "polars.Expr.reverse": [[457, "polars-expr-reverse"]], "polars.Expr.rank": [[452, "polars-expr-rank"]], "polars.Expr.sort": [[481, "polars-expr-sort"]], "polars.Expr.mode": [[437, "polars-expr-mode"]], "polars.Expr.reinterpret": [[454, "polars-expr-reinterpret"]], "polars.Expr.shrink_dtype": [[474, "polars-expr-shrink-dtype"]], "polars.Expr.std": [[484, "polars-expr-std"]], "polars.Expr.rolling_mean": [[460, "polars-expr-rolling-mean"]], "polars.Expr.mean": [[425, "polars-expr-mean"]], "polars.Expr.rolling_max": [[459, "polars-expr-rolling-max"]], "polars.Expr.rolling_var": [[467, "polars-expr-rolling-var"]], "polars.Expr.quantile": [[451, "polars-expr-quantile"]], "polars.Expr.skew": [[479, "polars-expr-skew"]], "polars.Expr.sort_by": [[482, "polars-expr-sort-by"]], "polars.Expr.meta.eq": [[427, "polars-expr-meta-eq"]], "polars.Expr.null_count": [[443, "polars-expr-null-count"]], "polars.Expr.median": [[426, "polars-expr-median"]], "polars.Expr.lt": [[420, "polars-expr-lt"]], "polars.Expr.pipe": [[447, "polars-expr-pipe"]], "polars.Expr.max": [[424, "polars-expr-max"]], "polars.Expr.meta.root_names": [[433, "polars-expr-meta-root-names"]], "polars.Expr.repeat_by": [[455, "polars-expr-repeat-by"]], "polars.Expr.round": [[468, "polars-expr-round"]], "polars.Expr.sinh": [[478, "polars-expr-sinh"]], "polars.Expr.rolling_quantile": [[463, "polars-expr-rolling-quantile"]], "polars.Expr.str.concat": [[485, "polars-expr-str-concat"]], "polars.Expr.str.contains": [[486, "polars-expr-str-contains"]], "polars.Expr.meta.pop": [[432, "polars-expr-meta-pop"]], "polars.Expr.rolling_sum": [[466, "polars-expr-rolling-sum"]], "polars.Expr.meta.has_multiple_outputs": [[428, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.product": [[450, "polars-expr-product"]], "polars.Expr.search_sorted": [[470, "polars-expr-search-sorted"]], "polars.Expr.meta.output_name": [[431, "polars-expr-meta-output-name"]], "polars.Expr.rolling_std": [[465, "polars-expr-rolling-std"]], "polars.Expr.shift": [[472, "polars-expr-shift"]], "polars.Expr.meta.ne": [[430, "polars-expr-meta-ne"]], "polars.Expr.nan_min": [[441, "polars-expr-nan-min"]], "polars.Expr.set_sorted": [[471, "polars-expr-set-sorted"]], "polars.Expr.str.encode": [[489, "polars-expr-str-encode"]], "polars.Expr.sample": [[469, "polars-expr-sample"]], "polars.Expr.pct_change": [[446, "polars-expr-pct-change"]], "polars.Expr.prefix": [[449, "polars-expr-prefix"]], "polars.Expr.nan_max": [[440, "polars-expr-nan-max"]], "polars.Expr.reshape": [[456, "polars-expr-reshape"]], "polars.Expr.min": [[435, "polars-expr-min"]], "polars.Expr.map_dict": [[423, "polars-expr-map-dict"]], "polars.Expr.or_": [[444, "polars-expr-or"]], "polars.Expr.sin": [[477, "polars-expr-sin"]], "polars.Expr.rolling_apply": [[458, "polars-expr-rolling-apply"]], "polars.Expr.rolling_min": [[462, "polars-expr-rolling-min"]], "polars.Expr.str.decode": [[488, "polars-expr-str-decode"]], "polars.Expr.str.count_match": [[487, "polars-expr-str-count-match"]], "polars.Expr.meta.is_regex_projection": [[429, "polars-expr-meta-is-regex-projection"]], "polars.Expr.meta.undo_aliases": [[434, "polars-expr-meta-undo-aliases"]], "polars.Expr.shuffle": [[475, "polars-expr-shuffle"]], "polars.Expr.ne": [[442, "polars-expr-ne"]], "polars.Expr.n_unique": [[439, "polars-expr-n-unique"]], "polars.Expr.sqrt": [[483, "polars-expr-sqrt"]], "polars.Expr.map": [[421, "polars-expr-map"]], "polars.Expr.slice": [[480, "polars-expr-slice"]], "polars.Expr.is_first": [[401, "polars-expr-is-first"]], "polars.Expr.lower_bound": [[419, "polars-expr-lower-bound"]], "polars.Expr.is_between": [[398, "polars-expr-is-between"]], "polars.Expr.dt.time": [[366, "polars-expr-dt-time"]], "polars.Expr.inspect": [[396, "polars-expr-inspect"]], "polars.Expr.is_duplicated": [[399, "polars-expr-is-duplicated"]], "polars.Expr.dt.nanoseconds": [[357, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.weekday": [[371, "polars-expr-dt-weekday"]], "polars.Expr.first": [[386, "polars-expr-first"]], "polars.Expr.is_finite": [[400, "polars-expr-is-finite"]], "polars.Expr.keep_name": [[410, "polars-expr-keep-name"]], "polars.Expr.last": [[412, "polars-expr-last"]], "polars.Expr.dt.replace_time_zone": [[361, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.minutes": [[352, "polars-expr-dt-minutes"]], "polars.Expr.log10": [[417, "polars-expr-log10"]], "polars.Expr.is_unique": [[409, "polars-expr-is-unique"]], "polars.Expr.len": [[414, "polars-expr-len"]], "polars.Expr.floor": [[388, "polars-expr-floor"]], "polars.Expr.dt.month_end": [[354, "polars-expr-dt-month-end"]], "polars.Expr.dt.round": [[362, "polars-expr-dt-round"]], "polars.Expr.filter": [[385, "polars-expr-filter"]], "polars.Expr.dt.second": [[363, "polars-expr-dt-second"]], "polars.Expr.exclude": [[379, "polars-expr-exclude"]], "polars.Expr.interpolate": [[397, "polars-expr-interpolate"]], "polars.Expr.is_nan": [[404, "polars-expr-is-nan"]], "polars.Expr.dt.week": [[370, "polars-expr-dt-week"]], "polars.Expr.head": [[394, "polars-expr-head"]], "polars.Expr.gt": [[392, "polars-expr-gt"]], "polars.Expr.dt.offset_by": [[358, "polars-expr-dt-offset-by"]], "polars.Expr.dt.timestamp": [[367, "polars-expr-dt-timestamp"]], "polars.Expr.dt.to_string": [[368, "polars-expr-dt-to-string"]], "polars.Expr.dt.month": [[353, "polars-expr-dt-month"]], "polars.Expr.limit": [[415, "polars-expr-limit"]], "polars.Expr.kurtosis": [[411, "polars-expr-kurtosis"]], "polars.Expr.dt.seconds": [[364, "polars-expr-dt-seconds"]], "polars.Expr.ewm_var": [[378, "polars-expr-ewm-var"]], "polars.Expr.exp": [[380, "polars-expr-exp"]], "polars.Expr.explode": [[381, "polars-expr-explode"]], "polars.Expr.dt.with_time_unit": [[372, "polars-expr-dt-with-time-unit"]], "polars.Expr.ge": [[391, "polars-expr-ge"]], "polars.Expr.dt.ordinal_day": [[359, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.year": [[373, "polars-expr-dt-year"]], "polars.Expr.extend_constant": [[382, "polars-expr-extend-constant"]], "polars.Expr.flatten": [[387, "polars-expr-flatten"]], "polars.Expr.implode": [[395, "polars-expr-implode"]], "polars.Expr.ewm_mean": [[376, "polars-expr-ewm-mean"]], "polars.Expr.fill_nan": [[383, "polars-expr-fill-nan"]], "polars.Expr.ewm_std": [[377, "polars-expr-ewm-std"]], "polars.Expr.log": [[416, "polars-expr-log"]], "polars.Expr.is_in": [[402, "polars-expr-is-in"]], "polars.Expr.hash": [[393, "polars-expr-hash"]], "polars.Expr.eq": [[375, "polars-expr-eq"]], "polars.Expr.log1p": [[418, "polars-expr-log1p"]], "polars.Expr.forward_fill": [[390, "polars-expr-forward-fill"]], "polars.Expr.dt.nanosecond": [[356, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.quarter": [[360, "polars-expr-dt-quarter"]], "polars.Expr.is_null": [[408, "polars-expr-is-null"]], "polars.Expr.dt.milliseconds": [[350, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.month_start": [[355, "polars-expr-dt-month-start"]], "polars.Expr.entropy": [[374, "polars-expr-entropy"]], "polars.Expr.floordiv": [[389, "polars-expr-floordiv"]], "polars.Expr.is_not_nan": [[406, "polars-expr-is-not-nan"]], "polars.Expr.fill_null": [[384, "polars-expr-fill-null"]], "polars.Expr.is_not_null": [[407, "polars-expr-is-not-null"]], "polars.Expr.is_not": [[405, "polars-expr-is-not"]], "polars.Expr.le": [[413, "polars-expr-le"]], "polars.Expr.dt.minute": [[351, "polars-expr-dt-minute"]], "polars.Expr.dt.truncate": [[369, "polars-expr-dt-truncate"]], "polars.Expr.is_infinite": [[403, "polars-expr-is-infinite"]], "polars.Expr.dt.strftime": [[365, "polars-expr-dt-strftime"]], "Window": [[604, "window"]], "polars.reduce": [[576, "polars-reduce"]], "polars.groups": [[564, "polars-groups"]], "polars.spearman_rank_corr": [[581, "polars-spearman-rank-corr"]], "polars.rolling_cov": [[579, "polars-rolling-cov"]], "polars.max": [[569, "polars-max"]], "polars.var": [[587, "polars-var"]], "polars.LazyFrame.from_json": [[625, "polars-lazyframe-from-json"]], "polars.struct": [[583, "polars-struct"]], "polars.repeat": [[577, "polars-repeat"]], "polars.median": [[571, "polars-median"]], "polars.time": [[586, "polars-time"]], "Columns / names": [[592, "columns-names"]], "polars.LazyFrame.fill_nan": [[621, "polars-lazyframe-fill-nan"]], "polars.n_unique": [[573, "polars-n-unique"]], "polars.LazyFrame.drop_nulls": [[616, "polars-lazyframe-drop-nulls"]], "Meta": [[597, "meta"]], "polars.LazyFrame.columns": [[614, "polars-lazyframe-columns"]], "API reference": [[606, "api-reference"]], "polars.LazyFrame.explode": [[619, "polars-lazyframe-explode"]], "polars.std": [[582, "polars-std"]], "polars.sum": [[584, "polars-sum"]], "polars.LazyFrame.collect": [[613, "polars-lazyframe-collect"]], "polars.lit": [[567, "polars-lit"]], "Expressions": [[595, "expressions"]], "polars.min": [[572, "polars-min"]], "polars.LazyFrame.filter": [[623, "polars-lazyframe-filter"]], "polars.LazyFrame.fetch": [[620, "polars-lazyframe-fetch"]], "Functions": [[594, "functions"], [605, "functions"]], "polars.map": [[568, "polars-map"]], "polars.LazyFrame.head": [[629, "polars-lazyframe-head"]], "polars.from_epoch": [[563, "polars-from-epoch"]], "polars.tail": [[585, "polars-tail"]], "polars.format": [[562, "polars-format"]], "polars.LazyFrame.clone": [[612, "polars-lazyframe-clone"]], "polars.LazyFrame.cache": [[610, "polars-lazyframe-cache"]], "polars.LazyFrame.first": [[624, "polars-lazyframe-first"]], "polars.head": [[565, "polars-head"]], "polars.LazyFrame.groupby_dynamic": [[627, "polars-lazyframe-groupby-dynamic"]], "polars.when": [[588, "polars-when"]], "Input/output": [[607, "input-output"]], "CSV": [[607, "csv"]], "Feather/ IPC": [[607, "feather-ipc"]], "Parquet": [[607, "parquet"]], "Database": [[607, "database"]], "JSON": [[607, "json"]], "AVRO": [[607, "avro"]], "Excel": [[607, "excel"]], "Delta Lake": [[607, "delta-lake"]], "Datasets": [[607, "datasets"]], "BatchedCsvReader": [[607, "batchedcsvreader"]], "polars.LazyFrame.explain": [[618, "polars-lazyframe-explain"]], "polars.list": [[566, "polars-list"]], "polars.LazyFrame.bottom_k": [[609, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.groupby_rolling": [[628, "polars-lazyframe-groupby-rolling"]], "polars.quantile": [[575, "polars-quantile"]], "polars.fold": [[561, "polars-fold"]], "polars.first": [[560, "polars-first"]], "polars.LazyFrame.drop": [[615, "polars-lazyframe-drop"]], "polars.LazyFrame.fill_null": [[622, "polars-lazyframe-fill-null"]], "polars.select": [[580, "polars-select"]], "polars.pearson_corr": [[574, "polars-pearson-corr"]], "polars.rolling_corr": [[578, "polars-rolling-corr"]], "Operators": [[600, "operators"]], "Conjunction": [[600, "conjunction"]], "Comparison": [[600, "comparison"]], "Numeric": [[600, "numeric"], [258, "numeric"]], "polars.LazyFrame.dtypes": [[617, "polars-lazyframe-dtypes"]], "polars.mean": [[570, "polars-mean"]], "Conversion": [[605, "conversion"]], "Eager/Lazy functions": [[605, "eager-lazy-functions"]], "Parallelization": [[605, "parallelization"]], "StringCache": [[605, "stringcache"]], "polars.LazyFrame.groupby": [[626, "polars-lazyframe-groupby"]], "polars.LazyFrame.clear": [[611, "polars-lazyframe-clear"]], "polars.Expr.arr.unique": [[307, "polars-expr-arr-unique"]], "polars.Expr.arr.last": [[294, "polars-expr-arr-last"]], "polars.Expr.bin.decode": [[310, "polars-expr-bin-decode"]], "polars.Expr.bottom_k": [[314, "polars-expr-bottom-k"]], "polars.Expr.arr.slice": [[301, "polars-expr-arr-slice"]], "polars.Expr.arr.max": [[296, "polars-expr-arr-max"]], "polars.Expr.dt.iso_year": [[346, "polars-expr-dt-iso-year"]], "polars.Expr.dt.microseconds": [[348, "polars-expr-dt-microseconds"]], "polars.Expr.arr.explode": [[289, "polars-expr-arr-explode"]], "polars.Expr.arr.concat": [[284, "polars-expr-arr-concat"]], "polars.Expr.arr.get": [[291, "polars-expr-arr-get"]], "polars.Expr.clip_max": [[320, "polars-expr-clip-max"]], "polars.Expr.bin.contains": [[309, "polars-expr-bin-contains"]], "polars.Expr.dt.date": [[338, "polars-expr-dt-date"]], "polars.Expr.arr.first": [[290, "polars-expr-arr-first"]], "polars.Expr.arr.lengths": [[295, "polars-expr-arr-lengths"]], "polars.Expr.dt.hours": [[344, "polars-expr-dt-hours"]], "polars.Expr.dt.millisecond": [[349, "polars-expr-dt-millisecond"]], "polars.Expr.clip": [[319, "polars-expr-clip"]], "polars.Expr.dt.days": [[341, "polars-expr-dt-days"]], "polars.Expr.arr.reverse": [[299, "polars-expr-arr-reverse"]], "polars.Expr.cache": [[315, "polars-expr-cache"]], "polars.Expr.cat.set_ordering": [[317, "polars-expr-cat-set-ordering"]], "polars.Expr.arr.count_match": [[286, "polars-expr-arr-count-match"]], "polars.Expr.drop_nulls": [[334, "polars-expr-drop-nulls"]], "polars.Expr.arr.shift": [[300, "polars-expr-arr-shift"]], "polars.Expr.dt.hour": [[343, "polars-expr-dt-hour"]], "polars.Expr.cast": [[316, "polars-expr-cast"]], "polars.Expr.arr.mean": [[297, "polars-expr-arr-mean"]], "polars.Expr.cummax": [[326, "polars-expr-cummax"]], "polars.Expr.arg_unique": [[281, "polars-expr-arg-unique"]], "polars.Expr.clip_min": [[321, "polars-expr-clip-min"]], "polars.Expr.diff": [[331, "polars-expr-diff"]], "polars.Expr.ceil": [[318, "polars-expr-ceil"]], "polars.Expr.cumulative_eval": [[330, "polars-expr-cumulative-eval"]], "polars.Expr.dt.convert_time_zone": [[337, "polars-expr-dt-convert-time-zone"]], "polars.Expr.arr.arg_max": [[282, "polars-expr-arr-arg-max"]], "polars.Expr.dt.is_leap_year": [[345, "polars-expr-dt-is-leap-year"]], "polars.Expr.arr.eval": [[288, "polars-expr-arr-eval"]], "polars.Expr.dt.microsecond": [[347, "polars-expr-dt-microsecond"]], "polars.Expr.arr.sort": [[302, "polars-expr-arr-sort"]], "polars.Expr.arr.contains": [[285, "polars-expr-arr-contains"]], "polars.Expr.arr.join": [[293, "polars-expr-arr-join"]], "polars.Expr.bin.encode": [[311, "polars-expr-bin-encode"]], "polars.Expr.cosh": [[323, "polars-expr-cosh"]], "polars.Expr.count": [[324, "polars-expr-count"]], "polars.Expr.cumsum": [[329, "polars-expr-cumsum"]], "polars.Expr.dt.cast_time_unit": [[335, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.datetime": [[339, "polars-expr-dt-datetime"]], "polars.Expr.arr.sum": [[303, "polars-expr-arr-sum"]], "polars.Expr.bin.starts_with": [[313, "polars-expr-bin-starts-with"]], "polars.Expr.backward_fill": [[308, "polars-expr-backward-fill"]], "polars.Expr.arr.diff": [[287, "polars-expr-arr-diff"]], "polars.Expr.cos": [[322, "polars-expr-cos"]], "polars.Expr.dt.epoch": [[342, "polars-expr-dt-epoch"]], "polars.Expr.cumcount": [[325, "polars-expr-cumcount"]], "polars.Expr.cummin": [[327, "polars-expr-cummin"]], "polars.Expr.arr.head": [[292, "polars-expr-arr-head"]], "polars.Expr.dot": [[332, "polars-expr-dot"]], "polars.Expr.dt.day": [[340, "polars-expr-dt-day"]], "polars.Expr.arr.min": [[298, "polars-expr-arr-min"]], "polars.Expr.arr.take": [[305, "polars-expr-arr-take"]], "polars.Expr.drop_nans": [[333, "polars-expr-drop-nans"]], "polars.Expr.cumprod": [[328, "polars-expr-cumprod"]], "polars.Expr.arr.to_struct": [[306, "polars-expr-arr-to-struct"]], "polars.Expr.arr.tail": [[304, "polars-expr-arr-tail"]], "polars.Expr.bin.ends_with": [[312, "polars-expr-bin-ends-with"]], "polars.Expr.dt.combine": [[336, "polars-expr-dt-combine"]], "polars.Expr.arg_true": [[280, "polars-expr-arg-true"]], "polars.Expr.arr.arg_min": [[283, "polars-expr-arr-arg-min"]], "polars.DataFrame.join_asof": [[175, "polars-dataframe-join-asof"]], "polars.DataFrame.merge_sorted": [[182, "polars-dataframe-merge-sorted"]], "polars.DataFrame.groupby_rolling": [[161, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.height": [[164, "polars-dataframe-height"]], "polars.DataFrame.melt": [[181, "polars-dataframe-melt"]], "polars.DataFrame.iter_rows": [[172, "polars-dataframe-iter-rows"]], "polars.DataFrame.pivot": [[189, "polars-dataframe-pivot"]], "polars.DataFrame.item": [[171, "polars-dataframe-item"]], "polars.DataFrame.schema": [[200, "polars-dataframe-schema"]], "polars.DataFrame.slice": [[207, "polars-dataframe-slice"]], "polars.DataFrame.drop_nulls": [[145, "polars-dataframe-drop-nulls"]], "polars.DataFrame.product": [[190, "polars-dataframe-product"]], "polars.DataFrame.sample": [[199, "polars-dataframe-sample"]], "polars.DataFrame.null_count": [[186, "polars-dataframe-null-count"]], "polars.DataFrame.shape": [[203, "polars-dataframe-shape"]], "polars.DataFrame.describe": [[142, "polars-dataframe-describe"]], "polars.DataFrame.interpolate": [[167, "polars-dataframe-interpolate"]], "polars.DataFrame.row": [[197, "polars-dataframe-row"]], "polars.DataFrame.quantile": [[191, "polars-dataframe-quantile"]], "polars.DataFrame.iter_slices": [[173, "polars-dataframe-iter-slices"]], "polars.DataFrame.mean": [[179, "polars-dataframe-mean"]], "polars.DataFrame.drop_in_place": [[144, "polars-dataframe-drop-in-place"]], "polars.DataFrame.shift_and_fill": [[205, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.is_unique": [[170, "polars-dataframe-is-unique"]], "polars.DataFrame.hash_rows": [[162, "polars-dataframe-hash-rows"]], "polars.DataFrame.is_duplicated": [[168, "polars-dataframe-is-duplicated"]], "polars.DataFrame.set_sorted": [[202, "polars-dataframe-set-sorted"]], "polars.DataFrame.replace": [[194, "polars-dataframe-replace"]], "polars.DataFrame.columns": [[140, "polars-dataframe-columns"]], "polars.DataFrame.min": [[183, "polars-dataframe-min"]], "polars.DataFrame.is_empty": [[169, "polars-dataframe-is-empty"]], "polars.DataFrame.join": [[174, "polars-dataframe-join"]], "polars.DataFrame.estimated_size": [[147, "polars-dataframe-estimated-size"]], "polars.DataFrame.partition_by": [[187, "polars-dataframe-partition-by"]], "polars.DataFrame.fold": [[154, "polars-dataframe-fold"]], "polars.DataFrame.shift": [[204, "polars-dataframe-shift"]], "polars.DataFrame.limit": [[177, "polars-dataframe-limit"]], "polars.DataFrame.lazy": [[176, "polars-dataframe-lazy"]], "polars.DataFrame.n_unique": [[185, "polars-dataframe-n-unique"]], "polars.DataFrame.rename": [[193, "polars-dataframe-rename"]], "polars.DataFrame.reverse": [[196, "polars-dataframe-reverse"]], "polars.DataFrame.dtypes": [[146, "polars-dataframe-dtypes"]], "polars.DataFrame.glimpse": [[158, "polars-dataframe-glimpse"]], "polars.DataFrame.fill_nan": [[150, "polars-dataframe-fill-nan"]], "polars.DataFrame.filter": [[152, "polars-dataframe-filter"]], "polars.DataFrame.sort": [[208, "polars-dataframe-sort"]], "polars.DataFrame.drop": [[143, "polars-dataframe-drop"]], "polars.DataFrame.get_column": [[156, "polars-dataframe-get-column"]], "polars.DataFrame.median": [[180, "polars-dataframe-median"]], "polars.DataFrame.groupby_dynamic": [[160, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.pipe": [[188, "polars-dataframe-pipe"]], "polars.DataFrame.hstack": [[165, "polars-dataframe-hstack"]], "polars.DataFrame.select": [[201, "polars-dataframe-select"]], "polars.DataFrame.get_columns": [[157, "polars-dataframe-get-columns"]], "polars.DataFrame.rows": [[198, "polars-dataframe-rows"]], "polars.DataFrame.extend": [[149, "polars-dataframe-extend"]], "polars.DataFrame.shrink_to_fit": [[206, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.corr": [[141, "polars-dataframe-corr"]], "polars.DataFrame.std": [[209, "polars-dataframe-std"]], "polars.DataFrame.head": [[163, "polars-dataframe-head"]], "polars.DataFrame.replace_at_idx": [[195, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.explode": [[148, "polars-dataframe-explode"]], "polars.DataFrame.n_chunks": [[184, "polars-dataframe-n-chunks"]], "polars.DataFrame.fill_null": [[151, "polars-dataframe-fill-null"]], "polars.DataFrame.frame_equal": [[155, "polars-dataframe-frame-equal"]], "polars.DataFrame.groupby": [[159, "polars-dataframe-groupby"]], "polars.DataFrame.max": [[178, "polars-dataframe-max"]], "polars.DataFrame.rechunk": [[192, "polars-dataframe-rechunk"]], "polars.DataFrame.find_idx_by_name": [[153, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.insert_at_idx": [[166, "polars-dataframe-insert-at-idx"]], "polars.Expr.alias": [[264, "polars-expr-alias"]], "polars.DataFrame.vstack": [[230, "polars-dataframe-vstack"]], "polars.Expr.arccos": [[271, "polars-expr-arccos"]], "polars.dataframe.groupby.GroupBy.all": [[236, "polars-dataframe-groupby-groupby-all"]], "polars.dataframe.groupby.GroupBy.n_unique": [[246, "polars-dataframe-groupby-groupby-n-unique"]], "polars.Expr.arg_max": [[277, "polars-expr-arg-max"]], "polars.Expr.arcsinh": [[274, "polars-expr-arcsinh"]], "DataFrame": [[255, "dataframe"]], "polars.DataFrame.sum": [[210, "polars-dataframe-sum"]], "polars.DataFrame.to_dummies": [[216, "polars-dataframe-to-dummies"]], "polars.dataframe.groupby.GroupBy.tail": [[249, "polars-dataframe-groupby-groupby-tail"]], "polars.Expr.arccosh": [[272, "polars-expr-arccosh"]], "polars.DataFrame.take_every": [[212, "polars-dataframe-take-every"]], "polars.Expr.arg_min": [[278, "polars-expr-arg-min"]], "polars.DataFrame.to_pandas": [[219, "polars-dataframe-to-pandas"]], "polars.DataFrame.to_struct": [[221, "polars-dataframe-to-struct"]], "polars.DataFrame.with_columns": [[232, "polars-dataframe-with-columns"]], "polars.Expr.arctan": [[275, "polars-expr-arctan"]], "polars.DataFrame.unstack": [[226, "polars-dataframe-unstack"]], "polars.Expr.apply": [[269, "polars-expr-apply"]], "polars.DataFrame.top_k": [[222, "polars-dataframe-top-k"]], "polars.dataframe.groupby.GroupBy.min": [[245, "polars-dataframe-groupby-groupby-min"]], "polars.Expr.and_": [[266, "polars-expr-and"]], "polars.Expr.any": [[267, "polars-expr-any"]], "polars.Expr.approx_unique": [[270, "polars-expr-approx-unique"]], "polars.Expr.arctanh": [[276, "polars-expr-arctanh"]], "polars.DataFrame.update": [[227, "polars-dataframe-update"]], "polars.DataFrame.to_dict": [[214, "polars-dataframe-to-dict"]], "polars.dataframe.groupby.GroupBy.count": [[238, "polars-dataframe-groupby-groupby-count"]], "polars.DataFrame.unique": [[224, "polars-dataframe-unique"]], "polars.DataFrame.to_init_repr": [[217, "polars-dataframe-to-init-repr"]], "polars.dataframe.groupby.GroupBy.first": [[239, "polars-dataframe-groupby-groupby-first"]], "polars.dataframe.groupby.GroupBy.max": [[242, "polars-dataframe-groupby-groupby-max"]], "polars.dataframe.groupby.GroupBy.agg": [[235, "polars-dataframe-groupby-groupby-agg"]], "polars.dataframe.groupby.GroupBy.median": [[244, "polars-dataframe-groupby-groupby-median"]], "Data types": [[258, "data-types"]], "Nested": [[258, "nested"]], "Other": [[258, "other"]], "polars.dataframe.groupby.GroupBy.mean": [[243, "polars-dataframe-groupby-groupby-mean"]], "polars.dataframe.groupby.GroupBy.last": [[241, "polars-dataframe-groupby-groupby-last"]], "polars.Expr.abs": [[261, "polars-expr-abs"]], "polars.Expr.agg_groups": [[263, "polars-expr-agg-groups"]], "polars.DataFrame.to_arrow": [[213, "polars-dataframe-to-arrow"]], "polars.DataFrame.upsample": [[228, "polars-dataframe-upsample"]], "polars.DataFrame.width": [[231, "polars-dataframe-width"]], "polars.DataFrame.to_numpy": [[218, "polars-dataframe-to-numpy"]], "polars.DataFrame.with_row_count": [[233, "polars-dataframe-with-row-count"]], "polars.Expr.arg_sort": [[279, "polars-expr-arg-sort"]], "polars.Expr.append": [[268, "polars-expr-append"]], "polars.dataframe.groupby.GroupBy.quantile": [[247, "polars-dataframe-groupby-groupby-quantile"]], "polars.DataFrame.transpose": [[223, "polars-dataframe-transpose"]], "polars.Expr.all": [[265, "polars-expr-all"]], "polars.Expr.arcsin": [[273, "polars-expr-arcsin"]], "polars.DataFrame.var": [[229, "polars-dataframe-var"]], "polars.dataframe.groupby.GroupBy.sum": [[248, "polars-dataframe-groupby-groupby-sum"]], "polars.Expr.add": [[262, "polars-expr-add"]], "polars.DataFrame.to_dicts": [[215, "polars-dataframe-to-dicts"]], "polars.DataFrame.unnest": [[225, "polars-dataframe-unnest"]], "polars.DataFrame.to_series": [[220, "polars-dataframe-to-series"]], "polars.dataframe.groupby.GroupBy.__iter__": [[234, "polars-dataframe-groupby-groupby-iter"]], "Exceptions": [[259, "exceptions"]], "polars.DataFrame.tail": [[211, "polars-dataframe-tail"]], "polars.dataframe.groupby.GroupBy.head": [[240, "polars-dataframe-groupby-groupby-head"]], "polars.dataframe.groupby.GroupBy.apply": [[237, "polars-dataframe-groupby-groupby-apply"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[5, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[6, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[7, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[8, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[9, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[10, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[11, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[12, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[13, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[14, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[15, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[16, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[17, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[22, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[23, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[24, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[25, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[26, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[27, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[28, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[29, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[30, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[31, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[32, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[33, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[34, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[35, "polars.DataType"]], "__init__() (polars.datatype method)": [[35, "polars.DataType.__init__"]], "date (class in polars)": [[36, "polars.Date"]], "__init__() (polars.date method)": [[36, "polars.Date.__init__"]], "datetime (class in polars)": [[37, "polars.Datetime"]], "__init__() (polars.datetime method)": [[37, "polars.Datetime.__init__"]], "decimal (class in polars)": [[38, "polars.Decimal"]], "__init__() (polars.decimal method)": [[38, "polars.Decimal.__init__"]], "duration (class in polars)": [[39, "polars.Duration"]], "__init__() (polars.duration method)": [[39, "polars.Duration.__init__"]], "float32 (class in polars)": [[40, "polars.Float32"]], "__init__() (polars.float32 method)": [[40, "polars.Float32.__init__"]], "float64 (class in polars)": [[41, "polars.Float64"]], "__init__() (polars.float64 method)": [[41, "polars.Float64.__init__"]], "int16 (class in polars)": [[42, "polars.Int16"]], "__init__() (polars.int16 method)": [[42, "polars.Int16.__init__"]], "int32 (class in polars)": [[43, "polars.Int32"]], "__init__() (polars.int32 method)": [[43, "polars.Int32.__init__"]], "int64 (class in polars)": [[44, "polars.Int64"]], "__init__() (polars.int64 method)": [[44, "polars.Int64.__init__"]], "int8 (class in polars)": [[45, "polars.Int8"]], "__init__() (polars.int8 method)": [[45, "polars.Int8.__init__"]], "list (class in polars)": [[46, "polars.List"]], "__init__() (polars.list method)": [[46, "polars.List.__init__"]], "null (class in polars)": [[47, "polars.Null"]], "__init__() (polars.null method)": [[47, "polars.Null.__init__"]], "object (class in polars)": [[48, "polars.Object"]], "__init__() (polars.object method)": [[48, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[49, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[50, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[51, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[52, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[53, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[54, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[55, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[55, "polars.StringCache.__init__"]], "struct (class in polars)": [[56, "polars.Struct"]], "__init__() (polars.struct method)": [[56, "polars.Struct.__init__"]], "time (class in polars)": [[57, "polars.Time"]], "__init__() (polars.time method)": [[57, "polars.Time.__init__"]], "uint16 (class in polars)": [[58, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[58, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[59, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[59, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[60, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[60, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[61, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[61, "polars.UInt8.__init__"]], "unknown (class in polars)": [[62, "polars.Unknown"]], "__init__() (polars.unknown method)": [[62, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[63, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[63, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[64, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[65, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[66, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[67, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[68, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[69, "polars.arg_where"]], "build_info() (in module polars)": [[70, "polars.build_info"]], "collect_all() (in module polars)": [[71, "polars.collect_all"]], "concat() (in module polars)": [[72, "polars.concat"]], "cut() (in module polars)": [[73, "polars.cut"]], "date_range() (in module polars)": [[74, "polars.date_range"]], "enable_string_cache() (in module polars)": [[75, "polars.enable_string_cache"]], "arrowerror": [[76, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[77, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[78, "polars.exceptions.ComputeError"]], "duplicateerror": [[79, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[80, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[81, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[82, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[83, "polars.exceptions.PolarsPanicError"]], "rowserror": [[84, "polars.exceptions.RowsError"]], "schemaerror": [[85, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[86, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[87, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[88, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[89, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[90, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[91, "polars.from_dataframe"]], "from_dict() (in module polars)": [[92, "polars.from_dict"]], "from_dicts() (in module polars)": [[93, "polars.from_dicts"]], "from_numpy() (in module polars)": [[94, "polars.from_numpy"]], "from_pandas() (in module polars)": [[95, "polars.from_pandas"]], "from_records() (in module polars)": [[96, "polars.from_records"]], "from_repr() (in module polars)": [[97, "polars.from_repr"]], "get_dummies() (in module polars)": [[98, "polars.get_dummies"]], "get_index_type() (in module polars)": [[99, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[100, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[101, "polars.ones"]], "read_avro() (in module polars)": [[102, "polars.read_avro"]], "read_csv() (in module polars)": [[103, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[104, "polars.read_csv_batched"]], "read_database() (in module polars)": [[105, "polars.read_database"]], "read_delta() (in module polars)": [[106, "polars.read_delta"]], "read_excel() (in module polars)": [[107, "polars.read_excel"]], "read_ipc() (in module polars)": [[108, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[109, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[110, "polars.read_json"]], "read_ndjson() (in module polars)": [[111, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[112, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[113, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[114, "polars.scan_csv"]], "scan_delta() (in module polars)": [[115, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[116, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[117, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[118, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[119, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[120, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[121, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[122, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[123, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[123, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[124, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[125, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[126, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[127, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[128, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[129, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[130, "polars.threadpool_size"]], "time_range() (in module polars)": [[131, "polars.time_range"]], "zeros() (in module polars)": [[132, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[135, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[136, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[137, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[138, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[139, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[140, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[141, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[142, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[143, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[144, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[145, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[146, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[147, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[148, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[149, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[150, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[151, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[152, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[153, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[154, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[155, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[156, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[157, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[158, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[159, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[160, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[161, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[162, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[163, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[164, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[165, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[166, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[167, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[168, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[169, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[170, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[171, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[172, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[173, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[174, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[175, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[176, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[177, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[178, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[179, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[180, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[181, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[182, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[183, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[184, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[185, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[186, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[187, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[188, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[189, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[190, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[191, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[192, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[193, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[194, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[195, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[196, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[197, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[198, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[199, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[200, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[201, "polars.DataFrame.select"]], "set_sorted() (polars.dataframe method)": [[202, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[203, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[204, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[205, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[206, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[207, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[208, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[209, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[210, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[211, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[212, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[213, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[214, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[215, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[216, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[217, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[218, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[219, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[220, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[221, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[222, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[223, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[224, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[225, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[226, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[227, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[228, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[229, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[230, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[231, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[232, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[233, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[241, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[242, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[243, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[244, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[245, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[246, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[247, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[248, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[249, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[261, "polars.Expr.abs"]], "add() (polars.expr method)": [[262, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[263, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[264, "polars.Expr.alias"]], "all() (polars.expr method)": [[265, "polars.Expr.all"]], "and_() (polars.expr method)": [[266, "polars.Expr.and_"]], "any() (polars.expr method)": [[267, "polars.Expr.any"]], "append() (polars.expr method)": [[268, "polars.Expr.append"]], "apply() (polars.expr method)": [[269, "polars.Expr.apply"]], "approx_unique() (polars.expr method)": [[270, "polars.Expr.approx_unique"]], "arccos() (polars.expr method)": [[271, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[272, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[273, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[274, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[275, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[276, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[277, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[278, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[279, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[280, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[281, "polars.Expr.arg_unique"]], "arg_max() (polars.expr.arr method)": [[282, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[283, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[284, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[285, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[286, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[287, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[288, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[289, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[290, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[291, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[292, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[293, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[294, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[295, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[296, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[297, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[298, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[299, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[300, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[301, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[302, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[303, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[304, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[305, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[306, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[307, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[308, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[309, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[310, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[311, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[312, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[313, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[314, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[315, "polars.Expr.cache"]], "cast() (polars.expr method)": [[316, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[317, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[318, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[319, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[320, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[321, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[322, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[323, "polars.Expr.cosh"]], "count() (polars.expr method)": [[324, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[325, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[326, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[327, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[328, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[329, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[330, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[331, "polars.Expr.diff"]], "dot() (polars.expr method)": [[332, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[333, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[334, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[335, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[336, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[337, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[338, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[339, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[340, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[341, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[342, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[343, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[344, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[345, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[346, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[347, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[348, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[349, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[350, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[351, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[352, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[353, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[354, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[355, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[356, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[357, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[358, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[359, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[360, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[361, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[362, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[363, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[364, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[365, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[366, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[367, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[368, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[369, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[370, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[371, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[372, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[373, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[374, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[375, "polars.Expr.eq"]], "ewm_mean() (polars.expr method)": [[376, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[377, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[378, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[379, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[380, "polars.Expr.exp"]], "explode() (polars.expr method)": [[381, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[382, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[383, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[384, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[385, "polars.Expr.filter"]], "first() (polars.expr method)": [[386, "polars.Expr.first"]], "flatten() (polars.expr method)": [[387, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[388, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[389, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[390, "polars.Expr.forward_fill"]], "ge() (polars.expr method)": [[391, "polars.Expr.ge"]], "gt() (polars.expr method)": [[392, "polars.Expr.gt"]], "hash() (polars.expr method)": [[393, "polars.Expr.hash"]], "head() (polars.expr method)": [[394, "polars.Expr.head"]], "implode() (polars.expr method)": [[395, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[396, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[397, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[398, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[399, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[400, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[401, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[402, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[403, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[404, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[405, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[406, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[407, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[408, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[409, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[410, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[411, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[412, "polars.Expr.last"]], "le() (polars.expr method)": [[413, "polars.Expr.le"]], "len() (polars.expr method)": [[414, "polars.Expr.len"]], "limit() (polars.expr method)": [[415, "polars.Expr.limit"]], "log() (polars.expr method)": [[416, "polars.Expr.log"]], "log10() (polars.expr method)": [[417, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[418, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[419, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[420, "polars.Expr.lt"]], "map() (polars.expr method)": [[421, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[422, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[423, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[424, "polars.Expr.max"]], "mean() (polars.expr method)": [[425, "polars.Expr.mean"]], "median() (polars.expr method)": [[426, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[427, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[428, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[429, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[430, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[431, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[432, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[433, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[434, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[435, "polars.Expr.min"]], "mod() (polars.expr method)": [[436, "polars.Expr.mod"]], "mode() (polars.expr method)": [[437, "polars.Expr.mode"]], "mul() (polars.expr method)": [[438, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[439, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[440, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[441, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[442, "polars.Expr.ne"]], "null_count() (polars.expr method)": [[443, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[444, "polars.Expr.or_"]], "over() (polars.expr method)": [[445, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[446, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[447, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[448, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[449, "polars.Expr.prefix"]], "product() (polars.expr method)": [[450, "polars.Expr.product"]], "quantile() (polars.expr method)": [[451, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[452, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[453, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[454, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[455, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[456, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[457, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[458, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[459, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[460, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[461, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[462, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[463, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[464, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[465, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[466, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[467, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[468, "polars.Expr.round"]], "sample() (polars.expr method)": [[469, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[470, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[471, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[472, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[473, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[474, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[475, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[476, "polars.Expr.sign"]], "sin() (polars.expr method)": [[477, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[478, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[479, "polars.Expr.skew"]], "slice() (polars.expr method)": [[480, "polars.Expr.slice"]], "sort() (polars.expr method)": [[481, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[482, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[483, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[484, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[485, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[486, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[487, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[488, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[489, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[490, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[491, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[492, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[493, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[494, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[495, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[496, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[497, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[498, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[499, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[500, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[501, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[502, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[503, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[504, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[505, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[506, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[507, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[508, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[509, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[510, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[511, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[512, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[513, "polars.Expr.str.to_datetime"]], "to_lowercase() (polars.expr.str method)": [[514, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[515, "polars.Expr.str.to_time"]], "to_uppercase() (polars.expr.str method)": [[516, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[517, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[518, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[519, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[520, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[521, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[522, "polars.Expr.sum"]], "tail() (polars.expr method)": [[523, "polars.Expr.tail"]], "take() (polars.expr method)": [[524, "polars.Expr.take"]], "take_every() (polars.expr method)": [[525, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[526, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[527, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[528, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[529, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[530, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[531, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[532, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[533, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[534, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[535, "polars.Expr.var"]], "where() (polars.expr method)": [[536, "polars.Expr.where"]], "xor() (polars.expr method)": [[537, "polars.Expr.xor"]], "all() (in module polars)": [[538, "polars.all"]], "any() (in module polars)": [[539, "polars.any"]], "apply() (in module polars)": [[540, "polars.apply"]], "approx_unique() (in module polars)": [[541, "polars.approx_unique"]], "arange() (in module polars)": [[542, "polars.arange"]], "arg_sort_by() (in module polars)": [[543, "polars.arg_sort_by"]], "avg() (in module polars)": [[544, "polars.avg"]], "coalesce() (in module polars)": [[545, "polars.coalesce"]], "col() (in module polars)": [[546, "polars.col"]], "concat_list() (in module polars)": [[547, "polars.concat_list"]], "concat_str() (in module polars)": [[548, "polars.concat_str"]], "corr() (in module polars)": [[549, "polars.corr"]], "count() (in module polars)": [[550, "polars.count"]], "cov() (in module polars)": [[551, "polars.cov"]], "cumfold() (in module polars)": [[552, "polars.cumfold"]], "cumreduce() (in module polars)": [[553, "polars.cumreduce"]], "cumsum() (in module polars)": [[554, "polars.cumsum"]], "date() (in module polars)": [[555, "polars.date"]], "datetime() (in module polars)": [[556, "polars.datetime"]], "duration() (in module polars)": [[557, "polars.duration"]], "element() (in module polars)": [[558, "polars.element"]], "exclude() (in module polars)": [[559, "polars.exclude"]], "first() (in module polars)": [[560, "polars.first"]], "fold() (in module polars)": [[561, "polars.fold"]], "format() (in module polars)": [[562, "polars.format"]], "from_epoch() (in module polars)": [[563, "polars.from_epoch"]], "groups() (in module polars)": [[564, "polars.groups"]], "head() (in module polars)": [[565, "polars.head"]], "list() (in module polars)": [[566, "polars.list"]], "lit() (in module polars)": [[567, "polars.lit"]], "map() (in module polars)": [[568, "polars.map"]], "max() (in module polars)": [[569, "polars.max"]], "mean() (in module polars)": [[570, "polars.mean"]], "median() (in module polars)": [[571, "polars.median"]], "min() (in module polars)": [[572, "polars.min"]], "n_unique() (in module polars)": [[573, "polars.n_unique"]], "pearson_corr() (in module polars)": [[574, "polars.pearson_corr"]], "quantile() (in module polars)": [[575, "polars.quantile"]], "reduce() (in module polars)": [[576, "polars.reduce"]], "repeat() (in module polars)": [[577, "polars.repeat"]], "rolling_corr() (in module polars)": [[578, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[579, "polars.rolling_cov"]], "select() (in module polars)": [[580, "polars.select"]], "spearman_rank_corr() (in module polars)": [[581, "polars.spearman_rank_corr"]], "std() (in module polars)": [[582, "polars.std"]], "struct() (in module polars)": [[583, "polars.struct"]], "sum() (in module polars)": [[584, "polars.sum"]], "tail() (in module polars)": [[585, "polars.tail"]], "time() (in module polars)": [[586, "polars.time"]], "var() (in module polars)": [[587, "polars.var"]], "when() (in module polars)": [[588, "polars.when"]], "bottom_k() (polars.lazyframe method)": [[609, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[610, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[611, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[612, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[613, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[614, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[615, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[616, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[617, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[618, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[619, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[620, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[621, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[622, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[623, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[624, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[625, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[626, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[627, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[628, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[629, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[630, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[631, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[632, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[633, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[634, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[635, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[636, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[637, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[638, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[639, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[640, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[641, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[642, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[643, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[644, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[645, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[646, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[647, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[648, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[649, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[650, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[651, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[652, "polars.LazyFrame.select"]], "set_sorted() (polars.lazyframe method)": [[653, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[654, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[655, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[656, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[657, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[658, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[659, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[660, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[661, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[662, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[663, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[664, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[665, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[666, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[667, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[668, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[669, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[670, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[671, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[672, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[673, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[674, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[675, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[676, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[677, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[678, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[679, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[680, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[681, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[682, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[683, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[684, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[685, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[686, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[687, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[688, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[689, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[697, "polars.Series.abs"]], "alias() (polars.series method)": [[698, "polars.Series.alias"]], "all() (polars.series method)": [[699, "polars.Series.all"]], "any() (polars.series method)": [[700, "polars.Series.any"]], "append() (polars.series method)": [[701, "polars.Series.append"]], "apply() (polars.series method)": [[702, "polars.Series.apply"]], "arccos() (polars.series method)": [[703, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[704, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[705, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[706, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[707, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[708, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[709, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[710, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[711, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[712, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[713, "polars.Series.arg_unique"]], "arr (polars.series attribute)": [[714, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[715, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[716, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[717, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[718, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[719, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[720, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[721, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[722, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[723, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[724, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[725, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[726, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[727, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[728, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[729, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[730, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[731, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[732, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[733, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[734, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[735, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[736, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[737, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[738, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[739, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[740, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[741, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[742, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[743, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[744, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[745, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[746, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[747, "polars.Series.cast"]], "cat (polars.series attribute)": [[748, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[749, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[750, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[751, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[752, "polars.Series.clear"]], "clip() (polars.series method)": [[753, "polars.Series.clip"]], "clip_max() (polars.series method)": [[754, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[755, "polars.Series.clip_min"]], "clone() (polars.series method)": [[756, "polars.Series.clone"]], "cos() (polars.series method)": [[757, "polars.Series.cos"]], "cosh() (polars.series method)": [[758, "polars.Series.cosh"]], "cummax() (polars.series method)": [[759, "polars.Series.cummax"]], "cummin() (polars.series method)": [[760, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[761, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[762, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[763, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[764, "polars.Series.cut"]], "describe() (polars.series method)": [[765, "polars.Series.describe"]], "diff() (polars.series method)": [[766, "polars.Series.diff"]], "dot() (polars.series method)": [[767, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[768, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[769, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[770, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[771, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[772, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[773, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[774, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[775, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[776, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[777, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[778, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[779, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[780, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[781, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[782, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[783, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[784, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[785, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[786, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[787, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[788, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[789, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[790, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[791, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[792, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[793, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[794, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[795, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[796, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[797, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[798, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[799, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[800, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[801, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[802, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[803, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[804, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[805, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[806, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[807, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[808, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[809, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[810, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[811, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[812, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[813, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[814, "polars.Series.dtype"]], "entropy() (polars.series method)": [[815, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[816, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[817, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[818, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[819, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[820, "polars.Series.exp"]], "explode() (polars.series method)": [[821, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[822, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[823, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[824, "polars.Series.fill_null"]], "filter() (polars.series method)": [[825, "polars.Series.filter"]], "flags (polars.series attribute)": [[826, "polars.Series.flags"]], "floor() (polars.series method)": [[827, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[828, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[829, "polars.Series.has_validity"]], "hash() (polars.series method)": [[830, "polars.Series.hash"]], "head() (polars.series method)": [[831, "polars.Series.head"]], "hist() (polars.series method)": [[832, "polars.Series.hist"]], "implode() (polars.series method)": [[833, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[834, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[835, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[836, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[837, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[838, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[839, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[840, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[841, "polars.Series.is_first"]], "is_float() (polars.series method)": [[842, "polars.Series.is_float"]], "is_in() (polars.series method)": [[843, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[844, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[845, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[846, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[847, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[848, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[849, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[850, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[851, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[852, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[853, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[854, "polars.Series.is_utf8"]], "item() (polars.series method)": [[855, "polars.Series.item"]], "kurtosis() (polars.series method)": [[856, "polars.Series.kurtosis"]], "len() (polars.series method)": [[857, "polars.Series.len"]], "limit() (polars.series method)": [[858, "polars.Series.limit"]], "log() (polars.series method)": [[859, "polars.Series.log"]], "log10() (polars.series method)": [[860, "polars.Series.log10"]], "log1p() (polars.series method)": [[861, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[862, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[863, "polars.Series.map_dict"]], "max() (polars.series method)": [[864, "polars.Series.max"]], "mean() (polars.series method)": [[865, "polars.Series.mean"]], "median() (polars.series method)": [[866, "polars.Series.median"]], "min() (polars.series method)": [[867, "polars.Series.min"]], "mode() (polars.series method)": [[868, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[869, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[870, "polars.Series.n_unique"]], "name (polars.series attribute)": [[871, "polars.Series.name"]], "nan_max() (polars.series method)": [[872, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[873, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[874, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[875, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[876, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[877, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[878, "polars.Series.peak_min"]], "product() (polars.series method)": [[879, "polars.Series.product"]], "qcut() (polars.series method)": [[880, "polars.Series.qcut"]], "quantile() (polars.series method)": [[881, "polars.Series.quantile"]], "rank() (polars.series method)": [[882, "polars.Series.rank"]], "rechunk() (polars.series method)": [[883, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[884, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[885, "polars.Series.rename"]], "reshape() (polars.series method)": [[886, "polars.Series.reshape"]], "reverse() (polars.series method)": [[887, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[888, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[889, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[890, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[891, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[892, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[893, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[894, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[895, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[896, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[897, "polars.Series.rolling_var"]], "round() (polars.series method)": [[898, "polars.Series.round"]], "sample() (polars.series method)": [[899, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[900, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[901, "polars.Series.series_equal"]], "set() (polars.series method)": [[902, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[903, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[904, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[905, "polars.Series.shape"]], "shift() (polars.series method)": [[906, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[907, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[908, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[909, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[910, "polars.Series.shuffle"]], "sign() (polars.series method)": [[911, "polars.Series.sign"]], "sin() (polars.series method)": [[912, "polars.Series.sin"]], "sinh() (polars.series method)": [[913, "polars.Series.sinh"]], "skew() (polars.series method)": [[914, "polars.Series.skew"]], "slice() (polars.series method)": [[915, "polars.Series.slice"]], "sort() (polars.series method)": [[916, "polars.Series.sort"]], "sqrt() (polars.series method)": [[917, "polars.Series.sqrt"]], "std() (polars.series method)": [[918, "polars.Series.std"]], "str (polars.series attribute)": [[919, "polars.Series.str"]], "concat() (polars.series.str method)": [[920, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[921, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[922, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[923, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[924, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[925, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[926, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[927, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[928, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[929, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[930, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[931, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[932, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[933, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[934, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[935, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[936, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[937, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[938, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[939, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[940, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[941, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[942, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[943, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[944, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[945, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[946, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[947, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[948, "polars.Series.str.to_datetime"]], "to_lowercase() (polars.series.str method)": [[949, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[950, "polars.Series.str.to_time"]], "to_uppercase() (polars.series.str method)": [[951, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[952, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[953, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[954, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[955, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[956, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[957, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[958, "polars.Series.sum"]], "tail() (polars.series method)": [[959, "polars.Series.tail"]], "take() (polars.series method)": [[960, "polars.Series.take"]], "take_every() (polars.series method)": [[961, "polars.Series.take_every"]], "tan() (polars.series method)": [[962, "polars.Series.tan"]], "tanh() (polars.series method)": [[963, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[964, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[965, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[966, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[967, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[968, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[969, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[970, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[971, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[972, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[973, "polars.Series.top_k"]], "unique() (polars.series method)": [[974, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[975, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[976, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[977, "polars.Series.value_counts"]], "var() (polars.series method)": [[978, "polars.Series.var"]], "view() (polars.series method)": [[979, "polars.Series.view"]], "zip_with() (polars.series method)": [[980, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[995, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[995, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[995, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[995, "polars.SQLContext.__init__"]]}})