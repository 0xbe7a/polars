Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.date_range", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.time_range", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.date_range.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.time_range.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.date_range", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.time_range", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.diff", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.any", "polars.apply", "polars.approx_unique", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.time", "polars.var", "polars.when", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.diff", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 91, 118, 134, 135, 236, 254, 268, 598, 705, 997], "refer": [0, 31, 102, 103, 106, 140, 254, 342, 345, 426, 455, 495, 514, 515, 516, 519, 598, 785, 788, 889, 953, 954, 955, 958, 997], "input": [0, 65, 93, 102, 103, 106, 135, 136, 147, 158, 186, 200, 207, 221, 231, 234, 254, 261, 268, 356, 375, 420, 435, 448, 485, 541, 542, 543, 544, 547, 549, 550, 551, 552, 558, 563, 564, 572, 573, 576, 585, 586, 598, 609, 612, 622, 629, 655, 663, 668, 674, 678, 696, 705, 816, 867, 868, 870, 997], "output": [0, 26, 28, 31, 32, 33, 34, 74, 106, 130, 135, 159, 160, 171, 181, 188, 197, 200, 227, 231, 254, 263, 268, 424, 425, 434, 538, 544, 553, 572, 598, 609, 630, 631, 640, 644, 645, 655, 674, 677, 680, 696, 705, 985, 997], "seri": [0, 1, 23, 66, 67, 68, 69, 70, 73, 74, 90, 92, 95, 97, 100, 121, 125, 130, 131, 135, 143, 151, 153, 155, 156, 161, 164, 165, 167, 169, 177, 178, 182, 193, 194, 209, 213, 216, 219, 220, 235, 254, 267, 268, 270, 271, 272, 273, 274, 275, 278, 279, 286, 294, 295, 299, 300, 312, 314, 318, 321, 325, 327, 329, 334, 338, 339, 341, 346, 349, 358, 359, 365, 373, 375, 377, 378, 379, 380, 381, 383, 384, 385, 393, 394, 395, 400, 403, 404, 411, 412, 415, 416, 417, 422, 424, 451, 455, 456, 457, 458, 459, 461, 473, 474, 477, 480, 481, 488, 503, 508, 514, 515, 516, 519, 522, 528, 529, 530, 531, 537, 542, 543, 544, 545, 546, 548, 554, 556, 557, 558, 564, 565, 567, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 583, 584, 585, 586, 587, 589, 598, 609, 626, 679, 696, 989, 991, 993, 996, 998, 1001, 1002, 1003, 1005], "datafram": [0, 1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 72, 73, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 117, 120, 122, 123, 130, 252, 253, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 569, 572, 573, 574, 575, 576, 577, 579, 583, 584, 585, 586, 587, 589, 590, 598, 609, 616, 618, 622, 623, 627, 630, 635, 636, 637, 638, 640, 644, 645, 649, 653, 660, 661, 662, 663, 669, 670, 671, 674, 675, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 696, 704, 705, 719, 720, 729, 744, 745, 781, 812, 846, 887, 937, 949, 950, 965, 974, 975, 985, 997, 1004, 1005], "lazyfram": [0, 1, 50, 51, 53, 55, 65, 66, 67, 68, 69, 72, 73, 113, 114, 115, 116, 117, 118, 120, 125, 130, 175, 187, 254, 362, 417, 598, 609, 695, 1004, 1005], "express": [0, 70, 72, 74, 100, 122, 125, 127, 130, 131, 135, 136, 147, 149, 151, 158, 184, 188, 196, 200, 207, 221, 231, 234, 236, 254, 261, 263, 264, 265, 267, 268, 279, 292, 296, 297, 298, 301, 307, 309, 313, 331, 332, 335, 342, 352, 356, 359, 362, 366, 368, 369, 373, 375, 379, 382, 387, 390, 391, 397, 399, 417, 422, 423, 424, 425, 426, 430, 431, 432, 433, 434, 435, 439, 441, 445, 447, 448, 450, 451, 452, 453, 458, 472, 473, 474, 476, 478, 483, 485, 489, 490, 495, 496, 497, 498, 504, 505, 524, 525, 528, 534, 535, 537, 540, 541, 542, 543, 546, 547, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 571, 572, 573, 576, 579, 580, 581, 582, 583, 585, 586, 588, 590, 597, 609, 612, 616, 621, 622, 623, 626, 629, 649, 655, 658, 659, 660, 661, 663, 668, 674, 675, 678, 680, 696, 705, 733, 734, 735, 743, 752, 774, 775, 778, 802, 816, 844, 846, 907, 914, 928, 929, 934, 935, 936, 937, 943, 944, 997], "extend": [0, 93, 254, 359, 598, 609, 704, 802, 997], "function": [0, 31, 65, 66, 67, 68, 69, 91, 97, 102, 103, 106, 113, 123, 135, 140, 146, 153, 180, 187, 188, 218, 222, 225, 226, 236, 254, 264, 268, 307, 339, 353, 354, 355, 417, 424, 425, 448, 450, 461, 462, 463, 464, 465, 466, 468, 469, 470, 482, 532, 542, 543, 544, 556, 557, 558, 564, 565, 567, 572, 573, 576, 579, 586, 598, 609, 640, 644, 648, 671, 680, 696, 705, 743, 782, 796, 797, 798, 799, 812, 864, 887, 895, 909, 910, 916, 921, 979, 997, 1005], "data": [0, 1, 6, 16, 19, 29, 30, 31, 32, 36, 50, 56, 65, 66, 68, 73, 75, 80, 81, 85, 87, 90, 91, 92, 93, 94, 95, 96, 100, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 120, 121, 123, 124, 125, 127, 131, 134, 135, 138, 148, 157, 158, 159, 160, 171, 172, 173, 175, 186, 187, 191, 196, 197, 205, 212, 217, 218, 231, 233, 252, 254, 265, 268, 281, 282, 283, 284, 293, 312, 340, 349, 352, 368, 369, 374, 381, 383, 390, 418, 423, 445, 447, 448, 455, 471, 472, 482, 495, 496, 514, 515, 516, 519, 532, 534, 535, 541, 550, 571, 580, 598, 609, 614, 615, 623, 629, 630, 631, 648, 660, 661, 674, 696, 704, 705, 719, 720, 727, 732, 736, 749, 751, 792, 812, 865, 889, 905, 906, 916, 921, 953, 954, 955, 958, 977, 978, 979, 980, 982, 987, 996, 997, 1004], "type": [0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 74, 80, 90, 92, 93, 94, 95, 96, 100, 102, 103, 105, 106, 113, 114, 119, 120, 121, 124, 125, 130, 131, 135, 153, 157, 159, 160, 161, 172, 212, 218, 220, 223, 254, 268, 293, 294, 296, 297, 298, 314, 318, 321, 325, 327, 329, 334, 338, 341, 356, 370, 377, 379, 380, 404, 417, 426, 458, 509, 510, 511, 514, 532, 544, 550, 559, 560, 561, 563, 564, 571, 580, 588, 598, 609, 616, 621, 623, 630, 631, 649, 659, 660, 661, 669, 696, 727, 729, 733, 734, 735, 753, 757, 760, 767, 769, 772, 777, 781, 784, 810, 851, 864, 916, 948, 949, 950, 953, 977, 978, 980, 988, 997, 1004], "config": [0, 65, 200, 231, 254, 561, 609, 655, 674, 696], "except": [0, 162, 174, 176, 210, 254, 563, 609, 636, 696, 811, 838, 967, 978, 987, 997], "test": [0, 106, 609, 632, 639, 696], "util": [0, 97, 567, 609, 623, 696], "sql": [0, 29, 50, 54, 104, 173, 254, 609], "These": [1, 31, 132, 254, 346, 597, 789], "allow": [1, 30, 31, 56, 80, 91, 113, 115, 116, 117, 118, 125, 127, 134, 171, 174, 175, 196, 197, 198, 218, 223, 233, 254, 335, 342, 345, 457, 472, 514, 515, 516, 598, 635, 636, 640, 644, 660, 661, 669, 675, 696, 778, 785, 788, 891, 906, 908, 953, 954, 955, 979, 997, 1005], "you": [1, 13, 31, 35, 55, 65, 73, 90, 92, 93, 94, 96, 100, 102, 103, 106, 107, 111, 113, 120, 131, 132, 135, 144, 148, 159, 160, 171, 184, 196, 197, 214, 217, 222, 236, 254, 268, 296, 297, 298, 331, 332, 338, 342, 345, 362, 375, 399, 417, 424, 426, 457, 462, 463, 464, 465, 466, 468, 469, 470, 499, 502, 514, 516, 546, 556, 565, 580, 598, 616, 619, 630, 631, 632, 636, 639, 659, 661, 696, 704, 705, 733, 734, 735, 774, 775, 781, 785, 788, 816, 846, 891, 938, 941, 953, 955, 978, 987, 997, 1005], "regist": [1, 50, 52, 53, 54, 55, 66, 67, 68, 69, 126, 128, 1004], "custom": [1, 31, 66, 67, 68, 69, 126, 127, 128, 135, 236, 254, 268, 342, 345, 417, 424, 461, 544, 572, 598, 640, 680, 696, 705, 785, 788, 864, 895, 997, 1005], "dedic": [1, 91, 171, 197, 254], "namespac": [1, 253, 597, 609, 695], "underli": [1, 76, 83, 90, 92, 93, 94, 96, 111, 122, 125, 127, 148, 171, 172, 197, 212, 254, 287, 312, 313, 317, 320, 322, 323, 324, 326, 328, 330, 333, 336, 337, 338, 340, 347, 348, 349, 350, 457, 471, 489, 491, 598, 696, 704, 722, 751, 752, 756, 759, 761, 762, 766, 768, 771, 773, 776, 779, 780, 781, 783, 790, 791, 792, 793, 891, 905, 916, 928, 930, 973, 978, 997], "polar": [1, 254, 597, 598, 603, 609, 696, 997, 1004], "class": [1, 2, 3, 4, 5, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 95, 122, 123, 218, 254, 598, 603, 609, 696, 977, 978, 997, 1004], "without": [1, 6, 97, 105, 108, 112, 114, 118, 225, 226, 254, 268, 307, 339, 462, 463, 464, 465, 466, 468, 469, 470, 583, 598, 671, 696, 743, 749, 782, 812, 887, 997], "requir": [1, 30, 31, 35, 65, 95, 120, 121, 140, 196, 218, 254, 284, 353, 354, 355, 418, 477, 514, 515, 516, 535, 580, 598, 661, 696, 720, 797, 798, 799, 865, 915, 953, 954, 955, 978, 979, 982, 997], "subclass": [1, 254], "mixin": 1, "expr": [1, 65, 66, 67, 68, 69, 70, 74, 100, 130, 131, 147, 149, 151, 173, 174, 184, 188, 196, 200, 231, 254, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 598, 599, 600, 603, 604, 605, 606, 622, 624, 626, 635, 636, 650, 655, 658, 674, 696, 743, 752, 803, 844, 846, 850, 859, 862, 914, 928, 932, 951, 968, 997], "ar": [1, 6, 11, 15, 18, 26, 30, 31, 55, 56, 65, 74, 75, 82, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 118, 120, 121, 123, 125, 132, 134, 135, 136, 140, 144, 146, 149, 153, 158, 159, 160, 171, 174, 175, 180, 181, 186, 196, 197, 200, 201, 207, 213, 218, 221, 226, 227, 231, 234, 254, 264, 303, 305, 306, 310, 311, 339, 346, 351, 353, 354, 355, 375, 377, 379, 380, 381, 383, 384, 385, 388, 417, 426, 448, 455, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 479, 482, 484, 485, 499, 502, 503, 514, 516, 526, 542, 543, 546, 547, 549, 551, 552, 553, 558, 573, 576, 585, 586, 590, 591, 592, 594, 597, 598, 599, 600, 603, 604, 605, 606, 609, 612, 619, 624, 629, 630, 631, 632, 636, 639, 640, 644, 645, 649, 652, 655, 656, 660, 661, 663, 668, 671, 674, 675, 678, 696, 702, 704, 741, 742, 782, 789, 795, 796, 797, 798, 799, 809, 816, 820, 823, 824, 826, 827, 828, 829, 836, 864, 889, 893, 895, 901, 918, 921, 938, 941, 942, 953, 955, 966, 978, 979, 987, 989, 991, 993, 997, 998, 1001, 1002, 1003, 1005], "all": [1, 8, 15, 18, 23, 26, 31, 36, 52, 65, 72, 74, 90, 93, 95, 96, 102, 103, 105, 106, 107, 111, 113, 115, 116, 122, 123, 127, 141, 144, 150, 162, 167, 169, 171, 172, 175, 176, 180, 183, 184, 191, 196, 197, 206, 210, 215, 223, 225, 227, 254, 265, 266, 267, 285, 301, 307, 311, 356, 367, 370, 372, 374, 377, 380, 384, 385, 387, 391, 399, 404, 414, 417, 424, 425, 440, 446, 452, 455, 460, 477, 483, 485, 490, 496, 498, 501, 504, 505, 507, 513, 525, 538, 550, 558, 563, 565, 570, 579, 585, 586, 590, 598, 603, 609, 616, 619, 621, 623, 625, 640, 644, 649, 659, 662, 669, 675, 696, 743, 745, 749, 811, 818, 833, 838, 846, 851, 861, 864, 889, 922, 929, 935, 937, 940, 943, 944, 946, 952, 967, 997, 1004, 1005], "support": [1, 30, 31, 35, 73, 90, 91, 92, 93, 94, 95, 96, 97, 104, 105, 106, 114, 122, 127, 132, 134, 171, 172, 197, 206, 207, 214, 218, 254, 412, 448, 483, 485, 508, 550, 598, 603, 662, 663, 696, 859, 922, 947, 979, 997, 1004], "target": [1, 30, 31, 71, 254, 346, 495, 514, 515, 516, 934, 953, 954, 955], "thi": [1, 6, 8, 12, 13, 26, 28, 30, 31, 33, 35, 39, 50, 51, 55, 56, 65, 72, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 99, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 130, 132, 134, 135, 140, 144, 145, 146, 148, 153, 158, 159, 160, 161, 165, 167, 169, 170, 171, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 186, 189, 190, 191, 196, 197, 198, 200, 204, 206, 208, 209, 212, 214, 217, 218, 222, 223, 225, 226, 227, 228, 229, 231, 232, 236, 237, 253, 254, 264, 267, 268, 269, 278, 284, 291, 292, 294, 301, 307, 312, 323, 331, 332, 335, 338, 339, 342, 345, 349, 358, 373, 374, 375, 379, 391, 399, 400, 404, 413, 417, 418, 421, 422, 424, 430, 431, 432, 433, 434, 435, 443, 444, 448, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 468, 469, 470, 472, 474, 476, 477, 478, 483, 484, 485, 495, 500, 501, 506, 507, 513, 514, 516, 517, 521, 533, 535, 536, 537, 538, 542, 543, 545, 546, 551, 554, 556, 558, 564, 565, 567, 573, 576, 580, 583, 586, 598, 609, 610, 613, 616, 619, 621, 623, 629, 630, 631, 633, 636, 640, 644, 645, 649, 652, 655, 658, 659, 660, 661, 662, 669, 671, 674, 675, 676, 677, 680, 681, 695, 696, 704, 705, 714, 720, 726, 729, 743, 749, 751, 752, 762, 774, 775, 778, 781, 782, 785, 788, 792, 796, 801, 808, 809, 812, 817, 822, 823, 825, 830, 832, 834, 835, 837, 846, 847, 851, 860, 865, 869, 871, 872, 873, 874, 876, 877, 879, 880, 882, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 899, 902, 903, 904, 906, 909, 910, 911, 914, 915, 916, 917, 922, 923, 925, 934, 939, 940, 945, 946, 952, 953, 955, 956, 960, 961, 965, 966, 973, 975, 977, 978, 979, 981, 982, 984, 986, 987, 997, 1004, 1005], "featur": [1, 35, 39, 56, 71, 254], "i": [1, 6, 12, 13, 15, 28, 30, 31, 32, 33, 34, 39, 50, 55, 56, 65, 70, 71, 72, 73, 74, 77, 79, 80, 82, 86, 88, 90, 91, 92, 93, 94, 95, 96, 99, 102, 103, 104, 105, 107, 111, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 127, 129, 130, 134, 135, 144, 146, 154, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 174, 175, 176, 178, 180, 181, 184, 186, 187, 188, 196, 197, 198, 206, 207, 208, 209, 210, 212, 218, 222, 223, 225, 226, 227, 228, 236, 237, 253, 254, 261, 264, 266, 267, 268, 269, 279, 292, 301, 307, 313, 322, 335, 339, 342, 346, 353, 354, 355, 358, 370, 373, 375, 388, 399, 402, 412, 416, 417, 421, 424, 426, 430, 433, 435, 448, 455, 457, 459, 462, 463, 464, 465, 466, 468, 469, 470, 472, 473, 474, 478, 479, 482, 483, 484, 485, 487, 489, 490, 495, 496, 498, 500, 501, 503, 504, 506, 507, 508, 511, 513, 514, 515, 516, 519, 521, 538, 539, 542, 543, 545, 546, 550, 551, 553, 554, 556, 557, 558, 565, 571, 573, 576, 580, 581, 582, 583, 584, 586, 589, 590, 598, 616, 619, 621, 623, 629, 630, 631, 634, 636, 638, 640, 644, 645, 649, 659, 660, 661, 662, 663, 664, 669, 671, 672, 677, 680, 681, 696, 703, 704, 705, 743, 752, 761, 778, 782, 785, 789, 796, 797, 798, 799, 801, 809, 810, 811, 812, 815, 817, 819, 825, 830, 831, 832, 834, 835, 836, 838, 846, 849, 859, 863, 864, 887, 889, 891, 893, 906, 907, 908, 909, 910, 911, 917, 918, 921, 922, 925, 928, 929, 934, 935, 937, 939, 940, 942, 943, 945, 946, 947, 950, 952, 953, 954, 955, 958, 960, 967, 973, 978, 979, 985, 986, 987, 997, 1004, 1005], "primarili": 1, "intend": 1, "us": [1, 10, 12, 13, 18, 23, 24, 28, 29, 31, 35, 50, 51, 52, 53, 55, 56, 65, 73, 74, 91, 93, 94, 96, 98, 100, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 126, 127, 129, 130, 131, 135, 142, 144, 149, 150, 153, 158, 159, 160, 167, 169, 171, 172, 174, 178, 180, 183, 184, 187, 188, 196, 198, 200, 207, 208, 209, 215, 216, 218, 222, 223, 225, 226, 227, 228, 231, 234, 236, 254, 262, 268, 269, 279, 287, 288, 292, 294, 307, 310, 311, 338, 342, 345, 349, 351, 353, 354, 355, 361, 362, 374, 375, 388, 399, 417, 424, 426, 429, 448, 455, 457, 459, 462, 463, 464, 465, 466, 468, 469, 470, 472, 474, 477, 478, 482, 484, 485, 487, 489, 491, 492, 493, 495, 496, 499, 500, 504, 506, 508, 510, 512, 514, 515, 516, 519, 539, 542, 543, 544, 545, 546, 550, 552, 553, 556, 558, 565, 567, 571, 573, 576, 580, 581, 582, 583, 584, 585, 586, 589, 597, 598, 609, 616, 618, 619, 624, 625, 629, 630, 631, 632, 636, 638, 639, 644, 655, 661, 663, 664, 669, 671, 672, 674, 678, 680, 696, 705, 722, 723, 729, 743, 781, 785, 788, 792, 795, 797, 798, 799, 803, 804, 809, 812, 816, 836, 846, 864, 870, 889, 891, 893, 906, 909, 910, 911, 915, 917, 921, 925, 928, 930, 931, 934, 935, 938, 939, 943, 945, 947, 949, 953, 954, 955, 958, 968, 974, 976, 977, 978, 979, 986, 987, 997, 1004, 1005], "librari": [1, 76, 83, 424, 598, 1005], "author": 1, "domain": [1, 496, 935], "specif": [1, 26, 30, 31, 90, 92, 94, 96, 102, 104, 105, 114, 124, 125, 171, 254, 342, 345, 461, 514, 515, 516, 519, 598, 696, 785, 788, 895, 953, 954, 955, 958, 997, 1005], "capabl": [1, 31, 254], "which": [1, 18, 27, 28, 31, 32, 33, 34, 35, 65, 66, 67, 68, 69, 93, 102, 103, 104, 105, 106, 113, 114, 120, 126, 128, 136, 144, 148, 159, 160, 217, 221, 223, 254, 264, 342, 359, 375, 377, 380, 381, 383, 384, 385, 417, 435, 462, 463, 464, 465, 466, 468, 469, 470, 503, 590, 598, 612, 619, 621, 630, 631, 660, 661, 668, 669, 677, 696, 704, 785, 802, 816, 820, 824, 826, 827, 828, 829, 864, 909, 942, 997, 1005], "mai": [1, 30, 39, 73, 90, 92, 93, 94, 96, 102, 105, 107, 114, 115, 118, 135, 146, 148, 174, 203, 204, 218, 225, 226, 254, 268, 307, 312, 323, 339, 411, 416, 417, 434, 462, 463, 464, 465, 466, 468, 469, 470, 475, 476, 514, 516, 556, 557, 565, 579, 598, 636, 640, 657, 658, 661, 671, 676, 680, 696, 704, 705, 743, 751, 762, 782, 796, 812, 858, 863, 887, 913, 914, 953, 955, 997, 1005], "exist": [1, 29, 30, 31, 65, 105, 114, 125, 231, 254, 313, 346, 674, 696, 752], "belong": [1, 159, 254, 630, 696], "core": [1, 218, 254, 1005], "cannot": [1, 91, 102, 103, 106, 107, 120, 129, 135, 198, 236, 254, 287, 426, 472, 491, 510, 523, 598, 659, 696, 705, 722, 906, 930, 949, 997], "overrid": [1, 31, 90, 92, 93, 94, 95, 96, 102, 122, 123, 127, 129, 254, 426, 598, 696, 870, 997], "str": [1, 7, 9, 12, 14, 15, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 71, 74, 75, 90, 92, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 123, 125, 126, 127, 128, 130, 136, 139, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 155, 157, 158, 159, 160, 162, 164, 167, 169, 170, 171, 173, 174, 177, 178, 179, 180, 181, 182, 184, 186, 188, 190, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 261, 262, 263, 268, 309, 314, 335, 338, 339, 342, 345, 346, 356, 360, 362, 364, 373, 375, 382, 395, 396, 402, 403, 404, 412, 415, 417, 425, 426, 434, 436, 448, 450, 452, 458, 460, 462, 463, 464, 465, 466, 468, 469, 470, 476, 477, 484, 485, 522, 523, 525, 528, 540, 541, 542, 544, 545, 548, 550, 552, 553, 554, 555, 556, 557, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 575, 577, 578, 579, 580, 581, 582, 584, 585, 587, 588, 589, 598, 604, 612, 616, 617, 618, 619, 621, 622, 623, 626, 628, 629, 630, 631, 633, 635, 636, 644, 645, 649, 651, 652, 653, 656, 658, 659, 660, 661, 662, 663, 668, 669, 670, 671, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 696, 701, 727, 744, 745, 753, 778, 781, 782, 785, 788, 789, 804, 843, 844, 851, 864, 870, 879, 880, 887, 892, 909, 910, 961, 963, 974, 975, 976, 997, 1001, 1004, 1005], "dt": [1, 65, 74, 160, 254, 561, 606, 631, 696, 1003], "attempt": [1, 217, 254], "do": [1, 31, 65, 72, 73, 100, 113, 131, 148, 159, 160, 174, 212, 222, 225, 254, 307, 399, 448, 501, 507, 513, 580, 598, 616, 621, 630, 631, 636, 640, 649, 659, 660, 661, 696, 704, 743, 846, 940, 946, 952, 978, 987, 997], "so": [1, 56, 104, 113, 129, 157, 159, 160, 188, 254, 279, 292, 375, 402, 417, 501, 507, 513, 598, 630, 631, 696, 849, 940, 946, 952], "rais": [1, 14, 18, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 120, 121, 196, 254, 287, 338, 416, 434, 489, 491, 503, 514, 515, 516, 519, 571, 722, 781, 863, 928, 930, 942, 953, 954, 955, 958, 978, 987, 997], "an": [1, 6, 26, 29, 30, 31, 39, 66, 68, 69, 70, 72, 74, 76, 80, 81, 83, 90, 100, 102, 103, 104, 105, 106, 108, 111, 113, 115, 123, 125, 127, 130, 131, 135, 137, 138, 146, 149, 151, 153, 159, 160, 171, 172, 174, 184, 188, 194, 196, 212, 217, 225, 231, 236, 254, 263, 264, 268, 287, 293, 296, 297, 298, 302, 303, 304, 305, 306, 307, 313, 338, 342, 349, 359, 362, 387, 397, 399, 402, 416, 417, 424, 425, 435, 453, 461, 462, 463, 464, 465, 466, 468, 469, 470, 489, 491, 496, 514, 515, 516, 519, 528, 534, 542, 543, 546, 550, 558, 562, 567, 571, 573, 576, 579, 580, 583, 585, 586, 590, 598, 609, 614, 615, 616, 621, 623, 626, 630, 631, 636, 640, 649, 659, 674, 675, 680, 696, 705, 722, 727, 732, 733, 734, 735, 736, 739, 740, 741, 742, 743, 752, 781, 785, 792, 796, 802, 825, 844, 846, 849, 863, 895, 896, 897, 898, 899, 900, 902, 903, 904, 909, 910, 928, 930, 935, 953, 954, 955, 958, 978, 987, 997, 1004], "attributeerror": 1, "howev": [1, 93, 146, 254, 796, 997], "can": [1, 13, 31, 55, 65, 74, 81, 93, 102, 103, 106, 107, 111, 113, 115, 117, 118, 123, 124, 125, 127, 129, 130, 132, 135, 136, 137, 145, 153, 159, 160, 167, 169, 184, 188, 200, 207, 217, 221, 222, 225, 231, 236, 254, 268, 292, 303, 306, 307, 331, 332, 335, 338, 346, 359, 374, 375, 399, 417, 434, 440, 448, 457, 462, 463, 464, 465, 466, 468, 469, 470, 474, 477, 479, 482, 485, 498, 501, 507, 513, 514, 516, 538, 546, 547, 550, 565, 567, 590, 597, 598, 612, 616, 621, 630, 631, 655, 663, 668, 674, 676, 696, 705, 743, 774, 775, 778, 781, 789, 802, 816, 846, 864, 875, 891, 909, 910, 911, 915, 918, 921, 937, 940, 946, 952, 953, 955, 997, 1004], "other": [1, 18, 31, 55, 74, 102, 103, 106, 113, 120, 121, 144, 148, 154, 173, 174, 180, 181, 196, 200, 226, 231, 252, 254, 261, 265, 267, 279, 296, 297, 298, 309, 352, 366, 368, 369, 375, 379, 390, 395, 423, 426, 430, 433, 439, 441, 445, 447, 485, 524, 532, 534, 541, 542, 543, 549, 551, 552, 558, 573, 576, 585, 586, 598, 609, 619, 635, 636, 644, 645, 655, 671, 674, 675, 696, 704, 733, 734, 735, 747, 823, 842, 908, 980, 988, 996, 997], "onli": [1, 18, 26, 31, 50, 52, 56, 65, 71, 73, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 125, 127, 132, 135, 144, 159, 160, 171, 174, 178, 197, 209, 214, 216, 227, 254, 262, 268, 279, 292, 295, 296, 297, 298, 335, 356, 365, 448, 457, 536, 598, 616, 619, 630, 631, 632, 636, 639, 696, 730, 733, 734, 735, 778, 807, 825, 891, 973, 976, 997, 1004, 1005], "gener": [1, 104, 122, 123, 124, 125, 127, 130, 140, 188, 198, 215, 222, 254, 472, 478, 580, 598, 696, 906, 917, 974, 997, 1005], "userwarn": 1, "pl": [1, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 99, 100, 102, 103, 104, 105, 106, 107, 113, 114, 118, 119, 120, 121, 122, 123, 124, 125, 127, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 585, 586, 587, 588, 589, 590, 598, 610, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 696, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 726, 727, 729, 730, 731, 732, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 798, 799, 802, 803, 804, 805, 807, 810, 811, 812, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 845, 846, 847, 850, 851, 853, 858, 859, 860, 862, 864, 869, 870, 871, 872, 873, 874, 875, 876, 877, 883, 884, 885, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 917, 918, 919, 920, 922, 923, 924, 925, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 958, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 997, 1004, 1005], "register_expr_namespac": [1, 66, 68, 69], "greet": 1, "def": [1, 66, 67, 68, 69, 123, 124, 125, 127, 187, 222, 254, 261, 450, 496, 541, 572, 598, 648, 696, 935, 1005], "__init__": [1, 2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 122, 1004], "self": [1, 51, 52, 53, 55, 66, 67, 68, 69, 72, 137, 138, 141, 148, 162, 164, 165, 176, 177, 178, 179, 180, 182, 185, 186, 188, 190, 191, 193, 194, 198, 203, 205, 206, 208, 209, 210, 215, 222, 224, 227, 228, 229, 232, 233, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 285, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 598, 612, 613, 615, 616, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 696, 704, 705, 727, 736, 805, 813, 869, 870, 881, 884, 885, 890, 909, 910, 911, 923, 984, 988, 997], "_expr": [1, 67], "hello": [1, 18, 51, 54, 501, 507, 513, 542, 851, 940, 946, 952], "return": [1, 26, 28, 31, 32, 33, 34, 50, 54, 65, 66, 67, 68, 69, 70, 71, 72, 74, 82, 84, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 112, 113, 114, 124, 130, 131, 135, 136, 137, 140, 143, 144, 145, 146, 147, 149, 150, 153, 157, 158, 159, 160, 162, 164, 170, 171, 172, 173, 175, 176, 183, 184, 186, 187, 188, 196, 197, 198, 210, 211, 217, 218, 221, 222, 223, 227, 231, 233, 236, 239, 243, 248, 254, 264, 266, 270, 271, 272, 273, 274, 275, 278, 279, 286, 288, 291, 299, 300, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 344, 346, 347, 348, 350, 358, 371, 375, 377, 378, 379, 380, 381, 383, 384, 385, 392, 393, 394, 396, 400, 402, 403, 404, 415, 416, 422, 426, 435, 440, 450, 458, 459, 472, 473, 479, 480, 481, 488, 490, 492, 494, 495, 496, 498, 499, 500, 502, 503, 506, 508, 509, 510, 511, 521, 527, 528, 529, 530, 531, 533, 534, 536, 537, 538, 541, 542, 543, 544, 546, 547, 550, 559, 560, 561, 567, 569, 571, 572, 580, 583, 585, 587, 588, 590, 598, 612, 614, 616, 619, 620, 621, 623, 630, 631, 632, 638, 639, 640, 648, 649, 659, 660, 661, 666, 667, 668, 669, 674, 677, 683, 687, 692, 696, 701, 702, 703, 705, 712, 713, 715, 716, 721, 723, 726, 732, 744, 745, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 786, 787, 789, 790, 791, 793, 796, 801, 809, 811, 812, 818, 820, 821, 823, 824, 826, 827, 828, 829, 833, 835, 838, 840, 841, 843, 847, 849, 850, 851, 862, 863, 869, 870, 875, 887, 893, 894, 906, 907, 908, 910, 918, 927, 928, 929, 931, 933, 934, 935, 937, 938, 939, 941, 942, 945, 947, 948, 949, 950, 960, 967, 969, 981, 983, 984, 988, 997, 1004, 1005], "lit": [1, 100, 131, 375, 387, 556, 565, 580, 590, 598, 804, 997], "alia": [1, 12, 65, 67, 69, 74, 130, 159, 160, 176, 224, 231, 254, 261, 265, 268, 291, 296, 297, 298, 302, 303, 304, 305, 306, 308, 312, 313, 314, 317, 318, 319, 321, 323, 324, 325, 327, 329, 334, 335, 336, 338, 339, 340, 341, 342, 344, 345, 346, 348, 349, 352, 362, 364, 366, 368, 369, 373, 375, 378, 379, 387, 390, 391, 392, 397, 399, 423, 425, 426, 437, 439, 441, 445, 447, 449, 451, 452, 455, 457, 473, 489, 490, 493, 495, 496, 499, 502, 508, 510, 511, 512, 522, 523, 524, 525, 532, 533, 534, 540, 541, 542, 543, 544, 548, 549, 551, 552, 556, 557, 558, 561, 562, 565, 566, 572, 573, 576, 579, 580, 585, 586, 590, 598, 630, 631, 633, 639, 670, 674, 696, 751, 753, 758, 778, 781, 785, 787, 792, 838, 846, 870, 934, 935, 949, 950, 997], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 18, 51, 54, 501, 507, 513, 851, 940, 946, 952], "select": [1, 29, 50, 51, 52, 65, 66, 67, 68, 70, 101, 102, 103, 104, 105, 107, 111, 113, 118, 124, 135, 170, 174, 184, 187, 196, 206, 219, 224, 227, 254, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 291, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 359, 363, 365, 367, 370, 372, 373, 374, 376, 377, 379, 380, 382, 386, 387, 388, 389, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 413, 414, 417, 418, 419, 420, 421, 422, 424, 425, 427, 428, 429, 438, 440, 442, 443, 444, 446, 447, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 494, 495, 496, 497, 498, 500, 501, 503, 506, 507, 509, 510, 511, 513, 514, 517, 518, 520, 522, 523, 525, 526, 529, 530, 531, 533, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 561, 563, 564, 565, 566, 567, 569, 573, 574, 575, 576, 577, 579, 580, 584, 585, 586, 587, 589, 598, 617, 633, 636, 648, 662, 670, 675, 677, 696, 719, 720, 781, 846, 909, 910, 922, 937, 953, 968, 997, 1004], "shape": [1, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 50, 51, 52, 54, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 87, 90, 92, 93, 94, 95, 96, 97, 100, 113, 118, 125, 127, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 173, 174, 177, 178, 179, 180, 182, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 198, 200, 203, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 569, 572, 573, 574, 575, 576, 577, 579, 580, 583, 584, 585, 586, 587, 589, 590, 598, 612, 614, 616, 618, 619, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 655, 657, 658, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 696, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 716, 717, 718, 719, 720, 726, 727, 729, 730, 732, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 798, 799, 802, 803, 804, 805, 807, 810, 811, 812, 815, 816, 818, 820, 823, 824, 826, 827, 828, 829, 833, 835, 845, 846, 847, 850, 851, 853, 858, 859, 860, 862, 864, 869, 870, 875, 883, 884, 885, 887, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 909, 910, 913, 917, 918, 919, 920, 922, 923, 924, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 958, 965, 967, 968, 969, 970, 971, 974, 975, 976, 980, 981, 982, 983, 984, 985, 988, 997, 1004], "3": [1, 10, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 50, 52, 53, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 100, 104, 106, 113, 118, 119, 120, 121, 124, 125, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 261, 262, 263, 264, 268, 278, 279, 280, 281, 282, 283, 284, 285, 291, 293, 294, 295, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 322, 328, 330, 336, 337, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 391, 392, 396, 397, 398, 399, 400, 401, 402, 403, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 425, 426, 439, 440, 441, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 482, 484, 485, 486, 489, 492, 493, 495, 496, 497, 499, 502, 504, 508, 509, 510, 511, 512, 515, 519, 522, 523, 524, 525, 527, 528, 529, 533, 536, 537, 538, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 562, 563, 564, 565, 566, 569, 571, 572, 573, 574, 575, 576, 579, 580, 583, 584, 585, 586, 587, 589, 590, 598, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 696, 701, 704, 705, 706, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 726, 727, 729, 730, 731, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 751, 752, 753, 756, 757, 758, 759, 761, 763, 764, 765, 767, 769, 770, 771, 773, 777, 779, 781, 782, 783, 785, 787, 788, 789, 791, 792, 796, 798, 799, 802, 803, 804, 805, 807, 810, 811, 812, 815, 816, 818, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 836, 837, 845, 846, 847, 850, 853, 858, 859, 860, 862, 864, 869, 870, 871, 872, 873, 874, 875, 876, 877, 883, 884, 885, 887, 888, 889, 892, 893, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 917, 919, 920, 921, 922, 923, 925, 931, 932, 934, 935, 936, 938, 941, 943, 947, 951, 954, 958, 965, 966, 967, 968, 969, 970, 971, 973, 974, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 997, 1004, 1005], "1": [1, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 100, 102, 103, 104, 105, 106, 107, 113, 114, 118, 119, 120, 121, 122, 125, 127, 130, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 291, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 589, 590, 598, 612, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 696, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 726, 727, 729, 730, 731, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 797, 798, 799, 802, 803, 804, 805, 807, 810, 811, 812, 815, 816, 818, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 835, 837, 845, 846, 847, 849, 850, 853, 858, 859, 860, 862, 864, 869, 871, 872, 873, 874, 875, 876, 877, 883, 884, 885, 887, 888, 889, 892, 893, 894, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 934, 936, 937, 943, 949, 950, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 997, 1004, 1005], "2": [1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 50, 52, 53, 55, 56, 65, 66, 67, 68, 69, 70, 73, 75, 90, 92, 93, 94, 95, 96, 97, 104, 113, 118, 119, 120, 121, 124, 125, 127, 130, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 175, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 265, 266, 267, 268, 269, 276, 278, 279, 280, 281, 282, 283, 284, 285, 291, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 308, 309, 313, 314, 318, 320, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 340, 341, 342, 345, 346, 349, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 439, 440, 441, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 482, 483, 484, 485, 486, 488, 490, 493, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 507, 508, 510, 511, 512, 513, 514, 516, 517, 518, 520, 522, 523, 524, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 575, 576, 577, 579, 583, 584, 585, 586, 587, 589, 590, 598, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 635, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 649, 650, 652, 653, 654, 655, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 696, 701, 704, 705, 707, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 726, 729, 730, 731, 732, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 752, 754, 755, 759, 764, 765, 771, 773, 774, 775, 780, 781, 782, 783, 786, 789, 791, 793, 795, 796, 797, 798, 799, 802, 803, 804, 805, 807, 810, 811, 812, 815, 816, 818, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 837, 845, 846, 847, 850, 851, 853, 858, 859, 860, 862, 864, 866, 869, 870, 871, 872, 873, 874, 875, 876, 877, 883, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 917, 919, 921, 922, 923, 924, 925, 927, 929, 934, 935, 936, 937, 940, 941, 942, 943, 944, 946, 949, 950, 952, 953, 955, 956, 965, 966, 967, 968, 969, 970, 973, 974, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 997, 1004, 1005], "column_0": [1, 135, 222, 254], "register_dataframe_namespac": [1, 67, 68, 69], "split": [1, 66, 172, 254, 510, 511, 949, 950], "splitfram": [1, 66], "df": [1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 50, 51, 66, 67, 70, 90, 91, 92, 93, 94, 95, 96, 97, 103, 113, 123, 125, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 569, 572, 573, 574, 575, 576, 577, 579, 583, 584, 585, 586, 587, 589, 590, 598, 631, 670, 671, 677, 680, 683, 692, 696, 719, 720, 729, 781, 846, 937, 944, 949, 950, 975, 997, 1005], "_df": [1, 66], "by_alternate_row": 1, "list": [1, 2, 30, 31, 38, 50, 54, 65, 66, 68, 72, 90, 92, 93, 94, 96, 97, 99, 101, 102, 103, 104, 105, 107, 111, 113, 114, 123, 124, 125, 127, 130, 139, 142, 145, 146, 147, 151, 156, 158, 159, 164, 171, 183, 186, 196, 197, 200, 207, 213, 214, 222, 223, 224, 225, 231, 234, 235, 254, 262, 284, 358, 364, 372, 424, 435, 436, 448, 458, 459, 461, 462, 463, 464, 465, 466, 468, 469, 470, 484, 485, 496, 509, 522, 523, 528, 532, 546, 547, 550, 551, 558, 562, 570, 571, 585, 586, 598, 617, 618, 620, 622, 626, 629, 630, 644, 655, 663, 669, 670, 674, 675, 678, 679, 696, 720, 731, 744, 796, 801, 805, 808, 812, 813, 823, 887, 893, 895, 896, 897, 898, 899, 900, 902, 903, 904, 907, 935, 948, 968, 977, 980, 997, 1005], "with_row_count": [1, 254, 426, 598, 696, 910, 997], "name": [1, 16, 20, 22, 29, 31, 33, 51, 52, 53, 54, 55, 66, 67, 68, 69, 73, 74, 79, 90, 92, 93, 94, 95, 96, 101, 102, 103, 105, 106, 107, 108, 111, 112, 113, 115, 116, 117, 121, 122, 123, 125, 126, 127, 128, 130, 135, 136, 139, 142, 143, 144, 147, 152, 155, 157, 158, 170, 171, 173, 174, 180, 186, 188, 192, 196, 197, 199, 200, 207, 213, 215, 217, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 254, 263, 268, 356, 375, 387, 417, 425, 434, 436, 448, 452, 485, 496, 522, 523, 525, 542, 543, 545, 547, 549, 550, 551, 552, 553, 555, 558, 563, 569, 570, 573, 576, 578, 580, 581, 582, 585, 586, 587, 598, 612, 617, 618, 619, 622, 629, 635, 636, 644, 652, 654, 655, 663, 668, 669, 670, 671, 674, 676, 677, 678, 696, 701, 732, 744, 864, 887, 892, 934, 935, 943, 961, 963, 974, 975, 979, 997, 1004, 1005], "n": [1, 12, 15, 23, 34, 38, 40, 52, 53, 66, 67, 68, 69, 74, 99, 100, 102, 103, 113, 131, 135, 137, 148, 159, 162, 171, 172, 176, 197, 198, 208, 210, 211, 214, 216, 228, 239, 248, 254, 291, 307, 308, 312, 313, 319, 344, 349, 359, 371, 392, 398, 403, 415, 417, 449, 450, 458, 472, 482, 487, 504, 510, 511, 516, 527, 529, 533, 534, 539, 541, 553, 567, 569, 580, 581, 582, 584, 587, 589, 598, 614, 616, 630, 632, 639, 664, 666, 667, 672, 683, 692, 696, 704, 726, 732, 743, 746, 751, 752, 758, 787, 792, 802, 811, 838, 845, 850, 862, 864, 883, 906, 921, 925, 943, 949, 950, 955, 967, 969, 976, 981, 986, 997, 1004, 1005], "filter": [1, 66, 105, 113, 114, 118, 144, 167, 168, 169, 236, 254, 493, 512, 540, 565, 598, 619, 623, 633, 680, 696, 909, 997], "col": [1, 12, 28, 31, 65, 66, 67, 68, 70, 94, 96, 113, 123, 125, 135, 147, 151, 158, 159, 160, 168, 170, 184, 187, 196, 200, 207, 224, 231, 234, 254, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 291, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 359, 362, 363, 364, 365, 366, 368, 369, 373, 374, 375, 376, 378, 379, 381, 382, 383, 386, 387, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 413, 414, 417, 418, 419, 420, 421, 422, 423, 426, 427, 428, 429, 438, 439, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 517, 518, 520, 521, 522, 523, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 549, 551, 552, 556, 557, 558, 561, 564, 565, 566, 567, 568, 573, 576, 578, 579, 586, 590, 598, 622, 626, 629, 630, 631, 633, 648, 655, 663, 670, 674, 675, 678, 696, 719, 720, 729, 778, 781, 846, 893, 909, 910, 937, 953, 997, 1005], "0": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 35, 50, 55, 65, 66, 67, 69, 70, 74, 100, 102, 103, 104, 106, 107, 111, 113, 115, 116, 117, 118, 119, 122, 123, 124, 125, 127, 130, 131, 135, 137, 138, 140, 141, 142, 145, 149, 150, 153, 154, 156, 157, 158, 159, 161, 165, 170, 171, 172, 173, 175, 177, 178, 179, 182, 183, 184, 185, 188, 189, 190, 194, 198, 199, 200, 204, 206, 207, 208, 209, 215, 216, 217, 218, 219, 222, 225, 227, 228, 231, 232, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 260, 262, 265, 270, 271, 272, 273, 274, 275, 278, 279, 280, 293, 295, 297, 298, 299, 300, 302, 307, 310, 311, 320, 324, 325, 327, 328, 334, 340, 341, 352, 353, 354, 355, 357, 359, 360, 361, 365, 366, 368, 369, 370, 374, 377, 380, 381, 383, 384, 385, 387, 388, 390, 393, 394, 397, 399, 402, 408, 417, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 438, 439, 441, 443, 444, 445, 446, 447, 449, 450, 451, 454, 455, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 477, 479, 480, 481, 482, 486, 487, 495, 496, 514, 516, 521, 524, 526, 530, 531, 532, 534, 539, 546, 547, 548, 549, 551, 553, 555, 556, 560, 562, 565, 574, 575, 578, 579, 580, 588, 589, 590, 598, 614, 615, 618, 620, 624, 625, 629, 630, 635, 638, 643, 647, 649, 650, 654, 655, 658, 659, 661, 663, 664, 672, 674, 675, 676, 678, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 696, 706, 707, 708, 709, 710, 711, 712, 714, 716, 727, 730, 732, 737, 738, 743, 744, 745, 747, 759, 763, 764, 765, 766, 767, 768, 769, 770, 771, 776, 777, 783, 784, 795, 797, 798, 799, 803, 807, 810, 812, 820, 822, 824, 826, 827, 828, 829, 835, 836, 846, 849, 864, 869, 872, 873, 883, 887, 888, 889, 895, 897, 898, 900, 901, 902, 904, 905, 906, 918, 919, 920, 924, 925, 927, 934, 935, 937, 953, 955, 960, 970, 971, 974, 979, 980, 984, 986, 987, 997, 1005], "drop": [1, 93, 135, 143, 144, 223, 231, 254, 308, 310, 311, 398, 598, 619, 669, 674, 696, 746, 748, 749, 845, 997], "aaa": [1, 31, 254, 489, 522, 523, 928], "bbb": [1, 31, 254, 522, 523], "ccc": [1, 31, 254, 522, 523], "ddd": [1, 31, 254, 522, 523], "eee": [1, 31, 254], "fff": 1, "column": [1, 15, 16, 19, 20, 22, 31, 33, 56, 65, 66, 73, 74, 77, 79, 90, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 120, 125, 130, 131, 134, 135, 136, 142, 143, 144, 145, 147, 152, 155, 157, 158, 159, 160, 164, 165, 170, 171, 173, 174, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 207, 208, 209, 213, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 234, 254, 264, 266, 268, 278, 313, 317, 320, 322, 323, 324, 326, 328, 330, 333, 336, 337, 340, 342, 345, 347, 348, 350, 356, 358, 362, 364, 375, 387, 395, 400, 413, 416, 417, 426, 432, 434, 436, 448, 452, 456, 458, 459, 462, 463, 464, 465, 466, 468, 469, 470, 477, 484, 485, 494, 510, 511, 514, 515, 516, 517, 519, 525, 540, 542, 543, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 598, 612, 618, 619, 620, 622, 629, 630, 631, 635, 636, 640, 641, 642, 643, 644, 646, 647, 648, 650, 652, 654, 655, 656, 663, 664, 665, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 680, 696, 702, 703, 744, 754, 755, 756, 759, 761, 762, 766, 768, 771, 773, 776, 779, 780, 783, 785, 786, 788, 790, 791, 793, 801, 842, 847, 860, 863, 887, 893, 915, 933, 949, 950, 953, 954, 955, 956, 958, 965, 974, 975, 997, 1005], "txt": [1, 12, 113], "utf8": [1, 10, 18, 56, 75, 93, 97, 102, 103, 113, 122, 124, 127, 145, 146, 147, 153, 199, 217, 254, 342, 345, 404, 426, 488, 492, 495, 496, 498, 499, 508, 509, 510, 511, 514, 515, 516, 517, 519, 550, 552, 598, 620, 622, 654, 696, 785, 788, 834, 851, 927, 931, 934, 935, 937, 938, 947, 948, 949, 950, 953, 954, 955, 956, 958, 997], "register_lazyframe_namespac": [1, 66, 67, 69], "dtypeoper": [1, 68], "ldf": [1, 68, 678, 679, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691], "_ldf": [1, 68], "upcast_integer_typ": [1, 68], "with_column": [1, 12, 68, 130, 160, 187, 254, 261, 268, 279, 293, 294, 296, 297, 298, 303, 306, 308, 338, 342, 345, 352, 366, 368, 369, 370, 374, 375, 378, 381, 383, 384, 385, 387, 390, 399, 423, 425, 426, 439, 441, 445, 448, 449, 450, 451, 455, 489, 493, 496, 499, 502, 504, 505, 508, 510, 511, 512, 521, 524, 532, 534, 541, 544, 546, 549, 552, 558, 562, 572, 586, 590, 598, 631, 648, 696, 729, 781, 846], "tp": [1, 68], "cast": [1, 67, 68, 75, 90, 153, 159, 160, 187, 218, 231, 254, 267, 294, 305, 306, 312, 342, 345, 426, 447, 450, 457, 497, 498, 521, 526, 532, 552, 598, 630, 631, 648, 674, 696, 729, 741, 742, 751, 785, 788, 891, 936, 937, 966, 975, 980, 997], "int64": [1, 31, 33, 67, 68, 97, 102, 145, 153, 159, 160, 187, 199, 212, 218, 254, 281, 282, 283, 284, 305, 306, 318, 321, 325, 327, 329, 334, 341, 356, 450, 457, 497, 526, 532, 546, 550, 563, 571, 580, 585, 598, 620, 630, 631, 648, 654, 677, 696, 717, 718, 719, 720, 741, 742, 757, 760, 767, 769, 772, 777, 784, 891, 908, 966, 978, 979, 980, 997], "int8": [1, 68, 100, 131, 153, 254, 305, 306, 526, 580, 598, 741, 742, 746, 870, 894, 966, 984, 997], "int16": [1, 68, 305, 306, 526, 598, 741, 742, 870, 966, 976, 997], "int32": [1, 68, 90, 93, 97, 124, 125, 159, 160, 172, 254, 293, 323, 350, 532, 580, 598, 630, 631, 696, 762, 793, 869, 980, 997], "b": [1, 27, 28, 30, 32, 35, 52, 53, 55, 56, 68, 73, 75, 90, 92, 93, 94, 95, 96, 97, 106, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 164, 165, 167, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 261, 263, 267, 268, 280, 285, 293, 294, 301, 309, 310, 311, 356, 360, 361, 362, 364, 367, 370, 372, 374, 375, 377, 380, 381, 382, 383, 384, 385, 387, 391, 395, 399, 404, 406, 425, 440, 446, 448, 450, 452, 455, 460, 477, 483, 485, 494, 497, 504, 525, 536, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 562, 563, 564, 565, 566, 569, 572, 573, 574, 575, 576, 577, 579, 581, 582, 584, 585, 586, 587, 589, 598, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 632, 635, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 696, 704, 729, 745, 747, 795, 796, 804, 816, 823, 834, 846, 892, 908, 933, 936, 943, 965, 979, 983, 997, 1004], "4": [1, 15, 23, 27, 28, 30, 31, 32, 35, 50, 52, 53, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 113, 119, 120, 121, 127, 130, 135, 136, 137, 138, 141, 144, 147, 148, 149, 150, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 178, 180, 183, 184, 186, 187, 188, 189, 193, 197, 202, 207, 210, 211, 212, 213, 214, 215, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 265, 267, 268, 280, 281, 282, 283, 285, 291, 293, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 313, 317, 321, 328, 329, 330, 336, 337, 339, 340, 341, 342, 345, 346, 347, 348, 350, 352, 357, 360, 361, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 384, 385, 387, 390, 391, 392, 397, 398, 399, 400, 403, 411, 412, 415, 420, 423, 425, 426, 439, 441, 445, 447, 448, 450, 451, 452, 454, 455, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 473, 475, 476, 479, 483, 484, 485, 486, 489, 499, 500, 502, 503, 504, 506, 508, 510, 511, 514, 522, 523, 524, 525, 527, 528, 529, 532, 533, 534, 541, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 562, 564, 565, 569, 571, 572, 573, 574, 575, 576, 577, 584, 585, 586, 587, 589, 590, 598, 612, 614, 615, 616, 619, 621, 622, 623, 624, 625, 627, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 648, 649, 650, 657, 658, 659, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 696, 704, 707, 714, 717, 718, 719, 726, 730, 731, 733, 743, 745, 747, 759, 760, 766, 768, 771, 772, 773, 774, 775, 776, 780, 782, 783, 784, 785, 788, 789, 790, 791, 803, 804, 811, 812, 815, 816, 818, 823, 826, 827, 828, 829, 833, 845, 846, 847, 850, 858, 859, 862, 870, 876, 883, 884, 885, 887, 889, 893, 898, 900, 901, 902, 903, 904, 906, 908, 918, 922, 923, 928, 938, 939, 941, 942, 945, 947, 949, 950, 953, 965, 967, 968, 969, 976, 979, 980, 981, 988, 997, 1005], "c": [1, 27, 28, 30, 32, 35, 52, 53, 55, 56, 66, 68, 73, 75, 93, 95, 97, 106, 113, 123, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 151, 152, 153, 154, 156, 157, 158, 159, 162, 164, 165, 172, 173, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 192, 194, 195, 196, 198, 199, 200, 203, 204, 206, 207, 208, 209, 210, 212, 216, 217, 218, 219, 221, 222, 225, 226, 228, 229, 231, 234, 237, 238, 239, 240, 241, 242, 244, 247, 248, 254, 261, 268, 375, 387, 395, 404, 406, 448, 450, 477, 510, 514, 536, 538, 542, 543, 545, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 564, 565, 566, 569, 572, 573, 574, 575, 576, 577, 584, 586, 587, 589, 598, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 629, 630, 635, 638, 644, 647, 649, 652, 653, 654, 655, 659, 662, 663, 668, 671, 674, 675, 678, 681, 682, 683, 684, 685, 686, 688, 691, 692, 696, 745, 816, 834, 949, 953, 983, 997], "5": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 32, 35, 53, 55, 65, 66, 68, 69, 70, 73, 90, 93, 94, 95, 96, 97, 99, 103, 119, 125, 135, 137, 138, 141, 147, 148, 149, 150, 153, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 168, 170, 171, 174, 175, 176, 178, 180, 183, 184, 186, 188, 189, 190, 193, 197, 202, 207, 210, 211, 212, 213, 214, 217, 220, 225, 227, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 261, 262, 265, 291, 293, 294, 295, 296, 297, 298, 307, 308, 309, 313, 314, 318, 338, 340, 341, 342, 345, 347, 355, 356, 359, 365, 366, 368, 369, 371, 372, 375, 378, 381, 383, 384, 385, 387, 390, 392, 397, 399, 400, 403, 408, 414, 415, 439, 441, 447, 448, 449, 450, 452, 454, 455, 459, 460, 461, 462, 463, 465, 469, 471, 473, 479, 485, 490, 498, 499, 502, 503, 521, 524, 525, 527, 529, 533, 534, 544, 545, 548, 549, 551, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 569, 571, 572, 573, 574, 575, 576, 577, 579, 584, 586, 587, 589, 598, 614, 615, 616, 621, 622, 623, 624, 625, 627, 629, 630, 631, 632, 634, 636, 637, 638, 639, 642, 643, 644, 649, 657, 658, 659, 662, 663, 664, 665, 666, 667, 673, 674, 676, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 696, 704, 707, 711, 714, 726, 729, 731, 733, 739, 743, 744, 745, 746, 747, 752, 753, 754, 755, 756, 757, 781, 783, 784, 785, 786, 788, 790, 791, 799, 802, 811, 812, 815, 816, 846, 847, 850, 853, 862, 869, 870, 876, 883, 884, 885, 887, 888, 889, 893, 895, 896, 897, 899, 900, 903, 906, 908, 918, 924, 929, 937, 938, 942, 967, 981, 984, 988, 997, 1005], "6": [1, 27, 28, 30, 31, 32, 33, 34, 35, 53, 55, 66, 68, 73, 90, 93, 94, 95, 96, 135, 139, 142, 143, 144, 145, 147, 148, 151, 152, 154, 155, 156, 157, 159, 160, 162, 164, 165, 166, 168, 170, 171, 173, 177, 178, 179, 180, 182, 185, 188, 189, 190, 192, 193, 194, 196, 197, 198, 199, 200, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 224, 225, 226, 227, 228, 229, 231, 232, 239, 247, 248, 254, 261, 265, 268, 285, 293, 305, 306, 309, 313, 335, 337, 340, 351, 360, 361, 367, 371, 372, 374, 392, 400, 447, 453, 455, 456, 459, 462, 463, 464, 465, 466, 468, 469, 470, 473, 485, 490, 494, 499, 502, 503, 524, 527, 529, 541, 542, 544, 556, 557, 558, 562, 565, 572, 586, 598, 616, 617, 618, 619, 620, 621, 622, 623, 626, 627, 630, 631, 632, 634, 635, 637, 639, 640, 644, 647, 649, 652, 654, 655, 657, 658, 659, 662, 663, 666, 667, 670, 671, 673, 674, 676, 677, 683, 691, 692, 696, 704, 731, 737, 741, 742, 747, 778, 791, 812, 847, 876, 889, 893, 898, 900, 901, 902, 904, 908, 929, 933, 938, 942, 966, 997, 1004, 1005], "7": [1, 27, 28, 30, 31, 32, 33, 34, 35, 55, 66, 68, 73, 74, 119, 139, 140, 141, 142, 143, 145, 147, 151, 152, 154, 159, 160, 162, 164, 166, 173, 177, 178, 179, 182, 185, 188, 190, 192, 194, 196, 198, 199, 200, 203, 204, 206, 208, 209, 210, 211, 216, 217, 218, 219, 225, 226, 227, 228, 229, 254, 261, 265, 283, 306, 313, 317, 336, 338, 339, 346, 348, 350, 357, 371, 374, 392, 426, 447, 455, 459, 463, 469, 485, 517, 527, 529, 544, 556, 557, 565, 572, 586, 598, 617, 618, 620, 622, 626, 630, 631, 632, 634, 635, 639, 647, 650, 652, 654, 655, 666, 667, 671, 677, 696, 711, 719, 752, 756, 762, 781, 782, 789, 791, 835, 870, 893, 903, 956, 997, 1005], "float32": [1, 28, 68, 153, 216, 217, 254, 571, 696, 819, 869, 997], "lazi": [1, 50, 51, 52, 53, 55, 68, 73, 100, 113, 125, 131, 174, 187, 254, 268, 567, 580, 598, 609, 635, 636, 675, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 696, 1004, 1005], "i16": [1, 68, 477, 598, 870, 976, 997, 1005], "i32": [1, 68, 90, 93, 97, 124, 125, 200, 254, 293, 323, 350, 477, 503, 590, 598, 655, 696, 762, 793, 869, 942, 997, 1005], "f32": [1, 68, 144, 216, 254, 399, 455, 477, 562, 598, 619, 696, 846, 869, 889, 997], "i64": [1, 15, 19, 50, 52, 66, 67, 68, 69, 73, 90, 92, 93, 94, 95, 96, 97, 113, 135, 136, 137, 138, 139, 142, 144, 145, 147, 148, 150, 151, 155, 156, 157, 158, 159, 160, 162, 164, 165, 166, 167, 169, 173, 174, 177, 180, 182, 186, 187, 188, 189, 192, 193, 194, 195, 198, 200, 203, 204, 206, 207, 209, 210, 211, 213, 219, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 244, 247, 248, 254, 261, 263, 267, 268, 281, 282, 283, 284, 285, 291, 294, 296, 297, 298, 303, 304, 305, 306, 308, 309, 318, 319, 321, 325, 327, 329, 334, 341, 344, 356, 359, 361, 362, 363, 364, 366, 367, 371, 372, 373, 374, 375, 378, 381, 383, 384, 385, 387, 389, 392, 398, 399, 400, 401, 402, 403, 405, 407, 409, 410, 411, 412, 413, 414, 415, 418, 422, 424, 425, 439, 440, 441, 448, 449, 450, 451, 452, 453, 455, 456, 457, 459, 460, 472, 474, 475, 477, 478, 479, 483, 484, 485, 504, 505, 522, 523, 524, 525, 526, 527, 528, 529, 533, 534, 535, 537, 540, 542, 544, 546, 549, 550, 552, 556, 557, 558, 561, 562, 563, 564, 565, 569, 571, 572, 573, 576, 579, 583, 586, 587, 590, 598, 612, 614, 616, 618, 619, 622, 623, 625, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 644, 646, 648, 649, 652, 653, 655, 657, 658, 662, 663, 665, 666, 667, 668, 669, 670, 671, 674, 676, 678, 679, 680, 682, 683, 684, 685, 688, 691, 692, 696, 704, 705, 717, 718, 719, 720, 726, 729, 733, 736, 739, 740, 741, 742, 745, 757, 758, 760, 767, 769, 772, 777, 784, 787, 802, 804, 805, 811, 815, 823, 845, 846, 847, 850, 858, 859, 860, 862, 864, 875, 892, 893, 896, 899, 903, 906, 909, 910, 913, 917, 918, 922, 923, 965, 967, 968, 969, 975, 981, 982, 985, 988, 997, 1004, 1005], "register_series_namespac": [1, 66, 67, 68], "math": [1, 69, 737, 919, 970, 997], "mathshortcut": [1, 69], "": [1, 28, 31, 50, 53, 69, 90, 97, 102, 103, 114, 127, 136, 142, 144, 146, 147, 158, 159, 165, 173, 174, 186, 188, 193, 194, 200, 207, 211, 215, 221, 223, 224, 225, 254, 319, 342, 345, 356, 388, 403, 404, 411, 412, 415, 435, 440, 443, 444, 448, 449, 457, 461, 485, 489, 495, 496, 499, 500, 502, 504, 506, 508, 509, 511, 514, 515, 516, 519, 521, 522, 523, 542, 543, 547, 550, 553, 558, 563, 566, 567, 573, 576, 585, 586, 598, 612, 618, 619, 622, 629, 630, 636, 655, 663, 668, 669, 670, 680, 696, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 726, 727, 730, 731, 732, 733, 736, 737, 738, 739, 740, 741, 742, 743, 746, 747, 752, 758, 774, 775, 782, 785, 788, 789, 796, 798, 799, 802, 803, 804, 805, 807, 810, 811, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 845, 847, 850, 851, 853, 858, 859, 860, 862, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 883, 884, 885, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 917, 918, 919, 920, 922, 923, 925, 928, 929, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 945, 946, 947, 950, 951, 952, 953, 954, 955, 956, 958, 960, 963, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 997], "_": [1, 65, 69, 188, 215, 254, 496, 510, 935, 949, 974, 997], "squar": [1, 69, 236, 388, 486, 598, 680, 836, 924, 997], "cube": [1, 69, 451, 598], "s2": [1, 121, 153, 254, 704, 731, 747, 823, 835, 864, 876, 908, 979, 988, 997], "renam": [1, 93, 102, 103, 200, 231, 234, 254, 263, 425, 437, 523, 583, 585, 598, 655, 674, 678, 696, 963, 975, 997], "n2": [1, 417], "in_plac": [1, 164, 205, 229, 254, 890, 892, 916, 923, 997], "true": [1, 6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 50, 52, 54, 70, 72, 73, 74, 75, 90, 91, 95, 97, 99, 100, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 130, 131, 132, 134, 136, 137, 138, 141, 150, 153, 154, 156, 157, 158, 159, 160, 165, 167, 168, 169, 171, 174, 175, 178, 183, 184, 186, 188, 189, 196, 197, 198, 200, 207, 213, 217, 218, 221, 222, 223, 224, 225, 227, 231, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 262, 264, 265, 266, 267, 268, 279, 287, 293, 302, 303, 304, 305, 306, 312, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 368, 369, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 390, 396, 413, 416, 417, 423, 445, 447, 457, 467, 472, 477, 482, 484, 485, 489, 491, 493, 497, 498, 503, 509, 510, 512, 514, 515, 516, 519, 522, 523, 528, 535, 538, 541, 542, 543, 544, 546, 547, 553, 554, 565, 580, 585, 590, 598, 612, 614, 615, 616, 621, 623, 625, 629, 630, 631, 635, 636, 638, 640, 644, 649, 655, 659, 660, 661, 663, 668, 669, 670, 674, 679, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 696, 702, 703, 704, 705, 715, 722, 727, 731, 732, 751, 753, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 789, 790, 791, 792, 793, 795, 797, 798, 799, 805, 809, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 836, 860, 863, 876, 884, 885, 891, 901, 908, 921, 923, 928, 930, 932, 936, 937, 942, 948, 949, 951, 953, 954, 955, 958, 978, 979, 987, 988, 997, 1004, 1005], "s3": [1, 30, 105, 114, 118, 254, 864, 997], "n3": 1, "8": [1, 27, 28, 30, 32, 33, 34, 35, 46, 50, 55, 62, 64, 65, 66, 68, 69, 73, 119, 123, 125, 135, 139, 140, 141, 142, 143, 144, 145, 147, 151, 152, 154, 157, 162, 164, 173, 177, 178, 179, 182, 190, 192, 194, 196, 198, 199, 200, 203, 204, 206, 208, 209, 210, 211, 216, 217, 218, 219, 225, 226, 228, 229, 231, 254, 265, 267, 280, 301, 303, 306, 307, 310, 311, 313, 374, 391, 398, 399, 441, 447, 451, 452, 459, 460, 463, 464, 466, 468, 470, 477, 483, 485, 500, 506, 514, 525, 529, 541, 545, 548, 553, 554, 555, 557, 558, 562, 564, 569, 572, 573, 574, 575, 576, 577, 584, 586, 587, 589, 598, 617, 618, 619, 620, 622, 626, 632, 635, 639, 640, 649, 652, 654, 655, 666, 667, 671, 674, 677, 696, 743, 762, 812, 835, 845, 846, 883, 887, 893, 895, 898, 900, 901, 902, 904, 939, 945, 953, 997, 1005], "9": [1, 27, 28, 30, 32, 35, 50, 55, 65, 73, 135, 140, 141, 153, 160, 162, 166, 200, 210, 225, 226, 229, 231, 247, 254, 261, 265, 267, 280, 301, 303, 306, 310, 311, 313, 317, 336, 347, 348, 374, 379, 387, 391, 398, 410, 413, 447, 459, 461, 463, 469, 479, 483, 496, 517, 529, 544, 551, 556, 557, 598, 631, 632, 634, 639, 655, 666, 671, 674, 691, 696, 745, 756, 766, 768, 776, 782, 783, 789, 790, 823, 835, 845, 860, 893, 895, 903, 905, 918, 935, 956, 997], "27": [1, 69, 247, 306, 323, 337, 350, 598, 691, 997, 1005], "16": [1, 31, 43, 59, 67, 159, 160, 231, 254, 303, 306, 374, 441, 451, 463, 503, 544, 556, 561, 562, 565, 598, 630, 631, 659, 674, 696, 782, 789, 883, 919, 942, 970, 997], "64": [1, 42, 45, 61, 67, 69, 441, 451, 598, 661, 696, 883, 997], "25": [1, 31, 69, 74, 97, 125, 130, 141, 159, 160, 174, 227, 231, 254, 308, 323, 339, 346, 350, 534, 567, 598, 630, 631, 636, 642, 672, 674, 696, 745, 746, 782, 789, 795, 812, 883, 887, 997], "125": [1, 31, 69, 254, 261, 598, 883, 997], "arg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 187, 218, 254, 450, 547, 566, 598, 648, 696, 705, 978, 979, 997], "ani": [2, 3, 4, 5, 8, 28, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 71, 90, 91, 92, 93, 94, 95, 96, 102, 103, 105, 106, 107, 111, 113, 114, 115, 117, 122, 124, 125, 127, 132, 135, 140, 144, 148, 150, 151, 153, 170, 171, 172, 186, 187, 196, 197, 213, 214, 217, 218, 223, 225, 254, 261, 265, 268, 293, 340, 352, 361, 366, 368, 369, 379, 390, 395, 399, 423, 424, 426, 437, 439, 441, 445, 447, 448, 450, 459, 461, 473, 503, 514, 515, 516, 519, 524, 528, 534, 541, 542, 544, 553, 564, 571, 590, 598, 619, 625, 648, 669, 696, 704, 705, 747, 783, 804, 823, 835, 842, 846, 870, 893, 895, 907, 910, 942, 953, 954, 955, 958, 968, 977, 978, 979, 997, 1004, 1005], "kwarg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 140, 187, 218, 254, 450, 598, 648, 696, 979, 997, 1004], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 696, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 997, 1004], "width": [2, 24, 31, 102, 103, 254, 281, 282, 283, 284, 500, 506, 521, 696, 717, 718, 719, 720, 939, 945, 960], "int": [2, 12, 13, 15, 23, 24, 28, 31, 35, 39, 52, 55, 67, 93, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 123, 124, 125, 126, 127, 128, 129, 131, 135, 136, 137, 146, 149, 150, 152, 161, 162, 163, 165, 170, 171, 172, 174, 176, 177, 178, 182, 183, 184, 194, 196, 198, 202, 203, 204, 206, 208, 209, 210, 211, 216, 219, 221, 225, 228, 230, 232, 239, 248, 254, 261, 285, 291, 296, 297, 298, 307, 308, 353, 354, 355, 359, 360, 361, 367, 370, 371, 392, 396, 398, 402, 403, 411, 412, 415, 416, 417, 447, 449, 450, 451, 455, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 478, 483, 487, 495, 500, 503, 504, 506, 508, 510, 511, 517, 521, 527, 528, 529, 533, 539, 541, 546, 553, 554, 559, 560, 561, 567, 569, 575, 577, 580, 581, 582, 584, 585, 586, 587, 588, 589, 598, 612, 614, 623, 624, 625, 632, 636, 639, 649, 657, 658, 661, 662, 664, 666, 667, 668, 672, 673, 676, 683, 692, 696, 712, 713, 726, 727, 731, 732, 733, 734, 735, 743, 746, 796, 797, 798, 799, 802, 803, 804, 810, 811, 812, 835, 837, 838, 843, 844, 845, 849, 850, 858, 859, 862, 863, 864, 872, 876, 877, 879, 880, 881, 882, 883, 886, 889, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 913, 914, 917, 922, 925, 934, 939, 942, 943, 945, 947, 949, 950, 956, 960, 966, 967, 968, 969, 976, 981, 986, 997, 1004, 1005], "inner": [2, 47, 56, 75, 124, 173, 226, 254, 281, 282, 283, 284, 309, 404, 532, 598, 635, 671, 677, 696, 717, 718, 719, 720, 747, 851, 980, 997], "polarsdatatyp": [2, 47, 100, 102, 103, 108, 112, 113, 122, 123, 124, 125, 127, 131, 135, 145, 254, 268, 293, 356, 424, 426, 497, 544, 546, 550, 563, 571, 572, 580, 598, 620, 696, 705, 727, 870, 936, 997], "pythondatatyp": [2, 47], "null": [2, 28, 30, 52, 65, 73, 93, 102, 103, 113, 118, 134, 136, 137, 141, 144, 150, 153, 154, 166, 173, 178, 179, 185, 188, 190, 203, 204, 207, 208, 209, 213, 218, 221, 224, 226, 228, 231, 237, 254, 263, 267, 268, 278, 285, 287, 296, 297, 298, 301, 303, 306, 308, 310, 311, 318, 321, 325, 327, 329, 334, 341, 353, 354, 355, 356, 359, 360, 361, 362, 367, 374, 381, 382, 383, 384, 385, 391, 398, 401, 402, 405, 411, 416, 417, 426, 446, 449, 456, 461, 462, 463, 464, 465, 466, 468, 469, 470, 475, 476, 477, 479, 484, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 502, 503, 506, 508, 510, 511, 512, 521, 522, 523, 532, 540, 542, 549, 551, 552, 554, 563, 571, 581, 582, 585, 590, 598, 612, 614, 619, 625, 634, 635, 647, 657, 658, 663, 668, 670, 671, 674, 675, 677, 681, 696, 705, 714, 722, 732, 733, 746, 749, 757, 760, 767, 769, 772, 777, 784, 797, 798, 799, 802, 804, 809, 828, 829, 845, 858, 863, 864, 882, 883, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 908, 913, 914, 918, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 941, 942, 945, 947, 949, 950, 951, 976, 978, 979, 980, 987, 997, 1004, 1005], "nest": [2, 47, 56, 97, 146, 254, 609, 796, 997, 1004, 1005], "paramet": [2, 7, 11, 12, 13, 14, 15, 18, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 47, 50, 51, 52, 53, 55, 57, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 170, 171, 172, 173, 174, 176, 178, 180, 181, 183, 184, 186, 187, 188, 190, 192, 193, 194, 196, 197, 198, 200, 201, 203, 204, 206, 207, 208, 209, 210, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 236, 239, 246, 248, 254, 261, 263, 265, 267, 268, 278, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 296, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 319, 335, 338, 339, 340, 342, 344, 345, 346, 349, 351, 352, 353, 354, 355, 356, 359, 361, 362, 366, 367, 368, 369, 370, 371, 374, 375, 379, 388, 390, 392, 395, 396, 397, 398, 399, 402, 403, 404, 411, 412, 413, 415, 416, 417, 418, 419, 423, 424, 425, 426, 439, 441, 445, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 527, 528, 533, 534, 535, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 565, 566, 567, 569, 570, 571, 572, 573, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 598, 612, 614, 616, 618, 619, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 635, 636, 639, 640, 644, 645, 648, 649, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 680, 683, 690, 692, 696, 701, 704, 705, 714, 720, 721, 722, 723, 724, 725, 726, 727, 729, 732, 733, 734, 735, 739, 740, 741, 742, 743, 744, 745, 746, 747, 751, 752, 753, 758, 778, 781, 782, 783, 785, 787, 788, 789, 792, 795, 796, 797, 798, 799, 802, 803, 804, 805, 810, 811, 812, 815, 816, 825, 831, 832, 836, 838, 842, 843, 844, 845, 846, 849, 850, 851, 858, 859, 860, 862, 863, 864, 865, 870, 883, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 913, 914, 917, 921, 922, 923, 925, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 939, 940, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 958, 960, 961, 963, 967, 968, 974, 975, 976, 977, 978, 979, 981, 982, 985, 986, 987, 988, 997, 1004], "The": [2, 18, 29, 31, 35, 47, 50, 54, 57, 65, 71, 90, 92, 93, 94, 96, 99, 102, 104, 111, 113, 129, 135, 143, 145, 157, 158, 159, 160, 161, 166, 171, 174, 181, 186, 196, 197, 200, 224, 227, 231, 234, 236, 254, 285, 286, 287, 288, 317, 330, 335, 336, 339, 342, 346, 347, 356, 359, 367, 370, 416, 424, 448, 455, 458, 461, 462, 463, 464, 465, 466, 468, 469, 470, 479, 482, 488, 491, 492, 497, 499, 500, 501, 506, 507, 513, 514, 521, 550, 563, 567, 581, 582, 583, 585, 590, 591, 592, 594, 598, 599, 600, 604, 605, 606, 630, 631, 632, 634, 636, 639, 640, 645, 649, 655, 661, 670, 674, 678, 680, 696, 705, 721, 722, 723, 732, 756, 773, 778, 779, 782, 785, 789, 790, 802, 810, 815, 863, 889, 895, 896, 897, 898, 899, 900, 902, 903, 904, 918, 921, 927, 930, 931, 936, 938, 939, 940, 945, 946, 952, 953, 960, 989, 991, 993, 997, 998, 1001, 1002, 1003, 1005], "fix": [2, 106, 123, 125, 349, 462, 463, 464, 465, 466, 468, 469, 470, 598, 792], "size": [2, 13, 35, 102, 103, 123, 124, 125, 127, 129, 146, 159, 225, 254, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 546, 581, 582, 598, 630, 661, 696, 796, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 997, 1005], "length": [2, 12, 73, 100, 113, 123, 131, 159, 160, 206, 254, 307, 339, 346, 412, 417, 435, 461, 462, 463, 464, 465, 466, 468, 469, 470, 483, 500, 502, 506, 508, 521, 546, 580, 581, 582, 598, 630, 631, 649, 662, 696, 731, 743, 744, 752, 782, 789, 837, 859, 864, 881, 887, 895, 896, 897, 898, 899, 900, 902, 903, 904, 922, 939, 941, 945, 947, 960, 997], "datatyp": [2, 28, 33, 47, 63, 90, 92, 93, 94, 96, 98, 106, 108, 112, 127, 145, 147, 153, 199, 254, 293, 356, 400, 477, 494, 532, 550, 563, 571, 598, 609, 622, 654, 677, 696, 705, 727, 745, 825, 830, 832, 834, 847, 915, 933, 980, 997], "valu": [2, 8, 11, 12, 15, 26, 28, 31, 33, 47, 48, 50, 54, 56, 63, 65, 73, 75, 93, 95, 102, 103, 104, 113, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 141, 144, 148, 149, 150, 154, 157, 159, 160, 161, 162, 166, 170, 171, 174, 176, 177, 178, 179, 180, 182, 184, 186, 188, 189, 190, 192, 196, 197, 198, 203, 204, 207, 208, 209, 210, 213, 214, 218, 221, 225, 226, 227, 228, 237, 238, 240, 241, 242, 244, 245, 254, 260, 261, 262, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 294, 295, 296, 297, 298, 299, 300, 301, 303, 306, 307, 308, 310, 311, 313, 317, 330, 336, 347, 352, 353, 354, 355, 357, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 380, 381, 383, 384, 385, 386, 389, 390, 391, 393, 394, 397, 398, 401, 402, 403, 405, 407, 408, 409, 411, 414, 415, 418, 420, 422, 423, 424, 426, 427, 428, 429, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 454, 455, 458, 461, 462, 463, 464, 465, 466, 468, 469, 470, 472, 473, 474, 475, 476, 479, 480, 481, 482, 484, 485, 486, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 504, 505, 508, 510, 511, 512, 521, 524, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 541, 543, 545, 549, 552, 554, 556, 557, 558, 564, 565, 570, 571, 573, 574, 575, 576, 577, 579, 580, 581, 582, 586, 590, 598, 612, 619, 624, 625, 630, 631, 633, 634, 636, 641, 642, 643, 644, 646, 647, 650, 652, 657, 658, 663, 664, 665, 668, 671, 672, 677, 681, 682, 684, 685, 686, 688, 689, 696, 700, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 722, 723, 724, 725, 729, 730, 733, 734, 735, 737, 738, 743, 744, 745, 746, 748, 749, 752, 756, 773, 779, 790, 796, 797, 798, 799, 802, 803, 804, 807, 809, 810, 811, 812, 813, 815, 816, 818, 820, 821, 823, 824, 826, 827, 828, 829, 833, 838, 840, 841, 844, 845, 848, 849, 850, 852, 854, 855, 856, 858, 862, 865, 870, 871, 872, 874, 875, 877, 879, 880, 881, 882, 883, 886, 887, 888, 889, 895, 896, 897, 898, 899, 900, 902, 903, 904, 906, 907, 908, 909, 910, 913, 914, 918, 919, 920, 921, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 941, 943, 944, 947, 949, 950, 951, 960, 966, 967, 968, 969, 970, 971, 979, 980, 983, 985, 987, 988, 997, 1005], "within": [2, 47, 120, 121, 159, 160, 174, 227, 254, 455, 485, 598, 630, 631, 636, 696, 1004], "method": [2, 3, 4, 5, 8, 27, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 73, 74, 91, 102, 103, 106, 122, 130, 132, 144, 158, 166, 171, 184, 190, 196, 197, 223, 231, 246, 254, 261, 264, 265, 342, 345, 352, 359, 366, 368, 369, 374, 390, 423, 439, 441, 445, 447, 451, 454, 455, 462, 463, 464, 465, 466, 468, 469, 470, 517, 524, 534, 536, 541, 553, 578, 580, 591, 592, 594, 598, 599, 600, 603, 604, 605, 606, 609, 619, 634, 650, 669, 674, 690, 696, 705, 785, 788, 802, 815, 888, 889, 900, 956, 980, 989, 991, 993, 997, 998, 1001, 1002, 1003], "attribut": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 122, 254, 591, 592, 594, 599, 600, 604, 605, 606, 696, 989, 991, 993, 998, 1001, 1002, 1003], "A": [5, 28, 31, 50, 53, 72, 74, 97, 102, 103, 104, 111, 113, 129, 130, 153, 159, 174, 188, 197, 213, 225, 226, 227, 231, 254, 260, 313, 318, 321, 325, 327, 329, 334, 341, 352, 359, 368, 369, 377, 380, 381, 383, 390, 417, 423, 424, 425, 435, 445, 452, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 489, 490, 495, 496, 498, 504, 505, 521, 525, 551, 562, 566, 598, 630, 636, 652, 671, 674, 696, 752, 757, 760, 767, 769, 772, 777, 784, 802, 895, 896, 897, 899, 902, 903, 904, 928, 929, 934, 935, 937, 943, 944, 960, 997, 1004], "encod": [5, 64, 102, 103, 113, 287, 491, 722, 930], "set": [5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 23, 24, 26, 28, 30, 31, 32, 33, 34, 65, 66, 70, 74, 91, 93, 96, 100, 102, 103, 106, 107, 111, 113, 115, 116, 117, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 139, 144, 158, 159, 160, 161, 171, 174, 180, 198, 200, 206, 215, 222, 223, 225, 231, 254, 268, 349, 370, 379, 412, 416, 417, 426, 450, 461, 462, 463, 464, 465, 466, 468, 469, 470, 472, 478, 482, 483, 501, 507, 508, 513, 514, 515, 516, 519, 546, 580, 581, 582, 585, 590, 598, 617, 619, 621, 629, 630, 631, 635, 636, 640, 644, 655, 660, 661, 662, 669, 674, 677, 680, 696, 704, 705, 792, 810, 823, 859, 863, 864, 870, 895, 896, 897, 898, 899, 900, 902, 903, 904, 906, 910, 917, 921, 922, 940, 946, 947, 952, 953, 954, 955, 958, 978, 997, 1005], "string": [5, 7, 9, 12, 13, 14, 18, 28, 31, 33, 34, 38, 50, 56, 64, 74, 75, 97, 102, 103, 113, 122, 123, 124, 127, 130, 136, 153, 157, 158, 159, 160, 174, 200, 207, 216, 221, 225, 227, 231, 234, 254, 261, 289, 294, 335, 339, 342, 345, 346, 358, 364, 375, 404, 426, 448, 450, 462, 463, 464, 465, 466, 468, 469, 470, 485, 488, 489, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 521, 542, 543, 547, 549, 551, 552, 558, 566, 573, 576, 585, 586, 598, 612, 621, 628, 629, 630, 631, 636, 655, 663, 668, 674, 677, 678, 696, 724, 729, 778, 782, 785, 788, 789, 801, 816, 851, 926, 927, 928, 932, 933, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 957, 959, 960, 976, 997, 1005], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 628, 651, 696], "activ": [6, 10, 16, 17, 19, 20, 21, 22, 25, 399, 496, 846, 935], "bool": [6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 35, 65, 70, 72, 73, 74, 75, 90, 91, 95, 97, 100, 102, 103, 107, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 134, 136, 137, 138, 150, 151, 153, 154, 156, 157, 158, 159, 160, 164, 165, 167, 168, 169, 174, 186, 188, 198, 201, 205, 207, 213, 217, 218, 221, 222, 223, 224, 227, 229, 231, 238, 240, 241, 244, 254, 264, 265, 266, 267, 268, 278, 284, 287, 293, 302, 303, 304, 305, 306, 307, 322, 338, 340, 351, 352, 353, 354, 355, 368, 369, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 390, 396, 399, 413, 416, 418, 423, 424, 430, 431, 432, 433, 445, 447, 455, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 477, 482, 484, 485, 489, 491, 493, 503, 504, 505, 509, 510, 512, 514, 515, 516, 519, 523, 535, 538, 541, 542, 543, 544, 546, 547, 553, 556, 571, 580, 585, 598, 612, 614, 616, 621, 623, 625, 626, 629, 630, 631, 635, 636, 640, 644, 649, 656, 659, 660, 661, 663, 668, 669, 670, 674, 682, 684, 685, 688, 696, 702, 703, 704, 705, 714, 720, 722, 727, 732, 739, 740, 741, 742, 743, 744, 761, 781, 783, 795, 797, 798, 799, 805, 809, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 843, 844, 846, 860, 863, 865, 884, 885, 887, 889, 890, 891, 892, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 908, 910, 911, 916, 921, 923, 928, 930, 932, 942, 943, 944, 948, 949, 951, 953, 954, 955, 958, 977, 978, 979, 982, 985, 987, 997, 1004], "decim": [6, 28, 31, 254, 471, 517, 598, 905, 956, 997], "temporari": 6, "remov": [6, 8, 142, 226, 254, 268, 356, 425, 501, 507, 513, 514, 516, 563, 598, 618, 671, 696, 940, 946, 952, 953, 955], "later": 6, "onc": [6, 53, 102, 103, 106, 129, 134, 135, 198, 234, 254, 268, 292, 472, 598, 613, 678, 696, 705, 906, 997], "stabil": 6, "happen": 6, "being": [6, 102, 103, 113, 118, 225, 226, 254, 268, 307, 339, 462, 463, 464, 465, 466, 468, 469, 470, 562, 598, 671, 696, 743, 782, 812, 887, 997, 1005], "consid": [6, 102, 103, 113, 118, 135, 144, 154, 180, 223, 225, 226, 254, 268, 296, 297, 298, 307, 339, 462, 463, 464, 465, 466, 468, 469, 470, 556, 565, 598, 619, 632, 639, 644, 669, 671, 680, 696, 705, 733, 734, 735, 743, 782, 812, 825, 887, 908, 909, 910, 997], "break": [6, 118, 225, 226, 254, 268, 307, 339, 462, 463, 464, 465, 466, 468, 469, 470, 598, 671, 696, 743, 782, 812, 887, 997], "chang": [6, 26, 65, 102, 103, 118, 225, 226, 227, 254, 268, 307, 308, 339, 449, 462, 463, 464, 465, 466, 468, 469, 470, 598, 671, 696, 743, 782, 812, 883, 887, 916, 997], "current": [6, 9, 26, 52, 91, 97, 104, 134, 137, 138, 254, 339, 417, 449, 598, 609, 614, 615, 696, 732, 736, 782, 883, 997, 1004], "alpha": [6, 72, 268, 353, 354, 355, 598, 616, 621, 623, 649, 659, 696, 797, 798, 799, 997], "state": [6, 8, 72, 83, 556, 609, 616, 621, 623, 649, 659, 696], "cfg": [7, 8, 9, 15, 132], "previous": 7, "save": [7, 338, 609, 781], "share": [7, 56, 146, 254, 796, 997], "option": [7, 8, 9, 26, 30, 31, 39, 65, 74, 102, 105, 106, 107, 111, 114, 115, 117, 119, 122, 123, 124, 125, 126, 127, 128, 170, 174, 180, 213, 217, 222, 254, 388, 461, 462, 463, 464, 465, 466, 468, 469, 470, 482, 508, 571, 585, 590, 598, 609, 635, 636, 644, 696, 832, 836, 895, 896, 897, 898, 899, 900, 902, 903, 904, 921, 947, 975, 997], "json": [7, 9, 33, 34, 109, 110, 116, 254, 497, 498, 609, 628, 651, 677, 696, 936, 937], "produc": [7, 124, 125, 127, 397, 434, 572, 640, 696, 844], "reset": [8, 132], "default": [8, 13, 26, 27, 28, 30, 31, 32, 33, 34, 35, 65, 70, 73, 74, 90, 92, 93, 94, 95, 96, 97, 100, 102, 103, 106, 111, 113, 122, 123, 124, 125, 126, 127, 130, 131, 144, 146, 158, 160, 161, 171, 174, 180, 186, 188, 196, 197, 198, 208, 215, 223, 225, 228, 232, 254, 294, 338, 351, 353, 354, 355, 370, 412, 416, 417, 419, 426, 443, 444, 449, 455, 472, 478, 487, 495, 501, 503, 507, 508, 513, 514, 515, 516, 519, 539, 546, 553, 567, 571, 580, 584, 585, 589, 598, 619, 621, 629, 631, 636, 644, 661, 664, 669, 672, 677, 696, 729, 781, 795, 796, 797, 798, 799, 810, 859, 863, 864, 870, 879, 880, 883, 889, 906, 917, 925, 928, 934, 940, 942, 946, 947, 952, 953, 954, 955, 958, 986, 997, 1005], "note": [8, 18, 30, 31, 39, 50, 54, 55, 65, 74, 90, 91, 92, 94, 96, 97, 100, 102, 104, 105, 111, 113, 114, 123, 125, 127, 129, 131, 132, 134, 135, 140, 149, 159, 160, 170, 171, 173, 174, 184, 187, 196, 197, 214, 217, 222, 226, 227, 231, 254, 268, 305, 306, 310, 311, 331, 332, 335, 339, 346, 375, 381, 383, 399, 416, 462, 463, 464, 465, 466, 468, 469, 470, 482, 489, 495, 496, 499, 501, 502, 504, 507, 513, 514, 526, 534, 556, 565, 579, 580, 590, 598, 616, 623, 624, 630, 631, 632, 636, 639, 652, 659, 671, 674, 696, 705, 741, 742, 774, 775, 778, 789, 846, 863, 909, 910, 916, 921, 928, 934, 935, 938, 940, 941, 943, 946, 952, 953, 966, 997, 1004], "oper": [8, 31, 56, 73, 80, 81, 90, 92, 93, 94, 95, 96, 102, 111, 135, 148, 153, 158, 165, 175, 181, 184, 186, 187, 191, 212, 217, 218, 222, 225, 233, 234, 254, 261, 262, 265, 302, 303, 304, 305, 306, 307, 352, 366, 368, 369, 387, 390, 417, 423, 437, 439, 441, 445, 447, 451, 457, 524, 534, 541, 542, 543, 551, 552, 562, 598, 623, 629, 632, 635, 639, 644, 645, 678, 696, 704, 739, 740, 741, 742, 743, 891, 973, 977, 978, 979, 987, 997], "from": [8, 28, 31, 50, 51, 52, 65, 73, 74, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 141, 142, 146, 148, 157, 159, 160, 171, 172, 174, 175, 180, 192, 196, 198, 200, 222, 223, 225, 227, 254, 302, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 356, 374, 388, 417, 443, 444, 449, 450, 472, 485, 495, 496, 497, 503, 514, 515, 516, 519, 536, 538, 549, 559, 560, 561, 580, 584, 588, 597, 598, 618, 623, 628, 630, 631, 636, 644, 651, 652, 655, 669, 675, 696, 704, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 796, 832, 836, 864, 879, 880, 881, 883, 906, 934, 935, 936, 942, 953, 954, 955, 958, 985, 988, 997, 1004, 1005], "environ": [8, 26, 126, 129], "local": [8, 30, 105, 114, 127, 254, 338, 754, 755, 781, 786, 884, 885, 997], "non": [8, 31, 39, 65, 95, 172, 180, 200, 226, 231, 254, 375, 417, 449, 461, 462, 463, 464, 465, 466, 468, 469, 470, 490, 496, 542, 543, 549, 551, 552, 558, 573, 576, 581, 582, 585, 586, 598, 644, 655, 671, 674, 696, 816, 864, 883, 895, 896, 897, 898, 899, 900, 902, 903, 904, 929, 935, 978, 997], "env": [8, 128], "back": [8, 65, 148, 218, 254, 448, 598, 704, 979, 997], "exampl": [8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 99, 100, 103, 104, 105, 106, 113, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 583, 584, 585, 586, 587, 589, 590, 598, 609, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 696, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 726, 727, 729, 730, 731, 732, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 802, 803, 804, 805, 807, 810, 811, 812, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 845, 846, 847, 850, 851, 853, 858, 859, 860, 862, 864, 869, 870, 871, 872, 873, 874, 875, 876, 877, 883, 884, 885, 887, 888, 889, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 913, 917, 918, 919, 920, 922, 923, 925, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 956, 958, 965, 966, 967, 968, 969, 970, 971, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 997, 1004], "ascii": [10, 18, 500, 502, 506, 521, 939, 941, 945, 960], "charact": [10, 12, 18, 24, 28, 102, 103, 113, 254, 335, 494, 496, 499, 500, 501, 506, 507, 509, 510, 513, 521, 649, 696, 778, 933, 935, 938, 939, 940, 945, 946, 948, 949, 952, 960], "displai": [10, 11, 12, 15, 17, 21, 23, 31, 254], "tabl": [10, 14, 15, 17, 18, 19, 20, 21, 23, 24, 29, 30, 31, 51, 52, 53, 55, 90, 97, 102, 103, 105, 113, 114, 188, 212, 218, 225, 226, 254, 671, 696, 979, 997, 1004], "outlin": 10, "fals": [10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 33, 35, 50, 65, 70, 72, 74, 91, 95, 97, 100, 102, 103, 106, 107, 111, 113, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 134, 136, 137, 138, 141, 153, 154, 156, 157, 158, 159, 160, 164, 165, 167, 168, 169, 171, 174, 175, 178, 183, 184, 186, 188, 189, 196, 197, 198, 201, 205, 207, 213, 217, 218, 221, 222, 223, 227, 229, 231, 237, 238, 240, 241, 242, 244, 247, 254, 264, 265, 266, 268, 278, 284, 302, 303, 304, 305, 306, 307, 322, 338, 340, 351, 352, 353, 354, 355, 368, 369, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 390, 396, 399, 413, 416, 418, 423, 424, 445, 447, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 477, 482, 484, 485, 489, 493, 497, 503, 504, 505, 509, 510, 512, 514, 515, 516, 535, 538, 541, 542, 543, 546, 547, 553, 556, 571, 580, 585, 590, 598, 612, 614, 615, 616, 621, 623, 629, 630, 631, 635, 636, 638, 640, 649, 656, 659, 660, 661, 663, 668, 669, 674, 681, 682, 684, 685, 686, 688, 691, 696, 704, 714, 720, 727, 731, 732, 739, 740, 741, 742, 743, 744, 761, 781, 783, 795, 797, 798, 799, 805, 816, 817, 818, 820, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 836, 846, 860, 863, 865, 876, 884, 885, 887, 889, 890, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 908, 911, 916, 921, 923, 928, 932, 936, 942, 943, 944, 948, 949, 951, 953, 954, 955, 977, 978, 979, 982, 985, 987, 988, 997, 1004], "revert": 10, "abc": [10, 16, 17, 18, 19, 20, 21, 22, 23, 261, 496, 504, 598, 935, 943], "xyz": [10, 16, 17, 18, 19, 20, 21, 22, 23, 261, 490, 496, 598, 929, 935, 975, 997], "f64": [10, 14, 16, 17, 19, 20, 21, 22, 23, 50, 65, 67, 69, 93, 118, 125, 137, 138, 140, 141, 142, 145, 149, 150, 153, 156, 157, 158, 165, 173, 174, 178, 179, 188, 189, 190, 206, 207, 208, 228, 231, 234, 238, 240, 241, 242, 243, 244, 246, 247, 254, 260, 270, 271, 272, 273, 274, 275, 293, 295, 299, 300, 307, 310, 311, 340, 351, 352, 353, 354, 355, 356, 357, 365, 366, 368, 369, 374, 381, 383, 384, 385, 387, 388, 390, 408, 419, 420, 421, 423, 427, 428, 429, 438, 441, 443, 444, 445, 449, 451, 454, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 480, 481, 482, 486, 487, 530, 531, 534, 539, 548, 549, 551, 553, 555, 563, 574, 575, 584, 589, 598, 614, 618, 624, 625, 629, 635, 636, 642, 643, 650, 663, 664, 672, 674, 675, 678, 682, 684, 685, 686, 687, 688, 690, 691, 696, 706, 707, 708, 709, 710, 711, 730, 737, 738, 743, 744, 745, 783, 798, 799, 803, 807, 812, 883, 887, 895, 897, 898, 900, 901, 902, 904, 905, 919, 920, 924, 970, 971, 984, 997, 1005], "fmt": [11, 373, 566, 598, 633, 696], "floatfmt": 11, "mix": [11, 514, 516, 745, 953, 955, 997], "control": [11, 31, 55, 73, 123, 254, 621, 696], "how": [11, 30, 31, 56, 65, 73, 75, 93, 96, 104, 144, 173, 225, 226, 254, 294, 308, 374, 397, 398, 448, 458, 590, 598, 619, 635, 671, 696, 729, 746, 844, 845, 997], "float": [11, 31, 41, 42, 118, 120, 121, 122, 125, 127, 141, 146, 149, 174, 190, 198, 204, 246, 254, 295, 296, 297, 298, 310, 311, 340, 351, 352, 353, 354, 355, 360, 365, 368, 369, 374, 377, 380, 381, 383, 384, 385, 390, 396, 419, 423, 427, 438, 443, 444, 445, 451, 454, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 534, 548, 574, 575, 578, 580, 584, 586, 589, 598, 624, 636, 650, 658, 659, 690, 696, 727, 730, 733, 734, 735, 744, 745, 747, 783, 795, 796, 797, 798, 799, 803, 807, 812, 822, 836, 843, 844, 866, 872, 873, 879, 880, 886, 887, 888, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 907, 909, 910, 921, 925, 966, 986, 997, 1005], "point": [11, 31, 41, 42, 125, 127, 149, 159, 175, 254, 295, 310, 311, 340, 360, 365, 381, 383, 471, 472, 598, 624, 630, 640, 652, 696, 730, 783, 803, 807, 822, 905, 906, 997], "full": [11, 38, 65, 71, 73, 102, 103, 105, 113, 114, 159, 160, 254, 514, 515, 516, 519, 630, 631, 640, 696, 953, 954, 955, 958], "format": [11, 14, 18, 28, 31, 101, 102, 103, 113, 118, 147, 157, 171, 180, 197, 214, 252, 254, 339, 342, 345, 503, 514, 515, 516, 519, 543, 622, 628, 644, 677, 696, 785, 788, 942, 953, 954, 955, 958, 996], "number": [11, 12, 13, 15, 23, 24, 28, 31, 35, 65, 84, 90, 92, 94, 96, 99, 102, 103, 106, 113, 116, 123, 125, 126, 128, 129, 136, 137, 146, 147, 149, 150, 162, 171, 172, 175, 176, 183, 184, 198, 203, 204, 208, 210, 221, 225, 228, 237, 239, 248, 254, 279, 285, 291, 301, 307, 308, 320, 323, 328, 330, 340, 347, 348, 350, 353, 354, 355, 359, 361, 367, 371, 381, 383, 391, 392, 398, 403, 411, 415, 417, 450, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 475, 476, 478, 487, 499, 502, 504, 510, 511, 517, 527, 533, 539, 553, 554, 569, 581, 582, 584, 587, 589, 598, 612, 614, 622, 623, 624, 625, 632, 639, 649, 657, 658, 661, 664, 666, 668, 672, 681, 683, 692, 696, 726, 732, 743, 746, 759, 762, 771, 773, 783, 790, 791, 793, 796, 797, 798, 799, 802, 804, 811, 822, 838, 845, 850, 858, 862, 864, 876, 877, 895, 896, 897, 898, 899, 900, 902, 903, 904, 905, 906, 913, 914, 917, 925, 938, 941, 943, 949, 950, 956, 967, 981, 986, 997, 1005], "plai": [12, 552], "sam": 12, "As": [12, 90, 92, 93, 94, 96, 106, 254, 696], "time": [12, 30, 38, 40, 50, 55, 71, 72, 74, 113, 130, 148, 159, 160, 174, 227, 254, 291, 312, 313, 314, 319, 335, 338, 342, 344, 345, 349, 395, 396, 417, 514, 516, 519, 532, 533, 551, 552, 561, 567, 598, 616, 630, 631, 636, 649, 696, 704, 726, 751, 752, 753, 758, 778, 781, 785, 787, 788, 792, 842, 844, 953, 955, 958, 980, 981, 997, 1005], "goe": 12, "By": [12, 13, 65, 102, 103, 106, 113, 174, 208, 228, 254, 487, 503, 539, 553, 571, 584, 589, 598, 636, 664, 672, 696, 925, 942, 978, 986, 997], "begin": [12, 353, 354, 355, 495, 598, 797, 798, 799, 934, 997], "beauti": 12, "friendship": 12, "len": [12, 31, 123, 125, 172, 254, 302, 459, 500, 506, 521, 598, 744, 887, 893, 939, 945, 960, 997], "u32": [12, 50, 70, 159, 185, 232, 237, 245, 247, 254, 262, 269, 276, 277, 278, 279, 280, 301, 302, 317, 320, 324, 328, 330, 336, 337, 340, 347, 348, 391, 393, 394, 397, 406, 426, 442, 446, 455, 473, 490, 499, 502, 532, 536, 545, 547, 554, 577, 598, 630, 647, 676, 681, 689, 691, 696, 714, 715, 716, 727, 756, 759, 766, 768, 771, 773, 776, 779, 780, 783, 790, 791, 812, 853, 889, 929, 938, 941, 980, 983, 985, 997], "37": 12, "beaut": 12, "48": [12, 160, 254, 631, 696], "fmt_str_length": 12, "50": [12, 31, 148, 254, 296, 297, 298, 339, 346, 598, 733, 789, 997], "print": [12, 15, 17, 18, 23, 103, 119, 145, 157, 158, 172, 175, 216, 233, 254, 373, 561, 598, 633, 696, 823, 895, 976, 997, 1005], "overwrit": [13, 29, 30, 90, 92, 93, 94, 96, 102, 103, 113, 134, 254, 623, 696], "chunk": [13, 99, 102, 103, 111, 113, 115, 116, 117, 125, 127, 148, 172, 183, 254, 267, 456, 598, 661, 696, 704, 731, 808, 876, 890, 973, 997], "stream": [13, 32, 72, 158, 223, 254, 616, 621, 623, 629, 640, 644, 649, 659, 660, 661, 669, 696], "engin": [13, 29, 104, 129, 135, 158, 223, 236, 254, 629, 640, 644, 669, 680, 696, 705, 997], "determin": [13, 31, 63, 65, 73, 93, 96, 100, 102, 103, 106, 111, 113, 117, 131, 135, 153, 159, 160, 171, 172, 222, 227, 254, 294, 322, 338, 417, 426, 434, 458, 462, 463, 464, 465, 466, 468, 469, 470, 482, 517, 580, 598, 630, 631, 696, 729, 761, 781, 812, 864, 870, 921, 956, 997], "schema": [13, 30, 50, 56, 66, 67, 68, 73, 75, 85, 86, 88, 90, 92, 93, 94, 96, 97, 102, 103, 108, 112, 113, 116, 123, 125, 135, 137, 138, 145, 146, 181, 184, 217, 254, 281, 282, 283, 417, 434, 541, 585, 598, 614, 615, 620, 640, 645, 677, 680, 696, 719, 736, 997], "thread": [13, 28, 99, 102, 103, 104, 129, 254, 268, 399, 598, 846], "pool": [13, 129], "For": [13, 30, 31, 104, 105, 106, 114, 148, 160, 173, 174, 236, 254, 293, 353, 354, 355, 417, 435, 457, 482, 489, 495, 496, 504, 556, 565, 566, 598, 631, 636, 680, 696, 704, 797, 798, 799, 891, 921, 928, 934, 935, 943, 978, 997], "some": [13, 26, 30, 31, 93, 102, 103, 113, 144, 254, 619, 696, 823, 997, 1005], "dataset": [13, 102, 103, 113, 118, 388, 598, 609, 640, 696, 836, 997], "esp": 13, "when": [13, 15, 17, 21, 31, 35, 55, 56, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 102, 103, 104, 107, 111, 113, 114, 115, 116, 125, 127, 135, 136, 145, 146, 148, 150, 153, 159, 160, 187, 196, 200, 207, 215, 221, 223, 254, 296, 297, 298, 338, 353, 354, 355, 361, 417, 424, 426, 435, 450, 484, 485, 501, 507, 513, 514, 547, 556, 565, 598, 612, 625, 630, 631, 640, 655, 661, 663, 668, 669, 696, 704, 733, 734, 735, 781, 796, 797, 798, 799, 804, 870, 909, 910, 940, 946, 952, 953, 974, 997], "have": [13, 26, 31, 65, 75, 91, 102, 103, 106, 125, 127, 148, 171, 191, 197, 214, 254, 292, 307, 353, 354, 355, 435, 455, 514, 516, 598, 644, 659, 676, 696, 704, 743, 797, 798, 799, 809, 889, 953, 955, 997, 1005], "larg": [13, 65, 159, 160, 174, 227, 254, 335, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 636, 696, 778, 782, 789], "element": [13, 23, 124, 127, 136, 170, 188, 196, 208, 221, 228, 254, 268, 270, 271, 272, 273, 274, 275, 291, 299, 300, 302, 303, 304, 305, 306, 307, 357, 370, 379, 397, 399, 400, 420, 421, 448, 449, 455, 458, 473, 479, 480, 481, 486, 487, 510, 511, 517, 530, 531, 533, 539, 553, 581, 582, 584, 589, 598, 612, 664, 668, 672, 696, 705, 706, 707, 708, 709, 710, 711, 726, 732, 737, 738, 739, 740, 741, 742, 743, 800, 805, 811, 823, 835, 838, 844, 846, 847, 867, 868, 883, 889, 907, 918, 919, 920, 924, 925, 949, 950, 956, 967, 970, 971, 976, 981, 982, 986, 997], "too": [13, 159, 160, 174, 227, 254, 335, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 636, 696, 778, 782, 789], "optimist": 13, "lead": [13, 97, 118, 159, 160, 254, 474, 501, 513, 521, 528, 538, 553, 598, 630, 631, 640, 680, 696, 911, 940, 952, 960, 997], "out": [13, 97, 119, 160, 254, 287, 377, 380, 402, 416, 489, 491, 590, 598, 631, 660, 661, 696, 722, 849, 863, 928, 930], "memori": [13, 73, 90, 91, 94, 95, 96, 102, 103, 107, 111, 113, 115, 116, 117, 134, 135, 148, 205, 236, 254, 448, 456, 477, 598, 661, 696, 704, 705, 890, 915, 916, 997], "error": [13, 30, 76, 102, 103, 113, 159, 160, 174, 196, 227, 254, 287, 293, 335, 339, 346, 387, 404, 416, 462, 463, 464, 465, 466, 468, 469, 470, 489, 491, 495, 497, 498, 514, 515, 516, 519, 598, 630, 631, 636, 680, 696, 722, 727, 778, 782, 789, 851, 863, 928, 930, 934, 936, 937, 953, 954, 955, 958, 997], "row": [13, 18, 23, 28, 31, 33, 35, 65, 66, 68, 73, 82, 84, 89, 93, 94, 96, 97, 102, 103, 106, 107, 111, 113, 115, 116, 117, 120, 123, 125, 135, 136, 137, 144, 148, 151, 153, 157, 159, 161, 162, 167, 169, 170, 171, 172, 174, 175, 176, 180, 184, 198, 206, 210, 211, 214, 216, 221, 223, 225, 226, 232, 236, 239, 248, 254, 268, 279, 358, 371, 392, 400, 417, 448, 449, 459, 483, 485, 494, 527, 547, 556, 557, 565, 569, 573, 576, 579, 587, 590, 598, 612, 614, 616, 619, 623, 626, 627, 630, 632, 636, 637, 639, 640, 644, 661, 662, 666, 667, 668, 669, 671, 676, 680, 683, 692, 696, 704, 801, 811, 835, 847, 883, 893, 922, 933, 967, 997, 1005], "per": [13, 28, 31, 123, 125, 136, 157, 184, 185, 207, 221, 243, 245, 246, 254, 268, 292, 399, 402, 416, 485, 547, 598, 612, 663, 668, 687, 689, 690, 696, 846, 849, 863], "everi": [13, 102, 103, 113, 159, 211, 214, 227, 254, 302, 303, 304, 305, 306, 307, 339, 346, 358, 393, 394, 398, 400, 402, 403, 412, 415, 494, 529, 556, 557, 598, 623, 630, 667, 696, 739, 740, 741, 742, 743, 782, 789, 801, 840, 841, 845, 847, 849, 850, 859, 862, 933, 969, 997], "process": [13, 28, 129, 254, 660, 661, 696], "liter": [14, 18, 30, 50, 70, 74, 100, 106, 126, 127, 128, 130, 131, 157, 171, 177, 178, 182, 183, 186, 196, 197, 200, 209, 213, 226, 231, 254, 264, 266, 286, 313, 352, 359, 366, 368, 369, 375, 387, 390, 423, 439, 441, 445, 451, 489, 504, 505, 524, 534, 542, 543, 546, 549, 551, 552, 558, 559, 560, 571, 573, 576, 580, 585, 586, 588, 598, 625, 655, 671, 674, 696, 702, 703, 721, 752, 802, 816, 909, 910, 928, 943, 944, 997, 1004], "left": [14, 52, 65, 74, 120, 121, 130, 159, 160, 173, 174, 226, 254, 353, 354, 355, 374, 375, 462, 463, 464, 465, 466, 468, 469, 470, 473, 500, 521, 532, 549, 556, 557, 565, 579, 590, 598, 630, 631, 635, 636, 671, 696, 797, 798, 799, 816, 907, 939, 960, 980, 997], "center": [14, 31, 254, 353, 354, 355, 461, 462, 463, 464, 465, 466, 468, 469, 470, 598, 797, 798, 799, 895, 896, 897, 898, 899, 900, 902, 903, 904, 997], "right": [14, 16, 31, 74, 102, 103, 120, 121, 130, 159, 160, 173, 174, 254, 353, 354, 355, 375, 462, 463, 464, 465, 466, 468, 469, 470, 473, 482, 506, 549, 598, 630, 631, 635, 636, 696, 797, 798, 799, 816, 907, 921, 945, 997], "cell": 14, "align": [14, 31, 65, 73, 254, 521, 960], "keyerror": [14, 18], "recognis": [14, 18, 122], "column_abc": 14, "column_xyz": 14, "visibl": [15, 146, 254, 796, 997], "eg": [15, 23, 31, 254, 339, 514, 516, 534, 598, 953, 955], "low": [15, 129], "rang": [15, 31, 74, 104, 130, 141, 146, 159, 172, 254, 317, 330, 336, 337, 339, 346, 347, 374, 546, 551, 559, 560, 588, 598, 630, 696, 744, 745, 756, 773, 779, 780, 782, 789, 790, 796, 883, 887, 997], "100": [15, 31, 93, 96, 102, 103, 113, 116, 254, 517, 521, 696, 896, 897, 899, 956, 997, 1005], "98": [15, 165, 254, 291, 484, 517, 528, 533, 598, 956], "99": [15, 31, 149, 150, 165, 168, 254, 262, 291, 359, 361, 484, 528, 533, 598, 624, 625, 696, 795, 802, 997], "tbl_col": 15, "10": [15, 27, 28, 30, 31, 32, 35, 50, 65, 73, 74, 97, 104, 113, 125, 127, 130, 138, 148, 156, 159, 160, 162, 164, 165, 166, 183, 187, 189, 193, 194, 200, 210, 231, 234, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 267, 276, 277, 278, 280, 296, 301, 303, 306, 308, 310, 311, 313, 331, 332, 338, 339, 346, 349, 370, 371, 374, 379, 387, 391, 392, 398, 403, 411, 412, 415, 420, 449, 450, 463, 483, 521, 527, 541, 549, 556, 562, 565, 567, 569, 571, 572, 587, 598, 616, 630, 631, 632, 634, 639, 648, 649, 655, 661, 665, 666, 674, 678, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 696, 705, 733, 744, 746, 752, 781, 789, 792, 795, 811, 823, 838, 845, 850, 858, 859, 862, 867, 883, 909, 910, 967, 997, 1005], "95": [15, 262, 598], "96": [15, 262, 598], "97": [15, 165, 254, 262, 598], "move": [16, 353, 354, 355, 462, 463, 465, 469, 598, 797, 798, 799, 896, 897, 899, 903, 997], "inlin": [16, 489, 495, 496, 504, 928, 934, 935, 943], "parenthes": 16, "below": [17, 31, 105, 114, 144, 254, 374, 590, 598, 619, 696], "ascii_ful": 18, "ascii_full_condens": 18, "ascii_no_bord": 18, "ascii_borders_onli": 18, "ascii_borders_only_condens": 18, "ascii_horizontal_onli": 18, "ascii_markdown": 18, "utf8_ful": [18, 65, 97], "utf8_full_condens": [18, 97], "utf8_no_bord": 18, "utf8_borders_onli": 18, "utf8_horizontal_onli": 18, "noth": [18, 490, 495, 498, 929, 934, 937], "none": [18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 48, 50, 52, 53, 55, 65, 74, 75, 90, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 135, 137, 141, 144, 149, 150, 157, 159, 160, 161, 166, 170, 173, 174, 175, 178, 180, 184, 185, 188, 196, 198, 200, 204, 206, 207, 213, 215, 218, 222, 223, 224, 225, 226, 227, 231, 234, 254, 263, 267, 268, 280, 285, 296, 297, 298, 301, 303, 306, 310, 311, 338, 339, 346, 353, 354, 355, 356, 359, 360, 361, 367, 370, 374, 375, 381, 382, 383, 384, 385, 391, 402, 412, 417, 424, 426, 446, 449, 455, 456, 461, 462, 463, 464, 465, 466, 468, 469, 470, 472, 476, 477, 478, 479, 483, 484, 488, 489, 492, 493, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 519, 521, 522, 523, 532, 542, 544, 546, 549, 552, 554, 560, 561, 563, 564, 571, 572, 573, 576, 580, 581, 582, 583, 584, 585, 588, 589, 590, 598, 614, 615, 619, 624, 625, 630, 631, 634, 635, 636, 638, 640, 644, 647, 655, 658, 659, 660, 661, 662, 663, 669, 670, 671, 674, 675, 677, 678, 680, 696, 705, 712, 713, 732, 733, 744, 745, 747, 763, 764, 765, 770, 781, 782, 789, 794, 795, 797, 798, 799, 802, 803, 804, 806, 809, 810, 812, 814, 815, 816, 825, 828, 829, 832, 835, 836, 849, 859, 864, 870, 871, 872, 873, 874, 878, 887, 888, 889, 892, 895, 896, 897, 898, 899, 900, 902, 903, 904, 906, 910, 912, 914, 917, 918, 921, 922, 925, 927, 928, 931, 932, 936, 937, 938, 939, 940, 941, 942, 945, 946, 947, 949, 950, 951, 952, 953, 954, 955, 958, 972, 975, 976, 979, 980, 986, 987, 997, 1004], "rounded_corn": 18, "style": [18, 31, 188, 254], "border": 18, "line": [18, 31, 102, 103, 106, 113, 157, 167, 169, 254, 495, 934], "includ": [18, 26, 28, 30, 31, 71, 105, 114, 125, 136, 141, 146, 159, 221, 222, 225, 254, 340, 375, 509, 510, 556, 598, 612, 630, 668, 696, 745, 783, 796, 816, 948, 949, 987, 997], "divid": [18, 339, 346, 353, 354, 355, 388, 598, 782, 789, 797, 798, 799, 836, 997], "same": [18, 30, 31, 54, 56, 65, 72, 73, 75, 107, 113, 123, 135, 142, 158, 207, 223, 231, 234, 236, 254, 260, 267, 346, 358, 430, 433, 448, 461, 462, 463, 464, 465, 466, 468, 469, 470, 485, 523, 550, 598, 618, 629, 640, 663, 669, 674, 678, 696, 700, 704, 705, 752, 801, 895, 896, 897, 898, 899, 900, 902, 903, 904, 988, 997], "dens": [18, 157, 254, 455, 598, 889, 997], "space": 18, "horizont": [18, 73, 153, 164, 225, 254, 542, 543, 551, 552, 556, 557, 558, 562, 565, 573, 576, 579, 586], "markdown": 18, "compat": [18, 31, 35, 104, 254, 489, 490, 495, 496, 504, 505, 661, 696, 928, 929, 934, 935, 943, 944], "No": 18, "appli": [18, 28, 31, 50, 73, 113, 122, 125, 127, 153, 187, 254, 317, 320, 322, 323, 324, 326, 328, 330, 333, 336, 337, 340, 347, 348, 350, 354, 355, 424, 450, 461, 462, 463, 465, 469, 504, 514, 515, 516, 519, 541, 546, 556, 557, 565, 572, 579, 598, 632, 639, 640, 648, 696, 754, 755, 756, 759, 761, 762, 766, 768, 771, 773, 776, 779, 780, 783, 786, 790, 791, 793, 798, 799, 895, 896, 897, 899, 903, 943, 953, 954, 955, 958, 997], "round": [18, 31, 67, 97, 254, 295, 365, 530, 598, 730, 807, 997], "corner": [18, 97], "op": [18, 127, 254, 458, 514, 516, 598, 696, 953, 955, 997], "one": [18, 29, 31, 55, 65, 82, 90, 92, 93, 94, 95, 96, 126, 127, 128, 132, 150, 151, 157, 158, 159, 160, 171, 180, 188, 196, 197, 201, 220, 235, 254, 262, 361, 387, 417, 421, 461, 484, 496, 528, 586, 590, 598, 625, 626, 629, 630, 631, 644, 656, 675, 679, 696, 704, 804, 832, 864, 868, 895, 935, 961, 997], "more": [18, 31, 33, 35, 55, 65, 73, 89, 90, 91, 92, 93, 94, 95, 96, 105, 111, 114, 125, 127, 132, 135, 140, 141, 171, 175, 180, 184, 196, 197, 198, 223, 236, 254, 265, 268, 284, 296, 297, 298, 387, 388, 418, 421, 424, 447, 472, 482, 496, 535, 586, 590, 598, 644, 661, 669, 696, 705, 720, 733, 734, 735, 745, 832, 836, 865, 906, 921, 935, 982, 997, 1005], "semigraph": 18, "box": [18, 135, 254], "draw": [18, 23, 24, 124, 1005], "found": [18, 28, 52, 77, 86, 88, 93, 97, 145, 226, 254, 473, 498, 514, 516, 598, 671, 696, 907, 937, 953, 955, 997, 1004], "unicod": 18, "block": [18, 158, 223, 254, 629, 652, 669, 676, 680, 696, 909, 910, 997], "http": [18, 31, 91, 104, 134, 140, 254, 495, 934], "en": [18, 31, 254], "wikipedia": 18, "org": [18, 91, 104, 134, 140, 254], "wiki": 18, "drawing_charact": 18, "box_draw": 18, "mno": 18, "tbl_format": 18, "tbl_hide_column_data_typ": 18, "tbl_hide_dataframe_shap": 18, "hide": [19, 20, 21, 22, 31, 254], "etc": [19, 30, 31, 102, 105, 107, 111, 114, 115, 117, 254, 546, 909, 910, 997], "inform": [21, 71, 105, 114, 140, 254, 296, 297, 298, 388, 482, 489, 495, 496, 504, 598, 649, 696, 733, 734, 735, 836, 921, 928, 934, 935, 943, 997], "separ": [22, 28, 99, 102, 103, 113, 186, 188, 215, 222, 224, 254, 268, 400, 404, 494, 552, 556, 557, 598, 670, 696, 847, 851, 933, 965, 974, 997], "between": [22, 73, 122, 123, 125, 127, 190, 246, 254, 293, 309, 375, 404, 449, 454, 466, 488, 553, 555, 578, 581, 582, 598, 650, 690, 696, 727, 747, 816, 851, 883, 888, 900, 927, 997], "set_tbl_column_data_type_inlin": 22, "max": [23, 31, 35, 50, 129, 141, 150, 158, 159, 160, 188, 254, 296, 297, 303, 361, 417, 448, 455, 462, 474, 511, 598, 625, 629, 630, 631, 661, 696, 733, 734, 739, 745, 804, 864, 889, 896, 911, 950, 997], "both": [23, 28, 56, 74, 104, 130, 159, 160, 173, 174, 181, 196, 254, 267, 375, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 635, 636, 645, 696, 816, 825, 997], "tbl_row": 23, "char": [24, 56, 75, 496, 502, 935, 941], "enabl": [25, 75, 200, 231, 254, 474, 598, 655, 674, 696, 911, 997], "addit": [25, 30, 31, 93, 105, 114, 123, 142, 147, 158, 186, 200, 201, 207, 224, 231, 234, 254, 261, 356, 359, 448, 485, 489, 495, 496, 504, 542, 543, 547, 549, 550, 551, 552, 558, 563, 573, 576, 583, 585, 586, 598, 618, 622, 629, 655, 656, 663, 670, 674, 678, 696, 802, 928, 934, 935, 943, 997], "verbos": [25, 132, 496, 935], "debug": [25, 616, 623, 640, 696, 1005], "log": [25, 67, 291, 351, 421, 441, 451, 533, 598, 726, 795, 981, 997], "if_set": 26, "env_onli": 26, "dict": [26, 30, 31, 35, 53, 66, 68, 71, 90, 92, 93, 94, 95, 96, 102, 103, 105, 106, 107, 108, 111, 112, 113, 114, 115, 117, 125, 171, 186, 192, 196, 197, 199, 213, 214, 254, 426, 598, 652, 654, 696, 870, 997], "show": [26, 31, 54, 144, 157, 175, 185, 254, 619, 649, 659, 696], "variabl": [26, 52, 126, 129, 180, 215, 254, 644, 696, 974, 997, 1004], "restrict": [26, 511, 950], "dictionari": [26, 31, 90, 92, 93, 94, 96, 102, 103, 108, 112, 113, 171, 186, 196, 197, 213, 214, 254, 426, 598, 696, 745, 870, 997], "those": [26, 31, 102, 254, 455, 495, 598, 889, 934, 997], "been": [26, 31, 254, 455, 598, 889, 997], "set_fmt_float": 26, "directli": [26, 52, 125, 127, 132, 353, 354, 355, 580, 598, 696, 797, 798, 799, 997, 1005], "via": [26, 102, 103, 106, 113, 115, 116, 117, 171, 197, 254, 268, 598], "set_stat": 26, "all_stat": 26, "file": [27, 28, 32, 33, 34, 35, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 148, 254, 623, 651, 660, 661, 677, 696, 704, 997], "binaryio": [27, 32, 101, 102, 106, 107, 108, 111, 112, 254], "bytesio": [27, 28, 31, 32, 35, 101, 102, 103, 106, 107, 111, 254], "path": [27, 28, 30, 31, 32, 33, 34, 35, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 254, 474, 498, 598, 651, 660, 661, 677, 696, 911, 937, 997], "compress": [27, 32, 35, 254, 660, 661, 696], "avrocompress": [27, 254], "uncompress": [27, 32, 35, 107, 115, 254, 661, 696], "write": [27, 28, 29, 30, 31, 32, 33, 35, 103, 107, 254, 296, 297, 298, 598, 638, 659, 661, 677, 696, 733, 734, 735, 997], "apach": [27, 35, 101, 104, 254], "avro": [27, 101, 254, 609], "should": [27, 28, 31, 32, 33, 34, 35, 73, 90, 92, 94, 96, 105, 113, 122, 123, 127, 134, 135, 142, 159, 160, 171, 174, 196, 197, 214, 215, 224, 227, 236, 254, 262, 268, 294, 307, 335, 339, 346, 349, 356, 381, 383, 399, 461, 462, 463, 464, 465, 466, 468, 469, 470, 473, 482, 550, 563, 570, 571, 581, 582, 590, 598, 618, 630, 631, 635, 636, 640, 659, 660, 661, 670, 677, 696, 705, 729, 743, 778, 782, 789, 792, 846, 895, 896, 897, 898, 899, 900, 902, 903, 904, 907, 921, 997], "written": [27, 28, 31, 32, 33, 34, 35, 254, 660, 661, 677, 696], "snappi": [27, 35, 254, 661, 696], "deflat": [27, 254], "import": [27, 28, 31, 32, 35, 38, 65, 74, 90, 94, 95, 113, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 141, 157, 159, 172, 174, 217, 218, 225, 227, 254, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 561, 630, 636, 640, 696, 737, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 820, 824, 826, 827, 832, 895, 919, 970, 997, 1005], "pathlib": [27, 28, 32, 35, 113, 254], "foo": [27, 28, 30, 32, 33, 34, 35, 54, 135, 139, 140, 142, 143, 144, 145, 148, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 168, 173, 177, 178, 179, 182, 185, 188, 190, 192, 193, 194, 196, 198, 199, 200, 202, 203, 204, 206, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 222, 223, 224, 228, 229, 230, 233, 254, 263, 296, 297, 298, 335, 371, 373, 392, 396, 401, 402, 405, 406, 459, 475, 476, 488, 490, 492, 494, 496, 501, 507, 509, 511, 513, 518, 520, 527, 529, 542, 545, 548, 550, 553, 554, 555, 564, 568, 569, 573, 574, 575, 576, 577, 578, 583, 584, 587, 589, 590, 598, 617, 618, 619, 620, 626, 633, 634, 635, 647, 652, 654, 655, 669, 670, 673, 675, 677, 696, 733, 778, 851, 893, 929, 931, 933, 935, 950, 997], "bar": [27, 28, 30, 32, 33, 34, 35, 54, 135, 139, 140, 142, 143, 144, 145, 148, 151, 152, 153, 154, 155, 156, 162, 164, 165, 166, 168, 173, 177, 178, 179, 182, 185, 188, 190, 192, 193, 194, 196, 198, 199, 200, 203, 204, 206, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 223, 224, 228, 229, 233, 254, 263, 373, 406, 482, 492, 494, 509, 511, 542, 545, 548, 550, 553, 554, 555, 564, 569, 573, 574, 575, 576, 577, 583, 584, 587, 589, 590, 598, 617, 618, 619, 620, 626, 633, 634, 635, 647, 652, 654, 655, 669, 670, 673, 677, 696, 851, 921, 931, 933, 950, 997], "ham": [27, 28, 30, 32, 35, 139, 140, 142, 143, 144, 145, 151, 152, 154, 161, 162, 164, 173, 177, 178, 179, 182, 185, 190, 192, 194, 196, 198, 199, 200, 203, 204, 206, 208, 209, 210, 215, 216, 217, 218, 219, 223, 228, 229, 254, 550, 617, 618, 619, 620, 626, 635, 647, 652, 654, 655, 669, 675, 696], "d": [27, 28, 30, 32, 35, 56, 75, 93, 118, 141, 157, 161, 162, 165, 173, 210, 212, 225, 229, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 261, 319, 342, 345, 375, 450, 477, 490, 496, 510, 514, 515, 516, 549, 567, 598, 635, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 696, 758, 785, 788, 816, 929, 935, 949, 953, 954, 955, 997], "e": [27, 28, 30, 32, 35, 56, 75, 91, 102, 103, 106, 107, 111, 115, 117, 141, 157, 159, 160, 162, 174, 210, 212, 225, 227, 254, 261, 268, 335, 339, 346, 351, 356, 375, 419, 426, 462, 463, 464, 465, 466, 468, 469, 470, 477, 482, 563, 590, 598, 630, 631, 636, 638, 652, 696, 778, 782, 789, 795, 816, 908, 921, 978, 997], "dirpath": [27, 28, 32, 35, 113, 254], "new_fil": [27, 28, 32, 35, 254], "has_head": [28, 31, 102, 103, 106, 113, 254], "quot": [28, 102, 103, 113, 254], "batch_siz": [28, 102, 103, 116, 254], "1024": [28, 102, 103, 116, 254, 661, 696], "datetime_format": [28, 254], "date_format": [28, 254], "time_format": [28, 254], "float_precis": [28, 31, 254], "null_valu": [28, 102, 103, 113, 254], "comma": [28, 254], "csv": [28, 102, 103, 106, 113, 254, 609, 660, 661, 696], "result": [28, 33, 34, 65, 73, 94, 96, 100, 104, 105, 113, 115, 117, 118, 127, 131, 148, 159, 160, 184, 204, 218, 227, 234, 254, 342, 345, 353, 354, 355, 359, 388, 417, 448, 459, 461, 462, 463, 464, 465, 466, 468, 469, 470, 474, 476, 509, 510, 516, 534, 546, 556, 557, 572, 580, 581, 582, 598, 613, 630, 631, 640, 649, 658, 660, 661, 677, 678, 696, 704, 785, 788, 797, 798, 799, 836, 893, 895, 896, 897, 898, 899, 900, 902, 903, 904, 911, 914, 948, 949, 955, 978, 997, 1004, 1005], "If": [28, 30, 31, 32, 33, 34, 50, 56, 70, 71, 73, 74, 90, 91, 92, 93, 94, 95, 96, 100, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 126, 130, 131, 134, 135, 136, 144, 148, 157, 159, 160, 162, 170, 171, 174, 176, 180, 184, 197, 198, 206, 210, 214, 215, 217, 221, 222, 223, 225, 226, 254, 268, 296, 297, 298, 313, 331, 332, 338, 362, 388, 412, 417, 424, 426, 448, 455, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 478, 482, 483, 497, 499, 501, 502, 507, 508, 509, 510, 511, 513, 514, 515, 516, 519, 542, 543, 544, 546, 553, 554, 556, 558, 565, 571, 573, 576, 580, 581, 582, 585, 586, 590, 598, 612, 619, 621, 630, 631, 635, 636, 640, 644, 652, 661, 662, 668, 669, 671, 677, 680, 696, 704, 705, 733, 734, 735, 744, 752, 774, 775, 781, 809, 811, 812, 835, 836, 838, 859, 864, 887, 889, 891, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 911, 917, 921, 922, 936, 938, 940, 941, 946, 947, 948, 949, 950, 952, 953, 954, 955, 958, 967, 973, 978, 987, 997, 1004], "instead": [28, 33, 34, 50, 54, 65, 70, 73, 74, 100, 102, 111, 125, 130, 131, 135, 159, 160, 171, 174, 184, 186, 196, 197, 200, 218, 227, 231, 254, 278, 335, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 499, 501, 507, 513, 546, 573, 576, 580, 585, 598, 624, 630, 631, 636, 655, 674, 677, 696, 714, 778, 782, 789, 909, 910, 938, 940, 946, 952, 979, 997, 1004], "whether": [28, 74, 94, 96, 127, 130, 201, 254, 322, 338, 340, 431, 432, 474, 598, 640, 656, 696, 761, 781, 783, 1004], "header": [28, 31, 35, 97, 102, 103, 106, 113, 145, 188, 222, 254, 661, 696], "field": [28, 57, 86, 88, 93, 217, 224, 254, 417, 426, 496, 497, 510, 511, 523, 556, 557, 572, 585, 598, 670, 696, 864, 949, 950, 963, 965], "symbol": [28, 254], "byte": [28, 102, 103, 106, 107, 108, 111, 112, 113, 146, 254, 286, 289, 290, 499, 502, 661, 696, 721, 724, 725, 796, 938, 941, 997], "specifi": [28, 31, 65, 74, 77, 86, 88, 106, 125, 136, 142, 146, 147, 150, 158, 186, 196, 200, 201, 207, 221, 224, 231, 234, 254, 353, 354, 355, 356, 361, 426, 448, 458, 485, 500, 506, 542, 543, 547, 549, 550, 551, 552, 558, 563, 573, 576, 583, 585, 586, 598, 612, 618, 622, 625, 629, 655, 656, 663, 668, 670, 674, 678, 696, 796, 797, 798, 799, 804, 939, 945, 997], "defin": [28, 31, 38, 74, 122, 123, 125, 130, 135, 159, 160, 184, 187, 236, 254, 268, 375, 416, 450, 462, 463, 464, 465, 466, 468, 469, 470, 544, 571, 585, 598, 630, 631, 648, 680, 696, 705, 816, 863, 997], "chrono": [28, 254, 342, 345, 514, 515, 516, 519, 785, 788, 953, 954, 955, 958], "rust": [28, 35, 83, 107, 111, 135, 236, 254, 705, 997], "crate": [28, 254, 489, 490, 495, 496, 504, 505, 514, 515, 516, 519, 928, 929, 934, 935, 943, 944, 953, 954, 955, 958], "fraction": [28, 120, 121, 198, 254, 340, 449, 472, 514, 516, 598, 783, 883, 906, 953, 955, 997], "second": [28, 74, 124, 130, 159, 160, 174, 227, 254, 335, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 514, 516, 560, 561, 588, 590, 598, 630, 631, 636, 696, 778, 782, 789, 953, 955, 1005], "precis": [28, 31, 39, 171, 197, 214, 254, 312, 517, 751, 956], "infer": [28, 90, 92, 93, 94, 95, 96, 102, 103, 106, 113, 116, 135, 254, 459, 497, 514, 515, 516, 517, 519, 580, 598, 696, 893, 936, 953, 954, 955, 956, 958, 997], "maximum": [28, 102, 103, 113, 123, 124, 125, 127, 177, 254, 393, 427, 443, 455, 573, 598, 641, 696, 733, 763, 840, 871, 879, 884, 889, 997], "timeunit": [28, 38, 40, 74, 254, 312, 313, 344, 349, 516, 751, 752, 787, 792, 955], "frame": [28, 29, 31, 50, 51, 52, 53, 54, 55, 65, 73, 93, 120, 125, 135, 137, 171, 172, 181, 184, 187, 196, 197, 218, 225, 254, 614, 645, 648, 696, 732, 997, 1004, 1005], "datetim": [28, 31, 65, 74, 97, 125, 130, 141, 157, 159, 160, 172, 174, 227, 254, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 396, 462, 463, 464, 465, 466, 468, 469, 470, 514, 516, 532, 561, 567, 571, 598, 630, 631, 636, 696, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 832, 843, 844, 879, 880, 910, 953, 955, 980, 997], "place": [28, 136, 143, 164, 165, 193, 203, 204, 207, 221, 229, 254, 278, 404, 411, 475, 476, 484, 598, 612, 657, 658, 663, 668, 696, 714, 851, 858, 890, 892, 913, 914, 923, 997], "float64": [28, 31, 93, 100, 102, 125, 131, 145, 146, 153, 199, 218, 231, 254, 270, 271, 272, 273, 274, 275, 293, 299, 300, 340, 356, 381, 383, 480, 481, 530, 531, 550, 563, 580, 598, 620, 654, 674, 696, 783, 979, 984, 997], "repres": [28, 48, 63, 74, 90, 92, 94, 95, 96, 130, 208, 228, 254, 381, 383, 487, 539, 542, 550, 553, 563, 571, 581, 582, 584, 589, 598, 664, 672, 696, 910, 925, 986, 997], "empti": [28, 81, 93, 102, 103, 106, 113, 137, 138, 168, 180, 254, 571, 583, 614, 615, 644, 696, 732, 736, 819, 997], "table_nam": [29, 31, 254], "connection_uri": [29, 104, 254], "if_exist": [29, 254], "dbwritemod": [29, 254], "fail": [29, 30, 91, 105, 107, 114, 134, 223, 254, 279, 417, 514, 515, 516, 519, 598, 669, 696, 705, 953, 954, 955, 958, 997], "dbwriteengin": [29, 254], "sqlalchemi": [29, 254], "databas": [29, 104, 254, 609], "append": [29, 30, 125, 148, 173, 174, 254, 456, 590, 598, 635, 636, 696, 997], "creat": [29, 31, 74, 90, 94, 96, 114, 123, 124, 125, 126, 127, 128, 130, 137, 138, 159, 160, 185, 188, 227, 231, 254, 313, 339, 346, 417, 456, 508, 538, 546, 551, 559, 560, 561, 588, 598, 614, 615, 621, 630, 631, 674, 696, 732, 736, 744, 749, 752, 782, 789, 881, 887, 890, 947, 978, 997, 1004, 1005], "connect": [29, 102, 104, 107, 111, 115, 117, 118, 254, 610], "uri": [29, 30, 104, 105, 114, 254], "postgresql": [29, 104, 254, 448, 598], "usernam": [29, 102, 104, 107, 111, 115, 117, 254], "password": [29, 102, 104, 107, 111, 115, 117, 254], "server": [29, 104, 254], "port": [29, 102, 104, 107, 111, 115, 117, 254], "replac": [29, 30, 102, 103, 113, 149, 150, 194, 222, 231, 254, 313, 338, 426, 505, 598, 624, 674, 696, 752, 781, 870, 909, 910, 944, 997], "insert": [29, 102, 103, 107, 111, 113, 115, 116, 117, 165, 193, 222, 224, 254, 473, 488, 521, 598, 670, 696, 907, 927, 960, 997], "mode": [29, 30, 50, 100, 131, 254, 496, 580, 598, 696, 935, 997, 1004], "new": [29, 30, 31, 113, 132, 135, 144, 164, 165, 184, 185, 192, 193, 211, 224, 225, 231, 254, 263, 313, 358, 374, 425, 504, 505, 510, 511, 522, 523, 529, 598, 609, 619, 652, 667, 670, 674, 680, 696, 701, 749, 752, 801, 881, 892, 943, 944, 949, 950, 961, 963, 969, 975, 988, 997, 1004], "alreadi": [29, 30, 254, 307, 399, 598, 743, 846, 997], "adbc": [29, 104, 254], "deltalak": [30, 105, 114, 119, 254], "deltat": [30, 254], "ignor": [30, 124, 125, 127, 178, 209, 254, 308, 338, 353, 354, 355, 398, 443, 444, 598, 746, 781, 797, 798, 799, 845, 879, 880, 997], "overwrite_schema": [30, 254], "storage_opt": [30, 102, 105, 107, 111, 114, 115, 117, 254], "delta_write_opt": [30, 254], "delta": [30, 40, 105, 114, 208, 228, 254, 487, 539, 553, 581, 582, 584, 589, 598, 609, 664, 672, 696, 925, 986, 997], "like": [30, 74, 91, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 130, 167, 169, 173, 254, 399, 437, 455, 495, 586, 598, 623, 651, 696, 846, 889, 934, 997], "categor": [30, 56, 75, 173, 215, 216, 254, 294, 426, 532, 598, 728, 729, 980, 997], "protocol": [30, 91, 104, 134, 254], "object": [30, 31, 32, 35, 55, 73, 74, 91, 92, 97, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 123, 125, 127, 130, 134, 158, 159, 160, 175, 217, 218, 254, 571, 609, 615, 630, 631, 633, 638, 651, 696, 728, 750, 839, 926, 973, 997], "handl": [30, 73, 97, 102, 103, 113, 118, 254, 308, 398, 521, 598, 746, 845, 960, 997], "throw": [30, 91, 254, 293, 497, 498, 598, 727, 936, 937, 997], "add": [30, 31, 103, 135, 148, 159, 231, 232, 254, 452, 525, 561, 565, 590, 598, 630, 635, 674, 675, 676, 696, 704, 997], "anyth": [30, 196, 254, 496, 935], "updat": [30, 254, 696], "extra": [30, 35, 102, 105, 106, 107, 111, 114, 115, 117, 148, 254, 661, 696, 704, 997], "storag": [30, 102, 105, 107, 111, 114, 115, 117, 254], "backend": [30, 104, 105, 114, 254], "cloud": [30, 105, 114, 118, 254], "configur": [30, 105, 114, 254], "authent": [30, 105, 114, 254], "see": [30, 31, 104, 105, 106, 114, 120, 121, 125, 127, 140, 173, 187, 254, 296, 297, 298, 361, 374, 388, 424, 482, 489, 495, 496, 504, 579, 598, 733, 734, 735, 836, 921, 928, 934, 935, 943, 997, 1005], "here": [30, 31, 90, 92, 93, 94, 96, 104, 105, 114, 123, 125, 127, 254, 498, 696, 937], "gc": [30, 105, 114, 254], "azur": [30, 105, 114, 254], "keyword": [30, 53, 105, 111, 114, 140, 187, 196, 200, 231, 234, 254, 450, 583, 585, 598, 648, 655, 674, 678, 696, 997], "argument": [30, 35, 74, 102, 105, 111, 114, 130, 140, 142, 147, 158, 159, 160, 178, 186, 187, 188, 200, 201, 207, 209, 218, 224, 227, 231, 234, 254, 339, 346, 356, 375, 448, 450, 462, 463, 464, 465, 466, 468, 469, 470, 485, 501, 507, 513, 542, 543, 547, 549, 550, 551, 552, 558, 563, 573, 576, 580, 583, 585, 586, 598, 618, 622, 629, 630, 631, 648, 655, 656, 663, 670, 674, 678, 696, 782, 789, 816, 940, 946, 952, 979, 997], "while": [30, 103, 105, 106, 114, 125, 127, 171, 180, 222, 254, 644, 696], "lake": [30, 105, 114, 254, 609], "instanti": [30, 31, 200, 231, 254, 655, 674, 696], "basic": [30, 31, 254, 1005], "filesystem": [30, 105, 114, 254], "table_path": [30, 105, 114, 254], "doe": [30, 65, 73, 84, 90, 92, 93, 94, 96, 97, 102, 103, 105, 106, 113, 114, 118, 120, 121, 148, 172, 196, 197, 223, 231, 254, 346, 349, 417, 426, 536, 564, 598, 623, 640, 669, 674, 696, 704, 792, 809, 870, 916, 987, 997], "match": [30, 31, 73, 84, 90, 92, 93, 94, 96, 120, 121, 150, 174, 196, 254, 432, 489, 490, 493, 495, 496, 497, 498, 504, 505, 512, 514, 515, 516, 550, 625, 636, 696, 825, 832, 928, 929, 932, 934, 935, 936, 937, 943, 944, 951, 953, 954, 955, 997], "version": [30, 71, 74, 105, 114, 119, 130, 254, 331, 332, 514, 516, 579, 580, 774, 775, 953, 955], "old": [30, 192, 254, 652, 696], "existing_table_path": [30, 254], "store": [30, 102, 111, 148, 171, 197, 254, 704, 997], "bucket": [30, 105, 114, 254, 339, 346, 782, 789, 812, 997], "prefix": [30, 132, 254, 263, 290, 425, 512, 521, 525, 598, 725, 951, 960], "aws_region": [30, 114, 254], "the_aws_region": [30, 254], "aws_access_key_id": [30, 105, 114, 254], "the_aws_access_key_id": [30, 105, 114, 254], "aws_secret_access_kei": [30, 105, 114, 254], "the_aws_secret_access_kei": [30, 105, 114, 254], "workbook": [31, 254], "worksheet": [31, 254], "posit": [31, 142, 147, 158, 186, 200, 201, 207, 224, 231, 234, 254, 353, 354, 355, 356, 448, 485, 503, 542, 543, 547, 549, 550, 551, 552, 558, 563, 573, 576, 583, 585, 586, 598, 618, 622, 629, 655, 656, 663, 670, 674, 678, 696, 797, 798, 799, 942, 997], "tupl": [31, 104, 135, 171, 196, 197, 202, 233, 254, 459, 598, 649, 659, 696, 893, 997], "a1": [31, 66, 68, 254], "table_styl": [31, 254], "column_format": [31, 254], "dtype_format": [31, 254], "oneormoredatatyp": [31, 123, 254, 832, 997], "conditional_format": [31, 254], "conditionalformatdict": [31, 254], "column_tot": [31, 254], "columntotalsdefinit": [31, 254], "column_width": [31, 254], "row_tot": [31, 254], "rowtotalsdefinit": [31, 254], "row_height": [31, 254], "sparklin": [31, 254], "sequenc": [31, 57, 65, 72, 90, 92, 93, 94, 96, 99, 102, 103, 113, 123, 124, 125, 136, 141, 147, 148, 173, 174, 180, 184, 187, 188, 207, 215, 221, 223, 224, 225, 226, 227, 254, 379, 417, 424, 450, 485, 523, 544, 547, 556, 557, 565, 567, 572, 579, 598, 612, 622, 635, 636, 648, 663, 668, 669, 670, 671, 696, 704, 745, 747, 864, 910, 963, 997], "formula": [31, 254, 351, 598, 795, 997], "autofilt": [31, 254], "autofit": [31, 254], "hidden_column": [31, 254], "hide_gridlin": [31, 254], "sheet_zoom": [31, 254], "excel": [31, 106, 254, 609], "open": [31, 102, 103, 106, 107, 111, 115, 117, 254], "xlsxwriter": [31, 119, 254], "ha": [31, 65, 113, 134, 159, 160, 227, 254, 268, 291, 307, 387, 435, 533, 544, 598, 630, 631, 680, 696, 726, 732, 743, 745, 809, 822, 981, 997], "close": [31, 74, 130, 159, 160, 254, 375, 421, 462, 463, 464, 465, 466, 468, 469, 470, 482, 598, 630, 631, 696, 816, 921, 997], "xlsx": [31, 106, 254], "work": [31, 39, 103, 106, 160, 193, 254, 268, 284, 295, 296, 297, 298, 356, 365, 399, 418, 448, 502, 535, 598, 631, 696, 720, 730, 733, 734, 735, 807, 846, 865, 941, 982, 997], "directori": [31, 111, 254], "sheet1": [31, 254], "valid": [31, 50, 107, 111, 127, 132, 146, 254, 307, 489, 490, 495, 496, 498, 504, 505, 598, 743, 796, 809, 928, 929, 934, 935, 937, 943, 944, 997], "notat": [31, 254], "integ": [31, 43, 44, 45, 46, 59, 60, 61, 62, 123, 125, 126, 128, 159, 160, 254, 295, 340, 365, 366, 457, 462, 463, 464, 465, 466, 467, 468, 469, 470, 503, 541, 546, 567, 580, 598, 630, 631, 696, 712, 713, 730, 783, 807, 825, 891, 901, 910, 942, 997, 1004, 1005], "medium": [31, 254], "kei": [31, 65, 71, 73, 159, 174, 181, 186, 188, 192, 195, 254, 585, 630, 636, 645, 652, 653, 696], "contain": [31, 65, 71, 92, 95, 97, 105, 114, 120, 124, 136, 144, 172, 184, 188, 221, 254, 268, 379, 426, 490, 493, 495, 496, 498, 511, 512, 598, 612, 619, 649, 668, 696, 870, 876, 929, 932, 934, 935, 937, 950, 951, 973, 997], "follow": [31, 71, 102, 103, 105, 113, 114, 135, 159, 160, 174, 187, 227, 254, 268, 335, 339, 346, 450, 455, 462, 463, 464, 465, 466, 468, 469, 470, 523, 534, 544, 590, 591, 592, 594, 598, 599, 600, 604, 605, 606, 630, 631, 636, 648, 696, 778, 782, 789, 889, 909, 910, 989, 991, 993, 997, 998, 1001, 1002, 1003, 1005], "first_column": [31, 254], "last_column": [31, 254], "banded_column": [31, 254], "banded_row": [31, 254], "sheet": [31, 106, 254], "chart": [31, 254, 649, 696], "subsequ": [31, 55, 191, 218, 254, 417, 621, 696], "colnam": [31, 113, 125, 145, 254, 620, 696], "given": [31, 50, 51, 65, 74, 90, 92, 93, 94, 96, 102, 103, 113, 122, 123, 125, 126, 127, 128, 130, 135, 136, 146, 147, 159, 160, 170, 186, 187, 196, 203, 204, 207, 221, 226, 254, 268, 314, 342, 344, 345, 351, 375, 396, 411, 417, 419, 448, 450, 455, 458, 459, 462, 463, 465, 468, 469, 470, 473, 475, 476, 496, 514, 516, 523, 563, 580, 598, 612, 622, 630, 631, 640, 648, 657, 658, 663, 668, 671, 680, 696, 705, 744, 753, 785, 787, 788, 795, 796, 812, 816, 835, 843, 858, 864, 866, 869, 881, 887, 889, 893, 896, 897, 899, 902, 903, 904, 907, 913, 914, 935, 953, 955, 984, 988, 997, 1004, 1005], "dd": [31, 254], "mm": [31, 254], "yyyi": [31, 254], "00": [31, 74, 125, 130, 159, 174, 227, 254, 312, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 514, 516, 519, 561, 630, 636, 696, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 789, 790, 791, 792, 793, 953, 955, 958], "dtype": [31, 68, 75, 90, 92, 94, 96, 97, 100, 102, 103, 113, 122, 123, 124, 125, 127, 131, 134, 159, 160, 174, 216, 217, 218, 254, 268, 270, 271, 272, 273, 274, 275, 278, 293, 296, 297, 298, 299, 300, 305, 306, 318, 321, 325, 327, 329, 334, 341, 349, 356, 358, 393, 394, 395, 404, 416, 422, 424, 426, 457, 458, 462, 463, 464, 465, 466, 468, 469, 470, 477, 480, 481, 488, 497, 508, 514, 526, 528, 530, 531, 532, 537, 538, 544, 546, 554, 563, 567, 571, 572, 580, 585, 598, 630, 631, 636, 696, 717, 718, 727, 732, 733, 734, 735, 741, 742, 745, 746, 757, 760, 767, 769, 772, 777, 784, 792, 796, 801, 819, 825, 832, 840, 841, 842, 851, 863, 869, 870, 894, 908, 915, 927, 936, 947, 953, 966, 976, 978, 979, 980, 984, 997, 1005], "overridden": [31, 90, 92, 94, 96, 129, 254, 696], "basi": [31, 125, 254], "param": [31, 90, 92, 93, 94, 96, 102, 103, 113, 124, 125, 127, 196, 254, 696], "It": [31, 135, 181, 187, 236, 254, 268, 292, 434, 598, 640, 645, 680, 696, 909, 910, 997], "also": [31, 55, 74, 93, 113, 123, 124, 125, 126, 127, 145, 158, 159, 160, 181, 184, 200, 207, 231, 254, 303, 306, 338, 374, 375, 455, 462, 463, 464, 465, 466, 468, 469, 470, 485, 556, 557, 565, 567, 579, 590, 597, 598, 603, 629, 630, 631, 645, 655, 663, 674, 675, 696, 781, 816, 889, 997], "group": [31, 35, 50, 103, 158, 159, 160, 172, 184, 186, 188, 225, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 262, 268, 364, 399, 448, 455, 484, 485, 489, 495, 496, 504, 528, 544, 598, 629, 630, 631, 661, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 696, 846, 928, 934, 935, 943], "float_dtyp": [31, 254], "simplifi": [31, 72, 254, 616, 621, 623, 649, 659, 660, 661, 696], "uniform": [31, 254], "condit": [31, 70, 144, 151, 196, 254, 493, 512, 565, 590, 619, 626, 696], "suppli": [31, 90, 92, 93, 94, 96, 196, 254, 450, 598, 696], "typenam": [31, 254], "3_color_scal": [31, 254], "data_bar": [31, 254], "make": [31, 57, 73, 90, 95, 102, 103, 104, 107, 111, 115, 117, 159, 160, 181, 184, 191, 227, 254, 354, 355, 426, 448, 458, 510, 521, 598, 630, 631, 645, 696, 798, 799, 812, 870, 949, 960, 997, 1005], "icon": [31, 254], "multipl": [31, 53, 72, 73, 102, 103, 113, 115, 116, 117, 123, 127, 136, 142, 146, 148, 151, 158, 159, 164, 172, 186, 188, 200, 201, 207, 221, 231, 234, 254, 416, 431, 435, 440, 441, 448, 459, 462, 463, 464, 465, 466, 468, 469, 470, 485, 542, 543, 547, 550, 556, 557, 558, 565, 572, 573, 576, 579, 586, 590, 598, 612, 618, 626, 629, 630, 655, 656, 663, 668, 674, 678, 680, 696, 704, 796, 863, 875, 893, 997], "singl": [31, 51, 65, 73, 102, 103, 104, 111, 113, 123, 142, 143, 144, 148, 155, 170, 186, 196, 207, 254, 268, 335, 362, 397, 416, 424, 456, 459, 485, 488, 540, 542, 543, 544, 547, 550, 551, 552, 558, 572, 573, 576, 586, 598, 618, 619, 663, 696, 704, 778, 844, 863, 890, 893, 927, 973, 997], "across": [31, 65, 254, 542, 543, 558, 573, 576, 586], "effect": [31, 134, 153, 254, 268, 598, 676, 696], "heatmap": [31, 254], "min": [31, 35, 130, 141, 150, 159, 160, 188, 254, 296, 298, 304, 361, 448, 455, 465, 583, 598, 625, 630, 631, 661, 696, 733, 735, 740, 745, 804, 889, 899, 997, 1005], "entir": [31, 254], "final": [31, 65, 117, 254, 353, 354, 355, 598, 623, 696, 797, 798, 799, 997], "made": [31, 130, 254, 978, 997], "up": [31, 57, 104, 171, 174, 197, 214, 254, 268, 295, 521, 598, 635, 636, 640, 696, 730, 960, 997], "abov": [31, 254, 346, 590], "order": [31, 50, 52, 65, 93, 120, 135, 136, 158, 159, 160, 186, 187, 188, 198, 201, 207, 221, 223, 227, 254, 268, 278, 284, 294, 413, 418, 455, 472, 473, 474, 484, 485, 523, 535, 536, 547, 598, 612, 629, 630, 631, 644, 656, 660, 661, 663, 668, 669, 696, 705, 714, 720, 729, 744, 831, 860, 865, 887, 889, 894, 906, 907, 911, 923, 963, 982, 983, 997], "than": [31, 74, 89, 94, 96, 102, 103, 113, 118, 125, 127, 135, 137, 157, 158, 171, 174, 186, 196, 197, 198, 225, 236, 254, 268, 368, 369, 387, 390, 423, 472, 482, 500, 506, 511, 521, 553, 586, 598, 629, 636, 660, 661, 696, 705, 906, 921, 939, 945, 950, 960, 997, 1005], "total": [31, 146, 254, 796, 997], "export": [31, 171, 172, 197, 214, 217, 254], "numer": [31, 174, 254, 261, 296, 297, 298, 366, 375, 421, 439, 441, 451, 458, 477, 524, 534, 598, 609, 636, 696, 733, 734, 735, 745, 816, 830, 908, 915, 997, 1005], "associ": [31, 51, 53, 65, 124, 254], "sum": [31, 50, 65, 146, 153, 158, 160, 170, 188, 234, 254, 268, 305, 306, 351, 362, 417, 462, 463, 465, 468, 469, 470, 540, 542, 556, 558, 565, 579, 598, 616, 621, 623, 629, 631, 647, 649, 659, 678, 696, 741, 742, 795, 796, 896, 897, 899, 902, 903, 904, 997], "pass": [31, 35, 53, 65, 74, 92, 106, 113, 123, 125, 127, 136, 140, 142, 158, 159, 160, 162, 176, 186, 187, 200, 207, 210, 221, 227, 231, 234, 254, 268, 319, 338, 359, 373, 448, 450, 485, 501, 507, 513, 542, 543, 547, 550, 558, 567, 573, 576, 585, 586, 598, 612, 618, 629, 630, 631, 633, 640, 648, 655, 659, 663, 668, 674, 678, 680, 696, 705, 758, 781, 802, 811, 838, 940, 946, 952, 967, 997], "must": [31, 91, 92, 105, 114, 141, 147, 159, 160, 174, 181, 196, 254, 417, 424, 462, 463, 464, 465, 466, 468, 469, 470, 598, 622, 630, 631, 636, 640, 645, 696, 744, 745, 887, 997], "funcnam": [31, 254], "averag": [31, 254, 353, 354, 355, 455, 598, 797, 798, 799, 889, 997], "count_num": [31, 254], "count": [31, 50, 102, 103, 107, 111, 113, 115, 116, 117, 141, 159, 160, 174, 184, 185, 188, 222, 226, 227, 232, 236, 245, 254, 269, 302, 335, 391, 397, 442, 446, 462, 463, 464, 465, 466, 468, 469, 470, 490, 536, 538, 545, 577, 598, 630, 631, 636, 647, 671, 676, 680, 689, 696, 745, 778, 812, 844, 877, 882, 929, 983, 985, 997], "std_dev": [31, 254], "var": [31, 128, 254, 598, 696, 997], "pixel": [31, 254], "unit": [31, 38, 40, 74, 125, 127, 146, 254, 312, 313, 319, 344, 349, 422, 435, 514, 516, 537, 567, 598, 649, 696, 751, 752, 758, 787, 792, 796, 869, 953, 955, 984, 997, 1005], "hand": [31, 102, 103, 113, 254], "side": [31, 159, 160, 254, 375, 462, 463, 464, 465, 466, 468, 469, 470, 473, 598, 630, 631, 696, 816, 907, 997], "call": [31, 54, 103, 125, 127, 132, 135, 158, 159, 160, 175, 253, 254, 268, 303, 306, 573, 576, 598, 610, 629, 630, 631, 695, 696, 705, 997], "ad": [31, 93, 134, 159, 222, 231, 254, 267, 359, 556, 557, 598, 630, 674, 696, 802, 997], "end": [31, 74, 102, 103, 111, 113, 130, 159, 254, 289, 335, 339, 340, 356, 375, 412, 489, 493, 496, 508, 512, 546, 550, 563, 590, 598, 630, 632, 639, 649, 696, 724, 778, 782, 816, 859, 932, 935, 947, 951, 997], "wise": [31, 65, 153, 254, 270, 271, 272, 273, 274, 275, 299, 300, 357, 420, 479, 480, 481, 530, 531, 556, 557, 565, 573, 576, 579, 598, 706, 707, 708, 709, 710, 711, 737, 738, 800, 867, 868, 918, 919, 920, 970, 971, 997], "particip": [31, 254], "distinct": [31, 127, 186, 254, 284, 418, 455, 561, 598, 720, 865, 889, 997, 1005], "referenc": [31, 254, 523], "differ": [31, 102, 118, 120, 148, 159, 160, 171, 197, 214, 222, 254, 308, 317, 335, 336, 338, 347, 398, 426, 443, 444, 514, 536, 564, 567, 598, 621, 630, 631, 696, 704, 705, 746, 756, 778, 779, 781, 790, 845, 879, 880, 908, 953, 997], "row_index": [31, 254], "height": [31, 144, 254], "provid": [31, 53, 102, 103, 104, 105, 113, 114, 125, 127, 170, 254, 287, 288, 417, 491, 492, 495, 497, 498, 567, 585, 609, 660, 661, 696, 722, 723, 812, 835, 930, 931, 934, 936, 937, 997, 1004, 1005], "intersect": [31, 254], "bodi": [31, 254], "start": [31, 74, 101, 102, 103, 107, 111, 113, 115, 116, 117, 129, 130, 158, 159, 175, 206, 227, 232, 254, 290, 317, 319, 320, 322, 323, 328, 330, 336, 337, 339, 340, 344, 346, 347, 348, 350, 356, 375, 412, 483, 489, 493, 496, 508, 512, 546, 550, 556, 563, 565, 590, 598, 629, 630, 649, 662, 676, 696, 725, 751, 753, 756, 758, 759, 761, 766, 768, 771, 773, 776, 779, 780, 782, 783, 787, 789, 790, 791, 792, 793, 816, 859, 922, 932, 935, 947, 951, 997, 1005], "zero": [31, 90, 91, 101, 102, 103, 107, 111, 124, 134, 150, 171, 196, 212, 217, 218, 254, 360, 361, 417, 421, 473, 482, 521, 534, 598, 614, 625, 696, 732, 804, 864, 921, 960, 973, 978, 979, 997], "unless": [31, 65, 92, 218, 254, 580, 696, 979, 987, 997], "marker": [31, 254], "compliant": [31, 254], "case": [31, 65, 90, 92, 93, 94, 96, 117, 129, 135, 148, 159, 160, 171, 254, 424, 425, 434, 435, 489, 496, 504, 598, 630, 631, 696, 704, 928, 935, 943, 997], "three": [31, 220, 254, 417, 473, 598, 864], "avail": [31, 99, 105, 114, 123, 132, 253, 254, 455, 591, 592, 594, 597, 598, 599, 600, 603, 604, 605, 606, 609, 610, 623, 695, 696, 889, 989, 991, 993, 997, 998, 1001, 1002, 1003], "insert_befor": [31, 254], "insert_aft": [31, 254], "respect": [31, 254], "direct": [31, 104, 111, 117, 225, 254], "far": [31, 254], "thei": [31, 93, 113, 120, 132, 175, 254, 461, 598, 895, 997], "strongli": [31, 129, 135, 196, 236, 254, 268, 598, 705, 997], "advis": [31, 175, 254, 292, 598], "structur": [31, 81, 85, 87, 148, 187, 217, 254, 450, 598, 648, 696, 704, 997], "your": [31, 65, 102, 103, 120, 121, 135, 171, 200, 231, 234, 254, 268, 292, 598, 616, 632, 639, 640, 655, 674, 678, 696, 705, 997, 1005], "wherev": [31, 135, 236, 254, 268, 598, 705, 997], "possibl": [31, 102, 135, 158, 171, 197, 223, 236, 254, 268, 422, 434, 511, 537, 598, 629, 669, 696, 705, 950, 997], "simpl": [31, 127, 184, 254], "colx": [31, 55, 254, 1005], "coli": [31, 254, 1005], "after": [31, 55, 73, 93, 101, 102, 103, 107, 111, 113, 115, 116, 117, 148, 224, 253, 254, 356, 426, 448, 455, 521, 598, 670, 696, 704, 870, 889, 960, 997], "befor": [31, 102, 113, 129, 132, 148, 159, 174, 224, 254, 305, 306, 307, 426, 448, 449, 461, 462, 463, 464, 465, 466, 468, 469, 470, 521, 526, 581, 582, 598, 630, 633, 636, 670, 696, 704, 741, 742, 743, 870, 883, 895, 896, 897, 898, 899, 900, 902, 903, 904, 960, 966, 997], "most": [31, 52, 90, 102, 103, 113, 254, 435, 440, 449, 511, 538, 598, 875, 883, 950, 985, 997, 1004], "mandatori": [31, 254], "return_dtyp": [31, 135, 254, 268, 424, 426, 544, 572, 598, 705, 870, 997], "latter": [31, 148, 254, 704, 997], "appropri": [31, 254, 455, 598, 889, 997], "pure": [31, 254], "actual": [31, 93, 106, 125, 127, 254, 292, 598, 916, 997], "indic": [31, 70, 101, 102, 103, 107, 111, 113, 122, 123, 127, 159, 160, 174, 201, 215, 227, 254, 279, 335, 339, 346, 377, 380, 381, 383, 384, 385, 416, 430, 433, 462, 463, 464, 465, 466, 468, 469, 470, 473, 479, 528, 547, 598, 630, 631, 636, 656, 696, 778, 782, 789, 820, 824, 826, 827, 828, 829, 863, 907, 918, 968, 974, 997, 1005], "calcul": [31, 65, 159, 208, 228, 254, 308, 353, 354, 355, 388, 398, 422, 467, 482, 487, 537, 539, 542, 544, 553, 581, 582, 584, 589, 598, 630, 664, 672, 696, 746, 797, 798, 799, 836, 845, 901, 921, 925, 986, 997], "individu": [31, 125, 160, 217, 254, 268, 496, 598, 631, 661, 696, 731, 935, 997], "gridlin": [31, 254], "zoom": [31, 254], "level": [31, 35, 113, 115, 116, 117, 125, 135, 153, 184, 254, 362, 598, 632, 639, 661, 696], "definit": [31, 123, 254, 388, 598, 836, 997], "take": [31, 125, 132, 153, 181, 187, 211, 254, 335, 485, 529, 562, 564, 598, 645, 667, 696, 778, 969, 988, 997], "care": [31, 254, 268, 474, 598, 911, 997], "rel": [31, 105, 114, 120, 121, 254, 335, 353, 354, 355, 598, 778, 797, 798, 799, 997], "readthedoc": [31, 254], "io": [31, 254], "working_with_conditional_format": [31, 254], "html": [31, 91, 104, 134, 140, 254], "similarli": [31, 93, 254], "well": [31, 102, 103, 113, 147, 188, 254, 375, 598, 622, 696, 816, 997], "adjac": [31, 254], "two": [31, 55, 92, 94, 96, 104, 130, 153, 180, 181, 188, 220, 235, 236, 254, 262, 309, 313, 417, 484, 528, 553, 555, 581, 582, 598, 644, 645, 679, 680, 696, 747, 752, 864, 997], "help": [31, 254, 623, 696], "where": [31, 50, 65, 70, 104, 124, 144, 148, 171, 180, 197, 208, 228, 254, 279, 348, 351, 473, 482, 485, 487, 539, 553, 581, 582, 584, 589, 590, 598, 644, 664, 672, 696, 704, 715, 791, 795, 907, 921, 925, 986, 988, 997, 1004], "appear": [31, 93, 120, 254, 536, 598, 983, 997], "working_with_sparklin": [31, 254], "inject": [31, 65, 254], "locat": [31, 148, 194, 219, 224, 254, 473, 598, 670, 696, 704, 907, 910, 968, 997], "syntax": [31, 135, 184, 254, 489, 495, 496, 504, 659, 696, 928, 934, 935, 943, 997], "ensur": [31, 75, 124, 125, 127, 158, 186, 196, 254, 375, 538, 598, 629, 640, 696, 978, 985, 997], "correctli": [31, 254], "microsoft": [31, 119, 254], "com": [31, 104, 254, 353, 354, 355, 495, 496, 598, 797, 798, 799, 934, 935, 997], "u": [31, 38, 40, 53, 74, 97, 171, 197, 214, 254, 312, 313, 319, 344, 349, 514, 516, 567, 751, 752, 758, 787, 792, 953, 955], "offic": [31, 254], "f5ed2452": [31, 254], "2337": [31, 254], "4f71": [31, 254], "bed3": [31, 254], "c8ae6d2b276": [31, 254], "random": [31, 123, 125, 127, 161, 198, 254, 370, 455, 472, 478, 598, 810, 889, 906, 917, 997], "date": [31, 38, 65, 74, 102, 103, 104, 113, 118, 125, 141, 157, 159, 160, 172, 174, 227, 254, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 396, 462, 463, 464, 465, 466, 468, 469, 470, 514, 515, 517, 532, 567, 571, 588, 598, 630, 631, 636, 696, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 832, 843, 844, 879, 880, 910, 953, 954, 980, 997], "dtm": [31, 254, 313, 752], "2023": [31, 97, 119, 172, 254, 313, 571, 752], "num": [31, 220, 254, 375, 378, 521, 598, 816, 997], "500": [31, 171, 226, 254, 623, 671, 696, 766, 768, 776, 783, 896, 897, 899, 997], "val": [31, 195, 254, 294, 450, 532, 590, 598, 653, 696, 729], "10_000": [31, 254], "20_000": [31, 254], "30_000": [31, 254], "increas": [31, 65, 102, 111, 254, 307, 598, 743, 997], "b4": [31, 254], "light": [31, 254], "twice": [31, 106, 254], "each": [31, 65, 103, 116, 120, 121, 123, 135, 157, 158, 159, 160, 172, 174, 186, 218, 224, 227, 233, 234, 236, 237, 239, 248, 254, 268, 335, 339, 346, 403, 415, 421, 455, 485, 496, 510, 511, 544, 547, 552, 585, 598, 630, 631, 636, 649, 670, 678, 680, 681, 683, 692, 696, 731, 778, 782, 789, 850, 862, 889, 935, 949, 950, 965, 997, 1005], "titl": [31, 50, 254], "explicit": [31, 113, 123, 254, 546, 579], "integr": [31, 254, 1005], "multi_fram": [31, 254], "wb": [31, 254], "coordin": [31, 254], "advanc": [31, 254, 417, 864, 1005], "min_color": [31, 254], "76933c": [31, 254], "mid_color": [31, 254], "c4d79b": [31, 254], "max_color": [31, 254], "ebf1d": [31, 254], "data_bar_2010": [31, 254], "bar_color": [31, 254], "9bbb59": [31, 254], "bar_negative_color_sam": [31, 254], "bar_negative_border_color_sam": [31, 254], "000": [31, 254, 1005], "white": [31, 254], "w": [31, 52, 53, 254, 495, 934], "get_worksheet_by_nam": [31, 254], "fmt_titl": [31, 254], "add_format": [31, 254], "font_color": [31, 254], "4f6228": [31, 254], "font_siz": [31, 254], "12": [31, 65, 74, 97, 124, 125, 130, 159, 160, 174, 227, 254, 305, 313, 320, 323, 330, 331, 332, 337, 339, 346, 350, 449, 477, 517, 557, 559, 560, 572, 598, 630, 631, 632, 636, 639, 659, 666, 696, 705, 744, 752, 773, 782, 789, 905, 956, 997, 1005], "ital": [31, 254], "bold": [31, 254], "customis": [31, 254], "trend": [31, 254], "win_loss": [31, 254], "subtl": [31, 254], "tone": [31, 254], "hidden": [31, 254], "id": [31, 73, 236, 254, 504, 505, 536, 538, 598, 680, 983, 997, 1005], "q1": [31, 254], "55": [31, 67, 254], "20": [31, 125, 130, 148, 164, 165, 187, 189, 193, 194, 254, 276, 277, 278, 308, 339, 346, 370, 374, 450, 567, 571, 598, 648, 696, 746, 789, 997], "35": [31, 119, 254, 308, 598, 746, 997], "q2": [31, 254], "30": [31, 130, 148, 159, 164, 187, 193, 194, 213, 231, 254, 276, 277, 278, 308, 313, 318, 323, 331, 337, 338, 339, 346, 350, 370, 477, 571, 598, 630, 648, 674, 696, 744, 746, 752, 757, 774, 781, 782, 789, 997, 1005], "15": [31, 119, 124, 130, 135, 159, 160, 165, 254, 307, 308, 332, 339, 346, 450, 557, 580, 598, 630, 631, 696, 743, 746, 782, 789, 997], "60": [31, 148, 254, 340, 341, 514, 779, 783, 784, 953], "q3": [31, 254], "40": [31, 148, 187, 254, 339, 346, 370, 517, 598, 648, 696, 762, 789, 956], "80": [31, 254], "q4": [31, 254], "75": [31, 141, 254, 265, 447, 598, 745, 812, 887, 997, 1005], "account": [31, 97, 254, 335, 353, 354, 355, 598, 778, 797, 798, 799, 997], "flavour": [31, 254], "integer_dtyp": [31, 200, 254, 655, 696], "0_": [31, 254], "just": [31, 104, 113, 180, 254, 644, 696], "unifi": [31, 254], "multi": [31, 102, 103, 254, 356, 495, 573, 576, 598, 934], "2_color_scal": [31, 254], "95b3d7": [31, 254], "ffffff": [31, 254], "base": [31, 36, 144, 151, 159, 160, 254, 351, 353, 354, 355, 419, 420, 503, 598, 619, 626, 630, 631, 696, 795, 797, 798, 799, 812, 866, 867, 887, 942, 988, 997, 1005], "standardis": [31, 254], "z": [31, 52, 73, 97, 123, 125, 146, 167, 169, 173, 180, 254, 261, 265, 294, 370, 395, 447, 458, 496, 514, 516, 580, 598, 635, 644, 662, 696, 729, 804, 935, 953, 955, 997, 1004], "score": [31, 254], "conjunct": [31, 106, 254], "a123": [31, 254], "b345": [31, 254], "c567": [31, 254], "d789": [31, 254], "e101": [31, 254], "45": [31, 130, 160, 254, 313, 339, 346, 490, 496, 571, 631, 696, 752, 782, 789, 929, 935, 1005], "85": [31, 254, 1005], "font": [31, 254], "consola": [31, 254], "standard": [31, 119, 208, 217, 254, 323, 354, 468, 482, 487, 498, 584, 598, 664, 696, 762, 798, 921, 925, 937, 997, 1005], "stdev": [31, 254], "ipccompress": [32, 254], "arrow": [32, 76, 90, 104, 107, 115, 212, 254, 660, 696, 973, 978, 997], "ipc": [32, 107, 108, 115, 118, 254, 609], "binari": [32, 254, 286, 288, 289, 290, 543, 721, 723, 724, 725], "feather": [32, 107, 115, 254, 609], "lz4": [32, 35, 254, 660, 661, 696], "zstd": [32, 35, 254, 660, 661, 696], "pretti": [33, 254], "row_ori": [33, 254], "iobas": [33, 34, 109, 110, 254, 651, 677, 696], "serial": [33, 34, 254], "represent": [33, 34, 216, 254, 294, 317, 320, 323, 324, 326, 328, 330, 333, 336, 337, 340, 347, 348, 350, 532, 598, 621, 638, 696, 729, 756, 759, 761, 762, 766, 768, 771, 773, 776, 779, 780, 783, 790, 791, 793, 976, 980, 997], "orient": [33, 66, 68, 94, 96, 254, 696], "slower": [33, 94, 96, 135, 158, 186, 227, 236, 254, 629, 696, 705, 997], "common": [33, 65, 73, 254, 603], "write_ndjson": [33, 254], "newlin": [34, 110, 116, 254], "delimit": [34, 102, 103, 110, 113, 116, 188, 215, 254, 488, 927, 974, 997], "parquetcompress": [35, 254], "compression_level": [35, 254, 661, 696], "statist": [35, 102, 103, 111, 117, 141, 254, 354, 355, 388, 462, 463, 464, 465, 466, 467, 468, 469, 470, 482, 598, 661, 696, 745, 798, 799, 836, 901, 921, 997], "row_group_s": [35, 254, 661, 696], "use_pyarrow": [35, 102, 107, 111, 254, 661, 696, 977, 978, 997], "pyarrow_opt": [35, 105, 111, 114, 254], "parquet": [35, 111, 112, 117, 254, 609, 661, 696], "gzip": [35, 254, 661, 696], "lzo": [35, 254, 661, 696], "brotli": [35, 254, 661, 696], "choos": [35, 254, 660, 661, 696], "good": [35, 171, 254, 660, 661, 696], "perform": [35, 65, 81, 91, 102, 103, 107, 111, 113, 115, 116, 117, 134, 135, 159, 160, 174, 191, 236, 254, 268, 292, 448, 598, 630, 631, 636, 660, 661, 676, 696, 705, 997], "fast": [35, 126, 128, 254, 359, 474, 598, 660, 661, 696, 802, 911, 997, 1005], "decompress": [35, 254, 660, 661, 696], "backward": [35, 150, 174, 254, 285, 332, 361, 598, 625, 636, 661, 696, 775, 804, 997], "guarante": [35, 91, 102, 103, 223, 254, 623, 661, 669, 696], "deal": [35, 171, 254, 338, 455, 514, 598, 661, 696, 781, 889, 953, 997], "older": [35, 254, 661, 696], "reader": [35, 99, 102, 103, 107, 111, 254, 610, 661, 696], "higher": [35, 190, 246, 254, 454, 466, 578, 598, 650, 661, 690, 696, 888, 900, 997], "mean": [35, 102, 103, 107, 111, 113, 141, 150, 158, 188, 234, 254, 358, 361, 463, 482, 495, 548, 598, 625, 629, 640, 661, 678, 696, 745, 801, 804, 809, 897, 921, 934, 997], "smaller": [35, 146, 254, 623, 661, 696, 796, 997], "disk": [35, 107, 254, 659, 660, 661, 696], "11": [35, 119, 125, 160, 254, 310, 311, 323, 331, 332, 335, 339, 346, 374, 449, 455, 469, 483, 521, 541, 550, 586, 598, 616, 631, 632, 639, 649, 661, 666, 696, 705, 778, 782, 789, 895, 997], "22": [35, 124, 254, 339, 346, 349, 514, 550, 661, 696, 782, 789, 792, 953, 1005], "comput": [35, 72, 73, 78, 146, 158, 174, 218, 223, 234, 246, 254, 260, 270, 271, 272, 273, 274, 275, 281, 282, 283, 299, 300, 302, 303, 304, 305, 306, 309, 351, 357, 388, 407, 408, 409, 419, 420, 421, 440, 448, 449, 453, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 479, 480, 481, 482, 486, 530, 531, 542, 543, 547, 553, 555, 558, 562, 573, 576, 581, 582, 586, 598, 629, 633, 635, 636, 661, 669, 675, 678, 690, 696, 700, 706, 707, 708, 709, 710, 711, 717, 718, 719, 737, 738, 739, 740, 741, 742, 747, 795, 796, 800, 836, 854, 855, 856, 866, 867, 868, 875, 883, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 918, 919, 920, 921, 924, 970, 971, 979, 997], "512": [35, 254, 451, 598, 883, 997], "implement": [35, 91, 134, 135, 236, 254, 268, 598, 680, 705, 909, 910, 997], "v": [35, 52, 53, 146, 254, 473, 598, 744, 907, 997], "At": [35, 254], "moment": [35, 140, 254, 388, 482, 598, 836, 921, 997], "pyarrow": [35, 90, 95, 102, 105, 107, 111, 114, 118, 119, 172, 212, 217, 218, 254, 610, 973, 977, 978, 979, 997], "write_t": [35, 254], "calendar": [37, 38, 159, 160, 174, 227, 254, 323, 335, 339, 346, 350, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 636, 696, 762, 778, 782, 789, 793], "time_unit": [38, 40, 74, 97, 312, 313, 319, 344, 349, 514, 516, 567, 751, 752, 758, 787, 792, 953, 955], "time_zon": [38, 74, 97, 314, 338, 516, 753, 781, 955], "timezon": [38, 74], "m": [38, 40, 53, 74, 312, 313, 319, 342, 344, 345, 349, 495, 514, 515, 516, 519, 567, 751, 752, 758, 785, 787, 788, 792, 934, 953, 954, 955, 958], "zone": [38, 74, 314, 338, 514, 516, 753, 781, 953, 955], "zoneinfo": 38, "run": [38, 72, 126, 128, 135, 158, 175, 188, 223, 236, 254, 268, 307, 399, 583, 598, 616, 621, 623, 629, 640, 644, 649, 659, 660, 661, 669, 696, 705, 743, 846, 997, 1004, 1005], "available_timezon": 38, "128": [39, 67, 883, 997], "bit": [39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 457, 489, 598, 891, 928, 997], "neg": [39, 159, 162, 176, 203, 204, 206, 210, 254, 411, 412, 450, 475, 476, 483, 508, 598, 630, 657, 658, 662, 676, 696, 811, 838, 858, 859, 913, 914, 922, 947, 967, 997], "scale": [39, 146, 254, 450, 517, 598, 796, 956, 997], "experiment": [39, 118, 200, 225, 226, 231, 254, 307, 339, 462, 463, 464, 465, 466, 468, 469, 470, 598, 655, 671, 674, 696, 743, 782, 812, 887, 997], "progress": 39, "expect": [39, 82, 84, 89, 268, 544, 571, 598, 638, 640, 696, 887, 997], "32": [41, 44, 60, 67, 160, 170, 254, 441, 477, 598, 631, 696, 747, 779, 883, 900, 997], "sign": [43, 44, 45, 46, 335, 457, 521, 598, 778, 825, 891, 960, 997], "arrai": [47, 90, 94, 102, 103, 111, 146, 212, 217, 218, 254, 281, 282, 283, 284, 288, 296, 297, 298, 302, 303, 304, 305, 306, 395, 406, 407, 408, 409, 410, 413, 414, 420, 462, 463, 465, 468, 469, 470, 474, 490, 492, 495, 498, 562, 598, 696, 717, 718, 719, 720, 723, 733, 734, 735, 739, 740, 741, 742, 747, 796, 842, 853, 854, 855, 856, 857, 860, 861, 867, 868, 896, 897, 899, 902, 903, 904, 911, 916, 929, 931, 934, 937, 973, 978, 979, 987, 997], "wrap": [49, 97, 375, 598], "arbitrari": [49, 125], "python": [49, 74, 102, 103, 119, 130, 135, 171, 197, 214, 236, 254, 268, 313, 424, 544, 590, 598, 603, 680, 705, 752, 763, 764, 765, 770, 977, 997], "queri": [50, 52, 72, 104, 107, 113, 115, 116, 117, 148, 175, 187, 254, 426, 498, 598, 616, 621, 623, 632, 639, 649, 659, 676, 680, 696, 704, 937, 997, 1004], "eager": [50, 51, 52, 53, 54, 55, 70, 74, 100, 130, 131, 159, 225, 254, 312, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 344, 346, 347, 348, 349, 350, 546, 567, 580, 585, 597, 609, 630, 696, 751, 753, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 789, 790, 791, 792, 793, 1004], "pars": [50, 102, 103, 106, 113, 115, 116, 136, 158, 200, 207, 221, 231, 234, 254, 375, 448, 485, 497, 503, 514, 516, 517, 542, 543, 547, 549, 551, 552, 558, 567, 573, 576, 585, 586, 598, 612, 629, 655, 663, 668, 674, 678, 696, 816, 936, 942, 953, 955, 956, 997], "against": [50, 399, 696, 846, 1004, 1005], "eagerli": [50, 417], "unset": [50, 124, 338, 417, 781], "init": [50, 132], "eager_execut": [50, 1004], "itself": [50, 123, 638, 696, 1004], "alwai": [50, 102, 124, 135, 236, 254, 434, 514, 590, 640, 696, 705, 953, 997, 1004, 1005], "impact": [50, 159, 254, 630, 696, 1004], "declar": [50, 90, 92, 93, 94, 96, 254, 696], "godfath": 50, "1972": 50, "6_000_000": 50, "134_821_952": 50, "dark": 50, "knight": 50, "2008": 50, "185_000_000": 50, "533_316_061": 50, "schindler": 50, "1993": 50, "22_000_000": 50, "96_067_179": 50, "pulp": 50, "fiction": 50, "1994": 50, "8_000_000": 50, "107_930_000": 50, "shawshank": 50, "redempt": 50, "25_000_000": 50, "28_341_469": 50, "release_year": 50, "budget": 50, "gross": 50, "imdb_scor": 50, "ctx": [50, 51, 52, 53, 54, 55], "film": 50, "1990": 50, "BY": [50, 52], "desc": [50, 52], "AS": [50, 1004], "decad": 50, "total_gross": 50, "n_film": 50, "2000": [50, 322, 324, 331, 332, 335, 761, 774, 775, 778], "533316061": 50, "232338648": 50, "1970": [50, 118], "134821952": 50, "register_glob": [51, 53, 55, 1004], "register_mani": [51, 52, 55], "unregist": [51, 52, 53, 1004], "frame_data": [51, 54], "execut": [51, 52, 54, 73, 175, 254, 292, 399, 598, 613, 640, 649, 696, 846, 1004], "collect": [51, 52, 55, 68, 72, 113, 114, 118, 125, 127, 130, 142, 144, 175, 212, 254, 268, 379, 546, 551, 567, 585, 598, 612, 618, 619, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 650, 652, 653, 655, 657, 658, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 674, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 696, 823, 997, 1004, 1005], "global": [52, 56, 75, 125, 426, 598, 1004], "scope": [52, 55, 132, 1004], "automat": [52, 55, 90, 92, 93, 94, 96, 97, 102, 103, 104, 113, 125, 127, 129, 200, 231, 254, 426, 501, 507, 513, 598, 655, 674, 696, 870, 940, 946, 952, 997, 1004], "map": [52, 53, 92, 93, 102, 103, 107, 108, 111, 112, 113, 115, 135, 145, 171, 192, 196, 197, 213, 254, 339, 346, 425, 426, 448, 538, 544, 598, 620, 652, 696, 782, 789, 870, 997, 1004], "recent": [52, 449, 598, 883, 997, 1004], "df1": [52, 54, 55, 56, 65, 73, 75, 120, 148, 154, 218, 229, 254], "x": [52, 53, 65, 73, 97, 102, 103, 104, 113, 123, 125, 146, 164, 167, 169, 173, 180, 188, 254, 261, 265, 268, 352, 366, 368, 369, 370, 390, 395, 404, 421, 423, 424, 439, 441, 445, 447, 451, 458, 479, 482, 510, 524, 532, 534, 541, 544, 556, 557, 565, 571, 572, 579, 598, 635, 640, 644, 662, 696, 701, 705, 804, 834, 918, 921, 949, 980, 997, 1004], "df2": [52, 54, 55, 56, 65, 73, 75, 120, 148, 154, 218, 229, 254], "t": [52, 53, 73, 106, 113, 135, 187, 223, 225, 254, 268, 307, 338, 351, 353, 354, 355, 399, 448, 450, 495, 501, 507, 513, 514, 516, 544, 590, 598, 648, 669, 696, 705, 743, 781, 795, 797, 798, 799, 846, 908, 934, 940, 946, 952, 953, 955, 987, 997], "join": [52, 56, 65, 72, 73, 75, 174, 226, 254, 374, 448, 598, 616, 621, 623, 636, 649, 659, 671, 675, 696], "named_fram": [53, 1004], "lf1": [53, 55], "o": [53, 107, 115, 291, 307, 494, 533, 598, 726, 743, 933, 981, 997], "lf2": [53, 55, 696], "p": [53, 67, 187, 254, 450, 585, 598, 648, 696], "q": [53, 585], "r": [53, 450, 490, 494, 495, 496, 504, 598, 929, 933, 934, 935, 943], "lf3": [53, 696], "lf4": [53, 696], "either": [53, 125, 160, 170, 175, 178, 186, 196, 209, 254, 514, 542, 547, 585, 631, 638, 696, 953], "tbl1": [53, 55], "tbl2": [53, 55], "tbl3": 53, "tbl4": 53, "statement": [54, 590], "hello_world": 54, "baz": [54, 165, 166, 188, 224, 254, 509, 511, 634, 670, 696, 950], "hello_data": 54, "foo_bar": [54, 571], "registr": [55, 609], "lifetim": [55, 132], "context": [55, 56, 129, 130, 184, 237, 254, 262, 268, 292, 301, 362, 399, 434, 484, 485, 538, 544, 554, 564, 567, 580, 583, 597, 598, 609, 675, 681, 696, 846, 1004], "manag": [55, 56, 609, 1004], "often": [55, 159, 160, 254, 397, 458, 598, 630, 631, 696, 844], "want": [55, 93, 100, 131, 135, 148, 184, 254, 268, 296, 297, 298, 362, 424, 426, 462, 463, 464, 465, 466, 468, 469, 470, 556, 565, 580, 598, 616, 632, 639, 696, 704, 705, 733, 734, 735, 978, 997], "df0": 55, "exit": [55, 56, 132, 1004], "construct": [55, 90, 92, 93, 94, 95, 96, 100, 131, 254, 426, 580, 598, 628, 651, 696, 997], "persist": [55, 660, 661, 696], "through": [55, 997], "tbl0": 55, "remain": [55, 102, 103, 113, 146, 254, 510, 511, 640, 696, 796, 949, 950, 997], "text": [55, 502, 504, 505, 941, 1005], "misc": 55, "testing1234": 55, "test1": 55, "test2": 55, "test3": 55, "temporarili": [56, 129, 159, 160, 254, 630, 631, 696], "cach": [56, 72, 75, 107, 113, 115, 117, 426, 462, 463, 464, 465, 466, 468, 469, 470, 514, 515, 516, 519, 598, 616, 621, 623, 649, 659, 696, 953, 954, 955, 958], "categori": [56, 75, 294, 729, 744, 812, 887, 997], "until": [56, 175, 254, 292, 598], "finish": [56, 78, 148, 254, 704, 997], "invalid": [56, 102, 103, 113, 497, 498, 503, 534, 598, 936, 937, 942], "outermost": 56, "color": [56, 75, 236, 680], "red": [56, 75, 236, 680], "green": [56, 75, 236, 680], "blue": [56, 75], "orang": [56, 75, 139, 237, 238, 240, 241, 242, 244, 246, 247, 254, 681, 682, 684, 685, 686, 688, 690, 691], "uint8": [56, 75, 122, 124, 216, 217, 254, 305, 306, 426, 526, 541, 598, 741, 742, 966, 997, 1005], "yellow": [56, 75], "black": [56, 75, 135, 254], "succe": [56, 102, 103, 113], "df_join": [56, 75], "cat": [56, 75, 216, 254, 489, 518, 520, 532, 552, 594, 598, 744, 812, 887, 928, 993, 997], "u8": [56, 75, 215, 216, 254, 426, 541, 598, 974, 997, 1005], "schemadict": [57, 90, 92, 93, 94, 95, 96, 113, 199, 254, 585, 640, 654, 680, 696], "composit": [57, 124, 1005], "dai": [58, 74, 159, 160, 172, 174, 227, 254, 319, 323, 330, 331, 332, 335, 336, 337, 339, 344, 346, 347, 348, 350, 462, 463, 464, 465, 466, 468, 469, 470, 559, 560, 561, 598, 630, 631, 636, 696, 774, 775, 778, 779, 782, 789, 791], "unsign": [59, 60, 61, 62, 457, 598, 825, 891, 997], "could": [63, 78, 144, 159, 254, 293, 556, 565, 598, 619, 630, 696, 727, 997], "static": [63, 680], "utf": 64, "frametyp": [65, 1004], "joinstrategi": [65, 173, 254, 635, 696], "outer": [65, 73, 173, 254, 635, 696], "descend": [65, 136, 201, 207, 221, 254, 278, 413, 455, 474, 484, 485, 547, 598, 612, 656, 663, 668, 696, 714, 831, 860, 889, 911, 923, 997], "fill": [65, 73, 100, 131, 137, 149, 150, 204, 225, 254, 285, 303, 306, 360, 361, 367, 374, 462, 463, 465, 468, 469, 470, 476, 500, 506, 521, 566, 580, 598, 624, 625, 658, 675, 696, 803, 804, 881, 896, 897, 899, 902, 903, 904, 914, 939, 945, 960, 997], "sort": [65, 66, 120, 124, 136, 159, 160, 174, 181, 187, 188, 201, 221, 227, 239, 248, 254, 278, 294, 362, 448, 474, 485, 538, 540, 547, 598, 612, 621, 630, 631, 636, 645, 648, 649, 656, 659, 668, 683, 692, 696, 714, 729, 831, 911, 982, 985, 997, 1005], "origin": [65, 102, 103, 223, 254, 338, 387, 426, 448, 457, 490, 495, 496, 498, 500, 506, 521, 598, 669, 696, 744, 781, 870, 887, 929, 934, 935, 937, 939, 945, 960, 997], "In": [65, 105, 114, 117, 125, 127, 135, 146, 148, 159, 160, 184, 254, 268, 598, 630, 631, 696, 704, 796, 890, 997], "duplic": [65, 79, 167, 173, 174, 223, 254, 376, 598, 635, 636, 669, 696, 818, 997], "behaviour": [65, 73, 489, 495, 496, 504, 534, 598, 928, 934, 935, 943], "strategi": [65, 73, 102, 122, 123, 124, 125, 127, 150, 159, 173, 174, 183, 254, 268, 361, 417, 598, 625, 630, 635, 636, 696, 804, 864, 997], "suitabl": [65, 73, 123, 135, 254, 268, 473, 598, 705, 907, 997, 1005], "get": [65, 74, 98, 108, 112, 129, 136, 139, 145, 155, 156, 159, 160, 162, 163, 167, 169, 170, 176, 183, 196, 199, 202, 206, 210, 221, 230, 239, 248, 254, 262, 276, 277, 278, 280, 284, 302, 303, 304, 305, 306, 319, 335, 363, 371, 376, 378, 386, 389, 392, 401, 405, 406, 418, 427, 428, 429, 434, 436, 438, 443, 444, 454, 483, 487, 499, 502, 526, 527, 535, 539, 564, 569, 573, 574, 575, 576, 584, 587, 589, 598, 612, 617, 620, 627, 630, 631, 632, 637, 639, 654, 662, 666, 668, 673, 683, 692, 696, 712, 713, 714, 715, 716, 720, 731, 739, 740, 741, 742, 758, 778, 808, 811, 816, 818, 821, 833, 838, 848, 852, 853, 865, 871, 873, 874, 876, 879, 880, 884, 885, 888, 922, 925, 938, 941, 967, 973, 974, 982, 986, 987, 997], "speedup": [65, 135, 171, 254, 268, 598, 705, 997], "receiv": [65, 113, 135, 187, 254, 450, 598, 648, 696, 1005], "now": [65, 160, 254, 514, 516, 631, 696, 953, 955], "One": [65, 141, 184, 188, 254, 265, 447, 598, 745, 997], "whose": [65, 174, 188, 254, 356, 563, 598, 636, 696], "uniqu": [65, 122, 123, 124, 127, 169, 184, 245, 254, 269, 280, 378, 386, 442, 514, 515, 516, 519, 536, 538, 545, 577, 598, 689, 696, 716, 745, 821, 833, 877, 953, 954, 955, 958, 983, 985, 997], "post": 65, "constrain": 65, "newli": 65, "boolean": [65, 70, 136, 151, 153, 207, 221, 254, 264, 265, 266, 286, 322, 362, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 396, 447, 485, 497, 540, 541, 547, 585, 598, 612, 626, 663, 668, 696, 702, 703, 715, 721, 761, 805, 816, 817, 818, 820, 821, 823, 824, 826, 827, 828, 829, 833, 843, 884, 885, 909, 928, 988, 997], "know": [65, 417, 502, 941, 978, 987, 997], "first": [65, 102, 103, 106, 113, 116, 124, 135, 157, 159, 162, 174, 176, 183, 187, 188, 210, 216, 222, 223, 227, 239, 254, 278, 280, 307, 332, 335, 339, 371, 378, 392, 399, 402, 403, 417, 426, 450, 473, 485, 495, 497, 498, 504, 505, 549, 556, 565, 569, 590, 598, 616, 630, 632, 636, 639, 648, 669, 675, 683, 696, 714, 743, 745, 775, 778, 782, 811, 821, 838, 846, 849, 850, 864, 870, 907, 934, 936, 937, 943, 944, 967, 976, 997, 1005], "2022": [65, 74, 141, 157, 159, 160, 174, 227, 254, 313, 335, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 514, 561, 567, 598, 630, 631, 636, 696, 752, 762, 778, 782, 789, 953], "y": [65, 73, 97, 123, 125, 146, 167, 169, 173, 180, 188, 254, 261, 265, 342, 345, 352, 368, 369, 390, 395, 404, 423, 445, 447, 458, 514, 515, 516, 534, 541, 571, 598, 635, 644, 662, 696, 701, 785, 788, 953, 954, 955, 997], "df3": [65, 254], "set_tbl_format": 65, "09": [65, 125, 160, 254, 313, 323, 331, 332, 517, 631, 696, 756, 956], "01": [65, 74, 125, 130, 141, 157, 159, 160, 227, 254, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 514, 515, 516, 519, 561, 630, 631, 696, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 953, 954, 955, 958], "02": [65, 74, 130, 157, 159, 160, 174, 227, 254, 312, 313, 319, 320, 321, 328, 329, 330, 331, 332, 335, 338, 339, 340, 341, 344, 346, 347, 349, 462, 463, 464, 465, 466, 468, 469, 470, 471, 514, 515, 516, 519, 561, 598, 630, 631, 636, 696, 751, 752, 754, 755, 758, 759, 760, 763, 764, 765, 766, 768, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 786, 787, 789, 790, 791, 792, 864, 953, 954, 955, 958], "03": [65, 74, 97, 159, 160, 227, 254, 312, 313, 314, 318, 319, 321, 329, 330, 331, 332, 338, 339, 340, 341, 342, 344, 345, 346, 347, 349, 515, 519, 630, 631, 696, 751, 752, 753, 756, 757, 758, 759, 760, 763, 764, 765, 766, 768, 770, 772, 773, 774, 775, 776, 779, 780, 781, 782, 783, 784, 785, 787, 788, 790, 791, 792, 954, 958], "af1": 65, "af2": 65, "af3": 65, "keep": [65, 102, 103, 113, 223, 226, 227, 254, 387, 426, 549, 598, 669, 671, 696, 744, 870, 887, 997], "easili": [65, 200, 231, 234, 254, 550, 585, 655, 674, 678, 696], "dot": [65, 598, 659, 696, 997], "product": [65, 140, 254, 305, 309, 544, 598, 741, 747, 997], "fill_nul": [65, 149, 254, 598, 624, 675, 696, 997], "167": 65, "47": 65, "callabl": [66, 67, 68, 69, 113, 135, 153, 187, 236, 254, 268, 417, 424, 425, 450, 461, 544, 556, 557, 565, 572, 579, 598, 640, 648, 680, 696, 705, 864, 895, 997], "decor": [66, 67, 68, 69, 125, 127, 135, 254, 268, 598, 705, 997], "under": [66, 67, 68, 69, 591, 592, 594, 599, 600, 604, 605, 606, 989, 991, 993, 998, 1001, 1002, 1003], "access": [66, 67, 68, 69, 171, 196, 197, 254, 426, 598, 675, 696, 1005], "by_first_letter_of_column_nam": 66, "f": [66, 103, 141, 157, 172, 212, 222, 225, 254, 261, 268, 417, 477, 494, 514, 516, 544, 551, 572, 598, 864, 933, 953, 955], "fromkei": [66, 68], "by_first_letter_of_column_valu": 66, "starts_with": [66, 489, 493, 932], "slice": [66, 72, 146, 162, 172, 210, 254, 403, 415, 461, 462, 463, 464, 465, 466, 468, 469, 470, 598, 616, 621, 623, 640, 649, 659, 660, 661, 696, 796, 811, 850, 862, 895, 896, 897, 898, 899, 900, 902, 903, 904, 967, 997], "to_seri": [66, 70, 155, 254, 514, 580, 953], "xx": [66, 68, 124, 127], "xy": [66, 68], "yy": [66, 68, 124, 127], "yz": [66, 68], "a2": [66, 68], "b1": [66, 68], "b2": [66, 68], "pow_n": 67, "powersofn": 67, "next": [67, 285, 455, 598, 889, 997], "ceil": [67, 598, 997], "previou": [67, 132, 449, 523, 598, 883, 997], "floor": [67, 598, 997], "nearest": [67, 174, 190, 246, 254, 295, 365, 454, 466, 578, 598, 636, 650, 690, 696, 730, 807, 815, 888, 900, 997], "24": [67, 119, 135, 146, 160, 254, 305, 307, 321, 441, 598, 631, 696, 743, 760, 835, 997], "001": [67, 324, 325, 327, 334, 561, 767, 769, 777], "next_pow2": 67, "prev_pow2": 67, "nearest_pow2": 67, "split_by_column_dtyp": 68, "collect_al": 68, "31": [69, 74, 125, 313, 317, 318, 330, 331, 335, 347, 514, 559, 560, 567, 571, 752, 756, 757, 774, 778, 953, 1005], "42": [69, 160, 161, 254, 631, 696, 810, 997], "961": 69, "1764": 69, "4160": 69, "evalu": [70, 74, 100, 130, 131, 149, 151, 174, 254, 265, 279, 307, 373, 375, 379, 417, 426, 447, 542, 543, 546, 562, 580, 585, 590, 598, 626, 633, 635, 636, 696, 715, 743, 988, 997], "immedi": [70, 74, 100, 130, 131, 455, 546, 580, 585, 598, 889, 997], "arg_tru": [70, 598, 997], "build": [71, 91, 1005], "wa": 71, "compil": [71, 393, 394, 840, 841], "gate": 71, "info": [71, 105, 114, 119, 322, 761], "otherwis": [71, 124, 129, 181, 200, 254, 287, 296, 297, 298, 338, 353, 354, 355, 417, 450, 457, 489, 491, 542, 543, 558, 573, 576, 586, 590, 598, 645, 655, 696, 705, 722, 733, 734, 735, 781, 797, 798, 799, 864, 891, 909, 910, 928, 930, 997], "depend": [71, 119, 268, 393, 394, 434, 455, 544, 564, 567, 598, 840, 841, 889, 997, 1005], "host": [71, 102, 107, 111, 115, 117], "git": 71, "lazy_fram": 72, "type_coercion": [72, 616, 621, 623, 649, 659, 660, 661, 696], "predicate_pushdown": [72, 616, 621, 623, 640, 649, 659, 660, 661, 696], "projection_pushdown": [72, 616, 621, 623, 640, 649, 659, 660, 661, 696], "simplify_express": [72, 616, 621, 623, 649, 659, 660, 661, 696], "no_optim": [72, 616, 623, 640, 649, 660, 661, 696], "slice_pushdown": [72, 616, 621, 623, 640, 649, 659, 660, 661, 696], "common_subplan_elimin": [72, 616, 621, 623, 649, 659, 696], "graph": [72, 175, 254, 633, 675, 696], "parallel": [72, 73, 99, 104, 111, 117, 159, 174, 175, 187, 254, 307, 399, 598, 609, 630, 635, 636, 680, 696, 743, 846, 997], "threadpool": [72, 129], "coercion": [72, 458, 598, 616, 621, 623, 649, 659, 660, 661, 696], "optim": [72, 111, 113, 115, 116, 117, 171, 175, 187, 191, 197, 223, 254, 616, 621, 623, 640, 649, 659, 660, 661, 669, 676, 680, 696], "predic": [72, 113, 115, 116, 117, 118, 151, 170, 196, 254, 362, 540, 565, 598, 616, 621, 623, 626, 640, 649, 652, 659, 660, 661, 676, 696, 805, 909, 910, 997], "pushdown": [72, 616, 621, 623, 640, 649, 652, 659, 660, 661, 676, 696, 909, 910, 997], "project": [72, 113, 115, 116, 117, 268, 484, 485, 598, 616, 621, 623, 640, 649, 652, 659, 660, 661, 677, 696], "turn": [72, 102, 103, 113, 538, 598, 616, 621, 623, 640, 649, 660, 661, 696], "off": [72, 102, 103, 113, 538, 598, 616, 621, 623, 640, 649, 660, 661, 696], "Will": [72, 222, 254, 616, 621, 623, 649, 659, 696, 997], "try": [72, 85, 87, 102, 103, 106, 107, 111, 113, 115, 117, 616, 621, 623, 649, 659, 696], "branch": [72, 616, 621, 623, 649, 659, 696], "subplan": [72, 616, 621, 623, 649, 659, 696], "occur": [72, 397, 440, 455, 598, 616, 621, 623, 649, 659, 696, 844, 875, 889, 997], "union": [72, 73, 616, 621, 623, 649, 659, 696], "part": [72, 90, 125, 496, 510, 511, 616, 621, 623, 649, 659, 675, 696, 756, 759, 766, 768, 771, 773, 776, 783, 793, 935, 949, 950], "fashion": [72, 173, 254, 616, 621, 623, 649, 659, 696], "item": [73, 103, 196, 198, 254, 358, 396, 402, 404, 472, 511, 598, 801, 843, 849, 851, 906, 950, 997], "iter": [73, 126, 128, 136, 158, 159, 160, 171, 172, 186, 196, 197, 200, 201, 207, 221, 222, 231, 233, 234, 254, 307, 356, 448, 485, 542, 543, 547, 549, 550, 551, 552, 558, 563, 573, 576, 583, 585, 586, 598, 612, 629, 630, 631, 655, 656, 663, 668, 674, 678, 696, 743, 997, 1005], "polarstyp": 73, "concatmethod": 73, "vertic": [73, 148, 225, 229, 254, 488, 927], "rechunk": [73, 90, 95, 102, 103, 107, 111, 113, 115, 116, 117, 148, 254, 598, 704, 731, 876, 997], "combin": [73, 74, 85, 87, 159, 160, 161, 174, 227, 254, 265, 279, 335, 346, 447, 501, 507, 513, 598, 630, 631, 636, 659, 696, 778, 789, 940, 946, 952], "concaten": [73, 153, 187, 254, 450, 551, 552, 598, 648, 696, 731, 876, 997], "diagon": [73, 222, 254], "vstack": [73, 148, 254], "find": [73, 152, 254, 473, 598, 907, 997], "miss": [73, 102, 103, 113, 149, 254, 285, 353, 354, 355, 367, 374, 381, 383, 598, 624, 696, 797, 798, 799, 987, 997], "stack": [73, 164, 229, 254], "don": [73, 135, 223, 225, 254, 268, 307, 399, 448, 544, 598, 669, 696, 705, 743, 846, 908, 987, 997], "auto": [73, 90, 92, 93, 94, 96, 111, 117, 222, 254, 696, 1005], "logic": [73, 135, 236, 254, 265, 447, 532, 541, 598, 628, 635, 651, 677, 696, 705, 980, 997], "align_fram": 73, "pattern": [73, 102, 103, 113, 115, 116, 117, 171, 254, 432, 489, 490, 495, 496, 504, 505, 680, 909, 910, 928, 929, 934, 935, 943, 944, 997], "collis": 73, "need": [73, 97, 100, 102, 103, 106, 120, 121, 131, 159, 160, 205, 217, 254, 417, 426, 477, 499, 517, 580, 598, 630, 631, 696, 915, 938, 956, 997], "sure": [73, 90, 95, 102, 103, 104, 107, 111, 159, 160, 191, 254, 546, 630, 631, 696], "contigu": [73, 90, 95, 102, 103, 107, 111, 113, 115, 116, 117, 191, 254], "relev": 73, "df_h1": 73, "l1": 73, "l2": 73, "df_h2": 73, "r1": 73, "r2": 73, "r3": 73, "df_d1": 73, "df_d2": 73, "df_a1": 73, "df_a2": 73, "df_a3": 73, "interv": [74, 130, 159, 160, 227, 254, 322, 339, 340, 346, 375, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 696, 756, 758, 759, 761, 766, 768, 771, 773, 776, 779, 780, 782, 783, 787, 789, 790, 791, 793, 816, 997], "timedelta": [74, 130, 159, 160, 227, 254, 317, 319, 320, 323, 328, 330, 335, 336, 337, 339, 340, 344, 346, 347, 348, 350, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 696, 763, 765, 770, 778, 782, 789, 879, 880, 997], "1d": [74, 159, 160, 174, 227, 254, 312, 321, 329, 335, 339, 346, 349, 462, 463, 464, 465, 466, 468, 469, 470, 571, 598, 630, 631, 636, 696, 751, 758, 760, 763, 764, 765, 770, 772, 778, 782, 787, 789, 791, 792], "closedinterv": [74, 130, 159, 160, 254, 375, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 696, 816, 997], "lower": [74, 113, 130, 159, 190, 246, 254, 296, 298, 375, 422, 425, 454, 457, 466, 546, 578, 598, 623, 630, 650, 690, 696, 735, 816, 869, 888, 891, 900, 984, 997], "bound": [74, 102, 103, 130, 146, 159, 254, 296, 297, 298, 375, 402, 416, 417, 422, 537, 546, 598, 630, 696, 734, 735, 796, 816, 849, 863, 869, 984, 997], "upper": [74, 102, 103, 130, 146, 159, 254, 296, 297, 375, 417, 537, 546, 598, 630, 696, 734, 796, 816, 869, 984, 997], "period": [74, 130, 159, 160, 203, 204, 254, 339, 346, 353, 354, 355, 411, 449, 475, 476, 598, 630, 631, 657, 658, 696, 782, 789, 797, 798, 799, 858, 883, 913, 914, 997], "durat": [74, 130, 174, 227, 254, 318, 321, 325, 327, 329, 334, 341, 349, 532, 598, 636, 696, 757, 760, 767, 769, 772, 777, 784, 792, 980, 997], "3d12h4m25": [74, 159, 160, 174, 227, 254, 339, 346, 630, 631, 636, 696, 782, 789], "hour": [74, 130, 159, 160, 174, 227, 254, 335, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 560, 561, 588, 598, 630, 631, 636, 696, 778, 782, 789], "minut": [74, 130, 159, 160, 174, 227, 254, 335, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 560, 561, 588, 598, 630, 631, 636, 696, 778, 782, 789], "tempor": [74, 130, 159, 160, 171, 197, 214, 254, 375, 462, 463, 464, 465, 466, 468, 469, 470, 598, 609, 630, 631, 696, 816, 832, 997], "window": [74, 130, 159, 160, 254, 307, 339, 346, 353, 354, 355, 448, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 551, 581, 582, 598, 630, 631, 696, 743, 782, 789, 797, 798, 799, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 997], "deprec": [74, 130, 514, 516, 580, 953, 955], "sinc": [74, 105, 114, 130, 319, 514, 516, 567, 580, 758, 953, 955], "18": [74, 97, 130, 160, 254, 306, 339, 346, 349, 374, 387, 514, 516, 598, 631, 649, 696, 792, 953, 955], "granular": 74, "finer": 74, "permut": 74, "1mo": [74, 159, 160, 174, 227, 254, 314, 318, 331, 332, 335, 338, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 636, 696, 753, 757, 773, 774, 775, 778, 779, 780, 781, 782, 789, 790], "1985": 74, "04": [74, 118, 159, 227, 254, 313, 314, 317, 318, 321, 328, 329, 330, 331, 332, 336, 338, 339, 340, 341, 342, 345, 347, 348, 349, 514, 561, 630, 696, 753, 757, 760, 766, 768, 771, 772, 773, 774, 775, 776, 780, 781, 783, 784, 785, 788, 790, 791, 792, 953], "05": [74, 118, 120, 121, 125, 174, 227, 254, 313, 314, 318, 338, 340, 342, 345, 636, 696, 752, 753, 754, 755, 756, 757, 781, 782, 785, 786, 788, 789, 791], "07": [74, 130, 313, 317, 336, 338, 339, 346, 348, 514, 567, 752, 756, 781, 791, 953], "08": [74, 120, 121, 125, 130, 160, 254, 313, 339, 514, 561, 631, 696, 782, 789, 953], "america": 74, "new_york": 74, "\u03bc": [74, 97, 125, 159, 160, 174, 227, 254, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 514, 516, 561, 567, 630, 631, 636, 696, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 789, 790, 791, 792, 793, 953, 955], "est": 74, "month_end": 74, "last": [74, 136, 162, 174, 176, 188, 207, 210, 221, 223, 248, 254, 278, 307, 317, 331, 336, 346, 347, 402, 415, 484, 511, 527, 587, 598, 612, 636, 663, 666, 668, 669, 692, 696, 714, 743, 756, 774, 779, 790, 811, 838, 849, 862, 950, 967, 997], "month": [74, 159, 160, 174, 227, 254, 317, 331, 332, 335, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 559, 560, 598, 630, 631, 636, 696, 756, 774, 775, 778, 782, 789], "28": [74, 159, 160, 174, 213, 227, 254, 261, 335, 338, 339, 346, 349, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 636, 696, 778, 781, 782, 789, 792, 1005], "disabl": [75, 171, 254], "equal": [75, 102, 103, 113, 120, 121, 154, 159, 174, 181, 254, 352, 368, 390, 417, 461, 462, 463, 464, 465, 466, 468, 469, 470, 499, 500, 506, 521, 546, 581, 582, 598, 630, 636, 645, 696, 864, 895, 896, 897, 898, 899, 900, 902, 903, 904, 908, 938, 939, 945, 960, 997, 1005], "encount": [76, 159, 254, 443, 444, 497, 498, 553, 556, 565, 598, 630, 696, 879, 880, 936, 937, 997], "certain": [80, 105, 114, 165, 227, 254, 550, 616, 649, 660, 661, 696, 997], "least": [82, 125, 449, 538, 598, 883, 985, 997], "unexpect": [83, 254], "caus": [83, 91, 102, 103, 113, 134, 148, 254, 704, 997], "panic": 83, "mismatch": 85, "incompat": 87, "pa": [90, 118], "chunkedarrai": [90, 183, 254, 747, 997], "recordbatch": [90, 172, 254], "schemadefinit": [90, 92, 93, 94, 96, 254, 696], "schema_overrid": [90, 92, 93, 94, 95, 96, 172, 217, 254, 284, 696, 720], "copi": [90, 91, 134, 137, 138, 172, 212, 217, 218, 231, 254, 359, 521, 598, 614, 615, 674, 696, 701, 732, 736, 749, 802, 960, 973, 978, 979, 997], "closest": 90, "pair": [90, 92, 93, 94, 96, 124, 192, 254, 652, 696, 1005], "sever": [90, 92, 93, 94, 96, 254, 696, 1005], "wai": [90, 92, 93, 94, 96, 142, 158, 172, 187, 207, 234, 254, 448, 450, 485, 495, 550, 598, 618, 629, 648, 663, 678, 680, 696, 934], "equival": [90, 92, 93, 94, 96, 105, 170, 184, 254, 261, 265, 352, 366, 368, 369, 390, 423, 439, 441, 445, 447, 451, 502, 524, 534, 541, 598, 696, 835, 941, 957, 959, 997], "form": [90, 92, 93, 94, 96, 171, 197, 225, 254, 449, 598, 696, 883, 997], "them": [90, 92, 93, 94, 96, 113, 148, 159, 160, 174, 181, 227, 254, 375, 404, 443, 444, 448, 551, 598, 630, 631, 636, 645, 696, 704, 851, 879, 880, 997], "dimens": [90, 92, 94, 96, 254, 459, 598, 696, 893, 997], "allow_copi": [91, 134], "interchang": [91, 134], "__dataframe__": 91, "convers": [91, 134, 172, 218, 254, 514, 515, 516, 519, 609, 953, 954, 955, 958, 977, 978, 979, 997], "detail": [91, 104, 120, 121, 134, 254, 696, 1005], "latest": [91, 105, 114, 134, 367, 435, 598], "index": [91, 95, 98, 104, 119, 134, 152, 159, 160, 165, 170, 174, 188, 194, 196, 206, 219, 227, 232, 254, 262, 276, 277, 278, 280, 335, 393, 394, 402, 412, 416, 417, 462, 463, 464, 465, 466, 468, 469, 470, 473, 483, 495, 508, 528, 598, 630, 631, 636, 662, 676, 696, 712, 713, 714, 715, 716, 778, 835, 840, 841, 849, 859, 863, 864, 881, 907, 910, 922, 934, 947, 968, 997], "runtimeerror": 91, "from_panda": [91, 106], "from_arrow": 91, "effici": [91, 172, 254], "clone": [92, 93, 94, 95, 96, 137, 217, 218, 254, 614, 696, 732, 977, 978, 979, 987, 997], "dimension": [92, 94, 96, 254, 696, 997], "infer_schema_length": [93, 96, 102, 103, 106, 113, 116, 254, 696], "NOT": [93, 120, 121, 433, 1004], "typic": [93, 135, 254, 705, 997], "clearer": 93, "load": [93, 95, 105, 114, 126, 128, 254, 609, 632, 639, 696, 1005], "_partial_": [93, 254, 696], "omit": [93, 97, 123, 125, 127, 130, 132, 184, 254], "mani": [93, 96, 104, 148, 254, 704, 997], "scan": [93, 96, 102, 103, 111, 113, 114, 115, 116, 117, 118, 159, 160, 254, 623, 630, 631, 632, 639, 696], "slow": [93, 96, 102, 103, 113, 268, 307, 598, 680, 743, 997], "partial": 93, "present": [93, 120, 125, 379, 598, 987, 997], "np": [94, 151, 217, 254, 528, 598, 696, 820, 824, 826, 827, 895, 968, 997], "ndarrai": [94, 151, 217, 254, 528, 598, 696, 747, 907, 910, 968, 978, 997], "numpi": [94, 119, 140, 217, 218, 254, 443, 444, 598, 696, 820, 824, 826, 827, 879, 880, 895, 978, 979, 987, 997], "columnar": [94, 96, 171, 197, 254], "interpret": [94, 96, 102, 103, 113, 254, 696], "yield": [94, 96, 102, 103, 113, 146, 148, 222, 254, 448, 598, 696, 704, 796, 997], "conclus": [94, 96, 254, 696], "nan_to_nul": [95, 254, 696, 997], "include_index": 95, "datetimeindex": [95, 747, 997], "panda": [95, 106, 119, 218, 254, 331, 332, 532, 598, 696, 774, 775, 979, 980, 997], "instal": [95, 102, 103, 104, 107, 111, 119, 140, 217, 218, 254, 659, 696, 979, 997], "nan": [95, 120, 121, 125, 134, 149, 218, 254, 310, 311, 352, 360, 368, 369, 374, 381, 383, 384, 385, 390, 423, 427, 438, 443, 444, 445, 534, 553, 598, 624, 696, 707, 711, 748, 803, 826, 827, 879, 880, 895, 979, 997, 1005], "convert": [95, 105, 106, 114, 134, 213, 214, 215, 216, 217, 220, 254, 314, 342, 345, 417, 425, 503, 514, 515, 516, 517, 519, 598, 696, 753, 785, 788, 864, 942, 953, 954, 955, 956, 958, 965, 976, 977, 978, 979, 987, 997], "pd": [95, 106, 532, 598, 980, 997], "pd_df": 95, "pd_seri": 95, "tbl": [97, 99, 103], "reconstruct": 97, "repr": [97, 125, 127], "trim": 97, "whitespac": [97, 501, 507, 513, 940, 946, 952], "prompt": 97, "extract": [97, 317, 318, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 336, 337, 340, 341, 347, 348, 350, 450, 496, 497, 498, 598, 754, 755, 756, 757, 759, 760, 762, 766, 767, 768, 769, 771, 772, 773, 776, 777, 779, 780, 783, 784, 786, 790, 791, 793, 935, 936, 937], "to_init_repr": [97, 254, 997], "truncat": [97, 159, 254, 335, 630, 649, 696, 778], "identifi": [97, 180, 186, 223, 254, 644, 669, 696], "compound": 97, "struct": [97, 184, 200, 220, 224, 231, 254, 417, 426, 497, 510, 511, 538, 556, 557, 558, 572, 598, 655, 670, 674, 680, 696, 864, 936, 949, 950], "neither": [97, 106, 198, 254, 417, 864], "source_ac": 97, "source_cha": 97, "ident": [97, 137, 138, 254, 342, 614, 615, 696, 732, 736, 785, 997], "timestamp": [97, 338, 567, 781], "tor_id": 97, "nnel_id": 97, "asia": [97, 754, 755, 786], "tokyo": 97, "123456780": 97, "9876543210": 97, "56": [97, 130, 530, 598], "59": [97, 124, 130, 313, 328, 340, 560, 588, 752, 771, 783], "663053": 97, "jst": 97, "803065983": 97, "2055938745": 97, "38": [97, 125], "050545": 97, "source_actor_id": 97, "source_channel_id": 97, "sr": [97, 701, 997], "to_list": [97, 160, 254, 631, 696, 928, 997], "datatypeclass": 98, "uint32": [98, 119, 146, 254, 278, 317, 320, 324, 326, 328, 330, 333, 336, 337, 340, 347, 348, 393, 394, 406, 458, 490, 499, 502, 528, 532, 598, 715, 727, 756, 759, 766, 768, 771, 773, 776, 779, 780, 783, 790, 791, 796, 825, 840, 841, 853, 908, 929, 980, 997], "regular": [98, 171, 196, 197, 227, 254, 356, 489, 490, 495, 496, 504, 505, 550, 563, 573, 576, 586, 598, 928, 929, 934, 935, 943, 944], "uint64": [98, 161, 254, 370, 393, 394, 457, 598, 810, 840, 841, 891, 997], "bigidx": 98, "read": [99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 148, 254, 424, 590, 598, 623, 628, 651, 696, 704, 997], "batch": [99, 103, 116, 640, 696], "over": [99, 102, 103, 105, 113, 125, 135, 148, 171, 172, 196, 197, 222, 233, 236, 254, 268, 307, 361, 374, 424, 425, 455, 461, 462, 463, 464, 465, 466, 468, 469, 470, 544, 556, 557, 565, 572, 579, 598, 680, 704, 705, 743, 895, 896, 897, 899, 903, 997], "fetch": [99, 113, 175, 254, 614, 616, 632, 639, 696], "ideal": 99, "read_csv_batch": [99, 610], "tpch": [99, 103], "tables_scale_100": [99, 103], "lineitem": [99, 103, 104], "try_parse_d": [99, 102, 103, 113], "polarsexprtyp": [100, 131, 580], "syntact": [100, 131, 226, 254, 563, 564, 568, 578, 583, 671, 696, 924, 997], "sugar": [100, 131, 226, 254, 563, 564, 568, 578, 583, 671, 696, 924, 997], "repeat": [100, 107, 115, 131, 456, 458, 598], "pre": [100, 131, 417, 580], "i8": [100, 131, 477, 580, 598, 746, 894, 984, 997], "n_row": [101, 102, 103, 107, 111, 113, 115, 116, 117, 172, 254, 623, 696], "accept": [101, 102, 103, 105, 107, 111, 136, 147, 158, 200, 207, 221, 231, 234, 254, 261, 356, 375, 448, 485, 541, 542, 543, 547, 549, 550, 551, 552, 558, 563, 573, 576, 585, 586, 598, 612, 622, 629, 655, 663, 668, 674, 678, 696, 816, 997], "stop": [101, 102, 103, 107, 111, 113, 115, 116, 117, 130, 317, 319, 320, 322, 323, 328, 330, 336, 337, 339, 340, 344, 346, 347, 348, 350, 751, 753, 756, 758, 759, 761, 766, 768, 771, 773, 776, 779, 780, 782, 783, 787, 789, 790, 791, 792, 793], "textio": 102, "new_column": [102, 103, 106, 113, 193, 254], "comment_char": [102, 103, 113], "quote_char": [102, 103, 113], "skip_row": [102, 103, 113], "missing_utf8_is_empty_str": [102, 103, 113], "ignore_error": [102, 103, 113], "n_thread": [102, 103], "8192": 102, "csvencod": [102, 103, 113], "low_memori": [102, 103, 111, 113, 116, 117], "skip_rows_after_head": [102, 103, 113], "row_count_nam": [102, 103, 107, 111, 113, 115, 116, 117], "row_count_offset": [102, 103, 107, 111, 113, 115, 116, 117], "sample_s": [102, 103], "eol_char": [102, 103, 113], "we": [102, 103, 106, 113, 174, 254, 399, 503, 571, 590, 636, 640, 696, 705, 812, 846, 887, 942, 997], "handler": [102, 103, 106], "g": [102, 103, 105, 106, 107, 111, 114, 115, 117, 159, 160, 174, 225, 227, 254, 261, 268, 335, 339, 346, 356, 462, 463, 464, 465, 466, 468, 469, 470, 477, 563, 598, 630, 631, 636, 652, 696, 778, 782, 789, 908, 978, 997], "builtin": [102, 103, 106], "stringio": [102, 103], "fsspec": [102, 103, 107, 111, 114, 115, 117, 119], "remot": [102, 103, 107, 111], "autogener": [102, 103, 113], "column_x": [102, 103, 113], "enumer": [102, 103, 113, 172, 254], "shorter": [102, 103], "comment": [102, 103, 113], "instanc": [102, 103, 113, 125, 127, 132, 148, 153, 254, 293, 435, 462, 463, 464, 465, 466, 468, 469, 470, 556, 565, 598, 640, 676, 696, 704, 727, 997], "special": [102, 103, 113, 496, 705, 935, 997], "escap": [102, 103, 113], "dure": [102, 103, 113, 132, 148, 254, 704, 997], "would": [102, 103, 113, 278, 402, 434, 455, 547, 598, 714, 849, 889, 978, 997], "prefer": [102, 103, 105, 113, 128, 135, 148, 171, 196, 197, 236, 254, 268, 461, 598, 696, 704, 705, 895, 997, 1005], "treat": [102, 103, 113, 489, 504, 505, 928, 943, 944], "10000": [102, 172, 254, 521], "check": [102, 103, 113, 120, 121, 154, 159, 160, 168, 170, 254, 264, 266, 286, 289, 290, 375, 379, 396, 489, 493, 512, 598, 630, 631, 640, 696, 702, 703, 721, 724, 725, 817, 819, 822, 823, 825, 830, 831, 832, 834, 835, 843, 908, 928, 932, 951, 997], "might": [102, 103, 113, 129, 268, 536, 598, 979, 997], "issu": [102, 103, 106, 113, 305, 306, 526, 598, 741, 742, 966, 997], "iso8601": [102, 103, 113], "physic": [102, 103, 174, 254, 294, 532, 598, 613, 635, 636, 696, 729, 980, 997], "cpu": [102, 103], "system": [102, 103], "wrongli": 102, "done": [102, 103, 113, 118, 157, 174, 254, 267, 269, 293, 448, 500, 506, 545, 598, 636, 696, 727, 939, 945, 997], "buffer": [102, 103, 146, 171, 254, 796, 997], "modifi": [102, 103, 113, 129, 132, 164, 171, 229, 254, 279, 338, 349, 489, 495, 496, 504, 598, 781, 792, 892, 928, 934, 935, 943, 957, 959, 997], "lossi": [102, 103, 113], "decod": [102, 103], "reduc": [102, 103, 111, 113, 115, 116, 117, 241, 242, 244, 247, 477, 565, 598, 661, 685, 686, 688, 691, 696, 872, 886, 915, 966, 997], "usag": [102, 103, 113, 125, 127, 205, 254, 916, 997], "expens": [102, 103, 111, 113, 116, 117, 126, 128, 135, 159, 160, 171, 196, 197, 222, 223, 254, 268, 598, 630, 631, 669, 696, 704, 705, 997, 1005], "aggreg": [102, 103, 111, 153, 159, 160, 177, 178, 179, 182, 184, 188, 189, 190, 208, 209, 225, 228, 234, 235, 238, 240, 254, 262, 362, 372, 424, 448, 461, 462, 463, 464, 465, 466, 468, 469, 470, 538, 542, 543, 556, 557, 558, 565, 570, 573, 576, 579, 586, 598, 630, 631, 640, 641, 642, 643, 646, 647, 650, 664, 665, 672, 678, 679, 682, 684, 696, 813, 895, 896, 897, 899, 902, 903, 904, 997], "nativ": [102, 107, 111, 123, 135, 171, 197, 214, 236, 254, 268, 598, 603, 705, 997, 1005], "parser": 102, "even": [102, 450, 598], "regard": [102, 553], "sens": [102, 107, 111, 115, 117, 159, 160, 181, 227, 254, 448, 598, 630, 631, 645, 696], "particular": [102, 107, 111, 115, 117, 146, 254, 796, 997], "skip": [102, 103, 106, 111, 113, 117, 225, 254, 705, 997], "offset": [102, 103, 107, 111, 113, 115, 116, 117, 159, 160, 206, 227, 232, 254, 331, 332, 335, 339, 346, 412, 483, 508, 514, 516, 598, 630, 631, 662, 676, 696, 774, 775, 778, 782, 789, 859, 922, 947, 953, 955, 997], "row_count": [102, 103, 107, 111, 113, 115, 116, 117], "sampl": [102, 103, 236, 254, 482, 598, 680, 921, 997], "estim": [102, 103, 146, 254, 269, 354, 355, 388, 545, 598, 696, 796, 798, 799, 836, 997], "alloc": [102, 103, 146, 191, 254, 796, 997], "scan_csv": [102, 103, 660, 661, 696], "lazili": [102, 103, 113, 114, 115, 116, 117, 426, 598], "glob": [102, 103, 113, 115, 116, 117], "continu": [102, 111, 482, 598, 921, 997], "benchmark": [102, 111, 292, 598], "50000": 103, "batchedcsvread": [103, 609], "upon": 103, "creation": 103, "gather": 103, "next_batch": 103, "big": 103, "interest": 103, "seen_group": 103, "big_fil": 103, "df_current_batch": 103, "concat": [103, 731, 876, 997], "partition_df": 103, "partition_bi": [103, 172, 254], "as_dict": [103, 186, 254], "fh": 103, "write_csv": [103, 113, 254], "els": [103, 590], "partition_on": 104, "partition_rang": 104, "partition_num": 104, "dbreadengin": 104, "connectorx": [104, 119], "raw": 104, "partit": [104, 105, 111, 114, 118, 172, 186, 254], "transfer": 104, "document": [104, 106, 342, 345, 498, 514, 515, 516, 519, 785, 788, 937, 953, 954, 955, 958], "redshift": 104, "mysql": 104, "mariadb": 104, "clickhous": 104, "oracl": 104, "bigqueri": 104, "pleas": 104, "doc": [104, 140, 254], "github": 104, "sfu": 104, "db": 104, "connector": 104, "destin": 104, "sqlite": 104, "develop": [104, 125, 127], "flight_sql": 104, "further": [104, 979, 997], "wide": [104, 157, 180, 225, 254, 644, 696], "adopt": 104, "significantli": [104, 1005], "better": [104, 135, 217, 236, 254, 268, 538, 598, 680, 909, 910, 997], "driver": 104, "cpp": 104, "partition_col": 104, "explicitli": [104, 123, 125, 132, 426, 585, 598], "delta_table_opt": [105, 114], "root": [105, 114, 387, 425, 436, 452, 486, 525, 597, 598, 924, 997], "absolut": [105, 114, 120, 121, 260, 353, 354, 355, 598, 700, 797, 798, 799, 997], "avoid": 105, "year": [105, 114, 159, 160, 174, 227, 254, 322, 323, 335, 336, 339, 346, 347, 462, 463, 464, 465, 466, 468, 469, 470, 559, 560, 598, 630, 631, 636, 696, 761, 762, 778, 779, 782, 789, 790], "2021": [105, 114, 141, 157, 159, 227, 254, 514, 571, 630, 696, 754, 755, 762, 786, 832, 953, 997], "aw": [105, 114], "googl": [105, 114], "service_account": [105, 114], "service_account_json_absolute_path": [105, 114], "az": [105, 114], "adl": [105, 114], "abf": [105, 114], "azure_storage_account_nam": [105, 114], "azure_storage_account_kei": [105, 114], "without_fil": [105, 114], "track": [105, 114, 135, 254, 417, 1004], "sheet_id": 106, "sheet_nam": 106, "xlsx2csv_option": 106, "read_csv_opt": 106, "noreturn": 106, "xlsx2csv": [106, 119], "read_csv": [106, 113], "nor": [106, 198, 254], "skip_empty_lin": 106, "my": [106, 118], "datasheet": 106, "correct": [106, 354, 355, 388, 467, 482, 598, 640, 696, 798, 799, 836, 901, 921, 997], "look": [106, 286, 417, 721], "whole": [106, 484, 485, 495, 598, 680, 696, 934], "With": [106, 135, 170, 254, 268, 598, 705, 835, 997], "1000": [106, 146, 216, 254, 324, 325, 521, 767, 976, 997, 1005], "spreadsheet": [106, 188, 254], "xl": 106, "xlsm": 106, "xlsb": 106, "odf": 106, "od": [106, 513, 952], "odt": 106, "memory_map": [107, 111, 115], "v2": [107, 115], "greatli": [107, 115], "improv": [107, 115, 661, 696], "page": [107, 111, 115, 117, 254, 598, 609, 661, 696, 997], "give": [107, 111, 115, 116, 117, 180, 223, 254, 319, 388, 458, 534, 598, 609, 644, 669, 696, 758, 836, 997], "That": [107, 640, 696], "filenam": 107, "my_fil": 107, "write_ipc": [107, 254], "read_ndjson": 109, "parallelstrategi": [111, 117], "use_statist": [111, 117], "awar": [111, 171, 197, 214, 254, 514, 516, 953, 955], "stabl": [111, 140, 198, 254, 421, 598, 644, 696], "row_group": [111, 117], "pressur": [111, 116, 117, 477, 598, 661, 696, 915, 997], "read_tabl": 111, "with_column_nam": 113, "push": [113, 115, 116, 117, 118], "down": [113, 115, 116, 117, 118, 365, 598, 807, 997], "therebi": [113, 115, 116, 117], "potenti": [113, 115, 116, 117], "overhead": [113, 115, 116, 117], "realloc": [113, 115, 116, 148, 254, 704, 997], "headerless": 113, "unlik": 113, "fewer": 113, "my_long_fil": 113, "doesn": [113, 351, 598, 795, 987, 997], "thing": [113, 564], "less": [113, 174, 254, 390, 423, 500, 506, 511, 521, 598, 636, 696, 939, 945, 950, 960, 1005], "limit": [113, 150, 254, 285, 296, 297, 298, 361, 367, 598, 625, 632, 661, 696, 733, 734, 735, 804, 997], "breezah": 113, "languag": [113, 159, 160, 174, 227, 254, 335, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 636, 696, 778, 782, 789], "hard": [113, 640, 696], "mydf": 113, "lambda": [113, 135, 153, 187, 236, 254, 268, 353, 354, 355, 417, 424, 425, 461, 544, 556, 557, 565, 572, 579, 598, 640, 648, 680, 696, 705, 797, 798, 799, 864, 997], "simpli": [113, 448, 556, 565, 598], "idx": [113, 159, 172, 254, 417, 630, 696, 864, 910, 997], "uint16": [113, 305, 306, 526, 598, 741, 742, 966, 997], "u16": [113, 125, 1005], "eu": 114, "central": [114, 388, 482, 598, 836, 921, 997], "allow_pyarrow_filt": 118, "comparison": 118, "dset": 118, "folder": 118, "stdout": [119, 157, 254], "17": [119, 125, 130, 234, 471, 567, 580, 598, 678, 737, 782, 997, 1005], "platform": 119, "linux": 119, "90": [119, 517, 956], "wsl2": 119, "x86_64": 119, "glibc2": 119, "main": 119, "apr": 119, "14": [119, 125, 130, 135, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 323, 374, 455, 598, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 782], "44": [119, 309, 598], "51": 119, "gcc": 119, "matplotlib": [119, 649, 659, 696], "check_dtyp": [120, 121], "check_exact": [120, 121], "rtol": [120, 121], "1e": [120, 121], "atol": [120, 121], "nans_compare_equ": [120, 121], "check_column_ord": 120, "check_row_ord": 120, "assertionerror": [120, 121], "compar": [120, 121, 154, 254, 352, 368, 369, 390, 423, 445, 543, 598, 908, 997], "exactli": [120, 121, 124, 125, 127, 510, 511, 916, 949, 950, 997], "toler": [120, 121, 174, 254, 636, 696], "inexact": [120, 121], "assert": [120, 121, 123, 125, 127, 160, 254, 609, 631, 696, 809, 997], "irrespect": 120, "unsort": 120, "check_nam": 121, "s1": [121, 153, 254, 835, 864, 979, 988, 997], "searchstrategi": [122, 124, 125, 127], "null_prob": [122, 125, 127], "percentag": [122, 125, 127, 449, 598, 883, 997], "chanc": [122, 125, 127, 1005], "independ": [122, 123, 125, 127], "flag": [122, 474, 489, 495, 496, 504, 598, 621, 640, 696, 911, 928, 934, 935, 943, 997], "hypothesi": [122, 123, 124, 125, 126, 127, 1005], "sampled_from": [122, 1005], "unique_small_int": 122, "ccy": [122, 1005], "gbp": [122, 1005], "eur": [122, 141, 157, 254, 1005], "jpy": [122, 1005], "min_col": [123, 125], "max_col": [123, 125], "standalon": [123, 125], "mincol": 123, "assign": [123, 159, 254, 417, 448, 455, 510, 511, 598, 630, 696, 744, 864, 870, 887, 889, 949, 950, 997], "exact": [123, 125, 127, 205, 254, 514, 515, 516, 534, 598, 953, 954, 955], "minimum": [123, 124, 125, 127, 153, 182, 254, 353, 354, 355, 438, 444, 455, 576, 598, 646, 661, 696, 733, 770, 797, 798, 799, 880, 885, 889, 997, 1005], "especi": 123, "test_unique_xyz": 123, "assert_someth": 123, "punctuat": 123, "test_special_char_colname_init": 123, "inner_dtyp": [124, 127], "select_from": [124, 127], "min_siz": [124, 125, 127, 1005], "max_siz": [124, 125, 127, 1005], "anoth": [124, 158, 254, 307, 312, 416, 430, 433, 598, 629, 675, 696, 743, 751, 863, 908, 997], "randomli": 124, "innermost": 124, "2x": 124, "lst": 124, "11330": 124, "24030": 124, "116": 124, "zz": [124, 127], "small": [124, 175, 254, 339, 623, 696, 1005], "uint8_pair": [124, 1005], "uint": [124, 1005], "zip": [124, 1005], "131": 124, "176": 124, "149": [124, 1005], "include_col": 125, "allow_infin": [125, 127], "allowed_dtyp": [125, 127, 1005], "excluded_dtyp": [125, 127], "describ": [125, 157, 254, 997], "desir": [125, 417, 864], "n_chunk": [125, 127, 254, 997], "randomis": 125, "onto": 125, "pct": 125, "preced": 125, "disallow": [125, 127], "inf": [125, 127, 275, 377, 380, 534, 598, 711, 744, 812, 820, 824, 869, 883, 887, 984, 997], "exclud": [125, 127, 303, 306, 375, 550, 598, 816, 832, 997], "deploi": [125, 127], "characterist": [125, 127], "concret": [125, 127], "test_repr": 125, "isinst": [125, 127, 254], "0x11f561580": 125, "known": [125, 417, 680, 864], "0565": 125, "34715": 125, "5844": 125, "33": [125, 466, 471, 550, 598, 900, 997], "076854": 125, "3382": 125, "48662": 125, "7540": 125, "29": [125, 130, 159, 160, 174, 227, 254, 331, 335, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 636, 696, 774, 778, 782, 789], "836271": 125, "4063": 125, "06": [125, 130, 227, 254, 313, 323, 337, 338, 350, 781, 782, 791], "39092": 125, "1889": 125, "13": [125, 130, 137, 138, 149, 150, 156, 160, 165, 175, 183, 231, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 461, 463, 517, 551, 556, 565, 589, 598, 614, 615, 624, 625, 631, 638, 674, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 696, 705, 782, 789, 790, 956, 997], "41": [125, 1005], "874455": 125, "15836": 125, "1755e": 125, "575050513": 125, "profil": [126, 128, 696], "balanc": [126, 128, 1005], "set_environ": 126, "polars_hypothesis_profil": [126, 128], "1500": 126, "constructor": 127, "max_data_s": 127, "normal": [127, 159, 254, 351, 388, 482, 598, 630, 696, 795, 836, 921, 997], "test_repr_is_valid_str": 127, "experi": 127, "create_list_strategi": [127, 1005], "polars_max_thread": 129, "behind": 129, "lock": 129, "reason": 129, "pyspark": 129, "udf": [129, 135, 187, 236, 254, 268, 450, 544, 598, 648, 680, 696, 705, 997], "similar": [129, 153, 174, 254, 342, 345, 448, 590, 598, 636, 696, 785, 788], "recommend": [129, 171, 187, 254], "1h": [130, 159, 160, 174, 227, 254, 335, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 636, 696, 759, 778, 782, 789], "23": [130, 159, 160, 254, 313, 320, 339, 560, 588, 630, 631, 696, 752, 759, 1005], "999999": [130, 560, 588], "1h30m25": 130, "third": [130, 424, 598], "lf": [130, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672, 673, 674, 675, 676, 677, 696, 1004, 1005], "6h": 130, "5h59m": 130, "1h29m": 130, "58": 130, "57": [130, 905, 997, 1005], "19": [130, 160, 174, 254, 339, 517, 631, 636, 696, 782, 789, 956], "initi": [132, 556, 565, 590], "whatev": 132, "were": 132, "enter": 132, "advantag": [132, 187, 254], "initialis": [132, 696, 1004], "set_": 132, "set_verbos": 132, "do_various_th": 132, "restor": 132, "breviti": 132, "nan_as_nul": 134, "_pyarrowdatafram": 134, "nullabl": 134, "extens": [134, 218, 254, 979, 997], "propag": [134, 178, 209, 254, 443, 444, 598, 879, 880, 997], "inference_s": [135, 254], "256": [135, 254, 883, 997], "user": [135, 187, 236, 254, 268, 450, 474, 544, 598, 648, 680, 696, 705, 911, 997], "almost": [135, 236, 254, 705, 997], "_significantly_": [135, 236, 254, 705, 997], "intens": [135, 236, 254, 448, 598, 705, 997], "becaus": [135, 146, 159, 175, 225, 236, 254, 399, 630, 680, 696, 705, 796, 846, 997], "forc": [135, 174, 236, 254, 635, 636, 680, 696, 705, 997], "materi": [135, 236, 254, 649, 680, 696, 705, 997], "parallelis": [135, 236, 254, 705, 997], "optimis": [135, 236, 254, 696, 705, 909, 910, 997], "achiev": [135, 236, 254, 268, 598, 705, 997], "best": [135, 236, 254, 268, 598, 705, 997], "tri": [135, 254], "arbitrarili": [135, 254], "rearrang": [135, 254], "transform": [135, 254, 424, 518, 520, 598], "preserv": [135, 217, 218, 254, 479, 598, 918, 979, 997], "lru_cach": [135, 254, 268, 598, 705, 997], "magnitud": [135, 254, 268, 598, 705, 997], "column_1": [135, 222, 254], "scalar": [135, 170, 196, 254, 473, 544, 571, 598, 835, 907, 997], "k": [136, 221, 254, 291, 294, 388, 533, 598, 612, 668, 696, 726, 729, 836, 981, 997], "intoexpr": [136, 158, 159, 160, 200, 207, 221, 231, 234, 254, 375, 397, 448, 476, 485, 542, 543, 547, 549, 551, 552, 556, 558, 565, 573, 576, 583, 585, 586, 590, 598, 612, 629, 630, 631, 655, 663, 668, 674, 678, 696, 816, 997], "nulls_last": [136, 207, 221, 254, 278, 484, 598, 612, 663, 668, 696, 714, 997], "smallest": [136, 221, 254, 291, 598, 612, 668, 696, 726, 997], "largest": [136, 159, 160, 174, 221, 227, 254, 335, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 533, 598, 612, 630, 631, 636, 668, 696, 778, 782, 789, 981, 997], "top": [136, 221, 254, 612, 668, 696], "top_k": [136, 254, 291, 598, 612, 696, 726, 997], "greater": [137, 174, 254, 368, 369, 482, 511, 598, 636, 696, 921, 950, 997], "cheap": [137, 138, 254, 614, 615, 696, 704, 732, 736, 997], "deepcopi": [137, 138, 254, 614, 615, 696, 732, 736, 997], "clear": [138, 254, 615, 696, 736, 997], "properti": [139, 145, 163, 199, 202, 230, 254, 617, 620, 654, 673, 696, 1005], "appl": [139, 164, 173, 192, 194, 213, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 452, 460, 493, 512, 525, 598, 635, 652, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 696, 932, 951], "banana": [139, 213, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 452, 460, 525, 598, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691], "pearson": [140, 254, 388, 482, 553, 598, 836, 921, 997], "correl": [140, 254, 553, 581], "coeffici": [140, 254, 482, 598, 921, 997], "corrcoef": [140, 254], "percentil": [141, 254, 745, 997], "summari": [141, 254, 745, 997], "glimps": [141, 162, 254], "usd": [141, 157, 254, 1005], "2020": [141, 157, 160, 254, 314, 318, 321, 324, 325, 327, 329, 334, 338, 341, 342, 345, 514, 515, 516, 631, 696, 753, 757, 760, 767, 769, 772, 777, 781, 784, 785, 788, 953, 954, 955], "null_count": [141, 144, 254, 307, 598, 696, 743, 745, 997], "266667": [141, 254], "666667": [141, 178, 228, 242, 254, 353, 598, 672, 686, 696], "std": [141, 254, 461, 598, 696, 745, 902, 997], "101514": [141, 254], "707107": [141, 254, 354, 598, 798, 997], "57735": [141, 254], "median": [141, 188, 254, 464, 598, 675, 696, 745, 898, 997], "more_column": [142, 147, 201, 224, 254, 356, 563, 598, 618, 622, 656, 670, 696], "Or": [142, 158, 159, 160, 174, 207, 227, 234, 254, 448, 485, 550, 590, 598, 618, 629, 630, 631, 636, 663, 678, 696], "subset": [144, 184, 223, 254, 619, 669, 696], "snippet": [144, 254, 619, 696], "is_nul": [144, 254, 598, 619, 696, 997], "sizeunit": [146, 254, 796, 997], "heap": [146, 254, 796, 997], "its": [146, 254, 313, 339, 346, 485, 598, 752, 782, 789, 796, 997], "bitmap": [146, 254, 796, 997], "therefor": [146, 254, 590, 796, 997], "structarrai": [146, 254, 796, 997], "constant": [146, 160, 254, 359, 598, 631, 696, 796, 802, 997], "unchang": [146, 254, 532, 598, 640, 680, 696, 796, 980, 997], "capac": [146, 205, 254, 796, 916, 997], "ffi": [146, 254, 796, 997], "kb": [146, 254, 796, 997], "mb": [146, 254, 796, 997], "gb": [146, 254, 796, 997], "tb": [146, 254, 796, 997], "revers": [146, 254, 302, 303, 304, 305, 306, 425, 452, 525, 598, 696, 739, 740, 741, 742, 997], "1_000_000": [146, 254, 796, 997], "25888898": [146, 254], "689577102661133": [146, 254], "long": [147, 180, 225, 254, 622, 644, 696], "letter": [147, 239, 248, 254, 356, 496, 563, 598, 622, 683, 692, 696, 935], "thu": [148, 254, 553, 704, 997], "faster": [148, 225, 254, 268, 461, 502, 536, 598, 660, 661, 696, 704, 705, 895, 941, 997], "onlin": [148, 254, 704, 997], "rerun": [148, 254, 704, 997], "fill_valu": [149, 204, 225, 254, 476, 598, 658, 696, 914, 997], "Not": [149, 254, 381, 383, 426, 598, 624, 696], "To": [149, 254, 310, 311, 335, 361, 489, 495, 496, 504, 586, 598, 624, 696, 778, 928, 934, 935, 943], "fillnullstrategi": [150, 254, 361, 598, 625, 696, 804, 997], "matches_supertyp": [150, 254, 625, 696], "forward": [150, 174, 254, 331, 361, 367, 598, 625, 636, 696, 774, 804, 997], "consecut": [150, 254, 285, 361, 367, 488, 598, 625, 696, 804, 927, 997], "supertyp": [150, 254, 267, 598, 625, 696], "fill_nan": [150, 254, 598, 696, 997], "OR": [151, 254, 543, 626, 696], "reduct": [153, 254], "supercast": [153, 254], "parent": [153, 254], "rule": [153, 254], "arithmet": [153, 254], "zip_with": [153, 254, 997], "foo11": [153, 254], "bar22": [153, 254], "null_equ": [154, 254, 908, 997], "retriev": [155, 254, 393, 394, 522, 840, 841, 961], "return_as_str": [157, 254], "preview": [157, 254], "nice": [157, 254], "few": [157, 254], "rather": [157, 174, 254, 521, 636, 696, 960], "head": [157, 176, 210, 254, 267, 392, 598, 639, 696, 838, 967, 997], "tail": [157, 162, 254, 267, 482, 598, 696, 811, 921, 997], "more_bi": [158, 186, 207, 254, 485, 598, 629, 663, 696], "maintain_ord": [158, 186, 188, 223, 227, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 262, 268, 284, 418, 528, 535, 554, 598, 616, 621, 623, 629, 649, 659, 660, 661, 669, 679, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 696, 720, 744, 865, 887, 982, 997], "consist": [158, 186, 254, 514, 629, 696, 953], "agg": [158, 159, 160, 254, 262, 268, 362, 364, 484, 485, 528, 540, 554, 598, 616, 621, 623, 629, 630, 631, 649, 659, 696], "index_column": [159, 160, 254, 630, 631, 696], "include_boundari": [159, 254, 630, 696], "start_bi": [159, 254, 630, 696], "startbi": [159, 254, 630, 696], "check_sort": [159, 160, 254, 630, 631, 696], "dynamicgroupbi": [159, 254], "groupbi": [159, 160, 184, 254, 262, 268, 307, 362, 364, 399, 448, 484, 485, 528, 540, 544, 554, 598, 616, 621, 623, 630, 631, 649, 659, 696, 743, 846, 997], "member": [159, 254, 630, 696, 823, 997], "seen": [159, 254, 285, 367, 598, 630, 696], "roll": [159, 160, 254, 331, 332, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 551, 581, 582, 598, 630, 631, 696, 774, 775, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 997], "slot": [159, 254, 307, 308, 398, 598, 630, 696, 743, 746, 845, 997], "1n": [159, 160, 174, 227, 254, 335, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 636, 696, 778, 782, 789], "nanosecond": [159, 160, 174, 227, 254, 335, 339, 340, 346, 462, 463, 464, 465, 466, 468, 469, 470, 561, 598, 630, 631, 636, 696, 778, 782, 783, 789], "1u": [159, 160, 174, 227, 254, 335, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 636, 696, 778, 782, 789], "microsecond": [159, 160, 174, 227, 254, 335, 339, 340, 346, 462, 463, 464, 465, 466, 468, 469, 470, 560, 561, 588, 598, 630, 631, 636, 649, 696, 778, 782, 789], "1m": [159, 160, 174, 227, 254, 324, 325, 327, 334, 335, 339, 341, 346, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 636, 696, 767, 769, 777, 778, 782, 784, 789], "millisecond": [159, 160, 174, 227, 254, 335, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 561, 598, 630, 631, 636, 696, 778, 782, 789], "1w": [159, 160, 174, 227, 254, 335, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 636, 696, 778, 782, 789], "week": [159, 160, 174, 227, 254, 335, 339, 346, 348, 462, 463, 464, 465, 466, 468, 469, 470, 561, 598, 630, 631, 636, 696, 778, 782, 789, 791], "1y": [159, 160, 174, 227, 254, 322, 335, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 636, 696, 761, 778, 782, 789, 793], "1i": [159, 160, 174, 227, 254, 335, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 636, 696, 778], "suffix": [159, 160, 173, 174, 200, 227, 231, 234, 254, 263, 289, 335, 339, 346, 381, 383, 384, 385, 425, 448, 452, 460, 462, 463, 464, 465, 466, 468, 469, 470, 493, 598, 630, 631, 635, 636, 655, 674, 675, 678, 696, 724, 778, 782, 789, 932], "_satur": [159, 160, 174, 227, 254, 335, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 636, 696, 778, 782, 789], "satur": [159, 160, 174, 227, 254, 335, 339, 346, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 631, 636, 696, 778, 782, 789], "10i": [159, 160, 254, 630, 631, 696], "ascend": [159, 160, 254, 630, 631, 696], "dynam": [159, 254, 417, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 696, 864], "matter": [159, 160, 171, 197, 214, 254, 630, 631, 696], "_lower_bound": [159, 254, 630, 696], "_upper_bound": [159, 254, 630, 696], "harder": [159, 254, 630, 696], "inclus": [159, 160, 254, 375, 462, 463, 464, 465, 466, 468, 469, 470, 509, 510, 598, 630, 631, 696, 816, 948, 949, 997], "datapoint": [159, 254, 630, 696], "mondai": [159, 254, 348, 630, 696, 791], "tuesdai": [159, 254, 630, 696], "wednesdai": [159, 254, 630, 696], "thursdai": [159, 254, 630, 696], "fridai": [159, 254, 630, 696], "saturdai": [159, 254, 630, 696], "sundai": [159, 254, 348, 630, 696, 791], "sorted": [159, 160, 254, 630, 631, 696], "metadata": [159, 160, 254, 630, 631, 696], "verifi": [159, 160, 254, 630, 631, 696], "incorrectli": [159, 160, 254, 417, 630, 631, 696], "incorrect": [159, 160, 254, 349, 474, 598, 630, 631, 680, 696, 792, 911, 997], "date_rang": [159, 227, 254, 312, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 344, 346, 347, 348, 349, 350, 630, 696, 751, 753, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 787, 789, 790, 791, 792, 793], "30m": [159, 254, 339, 346, 630, 696, 782, 789], "time_min": [159, 254, 630, 696], "time_max": [159, 254, 630, 696], "boundari": [159, 254, 296, 297, 298, 598, 630, 696, 733, 734, 735, 812, 997], "time_count": [159, 254, 630, 696], "_lower_boundari": [159, 254, 630, 696], "_upper_boundari": [159, 254, 630, 696], "lower_bound": [159, 254, 296, 298, 375, 598, 630, 696, 733, 735, 816, 984, 997], "upper_bound": [159, 254, 296, 297, 375, 417, 598, 630, 696, 733, 734, 816, 869, 997], "time_agg_list": [159, 254, 630, 696], "arang": [159, 225, 236, 254, 630, 680, 696], "2i": [159, 254, 630, 696], "3i": [159, 254, 630, 696], "a_agg_list": [159, 254, 630, 696], "rollinggroupbi": [160, 254], "dynamic_groupbi": [160, 254, 631, 696], "groupby_dynam": [160, 254, 631, 696], "43": [160, 254, 306, 598, 631, 696], "strptime": [160, 254, 338, 631, 696, 781], "set_sort": [160, 174, 227, 254, 598, 631, 636, 696, 997], "2d": [160, 217, 254, 571, 631, 696, 756], "sum_a": [160, 254, 631, 696], "min_a": [160, 254, 631, 696], "max_a": [160, 254, 631, 696], "seed": [161, 198, 254, 370, 455, 472, 478, 598, 810, 889, 906, 917, 997], "seed_1": [161, 254, 370, 598, 810, 997], "seed_2": [161, 254, 370, 598, 810, 997], "seed_3": [161, 254, 370, 598, 810, 997], "hash": [161, 254, 598, 997], "u64": [161, 254, 370, 457, 598, 649, 696, 810, 997], "10783150408545073287": [161, 254], "1438741209321515184": [161, 254], "10047419486152048166": [161, 254], "2047317070637311557": [161, 254], "ab": [162, 176, 210, 231, 254, 522, 523, 598, 674, 696, 811, 838, 967, 997], "grown": [164, 254], "intermedi": [166, 254, 634, 696, 815, 997, 1005], "linear": [166, 190, 246, 254, 374, 395, 429, 454, 466, 551, 552, 578, 598, 634, 650, 690, 696, 815, 842, 888, 900, 997], "mask": [167, 169, 254, 286, 287, 376, 378, 386, 396, 489, 491, 598, 721, 722, 805, 816, 818, 821, 833, 843, 884, 885, 909, 928, 930, 988, 997], "visual": [167, 169, 254], "buffer_s": [171, 254], "intern": [171, 254], "veri": [171, 222, 254, 268, 598, 615, 680, 696, 736, 997], "fit": [171, 205, 225, 254, 477, 580, 598, 915, 916, 997], "signific": [171, 254, 268, 598], "4x": [171, 254], "materialis": [171, 172, 196, 197, 254], "iter_row": [172, 196, 197, 254], "17_500": [172, 254], "klmnoopqrstuvwxyz": [172, 254], "__name__": [172, 254], "7500": [172, 254], "15_000": [172, 254], "record_batch": [172, 254], "to_arrow": [172, 254, 997], "to_batch": [172, 254], "date32": [172, 254], "large_str": [172, 212, 218, 254], "15000": [172, 254], "2500": [172, 254], "left_on": [173, 174, 254, 635, 636, 696], "right_on": [173, 174, 254, 635, 636, 696], "_right": [173, 174, 254, 635, 636, 696], "semi": [173, 254, 635, 696], "anti": [173, 254, 635, 680, 696, 909, 910, 997], "cross": [173, 254, 635, 696], "join_asof": [173, 254, 635, 696], "stringcach": [173, 254, 609], "other_df": [173, 254], "by_left": [174, 254, 636, 696], "by_right": [174, 254, 636, 696], "asofjoinstrategi": [174, 254, 636, 696], "allow_parallel": [174, 254, 635, 636, 696], "force_parallel": [174, 254, 635, 636, 696], "asof": [174, 254, 636, 696], "asof_join": [174, 254], "search": [174, 254, 636, 696], "distanc": [174, 254, 636, 696, 812, 997], "plan": [174, 175, 254, 613, 621, 628, 635, 636, 651, 659, 677, 696], "gdp": [174, 254, 636, 696], "2016": [174, 254, 636, 696], "2017": [174, 254, 636, 696], "2018": [174, 254, 338, 636, 696, 781], "2019": [174, 254, 636, 696], "record": [174, 217, 254, 636, 696], "jan": [174, 254, 636, 696], "1st": [174, 254, 636, 696], "4164": [174, 254, 636, 696], "4411": [174, 254, 636, 696], "4566": [174, 254, 636, 696], "4696": [174, 254, 636, 696], "popul": [174, 254, 636, 696], "12th": [174, 254, 636, 696], "82": [174, 254, 636, 696], "66": [174, 254, 541, 598, 636, 696, 900, 997], "83": [174, 254, 636, 696], "52": [174, 231, 254, 471, 598, 636, 674, 696], "request": [175, 254], "describe_plan": [175, 254], "unoptim": [175, 254], "describe_optimized_plan": [175, 254], "show_graph": [175, 254, 696], "un": [175, 254], "graphviz": [175, 254, 659, 696], "axi": [177, 178, 180, 182, 209, 254, 644, 696], "null_strategi": [178, 209, 254], "nullstrategi": [178, 209, 254], "spam": [178, 254, 496, 935], "id_var": [180, 254, 644, 696], "value_var": [180, 254, 644, 696], "variable_nam": [180, 254, 644, 696], "value_nam": [180, 254, 644, 696], "unpivot": [180, 254, 644, 696], "leav": [180, 254, 417, 644, 696], "massag": [180, 254, 644, 696], "measur": [180, 254, 644, 696], "merg": [181, 254, 645, 696], "caller": [181, 254, 417, 640, 645, 680, 696], "respons": [181, 254, 645, 696], "what": [184, 254, 978, 987, 997], "pack": [184, 254], "expr_unique_subset": [184, 254], "df_nuniqu": [184, 254], "df_agg_nuniqu": [184, 254], "offer": [187, 254, 450, 598, 648, 696], "fulli": [187, 198, 254], "cast_str_to_int": [187, 254, 648, 696], "col_nam": [187, 254, 425, 598, 648, 696], "tdf": [187, 254, 648, 696], "aggregate_funct": [188, 254], "pivotagg": [188, 254], "nodefault": [188, 254], "_nodefault": [188, 254], "no_default": [188, 254], "sort_column": [188, 254], "predefin": [188, 254], "predict": [188, 191, 227, 254], "transpos": [188, 254], "discoveri": [188, 254], "col1": [188, 225, 254, 696, 1005], "col2": [188, 225, 254, 696, 1005], "col3": [188, 254, 1005], "tanh": [188, 254, 598, 997], "998347": [188, 254], "964028": [188, 254], "999954": [188, 254], "interpol": [190, 246, 254, 361, 429, 454, 466, 578, 598, 650, 690, 696, 888, 900, 997], "rollinginterpolationmethod": [190, 246, 254, 454, 466, 578, 598, 650, 690, 696, 888, 900, 997], "midpoint": [190, 246, 254, 454, 466, 578, 598, 650, 690, 696, 888, 900, 997], "by_pred": [196, 254], "accord": [196, 254, 426, 598, 762], "never": [196, 254], "mutual": [196, 254], "exclus": [196, 254, 541, 598], "addition": [196, 254], "clariti": [196, 254], "toomanyrowsreturnederror": [196, 254, 609], "norowsreturnederror": [196, 254, 609], "inherit": [196, 254], "rowserror": [196, 254, 609], "with_replac": [198, 254, 472, 598, 906, 997], "shuffl": [198, 236, 254, 472, 598, 680, 906, 997], "modul": [198, 254, 472, 478, 597, 598, 906, 917, 997], "more_expr": [200, 231, 254, 448, 542, 543, 547, 549, 551, 552, 558, 573, 576, 583, 585, 586, 598, 655, 674, 696], "named_expr": [200, 231, 254, 583, 585, 655, 674, 696], "threshold": [200, 254, 655, 696], "set_auto_structifi": [200, 231, 254, 655, 674, 696], "auto_structifi": [200, 231, 254, 655, 674, 696], "is_odd": [200, 254, 655, 696], "_is_odd": [200, 254, 655, 696], "shift_and_fil": [203, 254, 598, 696, 997], "shift": [204, 254, 308, 398, 449, 476, 551, 598, 658, 696, 746, 845, 883, 914, 997], "shrink": [205, 254, 477, 598, 915, 916, 997], "hold": [205, 254], "ddof": [208, 228, 254, 487, 539, 553, 581, 582, 584, 589, 598, 664, 672, 696, 925, 986, 997], "deviat": [208, 254, 354, 468, 487, 584, 598, 664, 696, 798, 925, 997], "degre": [208, 228, 254, 487, 539, 553, 581, 582, 584, 589, 598, 664, 672, 696, 925, 986, 997], "freedom": [208, 228, 254, 487, 539, 553, 581, 582, 584, 589, 598, 664, 672, 696, 925, 986, 997], "divisor": [208, 228, 254, 487, 539, 553, 581, 582, 584, 589, 598, 664, 672, 696, 925, 986, 997], "816497": [208, 254], "21": [209, 254, 567], "16a": [209, 254], "27b": [209, 254], "38c": [209, 254], "nth": [211, 254, 511, 529, 598, 667, 696, 950, 969, 997], "mostli": [212, 254, 362, 598], "categoricaltyp": [212, 254], "as_seri": [213, 254], "fruit": [213, 254, 452, 460, 493, 512, 525, 598, 932, 951], "car": [213, 254, 452, 460, 525, 598], "beetl": [213, 254, 452, 460, 525, 598], "audi": [213, 254, 452, 460, 525, 598], "300": [213, 254, 896, 897, 899, 997], "dummi": [215, 254, 974, 997], "foo_1": [215, 254], "foo_2": [215, 254], "bar_3": [215, 254], "bar_4": [215, 254], "ham_a": [215, 254], "ham_b": [215, 254], "instantiat": [216, 254, 976, 997], "from_repr": [216, 254, 976, 997], "df_from_str_repr": [216, 254], "eval": [216, 254, 562, 976, 997], "correspond": [217, 254, 323, 455, 598, 762, 889, 997], "re": [217, 254, 331, 332, 774, 775, 1004], "ll": [217, 254], "u1": [217, 254], "f4": [217, 254], "view": [217, 254, 978, 997], "recarrai": [217, 254], "rec": [217, 254], "use_pyarrow_extension_arrai": [218, 254, 979, 997], "trigger": [218, 254, 979, 997], "sent": [218, 254, 978, 979, 997], "pandas_df1": [218, 254], "pandas_df2": [218, 254], "pandas_df2_pa": [218, 254], "na": [218, 254, 979, 997], "get_column": [219, 254, 586], "four": [220, 254], "five": [220, 254, 1005], "bottom_k": [221, 254, 533, 598, 668, 696, 981, 997], "include_head": [222, 254], "header_nam": [222, 254], "column_nam": [222, 254], "perhap": [222, 254], "column_2": [222, 254], "name_gener": [222, 254], "base_nam": [222, 254], "my_column_": [222, 254], "my_column_0": [222, 254], "my_column_1": [222, 254], "my_column_2": [222, 254], "uniquekeepstrategi": [223, 254, 669, 696], "kept": [223, 254, 669, 696], "decompos": [224, 254, 670, 696], "t_a": [224, 254, 670, 696], "t_b": [224, 254, 670, 696], "t_c": [224, 254, 670, 696], "t_d": [224, 254, 670, 696], "womp": [224, 254, 670, 696], "t_": [224, 254, 670, 696], "t_struct": [224, 254, 670, 696], "step": [225, 254, 546], "unstackdirect": [225, 254], "much": [225, 254, 307, 416, 598, 743, 863, 997], "pivot": [225, 254], "phase": [225, 254], "subject": [225, 254], "ascii_uppercas": [225, 254], "h": [225, 254, 261, 342, 345, 477, 514, 516, 519, 598, 953, 955, 958], "col1_0": [225, 254], "col1_1": [225, 254], "col1_2": [225, 254], "col2_0": [225, 254], "col2_1": [225, 254], "col2_2": [225, 254], "coalesc": [226, 254, 514, 671, 696, 953], "400": [226, 254, 671, 696, 896, 897, 899, 997], "600": [226, 254, 671, 696], "700": [226, 254, 671, 696], "new_df": [226, 254, 671, 696], "time_column": [227, 254], "frequenc": [227, 254], "forward_fil": [227, 254, 303, 306, 598], "varianc": [228, 254, 355, 388, 470, 539, 589, 598, 672, 696, 799, 836, 904, 986, 997], "grow": [229, 254], "is_not": [231, 254, 598, 674, 696], "not_c": [231, 254, 674, 696], "diff": [231, 254, 318, 321, 325, 327, 329, 334, 341, 598, 674, 696, 757, 760, 767, 769, 772, 777, 784, 997], "_diff": [231, 254, 674, 696], "row_nr": [232, 254, 426, 598, 676, 696, 910, 997], "more_agg": [234, 678], "named_agg": [234, 678], "_sum": [234, 678], "_mean_squar": [234, 678], "b_sum": [234, 678], "c_mean_squar": [234, 678], "sub": [236, 281, 282, 283, 598, 717, 718, 719], "triangl": [236, 680], "group_df": [236, 680], "deem": [237, 301, 554, 598, 681], "nr": [239, 248, 683, 692], "maxim": [241, 276, 598, 685, 712, 997], "833333": [242, 686], "minim": [244, 277, 394, 477, 485, 598, 688, 713, 841, 874, 915, 997], "overview": [254, 598, 609, 696, 997, 1005], "public": [254, 598, 609, 696, 997], "frameinittyp": [254, 696], "variou": [254, 598, 696, 997], "entri": [254, 696, 1004], "prevent": [254, 305, 306, 387, 526, 598, 696, 741, 742, 966, 997], "come": [254, 331, 332, 388, 598, 610, 695, 696, 774, 775, 836, 997], "behavior": [254, 268, 416, 544, 598, 863], "mydatafram": 254, "notic": [254, 696, 997], "df4": 254, "df5": 254, "df6": 254, "corr": 254, "drop_in_plac": 254, "drop_nul": [254, 310, 598, 696, 997], "estimated_s": [254, 997], "explod": [254, 364, 448, 459, 598, 696, 893, 997], "find_idx_by_nam": 254, "fold": [254, 435, 549, 556, 557, 579], "frame_equ": [254, 339, 346], "groupby_rol": [254, 462, 463, 464, 465, 466, 468, 469, 470, 598, 630, 696], "hash_row": 254, "hstack": 254, "insert_at_idx": 254, "is_dupl": [254, 598, 997], "is_empti": [254, 997], "is_uniqu": [254, 598, 997], "iter_slic": 254, "melt": [254, 696], "merge_sort": [254, 696], "n_uniqu": [254, 598, 997], "pipe": [254, 598, 696], "quantil": [254, 466, 598, 696, 887, 900, 997], "replace_at_idx": 254, "shrink_to_fit": [254, 997], "take_everi": [254, 598, 696, 997], "to_dict": 254, "to_dummi": [254, 997], "to_numpi": [254, 424, 598, 997], "to_panda": [254, 997], "to_struct": [254, 496], "unnest": [254, 496, 510, 511, 523, 696, 864, 949, 950], "unstack": 254, "upsampl": 254, "write_avro": 254, "write_databas": 254, "write_delta": 254, "write_excel": 254, "write_json": [254, 651, 696], "write_parquet": 254, "cumprod": [261, 598, 997], "ghi": [261, 496, 598, 935], "94": [262, 598], "map_alia": [263, 452, 525, 598], "confus": [264, 381, 383, 598], "tt": [264, 598], "tf": [264, 266, 598], "ff": [264, 266, 598], "upcast": [267, 598], "skip_nul": [268, 598, 705, 997], "pass_nam": [268, 598], "applystrategi": [268, 598], "thread_loc": [268, 598], "unknown": [268, 426, 495, 571, 598, 934], "stage": [268, 598], "speed": [268, 598, 661, 696], "code": [268, 474, 598, 638, 696, 911, 997], "amount": [268, 598], "releas": [268, 598, 1005], "gil": [268, 598], "discourag": [268, 598], "loop": [268, 598], "a_times_2": [268, 598], "approx": [269, 545, 598, 696], "hyperloglog": [269, 545, 598, 696], "algorithm": [269, 545, 598, 696], "cardin": [269, 545, 598, 696], "invers": [270, 271, 272, 273, 274, 275, 598, 706, 707, 708, 709, 710, 711, 997], "cosin": [270, 271, 299, 300, 424, 598, 706, 707, 737, 738, 997], "570796": [270, 272, 598, 706, 708, 997], "hyperbol": [271, 273, 275, 300, 481, 531, 598, 707, 709, 711, 738, 920, 971, 997], "sine": [272, 273, 424, 480, 481, 598, 708, 709, 919, 920, 997], "881374": [273, 598, 709, 997], "tangent": [274, 275, 530, 531, 598, 710, 711, 970, 971, 997], "785398": [274, 598, 710, 997], "arg_wher": [279, 598], "maintain": [284, 418, 473, 535, 598, 660, 661, 696, 720, 865, 907, 982, 997], "substr": [286, 289, 290, 489, 493, 504, 505, 509, 510, 511, 512, 721, 724, 725, 928, 932, 943, 944, 948, 949, 950, 951], "transferencod": [287, 288, 491, 492, 722, 723, 930, 931], "strict": [287, 293, 489, 491, 503, 514, 515, 516, 519, 598, 722, 727, 908, 928, 930, 942, 953, 954, 955, 958, 997], "hex": [287, 288, 491, 492, 503, 722, 723, 930, 931, 942], "base64": [287, 288, 491, 492, 722, 723, 930, 931], "complex": [291, 307, 533, 598, 726, 743, 981, 997], "frac": [291, 353, 354, 355, 482, 533, 598, 726, 797, 798, 799, 921, 981, 997], "hurt": [292, 598], "lot": [292, 598], "content": [292, 478, 538, 598, 917, 997], "problem": [292, 598], "due": [293, 338, 598, 727, 781, 997], "overflow": [293, 305, 306, 503, 526, 598, 727, 741, 742, 942, 966, 997], "categoricalord": [294, 729], "lexic": [294, 729], "foo_clip": [296, 297, 298, 598], "clip": [297, 298, 598, 734, 735, 997], "543081": [300, 598, 738, 997], "cumul": [302, 303, 304, 305, 306, 556, 557, 558, 598, 739, 740, 741, 742, 997], "a_revers": [302, 303, 304, 305, 306, 425, 460, 525, 598], "value_cummax": [303, 598], "value_cummax_all_fil": [303, 598], "value_cumsum": [306, 598], "value_cumsum_all_fil": [306, 598], "min_period": [307, 353, 354, 355, 461, 462, 463, 464, 465, 466, 468, 469, 470, 581, 582, 598, 743, 797, 798, 799, 895, 896, 897, 898, 899, 900, 902, 903, 904, 997], "slide": [307, 598, 743, 997], "realli": [307, 598, 743, 997], "visit": [307, 598, 743, 997], "null_behavior": [308, 398, 598, 746, 845, 997], "nullbehavior": [308, 398, 598, 746, 845, 997], "th": [308, 398, 482, 598, 746, 845, 921, 997], "discret": [308, 351, 398, 598, 744, 746, 795, 812, 845, 887, 997], "drop_nan": [311, 598, 997], "lose": [312, 751], "2001": [312, 317, 319, 320, 322, 323, 328, 330, 335, 336, 337, 339, 340, 344, 346, 347, 348, 349, 350, 514, 751, 756, 758, 759, 761, 763, 764, 765, 766, 768, 770, 771, 773, 776, 778, 779, 780, 782, 783, 787, 789, 790, 791, 792, 793, 953], "time_unit_m": [312, 751], "time_unit_n": [312, 751], "naiv": [313, 514, 516, 752, 953, 955], "compon": [313, 340, 514, 516, 561, 752, 783, 953, 955], "resolv": 313, "tm": 313, "456000": [313, 752], "101000": 313, "456": [313, 752, 975, 997], "101": [313, 503, 942, 1005], "d1": 313, "d2": 313, "d3": 313, "utc": [314, 338, 514, 516, 753, 781, 953, 955], "europ": [314, 338, 753, 781], "london": [314, 338, 753, 781], "gmt": [314, 338, 753, 781], "bst": [314, 338, 753, 781], "weekdai": [317, 336], "day_of_month": [317, 336, 348], "ordinal_dai": [317, 348], "day_of_year": [317, 336, 348], "days_diff": 318, "epochtimeunit": [319, 567, 758], "unix": [319, 567, 758], "epoch_n": [319, 758], "epoch_": [319, 758], "978307200000000": [319, 344, 758, 787], "978307200": [319, 758], "978393600000000": [319, 344, 758, 787], "978393600": [319, 758], "978480000000000": [319, 344, 758, 787], "978480000": [319, 758], "hours_diff": 321, "leap": [322, 335, 761, 778], "2002": [322, 323, 335, 337, 350, 761, 778, 793], "iso": [323, 347, 348, 762, 790, 791], "2006": [323, 335, 778], "180": [323, 337, 350], "2004": [323, 335, 778], "2005": [323, 335, 778], "1_001": [324, 325, 327, 334], "002": [324, 325, 327, 334, 561, 767, 769, 777], "003": [324, 325, 327, 334], "3000": 324, "997": [324, 325, 327, 334], "997000": 324, "998": [324, 325, 327, 334], "998000": 324, "999": [324, 325, 327, 334, 1005], "999000": 324, "microseconds_diff": 325, "milliseconds_diff": 327, "minutes_diff": 329, "1440": [329, 772], "think": [331, 332, 774, 775], "vectoris": [331, 332, 774, 775], "tseri": [331, 332, 774, 775], "monthend": [331, 774], "rollforward": [331, 774], "monthbegin": [332, 775], "rollback": [332, 775], "nanoseconds_diff": 334, "1000000": [334, 521, 777], "minu": [335, 778], "dictat": [335, 778], "date_plus_1i": [335, 778], "1y2mo": [335, 778], "date_min": 335, "1998": [335, 778], "1999": [335, 778], "2003": [335, 567, 778], "ordin": [336, 455, 598, 779, 889, 997], "366": [336, 779], "use_earliest": [338, 781], "convert_time_zon": [338, 781], "ambigu": [338, 781], "sai": [338, 781], "daylight": [338, 781], "earliest": [338, 781], "london_timezon": [338, 781], "amsterdam": [338, 781], "london_to_amsterdam": [338, 781], "cet": [338, 781], "cest": [338, 781], "dst": [338, 781], "ts_local": [338, 781], "brussel": [338, 781], "half": [339, 353, 354, 355, 598, 782, 797, 798, 799, 997], "225": [339, 346], "to_fram": [339, 346, 514, 909, 910, 949, 950, 953, 997], "10m": [339, 346, 782, 789], "milli": [340, 783], "micro": [340, 783], "456789": 340, "654321": 340, "111110": 340, "765431": 340, "sec": [340, 1005], "11111": 340, "seconds_diff": 341, "to_str": [342, 785], "datetime_str": [342, 345], "timestamp_n": [344, 787], "timestamp_m": 344, "978307200000": 344, "978393600000": 344, "978480000000": 344, "strftime": [345, 788], "1mo_satur": 346, "53": [347, 790], "time_unit_u": [349, 792], "32971": [349, 792], "32974": [349, 792], "32976": [349, 792], "718281828459045": [351, 419, 598, 795, 866, 997], "pk": [351, 598, 795, 997], "probabl": [351, 598, 795, 997], "459148": [351, 598], "754888": [351, 598], "span": [353, 354, 355, 598, 797, 798, 799, 997], "half_lif": [353, 354, 355, 598, 797, 798, 799, 997], "adjust": [353, 354, 355, 482, 598, 797, 798, 799, 921, 997], "ignore_nul": [353, 354, 355, 598, 797, 798, 799, 987, 997], "exponenti": [353, 354, 355, 357, 451, 598, 797, 798, 799, 800, 997], "weight": [353, 354, 355, 461, 462, 463, 464, 465, 466, 468, 469, 470, 482, 598, 797, 798, 799, 895, 896, 897, 898, 899, 900, 902, 903, 904, 921, 997], "decai": [353, 354, 355, 598, 797, 798, 799, 997], "term": [353, 354, 355, 499, 502, 598, 797, 798, 799, 938, 941, 997], "mass": [353, 354, 355, 598, 797, 798, 799, 997], "gamma": [353, 354, 355, 598, 797, 798, 799, 997], "foral": [353, 354, 355, 598, 797, 798, 799, 997], "geq": [353, 354, 355, 598, 797, 798, 799, 997], "theta": [353, 354, 355, 598, 797, 798, 799, 997], "life": [353, 354, 355, 598, 797, 798, 799, 997], "exp": [353, 354, 355, 598, 797, 798, 799, 997], "ln": [353, 354, 355, 598, 797, 798, 799, 997], "smooth": [353, 354, 355, 598, 797, 798, 799, 997], "factor": [353, 354, 355, 532, 598, 797, 798, 799, 980, 997], "leq": [353, 354, 355, 598, 797, 798, 799, 997], "imbal": [353, 354, 355, 598, 797, 798, 799, 997], "ew": [353, 354, 355, 598, 797, 798, 799, 997], "w_i": [353, 354, 355, 598, 797, 798, 799, 997], "recurs": [353, 354, 355, 598, 797, 798, 799, 997], "y_0": [353, 354, 355, 598, 797, 798, 799, 997], "x_0": [353, 354, 355, 598, 797, 798, 799, 997], "y_t": [353, 354, 355, 598, 797, 798, 799, 997], "y_": [353, 354, 355, 598, 797, 798, 799, 997], "x_t": [353, 354, 355, 598, 797, 798, 799, 997], "observ": [353, 354, 355, 598, 797, 798, 799, 997], "x_2": [353, 354, 355, 598, 797, 798, 799, 997], "428571": [353, 598], "bia": [354, 355, 388, 467, 482, 598, 798, 799, 836, 901, 921, 997], "unbias": [354, 355, 598, 798, 799, 997], "963624": [354, 598, 798, 997], "928571": [355, 598, 799, 997], "wildcard": [356, 550, 556, 557, 565, 579, 598], "regex": [356, 432, 489, 490, 493, 495, 496, 504, 505, 512, 563, 586, 598, 928, 929, 932, 934, 935, 943, 944, 951], "aa": [356, 489, 563, 598, 928], "ba": [356, 563, 598], "cc": [356, 563, 598], "718282": [357, 598], "389056": [357, 598], "54": [357, 598, 1005], "59815": [357, 598], "expand": [358, 431, 432, 458, 598, 801, 997], "exprlistnamespac": [358, 364, 459, 598], "exprstringnamespac": [358, 598], "pythonliter": [359, 573, 576, 580, 598, 802, 871, 874, 997], "extrem": [359, 598, 802, 997], "group_col": [362, 540, 598], "g1": [362, 540, 598], "g2": [362, 540, 598], "lt": [362, 540, 598, 997], "gte": [362, 540, 598], "divis": [366, 534, 598], "truediv": [366, 598], "9774092659964970114": [370, 598], "13614470193936745724": [370, 598], "1101441246220388612": [370, 598], "11638928888656214026": [370, 598], "13382926553367784577": [370, 598], "cumsum": [373, 524, 598, 633, 696, 835, 997], "interpolationmethod": [374, 598, 815, 997], "regrid": [374, 598], "grid": [374, 598], "df_original_grid": [374, 598], "grid_point": [374, 598], "df_new_grid": [374, 598], "conflat": [375, 598], "finit": [377, 534, 553, 598, 820, 997], "primit": [379, 598, 978, 997], "optional_memb": [379, 598, 823, 997], "infinit": [380, 534, 598, 824, 997], "_isnan": [381, 598], "b_isnan": [381, 598], "negat": [382, 598], "_is_not_nan": [383, 598], "b_is_not_nan": [383, 598], "_not_nul": [384, 598], "a_not_nul": [384, 598], "b_not_nul": [384, 598], "_isnul": [385, 598], "a_isnul": [385, 598], "b_isnul": [385, 598], "undo": [387, 437, 598], "duplicateerror": [387, 598, 609], "occurr": [387, 598, 812, 997], "333333": [387, 470, 598, 883, 904, 997], "fisher": [388, 482, 598, 836, 921, 997], "fourth": [388, 598, 836, 997], "subtract": [388, 524, 598, 836, 997], "distribut": [388, 482, 598, 836, 921, 997], "elimin": [388, 598, 836, 997], "bias": [388, 482, 598, 836, 921, 997], "scipi": [388, 482, 598, 836, 921, 997], "stat": [388, 482, 598, 836, 921, 997], "153061": [388, 598], "sublist": [393, 394, 396, 398, 401, 402, 403, 404, 405, 412, 415, 416, 417, 823, 840, 841, 843, 845, 848, 849, 850, 851, 852, 859, 862, 863, 864, 997], "membership": [396, 843], "listcol": 397, "number_of_two": 397, "blindli": [399, 846], "worth": [399, 846], "enough": [399, 482, 598, 846, 921, 997], "concat_list": [399, 562, 846], "rank": [399, 553, 562, 598, 846, 997], "exprnamespac": 400, "reshap": [400, 598, 847, 997], "flat": [400, 459, 598, 847, 893, 997], "taken": [412, 508, 528, 598, 859, 947], "null_on_oob": [416, 863], "cheaper": [416, 863], "n_field_strategi": [417, 864], "tostructstrategi": [417, 864], "first_non_nul": [417, 864], "max_width": [417, 864], "field_0": [417, 864], "field_1": [417, 864], "field_n": [417, 864], "n0": 417, "n1": 417, "logarithm": [419, 420, 421, 598, 866, 867, 868, 997], "584963": [419, 598], "30103": [420, 598], "60206": [420, 598], "natur": [421, 598, 868, 997], "plu": [421, 598, 868, 997], "693147": [421, 598], "098612": [421, 598], "386294": [421, 598], "lowest": [422, 598], "9223372036854775808": [422, 598], "agg_list": [424, 598], "elementwis": [424, 461, 462, 463, 464, 465, 466, 468, 469, 470, 598, 895, 896, 897, 898, 899, 900, 902, 903, 904, 997], "parti": [424, 598], "book": [424, 598], "map_dict": [424, 598, 997], "argmax": [424, 598], "_revers": [425, 460, 525, 598], "rsplit": [425, 598], "b_revers": [425, 460, 525, 598], "remap": [426, 598, 870, 997], "lookup": [426, 598, 870, 997], "country_code_dict": [426, 598], "ca": [426, 598], "canada": [426, 598], "de": [426, 598], "germani": [426, 598], "fr": [426, 598], "franc": [426, 598], "country_cod": [426, 598], "rest": [426, 598], "exprmetanamespac": [430, 433], "computeerror": [434, 503, 609, 942], "keep_nam": [437, 598], "modulu": [439, 598], "xlog2": [441, 451, 598], "poison": [443, 444, 598, 879, 880, 997], "nanmax": [443, 444, 598, 879, 880, 997], "wherea": [443, 444, 598, 632, 639, 696, 879, 880, 997], "inequ": [445, 598], "mapping_strategi": [448, 598], "windowmappingstrategi": [448, 598], "group_to_row": [448, 598], "outcom": [448, 598], "group_dtyp": [448, 598], "warn": [448, 598], "flatten": [448, 598], "_max": [448, 598], "c_max": [448, 598], "_min": [448, 598], "c_min": [448, 598], "percent": [449, 598, 883, 997], "090909": [449, 598], "extract_numb": [450, 598], "digit": [450, 471, 496, 521, 598, 905, 929, 935, 960, 997, 1005], "scale_negative_even": [450, 598], "expon": [451, 598, 997], "reverse_": [452, 598], "reverse_a": [452, 598], "reverse_fruit": [452, 598], "reverse_b": [452, 598], "reverse_car": [452, 598], "rankmethod": [455, 598, 889, 997], "ti": [455, 598, 889, 997], "competit": [455, 598, 889, 997], "highest": [455, 537, 553, 598, 696, 889, 997], "64bit": [457, 598, 891, 997], "safe": [457, 514, 516, 598, 891, 953, 955, 978, 997], "coerc": [458, 598], "fruits_revers": [460, 525, 598], "cars_revers": [460, 525, 598], "window_s": [461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 581, 582, 598, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 997], "rolling_min": [461, 598, 895, 997], "rolling_max": [461, 598, 895, 997], "rolling_mean": [461, 598, 895, 997], "rolling_sum": [461, 598, 895, 997], "multipli": [461, 462, 463, 464, 465, 466, 468, 469, 470, 598, 895, 896, 897, 898, 899, 900, 902, 903, 904, 997], "label": [461, 462, 463, 464, 465, 466, 468, 469, 470, 598, 649, 696, 744, 887, 895, 896, 897, 898, 899, 900, 902, 903, 904, 997], "358899": [461, 598], "041452": [461, 598], "567764": [461, 598], "travers": [462, 463, 465, 468, 469, 470, 598, 896, 897, 899, 902, 903, 904, 997], "vector": [462, 463, 465, 468, 469, 470, 598, 896, 897, 899, 902, 903, 904, 997], "5h": [462, 463, 464, 465, 466, 468, 469, 470, 598], "skew": [467, 598, 901, 997], "527525": [468, 598, 902, 997], "searchsortedsid": [473, 598, 907, 997], "leftmost": [473, 598, 907, 997], "rightmost": [473, 598, 907, 997], "six": [473, 598], "downstream": [474, 598, 911, 997], "extrema": [477, 598, 915, 997], "112": [477, 598, 1005], "129": [477, 598], "8589934592": [477, 598], "1073741824": [477, 598], "175201": [481, 598, 920, 997], "about": [482, 489, 495, 496, 504, 598, 921, 928, 934, 935, 943, 997, 1005], "unimod": [482, 598, 921, 997], "skewtest": [482, 598, 921, 997], "speak": [482, 598, 921, 997], "g_1": [482, 598, 921, 997], "m_3": [482, 598, 921, 997], "m_2": [482, 598, 921, 997], "m_i": [482, 598, 921, 997], "sum_": [482, 598, 921, 997], "texttt": [482, 598, 921, 997], "k_3": [482, 598, 921, 997], "k_2": [482, 598, 921, 997], "sqrt": [482, 598, 921, 997], "343622": [482, 598], "value1": [485, 598], "value2": [485, 598], "attain": [485, 598], "414214": [486, 598, 924, 997], "ends_with": [489, 512, 951], "sensit": [489, 496, 504, 928, 935, 943], "ilmsuxu": [489, 495, 496, 504, 928, 934, 935, 943], "default_match": 489, "insensitive_match": 489, "section": [489, 495, 496, 504, 928, 934, 935, 943], "crab": [489, 928], "dog": [489, 518, 520, 552, 928], "rab": [489, 928], "success": [490, 496, 929, 935], "overlap": [490, 496, 929, 935], "captur": [490, 495, 496, 929, 934, 935], "123": [490, 496, 505, 929, 935, 944, 975, 997], "bla": [490, 496, 929, 935], "asd": [490, 496, 929, 935], "678": [490, 496, 929, 935], "910t": [490, 496, 929, 935], "count_digit": 490, "666f6f": [492, 931], "626172": [492, 931], "mango": [493, 512, 932, 951], "go": [493, 932], "has_suffix": 493, "group_index": [495, 934], "nthose": [495, 934], "nodd": [495, 934], "nthe": [495, 934], "url": [495, 934], "vote": [495, 934], "ballon_dor": [495, 934], "404": [495, 934], "ref": [495, 934], "candid": [495, 934], "messi": [495, 934], "ronaldo": [495, 934], "did": [496, 935], "email": [496, 935], "real": [496, 935], "some_account": [496, 935], "somewher": [496, 935], "net": [496, 935], "jkl": [496, 935], "uvw": [496, 935], "co": [496, 598, 935, 997], "uk": [496, 935], "address": 496, "xi": [496, 935], "insensit": [496, 504, 928, 935, 943], "quantifi": [496, 935], "email_part": [496, 935], "extracted_nr": 496, "910": [496, 935], "json_path_match": [497, 936], "jsonpath": [497, 498, 936, 937], "json_path": [498, 937], "regardless": [498, 937], "json_val": [498, 937], "n_char": [499, 938], "caf\u00e9": [499, 502, 938, 941], "345": [499, 502, 938, 941], "\u6771\u4eac": [499, 502, 938, 941], "nchar": [499, 502], "fill_char": [500, 506, 939, 945], "justifi": [500, 506, 939, 945], "pad": [500, 506, 521, 939, 945, 960], "cow": [500, 506, 939, 945], "monkei": [500, 506, 939, 945], "hippopotamu": [500, 506, 939, 945], "strip": [501, 507, 940, 946], "tworld": [501, 513, 940, 952], "wod": [501, 507, 940, 946], "rld": [501, 940], "radix": [503, 942], "parseerror": [503, 942], "becom": [503, 942], "silent": [503, 942], "bin": [503, 541, 592, 598, 744, 812, 887, 942, 991, 997], "110": [503, 942], "010": [503, 942], "fa1e": [503, 942], "ff00": [503, 942], "cafe": [503, 942], "64030": [503, 942], "65280": [503, 942], "51966": [503, 942], "replace_al": [504, 943], "citi": 504, "philadelphia": 504, "season": 504, "spring": 504, "summer": 504, "autumn": 504, "winter": 504, "weather": [504, 943], "raini": [504, 943], "sunni": [504, 943], "cloudi": 504, "snowi": 504, "foggi": [504, 943], "123abc": [504, 943], "abc456": [504, 943], "abcabc": [505, 944], "123a123": [505, 944], "bc": [505, 586, 944], "trail": [507, 513, 946, 952], "worl": [507, 513, 946, 952], "subslic": [508, 947], "pear": [508, 947], "papaya": [508, 947], "dragonfruit": [508, 947], "s_slice": 508, "ear": [508, 947], "aya": [508, 947], "uit": [508, 947], "ya": [508, 947], "onf": [508, 947], "a_1": [510, 949, 974, 997], "d_4": [510, 949], "rename_field": [510, 511, 949, 950], "first_part": [510, 511, 949, 950], "second_part": [510, 511, 949, 950], "remaind": [511, 950], "app": [512, 951], "has_prefix": 512, "polarstemporaltyp": [514, 953], "anywher": [514, 515, 516, 953, 954, 955], "3f": [514, 516, 953, 955], "00z": [514, 516, 953, 955], "sun": [514, 953], "jul": [514, 953], "34": [514, 953], "inference_length": [517, 956], "3420": [517, 956], "120134": [517, 956], "3212": [517, 956], "143": [517, 956, 1005], "lowercas": [518, 957], "variant": [518, 520], "uppercas": [520, 959], "100000": 521, "0010": 521, "0001": 521, "00000": 521, "00001": 521, "cd": [522, 523], "struct_col": [522, 523], "www": 523, "xxx": 523, "yyi": 523, "zzz": 523, "obvious": 523, "structfieldnotfounderror": [523, 609], "761594": [531, 598, 971, 997], "replic": [532, 598, 980, 997], "vals_phys": [532, 598], "floordiv": [534, 598], "ieee": [534, 598], "754": [534, 598], "mathemat": [534, 562, 598], "undefin": [534, 598], "On": [534, 598], "operand": [534, 598], "infin": [534, 598], "value_count": [536, 598, 997], "9223372036854775807": [537, 598], "multithread": [538, 598], "binary_str": [541, 598], "zfill": [541, 598], "250": [541, 598, 897, 997, 1005], "bin_x": [541, 598], "bin_i": [541, 598], "xor_xi": [541, 598], "bin_xor_xi": [541, 598], "00001010": [541, 598], "00000001": [541, 598], "00001011": [541, 598], "00001000": [541, 598], "00000010": [541, 598], "11111010": [541, 598], "00000011": [541, 598], "249": [541, 598], "11111001": [541, 598], "01000010": [541, 598], "00000100": [541, 598], "70": [541, 598], "01000110": [541, 598], "bitwis": [542, 543], "AND": 542, "returns_scalar": 544, "product_a": 544, "49": 544, "Be": 546, "more_nam": 550, "hamburg": 550, "lag": 551, "mimic": 551, "a_lag_": 551, "a_rol": 551, "swim": 552, "walk": 552, "full_sent": 552, "correlationmethod": 553, "propagate_nan": 553, "spearman": 553, "larger": [553, 660, 661, 696], "544705": 553, "covari": [555, 582], "acc": [556, 557, 565, 579], "include_init": 556, "accumul": [556, 557, 565, 579], "fn": [556, 557, 565, 579], "new_valu": [556, 557, 565, 579], "cumreduc": 556, "tbl_width_char": 561, "120": 561, "add_week": 561, "add_dai": 561, "add_second": 561, "add_milli": 561, "add_hour": 561, "a_b_doubl": 562, "f_string": 566, "placehold": 566, "hello_": 566, "_world": 566, "foo_": 566, "_bar_": 566, "foo_a_bar_1": 566, "foo_b_bar_2": 566, "foo_c_bar_3": 566, "epoch": 567, "timestep": 567, "1666683077": 567, "1666683099": 567, "39": 567, "12345": [567, 730, 807, 905, 997], "12346": 567, "agg_group": [568, 598], "allow_object": 571, "valueexcept": 571, "test_func": 572, "605551": 584, "605551275463989": 584, "my_struct": 585, "selector": 586, "chain": 590, "isn": 590, "thens": 590, "elif": 590, "pick": 590, "arr": [591, 978, 989, 997], "sometim": 597, "and_": 598, "approx_uniqu": [598, 696], "arcco": [598, 997], "arccosh": [598, 997], "arcsin": [598, 997], "arcsinh": [598, 997], "arctan": [598, 997], "arctanh": [598, 997], "arg_max": [598, 997], "arg_min": [598, 997], "arg_sort": [598, 997], "arg_uniqu": [598, 997], "backward_fil": 598, "clip_max": [598, 997], "clip_min": [598, 997], "cosh": [598, 997], "cumcount": 598, "cummax": [598, 997], "cummin": [598, 997], "cumulative_ev": [598, 997], "entropi": [598, 997], "eq": [598, 997], "eq_miss": [598, 997], "ewm_mean": [598, 997], "ewm_std": [598, 997], "ewm_var": [598, 997], "extend_const": [598, 997], "ge": [598, 997], "gt": [598, 997], "implod": [598, 997], "inspect": [598, 696], "is_between": [598, 997], "is_finit": [598, 997], "is_first": [598, 997], "is_in": [598, 997], "is_infinit": [598, 997], "is_nan": [598, 997], "is_not_nan": [598, 997], "is_not_nul": [598, 997], "kurtosi": [598, 997], "le": [598, 997], "log10": [598, 997], "log1p": [598, 997], "mod": 598, "mul": 598, "nan_max": [598, 997], "nan_min": [598, 997], "ne": [598, 997], "ne_miss": [598, 997], "or_": 598, "pct_chang": [598, 997], "pow": [598, 997], "reinterpret": [598, 997], "repeat_bi": 598, "rolling_appli": [598, 997], "rolling_median": [598, 997], "rolling_quantil": [598, 997], "rolling_skew": [598, 997], "rolling_std": [598, 997], "rolling_var": [598, 997], "search_sort": [598, 997], "shrink_dtyp": [598, 997], "sin": [598, 997], "sinh": [598, 997], "sort_bi": 598, "tan": [598, 997], "to_phys": [598, 997], "unique_count": [598, 997], "xor": 598, "expos": 609, "miscellan": 609, "arrowerror": 609, "columnnotfounderror": 609, "invalidoperationerror": 609, "nodataerror": 609, "polarspanicerror": 609, "schemaerror": 609, "schemafieldnotfounderror": 609, "shapeerror": 609, "parametr": 609, "build_info": 609, "get_index_typ": 609, "show_vers": 609, "threadpool_s": 609, "sqlcontext": [609, 1004], "hit": [613, 696], "node": [613, 633, 640, 644, 649, 652, 696], "huge": [616, 696], "saver": [616, 696], "purpos": [623, 696], "influenc": [623, 640, 696], "read_json": [628, 677, 696], "lazygroupbi": [629, 630, 631, 696], "other_lf": [635, 696], "validate_output_schema": [640, 696], "streamabl": [640, 644, 696], "past": [640, 696], "assum": [640, 680, 696], "paramount": [640, 696], "bug": [640, 680, 696], "elig": [640, 696], "invari": [640, 696], "upheld": [640, 696], "prune": [640, 696], "show_plot": [649, 696], "truncate_nod": [649, 696], "figsiz": [649, 659, 696], "gantt": [649, 696], "plot": [649, 659, 696], "groupby_partit": [649, 696], "470": [649, 696], "475": [649, 696], "1964": [649, 696], "from_json": [651, 696], "swap": [652, 696], "output_path": [659, 696], "raw_output": [659, 696], "figur": [659, 696], "ram": [660, 661, 696], "slightli": [660, 661, 696], "my_larger_than_ram_fil": [660, 661, 696], "data_pagesize_limit": [661, 696], "290994": [664, 696], "118034": [664, 696], "433013": [664, 696], "1875": [672, 696], "extern": [675, 696], "lf_other": [675, 696], "afoo": [675, 696], "cfoo": [675, 696], "train_lf": [675, 696], "feature_0": [675, 696], "feature_1": [675, 696], "test_lf": [675, 696], "_train": [675, 696], "feature_0_train": [675, 696], "dataframescan": [677, 696], "output_schema": [677, 696], "opaqu": 680, "idiomat": 680, "my_column": 680, "struct_seri": 680, "lf5": 696, "lf6": 696, "explain": 696, "sink_ipc": 696, "sink_parquet": 696, "with_context": 696, "new_aliased_sr": [701, 997], "append_chunk": [704, 997], "super": [704, 997], "141593": [706, 997], "292432": [707, 997], "549306": [711, 997], "catnamespac": 728, "56789": [730, 807, 905, 997], "901234": [730, 807, 905, 997], "pi": [737, 919, 970, 997], "1232e": [737, 997], "break_point_label": [744, 887, 997], "break_point": [744, 812, 887, 997], "category_label": [744, 887, 997], "breakpoint": [744, 887, 997], "quick": [745, 997, 1005], "series_num": [745, 997], "581139": [745, 997], "series_str": [745, 997], "datetimenamespac": 750, "ser": [754, 755, 786], "replace_time_zon": [754, 755, 786], "kathmandu": [754, 755, 786], "0545": [754, 755, 786], "500m": [766, 768, 776, 783], "500000": 766, "2m": 771, "500000000": 776, "date_minus_1y_2mon": 778, "165": [782, 789], "series_equ": [782, 789, 997], "timestamp_u": 787, "978307200000000000": 787, "978393600000000000": 787, "978480000000000000": 787, "005": [795, 997], "06293300616044681": [795, 997], "65": [795, 997], "8568409950394724": [795, 997], "4000000": [796, 997], "814697265625": [796, 997], "listnamespac": [801, 839, 893, 997], "stringnamespac": [801, 926, 997], "bitmask": [809, 997], "swiftli": [809, 997], "10734580197236529959": [810, 997], "3022416320763508302": [810, 997], "13756996518000038261": [810, 997], "bin_count": [812, 997], "a_count": [812, 997], "fall": [816, 997], "field_2": 864, "n00": 864, "n01": 864, "n02": 864, "2147483648": [869, 997], "iso3166": [870, 997], "tur": [870, 997], "jpn": [870, 997], "nld": [870, 997], "country_lookup": [870, 997], "japan": [870, 997], "t\u00fcrkiy": [870, 997], "netherland": [870, 997], "unrecognis": [870, 997], "unspecifi": [870, 997], "country_nam": [870, 997], "166667": [883, 997], "142857": [883, 997], "peak": [884, 885, 997], "quanil": [887, 997], "nanstd": [895, 997], "858612": [895, 997], "200": [896, 897, 899, 997], "150": [897, 997], "350": [897, 997], "450": [897, 997], "381802": [901, 997], "dev": [902, 997], "frequent": [909, 910, 997], "mutat": [910, 997], "2246e": [919, 970, 997], "6331e16": [970, 997], "lib": [973, 997], "int64arrai": [973, 997], "a_2": [974, 997], "a_3": [974, 997], "s_from_str_repr": [976, 997], "zero_copy_onli": [978, 997], "writabl": [978, 997], "complet": [978, 997], "presenc": [978, 997], "immut": [978, 997], "127": [984, 997], "seriesview": [987, 997], "arraylik": 997, "dtype_if_empti": 997, "position": 997, "scenario": 997, "chunk_length": 997, "cut": 997, "get_chunk": 997, "has_valid": 997, "hist": 997, "is_boolean": 997, "is_float": 997, "is_integ": 997, "is_numer": [997, 1005], "is_sort": 997, "is_tempor": 997, "is_utf8": 997, "new_from_index": 997, "peak_max": 997, "peak_min": 997, "power": 997, "qcut": 997, "set_at_idx": 997, "two_a": 1004, "__enter__": 1004, "__exit__": 1004, "exc_typ": 1004, "baseexcept": 1004, "exc_val": 1004, "exc_tb": 1004, "tracebacktyp": 1004, "guid": 1005, "easi": 1005, "approxim": 1005, "own": 1005, "machin": 1005, "xdist": 1005, "vari": 1005, "hardwar": 1005, "setup": 1005, "numeric_dtyp": 1005, "null_probabililti": 1005, "test_numer": 1005, "col0": 1005, "col4": 1005, "29096": 1005, "485": 1005, "2147483647": 1005, "8257e14": 1005, "7508": 1005, "37338": 1005, "7264": 1005, "321": 1005, "16996": 1005, "121": 1005, "361": 1005, "63204": 1005, "1443e235": 1005, "conform": 1005, "ascii_lett": 1005, "id_char": 1005, "alphabet": 1005, "price": 1005, "min_valu": 1005, "max_valu": 1005, "test_price_calcul": 1005, "a101": 1005, "8nin": 1005, "qhoo": 1005, "714": 1005, "544": 1005, "i0e0": 1005, "0000": 1005, "colz": 1005, "test_miscellan": 1005, "235": 1005, "87": 1005, "186": 1005, "174": 1005, "179": 1005, "213": 1005, "221": 1005, "86": 1005, "255": 1005}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [36, 0, 1, "", "DataType"], [37, 0, 1, "", "Date"], [38, 0, 1, "", "Datetime"], [39, 0, 1, "", "Decimal"], [40, 0, 1, "", "Duration"], [41, 0, 1, "", "Float32"], [42, 0, 1, "", "Float64"], [43, 0, 1, "", "Int16"], [44, 0, 1, "", "Int32"], [45, 0, 1, "", "Int64"], [46, 0, 1, "", "Int8"], [47, 0, 1, "", "List"], [48, 0, 1, "", "Null"], [49, 0, 1, "", "Object"], [1004, 0, 1, "", "SQLContext"], [56, 0, 1, "", "StringCache"], [57, 0, 1, "", "Struct"], [58, 0, 1, "", "Time"], [59, 0, 1, "", "UInt16"], [60, 0, 1, "", "UInt32"], [61, 0, 1, "", "UInt64"], [62, 0, 1, "", "UInt8"], [63, 0, 1, "", "Unknown"], [64, 0, 1, "", "Utf8"], [65, 4, 1, "", "align_frames"], [542, 4, 1, "", "all"], [543, 4, 1, "", "any"], [544, 4, 1, "", "apply"], [545, 4, 1, "", "approx_unique"], [546, 4, 1, "", "arange"], [547, 4, 1, "", "arg_sort_by"], [70, 4, 1, "", "arg_where"], [548, 4, 1, "", "avg"], [71, 4, 1, "", "build_info"], [549, 4, 1, "", "coalesce"], [550, 4, 1, "", "col"], [72, 4, 1, "", "collect_all"], [73, 4, 1, "", "concat"], [551, 4, 1, "", "concat_list"], [552, 4, 1, "", "concat_str"], [553, 4, 1, "", "corr"], [554, 4, 1, "", "count"], [555, 4, 1, "", "cov"], [556, 4, 1, "", "cumfold"], [557, 4, 1, "", "cumreduce"], [558, 4, 1, "", "cumsum"], [559, 4, 1, "", "date"], [74, 4, 1, "", "date_range"], [560, 4, 1, "", "datetime"], [561, 4, 1, "", "duration"], [562, 4, 1, "", "element"], [75, 4, 1, "", "enable_string_cache"], [563, 4, 1, "", "exclude"], [564, 4, 1, "", "first"], [565, 4, 1, "", "fold"], [566, 4, 1, "", "format"], [90, 4, 1, "", "from_arrow"], [91, 4, 1, "", "from_dataframe"], [92, 4, 1, "", "from_dict"], [93, 4, 1, "", "from_dicts"], [567, 4, 1, "", "from_epoch"], [94, 4, 1, "", "from_numpy"], [95, 4, 1, "", "from_pandas"], [96, 4, 1, "", "from_records"], [97, 4, 1, "", "from_repr"], [98, 4, 1, "", "get_index_type"], [568, 4, 1, "", "groups"], [569, 4, 1, "", "head"], [570, 4, 1, "", "implode"], [571, 4, 1, "", "lit"], [572, 4, 1, "", "map"], [573, 4, 1, "", "max"], [574, 4, 1, "", "mean"], [575, 4, 1, "", "median"], [576, 4, 1, "", "min"], [577, 4, 1, "", "n_unique"], [100, 4, 1, "", "ones"], [578, 4, 1, "", "quantile"], [101, 4, 1, "", "read_avro"], [102, 4, 1, "", "read_csv"], [103, 4, 1, "", "read_csv_batched"], [104, 4, 1, "", "read_database"], [105, 4, 1, "", "read_delta"], [106, 4, 1, "", "read_excel"], [107, 4, 1, "", "read_ipc"], [108, 4, 1, "", "read_ipc_schema"], [109, 4, 1, "", "read_json"], [110, 4, 1, "", "read_ndjson"], [111, 4, 1, "", "read_parquet"], [112, 4, 1, "", "read_parquet_schema"], [579, 4, 1, "", "reduce"], [580, 4, 1, "", "repeat"], [581, 4, 1, "", "rolling_corr"], [582, 4, 1, "", "rolling_cov"], [113, 4, 1, "", "scan_csv"], [114, 4, 1, "", "scan_delta"], [115, 4, 1, "", "scan_ipc"], [116, 4, 1, "", "scan_ndjson"], [117, 4, 1, "", "scan_parquet"], [118, 4, 1, "", "scan_pyarrow_dataset"], [583, 4, 1, "", "select"], [119, 4, 1, "", "show_versions"], [584, 4, 1, "", "std"], [585, 4, 1, "", "struct"], [586, 4, 1, "", "sum"], [587, 4, 1, "", "tail"], [129, 4, 1, "", "threadpool_size"], [588, 4, 1, "", "time"], [130, 4, 1, "", "time_range"], [589, 4, 1, "", "var"], [590, 4, 1, "", "when"], [131, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "restore_defaults"], [9, 1, 1, "", "save"], [10, 1, 1, "", "set_ascii_tables"], [11, 1, 1, "", "set_fmt_float"], [12, 1, 1, "", "set_fmt_str_lengths"], [13, 1, 1, "", "set_streaming_chunk_size"], [14, 1, 1, "", "set_tbl_cell_alignment"], [15, 1, 1, "", "set_tbl_cols"], [16, 1, 1, "", "set_tbl_column_data_type_inline"], [17, 1, 1, "", "set_tbl_dataframe_shape_below"], [18, 1, 1, "", "set_tbl_formatting"], [19, 1, 1, "", "set_tbl_hide_column_data_types"], [20, 1, 1, "", "set_tbl_hide_column_names"], [21, 1, 1, "", "set_tbl_hide_dataframe_shape"], [22, 1, 1, "", "set_tbl_hide_dtype_separator"], [23, 1, 1, "", "set_tbl_rows"], [24, 1, 1, "", "set_tbl_width_chars"], [25, 1, 1, "", "set_verbose"], [26, 1, 1, "", "state"]], "polars.DataFrame": [[134, 1, 1, "", "__dataframe__"], [135, 1, 1, "", "apply"], [136, 1, 1, "", "bottom_k"], [137, 1, 1, "", "clear"], [138, 1, 1, "", "clone"], [139, 2, 1, "", "columns"], [140, 1, 1, "", "corr"], [141, 1, 1, "", "describe"], [142, 1, 1, "", "drop"], [143, 1, 1, "", "drop_in_place"], [144, 1, 1, "", "drop_nulls"], [145, 2, 1, "", "dtypes"], [146, 1, 1, "", "estimated_size"], [147, 1, 1, "", "explode"], [148, 1, 1, "", "extend"], [149, 1, 1, "", "fill_nan"], [150, 1, 1, "", "fill_null"], [151, 1, 1, "", "filter"], [152, 1, 1, "", "find_idx_by_name"], [153, 1, 1, "", "fold"], [154, 1, 1, "", "frame_equal"], [155, 1, 1, "", "get_column"], [156, 1, 1, "", "get_columns"], [157, 1, 1, "", "glimpse"], [158, 1, 1, "", "groupby"], [159, 1, 1, "", "groupby_dynamic"], [160, 1, 1, "", "groupby_rolling"], [161, 1, 1, "", "hash_rows"], [162, 1, 1, "", "head"], [163, 2, 1, "", "height"], [164, 1, 1, "", "hstack"], [165, 1, 1, "", "insert_at_idx"], [166, 1, 1, "", "interpolate"], [167, 1, 1, "", "is_duplicated"], [168, 1, 1, "", "is_empty"], [169, 1, 1, "", "is_unique"], [170, 1, 1, "", "item"], [171, 1, 1, "", "iter_rows"], [172, 1, 1, "", "iter_slices"], [173, 1, 1, "", "join"], [174, 1, 1, "", "join_asof"], [175, 1, 1, "", "lazy"], [176, 1, 1, "", "limit"], [177, 1, 1, "", "max"], [178, 1, 1, "", "mean"], [179, 1, 1, "", "median"], [180, 1, 1, "", "melt"], [181, 1, 1, "", "merge_sorted"], [182, 1, 1, "", "min"], [183, 1, 1, "", "n_chunks"], [184, 1, 1, "", "n_unique"], [185, 1, 1, "", "null_count"], [186, 1, 1, "", "partition_by"], [187, 1, 1, "", "pipe"], [188, 1, 1, "", "pivot"], [189, 1, 1, "", "product"], [190, 1, 1, "", "quantile"], [191, 1, 1, "", "rechunk"], [192, 1, 1, "", "rename"], [193, 1, 1, "", "replace"], [194, 1, 1, "", "replace_at_idx"], [195, 1, 1, "", "reverse"], [196, 1, 1, "", "row"], [197, 1, 1, "", "rows"], [198, 1, 1, "", "sample"], [199, 2, 1, "", "schema"], [200, 1, 1, "", "select"], [201, 1, 1, "", "set_sorted"], [202, 2, 1, "", "shape"], [203, 1, 1, "", "shift"], [204, 1, 1, "", "shift_and_fill"], [205, 1, 1, "", "shrink_to_fit"], [206, 1, 1, "", "slice"], [207, 1, 1, "", "sort"], [208, 1, 1, "", "std"], [209, 1, 1, "", "sum"], [210, 1, 1, "", "tail"], [211, 1, 1, "", "take_every"], [212, 1, 1, "", "to_arrow"], [213, 1, 1, "", "to_dict"], [214, 1, 1, "", "to_dicts"], [215, 1, 1, "", "to_dummies"], [216, 1, 1, "", "to_init_repr"], [217, 1, 1, "", "to_numpy"], [218, 1, 1, "", "to_pandas"], [219, 1, 1, "", "to_series"], [220, 1, 1, "", "to_struct"], [221, 1, 1, "", "top_k"], [222, 1, 1, "", "transpose"], [223, 1, 1, "", "unique"], [224, 1, 1, "", "unnest"], [225, 1, 1, "", "unstack"], [226, 1, 1, "", "update"], [227, 1, 1, "", "upsample"], [228, 1, 1, "", "var"], [229, 1, 1, "", "vstack"], [230, 2, 1, "", "width"], [231, 1, 1, "", "with_columns"], [232, 1, 1, "", "with_row_count"], [27, 1, 1, "", "write_avro"], [28, 1, 1, "", "write_csv"], [29, 1, 1, "", "write_database"], [30, 1, 1, "", "write_delta"], [31, 1, 1, "", "write_excel"], [32, 1, 1, "", "write_ipc"], [33, 1, 1, "", "write_json"], [34, 1, 1, "", "write_ndjson"], [35, 1, 1, "", "write_parquet"]], "polars.DataType": [[36, 1, 1, "", "__init__"]], "polars.Date": [[37, 1, 1, "", "__init__"]], "polars.Datetime": [[38, 1, 1, "", "__init__"]], "polars.Decimal": [[39, 1, 1, "", "__init__"]], "polars.Duration": [[40, 1, 1, "", "__init__"]], "polars.Expr": [[260, 1, 1, "", "abs"], [261, 1, 1, "", "add"], [262, 1, 1, "", "agg_groups"], [263, 1, 1, "", "alias"], [264, 1, 1, "", "all"], [265, 1, 1, "", "and_"], [266, 1, 1, "", "any"], [267, 1, 1, "", "append"], [268, 1, 1, "", "apply"], [269, 1, 1, "", "approx_unique"], [270, 1, 1, "", "arccos"], [271, 1, 1, "", "arccosh"], [272, 1, 1, "", "arcsin"], [273, 1, 1, "", "arcsinh"], [274, 1, 1, "", "arctan"], [275, 1, 1, "", "arctanh"], [276, 1, 1, "", "arg_max"], [277, 1, 1, "", "arg_min"], [278, 1, 1, "", "arg_sort"], [279, 1, 1, "", "arg_true"], [280, 1, 1, "", "arg_unique"], [285, 1, 1, "", "backward_fill"], [291, 1, 1, "", "bottom_k"], [292, 1, 1, "", "cache"], [293, 1, 1, "", "cast"], [295, 1, 1, "", "ceil"], [296, 1, 1, "", "clip"], [297, 1, 1, "", "clip_max"], [298, 1, 1, "", "clip_min"], [299, 1, 1, "", "cos"], [300, 1, 1, "", "cosh"], [301, 1, 1, "", "count"], [302, 1, 1, "", "cumcount"], [303, 1, 1, "", "cummax"], [304, 1, 1, "", "cummin"], [305, 1, 1, "", "cumprod"], [306, 1, 1, "", "cumsum"], [307, 1, 1, "", "cumulative_eval"], [308, 1, 1, "", "diff"], [309, 1, 1, "", "dot"], [310, 1, 1, "", "drop_nans"], [311, 1, 1, "", "drop_nulls"], [351, 1, 1, "", "entropy"], [352, 1, 1, "", "eq"], [353, 1, 1, "", "ewm_mean"], [354, 1, 1, "", "ewm_std"], [355, 1, 1, "", "ewm_var"], [356, 1, 1, "", "exclude"], [357, 1, 1, "", "exp"], [358, 1, 1, "", "explode"], [359, 1, 1, "", "extend_constant"], [360, 1, 1, "", "fill_nan"], [361, 1, 1, "", "fill_null"], [362, 1, 1, "", "filter"], [363, 1, 1, "", "first"], [364, 1, 1, "", "flatten"], [365, 1, 1, "", "floor"], [366, 1, 1, "", "floordiv"], [367, 1, 1, "", "forward_fill"], [368, 1, 1, "", "ge"], [369, 1, 1, "", "gt"], [370, 1, 1, "", "hash"], [371, 1, 1, "", "head"], [372, 1, 1, "", "implode"], [373, 1, 1, "", "inspect"], [374, 1, 1, "", "interpolate"], [375, 1, 1, "", "is_between"], [376, 1, 1, "", "is_duplicated"], [377, 1, 1, "", "is_finite"], [378, 1, 1, "", "is_first"], [379, 1, 1, "", "is_in"], [380, 1, 1, "", "is_infinite"], [381, 1, 1, "", "is_nan"], [382, 1, 1, "", "is_not"], [383, 1, 1, "", "is_not_nan"], [384, 1, 1, "", "is_not_null"], [385, 1, 1, "", "is_null"], [386, 1, 1, "", "is_unique"], [387, 1, 1, "", "keep_name"], [388, 1, 1, "", "kurtosis"], [389, 1, 1, "", "last"], [390, 1, 1, "", "le"], [391, 1, 1, "", "len"], [392, 1, 1, "", "limit"], [419, 1, 1, "", "log"], [420, 1, 1, "", "log10"], [421, 1, 1, "", "log1p"], [422, 1, 1, "", "lower_bound"], [423, 1, 1, "", "lt"], [424, 1, 1, "", "map"], [425, 1, 1, "", "map_alias"], [426, 1, 1, "", "map_dict"], [427, 1, 1, "", "max"], [428, 1, 1, "", "mean"], [429, 1, 1, "", "median"], [438, 1, 1, "", "min"], [439, 1, 1, "", "mod"], [440, 1, 1, "", "mode"], [441, 1, 1, "", "mul"], [442, 1, 1, "", "n_unique"], [443, 1, 1, "", "nan_max"], [444, 1, 1, "", "nan_min"], [445, 1, 1, "", "ne"], [446, 1, 1, "", "null_count"], [447, 1, 1, "", "or_"], [448, 1, 1, "", "over"], [449, 1, 1, "", "pct_change"], [450, 1, 1, "", "pipe"], [451, 1, 1, "", "pow"], [452, 1, 1, "", "prefix"], [453, 1, 1, "", "product"], [454, 1, 1, "", "quantile"], [455, 1, 1, "", "rank"], [456, 1, 1, "", "rechunk"], [457, 1, 1, "", "reinterpret"], [458, 1, 1, "", "repeat_by"], [459, 1, 1, "", "reshape"], [460, 1, 1, "", "reverse"], [461, 1, 1, "", "rolling_apply"], [462, 1, 1, "", "rolling_max"], [463, 1, 1, "", "rolling_mean"], [464, 1, 1, "", "rolling_median"], [465, 1, 1, "", "rolling_min"], [466, 1, 1, "", "rolling_quantile"], [467, 1, 1, "", "rolling_skew"], [468, 1, 1, "", "rolling_std"], [469, 1, 1, "", "rolling_sum"], [470, 1, 1, "", "rolling_var"], [471, 1, 1, "", "round"], [472, 1, 1, "", "sample"], [473, 1, 1, "", "search_sorted"], [474, 1, 1, "", "set_sorted"], [475, 1, 1, "", "shift"], [476, 1, 1, "", "shift_and_fill"], [477, 1, 1, "", "shrink_dtype"], [478, 1, 1, "", "shuffle"], [479, 1, 1, "", "sign"], [480, 1, 1, "", "sin"], [481, 1, 1, "", "sinh"], [482, 1, 1, "", "skew"], [483, 1, 1, "", "slice"], [484, 1, 1, "", "sort"], [485, 1, 1, "", "sort_by"], [486, 1, 1, "", "sqrt"], [487, 1, 1, "", "std"], [524, 1, 1, "", "sub"], [525, 1, 1, "", "suffix"], [526, 1, 1, "", "sum"], [527, 1, 1, "", "tail"], [528, 1, 1, "", "take"], [529, 1, 1, "", "take_every"], [530, 1, 1, "", "tan"], [531, 1, 1, "", "tanh"], [532, 1, 1, "", "to_physical"], [533, 1, 1, "", "top_k"], [534, 1, 1, "", "truediv"], [535, 1, 1, "", "unique"], [536, 1, 1, "", "unique_counts"], [537, 1, 1, "", "upper_bound"], [538, 1, 1, "", "value_counts"], [539, 1, 1, "", "var"], [540, 1, 1, "", "where"], [541, 1, 1, "", "xor"]], "polars.Expr.arr": [[281, 1, 1, "", "max"], [282, 1, 1, "", "min"], [283, 1, 1, "", "sum"], [284, 1, 1, "", "unique"]], "polars.Expr.bin": [[286, 1, 1, "", "contains"], [287, 1, 1, "", "decode"], [288, 1, 1, "", "encode"], [289, 1, 1, "", "ends_with"], [290, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[294, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[312, 1, 1, "", "cast_time_unit"], [313, 1, 1, "", "combine"], [314, 1, 1, "", "convert_time_zone"], [315, 1, 1, "", "date"], [316, 1, 1, "", "datetime"], [317, 1, 1, "", "day"], [318, 1, 1, "", "days"], [319, 1, 1, "", "epoch"], [320, 1, 1, "", "hour"], [321, 1, 1, "", "hours"], [322, 1, 1, "", "is_leap_year"], [323, 1, 1, "", "iso_year"], [324, 1, 1, "", "microsecond"], [325, 1, 1, "", "microseconds"], [326, 1, 1, "", "millisecond"], [327, 1, 1, "", "milliseconds"], [328, 1, 1, "", "minute"], [329, 1, 1, "", "minutes"], [330, 1, 1, "", "month"], [331, 1, 1, "", "month_end"], [332, 1, 1, "", "month_start"], [333, 1, 1, "", "nanosecond"], [334, 1, 1, "", "nanoseconds"], [335, 1, 1, "", "offset_by"], [336, 1, 1, "", "ordinal_day"], [337, 1, 1, "", "quarter"], [338, 1, 1, "", "replace_time_zone"], [339, 1, 1, "", "round"], [340, 1, 1, "", "second"], [341, 1, 1, "", "seconds"], [342, 1, 1, "", "strftime"], [343, 1, 1, "", "time"], [344, 1, 1, "", "timestamp"], [345, 1, 1, "", "to_string"], [346, 1, 1, "", "truncate"], [347, 1, 1, "", "week"], [348, 1, 1, "", "weekday"], [349, 1, 1, "", "with_time_unit"], [350, 1, 1, "", "year"]], "polars.Expr.list": [[393, 1, 1, "", "arg_max"], [394, 1, 1, "", "arg_min"], [395, 1, 1, "", "concat"], [396, 1, 1, "", "contains"], [397, 1, 1, "", "count_match"], [398, 1, 1, "", "diff"], [399, 1, 1, "", "eval"], [400, 1, 1, "", "explode"], [401, 1, 1, "", "first"], [402, 1, 1, "", "get"], [403, 1, 1, "", "head"], [404, 1, 1, "", "join"], [405, 1, 1, "", "last"], [406, 1, 1, "", "lengths"], [407, 1, 1, "", "max"], [408, 1, 1, "", "mean"], [409, 1, 1, "", "min"], [410, 1, 1, "", "reverse"], [411, 1, 1, "", "shift"], [412, 1, 1, "", "slice"], [413, 1, 1, "", "sort"], [414, 1, 1, "", "sum"], [415, 1, 1, "", "tail"], [416, 1, 1, "", "take"], [417, 1, 1, "", "to_struct"], [418, 1, 1, "", "unique"]], "polars.Expr.meta": [[430, 1, 1, "", "eq"], [431, 1, 1, "", "has_multiple_outputs"], [432, 1, 1, "", "is_regex_projection"], [433, 1, 1, "", "ne"], [434, 1, 1, "", "output_name"], [435, 1, 1, "", "pop"], [436, 1, 1, "", "root_names"], [437, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[488, 1, 1, "", "concat"], [489, 1, 1, "", "contains"], [490, 1, 1, "", "count_match"], [491, 1, 1, "", "decode"], [492, 1, 1, "", "encode"], [493, 1, 1, "", "ends_with"], [494, 1, 1, "", "explode"], [495, 1, 1, "", "extract"], [496, 1, 1, "", "extract_all"], [497, 1, 1, "", "json_extract"], [498, 1, 1, "", "json_path_match"], [499, 1, 1, "", "lengths"], [500, 1, 1, "", "ljust"], [501, 1, 1, "", "lstrip"], [502, 1, 1, "", "n_chars"], [503, 1, 1, "", "parse_int"], [504, 1, 1, "", "replace"], [505, 1, 1, "", "replace_all"], [506, 1, 1, "", "rjust"], [507, 1, 1, "", "rstrip"], [508, 1, 1, "", "slice"], [509, 1, 1, "", "split"], [510, 1, 1, "", "split_exact"], [511, 1, 1, "", "splitn"], [512, 1, 1, "", "starts_with"], [513, 1, 1, "", "strip"], [514, 1, 1, "", "strptime"], [515, 1, 1, "", "to_date"], [516, 1, 1, "", "to_datetime"], [517, 1, 1, "", "to_decimal"], [518, 1, 1, "", "to_lowercase"], [519, 1, 1, "", "to_time"], [520, 1, 1, "", "to_uppercase"], [521, 1, 1, "", "zfill"]], "polars.Expr.struct": [[522, 1, 1, "", "field"], [523, 1, 1, "", "rename_fields"]], "polars.Float32": [[41, 1, 1, "", "__init__"]], "polars.Float64": [[42, 1, 1, "", "__init__"]], "polars.Int16": [[43, 1, 1, "", "__init__"]], "polars.Int32": [[44, 1, 1, "", "__init__"]], "polars.Int64": [[45, 1, 1, "", "__init__"]], "polars.Int8": [[46, 1, 1, "", "__init__"]], "polars.LazyFrame": [[612, 1, 1, "", "bottom_k"], [613, 1, 1, "", "cache"], [614, 1, 1, "", "clear"], [615, 1, 1, "", "clone"], [616, 1, 1, "", "collect"], [617, 2, 1, "", "columns"], [618, 1, 1, "", "drop"], [619, 1, 1, "", "drop_nulls"], [620, 2, 1, "", "dtypes"], [621, 1, 1, "", "explain"], [622, 1, 1, "", "explode"], [623, 1, 1, "", "fetch"], [624, 1, 1, "", "fill_nan"], [625, 1, 1, "", "fill_null"], [626, 1, 1, "", "filter"], [627, 1, 1, "", "first"], [628, 1, 1, "", "from_json"], [629, 1, 1, "", "groupby"], [630, 1, 1, "", "groupby_dynamic"], [631, 1, 1, "", "groupby_rolling"], [632, 1, 1, "", "head"], [633, 1, 1, "", "inspect"], [634, 1, 1, "", "interpolate"], [635, 1, 1, "", "join"], [636, 1, 1, "", "join_asof"], [637, 1, 1, "", "last"], [638, 1, 1, "", "lazy"], [639, 1, 1, "", "limit"], [640, 1, 1, "", "map"], [641, 1, 1, "", "max"], [642, 1, 1, "", "mean"], [643, 1, 1, "", "median"], [644, 1, 1, "", "melt"], [645, 1, 1, "", "merge_sorted"], [646, 1, 1, "", "min"], [647, 1, 1, "", "null_count"], [648, 1, 1, "", "pipe"], [649, 1, 1, "", "profile"], [650, 1, 1, "", "quantile"], [651, 1, 1, "", "read_json"], [652, 1, 1, "", "rename"], [653, 1, 1, "", "reverse"], [654, 2, 1, "", "schema"], [655, 1, 1, "", "select"], [656, 1, 1, "", "set_sorted"], [657, 1, 1, "", "shift"], [658, 1, 1, "", "shift_and_fill"], [659, 1, 1, "", "show_graph"], [660, 1, 1, "", "sink_ipc"], [661, 1, 1, "", "sink_parquet"], [662, 1, 1, "", "slice"], [663, 1, 1, "", "sort"], [664, 1, 1, "", "std"], [665, 1, 1, "", "sum"], [666, 1, 1, "", "tail"], [667, 1, 1, "", "take_every"], [668, 1, 1, "", "top_k"], [669, 1, 1, "", "unique"], [670, 1, 1, "", "unnest"], [671, 1, 1, "", "update"], [672, 1, 1, "", "var"], [673, 2, 1, "", "width"], [674, 1, 1, "", "with_columns"], [675, 1, 1, "", "with_context"], [676, 1, 1, "", "with_row_count"], [677, 1, 1, "", "write_json"]], "polars.List": [[47, 1, 1, "", "__init__"]], "polars.Null": [[48, 1, 1, "", "__init__"]], "polars.Object": [[49, 1, 1, "", "__init__"]], "polars.SQLContext": [[1004, 1, 1, "", "__enter__"], [1004, 1, 1, "", "__exit__"], [1004, 1, 1, "", "__init__"], [50, 1, 1, "", "execute"], [51, 1, 1, "", "register"], [52, 1, 1, "", "register_globals"], [53, 1, 1, "", "register_many"], [54, 1, 1, "", "tables"], [55, 1, 1, "", "unregister"]], "polars.Series": [[700, 1, 1, "", "abs"], [701, 1, 1, "", "alias"], [702, 1, 1, "", "all"], [703, 1, 1, "", "any"], [704, 1, 1, "", "append"], [705, 1, 1, "", "apply"], [706, 1, 1, "", "arccos"], [707, 1, 1, "", "arccosh"], [708, 1, 1, "", "arcsin"], [709, 1, 1, "", "arcsinh"], [710, 1, 1, "", "arctan"], [711, 1, 1, "", "arctanh"], [712, 1, 1, "", "arg_max"], [713, 1, 1, "", "arg_min"], [714, 1, 1, "", "arg_sort"], [715, 1, 1, "", "arg_true"], [716, 1, 1, "", "arg_unique"], [726, 1, 1, "", "bottom_k"], [727, 1, 1, "", "cast"], [728, 3, 1, "", "cat"], [730, 1, 1, "", "ceil"], [731, 1, 1, "", "chunk_lengths"], [732, 1, 1, "", "clear"], [733, 1, 1, "", "clip"], [734, 1, 1, "", "clip_max"], [735, 1, 1, "", "clip_min"], [736, 1, 1, "", "clone"], [737, 1, 1, "", "cos"], [738, 1, 1, "", "cosh"], [739, 1, 1, "", "cummax"], [740, 1, 1, "", "cummin"], [741, 1, 1, "", "cumprod"], [742, 1, 1, "", "cumsum"], [743, 1, 1, "", "cumulative_eval"], [744, 1, 1, "", "cut"], [745, 1, 1, "", "describe"], [746, 1, 1, "", "diff"], [747, 1, 1, "", "dot"], [748, 1, 1, "", "drop_nans"], [749, 1, 1, "", "drop_nulls"], [750, 3, 1, "", "dt"], [794, 3, 1, "", "dtype"], [795, 1, 1, "", "entropy"], [796, 1, 1, "", "estimated_size"], [797, 1, 1, "", "ewm_mean"], [798, 1, 1, "", "ewm_std"], [799, 1, 1, "", "ewm_var"], [800, 1, 1, "", "exp"], [801, 1, 1, "", "explode"], [802, 1, 1, "", "extend_constant"], [803, 1, 1, "", "fill_nan"], [804, 1, 1, "", "fill_null"], [805, 1, 1, "", "filter"], [806, 3, 1, "", "flags"], [807, 1, 1, "", "floor"], [808, 1, 1, "", "get_chunks"], [809, 1, 1, "", "has_validity"], [810, 1, 1, "", "hash"], [811, 1, 1, "", "head"], [812, 1, 1, "", "hist"], [813, 1, 1, "", "implode"], [814, 3, 1, "", "inner_dtype"], [815, 1, 1, "", "interpolate"], [816, 1, 1, "", "is_between"], [817, 1, 1, "", "is_boolean"], [818, 1, 1, "", "is_duplicated"], [819, 1, 1, "", "is_empty"], [820, 1, 1, "", "is_finite"], [821, 1, 1, "", "is_first"], [822, 1, 1, "", "is_float"], [823, 1, 1, "", "is_in"], [824, 1, 1, "", "is_infinite"], [825, 1, 1, "", "is_integer"], [826, 1, 1, "", "is_nan"], [827, 1, 1, "", "is_not_nan"], [828, 1, 1, "", "is_not_null"], [829, 1, 1, "", "is_null"], [830, 1, 1, "", "is_numeric"], [831, 1, 1, "", "is_sorted"], [832, 1, 1, "", "is_temporal"], [833, 1, 1, "", "is_unique"], [834, 1, 1, "", "is_utf8"], [835, 1, 1, "", "item"], [836, 1, 1, "", "kurtosis"], [837, 1, 1, "", "len"], [838, 1, 1, "", "limit"], [839, 3, 1, "", "list"], [866, 1, 1, "", "log"], [867, 1, 1, "", "log10"], [868, 1, 1, "", "log1p"], [869, 1, 1, "", "lower_bound"], [870, 1, 1, "", "map_dict"], [871, 1, 1, "", "max"], [872, 1, 1, "", "mean"], [873, 1, 1, "", "median"], [874, 1, 1, "", "min"], [875, 1, 1, "", "mode"], [876, 1, 1, "", "n_chunks"], [877, 1, 1, "", "n_unique"], [878, 3, 1, "", "name"], [879, 1, 1, "", "nan_max"], [880, 1, 1, "", "nan_min"], [881, 1, 1, "", "new_from_index"], [882, 1, 1, "", "null_count"], [883, 1, 1, "", "pct_change"], [884, 1, 1, "", "peak_max"], [885, 1, 1, "", "peak_min"], [886, 1, 1, "", "product"], [887, 1, 1, "", "qcut"], [888, 1, 1, "", "quantile"], [889, 1, 1, "", "rank"], [890, 1, 1, "", "rechunk"], [891, 1, 1, "", "reinterpret"], [892, 1, 1, "", "rename"], [893, 1, 1, "", "reshape"], [894, 1, 1, "", "reverse"], [895, 1, 1, "", "rolling_apply"], [896, 1, 1, "", "rolling_max"], [897, 1, 1, "", "rolling_mean"], [898, 1, 1, "", "rolling_median"], [899, 1, 1, "", "rolling_min"], [900, 1, 1, "", "rolling_quantile"], [901, 1, 1, "", "rolling_skew"], [902, 1, 1, "", "rolling_std"], [903, 1, 1, "", "rolling_sum"], [904, 1, 1, "", "rolling_var"], [905, 1, 1, "", "round"], [906, 1, 1, "", "sample"], [907, 1, 1, "", "search_sorted"], [908, 1, 1, "", "series_equal"], [909, 1, 1, "", "set"], [910, 1, 1, "", "set_at_idx"], [911, 1, 1, "", "set_sorted"], [912, 3, 1, "", "shape"], [913, 1, 1, "", "shift"], [914, 1, 1, "", "shift_and_fill"], [915, 1, 1, "", "shrink_dtype"], [916, 1, 1, "", "shrink_to_fit"], [917, 1, 1, "", "shuffle"], [918, 1, 1, "", "sign"], [919, 1, 1, "", "sin"], [920, 1, 1, "", "sinh"], [921, 1, 1, "", "skew"], [922, 1, 1, "", "slice"], [923, 1, 1, "", "sort"], [924, 1, 1, "", "sqrt"], [925, 1, 1, "", "std"], [926, 3, 1, "", "str"], [966, 1, 1, "", "sum"], [967, 1, 1, "", "tail"], [968, 1, 1, "", "take"], [969, 1, 1, "", "take_every"], [970, 1, 1, "", "tan"], [971, 1, 1, "", "tanh"], [972, 3, 1, "", "time_unit"], [973, 1, 1, "", "to_arrow"], [974, 1, 1, "", "to_dummies"], [975, 1, 1, "", "to_frame"], [976, 1, 1, "", "to_init_repr"], [977, 1, 1, "", "to_list"], [978, 1, 1, "", "to_numpy"], [979, 1, 1, "", "to_pandas"], [980, 1, 1, "", "to_physical"], [981, 1, 1, "", "top_k"], [982, 1, 1, "", "unique"], [983, 1, 1, "", "unique_counts"], [984, 1, 1, "", "upper_bound"], [985, 1, 1, "", "value_counts"], [986, 1, 1, "", "var"], [987, 1, 1, "", "view"], [988, 1, 1, "", "zip_with"]], "polars.Series.arr": [[717, 1, 1, "", "max"], [718, 1, 1, "", "min"], [719, 1, 1, "", "sum"], [720, 1, 1, "", "unique"]], "polars.Series.bin": [[721, 1, 1, "", "contains"], [722, 1, 1, "", "decode"], [723, 1, 1, "", "encode"], [724, 1, 1, "", "ends_with"], [725, 1, 1, "", "starts_with"]], "polars.Series.cat": [[729, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[751, 1, 1, "", "cast_time_unit"], [752, 1, 1, "", "combine"], [753, 1, 1, "", "convert_time_zone"], [754, 1, 1, "", "date"], [755, 1, 1, "", "datetime"], [756, 1, 1, "", "day"], [757, 1, 1, "", "days"], [758, 1, 1, "", "epoch"], [759, 1, 1, "", "hour"], [760, 1, 1, "", "hours"], [761, 1, 1, "", "is_leap_year"], [762, 1, 1, "", "iso_year"], [763, 1, 1, "", "max"], [764, 1, 1, "", "mean"], [765, 1, 1, "", "median"], [766, 1, 1, "", "microsecond"], [767, 1, 1, "", "microseconds"], [768, 1, 1, "", "millisecond"], [769, 1, 1, "", "milliseconds"], [770, 1, 1, "", "min"], [771, 1, 1, "", "minute"], [772, 1, 1, "", "minutes"], [773, 1, 1, "", "month"], [774, 1, 1, "", "month_end"], [775, 1, 1, "", "month_start"], [776, 1, 1, "", "nanosecond"], [777, 1, 1, "", "nanoseconds"], [778, 1, 1, "", "offset_by"], [779, 1, 1, "", "ordinal_day"], [780, 1, 1, "", "quarter"], [781, 1, 1, "", "replace_time_zone"], [782, 1, 1, "", "round"], [783, 1, 1, "", "second"], [784, 1, 1, "", "seconds"], [785, 1, 1, "", "strftime"], [786, 1, 1, "", "time"], [787, 1, 1, "", "timestamp"], [788, 1, 1, "", "to_string"], [789, 1, 1, "", "truncate"], [790, 1, 1, "", "week"], [791, 1, 1, "", "weekday"], [792, 1, 1, "", "with_time_unit"], [793, 1, 1, "", "year"]], "polars.Series.list": [[840, 1, 1, "", "arg_max"], [841, 1, 1, "", "arg_min"], [842, 1, 1, "", "concat"], [843, 1, 1, "", "contains"], [844, 1, 1, "", "count_match"], [845, 1, 1, "", "diff"], [846, 1, 1, "", "eval"], [847, 1, 1, "", "explode"], [848, 1, 1, "", "first"], [849, 1, 1, "", "get"], [850, 1, 1, "", "head"], [851, 1, 1, "", "join"], [852, 1, 1, "", "last"], [853, 1, 1, "", "lengths"], [854, 1, 1, "", "max"], [855, 1, 1, "", "mean"], [856, 1, 1, "", "min"], [857, 1, 1, "", "reverse"], [858, 1, 1, "", "shift"], [859, 1, 1, "", "slice"], [860, 1, 1, "", "sort"], [861, 1, 1, "", "sum"], [862, 1, 1, "", "tail"], [863, 1, 1, "", "take"], [864, 1, 1, "", "to_struct"], [865, 1, 1, "", "unique"]], "polars.Series.str": [[927, 1, 1, "", "concat"], [928, 1, 1, "", "contains"], [929, 1, 1, "", "count_match"], [930, 1, 1, "", "decode"], [931, 1, 1, "", "encode"], [932, 1, 1, "", "ends_with"], [933, 1, 1, "", "explode"], [934, 1, 1, "", "extract"], [935, 1, 1, "", "extract_all"], [936, 1, 1, "", "json_extract"], [937, 1, 1, "", "json_path_match"], [938, 1, 1, "", "lengths"], [939, 1, 1, "", "ljust"], [940, 1, 1, "", "lstrip"], [941, 1, 1, "", "n_chars"], [942, 1, 1, "", "parse_int"], [943, 1, 1, "", "replace"], [944, 1, 1, "", "replace_all"], [945, 1, 1, "", "rjust"], [946, 1, 1, "", "rstrip"], [947, 1, 1, "", "slice"], [948, 1, 1, "", "split"], [949, 1, 1, "", "split_exact"], [950, 1, 1, "", "splitn"], [951, 1, 1, "", "starts_with"], [952, 1, 1, "", "strip"], [953, 1, 1, "", "strptime"], [954, 1, 1, "", "to_date"], [955, 1, 1, "", "to_datetime"], [956, 1, 1, "", "to_decimal"], [957, 1, 1, "", "to_lowercase"], [958, 1, 1, "", "to_time"], [959, 1, 1, "", "to_uppercase"], [960, 1, 1, "", "zfill"]], "polars.Series.struct": [[961, 1, 1, "", "field"], [962, 3, 1, "", "fields"], [963, 1, 1, "", "rename_fields"], [964, 3, 1, "", "schema"], [965, 1, 1, "", "unnest"]], "polars.StringCache": [[56, 1, 1, "", "__init__"]], "polars.Struct": [[57, 1, 1, "", "__init__"]], "polars.Time": [[58, 1, 1, "", "__init__"]], "polars.UInt16": [[59, 1, 1, "", "__init__"]], "polars.UInt32": [[60, 1, 1, "", "__init__"]], "polars.UInt64": [[61, 1, 1, "", "__init__"]], "polars.UInt8": [[62, 1, 1, "", "__init__"]], "polars.Unknown": [[63, 1, 1, "", "__init__"]], "polars.Utf8": [[64, 1, 1, "", "__init__"]], "polars.api": [[66, 4, 1, "", "register_dataframe_namespace"], [67, 4, 1, "", "register_expr_namespace"], [68, 4, 1, "", "register_lazyframe_namespace"], [69, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[233, 1, 1, "", "__iter__"], [234, 1, 1, "", "agg"], [235, 1, 1, "", "all"], [236, 1, 1, "", "apply"], [237, 1, 1, "", "count"], [238, 1, 1, "", "first"], [239, 1, 1, "", "head"], [240, 1, 1, "", "last"], [241, 1, 1, "", "max"], [242, 1, 1, "", "mean"], [243, 1, 1, "", "median"], [244, 1, 1, "", "min"], [245, 1, 1, "", "n_unique"], [246, 1, 1, "", "quantile"], [247, 1, 1, "", "sum"], [248, 1, 1, "", "tail"]], "polars.exceptions": [[76, 5, 1, "", "ArrowError"], [77, 5, 1, "", "ColumnNotFoundError"], [78, 5, 1, "", "ComputeError"], [79, 5, 1, "", "DuplicateError"], [80, 5, 1, "", "InvalidOperationError"], [81, 5, 1, "", "NoDataError"], [82, 5, 1, "", "NoRowsReturnedError"], [83, 5, 1, "", "PolarsPanicError"], [84, 5, 1, "", "RowsError"], [85, 5, 1, "", "SchemaError"], [86, 5, 1, "", "SchemaFieldNotFoundError"], [87, 5, 1, "", "ShapeError"], [88, 5, 1, "", "StructFieldNotFoundError"], [89, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[99, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[678, 1, 1, "", "agg"], [679, 1, 1, "", "all"], [680, 1, 1, "", "apply"], [681, 1, 1, "", "count"], [682, 1, 1, "", "first"], [683, 1, 1, "", "head"], [684, 1, 1, "", "last"], [685, 1, 1, "", "max"], [686, 1, 1, "", "mean"], [687, 1, 1, "", "median"], [688, 1, 1, "", "min"], [689, 1, 1, "", "n_unique"], [690, 1, 1, "", "quantile"], [691, 1, 1, "", "sum"], [692, 1, 1, "", "tail"]], "polars.testing": [[120, 4, 1, "", "assert_frame_equal"], [121, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[122, 0, 1, "", "column"], [123, 4, 1, "", "columns"], [124, 4, 1, "", "create_list_strategy"], [125, 4, 1, "", "dataframes"], [126, 4, 1, "", "load_profile"], [127, 4, 1, "", "series"], [128, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[122, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 148], "api": [1, 66, 67, 68, 69, 609], "provid": 1, "new": 1, "function": [1, 597, 608], "avail": 1, "registr": 1, "exampl": [1, 1005], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 1005], "arrai": [2, 591, 989], "binari": [3, 592, 603, 991], "boolean": [4, 593, 992], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 132], "activate_decim": 6, "load": [7, 132], "restore_default": 8, "save": [9, 132], "set_ascii_t": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_streaming_chunk_s": 13, "set_tbl_cell_align": 14, "set_tbl_col": 15, "set_tbl_column_data_type_inlin": 16, "set_tbl_dataframe_shape_below": 17, "set_tbl_format": 18, "set_tbl_hide_column_data_typ": 19, "set_tbl_hide_column_nam": 20, "set_tbl_hide_dataframe_shap": 21, "set_tbl_hide_dtype_separ": 22, "set_tbl_row": 23, "set_tbl_width_char": 24, "set_verbos": 25, "state": [26, 132], "datafram": [27, 28, 29, 30, 31, 32, 33, 34, 35, 125, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254], "write_avro": 27, "write_csv": 28, "write_databas": 29, "write_delta": 30, "write_excel": 31, "write_ipc": 32, "write_json": [33, 677], "write_ndjson": 34, "write_parquet": 35, "datatyp": 36, "date": [37, 315, 559, 754], "datetim": [38, 316, 560, 755], "decim": 39, "durat": [40, 561], "float32": 41, "float64": 42, "int16": 43, "int32": 44, "int64": 45, "int8": 46, "list": [47, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 599, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 998], "null": 48, "object": 49, "sqlcontext": [50, 51, 52, 53, 54, 55], "execut": 50, "regist": 51, "register_glob": 52, "register_mani": 53, "tabl": 54, "unregist": 55, "stringcach": [56, 608], "struct": [57, 522, 523, 585, 605, 961, 962, 963, 964, 965, 1002], "time": [58, 343, 588, 786], "uint16": 59, "uint32": 60, "uint64": 61, "uint8": 62, "unknown": 63, "utf8": 64, "align_fram": 65, "register_dataframe_namespac": 66, "register_expr_namespac": 67, "register_lazyframe_namespac": 68, "register_series_namespac": 69, "arg_wher": 70, "build_info": 71, "collect_al": 72, "concat": [73, 395, 488, 842, 927], "date_rang": 74, "enable_string_cach": 75, "except": [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 258], "arrowerror": 76, "columnnotfounderror": 77, "computeerror": 78, "duplicateerror": 79, "invalidoperationerror": 80, "nodataerror": 81, "norowsreturnederror": 82, "polarspanicerror": 83, "rowserror": 84, "schemaerror": 85, "schemafieldnotfounderror": 86, "shapeerror": 87, "structfieldnotfounderror": 88, "toomanyrowsreturnederror": 89, "from_arrow": 90, "from_datafram": 91, "from_dict": [92, 93], "from_numpi": 94, "from_panda": 95, "from_record": 96, "from_repr": 97, "get_index_typ": 98, "io": 99, "csv": [99, 610], "batched_read": 99, "batchedcsvread": [99, 610], "next_batch": 99, "ones": 100, "read_avro": 101, "read_csv": 102, "read_csv_batch": 103, "read_databas": 104, "read_delta": 105, "read_excel": 106, "read_ipc": 107, "read_ipc_schema": 108, "read_json": [109, 651], "read_ndjson": 110, "read_parquet": 111, "read_parquet_schema": 112, "scan_csv": 113, "scan_delta": 114, "scan_ipc": 115, "scan_ndjson": 116, "scan_parquet": 117, "scan_pyarrow_dataset": 118, "show_vers": 119, "test": [120, 121, 122, 123, 124, 125, 126, 127, 128, 1005], "assert_frame_equ": 120, "assert_series_equ": 121, "parametr": [122, 123, 124, 125, 126, 127, 128, 1005], "column": [122, 123, 139, 595, 617], "create_list_strategi": 124, "load_profil": 126, "seri": [127, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 997], "set_profil": 128, "threadpool_s": 129, "time_rang": 130, "zero": 131, "option": 132, "current": 132, "us": 132, "context": 132, "manag": 132, "aggreg": [133, 259, 611, 699], "__dataframe__": 134, "appli": [135, 236, 268, 544, 680, 705], "bottom_k": [136, 291, 612, 726], "clear": [137, 614, 732], "clone": [138, 615, 736], "corr": [140, 553], "describ": [141, 745], "drop": [142, 618], "drop_in_plac": 143, "drop_nul": [144, 311, 619, 749], "dtype": [145, 620, 794], "estimated_s": [146, 796], "explod": [147, 358, 400, 494, 622, 801, 847, 933], "fill_nan": [149, 360, 624, 803], "fill_nul": [150, 361, 625, 804], "filter": [151, 362, 626, 805], "find_idx_by_nam": 152, "fold": [153, 565], "frame_equ": 154, "get_column": [155, 156], "glimps": 157, "groupbi": [158, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 253, 629, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695], "groupby_dynam": [159, 630], "groupby_rol": [160, 631], "hash_row": 161, "head": [162, 239, 371, 403, 569, 632, 683, 811, 850], "height": 163, "hstack": 164, "insert_at_idx": 165, "interpol": [166, 374, 634, 815], "is_dupl": [167, 376, 818], "is_empti": [168, 819], "is_uniqu": [169, 386, 833], "item": [170, 835], "iter_row": 171, "iter_slic": 172, "join": [173, 404, 635, 851], "join_asof": [174, 636], "lazi": [175, 608, 638], "limit": [176, 392, 639, 838], "max": [177, 241, 281, 407, 427, 573, 641, 685, 717, 763, 854, 871], "mean": [178, 242, 408, 428, 574, 642, 686, 764, 855, 872], "median": [179, 243, 429, 575, 643, 687, 765, 873], "melt": [180, 644], "merge_sort": [181, 645], "min": [182, 244, 282, 409, 438, 576, 646, 688, 718, 770, 856, 874], "n_chunk": [183, 876], "n_uniqu": [184, 245, 442, 577, 689, 877], "null_count": [185, 446, 647, 882], "partition_bi": 186, "pipe": [187, 450, 648], "pivot": 188, "product": [189, 453, 886], "quantil": [190, 246, 454, 578, 650, 690, 888], "rechunk": [191, 456, 890], "renam": [192, 652, 892], "replac": [193, 504, 943], "replace_at_idx": 194, "revers": [195, 410, 460, 653, 857, 894], "row": [196, 197], "sampl": [198, 472, 906], "schema": [199, 654, 964], "select": [200, 256, 583, 602, 655, 698, 1000], "set_sort": [201, 474, 656, 911], "shape": [202, 912], "shift": [203, 411, 475, 657, 858, 913], "shift_and_fil": [204, 476, 658, 914], "shrink_to_fit": [205, 916], "slice": [206, 412, 483, 508, 662, 859, 922, 947], "sort": [207, 413, 484, 663, 860, 923], "std": [208, 487, 584, 664, 925], "sum": [209, 247, 283, 414, 526, 586, 665, 691, 719, 861, 966], "tail": [210, 248, 415, 527, 587, 666, 692, 862, 967], "take_everi": [211, 529, 667, 969], "to_arrow": [212, 973], "to_dict": [213, 214], "to_dummi": [215, 974], "to_init_repr": [216, 976], "to_numpi": [217, 978], "to_panda": [218, 979], "to_seri": 219, "to_struct": [220, 417, 864], "top_k": [221, 533, 668, 981], "transpos": 222, "uniqu": [223, 284, 418, 535, 669, 720, 865, 982], "unnest": [224, 670, 965], "unstack": 225, "updat": [226, 671], "upsampl": 227, "var": [228, 539, 589, 672, 986], "vstack": 229, "width": [230, 673], "with_column": [231, 674], "with_row_count": [232, 676], "__iter__": 233, "agg": [234, 678], "all": [235, 264, 542, 679, 702], "count": [237, 301, 554, 681], "first": [238, 363, 401, 564, 627, 682, 848], "last": [240, 389, 405, 637, 684, 852], "attribut": [249, 693, 990], "comput": [250, 596, 994], "descript": [251, 694, 995], "export": [252, 996], "miscellan": [255, 601, 608, 697, 999], "manipul": [256, 602, 698, 1000], "data": 257, "type": 257, "numer": [257, 603], "tempor": [257, 606, 1003], "nest": 257, "other": 257, "expr": [260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541], "ab": [260, 700], "add": 261, "agg_group": 262, "alia": [263, 701], "and_": 265, "ani": [266, 543, 703], "append": [267, 704], "approx_uniqu": [269, 545], "arcco": [270, 706], "arccosh": [271, 707], "arcsin": [272, 708], "arcsinh": [273, 709], "arctan": [274, 710], "arctanh": [275, 711], "arg_max": [276, 393, 712, 840], "arg_min": [277, 394, 713, 841], "arg_sort": [278, 714], "arg_tru": [279, 715], "arg_uniqu": [280, 716], "arr": [281, 282, 283, 284, 717, 718, 719, 720], "backward_fil": 285, "bin": [286, 287, 288, 289, 290, 721, 722, 723, 724, 725], "contain": [286, 396, 489, 721, 843, 928], "decod": [287, 491, 722, 930], "encod": [288, 492, 723, 931], "ends_with": [289, 493, 724, 932], "starts_with": [290, 512, 725, 951], "cach": [292, 613], "cast": [293, 727], "cat": [294, 728, 729], "set_ord": [294, 729], "ceil": [295, 730], "clip": [296, 733], "clip_max": [297, 734], "clip_min": [298, 735], "co": [299, 737], "cosh": [300, 738], "cumcount": 302, "cummax": [303, 739], "cummin": [304, 740], "cumprod": [305, 741], "cumsum": [306, 558, 742], "cumulative_ev": [307, 743], "diff": [308, 398, 746, 845], "dot": [309, 747], "drop_nan": [310, 748], "dt": [312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793], "cast_time_unit": [312, 751], "combin": [313, 752], "convert_time_zon": [314, 753], "dai": [317, 318, 756, 757], "epoch": [319, 758], "hour": [320, 321, 759, 760], "is_leap_year": [322, 761], "iso_year": [323, 762], "microsecond": [324, 325, 766, 767], "millisecond": [326, 327, 768, 769], "minut": [328, 329, 771, 772], "month": [330, 773], "month_end": [331, 774], "month_start": [332, 775], "nanosecond": [333, 334, 776, 777], "offset_bi": [335, 778], "ordinal_dai": [336, 779], "quarter": [337, 780], "replace_time_zon": [338, 781], "round": [339, 471, 782, 905], "second": [340, 341, 783, 784], "strftime": [342, 785], "timestamp": [344, 787], "to_str": [345, 788], "truncat": [346, 789], "week": [347, 790], "weekdai": [348, 791], "with_time_unit": [349, 792], "year": [350, 793], "entropi": [351, 795], "eq": [352, 430], "ewm_mean": [353, 797], "ewm_std": [354, 798], "ewm_var": [355, 799], "exclud": [356, 563], "exp": [357, 800], "extend_const": [359, 802], "flatten": 364, "floor": [365, 807], "floordiv": 366, "forward_fil": 367, "ge": 368, "gt": 369, "hash": [370, 810], "implod": [372, 570, 813], "inspect": [373, 633], "is_between": [375, 816], "is_finit": [377, 820], "is_first": [378, 821], "is_in": [379, 823], "is_infinit": [380, 824], "is_nan": [381, 826], "is_not": 382, "is_not_nan": [383, 827], "is_not_nul": [384, 828], "is_nul": [385, 829], "keep_nam": 387, "kurtosi": [388, 836], "le": 390, "len": [391, 837], "count_match": [397, 490, 844, 929], "eval": [399, 846], "get": [402, 849], "length": [406, 499, 853, 938], "take": [416, 528, 863, 968], "log": [419, 866], "log10": [420, 867], "log1p": [421, 868], "lower_bound": [422, 869], "lt": 423, "map": [424, 572, 640], "map_alia": 425, "map_dict": [426, 870], "meta": [430, 431, 432, 433, 434, 435, 436, 437, 600], "has_multiple_output": 431, "is_regex_project": 432, "ne": [433, 445], "output_nam": 434, "pop": 435, "root_nam": 436, "undo_alias": 437, "mod": 439, "mode": [440, 875], "mul": 441, "nan_max": [443, 879], "nan_min": [444, 880], "or_": 447, "over": 448, "pct_chang": [449, 883], "pow": 451, "prefix": 452, "rank": [455, 889], "reinterpret": [457, 891], "repeat_bi": 458, "reshap": [459, 893], "rolling_appli": [461, 895], "rolling_max": [462, 896], "rolling_mean": [463, 897], "rolling_median": [464, 898], "rolling_min": [465, 899], "rolling_quantil": [466, 900], "rolling_skew": [467, 901], "rolling_std": [468, 902], "rolling_sum": [469, 903], "rolling_var": [470, 904], "search_sort": [473, 907], "shrink_dtyp": [477, 915], "shuffl": [478, 917], "sign": [479, 918], "sin": [480, 919], "sinh": [481, 920], "skew": [482, 921], "sort_bi": 485, "sqrt": [486, 924], "str": [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960], "extract": [495, 934], "extract_al": [496, 935], "json_extract": [497, 936], "json_path_match": [498, 937], "ljust": [500, 939], "lstrip": [501, 940], "n_char": [502, 941], "parse_int": [503, 942], "replace_al": [505, 944], "rjust": [506, 945], "rstrip": [507, 946], "split": [509, 948], "split_exact": [510, 949], "splitn": [511, 950], "strip": [513, 952], "strptime": [514, 953], "to_dat": [515, 954], "to_datetim": [516, 955], "to_decim": [517, 956], "to_lowercas": [518, 957], "to_tim": [519, 958], "to_uppercas": [520, 959], "zfill": [521, 960], "field": [522, 961, 962], "rename_field": [523, 963], "sub": 524, "suffix": 525, "tan": [530, 970], "tanh": [531, 971], "to_phys": [532, 980], "truediv": 534, "unique_count": [536, 983], "upper_bound": [537, 984], "value_count": [538, 985], "where": 540, "xor": 541, "arang": 546, "arg_sort_bi": 547, "avg": 548, "coalesc": 549, "col": 550, "concat_list": 551, "concat_str": 552, "cov": 555, "cumfold": 556, "cumreduc": 557, "element": 562, "format": 566, "from_epoch": 567, "group": 568, "lit": 571, "reduc": 579, "repeat": 580, "rolling_corr": 581, "rolling_cov": 582, "when": 590, "categori": [594, 993], "name": [595, 878], "express": 598, "oper": 603, "conjunct": 603, "comparison": 603, "string": [604, 1001], "window": 607, "convers": 608, "eager": 608, "parallel": 608, "refer": 609, "input": 610, "output": 610, "feather": 610, "ipc": 610, "parquet": 610, "databas": 610, "json": 610, "avro": 610, "excel": 610, "delta": 610, "lake": 610, "dataset": 610, "lazyfram": [612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 696], "collect": 616, "explain": 621, "fetch": 623, "from_json": 628, "profil": [649, 1005], "show_graph": 659, "sink_ipc": 660, "sink_parquet": 661, "with_context": 675, "lazygroupbi": [678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692], "read": 697, "write": 697, "logic": 697, "plan": 697, "chunk_length": 731, "cut": 744, "flag": 806, "get_chunk": 808, "has_valid": 809, "hist": 812, "inner_dtyp": 814, "is_boolean": 817, "is_float": 822, "is_integ": 825, "is_numer": 830, "is_sort": 831, "is_tempor": 832, "is_utf8": 834, "new_from_index": 881, "peak_max": 884, "peak_min": 885, "qcut": 887, "series_equ": 908, "set": 909, "set_at_idx": 910, "time_unit": 972, "to_fram": 975, "to_list": 977, "view": 987, "zip_with": 988, "sql": 1004, "method": 1004, "assert": 1005, "primit": 1005, "strategi": 1005, "helper": 1005, "util": 1006}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.DataFrame.write_ndjson": [[34, "polars-dataframe-write-ndjson"]], "polars.Unknown": [[63, "polars-unknown"]], "polars.DataFrame.write_delta": [[30, "polars-dataframe-write-delta"]], "polars.UInt16": [[59, "polars-uint16"]], "polars.Config.restore_defaults": [[8, "polars-config-restore-defaults"]], "polars.Date": [[37, "polars-date"]], "polars.SQLContext.register": [[51, "polars-sqlcontext-register"]], "polars.UInt32": [[60, "polars-uint32"]], "polars.Time": [[58, "polars-time"]], "polars.Datetime": [[38, "polars-datetime"]], "polars.DataFrame.write_ipc": [[32, "polars-dataframe-write-ipc"]], "polars.SQLContext.tables": [[54, "polars-sqlcontext-tables"]], "polars.SQLContext.unregister": [[55, "polars-sqlcontext-unregister"]], "polars.Config.save": [[9, "polars-config-save"]], "polars.Config.set_tbl_column_data_type_inline": [[16, "polars-config-set-tbl-column-data-type-inline"]], "polars.Array": [[2, "polars-array"]], "polars.Config.set_tbl_hide_column_names": [[20, "polars-config-set-tbl-hide-column-names"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Duration": [[40, "polars-duration"]], "polars.Null": [[48, "polars-null"]], "polars.DataFrame.write_database": [[29, "polars-dataframe-write-database"]], "polars.Config.set_verbose": [[25, "polars-config-set-verbose"]], "polars.Int16": [[43, "polars-int16"]], "polars.StringCache": [[56, "polars-stringcache"]], "polars.List": [[47, "polars-list"]], "polars.Config.set_tbl_width_chars": [[24, "polars-config-set-tbl-width-chars"]], "polars.Config.state": [[26, "polars-config-state"]], "polars.Utf8": [[64, "polars-utf8"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.Float32": [[41, "polars-float32"]], "polars.UInt8": [[62, "polars-uint8"]], "polars.Config.set_tbl_dataframe_shape_below": [[17, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Config.set_tbl_hide_dataframe_shape": [[21, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.DataFrame.write_parquet": [[35, "polars-dataframe-write-parquet"]], "polars.align_frames": [[65, "polars-align-frames"]], "polars.Struct": [[57, "polars-struct"]], "polars.SQLContext.register_many": [[53, "polars-sqlcontext-register-many"]], "polars.UInt64": [[61, "polars-uint64"]], "polars.SQLContext.execute": [[50, "polars-sqlcontext-execute"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1005, "examples"]], "polars.Object": [[49, "polars-object"]], "polars.Config.set_tbl_cell_alignment": [[14, "polars-config-set-tbl-cell-alignment"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.Config.set_tbl_cols": [[15, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_rows": [[23, "polars-config-set-tbl-rows"]], "polars.DataFrame.write_csv": [[28, "polars-dataframe-write-csv"]], "polars.Decimal": [[39, "polars-decimal"]], "polars.Int32": [[44, "polars-int32"]], "polars.Config.set_tbl_hide_column_data_types": [[19, "polars-config-set-tbl-hide-column-data-types"]], "polars.api.register_dataframe_namespace": [[66, "polars-api-register-dataframe-namespace"]], "polars.api.register_lazyframe_namespace": [[68, "polars-api-register-lazyframe-namespace"]], "polars.api.register_series_namespace": [[69, "polars-api-register-series-namespace"]], "polars.Config.set_streaming_chunk_size": [[13, "polars-config-set-streaming-chunk-size"]], "polars.DataFrame.write_json": [[33, "polars-dataframe-write-json"]], "polars.Config.set_ascii_tables": [[10, "polars-config-set-ascii-tables"]], "polars.Binary": [[3, "polars-binary"]], "polars.DataFrame.write_excel": [[31, "polars-dataframe-write-excel"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.api.register_expr_namespace": [[67, "polars-api-register-expr-namespace"]], "polars.Float64": [[42, "polars-float64"]], "polars.DataType": [[36, "polars-datatype"]], "polars.DataFrame.write_avro": [[27, "polars-dataframe-write-avro"]], "polars.Config.set_tbl_hide_dtype_separator": [[22, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_formatting": [[18, "polars-config-set-tbl-formatting"]], "polars.Int64": [[45, "polars-int64"]], "polars.Int8": [[46, "polars-int8"]], "polars.SQLContext.register_globals": [[52, "polars-sqlcontext-register-globals"]], "polars.exceptions.InvalidOperationError": [[80, "polars-exceptions-invalidoperationerror"]], "polars.read_excel": [[106, "polars-read-excel"]], "polars.exceptions.SchemaFieldNotFoundError": [[86, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.StructFieldNotFoundError": [[88, "polars-exceptions-structfieldnotfounderror"]], "polars.read_database": [[104, "polars-read-database"]], "polars.build_info": [[71, "polars-build-info"]], "polars.arg_where": [[70, "polars-arg-where"]], "polars.concat": [[73, "polars-concat"]], "polars.exceptions.NoDataError": [[81, "polars-exceptions-nodataerror"]], "polars.date_range": [[74, "polars-date-range"]], "polars.read_parquet_schema": [[112, "polars-read-parquet-schema"]], "polars.read_ipc_schema": [[108, "polars-read-ipc-schema"]], "polars.testing.parametric.set_profile": [[128, "polars-testing-parametric-set-profile"]], "polars.exceptions.ComputeError": [[78, "polars-exceptions-computeerror"]], "polars.from_dict": [[92, "polars-from-dict"]], "polars.testing.assert_frame_equal": [[120, "polars-testing-assert-frame-equal"]], "Config": [[132, "config"]], "Config options": [[132, "config-options"]], "Config load, save, and current state": [[132, "config-load-save-and-current-state"]], "Use as a context manager": [[132, "use-as-a-context-manager"]], "Aggregation": [[133, "aggregation"], [699, "aggregation"], [611, "aggregation"], [259, "aggregation"]], "polars.from_numpy": [[94, "polars-from-numpy"]], "polars.from_dataframe": [[91, "polars-from-dataframe"]], "polars.read_json": [[109, "polars-read-json"]], "polars.testing.assert_series_equal": [[121, "polars-testing-assert-series-equal"]], "polars.time_range": [[130, "polars-time-range"]], "polars.DataFrame.__dataframe__": [[134, "polars-dataframe-dataframe"]], "polars.scan_delta": [[114, "polars-scan-delta"]], "polars.exceptions.NoRowsReturnedError": [[82, "polars-exceptions-norowsreturnederror"]], "polars.testing.parametric.columns": [[123, "polars-testing-parametric-columns"]], "polars.DataFrame.bottom_k": [[136, "polars-dataframe-bottom-k"]], "polars.exceptions.DuplicateError": [[79, "polars-exceptions-duplicateerror"]], "polars.read_ndjson": [[110, "polars-read-ndjson"]], "polars.from_pandas": [[95, "polars-from-pandas"]], "polars.threadpool_size": [[129, "polars-threadpool-size"]], "polars.from_repr": [[97, "polars-from-repr"]], "polars.scan_ndjson": [[116, "polars-scan-ndjson"]], "polars.read_ipc": [[107, "polars-read-ipc"]], "polars.scan_parquet": [[117, "polars-scan-parquet"]], "polars.exceptions.ShapeError": [[87, "polars-exceptions-shapeerror"]], "polars.DataFrame.apply": [[135, "polars-dataframe-apply"]], "polars.enable_string_cache": [[75, "polars-enable-string-cache"]], "polars.read_delta": [[105, "polars-read-delta"]], "polars.testing.parametric.column": [[122, "polars-testing-parametric-column"]], "polars.exceptions.RowsError": [[84, "polars-exceptions-rowserror"]], "polars.zeros": [[131, "polars-zeros"]], "polars.show_versions": [[119, "polars-show-versions"]], "polars.exceptions.TooManyRowsReturnedError": [[89, "polars-exceptions-toomanyrowsreturnederror"]], "polars.testing.parametric.create_list_strategy": [[124, "polars-testing-parametric-create-list-strategy"]], "polars.DataFrame.clear": [[137, "polars-dataframe-clear"]], "polars.testing.parametric.load_profile": [[126, "polars-testing-parametric-load-profile"]], "polars.from_dicts": [[93, "polars-from-dicts"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[99, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.get_index_type": [[98, "polars-get-index-type"]], "polars.ones": [[100, "polars-ones"]], "polars.collect_all": [[72, "polars-collect-all"]], "polars.scan_csv": [[113, "polars-scan-csv"]], "polars.scan_ipc": [[115, "polars-scan-ipc"]], "polars.scan_pyarrow_dataset": [[118, "polars-scan-pyarrow-dataset"]], "polars.testing.parametric.dataframes": [[125, "polars-testing-parametric-dataframes"]], "polars.testing.parametric.series": [[127, "polars-testing-parametric-series"]], "polars.exceptions.SchemaError": [[85, "polars-exceptions-schemaerror"]], "polars.DataFrame.columns": [[139, "polars-dataframe-columns"]], "polars.read_parquet": [[111, "polars-read-parquet"]], "polars.from_arrow": [[90, "polars-from-arrow"]], "polars.from_records": [[96, "polars-from-records"]], "polars.read_avro": [[101, "polars-read-avro"]], "polars.read_csv": [[102, "polars-read-csv"]], "polars.read_csv_batched": [[103, "polars-read-csv-batched"]], "polars.DataFrame.clone": [[138, "polars-dataframe-clone"]], "polars.exceptions.ColumnNotFoundError": [[77, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.ArrowError": [[76, "polars-exceptions-arrowerror"]], "polars.exceptions.PolarsPanicError": [[83, "polars-exceptions-polarspanicerror"]], "polars.Series.struct.schema": [[964, "polars-series-struct-schema"]], "polars.Series.tan": [[970, "polars-series-tan"]], "polars.Series.time_unit": [[972, "polars-series-time-unit"]], "polars.Series.sort": [[923, "polars-series-sort"]], "polars.Series.to_dummies": [[974, "polars-series-to-dummies"]], "polars.Series.str.count_match": [[929, "polars-series-str-count-match"]], "polars.Series.str.replace_all": [[944, "polars-series-str-replace-all"]], "polars.Series.str.to_time": [[958, "polars-series-str-to-time"]], "polars.Series.str.slice": [[947, "polars-series-str-slice"]], "polars.Series.str.to_lowercase": [[957, "polars-series-str-to-lowercase"]], "polars.Series.tanh": [[971, "polars-series-tanh"]], "polars.Series.to_arrow": [[973, "polars-series-to-arrow"]], "polars.Series.str.replace": [[943, "polars-series-str-replace"]], "polars.Series.shape": [[912, "polars-series-shape"]], "polars.Series.str.ends_with": [[932, "polars-series-str-ends-with"]], "polars.Series.str.strip": [[952, "polars-series-str-strip"]], "polars.Series.str.json_extract": [[936, "polars-series-str-json-extract"]], "polars.Series.struct.field": [[961, "polars-series-struct-field"]], "polars.Series.str.concat": [[927, "polars-series-str-concat"]], "polars.Series.str.explode": [[933, "polars-series-str-explode"]], "polars.Series.str.ljust": [[939, "polars-series-str-ljust"]], "polars.Series.struct.unnest": [[965, "polars-series-struct-unnest"]], "polars.Series.take_every": [[969, "polars-series-take-every"]], "polars.Series.to_numpy": [[978, "polars-series-to-numpy"]], "polars.Series.shift_and_fill": [[914, "polars-series-shift-and-fill"]], "polars.Series.str.encode": [[931, "polars-series-str-encode"]], "polars.Series.str.rjust": [[945, "polars-series-str-rjust"]], "polars.Series.take": [[968, "polars-series-take"]], "polars.Series.std": [[925, "polars-series-std"]], "polars.Series.struct.rename_fields": [[963, "polars-series-struct-rename-fields"]], "polars.Series.str.to_decimal": [[956, "polars-series-str-to-decimal"]], "polars.Series.str.splitn": [[950, "polars-series-str-splitn"]], "polars.Series.to_frame": [[975, "polars-series-to-frame"]], "polars.Series.to_init_repr": [[976, "polars-series-to-init-repr"]], "polars.Series.shrink_dtype": [[915, "polars-series-shrink-dtype"]], "polars.Series.slice": [[922, "polars-series-slice"]], "polars.Series.str.contains": [[928, "polars-series-str-contains"]], "polars.Series.to_list": [[977, "polars-series-to-list"]], "polars.Series.tail": [[967, "polars-series-tail"]], "polars.Series.str.zfill": [[960, "polars-series-str-zfill"]], "polars.Series.str.decode": [[930, "polars-series-str-decode"]], "polars.Series.sin": [[919, "polars-series-sin"]], "polars.Series.set_at_idx": [[910, "polars-series-set-at-idx"]], "polars.Series.str.split": [[948, "polars-series-str-split"]], "polars.Series.str.json_path_match": [[937, "polars-series-str-json-path-match"]], "polars.Series.sign": [[918, "polars-series-sign"]], "polars.Series.skew": [[921, "polars-series-skew"]], "polars.Series.str.rstrip": [[946, "polars-series-str-rstrip"]], "polars.Series.str.lstrip": [[940, "polars-series-str-lstrip"]], "polars.Series.shrink_to_fit": [[916, "polars-series-shrink-to-fit"]], "polars.Series.str.split_exact": [[949, "polars-series-str-split-exact"]], "polars.Series.str.strptime": [[953, "polars-series-str-strptime"]], "polars.Series.str.to_datetime": [[955, "polars-series-str-to-datetime"]], "polars.Series.str.starts_with": [[951, "polars-series-str-starts-with"]], "polars.Series.sinh": [[920, "polars-series-sinh"]], "polars.Series.str.to_date": [[954, "polars-series-str-to-date"]], "polars.Series.sum": [[966, "polars-series-sum"]], "polars.Series.shift": [[913, "polars-series-shift"]], "polars.Series.str": [[926, "polars-series-str"]], "polars.Series.shuffle": [[917, "polars-series-shuffle"]], "polars.Series.str.parse_int": [[942, "polars-series-str-parse-int"]], "polars.Series.to_pandas": [[979, "polars-series-to-pandas"]], "polars.Series.set_sorted": [[911, "polars-series-set-sorted"]], "polars.Series.str.n_chars": [[941, "polars-series-str-n-chars"]], "polars.Series.sqrt": [[924, "polars-series-sqrt"]], "polars.Series.str.extract": [[934, "polars-series-str-extract"]], "polars.Series.struct.fields": [[962, "polars-series-struct-fields"]], "polars.Series.str.lengths": [[938, "polars-series-str-lengths"]], "polars.Series.str.extract_all": [[935, "polars-series-str-extract-all"]], "polars.Series.str.to_uppercase": [[959, "polars-series-str-to-uppercase"]], "polars.Series.reverse": [[894, "polars-series-reverse"]], "polars.Series.list.join": [[851, "polars-series-list-join"]], "polars.Series.list.mean": [[855, "polars-series-list-mean"]], "polars.Series.name": [[878, "polars-series-name"]], "polars.Series.mean": [[872, "polars-series-mean"]], "polars.Series.search_sorted": [[907, "polars-series-search-sorted"]], "polars.Series.list.first": [[848, "polars-series-list-first"]], "polars.Series.n_unique": [[877, "polars-series-n-unique"]], "polars.Series.log": [[866, "polars-series-log"]], "polars.Series.list.lengths": [[853, "polars-series-list-lengths"]], "polars.Series.min": [[874, "polars-series-min"]], "polars.Series.rolling_mean": [[897, "polars-series-rolling-mean"]], "polars.Series.rolling_quantile": [[900, "polars-series-rolling-quantile"]], "polars.Series.list.diff": [[845, "polars-series-list-diff"]], "polars.Series.median": [[873, "polars-series-median"]], "polars.Series.n_chunks": [[876, "polars-series-n-chunks"]], "polars.Series.rolling_skew": [[901, "polars-series-rolling-skew"]], "polars.Series.list.get": [[849, "polars-series-list-get"]], "polars.Series.rolling_min": [[899, "polars-series-rolling-min"]], "polars.Series.list.sort": [[860, "polars-series-list-sort"]], "polars.Series.list.max": [[854, "polars-series-list-max"]], "polars.Series.rechunk": [[890, "polars-series-rechunk"]], "polars.Series.rolling_std": [[902, "polars-series-rolling-std"]], "polars.Series.list.slice": [[859, "polars-series-list-slice"]], "polars.Series.list.take": [[863, "polars-series-list-take"]], "polars.Series.list.to_struct": [[864, "polars-series-list-to-struct"]], "polars.Series.mode": [[875, "polars-series-mode"]], "polars.Series.new_from_index": [[881, "polars-series-new-from-index"]], "polars.Series.rolling_apply": [[895, "polars-series-rolling-apply"]], "polars.Series.rolling_var": [[904, "polars-series-rolling-var"]], "polars.Series.list.eval": [[846, "polars-series-list-eval"]], "polars.Series.log1p": [[868, "polars-series-log1p"]], "polars.Series.list.tail": [[862, "polars-series-list-tail"]], "polars.Series.list.head": [[850, "polars-series-list-head"]], "polars.Series.list.reverse": [[857, "polars-series-list-reverse"]], "polars.Series.list.shift": [[858, "polars-series-list-shift"]], "polars.Series.list.arg_max": [[840, "polars-series-list-arg-max"]], "polars.Series.peak_max": [[884, "polars-series-peak-max"]], "polars.Series.list.sum": [[861, "polars-series-list-sum"]], "polars.Series.null_count": [[882, "polars-series-null-count"]], "polars.Series.list.contains": [[843, "polars-series-list-contains"]], "polars.Series.list.arg_min": [[841, "polars-series-list-arg-min"]], "polars.Series.qcut": [[887, "polars-series-qcut"]], "polars.Series.list.concat": [[842, "polars-series-list-concat"]], "polars.Series.list.min": [[856, "polars-series-list-min"]], "polars.Series.lower_bound": [[869, "polars-series-lower-bound"]], "polars.Series.list.unique": [[865, "polars-series-list-unique"]], "polars.Series.max": [[871, "polars-series-max"]], "polars.Series.rolling_sum": [[903, "polars-series-rolling-sum"]], "polars.Series.reinterpret": [[891, "polars-series-reinterpret"]], "polars.Series.nan_min": [[880, "polars-series-nan-min"]], "polars.Series.list.count_match": [[844, "polars-series-list-count-match"]], "polars.Series.product": [[886, "polars-series-product"]], "polars.Series.nan_max": [[879, "polars-series-nan-max"]], "polars.Series.rank": [[889, "polars-series-rank"]], "polars.Series.log10": [[867, "polars-series-log10"]], "polars.Series.reshape": [[893, "polars-series-reshape"]], "polars.Series.peak_min": [[885, "polars-series-peak-min"]], "polars.Series.list.last": [[852, "polars-series-list-last"]], "polars.Series.rolling_median": [[898, "polars-series-rolling-median"]], "polars.Series.rolling_max": [[896, "polars-series-rolling-max"]], "polars.Series.rename": [[892, "polars-series-rename"]], "polars.Series.series_equal": [[908, "polars-series-series-equal"]], "polars.Series.map_dict": [[870, "polars-series-map-dict"]], "polars.Series.set": [[909, "polars-series-set"]], "polars.Series.quantile": [[888, "polars-series-quantile"]], "polars.Series.sample": [[906, "polars-series-sample"]], "polars.Series.list.explode": [[847, "polars-series-list-explode"]], "polars.Series.pct_change": [[883, "polars-series-pct-change"]], "polars.Series.round": [[905, "polars-series-round"]], "polars.Series.is_null": [[829, "polars-series-is-null"]], "polars.Series.dt.second": [[783, "polars-series-dt-second"]], "polars.Series.dt.offset_by": [[778, "polars-series-dt-offset-by"]], "polars.Series.is_not_nan": [[827, "polars-series-is-not-nan"]], "polars.Series.dt.ordinal_day": [[779, "polars-series-dt-ordinal-day"]], "polars.Series.is_unique": [[833, "polars-series-is-unique"]], "polars.Series.limit": [[838, "polars-series-limit"]], "polars.Series.dt.round": [[782, "polars-series-dt-round"]], "polars.Series.has_validity": [[809, "polars-series-has-validity"]], "polars.Series.dtype": [[794, "polars-series-dtype"]], "polars.Series.hash": [[810, "polars-series-hash"]], "polars.Series.is_boolean": [[817, "polars-series-is-boolean"]], "polars.Series.dt.month_start": [[775, "polars-series-dt-month-start"]], "polars.Series.dt.year": [[793, "polars-series-dt-year"]], "polars.Series.entropy": [[795, "polars-series-entropy"]], "polars.Series.explode": [[801, "polars-series-explode"]], "polars.Series.is_first": [[821, "polars-series-is-first"]], "polars.Series.ewm_std": [[798, "polars-series-ewm-std"]], "polars.Series.dt.seconds": [[784, "polars-series-dt-seconds"]], "polars.Series.hist": [[812, "polars-series-hist"]], "polars.Series.dt.min": [[770, "polars-series-dt-min"]], "polars.Series.is_integer": [[825, "polars-series-is-integer"]], "polars.Series.is_not_null": [[828, "polars-series-is-not-null"]], "polars.Series.len": [[837, "polars-series-len"]], "polars.Series.dt.to_string": [[788, "polars-series-dt-to-string"]], "polars.Series.filter": [[805, "polars-series-filter"]], "polars.Series.is_in": [[823, "polars-series-is-in"]], "polars.Series.list": [[839, "polars-series-list"]], "polars.Series.is_numeric": [[830, "polars-series-is-numeric"]], "polars.Series.dt.replace_time_zone": [[781, "polars-series-dt-replace-time-zone"]], "polars.Series.fill_null": [[804, "polars-series-fill-null"]], "polars.Series.dt.month": [[773, "polars-series-dt-month"]], "polars.Series.get_chunks": [[808, "polars-series-get-chunks"]], "polars.Series.ewm_mean": [[797, "polars-series-ewm-mean"]], "polars.Series.floor": [[807, "polars-series-floor"]], "polars.Series.is_infinite": [[824, "polars-series-is-infinite"]], "polars.Series.dt.quarter": [[780, "polars-series-dt-quarter"]], "polars.Series.dt.strftime": [[785, "polars-series-dt-strftime"]], "polars.Series.is_temporal": [[832, "polars-series-is-temporal"]], "polars.Series.inner_dtype": [[814, "polars-series-inner-dtype"]], "polars.Series.interpolate": [[815, "polars-series-interpolate"]], "polars.Series.is_utf8": [[834, "polars-series-is-utf8"]], "polars.Series.estimated_size": [[796, "polars-series-estimated-size"]], "polars.Series.ewm_var": [[799, "polars-series-ewm-var"]], "polars.Series.dt.nanosecond": [[776, "polars-series-dt-nanosecond"]], "polars.Series.kurtosis": [[836, "polars-series-kurtosis"]], "polars.Series.dt.nanoseconds": [[777, "polars-series-dt-nanoseconds"]], "polars.Series.extend_constant": [[802, "polars-series-extend-constant"]], "polars.Series.is_duplicated": [[818, "polars-series-is-duplicated"]], "polars.Series.is_finite": [[820, "polars-series-is-finite"]], "polars.Series.dt.minutes": [[772, "polars-series-dt-minutes"]], "polars.Series.dt.truncate": [[789, "polars-series-dt-truncate"]], "polars.Series.fill_nan": [[803, "polars-series-fill-nan"]], "polars.Series.dt.month_end": [[774, "polars-series-dt-month-end"]], "polars.Series.dt.week": [[790, "polars-series-dt-week"]], "polars.Series.dt.with_time_unit": [[792, "polars-series-dt-with-time-unit"]], "polars.Series.exp": [[800, "polars-series-exp"]], "polars.Series.head": [[811, "polars-series-head"]], "polars.Series.dt.minute": [[771, "polars-series-dt-minute"]], "polars.Series.flags": [[806, "polars-series-flags"]], "polars.Series.implode": [[813, "polars-series-implode"]], "polars.Series.dt.weekday": [[791, "polars-series-dt-weekday"]], "polars.Series.is_float": [[822, "polars-series-is-float"]], "polars.Series.dt.time": [[786, "polars-series-dt-time"]], "polars.Series.is_between": [[816, "polars-series-is-between"]], "polars.Series.is_nan": [[826, "polars-series-is-nan"]], "polars.Series.item": [[835, "polars-series-item"]], "polars.Series.is_empty": [[819, "polars-series-is-empty"]], "polars.Series.is_sorted": [[831, "polars-series-is-sorted"]], "polars.Series.dt.timestamp": [[787, "polars-series-dt-timestamp"]], "polars.Series.cummin": [[740, "polars-series-cummin"]], "polars.Series.arg_max": [[712, "polars-series-arg-max"]], "polars.Series.dt.is_leap_year": [[761, "polars-series-dt-is-leap-year"]], "polars.Series.dt.mean": [[764, "polars-series-dt-mean"]], "polars.Series.dt.millisecond": [[768, "polars-series-dt-millisecond"]], "polars.Series.cast": [[727, "polars-series-cast"]], "polars.Series.clear": [[732, "polars-series-clear"]], "polars.Series.cumsum": [[742, "polars-series-cumsum"]], "polars.Series.all": [[702, "polars-series-all"]], "polars.Series.bin.contains": [[721, "polars-series-bin-contains"]], "polars.Series.bin.decode": [[722, "polars-series-bin-decode"]], "polars.Series.bin.starts_with": [[725, "polars-series-bin-starts-with"]], "polars.Series.dot": [[747, "polars-series-dot"]], "polars.Series.dt.combine": [[752, "polars-series-dt-combine"]], "polars.Series.dt.hour": [[759, "polars-series-dt-hour"]], "polars.Series.abs": [[700, "polars-series-abs"]], "polars.Series.describe": [[745, "polars-series-describe"]], "polars.Series.cat": [[728, "polars-series-cat"]], "polars.Series.cumprod": [[741, "polars-series-cumprod"]], "polars.Series.cat.set_ordering": [[729, "polars-series-cat-set-ordering"]], "polars.Series.dt.max": [[763, "polars-series-dt-max"]], "polars.Series.arg_true": [[715, "polars-series-arg-true"]], "polars.Series.arctan": [[710, "polars-series-arctan"]], "polars.Series.bin.ends_with": [[724, "polars-series-bin-ends-with"]], "polars.Series.dt.hours": [[760, "polars-series-dt-hours"]], "polars.Series.dt.median": [[765, "polars-series-dt-median"]], "polars.Series.dt.epoch": [[758, "polars-series-dt-epoch"]], "polars.Series.arr.min": [[718, "polars-series-arr-min"]], "polars.Series.arccos": [[706, "polars-series-arccos"]], "polars.Series.cumulative_eval": [[743, "polars-series-cumulative-eval"]], "polars.Series.clone": [[736, "polars-series-clone"]], "polars.Series.drop_nans": [[748, "polars-series-drop-nans"]], "polars.Series.cosh": [[738, "polars-series-cosh"]], "polars.Series.dt.iso_year": [[762, "polars-series-dt-iso-year"]], "polars.Series.arg_min": [[713, "polars-series-arg-min"]], "polars.Series.dt.microsecond": [[766, "polars-series-dt-microsecond"]], "polars.Series.arg_sort": [[714, "polars-series-arg-sort"]], "polars.Series.arg_unique": [[716, "polars-series-arg-unique"]], "polars.Series.arr.unique": [[720, "polars-series-arr-unique"]], "polars.Series.dt.date": [[754, "polars-series-dt-date"]], "polars.Series.dt.datetime": [[755, "polars-series-dt-datetime"]], "polars.Series.any": [[703, "polars-series-any"]], "polars.Series.dt.convert_time_zone": [[753, "polars-series-dt-convert-time-zone"]], "polars.Series.diff": [[746, "polars-series-diff"]], "polars.Series.drop_nulls": [[749, "polars-series-drop-nulls"]], "polars.Series.clip": [[733, "polars-series-clip"]], "polars.Series.dt.milliseconds": [[769, "polars-series-dt-milliseconds"]], "polars.Series.append": [[704, "polars-series-append"]], "polars.Series.arcsin": [[708, "polars-series-arcsin"]], "polars.Series.arr.max": [[717, "polars-series-arr-max"]], "polars.Series.bottom_k": [[726, "polars-series-bottom-k"]], "polars.Series.dt.cast_time_unit": [[751, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.days": [[757, "polars-series-dt-days"]], "polars.Series.arr.sum": [[719, "polars-series-arr-sum"]], "polars.Series.clip_max": [[734, "polars-series-clip-max"]], "polars.Series.cos": [[737, "polars-series-cos"]], "polars.Series.alias": [[701, "polars-series-alias"]], "polars.Series.cummax": [[739, "polars-series-cummax"]], "polars.Series.dt.day": [[756, "polars-series-dt-day"]], "polars.Series.chunk_lengths": [[731, "polars-series-chunk-lengths"]], "polars.Series.cut": [[744, "polars-series-cut"]], "polars.Series.ceil": [[730, "polars-series-ceil"]], "polars.Series.arctanh": [[711, "polars-series-arctanh"]], "polars.Series.clip_min": [[735, "polars-series-clip-min"]], "polars.Series.arccosh": [[707, "polars-series-arccosh"]], "polars.Series.dt": [[750, "polars-series-dt"]], "polars.Series.arcsinh": [[709, "polars-series-arcsinh"]], "polars.Series.dt.microseconds": [[767, "polars-series-dt-microseconds"]], "polars.Series.bin.encode": [[723, "polars-series-bin-encode"]], "polars.Series.apply": [[705, "polars-series-apply"]], "Struct": [[1002, "struct"], [605, "struct"]], "polars.Series.to_physical": [[980, "polars-series-to-physical"]], "polars.Series.value_counts": [[985, "polars-series-value-counts"]], "polars.Series.zip_with": [[988, "polars-series-zip-with"]], "Testing": [[1005, "testing"]], "Asserts": [[1005, "asserts"]], "Parametric testing": [[1005, "parametric-testing"]], "Polars primitives": [[1005, "polars-primitives"]], "Strategy helpers": [[1005, "strategy-helpers"]], "Profiles": [[1005, "profiles"]], "polars.Series.view": [[987, "polars-series-view"]], "Descriptive": [[995, "descriptive"], [694, "descriptive"], [251, "descriptive"]], "polars.Series.unique_counts": [[983, "polars-series-unique-counts"]], "Temporal": [[1003, "temporal"], [606, "temporal"], [257, "temporal"]], "SQL": [[1004, "sql"]], "Methods": [[1004, "methods"]], "String": [[1001, "string"], [604, "string"]], "polars.Series.unique": [[982, "polars-series-unique"]], "Computation": [[994, "computation"], [596, "computation"], [250, "computation"]], "polars.Series.var": [[986, "polars-series-var"]], "List": [[998, "list"], [599, "list"]], "Series": [[997, "series"]], "Utils": [[1006, "utils"]], "Categories": [[993, "categories"], [594, "categories"]], "Binary": [[991, "binary"], [592, "binary"], [603, "binary"]], "Boolean": [[992, "boolean"], [593, "boolean"]], "Miscellaneous": [[999, "miscellaneous"], [697, "miscellaneous"], [608, "miscellaneous"], [601, "miscellaneous"], [255, "miscellaneous"]], "polars.Series.upper_bound": [[984, "polars-series-upper-bound"]], "Export": [[996, "export"], [252, "export"]], "Attributes": [[990, "attributes"], [693, "attributes"], [249, "attributes"]], "polars.Series.top_k": [[981, "polars-series-top-k"]], "Array": [[989, "array"], [591, "array"]], "Manipulation/selection": [[1000, "manipulation-selection"], [698, "manipulation-selection"], [602, "manipulation-selection"], [256, "manipulation-selection"]], "polars.LazyFrame.merge_sorted": [[645, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.null_count": [[647, "polars-lazyframe-null-count"]], "polars.LazyFrame.set_sorted": [[656, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.with_context": [[675, "polars-lazyframe-with-context"]], "polars.LazyFrame.sink_ipc": [[660, "polars-lazyframe-sink-ipc"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[682, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.LazyFrame.with_columns": [[674, "polars-lazyframe-with-columns"]], "polars.LazyFrame.shift": [[657, "polars-lazyframe-shift"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[683, "polars-lazyframe-groupby-lazygroupby-head"]], "Read/write logical plan": [[697, "read-write-logical-plan"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[684, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.LazyFrame.map": [[640, "polars-lazyframe-map"]], "polars.LazyFrame.lazy": [[638, "polars-lazyframe-lazy"]], "polars.LazyFrame.unique": [[669, "polars-lazyframe-unique"]], "polars.LazyFrame.join": [[635, "polars-lazyframe-join"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[688, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.LazyFrame.select": [[655, "polars-lazyframe-select"]], "polars.LazyFrame.last": [[637, "polars-lazyframe-last"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[687, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.LazyFrame.mean": [[642, "polars-lazyframe-mean"]], "polars.LazyFrame.profile": [[649, "polars-lazyframe-profile"]], "GroupBy": [[695, "groupby"], [253, "groupby"]], "polars.LazyFrame.interpolate": [[634, "polars-lazyframe-interpolate"]], "polars.LazyFrame.schema": [[654, "polars-lazyframe-schema"]], "polars.LazyFrame.unnest": [[670, "polars-lazyframe-unnest"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[678, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[692, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.LazyFrame.limit": [[639, "polars-lazyframe-limit"]], "polars.LazyFrame.read_json": [[651, "polars-lazyframe-read-json"]], "polars.LazyFrame.top_k": [[668, "polars-lazyframe-top-k"]], "polars.LazyFrame.groupby_dynamic": [[630, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.write_json": [[677, "polars-lazyframe-write-json"]], "LazyFrame": [[696, "lazyframe"]], "polars.LazyFrame.quantile": [[650, "polars-lazyframe-quantile"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[681, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.LazyFrame.max": [[641, "polars-lazyframe-max"]], "polars.LazyFrame.pipe": [[648, "polars-lazyframe-pipe"]], "polars.LazyFrame.rename": [[652, "polars-lazyframe-rename"]], "polars.LazyFrame.with_row_count": [[676, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.reverse": [[653, "polars-lazyframe-reverse"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[686, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.LazyFrame.tail": [[666, "polars-lazyframe-tail"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[691, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.LazyFrame.median": [[643, "polars-lazyframe-median"]], "polars.LazyFrame.sum": [[665, "polars-lazyframe-sum"]], "polars.LazyFrame.width": [[673, "polars-lazyframe-width"]], "polars.LazyFrame.min": [[646, "polars-lazyframe-min"]], "polars.LazyFrame.join_asof": [[636, "polars-lazyframe-join-asof"]], "polars.LazyFrame.melt": [[644, "polars-lazyframe-melt"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[680, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.LazyFrame.std": [[664, "polars-lazyframe-std"]], "polars.LazyFrame.update": [[671, "polars-lazyframe-update"]], "polars.LazyFrame.groupby_rolling": [[631, "polars-lazyframe-groupby-rolling"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[689, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[679, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.LazyFrame.sink_parquet": [[661, "polars-lazyframe-sink-parquet"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[685, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[690, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.LazyFrame.head": [[632, "polars-lazyframe-head"]], "polars.LazyFrame.show_graph": [[659, "polars-lazyframe-show-graph"]], "polars.LazyFrame.sort": [[663, "polars-lazyframe-sort"]], "polars.LazyFrame.shift_and_fill": [[658, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.slice": [[662, "polars-lazyframe-slice"]], "polars.LazyFrame.var": [[672, "polars-lazyframe-var"]], "polars.LazyFrame.take_every": [[667, "polars-lazyframe-take-every"]], "polars.LazyFrame.inspect": [[633, "polars-lazyframe-inspect"]], "polars.cumreduce": [[557, "polars-cumreduce"]], "polars.Expr.suffix": [[525, "polars-expr-suffix"]], "polars.Expr.xor": [[541, "polars-expr-xor"]], "polars.cumfold": [[556, "polars-cumfold"]], "polars.coalesce": [[549, "polars-coalesce"]], "polars.Expr.str.strptime": [[514, "polars-expr-str-strptime"]], "polars.Expr.str.n_chars": [[502, "polars-expr-str-n-chars"]], "polars.Expr.take": [[528, "polars-expr-take"]], "polars.Expr.str.json_extract": [[497, "polars-expr-str-json-extract"]], "polars.Expr.str.json_path_match": [[498, "polars-expr-str-json-path-match"]], "polars.Expr.str.splitn": [[511, "polars-expr-str-splitn"]], "polars.Expr.unique": [[535, "polars-expr-unique"]], "polars.arg_sort_by": [[547, "polars-arg-sort-by"]], "polars.Expr.sub": [[524, "polars-expr-sub"]], "polars.Expr.str.slice": [[508, "polars-expr-str-slice"]], "polars.Expr.str.rstrip": [[507, "polars-expr-str-rstrip"]], "polars.Expr.str.starts_with": [[512, "polars-expr-str-starts-with"]], "polars.Expr.str.replace": [[504, "polars-expr-str-replace"]], "polars.Expr.sum": [[526, "polars-expr-sum"]], "polars.Expr.str.lengths": [[499, "polars-expr-str-lengths"]], "polars.concat_str": [[552, "polars-concat-str"]], "polars.Expr.str.count_match": [[490, "polars-expr-str-count-match"]], "polars.avg": [[548, "polars-avg"]], "polars.Expr.str.rjust": [[506, "polars-expr-str-rjust"]], "polars.Expr.str.to_date": [[515, "polars-expr-str-to-date"]], "polars.Expr.str.to_time": [[519, "polars-expr-str-to-time"]], "polars.Expr.tan": [[530, "polars-expr-tan"]], "polars.col": [[550, "polars-col"]], "polars.cov": [[555, "polars-cov"]], "polars.all": [[542, "polars-all"]], "polars.Expr.top_k": [[533, "polars-expr-top-k"]], "polars.Expr.str.strip": [[513, "polars-expr-str-strip"]], "polars.Expr.tail": [[527, "polars-expr-tail"]], "polars.Expr.truediv": [[534, "polars-expr-truediv"]], "polars.date": [[559, "polars-date"]], "polars.Expr.unique_counts": [[536, "polars-expr-unique-counts"]], "polars.Expr.str.to_lowercase": [[518, "polars-expr-str-to-lowercase"]], "polars.Expr.str.ljust": [[500, "polars-expr-str-ljust"]], "polars.Expr.str.to_decimal": [[517, "polars-expr-str-to-decimal"]], "polars.arange": [[546, "polars-arange"]], "polars.Expr.str.split": [[509, "polars-expr-str-split"]], "polars.Expr.value_counts": [[538, "polars-expr-value-counts"]], "polars.Expr.str.ends_with": [[493, "polars-expr-str-ends-with"]], "polars.Expr.str.zfill": [[521, "polars-expr-str-zfill"]], "polars.Expr.where": [[540, "polars-expr-where"]], "polars.concat_list": [[551, "polars-concat-list"]], "polars.cumsum": [[558, "polars-cumsum"]], "polars.Expr.str.explode": [[494, "polars-expr-str-explode"]], "polars.Expr.str.parse_int": [[503, "polars-expr-str-parse-int"]], "polars.approx_unique": [[545, "polars-approx-unique"]], "polars.Expr.str.encode": [[492, "polars-expr-str-encode"]], "polars.Expr.str.decode": [[491, "polars-expr-str-decode"]], "polars.corr": [[553, "polars-corr"]], "polars.Expr.to_physical": [[532, "polars-expr-to-physical"]], "polars.Expr.str.replace_all": [[505, "polars-expr-str-replace-all"]], "polars.Expr.take_every": [[529, "polars-expr-take-every"]], "polars.any": [[543, "polars-any"]], "polars.Expr.tanh": [[531, "polars-expr-tanh"]], "polars.Expr.str.extract_all": [[496, "polars-expr-str-extract-all"]], "polars.Expr.str.extract": [[495, "polars-expr-str-extract"]], "polars.Expr.str.to_uppercase": [[520, "polars-expr-str-to-uppercase"]], "polars.Expr.struct.field": [[522, "polars-expr-struct-field"]], "polars.Expr.str.to_datetime": [[516, "polars-expr-str-to-datetime"]], "polars.Expr.var": [[539, "polars-expr-var"]], "polars.apply": [[544, "polars-apply"]], "polars.Expr.struct.rename_fields": [[523, "polars-expr-struct-rename-fields"]], "polars.Expr.str.lstrip": [[501, "polars-expr-str-lstrip"]], "polars.count": [[554, "polars-count"]], "polars.Expr.str.split_exact": [[510, "polars-expr-str-split-exact"]], "polars.Expr.upper_bound": [[537, "polars-expr-upper-bound"]], "polars.Expr.meta.has_multiple_outputs": [[431, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.shuffle": [[478, "polars-expr-shuffle"]], "polars.Expr.sort": [[484, "polars-expr-sort"]], "polars.Expr.n_unique": [[442, "polars-expr-n-unique"]], "polars.Expr.meta.is_regex_projection": [[432, "polars-expr-meta-is-regex-projection"]], "polars.Expr.map": [[424, "polars-expr-map"]], "polars.Expr.str.concat": [[488, "polars-expr-str-concat"]], "polars.Expr.log1p": [[421, "polars-expr-log1p"]], "polars.Expr.meta.eq": [[430, "polars-expr-meta-eq"]], "polars.Expr.reinterpret": [[457, "polars-expr-reinterpret"]], "polars.Expr.null_count": [[446, "polars-expr-null-count"]], "polars.Expr.round": [[471, "polars-expr-round"]], "polars.Expr.log10": [[420, "polars-expr-log10"]], "polars.Expr.set_sorted": [[474, "polars-expr-set-sorted"]], "polars.Expr.nan_max": [[443, "polars-expr-nan-max"]], "polars.Expr.rechunk": [[456, "polars-expr-rechunk"]], "polars.Expr.sample": [[472, "polars-expr-sample"]], "polars.Expr.lt": [[423, "polars-expr-lt"]], "polars.Expr.median": [[429, "polars-expr-median"]], "polars.Expr.shift_and_fill": [[476, "polars-expr-shift-and-fill"]], "polars.Expr.repeat_by": [[458, "polars-expr-repeat-by"]], "polars.Expr.rolling_sum": [[469, "polars-expr-rolling-sum"]], "polars.Expr.search_sorted": [[473, "polars-expr-search-sorted"]], "polars.Expr.meta.output_name": [[434, "polars-expr-meta-output-name"]], "polars.Expr.over": [[448, "polars-expr-over"]], "polars.Expr.reverse": [[460, "polars-expr-reverse"]], "polars.Expr.rolling_quantile": [[466, "polars-expr-rolling-quantile"]], "polars.Expr.slice": [[483, "polars-expr-slice"]], "polars.Expr.meta.ne": [[433, "polars-expr-meta-ne"]], "polars.Expr.rolling_std": [[468, "polars-expr-rolling-std"]], "polars.Expr.shift": [[475, "polars-expr-shift"]], "polars.Expr.sqrt": [[486, "polars-expr-sqrt"]], "polars.Expr.rolling_var": [[470, "polars-expr-rolling-var"]], "polars.Expr.str.contains": [[489, "polars-expr-str-contains"]], "polars.Expr.sign": [[479, "polars-expr-sign"]], "polars.Expr.mod": [[439, "polars-expr-mod"]], "polars.Expr.pct_change": [[449, "polars-expr-pct-change"]], "polars.Expr.sin": [[480, "polars-expr-sin"]], "polars.Expr.sort_by": [[485, "polars-expr-sort-by"]], "polars.Expr.mode": [[440, "polars-expr-mode"]], "polars.Expr.mul": [[441, "polars-expr-mul"]], "polars.Expr.min": [[438, "polars-expr-min"]], "polars.Expr.nan_min": [[444, "polars-expr-nan-min"]], "polars.Expr.rolling_max": [[462, "polars-expr-rolling-max"]], "polars.Expr.shrink_dtype": [[477, "polars-expr-shrink-dtype"]], "polars.Expr.or_": [[447, "polars-expr-or"]], "polars.Expr.std": [[487, "polars-expr-std"]], "polars.Expr.quantile": [[454, "polars-expr-quantile"]], "polars.Expr.meta.undo_aliases": [[437, "polars-expr-meta-undo-aliases"]], "polars.Expr.pipe": [[450, "polars-expr-pipe"]], "polars.Expr.rank": [[455, "polars-expr-rank"]], "polars.Expr.meta.pop": [[435, "polars-expr-meta-pop"]], "polars.Expr.product": [[453, "polars-expr-product"]], "polars.Expr.mean": [[428, "polars-expr-mean"]], "polars.Expr.rolling_mean": [[463, "polars-expr-rolling-mean"]], "polars.Expr.sinh": [[481, "polars-expr-sinh"]], "polars.Expr.skew": [[482, "polars-expr-skew"]], "polars.Expr.lower_bound": [[422, "polars-expr-lower-bound"]], "polars.Expr.rolling_min": [[465, "polars-expr-rolling-min"]], "polars.Expr.meta.root_names": [[436, "polars-expr-meta-root-names"]], "polars.Expr.rolling_skew": [[467, "polars-expr-rolling-skew"]], "polars.Expr.prefix": [[452, "polars-expr-prefix"]], "polars.Expr.ne": [[445, "polars-expr-ne"]], "polars.Expr.max": [[427, "polars-expr-max"]], "polars.Expr.rolling_median": [[464, "polars-expr-rolling-median"]], "polars.Expr.pow": [[451, "polars-expr-pow"]], "polars.Expr.map_alias": [[425, "polars-expr-map-alias"]], "polars.Expr.reshape": [[459, "polars-expr-reshape"]], "polars.Expr.map_dict": [[426, "polars-expr-map-dict"]], "polars.Expr.rolling_apply": [[461, "polars-expr-rolling-apply"]], "polars.Expr.hash": [[370, "polars-expr-hash"]], "polars.Expr.gt": [[369, "polars-expr-gt"]], "polars.Expr.list.max": [[407, "polars-expr-list-max"]], "polars.Expr.dt.year": [[350, "polars-expr-dt-year"]], "polars.Expr.limit": [[392, "polars-expr-limit"]], "polars.Expr.is_first": [[378, "polars-expr-is-first"]], "polars.Expr.first": [[363, "polars-expr-first"]], "polars.Expr.floordiv": [[366, "polars-expr-floordiv"]], "polars.Expr.is_infinite": [[380, "polars-expr-is-infinite"]], "polars.Expr.list.shift": [[411, "polars-expr-list-shift"]], "polars.Expr.list.lengths": [[406, "polars-expr-list-lengths"]], "polars.Expr.filter": [[362, "polars-expr-filter"]], "polars.Expr.is_duplicated": [[376, "polars-expr-is-duplicated"]], "polars.Expr.ge": [[368, "polars-expr-ge"]], "polars.Expr.is_not_null": [[384, "polars-expr-is-not-null"]], "polars.Expr.floor": [[365, "polars-expr-floor"]], "polars.Expr.list.explode": [[400, "polars-expr-list-explode"]], "polars.Expr.interpolate": [[374, "polars-expr-interpolate"]], "polars.Expr.len": [[391, "polars-expr-len"]], "polars.Expr.kurtosis": [[388, "polars-expr-kurtosis"]], "polars.Expr.is_nan": [[381, "polars-expr-is-nan"]], "polars.Expr.exp": [[357, "polars-expr-exp"]], "polars.Expr.list.arg_max": [[393, "polars-expr-list-arg-max"]], "polars.Expr.is_in": [[379, "polars-expr-is-in"]], "polars.Expr.exclude": [[356, "polars-expr-exclude"]], "polars.Expr.list.slice": [[412, "polars-expr-list-slice"]], "polars.Expr.list.sort": [[413, "polars-expr-list-sort"]], "polars.Expr.is_unique": [[386, "polars-expr-is-unique"]], "polars.Expr.flatten": [[364, "polars-expr-flatten"]], "polars.Expr.head": [[371, "polars-expr-head"]], "polars.Expr.le": [[390, "polars-expr-le"]], "polars.Expr.list.first": [[401, "polars-expr-list-first"]], "polars.Expr.fill_nan": [[360, "polars-expr-fill-nan"]], "polars.Expr.fill_null": [[361, "polars-expr-fill-null"]], "polars.Expr.list.tail": [[415, "polars-expr-list-tail"]], "polars.Expr.list.get": [[402, "polars-expr-list-get"]], "polars.Expr.is_finite": [[377, "polars-expr-is-finite"]], "polars.Expr.is_not": [[382, "polars-expr-is-not"]], "polars.Expr.inspect": [[373, "polars-expr-inspect"]], "polars.Expr.list.eval": [[399, "polars-expr-list-eval"]], "polars.Expr.is_between": [[375, "polars-expr-is-between"]], "polars.Expr.list.count_match": [[397, "polars-expr-list-count-match"]], "polars.Expr.list.last": [[405, "polars-expr-list-last"]], "polars.Expr.list.diff": [[398, "polars-expr-list-diff"]], "polars.Expr.is_null": [[385, "polars-expr-is-null"]], "polars.Expr.list.head": [[403, "polars-expr-list-head"]], "polars.Expr.list.mean": [[408, "polars-expr-list-mean"]], "polars.Expr.keep_name": [[387, "polars-expr-keep-name"]], "polars.Expr.list.join": [[404, "polars-expr-list-join"]], "polars.Expr.ewm_mean": [[353, "polars-expr-ewm-mean"]], "polars.Expr.ewm_var": [[355, "polars-expr-ewm-var"]], "polars.Expr.explode": [[358, "polars-expr-explode"]], "polars.Expr.entropy": [[351, "polars-expr-entropy"]], "polars.Expr.list.contains": [[396, "polars-expr-list-contains"]], "polars.Expr.list.take": [[416, "polars-expr-list-take"]], "polars.Expr.list.unique": [[418, "polars-expr-list-unique"]], "polars.Expr.last": [[389, "polars-expr-last"]], "polars.Expr.list.reverse": [[410, "polars-expr-list-reverse"]], "polars.Expr.log": [[419, "polars-expr-log"]], "polars.Expr.ewm_std": [[354, "polars-expr-ewm-std"]], "polars.Expr.list.sum": [[414, "polars-expr-list-sum"]], "polars.Expr.list.arg_min": [[394, "polars-expr-list-arg-min"]], "polars.Expr.list.concat": [[395, "polars-expr-list-concat"]], "polars.Expr.implode": [[372, "polars-expr-implode"]], "polars.Expr.list.to_struct": [[417, "polars-expr-list-to-struct"]], "polars.Expr.eq": [[352, "polars-expr-eq"]], "polars.Expr.extend_constant": [[359, "polars-expr-extend-constant"]], "polars.Expr.list.min": [[409, "polars-expr-list-min"]], "polars.Expr.forward_fill": [[367, "polars-expr-forward-fill"]], "polars.Expr.is_not_nan": [[383, "polars-expr-is-not-nan"]], "polars.LazyFrame.drop": [[618, "polars-lazyframe-drop"]], "polars.time": [[588, "polars-time"]], "polars.LazyFrame.clone": [[615, "polars-lazyframe-clone"]], "polars.rolling_corr": [[581, "polars-rolling-corr"]], "polars.var": [[589, "polars-var"]], "Meta": [[600, "meta"]], "polars.lit": [[571, "polars-lit"]], "polars.duration": [[561, "polars-duration"]], "polars.rolling_cov": [[582, "polars-rolling-cov"]], "polars.exclude": [[563, "polars-exclude"]], "polars.LazyFrame.fill_null": [[625, "polars-lazyframe-fill-null"]], "polars.fold": [[565, "polars-fold"]], "polars.reduce": [[579, "polars-reduce"]], "polars.head": [[569, "polars-head"]], "polars.LazyFrame.clear": [[614, "polars-lazyframe-clear"]], "polars.implode": [[570, "polars-implode"]], "polars.when": [[590, "polars-when"]], "Expressions": [[598, "expressions"]], "polars.LazyFrame.first": [[627, "polars-lazyframe-first"]], "polars.mean": [[574, "polars-mean"]], "Operators": [[603, "operators"]], "Conjunction": [[603, "conjunction"]], "Comparison": [[603, "comparison"]], "Numeric": [[603, "numeric"], [257, "numeric"]], "polars.LazyFrame.columns": [[617, "polars-lazyframe-columns"]], "polars.from_epoch": [[567, "polars-from-epoch"]], "polars.LazyFrame.bottom_k": [[612, "polars-lazyframe-bottom-k"]], "Columns / names": [[595, "columns-names"]], "polars.LazyFrame.explain": [[621, "polars-lazyframe-explain"]], "polars.n_unique": [[577, "polars-n-unique"]], "polars.quantile": [[578, "polars-quantile"]], "polars.median": [[575, "polars-median"]], "Input/output": [[610, "input-output"]], "CSV": [[610, "csv"]], "Feather/ IPC": [[610, "feather-ipc"]], "Parquet": [[610, "parquet"]], "Database": [[610, "database"]], "JSON": [[610, "json"]], "AVRO": [[610, "avro"]], "Excel": [[610, "excel"]], "Delta Lake": [[610, "delta-lake"]], "Datasets": [[610, "datasets"]], "BatchedCsvReader": [[610, "batchedcsvreader"]], "polars.LazyFrame.fill_nan": [[624, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.from_json": [[628, "polars-lazyframe-from-json"]], "API reference": [[609, "api-reference"]], "polars.LazyFrame.drop_nulls": [[619, "polars-lazyframe-drop-nulls"]], "polars.std": [[584, "polars-std"]], "polars.LazyFrame.dtypes": [[620, "polars-lazyframe-dtypes"]], "polars.element": [[562, "polars-element"]], "polars.LazyFrame.explode": [[622, "polars-lazyframe-explode"]], "polars.LazyFrame.cache": [[613, "polars-lazyframe-cache"]], "polars.LazyFrame.filter": [[626, "polars-lazyframe-filter"]], "polars.sum": [[586, "polars-sum"]], "polars.select": [[583, "polars-select"]], "polars.groups": [[568, "polars-groups"]], "polars.LazyFrame.groupby": [[629, "polars-lazyframe-groupby"]], "polars.repeat": [[580, "polars-repeat"]], "polars.LazyFrame.fetch": [[623, "polars-lazyframe-fetch"]], "polars.map": [[572, "polars-map"]], "polars.tail": [[587, "polars-tail"]], "Functions": [[608, "functions"], [597, "functions"]], "Conversion": [[608, "conversion"]], "Eager/Lazy functions": [[608, "eager-lazy-functions"]], "Parallelization": [[608, "parallelization"]], "StringCache": [[608, "stringcache"]], "polars.datetime": [[560, "polars-datetime"]], "polars.struct": [[585, "polars-struct"]], "polars.format": [[566, "polars-format"]], "Window": [[607, "window"]], "polars.min": [[576, "polars-min"]], "polars.max": [[573, "polars-max"]], "polars.LazyFrame.collect": [[616, "polars-lazyframe-collect"]], "polars.first": [[564, "polars-first"]], "polars.Expr.count": [[301, "polars-expr-count"]], "polars.Expr.dt.is_leap_year": [[322, "polars-expr-dt-is-leap-year"]], "polars.Expr.bin.contains": [[286, "polars-expr-bin-contains"]], "polars.Expr.drop_nulls": [[311, "polars-expr-drop-nulls"]], "polars.Expr.cummin": [[304, "polars-expr-cummin"]], "polars.Expr.bin.ends_with": [[289, "polars-expr-bin-ends-with"]], "polars.Expr.backward_fill": [[285, "polars-expr-backward-fill"]], "polars.Expr.dt.minutes": [[329, "polars-expr-dt-minutes"]], "polars.Expr.dt.nanosecond": [[333, "polars-expr-dt-nanosecond"]], "polars.Expr.cosh": [[300, "polars-expr-cosh"]], "polars.Expr.dt.convert_time_zone": [[314, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.minute": [[328, "polars-expr-dt-minute"]], "polars.Expr.dt.time": [[343, "polars-expr-dt-time"]], "polars.Expr.cat.set_ordering": [[294, "polars-expr-cat-set-ordering"]], "polars.Expr.bin.encode": [[288, "polars-expr-bin-encode"]], "polars.Expr.cos": [[299, "polars-expr-cos"]], "polars.Expr.arr.min": [[282, "polars-expr-arr-min"]], "polars.Expr.drop_nans": [[310, "polars-expr-drop-nans"]], "polars.Expr.dt.iso_year": [[323, "polars-expr-dt-iso-year"]], "polars.Expr.cumsum": [[306, "polars-expr-cumsum"]], "polars.Expr.clip": [[296, "polars-expr-clip"]], "polars.Expr.cumulative_eval": [[307, "polars-expr-cumulative-eval"]], "polars.Expr.bin.starts_with": [[290, "polars-expr-bin-starts-with"]], "polars.Expr.dt.days": [[318, "polars-expr-dt-days"]], "polars.Expr.dt.microsecond": [[324, "polars-expr-dt-microsecond"]], "polars.Expr.dt.hours": [[321, "polars-expr-dt-hours"]], "polars.Expr.dt.second": [[340, "polars-expr-dt-second"]], "polars.Expr.dt.seconds": [[341, "polars-expr-dt-seconds"]], "polars.Expr.dt.to_string": [[345, "polars-expr-dt-to-string"]], "polars.Expr.dt.day": [[317, "polars-expr-dt-day"]], "polars.Expr.dt.combine": [[313, "polars-expr-dt-combine"]], "polars.Expr.dt.month_start": [[332, "polars-expr-dt-month-start"]], "polars.Expr.dt.round": [[339, "polars-expr-dt-round"]], "polars.Expr.arr.unique": [[284, "polars-expr-arr-unique"]], "polars.Expr.dt.datetime": [[316, "polars-expr-dt-datetime"]], "polars.Expr.diff": [[308, "polars-expr-diff"]], "polars.Expr.dt.strftime": [[342, "polars-expr-dt-strftime"]], "polars.Expr.dt.quarter": [[337, "polars-expr-dt-quarter"]], "polars.Expr.dt.truncate": [[346, "polars-expr-dt-truncate"]], "polars.Expr.bottom_k": [[291, "polars-expr-bottom-k"]], "polars.Expr.dt.week": [[347, "polars-expr-dt-week"]], "polars.Expr.clip_min": [[298, "polars-expr-clip-min"]], "polars.Expr.cumprod": [[305, "polars-expr-cumprod"]], "polars.Expr.dt.epoch": [[319, "polars-expr-dt-epoch"]], "polars.Expr.dt.cast_time_unit": [[312, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.hour": [[320, "polars-expr-dt-hour"]], "polars.Expr.dt.month_end": [[331, "polars-expr-dt-month-end"]], "polars.Expr.arr.sum": [[283, "polars-expr-arr-sum"]], "polars.Expr.dt.microseconds": [[325, "polars-expr-dt-microseconds"]], "polars.Expr.dt.ordinal_day": [[336, "polars-expr-dt-ordinal-day"]], "polars.Expr.cache": [[292, "polars-expr-cache"]], "polars.Expr.cumcount": [[302, "polars-expr-cumcount"]], "polars.Expr.clip_max": [[297, "polars-expr-clip-max"]], "polars.Expr.cummax": [[303, "polars-expr-cummax"]], "polars.Expr.dt.month": [[330, "polars-expr-dt-month"]], "polars.Expr.dt.millisecond": [[326, "polars-expr-dt-millisecond"]], "polars.Expr.dt.weekday": [[348, "polars-expr-dt-weekday"]], "polars.Expr.arg_unique": [[280, "polars-expr-arg-unique"]], "polars.Expr.bin.decode": [[287, "polars-expr-bin-decode"]], "polars.Expr.dt.nanoseconds": [[334, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.with_time_unit": [[349, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.replace_time_zone": [[338, "polars-expr-dt-replace-time-zone"]], "polars.Expr.ceil": [[295, "polars-expr-ceil"]], "polars.Expr.dt.offset_by": [[335, "polars-expr-dt-offset-by"]], "polars.Expr.dt.date": [[315, "polars-expr-dt-date"]], "polars.Expr.dot": [[309, "polars-expr-dot"]], "polars.Expr.arr.max": [[281, "polars-expr-arr-max"]], "polars.Expr.cast": [[293, "polars-expr-cast"]], "polars.Expr.dt.milliseconds": [[327, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.timestamp": [[344, "polars-expr-dt-timestamp"]], "polars.DataFrame.is_empty": [[168, "polars-dataframe-is-empty"]], "polars.DataFrame.schema": [[199, "polars-dataframe-schema"]], "polars.DataFrame.frame_equal": [[154, "polars-dataframe-frame-equal"]], "polars.DataFrame.estimated_size": [[146, "polars-dataframe-estimated-size"]], "polars.DataFrame.merge_sorted": [[181, "polars-dataframe-merge-sorted"]], "polars.DataFrame.get_column": [[155, "polars-dataframe-get-column"]], "polars.DataFrame.lazy": [[175, "polars-dataframe-lazy"]], "polars.DataFrame.pivot": [[188, "polars-dataframe-pivot"]], "polars.DataFrame.sample": [[198, "polars-dataframe-sample"]], "polars.DataFrame.reverse": [[195, "polars-dataframe-reverse"]], "polars.DataFrame.drop_nulls": [[144, "polars-dataframe-drop-nulls"]], "polars.DataFrame.groupby_rolling": [[160, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.replace": [[193, "polars-dataframe-replace"]], "polars.DataFrame.median": [[179, "polars-dataframe-median"]], "polars.DataFrame.n_unique": [[184, "polars-dataframe-n-unique"]], "polars.DataFrame.select": [[200, "polars-dataframe-select"]], "polars.DataFrame.pipe": [[187, "polars-dataframe-pipe"]], "polars.DataFrame.replace_at_idx": [[194, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.dtypes": [[145, "polars-dataframe-dtypes"]], "polars.DataFrame.quantile": [[190, "polars-dataframe-quantile"]], "polars.DataFrame.drop": [[142, "polars-dataframe-drop"]], "polars.DataFrame.partition_by": [[186, "polars-dataframe-partition-by"]], "polars.DataFrame.rechunk": [[191, "polars-dataframe-rechunk"]], "polars.DataFrame.head": [[162, "polars-dataframe-head"]], "polars.DataFrame.null_count": [[185, "polars-dataframe-null-count"]], "polars.DataFrame.extend": [[148, "polars-dataframe-extend"]], "polars.DataFrame.shape": [[202, "polars-dataframe-shape"]], "polars.DataFrame.slice": [[206, "polars-dataframe-slice"]], "polars.DataFrame.sum": [[209, "polars-dataframe-sum"]], "polars.DataFrame.fill_null": [[150, "polars-dataframe-fill-null"]], "polars.DataFrame.groupby": [[158, "polars-dataframe-groupby"]], "polars.DataFrame.item": [[170, "polars-dataframe-item"]], "polars.DataFrame.iter_rows": [[171, "polars-dataframe-iter-rows"]], "polars.DataFrame.is_unique": [[169, "polars-dataframe-is-unique"]], "polars.DataFrame.shrink_to_fit": [[205, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.fill_nan": [[149, "polars-dataframe-fill-nan"]], "polars.DataFrame.mean": [[178, "polars-dataframe-mean"]], "polars.DataFrame.limit": [[176, "polars-dataframe-limit"]], "polars.DataFrame.n_chunks": [[183, "polars-dataframe-n-chunks"]], "polars.DataFrame.hstack": [[164, "polars-dataframe-hstack"]], "polars.DataFrame.is_duplicated": [[167, "polars-dataframe-is-duplicated"]], "polars.DataFrame.product": [[189, "polars-dataframe-product"]], "polars.DataFrame.hash_rows": [[161, "polars-dataframe-hash-rows"]], "polars.DataFrame.join_asof": [[174, "polars-dataframe-join-asof"]], "polars.DataFrame.rows": [[197, "polars-dataframe-rows"]], "polars.DataFrame.row": [[196, "polars-dataframe-row"]], "polars.DataFrame.filter": [[151, "polars-dataframe-filter"]], "polars.DataFrame.min": [[182, "polars-dataframe-min"]], "polars.DataFrame.find_idx_by_name": [[152, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.drop_in_place": [[143, "polars-dataframe-drop-in-place"]], "polars.DataFrame.glimpse": [[157, "polars-dataframe-glimpse"]], "polars.DataFrame.height": [[163, "polars-dataframe-height"]], "polars.DataFrame.shift_and_fill": [[204, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.get_columns": [[156, "polars-dataframe-get-columns"]], "polars.DataFrame.set_sorted": [[201, "polars-dataframe-set-sorted"]], "polars.DataFrame.corr": [[140, "polars-dataframe-corr"]], "polars.DataFrame.groupby_dynamic": [[159, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.max": [[177, "polars-dataframe-max"]], "polars.DataFrame.std": [[208, "polars-dataframe-std"]], "polars.DataFrame.interpolate": [[166, "polars-dataframe-interpolate"]], "polars.DataFrame.sort": [[207, "polars-dataframe-sort"]], "polars.DataFrame.describe": [[141, "polars-dataframe-describe"]], "polars.DataFrame.fold": [[153, "polars-dataframe-fold"]], "polars.DataFrame.shift": [[203, "polars-dataframe-shift"]], "polars.DataFrame.join": [[173, "polars-dataframe-join"]], "polars.DataFrame.explode": [[147, "polars-dataframe-explode"]], "polars.DataFrame.insert_at_idx": [[165, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.iter_slices": [[172, "polars-dataframe-iter-slices"]], "polars.DataFrame.melt": [[180, "polars-dataframe-melt"]], "polars.DataFrame.rename": [[192, "polars-dataframe-rename"]], "Exceptions": [[258, "exceptions"]], "polars.Expr.approx_unique": [[269, "polars-expr-approx-unique"]], "polars.Expr.arg_sort": [[278, "polars-expr-arg-sort"]], "polars.DataFrame.with_columns": [[231, "polars-dataframe-with-columns"]], "polars.Expr.arg_min": [[277, "polars-expr-arg-min"]], "polars.DataFrame.unique": [[223, "polars-dataframe-unique"]], "polars.dataframe.groupby.GroupBy.max": [[241, "polars-dataframe-groupby-groupby-max"]], "polars.dataframe.groupby.GroupBy.apply": [[236, "polars-dataframe-groupby-groupby-apply"]], "polars.Expr.arccos": [[270, "polars-expr-arccos"]], "polars.Expr.arcsin": [[272, "polars-expr-arcsin"]], "polars.dataframe.groupby.GroupBy.median": [[243, "polars-dataframe-groupby-groupby-median"]], "polars.Expr.append": [[267, "polars-expr-append"]], "polars.dataframe.groupby.GroupBy.all": [[235, "polars-dataframe-groupby-groupby-all"]], "polars.Expr.arctanh": [[275, "polars-expr-arctanh"]], "polars.DataFrame.unstack": [[225, "polars-dataframe-unstack"]], "polars.DataFrame.transpose": [[222, "polars-dataframe-transpose"]], "polars.DataFrame.with_row_count": [[232, "polars-dataframe-with-row-count"]], "polars.dataframe.groupby.GroupBy.sum": [[247, "polars-dataframe-groupby-groupby-sum"]], "polars.Expr.any": [[266, "polars-expr-any"]], "polars.Expr.arcsinh": [[273, "polars-expr-arcsinh"]], "polars.DataFrame.top_k": [[221, "polars-dataframe-top-k"]], "polars.DataFrame.to_series": [[219, "polars-dataframe-to-series"]], "DataFrame": [[254, "dataframe"]], "polars.Expr.apply": [[268, "polars-expr-apply"]], "polars.dataframe.groupby.GroupBy.count": [[237, "polars-dataframe-groupby-groupby-count"]], "polars.Expr.alias": [[263, "polars-expr-alias"]], "polars.DataFrame.vstack": [[229, "polars-dataframe-vstack"]], "polars.dataframe.groupby.GroupBy.agg": [[234, "polars-dataframe-groupby-groupby-agg"]], "polars.dataframe.groupby.GroupBy.quantile": [[246, "polars-dataframe-groupby-groupby-quantile"]], "polars.dataframe.groupby.GroupBy.last": [[240, "polars-dataframe-groupby-groupby-last"]], "polars.Expr.arctan": [[274, "polars-expr-arctan"]], "polars.DataFrame.to_dict": [[213, "polars-dataframe-to-dict"]], "polars.Expr.abs": [[260, "polars-expr-abs"]], "polars.Expr.arccosh": [[271, "polars-expr-arccosh"]], "polars.dataframe.groupby.GroupBy.first": [[238, "polars-dataframe-groupby-groupby-first"]], "polars.dataframe.groupby.GroupBy.min": [[244, "polars-dataframe-groupby-groupby-min"]], "polars.Expr.and_": [[265, "polars-expr-and"]], "polars.DataFrame.unnest": [[224, "polars-dataframe-unnest"]], "polars.DataFrame.width": [[230, "polars-dataframe-width"]], "polars.DataFrame.take_every": [[211, "polars-dataframe-take-every"]], "polars.DataFrame.to_init_repr": [[216, "polars-dataframe-to-init-repr"]], "polars.Expr.all": [[264, "polars-expr-all"]], "polars.Expr.agg_groups": [[262, "polars-expr-agg-groups"]], "polars.dataframe.groupby.GroupBy.__iter__": [[233, "polars-dataframe-groupby-groupby-iter"]], "polars.Expr.arg_max": [[276, "polars-expr-arg-max"]], "polars.DataFrame.upsample": [[227, "polars-dataframe-upsample"]], "polars.DataFrame.to_dummies": [[215, "polars-dataframe-to-dummies"]], "polars.DataFrame.tail": [[210, "polars-dataframe-tail"]], "Data types": [[257, "data-types"]], "Nested": [[257, "nested"]], "Other": [[257, "other"]], "polars.DataFrame.to_dicts": [[214, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_struct": [[220, "polars-dataframe-to-struct"]], "polars.dataframe.groupby.GroupBy.mean": [[242, "polars-dataframe-groupby-groupby-mean"]], "polars.dataframe.groupby.GroupBy.n_unique": [[245, "polars-dataframe-groupby-groupby-n-unique"]], "polars.DataFrame.to_numpy": [[217, "polars-dataframe-to-numpy"]], "polars.Expr.add": [[261, "polars-expr-add"]], "polars.Expr.arg_true": [[279, "polars-expr-arg-true"]], "polars.DataFrame.to_arrow": [[212, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_pandas": [[218, "polars-dataframe-to-pandas"]], "polars.DataFrame.update": [[226, "polars-dataframe-update"]], "polars.DataFrame.var": [[228, "polars-dataframe-var"]], "polars.dataframe.groupby.GroupBy.head": [[239, "polars-dataframe-groupby-groupby-head"]], "polars.dataframe.groupby.GroupBy.tail": [[248, "polars-dataframe-groupby-groupby-tail"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[8, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[9, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[10, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[13, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[14, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[15, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[16, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[17, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[18, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[23, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[24, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[25, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[26, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[27, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[28, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[29, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[30, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[31, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[32, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[33, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[34, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[35, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[36, "polars.DataType"]], "__init__() (polars.datatype method)": [[36, "polars.DataType.__init__"]], "date (class in polars)": [[37, "polars.Date"]], "__init__() (polars.date method)": [[37, "polars.Date.__init__"]], "datetime (class in polars)": [[38, "polars.Datetime"]], "__init__() (polars.datetime method)": [[38, "polars.Datetime.__init__"]], "decimal (class in polars)": [[39, "polars.Decimal"]], "__init__() (polars.decimal method)": [[39, "polars.Decimal.__init__"]], "duration (class in polars)": [[40, "polars.Duration"]], "__init__() (polars.duration method)": [[40, "polars.Duration.__init__"]], "float32 (class in polars)": [[41, "polars.Float32"]], "__init__() (polars.float32 method)": [[41, "polars.Float32.__init__"]], "float64 (class in polars)": [[42, "polars.Float64"]], "__init__() (polars.float64 method)": [[42, "polars.Float64.__init__"]], "int16 (class in polars)": [[43, "polars.Int16"]], "__init__() (polars.int16 method)": [[43, "polars.Int16.__init__"]], "int32 (class in polars)": [[44, "polars.Int32"]], "__init__() (polars.int32 method)": [[44, "polars.Int32.__init__"]], "int64 (class in polars)": [[45, "polars.Int64"]], "__init__() (polars.int64 method)": [[45, "polars.Int64.__init__"]], "int8 (class in polars)": [[46, "polars.Int8"]], "__init__() (polars.int8 method)": [[46, "polars.Int8.__init__"]], "list (class in polars)": [[47, "polars.List"]], "__init__() (polars.list method)": [[47, "polars.List.__init__"]], "null (class in polars)": [[48, "polars.Null"]], "__init__() (polars.null method)": [[48, "polars.Null.__init__"]], "object (class in polars)": [[49, "polars.Object"]], "__init__() (polars.object method)": [[49, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[50, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[51, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[52, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[53, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[54, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[55, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[56, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[56, "polars.StringCache.__init__"]], "struct (class in polars)": [[57, "polars.Struct"]], "__init__() (polars.struct method)": [[57, "polars.Struct.__init__"]], "time (class in polars)": [[58, "polars.Time"]], "__init__() (polars.time method)": [[58, "polars.Time.__init__"]], "uint16 (class in polars)": [[59, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[59, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[60, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[60, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[61, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[61, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[62, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[62, "polars.UInt8.__init__"]], "unknown (class in polars)": [[63, "polars.Unknown"]], "__init__() (polars.unknown method)": [[63, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[64, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[64, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[65, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[66, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[67, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[68, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[69, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[70, "polars.arg_where"]], "build_info() (in module polars)": [[71, "polars.build_info"]], "collect_all() (in module polars)": [[72, "polars.collect_all"]], "concat() (in module polars)": [[73, "polars.concat"]], "date_range() (in module polars)": [[74, "polars.date_range"]], "enable_string_cache() (in module polars)": [[75, "polars.enable_string_cache"]], "arrowerror": [[76, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[77, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[78, "polars.exceptions.ComputeError"]], "duplicateerror": [[79, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[80, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[81, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[82, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[83, "polars.exceptions.PolarsPanicError"]], "rowserror": [[84, "polars.exceptions.RowsError"]], "schemaerror": [[85, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[86, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[87, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[88, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[89, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[90, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[91, "polars.from_dataframe"]], "from_dict() (in module polars)": [[92, "polars.from_dict"]], "from_dicts() (in module polars)": [[93, "polars.from_dicts"]], "from_numpy() (in module polars)": [[94, "polars.from_numpy"]], "from_pandas() (in module polars)": [[95, "polars.from_pandas"]], "from_records() (in module polars)": [[96, "polars.from_records"]], "from_repr() (in module polars)": [[97, "polars.from_repr"]], "get_index_type() (in module polars)": [[98, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[99, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[100, "polars.ones"]], "read_avro() (in module polars)": [[101, "polars.read_avro"]], "read_csv() (in module polars)": [[102, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[103, "polars.read_csv_batched"]], "read_database() (in module polars)": [[104, "polars.read_database"]], "read_delta() (in module polars)": [[105, "polars.read_delta"]], "read_excel() (in module polars)": [[106, "polars.read_excel"]], "read_ipc() (in module polars)": [[107, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[108, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[109, "polars.read_json"]], "read_ndjson() (in module polars)": [[110, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[111, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[112, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[113, "polars.scan_csv"]], "scan_delta() (in module polars)": [[114, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[115, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[116, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[117, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[118, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[119, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[120, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[121, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[122, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[122, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[123, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[124, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[125, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[126, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[127, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[128, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[129, "polars.threadpool_size"]], "time_range() (in module polars)": [[130, "polars.time_range"]], "zeros() (in module polars)": [[131, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[134, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[135, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[136, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[137, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[138, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[139, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[140, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[141, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[142, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[143, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[144, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[145, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[146, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[147, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[148, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[149, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[150, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[151, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[152, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[153, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[154, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[155, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[156, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[157, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[158, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[159, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[160, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[161, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[162, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[163, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[164, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[165, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[166, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[167, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[168, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[169, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[170, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[171, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[172, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[173, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[174, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[175, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[176, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[177, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[178, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[179, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[180, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[181, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[182, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[183, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[184, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[185, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[186, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[187, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[188, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[189, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[190, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[191, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[192, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[193, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[194, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[195, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[196, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[197, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[198, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[199, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[200, "polars.DataFrame.select"]], "set_sorted() (polars.dataframe method)": [[201, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[202, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[203, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[204, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[205, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[206, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[207, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[208, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[209, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[210, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[211, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[212, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[213, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[214, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[215, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[216, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[217, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[218, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[219, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[220, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[221, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[222, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[223, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[224, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[225, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[226, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[227, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[228, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[229, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[230, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[231, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[232, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[241, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[242, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[243, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[244, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[245, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[246, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[247, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[248, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[260, "polars.Expr.abs"]], "add() (polars.expr method)": [[261, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[262, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[263, "polars.Expr.alias"]], "all() (polars.expr method)": [[264, "polars.Expr.all"]], "and_() (polars.expr method)": [[265, "polars.Expr.and_"]], "any() (polars.expr method)": [[266, "polars.Expr.any"]], "append() (polars.expr method)": [[267, "polars.Expr.append"]], "apply() (polars.expr method)": [[268, "polars.Expr.apply"]], "approx_unique() (polars.expr method)": [[269, "polars.Expr.approx_unique"]], "arccos() (polars.expr method)": [[270, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[271, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[272, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[273, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[274, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[275, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[276, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[277, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[278, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[279, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[280, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[281, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[282, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[283, "polars.Expr.arr.sum"]], "unique() (polars.expr.arr method)": [[284, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[285, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[286, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[287, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[288, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[289, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[290, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[291, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[292, "polars.Expr.cache"]], "cast() (polars.expr method)": [[293, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[294, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[295, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[296, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[297, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[298, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[299, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[300, "polars.Expr.cosh"]], "count() (polars.expr method)": [[301, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[302, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[303, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[304, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[305, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[306, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[307, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[308, "polars.Expr.diff"]], "dot() (polars.expr method)": [[309, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[310, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[311, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[312, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[313, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[314, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[315, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[316, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[317, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[318, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[319, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[320, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[321, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[322, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[323, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[324, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[325, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[326, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[327, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[328, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[329, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[330, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[331, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[332, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[333, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[334, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[335, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[336, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[337, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[338, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[339, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[340, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[341, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[342, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[343, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[344, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[345, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[346, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[347, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[348, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[349, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[350, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[351, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[352, "polars.Expr.eq"]], "ewm_mean() (polars.expr method)": [[353, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[354, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[355, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[356, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[357, "polars.Expr.exp"]], "explode() (polars.expr method)": [[358, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[359, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[360, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[361, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[362, "polars.Expr.filter"]], "first() (polars.expr method)": [[363, "polars.Expr.first"]], "flatten() (polars.expr method)": [[364, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[365, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[366, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[367, "polars.Expr.forward_fill"]], "ge() (polars.expr method)": [[368, "polars.Expr.ge"]], "gt() (polars.expr method)": [[369, "polars.Expr.gt"]], "hash() (polars.expr method)": [[370, "polars.Expr.hash"]], "head() (polars.expr method)": [[371, "polars.Expr.head"]], "implode() (polars.expr method)": [[372, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[373, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[374, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[375, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[376, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[377, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[378, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[379, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[380, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[381, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[382, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[383, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[384, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[385, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[386, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[387, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[388, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[389, "polars.Expr.last"]], "le() (polars.expr method)": [[390, "polars.Expr.le"]], "len() (polars.expr method)": [[391, "polars.Expr.len"]], "limit() (polars.expr method)": [[392, "polars.Expr.limit"]], "arg_max() (polars.expr.list method)": [[393, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[394, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[395, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[396, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[397, "polars.Expr.list.count_match"]], "diff() (polars.expr.list method)": [[398, "polars.Expr.list.diff"]], "eval() (polars.expr.list method)": [[399, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[400, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[401, "polars.Expr.list.first"]], "get() (polars.expr.list method)": [[402, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[403, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[404, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[405, "polars.Expr.list.last"]], "lengths() (polars.expr.list method)": [[406, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[407, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[408, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[409, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[410, "polars.Expr.list.reverse"]], "shift() (polars.expr.list method)": [[411, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[412, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[413, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[414, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[415, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[416, "polars.Expr.list.take"]], "to_struct() (polars.expr.list method)": [[417, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[418, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[419, "polars.Expr.log"]], "log10() (polars.expr method)": [[420, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[421, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[422, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[423, "polars.Expr.lt"]], "map() (polars.expr method)": [[424, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[425, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[426, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[427, "polars.Expr.max"]], "mean() (polars.expr method)": [[428, "polars.Expr.mean"]], "median() (polars.expr method)": [[429, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[430, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[431, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[432, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[433, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[434, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[435, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[436, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[437, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[438, "polars.Expr.min"]], "mod() (polars.expr method)": [[439, "polars.Expr.mod"]], "mode() (polars.expr method)": [[440, "polars.Expr.mode"]], "mul() (polars.expr method)": [[441, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[442, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[443, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[444, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[445, "polars.Expr.ne"]], "null_count() (polars.expr method)": [[446, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[447, "polars.Expr.or_"]], "over() (polars.expr method)": [[448, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[449, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[450, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[451, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[452, "polars.Expr.prefix"]], "product() (polars.expr method)": [[453, "polars.Expr.product"]], "quantile() (polars.expr method)": [[454, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[455, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[456, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[457, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[458, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[459, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[460, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[461, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[462, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[463, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[464, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[465, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[466, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[467, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[468, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[469, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[470, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[471, "polars.Expr.round"]], "sample() (polars.expr method)": [[472, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[473, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[474, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[475, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[476, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[477, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[478, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[479, "polars.Expr.sign"]], "sin() (polars.expr method)": [[480, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[481, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[482, "polars.Expr.skew"]], "slice() (polars.expr method)": [[483, "polars.Expr.slice"]], "sort() (polars.expr method)": [[484, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[485, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[486, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[487, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[488, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[489, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[490, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[491, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[492, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[493, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[494, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[495, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[496, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[497, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[498, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[499, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[500, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[501, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[502, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[503, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[504, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[505, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[506, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[507, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[508, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[509, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[510, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[511, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[512, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[513, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[514, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[515, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[516, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[517, "polars.Expr.str.to_decimal"]], "to_lowercase() (polars.expr.str method)": [[518, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[519, "polars.Expr.str.to_time"]], "to_uppercase() (polars.expr.str method)": [[520, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[521, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[522, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[523, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[524, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[525, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[526, "polars.Expr.sum"]], "tail() (polars.expr method)": [[527, "polars.Expr.tail"]], "take() (polars.expr method)": [[528, "polars.Expr.take"]], "take_every() (polars.expr method)": [[529, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[530, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[531, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[532, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[533, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[534, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[535, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[536, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[537, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[538, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[539, "polars.Expr.var"]], "where() (polars.expr method)": [[540, "polars.Expr.where"]], "xor() (polars.expr method)": [[541, "polars.Expr.xor"]], "all() (in module polars)": [[542, "polars.all"]], "any() (in module polars)": [[543, "polars.any"]], "apply() (in module polars)": [[544, "polars.apply"]], "approx_unique() (in module polars)": [[545, "polars.approx_unique"]], "arange() (in module polars)": [[546, "polars.arange"]], "arg_sort_by() (in module polars)": [[547, "polars.arg_sort_by"]], "avg() (in module polars)": [[548, "polars.avg"]], "coalesce() (in module polars)": [[549, "polars.coalesce"]], "col() (in module polars)": [[550, "polars.col"]], "concat_list() (in module polars)": [[551, "polars.concat_list"]], "concat_str() (in module polars)": [[552, "polars.concat_str"]], "corr() (in module polars)": [[553, "polars.corr"]], "count() (in module polars)": [[554, "polars.count"]], "cov() (in module polars)": [[555, "polars.cov"]], "cumfold() (in module polars)": [[556, "polars.cumfold"]], "cumreduce() (in module polars)": [[557, "polars.cumreduce"]], "cumsum() (in module polars)": [[558, "polars.cumsum"]], "date() (in module polars)": [[559, "polars.date"]], "datetime() (in module polars)": [[560, "polars.datetime"]], "duration() (in module polars)": [[561, "polars.duration"]], "element() (in module polars)": [[562, "polars.element"]], "exclude() (in module polars)": [[563, "polars.exclude"]], "first() (in module polars)": [[564, "polars.first"]], "fold() (in module polars)": [[565, "polars.fold"]], "format() (in module polars)": [[566, "polars.format"]], "from_epoch() (in module polars)": [[567, "polars.from_epoch"]], "groups() (in module polars)": [[568, "polars.groups"]], "head() (in module polars)": [[569, "polars.head"]], "implode() (in module polars)": [[570, "polars.implode"]], "lit() (in module polars)": [[571, "polars.lit"]], "map() (in module polars)": [[572, "polars.map"]], "max() (in module polars)": [[573, "polars.max"]], "mean() (in module polars)": [[574, "polars.mean"]], "median() (in module polars)": [[575, "polars.median"]], "min() (in module polars)": [[576, "polars.min"]], "n_unique() (in module polars)": [[577, "polars.n_unique"]], "quantile() (in module polars)": [[578, "polars.quantile"]], "reduce() (in module polars)": [[579, "polars.reduce"]], "repeat() (in module polars)": [[580, "polars.repeat"]], "rolling_corr() (in module polars)": [[581, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[582, "polars.rolling_cov"]], "select() (in module polars)": [[583, "polars.select"]], "std() (in module polars)": [[584, "polars.std"]], "struct() (in module polars)": [[585, "polars.struct"]], "sum() (in module polars)": [[586, "polars.sum"]], "tail() (in module polars)": [[587, "polars.tail"]], "time() (in module polars)": [[588, "polars.time"]], "var() (in module polars)": [[589, "polars.var"]], "when() (in module polars)": [[590, "polars.when"]], "bottom_k() (polars.lazyframe method)": [[612, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[613, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[614, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[615, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[616, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[617, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[618, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[619, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[620, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[621, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[622, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[623, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[624, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[625, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[626, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[627, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[628, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[629, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[630, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[631, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[632, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[633, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[634, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[635, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[636, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[637, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[638, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[639, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[640, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[641, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[642, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[643, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[644, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[645, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[646, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[647, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[648, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[649, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[650, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[651, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[652, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[653, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[654, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[655, "polars.LazyFrame.select"]], "set_sorted() (polars.lazyframe method)": [[656, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[657, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[658, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[659, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[660, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[661, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[662, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[663, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[664, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[665, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[666, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[667, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[668, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[669, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[670, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[671, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[672, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[673, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[674, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[675, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[676, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[677, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[678, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[679, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[680, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[681, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[682, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[683, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[684, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[685, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[686, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[687, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[688, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[689, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[690, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[691, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[692, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[700, "polars.Series.abs"]], "alias() (polars.series method)": [[701, "polars.Series.alias"]], "all() (polars.series method)": [[702, "polars.Series.all"]], "any() (polars.series method)": [[703, "polars.Series.any"]], "append() (polars.series method)": [[704, "polars.Series.append"]], "apply() (polars.series method)": [[705, "polars.Series.apply"]], "arccos() (polars.series method)": [[706, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[707, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[708, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[709, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[710, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[711, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[712, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[713, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[714, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[715, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[716, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[717, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[718, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[719, "polars.Series.arr.sum"]], "unique() (polars.series.arr method)": [[720, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[721, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[722, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[723, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[724, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[725, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[726, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[727, "polars.Series.cast"]], "cat (polars.series attribute)": [[728, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[729, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[730, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[731, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[732, "polars.Series.clear"]], "clip() (polars.series method)": [[733, "polars.Series.clip"]], "clip_max() (polars.series method)": [[734, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[735, "polars.Series.clip_min"]], "clone() (polars.series method)": [[736, "polars.Series.clone"]], "cos() (polars.series method)": [[737, "polars.Series.cos"]], "cosh() (polars.series method)": [[738, "polars.Series.cosh"]], "cummax() (polars.series method)": [[739, "polars.Series.cummax"]], "cummin() (polars.series method)": [[740, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[741, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[742, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[743, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[744, "polars.Series.cut"]], "describe() (polars.series method)": [[745, "polars.Series.describe"]], "diff() (polars.series method)": [[746, "polars.Series.diff"]], "dot() (polars.series method)": [[747, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[748, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[749, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[750, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[751, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[752, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[753, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[754, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[755, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[756, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[757, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[758, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[759, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[760, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[761, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[762, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[763, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[764, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[765, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[766, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[767, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[768, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[769, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[770, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[771, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[772, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[773, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[774, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[775, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[776, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[777, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[778, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[779, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[780, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[781, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[782, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[783, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[784, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[785, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[786, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[787, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[788, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[789, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[790, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[791, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[792, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[793, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[794, "polars.Series.dtype"]], "entropy() (polars.series method)": [[795, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[796, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[797, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[798, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[799, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[800, "polars.Series.exp"]], "explode() (polars.series method)": [[801, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[802, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[803, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[804, "polars.Series.fill_null"]], "filter() (polars.series method)": [[805, "polars.Series.filter"]], "flags (polars.series attribute)": [[806, "polars.Series.flags"]], "floor() (polars.series method)": [[807, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[808, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[809, "polars.Series.has_validity"]], "hash() (polars.series method)": [[810, "polars.Series.hash"]], "head() (polars.series method)": [[811, "polars.Series.head"]], "hist() (polars.series method)": [[812, "polars.Series.hist"]], "implode() (polars.series method)": [[813, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[814, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[815, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[816, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[817, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[818, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[819, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[820, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[821, "polars.Series.is_first"]], "is_float() (polars.series method)": [[822, "polars.Series.is_float"]], "is_in() (polars.series method)": [[823, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[824, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[825, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[826, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[827, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[828, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[829, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[830, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[831, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[832, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[833, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[834, "polars.Series.is_utf8"]], "item() (polars.series method)": [[835, "polars.Series.item"]], "kurtosis() (polars.series method)": [[836, "polars.Series.kurtosis"]], "len() (polars.series method)": [[837, "polars.Series.len"]], "limit() (polars.series method)": [[838, "polars.Series.limit"]], "list (polars.series attribute)": [[839, "polars.Series.list"]], "arg_max() (polars.series.list method)": [[840, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[841, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[842, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[843, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[844, "polars.Series.list.count_match"]], "diff() (polars.series.list method)": [[845, "polars.Series.list.diff"]], "eval() (polars.series.list method)": [[846, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[847, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[848, "polars.Series.list.first"]], "get() (polars.series.list method)": [[849, "polars.Series.list.get"]], "head() (polars.series.list method)": [[850, "polars.Series.list.head"]], "join() (polars.series.list method)": [[851, "polars.Series.list.join"]], "last() (polars.series.list method)": [[852, "polars.Series.list.last"]], "lengths() (polars.series.list method)": [[853, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[854, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[855, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[856, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[857, "polars.Series.list.reverse"]], "shift() (polars.series.list method)": [[858, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[859, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[860, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[861, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[862, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[863, "polars.Series.list.take"]], "to_struct() (polars.series.list method)": [[864, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[865, "polars.Series.list.unique"]], "log() (polars.series method)": [[866, "polars.Series.log"]], "log10() (polars.series method)": [[867, "polars.Series.log10"]], "log1p() (polars.series method)": [[868, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[869, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[870, "polars.Series.map_dict"]], "max() (polars.series method)": [[871, "polars.Series.max"]], "mean() (polars.series method)": [[872, "polars.Series.mean"]], "median() (polars.series method)": [[873, "polars.Series.median"]], "min() (polars.series method)": [[874, "polars.Series.min"]], "mode() (polars.series method)": [[875, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[876, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[877, "polars.Series.n_unique"]], "name (polars.series attribute)": [[878, "polars.Series.name"]], "nan_max() (polars.series method)": [[879, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[880, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[881, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[882, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[883, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[884, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[885, "polars.Series.peak_min"]], "product() (polars.series method)": [[886, "polars.Series.product"]], "qcut() (polars.series method)": [[887, "polars.Series.qcut"]], "quantile() (polars.series method)": [[888, "polars.Series.quantile"]], "rank() (polars.series method)": [[889, "polars.Series.rank"]], "rechunk() (polars.series method)": [[890, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[891, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[892, "polars.Series.rename"]], "reshape() (polars.series method)": [[893, "polars.Series.reshape"]], "reverse() (polars.series method)": [[894, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[895, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[896, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[897, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[898, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[899, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[900, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[901, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[902, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[903, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[904, "polars.Series.rolling_var"]], "round() (polars.series method)": [[905, "polars.Series.round"]], "sample() (polars.series method)": [[906, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[907, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[908, "polars.Series.series_equal"]], "set() (polars.series method)": [[909, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[910, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[911, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[912, "polars.Series.shape"]], "shift() (polars.series method)": [[913, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[914, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[915, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[916, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[917, "polars.Series.shuffle"]], "sign() (polars.series method)": [[918, "polars.Series.sign"]], "sin() (polars.series method)": [[919, "polars.Series.sin"]], "sinh() (polars.series method)": [[920, "polars.Series.sinh"]], "skew() (polars.series method)": [[921, "polars.Series.skew"]], "slice() (polars.series method)": [[922, "polars.Series.slice"]], "sort() (polars.series method)": [[923, "polars.Series.sort"]], "sqrt() (polars.series method)": [[924, "polars.Series.sqrt"]], "std() (polars.series method)": [[925, "polars.Series.std"]], "str (polars.series attribute)": [[926, "polars.Series.str"]], "concat() (polars.series.str method)": [[927, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[928, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[929, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[930, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[931, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[932, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[933, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[934, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[935, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[936, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[937, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[938, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[939, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[940, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[941, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[942, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[943, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[944, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[945, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[946, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[947, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[948, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[949, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[950, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[951, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[952, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[953, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[954, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[955, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[956, "polars.Series.str.to_decimal"]], "to_lowercase() (polars.series.str method)": [[957, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[958, "polars.Series.str.to_time"]], "to_uppercase() (polars.series.str method)": [[959, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[960, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[961, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[962, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[963, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[964, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[965, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[966, "polars.Series.sum"]], "tail() (polars.series method)": [[967, "polars.Series.tail"]], "take() (polars.series method)": [[968, "polars.Series.take"]], "take_every() (polars.series method)": [[969, "polars.Series.take_every"]], "tan() (polars.series method)": [[970, "polars.Series.tan"]], "tanh() (polars.series method)": [[971, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[972, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[973, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[974, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[975, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[976, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[977, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[978, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[979, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[980, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[981, "polars.Series.top_k"]], "unique() (polars.series method)": [[982, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[983, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[984, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[985, "polars.Series.value_counts"]], "var() (polars.series method)": [[986, "polars.Series.var"]], "view() (polars.series method)": [[987, "polars.Series.view"]], "zip_with() (polars.series method)": [[988, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1004, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1004, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1004, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1004, "polars.SQLContext.__init__"]]}})