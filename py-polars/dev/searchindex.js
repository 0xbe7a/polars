Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_dummies", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_dummies", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 86, 96, 114, 124, 127, 128, 227, 245, 257, 554, 632, 657, 932], "refer": [0, 29, 98, 99, 102, 132, 245, 398, 421, 480, 554, 830, 894, 932], "input": [0, 60, 88, 98, 99, 102, 128, 139, 150, 178, 192, 198, 212, 222, 225, 245, 257, 360, 375, 394, 405, 414, 417, 451, 503, 505, 507, 508, 509, 510, 521, 522, 530, 531, 534, 543, 554, 564, 576, 583, 608, 615, 620, 626, 630, 648, 657, 786, 809, 811, 932], "output": [0, 25, 27, 29, 31, 32, 70, 102, 118, 128, 151, 152, 163, 173, 180, 189, 192, 218, 222, 245, 253, 257, 396, 397, 398, 404, 498, 503, 511, 530, 541, 554, 564, 584, 585, 594, 598, 599, 608, 626, 629, 632, 648, 657, 811, 921, 932], "seri": [0, 1, 22, 51, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 90, 92, 96, 117, 118, 120, 124, 128, 135, 143, 145, 147, 148, 153, 156, 157, 159, 161, 169, 170, 174, 185, 186, 200, 204, 207, 210, 211, 226, 245, 256, 257, 258, 259, 260, 261, 262, 263, 266, 267, 269, 270, 271, 276, 279, 280, 287, 288, 291, 292, 293, 296, 302, 303, 307, 308, 320, 322, 326, 329, 333, 335, 337, 340, 344, 345, 347, 351, 354, 362, 363, 369, 373, 375, 377, 378, 379, 380, 381, 383, 384, 385, 395, 396, 417, 421, 422, 423, 424, 425, 427, 439, 440, 443, 446, 447, 454, 469, 474, 480, 484, 489, 490, 491, 492, 497, 503, 504, 506, 512, 514, 515, 516, 522, 523, 525, 527, 529, 530, 531, 532, 533, 534, 535, 538, 539, 540, 542, 543, 544, 545, 546, 554, 564, 580, 626, 631, 648, 926, 928, 931, 933, 936, 937, 938], "datafram": [0, 1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 49, 51, 60, 61, 62, 63, 64, 65, 67, 68, 69, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 111, 112, 113, 116, 118, 119, 243, 244, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 289, 290, 293, 294, 295, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 343, 344, 346, 347, 348, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 519, 520, 521, 522, 523, 524, 525, 527, 530, 531, 532, 533, 534, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 554, 564, 570, 572, 576, 577, 580, 581, 584, 585, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 602, 603, 606, 608, 612, 613, 614, 615, 616, 617, 621, 622, 623, 624, 626, 627, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 656, 657, 676, 694, 703, 718, 719, 783, 828, 875, 878, 890, 891, 901, 910, 911, 921, 932], "lazyfram": [0, 1, 48, 50, 60, 61, 62, 63, 64, 67, 68, 109, 110, 111, 112, 113, 114, 116, 120, 167, 179, 245, 293, 366, 554, 564, 647, 939], "express": [0, 65, 67, 70, 118, 120, 121, 128, 139, 141, 143, 150, 176, 180, 188, 192, 198, 212, 222, 225, 227, 245, 253, 254, 256, 257, 267, 273, 275, 293, 304, 305, 306, 309, 315, 317, 321, 341, 360, 363, 366, 373, 375, 379, 382, 387, 390, 395, 396, 397, 398, 402, 403, 404, 405, 414, 416, 417, 418, 419, 424, 438, 439, 440, 442, 444, 449, 451, 455, 463, 464, 480, 486, 489, 495, 497, 500, 504, 505, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 529, 530, 531, 534, 536, 538, 539, 540, 541, 543, 544, 547, 553, 564, 570, 575, 576, 577, 580, 583, 602, 608, 610, 611, 612, 613, 615, 620, 626, 627, 630, 632, 648, 657, 674, 676, 707, 708, 709, 717, 726, 750, 773, 786, 848, 855, 869, 877, 878, 932], "extend": [0, 88, 245, 363, 554, 564, 656, 773, 932], "function": [0, 29, 61, 62, 63, 64, 69, 86, 92, 98, 99, 102, 109, 119, 128, 132, 138, 145, 172, 179, 180, 209, 213, 216, 217, 227, 245, 254, 257, 293, 315, 345, 357, 358, 359, 396, 397, 414, 416, 427, 428, 429, 430, 431, 432, 434, 435, 436, 448, 493, 501, 503, 514, 515, 522, 523, 525, 530, 538, 554, 564, 594, 598, 601, 623, 632, 648, 657, 694, 717, 754, 767, 768, 769, 770, 783, 828, 836, 850, 851, 857, 862, 915, 932], "data": [0, 1, 5, 15, 18, 28, 29, 34, 51, 60, 61, 63, 68, 75, 76, 80, 82, 85, 86, 87, 88, 89, 90, 91, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 116, 117, 119, 120, 121, 127, 128, 129, 130, 140, 149, 150, 151, 163, 164, 165, 167, 178, 179, 183, 188, 189, 196, 203, 208, 209, 222, 224, 243, 245, 257, 294, 301, 320, 346, 354, 374, 381, 383, 421, 437, 438, 448, 480, 493, 495, 508, 541, 554, 564, 568, 569, 577, 583, 584, 601, 612, 613, 626, 648, 656, 657, 695, 701, 706, 710, 723, 725, 763, 783, 830, 846, 847, 857, 862, 894, 913, 914, 915, 916, 918, 923, 931, 932], "type": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 67, 70, 75, 85, 87, 88, 89, 90, 91, 92, 96, 98, 99, 101, 102, 109, 110, 115, 116, 117, 120, 123, 124, 128, 145, 149, 151, 152, 153, 164, 203, 208, 209, 211, 214, 245, 257, 280, 293, 301, 302, 304, 305, 306, 322, 326, 329, 333, 335, 337, 340, 344, 347, 360, 371, 377, 379, 380, 398, 424, 475, 476, 477, 480, 493, 503, 508, 517, 518, 519, 521, 522, 529, 554, 564, 570, 575, 577, 584, 585, 602, 611, 612, 613, 621, 648, 681, 694, 701, 703, 707, 708, 709, 727, 731, 734, 741, 743, 746, 749, 753, 756, 781, 857, 889, 890, 891, 913, 914, 916, 924, 932], "config": [0, 60, 192, 222, 245, 564, 608, 626, 648], "except": [0, 154, 166, 168, 201, 245, 521, 564, 590, 648, 782, 807, 903, 914, 923, 932], "test": [0, 102, 564, 586, 593, 648], "util": [0, 525, 564, 577, 648], "sql": [0, 28, 48, 100, 165, 245, 564], "These": [1, 29, 125, 245, 351, 553, 760], "allow": [1, 29, 51, 75, 86, 109, 111, 112, 113, 114, 120, 121, 127, 163, 166, 167, 188, 189, 190, 209, 214, 224, 245, 341, 423, 438, 480, 554, 589, 590, 594, 598, 612, 613, 621, 627, 648, 750, 832, 847, 849, 894, 915, 932], "you": [1, 12, 29, 33, 60, 85, 87, 88, 89, 91, 96, 98, 99, 102, 103, 107, 109, 116, 124, 128, 136, 140, 163, 166, 176, 188, 189, 205, 208, 213, 227, 245, 257, 275, 304, 305, 306, 366, 375, 396, 398, 423, 428, 429, 430, 431, 432, 434, 435, 436, 465, 468, 480, 504, 514, 523, 554, 570, 573, 586, 590, 593, 611, 613, 632, 648, 656, 657, 676, 707, 708, 709, 786, 832, 879, 882, 894, 914, 923, 932], "regist": [1, 61, 62, 63, 64], "custom": [1, 29, 61, 62, 63, 64, 128, 227, 245, 257, 293, 396, 427, 503, 530, 554, 594, 632, 648, 657, 694, 836, 932], "dedic": [1, 86, 163, 189, 245], "namespac": [1, 244, 553, 564, 647], "underli": [1, 71, 78, 85, 87, 88, 89, 91, 107, 120, 121, 140, 163, 164, 189, 203, 245, 297, 320, 321, 325, 328, 330, 331, 332, 334, 336, 338, 339, 342, 343, 344, 346, 352, 353, 354, 355, 423, 437, 455, 457, 554, 648, 656, 697, 725, 726, 730, 733, 735, 736, 740, 742, 745, 747, 748, 751, 752, 753, 755, 761, 762, 763, 764, 832, 846, 857, 869, 871, 909, 914, 932], "polar": [1, 245, 553, 554, 564, 648, 932, 939, 940], "class": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 90, 118, 119, 208, 209, 245, 554, 564, 648, 913, 914, 932, 939], "without": [1, 5, 69, 92, 101, 104, 108, 110, 114, 216, 217, 245, 257, 315, 345, 428, 429, 430, 431, 432, 434, 435, 436, 540, 554, 623, 648, 717, 723, 754, 783, 828, 932], "requir": [1, 29, 33, 90, 116, 117, 132, 188, 209, 245, 294, 357, 358, 359, 443, 480, 495, 554, 613, 648, 695, 768, 769, 770, 856, 894, 914, 915, 918, 932], "subclass": [1, 245], "mixin": 1, "expr": [1, 60, 61, 62, 63, 64, 65, 68, 70, 139, 141, 143, 165, 166, 176, 180, 188, 192, 222, 245, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 554, 555, 556, 559, 560, 561, 576, 578, 580, 589, 590, 603, 608, 610, 626, 648, 674, 676, 717, 726, 774, 855, 869, 873, 892, 904, 932], "ar": [1, 5, 10, 14, 17, 25, 29, 33, 51, 70, 77, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 114, 116, 117, 119, 120, 123, 125, 127, 128, 132, 136, 138, 141, 145, 150, 151, 152, 163, 166, 167, 172, 173, 178, 188, 189, 192, 198, 204, 209, 212, 217, 218, 222, 225, 245, 254, 293, 311, 313, 314, 318, 319, 345, 351, 356, 357, 358, 359, 375, 377, 379, 380, 381, 383, 384, 385, 388, 398, 414, 421, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 445, 448, 450, 451, 465, 468, 469, 487, 504, 505, 507, 509, 510, 511, 531, 534, 541, 543, 547, 548, 550, 553, 554, 555, 556, 559, 560, 561, 564, 573, 578, 583, 584, 585, 586, 590, 593, 594, 598, 599, 602, 605, 608, 612, 613, 615, 620, 623, 626, 627, 630, 648, 654, 656, 694, 715, 716, 754, 760, 766, 767, 768, 769, 770, 780, 786, 790, 793, 794, 795, 796, 797, 798, 805, 830, 834, 836, 842, 859, 862, 879, 882, 883, 902, 914, 915, 923, 926, 928, 932, 933, 936, 937, 938], "all": [1, 7, 14, 17, 22, 25, 29, 34, 67, 68, 70, 85, 88, 90, 91, 93, 98, 99, 101, 102, 103, 107, 109, 111, 112, 118, 119, 121, 136, 142, 154, 159, 161, 163, 164, 167, 168, 172, 175, 176, 183, 188, 189, 197, 201, 206, 214, 216, 218, 245, 255, 256, 275, 280, 290, 293, 295, 309, 315, 319, 360, 370, 371, 374, 377, 380, 384, 385, 387, 390, 392, 396, 397, 409, 413, 418, 421, 426, 443, 449, 451, 456, 462, 464, 467, 470, 471, 473, 479, 486, 498, 508, 521, 523, 538, 543, 547, 554, 564, 570, 573, 575, 577, 579, 594, 598, 602, 611, 614, 621, 627, 648, 676, 681, 691, 694, 717, 723, 782, 788, 802, 807, 830, 863, 870, 876, 878, 881, 884, 885, 887, 893, 903, 932], "support": [1, 29, 33, 68, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 110, 118, 121, 125, 127, 163, 164, 189, 197, 198, 205, 209, 245, 288, 414, 449, 451, 474, 508, 554, 614, 615, 648, 689, 863, 888, 915, 932], "target": [1, 29, 66, 245, 461, 480, 875, 894], "thi": [1, 5, 7, 12, 25, 27, 29, 31, 33, 37, 50, 51, 60, 67, 68, 69, 85, 87, 88, 89, 90, 91, 92, 95, 96, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 124, 127, 128, 132, 136, 137, 138, 140, 145, 150, 151, 152, 153, 157, 159, 161, 163, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 188, 189, 190, 192, 195, 197, 199, 200, 203, 205, 208, 209, 213, 214, 216, 217, 218, 219, 220, 222, 223, 227, 244, 245, 254, 256, 257, 266, 275, 276, 280, 289, 293, 294, 302, 309, 315, 320, 331, 341, 344, 345, 354, 362, 373, 374, 375, 379, 390, 395, 396, 402, 403, 404, 405, 411, 412, 414, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 438, 440, 442, 443, 444, 449, 450, 451, 466, 467, 472, 473, 479, 480, 483, 494, 495, 496, 497, 498, 501, 504, 509, 512, 514, 516, 522, 523, 525, 540, 544, 554, 564, 565, 567, 570, 573, 575, 577, 583, 584, 585, 587, 590, 594, 598, 599, 602, 605, 608, 610, 611, 612, 613, 614, 621, 623, 626, 627, 628, 629, 632, 647, 648, 656, 657, 666, 676, 677, 681, 690, 695, 703, 717, 723, 725, 726, 736, 750, 753, 754, 763, 767, 772, 779, 780, 783, 787, 792, 793, 799, 801, 803, 806, 810, 812, 813, 814, 815, 817, 818, 820, 821, 823, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 840, 843, 844, 845, 847, 850, 851, 852, 855, 856, 857, 858, 863, 864, 866, 880, 881, 886, 887, 893, 894, 897, 898, 901, 902, 909, 911, 913, 914, 915, 917, 918, 920, 922, 923, 932], "featur": [1, 33, 37, 51, 66, 245], "i": [1, 5, 12, 14, 27, 29, 31, 32, 37, 51, 60, 65, 66, 67, 68, 69, 70, 72, 74, 75, 77, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 95, 98, 99, 100, 101, 103, 107, 109, 110, 111, 112, 113, 114, 118, 119, 120, 121, 127, 128, 136, 138, 146, 149, 150, 151, 152, 153, 154, 157, 158, 160, 162, 163, 164, 166, 167, 168, 170, 172, 173, 176, 178, 179, 180, 188, 189, 190, 197, 198, 199, 200, 201, 203, 209, 213, 214, 216, 217, 218, 219, 227, 244, 245, 254, 255, 256, 257, 267, 275, 278, 288, 292, 293, 315, 321, 330, 341, 345, 351, 357, 358, 359, 362, 371, 373, 375, 388, 396, 398, 405, 414, 421, 423, 425, 428, 429, 430, 431, 432, 434, 435, 436, 438, 439, 440, 444, 445, 448, 449, 450, 451, 453, 455, 456, 461, 462, 464, 466, 467, 469, 472, 473, 474, 477, 479, 480, 483, 498, 499, 502, 504, 508, 509, 511, 512, 514, 515, 516, 523, 529, 531, 534, 536, 540, 541, 542, 544, 546, 547, 554, 570, 573, 575, 577, 583, 584, 585, 588, 590, 592, 594, 598, 599, 602, 611, 612, 613, 614, 615, 616, 621, 623, 624, 629, 632, 648, 655, 656, 657, 676, 679, 689, 693, 717, 726, 735, 750, 754, 760, 767, 768, 769, 770, 772, 780, 781, 782, 783, 785, 787, 789, 799, 800, 801, 803, 804, 805, 807, 828, 830, 832, 834, 847, 848, 849, 850, 851, 852, 858, 859, 862, 863, 866, 869, 870, 875, 876, 878, 880, 881, 883, 886, 887, 888, 891, 893, 897, 903, 909, 914, 915, 921, 922, 923, 932], "primarili": 1, "intend": 1, "us": [1, 9, 11, 12, 17, 22, 23, 27, 28, 29, 33, 51, 60, 69, 70, 86, 88, 89, 91, 93, 94, 96, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 118, 119, 120, 121, 124, 128, 134, 136, 141, 142, 145, 150, 151, 152, 159, 161, 163, 164, 166, 170, 172, 175, 176, 179, 180, 188, 190, 192, 198, 199, 200, 206, 207, 209, 213, 214, 216, 217, 218, 219, 222, 225, 227, 245, 252, 257, 267, 275, 293, 297, 298, 302, 315, 318, 319, 354, 356, 357, 358, 359, 365, 366, 374, 375, 388, 396, 398, 401, 414, 421, 423, 425, 428, 429, 430, 431, 432, 434, 435, 436, 438, 440, 443, 444, 448, 450, 451, 453, 457, 458, 459, 465, 466, 472, 474, 476, 478, 480, 499, 503, 504, 508, 510, 511, 514, 516, 523, 525, 529, 531, 534, 536, 539, 540, 541, 542, 543, 544, 546, 553, 554, 564, 570, 572, 573, 578, 579, 583, 584, 585, 586, 590, 592, 593, 598, 608, 613, 615, 616, 621, 623, 624, 626, 630, 632, 648, 657, 676, 694, 697, 698, 703, 717, 763, 766, 768, 769, 770, 774, 775, 780, 783, 786, 805, 811, 830, 832, 834, 847, 850, 851, 852, 856, 858, 862, 866, 871, 872, 879, 880, 886, 888, 890, 894, 904, 910, 912, 913, 914, 915, 922, 923, 932], "librari": [1, 71, 78, 396, 554, 940], "author": 1, "domain": 1, "specif": [1, 25, 29, 85, 87, 89, 91, 98, 100, 101, 110, 120, 163, 245, 427, 480, 554, 648, 836, 894, 932], "capabl": [1, 29, 245], "which": [1, 17, 26, 27, 29, 30, 31, 32, 33, 60, 61, 62, 63, 64, 88, 98, 99, 100, 101, 102, 109, 110, 116, 136, 140, 151, 152, 214, 245, 254, 293, 363, 375, 377, 380, 381, 383, 384, 385, 405, 428, 429, 430, 431, 432, 434, 435, 436, 469, 547, 554, 573, 575, 584, 585, 612, 613, 621, 629, 648, 656, 773, 786, 790, 794, 795, 796, 797, 798, 850, 883, 932], "mai": [1, 33, 37, 68, 69, 85, 87, 88, 89, 91, 98, 101, 103, 110, 111, 114, 128, 138, 140, 166, 194, 195, 209, 216, 217, 245, 257, 287, 292, 293, 315, 320, 331, 345, 428, 429, 430, 431, 432, 434, 435, 436, 441, 442, 480, 514, 515, 523, 538, 554, 590, 594, 609, 610, 613, 623, 628, 632, 648, 656, 657, 688, 693, 717, 725, 736, 754, 767, 783, 828, 854, 855, 894, 932], "exist": [1, 28, 29, 101, 110, 120, 222, 245, 321, 626, 648, 726], "belong": [1, 151, 245, 584, 648], "core": [1, 209, 245], "cannot": [1, 86, 98, 99, 103, 116, 128, 190, 227, 245, 297, 398, 438, 457, 476, 485, 554, 611, 632, 648, 657, 697, 847, 871, 890, 932], "overrid": [1, 29, 85, 87, 88, 89, 90, 91, 98, 118, 119, 121, 245, 398, 554, 648, 811, 932], "str": [1, 6, 8, 13, 14, 17, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 48, 49, 50, 51, 60, 61, 62, 63, 64, 66, 69, 70, 85, 87, 88, 89, 91, 92, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 131, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 147, 149, 150, 151, 152, 154, 156, 159, 161, 163, 165, 166, 169, 170, 171, 172, 173, 174, 176, 178, 180, 182, 184, 185, 186, 187, 188, 189, 190, 194, 195, 197, 198, 199, 200, 201, 204, 205, 206, 207, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 252, 253, 257, 271, 272, 273, 278, 279, 280, 288, 291, 293, 317, 322, 341, 344, 345, 348, 351, 360, 362, 364, 366, 368, 373, 375, 382, 397, 398, 404, 406, 414, 416, 418, 424, 426, 428, 429, 430, 431, 432, 434, 435, 436, 442, 443, 450, 451, 484, 485, 486, 489, 500, 501, 502, 503, 506, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 554, 559, 570, 571, 572, 573, 575, 576, 577, 580, 582, 583, 584, 585, 587, 589, 590, 598, 599, 602, 604, 605, 606, 610, 611, 612, 613, 614, 615, 621, 622, 623, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 653, 673, 674, 681, 694, 701, 718, 719, 727, 750, 753, 754, 757, 760, 772, 775, 811, 820, 821, 828, 833, 850, 851, 898, 900, 910, 911, 912, 932, 936], "dt": [1, 60, 152, 245, 561, 585, 648, 938], "attempt": [1, 208, 245], "do": [1, 29, 60, 67, 109, 140, 166, 203, 213, 216, 245, 275, 315, 467, 473, 479, 501, 554, 570, 575, 590, 594, 602, 611, 612, 613, 648, 656, 676, 717, 881, 887, 893, 914, 923, 932], "so": [1, 51, 100, 109, 149, 151, 152, 180, 245, 267, 278, 375, 467, 473, 479, 554, 584, 585, 648, 679, 881, 887, 893], "rais": [1, 13, 17, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 116, 117, 188, 245, 292, 297, 404, 455, 457, 469, 480, 529, 693, 697, 869, 871, 883, 894, 914, 923, 932], "an": [1, 25, 28, 29, 37, 61, 63, 64, 65, 67, 70, 71, 75, 76, 78, 85, 98, 99, 100, 101, 102, 104, 107, 109, 111, 119, 120, 121, 128, 129, 130, 138, 141, 143, 145, 151, 152, 163, 164, 166, 176, 180, 186, 188, 203, 208, 216, 222, 227, 245, 253, 254, 257, 273, 275, 278, 292, 293, 297, 301, 304, 305, 306, 310, 311, 312, 313, 314, 315, 321, 354, 363, 366, 387, 396, 397, 405, 419, 427, 428, 429, 430, 431, 432, 434, 435, 436, 455, 457, 462, 480, 489, 504, 508, 520, 525, 529, 538, 539, 540, 543, 547, 554, 564, 568, 569, 570, 575, 577, 580, 584, 585, 590, 594, 602, 611, 626, 627, 632, 648, 657, 674, 676, 679, 693, 697, 701, 706, 707, 708, 709, 710, 713, 714, 715, 716, 717, 726, 763, 767, 773, 836, 837, 838, 839, 840, 841, 843, 844, 845, 850, 851, 869, 871, 876, 894, 914, 923, 932], "attributeerror": 1, "howev": [1, 88, 138, 245, 767, 932], "can": [1, 12, 29, 60, 70, 76, 88, 98, 99, 102, 103, 107, 109, 111, 113, 114, 119, 120, 121, 128, 137, 145, 151, 159, 161, 176, 180, 192, 198, 212, 213, 216, 222, 227, 245, 257, 275, 293, 311, 314, 315, 341, 351, 363, 374, 375, 409, 423, 428, 429, 430, 431, 432, 434, 435, 436, 440, 443, 445, 448, 451, 464, 467, 473, 479, 480, 498, 501, 504, 505, 508, 516, 523, 525, 544, 547, 553, 554, 570, 575, 584, 608, 615, 620, 626, 628, 632, 648, 657, 676, 694, 717, 750, 760, 773, 786, 816, 832, 850, 851, 852, 856, 859, 862, 878, 881, 887, 893, 932], "other": [1, 17, 29, 70, 98, 99, 102, 109, 116, 117, 136, 140, 146, 165, 166, 172, 173, 188, 192, 217, 222, 243, 245, 256, 267, 271, 304, 305, 306, 317, 375, 379, 398, 451, 493, 507, 509, 510, 531, 534, 543, 554, 564, 573, 589, 590, 598, 599, 608, 623, 626, 627, 648, 656, 672, 707, 708, 709, 721, 793, 849, 916, 924, 931, 932], "onli": [1, 17, 25, 29, 51, 60, 66, 68, 98, 99, 101, 102, 103, 107, 109, 110, 111, 112, 113, 120, 121, 125, 128, 136, 163, 166, 170, 189, 200, 205, 207, 245, 252, 257, 267, 303, 304, 305, 306, 341, 360, 369, 423, 496, 539, 554, 570, 573, 586, 590, 593, 648, 704, 707, 708, 709, 750, 778, 832, 909, 912, 932], "gener": [1, 93, 100, 118, 119, 120, 121, 132, 180, 190, 206, 213, 245, 293, 438, 444, 554, 648, 694, 847, 858, 910, 932], "userwarn": 1, "pl": [1, 7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 109, 110, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 554, 565, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 675, 676, 677, 680, 681, 683, 688, 689, 690, 692, 694, 701, 703, 704, 705, 706, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 769, 770, 773, 774, 775, 776, 778, 781, 782, 783, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 824, 825, 826, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 854, 858, 859, 860, 861, 863, 864, 865, 866, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 932], "register_expr_namespac": [1, 61, 63, 64], "greet": 1, "def": [1, 61, 62, 63, 64, 119, 120, 121, 179, 213, 245, 416, 530, 554, 601, 648], "__init__": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 118], "self": [1, 61, 62, 63, 64, 67, 128, 129, 130, 132, 133, 134, 136, 139, 140, 141, 142, 143, 150, 151, 152, 154, 156, 157, 158, 165, 166, 168, 169, 170, 171, 172, 173, 174, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 206, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 295, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 554, 567, 568, 569, 570, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 648, 656, 657, 701, 710, 776, 810, 811, 822, 825, 826, 831, 850, 851, 852, 864, 920, 924, 932], "_expr": [1, 62], "hello": [1, 467, 473, 479, 501, 681, 881, 887, 893], "return": [1, 25, 27, 29, 31, 32, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 77, 79, 84, 85, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 124, 128, 129, 132, 135, 136, 137, 138, 139, 141, 142, 145, 149, 150, 154, 156, 162, 163, 164, 165, 167, 168, 175, 176, 178, 179, 180, 188, 189, 190, 201, 202, 209, 212, 213, 214, 222, 224, 227, 230, 234, 239, 245, 254, 255, 258, 259, 260, 261, 262, 263, 266, 267, 269, 270, 272, 276, 278, 279, 280, 291, 292, 296, 298, 307, 308, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 350, 351, 352, 353, 355, 362, 372, 375, 377, 378, 379, 380, 381, 383, 384, 385, 391, 395, 405, 409, 416, 424, 425, 438, 439, 445, 446, 447, 454, 456, 458, 460, 461, 462, 464, 465, 466, 468, 469, 472, 474, 475, 476, 477, 483, 488, 489, 490, 491, 492, 494, 496, 497, 498, 502, 503, 504, 505, 508, 517, 518, 519, 525, 527, 529, 530, 539, 540, 543, 545, 547, 554, 568, 570, 573, 574, 575, 577, 586, 592, 593, 594, 601, 602, 611, 612, 613, 618, 619, 620, 621, 626, 629, 635, 639, 644, 648, 653, 654, 655, 657, 664, 665, 667, 668, 670, 671, 673, 677, 679, 680, 681, 692, 693, 696, 698, 706, 718, 719, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 767, 772, 780, 782, 783, 788, 790, 791, 793, 794, 795, 796, 797, 798, 802, 804, 807, 810, 816, 828, 834, 835, 847, 848, 849, 851, 859, 868, 869, 870, 872, 874, 875, 876, 878, 879, 880, 882, 883, 886, 888, 889, 890, 891, 894, 897, 903, 905, 917, 919, 920, 924, 932], "lit": [1, 96, 124, 296, 375, 387, 514, 516, 523, 544, 547, 554, 696, 775, 932], "alia": [1, 60, 62, 64, 151, 152, 168, 215, 222, 245, 257, 273, 275, 304, 305, 306, 310, 311, 312, 313, 314, 316, 320, 321, 322, 325, 326, 327, 329, 331, 332, 333, 335, 337, 340, 341, 342, 344, 345, 346, 347, 348, 350, 351, 353, 354, 366, 368, 373, 375, 378, 379, 387, 390, 391, 398, 407, 415, 423, 439, 455, 456, 459, 462, 465, 468, 474, 476, 477, 478, 484, 485, 493, 494, 500, 503, 506, 507, 509, 510, 514, 515, 516, 519, 520, 523, 524, 530, 538, 539, 543, 544, 547, 554, 584, 585, 587, 593, 622, 626, 648, 676, 725, 727, 732, 750, 753, 759, 763, 807, 890, 891, 932], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 467, 473, 479, 681, 881, 887, 893], "select": [1, 28, 60, 61, 62, 63, 65, 97, 98, 99, 100, 101, 103, 107, 109, 114, 128, 162, 166, 176, 179, 188, 197, 210, 215, 218, 245, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 289, 290, 293, 294, 295, 303, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 367, 369, 370, 371, 373, 374, 376, 377, 379, 380, 382, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 399, 400, 401, 408, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 460, 461, 462, 463, 464, 466, 467, 469, 472, 473, 475, 476, 477, 479, 481, 482, 484, 485, 486, 487, 490, 491, 492, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 508, 509, 511, 512, 513, 514, 515, 516, 519, 521, 522, 523, 524, 525, 527, 531, 532, 533, 534, 535, 536, 538, 541, 542, 543, 544, 545, 546, 554, 571, 587, 590, 601, 614, 622, 627, 629, 648, 676, 694, 850, 851, 863, 875, 878, 904, 932], "shape": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 82, 85, 87, 88, 89, 90, 91, 92, 93, 96, 109, 114, 120, 121, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 165, 166, 169, 170, 171, 172, 174, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 190, 192, 194, 195, 197, 198, 199, 200, 201, 202, 204, 206, 207, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 519, 520, 521, 522, 523, 524, 525, 527, 530, 531, 532, 533, 534, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 554, 568, 570, 572, 573, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 605, 606, 608, 609, 610, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 675, 676, 677, 680, 681, 683, 688, 689, 690, 692, 694, 701, 703, 704, 706, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 770, 773, 774, 775, 776, 778, 781, 782, 783, 785, 786, 788, 790, 793, 794, 795, 796, 797, 798, 802, 804, 810, 811, 816, 824, 825, 826, 828, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 854, 858, 859, 860, 861, 863, 864, 865, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 901, 903, 904, 905, 906, 907, 910, 911, 912, 916, 918, 919, 920, 921, 924, 932], "3": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 93, 100, 102, 109, 114, 115, 116, 117, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 252, 253, 254, 257, 266, 267, 268, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 301, 302, 303, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 330, 336, 338, 342, 343, 344, 345, 346, 348, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 386, 387, 388, 390, 392, 393, 394, 395, 397, 398, 409, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 450, 451, 452, 455, 458, 459, 461, 463, 465, 468, 474, 475, 476, 477, 478, 484, 485, 486, 488, 489, 490, 494, 496, 497, 498, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 520, 521, 522, 523, 524, 527, 529, 530, 531, 532, 533, 534, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 554, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 653, 656, 657, 658, 660, 661, 662, 664, 665, 666, 667, 668, 675, 676, 677, 680, 683, 688, 689, 690, 692, 694, 701, 703, 704, 705, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 725, 726, 727, 730, 731, 732, 733, 735, 737, 738, 739, 741, 743, 744, 745, 747, 749, 751, 753, 754, 755, 759, 760, 762, 763, 767, 769, 770, 773, 774, 775, 776, 778, 781, 782, 783, 785, 786, 788, 790, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 824, 825, 826, 828, 829, 830, 833, 834, 835, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 854, 858, 860, 861, 862, 863, 864, 866, 872, 873, 875, 877, 879, 882, 888, 892, 901, 902, 903, 904, 905, 906, 907, 909, 910, 913, 914, 915, 918, 919, 920, 921, 922, 924, 932], "1": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 103, 109, 110, 114, 115, 116, 117, 118, 120, 121, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 458, 459, 460, 461, 462, 463, 464, 466, 467, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 554, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 675, 676, 677, 679, 680, 683, 688, 689, 690, 692, 694, 701, 703, 704, 705, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 768, 769, 770, 773, 774, 775, 776, 778, 781, 782, 783, 785, 786, 788, 790, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 804, 806, 810, 812, 813, 814, 815, 816, 817, 818, 824, 825, 826, 828, 829, 830, 833, 834, 835, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 875, 877, 878, 884, 890, 891, 894, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 932], "2": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 85, 87, 88, 89, 90, 91, 92, 93, 100, 109, 114, 115, 116, 117, 120, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 165, 167, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 255, 256, 257, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 326, 328, 329, 331, 332, 333, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 351, 354, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 409, 410, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 448, 449, 450, 451, 452, 454, 456, 459, 462, 463, 464, 465, 467, 468, 469, 470, 471, 473, 474, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 500, 501, 503, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 519, 520, 521, 522, 523, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 554, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 589, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 653, 656, 657, 659, 663, 664, 665, 666, 667, 668, 675, 676, 677, 680, 681, 683, 688, 689, 690, 692, 694, 703, 704, 705, 706, 710, 711, 714, 715, 716, 717, 718, 719, 720, 721, 726, 728, 729, 733, 738, 739, 745, 747, 752, 754, 755, 758, 760, 762, 764, 766, 767, 768, 769, 770, 773, 774, 775, 776, 778, 781, 782, 783, 785, 786, 788, 790, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 806, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 824, 825, 826, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 854, 858, 860, 862, 863, 864, 865, 866, 868, 870, 876, 877, 878, 881, 882, 883, 884, 885, 887, 890, 891, 893, 894, 901, 902, 903, 904, 905, 906, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 924, 932], "column_0": [1, 128, 213, 245], "register_dataframe_namespac": [1, 62, 63, 64], "split": [1, 61, 164, 245, 476, 477, 890, 891], "splitfram": [1, 61], "df": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 61, 62, 65, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99, 109, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 289, 290, 293, 294, 295, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 519, 520, 521, 522, 523, 524, 525, 527, 530, 531, 532, 533, 534, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 554, 585, 622, 623, 629, 632, 635, 644, 648, 676, 694, 703, 875, 878, 885, 890, 891, 911, 932], "_df": [1, 61], "by_alternate_row": 1, "list": [1, 29, 36, 60, 61, 63, 67, 69, 85, 87, 88, 89, 91, 92, 95, 97, 98, 99, 100, 101, 103, 107, 109, 110, 119, 120, 121, 131, 134, 137, 138, 139, 143, 148, 150, 151, 156, 163, 175, 178, 188, 189, 192, 198, 204, 205, 213, 214, 215, 216, 222, 225, 226, 245, 252, 271, 274, 275, 276, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 362, 368, 396, 405, 406, 414, 424, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 442, 450, 451, 462, 475, 484, 485, 489, 505, 508, 509, 516, 520, 531, 534, 543, 544, 554, 571, 572, 574, 576, 580, 583, 584, 598, 608, 615, 621, 622, 626, 627, 630, 631, 648, 669, 672, 675, 676, 677, 679, 680, 681, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 705, 718, 767, 772, 776, 779, 783, 793, 828, 834, 836, 837, 838, 839, 840, 841, 843, 844, 845, 848, 876, 889, 904, 913, 932], "with_row_count": [1, 245, 398, 554, 648, 851, 932], "name": [1, 15, 19, 21, 28, 29, 31, 50, 61, 62, 63, 64, 69, 70, 74, 85, 87, 88, 89, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 111, 112, 113, 117, 118, 119, 120, 121, 128, 131, 134, 135, 136, 139, 144, 147, 149, 150, 163, 165, 166, 172, 178, 180, 184, 188, 189, 191, 192, 198, 204, 206, 211, 212, 213, 214, 215, 216, 217, 222, 223, 224, 225, 245, 253, 257, 293, 345, 351, 360, 375, 387, 397, 404, 406, 414, 418, 451, 484, 485, 486, 501, 502, 505, 507, 508, 509, 510, 511, 513, 516, 521, 527, 528, 531, 534, 536, 537, 539, 541, 543, 544, 545, 554, 571, 572, 573, 576, 583, 589, 590, 598, 605, 607, 608, 615, 620, 621, 622, 623, 626, 628, 629, 630, 648, 653, 694, 706, 718, 754, 760, 828, 833, 898, 900, 910, 911, 915, 932], "n": [1, 11, 14, 22, 32, 36, 38, 61, 62, 63, 64, 70, 95, 96, 98, 99, 109, 124, 128, 129, 140, 151, 154, 163, 164, 168, 189, 190, 199, 201, 202, 205, 207, 219, 230, 239, 245, 274, 279, 291, 315, 316, 320, 321, 327, 350, 354, 363, 372, 391, 415, 424, 438, 448, 453, 470, 476, 477, 488, 490, 494, 499, 511, 525, 527, 536, 539, 541, 542, 545, 546, 554, 568, 570, 584, 586, 593, 616, 618, 619, 624, 635, 644, 648, 656, 675, 680, 692, 706, 717, 720, 725, 726, 732, 759, 763, 773, 782, 807, 824, 847, 862, 866, 884, 890, 891, 903, 905, 912, 917, 922, 932], "filter": [1, 61, 101, 109, 110, 114, 136, 159, 160, 161, 227, 245, 459, 478, 500, 504, 523, 554, 573, 577, 587, 632, 648, 850, 932], "col": [1, 27, 29, 60, 61, 62, 63, 65, 89, 91, 109, 119, 120, 128, 139, 143, 150, 151, 152, 160, 162, 176, 179, 188, 192, 198, 215, 222, 225, 245, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 289, 290, 293, 294, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 363, 366, 367, 368, 369, 373, 374, 375, 376, 378, 379, 381, 382, 383, 386, 387, 388, 389, 393, 394, 395, 398, 399, 400, 401, 408, 410, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 503, 504, 507, 509, 510, 514, 515, 516, 519, 522, 523, 524, 525, 526, 531, 534, 537, 538, 544, 547, 554, 576, 580, 583, 584, 585, 587, 601, 608, 615, 622, 626, 627, 630, 648, 676, 694, 703, 750, 834, 850, 851, 875, 878, 894, 932], "0": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 33, 60, 61, 62, 64, 65, 69, 93, 98, 99, 100, 102, 103, 107, 109, 111, 112, 113, 114, 115, 118, 119, 120, 121, 124, 128, 129, 130, 132, 133, 134, 137, 141, 142, 145, 146, 148, 149, 150, 151, 153, 157, 162, 163, 164, 165, 167, 169, 170, 171, 174, 175, 176, 177, 181, 182, 186, 190, 191, 192, 195, 197, 198, 199, 200, 206, 207, 209, 210, 213, 216, 218, 219, 222, 223, 225, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 251, 252, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 273, 275, 278, 284, 293, 301, 303, 305, 306, 307, 308, 310, 315, 318, 319, 328, 332, 333, 335, 336, 340, 346, 347, 357, 358, 359, 361, 362, 363, 364, 365, 369, 371, 374, 377, 380, 381, 383, 384, 385, 387, 388, 393, 394, 396, 398, 399, 400, 401, 408, 411, 412, 413, 415, 416, 417, 420, 421, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 443, 445, 446, 447, 448, 452, 453, 461, 480, 483, 487, 491, 492, 493, 499, 504, 505, 506, 507, 509, 511, 513, 514, 516, 520, 523, 532, 533, 536, 537, 538, 541, 544, 546, 547, 554, 568, 569, 572, 574, 578, 579, 583, 584, 589, 592, 597, 602, 603, 607, 608, 610, 611, 613, 615, 616, 624, 626, 627, 628, 630, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 648, 658, 659, 660, 661, 662, 663, 664, 666, 668, 676, 679, 701, 704, 706, 711, 712, 717, 718, 719, 721, 733, 737, 738, 739, 740, 741, 742, 743, 744, 745, 748, 749, 755, 756, 766, 768, 769, 770, 772, 774, 778, 781, 783, 790, 792, 794, 795, 796, 797, 798, 804, 805, 810, 813, 814, 824, 828, 829, 830, 836, 838, 839, 841, 842, 843, 845, 847, 859, 860, 861, 865, 866, 868, 875, 878, 897, 906, 907, 910, 915, 916, 920, 922, 923, 932], "drop": [1, 88, 128, 135, 136, 214, 222, 245, 274, 316, 318, 319, 480, 554, 573, 621, 626, 648, 675, 720, 722, 723, 932], "aaa": [1, 29, 245, 484, 485], "bbb": [1, 29, 245, 484, 485], "ccc": [1, 29, 245, 484, 485], "ddd": [1, 29, 245, 484, 485], "eee": [1, 29, 245], "fff": 1, "column": [1, 14, 15, 18, 19, 21, 29, 31, 51, 60, 61, 68, 69, 70, 72, 74, 85, 87, 88, 89, 90, 91, 92, 93, 97, 98, 99, 100, 101, 103, 104, 107, 108, 109, 110, 111, 112, 113, 116, 120, 127, 128, 134, 135, 136, 137, 139, 144, 147, 149, 150, 151, 152, 156, 157, 163, 165, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 188, 189, 191, 192, 198, 199, 200, 204, 206, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 225, 245, 254, 255, 257, 266, 271, 276, 289, 292, 293, 321, 325, 328, 330, 331, 332, 334, 336, 338, 339, 342, 343, 346, 352, 353, 355, 360, 362, 366, 368, 375, 387, 398, 403, 404, 406, 414, 418, 422, 424, 425, 428, 429, 430, 431, 432, 434, 435, 436, 443, 450, 451, 460, 476, 477, 480, 486, 500, 501, 502, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 521, 522, 523, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 547, 554, 572, 573, 574, 576, 583, 584, 585, 589, 590, 594, 595, 596, 597, 598, 600, 601, 603, 605, 607, 608, 615, 616, 617, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 648, 654, 655, 672, 677, 690, 693, 718, 728, 729, 730, 733, 735, 736, 740, 742, 745, 747, 748, 751, 752, 755, 758, 761, 762, 764, 772, 828, 834, 856, 874, 890, 891, 901, 910, 911, 932], "txt": [1, 109], "utf8": [1, 9, 17, 51, 88, 92, 98, 99, 109, 118, 137, 138, 139, 145, 191, 208, 245, 280, 362, 398, 454, 458, 461, 462, 464, 465, 474, 475, 476, 477, 480, 508, 510, 554, 574, 576, 607, 648, 681, 757, 772, 803, 868, 872, 875, 876, 878, 879, 888, 889, 890, 891, 894, 932], "register_lazyframe_namespac": [1, 61, 62, 64], "dtypeoper": [1, 63], "ldf": [1, 63, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644], "_ldf": [1, 63], "upcast_integer_typ": [1, 63], "with_column": [1, 63, 152, 179, 245, 257, 267, 275, 301, 302, 304, 305, 306, 311, 314, 316, 371, 374, 375, 378, 381, 383, 384, 385, 387, 398, 414, 415, 416, 459, 465, 468, 470, 471, 474, 476, 477, 478, 480, 483, 493, 503, 504, 507, 510, 516, 520, 530, 544, 547, 554, 585, 601, 648, 676, 703, 894], "tp": [1, 63], "cast": [1, 62, 63, 85, 123, 145, 151, 152, 179, 209, 222, 245, 256, 302, 313, 314, 320, 398, 416, 423, 463, 464, 483, 487, 493, 510, 554, 584, 585, 601, 626, 648, 703, 715, 716, 725, 832, 877, 878, 902, 911, 916, 932], "int64": [1, 29, 31, 62, 63, 92, 96, 98, 124, 137, 145, 151, 152, 179, 191, 203, 209, 245, 313, 314, 326, 329, 333, 335, 337, 340, 347, 360, 416, 423, 463, 487, 493, 504, 508, 521, 543, 554, 574, 584, 585, 601, 607, 629, 648, 715, 716, 731, 734, 741, 743, 746, 749, 756, 832, 849, 902, 914, 915, 916, 932], "int8": [1, 63, 145, 245, 313, 314, 487, 554, 715, 716, 720, 811, 835, 902, 920, 932], "int16": [1, 63, 313, 314, 487, 554, 715, 716, 811, 902, 912, 932], "int32": [1, 63, 88, 92, 120, 121, 151, 152, 164, 245, 301, 331, 355, 493, 554, 584, 585, 648, 736, 764, 810, 916, 932], "b": [1, 26, 27, 30, 33, 51, 63, 68, 85, 87, 88, 89, 90, 91, 92, 93, 102, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 156, 157, 159, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 253, 256, 257, 268, 271, 275, 280, 282, 295, 301, 302, 309, 317, 318, 319, 360, 364, 365, 366, 368, 370, 371, 374, 375, 377, 380, 381, 382, 383, 384, 385, 387, 390, 392, 397, 409, 413, 414, 416, 418, 426, 443, 449, 451, 460, 463, 470, 486, 496, 498, 500, 501, 502, 503, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 520, 521, 522, 523, 524, 527, 530, 531, 532, 533, 534, 535, 536, 538, 541, 542, 543, 544, 545, 546, 554, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 586, 589, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 626, 627, 628, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 656, 676, 703, 719, 721, 766, 767, 775, 786, 793, 803, 833, 849, 874, 877, 884, 901, 915, 919, 932], "4": [1, 14, 22, 26, 27, 29, 30, 33, 51, 60, 61, 62, 63, 64, 65, 68, 70, 85, 87, 88, 89, 90, 91, 92, 93, 109, 116, 117, 121, 128, 129, 130, 133, 136, 139, 140, 141, 142, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 170, 172, 175, 176, 178, 179, 180, 181, 185, 189, 193, 198, 201, 202, 203, 204, 205, 206, 211, 213, 215, 216, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 256, 257, 268, 273, 274, 275, 276, 279, 287, 288, 291, 295, 301, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 321, 325, 329, 336, 337, 338, 342, 343, 345, 346, 347, 351, 352, 353, 355, 361, 364, 365, 368, 369, 370, 372, 373, 374, 375, 384, 385, 387, 390, 392, 394, 397, 398, 414, 417, 418, 420, 421, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 441, 442, 445, 449, 450, 451, 452, 455, 465, 466, 468, 469, 472, 474, 476, 477, 480, 484, 485, 486, 488, 489, 490, 493, 494, 503, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 520, 522, 523, 527, 530, 531, 532, 533, 534, 535, 536, 541, 542, 543, 544, 545, 546, 547, 554, 568, 569, 570, 573, 575, 576, 577, 578, 579, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 609, 610, 611, 614, 615, 616, 617, 618, 619, 622, 623, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 656, 659, 666, 675, 676, 677, 680, 688, 689, 692, 704, 705, 707, 717, 719, 721, 733, 734, 740, 742, 745, 746, 747, 748, 752, 754, 755, 756, 757, 760, 761, 762, 774, 775, 782, 783, 785, 786, 788, 793, 795, 796, 797, 798, 802, 811, 817, 824, 825, 826, 828, 830, 834, 839, 841, 842, 843, 844, 845, 847, 849, 859, 863, 864, 869, 879, 880, 882, 883, 886, 888, 890, 891, 894, 901, 903, 904, 905, 912, 915, 916, 924, 932], "c": [1, 26, 27, 30, 33, 51, 61, 63, 88, 90, 92, 102, 109, 119, 129, 130, 131, 133, 134, 135, 136, 137, 139, 143, 144, 145, 146, 148, 149, 150, 151, 154, 156, 157, 164, 165, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 181, 182, 184, 186, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 203, 207, 208, 209, 210, 213, 216, 217, 219, 220, 222, 225, 228, 229, 230, 231, 232, 233, 235, 238, 239, 245, 257, 271, 280, 282, 375, 387, 414, 416, 443, 476, 480, 496, 498, 501, 502, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 522, 523, 524, 527, 530, 531, 532, 533, 534, 535, 536, 541, 542, 544, 545, 546, 554, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 583, 584, 589, 592, 598, 602, 605, 606, 607, 608, 611, 614, 615, 623, 626, 627, 630, 633, 634, 635, 636, 637, 638, 640, 643, 644, 648, 719, 786, 803, 890, 894, 919, 932], "5": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 30, 33, 60, 61, 63, 64, 65, 68, 69, 85, 88, 89, 90, 91, 92, 95, 96, 99, 115, 120, 121, 124, 128, 129, 130, 133, 139, 140, 141, 142, 145, 147, 148, 149, 150, 151, 152, 154, 155, 157, 158, 160, 162, 163, 166, 167, 168, 170, 172, 175, 176, 178, 180, 181, 182, 185, 189, 193, 198, 201, 202, 203, 204, 205, 211, 216, 218, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 252, 273, 275, 276, 279, 284, 290, 291, 301, 302, 303, 304, 305, 306, 315, 316, 317, 321, 322, 326, 344, 346, 347, 348, 352, 359, 360, 363, 369, 372, 375, 378, 381, 383, 384, 385, 387, 392, 414, 415, 418, 420, 421, 425, 426, 427, 428, 429, 431, 435, 437, 439, 445, 451, 456, 464, 465, 468, 469, 483, 486, 488, 490, 494, 503, 506, 507, 509, 511, 512, 513, 514, 515, 516, 519, 520, 521, 522, 523, 527, 530, 531, 532, 533, 534, 535, 536, 538, 541, 542, 544, 545, 546, 554, 568, 569, 570, 575, 576, 577, 578, 579, 581, 583, 584, 585, 586, 588, 590, 591, 592, 593, 596, 597, 598, 602, 609, 610, 611, 614, 615, 616, 617, 618, 619, 625, 626, 628, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 656, 659, 663, 666, 676, 677, 680, 683, 692, 703, 705, 707, 713, 717, 718, 719, 720, 721, 726, 727, 728, 729, 730, 731, 753, 755, 756, 758, 761, 762, 770, 773, 782, 783, 785, 786, 810, 811, 817, 824, 825, 826, 828, 829, 830, 834, 836, 837, 838, 840, 841, 844, 847, 849, 859, 865, 870, 878, 879, 883, 903, 917, 920, 924, 932], "6": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 85, 88, 89, 90, 91, 93, 128, 131, 134, 135, 136, 137, 139, 140, 143, 144, 146, 147, 148, 149, 151, 152, 154, 156, 157, 158, 160, 162, 163, 165, 169, 170, 171, 172, 174, 177, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 215, 216, 217, 218, 219, 220, 222, 223, 230, 238, 239, 245, 257, 276, 295, 301, 313, 314, 317, 321, 341, 343, 346, 356, 364, 365, 370, 372, 374, 392, 419, 421, 422, 425, 428, 429, 430, 431, 432, 434, 435, 436, 439, 451, 456, 460, 465, 468, 469, 488, 490, 501, 503, 514, 515, 516, 520, 523, 530, 544, 554, 570, 571, 572, 573, 574, 575, 576, 577, 580, 581, 584, 585, 586, 588, 589, 591, 593, 594, 598, 602, 605, 607, 608, 609, 610, 611, 614, 615, 618, 619, 622, 623, 625, 626, 628, 629, 635, 643, 644, 648, 656, 677, 705, 711, 715, 716, 719, 721, 750, 762, 783, 817, 830, 834, 839, 841, 842, 843, 845, 849, 870, 874, 879, 883, 902, 932], "7": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 70, 131, 132, 133, 134, 135, 137, 139, 143, 144, 146, 151, 152, 154, 156, 158, 165, 169, 170, 171, 174, 177, 182, 184, 186, 188, 190, 191, 192, 194, 195, 197, 199, 200, 201, 202, 207, 208, 209, 210, 216, 217, 218, 219, 220, 245, 314, 321, 325, 342, 344, 345, 351, 353, 355, 361, 372, 374, 398, 425, 429, 435, 451, 488, 490, 503, 514, 515, 523, 530, 544, 554, 571, 572, 574, 576, 580, 584, 585, 586, 588, 589, 593, 603, 605, 607, 608, 618, 619, 623, 629, 648, 663, 726, 730, 736, 754, 760, 762, 811, 834, 844, 932], "float32": [1, 27, 63, 145, 207, 245, 648, 789, 810, 932], "lazi": [1, 63, 68, 70, 96, 109, 120, 124, 166, 179, 245, 257, 293, 504, 525, 554, 564, 589, 590, 627, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 648], "i16": [1, 63, 443, 554, 811, 912, 932], "i32": [1, 63, 88, 92, 120, 192, 245, 301, 331, 355, 443, 469, 547, 554, 608, 648, 736, 764, 810, 883, 932], "f32": [1, 63, 207, 245, 275, 421, 443, 520, 554, 648, 676, 810, 830, 932], "i64": [1, 14, 18, 61, 62, 63, 64, 68, 85, 87, 88, 89, 90, 91, 92, 96, 109, 121, 124, 128, 129, 130, 131, 134, 136, 137, 139, 140, 142, 143, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 162, 165, 166, 169, 172, 174, 178, 179, 180, 181, 184, 185, 186, 187, 190, 192, 194, 195, 197, 198, 200, 201, 202, 204, 210, 213, 214, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 238, 239, 245, 253, 256, 257, 274, 275, 276, 277, 278, 279, 281, 283, 285, 286, 287, 288, 289, 290, 291, 294, 295, 302, 304, 305, 306, 311, 312, 313, 314, 316, 317, 326, 327, 329, 333, 335, 337, 340, 347, 350, 360, 363, 365, 366, 367, 368, 370, 372, 373, 374, 375, 378, 381, 383, 384, 385, 387, 389, 392, 395, 396, 397, 409, 414, 415, 416, 418, 419, 422, 423, 425, 426, 438, 440, 441, 443, 444, 445, 449, 450, 451, 470, 471, 484, 485, 486, 487, 488, 489, 490, 494, 495, 497, 500, 501, 503, 507, 508, 510, 514, 515, 516, 520, 521, 522, 523, 527, 530, 531, 534, 538, 540, 544, 545, 547, 554, 568, 570, 572, 573, 576, 577, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 593, 594, 595, 598, 600, 601, 602, 605, 606, 608, 609, 610, 614, 615, 617, 618, 619, 621, 622, 623, 626, 628, 630, 631, 632, 634, 635, 636, 637, 640, 643, 644, 648, 656, 657, 675, 676, 677, 680, 688, 689, 690, 692, 703, 707, 710, 713, 714, 715, 716, 719, 731, 732, 734, 741, 743, 746, 749, 753, 756, 759, 773, 775, 776, 782, 785, 793, 816, 833, 834, 837, 840, 844, 847, 850, 851, 854, 858, 859, 863, 864, 901, 903, 904, 905, 911, 918, 921, 924, 932], "register_series_namespac": [1, 61, 62, 63], "math": [1, 64, 711, 860, 906, 932], "mathshortcut": [1, 64], "": [1, 27, 29, 64, 69, 93, 98, 99, 110, 121, 134, 136, 138, 139, 150, 151, 157, 165, 166, 178, 180, 185, 186, 192, 198, 202, 206, 212, 214, 215, 216, 245, 279, 280, 287, 288, 291, 327, 348, 360, 388, 405, 409, 411, 412, 414, 415, 423, 427, 451, 465, 466, 468, 472, 474, 475, 477, 480, 483, 484, 485, 505, 508, 511, 516, 519, 521, 524, 525, 531, 534, 536, 543, 544, 554, 572, 573, 576, 583, 584, 590, 608, 615, 620, 621, 622, 632, 648, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 675, 677, 680, 681, 683, 688, 689, 690, 692, 701, 704, 705, 706, 707, 710, 711, 712, 713, 714, 715, 716, 717, 720, 721, 726, 732, 753, 754, 760, 767, 769, 770, 773, 774, 775, 776, 778, 781, 782, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 824, 825, 826, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 854, 858, 859, 860, 861, 863, 864, 866, 869, 870, 872, 873, 874, 876, 877, 879, 880, 881, 882, 883, 884, 886, 887, 888, 891, 892, 893, 894, 897, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 916, 918, 919, 920, 921, 922, 923, 932], "_": [1, 60, 64, 93, 180, 206, 245, 476, 890, 910, 932], "squar": [1, 64, 227, 388, 452, 554, 632, 805, 865, 932], "cube": [1, 64], "s2": [1, 117, 145, 245, 656, 705, 721, 793, 817, 849, 915, 924, 932], "renam": [1, 88, 98, 99, 192, 222, 225, 245, 253, 397, 407, 485, 540, 543, 554, 608, 626, 630, 648, 811, 900, 911, 932], "n2": 1, "in_plac": [1, 156, 196, 220, 245, 831, 833, 857, 864, 932], "true": [1, 9, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 65, 67, 68, 70, 85, 86, 90, 95, 98, 99, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 125, 127, 129, 130, 133, 142, 145, 146, 148, 149, 150, 151, 157, 159, 160, 161, 163, 166, 167, 170, 175, 176, 178, 180, 181, 188, 189, 190, 192, 198, 204, 209, 212, 213, 214, 215, 216, 218, 222, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 252, 254, 255, 256, 257, 267, 272, 289, 292, 297, 301, 310, 311, 312, 313, 314, 330, 345, 346, 351, 356, 357, 358, 359, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 423, 433, 438, 443, 448, 450, 451, 455, 457, 459, 463, 464, 469, 475, 476, 478, 480, 484, 485, 489, 494, 495, 498, 502, 503, 504, 505, 511, 512, 523, 539, 541, 543, 547, 554, 568, 569, 570, 575, 577, 579, 583, 584, 589, 590, 592, 594, 598, 602, 608, 611, 612, 613, 615, 620, 621, 622, 626, 631, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 648, 654, 655, 656, 657, 667, 690, 693, 697, 701, 705, 706, 735, 754, 755, 760, 766, 768, 769, 770, 776, 780, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 805, 817, 825, 826, 832, 842, 849, 862, 864, 869, 871, 873, 877, 878, 883, 889, 890, 892, 894, 914, 915, 917, 923, 924, 932], "s3": [1, 101, 110, 114, 932], "n3": 1, "8": [1, 26, 27, 30, 31, 32, 33, 44, 57, 59, 60, 61, 63, 64, 68, 69, 93, 115, 119, 120, 128, 131, 132, 133, 134, 135, 136, 137, 139, 143, 144, 146, 149, 154, 156, 165, 169, 170, 171, 174, 182, 184, 186, 188, 190, 191, 192, 194, 195, 197, 199, 200, 201, 202, 207, 208, 209, 210, 216, 217, 219, 220, 222, 245, 256, 268, 274, 275, 309, 311, 314, 315, 318, 319, 321, 374, 390, 417, 418, 425, 426, 429, 430, 432, 434, 436, 443, 449, 451, 466, 472, 480, 486, 490, 506, 511, 512, 513, 515, 516, 520, 522, 527, 530, 531, 532, 533, 534, 535, 536, 541, 542, 544, 545, 546, 554, 571, 572, 573, 574, 576, 580, 586, 589, 593, 594, 602, 605, 607, 608, 618, 619, 623, 626, 629, 648, 675, 676, 717, 736, 783, 824, 828, 834, 836, 839, 841, 842, 843, 845, 880, 886, 894, 932], "9": [1, 26, 27, 30, 33, 60, 68, 128, 132, 145, 152, 154, 158, 192, 201, 216, 217, 220, 222, 238, 245, 256, 268, 274, 286, 289, 309, 311, 314, 318, 319, 321, 325, 342, 352, 353, 374, 379, 387, 390, 425, 427, 429, 435, 445, 449, 490, 503, 509, 514, 515, 554, 585, 586, 588, 593, 608, 618, 623, 626, 643, 648, 675, 690, 730, 740, 742, 748, 754, 755, 760, 761, 793, 834, 836, 844, 846, 859, 932], "27": [1, 64, 238, 314, 331, 343, 355, 417, 554, 643, 932], "16": [1, 29, 41, 54, 62, 69, 93, 115, 151, 152, 222, 245, 311, 314, 362, 374, 429, 469, 480, 503, 514, 519, 520, 523, 536, 541, 554, 584, 585, 611, 626, 648, 754, 760, 772, 824, 860, 883, 906, 932], "64": [1, 33, 40, 43, 56, 62, 64, 245, 417, 554, 613, 648, 824, 932], "25": [1, 29, 64, 70, 92, 151, 152, 166, 218, 222, 245, 316, 331, 345, 351, 355, 525, 554, 584, 585, 590, 596, 624, 626, 648, 720, 754, 760, 766, 783, 824, 828, 932], "125": [1, 29, 64, 245, 824, 932], "arg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 179, 209, 245, 416, 505, 524, 554, 601, 648, 657, 914, 915, 932], "ani": [2, 3, 4, 7, 27, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 66, 85, 86, 87, 88, 89, 90, 91, 98, 99, 101, 102, 103, 107, 109, 110, 111, 113, 118, 120, 121, 125, 128, 132, 136, 140, 142, 143, 145, 162, 163, 164, 178, 179, 188, 189, 204, 205, 208, 209, 214, 216, 245, 257, 271, 275, 301, 346, 365, 379, 396, 398, 407, 416, 425, 427, 439, 442, 469, 480, 489, 503, 511, 522, 529, 541, 547, 554, 573, 579, 601, 621, 648, 656, 657, 672, 676, 721, 755, 775, 793, 804, 811, 834, 836, 848, 851, 883, 894, 904, 913, 914, 915, 932], "kwarg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 132, 179, 209, 245, 416, 554, 601, 648, 915, 932], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 554, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 932, 939], "method": [2, 3, 4, 7, 26, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 86, 98, 99, 102, 118, 136, 150, 158, 163, 176, 182, 188, 189, 214, 222, 237, 245, 254, 363, 374, 417, 420, 421, 428, 429, 430, 431, 432, 434, 435, 436, 496, 511, 536, 537, 541, 548, 550, 554, 555, 556, 559, 560, 561, 564, 573, 588, 603, 621, 626, 642, 648, 657, 773, 785, 829, 830, 841, 916, 926, 928, 932, 933, 936, 937, 938], "A": [4, 27, 29, 48, 67, 70, 92, 98, 99, 100, 107, 109, 145, 151, 166, 180, 189, 204, 216, 217, 218, 222, 245, 251, 293, 321, 326, 329, 333, 335, 337, 340, 347, 363, 377, 380, 381, 383, 396, 397, 405, 418, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 455, 456, 461, 462, 464, 470, 471, 483, 486, 509, 520, 524, 554, 584, 590, 605, 623, 626, 648, 694, 726, 731, 734, 741, 743, 746, 749, 756, 773, 836, 837, 838, 840, 843, 844, 845, 869, 870, 875, 876, 878, 884, 885, 894, 897, 932], "encod": [4, 59, 98, 99, 109, 297, 457, 697, 871], "set": [4, 5, 6, 7, 8, 9, 11, 13, 14, 17, 22, 23, 25, 27, 29, 31, 32, 61, 65, 70, 86, 88, 91, 93, 98, 99, 102, 103, 107, 109, 111, 112, 113, 116, 117, 119, 120, 121, 125, 127, 131, 136, 150, 153, 163, 166, 172, 190, 192, 197, 206, 213, 214, 216, 222, 245, 257, 288, 292, 293, 354, 371, 379, 398, 427, 428, 429, 430, 431, 432, 434, 435, 436, 438, 444, 448, 449, 467, 473, 474, 479, 504, 539, 543, 547, 554, 571, 573, 575, 583, 589, 590, 594, 598, 608, 612, 613, 614, 621, 626, 629, 632, 648, 656, 657, 689, 693, 694, 763, 781, 793, 811, 836, 837, 838, 839, 840, 841, 843, 844, 845, 847, 851, 858, 862, 863, 881, 887, 888, 893, 914, 932], "string": [4, 6, 8, 11, 12, 13, 17, 27, 29, 31, 32, 36, 51, 59, 70, 92, 98, 99, 109, 118, 119, 121, 123, 145, 149, 150, 151, 152, 166, 192, 198, 207, 212, 216, 218, 222, 225, 245, 280, 299, 302, 341, 345, 351, 362, 368, 375, 398, 414, 428, 429, 430, 431, 432, 434, 435, 436, 451, 454, 455, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 505, 507, 509, 510, 524, 531, 534, 543, 554, 575, 582, 583, 584, 585, 590, 608, 615, 620, 626, 629, 630, 648, 681, 699, 703, 750, 754, 760, 772, 786, 867, 868, 869, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 912, 932], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 582, 604, 648], "activ": [5, 9, 15, 16, 18, 19, 20, 21, 24, 275, 676], "decim": [5, 27, 29, 245, 437, 554, 846, 932], "temporari": 5, "remov": [5, 7, 134, 217, 245, 257, 360, 362, 467, 473, 479, 480, 521, 536, 541, 554, 572, 623, 648, 772, 881, 887, 893, 932], "later": 5, "onc": [5, 98, 99, 102, 127, 128, 190, 225, 245, 257, 438, 554, 567, 630, 648, 657, 847, 932], "stabil": 5, "happen": 5, "being": [5, 69, 98, 99, 109, 114, 216, 217, 245, 257, 315, 345, 428, 429, 430, 431, 432, 434, 435, 436, 520, 554, 623, 648, 717, 754, 783, 828, 932], "consid": [5, 69, 98, 99, 109, 114, 128, 136, 146, 172, 214, 216, 217, 245, 257, 304, 305, 306, 315, 345, 428, 429, 430, 431, 432, 434, 435, 436, 514, 523, 554, 573, 586, 593, 598, 621, 623, 648, 657, 707, 708, 709, 717, 754, 783, 828, 849, 850, 851, 932], "break": [5, 69, 114, 216, 217, 245, 257, 315, 345, 428, 429, 430, 431, 432, 434, 435, 436, 554, 623, 648, 717, 754, 783, 828, 932], "chang": [5, 25, 60, 69, 98, 99, 114, 216, 217, 218, 245, 257, 315, 316, 345, 415, 428, 429, 430, 431, 432, 434, 435, 436, 554, 623, 648, 717, 753, 754, 783, 824, 828, 857, 932], "current": [5, 8, 25, 86, 92, 100, 127, 129, 130, 245, 293, 345, 415, 554, 564, 568, 569, 648, 706, 710, 754, 824, 932], "alpha": [5, 67, 257, 357, 358, 359, 554, 570, 575, 577, 602, 611, 648, 768, 769, 770, 932], "stage": [5, 257, 554], "cfg": [6, 7, 8, 14, 125, 192, 222, 245, 608, 626, 648], "previous": 6, "save": [6, 564], "share": [6, 51, 138, 245, 767, 932], "option": [6, 7, 8, 25, 29, 37, 60, 70, 98, 101, 102, 103, 107, 110, 111, 113, 115, 118, 119, 120, 121, 166, 172, 204, 213, 245, 388, 427, 428, 429, 430, 431, 432, 434, 435, 436, 448, 474, 529, 543, 547, 554, 564, 589, 590, 598, 648, 801, 805, 836, 837, 838, 839, 840, 841, 843, 844, 845, 851, 862, 888, 911, 932], "paramet": [6, 10, 11, 12, 13, 14, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 38, 45, 48, 50, 52, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 124, 127, 128, 129, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 163, 164, 165, 166, 168, 170, 172, 173, 175, 176, 178, 179, 180, 182, 184, 185, 186, 188, 189, 190, 192, 194, 195, 197, 198, 199, 200, 201, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 227, 230, 237, 239, 245, 253, 256, 257, 266, 271, 272, 273, 274, 275, 278, 279, 280, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 327, 341, 344, 345, 350, 351, 354, 356, 357, 358, 359, 360, 363, 365, 366, 370, 371, 372, 374, 375, 379, 388, 391, 393, 396, 397, 398, 414, 415, 416, 417, 420, 421, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 488, 489, 494, 495, 498, 499, 500, 501, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 521, 523, 524, 525, 527, 528, 529, 530, 531, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 554, 568, 570, 572, 573, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 589, 590, 593, 594, 598, 599, 601, 602, 603, 604, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 632, 635, 642, 644, 648, 653, 656, 657, 666, 672, 673, 674, 675, 676, 679, 680, 681, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 706, 707, 708, 709, 713, 714, 715, 716, 717, 718, 720, 721, 725, 726, 727, 732, 750, 753, 754, 759, 760, 763, 766, 767, 768, 769, 770, 773, 774, 775, 776, 781, 782, 783, 785, 786, 800, 801, 805, 807, 811, 824, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 858, 862, 863, 864, 866, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 900, 903, 904, 910, 911, 912, 913, 914, 915, 917, 918, 921, 922, 923, 924, 932], "json": [6, 8, 31, 32, 105, 106, 112, 245, 463, 464, 564, 582, 604, 629, 648, 877, 878], "produc": [6, 120, 121, 273, 404, 530, 594, 648, 674], "reset": [7, 125], "default": [7, 12, 25, 26, 27, 29, 30, 31, 32, 33, 65, 85, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 107, 109, 118, 119, 120, 121, 124, 136, 138, 150, 152, 153, 163, 166, 172, 178, 180, 188, 189, 190, 199, 206, 214, 216, 219, 223, 245, 288, 292, 293, 302, 356, 357, 358, 359, 371, 393, 398, 411, 412, 415, 421, 438, 444, 453, 461, 467, 469, 473, 474, 479, 480, 499, 504, 511, 525, 529, 536, 539, 541, 542, 543, 546, 554, 573, 575, 583, 585, 590, 598, 613, 616, 621, 624, 629, 648, 689, 693, 694, 703, 766, 767, 768, 769, 770, 781, 811, 820, 821, 824, 830, 847, 858, 866, 875, 881, 883, 887, 888, 893, 922, 932], "state": [7, 67, 78, 514, 564, 570, 575, 577, 602, 611, 648], "note": [7, 17, 29, 37, 60, 70, 85, 86, 87, 89, 91, 92, 96, 98, 100, 101, 107, 109, 110, 119, 120, 121, 124, 125, 127, 128, 132, 141, 151, 152, 163, 165, 166, 176, 179, 188, 189, 205, 208, 213, 217, 218, 222, 245, 257, 275, 292, 313, 314, 318, 319, 341, 345, 351, 375, 381, 383, 428, 429, 430, 431, 432, 434, 435, 436, 448, 465, 467, 468, 473, 479, 480, 487, 514, 523, 538, 547, 554, 570, 577, 578, 584, 585, 586, 590, 593, 605, 611, 623, 626, 648, 657, 676, 693, 715, 716, 750, 760, 850, 851, 857, 862, 879, 881, 882, 887, 893, 902, 932], "oper": [7, 29, 51, 68, 75, 76, 85, 87, 88, 89, 90, 91, 98, 107, 128, 140, 145, 150, 157, 167, 173, 176, 178, 179, 183, 203, 208, 209, 213, 216, 224, 225, 245, 252, 293, 310, 311, 312, 313, 314, 315, 387, 407, 417, 423, 501, 502, 509, 510, 520, 554, 577, 583, 586, 589, 593, 598, 599, 630, 648, 656, 713, 714, 715, 716, 717, 832, 909, 913, 914, 915, 923, 932], "from": [7, 27, 29, 60, 68, 70, 85, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 133, 134, 138, 140, 149, 151, 152, 163, 164, 166, 167, 172, 184, 188, 190, 192, 213, 214, 216, 218, 245, 310, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 360, 374, 388, 411, 412, 415, 438, 451, 461, 463, 469, 480, 496, 498, 507, 517, 518, 519, 529, 541, 542, 553, 554, 572, 577, 582, 584, 585, 590, 598, 604, 605, 608, 621, 627, 648, 656, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 801, 805, 820, 821, 822, 824, 847, 875, 877, 883, 921, 924, 932], "environ": [7, 25], "local": [7, 101, 110, 728, 729, 758, 825, 826, 932], "non": [7, 29, 37, 60, 90, 164, 172, 192, 217, 222, 245, 375, 415, 427, 428, 429, 430, 431, 432, 434, 435, 436, 456, 462, 507, 509, 510, 531, 534, 543, 554, 598, 608, 623, 626, 648, 694, 786, 824, 836, 837, 838, 839, 840, 841, 843, 844, 845, 870, 876, 914, 932], "env": 7, "back": [7, 60, 140, 209, 245, 414, 554, 656, 915, 932], "valu": [7, 10, 11, 25, 27, 29, 31, 45, 46, 58, 60, 68, 69, 88, 90, 98, 99, 100, 109, 114, 116, 117, 118, 119, 120, 121, 123, 125, 127, 128, 136, 140, 141, 142, 146, 149, 151, 152, 153, 154, 158, 163, 168, 169, 170, 171, 172, 174, 176, 178, 180, 181, 182, 184, 188, 189, 190, 194, 195, 198, 199, 200, 201, 204, 205, 209, 212, 216, 217, 218, 219, 228, 229, 231, 232, 233, 235, 236, 245, 251, 252, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 273, 274, 277, 278, 279, 281, 283, 284, 285, 287, 290, 291, 293, 294, 295, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 311, 314, 315, 316, 318, 319, 321, 325, 338, 342, 352, 357, 358, 359, 361, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 380, 381, 383, 384, 385, 386, 389, 390, 394, 395, 396, 398, 399, 400, 401, 408, 409, 410, 411, 412, 413, 415, 420, 421, 424, 427, 428, 429, 430, 431, 432, 434, 435, 436, 438, 439, 440, 441, 442, 445, 446, 447, 448, 450, 451, 452, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 470, 471, 474, 476, 477, 478, 483, 487, 489, 490, 491, 492, 494, 495, 496, 497, 498, 502, 507, 510, 512, 514, 515, 516, 522, 523, 529, 531, 532, 533, 534, 535, 538, 539, 544, 547, 554, 573, 578, 579, 584, 585, 587, 588, 595, 596, 597, 598, 600, 603, 605, 609, 610, 615, 616, 617, 620, 623, 624, 629, 633, 634, 636, 637, 638, 640, 641, 648, 652, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 674, 675, 678, 679, 680, 682, 684, 685, 686, 688, 692, 695, 697, 698, 699, 700, 703, 704, 707, 708, 709, 711, 712, 717, 718, 719, 720, 722, 723, 726, 730, 747, 751, 761, 767, 768, 769, 770, 773, 774, 775, 778, 780, 781, 782, 783, 785, 786, 788, 790, 791, 793, 794, 795, 796, 797, 798, 802, 807, 811, 812, 813, 815, 816, 818, 820, 821, 822, 823, 824, 827, 828, 829, 830, 836, 837, 838, 839, 840, 841, 843, 844, 845, 847, 848, 849, 850, 851, 854, 855, 859, 860, 861, 862, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 882, 884, 885, 888, 890, 891, 892, 897, 902, 903, 904, 905, 906, 907, 915, 916, 919, 921, 923, 924, 932], "exampl": [7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 99, 100, 101, 102, 109, 110, 114, 115, 116, 117, 118, 119, 120, 121, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 519, 520, 521, 522, 523, 524, 525, 527, 529, 530, 531, 532, 533, 534, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 554, 564, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 675, 676, 677, 680, 681, 683, 688, 689, 690, 692, 694, 701, 703, 704, 705, 706, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 773, 774, 775, 776, 778, 781, 782, 783, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 806, 810, 811, 812, 813, 814, 815, 816, 817, 818, 824, 825, 826, 828, 829, 830, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 854, 858, 859, 860, 861, 863, 864, 866, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 901, 902, 903, 904, 905, 906, 907, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 932], "bool": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 60, 65, 67, 68, 85, 86, 90, 98, 99, 103, 107, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 127, 129, 130, 142, 143, 145, 146, 148, 149, 150, 151, 156, 157, 159, 160, 161, 166, 178, 180, 190, 196, 198, 204, 209, 212, 213, 214, 215, 218, 220, 222, 229, 231, 232, 235, 245, 254, 255, 256, 257, 266, 272, 273, 275, 289, 292, 294, 297, 301, 310, 311, 312, 313, 314, 315, 330, 346, 356, 357, 358, 359, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 396, 402, 403, 421, 423, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 440, 442, 443, 448, 450, 451, 455, 457, 459, 469, 470, 471, 475, 476, 478, 480, 485, 494, 495, 498, 502, 503, 504, 505, 511, 514, 529, 539, 541, 543, 554, 568, 570, 575, 577, 579, 580, 583, 584, 589, 590, 594, 598, 602, 611, 612, 613, 615, 620, 621, 622, 626, 634, 636, 637, 640, 648, 654, 655, 656, 657, 666, 673, 674, 676, 690, 693, 695, 697, 701, 706, 713, 714, 715, 716, 717, 718, 735, 755, 766, 768, 769, 770, 776, 780, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 825, 826, 828, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 851, 852, 857, 862, 864, 869, 871, 873, 883, 884, 885, 889, 890, 892, 894, 913, 914, 915, 917, 918, 921, 923, 932], "ascii": [9, 17, 466, 468, 472, 483, 880, 882, 886, 897], "charact": [9, 11, 17, 23, 27, 98, 99, 109, 245, 341, 460, 465, 466, 467, 472, 473, 475, 476, 479, 483, 602, 648, 750, 874, 879, 880, 881, 886, 887, 889, 890, 893, 897], "displai": [9, 10, 11, 14, 16, 20, 22, 29, 245], "tabl": [9, 13, 14, 16, 17, 18, 19, 20, 22, 23, 28, 29, 50, 85, 92, 98, 99, 101, 109, 110, 180, 203, 209, 216, 217, 245, 623, 648, 915, 932], "outlin": 9, "fals": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 29, 31, 33, 60, 65, 67, 70, 86, 90, 98, 99, 102, 103, 107, 109, 112, 113, 116, 117, 118, 119, 120, 121, 127, 129, 130, 133, 145, 146, 148, 149, 150, 151, 156, 157, 159, 160, 161, 163, 166, 167, 170, 175, 176, 178, 180, 181, 188, 189, 190, 196, 198, 204, 209, 212, 213, 214, 218, 220, 222, 228, 229, 231, 232, 233, 235, 238, 245, 254, 255, 257, 266, 272, 275, 289, 292, 294, 310, 311, 312, 313, 314, 315, 330, 346, 356, 357, 358, 359, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 396, 421, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 440, 443, 448, 450, 451, 455, 459, 463, 469, 470, 471, 475, 476, 478, 480, 494, 495, 498, 502, 504, 505, 511, 514, 529, 539, 541, 543, 547, 554, 568, 569, 570, 575, 577, 583, 584, 589, 590, 592, 594, 602, 611, 612, 613, 615, 620, 621, 626, 633, 634, 636, 637, 638, 640, 643, 648, 656, 666, 676, 690, 693, 695, 701, 705, 706, 713, 714, 715, 716, 717, 718, 735, 755, 766, 768, 769, 770, 776, 786, 787, 788, 790, 793, 794, 795, 796, 797, 798, 800, 801, 802, 805, 817, 825, 826, 828, 830, 831, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 852, 857, 862, 864, 869, 873, 877, 883, 884, 885, 889, 890, 892, 894, 913, 914, 915, 917, 918, 921, 923, 924, 932], "revert": 9, "abc": [9, 15, 16, 18, 19, 20, 21, 22, 470, 554, 884], "xyz": [9, 15, 16, 18, 19, 20, 21, 22, 456, 462, 870, 876, 911, 932], "f64": [9, 13, 15, 16, 18, 19, 20, 21, 22, 60, 62, 64, 69, 88, 114, 120, 129, 130, 132, 133, 134, 136, 137, 141, 142, 145, 148, 149, 150, 157, 165, 166, 170, 171, 181, 182, 197, 198, 199, 219, 222, 225, 229, 231, 232, 233, 234, 235, 237, 238, 245, 251, 258, 259, 260, 261, 262, 263, 284, 301, 303, 307, 308, 315, 318, 319, 346, 356, 357, 358, 359, 360, 361, 369, 374, 381, 383, 384, 385, 387, 388, 393, 394, 399, 400, 401, 408, 411, 412, 415, 417, 420, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 446, 447, 448, 452, 453, 491, 492, 499, 506, 507, 509, 511, 513, 521, 532, 533, 536, 541, 542, 546, 554, 568, 572, 573, 578, 579, 583, 589, 590, 596, 597, 603, 615, 616, 624, 626, 627, 630, 634, 636, 637, 638, 639, 640, 642, 643, 648, 658, 659, 660, 661, 662, 663, 704, 711, 712, 717, 718, 719, 755, 769, 770, 774, 778, 783, 824, 828, 836, 838, 839, 841, 842, 843, 845, 846, 860, 861, 865, 906, 907, 920, 932], "fmt": [10, 348, 373, 480, 524, 554, 587, 648, 757, 894], "floatfmt": 10, "mix": [10, 480, 719, 894, 932], "control": [10, 29, 119, 245, 575, 648], "how": [10, 29, 51, 68, 88, 91, 100, 136, 165, 216, 217, 245, 273, 274, 302, 316, 374, 414, 424, 547, 554, 573, 589, 623, 648, 674, 675, 703, 720, 932], "float": [10, 29, 39, 40, 69, 114, 116, 117, 118, 120, 121, 138, 141, 166, 182, 190, 195, 237, 245, 272, 273, 303, 304, 305, 306, 318, 319, 346, 356, 357, 358, 359, 364, 369, 374, 377, 380, 381, 383, 384, 385, 393, 399, 408, 411, 412, 417, 420, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 442, 506, 516, 532, 533, 537, 539, 542, 544, 546, 554, 578, 590, 603, 610, 611, 642, 648, 673, 674, 701, 704, 707, 708, 709, 718, 721, 755, 766, 767, 768, 769, 770, 774, 778, 783, 792, 805, 808, 813, 814, 820, 821, 827, 828, 829, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 850, 851, 862, 866, 902, 922, 932], "point": [10, 29, 39, 40, 120, 121, 141, 151, 167, 245, 303, 318, 319, 346, 364, 369, 381, 383, 437, 438, 554, 578, 584, 594, 605, 648, 704, 755, 774, 778, 792, 846, 847, 932], "full": [10, 36, 66, 98, 99, 101, 109, 110, 594, 648], "format": [10, 13, 17, 27, 29, 92, 97, 98, 99, 109, 114, 139, 149, 163, 172, 189, 205, 243, 245, 345, 348, 469, 480, 502, 576, 582, 598, 629, 648, 757, 883, 894, 931], "number": [10, 11, 12, 14, 22, 23, 27, 29, 33, 60, 79, 85, 87, 89, 91, 95, 96, 98, 99, 102, 109, 112, 119, 120, 122, 124, 129, 138, 139, 141, 142, 154, 163, 164, 167, 168, 175, 176, 190, 194, 195, 199, 201, 212, 216, 219, 228, 230, 239, 245, 267, 274, 279, 287, 291, 293, 295, 309, 315, 316, 328, 331, 336, 338, 346, 352, 353, 355, 357, 358, 359, 363, 365, 370, 372, 381, 383, 390, 391, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 441, 442, 444, 453, 465, 468, 470, 476, 477, 488, 494, 499, 511, 512, 527, 536, 541, 542, 545, 546, 554, 568, 576, 577, 578, 579, 586, 593, 602, 609, 610, 613, 616, 618, 620, 624, 633, 635, 644, 648, 675, 680, 688, 692, 694, 706, 717, 720, 733, 736, 745, 747, 755, 761, 762, 764, 767, 768, 769, 770, 773, 775, 782, 792, 807, 817, 818, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 854, 855, 858, 866, 879, 882, 884, 890, 891, 903, 917, 922, 932], "int": [11, 12, 14, 22, 23, 27, 29, 33, 37, 62, 88, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 124, 128, 129, 138, 141, 142, 144, 153, 154, 155, 157, 163, 164, 166, 168, 169, 170, 174, 175, 176, 186, 188, 190, 193, 194, 195, 197, 199, 200, 201, 202, 207, 210, 212, 216, 219, 221, 223, 230, 239, 245, 272, 273, 274, 278, 279, 287, 288, 291, 292, 293, 295, 304, 305, 306, 315, 316, 357, 358, 359, 363, 364, 365, 370, 371, 372, 391, 415, 417, 421, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 444, 449, 453, 461, 466, 469, 470, 472, 474, 476, 477, 483, 488, 489, 490, 494, 499, 504, 511, 512, 516, 517, 518, 519, 525, 527, 533, 535, 536, 539, 541, 542, 543, 544, 545, 546, 554, 568, 577, 578, 579, 586, 590, 593, 602, 609, 610, 613, 614, 616, 618, 619, 620, 624, 625, 628, 635, 644, 648, 664, 665, 673, 674, 675, 679, 680, 688, 689, 692, 693, 694, 701, 705, 706, 707, 708, 709, 717, 720, 767, 768, 769, 770, 773, 774, 775, 781, 782, 783, 806, 807, 813, 817, 818, 820, 821, 822, 823, 824, 827, 830, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 854, 855, 858, 863, 866, 875, 880, 883, 884, 886, 888, 890, 891, 897, 902, 903, 904, 905, 912, 917, 922, 932], "size": [12, 33, 98, 99, 119, 120, 121, 138, 151, 216, 245, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 504, 554, 584, 613, 648, 767, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 932], "overwrit": [12, 28, 85, 87, 88, 89, 91, 98, 99, 109, 127, 245, 577, 648], "chunk": [12, 33, 95, 98, 99, 107, 109, 111, 112, 113, 120, 121, 140, 164, 175, 245, 256, 422, 554, 613, 648, 656, 705, 779, 817, 831, 909, 932], "stream": [12, 30, 67, 150, 214, 245, 570, 575, 577, 583, 594, 598, 602, 611, 612, 613, 621, 648], "engin": [12, 28, 100, 128, 150, 214, 227, 245, 583, 594, 598, 621, 632, 648, 657, 932], "By": [12, 98, 99, 102, 109, 166, 199, 219, 245, 453, 469, 499, 511, 529, 536, 541, 542, 546, 554, 590, 616, 624, 648, 866, 883, 914, 922, 932], "determin": [12, 29, 58, 60, 68, 88, 91, 98, 99, 102, 107, 109, 113, 128, 145, 151, 152, 163, 164, 213, 218, 245, 293, 302, 330, 404, 424, 428, 429, 430, 431, 432, 434, 435, 436, 448, 554, 584, 585, 648, 694, 703, 735, 783, 862, 932], "schema": [12, 61, 62, 63, 68, 80, 81, 83, 85, 87, 88, 89, 91, 92, 98, 99, 104, 108, 109, 112, 119, 120, 128, 129, 130, 137, 138, 173, 176, 245, 293, 404, 543, 568, 569, 574, 594, 599, 629, 632, 648, 710, 932], "thread": [12, 27, 95, 98, 99, 100, 122, 245, 257, 275, 554, 676], "pool": [12, 122], "For": [12, 29, 100, 101, 102, 110, 140, 152, 165, 166, 227, 245, 293, 301, 357, 358, 359, 405, 423, 448, 514, 523, 524, 554, 585, 590, 632, 648, 656, 768, 769, 770, 832, 862, 914, 932], "some": [12, 25, 29, 88, 98, 99, 109, 136, 245, 573, 648, 793, 932], "dataset": [12, 98, 99, 109, 114, 388, 554, 564, 594, 648, 805, 932], "esp": 12, "when": [12, 14, 16, 20, 29, 33, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 103, 107, 109, 110, 111, 112, 120, 121, 123, 128, 137, 138, 140, 142, 145, 151, 179, 188, 192, 198, 206, 214, 245, 304, 305, 306, 357, 358, 359, 365, 396, 398, 405, 450, 451, 467, 473, 479, 480, 505, 514, 523, 554, 579, 584, 594, 608, 613, 615, 621, 648, 656, 707, 708, 709, 767, 768, 769, 770, 775, 811, 850, 851, 881, 887, 893, 910, 932], "have": [12, 25, 29, 60, 86, 98, 99, 102, 120, 121, 123, 140, 163, 183, 189, 205, 245, 315, 357, 358, 359, 405, 421, 480, 554, 598, 611, 628, 648, 656, 717, 753, 768, 769, 770, 780, 830, 894, 932], "larg": 12, "element": [12, 22, 96, 121, 124, 199, 212, 219, 245, 257, 258, 259, 260, 261, 262, 263, 273, 275, 276, 307, 308, 310, 311, 312, 313, 314, 315, 361, 371, 379, 394, 415, 421, 424, 439, 445, 446, 447, 452, 453, 476, 477, 491, 492, 494, 499, 511, 536, 541, 542, 546, 554, 616, 620, 624, 648, 657, 658, 659, 660, 661, 662, 663, 674, 676, 677, 706, 711, 712, 713, 714, 715, 716, 717, 771, 776, 782, 793, 807, 809, 824, 830, 848, 859, 860, 861, 865, 866, 890, 891, 903, 906, 907, 912, 917, 918, 922, 932], "too": 12, "optimist": 12, "lead": [12, 92, 114, 245, 440, 467, 479, 483, 489, 498, 511, 541, 554, 594, 632, 648, 852, 881, 893, 897, 932], "out": [12, 92, 115, 152, 245, 278, 292, 297, 377, 380, 455, 457, 547, 554, 585, 612, 613, 648, 679, 693, 697, 869, 871], "memori": [12, 33, 68, 85, 86, 89, 90, 91, 98, 99, 103, 107, 109, 111, 112, 113, 127, 128, 140, 196, 227, 245, 422, 443, 554, 613, 632, 648, 656, 657, 831, 856, 857, 932], "error": [12, 71, 98, 99, 109, 188, 245, 280, 292, 297, 301, 387, 455, 457, 463, 464, 480, 554, 632, 681, 693, 697, 701, 869, 871, 877, 878, 894, 932], "row": [12, 17, 22, 27, 29, 31, 33, 60, 61, 63, 77, 79, 84, 88, 89, 91, 92, 98, 99, 102, 103, 107, 109, 111, 112, 113, 116, 119, 120, 128, 129, 136, 140, 143, 145, 149, 151, 153, 154, 159, 161, 163, 164, 166, 167, 168, 172, 176, 190, 197, 201, 202, 205, 207, 212, 214, 216, 217, 223, 227, 230, 239, 245, 257, 267, 276, 362, 372, 391, 415, 425, 449, 451, 460, 488, 505, 514, 515, 523, 527, 531, 534, 538, 545, 547, 554, 568, 570, 573, 577, 580, 581, 584, 586, 590, 591, 593, 594, 598, 613, 614, 618, 619, 620, 621, 623, 628, 632, 635, 644, 648, 656, 677, 772, 782, 824, 834, 863, 874, 903, 932], "per": [12, 27, 29, 119, 120, 149, 176, 177, 198, 212, 234, 236, 237, 245, 257, 275, 278, 292, 451, 505, 554, 615, 620, 639, 641, 642, 648, 676, 679, 693], "everi": [12, 98, 99, 109, 151, 202, 205, 218, 245, 269, 270, 274, 276, 278, 279, 288, 291, 310, 311, 312, 313, 314, 315, 345, 351, 362, 460, 490, 514, 515, 554, 577, 584, 619, 648, 670, 671, 675, 677, 679, 680, 689, 692, 713, 714, 715, 716, 717, 754, 760, 772, 874, 905, 932], "process": [12, 27, 245, 612, 613, 648], "liter": [13, 17, 65, 70, 102, 121, 149, 163, 169, 170, 174, 175, 178, 188, 189, 192, 200, 204, 222, 245, 254, 255, 321, 363, 375, 387, 422, 455, 470, 471, 504, 507, 509, 510, 517, 518, 529, 531, 534, 539, 543, 554, 579, 608, 626, 648, 654, 655, 726, 773, 786, 850, 851, 869, 884, 885, 932], "left": [13, 70, 116, 117, 151, 152, 165, 166, 217, 245, 357, 358, 359, 374, 375, 428, 429, 430, 431, 432, 434, 435, 436, 439, 466, 483, 493, 507, 514, 515, 523, 538, 547, 554, 584, 585, 589, 590, 623, 648, 768, 769, 770, 786, 848, 880, 897, 916, 932], "center": [13, 29, 245, 357, 358, 359, 427, 428, 429, 430, 431, 432, 434, 435, 436, 554, 768, 769, 770, 836, 837, 838, 839, 840, 841, 843, 844, 845, 932], "right": [13, 15, 29, 70, 98, 99, 116, 117, 151, 152, 165, 166, 245, 357, 358, 359, 375, 428, 429, 430, 431, 432, 434, 435, 436, 439, 448, 472, 507, 554, 584, 585, 589, 590, 648, 768, 769, 770, 786, 848, 862, 886, 932], "cell": 13, "align": [13, 29, 60, 245, 483, 897], "keyerror": [13, 17], "recognis": [13, 17, 118], "column_abc": 13, "column_xyz": 13, "visibl": [14, 138, 245, 767, 932], "eg": [14, 22, 29, 245, 345, 480, 554], "rang": [14, 29, 69, 70, 100, 138, 151, 164, 245, 325, 338, 342, 343, 345, 351, 352, 374, 504, 509, 517, 518, 554, 584, 648, 718, 730, 747, 751, 752, 754, 760, 761, 767, 824, 828, 932], "100": [14, 29, 88, 91, 98, 99, 109, 112, 245, 483, 504, 648, 837, 838, 840, 932], "98": [14, 157, 245, 450, 489, 494, 554], "99": [14, 29, 141, 142, 157, 160, 245, 252, 363, 365, 450, 489, 494, 554, 578, 579, 648, 766, 773, 932], "10": [14, 26, 27, 29, 30, 33, 60, 68, 69, 70, 92, 100, 109, 120, 121, 130, 140, 148, 151, 152, 154, 156, 157, 158, 175, 179, 181, 185, 186, 192, 201, 222, 225, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 256, 264, 265, 266, 268, 274, 279, 287, 288, 291, 304, 309, 311, 314, 316, 318, 319, 321, 345, 351, 354, 371, 372, 374, 379, 387, 390, 391, 394, 415, 429, 449, 483, 488, 507, 514, 520, 523, 525, 527, 530, 536, 541, 545, 554, 570, 584, 585, 586, 588, 593, 601, 602, 608, 613, 617, 618, 626, 630, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 648, 657, 675, 680, 688, 689, 692, 707, 718, 720, 726, 760, 763, 766, 782, 793, 807, 809, 824, 850, 851, 903, 932], "95": [14, 252, 554], "96": [14, 252, 554], "97": [14, 157, 245, 252, 554], "move": [15, 357, 358, 359, 428, 429, 431, 435, 554, 768, 769, 770, 837, 838, 840, 844, 932], "inlin": 15, "parenthes": 15, "print": [16, 99, 115, 137, 149, 150, 164, 167, 207, 224, 245, 373, 554, 587, 648, 793, 836, 912, 932], "below": [16, 29, 101, 110, 136, 245, 374, 547, 554, 573, 648], "ascii_ful": 17, "ascii_full_condens": 17, "ascii_no_bord": 17, "ascii_borders_onli": 17, "ascii_borders_only_condens": 17, "ascii_horizontal_onli": 17, "ascii_markdown": 17, "utf8_ful": [17, 60, 92], "utf8_full_condens": [17, 92], "utf8_no_bord": 17, "utf8_borders_onli": 17, "utf8_horizontal_onli": 17, "noth": [17, 456, 461, 462, 464, 870, 875, 876, 878], "none": [17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 46, 50, 60, 69, 70, 85, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 128, 129, 133, 136, 141, 142, 149, 151, 152, 153, 158, 165, 166, 167, 170, 172, 176, 177, 180, 188, 190, 192, 195, 197, 198, 204, 206, 209, 213, 214, 215, 216, 217, 218, 222, 225, 245, 253, 256, 257, 268, 278, 288, 293, 295, 304, 305, 306, 309, 311, 314, 318, 319, 344, 345, 351, 357, 358, 359, 360, 363, 364, 365, 370, 371, 374, 375, 381, 382, 383, 384, 385, 390, 396, 398, 413, 415, 421, 422, 427, 428, 429, 430, 431, 432, 434, 435, 436, 438, 442, 443, 444, 445, 449, 450, 454, 455, 458, 459, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 476, 477, 478, 479, 480, 483, 484, 485, 493, 501, 503, 504, 507, 510, 512, 518, 519, 521, 522, 529, 530, 531, 534, 539, 540, 542, 543, 546, 547, 554, 568, 569, 573, 578, 579, 584, 585, 588, 589, 590, 592, 594, 598, 608, 610, 611, 612, 613, 614, 615, 621, 622, 623, 626, 627, 629, 630, 632, 648, 657, 664, 665, 679, 689, 694, 706, 707, 718, 719, 721, 737, 738, 739, 744, 753, 754, 760, 765, 766, 768, 769, 770, 773, 774, 775, 777, 780, 781, 783, 784, 785, 786, 797, 798, 801, 805, 811, 812, 813, 814, 815, 819, 828, 829, 830, 836, 837, 838, 839, 840, 841, 843, 844, 845, 847, 853, 855, 858, 859, 862, 863, 866, 868, 869, 872, 873, 877, 878, 879, 880, 881, 882, 883, 886, 887, 888, 890, 891, 892, 893, 894, 908, 911, 912, 915, 916, 922, 923, 932], "rounded_corn": 17, "style": [17, 29, 180, 245], "border": 17, "line": [17, 29, 98, 99, 102, 109, 149, 159, 161, 245], "includ": [17, 25, 27, 29, 66, 101, 110, 120, 138, 151, 212, 213, 216, 245, 346, 375, 475, 476, 514, 554, 584, 620, 648, 755, 767, 786, 889, 890, 923, 932], "divid": [17, 345, 351, 357, 358, 359, 388, 554, 754, 760, 768, 769, 770, 805, 932], "same": [17, 29, 51, 60, 67, 103, 109, 119, 128, 134, 150, 198, 214, 222, 225, 227, 245, 251, 256, 362, 414, 427, 428, 429, 430, 431, 432, 434, 435, 436, 451, 485, 508, 554, 572, 583, 594, 615, 621, 626, 630, 632, 648, 652, 656, 657, 726, 772, 836, 837, 838, 839, 840, 841, 843, 844, 845, 924, 932], "dens": [17, 149, 245, 421, 554, 830, 932], "space": 17, "horizont": [17, 68, 145, 156, 216, 245, 509, 510, 514, 515, 516, 520, 523, 531, 534, 538, 544], "markdown": 17, "compat": [17, 29, 33, 100, 245, 455, 456, 461, 462, 470, 471, 613, 648], "No": 17, "appli": [17, 27, 29, 68, 109, 118, 120, 121, 145, 179, 245, 325, 328, 330, 331, 332, 334, 336, 338, 339, 342, 343, 346, 352, 353, 355, 358, 359, 396, 416, 427, 428, 429, 431, 435, 480, 501, 504, 514, 515, 523, 530, 538, 554, 586, 593, 594, 601, 648, 728, 729, 730, 733, 735, 736, 740, 742, 745, 747, 748, 751, 752, 755, 758, 761, 762, 764, 769, 770, 836, 837, 838, 840, 844, 894, 932], "round": [17, 29, 62, 92, 245, 303, 369, 491, 554, 704, 778, 932], "corner": [17, 92], "op": [17, 121, 245, 424, 554, 648, 932], "The": [17, 28, 29, 33, 45, 52, 60, 66, 85, 87, 88, 89, 91, 95, 98, 100, 107, 109, 128, 135, 137, 149, 150, 151, 152, 153, 158, 163, 166, 173, 178, 188, 189, 192, 215, 218, 222, 225, 227, 245, 292, 293, 295, 296, 297, 298, 325, 338, 341, 342, 345, 351, 352, 360, 363, 370, 371, 396, 414, 417, 421, 424, 427, 428, 429, 430, 431, 432, 434, 435, 436, 445, 448, 454, 457, 458, 463, 465, 466, 467, 472, 473, 479, 483, 508, 521, 525, 540, 543, 547, 548, 550, 554, 555, 556, 559, 560, 561, 584, 585, 586, 588, 590, 593, 594, 599, 602, 608, 613, 622, 626, 630, 632, 648, 657, 693, 696, 697, 698, 706, 730, 747, 750, 751, 754, 760, 761, 773, 781, 785, 830, 836, 837, 838, 839, 840, 841, 843, 844, 845, 859, 862, 868, 871, 872, 877, 879, 880, 881, 886, 887, 893, 897, 926, 928, 932, 933, 936, 937, 938], "one": [17, 28, 29, 60, 77, 85, 87, 88, 89, 90, 91, 121, 142, 143, 149, 150, 151, 152, 163, 172, 180, 188, 189, 211, 226, 245, 252, 365, 387, 427, 450, 489, 501, 531, 534, 544, 547, 554, 579, 580, 583, 584, 585, 598, 627, 631, 648, 656, 775, 801, 836, 898, 932], "more": [17, 29, 31, 33, 60, 84, 85, 86, 87, 88, 89, 90, 91, 101, 107, 110, 120, 121, 128, 132, 163, 167, 172, 176, 188, 189, 190, 214, 227, 245, 257, 294, 304, 305, 306, 387, 388, 396, 438, 448, 495, 531, 534, 544, 547, 554, 598, 613, 621, 632, 648, 657, 695, 707, 708, 709, 801, 805, 847, 862, 918, 932, 940], "semigraph": 17, "box": [17, 128, 245], "draw": [17, 22, 23], "found": [17, 27, 72, 81, 83, 88, 92, 137, 217, 245, 439, 464, 480, 554, 623, 648, 848, 878, 932], "unicod": 17, "block": [17, 150, 214, 245, 583, 605, 621, 628, 648, 850, 851, 932], "http": [17, 29, 86, 100, 127, 132, 245, 461, 875, 940], "en": [17, 29, 245], "wikipedia": 17, "org": [17, 86, 100, 127, 132, 245], "wiki": 17, "drawing_charact": 17, "box_draw": 17, "hide": [18, 19, 20, 21, 29, 245], "etc": [18, 29, 98, 101, 103, 107, 110, 111, 113, 245, 504, 850, 851, 932], "inform": [20, 66, 101, 110, 132, 245, 304, 305, 306, 388, 448, 554, 602, 648, 707, 708, 709, 805, 862, 932], "separ": [21, 27, 93, 95, 98, 99, 109, 178, 180, 206, 213, 215, 245, 257, 276, 280, 460, 510, 514, 515, 554, 622, 648, 677, 681, 874, 901, 910, 932], "between": [21, 68, 118, 119, 120, 121, 182, 237, 245, 280, 301, 317, 375, 415, 420, 432, 454, 511, 513, 536, 537, 541, 554, 603, 642, 648, 681, 701, 721, 786, 824, 829, 841, 868, 932], "set_tbl_column_data_type_inlin": 21, "max": [22, 29, 33, 120, 121, 133, 142, 150, 151, 152, 180, 245, 304, 305, 311, 365, 414, 421, 428, 440, 477, 554, 579, 583, 584, 585, 613, 648, 694, 707, 708, 713, 719, 775, 830, 837, 852, 891, 932], "both": [22, 27, 51, 70, 100, 151, 152, 165, 166, 173, 188, 245, 256, 375, 428, 429, 430, 431, 432, 434, 435, 436, 554, 584, 585, 589, 590, 599, 648, 786, 932], "width": [23, 29, 98, 99, 245, 466, 472, 483, 648, 880, 886, 897], "char": [23, 51, 468, 882], "enabl": [24, 192, 222, 245, 440, 554, 608, 626, 648, 852, 932], "addit": [24, 29, 88, 101, 110, 118, 119, 134, 139, 150, 178, 192, 198, 215, 222, 225, 245, 360, 363, 414, 451, 505, 507, 508, 509, 510, 521, 531, 534, 540, 543, 554, 572, 576, 583, 608, 615, 622, 626, 630, 648, 773, 932], "verbos": 24, "debug": [24, 92, 570, 577, 594, 648], "log": [24, 62, 356, 494, 554, 766, 917, 932], "if_set": 25, "env_onli": 25, "dict": [25, 29, 33, 61, 63, 66, 85, 87, 88, 89, 90, 91, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 113, 120, 163, 178, 184, 188, 189, 191, 204, 205, 245, 398, 554, 605, 607, 648, 811, 932], "show": [25, 29, 136, 149, 167, 177, 245, 573, 602, 611, 648], "variabl": [25, 93, 172, 206, 245, 598, 648, 910, 932], "restrict": [25, 477, 891], "dictionari": [25, 29, 85, 87, 88, 89, 91, 98, 99, 104, 108, 109, 163, 178, 188, 189, 204, 205, 245, 398, 554, 648, 719, 811, 932], "those": [25, 29, 98, 245, 421, 554, 830, 932], "been": [25, 29, 69, 93, 245, 421, 554, 830, 932], "set_fmt_float": 25, "directli": [25, 120, 121, 357, 358, 359, 554, 648, 768, 769, 770, 932], "via": [25, 98, 99, 102, 109, 111, 112, 113, 163, 189, 245, 257, 554], "set_stat": 25, "all_stat": 25, "file": [26, 27, 30, 31, 32, 33, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 140, 245, 577, 604, 612, 613, 629, 648, 656, 932], "binaryio": [26, 30, 97, 98, 102, 103, 104, 107, 108, 245], "bytesio": [26, 27, 29, 30, 33, 97, 98, 99, 102, 103, 107, 245], "path": [26, 27, 29, 30, 31, 32, 33, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 245, 440, 464, 554, 604, 612, 613, 629, 648, 852, 878, 932], "compress": [26, 30, 33, 245, 612, 613, 648], "avrocompress": [26, 245], "uncompress": [26, 30, 33, 103, 111, 245, 613, 648], "write": [26, 27, 28, 29, 30, 31, 33, 99, 103, 245, 304, 305, 306, 554, 592, 611, 613, 629, 648, 707, 708, 709, 932], "apach": [26, 33, 97, 100, 245], "avro": [26, 97, 245, 564], "should": [26, 27, 29, 30, 31, 32, 33, 85, 87, 89, 91, 93, 96, 101, 109, 118, 119, 121, 124, 127, 128, 134, 151, 163, 166, 188, 189, 205, 206, 215, 227, 245, 252, 257, 275, 302, 315, 354, 360, 381, 383, 427, 428, 429, 430, 431, 432, 434, 435, 436, 439, 448, 508, 521, 528, 529, 547, 554, 572, 584, 589, 590, 594, 611, 612, 613, 622, 629, 632, 648, 657, 676, 703, 717, 763, 836, 837, 838, 839, 840, 841, 843, 844, 845, 848, 862, 932], "written": [26, 27, 29, 30, 31, 32, 33, 245, 612, 613, 629, 648], "snappi": [26, 33, 245, 613, 648], "deflat": [26, 245], "import": [26, 27, 29, 30, 33, 36, 60, 70, 85, 89, 90, 109, 114, 116, 117, 118, 119, 120, 121, 133, 149, 151, 164, 166, 209, 216, 218, 245, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 519, 529, 584, 590, 594, 648, 711, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 790, 794, 795, 796, 801, 836, 860, 906, 932], "pathlib": [26, 27, 30, 33, 109, 245], "foo": [26, 27, 30, 31, 32, 33, 93, 128, 131, 132, 134, 135, 136, 137, 140, 143, 144, 145, 146, 147, 148, 153, 154, 155, 156, 157, 158, 160, 165, 169, 170, 171, 174, 177, 180, 182, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 213, 214, 215, 219, 220, 221, 224, 245, 253, 272, 277, 278, 281, 282, 304, 305, 306, 341, 372, 373, 417, 425, 441, 442, 454, 456, 458, 460, 462, 467, 473, 475, 477, 479, 481, 482, 488, 490, 501, 504, 506, 508, 511, 512, 513, 522, 526, 527, 529, 531, 532, 533, 534, 535, 536, 537, 540, 541, 542, 545, 546, 547, 554, 571, 572, 573, 574, 580, 587, 588, 589, 605, 607, 608, 621, 622, 625, 627, 629, 648, 681, 707, 750, 834, 870, 872, 874, 876, 891, 932], "bar": [26, 27, 30, 31, 32, 33, 93, 128, 131, 132, 134, 135, 136, 137, 140, 143, 144, 145, 146, 147, 148, 154, 156, 157, 158, 160, 165, 169, 170, 171, 174, 177, 180, 182, 184, 185, 186, 188, 190, 191, 192, 194, 195, 197, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 214, 215, 219, 220, 224, 245, 253, 282, 373, 448, 458, 460, 475, 477, 501, 506, 508, 511, 512, 513, 522, 527, 531, 532, 533, 534, 535, 536, 540, 541, 542, 545, 546, 547, 554, 571, 572, 573, 574, 580, 587, 588, 589, 605, 607, 608, 621, 622, 625, 629, 648, 681, 862, 872, 874, 891, 932], "ham": [26, 27, 30, 33, 93, 131, 132, 134, 135, 136, 137, 143, 144, 146, 153, 154, 156, 165, 169, 170, 171, 174, 177, 182, 184, 186, 188, 190, 191, 192, 194, 195, 197, 199, 200, 201, 206, 207, 208, 209, 210, 214, 219, 220, 245, 508, 571, 572, 573, 574, 580, 589, 605, 607, 608, 621, 627, 648], "d": [26, 27, 30, 33, 51, 68, 88, 114, 133, 149, 153, 154, 157, 165, 201, 203, 216, 220, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 327, 348, 375, 416, 443, 456, 462, 476, 480, 507, 525, 554, 589, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 648, 732, 757, 786, 870, 876, 890, 894, 932], "e": [26, 27, 30, 33, 51, 86, 98, 99, 102, 103, 107, 111, 113, 133, 149, 154, 201, 203, 216, 245, 257, 356, 360, 375, 393, 398, 443, 448, 521, 547, 554, 592, 605, 648, 766, 786, 849, 862, 914, 932], "dirpath": [26, 27, 30, 33, 109, 245], "new_fil": [26, 27, 30, 33, 245], "has_head": [27, 29, 98, 99, 102, 109, 245], "quot": [27, 98, 99, 109, 245], "batch_siz": [27, 98, 99, 112, 245], "1024": [27, 33, 98, 99, 112, 245, 613, 648], "datetime_format": [27, 245], "date_format": [27, 245, 348], "time_format": [27, 245], "float_precis": [27, 29, 245], "null_valu": [27, 98, 99, 109, 245], "comma": [27, 245], "csv": [27, 98, 99, 102, 109, 245, 564, 612, 613, 648], "result": [27, 31, 32, 60, 89, 91, 100, 101, 109, 111, 113, 114, 121, 140, 151, 162, 176, 195, 209, 225, 245, 357, 358, 359, 363, 388, 414, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 442, 475, 476, 504, 514, 515, 516, 530, 544, 554, 567, 584, 594, 602, 610, 612, 613, 629, 630, 648, 656, 768, 769, 770, 805, 834, 836, 837, 838, 839, 840, 841, 843, 844, 845, 852, 855, 889, 890, 914, 932], "If": [27, 29, 31, 32, 33, 51, 65, 66, 69, 70, 85, 86, 87, 88, 89, 90, 91, 93, 98, 99, 101, 102, 103, 107, 109, 110, 111, 112, 113, 127, 128, 136, 140, 149, 151, 152, 154, 163, 166, 168, 172, 176, 189, 190, 197, 201, 205, 206, 208, 212, 213, 214, 216, 217, 245, 257, 288, 293, 304, 305, 306, 321, 366, 388, 396, 398, 421, 423, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 444, 448, 449, 463, 465, 467, 468, 473, 474, 475, 476, 477, 479, 480, 494, 501, 503, 504, 511, 512, 514, 523, 529, 531, 534, 539, 541, 543, 547, 554, 573, 575, 584, 585, 589, 590, 594, 598, 605, 613, 614, 620, 621, 623, 629, 632, 648, 656, 657, 689, 707, 708, 709, 718, 726, 780, 782, 783, 805, 807, 828, 830, 832, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 852, 858, 862, 863, 877, 879, 881, 882, 887, 888, 889, 890, 891, 893, 894, 903, 909, 914, 917, 923, 932], "instead": [27, 31, 32, 65, 96, 98, 107, 120, 124, 128, 151, 163, 176, 178, 188, 189, 192, 209, 222, 245, 266, 465, 467, 473, 479, 504, 539, 543, 554, 578, 584, 608, 626, 629, 648, 666, 850, 851, 879, 881, 887, 893, 915, 932], "whether": [27, 70, 89, 91, 121, 245, 330, 402, 403, 440, 554, 594, 648, 735], "header": [27, 29, 33, 92, 98, 99, 102, 109, 137, 180, 213, 245, 613, 648], "field": [27, 52, 81, 83, 88, 215, 245, 293, 398, 463, 476, 477, 485, 514, 515, 530, 543, 554, 622, 648, 694, 890, 891, 900, 901], "symbol": [27, 245], "byte": [27, 98, 99, 102, 103, 104, 107, 108, 109, 138, 245, 296, 299, 300, 465, 468, 613, 648, 696, 699, 700, 767, 879, 882, 932], "specifi": [27, 29, 60, 70, 72, 81, 83, 120, 134, 138, 139, 142, 150, 178, 188, 192, 198, 212, 215, 222, 225, 245, 357, 358, 359, 360, 365, 398, 414, 424, 451, 466, 472, 505, 507, 508, 509, 510, 521, 531, 534, 540, 543, 554, 572, 576, 579, 583, 608, 615, 620, 622, 626, 630, 648, 767, 768, 769, 770, 775, 880, 886, 932], "defin": [27, 29, 36, 70, 118, 119, 120, 128, 151, 152, 176, 179, 227, 245, 257, 292, 375, 416, 428, 429, 430, 431, 432, 434, 435, 436, 503, 529, 543, 554, 584, 585, 601, 632, 648, 657, 693, 786, 932], "chrono": [27, 245, 348, 480, 757, 894], "rust": [27, 33, 78, 103, 107, 128, 227, 245, 632, 657, 932], "crate": [27, 245, 455, 456, 461, 462, 470, 471], "fraction": [27, 116, 117, 190, 245, 346, 415, 438, 480, 554, 755, 824, 847, 932], "second": [27, 70, 151, 152, 166, 218, 245, 341, 345, 351, 428, 429, 430, 431, 432, 434, 435, 436, 480, 518, 519, 547, 554, 584, 585, 590, 648, 750, 754, 760], "precis": [27, 29, 37, 163, 189, 205, 245, 320, 480, 725], "infer": [27, 85, 87, 88, 89, 90, 91, 98, 99, 102, 109, 112, 118, 128, 245, 425, 463, 480, 554, 648, 834, 877, 932], "maximum": [27, 98, 99, 109, 119, 120, 121, 169, 245, 269, 304, 305, 399, 411, 421, 531, 554, 595, 648, 670, 707, 708, 737, 812, 820, 825, 830, 932], "timeunit": [27, 36, 38, 70, 245, 320, 321, 350, 354, 725, 726, 759, 763], "frame": [27, 28, 29, 60, 88, 116, 120, 128, 129, 163, 164, 173, 176, 179, 188, 189, 209, 216, 245, 568, 599, 601, 648, 706, 932], "datetim": [27, 29, 60, 70, 92, 133, 149, 151, 152, 164, 166, 218, 245, 272, 273, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 428, 429, 430, 431, 432, 434, 435, 436, 480, 493, 519, 525, 529, 554, 584, 585, 590, 648, 673, 674, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 801, 820, 821, 851, 894, 916, 932], "place": [27, 135, 156, 157, 185, 194, 195, 198, 212, 220, 245, 266, 280, 287, 441, 442, 450, 554, 609, 610, 615, 620, 648, 666, 681, 688, 831, 833, 854, 855, 864, 932], "float64": [27, 29, 88, 96, 98, 120, 124, 137, 138, 145, 191, 209, 222, 245, 258, 259, 260, 261, 262, 263, 301, 307, 308, 346, 360, 381, 383, 446, 447, 491, 492, 508, 521, 554, 574, 607, 626, 648, 755, 915, 920, 932], "datatyp": [27, 31, 45, 58, 85, 87, 88, 89, 91, 94, 96, 102, 104, 108, 121, 124, 137, 139, 145, 191, 245, 276, 301, 360, 443, 460, 480, 493, 508, 521, 554, 564, 576, 607, 629, 648, 657, 677, 701, 719, 799, 801, 803, 856, 874, 894, 916, 932], "repres": [27, 46, 58, 70, 85, 87, 89, 90, 91, 199, 219, 245, 381, 383, 453, 499, 508, 511, 521, 529, 536, 541, 542, 546, 554, 616, 624, 648, 851, 866, 922, 932], "null": [27, 60, 68, 88, 98, 99, 109, 114, 127, 129, 133, 136, 142, 145, 146, 158, 165, 170, 171, 177, 182, 194, 195, 198, 199, 200, 204, 209, 212, 215, 217, 219, 222, 245, 253, 256, 257, 266, 274, 277, 278, 281, 287, 292, 293, 295, 297, 304, 305, 306, 309, 311, 314, 316, 318, 319, 326, 329, 333, 335, 337, 340, 347, 357, 358, 359, 360, 363, 364, 365, 366, 370, 374, 381, 382, 383, 384, 385, 390, 398, 413, 415, 422, 427, 428, 429, 430, 431, 432, 434, 435, 436, 441, 442, 443, 445, 450, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 468, 469, 472, 474, 476, 477, 478, 483, 484, 485, 493, 500, 501, 507, 509, 510, 521, 529, 543, 547, 554, 568, 573, 579, 588, 589, 609, 610, 615, 620, 622, 623, 626, 627, 629, 648, 657, 666, 675, 688, 693, 694, 697, 706, 707, 720, 723, 731, 734, 741, 743, 746, 749, 756, 768, 769, 770, 773, 775, 780, 797, 798, 823, 824, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 849, 854, 855, 859, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 882, 883, 886, 888, 890, 891, 892, 912, 914, 915, 916, 923, 932], "empti": [27, 76, 88, 98, 99, 102, 109, 129, 130, 160, 172, 245, 540, 568, 569, 598, 648, 706, 710, 789, 932], "table_nam": [28, 29, 245], "connection_uri": [28, 100, 245], "if_exist": [28, 245], "dbwritemod": [28, 245], "fail": [28, 86, 101, 103, 110, 127, 214, 245, 267, 293, 480, 554, 621, 648, 657, 894, 932], "dbwriteengin": [28, 245], "sqlalchemi": [28, 245], "databas": [28, 100, 245, 564], "append": [28, 120, 140, 165, 166, 245, 422, 547, 554, 589, 590, 648, 932], "creat": [28, 29, 69, 70, 85, 89, 91, 110, 119, 120, 121, 129, 130, 151, 152, 177, 180, 218, 222, 245, 321, 345, 351, 422, 474, 498, 504, 509, 517, 518, 519, 554, 568, 569, 575, 584, 585, 626, 648, 706, 710, 718, 723, 726, 754, 760, 822, 828, 831, 888, 914, 932], "connect": [28, 98, 100, 103, 107, 111, 113, 114, 245, 565], "uri": [28, 100, 101, 110, 245], "postgresql": [28, 100, 245, 414, 554], "usernam": [28, 98, 100, 103, 107, 111, 113, 245], "password": [28, 98, 100, 103, 107, 111, 113, 245], "server": [28, 100, 245], "port": [28, 98, 100, 103, 107, 111, 113, 245], "replac": [28, 98, 99, 109, 141, 142, 186, 213, 222, 245, 321, 344, 398, 471, 554, 578, 626, 648, 726, 753, 811, 850, 851, 885, 932], "insert": [28, 98, 99, 103, 107, 109, 111, 112, 113, 157, 185, 213, 215, 245, 439, 454, 483, 554, 622, 648, 848, 868, 897, 932], "mode": [28, 245, 539, 554, 648, 932], "new": [28, 29, 96, 109, 124, 125, 128, 136, 156, 157, 176, 177, 184, 185, 202, 215, 216, 222, 245, 253, 321, 362, 374, 397, 470, 471, 476, 477, 484, 485, 490, 554, 564, 573, 605, 619, 622, 626, 632, 648, 653, 723, 726, 772, 822, 833, 884, 885, 890, 891, 898, 900, 905, 911, 924, 932], "alreadi": [28, 245, 275, 315, 554, 676, 717, 932], "adbc": [28, 100, 245], "workbook": [29, 245], "worksheet": [29, 245], "posit": [29, 134, 139, 150, 178, 192, 198, 215, 222, 225, 245, 357, 358, 359, 360, 414, 451, 469, 505, 507, 508, 509, 510, 521, 531, 534, 540, 543, 554, 572, 576, 583, 608, 615, 622, 626, 630, 648, 768, 769, 770, 883, 932], "tupl": [29, 100, 128, 163, 188, 189, 193, 224, 245, 425, 554, 602, 611, 648, 834, 932], "a1": [29, 61, 63, 245], "table_styl": [29, 245], "column_format": [29, 245], "dtype_format": [29, 245], "oneormoredatatyp": [29, 119, 245, 801, 932], "conditional_format": [29, 245], "conditionalformatdict": [29, 245], "column_tot": [29, 245], "columntotalsdefinit": [29, 245], "column_width": [29, 245], "row_tot": [29, 245], "rowtotalsdefinit": [29, 245], "row_height": [29, 245], "sparklin": [29, 245], "sequenc": [29, 52, 60, 67, 85, 87, 88, 89, 91, 93, 95, 98, 99, 109, 119, 120, 121, 134, 136, 139, 140, 165, 166, 172, 176, 179, 180, 198, 206, 212, 213, 214, 215, 216, 217, 218, 245, 379, 396, 416, 451, 485, 501, 502, 503, 505, 514, 515, 516, 523, 525, 530, 538, 544, 554, 572, 573, 576, 589, 590, 601, 615, 620, 621, 622, 623, 648, 656, 721, 851, 900, 932], "formula": [29, 245, 356, 554, 766, 932], "autofilt": [29, 245], "autofit": [29, 245], "hidden_column": [29, 245], "hide_gridlin": [29, 245], "sheet_zoom": [29, 245], "excel": [29, 102, 245, 564], "object": [29, 33, 70, 86, 87, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 119, 120, 121, 127, 150, 167, 209, 245, 529, 564, 569, 587, 592, 604, 648, 669, 702, 724, 867, 909, 932], "open": [29, 98, 99, 102, 103, 107, 111, 113, 245], "xlsxwriter": [29, 115, 245], "ha": [29, 60, 69, 93, 109, 127, 218, 245, 257, 315, 387, 405, 494, 503, 554, 632, 706, 717, 780, 792, 917, 932], "close": [29, 70, 151, 152, 245, 375, 428, 429, 430, 431, 432, 434, 435, 436, 448, 554, 584, 585, 648, 786, 862, 932], "xlsx": [29, 102, 245], "work": [29, 37, 99, 102, 152, 185, 245, 257, 275, 294, 303, 304, 305, 306, 360, 369, 414, 468, 495, 554, 585, 648, 676, 695, 704, 707, 708, 709, 778, 882, 918, 932], "directori": [29, 107, 245], "sheet1": [29, 245], "valid": [29, 103, 107, 121, 125, 138, 245, 315, 455, 464, 554, 717, 767, 780, 869, 870, 875, 876, 878, 884, 885, 932], "notat": [29, 245], "integ": [29, 41, 42, 43, 44, 54, 55, 56, 57, 119, 120, 151, 152, 245, 303, 346, 369, 423, 428, 429, 430, 431, 432, 433, 434, 435, 436, 469, 504, 525, 529, 554, 584, 585, 648, 664, 665, 704, 755, 778, 832, 842, 851, 883, 932], "medium": [29, 245], "kei": [29, 60, 66, 151, 166, 173, 178, 180, 184, 187, 245, 584, 590, 599, 605, 606, 648], "contain": [29, 60, 66, 87, 90, 92, 101, 110, 116, 136, 164, 176, 180, 245, 257, 379, 398, 456, 459, 461, 462, 464, 477, 478, 554, 573, 602, 648, 811, 817, 870, 873, 875, 876, 878, 891, 892, 909, 932], "follow": [29, 66, 98, 99, 101, 109, 110, 128, 151, 152, 166, 179, 218, 245, 257, 341, 345, 351, 416, 421, 428, 429, 430, 431, 432, 434, 435, 436, 485, 503, 547, 548, 550, 554, 555, 556, 559, 560, 561, 584, 585, 590, 601, 648, 750, 754, 760, 830, 850, 851, 926, 928, 932, 933, 936, 937, 938, 940], "first_column": [29, 245], "last_column": [29, 245], "banded_column": [29, 245], "banded_row": [29, 245], "sheet": [29, 102, 245], "chart": [29, 245, 602, 648], "subsequ": [29, 183, 209, 245, 575, 648], "colnam": [29, 109, 120, 137, 245, 397, 554, 574, 648], "given": [29, 48, 50, 60, 69, 70, 85, 87, 88, 89, 91, 96, 98, 99, 109, 118, 119, 120, 121, 124, 128, 138, 139, 178, 179, 188, 194, 195, 198, 212, 217, 245, 257, 272, 287, 322, 350, 356, 375, 393, 414, 416, 421, 424, 425, 428, 429, 431, 434, 435, 436, 439, 441, 442, 462, 480, 485, 494, 501, 521, 554, 576, 594, 601, 609, 610, 615, 620, 623, 632, 648, 657, 673, 688, 718, 727, 759, 766, 767, 783, 786, 808, 810, 822, 828, 830, 834, 837, 838, 840, 843, 844, 845, 848, 854, 855, 876, 894, 917, 920, 924, 932], "here": [29, 85, 87, 88, 89, 91, 100, 101, 110, 119, 120, 121, 245, 464, 648, 878], "dd": [29, 245], "mm": [29, 245], "yyyi": [29, 245], "00": [29, 70, 151, 166, 218, 245, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 480, 519, 584, 590, 648, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 894], "dtype": [29, 63, 85, 87, 89, 91, 92, 96, 98, 99, 109, 118, 119, 120, 121, 124, 127, 151, 152, 166, 207, 209, 245, 257, 258, 259, 260, 261, 262, 263, 266, 269, 270, 271, 280, 292, 301, 304, 305, 306, 307, 308, 313, 314, 326, 329, 333, 335, 337, 340, 347, 354, 360, 362, 395, 396, 398, 423, 424, 428, 429, 430, 431, 432, 434, 435, 436, 443, 446, 447, 454, 463, 474, 487, 489, 491, 492, 493, 497, 498, 503, 504, 512, 521, 525, 529, 530, 543, 554, 584, 585, 590, 648, 670, 671, 672, 681, 693, 701, 706, 707, 708, 709, 715, 716, 720, 731, 734, 741, 743, 746, 749, 756, 763, 767, 772, 789, 801, 810, 811, 835, 849, 856, 868, 877, 888, 894, 902, 912, 914, 915, 916, 920, 932], "overridden": [29, 85, 87, 89, 91, 245, 648], "basi": [29, 120, 245], "param": [29, 85, 87, 88, 89, 91, 98, 99, 109, 120, 121, 188, 245, 648], "It": [29, 70, 128, 173, 179, 227, 245, 257, 293, 404, 554, 594, 599, 632, 648, 850, 851, 932], "also": [29, 70, 88, 109, 120, 121, 137, 150, 151, 152, 173, 176, 192, 198, 222, 245, 311, 314, 344, 374, 375, 421, 428, 429, 430, 431, 432, 434, 435, 436, 451, 514, 515, 523, 525, 538, 547, 553, 554, 583, 584, 585, 599, 608, 615, 626, 627, 648, 753, 786, 830, 932], "group": [29, 33, 99, 150, 151, 152, 164, 176, 178, 180, 216, 218, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 252, 257, 275, 368, 414, 450, 451, 461, 489, 503, 554, 583, 584, 585, 613, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648, 676, 875], "float_dtyp": [29, 245], "simplifi": [29, 67, 245, 570, 575, 577, 602, 611, 612, 613, 648], "uniform": [29, 245], "condit": [29, 65, 136, 143, 188, 245, 459, 478, 523, 547, 573, 580, 648], "suppli": [29, 85, 87, 88, 89, 91, 188, 245, 648], "typenam": [29, 245], "3_color_scal": [29, 245], "data_bar": [29, 245], "make": [29, 52, 68, 85, 90, 98, 99, 100, 103, 107, 111, 113, 151, 152, 173, 176, 183, 218, 245, 358, 359, 398, 424, 476, 483, 554, 584, 585, 599, 648, 769, 770, 783, 811, 890, 897, 932], "icon": [29, 245], "multipl": [29, 67, 68, 98, 99, 109, 111, 112, 113, 119, 121, 134, 138, 140, 143, 150, 151, 156, 164, 178, 180, 192, 198, 212, 222, 225, 245, 292, 402, 405, 409, 414, 425, 428, 429, 430, 431, 432, 434, 435, 436, 451, 505, 508, 514, 515, 523, 530, 531, 534, 538, 547, 554, 572, 580, 583, 584, 608, 615, 620, 626, 630, 648, 656, 693, 767, 816, 834, 932], "singl": [29, 60, 68, 98, 99, 100, 107, 109, 119, 134, 135, 136, 140, 147, 178, 188, 198, 245, 257, 273, 292, 341, 366, 396, 422, 425, 451, 454, 500, 503, 505, 508, 509, 510, 530, 531, 534, 539, 554, 572, 573, 615, 648, 656, 674, 693, 750, 831, 834, 868, 909, 932], "across": [29, 245, 516, 544], "effect": [29, 127, 145, 245, 257, 554, 628, 648], "heatmap": [29, 245], "min": [29, 33, 120, 121, 133, 142, 151, 152, 180, 245, 304, 306, 312, 365, 414, 421, 431, 540, 554, 579, 584, 585, 613, 648, 707, 709, 714, 719, 775, 830, 840, 932], "entir": [29, 245], "final": [29, 60, 113, 245, 357, 358, 359, 554, 577, 648, 768, 769, 770, 932], "made": [29, 245, 914, 932], "up": [29, 52, 100, 163, 166, 189, 205, 245, 257, 303, 483, 554, 589, 590, 594, 648, 704, 897, 932], "abov": [29, 245, 547], "order": [29, 60, 88, 116, 128, 150, 151, 152, 178, 179, 180, 190, 198, 212, 214, 218, 245, 257, 266, 289, 294, 302, 421, 438, 439, 440, 450, 451, 485, 495, 496, 505, 554, 583, 584, 585, 598, 612, 613, 615, 620, 621, 648, 657, 666, 690, 695, 703, 718, 800, 828, 830, 835, 847, 848, 852, 864, 900, 918, 919, 932], "than": [29, 70, 84, 89, 91, 98, 99, 109, 114, 120, 121, 128, 149, 150, 163, 166, 178, 188, 189, 190, 216, 227, 245, 257, 387, 438, 448, 466, 472, 477, 483, 511, 531, 534, 541, 544, 554, 583, 590, 612, 613, 632, 648, 657, 847, 862, 880, 886, 891, 897, 932], "add": [29, 50, 99, 128, 140, 151, 222, 223, 245, 418, 486, 519, 523, 547, 554, 584, 589, 626, 627, 628, 648, 656, 932], "total": [29, 138, 245, 767, 932], "export": [29, 163, 164, 189, 205, 245], "numer": [29, 166, 245, 304, 305, 306, 375, 424, 443, 554, 564, 590, 648, 707, 708, 709, 786, 799, 849, 856, 932], "associ": [29, 60, 245], "sum": [29, 60, 138, 145, 150, 152, 162, 180, 225, 245, 257, 293, 313, 314, 356, 366, 428, 429, 431, 434, 435, 436, 500, 501, 514, 516, 523, 531, 534, 538, 554, 570, 575, 577, 583, 585, 602, 611, 630, 648, 715, 716, 766, 767, 837, 838, 840, 843, 844, 845, 932], "pass": [29, 33, 60, 70, 87, 102, 109, 119, 120, 121, 132, 134, 150, 154, 168, 178, 179, 192, 198, 201, 212, 222, 225, 245, 257, 327, 344, 363, 373, 414, 416, 451, 467, 473, 479, 505, 508, 525, 531, 534, 543, 554, 572, 583, 587, 594, 601, 608, 611, 615, 620, 626, 630, 648, 657, 732, 753, 773, 782, 807, 881, 887, 893, 903, 932], "must": [29, 69, 86, 87, 101, 110, 139, 151, 152, 166, 173, 188, 245, 293, 396, 428, 429, 430, 431, 432, 434, 435, 436, 554, 576, 584, 585, 590, 594, 599, 648, 718, 828, 932], "funcnam": [29, 245], "averag": [29, 245, 357, 358, 359, 421, 554, 768, 769, 770, 830, 932], "count_num": [29, 245], "count": [29, 98, 99, 103, 107, 109, 111, 112, 113, 133, 151, 152, 166, 176, 177, 180, 213, 217, 218, 223, 227, 236, 245, 273, 310, 341, 390, 410, 413, 428, 429, 430, 431, 432, 434, 435, 436, 456, 496, 498, 535, 554, 584, 585, 590, 623, 628, 632, 641, 648, 674, 719, 750, 783, 818, 823, 870, 919, 921, 932], "std_dev": [29, 245], "var": [29, 245, 554, 648, 932], "pixel": [29, 245], "unit": [29, 36, 38, 70, 120, 121, 138, 245, 320, 321, 327, 350, 354, 395, 405, 497, 525, 554, 602, 648, 725, 726, 732, 759, 763, 767, 810, 920, 932], "hand": [29, 98, 99, 109, 245], "side": [29, 151, 152, 245, 375, 428, 429, 430, 431, 432, 434, 435, 436, 439, 554, 584, 585, 648, 786, 848, 932], "call": [29, 99, 120, 121, 128, 150, 167, 244, 245, 257, 311, 314, 554, 565, 583, 647, 648, 657, 932], "ad": [29, 88, 127, 151, 213, 222, 245, 256, 363, 514, 515, 554, 584, 626, 648, 773, 932], "end": [29, 98, 99, 107, 109, 151, 245, 288, 299, 345, 360, 375, 455, 459, 474, 478, 508, 521, 547, 554, 584, 586, 593, 602, 648, 689, 699, 754, 786, 873, 888, 892, 932], "wise": [29, 60, 145, 245, 258, 259, 260, 261, 262, 263, 307, 308, 361, 394, 445, 446, 447, 491, 492, 514, 515, 523, 538, 554, 658, 659, 660, 661, 662, 663, 711, 712, 771, 809, 859, 860, 861, 906, 907, 932], "match": [29, 68, 79, 85, 87, 88, 89, 91, 116, 117, 142, 166, 188, 245, 403, 455, 456, 459, 462, 463, 464, 467, 470, 471, 473, 478, 479, 480, 508, 579, 590, 648, 801, 869, 870, 873, 876, 877, 878, 881, 884, 885, 887, 892, 893, 894, 932], "particip": [29, 245], "distinct": [29, 121, 178, 245, 294, 421, 519, 554, 695, 830, 932], "referenc": [29, 245, 485], "differ": [29, 98, 114, 116, 140, 151, 152, 163, 189, 205, 213, 245, 274, 316, 325, 341, 342, 344, 352, 398, 411, 412, 480, 496, 522, 525, 554, 575, 584, 585, 648, 656, 657, 675, 720, 730, 750, 751, 753, 761, 820, 821, 849, 894, 932], "row_index": [29, 245], "height": [29, 136, 245], "provid": [29, 98, 99, 100, 101, 109, 110, 120, 121, 245, 293, 297, 298, 457, 458, 461, 463, 464, 525, 564, 612, 613, 648, 697, 698, 783, 871, 872, 875, 877, 878, 932, 940], "intersect": [29, 245], "bodi": [29, 245], "start": [29, 97, 98, 99, 103, 107, 109, 111, 112, 113, 150, 151, 167, 197, 218, 223, 245, 288, 300, 325, 327, 328, 330, 331, 336, 338, 342, 343, 345, 346, 350, 351, 352, 353, 355, 360, 375, 449, 455, 459, 474, 478, 508, 514, 521, 523, 547, 554, 583, 584, 602, 614, 628, 648, 689, 700, 725, 727, 730, 732, 733, 735, 740, 742, 745, 747, 748, 751, 752, 753, 754, 755, 757, 759, 760, 761, 762, 763, 764, 786, 863, 873, 888, 892, 932], "zero": [29, 85, 86, 97, 98, 99, 103, 107, 127, 129, 142, 163, 188, 203, 209, 245, 364, 365, 439, 448, 483, 554, 568, 579, 648, 694, 706, 775, 862, 897, 909, 914, 915, 932], "unless": [29, 60, 87, 209, 245, 648, 915, 923, 932], "marker": [29, 245], "compliant": [29, 245], "case": [29, 60, 85, 87, 88, 89, 91, 113, 128, 140, 151, 152, 163, 245, 396, 404, 405, 554, 584, 585, 648, 656, 932], "three": [29, 211, 245, 439, 554], "avail": [29, 95, 101, 110, 119, 244, 245, 421, 548, 550, 553, 554, 555, 556, 559, 560, 561, 564, 565, 577, 647, 648, 830, 926, 928, 932, 933, 936, 937, 938], "insert_befor": [29, 245], "insert_aft": [29, 245], "respect": [29, 245], "direct": [29, 100, 107, 113, 216, 245], "far": [29, 245], "thei": [29, 88, 109, 116, 125, 167, 245, 427, 554, 836, 932], "strongli": [29, 128, 188, 227, 245, 257, 554, 632, 657, 932], "advis": [29, 167, 245, 293], "structur": [29, 76, 80, 82, 140, 179, 245, 416, 554, 601, 648, 656, 932], "your": [29, 98, 99, 116, 117, 128, 163, 192, 222, 225, 245, 257, 554, 570, 586, 593, 594, 608, 626, 630, 648, 657, 932], "wherev": [29, 128, 227, 245, 257, 554, 632, 657, 932], "possibl": [29, 98, 128, 150, 163, 189, 214, 227, 245, 257, 395, 404, 477, 497, 554, 583, 621, 632, 648, 657, 891, 932], "simpl": [29, 176, 245], "colx": [29, 245], "coli": [29, 245], "after": [29, 88, 97, 98, 99, 103, 107, 109, 111, 112, 113, 140, 215, 244, 245, 360, 398, 421, 483, 554, 622, 648, 656, 753, 811, 830, 897, 932], "befor": [29, 98, 109, 125, 140, 151, 166, 215, 245, 313, 314, 315, 398, 415, 427, 428, 429, 430, 431, 432, 434, 435, 436, 483, 487, 554, 584, 587, 590, 622, 648, 656, 715, 716, 717, 811, 824, 836, 837, 838, 839, 840, 841, 843, 844, 845, 897, 902, 932], "most": [29, 85, 98, 99, 109, 245, 405, 409, 415, 477, 498, 554, 816, 824, 891, 921, 932], "mandatori": [29, 245], "return_dtyp": [29, 128, 245, 257, 396, 503, 530, 554, 657, 932], "latter": [29, 140, 245, 656, 932], "appropri": [29, 245, 421, 554, 830, 932], "pure": [29, 245], "actual": [29, 88, 102, 120, 121, 245, 857, 932], "indic": [29, 65, 93, 97, 98, 99, 103, 107, 109, 118, 119, 121, 151, 152, 206, 245, 267, 292, 377, 380, 381, 383, 384, 385, 428, 429, 430, 431, 432, 434, 435, 436, 439, 445, 489, 505, 554, 584, 585, 648, 693, 790, 794, 795, 796, 797, 798, 848, 859, 904, 910, 932], "calcul": [29, 60, 151, 199, 219, 245, 274, 316, 357, 358, 359, 388, 395, 433, 448, 453, 497, 499, 503, 511, 536, 541, 542, 546, 554, 584, 616, 624, 648, 675, 720, 768, 769, 770, 805, 842, 862, 866, 922, 932], "individu": [29, 120, 152, 245, 257, 462, 554, 585, 613, 648, 705, 876, 932], "gridlin": [29, 245], "zoom": [29, 245], "level": [29, 33, 109, 111, 112, 113, 120, 128, 145, 176, 245, 366, 554, 586, 593, 613, 648], "definit": [29, 245, 388, 554, 805, 932], "take": [29, 120, 145, 173, 179, 202, 245, 341, 451, 490, 520, 522, 554, 599, 619, 648, 750, 905, 924, 932], "care": [29, 245, 257, 440, 554, 852, 932], "rel": [29, 101, 110, 116, 117, 245, 341, 357, 358, 359, 554, 750, 768, 769, 770, 932], "see": [29, 100, 101, 102, 110, 116, 117, 120, 121, 132, 165, 179, 245, 304, 305, 306, 348, 365, 374, 388, 396, 448, 538, 554, 707, 708, 709, 757, 805, 862, 932, 940], "readthedoc": [29, 245, 940], "io": [29, 245, 940], "working_with_conditional_format": [29, 245], "html": [29, 86, 100, 127, 132, 245], "similarli": [29, 88, 245], "well": [29, 98, 99, 109, 139, 180, 245, 375, 554, 576, 648, 786, 932], "adjac": [29, 245], "two": [29, 87, 89, 91, 100, 145, 172, 173, 180, 211, 226, 227, 245, 252, 317, 321, 450, 489, 501, 511, 513, 536, 541, 554, 598, 599, 631, 632, 648, 721, 726, 932], "help": [29, 245, 577, 648], "where": [29, 65, 100, 136, 140, 163, 172, 189, 199, 219, 245, 267, 353, 356, 439, 448, 451, 453, 499, 511, 536, 541, 542, 546, 547, 554, 598, 616, 624, 648, 656, 667, 762, 766, 848, 862, 866, 922, 924, 932], "appear": [29, 88, 116, 245, 496, 554, 919, 932], "working_with_sparklin": [29, 245], "inject": [29, 60, 245], "locat": [29, 140, 186, 210, 215, 245, 439, 554, 622, 648, 656, 848, 851, 904, 932], "syntax": [29, 128, 176, 245, 611, 648, 932], "ensur": [29, 120, 121, 123, 150, 178, 188, 245, 375, 498, 554, 583, 594, 648, 914, 921, 932], "correctli": [29, 245], "microsoft": [29, 245], "com": [29, 100, 245, 357, 358, 359, 461, 554, 768, 769, 770, 875, 932], "u": [29, 36, 38, 70, 92, 163, 189, 205, 245, 320, 321, 327, 350, 354, 480, 525, 725, 726, 732, 759, 763], "offic": [29, 245], "f5ed2452": [29, 245], "2337": [29, 245], "4f71": [29, 245], "bed3": [29, 245], "c8ae6d2b276": [29, 245], "instanti": [29, 192, 222, 245, 608, 626, 648], "basic": [29, 245], "random": [29, 119, 120, 121, 153, 190, 245, 371, 421, 438, 444, 554, 781, 830, 847, 858, 932], "date": [29, 36, 60, 70, 98, 99, 100, 109, 114, 133, 149, 151, 152, 164, 166, 245, 272, 273, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 428, 429, 430, 431, 432, 434, 435, 436, 480, 493, 525, 554, 584, 585, 590, 648, 673, 674, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 801, 820, 821, 851, 894, 916, 932], "dtm": [29, 245, 321, 726], "2023": [29, 92, 115, 164, 245, 321, 726], "num": [29, 211, 245, 375, 378, 483, 554, 786, 932], "500": [29, 163, 217, 245, 577, 623, 648, 740, 742, 748, 755, 837, 838, 840, 932], "val": [29, 187, 245, 302, 493, 547, 554, 606, 648, 703], "10_000": [29, 245], "20_000": [29, 245], "30_000": [29, 245], "increas": [29, 98, 107, 245, 315, 554, 717, 932], "b4": [29, 245], "light": [29, 245], "twice": [29, 102, 245], "each": [29, 60, 99, 112, 116, 117, 119, 128, 149, 150, 164, 166, 178, 209, 215, 224, 225, 227, 228, 230, 239, 245, 257, 279, 291, 345, 351, 421, 451, 462, 476, 477, 503, 505, 510, 531, 534, 543, 554, 590, 602, 622, 630, 632, 633, 635, 644, 648, 680, 692, 705, 754, 760, 830, 876, 890, 891, 901, 932], "titl": [29, 245], "explicit": [29, 109, 119, 245, 504, 538], "integr": [29, 245], "multi_fram": [29, 245], "wb": [29, 245], "coordin": [29, 245], "advanc": [29, 245], "len": [29, 69, 119, 120, 164, 245, 310, 425, 466, 472, 483, 554, 718, 828, 834, 880, 886, 897, 932], "min_color": [29, 245], "76933c": [29, 245], "mid_color": [29, 245], "c4d79b": [29, 245], "max_color": [29, 245], "ebf1d": [29, 245], "data_bar_2010": [29, 245], "bar_color": [29, 245], "9bbb59": [29, 245], "bar_negative_color_sam": [29, 245], "bar_negative_border_color_sam": [29, 245], "000": [29, 245], "white": [29, 245], "w": [29, 245, 461, 875], "get_worksheet_by_nam": [29, 245], "fmt_titl": [29, 245], "add_format": [29, 245], "font_color": [29, 245], "4f6228": [29, 245], "font_siz": [29, 245], "12": [29, 60, 69, 70, 92, 151, 152, 166, 218, 245, 313, 321, 328, 331, 338, 343, 345, 351, 355, 415, 443, 515, 517, 518, 530, 554, 584, 585, 586, 590, 593, 611, 618, 648, 657, 718, 726, 747, 754, 760, 846, 932], "ital": [29, 245], "bold": [29, 245], "customis": [29, 245], "trend": [29, 245], "win_loss": [29, 245], "subtl": [29, 245], "tone": [29, 245], "hidden": [29, 245], "id": [29, 227, 245, 470, 471, 496, 498, 554, 632, 919, 932], "q1": [29, 245], "55": [29, 62, 115, 245], "20": [29, 140, 156, 157, 179, 181, 185, 186, 245, 264, 265, 266, 316, 345, 351, 371, 374, 525, 529, 554, 601, 648, 720, 760, 932], "35": [29, 121, 245, 316, 554, 720, 932], "q2": [29, 245], "30": [29, 69, 140, 151, 156, 179, 185, 186, 204, 222, 245, 264, 265, 266, 316, 321, 326, 331, 343, 345, 351, 355, 371, 443, 554, 584, 601, 626, 648, 718, 720, 726, 731, 754, 760, 932], "15": [29, 128, 151, 152, 157, 245, 315, 316, 345, 351, 362, 515, 554, 584, 585, 648, 717, 720, 754, 760, 772, 932], "60": [29, 140, 245, 346, 347, 480, 751, 755, 756, 894], "q3": [29, 245], "50": [29, 140, 245, 304, 305, 306, 345, 351, 554, 707, 760, 932], "40": [29, 140, 179, 245, 345, 351, 371, 554, 601, 648, 736, 760], "80": [29, 245], "q4": [29, 245], "75": [29, 245, 783, 828, 932], "account": [29, 92, 245, 341, 357, 358, 359, 554, 750, 768, 769, 770, 932], "flavour": [29, 245], "integer_dtyp": [29, 192, 245, 608, 648], "0_": [29, 245], "just": [29, 100, 109, 172, 245, 598, 648], "unifi": [29, 245], "multi": [29, 98, 99, 245, 360, 554], "2_color_scal": [29, 245], "95b3d7": [29, 245], "ffffff": [29, 245], "base": [29, 34, 136, 143, 151, 152, 245, 356, 357, 358, 359, 393, 394, 469, 554, 564, 573, 580, 584, 585, 648, 766, 768, 769, 770, 783, 808, 809, 828, 883, 924, 932], "standardis": [29, 245], "z": [29, 92, 119, 120, 138, 159, 161, 165, 172, 245, 271, 302, 371, 424, 480, 554, 589, 598, 614, 648, 703, 775, 894, 932], "score": [29, 245], "conjunct": [29, 245], "a123": [29, 245], "b345": [29, 245], "c567": [29, 245], "d789": [29, 245], "e101": [29, 245], "45": [29, 152, 245, 321, 345, 351, 456, 462, 585, 648, 726, 754, 760, 870, 876], "85": [29, 245], "font": [29, 245], "consola": [29, 245], "standard": [29, 199, 245, 331, 358, 434, 448, 453, 464, 542, 554, 616, 648, 736, 769, 862, 866, 878, 932], "stdev": [29, 245], "ipccompress": [30, 245], "arrow": [30, 71, 85, 100, 103, 111, 203, 245, 612, 648, 909, 914, 932], "ipc": [30, 103, 104, 111, 114, 245, 564], "binari": [30, 245, 296, 298, 299, 300, 502, 696, 698, 699, 700], "feather": [30, 103, 111, 245, 564], "lz4": [30, 33, 245, 612, 613, 648], "zstd": [30, 33, 245, 612, 613, 648], "pretti": [31, 245], "row_ori": [31, 245], "iobas": [31, 32, 105, 106, 245, 604, 629, 648], "serial": [31, 32, 245], "represent": [31, 32, 207, 245, 302, 325, 328, 331, 332, 334, 336, 338, 339, 342, 343, 346, 352, 353, 355, 493, 554, 575, 592, 648, 703, 730, 733, 735, 736, 740, 742, 745, 747, 748, 751, 752, 755, 761, 762, 764, 912, 916, 932], "orient": [31, 61, 63, 89, 91, 245, 648], "slower": [31, 89, 91, 128, 150, 178, 218, 227, 245, 583, 632, 648, 657, 932], "common": [31, 245], "write_ndjson": [31, 245], "newlin": [32, 106, 112, 245], "delimit": [32, 93, 98, 99, 106, 109, 112, 180, 206, 245, 454, 868, 910, 932], "parquetcompress": [33, 245], "compression_level": [33, 245, 613, 648], "statist": [33, 98, 99, 107, 113, 133, 245, 358, 359, 388, 428, 429, 430, 431, 432, 433, 434, 435, 436, 448, 554, 613, 648, 719, 769, 770, 805, 842, 862, 932], "row_group_s": [33, 245, 613, 648], "use_pyarrow": [33, 98, 103, 107, 245, 613, 648, 913, 914, 932], "pyarrow_opt": [33, 101, 107, 110, 245], "parquet": [33, 107, 108, 113, 245, 564, 613, 648], "gzip": [33, 245, 613, 648], "lzo": [33, 245, 613, 648], "brotli": [33, 245, 613, 648], "choos": [33, 245, 612, 613, 648], "good": [33, 163, 245, 612, 613, 648], "perform": [33, 76, 86, 98, 99, 103, 107, 109, 111, 112, 113, 127, 128, 151, 152, 166, 183, 227, 245, 257, 414, 554, 584, 585, 590, 612, 613, 628, 632, 648, 657, 932], "fast": [33, 245, 363, 440, 554, 612, 613, 648, 773, 852, 932], "decompress": [33, 245, 612, 613, 648], "backward": [33, 142, 166, 245, 295, 365, 554, 579, 590, 613, 648, 775, 932], "guarante": [33, 86, 98, 99, 214, 245, 577, 613, 621, 648], "deal": [33, 245, 421, 480, 554, 613, 648, 830, 894, 932], "older": [33, 245, 613, 648], "reader": [33, 95, 98, 99, 103, 107, 245, 565, 613, 648], "higher": [33, 182, 237, 245, 420, 432, 537, 554, 603, 613, 642, 648, 829, 841, 932], "mean": [33, 98, 99, 103, 107, 109, 133, 142, 150, 180, 225, 245, 362, 365, 429, 448, 461, 506, 554, 579, 583, 594, 613, 630, 648, 719, 772, 775, 780, 838, 862, 875, 932], "smaller": [33, 138, 245, 577, 613, 648, 767, 932], "disk": [33, 103, 245, 611, 612, 613, 648], "11": [33, 115, 152, 245, 318, 319, 331, 341, 345, 351, 374, 415, 435, 449, 483, 508, 544, 554, 570, 585, 586, 593, 602, 613, 618, 648, 657, 750, 754, 760, 836, 932], "22": [33, 245, 345, 351, 354, 480, 508, 613, 648, 754, 760, 763, 894], "extra": [33, 98, 101, 102, 103, 107, 110, 111, 113, 140, 245, 613, 648, 656, 932], "comput": [33, 67, 68, 73, 138, 150, 166, 209, 214, 225, 237, 245, 251, 258, 259, 260, 261, 262, 263, 283, 284, 285, 307, 308, 310, 311, 312, 313, 314, 317, 356, 361, 388, 393, 394, 409, 414, 415, 419, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 445, 446, 447, 448, 452, 491, 492, 505, 511, 513, 520, 536, 541, 554, 583, 587, 589, 590, 613, 621, 627, 630, 642, 648, 652, 658, 659, 660, 661, 662, 663, 684, 685, 686, 711, 712, 713, 714, 715, 716, 721, 766, 767, 771, 805, 808, 809, 816, 824, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 859, 860, 861, 862, 865, 906, 907, 915, 932], "reduc": [33, 98, 99, 107, 109, 111, 112, 113, 232, 233, 235, 238, 245, 443, 523, 554, 613, 637, 638, 640, 643, 648, 813, 827, 856, 902, 932], "pressur": [33, 107, 112, 113, 245, 443, 554, 613, 648, 856, 932], "improv": [33, 103, 111, 245, 613, 648], "speed": [33, 245, 257, 554, 613, 648], "minimum": [33, 119, 120, 121, 145, 174, 245, 304, 306, 357, 358, 359, 408, 412, 421, 534, 554, 600, 613, 648, 707, 709, 744, 768, 769, 770, 821, 826, 830, 932], "implement": [33, 86, 127, 128, 227, 245, 257, 554, 632, 657, 850, 851, 932], "v": [33, 69, 138, 245, 439, 554, 718, 848, 932], "At": [33, 245], "moment": [33, 132, 245, 388, 448, 554, 805, 862, 932], "argument": [33, 98, 101, 107, 110, 132, 134, 139, 150, 151, 152, 170, 178, 179, 180, 192, 198, 200, 209, 215, 218, 222, 225, 245, 345, 351, 360, 375, 414, 416, 428, 429, 430, 431, 432, 434, 435, 436, 451, 467, 473, 479, 480, 505, 507, 508, 509, 510, 521, 531, 534, 540, 543, 554, 572, 576, 583, 584, 585, 601, 608, 615, 622, 626, 630, 648, 754, 760, 786, 881, 887, 893, 915, 932], "pyarrow": [33, 85, 90, 98, 101, 103, 107, 110, 114, 115, 164, 203, 208, 209, 245, 565, 909, 913, 914, 915, 932], "write_t": [33, 245], "calendar": [35, 36, 151, 152, 166, 218, 245, 331, 341, 345, 351, 355, 428, 429, 430, 431, 432, 434, 435, 436, 554, 584, 585, 590, 648, 736, 750, 754, 760, 764], "time": [36, 38, 66, 67, 70, 92, 98, 99, 109, 140, 151, 152, 166, 218, 245, 271, 272, 273, 293, 320, 321, 322, 327, 341, 344, 350, 354, 480, 493, 494, 509, 510, 519, 525, 539, 554, 570, 584, 585, 590, 602, 648, 656, 672, 674, 725, 726, 727, 732, 750, 753, 759, 763, 894, 916, 917, 932], "time_unit": [36, 38, 70, 92, 354, 763], "time_zon": [36, 70, 92, 322, 344, 727, 753], "m": [36, 38, 70, 320, 321, 327, 348, 350, 354, 480, 519, 525, 725, 726, 732, 757, 759, 763, 894], "timezon": [36, 70, 480, 894], "zoneinfo": 36, "run": [36, 67, 128, 150, 167, 214, 227, 245, 257, 275, 315, 540, 554, 570, 575, 577, 583, 594, 598, 602, 611, 612, 613, 621, 632, 648, 657, 676, 717, 932, 939], "available_timezon": 36, "attribut": [36, 37, 38, 45, 118, 245, 548, 550, 555, 556, 559, 560, 561, 648, 926, 928, 933, 936, 937, 938], "128": [37, 62, 824, 932], "bit": [37, 39, 40, 41, 42, 43, 44, 54, 55, 56, 57, 423, 455, 554, 832, 869, 932], "neg": [37, 151, 154, 168, 194, 195, 197, 201, 245, 287, 288, 441, 442, 449, 474, 554, 584, 609, 610, 614, 628, 648, 688, 689, 782, 807, 854, 855, 863, 888, 903, 932], "scale": [37, 138, 245, 767, 932], "experiment": [37, 69, 114, 192, 216, 217, 222, 245, 315, 345, 428, 429, 430, 431, 432, 434, 435, 436, 554, 608, 623, 626, 648, 717, 754, 783, 828, 932], "progress": 37, "expect": [37, 77, 79, 84, 257, 503, 554, 592, 594, 648, 828, 932], "delta": [38, 101, 110, 199, 219, 245, 453, 499, 511, 536, 541, 542, 546, 554, 564, 616, 624, 648, 866, 922, 932], "32": [39, 42, 55, 62, 152, 162, 245, 443, 554, 585, 648, 721, 751, 824, 841, 932], "sign": [41, 42, 43, 44, 341, 423, 483, 554, 750, 832, 897, 932], "inner": [45, 51, 165, 217, 245, 280, 317, 554, 589, 623, 629, 648, 681, 721, 932], "polarsdatatyp": [45, 96, 98, 99, 104, 108, 109, 118, 120, 121, 124, 128, 137, 245, 257, 301, 360, 396, 398, 463, 503, 504, 508, 521, 529, 530, 554, 574, 648, 657, 701, 811, 877, 932], "pythondatatyp": 45, "nest": [45, 51, 138, 245, 564, 767, 932], "arrai": [45, 85, 89, 98, 99, 107, 138, 203, 208, 209, 245, 271, 282, 283, 284, 285, 286, 289, 290, 298, 304, 305, 306, 310, 311, 312, 313, 314, 394, 428, 429, 431, 434, 435, 436, 440, 456, 458, 461, 462, 464, 520, 554, 648, 672, 683, 684, 685, 686, 687, 690, 691, 698, 707, 708, 709, 713, 714, 715, 716, 721, 767, 809, 837, 838, 840, 843, 844, 845, 852, 857, 870, 872, 875, 876, 878, 909, 914, 915, 923, 932], "within": [45, 116, 117, 166, 245, 451, 554, 590, 648], "wrap": [47, 92, 375, 554], "arbitrari": [47, 120], "python": [47, 70, 98, 99, 115, 128, 163, 189, 205, 227, 245, 257, 321, 396, 503, 547, 554, 632, 657, 726, 737, 738, 739, 744, 913, 932], "queri": [48, 67, 100, 103, 109, 111, 112, 113, 140, 167, 179, 245, 293, 398, 464, 554, 570, 575, 577, 586, 593, 602, 611, 628, 632, 648, 656, 878, 932, 939], "pars": [48, 98, 99, 102, 109, 111, 112, 150, 192, 198, 212, 222, 225, 245, 375, 414, 451, 463, 469, 480, 505, 507, 509, 510, 525, 531, 534, 543, 554, 583, 608, 615, 620, 626, 630, 648, 786, 877, 883, 894, 932], "transform": [48, 128, 245, 396, 481, 482, 554], "lf": [50, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 624, 625, 626, 627, 628, 629, 648], "under": [50, 61, 62, 63, 64, 548, 550, 555, 556, 559, 560, 561, 926, 928, 933, 936, 937, 938], "context": [51, 176, 245, 252, 257, 275, 366, 404, 450, 451, 498, 503, 512, 522, 525, 540, 553, 554, 564, 627, 648, 676], "manag": [51, 564], "categor": [51, 93, 123, 165, 206, 207, 245, 302, 398, 493, 554, 702, 703, 916, 932], "temporarili": [51, 151, 152, 245, 584, 585, 648], "cach": [51, 67, 103, 109, 111, 113, 123, 398, 428, 429, 430, 431, 432, 434, 435, 436, 480, 554, 570, 575, 577, 602, 611, 648, 894], "categori": [51, 69, 123, 302, 703, 718, 783, 828, 932], "until": [51, 167, 245], "finish": [51, 73, 140, 245, 656, 932], "global": [51, 120, 123, 398, 554], "invalid": [51, 98, 99, 109, 463, 464, 469, 554, 877, 878, 883], "outermost": 51, "exit": [51, 125], "df1": [51, 60, 68, 116, 140, 146, 209, 220, 245], "color": [51, 227, 632], "red": [51, 227, 632], "green": [51, 227, 632], "blue": 51, "orang": [51, 131, 228, 229, 231, 232, 233, 235, 237, 238, 245, 633, 634, 636, 637, 638, 640, 642, 643], "uint8": [51, 118, 207, 245, 313, 314, 398, 487, 554, 715, 716, 902, 932], "df2": [51, 60, 68, 116, 140, 146, 209, 220, 245], "yellow": 51, "black": [51, 128, 245], "join": [51, 60, 67, 166, 217, 245, 374, 414, 554, 570, 575, 577, 590, 602, 611, 623, 627, 648], "succe": [51, 98, 99, 109], "df_join": 51, "cat": [51, 69, 207, 245, 455, 481, 482, 493, 510, 550, 554, 718, 783, 828, 869, 928, 932], "u8": [51, 93, 206, 207, 245, 398, 554, 910, 932], "schemadict": [52, 85, 87, 88, 89, 90, 91, 109, 191, 245, 543, 594, 607, 632, 648], "composit": 52, "dai": [53, 70, 151, 152, 164, 166, 218, 245, 327, 331, 338, 341, 342, 343, 345, 350, 351, 352, 353, 355, 428, 429, 430, 431, 432, 434, 435, 436, 517, 518, 519, 554, 584, 585, 590, 648, 750, 751, 754, 760, 762], "unsign": [54, 55, 56, 57, 423, 554, 832, 932], "could": [58, 73, 136, 151, 245, 301, 514, 523, 554, 573, 584, 648, 701, 932], "static": [58, 632], "utf": 59, "descend": [60, 198, 212, 245, 266, 289, 421, 440, 450, 451, 494, 505, 554, 615, 620, 648, 666, 690, 800, 830, 852, 864, 917, 932], "uniqu": [60, 118, 119, 121, 161, 176, 236, 245, 268, 378, 386, 410, 480, 496, 498, 535, 554, 641, 648, 668, 719, 791, 802, 818, 894, 919, 921, 932], "fill": [60, 68, 96, 124, 141, 142, 195, 216, 245, 295, 311, 314, 364, 365, 370, 374, 428, 429, 431, 434, 435, 436, 442, 466, 472, 483, 524, 554, 578, 579, 610, 627, 648, 774, 775, 822, 837, 838, 840, 843, 844, 845, 855, 880, 886, 897, 932], "sort": [60, 61, 116, 151, 152, 166, 173, 179, 180, 212, 218, 230, 239, 245, 266, 302, 366, 440, 451, 498, 500, 505, 554, 575, 584, 585, 590, 599, 601, 602, 611, 620, 635, 644, 648, 666, 703, 800, 852, 918, 921, 932], "origin": [60, 98, 99, 214, 245, 344, 387, 398, 414, 423, 456, 461, 462, 464, 466, 472, 483, 554, 621, 648, 718, 753, 811, 828, 870, 875, 876, 878, 880, 886, 897, 932], "doe": [60, 79, 85, 87, 88, 89, 91, 92, 98, 99, 101, 102, 109, 110, 114, 116, 117, 140, 164, 188, 189, 214, 222, 245, 354, 398, 496, 522, 554, 577, 594, 621, 626, 648, 656, 763, 780, 811, 857, 923, 932], "receiv": [60, 109, 128, 179, 245, 416, 554, 601, 648], "now": [60, 152, 245, 480, 585, 648], "whose": [60, 166, 180, 245, 360, 521, 554, 590, 648], "post": 60, "constrain": 60, "newli": 60, "boolean": [60, 65, 143, 145, 198, 212, 245, 254, 255, 272, 296, 330, 366, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 451, 463, 500, 505, 543, 554, 580, 615, 620, 648, 654, 655, 667, 673, 696, 735, 776, 786, 787, 788, 790, 791, 793, 794, 795, 796, 797, 798, 802, 825, 826, 850, 869, 924, 932], "2022": [60, 70, 133, 149, 245, 321, 480, 519, 525, 726, 736, 894], "x": [60, 92, 98, 99, 100, 109, 119, 120, 138, 156, 159, 161, 165, 172, 245, 257, 271, 280, 371, 396, 424, 445, 448, 476, 493, 503, 514, 515, 516, 523, 530, 538, 544, 554, 589, 594, 598, 614, 648, 653, 657, 775, 803, 859, 862, 890, 916, 932], "y": [60, 92, 119, 120, 138, 159, 161, 165, 172, 245, 271, 280, 348, 424, 480, 516, 544, 554, 589, 598, 614, 648, 653, 757, 894, 932], "df3": [60, 245], "set_tbl_format": 60, "09": [60, 152, 245, 321, 331, 585, 648, 730], "01": [60, 70, 133, 149, 151, 152, 218, 245, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 480, 519, 584, 585, 648, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 894], "02": [60, 70, 115, 149, 151, 152, 218, 245, 320, 321, 327, 328, 329, 336, 337, 338, 346, 347, 350, 352, 354, 437, 480, 519, 554, 584, 585, 648, 725, 726, 728, 729, 732, 733, 734, 737, 738, 739, 740, 742, 744, 745, 746, 747, 748, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 894], "03": [60, 70, 92, 151, 152, 218, 245, 320, 321, 322, 326, 327, 329, 337, 338, 344, 345, 346, 347, 348, 350, 351, 352, 354, 584, 585, 648, 725, 726, 727, 730, 731, 732, 733, 734, 737, 738, 739, 740, 742, 744, 746, 747, 748, 751, 752, 753, 754, 755, 756, 757, 759, 761, 762, 763], "af1": 60, "af2": 60, "af3": 60, "keep": [60, 98, 99, 109, 214, 217, 218, 245, 387, 398, 507, 554, 621, 623, 648, 718, 811, 828, 932], "easili": [60, 192, 222, 225, 245, 508, 543, 608, 626, 630, 648], "dot": [60, 554, 611, 648, 932], "product": [60, 132, 245, 313, 317, 503, 554, 715, 721, 932], "fill_nul": [60, 141, 245, 480, 554, 578, 627, 648, 894, 932], "167": 60, "47": 60, "callabl": [61, 62, 63, 64, 109, 128, 145, 179, 227, 245, 257, 293, 396, 397, 416, 427, 503, 514, 515, 523, 530, 538, 554, 594, 601, 632, 648, 657, 694, 836, 932], "decor": [61, 62, 63, 64, 120, 121, 128, 245, 257, 554, 657, 932], "access": [61, 62, 63, 64, 163, 188, 189, 245, 398, 554, 627, 648], "by_first_letter_of_column_nam": 61, "f": [61, 99, 133, 149, 164, 203, 213, 216, 245, 257, 293, 443, 460, 480, 503, 509, 514, 515, 523, 530, 554, 694, 874, 894], "fromkei": [61, 63], "by_first_letter_of_column_valu": 61, "starts_with": [61, 455, 459, 873], "slice": [61, 67, 138, 154, 164, 201, 245, 279, 291, 427, 428, 429, 430, 431, 432, 434, 435, 436, 554, 570, 575, 577, 594, 602, 611, 612, 613, 648, 680, 692, 767, 782, 836, 837, 838, 839, 840, 841, 843, 844, 845, 903, 932], "to_seri": [61, 65, 245, 293, 694], "xx": [61, 63], "xy": [61, 63], "yy": [61, 63], "yz": [61, 63], "a2": [61, 63], "b1": [61, 63], "b2": [61, 63], "pow_n": 62, "powersofn": 62, "next": [62, 295, 421, 554, 830, 932], "p": [62, 179, 245, 416, 543, 554, 601, 648], "ceil": [62, 554, 932], "previou": [62, 125, 415, 485, 554, 824, 932], "floor": [62, 554, 932], "nearest": [62, 166, 182, 237, 245, 303, 369, 420, 432, 537, 554, 590, 603, 642, 648, 704, 778, 785, 829, 841, 932], "24": [62, 115, 128, 138, 152, 245, 313, 315, 329, 554, 585, 648, 717, 734, 932], "001": [62, 332, 333, 335, 340, 519, 741, 743, 749], "next_pow2": 62, "prev_pow2": 62, "nearest_pow2": 62, "split_by_column_dtyp": 63, "collect": [63, 67, 109, 110, 114, 167, 203, 245, 257, 379, 504, 509, 525, 543, 554, 572, 573, 576, 577, 578, 579, 580, 581, 583, 584, 586, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 600, 601, 603, 605, 606, 608, 609, 610, 614, 615, 616, 617, 618, 619, 621, 622, 624, 626, 627, 628, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 648, 793, 932], "31": [64, 321, 325, 326, 338, 352, 480, 517, 518, 525, 726, 730, 731, 894], "42": [64, 152, 153, 245, 585, 648, 781, 932], "961": 64, "1764": 64, "4160": 64, "eager": [65, 151, 216, 245, 504, 525, 529, 539, 543, 553, 564, 584, 648], "evalu": [65, 141, 143, 166, 245, 267, 315, 373, 375, 379, 398, 502, 504, 520, 539, 543, 547, 554, 580, 587, 589, 590, 648, 667, 717, 924, 932], "immedi": [65, 421, 504, 539, 543, 554, 830, 932], "arg_tru": [65, 554, 932], "u32": [65, 151, 177, 223, 228, 236, 238, 245, 252, 264, 265, 266, 267, 268, 269, 270, 273, 282, 309, 310, 325, 328, 332, 336, 338, 342, 343, 346, 352, 353, 390, 398, 410, 413, 421, 439, 456, 465, 468, 493, 496, 505, 512, 535, 554, 584, 628, 633, 641, 643, 648, 666, 667, 668, 683, 701, 730, 733, 740, 742, 745, 747, 748, 751, 752, 755, 761, 762, 783, 830, 870, 879, 882, 916, 919, 921, 932], "build": [66, 86], "wa": 66, "compil": [66, 269, 270, 670, 671], "gate": 66, "info": [66, 101, 110, 115, 330, 735], "otherwis": [66, 173, 192, 245, 297, 304, 305, 306, 357, 358, 359, 423, 455, 457, 547, 554, 599, 608, 648, 657, 697, 707, 708, 709, 768, 769, 770, 832, 850, 851, 869, 871, 932], "version": [66, 69, 93, 101, 110, 115, 362, 480, 536, 538, 541, 554, 772, 932], "depend": [66, 115, 257, 269, 270, 404, 421, 503, 522, 525, 554, 670, 671, 830, 932], "host": [66, 98, 103, 107, 111, 113], "git": 66, "lazy_fram": 67, "type_coercion": [67, 570, 575, 577, 602, 611, 612, 613, 648], "predicate_pushdown": [67, 570, 575, 577, 594, 602, 611, 612, 613, 648], "projection_pushdown": [67, 570, 575, 577, 594, 602, 611, 612, 613, 648], "simplify_express": [67, 570, 575, 577, 602, 611, 612, 613, 648], "no_optim": [67, 570, 577, 594, 602, 612, 613, 648], "slice_pushdown": [67, 570, 575, 577, 594, 602, 611, 612, 613, 648], "common_subplan_elimin": [67, 570, 575, 577, 602, 611, 648], "graph": [67, 167, 245, 587, 627, 648], "parallel": [67, 68, 95, 100, 107, 113, 151, 166, 167, 179, 245, 275, 315, 554, 564, 584, 589, 590, 648, 676, 717, 932], "threadpool": 67, "coercion": [67, 424, 554, 570, 575, 577, 602, 611, 612, 613, 648], "optim": [67, 107, 109, 111, 112, 113, 163, 167, 179, 183, 189, 214, 245, 570, 575, 577, 594, 602, 611, 612, 613, 621, 628, 648], "predic": [67, 109, 111, 112, 113, 114, 143, 188, 245, 366, 500, 523, 554, 570, 575, 577, 580, 594, 602, 605, 611, 612, 613, 628, 648, 776, 850, 851, 932], "pushdown": [67, 570, 575, 577, 594, 602, 605, 611, 612, 613, 628, 648, 850, 851, 932], "project": [67, 109, 111, 112, 113, 257, 450, 451, 554, 570, 575, 577, 594, 602, 605, 611, 612, 613, 629, 648], "turn": [67, 98, 99, 109, 123, 498, 554, 570, 575, 577, 594, 602, 612, 613, 648], "off": [67, 98, 99, 109, 123, 498, 554, 570, 575, 577, 594, 602, 612, 613, 648], "Will": [67, 213, 245, 570, 575, 577, 602, 611, 648, 932], "try": [67, 80, 82, 98, 99, 102, 103, 107, 109, 111, 113, 570, 575, 577, 602, 611, 648], "branch": [67, 570, 575, 577, 602, 611, 648], "subplan": [67, 570, 575, 577, 602, 611, 648], "occur": [67, 273, 409, 421, 554, 570, 575, 577, 602, 611, 648, 674, 816, 830, 932], "union": [67, 68, 570, 575, 577, 602, 611, 648, 721, 793, 851, 932], "part": [67, 85, 476, 477, 570, 575, 577, 602, 611, 627, 648, 730, 733, 740, 742, 745, 747, 748, 755, 764, 890, 891], "fashion": [67, 165, 245, 570, 575, 577, 602, 611, 648], "item": [68, 99, 190, 245, 272, 278, 280, 362, 438, 477, 554, 673, 679, 681, 772, 847, 891, 932], "iter": [68, 150, 151, 152, 163, 164, 178, 188, 189, 192, 198, 212, 213, 222, 224, 225, 245, 315, 360, 414, 451, 505, 507, 508, 509, 510, 521, 531, 534, 540, 543, 547, 554, 583, 584, 585, 608, 615, 620, 626, 630, 648, 717, 932], "rechunk": [68, 85, 90, 98, 99, 103, 107, 109, 111, 112, 113, 140, 245, 554, 656, 705, 817, 932], "concatmethod": 68, "vertic": [68, 140, 216, 220, 245, 454, 531, 534, 868], "aggreg": [68, 98, 99, 107, 145, 151, 169, 170, 171, 174, 176, 180, 181, 182, 199, 200, 216, 219, 225, 226, 229, 231, 245, 252, 366, 392, 396, 414, 427, 428, 429, 430, 431, 432, 434, 435, 436, 498, 514, 515, 516, 523, 528, 531, 534, 538, 544, 554, 584, 594, 595, 596, 597, 600, 603, 616, 617, 624, 630, 631, 634, 636, 648, 836, 837, 838, 840, 843, 844, 845, 932], "concaten": [68, 145, 179, 245, 416, 509, 510, 554, 601, 648, 705, 817, 932], "sure": [68, 85, 90, 98, 99, 100, 103, 107, 183, 245, 504], "contigu": [68, 85, 90, 98, 99, 103, 107, 109, 111, 112, 113, 183, 245], "diagon": [68, 213, 245], "strategi": [68, 98, 118, 119, 120, 121, 142, 151, 165, 166, 175, 245, 257, 293, 365, 554, 579, 584, 589, 590, 648, 694, 775, 932], "vstack": [68, 140, 245], "find": [68, 144, 245, 439, 554, 848, 932], "miss": [68, 98, 99, 109, 141, 245, 295, 357, 358, 359, 370, 374, 381, 383, 541, 554, 578, 648, 768, 769, 770, 923, 932], "stack": [68, 156, 220, 245], "length": [68, 69, 96, 109, 119, 124, 151, 152, 197, 245, 288, 315, 345, 351, 405, 427, 428, 429, 430, 431, 432, 434, 435, 436, 449, 466, 468, 472, 474, 483, 504, 554, 584, 585, 602, 614, 648, 689, 694, 705, 717, 718, 726, 754, 760, 806, 822, 828, 836, 837, 838, 839, 840, 841, 843, 844, 845, 863, 880, 882, 886, 888, 897, 932], "don": [68, 128, 214, 216, 245, 257, 275, 315, 503, 554, 621, 648, 657, 676, 717, 849, 923, 932], "t": [68, 102, 109, 128, 179, 214, 216, 245, 257, 275, 315, 356, 357, 358, 359, 416, 467, 473, 479, 480, 503, 547, 554, 601, 621, 648, 657, 676, 717, 766, 768, 769, 770, 849, 881, 887, 893, 894, 923, 932], "relev": 68, "execut": [68, 167, 245, 275, 567, 594, 602, 648, 676], "df_h1": 68, "l1": 68, "l2": 68, "df_h2": 68, "r1": 68, "r2": 68, "r3": 68, "df_d1": 68, "df_d2": 68, "bin": [69, 469, 548, 554, 718, 783, 828, 883, 926, 932], "label": [69, 427, 428, 429, 430, 431, 432, 434, 435, 436, 554, 602, 648, 718, 828, 836, 837, 838, 839, 840, 841, 843, 844, 845, 932], "break_point_label": [69, 718, 828, 932], "break_point": [69, 718, 783, 828, 932], "category_label": [69, 718, 828, 932], "discret": [69, 274, 316, 356, 554, 675, 718, 720, 766, 783, 828, 932], "deprec": [69, 93, 362, 480, 536, 541, 554, 648, 772, 932], "sinc": [69, 93, 101, 110, 327, 362, 480, 525, 536, 541, 554, 732, 772, 932], "assign": [69, 119, 151, 245, 421, 476, 477, 554, 584, 648, 718, 811, 828, 830, 890, 891, 932], "breakpoint": [69, 718, 828, 932], "inf": [69, 120, 121, 263, 377, 380, 554, 663, 718, 783, 790, 794, 810, 824, 828, 920, 932], "low": [70, 151, 245, 346, 504, 584, 648], "high": [70, 151, 245, 346, 504, 584, 648], "interv": [70, 151, 152, 218, 245, 330, 345, 346, 351, 375, 428, 429, 430, 431, 432, 434, 435, 436, 554, 584, 585, 648, 730, 732, 733, 735, 740, 742, 745, 747, 748, 751, 752, 754, 755, 757, 759, 760, 761, 762, 764, 786, 932], "timedelta": [70, 151, 152, 218, 245, 325, 327, 328, 331, 336, 338, 341, 342, 343, 345, 346, 348, 350, 351, 352, 353, 355, 428, 429, 430, 431, 432, 434, 435, 436, 554, 584, 585, 648, 737, 739, 744, 750, 754, 760, 820, 821, 932], "1d": [70, 151, 152, 166, 218, 245, 320, 329, 337, 341, 345, 351, 354, 428, 429, 430, 431, 432, 434, 435, 436, 554, 584, 585, 590, 648, 725, 732, 734, 737, 738, 739, 744, 746, 750, 754, 757, 759, 760, 762, 763], "closedinterv": [70, 151, 152, 245, 375, 428, 429, 430, 431, 432, 434, 435, 436, 554, 584, 585, 648, 786, 932], "lower": [70, 109, 151, 182, 237, 245, 375, 395, 420, 423, 432, 504, 537, 554, 577, 584, 603, 642, 648, 786, 810, 829, 832, 841, 920, 932], "bound": [70, 98, 99, 138, 151, 245, 278, 292, 375, 395, 497, 504, 554, 584, 648, 679, 693, 767, 786, 810, 920, 932], "upper": [70, 98, 99, 138, 151, 245, 375, 497, 504, 554, 584, 648, 767, 786, 810, 920, 932], "period": [70, 151, 152, 194, 195, 245, 287, 345, 351, 357, 358, 359, 415, 441, 442, 554, 584, 585, 609, 610, 648, 688, 754, 760, 768, 769, 770, 824, 854, 855, 932], "like": [70, 86, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 159, 161, 165, 245, 275, 407, 421, 531, 534, 544, 554, 577, 604, 648, 676, 830, 932], "durat": [70, 166, 218, 245, 326, 329, 333, 335, 337, 340, 347, 354, 493, 554, 590, 648, 731, 734, 741, 743, 746, 749, 756, 763, 916, 932], "3d12h4m25": [70, 151, 152, 166, 218, 245, 345, 351, 584, 585, 590, 648, 754, 760], "hour": [70, 151, 152, 166, 218, 245, 341, 345, 351, 428, 429, 430, 431, 432, 434, 435, 436, 518, 519, 554, 584, 585, 590, 648, 750, 754, 760], "minut": [70, 151, 152, 166, 218, 245, 341, 345, 351, 428, 429, 430, 431, 432, 434, 435, 436, 518, 519, 554, 584, 585, 590, 648, 750, 754, 760], "tempor": [70, 151, 152, 163, 189, 205, 245, 375, 428, 429, 430, 431, 432, 434, 435, 436, 554, 564, 584, 585, 648, 786, 801, 932], "window": [70, 151, 152, 245, 315, 345, 351, 357, 358, 359, 414, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 509, 554, 584, 585, 648, 717, 754, 760, 768, 769, 770, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 932], "granular": 70, "finer": 70, "permut": 70, "1mo": [70, 151, 152, 166, 218, 245, 322, 326, 341, 344, 345, 348, 351, 428, 429, 430, 431, 432, 434, 435, 436, 554, 584, 585, 590, 648, 727, 731, 747, 750, 751, 752, 753, 754, 760, 761], "dtrang": 70, "1985": 70, "04": [70, 114, 151, 218, 245, 321, 322, 325, 326, 329, 336, 337, 338, 342, 344, 345, 346, 347, 348, 352, 353, 354, 480, 519, 584, 648, 727, 731, 734, 740, 742, 745, 746, 747, 748, 752, 753, 755, 756, 757, 761, 762, 763, 894], "05": [70, 114, 116, 117, 166, 218, 245, 321, 322, 326, 344, 346, 348, 590, 648, 726, 727, 728, 729, 730, 731, 753, 754, 758, 760, 762], "07": [70, 321, 325, 342, 344, 345, 351, 353, 480, 525, 726, 730, 762, 894], "08": [70, 116, 117, 152, 245, 321, 345, 480, 519, 585, 648, 754, 760, 894], "zone": [70, 98, 99, 109, 322, 344, 727, 753], "america": [70, 753], "new_york": [70, 753], "\u03bc": [70, 92, 151, 152, 166, 218, 245, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 480, 525, 584, 585, 590, 648, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 894], "est": [70, 753], "encount": [71, 151, 245, 411, 412, 463, 464, 511, 514, 523, 541, 554, 584, 648, 820, 821, 877, 878, 932], "duplic": [74, 159, 165, 166, 214, 245, 376, 554, 589, 590, 621, 648, 788, 932], "certain": [75, 101, 110, 157, 218, 245, 508, 570, 602, 612, 613, 648, 932], "least": [77, 120, 415, 498, 554, 824, 921, 932], "unexpect": [78, 245], "caus": [78, 86, 98, 99, 109, 127, 140, 245, 656, 932], "panic": 78, "combin": [80, 82, 151, 152, 153, 166, 218, 245, 267, 351, 467, 473, 479, 554, 584, 585, 590, 611, 648, 760, 881, 887, 893], "mismatch": 80, "incompat": 82, "pa": [85, 114], "chunkedarrai": [85, 175, 245, 721, 932], "schemadefinit": [85, 87, 88, 89, 91, 245, 648], "schema_overrid": [85, 87, 88, 89, 90, 91, 164, 245, 648], "copi": [85, 86, 127, 129, 130, 164, 203, 209, 222, 245, 363, 483, 554, 568, 569, 626, 648, 653, 706, 710, 723, 773, 897, 909, 914, 915, 932], "closest": 85, "pair": [85, 87, 88, 89, 91, 184, 245, 605, 648], "declar": [85, 87, 88, 89, 91, 245, 648], "sever": [85, 87, 88, 89, 91, 245, 648], "wai": [85, 87, 88, 89, 91, 134, 150, 164, 179, 198, 225, 245, 414, 416, 451, 508, 554, 572, 583, 601, 615, 630, 648], "As": [85, 87, 88, 89, 91, 102, 245, 539, 648], "auto": [85, 87, 88, 89, 91, 107, 113, 213, 245, 480, 648], "automat": [85, 87, 88, 89, 91, 92, 98, 99, 100, 109, 120, 121, 192, 222, 245, 467, 473, 479, 480, 608, 626, 648, 881, 887, 893, 894, 932], "equival": [85, 87, 88, 89, 91, 101, 162, 176, 245, 417, 468, 554, 648, 804, 882, 895, 896, 932], "form": [85, 87, 88, 89, 91, 163, 189, 216, 245, 415, 554, 648, 824, 932], "them": [85, 87, 88, 89, 91, 109, 140, 151, 152, 166, 173, 218, 245, 280, 375, 411, 412, 509, 554, 584, 585, 590, 599, 648, 656, 681, 820, 821, 932], "dimens": [85, 87, 89, 91, 245, 425, 554, 648, 834, 932], "construct": [85, 87, 88, 89, 90, 91, 245, 398, 554, 582, 604, 648, 932], "allow_copi": [86, 127], "interchang": [86, 127], "protocol": [86, 100, 127], "__dataframe__": 86, "convers": [86, 127, 164, 209, 245, 480, 564, 894, 913, 914, 915, 932], "detail": [86, 100, 116, 117, 127, 245, 648, 940], "latest": [86, 101, 110, 127, 370, 405, 554], "index": [86, 90, 94, 100, 115, 127, 144, 151, 152, 157, 166, 180, 186, 188, 197, 210, 218, 223, 245, 252, 264, 265, 266, 268, 269, 270, 278, 288, 292, 341, 428, 429, 430, 431, 432, 434, 435, 436, 439, 449, 461, 474, 489, 554, 584, 585, 590, 614, 628, 648, 664, 665, 666, 667, 668, 670, 671, 679, 689, 693, 750, 822, 848, 851, 863, 875, 888, 904, 932], "throw": [86, 301, 463, 464, 554, 701, 877, 878, 932], "runtimeerror": 86, "from_panda": [86, 102], "from_arrow": 86, "effici": [86, 164, 245], "map": [87, 88, 98, 99, 103, 104, 107, 108, 109, 111, 128, 137, 163, 184, 188, 189, 204, 245, 345, 351, 397, 398, 498, 503, 554, 574, 605, 648, 754, 760, 811, 932], "clone": [87, 88, 89, 90, 91, 129, 208, 209, 245, 568, 648, 706, 913, 914, 915, 923, 932], "dimension": [87, 89, 91, 245, 648, 932], "infer_schema_length": [88, 91, 98, 99, 102, 109, 112, 245, 648], "mani": [88, 91, 100, 140, 245, 656, 932], "scan": [88, 91, 98, 99, 107, 109, 110, 111, 112, 113, 114, 577, 586, 593, 648], "slow": [88, 91, 98, 99, 109, 257, 315, 554, 717, 932], "NOT": [88, 116, 117], "typic": [88, 128, 245, 657, 932], "clearer": 88, "load": [88, 90, 101, 110, 245, 564, 586, 593, 648], "want": [88, 128, 140, 176, 245, 257, 304, 305, 306, 366, 396, 398, 428, 429, 430, 431, 432, 434, 435, 436, 514, 523, 554, 570, 586, 593, 648, 656, 657, 707, 708, 709, 914, 932], "_partial_": [88, 245, 648], "omit": [88, 92, 119, 120, 121, 176, 245], "partial": 88, "present": [88, 116, 120, 379, 554, 923, 932], "np": [89, 143, 245, 489, 554, 648, 790, 794, 795, 796, 836, 904, 932], "ndarrai": [89, 143, 208, 245, 489, 554, 648, 721, 848, 851, 904, 914, 932], "numpi": [89, 115, 132, 208, 209, 245, 411, 412, 554, 648, 790, 794, 795, 796, 820, 821, 836, 848, 914, 915, 923, 932], "columnar": [89, 91, 163, 189, 245], "interpret": [89, 91, 98, 99, 109, 245, 648], "yield": [89, 91, 98, 99, 109, 138, 140, 213, 245, 648, 656, 767, 932], "conclus": [89, 91, 245, 648], "pd": [90, 102, 493, 554, 916, 932], "nan_to_nul": [90, 245, 648, 932], "include_index": 90, "datetimeindex": [90, 721, 932], "panda": [90, 102, 115, 209, 245, 493, 554, 648, 915, 916, 932], "instal": [90, 98, 99, 100, 103, 107, 115, 132, 208, 209, 245, 611, 648, 915, 932], "nan": [90, 116, 117, 120, 127, 141, 209, 245, 318, 319, 364, 374, 381, 383, 384, 385, 399, 408, 411, 412, 511, 541, 554, 578, 648, 659, 663, 722, 774, 795, 796, 820, 821, 836, 915, 932], "convert": [90, 93, 101, 102, 110, 127, 204, 205, 206, 207, 208, 211, 245, 293, 322, 469, 480, 648, 694, 727, 883, 894, 901, 912, 913, 914, 915, 923, 932], "pd_df": 90, "pd_seri": 90, "tbl": [92, 95, 99], "reconstruct": 92, "repr": [92, 120, 121], "need": [92, 98, 99, 102, 116, 117, 151, 152, 196, 208, 245, 293, 398, 443, 465, 554, 584, 585, 648, 856, 879, 932], "trim": 92, "whitespac": [92, 467, 473, 479, 881, 887, 893], "prompt": 92, "extract": [92, 325, 326, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 346, 347, 352, 353, 355, 416, 462, 463, 464, 554, 728, 729, 730, 731, 733, 734, 736, 740, 741, 742, 743, 745, 746, 747, 748, 749, 751, 752, 755, 756, 758, 761, 762, 764, 876, 877, 878], "to_init_repr": [92, 245, 932], "handl": [92, 98, 99, 109, 114, 274, 316, 483, 554, 675, 720, 897, 932], "truncat": [92, 151, 245, 584, 602, 648], "identifi": [92, 172, 178, 214, 245, 598, 621, 648], "compound": 92, "struct": [92, 176, 192, 211, 215, 222, 245, 293, 398, 463, 476, 477, 498, 514, 515, 516, 530, 554, 608, 622, 626, 648, 694, 877, 890, 891], "neither": [92, 190, 245], "though": 92, "plan": [92, 166, 167, 245, 567, 575, 582, 589, 590, 604, 611, 629, 648], "source_ac": 92, "source_cha": 92, "ident": [92, 129, 130, 245, 568, 569, 648, 706, 710, 932], "timestamp": [92, 344, 525, 753], "tor_id": 92, "nnel_id": 92, "asia": [92, 728, 729, 758], "tokyo": 92, "123456780": 92, "9876543210": 92, "56": [92, 491, 554], "59": [92, 115, 321, 336, 346, 518, 726, 745, 755], "663053": 92, "jst": 92, "803065983": 92, "2055938745": 92, "38": [92, 120], "18": [92, 152, 245, 314, 345, 351, 354, 374, 387, 554, 585, 602, 648, 763], "050545": 92, "source_actor_id": 92, "source_channel_id": 92, "dummi": [93, 206, 245, 910, 932], "to_dummi": [93, 245, 932], "foo_1": [93, 206, 245], "foo_2": [93, 206, 245], "bar_3": [93, 206, 245], "bar_4": [93, 206, 245], "ham_a": [93, 206, 245], "ham_b": [93, 206, 245], "datatypeclass": 94, "get": [94, 104, 108, 122, 131, 137, 147, 148, 151, 152, 154, 155, 159, 161, 168, 175, 188, 191, 193, 197, 201, 221, 230, 239, 245, 252, 264, 265, 266, 268, 277, 281, 282, 294, 310, 311, 312, 313, 314, 327, 367, 372, 376, 378, 386, 389, 391, 399, 400, 401, 404, 406, 408, 411, 412, 420, 449, 453, 465, 468, 487, 488, 495, 499, 522, 527, 531, 532, 533, 534, 542, 545, 546, 554, 571, 574, 581, 584, 585, 586, 591, 593, 607, 614, 618, 625, 635, 644, 648, 664, 665, 666, 667, 668, 678, 682, 683, 695, 705, 713, 714, 715, 716, 732, 779, 782, 786, 788, 791, 802, 807, 812, 814, 815, 817, 820, 821, 825, 826, 829, 863, 866, 879, 882, 903, 909, 910, 918, 922, 923, 932], "uint32": [94, 115, 138, 245, 266, 269, 270, 282, 325, 328, 332, 334, 336, 338, 339, 342, 343, 346, 352, 353, 424, 456, 465, 468, 489, 493, 554, 667, 670, 671, 683, 701, 730, 733, 740, 742, 745, 747, 748, 751, 752, 755, 761, 762, 767, 849, 870, 916, 932], "regular": [94, 163, 188, 189, 218, 245, 360, 508, 521, 531, 534, 544, 554], "uint64": [94, 153, 245, 269, 270, 371, 423, 554, 670, 671, 781, 832, 932], "bigidx": 94, "read": [95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 140, 245, 396, 547, 554, 577, 582, 604, 648, 656, 932], "batch": [95, 99, 112, 594, 648], "over": [95, 98, 99, 101, 109, 120, 128, 140, 163, 164, 188, 189, 213, 224, 227, 245, 257, 315, 365, 374, 396, 397, 427, 428, 429, 430, 431, 432, 434, 435, 436, 503, 514, 515, 523, 530, 538, 554, 632, 656, 657, 717, 836, 837, 838, 840, 844, 932], "fetch": [95, 109, 167, 245, 568, 570, 586, 593, 648], "ideal": 95, "read_csv_batch": [95, 565], "tpch": [95, 99], "tables_scale_100": [95, 99], "lineitem": [95, 99, 100], "try_parse_d": [95, 98, 99, 109], "In": [96, 101, 110, 113, 120, 121, 124, 128, 138, 140, 151, 152, 176, 245, 257, 404, 554, 584, 585, 648, 656, 767, 831, 932], "probabl": [96, 124, 356, 554, 766, 932], "n_row": [97, 98, 99, 103, 107, 109, 111, 112, 113, 164, 245, 577, 648], "accept": [97, 98, 99, 101, 103, 107, 139, 150, 192, 198, 212, 222, 225, 245, 360, 375, 414, 417, 451, 505, 507, 508, 509, 510, 521, 531, 534, 543, 554, 576, 583, 608, 615, 620, 626, 630, 648, 786, 932], "stop": [97, 98, 99, 103, 107, 109, 111, 112, 113, 325, 327, 328, 330, 331, 336, 338, 342, 343, 345, 346, 350, 351, 352, 353, 355, 725, 727, 730, 732, 733, 735, 740, 742, 745, 747, 748, 751, 752, 753, 754, 755, 757, 759, 760, 761, 762, 763, 764], "textio": 98, "new_column": [98, 99, 102, 109], "comment_char": [98, 99, 109], "quote_char": [98, 99, 109], "skip_row": [98, 99, 109], "missing_utf8_is_empty_str": [98, 99, 109], "ignore_error": [98, 99, 109], "n_thread": [98, 99], "8192": 98, "csvencod": [98, 99, 109], "low_memori": [98, 99, 107, 109, 112, 113], "storage_opt": [98, 101, 103, 107, 110, 111, 113], "skip_rows_after_head": [98, 99, 109], "row_count_nam": [98, 99, 103, 107, 109, 111, 112, 113], "row_count_offset": [98, 99, 103, 107, 109, 111, 112, 113], "sample_s": [98, 99], "eol_char": [98, 99, 109], "we": [98, 99, 102, 109, 166, 245, 275, 469, 529, 547, 590, 594, 648, 657, 676, 783, 828, 883, 932], "handler": [98, 99, 102], "g": [98, 99, 101, 102, 103, 107, 110, 111, 113, 216, 245, 257, 360, 443, 521, 554, 605, 648, 849, 914, 932], "builtin": [98, 99, 102], "stringio": [98, 99], "fsspec": [98, 99, 103, 107, 110, 111, 113, 115], "remot": [98, 99, 103, 107], "first": [98, 99, 102, 109, 112, 128, 149, 151, 154, 166, 168, 175, 179, 180, 201, 207, 213, 214, 218, 230, 245, 266, 268, 275, 278, 279, 315, 341, 345, 372, 378, 391, 398, 416, 439, 451, 461, 463, 464, 470, 471, 507, 514, 523, 527, 547, 554, 570, 584, 586, 590, 593, 601, 621, 627, 635, 648, 666, 676, 679, 680, 694, 717, 719, 750, 754, 782, 791, 807, 811, 848, 875, 877, 878, 884, 885, 903, 912, 932], "autogener": [98, 99, 109], "column_x": [98, 99, 109], "enumer": [98, 99, 109, 164, 245], "shorter": [98, 99], "remain": [98, 99, 109, 138, 245, 257, 476, 477, 554, 594, 648, 767, 890, 891, 932], "comment": [98, 99, 109], "instanc": [98, 99, 109, 120, 121, 140, 145, 245, 293, 301, 405, 428, 429, 430, 431, 432, 434, 435, 436, 514, 523, 554, 594, 628, 648, 656, 701, 932], "special": [98, 99, 109, 657, 932], "escap": [98, 99, 109], "dure": [98, 99, 109, 125, 140, 245, 656, 932], "equal": [98, 99, 109, 116, 117, 123, 146, 151, 166, 173, 245, 427, 428, 429, 430, 431, 432, 434, 435, 436, 465, 466, 472, 483, 504, 554, 584, 590, 599, 648, 836, 837, 838, 839, 840, 841, 843, 844, 845, 849, 879, 880, 886, 897, 932], "would": [98, 99, 109, 266, 278, 404, 421, 505, 554, 666, 679, 830, 914, 932], "prefer": [98, 99, 101, 109, 128, 140, 163, 188, 189, 227, 245, 257, 427, 554, 632, 648, 656, 657, 836, 932], "treat": [98, 99, 109, 455, 470, 471, 869, 884, 885], "10000": [98, 164, 245, 483], "check": [98, 99, 109, 116, 117, 146, 160, 162, 245, 254, 255, 272, 296, 299, 300, 375, 379, 455, 459, 478, 554, 594, 648, 654, 655, 673, 696, 699, 700, 787, 789, 792, 793, 799, 800, 801, 803, 804, 849, 869, 873, 892, 932], "might": [98, 99, 109, 257, 404, 496, 554, 915, 932], "issu": [98, 99, 102, 109, 313, 314, 487, 554, 715, 716, 902, 932], "iso8601": [98, 99, 109], "naiv": [98, 99, 109, 321, 726], "alwai": [98, 128, 227, 245, 404, 547, 594, 632, 648, 657, 932], "physic": [98, 99, 166, 245, 302, 493, 554, 567, 589, 590, 648, 703, 916, 932], "cpu": [98, 99], "system": [98, 99], "wrongli": 98, "done": [98, 99, 109, 114, 149, 166, 245, 256, 301, 466, 472, 554, 590, 648, 701, 880, 886, 932], "buffer": [98, 99, 138, 163, 245, 767, 932], "modifi": [98, 99, 109, 125, 156, 163, 220, 245, 267, 344, 354, 554, 753, 763, 833, 895, 896, 932], "lossi": [98, 99, 109], "decod": [98, 99], "im": [98, 99], "usag": [98, 99, 109, 120, 121, 196, 245, 857, 932], "expens": [98, 99, 107, 109, 112, 113, 128, 163, 188, 189, 213, 214, 245, 257, 554, 621, 648, 656, 657, 932], "nativ": [98, 103, 107, 128, 163, 189, 205, 227, 245, 257, 554, 632, 657, 932], "parser": 98, "even": 98, "regard": [98, 511, 541], "sens": [98, 103, 107, 111, 113, 151, 152, 173, 218, 245, 584, 585, 599, 648], "particular": [98, 103, 107, 111, 113, 138, 245, 767, 932], "storag": [98, 101, 103, 107, 110, 111, 113], "skip": [98, 99, 102, 107, 109, 113, 216, 245, 657, 932], "offset": [98, 99, 103, 107, 109, 111, 112, 113, 151, 152, 197, 218, 223, 245, 288, 341, 345, 351, 449, 474, 480, 554, 584, 585, 614, 628, 648, 689, 750, 754, 760, 863, 888, 894, 932], "row_count": [98, 99, 103, 107, 109, 111, 112, 113], "sampl": [98, 99, 227, 245, 448, 554, 632, 862, 932], "estim": [98, 99, 138, 245, 358, 359, 388, 554, 767, 769, 770, 805, 932], "alloc": [98, 99, 138, 183, 245, 767, 932], "scan_csv": [98, 99, 612, 613, 648], "lazili": [98, 99, 109, 110, 111, 112, 113, 398, 554], "glob": [98, 99, 109, 111, 112, 113], "pattern": [98, 99, 109, 111, 112, 113, 163, 245, 403, 455, 456, 461, 462, 470, 471, 850, 851, 869, 870, 875, 876, 884, 885, 932], "store": [98, 107, 140, 163, 189, 245, 656, 932], "continu": [98, 107, 448, 554, 862, 932], "benchmark": [98, 107], "50000": 99, "batchedcsvread": [99, 564], "upon": 99, "creation": 99, "gather": 99, "next_batch": 99, "big": 99, "interest": 99, "seen_group": 99, "big_fil": 99, "while": [99, 101, 102, 110, 120, 121, 163, 172, 213, 245, 598, 648], "df_current_batch": 99, "concat": [99, 705, 817, 932], "partition_df": 99, "partition_bi": [99, 164, 245], "as_dict": [99, 178, 245], "fh": 99, "write_csv": [99, 109, 245], "els": [99, 547], "partition_on": 100, "partition_rang": 100, "partition_num": 100, "dbreadengin": 100, "connectorx": [100, 115], "raw": 100, "partit": [100, 101, 107, 110, 114, 164, 178, 245], "backend": [100, 101, 110], "transfer": 100, "document": [100, 102, 464, 480, 878, 894], "redshift": 100, "mysql": 100, "mariadb": 100, "clickhous": 100, "oracl": 100, "bigqueri": 100, "pleas": 100, "doc": [100, 132, 245], "github": 100, "sfu": 100, "db": 100, "connector": 100, "destin": 100, "sqlite": 100, "develop": [100, 120, 121], "flight_sql": 100, "further": [100, 915, 932], "wide": [100, 149, 172, 216, 245, 598, 648], "adopt": 100, "significantli": 100, "better": [100, 128, 227, 245, 257, 498, 554, 632, 850, 851, 932], "driver": 100, "cpp": 100, "partition_col": 100, "explicitli": [100, 119, 120, 398, 543, 554], "delta_table_opt": [101, 110], "lake": [101, 110, 564], "root": [101, 110, 387, 397, 406, 418, 452, 486, 553, 554, 865, 932], "filesystem": [101, 110], "absolut": [101, 110, 116, 117, 188, 245, 251, 357, 358, 359, 554, 652, 768, 769, 770, 932], "gc": [101, 110], "azur": [101, 110], "deltalak": [101, 110, 115], "cloud": [101, 110, 114], "configur": [101, 110], "authent": [101, 110], "keyword": [101, 107, 110, 132, 179, 188, 192, 222, 225, 245, 416, 540, 543, 554, 601, 608, 626, 630, 648, 932], "table_path": [101, 110], "avoid": 101, "year": [101, 110, 151, 152, 166, 218, 245, 330, 331, 341, 342, 345, 351, 352, 428, 429, 430, 431, 432, 434, 435, 436, 517, 518, 554, 584, 585, 590, 648, 735, 736, 750, 751, 754, 760, 761], "2021": [101, 110, 133, 149, 151, 218, 245, 480, 529, 584, 648, 728, 729, 736, 758, 801, 894, 932], "aw": [101, 110], "bucket": [101, 110, 345, 351, 754, 760, 783, 932], "aws_access_key_id": [101, 110], "the_aws_access_key_id": [101, 110], "aws_secret_access_kei": [101, 110], "the_aws_secret_access_kei": [101, 110], "googl": [101, 110], "service_account": [101, 110], "service_account_json_absolute_path": [101, 110], "az": [101, 110], "adl": [101, 110], "abf": [101, 110], "azure_storage_account_nam": [101, 110], "azure_storage_account_kei": [101, 110], "without_fil": [101, 110], "track": [101, 110, 128, 245], "sheet_id": 102, "sheet_nam": 102, "xlsx2csv_option": 102, "read_csv_opt": 102, "xlsx2csv": [102, 115], "read_csv": [102, 109], "skip_empty_lin": 102, "my": [102, 114], "datasheet": 102, "correct": [102, 358, 359, 388, 433, 448, 554, 594, 648, 769, 770, 805, 842, 862, 932], "look": [102, 293, 296, 696], "fix": [102, 119, 120, 354, 428, 429, 430, 431, 432, 434, 435, 436, 554, 763], "whole": [102, 450, 451, 461, 554, 648, 875], "With": [102, 128, 245, 257, 554, 657, 932], "1000": [102, 138, 207, 245, 332, 333, 483, 741, 912, 932], "spreadsheet": [102, 180, 245], "xl": 102, "xlsm": 102, "xlsb": 102, "odf": 102, "od": [102, 479, 893], "odt": 102, "memory_map": [103, 107, 111], "v2": [103, 111], "greatli": [103, 111], "repeat": [103, 111, 422, 424, 554], "o": [103, 111, 315, 460, 494, 554, 717, 874, 917, 932], "page": [103, 107, 111, 113, 245, 554, 564, 613, 648, 932], "give": [103, 107, 111, 112, 113, 172, 214, 245, 327, 388, 424, 554, 564, 598, 621, 648, 732, 805, 932], "That": [103, 594, 648], "filenam": 103, "my_fil": 103, "write_ipc": [103, 245], "read_ndjson": 105, "parallelstrategi": [107, 113], "use_statist": [107, 113], "awar": [107, 163, 189, 205, 245, 480, 894], "stabl": [107, 132, 190, 245, 598, 648], "row_group": [107, 113], "read_tabl": 107, "with_column_nam": 109, "push": [109, 111, 112, 113, 114], "down": [109, 111, 112, 113, 114, 369, 554, 778, 932], "therebi": [109, 111, 112, 113], "potenti": [109, 111, 112, 113], "overhead": [109, 111, 112, 113], "realloc": [109, 111, 112, 140, 245, 656, 932], "headerless": 109, "unlik": 109, "fewer": 109, "my_long_fil": 109, "doesn": [109, 356, 554, 766, 923, 932], "thing": [109, 501, 522], "less": [109, 166, 245, 466, 472, 477, 483, 554, 590, 648, 880, 886, 891, 897], "limit": [109, 142, 245, 295, 304, 305, 306, 365, 370, 554, 579, 586, 613, 648, 707, 708, 709, 775, 932], "breezah": 109, "languag": [109, 151, 152, 166, 218, 245, 341, 345, 351, 428, 429, 430, 431, 432, 434, 435, 436, 554, 584, 585, 590, 648, 750, 754, 760], "hard": [109, 594, 648], "mydf": 109, "lambda": [109, 128, 145, 179, 227, 245, 257, 293, 357, 358, 359, 396, 397, 427, 503, 514, 515, 516, 523, 530, 538, 544, 554, 594, 601, 632, 648, 657, 694, 768, 769, 770, 932], "simpli": [109, 514, 523], "idx": [109, 151, 164, 245, 293, 584, 648, 694, 851, 932], "uint16": [109, 313, 314, 487, 554, 715, 716, 902, 932], "u16": 109, "aws_region": 110, "eu": 110, "central": [110, 388, 448, 554, 805, 862, 932], "allow_pyarrow_filt": 114, "comparison": 114, "dset": 114, "folder": 114, "1970": 114, "stdout": [115, 149, 245], "13": [115, 129, 130, 141, 142, 148, 152, 157, 167, 175, 222, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 427, 429, 509, 514, 523, 546, 554, 568, 569, 578, 579, 585, 592, 626, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 648, 657, 754, 760, 761, 932], "platform": 115, "maco": 115, "arm64": 115, "arm": 115, "64bit": [115, 423, 554, 832, 932], "main": 115, "feb": 115, "clang": 115, "14": [115, 128, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 331, 374, 554, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 754], "1400": 115, "29": 115, "202": 115, "2_alpha": 115, "detect": 115, "matplotlib": [115, 602, 611, 648], "check_dtyp": [116, 117], "check_exact": [116, 117], "rtol": [116, 117], "1e": [116, 117], "atol": [116, 117], "nans_compare_equ": [116, 117], "check_column_ord": 116, "check_row_ord": 116, "assertionerror": [116, 117], "compar": [116, 117, 146, 245, 502, 849, 932], "exactli": [116, 117, 120, 121, 476, 477, 857, 890, 891, 932], "toler": [116, 117, 166, 245, 590, 648], "inexact": [116, 117], "assert": [116, 117, 119, 120, 121, 152, 245, 564, 585, 648, 780, 932], "irrespect": 116, "unsort": 116, "check_nam": 117, "s1": [117, 145, 245, 915, 924, 932], "searchstrategi": [118, 120, 121], "null_prob": [118, 120, 121], "percentag": [118, 120, 121, 415, 554, 824, 932], "chanc": [118, 120, 121], "flag": [118, 440, 554, 575, 594, 648, 852, 932], "hypothesi": [118, 119, 120, 121, 940], "sampled_from": 118, "unique_small_int": 118, "ccy": 118, "gbp": 118, "eur": [118, 133, 149, 245], "jpy": 118, "min_col": [119, 120], "max_col": [119, 120], "suitabl": [119, 128, 245, 257, 439, 554, 657, 848, 932], "standalon": [119, 120], "itself": [119, 592, 648], "mincol": 119, "exact": [119, 120, 121, 196, 245, 480, 554, 894], "especi": 119, "punctuat": 119, "test_special_char_colname_init": 119, "test_unique_xyz": 119, "assert_someth": 119, "min_siz": [120, 121], "max_siz": [120, 121], "include_col": 120, "allow_infin": [120, 121], "allowed_dtyp": [120, 121], "excluded_dtyp": [120, 121], "describ": [120, 149, 245, 932], "desir": 120, "ignor": [120, 121, 170, 200, 245, 274, 316, 344, 357, 358, 359, 411, 412, 554, 675, 720, 753, 768, 769, 770, 820, 821, 932], "n_chunk": [120, 121, 245, 932], "randomis": 120, "onto": 120, "independ": [120, 121], "either": [120, 152, 167, 170, 178, 188, 200, 245, 505, 543, 585, 592, 648], "pct": 120, "preced": 120, "disallow": [120, 121], "exclud": [120, 121, 311, 314, 375, 508, 541, 554, 786, 801, 932], "deploi": [120, 121], "characterist": [120, 121], "concret": [120, 121], "test_repr": [120, 121], "isinst": [120, 121, 245], "known": [120, 632], "df_strategi": 120, "15836": 120, "1755e": 120, "575050513": 120, "constructor": 121, "max_data_s": 121, "54666": 121, "6414": 121, "63290": 121, "toggl": [123, 480, 894], "scope": 125, "lifetim": 125, "initi": [125, 514, 523, 547], "whatev": 125, "were": 125, "enter": 125, "set_verbos": 125, "do_various_th": 125, "restor": 125, "nan_as_nul": 127, "_pyarrowdatafram": 127, "nullabl": 127, "extens": [127, 209, 245, 915, 932], "propag": [127, 170, 200, 245, 411, 412, 554, 820, 821, 932], "inference_s": [128, 245], "256": [128, 245, 824, 932], "user": [128, 179, 227, 245, 257, 416, 440, 503, 554, 601, 632, 648, 657, 852, 932], "udf": [128, 179, 227, 245, 257, 416, 503, 554, 601, 632, 648, 657, 932], "logic": [128, 227, 245, 493, 554, 582, 589, 604, 629, 632, 648, 657, 916, 932], "almost": [128, 227, 245, 632, 657, 932], "_significantly_": [128, 227, 245, 632, 657, 932], "intens": [128, 227, 245, 632, 657, 932], "becaus": [128, 138, 151, 167, 216, 227, 245, 275, 584, 632, 648, 657, 676, 767, 932], "forc": [128, 166, 227, 245, 589, 590, 632, 648, 657, 932], "materi": [128, 227, 245, 602, 632, 648, 657, 932], "parallelis": [128, 227, 245, 632, 657, 932], "optimis": [128, 227, 245, 632, 648, 657, 850, 851, 932], "achiev": [128, 227, 245, 257, 554, 632, 657, 932], "best": [128, 227, 245, 257, 554, 632, 657, 932], "tri": [128, 245], "arbitrarili": [128, 245], "rearrang": [128, 245], "preserv": [128, 209, 245, 445, 554, 859, 915, 932], "lru_cach": [128, 245, 257, 554, 657, 932], "magnitud": [128, 245, 257, 554, 657, 932], "speedup": [128, 163, 245, 257, 554, 657, 932], "column_1": [128, 213, 245], "scalar": [128, 162, 245, 439, 503, 554, 804, 848, 932], "cheap": [129, 130, 245, 568, 569, 648, 656, 706, 710, 932], "deepcopi": [129, 130, 245, 568, 569, 648, 706, 710, 932], "clear": [130, 245, 569, 648, 710, 932], "properti": [131, 137, 155, 191, 193, 221, 245, 564, 571, 574, 607, 625, 648], "appl": [131, 156, 165, 184, 186, 204, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 418, 426, 459, 478, 486, 554, 589, 605, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 648, 873, 892], "banana": [131, 204, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 418, 426, 486, 554, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643], "pearson": [132, 245, 388, 448, 511, 536, 554, 805, 862, 932], "correl": [132, 245, 511, 536, 541], "coeffici": [132, 245, 448, 554, 862, 932], "corrcoef": [132, 245], "summari": [133, 245, 719, 932], "glimps": [133, 154, 245], "usd": [133, 149, 245], "2020": [133, 149, 152, 245, 322, 326, 329, 332, 333, 335, 337, 340, 344, 347, 348, 480, 585, 648, 727, 731, 734, 741, 743, 746, 749, 753, 756, 894], "null_count": [133, 136, 245, 315, 554, 717, 719, 932], "266667": [133, 245], "666667": [133, 170, 219, 233, 245, 357, 554, 624, 638, 648], "std": [133, 245, 427, 554, 648, 719, 843, 932], "101514": [133, 245], "707107": [133, 245, 358, 554, 769, 932], "57735": [133, 245], "median": [133, 180, 245, 430, 554, 627, 648, 839, 932], "more_column": [134, 139, 215, 245, 360, 521, 554, 572, 576, 622, 648], "Or": [134, 150, 151, 152, 166, 198, 218, 225, 245, 414, 451, 508, 547, 554, 572, 583, 584, 585, 590, 615, 630, 648], "subset": [136, 176, 214, 245, 573, 621, 648], "snippet": [136, 245, 573, 648], "is_nul": [136, 245, 554, 573, 648, 932], "sizeunit": [138, 245, 767, 932], "heap": [138, 245, 767, 932], "its": [138, 245, 321, 345, 351, 451, 554, 726, 754, 760, 767, 932], "bitmap": [138, 245, 767, 932], "therefor": [138, 245, 293, 547, 767, 932], "structarrai": [138, 245, 767, 932], "constant": [138, 152, 245, 363, 554, 585, 648, 767, 773, 932], "unchang": [138, 245, 257, 493, 554, 594, 632, 648, 767, 916, 932], "capac": [138, 196, 245, 767, 857, 932], "ffi": [138, 245, 767, 932], "kb": [138, 245, 767, 932], "mb": [138, 245, 767, 932], "gb": [138, 245, 767, 932], "tb": [138, 245, 767, 932], "revers": [138, 245, 310, 311, 312, 313, 314, 397, 418, 486, 554, 648, 713, 714, 715, 716, 932], "1_000_000": [138, 245, 767, 932], "25888898": [138, 245], "689577102661133": [138, 245], "long": [139, 172, 216, 245, 576, 598, 648], "letter": [139, 230, 239, 245, 360, 521, 554, 576, 635, 644, 648], "thu": [140, 245, 511, 541, 656, 932], "faster": [140, 216, 245, 257, 427, 468, 496, 554, 612, 613, 648, 656, 657, 836, 882, 932], "onlin": [140, 245, 656, 932], "rerun": [140, 245, 656, 932], "fill_valu": [141, 195, 216, 245, 442, 554, 578, 610, 648, 855, 932], "Not": [141, 245, 381, 383, 398, 554, 578, 648], "To": [141, 245, 318, 319, 365, 531, 534, 544, 554, 578, 648], "fillnullstrategi": [142, 245, 365, 554, 579, 648, 775, 932], "matches_supertyp": [142, 245, 579, 648], "forward": [142, 166, 245, 365, 370, 554, 579, 590, 648, 775, 932], "consecut": [142, 245, 295, 365, 370, 454, 554, 579, 648, 775, 868, 932], "supertyp": [142, 245, 256, 554, 579, 648], "fill_nan": [142, 245, 554, 648, 932], "OR": [143, 245, 502, 580, 648], "reduct": [145, 245], "supercast": [145, 245], "similar": [145, 166, 245, 414, 547, 554, 590, 648], "parent": [145, 245], "rule": [145, 245, 348, 757], "arithmet": [145, 245], "zip_with": [145, 245, 932], "foo11": [145, 245], "bar22": [145, 245], "null_equ": [146, 245, 849, 932], "retriev": [147, 245, 269, 270, 484, 670, 671, 898], "return_as_str": [149, 245], "preview": [149, 245], "nice": [149, 245], "few": [149, 245], "rather": [149, 166, 245, 483, 590, 648, 897], "head": [149, 168, 201, 245, 256, 391, 554, 593, 648, 807, 903, 932], "tail": [149, 154, 245, 256, 448, 554, 648, 782, 862, 932], "intoexpr": [150, 151, 152, 192, 198, 212, 222, 225, 245, 375, 414, 451, 505, 507, 509, 510, 514, 523, 531, 534, 540, 543, 547, 554, 583, 584, 585, 608, 615, 620, 630, 648, 786, 932], "more_bi": [150, 178, 198, 245, 451, 554, 583, 615, 648], "maintain_ord": [150, 178, 180, 214, 218, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 252, 257, 294, 489, 495, 512, 554, 570, 575, 577, 583, 602, 611, 612, 613, 621, 631, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 648, 695, 718, 828, 918, 932], "consist": [150, 178, 245, 480, 583, 648, 894], "agg": [150, 151, 152, 245, 252, 257, 366, 368, 450, 451, 489, 500, 512, 554, 570, 575, 577, 583, 584, 585, 602, 611, 648], "anoth": [150, 245, 292, 315, 320, 554, 583, 627, 648, 693, 717, 725, 849, 932], "index_column": [151, 152, 245, 584, 585, 648], "include_boundari": [151, 245, 584, 648], "start_bi": [151, 245, 584, 648], "startbi": [151, 245, 584, 648], "dynamicgroupbi": [151, 245], "normal": [151, 245, 356, 388, 448, 554, 584, 648, 766, 805, 862, 932], "groupbi": [151, 152, 176, 245, 252, 257, 275, 315, 366, 368, 414, 450, 451, 489, 500, 503, 512, 554, 570, 575, 577, 584, 585, 602, 611, 648, 676, 717, 932], "member": [151, 245, 584, 648, 793, 932], "seen": [151, 245, 295, 370, 554, 584, 648], "roll": [151, 152, 245, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 509, 554, 584, 585, 648, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 932], "slot": [151, 245, 274, 315, 316, 554, 584, 648, 675, 717, 720, 932], "1n": [151, 152, 166, 218, 245, 341, 345, 351, 428, 429, 430, 431, 432, 434, 435, 436, 554, 584, 585, 590, 648, 750, 754, 760], "nanosecond": [151, 152, 166, 218, 245, 341, 345, 346, 351, 428, 429, 430, 431, 432, 434, 435, 436, 519, 554, 584, 585, 590, 648, 750, 754, 755, 760], "1u": [151, 152, 166, 218, 245, 341, 345, 351, 428, 429, 430, 431, 432, 434, 435, 436, 554, 584, 585, 590, 648, 750, 754, 760], "microsecond": [151, 152, 166, 218, 245, 341, 345, 346, 351, 428, 429, 430, 431, 432, 434, 435, 436, 518, 519, 554, 584, 585, 590, 602, 648, 750, 754, 760], "1m": [151, 152, 166, 218, 245, 332, 333, 335, 340, 341, 345, 347, 351, 428, 429, 430, 431, 432, 434, 435, 436, 554, 584, 585, 590, 648, 741, 743, 749, 750, 754, 756, 760], "millisecond": [151, 152, 166, 218, 245, 341, 345, 351, 428, 429, 430, 431, 432, 434, 435, 436, 519, 554, 584, 585, 590, 648, 750, 754, 760], "1h": [151, 152, 166, 218, 245, 341, 345, 351, 428, 429, 430, 431, 432, 434, 435, 436, 554, 584, 585, 590, 648, 733, 750, 754, 760], "1w": [151, 152, 166, 218, 245, 341, 345, 351, 428, 429, 430, 431, 432, 434, 435, 436, 554, 584, 585, 590, 648, 750, 754, 760], "week": [151, 152, 166, 218, 245, 341, 345, 351, 353, 428, 429, 430, 431, 432, 434, 435, 436, 519, 554, 584, 585, 590, 648, 750, 754, 760, 762], "month": [151, 152, 166, 218, 245, 325, 341, 345, 351, 428, 429, 430, 431, 432, 434, 435, 436, 517, 518, 554, 584, 585, 590, 648, 730, 750, 754, 760], "1y": [151, 152, 166, 218, 245, 330, 341, 345, 351, 428, 429, 430, 431, 432, 434, 435, 436, 554, 584, 585, 590, 648, 735, 750, 754, 760, 764], "1i": [151, 152, 166, 218, 245, 341, 428, 429, 430, 431, 432, 434, 435, 436, 554, 584, 585, 590, 648, 750], "10i": [151, 152, 245, 584, 585, 648], "ascend": [151, 152, 245, 584, 585, 648], "often": [151, 152, 245, 273, 424, 554, 584, 585, 648, 674], "dynam": [151, 245, 428, 429, 430, 431, 432, 434, 435, 436, 554, 584, 648], "matter": [151, 152, 163, 189, 205, 245, 584, 585, 648], "_lower_bound": [151, 245, 584, 648], "_upper_bound": [151, 245, 584, 648], "impact": [151, 245, 584, 648], "harder": [151, 245, 584, 648], "inclus": [151, 152, 245, 375, 428, 429, 430, 431, 432, 434, 435, 436, 475, 476, 554, 584, 585, 648, 786, 889, 890, 932], "datapoint": [151, 245, 584, 648], "mondai": [151, 245, 353, 584, 648, 762], "date_rang": [151, 218, 245, 320, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 584, 648, 725, 727, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764], "30m": [151, 245, 345, 351, 584, 648, 754, 760], "time_min": [151, 245, 584, 648], "time_max": [151, 245, 584, 648], "23": [151, 152, 245, 321, 328, 345, 518, 584, 585, 648, 726, 733], "boundari": [151, 245, 304, 305, 306, 554, 584, 648, 707, 708, 709, 783, 932], "time_count": [151, 245, 584, 648], "_lower_boundari": [151, 245, 584, 648], "_upper_boundari": [151, 245, 584, 648], "lower_bound": [151, 245, 554, 584, 648, 920, 932], "upper_bound": [151, 245, 293, 554, 584, 648, 810, 932], "time_agg_list": [151, 245, 584, 648], "arang": [151, 216, 227, 245, 584, 632, 648], "2i": [151, 245, 584, 648], "3i": [151, 245, 584, 648], "a_agg_list": [151, 245, 584, 648], "rollinggroupbi": [152, 245], "dynamic_groupbi": [152, 245, 585, 648], "groupby_dynam": [152, 245, 585, 648], "48": [152, 245, 585, 648], "19": [152, 166, 245, 345, 585, 590, 648, 754, 760], "43": [152, 245, 314, 554, 585, 648], "strptime": [152, 245, 348, 585, 648, 757], "2d": [152, 208, 245, 585, 648, 730], "sum_a": [152, 245, 585, 648], "min_a": [152, 245, 585, 648], "max_a": [152, 245, 585, 648], "to_list": [152, 245, 293, 585, 648, 694, 932], "seed": [153, 190, 245, 371, 421, 438, 444, 554, 781, 830, 847, 858, 932], "seed_1": [153, 245, 371, 554, 781, 932], "seed_2": [153, 245, 371, 554, 781, 932], "seed_3": [153, 245, 371, 554, 781, 932], "hash": [153, 245, 554, 932], "u64": [153, 245, 371, 423, 554, 602, 648, 781, 932], "10783150408545073287": [153, 245], "1438741209321515184": [153, 245], "10047419486152048166": [153, 245], "2047317070637311557": [153, 245], "last": [154, 166, 168, 180, 198, 201, 212, 214, 239, 245, 266, 278, 291, 315, 325, 342, 352, 450, 477, 488, 545, 554, 590, 615, 618, 620, 621, 644, 648, 666, 679, 692, 717, 730, 751, 761, 782, 807, 891, 903, 932], "ab": [154, 168, 201, 222, 245, 484, 485, 531, 534, 554, 626, 648, 782, 807, 903, 932], "grown": [156, 245], "baz": [157, 158, 180, 215, 245, 475, 477, 588, 622, 648, 891], "intermedi": [158, 245, 588, 648, 785, 932], "linear": [158, 182, 237, 245, 271, 374, 401, 420, 432, 509, 510, 537, 554, 588, 603, 642, 648, 672, 785, 829, 841, 932], "mask": [159, 161, 245, 272, 296, 297, 376, 378, 386, 455, 457, 554, 673, 696, 697, 776, 786, 788, 791, 802, 825, 826, 850, 869, 871, 924, 932], "visual": [159, 161, 245], "buffer_s": [163, 245], "intern": [163, 245], "veri": [163, 213, 245, 257, 554, 569, 648, 710, 932], "fit": [163, 196, 216, 245, 443, 554, 856, 857, 932], "signific": [163, 245, 257, 554], "4x": [163, 245], "disabl": [163, 245], "materialis": [163, 164, 188, 189, 245], "iter_row": [164, 188, 189, 245], "17_500": [164, 245], "klmnoopqrstuvwxyz": [164, 245], "__name__": [164, 245], "7500": [164, 245], "recordbatch": [164, 245], "15_000": [164, 245], "record_batch": [164, 245], "to_arrow": [164, 245, 932], "to_batch": [164, 245], "date32": [164, 245], "large_str": [164, 203, 209, 245], "15000": [164, 245], "2500": [164, 245], "left_on": [165, 166, 245, 589, 590, 648], "right_on": [165, 166, 245, 589, 590, 648], "joinstrategi": [165, 245, 589, 648], "suffix": [165, 166, 192, 222, 225, 245, 299, 381, 383, 384, 385, 414, 426, 459, 554, 589, 590, 608, 626, 627, 630, 648, 699, 873], "_right": [165, 166, 245, 589, 590, 648], "outer": [165, 245, 589, 648], "semi": [165, 245, 589, 648], "anti": [165, 245, 589, 648, 850, 851, 932], "cross": [165, 245, 589, 648], "join_asof": [165, 245, 589, 648], "stringcach": [165, 245, 564], "other_df": [165, 245], "by_left": [166, 245, 590, 648], "by_right": [166, 245, 590, 648], "asofjoinstrategi": [166, 245, 590, 648], "allow_parallel": [166, 245, 589, 590, 648], "force_parallel": [166, 245, 589, 590, 648], "asof": [166, 245, 590, 648], "asof_join": [166, 245], "search": [166, 245, 590, 648], "greater": [166, 245, 448, 477, 554, 590, 648, 862, 891, 932], "distanc": [166, 245, 590, 648, 783, 932], "gdp": [166, 245, 590, 648], "2016": [166, 245, 590, 648], "2017": [166, 245, 590, 648], "2018": [166, 245, 590, 648], "2019": [166, 245, 590, 648], "record": [166, 245, 590, 648], "jan": [166, 245, 590, 648], "1st": [166, 245, 590, 648], "4164": [166, 245, 590, 648], "4411": [166, 245, 590, 648], "4566": [166, 245, 590, 648], "4696": [166, 245, 590, 648], "popul": [166, 245, 590, 648], "12th": [166, 245, 590, 648], "82": [166, 245, 590, 648], "66": [166, 245, 554, 590, 648, 841, 932], "83": [166, 245, 590, 648], "52": [166, 222, 245, 437, 554, 590, 626, 648], "request": [167, 245], "small": [167, 245, 345, 577, 648], "describe_plan": [167, 245, 648], "unoptim": [167, 245, 648], "describe_optimized_plan": [167, 245, 648], "show_graph": [167, 245, 648], "un": [167, 245], "graphviz": [167, 245, 611, 648], "axi": [169, 170, 172, 174, 200, 245, 598, 648], "null_strategi": [170, 200, 245], "nullstrategi": [170, 200, 245], "spam": [170, 245], "id_var": [172, 245, 598, 648], "value_var": [172, 245, 598, 648], "variable_nam": [172, 245, 598, 648], "value_nam": [172, 245, 598, 648], "unpivot": [172, 245, 598, 648], "leav": [172, 245, 598, 648], "massag": [172, 245, 598, 648], "measur": [172, 245, 598, 648], "merg": [173, 245, 599, 648], "caller": [173, 245, 293, 594, 599, 632, 648], "respons": [173, 245, 599, 648], "One": [176, 180, 245, 932], "what": [176, 245, 914, 923, 932], "pack": [176, 245], "expr_unique_subset": [176, 245], "df_nuniqu": [176, 245], "df_agg_nuniqu": [176, 245], "offer": [179, 245, 416, 554, 601, 648], "recommend": [179, 245], "fulli": [179, 190, 245], "advantag": [179, 245], "cast_str_to_int": [179, 245, 601, 648], "col_nam": [179, 245, 601, 648], "tdf": [179, 245, 601, 648], "aggregate_funct": [180, 245], "pivotagg": [180, 245], "nodefault": [180, 245, 480], "_nodefault": [180, 245, 480], "no_default": [180, 245, 480], "sort_column": [180, 245], "predefin": [180, 245], "predict": [180, 183, 218, 245], "transpos": [180, 245], "discoveri": [180, 245], "interpol": [182, 237, 245, 365, 401, 420, 432, 537, 554, 603, 642, 648, 829, 841, 932], "rollinginterpolationmethod": [182, 237, 245, 420, 432, 537, 554, 603, 642, 648, 829, 841, 932], "midpoint": [182, 237, 245, 420, 432, 537, 554, 603, 642, 648, 829, 841, 932], "old": [184, 245, 605, 648], "new_col": [185, 245], "by_pred": [188, 245], "accord": [188, 245, 398, 554, 736], "never": [188, 245], "mutual": [188, 245], "exclus": [188, 245, 554], "addition": [188, 245], "clariti": [188, 245], "anyth": [188, 245], "toomanyrowsreturn": [188, 245, 564], "norowsreturn": [188, 245, 564], "inherit": [188, 245], "rowsexcept": [188, 245, 564], "frac": [190, 245, 357, 358, 359, 438, 448, 494, 554, 768, 769, 770, 847, 862, 917, 932], "with_replac": [190, 245, 438, 554, 847, 932], "shuffl": [190, 227, 245, 438, 554, 632, 847, 932], "nor": [190, 245], "modul": [190, 245, 438, 444, 553, 554, 847, 858, 932], "more_expr": [192, 222, 245, 414, 505, 507, 509, 510, 531, 534, 540, 543, 554, 608, 626, 648], "named_expr": [192, 222, 245, 540, 543, 608, 626, 648], "threshold": [192, 245, 608, 648], "set_auto_structifi": [192, 222, 245, 608, 626, 648], "is_odd": [192, 245, 608, 648], "_is_odd": [192, 245, 608, 648], "shift_and_fil": [194, 245, 554, 648, 932], "shift": [195, 245, 274, 316, 415, 442, 509, 554, 610, 648, 675, 720, 824, 855, 932], "shrink": [196, 245, 443, 554, 856, 857, 932], "hold": [196, 245], "nulls_last": [198, 212, 245, 266, 450, 554, 615, 620, 648, 666, 932], "ddof": [199, 219, 245, 453, 499, 511, 536, 541, 542, 546, 554, 616, 624, 648, 866, 922, 932], "deviat": [199, 245, 358, 434, 453, 542, 554, 616, 648, 769, 866, 932], "degre": [199, 219, 245, 453, 499, 511, 536, 541, 542, 546, 554, 616, 624, 648, 866, 922, 932], "freedom": [199, 219, 245, 453, 499, 511, 536, 541, 542, 546, 554, 616, 624, 648, 866, 922, 932], "divisor": [199, 219, 245, 453, 499, 511, 536, 541, 542, 546, 554, 616, 624, 648, 866, 922, 932], "816497": [199, 245], "21": [200, 245, 525], "16a": [200, 245], "27b": [200, 245], "38c": [200, 245], "nth": [202, 245, 477, 490, 554, 619, 648, 891, 905, 932], "mostli": [203, 245, 366, 554], "categoricaltyp": [203, 245], "as_seri": [204, 245], "fruit": [204, 245, 418, 426, 459, 478, 486, 554, 873, 892], "car": [204, 245, 418, 426, 486, 554], "beetl": [204, 245, 418, 426, 486, 554], "audi": [204, 245, 418, 426, 486, 554], "28": [204, 245, 354, 763], "300": [204, 245, 837, 838, 840, 932], "instantiat": [207, 245, 912, 932], "from_repr": [207, 245, 912, 932], "df_from_str_repr": [207, 245], "eval": [207, 245, 520, 912, 932], "re": [208, 245], "ll": [208, 245], "numpy_arrai": [208, 245], "use_pyarrow_extension_arrai": [209, 245, 915, 932], "trigger": [209, 245, 915, 932], "sent": [209, 245, 914, 915, 932], "pandas_df1": [209, 245], "pandas_df2": [209, 245], "pandas_df2_pa": [209, 245], "na": [209, 245, 915, 932], "four": [211, 245], "five": [211, 245], "k": [212, 245, 302, 388, 494, 554, 620, 648, 703, 805, 917, 932], "largest": [212, 245, 494, 554, 620, 648, 917, 932], "smallest": [212, 245, 494, 554, 620, 648, 917, 932], "top": [212, 245, 620, 648], "include_head": [213, 245], "header_nam": [213, 245], "column_nam": [213, 245], "perhap": [213, 245], "column_2": [213, 245], "name_gener": [213, 245, 293, 694], "base_nam": [213, 245], "my_column_": [213, 245], "my_column_0": [213, 245], "my_column_1": [213, 245], "my_column_2": [213, 245], "uniquekeepstrategi": [214, 245, 621, 648], "kept": [214, 245, 621, 648], "decompos": [215, 245, 622, 648], "t_a": [215, 245, 622, 648], "t_b": [215, 245, 622, 648], "t_c": [215, 245, 622, 648], "t_d": [215, 245, 622, 648], "womp": [215, 245, 622, 648], "t_": [215, 245, 622, 648], "t_struct": [215, 245, 622, 648], "step": [216, 245, 504], "unstackdirect": [216, 245], "much": [216, 245, 292, 315, 554, 693, 717, 932], "pivot": [216, 245], "phase": [216, 245], "subject": [216, 245], "ascii_uppercas": [216, 245], "col1": [216, 245, 648], "col2": [216, 245, 648], "h": [216, 245, 348, 443, 480, 554, 894], "col1_0": [216, 245], "col1_1": [216, 245], "col1_2": [216, 245], "col2_0": [216, 245], "col2_1": [216, 245], "col2_2": [216, 245], "syntact": [217, 245, 516, 521, 522, 526, 537, 540, 544, 623, 648, 865, 932], "sugar": [217, 245, 516, 521, 522, 526, 537, 540, 544, 623, 648, 865, 932], "coalesc": [217, 245, 623, 648], "400": [217, 245, 623, 648, 837, 838, 840, 932], "600": [217, 245, 623, 648], "700": [217, 245, 623, 648], "new_df": [217, 245, 623, 648], "time_column": [218, 245], "frequenc": [218, 245], "forward_fil": [218, 245, 311, 314, 554], "06": [218, 245, 321, 331, 343, 344, 355, 754, 762], "varianc": [219, 245, 359, 388, 436, 499, 546, 554, 624, 648, 770, 805, 845, 922, 932], "grow": [220, 245], "is_not": [222, 245, 554, 626, 648], "not_c": [222, 245, 626, 648], "diff": [222, 245, 326, 329, 333, 335, 337, 340, 347, 554, 626, 648, 731, 734, 741, 743, 746, 749, 756, 932], "_diff": [222, 245, 626, 648], "row_nr": [223, 245, 398, 554, 628, 648, 851, 932], "more_agg": [225, 630], "named_agg": [225, 630], "_sum": [225, 630], "_mean_squar": [225, 630], "b_sum": [225, 630], "c_mean_squar": [225, 630], "17": [225, 437, 480, 525, 554, 630, 711, 754, 932], "sub": [227, 299, 300, 459, 478, 554, 699, 700, 873, 892], "triangl": [227, 632], "group_df": [227, 632], "nr": [230, 239, 635, 644], "maxim": [232, 264, 554, 637, 664, 932], "833333": [233, 638], "minim": [235, 265, 270, 443, 451, 554, 640, 665, 671, 815, 856, 932], "overview": [245, 554, 564, 648, 932], "public": [245, 554, 564, 648, 932], "frameinittyp": [245, 648], "variou": [245, 554, 648, 932], "entri": [245, 648], "prevent": [245, 313, 314, 387, 487, 554, 648, 715, 716, 902, 932], "come": [245, 388, 554, 565, 647, 648, 805, 932], "behavior": [245, 257, 292, 503, 554, 693], "mydatafram": 245, "notic": [245, 648, 932], "df4": 245, "df5": 245, "df6": 245, "corr": [245, 536, 541], "drop_in_plac": 245, "drop_nul": [245, 318, 554, 648, 932], "estimated_s": [245, 932], "explod": [245, 368, 425, 554, 648, 834, 932], "find_idx_by_nam": 245, "fold": [245, 405, 507, 514, 515, 538, 544], "frame_equ": [245, 345, 351], "get_column": [245, 544], "groupby_rol": [245, 428, 429, 430, 431, 432, 434, 435, 436, 554, 584, 648], "hash_row": 245, "hstack": 245, "insert_at_idx": 245, "is_dupl": [245, 554, 932], "is_empti": [245, 932], "is_uniqu": [245, 554, 932], "iter_slic": 245, "melt": [245, 648], "merge_sort": [245, 648], "n_uniqu": [245, 554, 932], "pipe": [245, 554, 648], "quantil": [245, 432, 554, 648, 828, 841, 932], "replace_at_idx": 245, "shrink_to_fit": [245, 932], "take_everi": [245, 554, 648, 932], "to_dict": 245, "to_numpi": [245, 396, 554, 932], "to_panda": [245, 932], "to_struct": 245, "top_k": [245, 554, 648, 932], "unnest": [245, 476, 477, 485, 648, 890, 891], "unstack": 245, "updat": [245, 648], "upsampl": 245, "write_avro": 245, "write_databas": 245, "write_excel": 245, "write_json": [245, 604, 648], "write_parquet": 245, "94": [252, 554], "confus": [254, 381, 383, 554], "tt": [254, 554], "tf": [254, 255, 554], "ff": [254, 255, 554], "upcast": [256, 554], "skip_nul": [257, 554, 657, 932], "pass_nam": [257, 554], "applystrategi": [257, 554], "thread_loc": [257, 554], "assum": [257, 554, 594, 632, 648], "code": [257, 440, 554, 592, 648, 852, 932], "amount": [257, 554], "releas": [257, 554], "gil": [257, 554], "discourag": [257, 554], "loop": [257, 554], "a_times_2": [257, 554], "invers": [258, 259, 260, 261, 262, 263, 554, 658, 659, 660, 661, 662, 663, 932], "cosin": [258, 259, 307, 308, 396, 554, 658, 659, 711, 712, 932], "570796": [258, 260, 554, 658, 660, 932], "hyperbol": [259, 261, 263, 308, 447, 492, 554, 659, 661, 663, 712, 861, 907, 932], "sine": [260, 261, 396, 446, 447, 554, 660, 661, 860, 861, 932], "881374": [261, 554, 661, 932], "tangent": [262, 263, 491, 492, 554, 662, 663, 906, 907, 932], "785398": [262, 554, 662, 932], "arg_wher": [267, 554], "sublist": [269, 270, 272, 274, 277, 278, 279, 280, 281, 288, 291, 292, 670, 671, 673, 675, 678, 679, 680, 681, 682, 689, 692, 693, 694, 793, 932], "membership": [272, 673], "listcol": 273, "number_of_two": 273, "null_behavior": [274, 316, 554, 675, 720, 932], "nullbehavior": [274, 316, 554, 675, 720, 932], "th": [274, 316, 448, 554, 675, 720, 862, 932], "against": [275, 648, 676, 939], "blindli": [275, 676], "worth": [275, 676], "enough": [275, 448, 554, 676, 862, 932], "concat_list": [275, 520, 676], "rank": [275, 511, 520, 541, 554, 676, 932], "exprnamespac": 276, "reshap": [276, 554, 677, 932], "flat": [276, 425, 554, 677, 834, 932], "taken": [288, 474, 489, 554, 689, 888], "null_on_oob": [292, 693], "cheaper": [292, 693], "n_field_strategi": [293, 694], "tostructstrategi": [293, 694], "first_non_nul": [293, 694], "max_width": [293, 694], "field_0": [293, 694], "field_1": [293, 694], "field_n": [293, 694], "know": [293, 468, 882, 914, 923, 932], "incorrectli": 293, "downstream": [293, 440, 554, 852, 932], "col_name_": [293, 694], "col_name_0": [293, 694], "col_name_1": [293, 694], "col_name_2": [293, 694], "maintain": [294, 439, 495, 554, 612, 613, 648, 695, 848, 918, 932], "substr": [296, 299, 300, 455, 459, 470, 471, 475, 476, 477, 478, 696, 699, 700, 869, 873, 884, 885, 889, 890, 891, 892], "transferencod": [297, 298, 457, 458, 697, 698, 871, 872], "strict": [297, 301, 455, 457, 469, 480, 554, 697, 701, 849, 869, 871, 883, 894, 932], "hex": [297, 298, 457, 458, 469, 697, 698, 871, 872, 883], "base64": [297, 298, 457, 458, 697, 698, 871, 872], "prefix": [300, 478, 483, 554, 700, 892, 897], "due": [301, 554, 701, 932], "overflow": [301, 313, 314, 469, 487, 554, 701, 715, 716, 883, 902, 932], "categoricalord": [302, 703], "lexic": [302, 703], "min_val": [304, 306, 554, 707, 709, 932], "max_val": [304, 305, 554, 707, 708, 932], "foo_clip": [304, 305, 306, 554], "clip": [305, 306, 554, 708, 709, 932], "543081": [308, 554, 712, 932], "cumul": [310, 311, 312, 313, 314, 514, 515, 516, 554, 713, 714, 715, 716, 932], "a_revers": [310, 311, 312, 313, 314, 397, 426, 486, 554], "value_cummax": [311, 554], "value_cummax_all_fil": [311, 554], "value_cumsum": [314, 554], "value_cumsum_all_fil": [314, 554], "min_period": [315, 357, 358, 359, 427, 428, 429, 430, 431, 432, 434, 435, 436, 554, 717, 768, 769, 770, 836, 837, 838, 839, 840, 841, 843, 844, 845, 932], "slide": [315, 554, 717, 932], "realli": [315, 554, 717, 932], "complex": [315, 494, 554, 717, 917, 932], "visit": [315, 554, 717, 932], "44": [317, 554], "drop_nan": [319, 554, 932], "tu": [320, 321, 327, 350, 354, 725, 726, 732, 753, 759, 763], "lose": [320, 725], "2001": [320, 325, 327, 328, 330, 331, 336, 338, 341, 342, 343, 345, 346, 350, 351, 352, 353, 354, 355, 480, 725, 730, 732, 733, 735, 737, 738, 739, 740, 742, 744, 745, 747, 748, 750, 751, 752, 754, 755, 757, 759, 760, 761, 762, 763, 764, 894], "tu_m": [320, 725], "tu_n": [320, 725], "tm": [321, 726], "compon": [321, 346, 480, 519, 726, 755], "resolv": 321, "456000": [321, 726], "101000": 321, "456": [321, 726, 911, 932], "101": [321, 469, 883], "d1": 321, "d2": 321, "d3": 321, "utc": [322, 344, 480, 727, 753, 894], "europ": [322, 344, 727, 753], "london": [322, 344, 727, 753], "gmt": [322, 344, 727, 753], "bst": [322, 344, 727, 753], "weekdai": [325, 342], "day_of_month": [325, 342, 353], "ordinal_dai": [325, 353], "day_of_year": [325, 342, 353], "days_diff": 326, "epochtimeunit": [327, 525, 732], "unix": [327, 525, 732], "epoch_n": [327, 732], "epoch_": [327, 732], "978307200000000": [327, 350, 732, 759], "978307200": [327, 732], "978393600000000": [327, 350, 732, 759], "978393600": [327, 732], "978480000000000": [327, 350, 732, 759], "978480000": [327, 732], "hours_diff": 329, "leap": [330, 341, 735, 750], "2000": [330, 332, 341, 735, 750], "2002": [330, 331, 341, 343, 355, 735, 750, 764], "iso": [331, 352, 353, 736, 761, 762], "correspond": [331, 421, 554, 736, 830, 932], "2006": [331, 341, 750], "180": [331, 343, 355], "2004": [331, 341, 750], "2005": [331, 341, 750], "1_001": [332, 333, 335, 340], "002": [332, 333, 335, 340, 519, 741, 743, 749], "003": [332, 333, 335, 340], "3000": 332, "997": [332, 333, 335, 340], "997000": 332, "998": [332, 333, 335, 340], "998000": 332, "999": [332, 333, 335, 340], "999000": 332, "microseconds_diff": 333, "milliseconds_diff": 335, "minutes_diff": 337, "1440": [337, 746], "nanoseconds_diff": 340, "1000000": [340, 483, 749], "minu": [341, 750], "dictat": [341, 750], "date_plus_1i": [341, 750], "1y2mo": [341, 750], "date_min": 341, "1998": [341, 750], "1999": [341, 750], "2003": [341, 525, 750], "ordin": [342, 421, 554, 751, 830, 932], "366": [342, 751], "convert_time_zon": [344, 753], "unset": [344, 753], "london_timezon": 344, "amsterdam": 344, "london_to_amsterdam": 344, "cet": 344, "cest": 344, "half": [345, 357, 358, 359, 554, 754, 768, 769, 770, 932], "225": [345, 351], "to_fram": [345, 351, 480, 850, 851, 890, 891, 894, 932], "10m": [345, 351, 754, 760], "milli": [346, 755], "micro": [346, 755], "456789": 346, "654321": 346, "111110": 346, "765431": 346, "sec": 346, "11111": 346, "seconds_diff": 347, "timestamp_n": [350, 759], "timestamp_m": 350, "978307200000": 350, "978393600000": 350, "978480000000": 350, "53": [352, 761], "sundai": [353, 762], "incorrect": [354, 440, 554, 632, 763, 852, 932], "tu_u": [354, 763], "32971": [354, 763], "32974": [354, 763], "32976": [354, 763], "718281828459045": [356, 393, 554, 766, 808, 932], "pk": [356, 554, 766, 932], "459148": [356, 554], "754888": [356, 554], "span": [357, 358, 359, 554, 768, 769, 770, 932], "half_lif": [357, 358, 359, 554, 768, 769, 770, 932], "adjust": [357, 358, 359, 448, 554, 768, 769, 770, 862, 932], "ignore_nul": [357, 358, 359, 554, 768, 769, 770, 923, 932], "exponenti": [357, 358, 359, 361, 417, 554, 768, 769, 770, 771, 932], "weight": [357, 358, 359, 427, 428, 429, 430, 431, 432, 434, 435, 436, 448, 554, 768, 769, 770, 836, 837, 838, 839, 840, 841, 843, 844, 845, 862, 932], "decai": [357, 358, 359, 554, 768, 769, 770, 932], "term": [357, 358, 359, 465, 468, 554, 768, 769, 770, 879, 882, 932], "mass": [357, 358, 359, 554, 768, 769, 770, 932], "gamma": [357, 358, 359, 554, 768, 769, 770, 932], "foral": [357, 358, 359, 554, 768, 769, 770, 932], "geq": [357, 358, 359, 554, 768, 769, 770, 932], "theta": [357, 358, 359, 554, 768, 769, 770, 932], "life": [357, 358, 359, 554, 768, 769, 770, 932], "exp": [357, 358, 359, 554, 768, 769, 770, 932], "ln": [357, 358, 359, 554, 768, 769, 770, 932], "smooth": [357, 358, 359, 554, 768, 769, 770, 932], "factor": [357, 358, 359, 493, 554, 768, 769, 770, 916, 932], "leq": [357, 358, 359, 554, 768, 769, 770, 932], "begin": [357, 358, 359, 461, 554, 768, 769, 770, 875, 932], "imbal": [357, 358, 359, 554, 768, 769, 770, 932], "ew": [357, 358, 359, 554, 768, 769, 770, 932], "w_i": [357, 358, 359, 554, 768, 769, 770, 932], "recurs": [357, 358, 359, 554, 768, 769, 770, 932], "y_0": [357, 358, 359, 554, 768, 769, 770, 932], "x_0": [357, 358, 359, 554, 768, 769, 770, 932], "y_t": [357, 358, 359, 554, 768, 769, 770, 932], "y_": [357, 358, 359, 554, 768, 769, 770, 932], "x_t": [357, 358, 359, 554, 768, 769, 770, 932], "observ": [357, 358, 359, 554, 768, 769, 770, 932], "x_2": [357, 358, 359, 554, 768, 769, 770, 932], "428571": [357, 554], "bia": [358, 359, 388, 433, 448, 554, 769, 770, 805, 842, 862, 932], "unbias": [358, 359, 554, 769, 770, 932], "963624": [358, 554, 769, 932], "928571": [359, 554, 770, 932], "wildcard": [360, 501, 508, 514, 515, 523, 538, 554], "regex": [360, 403, 455, 456, 459, 461, 462, 470, 471, 478, 521, 531, 534, 544, 554, 869, 870, 873, 875, 876, 884, 885, 892], "aa": [360, 521, 554], "ba": [360, 521, 554], "cc": [360, 521, 554], "718282": [361, 554], "389056": [361, 554], "54": [361, 554], "59815": [361, 554], "expand": [362, 402, 403, 424, 554, 772, 932], "favour": [362, 554, 772, 932], "arr": [362, 520, 554, 555, 772, 914, 932, 933], "exprlistnamespac": [362, 368, 425, 554], "exprstringnamespac": [362, 554], "pythonliter": [363, 531, 534, 554, 626, 648, 773, 812, 815, 932], "extrem": [363, 554, 773, 932], "group_col": [366, 500, 554], "g1": [366, 500, 554], "g2": [366, 500, 554], "lt": [366, 500, 554, 932], "gte": [366, 500, 554], "9774092659964970114": [371, 554], "13614470193936745724": [371, 554], "1101441246220388612": [371, 554], "11638928888656214026": [371, 554], "13382926553367784577": [371, 554], "cumsum": [373, 554, 587, 648, 932], "interpolationmethod": [374, 554, 785, 932], "regrid": [374, 554], "grid": [374, 554], "df_original_grid": [374, 554], "grid_point": [374, 554], "df_new_grid": [374, 554], "conflat": [375, 554], "finit": [377, 511, 541, 554, 790, 932], "primit": [379, 554, 914, 932], "optional_memb": [379, 554, 793, 932], "infinit": [380, 554, 794, 932], "_isnan": [381, 554], "b_isnan": [381, 554], "negat": [382, 554], "_is_not_nan": [383, 554], "b_is_not_nan": [383, 554], "_not_nul": [384, 554], "a_not_nul": [384, 554], "b_not_nul": [384, 554], "_isnul": [385, 554], "a_isnul": [385, 554], "b_isnul": [385, 554], "undo": [387, 407, 554], "duplicateerror": [387, 554, 564], "occurr": [387, 554, 783, 932], "333333": [387, 436, 554, 824, 845, 932], "fisher": [388, 448, 554, 805, 862, 932], "fourth": [388, 554, 805, 932], "subtract": [388, 554, 805, 932], "distribut": [388, 448, 554, 805, 862, 932], "elimin": [388, 554, 805, 932], "bias": [388, 448, 554, 805, 862, 932], "scipi": [388, 448, 554, 805, 862, 932], "stat": [388, 448, 554, 805, 862, 932], "153061": [388, 554], "logarithm": [393, 394, 554, 808, 809, 932], "584963": [393, 554], "30103": [394, 554], "60206": [394, 554], "lowest": [395, 554], "9223372036854775808": [395, 554], "agg_list": [396, 554], "elementwis": [396, 427, 428, 429, 430, 431, 432, 434, 435, 436, 501, 502, 554, 836, 837, 838, 839, 840, 841, 843, 844, 845, 932], "third": [396, 554], "parti": [396, 554], "book": [396, 554], "argmax": [396, 554], "_revers": [397, 426, 486, 554], "b_revers": [397, 426, 486, 554], "remap": [398, 554, 811, 932], "lookup": [398, 554, 811, 932], "country_code_dict": [398, 554], "ca": [398, 554], "canada": [398, 554], "de": [398, 554], "germani": [398, 554], "fr": [398, 554], "franc": [398, 554], "country_cod": [398, 554], "unknown": [398, 529, 554], "rest": [398, 554], "computeerror": [404, 469, 564, 883], "keep_nam": [407, 554], "poison": [411, 412, 554, 820, 821, 932], "nanmax": [411, 412, 554, 820, 821, 932], "wherea": [411, 412, 554, 586, 593, 648, 820, 821, 932], "outcom": [414, 554], "_max": [414, 554], "c_max": [414, 554], "_min": [414, 554], "c_min": [414, 554], "recent": [415, 554, 824, 932], "percent": [415, 554, 824, 932], "090909": [415, 554], "extract_numb": [416, 554], "r": [416, 456, 460, 461, 462, 470, 554, 870, 874, 875, 876, 884], "expon": [417, 554, 932], "reverse_": [418, 554], "reverse_a": [418, 554], "reverse_fruit": [418, 554], "reverse_b": [418, 554], "reverse_car": [418, 554], "rankmethod": [421, 554, 830, 932], "ti": [421, 554, 830, 932], "competit": [421, 554, 830, 932], "highest": [421, 497, 511, 541, 554, 648, 830, 932], "safe": [423, 480, 554, 832, 914, 932], "coerc": [424, 554], "dim": [425, 554, 834, 932], "fruits_revers": [426, 486, 554], "cars_revers": [426, 486, 554], "window_s": [427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 554, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 932], "rolling_min": [427, 554, 836, 932], "rolling_max": [427, 554, 836, 932], "rolling_mean": [427, 554, 836, 932], "rolling_sum": [427, 554, 836, 932], "multipli": [427, 428, 429, 430, 431, 432, 434, 435, 436, 554, 836, 837, 838, 839, 840, 841, 843, 844, 845, 932], "358899": [427, 554], "041452": [427, 554], "567764": [427, 554], "travers": [428, 429, 431, 434, 435, 436, 554, 837, 838, 840, 843, 844, 845, 932], "vector": [428, 429, 431, 434, 435, 436, 554, 837, 838, 840, 843, 844, 845, 932], "5h": [428, 429, 430, 431, 432, 434, 435, 436, 554], "33": [432, 437, 508, 554, 841, 932], "skew": [433, 554, 842, 932], "527525": [434, 554, 843, 932], "digit": [437, 483, 554, 846, 870, 897, 932], "searchsortedsid": [439, 554, 848, 932], "leftmost": [439, 554, 848, 932], "rightmost": [439, 554, 848, 932], "six": [439, 554], "extrema": [443, 554, 856, 932], "112": [443, 554], "129": [443, 554], "i8": [443, 554, 720, 835, 920, 932], "8589934592": [443, 554], "1073741824": [443, 554], "content": [444, 498, 554, 858, 932], "175201": [447, 554, 861, 932], "about": [448, 554, 862, 932], "unimod": [448, 554, 862, 932], "skewtest": [448, 554, 862, 932], "speak": [448, 554, 862, 932], "g_1": [448, 554, 862, 932], "m_3": [448, 554, 862, 932], "m_2": [448, 554, 862, 932], "m_i": [448, 554, 862, 932], "sum_": [448, 554, 862, 932], "texttt": [448, 554, 862, 932], "k_3": [448, 554, 862, 932], "k_2": [448, 554, 862, 932], "sqrt": [448, 554, 862, 932], "343622": [448, 554], "value1": [451, 554], "value2": [451, 554], "attain": [451, 554], "414214": [452, 554, 865, 932], "ends_with": [455, 478, 892], "crab": [455, 869], "dog": [455, 481, 482, 510, 869], "rab": [455, 869], "success": [456, 462, 870, 876], "overlap": [456, 462, 870, 876], "captur": [456, 461, 462, 870, 875, 876], "123": [456, 462, 471, 870, 876, 885, 911, 932], "bla": [456, 462, 870, 876], "asd": [456, 462, 870, 876], "678": [456, 462, 870, 876], "910t": [456, 462, 870, 876], "count_digit": 456, "666f6f": [458, 872], "626172": [458, 872], "mango": [459, 478, 873, 892], "go": [459, 873], "has_suffix": 459, "group_index": [461, 875], "vote": [461, 875], "ballon_dor": [461, 875], "candid": [461, 875], "messi": [461, 875], "ref": [461, 875], "candidat": [461, 875], "jorginho": [461, 875], "ronaldo": [461, 875], "extracted_nr": 462, "910": [462, 876], "json_path_match": [463, 877], "jsonpath": [463, 464, 877, 878], "json_path": [464, 878], "regardless": [464, 878], "json_val": [464, 878], "n_char": [465, 879], "caf\u00e9": [465, 468, 879, 882], "345": [465, 468, 879, 882], "\u6771\u4eac": [465, 468, 879, 882], "nchar": [465, 468], "fillchar": [466, 472, 880, 886], "justifi": [466, 472, 880, 886], "pad": [466, 472, 483, 880, 886, 897], "cow": [466, 472, 880, 886], "monkei": [466, 472, 880, 886], "hippopotamu": [466, 472, 880, 886], "strip": [467, 473, 881, 887], "tworld": [467, 479, 881, 893], "wod": [467, 473, 881, 887], "rld": [467, 881], "text": [468, 470, 471, 882], "radix": [469, 883], "parseerror": [469, 883], "becom": [469, 883], "silent": [469, 883], "110": [469, 883], "010": [469, 883], "fa1e": [469, 883], "ff00": [469, 883], "cafe": [469, 883], "64030": [469, 883], "65280": [469, 883], "51966": [469, 883], "replace_al": [470, 884], "123abc": [470, 884], "abc456": [470, 884], "abcabc": [471, 885], "123a123": [471, 885], "bc": [471, 544, 885], "trail": [473, 479, 887, 893], "worl": [473, 479, 887, 893], "subslic": [474, 888], "pear": [474, 888], "papaya": [474, 888], "dragonfruit": [474, 888], "s_slice": 474, "ear": [474, 888], "aya": [474, 888], "uit": [474, 888], "ya": [474, 888], "onf": [474, 888], "a_1": [476, 890, 910, 932], "d_4": [476, 890], "rename_field": [476, 477, 890, 891], "first_part": [476, 477, 890, 891], "second_part": [476, 477, 890, 891], "remaind": [477, 891], "app": [478, 892], "has_prefix": 478, "polarstemporaltyp": [480, 894], "tz_awar": [480, 894], "strftime": [480, 894], "anywher": [480, 894], "futur": 480, "3f": 480, "00z": [480, 894], "sun": [480, 894], "jul": [480, 894], "34": [480, 894], "lowercas": [481, 895], "variant": [481, 482], "uppercas": [482, 896], "100000": 483, "0010": 483, "0001": 483, "00000": 483, "00001": 483, "cd": [484, 485], "struct_col": [484, 485], "www": 485, "xxx": 485, "yyi": 485, "zzz": 485, "obvious": 485, "structfieldnotfounderror": [485, 564], "761594": [492, 554, 907, 932], "replic": [493, 554, 916, 932], "vals_phys": [493, 554], "bottom_k": [494, 554], "value_count": [496, 554, 932], "9223372036854775807": [497, 554], "multithread": [498, 554], "columnwis": [501, 502], "AND": 501, "bitwis": [501, 502], "returns_scalar": 503, "product_a": 503, "49": 503, "Be": 504, "more_nam": 508, "hamburg": 508, "lag": 509, "mimic": 509, "a_lag_": 509, "a_rol": 509, "plai": 510, "swim": 510, "walk": 510, "full_sent": 510, "correlationmethod": 511, "propagate_nan": [511, 541], "spearman": [511, 541], "larger": [511, 541, 612, 613, 648], "544705": [511, 536], "covari": 513, "acc": [514, 515, 523, 538], "include_init": 514, "accumul": [514, 515, 523, 538], "fn": [514, 515, 523, 538], "new_valu": [514, 515, 523, 538], "cumreduc": 514, "cumfold": 516, "999999": 518, "add_week": 519, "add_dai": 519, "add_second": 519, "add_millisecond": 519, "add_hour": 519, "add_millisec": 519, "ond": 519, "mathemat": [520, 554], "a_b_doubl": 520, "fstring": 524, "placehold": 524, "hello_": 524, "_world": 524, "foo_": 524, "_bar_": 524, "foo_a_bar_1": 524, "foo_b_bar_2": 524, "foo_c_bar_3": 524, "epoch": [525, 753], "timestep": 525, "1666683077": 525, "1666683099": 525, "39": 525, "12345": [525, 704, 778, 846, 932], "12346": 525, "agg_group": [526, 554], "allow_object": 529, "valueexcept": 529, "test_func": 530, "selector": [531, 534, 544], "favor": [536, 541], "605551": 542, "605551275463989": 542, "my_struct": 543, "q": 543, "statement": 547, "chain": 547, "isn": 547, "thens": 547, "elif": 547, "pick": 547, "sometim": 553, "ghi": 554, "and_": 554, "arcco": [554, 932], "arccosh": [554, 932], "arcsin": [554, 932], "arcsinh": [554, 932], "arctan": [554, 932], "arctanh": [554, 932], "arg_max": [554, 932], "arg_min": [554, 932], "arg_sort": [554, 932], "arg_uniqu": [554, 932], "backward_fil": 554, "clip_max": [554, 932], "clip_min": [554, 932], "co": [554, 932], "cosh": [554, 932], "cumcount": 554, "cummax": [554, 932], "cummin": [554, 932], "cumprod": [554, 932], "cumulative_ev": [554, 932], "entropi": [554, 932], "eq": [554, 932], "ewm_mean": [554, 932], "ewm_std": [554, 932], "ewm_var": [554, 932], "extend_const": [554, 932], "flatten": 554, "floordiv": 554, "divis": 554, "truediv": 554, "ge": [554, 932], "gt": [554, 932], "inspect": [554, 648], "is_between": [554, 932], "is_finit": [554, 932], "is_first": [554, 932], "is_in": [554, 932], "is_infinit": [554, 932], "is_nan": [554, 932], "is_not_nan": [554, 932], "is_not_nul": [554, 932], "kurtosi": [554, 932], "le": [554, 932], "log10": [554, 932], "map_alia": 554, "map_dict": [554, 932], "mod": 554, "modulu": 554, "mul": 554, "nan_max": [554, 932], "nan_min": [554, 932], "ne": [554, 932], "inequ": 554, "or_": 554, "pct_chang": [554, 932], "pow": [554, 932], "reinterpret": [554, 932], "repeat_bi": 554, "rolling_appli": [554, 932], "rolling_median": [554, 932], "rolling_quantil": [554, 932], "rolling_skew": [554, 932], "rolling_std": [554, 932], "rolling_var": [554, 932], "search_sort": [554, 932], "set_sort": [554, 932], "shrink_dtyp": [554, 932], "sin": [554, 932], "sinh": [554, 932], "sort_bi": 554, "tan": [554, 932], "tanh": [554, 932], "to_phys": [554, 932], "behaviour": 554, "ieee": 554, "754": 554, "undefin": 554, "On": 554, "operand": 554, "infin": 554, "unique_count": [554, 932], "xor": 554, "binary_str": 554, "zfill": 554, "250": [554, 838, 932], "bin_x": 554, "bin_i": 554, "00001010": 554, "00000001": 554, "00001000": 554, "00000010": 554, "11111010": 554, "00000011": 554, "249": 554, "01000010": 554, "00000100": 554, "70": 554, "expos": 564, "registr": 564, "miscellan": 564, "arrowerror": 564, "columnnotfounderror": 564, "invalidoperationerror": 564, "nodataerror": 564, "panicexcept": 564, "schemaerror": 564, "schemafieldnotfounderror": 564, "shapeerror": 564, "build_info": 564, "get_index_typ": 564, "show_vers": 564, "threadpool_s": 564, "sqlcontext": [564, 939], "hit": [567, 648], "node": [567, 587, 594, 598, 602, 605, 648], "huge": [570, 648], "saver": [570, 648], "purpos": [577, 648], "influenc": [577, 594, 648], "read_json": [582, 629, 648], "lazygroupbi": [583, 584, 585, 648], "other_lf": [589, 648], "validate_output_schema": [594, 648], "streamabl": [594, 598, 648], "past": [594, 648], "paramount": [594, 648], "bug": [594, 632, 648], "elig": [594, 648], "invari": [594, 648], "upheld": [594, 648], "prune": [594, 648], "show_plot": [602, 648], "truncate_nod": [602, 648], "figsiz": [602, 611, 648], "gantt": [602, 648], "plot": [602, 611, 648], "groupby_partit": [602, 648], "470": [602, 648], "475": [602, 648], "1964": [602, 648], "from_json": [604, 648], "swap": [605, 648], "output_path": [611, 648], "raw_output": [611, 648], "figur": [611, 648], "persist": [612, 613, 648], "ram": [612, 613, 648], "slightli": [612, 613, 648], "my_larger_than_ram_fil": [612, 613, 648], "data_pagesize_limit": [613, 648], "290994": [616, 648], "118034": [616, 648], "433013": [616, 648], "1875": [624, 648], "polarsexprtyp": [626, 648], "extern": [627, 648], "lf_other": [627, 648], "afoo": [627, 648], "cfoo": [627, 648], "train_lf": [627, 648], "feature_0": [627, 648], "feature_1": [627, 648], "test_lf": [627, 648], "_train": [627, 648], "feature_0_train": [627, 648], "dataframescan": [629, 648], "output_schema": [629, 648], "initialis": 648, "lf2": 648, "lf3": 648, "lf4": 648, "lf5": 648, "lf6": 648, "explain": 648, "profil": 648, "sink_ipc": 648, "sink_parquet": 648, "with_context": 648, "sr": [653, 932], "new_aliased_sr": [653, 932], "append_chunk": [656, 932], "super": [656, 932], "141593": [658, 932], "292432": [659, 932], "549306": [663, 932], "listnamespac": [669, 772, 834, 932], "catnamespac": 702, "56789": [704, 778, 846, 932], "901234": [704, 778, 846, 932], "pi": [711, 860, 906, 932], "1232e": [711, 932], "quick": [719, 932], "series_num": [719, 932], "581139": [719, 932], "series_str": [719, 932], "datetimenamespac": 724, "ser": [728, 729, 758], "replace_time_zon": [728, 729, 758], "kathmandu": [728, 729, 758], "0545": [728, 729, 758], "500m": [740, 742, 748, 755], "500000": 740, "2m": 745, "500000000": 748, "date_minus_1y_2mon": 750, "1583020800": 753, "1585699200": 753, "1588291200": 753, "nyc": 753, "edt": 753, "1583038800": 753, "1585717200": 753, "1588309200": 753, "165": [754, 760], "series_equ": [754, 760, 932], "timestamp_u": 759, "978307200000000000": 759, "978393600000000000": 759, "978480000000000000": 759, "005": [766, 932], "06293300616044681": [766, 932], "65": [766, 932], "8568409950394724": [766, 932], "4000000": [767, 932], "814697265625": [767, 932], "stringnamespac": [772, 867, 932], "bitmask": [780, 932], "swiftli": [780, 932], "10734580197236529959": [781, 932], "3022416320763508302": [781, 932], "13756996518000038261": [781, 932], "bin_count": [783, 932], "a_count": [783, 932], "fall": [786, 932], "2147483648": [810, 932], "iso3166": [811, 932], "tur": [811, 932], "jpn": [811, 932], "nld": [811, 932], "country_lookup": [811, 932], "japan": [811, 932], "t\u00fcrkiy": [811, 932], "netherland": [811, 932], "unrecognis": [811, 932], "unspecifi": [811, 932], "country_nam": [811, 932], "166667": [824, 932], "142857": [824, 932], "512": [824, 932], "peak": [825, 826, 932], "quanil": [828, 932], "nanstd": [836, 932], "858612": [836, 932], "200": [837, 838, 840, 932], "150": [838, 932], "350": [838, 932], "450": [838, 932], "381802": [842, 932], "dev": [843, 932], "57": [846, 932], "frequent": [850, 851, 932], "mutat": [851, 932], "2246e": [860, 906, 932], "6331e16": [906, 932], "lib": [909, 932], "int64arrai": [909, 932], "a_2": [910, 932], "a_3": [910, 932], "s_from_str_repr": [912, 932], "zero_copy_onli": [914, 932], "writabl": [914, 932], "complet": [914, 932], "view": [914, 932], "presenc": [914, 932], "immut": [914, 932], "127": [920, 932], "seriesview": [923, 932], "arraylik": 932, "dtype_if_empti": 932, "position": 932, "scenario": 932, "through": 932, "chunk_length": 932, "cut": 932, "get_chunk": 932, "has_valid": 932, "hist": 932, "is_boolean": 932, "is_float": 932, "is_numer": 932, "is_sort": 932, "is_tempor": 932, "is_utf8": 932, "new_from_index": 932, "peak_max": 932, "peak_min": 932, "power": 932, "qcut": 932, "set_at_idx": 932}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [34, 0, 1, "", "DataType"], [35, 0, 1, "", "Date"], [36, 0, 1, "", "Datetime"], [37, 0, 1, "", "Decimal"], [38, 0, 1, "", "Duration"], [39, 0, 1, "", "Float32"], [40, 0, 1, "", "Float64"], [41, 0, 1, "", "Int16"], [42, 0, 1, "", "Int32"], [43, 0, 1, "", "Int64"], [44, 0, 1, "", "Int8"], [45, 0, 1, "", "List"], [46, 0, 1, "", "Null"], [47, 0, 1, "", "Object"], [939, 0, 1, "", "SQLContext"], [51, 0, 1, "", "StringCache"], [52, 0, 1, "", "Struct"], [53, 0, 1, "", "Time"], [54, 0, 1, "", "UInt16"], [55, 0, 1, "", "UInt32"], [56, 0, 1, "", "UInt64"], [57, 0, 1, "", "UInt8"], [58, 0, 1, "", "Unknown"], [59, 0, 1, "", "Utf8"], [60, 4, 1, "", "align_frames"], [501, 4, 1, "", "all"], [502, 4, 1, "", "any"], [503, 4, 1, "", "apply"], [504, 4, 1, "", "arange"], [505, 4, 1, "", "arg_sort_by"], [65, 4, 1, "", "arg_where"], [506, 4, 1, "", "avg"], [66, 4, 1, "", "build_info"], [507, 4, 1, "", "coalesce"], [508, 4, 1, "", "col"], [67, 4, 1, "", "collect_all"], [68, 4, 1, "", "concat"], [509, 4, 1, "", "concat_list"], [510, 4, 1, "", "concat_str"], [511, 4, 1, "", "corr"], [512, 4, 1, "", "count"], [513, 4, 1, "", "cov"], [514, 4, 1, "", "cumfold"], [515, 4, 1, "", "cumreduce"], [516, 4, 1, "", "cumsum"], [69, 4, 1, "", "cut"], [517, 4, 1, "", "date"], [70, 4, 1, "", "date_range"], [518, 4, 1, "", "datetime"], [519, 4, 1, "", "duration"], [520, 4, 1, "", "element"], [521, 4, 1, "", "exclude"], [522, 4, 1, "", "first"], [523, 4, 1, "", "fold"], [524, 4, 1, "", "format"], [85, 4, 1, "", "from_arrow"], [86, 4, 1, "", "from_dataframe"], [87, 4, 1, "", "from_dict"], [88, 4, 1, "", "from_dicts"], [525, 4, 1, "", "from_epoch"], [89, 4, 1, "", "from_numpy"], [90, 4, 1, "", "from_pandas"], [91, 4, 1, "", "from_records"], [92, 4, 1, "", "from_repr"], [93, 4, 1, "", "get_dummies"], [94, 4, 1, "", "get_index_type"], [526, 4, 1, "", "groups"], [527, 4, 1, "", "head"], [528, 4, 1, "", "list"], [529, 4, 1, "", "lit"], [530, 4, 1, "", "map"], [531, 4, 1, "", "max"], [532, 4, 1, "", "mean"], [533, 4, 1, "", "median"], [534, 4, 1, "", "min"], [535, 4, 1, "", "n_unique"], [96, 4, 1, "", "ones"], [536, 4, 1, "", "pearson_corr"], [537, 4, 1, "", "quantile"], [97, 4, 1, "", "read_avro"], [98, 4, 1, "", "read_csv"], [99, 4, 1, "", "read_csv_batched"], [100, 4, 1, "", "read_database"], [101, 4, 1, "", "read_delta"], [102, 4, 1, "", "read_excel"], [103, 4, 1, "", "read_ipc"], [104, 4, 1, "", "read_ipc_schema"], [105, 4, 1, "", "read_json"], [106, 4, 1, "", "read_ndjson"], [107, 4, 1, "", "read_parquet"], [108, 4, 1, "", "read_parquet_schema"], [538, 4, 1, "", "reduce"], [539, 4, 1, "", "repeat"], [109, 4, 1, "", "scan_csv"], [110, 4, 1, "", "scan_delta"], [111, 4, 1, "", "scan_ipc"], [112, 4, 1, "", "scan_ndjson"], [113, 4, 1, "", "scan_parquet"], [114, 4, 1, "", "scan_pyarrow_dataset"], [540, 4, 1, "", "select"], [115, 4, 1, "", "show_versions"], [541, 4, 1, "", "spearman_rank_corr"], [542, 4, 1, "", "std"], [543, 4, 1, "", "struct"], [544, 4, 1, "", "sum"], [545, 4, 1, "", "tail"], [122, 4, 1, "", "threadpool_size"], [123, 4, 1, "", "toggle_string_cache"], [546, 4, 1, "", "var"], [547, 4, 1, "", "when"], [124, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "activate_decimals"], [6, 1, 1, "", "load"], [7, 1, 1, "", "restore_defaults"], [8, 1, 1, "", "save"], [9, 1, 1, "", "set_ascii_tables"], [10, 1, 1, "", "set_fmt_float"], [11, 1, 1, "", "set_fmt_str_lengths"], [12, 1, 1, "", "set_streaming_chunk_size"], [13, 1, 1, "", "set_tbl_cell_alignment"], [14, 1, 1, "", "set_tbl_cols"], [15, 1, 1, "", "set_tbl_column_data_type_inline"], [16, 1, 1, "", "set_tbl_dataframe_shape_below"], [17, 1, 1, "", "set_tbl_formatting"], [18, 1, 1, "", "set_tbl_hide_column_data_types"], [19, 1, 1, "", "set_tbl_hide_column_names"], [20, 1, 1, "", "set_tbl_hide_dataframe_shape"], [21, 1, 1, "", "set_tbl_hide_dtype_separator"], [22, 1, 1, "", "set_tbl_rows"], [23, 1, 1, "", "set_tbl_width_chars"], [24, 1, 1, "", "set_verbose"], [25, 1, 1, "", "state"]], "polars.DataFrame": [[127, 1, 1, "", "__dataframe__"], [128, 1, 1, "", "apply"], [129, 1, 1, "", "clear"], [130, 1, 1, "", "clone"], [131, 2, 1, "", "columns"], [132, 1, 1, "", "corr"], [133, 1, 1, "", "describe"], [134, 1, 1, "", "drop"], [135, 1, 1, "", "drop_in_place"], [136, 1, 1, "", "drop_nulls"], [137, 2, 1, "", "dtypes"], [138, 1, 1, "", "estimated_size"], [139, 1, 1, "", "explode"], [140, 1, 1, "", "extend"], [141, 1, 1, "", "fill_nan"], [142, 1, 1, "", "fill_null"], [143, 1, 1, "", "filter"], [144, 1, 1, "", "find_idx_by_name"], [145, 1, 1, "", "fold"], [146, 1, 1, "", "frame_equal"], [147, 1, 1, "", "get_column"], [148, 1, 1, "", "get_columns"], [149, 1, 1, "", "glimpse"], [150, 1, 1, "", "groupby"], [151, 1, 1, "", "groupby_dynamic"], [152, 1, 1, "", "groupby_rolling"], [153, 1, 1, "", "hash_rows"], [154, 1, 1, "", "head"], [155, 2, 1, "", "height"], [156, 1, 1, "", "hstack"], [157, 1, 1, "", "insert_at_idx"], [158, 1, 1, "", "interpolate"], [159, 1, 1, "", "is_duplicated"], [160, 1, 1, "", "is_empty"], [161, 1, 1, "", "is_unique"], [162, 1, 1, "", "item"], [163, 1, 1, "", "iter_rows"], [164, 1, 1, "", "iter_slices"], [165, 1, 1, "", "join"], [166, 1, 1, "", "join_asof"], [167, 1, 1, "", "lazy"], [168, 1, 1, "", "limit"], [169, 1, 1, "", "max"], [170, 1, 1, "", "mean"], [171, 1, 1, "", "median"], [172, 1, 1, "", "melt"], [173, 1, 1, "", "merge_sorted"], [174, 1, 1, "", "min"], [175, 1, 1, "", "n_chunks"], [176, 1, 1, "", "n_unique"], [177, 1, 1, "", "null_count"], [178, 1, 1, "", "partition_by"], [179, 1, 1, "", "pipe"], [180, 1, 1, "", "pivot"], [181, 1, 1, "", "product"], [182, 1, 1, "", "quantile"], [183, 1, 1, "", "rechunk"], [184, 1, 1, "", "rename"], [185, 1, 1, "", "replace"], [186, 1, 1, "", "replace_at_idx"], [187, 1, 1, "", "reverse"], [188, 1, 1, "", "row"], [189, 1, 1, "", "rows"], [190, 1, 1, "", "sample"], [191, 2, 1, "", "schema"], [192, 1, 1, "", "select"], [193, 2, 1, "", "shape"], [194, 1, 1, "", "shift"], [195, 1, 1, "", "shift_and_fill"], [196, 1, 1, "", "shrink_to_fit"], [197, 1, 1, "", "slice"], [198, 1, 1, "", "sort"], [199, 1, 1, "", "std"], [200, 1, 1, "", "sum"], [201, 1, 1, "", "tail"], [202, 1, 1, "", "take_every"], [203, 1, 1, "", "to_arrow"], [204, 1, 1, "", "to_dict"], [205, 1, 1, "", "to_dicts"], [206, 1, 1, "", "to_dummies"], [207, 1, 1, "", "to_init_repr"], [208, 1, 1, "", "to_numpy"], [209, 1, 1, "", "to_pandas"], [210, 1, 1, "", "to_series"], [211, 1, 1, "", "to_struct"], [212, 1, 1, "", "top_k"], [213, 1, 1, "", "transpose"], [214, 1, 1, "", "unique"], [215, 1, 1, "", "unnest"], [216, 1, 1, "", "unstack"], [217, 1, 1, "", "update"], [218, 1, 1, "", "upsample"], [219, 1, 1, "", "var"], [220, 1, 1, "", "vstack"], [221, 2, 1, "", "width"], [222, 1, 1, "", "with_columns"], [223, 1, 1, "", "with_row_count"], [26, 1, 1, "", "write_avro"], [27, 1, 1, "", "write_csv"], [28, 1, 1, "", "write_database"], [29, 1, 1, "", "write_excel"], [30, 1, 1, "", "write_ipc"], [31, 1, 1, "", "write_json"], [32, 1, 1, "", "write_ndjson"], [33, 1, 1, "", "write_parquet"]], "polars.DataType": [[34, 1, 1, "", "__init__"]], "polars.Date": [[35, 1, 1, "", "__init__"]], "polars.Datetime": [[36, 1, 1, "", "__init__"]], "polars.Decimal": [[37, 1, 1, "", "__init__"]], "polars.Duration": [[38, 1, 1, "", "__init__"]], "polars.Expr": [[251, 1, 1, "", "abs"], [252, 1, 1, "", "agg_groups"], [253, 1, 1, "", "alias"], [254, 1, 1, "", "all"], [255, 1, 1, "", "any"], [256, 1, 1, "", "append"], [257, 1, 1, "", "apply"], [258, 1, 1, "", "arccos"], [259, 1, 1, "", "arccosh"], [260, 1, 1, "", "arcsin"], [261, 1, 1, "", "arcsinh"], [262, 1, 1, "", "arctan"], [263, 1, 1, "", "arctanh"], [264, 1, 1, "", "arg_max"], [265, 1, 1, "", "arg_min"], [266, 1, 1, "", "arg_sort"], [267, 1, 1, "", "arg_true"], [268, 1, 1, "", "arg_unique"], [295, 1, 1, "", "backward_fill"], [301, 1, 1, "", "cast"], [303, 1, 1, "", "ceil"], [304, 1, 1, "", "clip"], [305, 1, 1, "", "clip_max"], [306, 1, 1, "", "clip_min"], [307, 1, 1, "", "cos"], [308, 1, 1, "", "cosh"], [309, 1, 1, "", "count"], [310, 1, 1, "", "cumcount"], [311, 1, 1, "", "cummax"], [312, 1, 1, "", "cummin"], [313, 1, 1, "", "cumprod"], [314, 1, 1, "", "cumsum"], [315, 1, 1, "", "cumulative_eval"], [316, 1, 1, "", "diff"], [317, 1, 1, "", "dot"], [318, 1, 1, "", "drop_nans"], [319, 1, 1, "", "drop_nulls"], [356, 1, 1, "", "entropy"], [357, 1, 1, "", "ewm_mean"], [358, 1, 1, "", "ewm_std"], [359, 1, 1, "", "ewm_var"], [360, 1, 1, "", "exclude"], [361, 1, 1, "", "exp"], [362, 1, 1, "", "explode"], [363, 1, 1, "", "extend_constant"], [364, 1, 1, "", "fill_nan"], [365, 1, 1, "", "fill_null"], [366, 1, 1, "", "filter"], [367, 1, 1, "", "first"], [368, 1, 1, "", "flatten"], [369, 1, 1, "", "floor"], [370, 1, 1, "", "forward_fill"], [371, 1, 1, "", "hash"], [372, 1, 1, "", "head"], [373, 1, 1, "", "inspect"], [374, 1, 1, "", "interpolate"], [375, 1, 1, "", "is_between"], [376, 1, 1, "", "is_duplicated"], [377, 1, 1, "", "is_finite"], [378, 1, 1, "", "is_first"], [379, 1, 1, "", "is_in"], [380, 1, 1, "", "is_infinite"], [381, 1, 1, "", "is_nan"], [382, 1, 1, "", "is_not"], [383, 1, 1, "", "is_not_nan"], [384, 1, 1, "", "is_not_null"], [385, 1, 1, "", "is_null"], [386, 1, 1, "", "is_unique"], [387, 1, 1, "", "keep_name"], [388, 1, 1, "", "kurtosis"], [389, 1, 1, "", "last"], [390, 1, 1, "", "len"], [391, 1, 1, "", "limit"], [392, 1, 1, "", "list"], [393, 1, 1, "", "log"], [394, 1, 1, "", "log10"], [395, 1, 1, "", "lower_bound"], [396, 1, 1, "", "map"], [397, 1, 1, "", "map_alias"], [398, 1, 1, "", "map_dict"], [399, 1, 1, "", "max"], [400, 1, 1, "", "mean"], [401, 1, 1, "", "median"], [408, 1, 1, "", "min"], [409, 1, 1, "", "mode"], [410, 1, 1, "", "n_unique"], [411, 1, 1, "", "nan_max"], [412, 1, 1, "", "nan_min"], [413, 1, 1, "", "null_count"], [414, 1, 1, "", "over"], [415, 1, 1, "", "pct_change"], [416, 1, 1, "", "pipe"], [417, 1, 1, "", "pow"], [418, 1, 1, "", "prefix"], [419, 1, 1, "", "product"], [420, 1, 1, "", "quantile"], [421, 1, 1, "", "rank"], [422, 1, 1, "", "rechunk"], [423, 1, 1, "", "reinterpret"], [424, 1, 1, "", "repeat_by"], [425, 1, 1, "", "reshape"], [426, 1, 1, "", "reverse"], [427, 1, 1, "", "rolling_apply"], [428, 1, 1, "", "rolling_max"], [429, 1, 1, "", "rolling_mean"], [430, 1, 1, "", "rolling_median"], [431, 1, 1, "", "rolling_min"], [432, 1, 1, "", "rolling_quantile"], [433, 1, 1, "", "rolling_skew"], [434, 1, 1, "", "rolling_std"], [435, 1, 1, "", "rolling_sum"], [436, 1, 1, "", "rolling_var"], [437, 1, 1, "", "round"], [438, 1, 1, "", "sample"], [439, 1, 1, "", "search_sorted"], [440, 1, 1, "", "set_sorted"], [441, 1, 1, "", "shift"], [442, 1, 1, "", "shift_and_fill"], [443, 1, 1, "", "shrink_dtype"], [444, 1, 1, "", "shuffle"], [445, 1, 1, "", "sign"], [446, 1, 1, "", "sin"], [447, 1, 1, "", "sinh"], [448, 1, 1, "", "skew"], [449, 1, 1, "", "slice"], [450, 1, 1, "", "sort"], [451, 1, 1, "", "sort_by"], [452, 1, 1, "", "sqrt"], [453, 1, 1, "", "std"], [486, 1, 1, "", "suffix"], [487, 1, 1, "", "sum"], [488, 1, 1, "", "tail"], [489, 1, 1, "", "take"], [490, 1, 1, "", "take_every"], [491, 1, 1, "", "tan"], [492, 1, 1, "", "tanh"], [493, 1, 1, "", "to_physical"], [494, 1, 1, "", "top_k"], [495, 1, 1, "", "unique"], [496, 1, 1, "", "unique_counts"], [497, 1, 1, "", "upper_bound"], [498, 1, 1, "", "value_counts"], [499, 1, 1, "", "var"], [500, 1, 1, "", "where"]], "polars.Expr.arr": [[269, 1, 1, "", "arg_max"], [270, 1, 1, "", "arg_min"], [271, 1, 1, "", "concat"], [272, 1, 1, "", "contains"], [273, 1, 1, "", "count_match"], [274, 1, 1, "", "diff"], [275, 1, 1, "", "eval"], [276, 1, 1, "", "explode"], [277, 1, 1, "", "first"], [278, 1, 1, "", "get"], [279, 1, 1, "", "head"], [280, 1, 1, "", "join"], [281, 1, 1, "", "last"], [282, 1, 1, "", "lengths"], [283, 1, 1, "", "max"], [284, 1, 1, "", "mean"], [285, 1, 1, "", "min"], [286, 1, 1, "", "reverse"], [287, 1, 1, "", "shift"], [288, 1, 1, "", "slice"], [289, 1, 1, "", "sort"], [290, 1, 1, "", "sum"], [291, 1, 1, "", "tail"], [292, 1, 1, "", "take"], [293, 1, 1, "", "to_struct"], [294, 1, 1, "", "unique"]], "polars.Expr.bin": [[296, 1, 1, "", "contains"], [297, 1, 1, "", "decode"], [298, 1, 1, "", "encode"], [299, 1, 1, "", "ends_with"], [300, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[302, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[320, 1, 1, "", "cast_time_unit"], [321, 1, 1, "", "combine"], [322, 1, 1, "", "convert_time_zone"], [323, 1, 1, "", "date"], [324, 1, 1, "", "datetime"], [325, 1, 1, "", "day"], [326, 1, 1, "", "days"], [327, 1, 1, "", "epoch"], [328, 1, 1, "", "hour"], [329, 1, 1, "", "hours"], [330, 1, 1, "", "is_leap_year"], [331, 1, 1, "", "iso_year"], [332, 1, 1, "", "microsecond"], [333, 1, 1, "", "microseconds"], [334, 1, 1, "", "millisecond"], [335, 1, 1, "", "milliseconds"], [336, 1, 1, "", "minute"], [337, 1, 1, "", "minutes"], [338, 1, 1, "", "month"], [339, 1, 1, "", "nanosecond"], [340, 1, 1, "", "nanoseconds"], [341, 1, 1, "", "offset_by"], [342, 1, 1, "", "ordinal_day"], [343, 1, 1, "", "quarter"], [344, 1, 1, "", "replace_time_zone"], [345, 1, 1, "", "round"], [346, 1, 1, "", "second"], [347, 1, 1, "", "seconds"], [348, 1, 1, "", "strftime"], [349, 1, 1, "", "time"], [350, 1, 1, "", "timestamp"], [351, 1, 1, "", "truncate"], [352, 1, 1, "", "week"], [353, 1, 1, "", "weekday"], [354, 1, 1, "", "with_time_unit"], [355, 1, 1, "", "year"]], "polars.Expr.meta": [[402, 1, 1, "", "has_multiple_outputs"], [403, 1, 1, "", "is_regex_projection"], [404, 1, 1, "", "output_name"], [405, 1, 1, "", "pop"], [406, 1, 1, "", "root_names"], [407, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[454, 1, 1, "", "concat"], [455, 1, 1, "", "contains"], [456, 1, 1, "", "count_match"], [457, 1, 1, "", "decode"], [458, 1, 1, "", "encode"], [459, 1, 1, "", "ends_with"], [460, 1, 1, "", "explode"], [461, 1, 1, "", "extract"], [462, 1, 1, "", "extract_all"], [463, 1, 1, "", "json_extract"], [464, 1, 1, "", "json_path_match"], [465, 1, 1, "", "lengths"], [466, 1, 1, "", "ljust"], [467, 1, 1, "", "lstrip"], [468, 1, 1, "", "n_chars"], [469, 1, 1, "", "parse_int"], [470, 1, 1, "", "replace"], [471, 1, 1, "", "replace_all"], [472, 1, 1, "", "rjust"], [473, 1, 1, "", "rstrip"], [474, 1, 1, "", "slice"], [475, 1, 1, "", "split"], [476, 1, 1, "", "split_exact"], [477, 1, 1, "", "splitn"], [478, 1, 1, "", "starts_with"], [479, 1, 1, "", "strip"], [480, 1, 1, "", "strptime"], [481, 1, 1, "", "to_lowercase"], [482, 1, 1, "", "to_uppercase"], [483, 1, 1, "", "zfill"]], "polars.Expr.struct": [[484, 1, 1, "", "field"], [485, 1, 1, "", "rename_fields"]], "polars.Float32": [[39, 1, 1, "", "__init__"]], "polars.Float64": [[40, 1, 1, "", "__init__"]], "polars.Int16": [[41, 1, 1, "", "__init__"]], "polars.Int32": [[42, 1, 1, "", "__init__"]], "polars.Int64": [[43, 1, 1, "", "__init__"]], "polars.Int8": [[44, 1, 1, "", "__init__"]], "polars.LazyFrame": [[567, 1, 1, "", "cache"], [568, 1, 1, "", "clear"], [569, 1, 1, "", "clone"], [570, 1, 1, "", "collect"], [571, 2, 1, "", "columns"], [572, 1, 1, "", "drop"], [573, 1, 1, "", "drop_nulls"], [574, 2, 1, "", "dtypes"], [575, 1, 1, "", "explain"], [576, 1, 1, "", "explode"], [577, 1, 1, "", "fetch"], [578, 1, 1, "", "fill_nan"], [579, 1, 1, "", "fill_null"], [580, 1, 1, "", "filter"], [581, 1, 1, "", "first"], [582, 1, 1, "", "from_json"], [583, 1, 1, "", "groupby"], [584, 1, 1, "", "groupby_dynamic"], [585, 1, 1, "", "groupby_rolling"], [586, 1, 1, "", "head"], [587, 1, 1, "", "inspect"], [588, 1, 1, "", "interpolate"], [589, 1, 1, "", "join"], [590, 1, 1, "", "join_asof"], [591, 1, 1, "", "last"], [592, 1, 1, "", "lazy"], [593, 1, 1, "", "limit"], [594, 1, 1, "", "map"], [595, 1, 1, "", "max"], [596, 1, 1, "", "mean"], [597, 1, 1, "", "median"], [598, 1, 1, "", "melt"], [599, 1, 1, "", "merge_sorted"], [600, 1, 1, "", "min"], [601, 1, 1, "", "pipe"], [602, 1, 1, "", "profile"], [603, 1, 1, "", "quantile"], [604, 1, 1, "", "read_json"], [605, 1, 1, "", "rename"], [606, 1, 1, "", "reverse"], [607, 2, 1, "", "schema"], [608, 1, 1, "", "select"], [609, 1, 1, "", "shift"], [610, 1, 1, "", "shift_and_fill"], [611, 1, 1, "", "show_graph"], [612, 1, 1, "", "sink_ipc"], [613, 1, 1, "", "sink_parquet"], [614, 1, 1, "", "slice"], [615, 1, 1, "", "sort"], [616, 1, 1, "", "std"], [617, 1, 1, "", "sum"], [618, 1, 1, "", "tail"], [619, 1, 1, "", "take_every"], [620, 1, 1, "", "top_k"], [621, 1, 1, "", "unique"], [622, 1, 1, "", "unnest"], [623, 1, 1, "", "update"], [624, 1, 1, "", "var"], [625, 2, 1, "", "width"], [626, 1, 1, "", "with_columns"], [627, 1, 1, "", "with_context"], [628, 1, 1, "", "with_row_count"], [629, 1, 1, "", "write_json"]], "polars.List": [[45, 1, 1, "", "__init__"]], "polars.Null": [[46, 1, 1, "", "__init__"]], "polars.Object": [[47, 1, 1, "", "__init__"]], "polars.SQLContext": [[48, 1, 1, "", "execute"], [49, 1, 1, "", "query"], [50, 1, 1, "", "register"]], "polars.Series": [[652, 1, 1, "", "abs"], [653, 1, 1, "", "alias"], [654, 1, 1, "", "all"], [655, 1, 1, "", "any"], [656, 1, 1, "", "append"], [657, 1, 1, "", "apply"], [658, 1, 1, "", "arccos"], [659, 1, 1, "", "arccosh"], [660, 1, 1, "", "arcsin"], [661, 1, 1, "", "arcsinh"], [662, 1, 1, "", "arctan"], [663, 1, 1, "", "arctanh"], [664, 1, 1, "", "arg_max"], [665, 1, 1, "", "arg_min"], [666, 1, 1, "", "arg_sort"], [667, 1, 1, "", "arg_true"], [668, 1, 1, "", "arg_unique"], [669, 3, 1, "", "arr"], [701, 1, 1, "", "cast"], [702, 3, 1, "", "cat"], [704, 1, 1, "", "ceil"], [705, 1, 1, "", "chunk_lengths"], [706, 1, 1, "", "clear"], [707, 1, 1, "", "clip"], [708, 1, 1, "", "clip_max"], [709, 1, 1, "", "clip_min"], [710, 1, 1, "", "clone"], [711, 1, 1, "", "cos"], [712, 1, 1, "", "cosh"], [713, 1, 1, "", "cummax"], [714, 1, 1, "", "cummin"], [715, 1, 1, "", "cumprod"], [716, 1, 1, "", "cumsum"], [717, 1, 1, "", "cumulative_eval"], [718, 1, 1, "", "cut"], [719, 1, 1, "", "describe"], [720, 1, 1, "", "diff"], [721, 1, 1, "", "dot"], [722, 1, 1, "", "drop_nans"], [723, 1, 1, "", "drop_nulls"], [724, 3, 1, "", "dt"], [765, 3, 1, "", "dtype"], [766, 1, 1, "", "entropy"], [767, 1, 1, "", "estimated_size"], [768, 1, 1, "", "ewm_mean"], [769, 1, 1, "", "ewm_std"], [770, 1, 1, "", "ewm_var"], [771, 1, 1, "", "exp"], [772, 1, 1, "", "explode"], [773, 1, 1, "", "extend_constant"], [774, 1, 1, "", "fill_nan"], [775, 1, 1, "", "fill_null"], [776, 1, 1, "", "filter"], [777, 3, 1, "", "flags"], [778, 1, 1, "", "floor"], [779, 1, 1, "", "get_chunks"], [780, 1, 1, "", "has_validity"], [781, 1, 1, "", "hash"], [782, 1, 1, "", "head"], [783, 1, 1, "", "hist"], [784, 3, 1, "", "inner_dtype"], [785, 1, 1, "", "interpolate"], [786, 1, 1, "", "is_between"], [787, 1, 1, "", "is_boolean"], [788, 1, 1, "", "is_duplicated"], [789, 1, 1, "", "is_empty"], [790, 1, 1, "", "is_finite"], [791, 1, 1, "", "is_first"], [792, 1, 1, "", "is_float"], [793, 1, 1, "", "is_in"], [794, 1, 1, "", "is_infinite"], [795, 1, 1, "", "is_nan"], [796, 1, 1, "", "is_not_nan"], [797, 1, 1, "", "is_not_null"], [798, 1, 1, "", "is_null"], [799, 1, 1, "", "is_numeric"], [800, 1, 1, "", "is_sorted"], [801, 1, 1, "", "is_temporal"], [802, 1, 1, "", "is_unique"], [803, 1, 1, "", "is_utf8"], [804, 1, 1, "", "item"], [805, 1, 1, "", "kurtosis"], [806, 1, 1, "", "len"], [807, 1, 1, "", "limit"], [808, 1, 1, "", "log"], [809, 1, 1, "", "log10"], [810, 1, 1, "", "lower_bound"], [811, 1, 1, "", "map_dict"], [812, 1, 1, "", "max"], [813, 1, 1, "", "mean"], [814, 1, 1, "", "median"], [815, 1, 1, "", "min"], [816, 1, 1, "", "mode"], [817, 1, 1, "", "n_chunks"], [818, 1, 1, "", "n_unique"], [819, 3, 1, "", "name"], [820, 1, 1, "", "nan_max"], [821, 1, 1, "", "nan_min"], [822, 1, 1, "", "new_from_index"], [823, 1, 1, "", "null_count"], [824, 1, 1, "", "pct_change"], [825, 1, 1, "", "peak_max"], [826, 1, 1, "", "peak_min"], [827, 1, 1, "", "product"], [828, 1, 1, "", "qcut"], [829, 1, 1, "", "quantile"], [830, 1, 1, "", "rank"], [831, 1, 1, "", "rechunk"], [832, 1, 1, "", "reinterpret"], [833, 1, 1, "", "rename"], [834, 1, 1, "", "reshape"], [835, 1, 1, "", "reverse"], [836, 1, 1, "", "rolling_apply"], [837, 1, 1, "", "rolling_max"], [838, 1, 1, "", "rolling_mean"], [839, 1, 1, "", "rolling_median"], [840, 1, 1, "", "rolling_min"], [841, 1, 1, "", "rolling_quantile"], [842, 1, 1, "", "rolling_skew"], [843, 1, 1, "", "rolling_std"], [844, 1, 1, "", "rolling_sum"], [845, 1, 1, "", "rolling_var"], [846, 1, 1, "", "round"], [847, 1, 1, "", "sample"], [848, 1, 1, "", "search_sorted"], [849, 1, 1, "", "series_equal"], [850, 1, 1, "", "set"], [851, 1, 1, "", "set_at_idx"], [852, 1, 1, "", "set_sorted"], [853, 3, 1, "", "shape"], [854, 1, 1, "", "shift"], [855, 1, 1, "", "shift_and_fill"], [856, 1, 1, "", "shrink_dtype"], [857, 1, 1, "", "shrink_to_fit"], [858, 1, 1, "", "shuffle"], [859, 1, 1, "", "sign"], [860, 1, 1, "", "sin"], [861, 1, 1, "", "sinh"], [862, 1, 1, "", "skew"], [863, 1, 1, "", "slice"], [864, 1, 1, "", "sort"], [865, 1, 1, "", "sqrt"], [866, 1, 1, "", "std"], [867, 3, 1, "", "str"], [902, 1, 1, "", "sum"], [903, 1, 1, "", "tail"], [904, 1, 1, "", "take"], [905, 1, 1, "", "take_every"], [906, 1, 1, "", "tan"], [907, 1, 1, "", "tanh"], [908, 3, 1, "", "time_unit"], [909, 1, 1, "", "to_arrow"], [910, 1, 1, "", "to_dummies"], [911, 1, 1, "", "to_frame"], [912, 1, 1, "", "to_init_repr"], [913, 1, 1, "", "to_list"], [914, 1, 1, "", "to_numpy"], [915, 1, 1, "", "to_pandas"], [916, 1, 1, "", "to_physical"], [917, 1, 1, "", "top_k"], [918, 1, 1, "", "unique"], [919, 1, 1, "", "unique_counts"], [920, 1, 1, "", "upper_bound"], [921, 1, 1, "", "value_counts"], [922, 1, 1, "", "var"], [923, 1, 1, "", "view"], [924, 1, 1, "", "zip_with"]], "polars.Series.arr": [[670, 1, 1, "", "arg_max"], [671, 1, 1, "", "arg_min"], [672, 1, 1, "", "concat"], [673, 1, 1, "", "contains"], [674, 1, 1, "", "count_match"], [675, 1, 1, "", "diff"], [676, 1, 1, "", "eval"], [677, 1, 1, "", "explode"], [678, 1, 1, "", "first"], [679, 1, 1, "", "get"], [680, 1, 1, "", "head"], [681, 1, 1, "", "join"], [682, 1, 1, "", "last"], [683, 1, 1, "", "lengths"], [684, 1, 1, "", "max"], [685, 1, 1, "", "mean"], [686, 1, 1, "", "min"], [687, 1, 1, "", "reverse"], [688, 1, 1, "", "shift"], [689, 1, 1, "", "slice"], [690, 1, 1, "", "sort"], [691, 1, 1, "", "sum"], [692, 1, 1, "", "tail"], [693, 1, 1, "", "take"], [694, 1, 1, "", "to_struct"], [695, 1, 1, "", "unique"]], "polars.Series.bin": [[696, 1, 1, "", "contains"], [697, 1, 1, "", "decode"], [698, 1, 1, "", "encode"], [699, 1, 1, "", "ends_with"], [700, 1, 1, "", "starts_with"]], "polars.Series.cat": [[703, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[725, 1, 1, "", "cast_time_unit"], [726, 1, 1, "", "combine"], [727, 1, 1, "", "convert_time_zone"], [728, 1, 1, "", "date"], [729, 1, 1, "", "datetime"], [730, 1, 1, "", "day"], [731, 1, 1, "", "days"], [732, 1, 1, "", "epoch"], [733, 1, 1, "", "hour"], [734, 1, 1, "", "hours"], [735, 1, 1, "", "is_leap_year"], [736, 1, 1, "", "iso_year"], [737, 1, 1, "", "max"], [738, 1, 1, "", "mean"], [739, 1, 1, "", "median"], [740, 1, 1, "", "microsecond"], [741, 1, 1, "", "microseconds"], [742, 1, 1, "", "millisecond"], [743, 1, 1, "", "milliseconds"], [744, 1, 1, "", "min"], [745, 1, 1, "", "minute"], [746, 1, 1, "", "minutes"], [747, 1, 1, "", "month"], [748, 1, 1, "", "nanosecond"], [749, 1, 1, "", "nanoseconds"], [750, 1, 1, "", "offset_by"], [751, 1, 1, "", "ordinal_day"], [752, 1, 1, "", "quarter"], [753, 1, 1, "", "replace_time_zone"], [754, 1, 1, "", "round"], [755, 1, 1, "", "second"], [756, 1, 1, "", "seconds"], [757, 1, 1, "", "strftime"], [758, 1, 1, "", "time"], [759, 1, 1, "", "timestamp"], [760, 1, 1, "", "truncate"], [761, 1, 1, "", "week"], [762, 1, 1, "", "weekday"], [763, 1, 1, "", "with_time_unit"], [764, 1, 1, "", "year"]], "polars.Series.str": [[868, 1, 1, "", "concat"], [869, 1, 1, "", "contains"], [870, 1, 1, "", "count_match"], [871, 1, 1, "", "decode"], [872, 1, 1, "", "encode"], [873, 1, 1, "", "ends_with"], [874, 1, 1, "", "explode"], [875, 1, 1, "", "extract"], [876, 1, 1, "", "extract_all"], [877, 1, 1, "", "json_extract"], [878, 1, 1, "", "json_path_match"], [879, 1, 1, "", "lengths"], [880, 1, 1, "", "ljust"], [881, 1, 1, "", "lstrip"], [882, 1, 1, "", "n_chars"], [883, 1, 1, "", "parse_int"], [884, 1, 1, "", "replace"], [885, 1, 1, "", "replace_all"], [886, 1, 1, "", "rjust"], [887, 1, 1, "", "rstrip"], [888, 1, 1, "", "slice"], [889, 1, 1, "", "split"], [890, 1, 1, "", "split_exact"], [891, 1, 1, "", "splitn"], [892, 1, 1, "", "starts_with"], [893, 1, 1, "", "strip"], [894, 1, 1, "", "strptime"], [895, 1, 1, "", "to_lowercase"], [896, 1, 1, "", "to_uppercase"], [897, 1, 1, "", "zfill"]], "polars.Series.struct": [[898, 1, 1, "", "field"], [899, 3, 1, "", "fields"], [900, 1, 1, "", "rename_fields"], [901, 1, 1, "", "unnest"]], "polars.StringCache": [[51, 1, 1, "", "__init__"]], "polars.Struct": [[52, 1, 1, "", "__init__"]], "polars.Time": [[53, 1, 1, "", "__init__"]], "polars.UInt16": [[54, 1, 1, "", "__init__"]], "polars.UInt32": [[55, 1, 1, "", "__init__"]], "polars.UInt64": [[56, 1, 1, "", "__init__"]], "polars.UInt8": [[57, 1, 1, "", "__init__"]], "polars.Unknown": [[58, 1, 1, "", "__init__"]], "polars.Utf8": [[59, 1, 1, "", "__init__"]], "polars.api": [[61, 4, 1, "", "register_dataframe_namespace"], [62, 4, 1, "", "register_expr_namespace"], [63, 4, 1, "", "register_lazyframe_namespace"], [64, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[224, 1, 1, "", "__iter__"], [225, 1, 1, "", "agg"], [226, 1, 1, "", "all"], [227, 1, 1, "", "apply"], [228, 1, 1, "", "count"], [229, 1, 1, "", "first"], [230, 1, 1, "", "head"], [231, 1, 1, "", "last"], [232, 1, 1, "", "max"], [233, 1, 1, "", "mean"], [234, 1, 1, "", "median"], [235, 1, 1, "", "min"], [236, 1, 1, "", "n_unique"], [237, 1, 1, "", "quantile"], [238, 1, 1, "", "sum"], [239, 1, 1, "", "tail"]], "polars.exceptions": [[71, 5, 1, "", "ArrowError"], [72, 5, 1, "", "ColumnNotFoundError"], [73, 5, 1, "", "ComputeError"], [74, 5, 1, "", "DuplicateError"], [75, 5, 1, "", "InvalidOperationError"], [76, 5, 1, "", "NoDataError"], [77, 5, 1, "", "NoRowsReturned"], [78, 5, 1, "", "PanicException"], [79, 5, 1, "", "RowsException"], [80, 5, 1, "", "SchemaError"], [81, 5, 1, "", "SchemaFieldNotFoundError"], [82, 5, 1, "", "ShapeError"], [83, 5, 1, "", "StructFieldNotFoundError"], [84, 5, 1, "", "TooManyRowsReturned"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[95, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[630, 1, 1, "", "agg"], [631, 1, 1, "", "all"], [632, 1, 1, "", "apply"], [633, 1, 1, "", "count"], [634, 1, 1, "", "first"], [635, 1, 1, "", "head"], [636, 1, 1, "", "last"], [637, 1, 1, "", "max"], [638, 1, 1, "", "mean"], [639, 1, 1, "", "median"], [640, 1, 1, "", "min"], [641, 1, 1, "", "n_unique"], [642, 1, 1, "", "quantile"], [643, 1, 1, "", "sum"], [644, 1, 1, "", "tail"]], "polars.testing": [[116, 4, 1, "", "assert_frame_equal"], [117, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[118, 0, 1, "", "column"], [119, 4, 1, "", "columns"], [120, 4, 1, "", "dataframes"], [121, 4, 1, "", "series"]], "polars.testing.parametric.column": [[118, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 140], "api": [1, 61, 62, 63, 64, 564], "provid": 1, "new": 1, "function": [1, 553, 563], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924], "binari": [2, 548, 926], "boolean": [3, 549, 927], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 125], "activate_decim": 5, "load": [6, 125], "restore_default": 7, "save": [8, 125], "set_ascii_t": 9, "set_fmt_float": 10, "set_fmt_str_length": 11, "set_streaming_chunk_s": 12, "set_tbl_cell_align": 13, "set_tbl_col": 14, "set_tbl_column_data_type_inlin": 15, "set_tbl_dataframe_shape_below": 16, "set_tbl_format": 17, "set_tbl_hide_column_data_typ": 18, "set_tbl_hide_column_nam": 19, "set_tbl_hide_dataframe_shap": 20, "set_tbl_hide_dtype_separ": 21, "set_tbl_row": 22, "set_tbl_width_char": 23, "set_verbos": 24, "state": [25, 125], "datafram": [26, 27, 28, 29, 30, 31, 32, 33, 120, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245], "write_avro": 26, "write_csv": 27, "write_databas": 28, "write_excel": 29, "write_ipc": 30, "write_json": [31, 629], "write_ndjson": 32, "write_parquet": 33, "datatyp": 34, "date": [35, 323, 517, 728], "datetim": [36, 324, 518, 729], "decim": 37, "durat": [38, 519], "float32": 39, "float64": 40, "int16": 41, "int32": 42, "int64": 43, "int8": 44, "list": [45, 392, 528, 555, 933], "null": 46, "object": 47, "sqlcontext": [48, 49, 50], "execut": 48, "queri": 49, "regist": 50, "stringcach": [51, 563], "struct": [52, 484, 485, 543, 560, 898, 899, 900, 901, 937], "time": [53, 349, 758], "uint16": 54, "uint32": 55, "uint64": 56, "uint8": 57, "unknown": 58, "utf8": 59, "align_fram": 60, "register_dataframe_namespac": 61, "register_expr_namespac": 62, "register_lazyframe_namespac": 63, "register_series_namespac": 64, "arg_wher": 65, "build_info": 66, "collect_al": 67, "concat": [68, 271, 454, 672, 868], "cut": [69, 718], "date_rang": 70, "except": [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 249], "arrowerror": 71, "columnnotfounderror": 72, "computeerror": 73, "duplicateerror": 74, "invalidoperationerror": 75, "nodataerror": 76, "norowsreturn": 77, "panicexcept": 78, "rowsexcept": 79, "schemaerror": 80, "schemafieldnotfounderror": 81, "shapeerror": 82, "structfieldnotfounderror": 83, "toomanyrowsreturn": 84, "from_arrow": 85, "from_datafram": 86, "from_dict": [87, 88], "from_numpi": 89, "from_panda": 90, "from_record": 91, "from_repr": 92, "get_dummi": 93, "get_index_typ": 94, "io": 95, "csv": [95, 565], "batched_read": 95, "batchedcsvread": [95, 565], "next_batch": 95, "ones": 96, "read_avro": 97, "read_csv": 98, "read_csv_batch": 99, "read_databas": 100, "read_delta": 101, "read_excel": 102, "read_ipc": 103, "read_ipc_schema": 104, "read_json": [105, 604], "read_ndjson": 106, "read_parquet": 107, "read_parquet_schema": 108, "scan_csv": 109, "scan_delta": 110, "scan_ipc": 111, "scan_ndjson": 112, "scan_parquet": 113, "scan_pyarrow_dataset": 114, "show_vers": 115, "test": [116, 117, 118, 119, 120, 121, 940], "assert_frame_equ": 116, "assert_series_equ": 117, "parametr": [118, 119, 120, 121], "column": [118, 119, 131, 551, 571], "seri": [121, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 932], "threadpool_s": 122, "toggle_string_cach": 123, "zero": 124, "option": 125, "current": 125, "us": 125, "context": 125, "manag": 125, "aggreg": [126, 250, 566, 651], "__dataframe__": 127, "appli": [128, 227, 257, 503, 632, 657], "clear": [129, 568, 706], "clone": [130, 569, 710], "corr": [132, 511], "describ": [133, 719], "drop": [134, 572], "drop_in_plac": 135, "drop_nul": [136, 319, 573, 723], "dtype": [137, 574, 765], "estimated_s": [138, 767], "explod": [139, 276, 362, 460, 576, 677, 772, 874], "fill_nan": [141, 364, 578, 774], "fill_nul": [142, 365, 579, 775], "filter": [143, 366, 580, 776], "find_idx_by_nam": 144, "fold": [145, 523], "frame_equ": 146, "get_column": [147, 148], "glimps": 149, "groupbi": [150, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 244, 583, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 647], "groupby_dynam": [151, 584], "groupby_rol": [152, 585], "hash_row": 153, "head": [154, 230, 279, 372, 527, 586, 635, 680, 782], "height": 155, "hstack": 156, "insert_at_idx": 157, "interpol": [158, 374, 588, 785], "is_dupl": [159, 376, 788], "is_empti": [160, 789], "is_uniqu": [161, 386, 802], "item": [162, 804], "iter_row": 163, "iter_slic": 164, "join": [165, 280, 589, 681], "join_asof": [166, 590], "lazi": [167, 563, 592], "limit": [168, 391, 593, 807], "max": [169, 232, 283, 399, 531, 595, 637, 684, 737, 812], "mean": [170, 233, 284, 400, 532, 596, 638, 685, 738, 813], "median": [171, 234, 401, 533, 597, 639, 739, 814], "melt": [172, 598], "merge_sort": [173, 599], "min": [174, 235, 285, 408, 534, 600, 640, 686, 744, 815], "n_chunk": [175, 817], "n_uniqu": [176, 236, 410, 535, 641, 818], "null_count": [177, 413, 823], "partition_bi": 178, "pipe": [179, 416, 601], "pivot": 180, "product": [181, 419, 827], "quantil": [182, 237, 420, 537, 603, 642, 829], "rechunk": [183, 422, 831], "renam": [184, 605, 833], "replac": [185, 470, 884], "replace_at_idx": 186, "revers": [187, 286, 426, 606, 687, 835], "row": [188, 189], "sampl": [190, 438, 847], "schema": [191, 607], "select": [192, 247, 540, 558, 608, 650, 935], "shape": [193, 853], "shift": [194, 287, 441, 609, 688, 854], "shift_and_fil": [195, 442, 610, 855], "shrink_to_fit": [196, 857], "slice": [197, 288, 449, 474, 614, 689, 863, 888], "sort": [198, 289, 450, 615, 690, 864], "std": [199, 453, 542, 616, 866], "sum": [200, 238, 290, 487, 544, 617, 643, 691, 902], "tail": [201, 239, 291, 488, 545, 618, 644, 692, 903], "take_everi": [202, 490, 619, 905], "to_arrow": [203, 909], "to_dict": [204, 205], "to_dummi": [206, 910], "to_init_repr": [207, 912], "to_numpi": [208, 914], "to_panda": [209, 915], "to_seri": 210, "to_struct": [211, 293, 694], "top_k": [212, 494, 620, 917], "transpos": 213, "uniqu": [214, 294, 495, 621, 695, 918], "unnest": [215, 622, 901], "unstack": 216, "updat": [217, 623], "upsampl": 218, "var": [219, 499, 546, 624, 922], "vstack": 220, "width": [221, 625], "with_column": [222, 626], "with_row_count": [223, 628], "__iter__": 224, "agg": [225, 630], "all": [226, 254, 501, 631, 654], "count": [228, 309, 512, 633], "first": [229, 277, 367, 522, 581, 634, 678], "last": [231, 281, 389, 591, 636, 682], "attribut": [240, 645, 925], "comput": [241, 552, 929], "descript": [242, 646, 930], "export": [243, 931], "miscellan": [246, 557, 563, 649, 934], "manipul": [247, 558, 650, 935], "data": 248, "type": 248, "numer": 248, "tempor": [248, 561, 938], "nest": 248, "other": 248, "expr": [251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500], "ab": [251, 652], "agg_group": 252, "alia": [253, 653], "ani": [255, 502, 655], "append": [256, 656], "arcco": [258, 658], "arccosh": [259, 659], "arcsin": [260, 660], "arcsinh": [261, 661], "arctan": [262, 662], "arctanh": [263, 663], "arg_max": [264, 269, 664, 670], "arg_min": [265, 270, 665, 671], "arg_sort": [266, 666], "arg_tru": [267, 667], "arg_uniqu": [268, 668], "arr": [269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695], "contain": [272, 296, 455, 673, 696, 869], "count_match": [273, 456, 674, 870], "diff": [274, 316, 675, 720], "eval": [275, 676], "get": [278, 679], "length": [282, 465, 683, 879], "take": [292, 489, 693, 904], "backward_fil": 295, "bin": [296, 297, 298, 299, 300, 696, 697, 698, 699, 700], "decod": [297, 457, 697, 871], "encod": [298, 458, 698, 872], "ends_with": [299, 459, 699, 873], "starts_with": [300, 478, 700, 892], "cast": [301, 701], "cat": [302, 702, 703], "set_ord": [302, 703], "ceil": [303, 704], "clip": [304, 707], "clip_max": [305, 708], "clip_min": [306, 709], "co": [307, 711], "cosh": [308, 712], "cumcount": 310, "cummax": [311, 713], "cummin": [312, 714], "cumprod": [313, 715], "cumsum": [314, 516, 716], "cumulative_ev": [315, 717], "dot": [317, 721], "drop_nan": [318, 722], "dt": [320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764], "cast_time_unit": [320, 725], "combin": [321, 726], "convert_time_zon": [322, 727], "dai": [325, 326, 730, 731], "epoch": [327, 732], "hour": [328, 329, 733, 734], "is_leap_year": [330, 735], "iso_year": [331, 736], "microsecond": [332, 333, 740, 741], "millisecond": [334, 335, 742, 743], "minut": [336, 337, 745, 746], "month": [338, 747], "nanosecond": [339, 340, 748, 749], "offset_bi": [341, 750], "ordinal_dai": [342, 751], "quarter": [343, 752], "replace_time_zon": [344, 753], "round": [345, 437, 754, 846], "second": [346, 347, 755, 756], "strftime": [348, 757], "timestamp": [350, 759], "truncat": [351, 760], "week": [352, 761], "weekdai": [353, 762], "with_time_unit": [354, 763], "year": [355, 764], "entropi": [356, 766], "ewm_mean": [357, 768], "ewm_std": [358, 769], "ewm_var": [359, 770], "exclud": [360, 521], "exp": [361, 771], "extend_const": [363, 773], "flatten": 368, "floor": [369, 778], "forward_fil": 370, "hash": [371, 781], "inspect": [373, 587], "is_between": [375, 786], "is_finit": [377, 790], "is_first": [378, 791], "is_in": [379, 793], "is_infinit": [380, 794], "is_nan": [381, 795], "is_not": 382, "is_not_nan": [383, 796], "is_not_nul": [384, 797], "is_nul": [385, 798], "keep_nam": 387, "kurtosi": [388, 805], "len": [390, 806], "log": [393, 808], "log10": [394, 809], "lower_bound": [395, 810], "map": [396, 530, 594], "map_alia": 397, "map_dict": [398, 811], "meta": [402, 403, 404, 405, 406, 407, 556], "has_multiple_output": 402, "is_regex_project": 403, "output_nam": 404, "pop": 405, "root_nam": 406, "undo_alias": 407, "mode": [409, 816], "nan_max": [411, 820], "nan_min": [412, 821], "over": 414, "pct_chang": [415, 824], "pow": 417, "prefix": 418, "rank": [421, 830], "reinterpret": [423, 832], "repeat_bi": 424, "reshap": [425, 834], "rolling_appli": [427, 836], "rolling_max": [428, 837], "rolling_mean": [429, 838], "rolling_median": [430, 839], "rolling_min": [431, 840], "rolling_quantil": [432, 841], "rolling_skew": [433, 842], "rolling_std": [434, 843], "rolling_sum": [435, 844], "rolling_var": [436, 845], "search_sort": [439, 848], "set_sort": [440, 852], "shrink_dtyp": [443, 856], "shuffl": [444, 858], "sign": [445, 859], "sin": [446, 860], "sinh": [447, 861], "skew": [448, 862], "sort_bi": 451, "sqrt": [452, 865], "str": [454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897], "extract": [461, 875], "extract_al": [462, 876], "json_extract": [463, 877], "json_path_match": [464, 878], "ljust": [466, 880], "lstrip": [467, 881], "n_char": [468, 882], "parse_int": [469, 883], "replace_al": [471, 885], "rjust": [472, 886], "rstrip": [473, 887], "split": [475, 889], "split_exact": [476, 890], "splitn": [477, 891], "strip": [479, 893], "strptime": [480, 894], "to_lowercas": [481, 895], "to_uppercas": [482, 896], "zfill": [483, 897], "field": [484, 898, 899], "rename_field": [485, 900], "suffix": 486, "tan": [491, 906], "tanh": [492, 907], "to_phys": [493, 916], "unique_count": [496, 919], "upper_bound": [497, 920], "value_count": [498, 921], "where": 500, "arang": 504, "arg_sort_bi": 505, "avg": 506, "coalesc": 507, "col": 508, "concat_list": 509, "concat_str": 510, "cov": 513, "cumfold": 514, "cumreduc": 515, "element": 520, "format": 524, "from_epoch": 525, "group": 526, "lit": 529, "pearson_corr": 536, "reduc": 538, "repeat": 539, "spearman_rank_corr": 541, "when": 547, "categori": [550, 928], "name": [551, 819], "express": 554, "string": [559, 936], "window": 562, "convers": 563, "eager": 563, "parallel": 563, "refer": 564, "input": 565, "output": 565, "feather": 565, "ipc": 565, "parquet": 565, "databas": 565, "json": 565, "avro": 565, "excel": 565, "delta": 565, "lake": 565, "dataset": 565, "lazyfram": [567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 648], "cach": 567, "collect": 570, "explain": 575, "fetch": 577, "from_json": 582, "profil": 602, "show_graph": 611, "sink_ipc": 612, "sink_parquet": 613, "with_context": 627, "lazygroupbi": [630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644], "read": 649, "write": 649, "logic": 649, "plan": 649, "chunk_length": 705, "flag": 777, "get_chunk": 779, "has_valid": 780, "hist": 783, "inner_dtyp": 784, "is_boolean": 787, "is_float": 792, "is_numer": 799, "is_sort": 800, "is_tempor": 801, "is_utf8": 803, "new_from_index": 822, "peak_max": 825, "peak_min": 826, "qcut": 828, "series_equ": 849, "set": 850, "set_at_idx": 851, "time_unit": 908, "to_fram": 911, "to_list": 913, "view": 923, "zip_with": 924, "sql": 939, "method": 939, "assert": 940, "properti": 940, "base": 940, "strategi": 940, "helper": 940, "util": 941}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.Config.set_tbl_cell_alignment": [[13, "polars-config-set-tbl-cell-alignment"]], "polars.DataFrame.write_ipc": [[30, "polars-dataframe-write-ipc"]], "polars.api.register_dataframe_namespace": [[61, "polars-api-register-dataframe-namespace"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.Unknown": [[58, "polars-unknown"]], "polars.Object": [[47, "polars-object"]], "polars.Date": [[35, "polars-date"]], "polars.Config.set_tbl_hide_dataframe_shape": [[20, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.DataFrame.write_json": [[31, "polars-dataframe-write-json"]], "polars.DataFrame.write_parquet": [[33, "polars-dataframe-write-parquet"]], "polars.Decimal": [[37, "polars-decimal"]], "polars.DataFrame.write_database": [[28, "polars-dataframe-write-database"]], "polars.Null": [[46, "polars-null"]], "polars.Config.set_tbl_formatting": [[17, "polars-config-set-tbl-formatting"]], "polars.Struct": [[52, "polars-struct"]], "polars.UInt16": [[54, "polars-uint16"]], "polars.DataFrame.write_ndjson": [[32, "polars-dataframe-write-ndjson"]], "polars.Config.set_fmt_float": [[10, "polars-config-set-fmt-float"]], "polars.StringCache": [[51, "polars-stringcache"]], "polars.UInt8": [[57, "polars-uint8"]], "polars.arg_where": [[65, "polars-arg-where"]], "polars.Config.set_verbose": [[24, "polars-config-set-verbose"]], "polars.Config.set_tbl_column_data_type_inline": [[15, "polars-config-set-tbl-column-data-type-inline"]], "polars.Binary": [[2, "polars-binary"]], "polars.Config.load": [[6, "polars-config-load"]], "polars.DataFrame.write_avro": [[26, "polars-dataframe-write-avro"]], "polars.Utf8": [[59, "polars-utf8"]], "polars.DataFrame.write_excel": [[29, "polars-dataframe-write-excel"]], "polars.Config.set_tbl_hide_column_data_types": [[18, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_ascii_tables": [[9, "polars-config-set-ascii-tables"]], "polars.Config.set_tbl_width_chars": [[23, "polars-config-set-tbl-width-chars"]], "polars.SQLContext.register": [[50, "polars-sqlcontext-register"]], "polars.Config.set_fmt_str_lengths": [[11, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_tbl_cols": [[14, "polars-config-set-tbl-cols"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.api.register_lazyframe_namespace": [[63, "polars-api-register-lazyframe-namespace"]], "polars.Config.state": [[25, "polars-config-state"]], "polars.Duration": [[38, "polars-duration"]], "polars.Config.set_tbl_dataframe_shape_below": [[16, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_tbl_hide_column_names": [[19, "polars-config-set-tbl-hide-column-names"]], "polars.DataFrame.write_csv": [[27, "polars-dataframe-write-csv"]], "polars.Int8": [[44, "polars-int8"]], "polars.Config.set_streaming_chunk_size": [[12, "polars-config-set-streaming-chunk-size"]], "polars.SQLContext.execute": [[48, "polars-sqlcontext-execute"]], "polars.api.register_expr_namespace": [[62, "polars-api-register-expr-namespace"]], "polars.DataType": [[34, "polars-datatype"]], "polars.Config.set_tbl_rows": [[22, "polars-config-set-tbl-rows"]], "polars.build_info": [[66, "polars-build-info"]], "polars.collect_all": [[67, "polars-collect-all"]], "polars.Config.activate_decimals": [[5, "polars-config-activate-decimals"]], "polars.Datetime": [[36, "polars-datetime"]], "polars.UInt64": [[56, "polars-uint64"]], "polars.SQLContext.query": [[49, "polars-sqlcontext-query"]], "polars.align_frames": [[60, "polars-align-frames"]], "polars.Int16": [[41, "polars-int16"]], "polars.Time": [[53, "polars-time"]], "polars.api.register_series_namespace": [[64, "polars-api-register-series-namespace"]], "polars.Config.set_tbl_hide_dtype_separator": [[21, "polars-config-set-tbl-hide-dtype-separator"]], "polars.UInt32": [[55, "polars-uint32"]], "polars.Config.restore_defaults": [[7, "polars-config-restore-defaults"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.Config.save": [[8, "polars-config-save"]], "polars.List": [[45, "polars-list"]], "polars.Int32": [[42, "polars-int32"]], "polars.Float64": [[40, "polars-float64"]], "polars.Float32": [[39, "polars-float32"]], "polars.Int64": [[43, "polars-int64"]], "polars.exceptions.NoRowsReturned": [[77, "polars-exceptions-norowsreturned"]], "polars.testing.parametric.column": [[118, "polars-testing-parametric-column"]], "polars.DataFrame.columns": [[131, "polars-dataframe-columns"]], "polars.scan_ndjson": [[112, "polars-scan-ndjson"]], "polars.exceptions.PanicException": [[78, "polars-exceptions-panicexception"]], "polars.read_database": [[100, "polars-read-database"]], "polars.from_records": [[91, "polars-from-records"]], "polars.testing.assert_series_equal": [[117, "polars-testing-assert-series-equal"]], "polars.DataFrame.__dataframe__": [[127, "polars-dataframe-dataframe"]], "polars.read_ipc_schema": [[104, "polars-read-ipc-schema"]], "polars.date_range": [[70, "polars-date-range"]], "polars.scan_parquet": [[113, "polars-scan-parquet"]], "polars.DataFrame.clear": [[129, "polars-dataframe-clear"]], "polars.from_dataframe": [[86, "polars-from-dataframe"]], "polars.DataFrame.apply": [[128, "polars-dataframe-apply"]], "polars.exceptions.RowsException": [[79, "polars-exceptions-rowsexception"]], "polars.cut": [[69, "polars-cut"]], "polars.get_index_type": [[94, "polars-get-index-type"]], "polars.read_excel": [[102, "polars-read-excel"]], "polars.testing.parametric.columns": [[119, "polars-testing-parametric-columns"]], "polars.DataFrame.corr": [[132, "polars-dataframe-corr"]], "polars.from_repr": [[92, "polars-from-repr"]], "polars.read_avro": [[97, "polars-read-avro"]], "polars.read_delta": [[101, "polars-read-delta"]], "polars.DataFrame.drop_in_place": [[135, "polars-dataframe-drop-in-place"]], "polars.from_arrow": [[85, "polars-from-arrow"]], "polars.from_numpy": [[89, "polars-from-numpy"]], "polars.read_json": [[105, "polars-read-json"]], "polars.read_parquet": [[107, "polars-read-parquet"]], "polars.testing.parametric.dataframes": [[120, "polars-testing-parametric-dataframes"]], "polars.exceptions.SchemaFieldNotFoundError": [[81, "polars-exceptions-schemafieldnotfounderror"]], "polars.scan_pyarrow_dataset": [[114, "polars-scan-pyarrow-dataset"]], "polars.from_pandas": [[90, "polars-from-pandas"]], "polars.exceptions.ShapeError": [[82, "polars-exceptions-shapeerror"]], "polars.scan_delta": [[110, "polars-scan-delta"]], "polars.exceptions.ArrowError": [[71, "polars-exceptions-arrowerror"]], "polars.exceptions.ComputeError": [[73, "polars-exceptions-computeerror"]], "polars.zeros": [[124, "polars-zeros"]], "polars.testing.parametric.series": [[121, "polars-testing-parametric-series"]], "polars.exceptions.ColumnNotFoundError": [[72, "polars-exceptions-columnnotfounderror"]], "polars.DataFrame.drop": [[134, "polars-dataframe-drop"]], "polars.get_dummies": [[93, "polars-get-dummies"]], "polars.concat": [[68, "polars-concat"]], "polars.read_ipc": [[103, "polars-read-ipc"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[95, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "Config": [[125, "config"]], "Config options": [[125, "config-options"]], "Config load, save, and current state": [[125, "config-load-save-and-current-state"]], "Use as a context manager": [[125, "use-as-a-context-manager"]], "polars.scan_ipc": [[111, "polars-scan-ipc"]], "polars.exceptions.InvalidOperationError": [[75, "polars-exceptions-invalidoperationerror"]], "polars.read_ndjson": [[106, "polars-read-ndjson"]], "polars.DataFrame.describe": [[133, "polars-dataframe-describe"]], "polars.threadpool_size": [[122, "polars-threadpool-size"]], "polars.toggle_string_cache": [[123, "polars-toggle-string-cache"]], "polars.read_csv_batched": [[99, "polars-read-csv-batched"]], "polars.exceptions.SchemaError": [[80, "polars-exceptions-schemaerror"]], "polars.ones": [[96, "polars-ones"]], "polars.read_csv": [[98, "polars-read-csv"]], "polars.read_parquet_schema": [[108, "polars-read-parquet-schema"]], "Aggregation": [[126, "aggregation"], [651, "aggregation"], [566, "aggregation"], [250, "aggregation"]], "polars.exceptions.NoDataError": [[76, "polars-exceptions-nodataerror"]], "polars.scan_csv": [[109, "polars-scan-csv"]], "polars.from_dicts": [[88, "polars-from-dicts"]], "polars.DataFrame.clone": [[130, "polars-dataframe-clone"]], "polars.testing.assert_frame_equal": [[116, "polars-testing-assert-frame-equal"]], "polars.exceptions.StructFieldNotFoundError": [[83, "polars-exceptions-structfieldnotfounderror"]], "polars.from_dict": [[87, "polars-from-dict"]], "polars.exceptions.DuplicateError": [[74, "polars-exceptions-duplicateerror"]], "polars.show_versions": [[115, "polars-show-versions"]], "polars.exceptions.TooManyRowsReturned": [[84, "polars-exceptions-toomanyrowsreturned"]], "polars.Series.slice": [[863, "polars-series-slice"]], "polars.Series.str.concat": [[868, "polars-series-str-concat"]], "polars.Series.name": [[819, "polars-series-name"]], "polars.Series.rank": [[830, "polars-series-rank"]], "polars.Series.sort": [[864, "polars-series-sort"]], "polars.Series.shift_and_fill": [[855, "polars-series-shift-and-fill"]], "polars.Series.str.extract_all": [[876, "polars-series-str-extract-all"]], "polars.Series.reshape": [[834, "polars-series-reshape"]], "polars.Series.str.lengths": [[879, "polars-series-str-lengths"]], "polars.Series.set_at_idx": [[851, "polars-series-set-at-idx"]], "polars.Series.reinterpret": [[832, "polars-series-reinterpret"]], "polars.Series.qcut": [[828, "polars-series-qcut"]], "polars.Series.str.lstrip": [[881, "polars-series-str-lstrip"]], "polars.Series.shuffle": [[858, "polars-series-shuffle"]], "polars.Series.rolling_var": [[845, "polars-series-rolling-var"]], "polars.Series.str.n_chars": [[882, "polars-series-str-n-chars"]], "polars.Series.rolling_apply": [[836, "polars-series-rolling-apply"]], "polars.Series.rolling_skew": [[842, "polars-series-rolling-skew"]], "polars.Series.set": [[850, "polars-series-set"]], "polars.Series.product": [[827, "polars-series-product"]], "polars.Series.sqrt": [[865, "polars-series-sqrt"]], "polars.Series.rolling_std": [[843, "polars-series-rolling-std"]], "polars.Series.quantile": [[829, "polars-series-quantile"]], "polars.Series.reverse": [[835, "polars-series-reverse"]], "polars.Series.rolling_mean": [[838, "polars-series-rolling-mean"]], "polars.Series.str.ends_with": [[873, "polars-series-str-ends-with"]], "polars.Series.skew": [[862, "polars-series-skew"]], "polars.Series.set_sorted": [[852, "polars-series-set-sorted"]], "polars.Series.str.encode": [[872, "polars-series-str-encode"]], "polars.Series.rechunk": [[831, "polars-series-rechunk"]], "polars.Series.str.parse_int": [[883, "polars-series-str-parse-int"]], "polars.Series.rolling_quantile": [[841, "polars-series-rolling-quantile"]], "polars.Series.shrink_dtype": [[856, "polars-series-shrink-dtype"]], "polars.Series.n_chunks": [[817, "polars-series-n-chunks"]], "polars.Series.str.json_path_match": [[878, "polars-series-str-json-path-match"]], "polars.Series.shape": [[853, "polars-series-shape"]], "polars.Series.nan_max": [[820, "polars-series-nan-max"]], "polars.Series.null_count": [[823, "polars-series-null-count"]], "polars.Series.shrink_to_fit": [[857, "polars-series-shrink-to-fit"]], "polars.Series.sign": [[859, "polars-series-sign"]], "polars.Series.str.json_extract": [[877, "polars-series-str-json-extract"]], "polars.Series.str.ljust": [[880, "polars-series-str-ljust"]], "polars.Series.shift": [[854, "polars-series-shift"]], "polars.Series.rename": [[833, "polars-series-rename"]], "polars.Series.round": [[846, "polars-series-round"]], "polars.Series.str.explode": [[874, "polars-series-str-explode"]], "polars.Series.str.extract": [[875, "polars-series-str-extract"]], "polars.Series.pct_change": [[824, "polars-series-pct-change"]], "polars.Series.str": [[867, "polars-series-str"]], "polars.Series.rolling_sum": [[844, "polars-series-rolling-sum"]], "polars.Series.str.contains": [[869, "polars-series-str-contains"]], "polars.Series.series_equal": [[849, "polars-series-series-equal"]], "polars.Series.sin": [[860, "polars-series-sin"]], "polars.Series.str.decode": [[871, "polars-series-str-decode"]], "polars.Series.n_unique": [[818, "polars-series-n-unique"]], "polars.Series.rolling_median": [[839, "polars-series-rolling-median"]], "polars.Series.str.count_match": [[870, "polars-series-str-count-match"]], "polars.Series.sinh": [[861, "polars-series-sinh"]], "polars.Series.rolling_min": [[840, "polars-series-rolling-min"]], "polars.Series.search_sorted": [[848, "polars-series-search-sorted"]], "polars.Series.new_from_index": [[822, "polars-series-new-from-index"]], "polars.Series.peak_min": [[826, "polars-series-peak-min"]], "polars.Series.rolling_max": [[837, "polars-series-rolling-max"]], "polars.Series.mode": [[816, "polars-series-mode"]], "polars.Series.nan_min": [[821, "polars-series-nan-min"]], "polars.Series.std": [[866, "polars-series-std"]], "polars.Series.peak_max": [[825, "polars-series-peak-max"]], "polars.Series.sample": [[847, "polars-series-sample"]], "polars.Series.dt.year": [[764, "polars-series-dt-year"]], "polars.Series.fill_null": [[775, "polars-series-fill-null"]], "polars.Series.filter": [[776, "polars-series-filter"]], "polars.Series.floor": [[778, "polars-series-floor"]], "polars.Series.dt.strftime": [[757, "polars-series-dt-strftime"]], "polars.Series.is_utf8": [[803, "polars-series-is-utf8"]], "polars.Series.dt.ordinal_day": [[751, "polars-series-dt-ordinal-day"]], "polars.Series.entropy": [[766, "polars-series-entropy"]], "polars.Series.is_duplicated": [[788, "polars-series-is-duplicated"]], "polars.Series.median": [[814, "polars-series-median"]], "polars.Series.lower_bound": [[810, "polars-series-lower-bound"]], "polars.Series.dt.offset_by": [[750, "polars-series-dt-offset-by"]], "polars.Series.min": [[815, "polars-series-min"]], "polars.Series.dt.seconds": [[756, "polars-series-dt-seconds"]], "polars.Series.fill_nan": [[774, "polars-series-fill-nan"]], "polars.Series.kurtosis": [[805, "polars-series-kurtosis"]], "polars.Series.is_empty": [[789, "polars-series-is-empty"]], "polars.Series.is_boolean": [[787, "polars-series-is-boolean"]], "polars.Series.inner_dtype": [[784, "polars-series-inner-dtype"]], "polars.Series.has_validity": [[780, "polars-series-has-validity"]], "polars.Series.dt.second": [[755, "polars-series-dt-second"]], "polars.Series.interpolate": [[785, "polars-series-interpolate"]], "polars.Series.log10": [[809, "polars-series-log10"]], "polars.Series.mean": [[813, "polars-series-mean"]], "polars.Series.ewm_std": [[769, "polars-series-ewm-std"]], "polars.Series.dt.week": [[761, "polars-series-dt-week"]], "polars.Series.is_numeric": [[799, "polars-series-is-numeric"]], "polars.Series.max": [[812, "polars-series-max"]], "polars.Series.ewm_var": [[770, "polars-series-ewm-var"]], "polars.Series.dt.quarter": [[752, "polars-series-dt-quarter"]], "polars.Series.extend_constant": [[773, "polars-series-extend-constant"]], "polars.Series.get_chunks": [[779, "polars-series-get-chunks"]], "polars.Series.map_dict": [[811, "polars-series-map-dict"]], "polars.Series.log": [[808, "polars-series-log"]], "polars.Series.flags": [[777, "polars-series-flags"]], "polars.Series.hist": [[783, "polars-series-hist"]], "polars.Series.dt.nanosecond": [[748, "polars-series-dt-nanosecond"]], "polars.Series.is_not_nan": [[796, "polars-series-is-not-nan"]], "polars.Series.is_not_null": [[797, "polars-series-is-not-null"]], "polars.Series.dt.nanoseconds": [[749, "polars-series-dt-nanoseconds"]], "polars.Series.explode": [[772, "polars-series-explode"]], "polars.Series.is_infinite": [[794, "polars-series-is-infinite"]], "polars.Series.is_nan": [[795, "polars-series-is-nan"]], "polars.Series.ewm_mean": [[768, "polars-series-ewm-mean"]], "polars.Series.dt.time": [[758, "polars-series-dt-time"]], "polars.Series.is_first": [[791, "polars-series-is-first"]], "polars.Series.is_null": [[798, "polars-series-is-null"]], "polars.Series.dt.replace_time_zone": [[753, "polars-series-dt-replace-time-zone"]], "polars.Series.is_between": [[786, "polars-series-is-between"]], "polars.Series.is_finite": [[790, "polars-series-is-finite"]], "polars.Series.estimated_size": [[767, "polars-series-estimated-size"]], "polars.Series.dt.truncate": [[760, "polars-series-dt-truncate"]], "polars.Series.dtype": [[765, "polars-series-dtype"]], "polars.Series.dt.timestamp": [[759, "polars-series-dt-timestamp"]], "polars.Series.is_float": [[792, "polars-series-is-float"]], "polars.Series.dt.weekday": [[762, "polars-series-dt-weekday"]], "polars.Series.is_in": [[793, "polars-series-is-in"]], "polars.Series.is_temporal": [[801, "polars-series-is-temporal"]], "polars.Series.dt.with_time_unit": [[763, "polars-series-dt-with-time-unit"]], "polars.Series.exp": [[771, "polars-series-exp"]], "polars.Series.hash": [[781, "polars-series-hash"]], "polars.Series.is_unique": [[802, "polars-series-is-unique"]], "polars.Series.item": [[804, "polars-series-item"]], "polars.Series.head": [[782, "polars-series-head"]], "polars.Series.limit": [[807, "polars-series-limit"]], "polars.Series.len": [[806, "polars-series-len"]], "polars.Series.is_sorted": [[800, "polars-series-is-sorted"]], "polars.Series.dt.round": [[754, "polars-series-dt-round"]], "polars.Series.arr.lengths": [[683, "polars-series-arr-lengths"]], "polars.Series.bin.encode": [[698, "polars-series-bin-encode"]], "polars.Series.arr.tail": [[692, "polars-series-arr-tail"]], "polars.Series.arr.unique": [[695, "polars-series-arr-unique"]], "polars.Series.clear": [[706, "polars-series-clear"]], "polars.Series.cos": [[711, "polars-series-cos"]], "polars.Series.drop_nans": [[722, "polars-series-drop-nans"]], "polars.Series.dt.days": [[731, "polars-series-dt-days"]], "polars.Series.dt.milliseconds": [[743, "polars-series-dt-milliseconds"]], "polars.Series.dot": [[721, "polars-series-dot"]], "polars.Series.cumulative_eval": [[717, "polars-series-cumulative-eval"]], "polars.Series.arr.last": [[682, "polars-series-arr-last"]], "polars.Series.dt.is_leap_year": [[735, "polars-series-dt-is-leap-year"]], "polars.Series.arr.slice": [[689, "polars-series-arr-slice"]], "polars.Series.dt.min": [[744, "polars-series-dt-min"]], "polars.Series.arr.head": [[680, "polars-series-arr-head"]], "polars.Series.clip_max": [[708, "polars-series-clip-max"]], "polars.Series.arr.min": [[686, "polars-series-arr-min"]], "polars.Series.arr.shift": [[688, "polars-series-arr-shift"]], "polars.Series.cosh": [[712, "polars-series-cosh"]], "polars.Series.dt.cast_time_unit": [[725, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.hours": [[734, "polars-series-dt-hours"]], "polars.Series.dt.microsecond": [[740, "polars-series-dt-microsecond"]], "polars.Series.cat": [[702, "polars-series-cat"]], "polars.Series.describe": [[719, "polars-series-describe"]], "polars.Series.dt.millisecond": [[742, "polars-series-dt-millisecond"]], "polars.Series.drop_nulls": [[723, "polars-series-drop-nulls"]], "polars.Series.dt.hour": [[733, "polars-series-dt-hour"]], "polars.Series.arr.max": [[684, "polars-series-arr-max"]], "polars.Series.dt.convert_time_zone": [[727, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.mean": [[738, "polars-series-dt-mean"]], "polars.Series.dt.microseconds": [[741, "polars-series-dt-microseconds"]], "polars.Series.arr.sort": [[690, "polars-series-arr-sort"]], "polars.Series.cummax": [[713, "polars-series-cummax"]], "polars.Series.dt.minute": [[745, "polars-series-dt-minute"]], "polars.Series.bin.starts_with": [[700, "polars-series-bin-starts-with"]], "polars.Series.dt.minutes": [[746, "polars-series-dt-minutes"]], "polars.Series.dt.combine": [[726, "polars-series-dt-combine"]], "polars.Series.clone": [[710, "polars-series-clone"]], "polars.Series.dt.datetime": [[729, "polars-series-dt-datetime"]], "polars.Series.cummin": [[714, "polars-series-cummin"]], "polars.Series.arr.to_struct": [[694, "polars-series-arr-to-struct"]], "polars.Series.clip_min": [[709, "polars-series-clip-min"]], "polars.Series.bin.decode": [[697, "polars-series-bin-decode"]], "polars.Series.cut": [[718, "polars-series-cut"]], "polars.Series.arr.reverse": [[687, "polars-series-arr-reverse"]], "polars.Series.arr.sum": [[691, "polars-series-arr-sum"]], "polars.Series.dt.day": [[730, "polars-series-dt-day"]], "polars.Series.bin.ends_with": [[699, "polars-series-bin-ends-with"]], "polars.Series.diff": [[720, "polars-series-diff"]], "polars.Series.arr.mean": [[685, "polars-series-arr-mean"]], "polars.Series.dt.max": [[737, "polars-series-dt-max"]], "polars.Series.dt": [[724, "polars-series-dt"]], "polars.Series.dt.date": [[728, "polars-series-dt-date"]], "polars.Series.chunk_lengths": [[705, "polars-series-chunk-lengths"]], "polars.Series.arr.join": [[681, "polars-series-arr-join"]], "polars.Series.dt.iso_year": [[736, "polars-series-dt-iso-year"]], "polars.Series.cast": [[701, "polars-series-cast"]], "polars.Series.dt.epoch": [[732, "polars-series-dt-epoch"]], "polars.Series.arr.take": [[693, "polars-series-arr-take"]], "polars.Series.cat.set_ordering": [[703, "polars-series-cat-set-ordering"]], "polars.Series.cumprod": [[715, "polars-series-cumprod"]], "polars.Series.dt.month": [[747, "polars-series-dt-month"]], "polars.Series.clip": [[707, "polars-series-clip"]], "polars.Series.dt.median": [[739, "polars-series-dt-median"]], "polars.Series.ceil": [[704, "polars-series-ceil"]], "polars.Series.cumsum": [[716, "polars-series-cumsum"]], "polars.Series.bin.contains": [[696, "polars-series-bin-contains"]], "polars.Series.str.starts_with": [[892, "polars-series-str-starts-with"]], "SQL": [[939, "sql"]], "Methods": [[939, "methods"]], "polars.Series.view": [[923, "polars-series-view"]], "polars.Series.to_pandas": [[915, "polars-series-to-pandas"]], "polars.Series.struct.rename_fields": [[900, "polars-series-struct-rename-fields"]], "polars.Series.time_unit": [[908, "polars-series-time-unit"]], "polars.Series.tail": [[903, "polars-series-tail"]], "polars.Series.take": [[904, "polars-series-take"]], "List": [[933, "list"], [555, "list"]], "Testing": [[940, "testing"]], "Asserts": [[940, "asserts"]], "Property-based testing": [[940, "property-based-testing"]], "Strategies": [[940, "strategies"]], "Strategy helpers": [[940, "strategy-helpers"]], "polars.Series.struct.field": [[898, "polars-series-struct-field"]], "polars.Series.zip_with": [[924, "polars-series-zip-with"]], "polars.Series.to_init_repr": [[912, "polars-series-to-init-repr"]], "polars.Series.unique": [[918, "polars-series-unique"]], "polars.Series.struct.unnest": [[901, "polars-series-struct-unnest"]], "polars.Series.str.to_uppercase": [[896, "polars-series-str-to-uppercase"]], "Descriptive": [[930, "descriptive"], [646, "descriptive"], [242, "descriptive"]], "Export": [[931, "export"], [243, "export"]], "polars.Series.to_list": [[913, "polars-series-to-list"]], "polars.Series.str.slice": [[888, "polars-series-str-slice"]], "polars.Series.to_physical": [[916, "polars-series-to-physical"]], "Boolean": [[927, "boolean"], [549, "boolean"]], "polars.Series.var": [[922, "polars-series-var"]], "polars.Series.upper_bound": [[920, "polars-series-upper-bound"]], "Temporal": [[938, "temporal"], [561, "temporal"], [248, "temporal"]], "Series": [[932, "series"]], "polars.Series.str.zfill": [[897, "polars-series-str-zfill"]], "polars.Series.str.splitn": [[891, "polars-series-str-splitn"]], "polars.Series.str.split_exact": [[890, "polars-series-str-split-exact"]], "polars.Series.sum": [[902, "polars-series-sum"]], "polars.Series.str.rjust": [[886, "polars-series-str-rjust"]], "polars.Series.str.replace": [[884, "polars-series-str-replace"]], "polars.Series.to_dummies": [[910, "polars-series-to-dummies"]], "Attributes": [[925, "attributes"], [645, "attributes"], [240, "attributes"]], "polars.Series.struct.fields": [[899, "polars-series-struct-fields"]], "polars.Series.str.strip": [[893, "polars-series-str-strip"]], "Computation": [[929, "computation"], [552, "computation"], [241, "computation"]], "polars.Series.str.split": [[889, "polars-series-str-split"]], "polars.Series.tan": [[906, "polars-series-tan"]], "polars.Series.tanh": [[907, "polars-series-tanh"]], "polars.Series.unique_counts": [[919, "polars-series-unique-counts"]], "polars.Series.take_every": [[905, "polars-series-take-every"]], "Struct": [[937, "struct"], [560, "struct"]], "polars.Series.to_frame": [[911, "polars-series-to-frame"]], "String": [[936, "string"], [559, "string"]], "polars.Series.value_counts": [[921, "polars-series-value-counts"]], "polars.Series.str.to_lowercase": [[895, "polars-series-str-to-lowercase"]], "polars.Series.str.replace_all": [[885, "polars-series-str-replace-all"]], "Binary": [[926, "binary"], [548, "binary"]], "Manipulation/selection": [[935, "manipulation-selection"], [650, "manipulation-selection"], [558, "manipulation-selection"], [247, "manipulation-selection"]], "Utils": [[941, "utils"]], "polars.Series.str.strptime": [[894, "polars-series-str-strptime"]], "Categories": [[928, "categories"], [550, "categories"]], "polars.Series.to_numpy": [[914, "polars-series-to-numpy"]], "Miscellaneous": [[934, "miscellaneous"], [649, "miscellaneous"], [557, "miscellaneous"], [563, "miscellaneous"], [246, "miscellaneous"]], "polars.Series.top_k": [[917, "polars-series-top-k"]], "polars.Series.to_arrow": [[909, "polars-series-to-arrow"]], "polars.Series.str.rstrip": [[887, "polars-series-str-rstrip"]], "polars.LazyFrame.unnest": [[622, "polars-lazyframe-unnest"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[643, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.LazyFrame.take_every": [[619, "polars-lazyframe-take-every"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[644, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.LazyFrame.sink_parquet": [[613, "polars-lazyframe-sink-parquet"]], "polars.Series.arctanh": [[663, "polars-series-arctanh"]], "polars.Series.arg_sort": [[666, "polars-series-arg-sort"]], "polars.Series.arr": [[669, "polars-series-arr"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[636, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.Series.append": [[656, "polars-series-append"]], "polars.LazyFrame.with_columns": [[626, "polars-lazyframe-with-columns"]], "polars.Series.arr.concat": [[672, "polars-series-arr-concat"]], "polars.Series.arg_true": [[667, "polars-series-arg-true"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[633, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[640, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[642, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.LazyFrame.sum": [[617, "polars-lazyframe-sum"]], "polars.Series.abs": [[652, "polars-series-abs"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[631, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.Series.arr.arg_max": [[670, "polars-series-arr-arg-max"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[635, "polars-lazyframe-groupby-lazygroupby-head"]], "LazyFrame": [[648, "lazyframe"]], "polars.LazyFrame.update": [[623, "polars-lazyframe-update"]], "polars.LazyFrame.std": [[616, "polars-lazyframe-std"]], "polars.LazyFrame.with_row_count": [[628, "polars-lazyframe-with-row-count"]], "Read/write logical plan": [[649, "read-write-logical-plan"]], "polars.LazyFrame.width": [[625, "polars-lazyframe-width"]], "polars.Series.arr.count_match": [[674, "polars-series-arr-count-match"]], "polars.Series.arr.first": [[678, "polars-series-arr-first"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[638, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.Series.apply": [[657, "polars-series-apply"]], "polars.Series.arr.eval": [[676, "polars-series-arr-eval"]], "polars.LazyFrame.with_context": [[627, "polars-lazyframe-with-context"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[634, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.Series.arg_min": [[665, "polars-series-arg-min"]], "polars.Series.arr.explode": [[677, "polars-series-arr-explode"]], "polars.Series.arg_unique": [[668, "polars-series-arg-unique"]], "polars.LazyFrame.var": [[624, "polars-lazyframe-var"]], "polars.LazyFrame.sink_ipc": [[612, "polars-lazyframe-sink-ipc"]], "polars.Series.arccos": [[658, "polars-series-arccos"]], "polars.Series.alias": [[653, "polars-series-alias"]], "polars.Series.all": [[654, "polars-series-all"]], "polars.Series.arctan": [[662, "polars-series-arctan"]], "polars.Series.arg_max": [[664, "polars-series-arg-max"]], "polars.Series.arcsin": [[660, "polars-series-arcsin"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[639, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.Series.arr.diff": [[675, "polars-series-arr-diff"]], "polars.LazyFrame.tail": [[618, "polars-lazyframe-tail"]], "polars.Series.arcsinh": [[661, "polars-series-arcsinh"]], "polars.LazyFrame.unique": [[621, "polars-lazyframe-unique"]], "polars.Series.arr.contains": [[673, "polars-series-arr-contains"]], "polars.LazyFrame.write_json": [[629, "polars-lazyframe-write-json"]], "polars.LazyFrame.sort": [[615, "polars-lazyframe-sort"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[630, "polars-lazyframe-groupby-lazygroupby-agg"]], "GroupBy": [[647, "groupby"], [244, "groupby"]], "polars.LazyFrame.slice": [[614, "polars-lazyframe-slice"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[641, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.Series.arr.get": [[679, "polars-series-arr-get"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[632, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.Series.arccosh": [[659, "polars-series-arccosh"]], "polars.Series.arr.arg_min": [[671, "polars-series-arr-arg-min"]], "polars.Series.any": [[655, "polars-series-any"]], "polars.LazyFrame.top_k": [[620, "polars-lazyframe-top-k"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[637, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.all": [[501, "polars-all"]], "polars.cov": [[513, "polars-cov"]], "polars.apply": [[503, "polars-apply"]], "polars.cumfold": [[514, "polars-cumfold"]], "polars.concat_str": [[510, "polars-concat-str"]], "polars.mean": [[532, "polars-mean"]], "polars.Expr.tail": [[488, "polars-expr-tail"]], "polars.spearman_rank_corr": [[541, "polars-spearman-rank-corr"]], "polars.Expr.to_physical": [[493, "polars-expr-to-physical"]], "polars.reduce": [[538, "polars-reduce"]], "polars.datetime": [[518, "polars-datetime"]], "polars.col": [[508, "polars-col"]], "polars.Expr.str.starts_with": [[478, "polars-expr-str-starts-with"]], "polars.duration": [[519, "polars-duration"]], "polars.Expr.str.splitn": [[477, "polars-expr-str-splitn"]], "polars.any": [[502, "polars-any"]], "polars.Expr.tanh": [[492, "polars-expr-tanh"]], "polars.Expr.str.strip": [[479, "polars-expr-str-strip"]], "polars.head": [[527, "polars-head"]], "polars.median": [[533, "polars-median"]], "polars.list": [[528, "polars-list"]], "polars.Expr.where": [[500, "polars-expr-where"]], "polars.groups": [[526, "polars-groups"]], "polars.cumsum": [[516, "polars-cumsum"]], "polars.Expr.struct.field": [[484, "polars-expr-struct-field"]], "polars.from_epoch": [[525, "polars-from-epoch"]], "polars.struct": [[543, "polars-struct"]], "polars.Expr.unique_counts": [[496, "polars-expr-unique-counts"]], "polars.Expr.str.to_uppercase": [[482, "polars-expr-str-to-uppercase"]], "polars.max": [[531, "polars-max"]], "polars.repeat": [[539, "polars-repeat"]], "polars.coalesce": [[507, "polars-coalesce"]], "polars.arange": [[504, "polars-arange"]], "polars.Expr.str.zfill": [[483, "polars-expr-str-zfill"]], "polars.Expr.value_counts": [[498, "polars-expr-value-counts"]], "polars.corr": [[511, "polars-corr"]], "polars.Expr.str.to_lowercase": [[481, "polars-expr-str-to-lowercase"]], "polars.first": [[522, "polars-first"]], "polars.n_unique": [[535, "polars-n-unique"]], "polars.Expr.unique": [[495, "polars-expr-unique"]], "polars.std": [[542, "polars-std"]], "polars.date": [[517, "polars-date"]], "polars.exclude": [[521, "polars-exclude"]], "polars.select": [[540, "polars-select"]], "polars.Expr.var": [[499, "polars-expr-var"]], "polars.Expr.take": [[489, "polars-expr-take"]], "polars.Expr.top_k": [[494, "polars-expr-top-k"]], "polars.Expr.take_every": [[490, "polars-expr-take-every"]], "polars.concat_list": [[509, "polars-concat-list"]], "polars.Expr.str.strptime": [[480, "polars-expr-str-strptime"]], "polars.count": [[512, "polars-count"]], "polars.Expr.struct.rename_fields": [[485, "polars-expr-struct-rename-fields"]], "polars.min": [[534, "polars-min"]], "polars.element": [[520, "polars-element"]], "polars.format": [[524, "polars-format"]], "polars.arg_sort_by": [[505, "polars-arg-sort-by"]], "polars.fold": [[523, "polars-fold"]], "polars.Expr.upper_bound": [[497, "polars-expr-upper-bound"]], "polars.lit": [[529, "polars-lit"]], "polars.Expr.str.split_exact": [[476, "polars-expr-str-split-exact"]], "polars.Expr.tan": [[491, "polars-expr-tan"]], "polars.avg": [[506, "polars-avg"]], "polars.cumreduce": [[515, "polars-cumreduce"]], "polars.Expr.suffix": [[486, "polars-expr-suffix"]], "polars.pearson_corr": [[536, "polars-pearson-corr"]], "polars.map": [[530, "polars-map"]], "polars.quantile": [[537, "polars-quantile"]], "polars.Expr.sum": [[487, "polars-expr-sum"]], "polars.Expr.rolling_sum": [[435, "polars-expr-rolling-sum"]], "polars.Expr.pipe": [[416, "polars-expr-pipe"]], "polars.Expr.str.decode": [[457, "polars-expr-str-decode"]], "polars.Expr.set_sorted": [[440, "polars-expr-set-sorted"]], "polars.Expr.sinh": [[447, "polars-expr-sinh"]], "polars.Expr.sort_by": [[451, "polars-expr-sort-by"]], "polars.Expr.mode": [[409, "polars-expr-mode"]], "polars.Expr.nan_min": [[412, "polars-expr-nan-min"]], "polars.Expr.pct_change": [[415, "polars-expr-pct-change"]], "polars.Expr.skew": [[448, "polars-expr-skew"]], "polars.Expr.rolling_mean": [[429, "polars-expr-rolling-mean"]], "polars.Expr.reshape": [[425, "polars-expr-reshape"]], "polars.Expr.reinterpret": [[423, "polars-expr-reinterpret"]], "polars.Expr.n_unique": [[410, "polars-expr-n-unique"]], "polars.Expr.rolling_skew": [[433, "polars-expr-rolling-skew"]], "polars.Expr.round": [[437, "polars-expr-round"]], "polars.Expr.rolling_min": [[431, "polars-expr-rolling-min"]], "polars.Expr.shrink_dtype": [[443, "polars-expr-shrink-dtype"]], "polars.Expr.str.extract": [[461, "polars-expr-str-extract"]], "polars.Expr.rolling_max": [[428, "polars-expr-rolling-max"]], "polars.Expr.shuffle": [[444, "polars-expr-shuffle"]], "polars.Expr.std": [[453, "polars-expr-std"]], "polars.Expr.nan_max": [[411, "polars-expr-nan-max"]], "polars.Expr.pow": [[417, "polars-expr-pow"]], "polars.Expr.str.contains": [[455, "polars-expr-str-contains"]], "polars.Expr.rechunk": [[422, "polars-expr-rechunk"]], "polars.Expr.rolling_var": [[436, "polars-expr-rolling-var"]], "polars.Expr.rolling_quantile": [[432, "polars-expr-rolling-quantile"]], "polars.Expr.sin": [[446, "polars-expr-sin"]], "polars.Expr.str.n_chars": [[468, "polars-expr-str-n-chars"]], "polars.Expr.shift_and_fill": [[442, "polars-expr-shift-and-fill"]], "polars.Expr.str.ends_with": [[459, "polars-expr-str-ends-with"]], "polars.Expr.str.explode": [[460, "polars-expr-str-explode"]], "polars.Expr.str.json_path_match": [[464, "polars-expr-str-json-path-match"]], "polars.Expr.str.replace_all": [[471, "polars-expr-str-replace-all"]], "polars.Expr.str.count_match": [[456, "polars-expr-str-count-match"]], "polars.Expr.str.rstrip": [[473, "polars-expr-str-rstrip"]], "polars.Expr.str.rjust": [[472, "polars-expr-str-rjust"]], "polars.Expr.sign": [[445, "polars-expr-sign"]], "polars.Expr.str.ljust": [[466, "polars-expr-str-ljust"]], "polars.Expr.prefix": [[418, "polars-expr-prefix"]], "polars.Expr.quantile": [[420, "polars-expr-quantile"]], "polars.Expr.repeat_by": [[424, "polars-expr-repeat-by"]], "polars.Expr.sort": [[450, "polars-expr-sort"]], "polars.Expr.str.json_extract": [[463, "polars-expr-str-json-extract"]], "polars.Expr.product": [[419, "polars-expr-product"]], "polars.Expr.min": [[408, "polars-expr-min"]], "polars.Expr.str.parse_int": [[469, "polars-expr-str-parse-int"]], "polars.Expr.str.concat": [[454, "polars-expr-str-concat"]], "polars.Expr.reverse": [[426, "polars-expr-reverse"]], "polars.Expr.search_sorted": [[439, "polars-expr-search-sorted"]], "polars.Expr.str.extract_all": [[462, "polars-expr-str-extract-all"]], "polars.Expr.str.lstrip": [[467, "polars-expr-str-lstrip"]], "polars.Expr.slice": [[449, "polars-expr-slice"]], "polars.Expr.str.split": [[475, "polars-expr-str-split"]], "polars.Expr.str.lengths": [[465, "polars-expr-str-lengths"]], "polars.Expr.str.replace": [[470, "polars-expr-str-replace"]], "polars.Expr.str.slice": [[474, "polars-expr-str-slice"]], "polars.Expr.rolling_apply": [[427, "polars-expr-rolling-apply"]], "polars.Expr.str.encode": [[458, "polars-expr-str-encode"]], "polars.Expr.null_count": [[413, "polars-expr-null-count"]], "polars.Expr.rolling_std": [[434, "polars-expr-rolling-std"]], "polars.Expr.over": [[414, "polars-expr-over"]], "polars.Expr.sample": [[438, "polars-expr-sample"]], "polars.Expr.shift": [[441, "polars-expr-shift"]], "polars.Expr.rolling_median": [[430, "polars-expr-rolling-median"]], "polars.Expr.sqrt": [[452, "polars-expr-sqrt"]], "polars.Expr.rank": [[421, "polars-expr-rank"]], "polars.Expr.dt.seconds": [[347, "polars-expr-dt-seconds"]], "polars.Expr.ewm_mean": [[357, "polars-expr-ewm-mean"]], "polars.Expr.forward_fill": [[370, "polars-expr-forward-fill"]], "polars.Expr.log10": [[394, "polars-expr-log10"]], "polars.Expr.dt.truncate": [[351, "polars-expr-dt-truncate"]], "polars.Expr.entropy": [[356, "polars-expr-entropy"]], "polars.Expr.is_not_nan": [[383, "polars-expr-is-not-nan"]], "polars.Expr.is_finite": [[377, "polars-expr-is-finite"]], "polars.Expr.dt.weekday": [[353, "polars-expr-dt-weekday"]], "polars.Expr.is_first": [[378, "polars-expr-is-first"]], "polars.Expr.keep_name": [[387, "polars-expr-keep-name"]], "polars.Expr.ewm_std": [[358, "polars-expr-ewm-std"]], "polars.Expr.last": [[389, "polars-expr-last"]], "polars.Expr.exclude": [[360, "polars-expr-exclude"]], "polars.Expr.is_unique": [[386, "polars-expr-is-unique"]], "polars.Expr.kurtosis": [[388, "polars-expr-kurtosis"]], "polars.Expr.is_in": [[379, "polars-expr-is-in"]], "polars.Expr.hash": [[371, "polars-expr-hash"]], "polars.Expr.meta.has_multiple_outputs": [[402, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.is_not": [[382, "polars-expr-is-not"]], "polars.Expr.explode": [[362, "polars-expr-explode"]], "polars.Expr.meta.undo_aliases": [[407, "polars-expr-meta-undo-aliases"]], "polars.Expr.dt.with_time_unit": [[354, "polars-expr-dt-with-time-unit"]], "polars.Expr.map": [[396, "polars-expr-map"]], "polars.Expr.exp": [[361, "polars-expr-exp"]], "polars.Expr.dt.offset_by": [[341, "polars-expr-dt-offset-by"]], "polars.Expr.fill_null": [[365, "polars-expr-fill-null"]], "polars.Expr.list": [[392, "polars-expr-list"]], "polars.Expr.lower_bound": [[395, "polars-expr-lower-bound"]], "polars.Expr.dt.quarter": [[343, "polars-expr-dt-quarter"]], "polars.Expr.dt.timestamp": [[350, "polars-expr-dt-timestamp"]], "polars.Expr.meta.root_names": [[406, "polars-expr-meta-root-names"]], "polars.Expr.dt.year": [[355, "polars-expr-dt-year"]], "polars.Expr.is_duplicated": [[376, "polars-expr-is-duplicated"]], "polars.Expr.log": [[393, "polars-expr-log"]], "polars.Expr.dt.week": [[352, "polars-expr-dt-week"]], "polars.Expr.dt.second": [[346, "polars-expr-dt-second"]], "polars.Expr.is_not_null": [[384, "polars-expr-is-not-null"]], "polars.Expr.extend_constant": [[363, "polars-expr-extend-constant"]], "polars.Expr.meta.pop": [[405, "polars-expr-meta-pop"]], "polars.Expr.first": [[367, "polars-expr-first"]], "polars.Expr.floor": [[369, "polars-expr-floor"]], "polars.Expr.dt.nanoseconds": [[340, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.round": [[345, "polars-expr-dt-round"]], "polars.Expr.head": [[372, "polars-expr-head"]], "polars.Expr.is_between": [[375, "polars-expr-is-between"]], "polars.Expr.len": [[390, "polars-expr-len"]], "polars.Expr.max": [[399, "polars-expr-max"]], "polars.Expr.dt.time": [[349, "polars-expr-dt-time"]], "polars.Expr.meta.output_name": [[404, "polars-expr-meta-output-name"]], "polars.Expr.filter": [[366, "polars-expr-filter"]], "polars.Expr.map_alias": [[397, "polars-expr-map-alias"]], "polars.Expr.meta.is_regex_projection": [[403, "polars-expr-meta-is-regex-projection"]], "polars.Expr.map_dict": [[398, "polars-expr-map-dict"]], "polars.Expr.is_nan": [[381, "polars-expr-is-nan"]], "polars.Expr.flatten": [[368, "polars-expr-flatten"]], "polars.Expr.is_infinite": [[380, "polars-expr-is-infinite"]], "polars.Expr.dt.ordinal_day": [[342, "polars-expr-dt-ordinal-day"]], "polars.Expr.mean": [[400, "polars-expr-mean"]], "polars.Expr.dt.strftime": [[348, "polars-expr-dt-strftime"]], "polars.Expr.interpolate": [[374, "polars-expr-interpolate"]], "polars.Expr.is_null": [[385, "polars-expr-is-null"]], "polars.Expr.dt.replace_time_zone": [[344, "polars-expr-dt-replace-time-zone"]], "polars.Expr.ewm_var": [[359, "polars-expr-ewm-var"]], "polars.Expr.inspect": [[373, "polars-expr-inspect"]], "polars.Expr.limit": [[391, "polars-expr-limit"]], "polars.Expr.fill_nan": [[364, "polars-expr-fill-nan"]], "polars.Expr.median": [[401, "polars-expr-median"]], "polars.Expr.cos": [[307, "polars-expr-cos"]], "polars.Expr.arr.take": [[292, "polars-expr-arr-take"]], "polars.Expr.clip": [[304, "polars-expr-clip"]], "polars.Expr.dt.millisecond": [[334, "polars-expr-dt-millisecond"]], "polars.Expr.dt.milliseconds": [[335, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.iso_year": [[331, "polars-expr-dt-iso-year"]], "polars.Expr.drop_nans": [[318, "polars-expr-drop-nans"]], "polars.Expr.arr.join": [[280, "polars-expr-arr-join"]], "polars.Expr.dt.is_leap_year": [[330, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.minute": [[336, "polars-expr-dt-minute"]], "polars.Expr.dt.date": [[323, "polars-expr-dt-date"]], "polars.Expr.arr.get": [[278, "polars-expr-arr-get"]], "polars.Expr.cummin": [[312, "polars-expr-cummin"]], "polars.Expr.arr.unique": [[294, "polars-expr-arr-unique"]], "polars.Expr.cummax": [[311, "polars-expr-cummax"]], "polars.Expr.arr.min": [[285, "polars-expr-arr-min"]], "polars.Expr.dt.minutes": [[337, "polars-expr-dt-minutes"]], "polars.Expr.cumcount": [[310, "polars-expr-cumcount"]], "polars.Expr.dt.cast_time_unit": [[320, "polars-expr-dt-cast-time-unit"]], "polars.Expr.arr.max": [[283, "polars-expr-arr-max"]], "polars.Expr.bin.ends_with": [[299, "polars-expr-bin-ends-with"]], "polars.Expr.dt.datetime": [[324, "polars-expr-dt-datetime"]], "polars.Expr.arr.reverse": [[286, "polars-expr-arr-reverse"]], "polars.Expr.arr.eval": [[275, "polars-expr-arr-eval"]], "polars.Expr.arr.mean": [[284, "polars-expr-arr-mean"]], "polars.Expr.cumsum": [[314, "polars-expr-cumsum"]], "polars.Expr.diff": [[316, "polars-expr-diff"]], "polars.Expr.dt.hour": [[328, "polars-expr-dt-hour"]], "polars.Expr.dot": [[317, "polars-expr-dot"]], "polars.Expr.cast": [[301, "polars-expr-cast"]], "polars.Expr.arr.sort": [[289, "polars-expr-arr-sort"]], "polars.Expr.count": [[309, "polars-expr-count"]], "polars.Expr.cosh": [[308, "polars-expr-cosh"]], "polars.Expr.arr.diff": [[274, "polars-expr-arr-diff"]], "polars.Expr.bin.contains": [[296, "polars-expr-bin-contains"]], "polars.Expr.dt.microsecond": [[332, "polars-expr-dt-microsecond"]], "polars.Expr.backward_fill": [[295, "polars-expr-backward-fill"]], "polars.Expr.arr.first": [[277, "polars-expr-arr-first"]], "polars.Expr.dt.month": [[338, "polars-expr-dt-month"]], "polars.Expr.arr.last": [[281, "polars-expr-arr-last"]], "polars.Expr.arr.count_match": [[273, "polars-expr-arr-count-match"]], "polars.Expr.bin.encode": [[298, "polars-expr-bin-encode"]], "polars.Expr.arr.lengths": [[282, "polars-expr-arr-lengths"]], "polars.Expr.arr.contains": [[272, "polars-expr-arr-contains"]], "polars.Expr.arr.to_struct": [[293, "polars-expr-arr-to-struct"]], "polars.Expr.dt.combine": [[321, "polars-expr-dt-combine"]], "polars.Expr.dt.convert_time_zone": [[322, "polars-expr-dt-convert-time-zone"]], "polars.Expr.arr.explode": [[276, "polars-expr-arr-explode"]], "polars.Expr.ceil": [[303, "polars-expr-ceil"]], "polars.Expr.cumulative_eval": [[315, "polars-expr-cumulative-eval"]], "polars.Expr.dt.hours": [[329, "polars-expr-dt-hours"]], "polars.Expr.bin.decode": [[297, "polars-expr-bin-decode"]], "polars.Expr.bin.starts_with": [[300, "polars-expr-bin-starts-with"]], "polars.Expr.cumprod": [[313, "polars-expr-cumprod"]], "polars.Expr.clip_min": [[306, "polars-expr-clip-min"]], "polars.Expr.dt.day": [[325, "polars-expr-dt-day"]], "polars.Expr.arr.shift": [[287, "polars-expr-arr-shift"]], "polars.Expr.cat.set_ordering": [[302, "polars-expr-cat-set-ordering"]], "polars.Expr.clip_max": [[305, "polars-expr-clip-max"]], "polars.Expr.drop_nulls": [[319, "polars-expr-drop-nulls"]], "polars.Expr.arr.tail": [[291, "polars-expr-arr-tail"]], "polars.Expr.dt.epoch": [[327, "polars-expr-dt-epoch"]], "polars.Expr.dt.nanosecond": [[339, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.days": [[326, "polars-expr-dt-days"]], "polars.Expr.arr.slice": [[288, "polars-expr-arr-slice"]], "polars.Expr.arr.sum": [[290, "polars-expr-arr-sum"]], "polars.Expr.arr.head": [[279, "polars-expr-arr-head"]], "polars.Expr.dt.microseconds": [[333, "polars-expr-dt-microseconds"]], "polars.LazyFrame.shift": [[609, "polars-lazyframe-shift"]], "polars.LazyFrame.groupby_dynamic": [[584, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.head": [[586, "polars-lazyframe-head"]], "polars.LazyFrame.join": [[589, "polars-lazyframe-join"]], "polars.LazyFrame.max": [[595, "polars-lazyframe-max"]], "polars.LazyFrame.explain": [[575, "polars-lazyframe-explain"]], "Functions": [[553, "functions"], [563, "functions"]], "polars.LazyFrame.cache": [[567, "polars-lazyframe-cache"]], "polars.LazyFrame.collect": [[570, "polars-lazyframe-collect"]], "Conversion": [[563, "conversion"]], "Eager/Lazy functions": [[563, "eager-lazy-functions"]], "Parallelization": [[563, "parallelization"]], "StringCache": [[563, "stringcache"]], "polars.LazyFrame.mean": [[596, "polars-lazyframe-mean"]], "polars.LazyFrame.fetch": [[577, "polars-lazyframe-fetch"]], "polars.LazyFrame.fill_null": [[579, "polars-lazyframe-fill-null"]], "polars.LazyFrame.lazy": [[592, "polars-lazyframe-lazy"]], "polars.LazyFrame.schema": [[607, "polars-lazyframe-schema"]], "Window": [[562, "window"]], "polars.LazyFrame.clone": [[569, "polars-lazyframe-clone"]], "Meta": [[556, "meta"]], "polars.LazyFrame.drop": [[572, "polars-lazyframe-drop"]], "polars.LazyFrame.limit": [[593, "polars-lazyframe-limit"]], "polars.var": [[546, "polars-var"]], "polars.LazyFrame.reverse": [[606, "polars-lazyframe-reverse"]], "polars.LazyFrame.groupby": [[583, "polars-lazyframe-groupby"]], "polars.LazyFrame.min": [[600, "polars-lazyframe-min"]], "polars.LazyFrame.median": [[597, "polars-lazyframe-median"]], "polars.LazyFrame.inspect": [[587, "polars-lazyframe-inspect"]], "polars.LazyFrame.melt": [[598, "polars-lazyframe-melt"]], "Expressions": [[554, "expressions"]], "polars.LazyFrame.columns": [[571, "polars-lazyframe-columns"]], "polars.LazyFrame.fill_nan": [[578, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.quantile": [[603, "polars-lazyframe-quantile"]], "polars.LazyFrame.shift_and_fill": [[610, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.show_graph": [[611, "polars-lazyframe-show-graph"]], "Input/output": [[565, "input-output"]], "CSV": [[565, "csv"]], "Feather/ IPC": [[565, "feather-ipc"]], "Parquet": [[565, "parquet"]], "Database": [[565, "database"]], "JSON": [[565, "json"]], "AVRO": [[565, "avro"]], "Excel": [[565, "excel"]], "Delta Lake": [[565, "delta-lake"]], "Datasets": [[565, "datasets"]], "BatchedCsvReader": [[565, "batchedcsvreader"]], "API reference": [[564, "api-reference"]], "polars.when": [[547, "polars-when"]], "polars.LazyFrame.dtypes": [[574, "polars-lazyframe-dtypes"]], "polars.LazyFrame.groupby_rolling": [[585, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.clear": [[568, "polars-lazyframe-clear"]], "polars.LazyFrame.from_json": [[582, "polars-lazyframe-from-json"]], "polars.LazyFrame.interpolate": [[588, "polars-lazyframe-interpolate"]], "polars.LazyFrame.last": [[591, "polars-lazyframe-last"]], "polars.LazyFrame.profile": [[602, "polars-lazyframe-profile"]], "polars.LazyFrame.drop_nulls": [[573, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.first": [[581, "polars-lazyframe-first"]], "polars.LazyFrame.explode": [[576, "polars-lazyframe-explode"]], "polars.LazyFrame.filter": [[580, "polars-lazyframe-filter"]], "polars.LazyFrame.rename": [[605, "polars-lazyframe-rename"]], "polars.LazyFrame.pipe": [[601, "polars-lazyframe-pipe"]], "polars.sum": [[544, "polars-sum"]], "polars.LazyFrame.map": [[594, "polars-lazyframe-map"]], "Columns / names": [[551, "columns-names"]], "polars.LazyFrame.join_asof": [[590, "polars-lazyframe-join-asof"]], "polars.LazyFrame.select": [[608, "polars-lazyframe-select"]], "polars.tail": [[545, "polars-tail"]], "polars.LazyFrame.merge_sorted": [[599, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.read_json": [[604, "polars-lazyframe-read-json"]], "polars.DataFrame.slice": [[197, "polars-dataframe-slice"]], "polars.DataFrame.fold": [[145, "polars-dataframe-fold"]], "polars.DataFrame.frame_equal": [[146, "polars-dataframe-frame-equal"]], "polars.DataFrame.drop_nulls": [[136, "polars-dataframe-drop-nulls"]], "polars.DataFrame.n_chunks": [[175, "polars-dataframe-n-chunks"]], "polars.DataFrame.dtypes": [[137, "polars-dataframe-dtypes"]], "polars.DataFrame.null_count": [[177, "polars-dataframe-null-count"]], "polars.DataFrame.product": [[181, "polars-dataframe-product"]], "polars.DataFrame.fill_nan": [[141, "polars-dataframe-fill-nan"]], "polars.DataFrame.std": [[199, "polars-dataframe-std"]], "polars.DataFrame.groupby_dynamic": [[151, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.extend": [[140, "polars-dataframe-extend"]], "polars.DataFrame.insert_at_idx": [[157, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.sample": [[190, "polars-dataframe-sample"]], "polars.DataFrame.shape": [[193, "polars-dataframe-shape"]], "polars.DataFrame.is_duplicated": [[159, "polars-dataframe-is-duplicated"]], "polars.DataFrame.fill_null": [[142, "polars-dataframe-fill-null"]], "polars.DataFrame.hash_rows": [[153, "polars-dataframe-hash-rows"]], "polars.DataFrame.find_idx_by_name": [[144, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.hstack": [[156, "polars-dataframe-hstack"]], "polars.DataFrame.groupby_rolling": [[152, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.iter_slices": [[164, "polars-dataframe-iter-slices"]], "polars.DataFrame.to_arrow": [[203, "polars-dataframe-to-arrow"]], "polars.DataFrame.join_asof": [[166, "polars-dataframe-join-asof"]], "polars.DataFrame.shrink_to_fit": [[196, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.explode": [[139, "polars-dataframe-explode"]], "polars.DataFrame.height": [[155, "polars-dataframe-height"]], "polars.DataFrame.mean": [[170, "polars-dataframe-mean"]], "polars.DataFrame.rename": [[184, "polars-dataframe-rename"]], "polars.DataFrame.filter": [[143, "polars-dataframe-filter"]], "polars.DataFrame.quantile": [[182, "polars-dataframe-quantile"]], "polars.DataFrame.glimpse": [[149, "polars-dataframe-glimpse"]], "polars.DataFrame.limit": [[168, "polars-dataframe-limit"]], "polars.DataFrame.row": [[188, "polars-dataframe-row"]], "polars.DataFrame.rows": [[189, "polars-dataframe-rows"]], "polars.DataFrame.tail": [[201, "polars-dataframe-tail"]], "polars.DataFrame.get_column": [[147, "polars-dataframe-get-column"]], "polars.DataFrame.n_unique": [[176, "polars-dataframe-n-unique"]], "polars.DataFrame.interpolate": [[158, "polars-dataframe-interpolate"]], "polars.DataFrame.replace": [[185, "polars-dataframe-replace"]], "polars.DataFrame.lazy": [[167, "polars-dataframe-lazy"]], "polars.DataFrame.replace_at_idx": [[186, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.groupby": [[150, "polars-dataframe-groupby"]], "polars.DataFrame.iter_rows": [[163, "polars-dataframe-iter-rows"]], "polars.DataFrame.item": [[162, "polars-dataframe-item"]], "polars.DataFrame.is_unique": [[161, "polars-dataframe-is-unique"]], "polars.DataFrame.max": [[169, "polars-dataframe-max"]], "polars.DataFrame.min": [[174, "polars-dataframe-min"]], "polars.DataFrame.pivot": [[180, "polars-dataframe-pivot"]], "polars.DataFrame.partition_by": [[178, "polars-dataframe-partition-by"]], "polars.DataFrame.sort": [[198, "polars-dataframe-sort"]], "polars.DataFrame.get_columns": [[148, "polars-dataframe-get-columns"]], "polars.DataFrame.estimated_size": [[138, "polars-dataframe-estimated-size"]], "polars.DataFrame.is_empty": [[160, "polars-dataframe-is-empty"]], "polars.DataFrame.join": [[165, "polars-dataframe-join"]], "polars.DataFrame.sum": [[200, "polars-dataframe-sum"]], "polars.DataFrame.rechunk": [[183, "polars-dataframe-rechunk"]], "polars.DataFrame.median": [[171, "polars-dataframe-median"]], "polars.DataFrame.merge_sorted": [[173, "polars-dataframe-merge-sorted"]], "polars.DataFrame.reverse": [[187, "polars-dataframe-reverse"]], "polars.DataFrame.schema": [[191, "polars-dataframe-schema"]], "polars.DataFrame.select": [[192, "polars-dataframe-select"]], "polars.DataFrame.shift": [[194, "polars-dataframe-shift"]], "polars.DataFrame.take_every": [[202, "polars-dataframe-take-every"]], "polars.DataFrame.melt": [[172, "polars-dataframe-melt"]], "polars.DataFrame.head": [[154, "polars-dataframe-head"]], "polars.DataFrame.pipe": [[179, "polars-dataframe-pipe"]], "polars.DataFrame.shift_and_fill": [[195, "polars-dataframe-shift-and-fill"]], "polars.Expr.alias": [[253, "polars-expr-alias"]], "polars.DataFrame.to_dicts": [[205, "polars-dataframe-to-dicts"]], "polars.dataframe.groupby.GroupBy.min": [[235, "polars-dataframe-groupby-groupby-min"]], "polars.DataFrame.to_init_repr": [[207, "polars-dataframe-to-init-repr"]], "polars.Expr.arctanh": [[263, "polars-expr-arctanh"]], "polars.DataFrame.to_numpy": [[208, "polars-dataframe-to-numpy"]], "polars.DataFrame.width": [[221, "polars-dataframe-width"]], "polars.Expr.apply": [[257, "polars-expr-apply"]], "polars.Expr.arccosh": [[259, "polars-expr-arccosh"]], "polars.Expr.any": [[255, "polars-expr-any"]], "polars.DataFrame.upsample": [[218, "polars-dataframe-upsample"]], "polars.dataframe.groupby.GroupBy.quantile": [[237, "polars-dataframe-groupby-groupby-quantile"]], "polars.DataFrame.with_columns": [[222, "polars-dataframe-with-columns"]], "polars.DataFrame.top_k": [[212, "polars-dataframe-top-k"]], "DataFrame": [[245, "dataframe"]], "polars.DataFrame.vstack": [[220, "polars-dataframe-vstack"]], "polars.DataFrame.to_series": [[210, "polars-dataframe-to-series"]], "polars.dataframe.groupby.GroupBy.first": [[229, "polars-dataframe-groupby-groupby-first"]], "polars.Expr.arg_max": [[264, "polars-expr-arg-max"]], "polars.dataframe.groupby.GroupBy.mean": [[233, "polars-dataframe-groupby-groupby-mean"]], "polars.DataFrame.to_struct": [[211, "polars-dataframe-to-struct"]], "polars.Expr.agg_groups": [[252, "polars-expr-agg-groups"]], "polars.dataframe.groupby.GroupBy.last": [[231, "polars-dataframe-groupby-groupby-last"]], "polars.dataframe.groupby.GroupBy.all": [[226, "polars-dataframe-groupby-groupby-all"]], "polars.Expr.arg_unique": [[268, "polars-expr-arg-unique"]], "polars.DataFrame.unnest": [[215, "polars-dataframe-unnest"]], "polars.Expr.arcsin": [[260, "polars-expr-arcsin"]], "polars.DataFrame.to_dict": [[204, "polars-dataframe-to-dict"]], "polars.DataFrame.to_dummies": [[206, "polars-dataframe-to-dummies"]], "polars.DataFrame.unstack": [[216, "polars-dataframe-unstack"]], "polars.DataFrame.to_pandas": [[209, "polars-dataframe-to-pandas"]], "polars.dataframe.groupby.GroupBy.agg": [[225, "polars-dataframe-groupby-groupby-agg"]], "Exceptions": [[249, "exceptions"]], "polars.Expr.arr.arg_max": [[269, "polars-expr-arr-arg-max"]], "polars.dataframe.groupby.GroupBy.max": [[232, "polars-dataframe-groupby-groupby-max"]], "polars.Expr.arr.arg_min": [[270, "polars-expr-arr-arg-min"]], "polars.Expr.append": [[256, "polars-expr-append"]], "polars.Expr.arr.concat": [[271, "polars-expr-arr-concat"]], "polars.DataFrame.unique": [[214, "polars-dataframe-unique"]], "polars.dataframe.groupby.GroupBy.median": [[234, "polars-dataframe-groupby-groupby-median"]], "polars.dataframe.groupby.GroupBy.tail": [[239, "polars-dataframe-groupby-groupby-tail"]], "polars.dataframe.groupby.GroupBy.head": [[230, "polars-dataframe-groupby-groupby-head"]], "polars.dataframe.groupby.GroupBy.apply": [[227, "polars-dataframe-groupby-groupby-apply"]], "polars.DataFrame.var": [[219, "polars-dataframe-var"]], "polars.DataFrame.with_row_count": [[223, "polars-dataframe-with-row-count"]], "polars.DataFrame.transpose": [[213, "polars-dataframe-transpose"]], "Data types": [[248, "data-types"]], "Numeric": [[248, "numeric"]], "Nested": [[248, "nested"]], "Other": [[248, "other"]], "polars.Expr.abs": [[251, "polars-expr-abs"]], "polars.Expr.arg_true": [[267, "polars-expr-arg-true"]], "polars.Expr.all": [[254, "polars-expr-all"]], "polars.dataframe.groupby.GroupBy.sum": [[238, "polars-dataframe-groupby-groupby-sum"]], "polars.Expr.arg_min": [[265, "polars-expr-arg-min"]], "polars.dataframe.groupby.GroupBy.count": [[228, "polars-dataframe-groupby-groupby-count"]], "polars.Expr.arcsinh": [[261, "polars-expr-arcsinh"]], "polars.DataFrame.update": [[217, "polars-dataframe-update"]], "polars.Expr.arccos": [[258, "polars-expr-arccos"]], "polars.dataframe.groupby.GroupBy.__iter__": [[224, "polars-dataframe-groupby-groupby-iter"]], "polars.Expr.arg_sort": [[266, "polars-expr-arg-sort"]], "polars.dataframe.groupby.GroupBy.n_unique": [[236, "polars-dataframe-groupby-groupby-n-unique"]], "polars.Expr.arctan": [[262, "polars-expr-arctan"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[5, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[6, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[7, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[8, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[9, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[10, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[11, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[12, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[13, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[14, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[15, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[16, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[17, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[22, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[23, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[24, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[25, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[26, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[27, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[28, "polars.DataFrame.write_database"]], "write_excel() (polars.dataframe method)": [[29, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[30, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[31, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[32, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[33, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[34, "polars.DataType"]], "__init__() (polars.datatype method)": [[34, "polars.DataType.__init__"]], "date (class in polars)": [[35, "polars.Date"]], "__init__() (polars.date method)": [[35, "polars.Date.__init__"]], "datetime (class in polars)": [[36, "polars.Datetime"]], "__init__() (polars.datetime method)": [[36, "polars.Datetime.__init__"]], "decimal (class in polars)": [[37, "polars.Decimal"]], "__init__() (polars.decimal method)": [[37, "polars.Decimal.__init__"]], "duration (class in polars)": [[38, "polars.Duration"]], "__init__() (polars.duration method)": [[38, "polars.Duration.__init__"]], "float32 (class in polars)": [[39, "polars.Float32"]], "__init__() (polars.float32 method)": [[39, "polars.Float32.__init__"]], "float64 (class in polars)": [[40, "polars.Float64"]], "__init__() (polars.float64 method)": [[40, "polars.Float64.__init__"]], "int16 (class in polars)": [[41, "polars.Int16"]], "__init__() (polars.int16 method)": [[41, "polars.Int16.__init__"]], "int32 (class in polars)": [[42, "polars.Int32"]], "__init__() (polars.int32 method)": [[42, "polars.Int32.__init__"]], "int64 (class in polars)": [[43, "polars.Int64"]], "__init__() (polars.int64 method)": [[43, "polars.Int64.__init__"]], "int8 (class in polars)": [[44, "polars.Int8"]], "__init__() (polars.int8 method)": [[44, "polars.Int8.__init__"]], "list (class in polars)": [[45, "polars.List"]], "__init__() (polars.list method)": [[45, "polars.List.__init__"]], "null (class in polars)": [[46, "polars.Null"]], "__init__() (polars.null method)": [[46, "polars.Null.__init__"]], "object (class in polars)": [[47, "polars.Object"]], "__init__() (polars.object method)": [[47, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[48, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[49, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[50, "polars.SQLContext.register"]], "stringcache (class in polars)": [[51, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[51, "polars.StringCache.__init__"]], "struct (class in polars)": [[52, "polars.Struct"]], "__init__() (polars.struct method)": [[52, "polars.Struct.__init__"]], "time (class in polars)": [[53, "polars.Time"]], "__init__() (polars.time method)": [[53, "polars.Time.__init__"]], "uint16 (class in polars)": [[54, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[54, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[55, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[55, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[56, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[56, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[57, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[57, "polars.UInt8.__init__"]], "unknown (class in polars)": [[58, "polars.Unknown"]], "__init__() (polars.unknown method)": [[58, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[59, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[59, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[60, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[61, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[62, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[63, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[64, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[65, "polars.arg_where"]], "build_info() (in module polars)": [[66, "polars.build_info"]], "collect_all() (in module polars)": [[67, "polars.collect_all"]], "concat() (in module polars)": [[68, "polars.concat"]], "cut() (in module polars)": [[69, "polars.cut"]], "date_range() (in module polars)": [[70, "polars.date_range"]], "arrowerror": [[71, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[72, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[73, "polars.exceptions.ComputeError"]], "duplicateerror": [[74, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[75, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[76, "polars.exceptions.NoDataError"]], "norowsreturned": [[77, "polars.exceptions.NoRowsReturned"]], "panicexception": [[78, "polars.exceptions.PanicException"]], "rowsexception": [[79, "polars.exceptions.RowsException"]], "schemaerror": [[80, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[81, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[82, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[83, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturned": [[84, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[85, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[86, "polars.from_dataframe"]], "from_dict() (in module polars)": [[87, "polars.from_dict"]], "from_dicts() (in module polars)": [[88, "polars.from_dicts"]], "from_numpy() (in module polars)": [[89, "polars.from_numpy"]], "from_pandas() (in module polars)": [[90, "polars.from_pandas"]], "from_records() (in module polars)": [[91, "polars.from_records"]], "from_repr() (in module polars)": [[92, "polars.from_repr"]], "get_dummies() (in module polars)": [[93, "polars.get_dummies"]], "get_index_type() (in module polars)": [[94, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[95, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[96, "polars.ones"]], "read_avro() (in module polars)": [[97, "polars.read_avro"]], "read_csv() (in module polars)": [[98, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[99, "polars.read_csv_batched"]], "read_database() (in module polars)": [[100, "polars.read_database"]], "read_delta() (in module polars)": [[101, "polars.read_delta"]], "read_excel() (in module polars)": [[102, "polars.read_excel"]], "read_ipc() (in module polars)": [[103, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[104, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[105, "polars.read_json"]], "read_ndjson() (in module polars)": [[106, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[107, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[108, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[109, "polars.scan_csv"]], "scan_delta() (in module polars)": [[110, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[111, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[112, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[113, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[114, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[115, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[116, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[117, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[118, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[118, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[119, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[120, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[121, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[122, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[123, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[124, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[127, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[128, "polars.DataFrame.apply"]], "clear() (polars.dataframe method)": [[129, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[130, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[131, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[132, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[133, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[134, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[135, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[136, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[137, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[138, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[139, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[140, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[141, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[142, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[143, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[144, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[145, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[146, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[147, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[148, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[149, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[150, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[151, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[152, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[153, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[154, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[155, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[156, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[157, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[158, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[159, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[160, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[161, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[162, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[163, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[164, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[165, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[166, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[167, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[168, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[169, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[170, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[171, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[172, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[173, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[174, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[175, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[176, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[177, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[178, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[179, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[180, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[181, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[182, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[183, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[184, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[185, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[186, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[187, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[188, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[189, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[190, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[191, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[192, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[193, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[194, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[195, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[196, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[197, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[198, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[199, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[200, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[201, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[202, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[203, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[204, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[205, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[206, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[207, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[208, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[209, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[210, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[211, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[212, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[213, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[214, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[215, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[216, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[217, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[218, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[219, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[220, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[221, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[222, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[223, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[224, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[225, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[226, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[227, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[228, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[229, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[230, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[231, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[232, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[251, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[252, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[253, "polars.Expr.alias"]], "all() (polars.expr method)": [[254, "polars.Expr.all"]], "any() (polars.expr method)": [[255, "polars.Expr.any"]], "append() (polars.expr method)": [[256, "polars.Expr.append"]], "apply() (polars.expr method)": [[257, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[258, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[259, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[260, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[261, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[262, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[263, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[264, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[265, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[266, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[267, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[268, "polars.Expr.arg_unique"]], "arg_max() (polars.expr.arr method)": [[269, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[270, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[271, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[272, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[273, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[274, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[275, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[276, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[277, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[278, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[279, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[280, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[281, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[282, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[283, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[284, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[285, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[286, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[287, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[288, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[289, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[290, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[291, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[292, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[293, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[294, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[295, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[296, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[297, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[298, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[299, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[300, "polars.Expr.bin.starts_with"]], "cast() (polars.expr method)": [[301, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[302, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[303, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[304, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[305, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[306, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[307, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[308, "polars.Expr.cosh"]], "count() (polars.expr method)": [[309, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[310, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[311, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[312, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[313, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[314, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[315, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[316, "polars.Expr.diff"]], "dot() (polars.expr method)": [[317, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[318, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[319, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[320, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[321, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[322, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[323, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[324, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[325, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[326, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[327, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[328, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[329, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[330, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[331, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[332, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[333, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[334, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[335, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[336, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[337, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[338, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[339, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[340, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[341, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[342, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[343, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[344, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[345, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[346, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[347, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[348, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[349, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[350, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[351, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[352, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[353, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[354, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[355, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[356, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[357, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[358, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[359, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[360, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[361, "polars.Expr.exp"]], "explode() (polars.expr method)": [[362, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[363, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[364, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[365, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[366, "polars.Expr.filter"]], "first() (polars.expr method)": [[367, "polars.Expr.first"]], "flatten() (polars.expr method)": [[368, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[369, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[370, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[371, "polars.Expr.hash"]], "head() (polars.expr method)": [[372, "polars.Expr.head"]], "inspect() (polars.expr method)": [[373, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[374, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[375, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[376, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[377, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[378, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[379, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[380, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[381, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[382, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[383, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[384, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[385, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[386, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[387, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[388, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[389, "polars.Expr.last"]], "len() (polars.expr method)": [[390, "polars.Expr.len"]], "limit() (polars.expr method)": [[391, "polars.Expr.limit"]], "list() (polars.expr method)": [[392, "polars.Expr.list"]], "log() (polars.expr method)": [[393, "polars.Expr.log"]], "log10() (polars.expr method)": [[394, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[395, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[396, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[397, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[398, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[399, "polars.Expr.max"]], "mean() (polars.expr method)": [[400, "polars.Expr.mean"]], "median() (polars.expr method)": [[401, "polars.Expr.median"]], "has_multiple_outputs() (polars.expr.meta method)": [[402, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[403, "polars.Expr.meta.is_regex_projection"]], "output_name() (polars.expr.meta method)": [[404, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[405, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[406, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[407, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[408, "polars.Expr.min"]], "mode() (polars.expr method)": [[409, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[410, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[411, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[412, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[413, "polars.Expr.null_count"]], "over() (polars.expr method)": [[414, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[415, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[416, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[417, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[418, "polars.Expr.prefix"]], "product() (polars.expr method)": [[419, "polars.Expr.product"]], "quantile() (polars.expr method)": [[420, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[421, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[422, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[423, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[424, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[425, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[426, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[427, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[428, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[429, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[430, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[431, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[432, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[433, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[434, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[435, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[436, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[437, "polars.Expr.round"]], "sample() (polars.expr method)": [[438, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[439, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[440, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[441, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[442, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[443, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[444, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[445, "polars.Expr.sign"]], "sin() (polars.expr method)": [[446, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[447, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[448, "polars.Expr.skew"]], "slice() (polars.expr method)": [[449, "polars.Expr.slice"]], "sort() (polars.expr method)": [[450, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[451, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[452, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[453, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[454, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[455, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[456, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[457, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[458, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[459, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[460, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[461, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[462, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[463, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[464, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[465, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[466, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[467, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[468, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[469, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[470, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[471, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[472, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[473, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[474, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[475, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[476, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[477, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[478, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[479, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[480, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[481, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[482, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[483, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[484, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[485, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[486, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[487, "polars.Expr.sum"]], "tail() (polars.expr method)": [[488, "polars.Expr.tail"]], "take() (polars.expr method)": [[489, "polars.Expr.take"]], "take_every() (polars.expr method)": [[490, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[491, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[492, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[493, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[494, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[495, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[496, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[497, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[498, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[499, "polars.Expr.var"]], "where() (polars.expr method)": [[500, "polars.Expr.where"]], "all() (in module polars)": [[501, "polars.all"]], "any() (in module polars)": [[502, "polars.any"]], "apply() (in module polars)": [[503, "polars.apply"]], "arange() (in module polars)": [[504, "polars.arange"]], "arg_sort_by() (in module polars)": [[505, "polars.arg_sort_by"]], "avg() (in module polars)": [[506, "polars.avg"]], "coalesce() (in module polars)": [[507, "polars.coalesce"]], "col() (in module polars)": [[508, "polars.col"]], "concat_list() (in module polars)": [[509, "polars.concat_list"]], "concat_str() (in module polars)": [[510, "polars.concat_str"]], "corr() (in module polars)": [[511, "polars.corr"]], "count() (in module polars)": [[512, "polars.count"]], "cov() (in module polars)": [[513, "polars.cov"]], "cumfold() (in module polars)": [[514, "polars.cumfold"]], "cumreduce() (in module polars)": [[515, "polars.cumreduce"]], "cumsum() (in module polars)": [[516, "polars.cumsum"]], "date() (in module polars)": [[517, "polars.date"]], "datetime() (in module polars)": [[518, "polars.datetime"]], "duration() (in module polars)": [[519, "polars.duration"]], "element() (in module polars)": [[520, "polars.element"]], "exclude() (in module polars)": [[521, "polars.exclude"]], "first() (in module polars)": [[522, "polars.first"]], "fold() (in module polars)": [[523, "polars.fold"]], "format() (in module polars)": [[524, "polars.format"]], "from_epoch() (in module polars)": [[525, "polars.from_epoch"]], "groups() (in module polars)": [[526, "polars.groups"]], "head() (in module polars)": [[527, "polars.head"]], "list() (in module polars)": [[528, "polars.list"]], "lit() (in module polars)": [[529, "polars.lit"]], "map() (in module polars)": [[530, "polars.map"]], "max() (in module polars)": [[531, "polars.max"]], "mean() (in module polars)": [[532, "polars.mean"]], "median() (in module polars)": [[533, "polars.median"]], "min() (in module polars)": [[534, "polars.min"]], "n_unique() (in module polars)": [[535, "polars.n_unique"]], "pearson_corr() (in module polars)": [[536, "polars.pearson_corr"]], "quantile() (in module polars)": [[537, "polars.quantile"]], "reduce() (in module polars)": [[538, "polars.reduce"]], "repeat() (in module polars)": [[539, "polars.repeat"]], "select() (in module polars)": [[540, "polars.select"]], "spearman_rank_corr() (in module polars)": [[541, "polars.spearman_rank_corr"]], "std() (in module polars)": [[542, "polars.std"]], "struct() (in module polars)": [[543, "polars.struct"]], "sum() (in module polars)": [[544, "polars.sum"]], "tail() (in module polars)": [[545, "polars.tail"]], "var() (in module polars)": [[546, "polars.var"]], "when() (in module polars)": [[547, "polars.when"]], "cache() (polars.lazyframe method)": [[567, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[568, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[569, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[570, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[571, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[572, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[573, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[574, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[575, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[576, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[577, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[578, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[579, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[580, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[581, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[582, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[583, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[584, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[585, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[586, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[587, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[588, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[589, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[590, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[591, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[592, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[593, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[594, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[595, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[596, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[597, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[598, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[599, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[600, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[601, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[602, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[603, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[604, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[605, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[606, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[607, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[608, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[609, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[610, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[611, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[612, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[613, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[614, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[615, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[616, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[617, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[618, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[619, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[620, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[621, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[622, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[623, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[624, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[625, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[626, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[627, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[628, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[629, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[630, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[631, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[632, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[633, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[634, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[635, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[636, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[637, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[638, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[639, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[640, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[641, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[642, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[643, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[644, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[652, "polars.Series.abs"]], "alias() (polars.series method)": [[653, "polars.Series.alias"]], "all() (polars.series method)": [[654, "polars.Series.all"]], "any() (polars.series method)": [[655, "polars.Series.any"]], "append() (polars.series method)": [[656, "polars.Series.append"]], "apply() (polars.series method)": [[657, "polars.Series.apply"]], "arccos() (polars.series method)": [[658, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[659, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[660, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[661, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[662, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[663, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[664, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[665, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[666, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[667, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[668, "polars.Series.arg_unique"]], "arr (polars.series attribute)": [[669, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[670, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[671, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[672, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[673, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[674, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[675, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[676, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[677, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[678, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[679, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[680, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[681, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[682, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[683, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[684, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[685, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[686, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[687, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[688, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[689, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[690, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[691, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[692, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[693, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[694, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[695, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[696, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[697, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[698, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[699, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[700, "polars.Series.bin.starts_with"]], "cast() (polars.series method)": [[701, "polars.Series.cast"]], "cat (polars.series attribute)": [[702, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[703, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[704, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[705, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[706, "polars.Series.clear"]], "clip() (polars.series method)": [[707, "polars.Series.clip"]], "clip_max() (polars.series method)": [[708, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[709, "polars.Series.clip_min"]], "clone() (polars.series method)": [[710, "polars.Series.clone"]], "cos() (polars.series method)": [[711, "polars.Series.cos"]], "cosh() (polars.series method)": [[712, "polars.Series.cosh"]], "cummax() (polars.series method)": [[713, "polars.Series.cummax"]], "cummin() (polars.series method)": [[714, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[715, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[716, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[717, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[718, "polars.Series.cut"]], "describe() (polars.series method)": [[719, "polars.Series.describe"]], "diff() (polars.series method)": [[720, "polars.Series.diff"]], "dot() (polars.series method)": [[721, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[722, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[723, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[724, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[725, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[726, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[727, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[728, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[729, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[730, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[731, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[732, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[733, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[734, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[735, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[736, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[737, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[738, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[739, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[740, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[741, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[742, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[743, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[744, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[745, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[746, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[747, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[748, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[749, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[750, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[751, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[752, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[753, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[754, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[755, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[756, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[757, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[758, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[759, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[760, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[761, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[762, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[763, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[764, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[765, "polars.Series.dtype"]], "entropy() (polars.series method)": [[766, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[767, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[768, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[769, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[770, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[771, "polars.Series.exp"]], "explode() (polars.series method)": [[772, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[773, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[774, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[775, "polars.Series.fill_null"]], "filter() (polars.series method)": [[776, "polars.Series.filter"]], "flags (polars.series attribute)": [[777, "polars.Series.flags"]], "floor() (polars.series method)": [[778, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[779, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[780, "polars.Series.has_validity"]], "hash() (polars.series method)": [[781, "polars.Series.hash"]], "head() (polars.series method)": [[782, "polars.Series.head"]], "hist() (polars.series method)": [[783, "polars.Series.hist"]], "inner_dtype (polars.series attribute)": [[784, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[785, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[786, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[787, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[788, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[789, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[790, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[791, "polars.Series.is_first"]], "is_float() (polars.series method)": [[792, "polars.Series.is_float"]], "is_in() (polars.series method)": [[793, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[794, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[795, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[796, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[797, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[798, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[799, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[800, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[801, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[802, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[803, "polars.Series.is_utf8"]], "item() (polars.series method)": [[804, "polars.Series.item"]], "kurtosis() (polars.series method)": [[805, "polars.Series.kurtosis"]], "len() (polars.series method)": [[806, "polars.Series.len"]], "limit() (polars.series method)": [[807, "polars.Series.limit"]], "log() (polars.series method)": [[808, "polars.Series.log"]], "log10() (polars.series method)": [[809, "polars.Series.log10"]], "lower_bound() (polars.series method)": [[810, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[811, "polars.Series.map_dict"]], "max() (polars.series method)": [[812, "polars.Series.max"]], "mean() (polars.series method)": [[813, "polars.Series.mean"]], "median() (polars.series method)": [[814, "polars.Series.median"]], "min() (polars.series method)": [[815, "polars.Series.min"]], "mode() (polars.series method)": [[816, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[817, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[818, "polars.Series.n_unique"]], "name (polars.series attribute)": [[819, "polars.Series.name"]], "nan_max() (polars.series method)": [[820, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[821, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[822, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[823, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[824, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[825, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[826, "polars.Series.peak_min"]], "product() (polars.series method)": [[827, "polars.Series.product"]], "qcut() (polars.series method)": [[828, "polars.Series.qcut"]], "quantile() (polars.series method)": [[829, "polars.Series.quantile"]], "rank() (polars.series method)": [[830, "polars.Series.rank"]], "rechunk() (polars.series method)": [[831, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[832, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[833, "polars.Series.rename"]], "reshape() (polars.series method)": [[834, "polars.Series.reshape"]], "reverse() (polars.series method)": [[835, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[836, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[837, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[838, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[839, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[840, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[841, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[842, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[843, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[844, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[845, "polars.Series.rolling_var"]], "round() (polars.series method)": [[846, "polars.Series.round"]], "sample() (polars.series method)": [[847, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[848, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[849, "polars.Series.series_equal"]], "set() (polars.series method)": [[850, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[851, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[852, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[853, "polars.Series.shape"]], "shift() (polars.series method)": [[854, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[855, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[856, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[857, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[858, "polars.Series.shuffle"]], "sign() (polars.series method)": [[859, "polars.Series.sign"]], "sin() (polars.series method)": [[860, "polars.Series.sin"]], "sinh() (polars.series method)": [[861, "polars.Series.sinh"]], "skew() (polars.series method)": [[862, "polars.Series.skew"]], "slice() (polars.series method)": [[863, "polars.Series.slice"]], "sort() (polars.series method)": [[864, "polars.Series.sort"]], "sqrt() (polars.series method)": [[865, "polars.Series.sqrt"]], "std() (polars.series method)": [[866, "polars.Series.std"]], "str (polars.series attribute)": [[867, "polars.Series.str"]], "concat() (polars.series.str method)": [[868, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[869, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[870, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[871, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[872, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[873, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[874, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[875, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[876, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[877, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[878, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[879, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[880, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[881, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[882, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[883, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[884, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[885, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[886, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[887, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[888, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[889, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[890, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[891, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[892, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[893, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[894, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[895, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[896, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[897, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[898, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[899, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[900, "polars.Series.struct.rename_fields"]], "unnest() (polars.series.struct method)": [[901, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[902, "polars.Series.sum"]], "tail() (polars.series method)": [[903, "polars.Series.tail"]], "take() (polars.series method)": [[904, "polars.Series.take"]], "take_every() (polars.series method)": [[905, "polars.Series.take_every"]], "tan() (polars.series method)": [[906, "polars.Series.tan"]], "tanh() (polars.series method)": [[907, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[908, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[909, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[910, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[911, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[912, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[913, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[914, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[915, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[916, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[917, "polars.Series.top_k"]], "unique() (polars.series method)": [[918, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[919, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[920, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[921, "polars.Series.value_counts"]], "var() (polars.series method)": [[922, "polars.Series.var"]], "view() (polars.series method)": [[923, "polars.Series.view"]], "zip_with() (polars.series method)": [[924, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[939, "polars.SQLContext"]]}})