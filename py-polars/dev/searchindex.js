Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_dummies", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.time_range", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.time_range.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_dummies", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.time_range", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.any", "polars.apply", "polars.approx_unique", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.time", "polars.var", "polars.when", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 89, 99, 117, 130, 133, 134, 235, 253, 267, 593, 675, 700, 986], "refer": [0, 29, 101, 102, 105, 139, 253, 363, 366, 421, 450, 490, 509, 510, 511, 513, 593, 803, 806, 880, 944, 945, 946, 948, 986], "input": [0, 62, 91, 101, 102, 105, 134, 135, 146, 157, 185, 199, 206, 220, 230, 233, 253, 260, 267, 377, 396, 415, 430, 443, 480, 535, 536, 537, 538, 541, 543, 544, 545, 546, 552, 557, 558, 566, 567, 570, 581, 582, 593, 604, 607, 617, 624, 650, 658, 663, 669, 673, 691, 700, 834, 858, 859, 861, 986], "output": [0, 25, 27, 29, 30, 31, 32, 72, 105, 129, 134, 158, 159, 170, 180, 187, 196, 199, 226, 230, 253, 262, 267, 419, 420, 429, 532, 538, 547, 566, 579, 593, 604, 625, 626, 635, 639, 640, 650, 669, 672, 675, 691, 700, 975, 986], "seri": [0, 1, 22, 63, 64, 65, 66, 67, 70, 71, 72, 88, 90, 93, 95, 99, 120, 124, 129, 130, 134, 142, 150, 152, 154, 155, 160, 163, 164, 166, 168, 176, 177, 181, 192, 193, 208, 212, 215, 218, 219, 234, 253, 266, 267, 269, 270, 271, 272, 273, 274, 277, 278, 280, 281, 282, 287, 290, 291, 298, 299, 302, 303, 304, 307, 315, 316, 320, 321, 333, 335, 339, 342, 346, 348, 350, 355, 359, 360, 362, 367, 370, 379, 380, 386, 394, 396, 398, 399, 400, 401, 402, 404, 405, 406, 417, 419, 446, 450, 451, 452, 453, 454, 456, 468, 469, 472, 475, 476, 483, 498, 503, 509, 510, 511, 513, 516, 522, 523, 524, 525, 531, 536, 537, 538, 539, 540, 542, 548, 550, 551, 552, 558, 559, 561, 563, 565, 566, 567, 568, 569, 570, 571, 574, 575, 578, 580, 581, 582, 583, 585, 593, 604, 621, 674, 691, 980, 982, 985, 987, 990, 991, 992, 994], "datafram": [0, 1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 48, 49, 51, 53, 62, 63, 64, 65, 66, 67, 69, 70, 71, 73, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 114, 115, 116, 119, 121, 122, 129, 251, 252, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 300, 301, 304, 305, 306, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 563, 566, 567, 568, 569, 570, 571, 572, 574, 578, 579, 580, 581, 582, 583, 585, 586, 593, 604, 611, 613, 617, 618, 622, 625, 630, 631, 632, 633, 635, 639, 640, 644, 648, 655, 656, 657, 658, 664, 665, 666, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 699, 700, 719, 747, 762, 763, 799, 830, 878, 928, 940, 941, 955, 964, 965, 975, 986, 994], "lazyfram": [0, 1, 48, 49, 50, 51, 62, 63, 64, 65, 66, 69, 70, 112, 113, 114, 115, 116, 117, 119, 124, 129, 174, 186, 253, 304, 383, 593, 604, 690, 993, 994], "express": [0, 67, 69, 72, 121, 124, 126, 129, 134, 135, 146, 148, 150, 157, 183, 187, 195, 199, 206, 220, 230, 233, 235, 253, 260, 262, 263, 264, 266, 267, 278, 284, 286, 304, 313, 317, 318, 319, 322, 328, 330, 334, 352, 353, 356, 363, 373, 377, 380, 383, 387, 389, 390, 394, 396, 400, 403, 408, 411, 412, 417, 418, 419, 420, 421, 425, 426, 427, 428, 429, 430, 434, 436, 440, 442, 443, 445, 446, 447, 448, 453, 467, 468, 469, 471, 473, 478, 480, 484, 485, 490, 491, 492, 493, 499, 500, 518, 519, 522, 528, 529, 531, 534, 535, 536, 537, 540, 541, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 565, 566, 567, 570, 572, 574, 575, 576, 577, 578, 579, 581, 582, 584, 586, 592, 604, 607, 611, 616, 617, 618, 621, 624, 644, 650, 653, 654, 655, 656, 658, 663, 669, 670, 673, 675, 691, 700, 717, 719, 751, 752, 753, 761, 770, 792, 793, 796, 820, 834, 898, 905, 919, 920, 925, 926, 927, 928, 934, 935, 986], "extend": [0, 91, 253, 380, 593, 604, 699, 820, 986], "function": [0, 29, 63, 64, 65, 66, 71, 89, 95, 101, 102, 105, 112, 122, 134, 139, 145, 152, 179, 186, 187, 217, 221, 224, 225, 235, 253, 263, 267, 304, 328, 360, 374, 375, 376, 419, 420, 443, 445, 456, 457, 458, 459, 460, 461, 463, 464, 465, 477, 526, 536, 537, 538, 550, 551, 552, 558, 559, 561, 566, 567, 570, 574, 582, 593, 604, 635, 639, 643, 666, 675, 691, 700, 737, 761, 800, 814, 815, 816, 817, 830, 878, 886, 900, 901, 907, 912, 969, 986, 994], "data": [0, 1, 5, 15, 18, 28, 29, 30, 34, 48, 53, 62, 63, 65, 70, 73, 78, 79, 83, 85, 88, 89, 90, 91, 92, 93, 94, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 119, 120, 122, 123, 124, 126, 133, 134, 136, 137, 147, 156, 157, 158, 170, 171, 172, 174, 185, 186, 190, 195, 196, 204, 211, 216, 217, 230, 232, 251, 253, 264, 267, 305, 314, 333, 361, 370, 373, 389, 390, 395, 402, 404, 411, 418, 440, 442, 450, 466, 467, 477, 490, 491, 509, 510, 511, 513, 526, 528, 529, 535, 544, 565, 579, 593, 604, 609, 610, 618, 624, 625, 643, 655, 656, 669, 691, 699, 700, 738, 745, 750, 754, 767, 769, 810, 830, 880, 896, 897, 907, 912, 944, 945, 946, 948, 967, 968, 969, 970, 972, 977, 985, 986], "type": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 69, 72, 78, 88, 90, 91, 92, 93, 94, 99, 101, 102, 104, 105, 112, 113, 118, 119, 120, 123, 124, 129, 130, 134, 152, 156, 158, 159, 160, 171, 211, 217, 219, 222, 253, 267, 291, 304, 314, 315, 317, 318, 319, 335, 339, 342, 346, 348, 350, 355, 359, 362, 377, 391, 398, 400, 401, 421, 453, 504, 505, 506, 509, 526, 538, 544, 553, 554, 555, 557, 558, 565, 584, 593, 604, 611, 616, 618, 625, 626, 644, 654, 655, 656, 664, 691, 724, 737, 745, 747, 751, 752, 753, 771, 775, 778, 785, 787, 790, 795, 799, 802, 828, 907, 939, 940, 941, 944, 967, 968, 970, 978, 986], "config": [0, 62, 199, 230, 253, 555, 604, 650, 669, 691], "except": [0, 161, 173, 175, 209, 253, 557, 604, 631, 691, 829, 856, 957, 968, 977, 986], "test": [0, 105, 604, 627, 634, 691], "util": [0, 95, 561, 604, 618, 691], "sql": [0, 28, 48, 103, 172, 253, 604], "These": [1, 29, 131, 253, 367, 592, 807], "allow": [1, 29, 53, 78, 89, 112, 114, 115, 116, 117, 124, 126, 133, 170, 173, 174, 195, 196, 197, 217, 222, 232, 253, 356, 363, 366, 452, 467, 509, 510, 511, 593, 630, 631, 635, 639, 655, 656, 664, 670, 691, 796, 803, 806, 882, 897, 899, 944, 945, 946, 969, 986, 994], "you": [1, 12, 29, 33, 62, 88, 90, 91, 92, 94, 99, 101, 102, 105, 106, 110, 112, 119, 130, 131, 134, 143, 147, 158, 159, 170, 173, 183, 195, 196, 213, 216, 221, 235, 253, 267, 286, 304, 317, 318, 319, 352, 353, 359, 363, 366, 383, 396, 419, 421, 452, 457, 458, 459, 460, 461, 463, 464, 465, 494, 497, 509, 511, 540, 550, 559, 593, 611, 614, 625, 626, 627, 631, 634, 654, 656, 675, 691, 699, 700, 719, 751, 752, 753, 792, 793, 799, 803, 806, 834, 882, 929, 932, 944, 946, 968, 977, 986, 994], "regist": [1, 50, 51, 63, 64, 65, 66, 125, 127], "custom": [1, 29, 63, 64, 65, 66, 125, 126, 127, 134, 235, 253, 267, 304, 363, 366, 419, 456, 538, 566, 593, 635, 675, 691, 700, 737, 803, 806, 886, 986, 994], "dedic": [1, 89, 170, 196, 253], "namespac": [1, 252, 592, 604, 690], "underli": [1, 48, 74, 81, 88, 90, 91, 92, 94, 110, 121, 124, 126, 147, 170, 171, 196, 211, 253, 308, 333, 334, 338, 341, 343, 344, 345, 347, 349, 351, 354, 357, 358, 359, 361, 368, 369, 370, 371, 452, 466, 484, 486, 593, 691, 699, 740, 769, 770, 774, 777, 779, 780, 784, 786, 789, 791, 794, 797, 798, 799, 801, 808, 809, 810, 811, 882, 896, 907, 919, 921, 963, 968, 986], "polar": [1, 253, 592, 593, 598, 604, 691, 986, 993], "class": [1, 2, 3, 4, 14, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 93, 121, 122, 217, 253, 593, 598, 604, 691, 967, 968, 986, 993], "without": [1, 5, 71, 95, 104, 107, 111, 113, 117, 224, 225, 253, 267, 328, 360, 457, 458, 459, 460, 461, 463, 464, 465, 578, 593, 666, 691, 761, 767, 800, 830, 878, 986], "requir": [1, 29, 33, 93, 119, 120, 139, 195, 217, 253, 305, 374, 375, 376, 472, 509, 510, 511, 529, 593, 656, 691, 738, 815, 816, 817, 906, 944, 945, 946, 968, 969, 972, 986], "subclass": [1, 253], "mixin": 1, "expr": [1, 62, 63, 64, 65, 66, 67, 70, 72, 129, 146, 148, 150, 172, 173, 183, 187, 195, 199, 230, 253, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 593, 594, 595, 598, 599, 600, 601, 617, 619, 621, 630, 631, 645, 650, 653, 669, 691, 717, 719, 761, 770, 821, 905, 919, 923, 942, 958, 986], "ar": [1, 5, 10, 14, 17, 25, 29, 53, 72, 73, 80, 87, 88, 89, 90, 91, 92, 93, 94, 95, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 117, 119, 120, 122, 124, 131, 133, 134, 135, 139, 143, 145, 148, 152, 157, 158, 159, 170, 173, 174, 179, 180, 185, 195, 196, 199, 200, 206, 212, 217, 220, 225, 226, 230, 233, 253, 263, 304, 324, 326, 327, 331, 332, 360, 367, 372, 374, 375, 376, 396, 398, 400, 401, 402, 404, 405, 406, 409, 421, 443, 450, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 474, 477, 479, 480, 494, 497, 498, 520, 536, 537, 540, 541, 543, 545, 546, 547, 552, 567, 570, 579, 581, 582, 586, 587, 589, 592, 593, 594, 595, 598, 599, 600, 601, 604, 607, 614, 619, 624, 625, 626, 627, 631, 634, 635, 639, 640, 644, 647, 650, 651, 655, 656, 658, 663, 666, 669, 670, 673, 691, 697, 699, 737, 759, 760, 800, 807, 813, 814, 815, 816, 817, 827, 834, 838, 841, 842, 844, 845, 846, 847, 854, 880, 884, 886, 892, 909, 912, 929, 932, 933, 956, 968, 969, 977, 980, 982, 986, 987, 990, 991, 992, 994], "all": [1, 7, 14, 17, 22, 25, 29, 34, 69, 70, 72, 88, 91, 93, 94, 96, 101, 102, 104, 105, 106, 110, 112, 114, 115, 121, 122, 126, 140, 143, 149, 161, 166, 168, 170, 171, 174, 175, 179, 182, 183, 190, 195, 196, 205, 209, 214, 222, 224, 226, 253, 264, 265, 266, 286, 291, 301, 304, 306, 322, 328, 332, 377, 388, 391, 393, 395, 398, 401, 405, 406, 408, 412, 419, 420, 435, 441, 447, 450, 455, 472, 478, 480, 485, 491, 493, 496, 499, 500, 502, 508, 519, 532, 544, 552, 557, 559, 574, 581, 582, 586, 593, 598, 604, 611, 614, 616, 618, 620, 635, 639, 644, 654, 657, 664, 670, 691, 719, 724, 734, 737, 761, 763, 767, 829, 836, 851, 856, 880, 913, 920, 926, 928, 931, 934, 935, 937, 943, 957, 986, 994], "support": [1, 29, 33, 70, 88, 89, 90, 91, 92, 93, 94, 95, 103, 104, 105, 113, 121, 126, 131, 133, 170, 171, 196, 205, 206, 213, 217, 253, 299, 443, 478, 480, 503, 544, 593, 598, 657, 658, 691, 732, 913, 938, 969, 986], "target": [1, 29, 68, 253, 367, 490, 509, 510, 511, 925, 944, 945, 946], "thi": [1, 5, 7, 12, 25, 27, 29, 31, 33, 37, 49, 51, 52, 53, 62, 69, 70, 71, 73, 88, 90, 91, 92, 93, 94, 95, 98, 99, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 126, 128, 130, 131, 133, 134, 139, 143, 144, 145, 147, 152, 157, 158, 159, 160, 164, 166, 168, 169, 170, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 185, 188, 189, 190, 195, 196, 197, 199, 203, 205, 207, 208, 211, 213, 216, 217, 221, 222, 224, 225, 226, 227, 228, 230, 231, 235, 236, 252, 253, 263, 266, 267, 268, 277, 286, 287, 291, 300, 304, 305, 312, 313, 315, 322, 328, 333, 344, 352, 353, 356, 359, 360, 363, 366, 370, 379, 394, 395, 396, 400, 412, 416, 417, 419, 425, 426, 427, 428, 429, 430, 438, 439, 443, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 469, 471, 472, 473, 478, 479, 480, 490, 495, 496, 501, 502, 508, 509, 511, 515, 527, 529, 530, 531, 532, 536, 537, 539, 540, 545, 548, 550, 552, 558, 559, 561, 567, 570, 578, 582, 593, 604, 605, 608, 611, 614, 616, 618, 624, 625, 626, 628, 631, 635, 639, 640, 644, 647, 650, 653, 654, 655, 656, 657, 664, 666, 669, 670, 671, 672, 675, 676, 690, 691, 699, 700, 709, 719, 720, 724, 733, 738, 744, 747, 761, 767, 769, 770, 780, 792, 793, 796, 799, 800, 803, 806, 810, 814, 819, 826, 827, 830, 835, 840, 841, 843, 848, 850, 852, 853, 855, 860, 862, 863, 864, 865, 867, 868, 870, 871, 873, 877, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 890, 893, 894, 895, 897, 900, 901, 902, 905, 906, 907, 908, 913, 914, 916, 925, 930, 931, 936, 937, 943, 944, 946, 950, 951, 955, 956, 963, 965, 967, 968, 969, 971, 972, 974, 976, 977, 986, 994], "featur": [1, 33, 37, 53, 68, 253], "i": [1, 5, 12, 14, 27, 29, 30, 31, 32, 37, 48, 53, 62, 67, 68, 69, 70, 71, 72, 75, 77, 78, 80, 84, 86, 88, 89, 90, 91, 92, 93, 94, 98, 101, 102, 103, 104, 106, 110, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 126, 128, 129, 133, 134, 143, 145, 153, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 171, 173, 174, 175, 177, 179, 180, 183, 185, 186, 187, 195, 196, 197, 205, 206, 207, 208, 209, 211, 217, 221, 222, 224, 225, 226, 227, 235, 236, 252, 253, 260, 263, 265, 266, 267, 268, 278, 286, 289, 299, 303, 304, 313, 322, 328, 334, 343, 356, 360, 363, 367, 374, 375, 376, 379, 391, 394, 396, 409, 416, 419, 421, 425, 428, 430, 443, 450, 452, 454, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 469, 473, 474, 477, 478, 479, 480, 482, 484, 485, 490, 491, 493, 495, 496, 498, 499, 501, 502, 503, 506, 508, 509, 510, 511, 513, 515, 532, 533, 536, 537, 539, 540, 544, 545, 547, 548, 550, 551, 552, 559, 565, 567, 570, 572, 576, 577, 578, 579, 580, 582, 585, 586, 593, 611, 614, 616, 618, 624, 625, 626, 629, 631, 633, 635, 639, 640, 644, 654, 655, 656, 657, 658, 659, 664, 666, 667, 672, 675, 676, 691, 698, 699, 700, 719, 722, 732, 736, 737, 761, 770, 779, 796, 800, 803, 807, 814, 815, 816, 817, 819, 827, 828, 829, 830, 833, 835, 837, 843, 848, 849, 850, 852, 853, 854, 856, 878, 880, 882, 884, 897, 898, 899, 900, 901, 902, 908, 909, 912, 913, 916, 919, 920, 925, 926, 928, 930, 931, 933, 934, 936, 937, 938, 941, 943, 944, 945, 946, 948, 950, 957, 963, 968, 969, 975, 976, 977, 986, 994], "primarili": 1, "intend": 1, "us": [1, 9, 11, 12, 17, 22, 23, 27, 28, 29, 33, 48, 50, 53, 62, 71, 72, 89, 91, 92, 94, 96, 97, 99, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 125, 126, 128, 129, 130, 134, 141, 143, 148, 149, 152, 157, 158, 159, 166, 168, 170, 171, 173, 177, 179, 182, 183, 186, 187, 195, 197, 199, 206, 207, 208, 214, 215, 217, 221, 222, 224, 225, 226, 227, 230, 233, 235, 253, 261, 267, 268, 278, 286, 304, 308, 309, 313, 315, 328, 331, 332, 359, 363, 366, 370, 372, 374, 375, 376, 382, 383, 395, 396, 409, 419, 421, 424, 443, 450, 452, 454, 457, 458, 459, 460, 461, 463, 464, 465, 467, 469, 472, 473, 477, 479, 480, 482, 484, 486, 487, 488, 490, 491, 494, 495, 499, 501, 503, 505, 507, 509, 510, 511, 513, 533, 536, 537, 538, 539, 540, 544, 546, 547, 550, 552, 559, 561, 565, 567, 570, 572, 575, 576, 577, 578, 579, 580, 581, 582, 585, 592, 593, 604, 611, 613, 614, 619, 620, 624, 625, 626, 627, 631, 633, 634, 639, 650, 656, 658, 659, 664, 666, 667, 669, 673, 675, 691, 700, 719, 737, 740, 741, 747, 761, 799, 803, 806, 810, 813, 815, 816, 817, 821, 822, 827, 830, 834, 854, 861, 880, 882, 884, 897, 900, 901, 902, 906, 908, 912, 916, 919, 921, 922, 925, 926, 929, 930, 934, 936, 938, 940, 944, 945, 946, 948, 958, 964, 966, 967, 968, 969, 976, 977, 986, 994], "librari": [1, 74, 81, 419, 593, 994], "author": 1, "domain": [1, 491, 926], "specif": [1, 25, 29, 88, 90, 92, 94, 101, 103, 104, 113, 123, 124, 170, 253, 363, 366, 456, 509, 510, 511, 513, 593, 691, 803, 806, 886, 944, 945, 946, 948, 986, 994], "capabl": [1, 29, 253], "which": [1, 17, 26, 27, 29, 30, 31, 32, 33, 62, 63, 64, 65, 66, 91, 101, 102, 103, 104, 105, 112, 113, 119, 125, 127, 135, 143, 147, 158, 159, 216, 220, 222, 253, 263, 304, 363, 380, 396, 398, 401, 402, 404, 405, 406, 430, 457, 458, 459, 460, 461, 463, 464, 465, 498, 586, 593, 607, 614, 616, 625, 626, 655, 656, 663, 664, 672, 691, 699, 737, 803, 820, 834, 838, 842, 844, 845, 846, 847, 900, 933, 986, 994], "mai": [1, 37, 70, 71, 88, 90, 91, 92, 94, 101, 104, 106, 113, 114, 117, 134, 145, 147, 173, 202, 203, 217, 224, 225, 253, 267, 298, 303, 304, 328, 333, 344, 360, 429, 457, 458, 459, 460, 461, 463, 464, 465, 470, 471, 509, 511, 550, 551, 559, 574, 593, 631, 635, 652, 653, 656, 666, 671, 675, 691, 699, 700, 731, 736, 761, 769, 780, 800, 814, 830, 878, 904, 905, 944, 946, 986, 994], "exist": [1, 28, 29, 62, 104, 113, 124, 230, 253, 334, 367, 669, 691, 770], "belong": [1, 158, 253, 625, 691], "core": [1, 217, 253, 994], "cannot": [1, 89, 101, 102, 105, 106, 119, 128, 134, 197, 235, 253, 308, 421, 467, 486, 505, 517, 593, 654, 675, 691, 700, 740, 897, 921, 940, 986], "overrid": [1, 29, 88, 90, 91, 92, 93, 94, 101, 121, 122, 126, 128, 253, 421, 593, 691, 861, 986], "str": [1, 6, 8, 13, 14, 17, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 48, 49, 50, 51, 52, 53, 62, 63, 64, 65, 66, 68, 71, 72, 73, 88, 90, 91, 92, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 121, 122, 124, 125, 126, 127, 129, 135, 138, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 154, 156, 157, 158, 159, 161, 163, 166, 168, 169, 170, 172, 173, 176, 177, 178, 179, 180, 181, 183, 185, 187, 189, 191, 192, 193, 194, 195, 196, 197, 200, 202, 203, 205, 206, 207, 208, 209, 212, 213, 214, 215, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 253, 260, 261, 262, 267, 282, 283, 284, 289, 290, 291, 299, 302, 304, 330, 335, 356, 359, 360, 363, 366, 367, 377, 381, 383, 385, 394, 396, 403, 420, 421, 429, 431, 443, 445, 447, 453, 455, 457, 458, 459, 460, 461, 463, 464, 465, 471, 472, 479, 480, 516, 517, 519, 522, 534, 535, 536, 538, 539, 542, 544, 546, 547, 548, 549, 550, 551, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 566, 568, 569, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 583, 584, 585, 593, 599, 607, 611, 612, 613, 614, 616, 617, 618, 621, 623, 624, 625, 626, 628, 630, 631, 639, 640, 644, 646, 647, 648, 651, 653, 654, 655, 656, 657, 658, 663, 664, 665, 666, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 696, 716, 717, 724, 737, 745, 762, 763, 771, 796, 799, 800, 803, 806, 807, 822, 861, 870, 871, 878, 883, 900, 901, 951, 953, 964, 965, 966, 986, 990, 994], "dt": [1, 62, 72, 159, 253, 555, 601, 626, 691, 992], "attempt": [1, 216, 253], "do": [1, 29, 62, 69, 112, 147, 173, 211, 221, 224, 253, 286, 328, 496, 502, 508, 593, 611, 616, 631, 635, 644, 654, 655, 656, 691, 699, 719, 761, 931, 937, 943, 968, 977, 986], "so": [1, 53, 103, 112, 128, 156, 158, 159, 187, 253, 278, 289, 304, 313, 396, 496, 502, 508, 593, 625, 626, 691, 722, 931, 937, 943], "rais": [1, 13, 17, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 119, 120, 195, 253, 303, 308, 359, 429, 484, 486, 498, 509, 510, 511, 513, 565, 736, 740, 799, 919, 921, 933, 944, 945, 946, 948, 968, 977, 986], "an": [1, 5, 25, 28, 29, 37, 62, 63, 65, 66, 67, 69, 72, 74, 78, 79, 81, 88, 101, 102, 103, 104, 105, 107, 110, 112, 114, 122, 124, 126, 129, 134, 136, 137, 145, 148, 150, 152, 158, 159, 170, 171, 173, 183, 187, 193, 195, 211, 216, 224, 230, 235, 253, 262, 263, 267, 284, 286, 289, 303, 304, 308, 314, 317, 318, 319, 323, 324, 325, 326, 327, 328, 334, 359, 363, 370, 380, 383, 408, 419, 420, 430, 448, 456, 457, 458, 459, 460, 461, 463, 464, 465, 484, 486, 491, 509, 510, 511, 513, 522, 528, 536, 537, 540, 544, 552, 556, 561, 565, 567, 570, 574, 575, 578, 581, 582, 586, 593, 604, 609, 610, 611, 616, 618, 621, 625, 626, 631, 635, 644, 654, 669, 670, 675, 691, 700, 717, 719, 722, 736, 740, 745, 750, 751, 752, 753, 754, 757, 758, 759, 760, 761, 770, 799, 803, 810, 814, 820, 843, 886, 887, 888, 889, 890, 891, 893, 894, 895, 900, 901, 919, 921, 926, 944, 945, 946, 948, 968, 977, 986], "attributeerror": 1, "howev": [1, 91, 145, 253, 814, 986], "can": [1, 12, 29, 62, 72, 79, 91, 101, 102, 105, 106, 110, 112, 114, 116, 117, 122, 123, 124, 126, 128, 129, 131, 134, 135, 144, 152, 158, 159, 166, 168, 183, 187, 199, 206, 216, 220, 221, 224, 230, 235, 253, 267, 286, 304, 313, 324, 327, 328, 352, 353, 356, 359, 367, 380, 395, 396, 429, 435, 452, 457, 458, 459, 460, 461, 463, 464, 465, 469, 472, 474, 477, 480, 493, 496, 502, 508, 509, 532, 540, 541, 544, 559, 561, 586, 592, 593, 607, 611, 616, 625, 626, 650, 658, 663, 669, 671, 675, 691, 700, 719, 737, 761, 792, 793, 796, 799, 807, 820, 834, 866, 882, 900, 901, 902, 906, 909, 912, 928, 931, 937, 943, 944, 986], "other": [1, 17, 29, 72, 101, 102, 105, 112, 119, 120, 143, 147, 153, 172, 173, 179, 180, 195, 199, 225, 230, 251, 253, 260, 264, 266, 278, 282, 317, 318, 319, 330, 373, 387, 389, 390, 396, 400, 411, 418, 421, 425, 428, 434, 436, 440, 442, 480, 518, 526, 528, 535, 536, 537, 543, 545, 546, 552, 567, 570, 581, 582, 593, 604, 614, 630, 631, 639, 640, 650, 666, 669, 670, 691, 699, 715, 751, 752, 753, 765, 841, 899, 970, 978, 985, 986], "onli": [1, 17, 25, 29, 50, 53, 62, 68, 70, 101, 102, 104, 105, 106, 110, 112, 113, 114, 115, 116, 124, 126, 131, 134, 143, 158, 159, 170, 173, 177, 196, 208, 213, 215, 226, 253, 261, 267, 278, 313, 316, 317, 318, 319, 356, 377, 386, 452, 530, 575, 593, 611, 614, 625, 626, 627, 631, 634, 691, 748, 751, 752, 753, 796, 825, 843, 882, 963, 966, 986, 994], "gener": [1, 96, 103, 121, 122, 123, 124, 126, 129, 139, 187, 197, 214, 221, 253, 467, 473, 593, 691, 897, 908, 964, 986, 994], "userwarn": 1, "pl": [1, 7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32, 33, 50, 53, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 126, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 605, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 696, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 718, 719, 720, 723, 724, 726, 731, 732, 733, 735, 737, 744, 745, 747, 748, 749, 750, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 816, 817, 820, 821, 822, 823, 825, 828, 829, 830, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 874, 875, 876, 878, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 908, 909, 910, 911, 913, 914, 915, 916, 918, 919, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 948, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 986, 994], "register_expr_namespac": [1, 63, 65, 66], "greet": 1, "def": [1, 63, 64, 65, 66, 122, 123, 124, 126, 186, 221, 253, 260, 445, 491, 535, 566, 593, 643, 691, 926, 994], "__init__": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 121], "self": [1, 49, 50, 51, 52, 63, 64, 65, 66, 69, 134, 135, 136, 137, 139, 140, 141, 143, 146, 147, 148, 149, 150, 157, 158, 159, 161, 163, 164, 165, 172, 173, 175, 176, 177, 178, 179, 180, 181, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 197, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 306, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 593, 607, 608, 609, 610, 611, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 691, 699, 700, 745, 754, 823, 831, 860, 861, 872, 875, 876, 881, 900, 901, 902, 914, 974, 978, 986], "_expr": [1, 64], "hello": [1, 496, 502, 508, 536, 724, 931, 937, 943], "return": [1, 25, 27, 29, 30, 31, 32, 48, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 80, 82, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 123, 129, 130, 134, 135, 136, 139, 142, 143, 144, 145, 146, 148, 149, 152, 156, 157, 158, 159, 161, 163, 169, 170, 171, 172, 174, 175, 182, 183, 185, 186, 187, 195, 196, 197, 209, 210, 216, 217, 220, 221, 222, 226, 230, 232, 235, 238, 242, 247, 253, 263, 265, 269, 270, 271, 272, 273, 274, 277, 278, 280, 281, 283, 287, 289, 290, 291, 302, 303, 307, 309, 312, 320, 321, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 365, 367, 368, 369, 371, 379, 392, 396, 398, 399, 400, 401, 402, 404, 405, 406, 413, 417, 421, 430, 435, 445, 453, 454, 467, 468, 474, 475, 476, 483, 485, 487, 489, 490, 491, 493, 494, 495, 497, 498, 501, 503, 504, 505, 506, 515, 521, 522, 523, 524, 525, 527, 528, 530, 531, 532, 535, 536, 537, 538, 540, 541, 544, 553, 554, 555, 561, 563, 565, 566, 575, 578, 581, 583, 584, 586, 593, 607, 609, 611, 614, 615, 616, 618, 625, 626, 627, 633, 634, 635, 643, 644, 654, 655, 656, 661, 662, 663, 664, 669, 672, 678, 682, 687, 691, 696, 697, 698, 700, 707, 708, 710, 711, 713, 714, 716, 720, 722, 723, 724, 735, 736, 739, 741, 744, 750, 762, 763, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 804, 805, 807, 808, 809, 811, 814, 819, 827, 829, 830, 836, 838, 839, 841, 842, 844, 845, 846, 847, 851, 853, 856, 860, 861, 866, 878, 884, 885, 897, 898, 899, 901, 909, 918, 919, 920, 922, 924, 925, 926, 928, 929, 930, 932, 933, 936, 938, 939, 940, 941, 950, 957, 959, 971, 973, 974, 978, 986, 994], "lit": [1, 99, 130, 396, 408, 550, 559, 586, 593, 822, 986], "alia": [1, 62, 64, 66, 158, 159, 175, 223, 230, 253, 260, 264, 267, 284, 286, 312, 317, 318, 319, 323, 324, 325, 326, 327, 329, 333, 334, 335, 338, 339, 340, 342, 344, 345, 346, 348, 350, 355, 356, 357, 359, 360, 361, 362, 363, 365, 366, 367, 369, 370, 373, 383, 385, 387, 389, 390, 394, 396, 399, 400, 408, 411, 412, 413, 418, 420, 421, 432, 434, 436, 440, 442, 444, 446, 447, 452, 468, 484, 485, 488, 490, 491, 494, 497, 503, 505, 506, 507, 516, 517, 518, 519, 526, 527, 528, 534, 535, 536, 537, 538, 542, 543, 545, 546, 550, 551, 552, 555, 556, 559, 560, 566, 567, 570, 574, 575, 581, 582, 586, 593, 625, 626, 628, 634, 665, 669, 691, 719, 769, 771, 776, 796, 799, 803, 805, 810, 856, 925, 926, 940, 941, 986], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 496, 502, 508, 724, 931, 937, 943], "select": [1, 28, 50, 62, 63, 64, 65, 67, 100, 101, 102, 103, 104, 106, 110, 112, 117, 123, 134, 169, 173, 183, 186, 195, 205, 218, 223, 226, 253, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 300, 301, 304, 305, 306, 312, 316, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 365, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 384, 386, 388, 391, 393, 394, 395, 397, 398, 400, 401, 403, 407, 408, 409, 410, 412, 414, 415, 416, 417, 419, 420, 422, 423, 424, 433, 435, 437, 438, 439, 441, 442, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 489, 490, 491, 492, 493, 495, 496, 498, 501, 502, 504, 505, 506, 508, 509, 512, 514, 516, 517, 519, 520, 523, 524, 525, 527, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 551, 552, 555, 557, 558, 559, 560, 561, 563, 567, 568, 569, 570, 571, 572, 574, 579, 580, 581, 582, 583, 585, 593, 612, 628, 631, 643, 657, 665, 670, 672, 691, 719, 799, 900, 901, 913, 928, 944, 958, 986], "shape": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 50, 53, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 85, 88, 90, 91, 92, 93, 94, 95, 96, 99, 112, 117, 124, 126, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 154, 155, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 172, 173, 176, 177, 178, 179, 181, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 197, 199, 202, 203, 205, 206, 207, 208, 209, 210, 212, 214, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 563, 566, 567, 568, 569, 570, 571, 572, 574, 578, 579, 580, 581, 582, 583, 585, 586, 593, 607, 609, 611, 613, 614, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 647, 648, 650, 652, 653, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 718, 719, 720, 723, 724, 726, 731, 732, 733, 735, 737, 744, 745, 747, 748, 750, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 816, 817, 820, 821, 822, 823, 825, 828, 829, 830, 833, 834, 836, 838, 841, 842, 844, 845, 846, 847, 851, 853, 860, 861, 866, 874, 875, 876, 878, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 900, 901, 904, 908, 909, 910, 911, 913, 914, 915, 919, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 948, 955, 957, 958, 959, 960, 961, 964, 965, 966, 970, 971, 972, 973, 974, 975, 978, 986], "3": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 50, 53, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 88, 90, 91, 92, 93, 94, 95, 96, 103, 105, 112, 117, 118, 119, 120, 123, 124, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 253, 260, 261, 262, 263, 267, 277, 278, 279, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 306, 312, 314, 315, 316, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 343, 349, 351, 357, 358, 359, 360, 361, 363, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 434, 435, 436, 440, 441, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 477, 479, 480, 481, 484, 487, 488, 490, 491, 492, 494, 497, 499, 503, 504, 505, 506, 507, 510, 513, 516, 517, 518, 519, 521, 522, 523, 527, 530, 531, 532, 534, 535, 536, 537, 538, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 556, 557, 558, 559, 560, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 578, 579, 580, 581, 582, 583, 585, 586, 593, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 696, 699, 700, 701, 703, 704, 705, 707, 708, 709, 710, 711, 718, 719, 720, 723, 726, 731, 732, 733, 735, 737, 744, 745, 747, 748, 749, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 769, 770, 771, 774, 775, 776, 777, 779, 781, 782, 783, 785, 787, 788, 789, 791, 795, 797, 799, 800, 801, 803, 805, 806, 807, 809, 810, 814, 816, 817, 820, 821, 822, 823, 825, 828, 829, 830, 833, 834, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 874, 875, 876, 878, 879, 880, 883, 884, 885, 886, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 908, 910, 911, 912, 913, 914, 916, 922, 923, 925, 926, 927, 929, 932, 934, 938, 942, 945, 948, 955, 956, 957, 958, 959, 960, 961, 963, 964, 967, 968, 969, 971, 972, 973, 974, 975, 976, 978, 986, 994], "1": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 50, 53, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 88, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 105, 106, 112, 113, 117, 118, 119, 120, 121, 124, 126, 129, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 312, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 487, 488, 489, 490, 491, 492, 493, 495, 496, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 593, 607, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 696, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 718, 719, 720, 722, 723, 726, 731, 732, 733, 735, 737, 744, 745, 747, 748, 749, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 816, 817, 820, 821, 822, 823, 825, 828, 829, 830, 833, 834, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 853, 855, 860, 862, 863, 864, 865, 866, 867, 868, 874, 875, 876, 878, 879, 880, 883, 884, 885, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 925, 927, 928, 934, 940, 941, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 986, 994], "2": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 50, 53, 62, 63, 64, 65, 66, 67, 70, 71, 73, 88, 90, 91, 92, 93, 94, 95, 96, 103, 112, 117, 118, 119, 120, 123, 124, 126, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 174, 176, 177, 178, 179, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 253, 259, 260, 261, 262, 264, 265, 266, 267, 268, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 312, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 339, 341, 342, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 358, 359, 360, 361, 362, 363, 366, 367, 370, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 477, 478, 479, 480, 481, 483, 485, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 502, 503, 505, 506, 507, 508, 509, 511, 512, 514, 516, 517, 518, 519, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 574, 578, 579, 580, 581, 582, 583, 585, 586, 593, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 630, 632, 633, 634, 635, 636, 637, 638, 639, 641, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 696, 699, 700, 702, 706, 707, 708, 709, 710, 711, 718, 719, 720, 723, 724, 726, 731, 732, 733, 735, 737, 744, 747, 748, 749, 750, 754, 755, 758, 759, 760, 761, 762, 763, 764, 765, 770, 772, 773, 777, 782, 783, 789, 791, 792, 793, 798, 799, 800, 801, 804, 807, 809, 811, 813, 814, 815, 816, 817, 820, 821, 822, 823, 825, 828, 829, 830, 833, 834, 836, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 855, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 874, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 908, 910, 912, 913, 914, 915, 916, 918, 920, 925, 926, 927, 928, 931, 932, 933, 934, 935, 937, 940, 941, 943, 944, 946, 955, 956, 957, 958, 959, 960, 963, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 975, 976, 978, 986, 994], "column_0": [1, 134, 221, 253], "register_dataframe_namespac": [1, 64, 65, 66], "split": [1, 63, 171, 253, 505, 506, 940, 941], "splitfram": [1, 63], "df": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 63, 64, 67, 88, 89, 90, 91, 92, 93, 94, 95, 96, 102, 112, 122, 124, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 300, 301, 304, 305, 306, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 563, 566, 567, 568, 569, 570, 571, 572, 574, 578, 579, 580, 581, 582, 583, 585, 586, 593, 626, 665, 666, 672, 675, 678, 687, 691, 719, 747, 799, 928, 935, 940, 941, 965, 986, 994], "_df": [1, 63], "by_alternate_row": 1, "list": [1, 29, 36, 62, 63, 65, 69, 71, 88, 90, 91, 92, 94, 95, 98, 100, 101, 102, 103, 104, 106, 110, 112, 113, 122, 123, 124, 126, 129, 138, 141, 144, 145, 146, 150, 155, 157, 158, 163, 170, 182, 185, 195, 196, 199, 206, 212, 213, 221, 222, 223, 224, 230, 233, 234, 253, 261, 282, 285, 286, 287, 290, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 379, 385, 393, 419, 430, 431, 443, 453, 454, 456, 457, 458, 459, 460, 461, 463, 464, 465, 471, 479, 480, 491, 504, 516, 517, 522, 526, 541, 544, 545, 552, 556, 565, 581, 582, 593, 612, 613, 615, 617, 621, 624, 625, 639, 650, 658, 664, 665, 669, 670, 673, 674, 691, 712, 715, 718, 719, 720, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 749, 762, 814, 819, 823, 826, 830, 831, 841, 878, 884, 886, 887, 888, 889, 890, 891, 893, 894, 895, 898, 926, 939, 958, 967, 970, 986, 994], "with_row_count": [1, 253, 421, 593, 691, 901, 986], "name": [1, 15, 19, 21, 28, 29, 31, 49, 50, 51, 52, 63, 64, 65, 66, 71, 72, 77, 88, 90, 91, 92, 93, 94, 96, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 114, 115, 116, 120, 121, 122, 124, 125, 126, 127, 129, 134, 135, 138, 141, 142, 143, 146, 151, 154, 156, 157, 169, 170, 172, 173, 179, 185, 187, 191, 195, 196, 198, 199, 206, 212, 214, 216, 219, 220, 221, 222, 223, 224, 225, 230, 231, 232, 233, 253, 262, 267, 304, 360, 367, 377, 396, 408, 420, 429, 431, 443, 447, 480, 491, 516, 517, 519, 536, 537, 539, 541, 543, 544, 545, 546, 547, 549, 552, 557, 563, 564, 567, 570, 572, 573, 575, 576, 577, 579, 581, 582, 583, 593, 607, 612, 613, 614, 617, 624, 630, 631, 639, 647, 649, 650, 658, 663, 664, 665, 666, 669, 671, 672, 673, 691, 696, 737, 750, 762, 800, 807, 878, 883, 925, 926, 934, 951, 953, 964, 965, 969, 986, 994], "n": [1, 11, 14, 22, 32, 36, 38, 50, 63, 64, 65, 66, 72, 98, 99, 101, 102, 112, 130, 134, 136, 147, 158, 161, 170, 171, 175, 196, 197, 207, 209, 210, 213, 215, 227, 238, 247, 253, 285, 290, 302, 304, 312, 328, 329, 333, 334, 340, 365, 370, 380, 392, 413, 444, 445, 453, 467, 477, 482, 499, 505, 506, 511, 521, 523, 527, 528, 533, 535, 547, 561, 563, 572, 575, 576, 577, 579, 580, 583, 585, 593, 609, 611, 625, 627, 634, 659, 661, 662, 667, 678, 687, 691, 699, 718, 723, 735, 737, 744, 750, 761, 764, 769, 770, 776, 805, 810, 820, 829, 856, 874, 897, 912, 916, 934, 940, 941, 946, 957, 959, 966, 971, 976, 986, 994], "filter": [1, 63, 104, 112, 113, 117, 143, 166, 167, 168, 235, 253, 488, 507, 534, 540, 559, 593, 614, 618, 628, 675, 691, 900, 986], "col": [1, 27, 29, 62, 63, 64, 65, 67, 92, 94, 112, 122, 124, 134, 146, 150, 157, 158, 159, 167, 169, 183, 186, 195, 199, 206, 223, 230, 233, 253, 259, 260, 261, 262, 263, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 300, 301, 304, 305, 312, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 380, 383, 384, 385, 386, 387, 389, 390, 394, 395, 396, 397, 399, 400, 402, 403, 404, 407, 408, 409, 410, 411, 414, 415, 416, 417, 418, 421, 422, 423, 424, 433, 434, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 514, 515, 516, 517, 518, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 543, 545, 546, 550, 551, 552, 555, 558, 559, 560, 561, 562, 567, 570, 573, 574, 582, 586, 593, 617, 621, 624, 625, 626, 628, 643, 650, 658, 665, 669, 670, 673, 691, 719, 747, 796, 799, 884, 900, 901, 928, 944, 986, 994], "0": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 33, 62, 63, 64, 66, 67, 71, 72, 96, 101, 102, 103, 105, 106, 110, 112, 114, 115, 116, 117, 118, 121, 122, 123, 124, 126, 129, 130, 134, 136, 137, 139, 140, 141, 144, 148, 149, 152, 153, 155, 156, 157, 158, 160, 164, 169, 170, 171, 172, 174, 176, 177, 178, 181, 182, 183, 184, 187, 188, 189, 193, 197, 198, 199, 203, 205, 206, 207, 208, 214, 215, 216, 217, 218, 221, 224, 226, 227, 230, 231, 233, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 253, 259, 261, 264, 269, 270, 271, 272, 273, 274, 277, 278, 279, 280, 281, 284, 286, 289, 295, 304, 314, 316, 318, 319, 320, 321, 323, 328, 331, 332, 341, 345, 346, 348, 349, 355, 361, 362, 373, 374, 375, 376, 378, 380, 381, 382, 386, 387, 389, 390, 391, 395, 398, 401, 402, 404, 405, 406, 408, 409, 411, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 433, 434, 436, 438, 439, 440, 441, 442, 444, 445, 446, 449, 450, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 472, 474, 475, 476, 477, 481, 482, 490, 491, 509, 515, 518, 520, 524, 525, 526, 528, 533, 540, 541, 542, 543, 545, 547, 549, 550, 554, 556, 559, 564, 568, 569, 572, 573, 574, 579, 584, 585, 586, 593, 609, 610, 613, 615, 619, 620, 624, 625, 630, 633, 638, 642, 644, 645, 649, 650, 653, 654, 656, 658, 659, 667, 669, 670, 671, 673, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 691, 701, 702, 703, 704, 705, 706, 707, 709, 711, 719, 722, 737, 745, 748, 750, 755, 756, 761, 762, 763, 765, 777, 781, 782, 783, 784, 785, 786, 787, 788, 789, 794, 795, 801, 802, 813, 815, 816, 817, 821, 825, 828, 830, 838, 840, 842, 844, 845, 846, 847, 853, 854, 860, 863, 864, 874, 878, 879, 880, 886, 888, 889, 891, 892, 893, 895, 896, 897, 909, 910, 911, 915, 916, 918, 925, 926, 928, 944, 950, 960, 961, 964, 969, 970, 974, 976, 977, 986, 994], "drop": [1, 91, 134, 142, 143, 222, 230, 253, 285, 329, 331, 332, 509, 593, 614, 664, 669, 691, 718, 764, 766, 767, 944, 986], "aaa": [1, 29, 253, 484, 516, 517, 919], "bbb": [1, 29, 253, 516, 517], "ccc": [1, 29, 253, 516, 517], "ddd": [1, 29, 253, 516, 517], "eee": [1, 29, 253], "fff": 1, "column": [1, 14, 15, 18, 19, 21, 29, 31, 53, 62, 63, 70, 71, 72, 75, 77, 88, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 119, 124, 129, 133, 134, 135, 141, 142, 143, 144, 146, 151, 154, 156, 157, 158, 159, 163, 164, 169, 170, 172, 173, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 195, 196, 198, 199, 200, 206, 207, 208, 212, 214, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 233, 253, 263, 265, 267, 277, 282, 287, 300, 303, 304, 334, 338, 341, 343, 344, 345, 347, 349, 351, 354, 357, 358, 361, 363, 366, 368, 369, 371, 377, 379, 383, 385, 396, 408, 421, 427, 429, 431, 443, 447, 451, 453, 454, 457, 458, 459, 460, 461, 463, 464, 465, 472, 479, 480, 489, 505, 506, 509, 510, 511, 513, 519, 534, 536, 537, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 558, 559, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 593, 607, 613, 614, 615, 617, 624, 625, 626, 630, 631, 635, 636, 637, 638, 639, 641, 642, 643, 645, 647, 649, 650, 651, 658, 659, 660, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 691, 697, 698, 715, 720, 733, 736, 762, 772, 773, 774, 777, 779, 780, 784, 786, 789, 791, 794, 797, 798, 801, 803, 804, 806, 808, 809, 811, 819, 878, 884, 906, 924, 940, 941, 944, 945, 946, 948, 955, 964, 965, 986, 994], "txt": [1, 112], "utf8": [1, 9, 17, 53, 73, 91, 95, 101, 102, 112, 121, 123, 126, 144, 145, 146, 152, 198, 216, 253, 291, 363, 366, 379, 421, 483, 487, 490, 491, 493, 494, 503, 504, 505, 506, 509, 510, 511, 513, 544, 546, 593, 615, 617, 649, 691, 724, 803, 806, 819, 852, 918, 922, 925, 926, 928, 929, 938, 939, 940, 941, 944, 945, 946, 948, 986], "register_lazyframe_namespac": [1, 63, 64, 66], "dtypeoper": [1, 65], "ldf": [1, 65, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687], "_ldf": [1, 65], "upcast_integer_typ": [1, 65], "with_column": [1, 65, 129, 159, 186, 253, 260, 267, 278, 286, 314, 315, 317, 318, 319, 324, 327, 329, 359, 363, 366, 373, 387, 389, 390, 391, 395, 396, 399, 402, 404, 405, 406, 408, 411, 418, 420, 421, 434, 436, 440, 443, 444, 445, 446, 484, 488, 491, 494, 497, 499, 500, 503, 505, 506, 507, 515, 518, 526, 528, 535, 538, 540, 543, 546, 552, 556, 566, 582, 586, 593, 626, 643, 691, 719, 747, 799], "tp": [1, 65], "cast": [1, 64, 65, 73, 88, 152, 158, 159, 186, 217, 230, 253, 266, 315, 326, 327, 333, 363, 366, 421, 442, 445, 452, 492, 493, 515, 520, 526, 546, 593, 625, 626, 643, 669, 691, 747, 759, 760, 769, 803, 806, 882, 927, 928, 956, 965, 970, 986], "int64": [1, 29, 31, 64, 65, 95, 99, 101, 130, 144, 152, 158, 159, 186, 198, 211, 217, 253, 326, 327, 339, 342, 346, 348, 350, 355, 362, 377, 445, 452, 492, 520, 526, 540, 544, 557, 565, 581, 593, 615, 625, 626, 643, 649, 672, 691, 759, 760, 775, 778, 785, 787, 790, 795, 802, 882, 899, 956, 968, 969, 970, 986], "int8": [1, 65, 152, 253, 326, 327, 520, 593, 759, 760, 764, 861, 885, 956, 974, 986], "int16": [1, 65, 326, 327, 520, 593, 759, 760, 861, 956, 966, 986], "int32": [1, 65, 88, 91, 95, 123, 124, 158, 159, 171, 253, 314, 344, 371, 526, 593, 625, 626, 691, 780, 811, 860, 970, 986], "b": [1, 26, 27, 30, 33, 50, 53, 65, 70, 73, 88, 90, 91, 92, 93, 94, 95, 96, 105, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 163, 164, 166, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 253, 260, 262, 266, 267, 279, 282, 286, 291, 293, 306, 314, 315, 322, 330, 331, 332, 377, 381, 382, 383, 385, 388, 391, 393, 395, 396, 398, 401, 402, 403, 404, 405, 406, 408, 412, 420, 435, 441, 443, 445, 447, 455, 472, 478, 480, 489, 492, 499, 519, 530, 532, 534, 536, 537, 538, 539, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 556, 557, 558, 559, 560, 563, 566, 567, 568, 569, 570, 571, 572, 574, 576, 577, 579, 580, 581, 582, 583, 585, 593, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 627, 630, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 699, 719, 747, 763, 765, 813, 814, 822, 834, 841, 852, 883, 899, 924, 927, 934, 955, 969, 973, 986], "4": [1, 14, 22, 26, 27, 29, 30, 33, 50, 53, 62, 63, 64, 65, 66, 67, 70, 72, 73, 88, 90, 91, 92, 93, 94, 95, 96, 112, 118, 119, 120, 126, 129, 134, 135, 136, 137, 140, 143, 146, 147, 148, 149, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 177, 179, 182, 183, 185, 186, 187, 188, 192, 196, 201, 206, 209, 210, 211, 212, 213, 214, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 253, 259, 260, 261, 264, 266, 267, 279, 284, 285, 286, 287, 290, 298, 299, 302, 306, 312, 314, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 334, 338, 342, 349, 350, 351, 357, 358, 360, 361, 362, 363, 366, 367, 368, 369, 371, 373, 378, 381, 382, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 405, 406, 408, 411, 412, 413, 415, 418, 420, 421, 434, 436, 440, 442, 443, 445, 446, 447, 449, 450, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 470, 471, 474, 478, 479, 480, 481, 484, 494, 495, 497, 498, 499, 501, 503, 505, 506, 509, 516, 517, 518, 519, 521, 522, 523, 526, 527, 528, 535, 538, 539, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 556, 558, 559, 563, 565, 566, 567, 568, 569, 570, 571, 572, 579, 580, 581, 582, 583, 585, 586, 593, 607, 609, 610, 611, 614, 616, 617, 618, 619, 620, 622, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 643, 644, 645, 652, 653, 654, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 699, 702, 709, 718, 719, 720, 723, 731, 732, 735, 744, 748, 749, 751, 761, 763, 765, 777, 778, 784, 786, 789, 790, 791, 792, 793, 794, 798, 800, 801, 802, 803, 806, 807, 808, 809, 821, 822, 829, 830, 833, 834, 836, 841, 844, 845, 846, 847, 851, 861, 867, 874, 875, 876, 878, 880, 884, 889, 891, 892, 893, 894, 895, 897, 899, 909, 913, 914, 919, 929, 930, 932, 933, 936, 938, 940, 941, 944, 955, 957, 958, 959, 966, 969, 970, 971, 978, 986, 994], "c": [1, 26, 27, 30, 33, 50, 53, 63, 65, 73, 91, 93, 95, 105, 112, 122, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 150, 151, 152, 153, 155, 156, 157, 158, 161, 163, 164, 171, 172, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 191, 193, 194, 195, 197, 198, 199, 202, 203, 205, 206, 207, 208, 209, 211, 215, 216, 217, 218, 220, 221, 224, 225, 227, 228, 230, 233, 236, 237, 238, 239, 240, 241, 243, 246, 247, 253, 260, 267, 282, 291, 293, 396, 408, 443, 445, 472, 505, 509, 530, 532, 536, 537, 539, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 558, 559, 560, 563, 566, 567, 568, 569, 570, 571, 572, 579, 580, 582, 583, 585, 593, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 621, 624, 625, 630, 633, 639, 642, 644, 647, 648, 649, 650, 654, 657, 658, 663, 666, 669, 670, 673, 676, 677, 678, 679, 680, 681, 683, 686, 687, 691, 763, 834, 852, 940, 944, 973, 986], "5": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 30, 33, 62, 63, 65, 66, 67, 70, 71, 88, 91, 92, 93, 94, 95, 98, 99, 102, 118, 124, 130, 134, 136, 137, 140, 146, 147, 148, 149, 152, 154, 155, 156, 157, 158, 159, 161, 162, 164, 165, 167, 169, 170, 173, 174, 175, 177, 179, 182, 183, 185, 187, 188, 189, 192, 196, 201, 206, 209, 210, 211, 212, 213, 216, 219, 224, 226, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 253, 260, 261, 264, 284, 286, 287, 290, 295, 301, 302, 312, 314, 315, 316, 317, 318, 319, 328, 329, 330, 334, 335, 339, 359, 361, 362, 363, 366, 368, 376, 377, 380, 386, 387, 389, 390, 392, 393, 396, 399, 402, 404, 405, 406, 408, 411, 413, 434, 436, 442, 443, 444, 445, 447, 449, 450, 454, 455, 456, 457, 458, 460, 464, 466, 468, 474, 480, 485, 493, 494, 497, 498, 515, 518, 519, 521, 523, 527, 528, 538, 539, 542, 543, 545, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 563, 565, 566, 567, 568, 569, 570, 571, 572, 574, 579, 580, 582, 583, 585, 593, 609, 610, 611, 616, 617, 618, 619, 620, 622, 624, 625, 626, 627, 629, 631, 632, 633, 634, 637, 638, 639, 644, 652, 653, 654, 657, 658, 659, 660, 661, 662, 668, 669, 671, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 699, 702, 706, 709, 719, 720, 723, 726, 735, 744, 747, 749, 751, 757, 761, 762, 763, 764, 765, 770, 771, 772, 773, 774, 775, 799, 801, 802, 803, 804, 806, 808, 809, 817, 820, 829, 830, 833, 834, 860, 861, 867, 874, 875, 876, 878, 879, 880, 884, 886, 887, 888, 890, 891, 894, 897, 899, 909, 915, 920, 928, 929, 933, 957, 971, 974, 978, 986, 994], "6": [1, 26, 27, 29, 30, 31, 32, 33, 63, 65, 70, 88, 91, 92, 93, 94, 96, 134, 138, 141, 142, 143, 144, 146, 147, 150, 151, 153, 154, 155, 156, 158, 159, 161, 163, 164, 165, 167, 169, 170, 172, 176, 177, 178, 179, 181, 184, 187, 188, 189, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 223, 224, 225, 226, 227, 228, 230, 231, 238, 246, 247, 253, 260, 264, 267, 287, 306, 314, 326, 327, 330, 334, 356, 358, 361, 372, 381, 382, 388, 392, 393, 395, 413, 442, 448, 450, 451, 454, 457, 458, 459, 460, 461, 463, 464, 465, 468, 480, 485, 489, 494, 497, 498, 518, 521, 523, 535, 536, 538, 550, 551, 552, 556, 559, 566, 582, 593, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 625, 626, 627, 629, 630, 632, 634, 635, 639, 642, 644, 647, 649, 650, 652, 653, 654, 657, 658, 661, 662, 665, 666, 668, 669, 671, 672, 678, 686, 687, 691, 699, 720, 749, 755, 759, 760, 765, 796, 809, 830, 867, 880, 884, 889, 891, 892, 893, 895, 899, 920, 924, 929, 933, 956, 986, 994], "7": [1, 26, 27, 29, 30, 31, 32, 33, 63, 65, 70, 72, 118, 138, 139, 140, 141, 142, 144, 146, 150, 151, 153, 158, 159, 161, 163, 165, 172, 176, 177, 178, 181, 184, 187, 189, 191, 193, 195, 197, 198, 199, 202, 203, 205, 207, 208, 209, 210, 215, 216, 217, 218, 224, 225, 226, 227, 228, 253, 260, 264, 327, 334, 338, 357, 359, 360, 367, 369, 371, 378, 392, 395, 413, 421, 442, 454, 458, 464, 480, 521, 523, 538, 550, 551, 559, 566, 582, 593, 612, 613, 615, 617, 621, 625, 626, 627, 629, 630, 634, 642, 645, 647, 649, 650, 661, 662, 666, 672, 691, 706, 770, 774, 780, 799, 800, 807, 809, 853, 861, 884, 894, 986, 994], "float32": [1, 27, 65, 152, 215, 216, 253, 565, 691, 837, 860, 986], "lazi": [1, 65, 70, 72, 99, 112, 124, 130, 173, 186, 253, 267, 540, 561, 593, 604, 630, 631, 670, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 691, 994], "i16": [1, 65, 472, 593, 861, 966, 986, 994], "i32": [1, 65, 88, 91, 95, 123, 124, 199, 253, 314, 344, 371, 472, 498, 586, 593, 650, 691, 780, 811, 860, 933, 986, 994], "f32": [1, 65, 143, 215, 253, 286, 450, 472, 556, 593, 614, 691, 719, 860, 880, 986], "i64": [1, 14, 18, 50, 63, 64, 65, 66, 70, 88, 90, 91, 92, 93, 94, 95, 99, 112, 130, 134, 135, 136, 137, 138, 141, 143, 144, 146, 147, 149, 150, 154, 155, 156, 157, 158, 159, 161, 163, 164, 165, 166, 168, 172, 173, 176, 179, 181, 185, 186, 187, 188, 191, 192, 193, 194, 197, 199, 202, 203, 205, 206, 208, 209, 210, 212, 218, 220, 221, 222, 223, 224, 225, 226, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 243, 246, 247, 253, 260, 262, 266, 267, 285, 286, 287, 288, 289, 290, 292, 294, 296, 297, 298, 299, 300, 301, 302, 305, 306, 312, 315, 317, 318, 319, 324, 325, 326, 327, 329, 330, 339, 340, 342, 346, 348, 350, 355, 362, 365, 377, 380, 382, 383, 384, 385, 387, 388, 392, 393, 394, 395, 396, 399, 402, 404, 405, 406, 408, 410, 413, 417, 419, 420, 434, 435, 436, 443, 444, 445, 446, 447, 448, 451, 452, 454, 455, 467, 469, 470, 472, 473, 474, 478, 479, 480, 499, 500, 516, 517, 518, 519, 520, 521, 522, 523, 527, 528, 529, 531, 534, 536, 538, 543, 544, 546, 550, 551, 552, 555, 556, 557, 558, 559, 563, 565, 566, 567, 570, 574, 578, 582, 583, 586, 593, 607, 609, 611, 613, 614, 617, 618, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 634, 635, 636, 639, 641, 643, 644, 647, 648, 650, 652, 653, 657, 658, 660, 661, 662, 663, 664, 665, 666, 669, 671, 673, 674, 675, 677, 678, 679, 680, 683, 686, 687, 691, 699, 700, 718, 719, 720, 723, 731, 732, 733, 735, 737, 744, 747, 751, 754, 757, 758, 759, 760, 763, 775, 776, 778, 785, 787, 790, 795, 802, 805, 820, 822, 823, 829, 833, 841, 866, 883, 884, 887, 890, 894, 897, 900, 901, 904, 908, 909, 913, 914, 955, 957, 958, 959, 965, 971, 972, 975, 978, 986, 994], "register_series_namespac": [1, 63, 64, 65], "math": [1, 66, 755, 910, 960, 986], "mathshortcut": [1, 66], "": [1, 27, 29, 66, 71, 88, 95, 96, 101, 102, 113, 126, 135, 141, 143, 145, 146, 157, 158, 164, 172, 173, 185, 187, 192, 193, 199, 206, 210, 214, 220, 222, 223, 224, 253, 290, 291, 298, 299, 302, 340, 363, 366, 377, 409, 430, 435, 438, 439, 443, 444, 452, 456, 480, 484, 490, 491, 494, 495, 497, 499, 501, 503, 504, 506, 509, 510, 511, 513, 515, 516, 517, 536, 537, 541, 544, 547, 552, 557, 560, 561, 567, 570, 572, 581, 582, 593, 607, 613, 614, 617, 624, 625, 631, 650, 658, 663, 664, 665, 675, 691, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 718, 720, 723, 724, 726, 731, 732, 733, 735, 744, 745, 748, 749, 750, 751, 754, 755, 756, 757, 758, 759, 760, 761, 764, 765, 770, 776, 792, 793, 800, 803, 806, 807, 814, 816, 817, 820, 821, 822, 823, 825, 828, 829, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 874, 875, 876, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 908, 909, 910, 911, 913, 914, 916, 919, 920, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 936, 937, 938, 941, 942, 943, 944, 945, 946, 948, 950, 953, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 986], "_": [1, 62, 66, 96, 187, 214, 253, 491, 505, 926, 940, 964, 986], "squar": [1, 66, 235, 409, 481, 593, 675, 854, 915, 986], "cube": [1, 66, 446, 593], "s2": [1, 120, 152, 253, 699, 737, 749, 765, 841, 853, 867, 899, 969, 978, 986], "renam": [1, 91, 101, 102, 199, 230, 233, 253, 262, 420, 432, 517, 578, 581, 593, 650, 669, 673, 691, 861, 953, 965, 986], "n2": [1, 304], "in_plac": [1, 163, 204, 228, 253, 881, 883, 907, 914, 986], "true": [1, 5, 9, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 48, 50, 67, 69, 70, 72, 73, 88, 89, 93, 95, 98, 101, 102, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 129, 131, 133, 135, 136, 137, 140, 149, 152, 153, 155, 156, 157, 158, 164, 166, 167, 168, 170, 173, 174, 177, 182, 183, 185, 187, 188, 195, 196, 197, 199, 206, 212, 216, 217, 220, 221, 222, 223, 224, 226, 230, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 253, 261, 263, 264, 265, 266, 267, 278, 283, 300, 303, 304, 308, 314, 323, 324, 325, 326, 327, 333, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 389, 390, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 418, 440, 442, 452, 462, 467, 472, 477, 479, 480, 484, 486, 488, 492, 493, 498, 504, 505, 507, 509, 510, 511, 513, 516, 517, 522, 529, 532, 535, 536, 537, 538, 540, 541, 547, 548, 559, 575, 579, 581, 586, 593, 607, 609, 610, 611, 616, 618, 620, 624, 625, 630, 631, 633, 635, 639, 644, 650, 654, 655, 656, 658, 663, 664, 665, 669, 674, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 691, 697, 698, 699, 700, 710, 733, 736, 740, 745, 749, 750, 769, 771, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 805, 807, 808, 809, 810, 811, 813, 815, 816, 817, 823, 827, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 854, 867, 875, 876, 882, 892, 899, 912, 914, 919, 921, 923, 927, 928, 933, 939, 940, 942, 944, 945, 946, 948, 968, 969, 977, 978, 986, 994], "s3": [1, 104, 113, 117, 737, 986], "n3": 1, "8": [1, 26, 27, 30, 31, 32, 33, 44, 59, 61, 62, 63, 65, 66, 70, 71, 96, 118, 122, 124, 134, 138, 139, 140, 141, 142, 143, 144, 146, 150, 151, 153, 156, 161, 163, 172, 176, 177, 178, 181, 189, 191, 193, 195, 197, 198, 199, 202, 203, 205, 207, 208, 209, 210, 215, 216, 217, 218, 224, 225, 227, 228, 230, 253, 264, 266, 279, 285, 286, 322, 324, 327, 328, 331, 332, 334, 395, 412, 436, 442, 446, 447, 454, 455, 458, 459, 461, 463, 465, 472, 478, 480, 495, 501, 509, 519, 523, 535, 539, 542, 547, 548, 549, 551, 552, 556, 558, 563, 566, 567, 568, 569, 570, 571, 572, 579, 580, 582, 583, 585, 593, 612, 613, 614, 615, 617, 621, 627, 630, 634, 635, 644, 647, 649, 650, 661, 662, 666, 669, 672, 691, 718, 719, 761, 780, 830, 853, 874, 878, 884, 886, 889, 891, 892, 893, 895, 930, 936, 944, 986, 994], "9": [1, 26, 27, 30, 33, 62, 70, 134, 139, 140, 152, 159, 161, 165, 199, 209, 224, 225, 228, 230, 246, 253, 260, 264, 266, 279, 285, 297, 300, 322, 324, 327, 331, 332, 334, 338, 357, 368, 369, 395, 400, 408, 412, 442, 454, 456, 458, 464, 474, 478, 491, 523, 538, 545, 550, 551, 593, 626, 627, 629, 634, 650, 661, 666, 669, 686, 691, 718, 733, 763, 774, 784, 786, 794, 800, 801, 807, 808, 841, 853, 884, 886, 894, 896, 909, 926, 986], "27": [1, 66, 246, 327, 344, 358, 371, 593, 686, 986, 994], "16": [1, 29, 41, 56, 64, 71, 96, 158, 159, 230, 253, 324, 327, 395, 436, 446, 458, 498, 509, 538, 550, 555, 556, 559, 572, 579, 593, 625, 626, 654, 669, 691, 800, 807, 874, 910, 933, 944, 960, 986], "64": [1, 40, 43, 58, 64, 66, 436, 446, 593, 656, 691, 874, 986], "25": [1, 29, 66, 72, 95, 124, 129, 140, 158, 159, 173, 226, 230, 253, 329, 344, 360, 367, 371, 528, 561, 593, 625, 626, 631, 637, 667, 669, 691, 763, 764, 800, 807, 813, 830, 874, 878, 986], "125": [1, 29, 66, 253, 260, 593, 874, 986], "arg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 56, 57, 58, 59, 60, 61, 186, 217, 253, 445, 541, 560, 593, 643, 691, 700, 968, 969, 986], "ani": [2, 3, 4, 7, 27, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 56, 57, 58, 59, 60, 61, 68, 88, 89, 90, 91, 92, 93, 94, 101, 102, 104, 105, 106, 110, 112, 113, 114, 116, 121, 123, 124, 126, 131, 134, 139, 143, 147, 149, 150, 152, 169, 170, 171, 185, 186, 195, 196, 212, 213, 216, 217, 222, 224, 253, 260, 264, 267, 282, 286, 314, 361, 373, 382, 387, 389, 390, 400, 411, 418, 419, 421, 432, 434, 436, 440, 442, 445, 454, 456, 468, 471, 498, 509, 510, 511, 513, 518, 522, 528, 535, 536, 538, 547, 558, 565, 579, 586, 593, 614, 620, 643, 664, 691, 699, 700, 715, 719, 765, 801, 822, 841, 853, 861, 884, 886, 898, 901, 933, 944, 945, 946, 948, 958, 967, 968, 969, 986, 994], "kwarg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 139, 186, 217, 253, 445, 593, 643, 691, 969, 986], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 593, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 953, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 986, 993], "method": [2, 3, 4, 7, 26, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 56, 57, 58, 59, 60, 61, 89, 101, 102, 105, 121, 131, 143, 157, 165, 170, 183, 189, 195, 196, 222, 230, 245, 253, 260, 263, 264, 363, 366, 373, 380, 387, 389, 390, 395, 411, 418, 434, 436, 440, 442, 446, 449, 450, 457, 458, 459, 460, 461, 463, 464, 465, 518, 528, 530, 535, 547, 572, 573, 579, 587, 589, 593, 594, 595, 598, 599, 600, 601, 604, 614, 629, 645, 664, 669, 685, 691, 700, 803, 806, 820, 833, 879, 880, 891, 970, 980, 982, 986, 987, 990, 991, 992], "attribut": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 56, 57, 58, 59, 60, 61, 121, 253, 587, 589, 594, 595, 599, 600, 601, 691, 980, 982, 987, 990, 991, 992], "A": [4, 27, 29, 48, 51, 69, 72, 95, 101, 102, 103, 110, 112, 128, 129, 152, 158, 173, 187, 196, 212, 224, 225, 226, 230, 253, 259, 304, 334, 339, 342, 346, 348, 350, 355, 362, 373, 380, 389, 390, 398, 401, 402, 404, 411, 418, 419, 420, 430, 440, 447, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 484, 485, 490, 491, 493, 499, 500, 515, 519, 545, 556, 560, 593, 625, 631, 647, 666, 669, 691, 770, 775, 778, 785, 787, 790, 795, 802, 820, 886, 887, 888, 890, 893, 894, 895, 919, 920, 925, 926, 928, 934, 935, 950, 986], "encod": [4, 61, 101, 102, 112, 308, 486, 740, 921], "set": [4, 5, 6, 7, 8, 9, 11, 13, 14, 17, 22, 23, 25, 27, 29, 30, 31, 32, 63, 67, 72, 89, 91, 94, 96, 101, 102, 105, 106, 110, 112, 114, 115, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 138, 143, 157, 160, 170, 173, 179, 197, 199, 205, 214, 221, 222, 224, 230, 253, 267, 299, 303, 304, 370, 391, 400, 421, 445, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 473, 477, 478, 496, 502, 503, 508, 509, 510, 511, 513, 540, 575, 576, 577, 581, 586, 593, 612, 614, 616, 624, 630, 631, 635, 639, 650, 655, 656, 657, 664, 669, 672, 675, 691, 699, 700, 732, 736, 737, 810, 828, 841, 861, 886, 887, 888, 889, 890, 891, 893, 894, 895, 897, 901, 908, 912, 913, 931, 937, 938, 943, 944, 945, 946, 948, 968, 986, 994], "string": [4, 6, 8, 11, 12, 13, 17, 27, 29, 31, 32, 36, 48, 53, 61, 72, 73, 95, 101, 102, 112, 121, 122, 123, 126, 129, 135, 152, 156, 157, 158, 159, 173, 199, 206, 215, 220, 224, 226, 230, 233, 253, 260, 291, 310, 315, 356, 360, 363, 366, 367, 379, 385, 396, 421, 443, 445, 457, 458, 459, 460, 461, 463, 464, 465, 480, 483, 484, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 515, 536, 537, 541, 543, 545, 546, 552, 560, 567, 570, 581, 582, 593, 607, 616, 623, 624, 625, 626, 631, 650, 658, 663, 669, 672, 673, 691, 724, 742, 747, 796, 800, 803, 806, 807, 819, 834, 917, 918, 919, 923, 924, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 950, 966, 986, 994], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 623, 646, 691], "activ": [5, 9, 15, 16, 18, 19, 20, 21, 24, 286, 491, 719, 926], "bool": [5, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 62, 67, 69, 70, 73, 88, 89, 93, 95, 101, 102, 106, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 129, 133, 135, 136, 137, 149, 150, 152, 153, 155, 156, 157, 158, 163, 164, 166, 167, 168, 173, 185, 187, 197, 200, 204, 206, 212, 216, 217, 220, 221, 222, 223, 226, 228, 230, 237, 239, 240, 243, 253, 263, 264, 265, 266, 267, 277, 283, 284, 286, 300, 303, 305, 308, 314, 323, 324, 325, 326, 327, 328, 343, 359, 361, 372, 373, 374, 375, 376, 389, 390, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 418, 419, 425, 426, 427, 428, 440, 442, 450, 452, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 471, 472, 477, 479, 480, 484, 486, 488, 498, 499, 500, 504, 505, 507, 509, 510, 511, 513, 517, 529, 532, 535, 536, 537, 538, 540, 541, 547, 550, 565, 575, 579, 581, 593, 607, 609, 611, 616, 618, 620, 621, 624, 625, 630, 631, 635, 639, 644, 651, 654, 655, 656, 658, 663, 664, 665, 669, 677, 679, 680, 683, 691, 697, 698, 699, 700, 709, 716, 717, 719, 733, 736, 738, 740, 745, 750, 757, 758, 759, 760, 761, 762, 779, 799, 801, 813, 815, 816, 817, 823, 827, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 875, 876, 878, 880, 881, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 899, 901, 902, 907, 912, 914, 919, 921, 923, 933, 934, 935, 939, 940, 942, 944, 945, 946, 948, 967, 968, 969, 972, 975, 977, 986], "decim": [5, 27, 29, 253, 466, 593, 896, 986], "temporari": 5, "remov": [5, 7, 141, 225, 253, 267, 377, 420, 496, 502, 508, 509, 557, 564, 572, 579, 593, 613, 666, 691, 931, 937, 943, 944], "later": 5, "onc": [5, 101, 102, 105, 128, 133, 134, 197, 233, 253, 267, 313, 467, 593, 608, 673, 691, 700, 897, 986], "stabil": 5, "happen": 5, "being": [5, 71, 101, 102, 112, 117, 224, 225, 253, 267, 328, 360, 457, 458, 459, 460, 461, 463, 464, 465, 556, 593, 666, 691, 761, 800, 830, 878, 986, 994], "consid": [5, 71, 101, 102, 112, 117, 134, 143, 153, 179, 222, 224, 225, 253, 267, 317, 318, 319, 328, 360, 457, 458, 459, 460, 461, 463, 464, 465, 550, 559, 593, 614, 627, 634, 639, 664, 666, 691, 700, 751, 752, 753, 761, 800, 830, 843, 878, 899, 900, 901, 986], "break": [5, 71, 117, 224, 225, 253, 267, 328, 360, 457, 458, 459, 460, 461, 463, 464, 465, 593, 666, 691, 761, 800, 830, 878, 986], "chang": [5, 25, 62, 71, 101, 102, 117, 224, 225, 226, 253, 267, 328, 329, 360, 444, 457, 458, 459, 460, 461, 463, 464, 465, 593, 666, 691, 761, 800, 830, 874, 878, 907, 986], "current": [5, 8, 25, 50, 89, 95, 103, 133, 136, 137, 253, 304, 360, 444, 593, 604, 609, 610, 691, 750, 754, 800, 874, 986], "alpha": [5, 69, 267, 374, 375, 376, 593, 611, 616, 618, 644, 654, 691, 815, 816, 817, 986], "state": [5, 7, 69, 81, 550, 604, 611, 616, 618, 644, 654, 691], "cfg": [6, 7, 8, 14, 131], "previous": 6, "save": [6, 359, 604, 799], "share": [6, 53, 145, 253, 814, 986], "option": [6, 7, 8, 25, 29, 37, 62, 72, 101, 104, 105, 106, 110, 113, 114, 116, 118, 121, 122, 123, 124, 125, 126, 127, 169, 173, 179, 212, 216, 221, 253, 409, 456, 457, 458, 459, 460, 461, 463, 464, 465, 477, 503, 565, 581, 586, 593, 604, 630, 631, 639, 691, 850, 854, 886, 887, 888, 889, 890, 891, 893, 894, 895, 912, 938, 965, 986], "paramet": [6, 10, 11, 12, 13, 14, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 38, 45, 48, 49, 50, 51, 52, 54, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 136, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 163, 164, 169, 170, 171, 172, 173, 175, 177, 179, 180, 182, 183, 185, 186, 187, 189, 191, 192, 193, 195, 196, 197, 199, 200, 202, 203, 205, 206, 207, 208, 209, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 235, 238, 245, 247, 253, 260, 262, 264, 266, 267, 277, 282, 283, 284, 285, 286, 289, 290, 291, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 317, 318, 319, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 340, 356, 359, 360, 361, 363, 365, 366, 367, 370, 372, 373, 374, 375, 376, 377, 380, 382, 383, 387, 388, 389, 390, 391, 392, 395, 396, 400, 409, 411, 413, 414, 418, 419, 420, 421, 434, 436, 440, 442, 443, 444, 445, 446, 447, 449, 450, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 515, 516, 517, 518, 519, 521, 522, 527, 528, 529, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 557, 559, 560, 561, 563, 564, 565, 566, 567, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 593, 607, 609, 611, 613, 614, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 630, 631, 634, 635, 639, 640, 643, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 675, 678, 685, 687, 691, 696, 699, 700, 709, 715, 716, 717, 718, 719, 722, 723, 724, 731, 732, 733, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 750, 751, 752, 753, 757, 758, 759, 760, 761, 762, 763, 764, 765, 769, 770, 771, 776, 796, 799, 800, 801, 803, 805, 806, 807, 810, 813, 814, 815, 816, 817, 820, 821, 822, 823, 828, 829, 830, 833, 834, 843, 849, 850, 854, 856, 861, 874, 878, 879, 880, 881, 882, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 908, 912, 913, 914, 916, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 948, 950, 951, 953, 957, 958, 964, 965, 966, 967, 968, 969, 971, 972, 975, 976, 977, 978, 986], "json": [6, 8, 31, 32, 108, 109, 115, 253, 492, 493, 604, 623, 646, 672, 691, 927, 928], "produc": [6, 123, 124, 126, 284, 429, 566, 635, 691, 717], "reset": [7, 131], "default": [7, 12, 25, 26, 27, 29, 30, 31, 32, 33, 48, 67, 72, 88, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 105, 110, 112, 121, 122, 123, 124, 125, 126, 129, 130, 143, 145, 157, 159, 160, 170, 173, 179, 185, 187, 195, 196, 197, 207, 214, 222, 224, 227, 231, 253, 299, 303, 304, 315, 359, 372, 374, 375, 376, 391, 414, 421, 438, 439, 444, 450, 467, 473, 482, 490, 496, 498, 502, 503, 508, 509, 510, 511, 513, 533, 540, 547, 561, 565, 572, 575, 579, 580, 581, 585, 593, 614, 616, 624, 626, 631, 639, 656, 659, 664, 667, 672, 691, 732, 736, 737, 747, 799, 813, 814, 815, 816, 817, 828, 861, 870, 871, 874, 880, 897, 908, 916, 919, 925, 931, 933, 937, 938, 943, 944, 945, 946, 948, 976, 986, 994], "note": [7, 17, 29, 37, 62, 72, 88, 89, 90, 92, 94, 95, 99, 101, 103, 104, 110, 112, 113, 122, 124, 126, 128, 130, 131, 133, 134, 139, 148, 158, 159, 169, 170, 172, 173, 183, 186, 195, 196, 213, 216, 221, 225, 226, 230, 253, 267, 286, 303, 326, 327, 331, 332, 352, 353, 356, 360, 367, 396, 402, 404, 457, 458, 459, 460, 461, 463, 464, 465, 477, 484, 490, 491, 494, 496, 497, 499, 502, 508, 509, 520, 528, 550, 559, 574, 586, 593, 611, 618, 619, 625, 626, 627, 631, 634, 647, 654, 666, 669, 691, 700, 719, 736, 759, 760, 792, 793, 796, 807, 900, 901, 907, 912, 919, 925, 926, 929, 931, 932, 934, 937, 943, 944, 956, 986], "oper": [7, 29, 53, 70, 78, 79, 88, 90, 91, 92, 93, 94, 101, 110, 134, 147, 152, 157, 164, 174, 180, 183, 185, 186, 190, 211, 216, 217, 221, 224, 232, 233, 253, 260, 261, 264, 304, 323, 324, 325, 326, 327, 328, 373, 387, 389, 390, 408, 411, 418, 432, 434, 436, 440, 442, 446, 452, 518, 528, 535, 536, 537, 545, 546, 556, 593, 618, 624, 627, 630, 634, 639, 640, 673, 691, 699, 757, 758, 759, 760, 761, 882, 963, 967, 968, 969, 977, 986], "from": [7, 27, 29, 50, 52, 62, 70, 72, 88, 89, 90, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 140, 141, 145, 147, 156, 158, 159, 170, 171, 173, 174, 179, 191, 195, 197, 199, 221, 222, 224, 226, 253, 304, 323, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 377, 395, 409, 438, 439, 444, 445, 467, 480, 490, 491, 492, 498, 509, 510, 511, 513, 530, 532, 543, 553, 554, 555, 579, 580, 584, 592, 593, 613, 618, 623, 625, 626, 631, 639, 646, 647, 650, 664, 670, 691, 699, 737, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 850, 854, 870, 871, 872, 874, 897, 925, 926, 927, 933, 944, 945, 946, 948, 975, 978, 986, 994], "environ": [7, 25, 125, 128], "local": [7, 104, 113, 126, 359, 772, 773, 799, 804, 875, 876, 986], "non": [7, 29, 37, 62, 93, 171, 179, 199, 225, 230, 253, 304, 396, 444, 456, 457, 458, 459, 460, 461, 463, 464, 465, 485, 491, 536, 537, 543, 545, 546, 552, 567, 570, 576, 577, 581, 582, 593, 639, 650, 666, 669, 691, 737, 834, 874, 886, 887, 888, 889, 890, 891, 893, 894, 895, 920, 926, 968, 986], "env": [7, 127], "back": [7, 62, 147, 217, 253, 443, 593, 699, 969, 986], "valu": [7, 10, 11, 14, 25, 27, 29, 31, 45, 46, 48, 53, 60, 62, 70, 71, 73, 91, 93, 101, 102, 103, 112, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 133, 134, 135, 140, 143, 147, 148, 149, 153, 156, 158, 159, 160, 161, 165, 169, 170, 175, 176, 177, 178, 179, 181, 183, 185, 187, 188, 189, 191, 195, 196, 197, 202, 203, 206, 207, 208, 209, 212, 213, 217, 220, 224, 225, 226, 227, 236, 237, 239, 240, 241, 243, 244, 253, 259, 260, 261, 263, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 284, 285, 288, 289, 290, 292, 294, 295, 296, 298, 301, 302, 305, 306, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 324, 327, 328, 329, 331, 332, 334, 338, 351, 357, 368, 373, 374, 375, 376, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 404, 405, 406, 407, 410, 411, 412, 415, 417, 418, 419, 421, 422, 423, 424, 433, 434, 435, 436, 437, 438, 439, 440, 441, 444, 445, 446, 449, 450, 453, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 469, 470, 471, 474, 475, 476, 477, 479, 480, 481, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 499, 500, 503, 505, 506, 507, 515, 518, 520, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 535, 537, 539, 543, 546, 548, 550, 551, 552, 558, 559, 565, 567, 568, 569, 570, 571, 574, 575, 576, 577, 582, 586, 593, 607, 614, 619, 620, 625, 626, 628, 629, 636, 637, 638, 639, 641, 642, 645, 647, 652, 653, 658, 659, 660, 663, 666, 667, 672, 676, 677, 679, 680, 681, 683, 684, 691, 695, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 713, 714, 717, 718, 721, 722, 723, 725, 727, 728, 729, 731, 735, 738, 740, 741, 742, 743, 747, 748, 751, 752, 753, 755, 756, 761, 762, 763, 764, 766, 767, 770, 774, 791, 797, 808, 814, 815, 816, 817, 820, 821, 822, 825, 827, 828, 829, 830, 831, 833, 834, 836, 838, 839, 841, 842, 844, 845, 846, 847, 851, 856, 861, 862, 863, 865, 866, 868, 870, 871, 872, 873, 874, 877, 878, 879, 880, 886, 887, 888, 889, 890, 891, 893, 894, 895, 897, 898, 899, 900, 901, 904, 905, 909, 910, 911, 912, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 932, 934, 935, 938, 940, 941, 942, 950, 956, 957, 958, 959, 960, 961, 969, 970, 973, 975, 977, 978, 986, 994], "exampl": [7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 50, 53, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 102, 103, 104, 105, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 571, 572, 574, 578, 579, 580, 581, 582, 583, 585, 586, 593, 604, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 696, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 718, 719, 720, 723, 724, 726, 731, 732, 733, 735, 737, 744, 745, 747, 748, 749, 750, 751, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 820, 821, 822, 823, 825, 828, 829, 830, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 874, 875, 876, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 904, 908, 909, 910, 911, 913, 914, 916, 918, 919, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 948, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 986], "ascii": [9, 17, 495, 497, 501, 515, 930, 932, 936, 950], "charact": [9, 11, 17, 23, 27, 101, 102, 112, 253, 356, 489, 491, 494, 495, 496, 501, 502, 504, 505, 508, 515, 644, 691, 796, 924, 926, 929, 930, 931, 936, 937, 939, 940, 943, 950], "displai": [9, 10, 11, 14, 16, 20, 22, 29, 253], "tabl": [9, 13, 14, 16, 17, 18, 19, 20, 22, 23, 28, 29, 49, 50, 52, 88, 95, 101, 102, 104, 112, 113, 187, 211, 217, 224, 225, 253, 666, 691, 969, 986], "outlin": 9, "fals": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 29, 31, 33, 48, 62, 67, 69, 72, 89, 93, 95, 101, 102, 105, 106, 110, 112, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 129, 133, 135, 136, 137, 140, 152, 153, 155, 156, 157, 158, 163, 164, 166, 167, 168, 170, 173, 174, 177, 182, 183, 185, 187, 188, 195, 196, 197, 200, 204, 206, 212, 216, 217, 220, 221, 222, 226, 228, 230, 236, 237, 239, 240, 241, 243, 246, 253, 263, 264, 265, 267, 277, 283, 286, 300, 303, 305, 323, 324, 325, 326, 327, 328, 343, 359, 361, 372, 373, 374, 375, 376, 389, 390, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 418, 419, 440, 442, 450, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 472, 477, 479, 480, 484, 488, 492, 498, 499, 500, 504, 505, 507, 509, 510, 511, 529, 532, 535, 536, 537, 540, 541, 547, 550, 565, 575, 579, 581, 586, 593, 607, 609, 610, 611, 616, 618, 624, 625, 630, 631, 633, 635, 644, 651, 654, 655, 656, 658, 663, 664, 669, 676, 677, 679, 680, 681, 683, 686, 691, 699, 709, 719, 733, 736, 738, 745, 749, 750, 757, 758, 759, 760, 761, 762, 779, 799, 801, 813, 815, 816, 817, 823, 834, 835, 836, 838, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 854, 867, 875, 876, 878, 880, 881, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 899, 902, 907, 912, 914, 919, 923, 927, 933, 934, 935, 939, 940, 942, 944, 945, 946, 967, 968, 969, 972, 975, 977, 978, 986], "revert": 9, "abc": [9, 15, 16, 18, 19, 20, 21, 22, 260, 491, 499, 593, 926, 934], "xyz": [9, 15, 16, 18, 19, 20, 21, 22, 260, 485, 491, 593, 920, 926, 965, 986], "f64": [9, 13, 15, 16, 18, 19, 20, 21, 22, 62, 64, 66, 71, 91, 117, 124, 136, 137, 139, 140, 141, 144, 148, 149, 152, 155, 156, 157, 164, 172, 173, 177, 178, 187, 188, 189, 205, 206, 207, 227, 230, 233, 237, 239, 240, 241, 242, 243, 245, 246, 253, 259, 269, 270, 271, 272, 273, 274, 295, 314, 316, 320, 321, 328, 331, 332, 361, 372, 373, 374, 375, 376, 377, 378, 386, 387, 389, 390, 395, 402, 404, 405, 406, 408, 409, 411, 414, 415, 416, 418, 422, 423, 424, 433, 436, 438, 439, 440, 444, 446, 449, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 475, 476, 477, 481, 482, 524, 525, 528, 533, 542, 543, 545, 547, 549, 557, 568, 569, 572, 579, 580, 585, 593, 609, 613, 619, 620, 624, 630, 631, 637, 638, 645, 658, 659, 667, 669, 670, 673, 677, 679, 680, 681, 682, 683, 685, 686, 691, 701, 702, 703, 704, 705, 706, 748, 755, 756, 761, 762, 763, 801, 816, 817, 821, 825, 830, 874, 878, 886, 888, 889, 891, 892, 893, 895, 896, 910, 911, 915, 960, 961, 974, 986, 994], "fmt": [10, 394, 560, 593, 628, 691], "floatfmt": 10, "mix": [10, 509, 511, 763, 944, 946, 986], "control": [10, 29, 122, 253, 616, 691], "how": [10, 29, 53, 70, 73, 91, 94, 103, 143, 172, 224, 225, 253, 284, 285, 315, 329, 395, 443, 453, 586, 593, 614, 630, 666, 691, 717, 718, 747, 764, 986], "float": [10, 29, 39, 40, 71, 117, 119, 120, 121, 124, 126, 140, 145, 148, 173, 189, 197, 203, 245, 253, 283, 284, 316, 317, 318, 319, 331, 332, 361, 372, 373, 374, 375, 376, 381, 386, 389, 390, 395, 398, 401, 402, 404, 405, 406, 411, 414, 418, 422, 433, 438, 439, 440, 446, 449, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 471, 528, 542, 568, 569, 573, 575, 580, 582, 585, 593, 619, 631, 645, 653, 654, 685, 691, 716, 717, 745, 748, 751, 752, 753, 762, 763, 765, 801, 813, 814, 815, 816, 817, 821, 825, 830, 840, 854, 857, 863, 864, 870, 871, 877, 878, 879, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 900, 901, 912, 916, 956, 976, 986, 994], "point": [10, 29, 39, 40, 124, 126, 148, 158, 174, 253, 316, 331, 332, 361, 381, 386, 402, 404, 466, 467, 593, 619, 625, 635, 647, 691, 748, 801, 821, 825, 840, 896, 897, 986], "full": [10, 36, 68, 101, 102, 104, 112, 113, 509, 510, 511, 513, 635, 691, 944, 945, 946, 948], "format": [10, 13, 17, 27, 29, 100, 101, 102, 112, 117, 146, 156, 170, 179, 196, 213, 251, 253, 360, 363, 366, 498, 509, 510, 511, 513, 537, 617, 623, 639, 672, 691, 803, 806, 933, 944, 945, 946, 948, 985], "number": [10, 11, 12, 14, 22, 23, 27, 29, 33, 62, 82, 88, 90, 92, 94, 98, 99, 101, 102, 105, 112, 115, 122, 124, 125, 127, 128, 130, 135, 136, 145, 146, 148, 149, 161, 170, 171, 174, 175, 182, 183, 197, 202, 203, 207, 209, 220, 224, 227, 236, 238, 247, 253, 278, 285, 290, 298, 302, 304, 306, 312, 322, 328, 329, 341, 344, 349, 351, 361, 368, 369, 371, 374, 375, 376, 380, 382, 388, 392, 402, 404, 412, 413, 445, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 470, 471, 473, 482, 494, 497, 499, 505, 506, 521, 527, 533, 547, 548, 563, 572, 576, 577, 579, 580, 583, 585, 593, 607, 609, 617, 618, 619, 620, 627, 634, 644, 652, 653, 656, 659, 661, 663, 667, 676, 678, 687, 691, 718, 723, 731, 735, 737, 744, 750, 761, 764, 777, 780, 789, 791, 801, 808, 809, 811, 814, 815, 816, 817, 820, 822, 829, 840, 856, 867, 868, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 904, 905, 908, 916, 929, 932, 934, 940, 941, 957, 971, 976, 986, 994], "int": [11, 12, 14, 22, 23, 27, 29, 33, 37, 50, 64, 91, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 122, 123, 124, 125, 126, 127, 128, 130, 134, 135, 136, 145, 148, 149, 151, 160, 161, 162, 164, 169, 170, 171, 173, 175, 176, 177, 181, 182, 183, 193, 195, 197, 201, 202, 203, 205, 207, 208, 209, 210, 215, 218, 220, 224, 227, 229, 231, 238, 247, 253, 260, 283, 284, 285, 289, 290, 298, 299, 302, 303, 304, 306, 312, 317, 318, 319, 328, 329, 374, 375, 376, 380, 381, 382, 388, 391, 392, 413, 442, 444, 445, 446, 450, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 478, 482, 490, 495, 498, 499, 501, 503, 505, 506, 515, 521, 522, 523, 527, 533, 535, 540, 547, 548, 553, 554, 555, 561, 563, 569, 571, 572, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 593, 607, 609, 618, 619, 620, 627, 631, 634, 644, 652, 653, 656, 657, 659, 661, 662, 663, 667, 668, 671, 678, 687, 691, 707, 708, 716, 717, 718, 722, 723, 731, 732, 735, 736, 737, 744, 745, 749, 750, 751, 752, 753, 761, 764, 814, 815, 816, 817, 820, 821, 822, 828, 829, 830, 853, 855, 856, 863, 867, 868, 870, 871, 872, 873, 874, 877, 880, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 904, 905, 908, 913, 916, 925, 930, 933, 934, 936, 938, 940, 941, 950, 956, 957, 958, 959, 966, 971, 976, 986, 994], "size": [12, 33, 101, 102, 122, 123, 124, 126, 128, 145, 158, 224, 253, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 540, 576, 577, 593, 625, 656, 691, 814, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 986, 994], "overwrit": [12, 28, 88, 90, 91, 92, 94, 101, 102, 112, 133, 253, 618, 691], "chunk": [12, 98, 101, 102, 110, 112, 114, 115, 116, 124, 126, 147, 171, 182, 253, 266, 451, 593, 656, 691, 699, 749, 826, 867, 881, 963, 986], "stream": [12, 30, 69, 157, 222, 253, 611, 616, 618, 624, 635, 639, 644, 654, 655, 656, 664, 691], "engin": [12, 28, 103, 128, 134, 157, 222, 235, 253, 624, 635, 639, 664, 675, 691, 700, 986], "By": [12, 101, 102, 105, 112, 173, 207, 227, 253, 482, 498, 533, 547, 565, 572, 579, 580, 585, 593, 631, 659, 667, 691, 916, 933, 968, 976, 986], "determin": [12, 29, 60, 62, 70, 91, 94, 101, 102, 105, 110, 112, 116, 134, 152, 158, 159, 170, 171, 221, 226, 253, 304, 315, 343, 359, 421, 429, 453, 457, 458, 459, 460, 461, 463, 464, 465, 477, 593, 625, 626, 691, 737, 747, 779, 799, 830, 861, 912, 986], "schema": [12, 53, 63, 64, 65, 70, 73, 83, 84, 86, 88, 90, 91, 92, 94, 95, 101, 102, 107, 111, 112, 115, 122, 124, 134, 136, 137, 144, 145, 180, 183, 216, 253, 304, 429, 535, 581, 593, 609, 610, 615, 635, 640, 672, 675, 691, 754, 986], "thread": [12, 27, 98, 101, 102, 103, 128, 253, 267, 286, 593, 719], "pool": [12, 128], "For": [12, 29, 103, 104, 105, 113, 147, 159, 172, 173, 235, 253, 304, 314, 374, 375, 376, 430, 452, 477, 484, 490, 491, 499, 550, 559, 560, 593, 626, 631, 675, 691, 699, 815, 816, 817, 882, 912, 919, 925, 926, 934, 968, 986], "some": [12, 25, 29, 91, 101, 102, 112, 143, 253, 614, 691, 841, 986, 994], "dataset": [12, 101, 102, 112, 117, 409, 593, 604, 635, 691, 854, 986], "esp": 12, "when": [12, 14, 16, 20, 29, 33, 53, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 96, 101, 102, 103, 106, 110, 112, 113, 114, 115, 124, 126, 134, 135, 144, 145, 147, 149, 152, 158, 186, 195, 199, 206, 214, 220, 222, 253, 304, 317, 318, 319, 359, 374, 375, 376, 382, 419, 421, 430, 445, 479, 480, 496, 502, 508, 509, 541, 550, 559, 593, 607, 620, 625, 635, 650, 656, 658, 663, 664, 691, 699, 751, 752, 753, 799, 814, 815, 816, 817, 822, 861, 900, 901, 931, 937, 943, 944, 964, 986], "have": [12, 25, 29, 62, 73, 89, 101, 102, 105, 124, 126, 147, 170, 190, 196, 213, 253, 313, 328, 374, 375, 376, 430, 450, 509, 511, 593, 639, 654, 671, 691, 699, 761, 815, 816, 817, 827, 880, 944, 946, 986, 994], "larg": [12, 158, 159, 173, 226, 253, 356, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 626, 631, 691, 796, 800, 807], "element": [12, 22, 99, 123, 126, 130, 135, 169, 187, 195, 207, 220, 227, 253, 267, 269, 270, 271, 272, 273, 274, 284, 286, 287, 312, 320, 321, 323, 324, 325, 326, 327, 328, 378, 391, 400, 415, 416, 444, 450, 453, 468, 474, 475, 476, 481, 482, 505, 506, 524, 525, 527, 533, 547, 572, 576, 577, 579, 580, 585, 593, 607, 659, 663, 667, 691, 700, 701, 702, 703, 704, 705, 706, 717, 719, 720, 744, 750, 755, 756, 757, 758, 759, 760, 761, 818, 823, 829, 841, 853, 856, 858, 859, 874, 880, 898, 909, 910, 911, 915, 916, 940, 941, 957, 960, 961, 966, 971, 972, 976, 986], "too": [12, 158, 159, 173, 226, 253, 356, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 626, 631, 691, 796, 800, 807], "optimist": 12, "lead": [12, 95, 117, 253, 469, 496, 508, 515, 522, 532, 547, 579, 593, 635, 675, 691, 902, 931, 943, 950, 986], "out": [12, 95, 118, 159, 253, 289, 303, 308, 398, 401, 484, 486, 586, 593, 626, 655, 656, 691, 722, 736, 740, 919, 921], "memori": [12, 70, 88, 89, 92, 93, 94, 101, 102, 106, 110, 112, 114, 115, 116, 133, 134, 147, 204, 235, 253, 451, 472, 593, 656, 675, 691, 699, 700, 881, 906, 907, 986], "error": [12, 74, 101, 102, 112, 158, 159, 173, 195, 226, 253, 291, 303, 308, 314, 356, 360, 367, 408, 457, 458, 459, 460, 461, 463, 464, 465, 484, 486, 490, 492, 493, 509, 510, 511, 513, 593, 625, 626, 631, 675, 691, 724, 736, 740, 745, 796, 800, 807, 919, 921, 925, 927, 928, 944, 945, 946, 948, 986], "row": [12, 17, 22, 27, 29, 31, 33, 62, 63, 65, 80, 82, 87, 91, 92, 94, 95, 101, 102, 105, 106, 110, 112, 114, 115, 116, 119, 122, 124, 134, 135, 136, 143, 147, 150, 152, 156, 158, 160, 161, 166, 168, 169, 170, 171, 173, 174, 175, 179, 183, 197, 205, 209, 210, 213, 215, 220, 222, 224, 225, 231, 235, 238, 247, 253, 267, 278, 287, 304, 379, 392, 413, 444, 454, 478, 480, 489, 521, 541, 550, 551, 559, 563, 567, 570, 574, 583, 586, 593, 607, 609, 611, 614, 618, 621, 622, 625, 627, 631, 632, 634, 635, 639, 656, 657, 661, 662, 663, 664, 666, 671, 675, 678, 687, 691, 699, 720, 819, 829, 853, 874, 884, 913, 924, 957, 986, 994], "per": [12, 27, 29, 122, 124, 135, 156, 183, 184, 206, 220, 242, 244, 245, 253, 267, 286, 289, 303, 313, 480, 541, 593, 607, 658, 663, 682, 684, 685, 691, 719, 722, 736], "everi": [12, 101, 102, 112, 158, 210, 213, 226, 253, 280, 281, 285, 287, 289, 290, 299, 302, 323, 324, 325, 326, 327, 328, 360, 367, 379, 489, 523, 550, 551, 593, 618, 625, 662, 691, 713, 714, 718, 720, 722, 723, 732, 735, 757, 758, 759, 760, 761, 800, 807, 819, 924, 959, 986], "process": [12, 27, 128, 253, 655, 656, 691], "liter": [13, 17, 48, 67, 72, 105, 125, 126, 127, 156, 170, 176, 177, 181, 182, 185, 195, 196, 199, 208, 212, 225, 230, 253, 263, 265, 307, 334, 373, 380, 387, 389, 390, 396, 408, 411, 418, 434, 436, 440, 446, 451, 484, 499, 500, 518, 528, 536, 537, 540, 543, 545, 546, 552, 553, 554, 565, 567, 570, 575, 581, 582, 584, 593, 620, 650, 666, 669, 691, 697, 698, 739, 770, 820, 834, 900, 901, 919, 934, 935, 986], "left": [13, 50, 72, 119, 120, 129, 158, 159, 172, 173, 225, 253, 374, 375, 376, 395, 396, 457, 458, 459, 460, 461, 463, 464, 465, 468, 495, 515, 526, 543, 550, 551, 559, 574, 586, 593, 625, 626, 630, 631, 666, 691, 815, 816, 817, 834, 898, 930, 950, 970, 986], "center": [13, 29, 253, 374, 375, 376, 456, 457, 458, 459, 460, 461, 463, 464, 465, 593, 815, 816, 817, 886, 887, 888, 889, 890, 891, 893, 894, 895, 986], "right": [13, 15, 29, 72, 101, 102, 119, 120, 129, 158, 159, 172, 173, 253, 374, 375, 376, 396, 457, 458, 459, 460, 461, 463, 464, 465, 468, 477, 501, 543, 593, 625, 626, 630, 631, 691, 815, 816, 817, 834, 898, 912, 936, 986], "cell": 13, "align": [13, 29, 62, 253, 515, 950], "keyerror": [13, 17], "recognis": [13, 17, 121], "column_abc": 13, "column_xyz": 13, "visibl": [14, 145, 253, 814, 986], "eg": [14, 22, 29, 253, 360, 509, 511, 528, 593, 944, 946], "low": [14, 128], "rang": [14, 29, 71, 72, 103, 129, 140, 145, 158, 171, 253, 338, 351, 357, 358, 360, 367, 368, 395, 540, 545, 553, 554, 584, 593, 625, 691, 762, 763, 774, 791, 797, 798, 800, 807, 808, 814, 874, 878, 986], "100": [14, 29, 91, 94, 101, 102, 112, 115, 253, 515, 540, 691, 887, 888, 890, 986, 994], "print": [14, 16, 22, 102, 118, 144, 156, 157, 171, 174, 215, 232, 253, 394, 555, 593, 628, 691, 841, 886, 966, 986, 994], "98": [14, 164, 253, 312, 479, 522, 527, 593], "99": [14, 29, 148, 149, 164, 167, 253, 261, 312, 380, 382, 479, 522, 527, 593, 619, 620, 691, 813, 820, 986], "tbl_col": 14, "10": [14, 26, 27, 29, 30, 33, 62, 70, 71, 72, 95, 103, 112, 124, 126, 129, 137, 147, 155, 158, 159, 161, 163, 164, 165, 182, 186, 188, 192, 193, 199, 209, 230, 233, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 253, 266, 275, 276, 277, 279, 285, 290, 298, 299, 302, 317, 322, 324, 327, 329, 331, 332, 334, 352, 353, 359, 360, 367, 370, 391, 392, 395, 400, 408, 412, 413, 415, 444, 445, 458, 478, 515, 521, 535, 543, 550, 556, 559, 561, 563, 565, 566, 572, 579, 583, 593, 611, 625, 626, 627, 629, 634, 643, 644, 650, 656, 660, 661, 669, 673, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 691, 700, 718, 723, 731, 732, 735, 751, 762, 764, 770, 799, 807, 810, 813, 829, 841, 856, 858, 874, 900, 901, 957, 986, 994], "95": [14, 261, 593], "96": [14, 261, 593], "97": [14, 164, 253, 261, 593], "move": [15, 374, 375, 376, 457, 458, 460, 464, 593, 815, 816, 817, 887, 888, 890, 894, 986], "inlin": [15, 484, 490, 491, 499, 919, 925, 926, 934], "parenthes": 15, "below": [16, 29, 104, 113, 143, 253, 395, 586, 593, 614, 691], "ascii_ful": 17, "ascii_full_condens": 17, "ascii_no_bord": 17, "ascii_borders_onli": 17, "ascii_borders_only_condens": 17, "ascii_horizontal_onli": 17, "ascii_markdown": 17, "utf8_ful": [17, 62, 95], "utf8_full_condens": [17, 95], "utf8_no_bord": 17, "utf8_borders_onli": 17, "utf8_horizontal_onli": 17, "noth": [17, 485, 490, 493, 920, 925, 928], "none": [17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 46, 48, 50, 51, 62, 71, 72, 73, 88, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 134, 136, 140, 143, 148, 149, 156, 158, 159, 160, 165, 169, 172, 173, 174, 177, 179, 183, 184, 187, 195, 197, 199, 203, 205, 206, 212, 214, 217, 221, 222, 223, 224, 225, 226, 230, 233, 253, 262, 266, 267, 279, 289, 299, 304, 306, 317, 318, 319, 322, 324, 327, 331, 332, 359, 360, 367, 374, 375, 376, 377, 380, 381, 382, 388, 391, 395, 396, 402, 403, 404, 405, 406, 412, 419, 421, 441, 444, 450, 451, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 471, 472, 473, 474, 478, 479, 483, 484, 487, 488, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 513, 515, 516, 517, 526, 536, 538, 540, 543, 546, 548, 554, 555, 557, 558, 565, 566, 567, 570, 575, 576, 577, 578, 580, 581, 584, 585, 586, 593, 609, 610, 614, 619, 620, 625, 626, 629, 630, 631, 633, 635, 639, 642, 650, 653, 654, 655, 656, 657, 658, 664, 665, 666, 669, 670, 672, 673, 675, 691, 700, 707, 708, 722, 732, 737, 750, 751, 762, 763, 765, 781, 782, 783, 788, 799, 800, 807, 812, 813, 815, 816, 817, 820, 821, 822, 824, 827, 828, 830, 832, 833, 834, 843, 846, 847, 850, 853, 854, 861, 862, 863, 864, 865, 869, 878, 879, 880, 886, 887, 888, 889, 890, 891, 893, 894, 895, 897, 901, 903, 905, 908, 909, 912, 913, 916, 918, 919, 922, 923, 927, 928, 929, 930, 931, 932, 933, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 948, 962, 965, 966, 969, 970, 976, 977, 986], "rounded_corn": 17, "style": [17, 29, 187, 253], "border": 17, "line": [17, 29, 101, 102, 105, 112, 156, 166, 168, 253, 490, 925], "includ": [17, 25, 27, 29, 68, 104, 113, 124, 135, 140, 145, 158, 220, 221, 224, 253, 361, 396, 504, 505, 550, 593, 607, 625, 663, 691, 763, 801, 814, 834, 939, 940, 977, 986], "divid": [17, 360, 367, 374, 375, 376, 409, 593, 800, 807, 815, 816, 817, 854, 986], "same": [17, 29, 53, 62, 69, 73, 106, 112, 122, 134, 141, 157, 206, 222, 230, 233, 235, 253, 259, 266, 367, 379, 425, 428, 443, 456, 457, 458, 459, 460, 461, 463, 464, 465, 480, 517, 544, 593, 613, 624, 635, 658, 664, 669, 673, 675, 691, 695, 699, 700, 770, 819, 886, 887, 888, 889, 890, 891, 893, 894, 895, 978, 986], "dens": [17, 156, 253, 450, 593, 880, 986], "space": 17, "horizont": [17, 70, 152, 163, 224, 253, 536, 537, 545, 546, 550, 551, 552, 556, 559, 567, 570, 574, 582], "markdown": 17, "compat": [17, 29, 33, 103, 253, 484, 485, 490, 491, 499, 500, 656, 691, 919, 920, 925, 926, 934, 935], "No": 17, "appli": [17, 27, 29, 48, 70, 112, 121, 124, 126, 152, 186, 253, 338, 341, 343, 344, 345, 347, 349, 351, 354, 357, 358, 361, 368, 369, 371, 375, 376, 419, 445, 456, 457, 458, 460, 464, 499, 509, 510, 511, 513, 535, 540, 550, 551, 559, 566, 574, 593, 627, 634, 635, 643, 691, 772, 773, 774, 777, 779, 780, 784, 786, 789, 791, 794, 797, 798, 801, 804, 808, 809, 811, 816, 817, 886, 887, 888, 890, 894, 934, 944, 945, 946, 948, 986], "round": [17, 29, 64, 95, 253, 316, 386, 524, 593, 748, 825, 986], "corner": [17, 95], "op": [17, 126, 253, 453, 593, 691, 986], "The": [17, 28, 29, 33, 45, 54, 62, 68, 88, 90, 91, 92, 94, 98, 101, 103, 110, 112, 128, 134, 142, 144, 156, 157, 158, 159, 160, 165, 170, 173, 180, 185, 195, 196, 199, 223, 226, 230, 233, 235, 253, 303, 306, 307, 308, 309, 338, 351, 356, 357, 360, 363, 367, 368, 377, 380, 388, 391, 419, 443, 450, 453, 456, 457, 458, 459, 460, 461, 463, 464, 465, 474, 477, 483, 486, 487, 492, 494, 495, 496, 501, 502, 508, 509, 515, 544, 557, 561, 576, 577, 578, 581, 586, 587, 589, 593, 594, 595, 599, 600, 601, 625, 626, 627, 629, 631, 634, 635, 640, 644, 650, 656, 665, 669, 673, 675, 691, 700, 736, 739, 740, 741, 750, 774, 791, 796, 797, 800, 803, 807, 808, 820, 828, 833, 880, 886, 887, 888, 889, 890, 891, 893, 894, 895, 909, 912, 918, 921, 922, 927, 929, 930, 931, 936, 937, 943, 944, 950, 980, 982, 986, 987, 990, 991, 992, 994], "one": [17, 28, 29, 52, 62, 80, 88, 90, 91, 92, 93, 94, 125, 126, 127, 131, 149, 150, 156, 157, 158, 159, 170, 179, 187, 195, 196, 200, 219, 234, 253, 261, 304, 382, 408, 416, 456, 479, 491, 522, 582, 586, 593, 620, 621, 624, 625, 626, 639, 651, 670, 674, 691, 699, 737, 822, 850, 859, 886, 926, 951, 986], "more": [17, 29, 31, 33, 52, 62, 87, 88, 89, 90, 91, 92, 93, 94, 104, 110, 113, 124, 126, 131, 134, 139, 140, 170, 174, 179, 183, 195, 196, 197, 222, 235, 253, 264, 267, 305, 317, 318, 319, 408, 409, 416, 419, 442, 467, 477, 491, 529, 582, 586, 593, 639, 656, 664, 675, 691, 700, 738, 751, 752, 753, 763, 850, 854, 897, 912, 926, 972, 986, 994], "semigraph": 17, "box": [17, 134, 253], "draw": [17, 22, 23, 123, 994], "found": [17, 27, 75, 84, 86, 91, 95, 144, 225, 253, 468, 493, 509, 511, 593, 666, 691, 898, 928, 944, 946, 986], "unicod": 17, "block": [17, 157, 222, 253, 624, 647, 664, 671, 691, 900, 901, 986], "http": [17, 29, 89, 103, 133, 139, 253, 490, 925], "en": [17, 29, 253], "wikipedia": 17, "org": [17, 89, 103, 133, 139, 253], "wiki": 17, "drawing_charact": 17, "box_draw": 17, "hide": [18, 19, 20, 21, 29, 253], "etc": [18, 29, 101, 104, 106, 110, 113, 114, 116, 253, 540, 900, 901, 986], "inform": [20, 68, 104, 113, 139, 253, 317, 318, 319, 409, 477, 484, 490, 491, 499, 593, 644, 691, 751, 752, 753, 854, 912, 919, 925, 926, 934, 986], "separ": [21, 27, 96, 98, 101, 102, 112, 185, 187, 214, 221, 223, 253, 267, 287, 291, 489, 546, 550, 551, 593, 665, 691, 720, 724, 924, 955, 964, 986], "between": [21, 70, 121, 122, 124, 126, 189, 245, 253, 291, 314, 330, 396, 444, 449, 461, 483, 547, 549, 572, 573, 576, 577, 579, 593, 645, 685, 691, 724, 745, 765, 834, 874, 879, 891, 918, 986], "set_tbl_column_data_type_inlin": 21, "max": [22, 29, 33, 128, 140, 149, 157, 158, 159, 187, 253, 304, 317, 318, 324, 382, 443, 450, 457, 469, 506, 593, 620, 624, 625, 626, 656, 691, 737, 751, 752, 757, 763, 822, 880, 887, 902, 941, 986], "both": [22, 27, 53, 72, 103, 129, 158, 159, 172, 173, 180, 195, 253, 266, 396, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 626, 630, 631, 640, 691, 834, 843, 986], "tbl_row": 22, "width": [23, 29, 101, 102, 253, 495, 501, 515, 691, 930, 936, 950], "char": [23, 53, 73, 491, 497, 926, 932], "enabl": [24, 73, 199, 230, 253, 469, 593, 650, 669, 691, 902, 986], "addit": [24, 29, 91, 104, 113, 122, 141, 146, 157, 185, 199, 200, 206, 223, 230, 233, 253, 260, 377, 380, 443, 480, 484, 490, 491, 499, 536, 537, 541, 543, 544, 545, 546, 552, 557, 567, 570, 578, 581, 582, 593, 613, 617, 624, 650, 651, 658, 665, 669, 673, 691, 820, 919, 925, 926, 934, 986], "verbos": [24, 131, 491, 926], "debug": [24, 611, 618, 635, 691, 994], "log": [24, 64, 312, 372, 416, 436, 446, 527, 593, 744, 813, 971, 986], "if_set": 25, "env_onli": 25, "dict": [25, 29, 33, 63, 65, 68, 88, 90, 91, 92, 93, 94, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 116, 124, 170, 185, 191, 195, 196, 198, 212, 213, 253, 421, 593, 647, 649, 691, 861, 986], "show": [25, 29, 143, 156, 174, 184, 253, 614, 644, 654, 691], "variabl": [25, 50, 96, 125, 128, 179, 214, 253, 639, 691, 964, 986], "restrict": [25, 506, 941], "dictionari": [25, 29, 88, 90, 91, 92, 94, 101, 102, 107, 111, 112, 170, 185, 195, 196, 212, 213, 253, 421, 593, 691, 763, 861, 986], "those": [25, 29, 101, 253, 450, 490, 593, 880, 925, 986], "been": [25, 29, 71, 96, 253, 450, 593, 880, 986], "set_fmt_float": 25, "directli": [25, 124, 126, 131, 374, 375, 376, 593, 691, 815, 816, 817, 986, 994], "via": [25, 101, 102, 105, 112, 114, 115, 116, 170, 196, 253, 267, 593], "set_stat": 25, "all_stat": 25, "file": [26, 27, 30, 31, 32, 33, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 147, 253, 618, 646, 655, 656, 672, 691, 699, 986], "binaryio": [26, 30, 100, 101, 105, 106, 107, 110, 111, 253], "bytesio": [26, 27, 29, 30, 33, 100, 101, 102, 105, 106, 110, 253], "path": [26, 27, 29, 30, 31, 32, 33, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 253, 469, 493, 593, 646, 655, 656, 672, 691, 902, 928, 986], "compress": [26, 30, 33, 253, 655, 656, 691], "avrocompress": [26, 253], "uncompress": [26, 30, 33, 106, 114, 253, 656, 691], "write": [26, 27, 28, 29, 30, 31, 33, 102, 106, 253, 317, 318, 319, 593, 633, 654, 656, 672, 691, 751, 752, 753, 986], "apach": [26, 33, 100, 103, 253], "avro": [26, 100, 253, 604], "should": [26, 27, 29, 30, 31, 32, 33, 88, 90, 92, 94, 96, 99, 104, 112, 121, 122, 126, 130, 133, 134, 141, 158, 159, 170, 173, 195, 196, 213, 214, 223, 226, 235, 253, 261, 267, 286, 315, 328, 356, 360, 367, 370, 377, 402, 404, 456, 457, 458, 459, 460, 461, 463, 464, 465, 468, 477, 544, 557, 564, 565, 576, 577, 586, 593, 613, 625, 626, 630, 631, 635, 654, 655, 656, 665, 672, 675, 691, 700, 719, 747, 761, 796, 800, 807, 810, 886, 887, 888, 889, 890, 891, 893, 894, 895, 898, 912, 986], "written": [26, 27, 29, 30, 31, 32, 33, 253, 655, 656, 672, 691], "snappi": [26, 33, 253, 656, 691], "deflat": [26, 253], "import": [26, 27, 29, 30, 33, 36, 62, 72, 88, 92, 93, 112, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 140, 156, 158, 171, 173, 216, 217, 224, 226, 253, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 555, 625, 631, 635, 691, 755, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 838, 842, 844, 845, 850, 886, 910, 960, 986, 994], "pathlib": [26, 27, 30, 33, 112, 253], "foo": [26, 27, 30, 31, 32, 33, 96, 134, 138, 139, 141, 142, 143, 144, 147, 150, 151, 152, 153, 154, 155, 160, 161, 162, 163, 164, 165, 167, 172, 176, 177, 178, 181, 184, 187, 189, 191, 192, 193, 195, 197, 198, 199, 201, 202, 203, 205, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 221, 222, 223, 227, 228, 229, 232, 253, 262, 283, 288, 289, 292, 293, 317, 318, 319, 356, 392, 394, 413, 454, 470, 471, 483, 485, 487, 489, 491, 496, 502, 504, 506, 508, 512, 514, 521, 523, 536, 539, 540, 542, 544, 547, 548, 549, 558, 562, 563, 567, 568, 569, 570, 571, 572, 573, 578, 579, 580, 583, 585, 586, 593, 612, 613, 614, 615, 621, 628, 629, 630, 642, 647, 649, 650, 664, 665, 668, 670, 672, 691, 724, 751, 796, 884, 920, 922, 924, 926, 941, 986], "bar": [26, 27, 30, 31, 32, 33, 96, 134, 138, 139, 141, 142, 143, 144, 147, 150, 151, 152, 153, 154, 155, 161, 163, 164, 165, 167, 172, 176, 177, 178, 181, 184, 187, 189, 191, 192, 193, 195, 197, 198, 199, 202, 203, 205, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 222, 223, 227, 228, 232, 253, 262, 293, 394, 477, 487, 489, 504, 506, 536, 539, 542, 544, 547, 548, 549, 558, 563, 567, 568, 569, 570, 571, 572, 578, 579, 580, 583, 585, 586, 593, 612, 613, 614, 615, 621, 628, 629, 630, 642, 647, 649, 650, 664, 665, 668, 672, 691, 724, 912, 922, 924, 941, 986], "ham": [26, 27, 30, 33, 96, 138, 139, 141, 142, 143, 144, 150, 151, 153, 160, 161, 163, 172, 176, 177, 178, 181, 184, 189, 191, 193, 195, 197, 198, 199, 202, 203, 205, 207, 208, 209, 214, 215, 216, 217, 218, 222, 227, 228, 253, 544, 612, 613, 614, 615, 621, 630, 642, 647, 649, 650, 664, 670, 691], "d": [26, 27, 30, 33, 53, 70, 73, 91, 117, 140, 156, 160, 161, 164, 172, 209, 211, 224, 228, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 253, 260, 340, 363, 366, 396, 445, 472, 485, 491, 505, 509, 510, 511, 543, 561, 593, 630, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 691, 776, 803, 806, 834, 920, 926, 940, 944, 945, 946, 986], "e": [26, 27, 30, 33, 53, 73, 89, 101, 102, 105, 106, 110, 114, 116, 140, 156, 158, 159, 161, 173, 209, 211, 224, 226, 253, 260, 267, 356, 360, 367, 372, 377, 396, 414, 421, 457, 458, 459, 460, 461, 463, 464, 465, 472, 477, 557, 586, 593, 625, 626, 631, 633, 647, 691, 796, 800, 807, 813, 834, 899, 912, 968, 986], "dirpath": [26, 27, 30, 33, 112, 253], "new_fil": [26, 27, 30, 33, 253], "has_head": [27, 29, 101, 102, 105, 112, 253], "quot": [27, 101, 102, 112, 253], "batch_siz": [27, 101, 102, 115, 253], "1024": [27, 101, 102, 115, 253, 656, 691], "datetime_format": [27, 253], "date_format": [27, 253], "time_format": [27, 253], "float_precis": [27, 29, 253], "null_valu": [27, 101, 102, 112, 253], "comma": [27, 253], "csv": [27, 101, 102, 105, 112, 253, 604, 655, 656, 691], "result": [27, 31, 32, 62, 92, 94, 103, 104, 112, 114, 116, 117, 126, 147, 158, 159, 183, 203, 217, 226, 233, 253, 304, 363, 366, 374, 375, 376, 380, 409, 443, 454, 456, 457, 458, 459, 460, 461, 463, 464, 465, 469, 471, 504, 505, 511, 528, 540, 550, 551, 566, 576, 577, 593, 608, 625, 626, 635, 644, 653, 655, 656, 672, 673, 691, 699, 803, 806, 815, 816, 817, 854, 884, 886, 887, 888, 889, 890, 891, 893, 894, 895, 902, 905, 939, 940, 946, 968, 986, 994], "If": [27, 29, 30, 31, 32, 48, 53, 67, 68, 71, 72, 88, 89, 90, 91, 92, 93, 94, 96, 101, 102, 104, 105, 106, 110, 112, 113, 114, 115, 116, 125, 129, 133, 134, 135, 143, 147, 156, 158, 159, 161, 169, 170, 173, 175, 179, 183, 196, 197, 205, 209, 213, 214, 216, 220, 221, 222, 224, 225, 253, 267, 299, 304, 317, 318, 319, 334, 352, 353, 359, 383, 409, 419, 421, 450, 452, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 473, 477, 478, 492, 494, 496, 497, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 536, 537, 538, 540, 547, 548, 550, 552, 559, 565, 567, 570, 575, 576, 577, 579, 581, 582, 586, 593, 607, 614, 616, 625, 626, 630, 631, 635, 639, 647, 656, 657, 663, 664, 666, 672, 675, 691, 699, 700, 732, 737, 751, 752, 753, 762, 770, 792, 793, 799, 827, 829, 830, 853, 854, 856, 878, 880, 882, 884, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 902, 908, 912, 913, 927, 929, 931, 932, 937, 938, 939, 940, 941, 943, 944, 945, 946, 948, 957, 963, 968, 977, 986], "instead": [27, 31, 32, 48, 67, 72, 99, 101, 110, 124, 129, 130, 134, 158, 159, 170, 173, 183, 185, 195, 196, 199, 217, 226, 230, 253, 277, 356, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 494, 496, 502, 508, 540, 567, 570, 575, 581, 593, 619, 625, 626, 631, 650, 669, 672, 691, 709, 796, 800, 807, 900, 901, 929, 931, 937, 943, 969, 986], "whether": [27, 72, 92, 94, 126, 129, 200, 253, 343, 359, 361, 426, 427, 469, 593, 635, 651, 691, 779, 799, 801], "header": [27, 29, 33, 95, 101, 102, 105, 112, 144, 187, 221, 253, 656, 691], "field": [27, 54, 84, 86, 91, 216, 223, 253, 304, 421, 491, 492, 505, 506, 517, 550, 551, 566, 581, 593, 665, 691, 737, 940, 941, 953, 955], "symbol": [27, 253], "byte": [27, 101, 102, 105, 106, 107, 110, 111, 112, 145, 253, 307, 310, 311, 494, 497, 656, 691, 739, 742, 743, 814, 929, 932, 986], "specifi": [27, 29, 62, 72, 75, 84, 86, 105, 124, 135, 141, 145, 146, 149, 157, 185, 195, 199, 200, 206, 220, 223, 230, 233, 253, 374, 375, 376, 377, 382, 421, 443, 453, 480, 495, 501, 536, 537, 541, 543, 544, 545, 546, 552, 557, 567, 570, 578, 581, 582, 593, 607, 613, 617, 620, 624, 650, 651, 658, 663, 665, 669, 673, 691, 814, 815, 816, 817, 822, 930, 936, 986], "defin": [27, 29, 36, 72, 121, 122, 124, 129, 134, 158, 159, 183, 186, 235, 253, 267, 303, 396, 445, 457, 458, 459, 460, 461, 463, 464, 465, 538, 565, 581, 593, 625, 626, 643, 675, 691, 700, 736, 834, 986], "chrono": [27, 253, 363, 366, 509, 510, 511, 513, 803, 806, 944, 945, 946, 948], "rust": [27, 33, 81, 106, 110, 134, 235, 253, 675, 700, 986], "crate": [27, 253, 484, 485, 490, 491, 499, 500, 509, 510, 511, 513, 919, 920, 925, 926, 934, 935, 944, 945, 946, 948], "fraction": [27, 119, 120, 197, 253, 361, 444, 467, 509, 511, 593, 801, 874, 897, 944, 946, 986], "second": [27, 72, 123, 129, 158, 159, 173, 226, 253, 356, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 509, 511, 554, 555, 584, 586, 593, 625, 626, 631, 691, 796, 800, 807, 944, 946, 994], "precis": [27, 29, 37, 170, 196, 213, 253, 333, 769], "infer": [27, 88, 90, 91, 92, 93, 94, 101, 102, 105, 112, 115, 134, 253, 454, 492, 509, 510, 511, 513, 593, 691, 884, 927, 944, 945, 946, 948, 986], "maximum": [27, 101, 102, 112, 122, 123, 124, 126, 176, 253, 280, 422, 438, 450, 567, 593, 636, 691, 713, 751, 781, 862, 870, 875, 880, 986], "timeunit": [27, 36, 38, 72, 253, 333, 334, 365, 370, 511, 769, 770, 805, 810, 946], "frame": [27, 28, 29, 48, 49, 51, 62, 91, 119, 124, 134, 136, 170, 171, 180, 183, 186, 195, 196, 217, 224, 253, 609, 640, 643, 691, 750, 986, 994], "datetim": [27, 29, 62, 72, 95, 124, 129, 140, 156, 158, 159, 171, 173, 226, 253, 283, 284, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 457, 458, 459, 460, 461, 463, 464, 465, 509, 511, 526, 555, 561, 565, 575, 593, 625, 626, 631, 691, 716, 717, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 850, 870, 871, 901, 944, 946, 970, 986], "place": [27, 135, 142, 163, 164, 192, 202, 203, 206, 220, 228, 253, 277, 291, 298, 470, 471, 479, 593, 607, 652, 653, 658, 663, 691, 709, 724, 731, 881, 883, 904, 905, 914, 986], "float64": [27, 29, 91, 99, 101, 124, 130, 144, 145, 152, 198, 217, 230, 253, 269, 270, 271, 272, 273, 274, 314, 320, 321, 361, 377, 402, 404, 475, 476, 524, 525, 544, 557, 593, 615, 649, 669, 691, 801, 969, 974, 986], "datatyp": [27, 31, 45, 60, 88, 90, 91, 92, 94, 97, 99, 105, 107, 111, 126, 130, 144, 146, 152, 198, 253, 287, 314, 377, 472, 489, 526, 544, 557, 565, 593, 604, 617, 649, 672, 691, 700, 720, 745, 763, 843, 848, 850, 852, 906, 924, 970, 986], "repres": [27, 46, 60, 72, 88, 90, 92, 93, 94, 129, 207, 227, 253, 402, 404, 482, 533, 536, 544, 547, 557, 565, 572, 576, 577, 579, 580, 585, 593, 659, 667, 691, 901, 916, 976, 986], "null": [27, 50, 62, 70, 91, 101, 102, 112, 117, 133, 135, 136, 140, 143, 149, 152, 153, 165, 172, 177, 178, 184, 187, 189, 202, 203, 206, 207, 208, 212, 217, 220, 223, 225, 227, 230, 236, 253, 262, 266, 267, 277, 285, 288, 289, 292, 298, 303, 304, 306, 308, 317, 318, 319, 322, 324, 327, 329, 331, 332, 339, 342, 346, 348, 350, 355, 362, 374, 375, 376, 377, 380, 381, 382, 383, 388, 395, 402, 403, 404, 405, 406, 412, 421, 441, 444, 451, 456, 457, 458, 459, 460, 461, 463, 464, 465, 470, 471, 472, 474, 479, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 497, 498, 501, 503, 505, 506, 507, 515, 516, 517, 526, 534, 536, 543, 545, 546, 548, 557, 565, 576, 577, 581, 586, 593, 607, 609, 614, 620, 629, 630, 642, 652, 653, 658, 663, 665, 666, 669, 670, 672, 676, 691, 700, 709, 718, 731, 736, 737, 740, 750, 751, 764, 767, 775, 778, 785, 787, 790, 795, 802, 815, 816, 817, 820, 822, 827, 846, 847, 873, 874, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 899, 904, 905, 909, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 932, 933, 936, 938, 940, 941, 942, 966, 968, 969, 970, 977, 986, 994], "empti": [27, 79, 91, 101, 102, 105, 112, 136, 137, 167, 179, 253, 565, 578, 609, 610, 639, 691, 750, 754, 837, 986], "table_nam": [28, 29, 253], "connection_uri": [28, 103, 253], "if_exist": [28, 253], "dbwritemod": [28, 253], "fail": [28, 89, 104, 106, 113, 133, 222, 253, 278, 304, 509, 510, 511, 513, 593, 664, 691, 700, 944, 945, 946, 948, 986], "dbwriteengin": [28, 253], "sqlalchemi": [28, 253], "databas": [28, 103, 253, 604], "append": [28, 124, 147, 172, 173, 253, 451, 586, 593, 630, 631, 691, 986], "creat": [28, 29, 71, 72, 88, 92, 94, 113, 122, 123, 124, 125, 126, 127, 129, 136, 137, 158, 159, 184, 187, 226, 230, 253, 304, 334, 360, 367, 451, 503, 532, 540, 545, 553, 554, 555, 584, 593, 609, 610, 616, 625, 626, 669, 691, 750, 754, 762, 767, 770, 800, 807, 872, 878, 881, 938, 968, 986, 994], "connect": [28, 101, 103, 106, 110, 114, 116, 117, 253, 605], "uri": [28, 103, 104, 113, 253], "postgresql": [28, 103, 253, 443, 593], "usernam": [28, 101, 103, 106, 110, 114, 116, 253], "password": [28, 101, 103, 106, 110, 114, 116, 253], "server": [28, 103, 253], "port": [28, 101, 103, 106, 110, 114, 116, 253], "replac": [28, 101, 102, 112, 148, 149, 193, 221, 230, 253, 334, 359, 421, 500, 593, 619, 669, 691, 770, 799, 861, 900, 901, 935, 986], "insert": [28, 101, 102, 106, 110, 112, 114, 115, 116, 164, 192, 221, 223, 253, 468, 483, 515, 593, 665, 691, 898, 918, 950, 986], "mode": [28, 253, 491, 575, 593, 691, 926, 986], "new": [28, 29, 99, 112, 130, 131, 134, 143, 163, 164, 183, 184, 191, 192, 210, 223, 224, 230, 253, 262, 334, 379, 395, 420, 499, 500, 505, 506, 516, 517, 523, 593, 604, 614, 647, 662, 665, 669, 675, 691, 696, 767, 770, 819, 872, 883, 934, 935, 940, 941, 951, 953, 959, 965, 978, 986], "alreadi": [28, 253, 286, 328, 593, 719, 761, 986], "adbc": [28, 103, 253], "workbook": [29, 253], "worksheet": [29, 253], "posit": [29, 141, 146, 157, 185, 199, 200, 206, 223, 230, 233, 253, 374, 375, 376, 377, 443, 480, 498, 536, 537, 541, 543, 544, 545, 546, 552, 557, 567, 570, 578, 581, 582, 593, 613, 617, 624, 650, 651, 658, 665, 669, 673, 691, 815, 816, 817, 933, 986], "tupl": [29, 103, 134, 170, 195, 196, 201, 232, 253, 454, 593, 644, 654, 691, 884, 986], "a1": [29, 63, 65, 253], "table_styl": [29, 253], "column_format": [29, 253], "dtype_format": [29, 253], "oneormoredatatyp": [29, 122, 253, 850, 986], "conditional_format": [29, 253], "conditionalformatdict": [29, 253], "column_tot": [29, 253], "columntotalsdefinit": [29, 253], "column_width": [29, 253], "row_tot": [29, 253], "rowtotalsdefinit": [29, 253], "row_height": [29, 253], "sparklin": [29, 253], "sequenc": [29, 54, 62, 69, 88, 90, 91, 92, 94, 96, 98, 101, 102, 112, 122, 123, 124, 135, 140, 141, 143, 146, 147, 172, 173, 179, 183, 186, 187, 206, 214, 220, 221, 222, 223, 224, 225, 226, 253, 304, 400, 419, 445, 480, 517, 538, 541, 550, 551, 559, 561, 566, 574, 593, 607, 613, 614, 617, 630, 631, 643, 658, 663, 664, 665, 666, 691, 699, 737, 763, 765, 901, 953, 986], "formula": [29, 253, 372, 593, 813, 986], "autofilt": [29, 253], "autofit": [29, 253], "hidden_column": [29, 253], "hide_gridlin": [29, 253], "sheet_zoom": [29, 253], "excel": [29, 105, 253, 604], "object": [29, 30, 33, 50, 51, 72, 89, 90, 95, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 122, 124, 126, 129, 133, 157, 158, 159, 174, 216, 217, 253, 565, 604, 610, 625, 626, 628, 633, 646, 691, 712, 746, 768, 917, 963, 986], "open": [29, 101, 102, 105, 106, 110, 114, 116, 253], "xlsxwriter": [29, 118, 253], "ha": [29, 62, 71, 96, 112, 133, 226, 253, 267, 312, 328, 408, 430, 527, 538, 593, 675, 744, 750, 761, 763, 827, 840, 971, 986], "close": [29, 72, 129, 158, 159, 253, 396, 416, 457, 458, 459, 460, 461, 463, 464, 465, 477, 593, 625, 626, 691, 834, 912, 986], "xlsx": [29, 105, 253], "work": [29, 37, 102, 105, 159, 192, 253, 267, 286, 305, 316, 317, 318, 319, 377, 386, 443, 497, 529, 593, 626, 691, 719, 738, 748, 751, 752, 753, 825, 932, 972, 986], "directori": [29, 110, 253], "sheet1": [29, 253], "valid": [29, 48, 106, 110, 126, 131, 145, 253, 328, 484, 485, 490, 491, 493, 499, 500, 593, 761, 814, 827, 919, 920, 925, 926, 928, 934, 935, 986], "notat": [29, 253], "integ": [29, 41, 42, 43, 44, 56, 57, 58, 59, 122, 124, 125, 127, 158, 159, 253, 316, 361, 386, 387, 452, 457, 458, 459, 460, 461, 462, 463, 464, 465, 498, 535, 540, 561, 593, 625, 626, 691, 707, 708, 748, 801, 825, 843, 882, 892, 901, 933, 986, 994], "medium": [29, 253], "kei": [29, 62, 68, 158, 173, 180, 185, 187, 191, 194, 253, 625, 631, 640, 647, 648, 691], "contain": [29, 62, 68, 90, 93, 95, 104, 113, 119, 123, 135, 143, 171, 183, 187, 220, 253, 267, 400, 421, 485, 488, 490, 491, 493, 506, 507, 593, 607, 614, 644, 663, 691, 861, 867, 920, 923, 925, 926, 928, 941, 942, 963, 986], "follow": [29, 68, 101, 102, 104, 112, 113, 134, 158, 159, 173, 186, 226, 253, 267, 356, 360, 367, 445, 450, 457, 458, 459, 460, 461, 463, 464, 465, 517, 528, 538, 586, 587, 589, 593, 594, 595, 599, 600, 601, 625, 626, 631, 643, 691, 796, 800, 807, 880, 900, 901, 980, 982, 986, 987, 990, 991, 992, 994], "first_column": [29, 253], "last_column": [29, 253], "banded_column": [29, 253], "banded_row": [29, 253], "sheet": [29, 105, 253], "chart": [29, 253, 644, 691], "subsequ": [29, 190, 217, 253, 304, 616, 691], "colnam": [29, 112, 124, 144, 253, 615, 691], "given": [29, 48, 49, 62, 71, 72, 88, 90, 91, 92, 94, 99, 101, 102, 112, 121, 122, 124, 125, 126, 127, 129, 130, 134, 135, 145, 146, 169, 185, 186, 195, 202, 203, 206, 220, 225, 253, 267, 283, 298, 304, 335, 363, 365, 366, 372, 396, 414, 443, 445, 450, 453, 454, 457, 458, 460, 463, 464, 465, 468, 470, 471, 491, 509, 511, 517, 557, 593, 607, 617, 635, 643, 652, 653, 658, 663, 666, 675, 691, 700, 716, 731, 737, 762, 771, 803, 805, 806, 813, 814, 830, 834, 853, 857, 860, 872, 878, 880, 884, 887, 888, 890, 893, 894, 895, 898, 904, 905, 926, 944, 946, 974, 978, 986, 994], "here": [29, 88, 90, 91, 92, 94, 103, 104, 113, 122, 124, 126, 253, 493, 691, 928], "dd": [29, 253], "mm": [29, 253], "yyyi": [29, 253], "00": [29, 72, 124, 129, 158, 173, 226, 253, 333, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 509, 511, 513, 555, 625, 631, 691, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 807, 808, 809, 810, 811, 944, 946, 948], "dtype": [29, 65, 73, 88, 90, 92, 94, 95, 99, 101, 102, 112, 121, 122, 123, 124, 126, 130, 133, 158, 159, 173, 215, 216, 217, 253, 267, 269, 270, 271, 272, 273, 274, 277, 280, 281, 282, 291, 303, 314, 317, 318, 319, 320, 321, 326, 327, 339, 342, 346, 348, 350, 355, 362, 370, 377, 379, 417, 419, 421, 452, 453, 457, 458, 459, 460, 461, 463, 464, 465, 472, 475, 476, 483, 492, 503, 509, 520, 522, 524, 525, 526, 531, 532, 538, 540, 548, 557, 561, 565, 566, 581, 593, 625, 626, 631, 691, 713, 714, 715, 724, 736, 745, 750, 751, 752, 753, 759, 760, 763, 764, 775, 778, 785, 787, 790, 795, 802, 810, 814, 819, 837, 843, 850, 860, 861, 885, 899, 906, 918, 927, 938, 944, 956, 966, 968, 969, 970, 974, 986, 994], "overridden": [29, 88, 90, 92, 94, 128, 253, 691], "basi": [29, 124, 253], "param": [29, 88, 90, 91, 92, 94, 101, 102, 112, 123, 124, 126, 195, 253, 691], "It": [29, 134, 180, 186, 235, 253, 267, 313, 429, 593, 635, 640, 675, 691, 900, 901, 986], "also": [29, 72, 91, 112, 122, 123, 124, 125, 126, 144, 157, 158, 159, 180, 183, 199, 206, 230, 253, 324, 327, 359, 395, 396, 450, 457, 458, 459, 460, 461, 463, 464, 465, 480, 550, 551, 559, 561, 574, 586, 592, 593, 598, 624, 625, 626, 640, 650, 658, 669, 670, 691, 799, 834, 880, 986], "group": [29, 33, 102, 157, 158, 159, 171, 183, 185, 187, 224, 226, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 253, 261, 267, 286, 385, 443, 479, 480, 484, 490, 491, 499, 522, 538, 593, 624, 625, 626, 656, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 719, 919, 925, 926, 934], "float_dtyp": [29, 253], "simplifi": [29, 69, 253, 611, 616, 618, 644, 654, 655, 656, 691], "uniform": [29, 253], "condit": [29, 67, 143, 150, 195, 253, 488, 507, 559, 586, 614, 621, 691], "suppli": [29, 88, 90, 91, 92, 94, 195, 253, 445, 593, 691], "typenam": [29, 253], "3_color_scal": [29, 253], "data_bar": [29, 253], "make": [29, 54, 70, 88, 93, 101, 102, 103, 106, 110, 114, 116, 158, 159, 180, 183, 190, 226, 253, 375, 376, 421, 453, 505, 515, 593, 625, 626, 640, 691, 816, 817, 830, 861, 940, 950, 986, 994], "icon": [29, 253], "multipl": [29, 51, 69, 70, 101, 102, 112, 114, 115, 116, 122, 126, 135, 141, 145, 147, 150, 157, 158, 163, 171, 185, 187, 199, 200, 206, 220, 230, 233, 253, 303, 426, 430, 435, 436, 443, 454, 457, 458, 459, 460, 461, 463, 464, 465, 480, 536, 537, 541, 544, 550, 551, 552, 559, 566, 567, 570, 574, 582, 586, 593, 607, 613, 621, 624, 625, 650, 651, 658, 663, 669, 673, 691, 699, 736, 814, 866, 884, 986], "singl": [29, 62, 70, 101, 102, 103, 110, 112, 122, 141, 142, 143, 147, 154, 169, 185, 195, 206, 253, 267, 284, 303, 356, 383, 419, 451, 454, 480, 483, 534, 536, 537, 538, 541, 544, 545, 546, 552, 566, 567, 570, 575, 582, 593, 613, 614, 658, 691, 699, 717, 736, 796, 881, 884, 918, 963, 986], "across": [29, 253, 536, 537, 552, 567, 570, 582], "effect": [29, 133, 152, 253, 267, 593, 671, 691], "heatmap": [29, 253], "min": [29, 33, 129, 140, 149, 158, 159, 187, 253, 317, 319, 325, 382, 443, 450, 460, 578, 593, 620, 625, 626, 656, 691, 751, 753, 758, 763, 822, 880, 890, 986, 994], "entir": [29, 253], "final": [29, 62, 116, 253, 374, 375, 376, 593, 618, 691, 815, 816, 817, 986], "made": [29, 129, 253, 968, 986], "up": [29, 54, 103, 170, 173, 196, 213, 253, 267, 316, 515, 593, 630, 631, 635, 691, 748, 950, 986], "abov": [29, 253, 367, 586], "order": [29, 50, 62, 91, 119, 134, 135, 157, 158, 159, 185, 186, 187, 197, 200, 206, 220, 222, 226, 253, 267, 277, 300, 305, 315, 450, 467, 468, 469, 479, 480, 517, 529, 530, 541, 593, 607, 624, 625, 626, 639, 651, 655, 656, 658, 663, 664, 691, 700, 709, 733, 738, 747, 762, 849, 878, 880, 885, 897, 898, 902, 914, 953, 972, 973, 986], "than": [29, 72, 87, 92, 94, 101, 102, 112, 117, 124, 126, 134, 156, 157, 170, 173, 185, 195, 196, 197, 224, 235, 253, 267, 389, 390, 408, 411, 418, 467, 477, 495, 501, 506, 515, 547, 579, 582, 593, 624, 631, 655, 656, 675, 691, 700, 897, 912, 930, 936, 941, 950, 986, 994], "add": [29, 49, 102, 134, 147, 158, 230, 231, 253, 447, 519, 555, 559, 586, 593, 625, 630, 669, 670, 671, 691, 699, 986], "total": [29, 145, 253, 814, 986], "export": [29, 170, 171, 196, 213, 216, 253], "numer": [29, 173, 253, 260, 317, 318, 319, 387, 396, 416, 434, 436, 446, 453, 472, 518, 528, 593, 604, 631, 691, 751, 752, 753, 763, 834, 848, 899, 906, 986, 994], "associ": [29, 62, 123, 253], "sum": [29, 62, 145, 152, 157, 159, 169, 187, 233, 253, 267, 304, 326, 327, 372, 383, 457, 458, 460, 463, 464, 465, 534, 536, 550, 552, 559, 574, 593, 611, 616, 618, 624, 626, 642, 644, 654, 673, 691, 759, 760, 813, 814, 887, 888, 890, 893, 894, 895, 986], "pass": [29, 33, 62, 72, 90, 105, 112, 122, 124, 126, 135, 139, 141, 157, 158, 159, 161, 175, 185, 186, 199, 206, 209, 220, 226, 230, 233, 253, 267, 340, 359, 380, 394, 443, 445, 480, 496, 502, 508, 536, 537, 541, 544, 552, 561, 567, 570, 581, 582, 593, 607, 613, 624, 625, 626, 628, 635, 643, 650, 654, 658, 663, 669, 673, 691, 700, 776, 799, 820, 829, 856, 931, 937, 943, 957, 986], "must": [29, 71, 89, 90, 104, 113, 140, 146, 158, 159, 173, 180, 195, 253, 304, 419, 457, 458, 459, 460, 461, 463, 464, 465, 593, 617, 625, 626, 631, 635, 640, 691, 762, 763, 878, 986], "funcnam": [29, 253], "averag": [29, 253, 374, 375, 376, 450, 593, 815, 816, 817, 880, 986], "count_num": [29, 253], "count": [29, 101, 102, 106, 110, 112, 114, 115, 116, 140, 158, 159, 173, 183, 184, 187, 221, 225, 226, 231, 235, 244, 253, 268, 284, 323, 356, 412, 437, 441, 457, 458, 459, 460, 461, 463, 464, 465, 485, 530, 532, 539, 571, 593, 625, 626, 631, 642, 666, 671, 675, 684, 691, 717, 763, 796, 830, 868, 873, 920, 973, 975, 986], "std_dev": [29, 253], "var": [29, 127, 253, 593, 691, 986], "pixel": [29, 253], "unit": [29, 36, 38, 72, 124, 126, 145, 253, 333, 334, 340, 365, 370, 417, 430, 509, 511, 531, 561, 593, 644, 691, 769, 770, 776, 805, 810, 814, 860, 944, 946, 974, 986, 994], "hand": [29, 101, 102, 112, 253], "side": [29, 158, 159, 253, 396, 457, 458, 459, 460, 461, 463, 464, 465, 468, 593, 625, 626, 691, 834, 898, 986], "call": [29, 102, 124, 126, 131, 134, 157, 158, 159, 174, 252, 253, 267, 324, 327, 567, 570, 593, 605, 624, 625, 626, 690, 691, 700, 986], "ad": [29, 91, 133, 158, 221, 230, 253, 266, 380, 550, 551, 593, 625, 669, 691, 820, 986], "end": [29, 72, 101, 102, 110, 112, 129, 158, 253, 299, 310, 356, 360, 361, 377, 396, 484, 488, 491, 503, 507, 540, 544, 557, 586, 593, 625, 627, 634, 644, 691, 732, 742, 796, 800, 834, 923, 926, 938, 942, 986], "wise": [29, 62, 152, 253, 269, 270, 271, 272, 273, 274, 320, 321, 378, 415, 474, 475, 476, 524, 525, 550, 551, 559, 567, 570, 574, 593, 701, 702, 703, 704, 705, 706, 755, 756, 818, 858, 859, 909, 910, 911, 960, 961, 986], "match": [29, 70, 82, 88, 90, 91, 92, 94, 119, 120, 149, 173, 195, 253, 427, 484, 485, 488, 490, 491, 492, 493, 499, 500, 507, 509, 510, 511, 544, 620, 631, 691, 843, 850, 919, 920, 923, 925, 926, 927, 928, 934, 935, 942, 944, 945, 946, 986], "particip": [29, 253], "distinct": [29, 126, 185, 253, 305, 450, 555, 593, 738, 880, 986, 994], "referenc": [29, 253, 517], "differ": [29, 101, 117, 119, 147, 158, 159, 170, 196, 213, 221, 253, 285, 329, 338, 356, 357, 359, 368, 421, 438, 439, 509, 530, 558, 561, 593, 616, 625, 626, 691, 699, 700, 718, 764, 774, 796, 797, 799, 808, 870, 871, 899, 944, 986], "row_index": [29, 253], "height": [29, 143, 253], "provid": [29, 51, 101, 102, 103, 104, 112, 113, 124, 126, 169, 253, 304, 308, 309, 486, 487, 490, 492, 493, 561, 604, 655, 656, 691, 740, 741, 830, 853, 921, 922, 925, 927, 928, 986, 994], "intersect": [29, 253], "bodi": [29, 253], "start": [29, 72, 100, 101, 102, 106, 110, 112, 114, 115, 116, 128, 129, 157, 158, 174, 205, 226, 231, 253, 299, 311, 338, 340, 341, 343, 344, 349, 351, 357, 358, 360, 361, 365, 367, 368, 369, 371, 377, 396, 478, 484, 488, 491, 503, 507, 540, 544, 550, 557, 559, 586, 593, 624, 625, 644, 657, 671, 691, 732, 743, 769, 771, 774, 776, 777, 779, 784, 786, 789, 791, 794, 797, 798, 800, 801, 805, 807, 808, 809, 810, 811, 834, 913, 923, 926, 938, 942, 986, 994], "zero": [29, 88, 89, 100, 101, 102, 106, 110, 123, 133, 136, 149, 170, 195, 211, 216, 217, 253, 304, 381, 382, 416, 468, 477, 515, 528, 593, 609, 620, 691, 737, 750, 822, 912, 950, 963, 968, 969, 986], "unless": [29, 62, 90, 217, 253, 691, 969, 977, 986], "marker": [29, 253], "compliant": [29, 253], "case": [29, 62, 88, 90, 91, 92, 94, 116, 128, 134, 147, 158, 159, 170, 253, 419, 420, 429, 430, 484, 491, 499, 593, 625, 626, 691, 699, 919, 926, 934, 986], "three": [29, 219, 253, 304, 468, 593, 737], "avail": [29, 98, 104, 113, 122, 131, 252, 253, 450, 587, 589, 592, 593, 594, 595, 598, 599, 600, 601, 604, 605, 618, 690, 691, 880, 980, 982, 986, 987, 990, 991, 992], "insert_befor": [29, 253], "insert_aft": [29, 253], "respect": [29, 253], "direct": [29, 103, 110, 116, 224, 253], "far": [29, 253], "thei": [29, 91, 112, 119, 131, 174, 253, 456, 593, 886, 986], "strongli": [29, 128, 134, 195, 235, 253, 267, 593, 675, 700, 986], "advis": [29, 174, 253, 313, 593], "structur": [29, 79, 83, 85, 147, 186, 216, 253, 445, 593, 643, 691, 699, 986], "your": [29, 101, 102, 119, 120, 134, 170, 199, 230, 233, 253, 267, 313, 593, 611, 627, 634, 635, 650, 669, 673, 691, 700, 986, 994], "wherev": [29, 134, 235, 253, 267, 593, 675, 700, 986], "possibl": [29, 101, 134, 157, 170, 196, 222, 235, 253, 267, 417, 429, 506, 531, 593, 624, 664, 675, 691, 700, 941, 986], "simpl": [29, 126, 183, 253], "colx": [29, 253, 994], "coli": [29, 253, 994], "after": [29, 91, 100, 101, 102, 106, 110, 112, 114, 115, 116, 147, 223, 252, 253, 377, 421, 450, 515, 593, 665, 691, 699, 861, 880, 950, 986], "befor": [29, 101, 112, 128, 131, 147, 158, 173, 223, 253, 326, 327, 328, 421, 444, 456, 457, 458, 459, 460, 461, 463, 464, 465, 515, 520, 576, 577, 593, 625, 628, 631, 665, 691, 699, 759, 760, 761, 861, 874, 886, 887, 888, 889, 890, 891, 893, 894, 895, 950, 956, 986], "most": [29, 50, 88, 101, 102, 112, 253, 430, 435, 444, 506, 532, 593, 866, 874, 941, 975, 986], "mandatori": [29, 253], "return_dtyp": [29, 134, 253, 267, 419, 421, 538, 566, 593, 700, 861, 986], "latter": [29, 147, 253, 699, 986], "appropri": [29, 253, 450, 593, 880, 986], "pure": [29, 253], "actual": [29, 91, 105, 124, 126, 253, 313, 593, 907, 986], "indic": [29, 67, 96, 100, 101, 102, 106, 110, 112, 121, 122, 126, 158, 159, 173, 200, 214, 226, 253, 278, 303, 356, 360, 367, 398, 401, 402, 404, 405, 406, 425, 428, 457, 458, 459, 460, 461, 463, 464, 465, 468, 474, 522, 541, 593, 625, 626, 631, 651, 691, 736, 796, 800, 807, 838, 842, 844, 845, 846, 847, 898, 909, 958, 964, 986, 994], "calcul": [29, 62, 158, 207, 227, 253, 285, 329, 374, 375, 376, 409, 417, 462, 477, 482, 531, 533, 536, 538, 547, 572, 576, 577, 579, 580, 585, 593, 625, 659, 667, 691, 718, 764, 815, 816, 817, 854, 892, 912, 916, 976, 986], "individu": [29, 124, 159, 216, 253, 267, 491, 593, 626, 656, 691, 749, 926, 986], "gridlin": [29, 253], "zoom": [29, 253], "level": [29, 33, 112, 114, 115, 116, 124, 134, 152, 183, 253, 383, 593, 627, 634, 656, 691], "definit": [29, 122, 253, 409, 593, 854, 986], "take": [29, 124, 131, 152, 180, 186, 210, 253, 356, 480, 523, 556, 558, 593, 640, 662, 691, 796, 959, 978, 986], "care": [29, 253, 267, 469, 593, 902, 986], "rel": [29, 104, 113, 119, 120, 253, 356, 374, 375, 376, 593, 796, 815, 816, 817, 986], "see": [29, 103, 104, 105, 113, 119, 120, 124, 126, 139, 172, 186, 253, 317, 318, 319, 382, 395, 409, 419, 477, 484, 490, 491, 499, 574, 593, 751, 752, 753, 854, 912, 919, 925, 926, 934, 986, 994], "readthedoc": [29, 253], "io": [29, 253], "working_with_conditional_format": [29, 253], "html": [29, 89, 103, 133, 139, 253], "similarli": [29, 91, 253], "well": [29, 101, 102, 112, 146, 187, 253, 396, 593, 617, 691, 834, 986], "adjac": [29, 253], "two": [29, 90, 92, 94, 103, 129, 152, 179, 180, 187, 219, 234, 235, 253, 261, 304, 330, 334, 479, 522, 547, 549, 572, 576, 577, 579, 593, 639, 640, 674, 675, 691, 737, 765, 770, 986], "help": [29, 253, 618, 691], "where": [29, 62, 67, 103, 123, 143, 147, 170, 179, 196, 207, 227, 253, 278, 369, 372, 468, 477, 480, 482, 533, 547, 572, 576, 577, 579, 580, 585, 586, 593, 639, 659, 667, 691, 699, 710, 809, 813, 898, 912, 916, 976, 978, 986], "appear": [29, 91, 119, 253, 530, 593, 973, 986], "working_with_sparklin": [29, 253], "inject": [29, 62, 253], "locat": [29, 147, 193, 218, 223, 253, 468, 593, 665, 691, 699, 898, 901, 958, 986], "syntax": [29, 134, 183, 253, 484, 490, 491, 499, 654, 691, 919, 925, 926, 934, 986], "ensur": [29, 73, 123, 124, 126, 157, 185, 195, 253, 396, 532, 593, 624, 635, 691, 968, 975, 986], "correctli": [29, 253], "microsoft": [29, 118, 253], "com": [29, 103, 253, 374, 375, 376, 490, 491, 593, 815, 816, 817, 925, 926, 986], "u": [29, 36, 38, 72, 95, 170, 196, 213, 253, 333, 334, 340, 365, 370, 509, 511, 561, 769, 770, 776, 805, 810, 944, 946], "offic": [29, 253], "f5ed2452": [29, 253], "2337": [29, 253], "4f71": [29, 253], "bed3": [29, 253], "c8ae6d2b276": [29, 253], "instanti": [29, 199, 230, 253, 650, 669, 691], "basic": [29, 253, 994], "random": [29, 122, 124, 126, 160, 197, 253, 391, 450, 467, 473, 593, 828, 880, 897, 908, 986], "date": [29, 36, 62, 72, 101, 102, 103, 112, 117, 124, 140, 156, 158, 159, 171, 173, 226, 253, 283, 284, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 457, 458, 459, 460, 461, 463, 464, 465, 509, 510, 526, 561, 565, 575, 584, 593, 625, 626, 631, 691, 716, 717, 769, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 850, 870, 871, 901, 944, 945, 970, 986], "dtm": [29, 253, 334, 770], "2023": [29, 95, 118, 171, 253, 334, 565, 770], "num": [29, 219, 253, 396, 399, 515, 593, 834, 986], "500": [29, 170, 225, 253, 618, 666, 691, 784, 786, 794, 801, 887, 888, 890, 986], "val": [29, 194, 253, 315, 445, 526, 586, 593, 648, 691, 747], "10_000": [29, 253], "20_000": [29, 253], "30_000": [29, 253], "increas": [29, 101, 110, 253, 328, 593, 761, 986], "b4": [29, 253], "light": [29, 253], "twice": [29, 105, 253], "each": [29, 62, 102, 115, 119, 120, 122, 134, 156, 157, 158, 159, 171, 173, 185, 217, 223, 226, 232, 233, 235, 236, 238, 247, 253, 267, 290, 302, 356, 360, 367, 416, 450, 480, 491, 505, 506, 538, 541, 546, 581, 593, 625, 626, 631, 644, 665, 673, 675, 676, 678, 687, 691, 723, 735, 749, 796, 800, 807, 880, 926, 940, 941, 955, 986, 994], "titl": [29, 253], "explicit": [29, 112, 122, 253, 540, 574], "integr": [29, 253, 994], "multi_fram": [29, 253], "wb": [29, 253], "coordin": [29, 253], "advanc": [29, 253, 304, 737, 994], "len": [29, 71, 122, 124, 171, 253, 323, 454, 495, 501, 515, 593, 762, 878, 884, 930, 936, 950, 986], "min_color": [29, 253], "76933c": [29, 253], "mid_color": [29, 253], "c4d79b": [29, 253], "max_color": [29, 253], "ebf1d": [29, 253], "data_bar_2010": [29, 253], "bar_color": [29, 253], "9bbb59": [29, 253], "bar_negative_color_sam": [29, 253], "bar_negative_border_color_sam": [29, 253], "000": [29, 253, 994], "white": [29, 253], "w": [29, 50, 253, 490, 925], "get_worksheet_by_nam": [29, 253], "fmt_titl": [29, 253], "add_format": [29, 253], "font_color": [29, 253], "4f6228": [29, 253], "font_siz": [29, 253], "12": [29, 62, 71, 72, 95, 123, 124, 129, 158, 159, 173, 226, 253, 326, 334, 341, 344, 351, 352, 353, 358, 360, 367, 371, 444, 472, 551, 553, 554, 566, 593, 625, 626, 627, 631, 634, 654, 661, 691, 700, 762, 770, 791, 800, 807, 896, 986, 994], "ital": [29, 253], "bold": [29, 253], "customis": [29, 253], "trend": [29, 253], "win_loss": [29, 253], "subtl": [29, 253], "tone": [29, 253], "hidden": [29, 253], "id": [29, 235, 253, 499, 500, 530, 532, 593, 675, 973, 986, 994], "q1": [29, 253], "55": [29, 64, 253], "20": [29, 124, 129, 147, 163, 164, 186, 188, 192, 193, 253, 275, 276, 277, 329, 360, 367, 391, 395, 445, 561, 565, 593, 643, 691, 764, 807, 986], "35": [29, 118, 253, 329, 593, 764, 986], "q2": [29, 253], "30": [29, 71, 129, 147, 158, 163, 186, 192, 193, 212, 230, 253, 275, 276, 277, 329, 334, 339, 344, 352, 358, 359, 360, 367, 371, 391, 472, 565, 593, 625, 643, 669, 691, 762, 764, 770, 775, 792, 799, 800, 807, 986, 994], "15": [29, 118, 123, 129, 134, 158, 159, 164, 253, 328, 329, 353, 360, 367, 445, 551, 593, 625, 626, 691, 761, 764, 800, 807, 986], "60": [29, 147, 253, 361, 362, 509, 797, 801, 802, 944], "q3": [29, 253], "50": [29, 147, 253, 317, 318, 319, 360, 367, 593, 751, 807, 986], "40": [29, 147, 186, 253, 360, 367, 391, 593, 643, 691, 780, 807], "80": [29, 253], "q4": [29, 253], "75": [29, 140, 253, 264, 442, 593, 763, 830, 878, 986, 994], "account": [29, 95, 253, 356, 374, 375, 376, 593, 796, 815, 816, 817, 986], "flavour": [29, 253], "integer_dtyp": [29, 199, 253, 650, 691], "0_": [29, 253], "just": [29, 103, 112, 179, 253, 639, 691], "unifi": [29, 253], "multi": [29, 101, 102, 253, 377, 490, 567, 570, 593, 925], "2_color_scal": [29, 253], "95b3d7": [29, 253], "ffffff": [29, 253], "base": [29, 34, 143, 150, 158, 159, 253, 372, 374, 375, 376, 414, 415, 498, 593, 614, 621, 625, 626, 691, 813, 815, 816, 817, 830, 857, 858, 878, 933, 978, 986, 994], "standardis": [29, 253], "z": [29, 50, 95, 122, 124, 145, 166, 168, 172, 179, 253, 260, 264, 282, 315, 391, 442, 453, 491, 509, 511, 593, 630, 639, 657, 691, 747, 822, 926, 944, 946, 986], "score": [29, 253], "conjunct": [29, 105, 253], "a123": [29, 253], "b345": [29, 253], "c567": [29, 253], "d789": [29, 253], "e101": [29, 253], "45": [29, 129, 159, 253, 334, 360, 367, 485, 491, 565, 626, 691, 770, 800, 807, 920, 926, 994], "85": [29, 253, 994], "font": [29, 253], "consola": [29, 253], "standard": [29, 118, 207, 216, 253, 344, 375, 463, 477, 482, 493, 580, 593, 659, 691, 780, 816, 912, 916, 928, 986, 994], "stdev": [29, 253], "ipccompress": [30, 253], "arrow": [30, 74, 88, 103, 106, 114, 211, 253, 655, 691, 963, 968, 986], "ipc": [30, 106, 107, 114, 117, 253, 604], "binari": [30, 253, 307, 309, 310, 311, 537, 739, 741, 742, 743], "feather": [30, 106, 114, 253, 604], "lz4": [30, 33, 253, 655, 656, 691], "zstd": [30, 33, 253, 655, 656, 691], "pretti": [31, 253], "row_ori": [31, 253], "iobas": [31, 32, 108, 109, 253, 646, 672, 691], "serial": [31, 32, 253], "represent": [31, 32, 215, 253, 315, 338, 341, 344, 345, 347, 349, 351, 354, 357, 358, 361, 368, 369, 371, 526, 593, 616, 633, 691, 747, 774, 777, 779, 780, 784, 786, 789, 791, 794, 797, 798, 801, 808, 809, 811, 966, 970, 986], "orient": [31, 63, 65, 92, 94, 253, 691], "slower": [31, 92, 94, 134, 157, 185, 226, 235, 253, 624, 675, 691, 700, 986], "common": [31, 253, 598], "write_ndjson": [31, 253], "newlin": [32, 109, 115, 253], "delimit": [32, 96, 101, 102, 109, 112, 115, 187, 214, 253, 483, 918, 964, 986], "parquetcompress": [33, 253], "compression_level": [33, 253, 656, 691], "statist": [33, 101, 102, 110, 116, 140, 253, 375, 376, 409, 457, 458, 459, 460, 461, 462, 463, 464, 465, 477, 593, 656, 691, 763, 816, 817, 854, 892, 912, 986], "row_group_s": [33, 253, 656, 691], "use_pyarrow": [33, 101, 106, 110, 253, 656, 691, 967, 968, 986], "pyarrow_opt": [33, 104, 110, 113, 253], "parquet": [33, 110, 111, 116, 253, 604, 656, 691], "gzip": [33, 253, 656, 691], "lzo": [33, 253, 656, 691], "brotli": [33, 253, 656, 691], "choos": [33, 253, 655, 656, 691], "good": [33, 170, 253, 655, 656, 691], "perform": [33, 79, 89, 101, 102, 106, 110, 112, 114, 115, 116, 133, 134, 158, 159, 173, 190, 235, 253, 267, 313, 443, 593, 625, 626, 631, 655, 656, 671, 675, 691, 700, 986], "fast": [33, 125, 127, 253, 380, 469, 593, 655, 656, 691, 820, 902, 986, 994], "decompress": [33, 253, 655, 656, 691], "backward": [33, 149, 173, 253, 306, 353, 382, 593, 620, 631, 656, 691, 793, 822, 986], "guarante": [33, 89, 101, 102, 222, 253, 618, 656, 664, 691], "deal": [33, 170, 253, 359, 450, 509, 593, 656, 691, 799, 880, 944, 986], "older": [33, 253, 656, 691], "reader": [33, 98, 101, 102, 106, 110, 253, 605, 656, 691], "higher": [33, 189, 245, 253, 449, 461, 573, 593, 645, 656, 685, 691, 879, 891, 986], "mean": [33, 101, 102, 106, 110, 112, 140, 149, 157, 187, 233, 253, 379, 382, 458, 477, 490, 542, 593, 620, 624, 635, 656, 673, 691, 763, 819, 822, 827, 888, 912, 925, 986], "smaller": [33, 145, 253, 618, 656, 691, 814, 986], "disk": [33, 106, 253, 654, 655, 656, 691], "11": [33, 118, 124, 159, 253, 331, 332, 344, 352, 353, 356, 360, 367, 395, 444, 464, 478, 515, 535, 544, 582, 593, 611, 626, 627, 634, 644, 656, 661, 691, 700, 796, 800, 807, 886, 986], "22": [33, 123, 253, 360, 367, 370, 509, 544, 656, 691, 800, 807, 810, 944, 994], "extra": [33, 101, 104, 105, 106, 110, 113, 114, 116, 147, 253, 656, 691, 699, 986], "comput": [33, 69, 70, 76, 145, 157, 173, 217, 222, 233, 245, 253, 259, 269, 270, 271, 272, 273, 274, 294, 295, 296, 320, 321, 323, 324, 325, 326, 327, 330, 372, 378, 409, 414, 415, 416, 435, 443, 444, 448, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 474, 475, 476, 477, 481, 524, 525, 536, 537, 541, 547, 549, 552, 556, 567, 570, 572, 576, 577, 579, 582, 593, 624, 628, 630, 631, 656, 664, 670, 673, 685, 691, 695, 701, 702, 703, 704, 705, 706, 727, 728, 729, 755, 756, 757, 758, 759, 760, 765, 813, 814, 818, 854, 857, 858, 859, 866, 874, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 909, 910, 911, 912, 915, 960, 961, 969, 986], "512": [33, 253, 446, 593, 874, 986], "implement": [33, 89, 133, 134, 235, 253, 267, 593, 675, 700, 900, 901, 986], "v": [33, 50, 71, 145, 253, 468, 593, 762, 898, 986], "At": [33, 253], "moment": [33, 139, 253, 409, 477, 593, 854, 912, 986], "argument": [33, 101, 104, 110, 113, 139, 141, 146, 157, 158, 159, 177, 185, 186, 187, 199, 200, 206, 208, 217, 223, 226, 230, 233, 253, 360, 367, 377, 396, 443, 445, 457, 458, 459, 460, 461, 463, 464, 465, 480, 496, 502, 508, 509, 536, 537, 541, 543, 544, 545, 546, 552, 557, 567, 570, 578, 581, 582, 593, 613, 617, 624, 625, 626, 643, 650, 651, 658, 665, 669, 673, 691, 800, 807, 834, 931, 937, 943, 944, 969, 986], "pyarrow": [33, 88, 93, 101, 104, 106, 110, 113, 117, 118, 171, 211, 216, 217, 253, 605, 963, 967, 968, 969, 986], "write_t": [33, 253], "calendar": [35, 36, 158, 159, 173, 226, 253, 344, 356, 360, 367, 371, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 626, 631, 691, 780, 796, 800, 807, 811], "time": [36, 38, 48, 68, 69, 72, 112, 129, 147, 158, 159, 173, 226, 253, 282, 283, 284, 304, 312, 333, 334, 335, 340, 356, 359, 363, 365, 366, 370, 509, 511, 513, 526, 527, 545, 546, 555, 561, 575, 593, 611, 625, 626, 631, 644, 691, 699, 715, 717, 744, 769, 770, 771, 776, 796, 799, 803, 805, 806, 810, 944, 946, 948, 970, 971, 986, 994], "time_unit": [36, 38, 72, 95, 333, 334, 340, 365, 370, 511, 561, 769, 770, 776, 805, 810, 946], "time_zon": [36, 72, 95, 335, 359, 511, 771, 799, 946], "timezon": [36, 72], "m": [36, 38, 72, 333, 334, 340, 363, 365, 366, 370, 490, 509, 510, 511, 513, 561, 769, 770, 776, 803, 805, 806, 810, 925, 944, 945, 946, 948], "zone": [36, 72, 335, 359, 509, 511, 771, 799, 944, 946], "zoneinfo": 36, "run": [36, 69, 125, 127, 134, 157, 174, 187, 222, 235, 253, 267, 286, 328, 578, 593, 611, 616, 618, 624, 635, 639, 644, 654, 655, 656, 664, 675, 691, 700, 719, 761, 986, 993, 994], "available_timezon": 36, "128": [37, 64, 874, 986], "bit": [37, 39, 40, 41, 42, 43, 44, 56, 57, 58, 59, 452, 484, 593, 882, 919, 986], "neg": [37, 158, 161, 175, 202, 203, 205, 209, 253, 298, 299, 445, 470, 471, 478, 503, 593, 625, 652, 653, 657, 671, 691, 731, 732, 829, 856, 904, 905, 913, 938, 957, 986], "scale": [37, 145, 253, 445, 593, 814, 986], "experiment": [37, 71, 117, 199, 224, 225, 230, 253, 328, 360, 457, 458, 459, 460, 461, 463, 464, 465, 593, 650, 666, 669, 691, 761, 800, 830, 878, 986], "progress": 37, "expect": [37, 80, 82, 87, 267, 538, 565, 593, 633, 635, 691, 878, 986], "delta": [38, 104, 113, 207, 227, 253, 482, 533, 547, 572, 576, 577, 579, 580, 585, 593, 604, 659, 667, 691, 916, 976, 986], "32": [39, 42, 57, 64, 159, 169, 253, 436, 472, 593, 626, 691, 765, 797, 874, 891, 986], "sign": [41, 42, 43, 44, 356, 452, 515, 593, 796, 843, 882, 950, 986], "inner": [45, 53, 73, 123, 172, 225, 253, 291, 330, 526, 593, 630, 666, 672, 691, 724, 765, 970, 986], "polarsdatatyp": [45, 99, 101, 102, 107, 111, 112, 121, 122, 123, 124, 126, 130, 134, 144, 253, 267, 314, 377, 419, 421, 492, 538, 540, 544, 557, 565, 566, 593, 615, 691, 700, 745, 861, 927, 986], "pythondatatyp": 45, "nest": [45, 53, 95, 145, 253, 604, 814, 986, 994], "arrai": [45, 88, 92, 101, 102, 110, 145, 211, 216, 217, 253, 282, 293, 294, 295, 296, 297, 300, 301, 309, 317, 318, 319, 323, 324, 325, 326, 327, 415, 457, 458, 460, 463, 464, 465, 469, 485, 487, 490, 493, 556, 593, 691, 715, 726, 727, 728, 729, 730, 733, 734, 741, 751, 752, 753, 757, 758, 759, 760, 765, 814, 858, 859, 887, 888, 890, 893, 894, 895, 902, 907, 920, 922, 925, 928, 963, 968, 969, 977, 986], "within": [45, 119, 120, 158, 159, 173, 226, 253, 480, 593, 625, 626, 631, 691], "wrap": [47, 95, 396, 593], "arbitrari": [47, 124], "python": [47, 72, 101, 102, 118, 129, 134, 170, 196, 213, 235, 253, 267, 334, 419, 538, 586, 593, 598, 675, 700, 770, 781, 782, 783, 788, 967, 986], "queri": [48, 69, 103, 106, 112, 114, 115, 116, 147, 174, 186, 253, 421, 493, 593, 611, 616, 618, 627, 634, 644, 654, 671, 675, 691, 699, 928, 986, 993], "eager": [48, 67, 72, 129, 158, 224, 253, 333, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 365, 367, 368, 369, 370, 371, 540, 561, 575, 581, 592, 604, 625, 691, 769, 771, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 805, 807, 808, 809, 810, 811], "pars": [48, 101, 102, 105, 112, 114, 115, 135, 157, 199, 206, 220, 230, 233, 253, 396, 443, 480, 492, 498, 509, 511, 536, 537, 541, 543, 545, 546, 552, 561, 567, 570, 581, 582, 593, 607, 624, 650, 658, 663, 669, 673, 691, 834, 927, 933, 944, 946, 986], "against": [48, 286, 691, 719, 993, 994], "eagerli": [48, 304], "unset": [48, 123, 304, 359, 799], "init": [48, 131], "eager_execut": 48, "under": [49, 63, 64, 65, 66, 587, 589, 594, 595, 599, 600, 601, 980, 982, 987, 990, 991, 992], "present": [50, 91, 119, 124, 400, 593, 977, 986], "global": [50, 53, 73, 124, 421, 593], "scope": [50, 131], "automat": [50, 88, 90, 91, 92, 94, 95, 101, 102, 103, 112, 124, 126, 128, 199, 230, 253, 421, 496, 502, 508, 509, 593, 650, 669, 691, 861, 931, 937, 943, 944, 986], "map": [50, 51, 90, 91, 101, 102, 106, 107, 110, 111, 112, 114, 134, 144, 170, 191, 195, 196, 212, 253, 360, 367, 420, 421, 532, 538, 593, 615, 647, 691, 800, 807, 861, 986], "recent": [50, 444, 593, 874, 986], "lf1": 50, "x": [50, 62, 95, 101, 102, 103, 112, 122, 124, 145, 163, 166, 168, 172, 179, 187, 253, 260, 264, 267, 282, 291, 373, 387, 389, 390, 391, 411, 416, 418, 419, 434, 436, 440, 442, 446, 453, 474, 477, 505, 518, 526, 528, 535, 538, 550, 551, 559, 565, 566, 574, 593, 630, 635, 639, 657, 691, 696, 700, 822, 852, 909, 912, 940, 970, 986], "lf2": [50, 691], "t": [50, 70, 105, 112, 134, 186, 222, 224, 253, 267, 286, 328, 359, 372, 374, 375, 376, 445, 490, 496, 502, 508, 509, 511, 538, 586, 593, 643, 664, 691, 700, 719, 761, 799, 813, 815, 816, 817, 899, 925, 931, 937, 943, 944, 946, 977, 986], "execut": [50, 70, 174, 253, 286, 313, 593, 608, 635, 644, 691, 719], "join": [50, 53, 62, 69, 73, 173, 225, 253, 395, 443, 593, 611, 616, 618, 631, 644, 654, 666, 670, 691], "BY": 50, "desc": 50, "collect": [50, 52, 65, 69, 112, 113, 117, 124, 126, 129, 174, 211, 253, 267, 400, 540, 545, 561, 581, 593, 607, 613, 614, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 642, 643, 645, 647, 648, 650, 652, 653, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 669, 670, 671, 673, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 691, 841, 986, 994], "named_fram": 51, "context": [53, 128, 129, 183, 236, 253, 261, 267, 286, 313, 322, 383, 429, 479, 480, 532, 538, 548, 558, 561, 578, 592, 593, 604, 670, 676, 691, 719], "manag": [53, 604], "categor": [53, 73, 96, 172, 214, 215, 253, 315, 421, 526, 593, 746, 747, 970, 986], "temporarili": [53, 128, 158, 159, 253, 625, 626, 691], "cach": [53, 69, 73, 106, 112, 114, 116, 421, 457, 458, 459, 460, 461, 463, 464, 465, 509, 510, 511, 513, 593, 611, 616, 618, 644, 654, 691, 944, 945, 946, 948], "categori": [53, 71, 73, 315, 747, 762, 830, 878, 986], "until": [53, 174, 253, 313, 593], "finish": [53, 76, 147, 253, 699, 986], "invalid": [53, 101, 102, 112, 492, 493, 498, 528, 593, 927, 928, 933], "outermost": 53, "exit": [53, 131], "df1": [53, 62, 70, 73, 119, 147, 153, 217, 228, 253], "color": [53, 73, 235, 675], "red": [53, 73, 235, 675], "green": [53, 73, 235, 675], "blue": [53, 73], "orang": [53, 73, 138, 236, 237, 239, 240, 241, 243, 245, 246, 253, 676, 677, 679, 680, 681, 683, 685, 686], "uint8": [53, 73, 121, 123, 215, 216, 253, 326, 327, 421, 520, 535, 593, 759, 760, 956, 986, 994], "df2": [53, 62, 70, 73, 119, 147, 153, 217, 228, 253], "yellow": [53, 73], "black": [53, 73, 134, 253], "succe": [53, 101, 102, 112], "df_join": [53, 73], "cat": [53, 71, 73, 215, 253, 484, 512, 514, 526, 546, 589, 593, 762, 830, 878, 919, 982, 986], "u8": [53, 73, 96, 214, 215, 253, 421, 535, 593, 964, 986, 994], "schemadict": [54, 88, 90, 91, 92, 93, 94, 112, 198, 253, 581, 635, 649, 675, 691], "composit": [54, 123, 994], "dai": [55, 72, 158, 159, 171, 173, 226, 253, 340, 344, 351, 352, 353, 356, 357, 358, 360, 365, 367, 368, 369, 371, 457, 458, 459, 460, 461, 463, 464, 465, 553, 554, 555, 593, 625, 626, 631, 691, 792, 793, 796, 797, 800, 807, 809], "unsign": [56, 57, 58, 59, 452, 593, 843, 882, 986], "could": [60, 76, 143, 158, 253, 314, 550, 559, 593, 614, 625, 691, 745, 986], "static": [60, 675], "utf": 61, "descend": [62, 135, 200, 206, 220, 253, 277, 300, 450, 469, 479, 480, 541, 593, 607, 651, 658, 663, 691, 709, 733, 849, 880, 902, 914, 986], "uniqu": [62, 121, 122, 123, 126, 168, 183, 244, 253, 268, 279, 399, 407, 437, 509, 510, 511, 513, 530, 532, 539, 571, 593, 684, 691, 711, 763, 839, 851, 868, 944, 945, 946, 948, 973, 975, 986], "fill": [62, 70, 99, 130, 148, 149, 203, 224, 253, 306, 324, 327, 381, 382, 388, 395, 457, 458, 460, 463, 464, 465, 471, 495, 501, 515, 560, 593, 619, 620, 653, 670, 691, 821, 822, 872, 887, 888, 890, 893, 894, 895, 905, 930, 936, 950, 986], "sort": [62, 63, 119, 123, 135, 158, 159, 173, 180, 186, 187, 200, 220, 226, 238, 247, 253, 277, 315, 383, 469, 480, 532, 534, 541, 593, 607, 616, 625, 626, 631, 640, 643, 644, 651, 654, 663, 678, 687, 691, 709, 747, 849, 902, 972, 975, 986, 994], "origin": [62, 101, 102, 222, 253, 359, 408, 421, 443, 452, 485, 490, 491, 493, 495, 501, 515, 593, 664, 691, 762, 799, 861, 878, 920, 925, 926, 928, 930, 936, 950, 986], "In": [62, 99, 104, 113, 116, 124, 126, 130, 134, 145, 147, 158, 159, 183, 253, 267, 593, 625, 626, 691, 699, 814, 881, 986], "duplic": [62, 77, 166, 172, 173, 222, 253, 397, 593, 630, 631, 664, 691, 836, 986], "behaviour": [62, 484, 490, 491, 499, 528, 593, 919, 925, 926, 934], "equival": [62, 88, 90, 91, 92, 94, 104, 169, 183, 253, 260, 264, 373, 387, 389, 390, 411, 418, 434, 436, 440, 442, 446, 497, 518, 528, 535, 593, 691, 853, 932, 947, 949, 986], "outer": [62, 172, 253, 630, 691], "doe": [62, 82, 88, 90, 91, 92, 94, 95, 101, 102, 104, 105, 112, 113, 117, 119, 120, 147, 171, 195, 196, 222, 230, 253, 304, 367, 370, 421, 530, 558, 593, 618, 635, 664, 669, 691, 699, 810, 827, 861, 907, 977, 986], "receiv": [62, 112, 134, 186, 253, 445, 593, 643, 691, 994], "now": [62, 159, 253, 509, 626, 691, 944], "whose": [62, 173, 187, 253, 377, 557, 593, 631, 691], "post": 62, "constrain": 62, "newli": 62, "boolean": [62, 67, 135, 150, 152, 206, 220, 253, 263, 264, 265, 283, 307, 343, 383, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 442, 480, 492, 534, 535, 541, 581, 593, 607, 621, 658, 663, 691, 697, 698, 710, 716, 739, 779, 823, 834, 835, 836, 838, 839, 841, 842, 844, 845, 846, 847, 851, 875, 876, 900, 919, 978, 986], "2022": [62, 72, 140, 156, 158, 159, 173, 226, 253, 334, 356, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 509, 555, 561, 593, 625, 626, 631, 691, 770, 780, 796, 800, 807, 944], "y": [62, 95, 122, 124, 145, 166, 168, 172, 179, 187, 253, 260, 264, 282, 291, 363, 366, 373, 389, 390, 411, 418, 440, 442, 453, 509, 510, 511, 528, 535, 565, 593, 630, 639, 657, 691, 696, 803, 806, 944, 945, 946, 986], "df3": [62, 253], "set_tbl_format": 62, "09": [62, 124, 159, 253, 334, 344, 352, 353, 626, 691, 774], "01": [62, 72, 124, 129, 140, 156, 158, 159, 226, 253, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 509, 510, 511, 513, 555, 625, 626, 691, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 944, 945, 946, 948], "02": [62, 72, 129, 156, 158, 159, 173, 226, 253, 333, 334, 340, 341, 342, 349, 350, 351, 352, 353, 356, 359, 360, 361, 362, 365, 367, 368, 370, 457, 458, 459, 460, 461, 463, 464, 465, 466, 509, 510, 511, 513, 555, 593, 625, 626, 631, 691, 737, 769, 770, 772, 773, 776, 777, 778, 781, 782, 783, 784, 786, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 804, 805, 807, 808, 809, 810, 944, 945, 946, 948], "03": [62, 72, 95, 158, 159, 226, 253, 333, 334, 335, 339, 340, 342, 350, 351, 352, 353, 359, 360, 361, 362, 363, 365, 366, 367, 368, 370, 510, 513, 625, 626, 691, 769, 770, 771, 774, 775, 776, 777, 778, 781, 782, 783, 784, 786, 788, 790, 791, 792, 793, 794, 797, 798, 799, 800, 801, 802, 803, 805, 806, 808, 809, 810, 945, 948], "af1": 62, "af2": 62, "af3": 62, "keep": [62, 101, 102, 112, 222, 225, 226, 253, 408, 421, 543, 593, 664, 666, 691, 762, 861, 878, 986], "easili": [62, 199, 230, 233, 253, 544, 581, 650, 669, 673, 691], "dot": [62, 593, 654, 691, 986], "product": [62, 139, 253, 326, 330, 538, 593, 759, 765, 986], "fill_nul": [62, 148, 253, 593, 619, 670, 691, 986], "167": 62, "47": 62, "callabl": [63, 64, 65, 66, 112, 134, 152, 186, 235, 253, 267, 304, 419, 420, 445, 456, 538, 550, 551, 559, 566, 574, 593, 635, 643, 675, 691, 700, 737, 886, 986], "decor": [63, 64, 65, 66, 124, 126, 134, 253, 267, 593, 700, 986], "access": [63, 64, 65, 66, 170, 195, 196, 253, 421, 593, 670, 691, 994], "by_first_letter_of_column_nam": 63, "f": [63, 102, 140, 156, 171, 211, 221, 224, 253, 260, 267, 304, 472, 489, 509, 511, 538, 545, 566, 593, 737, 924, 944, 946], "fromkei": [63, 65], "by_first_letter_of_column_valu": 63, "starts_with": [63, 484, 488, 923], "slice": [63, 69, 145, 161, 171, 209, 253, 290, 302, 456, 457, 458, 459, 460, 461, 463, 464, 465, 593, 611, 616, 618, 635, 644, 654, 655, 656, 691, 723, 735, 814, 829, 886, 887, 888, 889, 890, 891, 893, 894, 895, 957, 986], "to_seri": [63, 67, 154, 253, 509, 944], "xx": [63, 65, 123, 126], "xy": [63, 65], "yy": [63, 65, 123, 126], "yz": [63, 65], "a2": [63, 65], "b1": [63, 65], "b2": [63, 65], "pow_n": 64, "powersofn": 64, "next": [64, 306, 450, 593, 880, 986], "p": [64, 186, 253, 445, 581, 593, 643, 691], "ceil": [64, 593, 986], "previou": [64, 131, 444, 517, 593, 874, 986], "floor": [64, 593, 986], "nearest": [64, 173, 189, 245, 253, 316, 386, 449, 461, 573, 593, 631, 645, 685, 691, 748, 825, 833, 879, 891, 986], "24": [64, 118, 134, 145, 159, 253, 326, 328, 342, 436, 593, 626, 691, 761, 778, 853, 986], "001": [64, 345, 346, 348, 355, 555, 785, 787, 795], "next_pow2": 64, "prev_pow2": 64, "nearest_pow2": 64, "split_by_column_dtyp": 65, "31": [66, 72, 124, 334, 338, 339, 351, 352, 356, 368, 509, 553, 554, 561, 565, 770, 774, 775, 792, 796, 944, 994], "42": [66, 159, 160, 253, 626, 691, 828, 986], "961": 66, "1764": 66, "4160": 66, "evalu": [67, 72, 129, 148, 150, 173, 253, 264, 278, 304, 328, 394, 396, 400, 421, 442, 536, 537, 540, 556, 575, 581, 586, 593, 621, 628, 630, 631, 691, 710, 761, 978, 986], "immedi": [67, 72, 129, 450, 540, 575, 581, 593, 880, 986], "arg_tru": [67, 593, 986], "u32": [67, 158, 184, 231, 236, 244, 246, 253, 261, 268, 275, 276, 277, 278, 279, 280, 281, 284, 293, 322, 323, 338, 341, 345, 349, 351, 357, 358, 361, 368, 369, 412, 421, 437, 441, 450, 468, 485, 494, 497, 526, 530, 539, 541, 548, 571, 593, 625, 642, 671, 676, 684, 686, 691, 709, 710, 711, 726, 745, 774, 777, 784, 786, 789, 791, 794, 797, 798, 801, 808, 809, 830, 880, 920, 929, 932, 970, 973, 975, 986], "build": [68, 89, 994], "wa": 68, "compil": [68, 280, 281, 713, 714], "gate": 68, "info": [68, 104, 113, 118, 343, 779], "otherwis": [68, 123, 128, 180, 199, 253, 304, 308, 317, 318, 319, 359, 374, 375, 376, 445, 452, 484, 486, 536, 537, 552, 567, 570, 582, 586, 593, 640, 650, 691, 700, 737, 740, 751, 752, 753, 799, 815, 816, 817, 882, 900, 901, 919, 921, 986], "version": [68, 71, 72, 96, 104, 113, 118, 352, 353, 509, 564, 572, 574, 579, 792, 793, 944], "depend": [68, 118, 267, 280, 281, 429, 450, 538, 558, 561, 593, 713, 714, 880, 986, 994], "host": [68, 101, 106, 110, 114, 116], "git": 68, "lazy_fram": 69, "type_coercion": [69, 611, 616, 618, 644, 654, 655, 656, 691], "predicate_pushdown": [69, 611, 616, 618, 635, 644, 654, 655, 656, 691], "projection_pushdown": [69, 611, 616, 618, 635, 644, 654, 655, 656, 691], "simplify_express": [69, 611, 616, 618, 644, 654, 655, 656, 691], "no_optim": [69, 611, 618, 635, 644, 655, 656, 691], "slice_pushdown": [69, 611, 616, 618, 635, 644, 654, 655, 656, 691], "common_subplan_elimin": [69, 611, 616, 618, 644, 654, 691], "graph": [69, 174, 253, 628, 670, 691], "parallel": [69, 70, 98, 103, 110, 116, 158, 173, 174, 186, 253, 286, 328, 593, 604, 625, 630, 631, 691, 719, 761, 986], "threadpool": [69, 128], "coercion": [69, 453, 593, 611, 616, 618, 644, 654, 655, 656, 691], "optim": [69, 110, 112, 114, 115, 116, 170, 174, 186, 190, 196, 222, 253, 611, 616, 618, 635, 644, 654, 655, 656, 664, 671, 691], "predic": [69, 112, 114, 115, 116, 117, 150, 169, 195, 253, 383, 534, 559, 593, 611, 616, 618, 621, 635, 644, 647, 654, 655, 656, 671, 691, 823, 900, 901, 986], "pushdown": [69, 611, 616, 618, 635, 644, 647, 654, 655, 656, 671, 691, 900, 901, 986], "project": [69, 112, 114, 115, 116, 267, 479, 480, 593, 611, 616, 618, 635, 644, 647, 654, 655, 656, 672, 691], "turn": [69, 101, 102, 112, 532, 593, 611, 616, 618, 635, 644, 655, 656, 691], "off": [69, 101, 102, 112, 532, 593, 611, 616, 618, 635, 644, 655, 656, 691], "Will": [69, 221, 253, 611, 616, 618, 644, 654, 691, 986], "try": [69, 83, 85, 101, 102, 105, 106, 110, 112, 114, 116, 611, 616, 618, 644, 654, 691], "branch": [69, 611, 616, 618, 644, 654, 691], "subplan": [69, 611, 616, 618, 644, 654, 691], "occur": [69, 284, 435, 450, 593, 611, 616, 618, 644, 654, 691, 717, 866, 880, 986], "union": [69, 70, 611, 616, 618, 644, 654, 691], "part": [69, 88, 124, 491, 505, 506, 611, 616, 618, 644, 654, 670, 691, 774, 777, 784, 786, 789, 791, 794, 801, 811, 926, 940, 941], "fashion": [69, 172, 253, 611, 616, 618, 644, 654, 691], "item": [70, 102, 195, 197, 253, 283, 289, 291, 379, 467, 506, 593, 716, 722, 724, 819, 897, 941, 986], "iter": [70, 125, 127, 135, 157, 158, 159, 170, 171, 185, 195, 196, 199, 200, 206, 220, 221, 230, 232, 233, 253, 328, 377, 443, 480, 536, 537, 541, 543, 544, 545, 546, 552, 557, 567, 570, 578, 581, 582, 586, 593, 607, 624, 625, 626, 650, 651, 658, 663, 669, 673, 691, 761, 986, 994], "concatmethod": 70, "vertic": [70, 147, 224, 228, 253, 483, 918], "rechunk": [70, 88, 93, 101, 102, 106, 110, 112, 114, 115, 116, 147, 253, 593, 699, 749, 867, 986], "aggreg": [70, 101, 102, 110, 152, 158, 159, 176, 177, 178, 181, 183, 187, 188, 189, 207, 208, 224, 227, 233, 234, 237, 239, 253, 261, 383, 393, 419, 443, 456, 457, 458, 459, 460, 461, 463, 464, 465, 532, 536, 537, 550, 551, 552, 559, 564, 567, 570, 574, 582, 593, 625, 626, 635, 636, 637, 638, 641, 642, 645, 659, 660, 667, 673, 674, 677, 679, 691, 831, 886, 887, 888, 890, 893, 894, 895, 986], "concaten": [70, 152, 186, 253, 445, 545, 546, 593, 643, 691, 749, 867, 986], "diagon": [70, 221, 253], "strategi": [70, 101, 121, 122, 123, 124, 126, 149, 158, 172, 173, 182, 253, 267, 304, 382, 593, 620, 625, 630, 631, 691, 737, 822, 986], "vstack": [70, 147, 253], "find": [70, 151, 253, 468, 593, 898, 986], "miss": [70, 101, 102, 112, 148, 253, 306, 374, 375, 376, 388, 395, 402, 404, 579, 593, 619, 691, 815, 816, 817, 977, 986], "stack": [70, 163, 228, 253], "length": [70, 71, 99, 112, 122, 130, 158, 159, 205, 253, 299, 304, 328, 360, 367, 430, 456, 457, 458, 459, 460, 461, 463, 464, 465, 478, 495, 497, 501, 503, 515, 540, 576, 577, 593, 625, 626, 644, 657, 691, 732, 737, 749, 761, 762, 770, 800, 807, 855, 872, 878, 886, 887, 888, 889, 890, 891, 893, 894, 895, 913, 930, 932, 936, 938, 950, 986], "don": [70, 134, 222, 224, 253, 267, 286, 328, 538, 593, 664, 691, 700, 719, 761, 899, 977, 986], "sure": [70, 88, 93, 101, 102, 103, 106, 110, 190, 253, 540], "contigu": [70, 88, 93, 101, 102, 106, 110, 112, 114, 115, 116, 190, 253], "relev": 70, "df_h1": 70, "l1": 70, "l2": 70, "df_h2": 70, "r1": 70, "r2": 70, "r3": 70, "df_d1": 70, "df_d2": 70, "bin": [71, 498, 535, 587, 593, 762, 830, 878, 933, 980, 986], "label": [71, 456, 457, 458, 459, 460, 461, 463, 464, 465, 593, 644, 691, 762, 878, 886, 887, 888, 889, 890, 891, 893, 894, 895, 986], "break_point_label": [71, 762, 878, 986], "break_point": [71, 762, 830, 878, 986], "category_label": [71, 762, 878, 986], "discret": [71, 285, 329, 372, 593, 718, 762, 764, 813, 830, 878, 986], "deprec": [71, 72, 96, 509, 564, 572, 579, 691, 944], "sinc": [71, 72, 96, 104, 113, 340, 509, 561, 564, 572, 579, 776, 944], "assign": [71, 122, 158, 253, 304, 450, 505, 506, 593, 625, 691, 737, 762, 861, 878, 880, 940, 941, 986], "breakpoint": [71, 762, 878, 986], "inf": [71, 124, 126, 274, 398, 401, 528, 593, 706, 762, 830, 838, 842, 860, 874, 878, 974, 986], "interv": [72, 129, 158, 159, 226, 253, 343, 360, 361, 367, 396, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 626, 691, 774, 776, 777, 779, 784, 786, 789, 791, 794, 797, 798, 800, 801, 805, 807, 808, 809, 811, 834, 986], "timedelta": [72, 129, 158, 159, 226, 253, 338, 340, 341, 344, 349, 351, 356, 357, 358, 360, 361, 365, 367, 368, 369, 371, 457, 458, 459, 460, 461, 463, 464, 465, 575, 593, 625, 626, 691, 781, 783, 788, 796, 800, 807, 870, 871, 986], "1d": [72, 158, 159, 173, 226, 253, 333, 342, 350, 356, 360, 367, 370, 457, 458, 459, 460, 461, 463, 464, 465, 565, 593, 625, 626, 631, 691, 769, 776, 778, 781, 782, 783, 788, 790, 796, 800, 805, 807, 809, 810], "_nodefault": [72, 187, 253, 509, 944], "no_default": [72, 187, 253, 509, 944], "closedinterv": [72, 129, 158, 159, 253, 396, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 626, 691, 834, 986], "lower": [72, 112, 129, 158, 189, 245, 253, 317, 319, 396, 417, 420, 449, 452, 461, 540, 573, 593, 618, 625, 645, 685, 691, 753, 834, 860, 879, 882, 891, 974, 986], "bound": [72, 101, 102, 129, 145, 158, 253, 289, 303, 304, 317, 318, 319, 396, 417, 531, 540, 593, 625, 691, 722, 736, 752, 753, 814, 834, 860, 974, 986], "upper": [72, 101, 102, 129, 145, 158, 253, 304, 317, 318, 396, 531, 540, 593, 625, 691, 752, 814, 834, 860, 974, 986], "period": [72, 129, 158, 159, 202, 203, 253, 298, 360, 367, 374, 375, 376, 444, 470, 471, 593, 625, 626, 652, 653, 691, 731, 800, 807, 815, 816, 817, 874, 904, 905, 986], "like": [72, 89, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 129, 166, 168, 172, 253, 286, 432, 450, 490, 582, 593, 618, 646, 691, 719, 880, 925, 986], "durat": [72, 129, 173, 226, 253, 339, 342, 346, 348, 350, 355, 362, 370, 526, 593, 631, 691, 775, 778, 785, 787, 790, 795, 802, 810, 970, 986], "3d12h4m25": [72, 158, 159, 173, 226, 253, 360, 367, 625, 626, 631, 691, 800, 807], "hour": [72, 129, 158, 159, 173, 226, 253, 356, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 554, 555, 584, 593, 625, 626, 631, 691, 796, 800, 807], "minut": [72, 129, 158, 159, 173, 226, 253, 356, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 554, 555, 584, 593, 625, 626, 631, 691, 796, 800, 807], "17": [72, 118, 124, 129, 233, 466, 509, 561, 564, 593, 673, 755, 800, 944, 986, 994], "tempor": [72, 129, 158, 159, 170, 196, 213, 253, 396, 457, 458, 459, 460, 461, 463, 464, 465, 593, 604, 625, 626, 691, 834, 850, 986], "window": [72, 129, 158, 159, 253, 328, 360, 367, 374, 375, 376, 443, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 545, 576, 577, 593, 625, 626, 691, 761, 800, 807, 815, 816, 817, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 986], "granular": 72, "finer": 72, "permut": 72, "1mo": [72, 158, 159, 173, 226, 253, 335, 339, 352, 353, 356, 359, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 626, 631, 691, 771, 775, 791, 792, 793, 796, 797, 798, 799, 800, 807, 808], "dtrang": 72, "1985": 72, "04": [72, 117, 158, 226, 253, 334, 335, 338, 339, 342, 349, 350, 351, 352, 353, 357, 359, 360, 361, 362, 363, 366, 368, 369, 370, 509, 555, 625, 691, 771, 775, 778, 784, 786, 789, 790, 791, 792, 793, 794, 798, 799, 801, 802, 803, 806, 808, 809, 810, 944], "05": [72, 117, 119, 120, 124, 173, 226, 253, 334, 335, 339, 359, 361, 363, 366, 631, 691, 770, 771, 772, 773, 774, 775, 799, 800, 803, 804, 806, 807, 809], "07": [72, 129, 334, 338, 357, 359, 360, 367, 369, 509, 561, 770, 774, 799, 809, 944], "08": [72, 119, 120, 124, 129, 159, 253, 334, 360, 509, 555, 626, 691, 800, 807, 944], "america": 72, "new_york": 72, "\u03bc": [72, 95, 124, 158, 159, 173, 226, 253, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 509, 511, 555, 561, 625, 626, 631, 691, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 807, 808, 809, 810, 811, 944, 946], "est": 72, "combin": [72, 83, 85, 158, 159, 160, 173, 226, 253, 264, 278, 356, 367, 442, 496, 502, 508, 593, 625, 626, 631, 654, 691, 796, 807, 931, 937, 943], "month_end": 72, "get": [72, 97, 107, 111, 128, 135, 138, 144, 154, 155, 158, 159, 161, 162, 166, 168, 169, 175, 182, 195, 198, 201, 205, 209, 220, 229, 238, 247, 253, 261, 275, 276, 277, 279, 288, 292, 293, 305, 323, 324, 325, 326, 327, 340, 356, 384, 392, 397, 399, 407, 410, 413, 422, 423, 424, 429, 431, 433, 438, 439, 449, 478, 482, 494, 497, 520, 521, 529, 533, 558, 563, 567, 568, 569, 570, 580, 583, 585, 593, 607, 612, 615, 622, 625, 626, 627, 632, 634, 649, 657, 661, 663, 668, 678, 687, 691, 707, 708, 709, 710, 711, 721, 725, 726, 738, 749, 757, 758, 759, 760, 776, 796, 826, 829, 834, 836, 839, 851, 856, 862, 864, 865, 867, 870, 871, 875, 876, 879, 913, 916, 929, 932, 957, 963, 964, 972, 976, 977, 986], "last": [72, 135, 161, 173, 175, 187, 206, 209, 220, 222, 247, 253, 277, 289, 302, 328, 338, 352, 357, 367, 368, 479, 506, 521, 583, 593, 607, 631, 658, 661, 663, 664, 687, 691, 709, 722, 735, 761, 774, 792, 797, 808, 829, 856, 941, 957, 986], "month": [72, 158, 159, 173, 226, 253, 338, 352, 353, 356, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 553, 554, 593, 625, 626, 631, 691, 774, 792, 793, 796, 800, 807], "28": [72, 158, 159, 173, 212, 226, 253, 260, 356, 359, 360, 367, 370, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 626, 631, 691, 796, 799, 800, 807, 810, 994], "disabl": [73, 170, 253], "equal": [73, 101, 102, 112, 119, 120, 153, 158, 173, 180, 253, 304, 373, 389, 411, 456, 457, 458, 459, 460, 461, 463, 464, 465, 494, 495, 501, 515, 540, 576, 577, 593, 625, 631, 640, 691, 737, 886, 887, 888, 889, 890, 891, 893, 894, 895, 899, 929, 930, 936, 950, 986, 994], "encount": [74, 158, 253, 438, 439, 492, 493, 547, 550, 559, 579, 593, 625, 691, 870, 871, 927, 928, 986], "certain": [78, 104, 113, 164, 226, 253, 544, 611, 644, 655, 656, 691, 986], "least": [80, 124, 444, 532, 593, 874, 975, 986], "unexpect": [81, 253], "caus": [81, 89, 101, 102, 112, 133, 147, 253, 699, 986], "panic": 81, "mismatch": 83, "incompat": 85, "pa": [88, 117], "chunkedarrai": [88, 182, 253, 765, 986], "recordbatch": [88, 171, 253], "schemadefinit": [88, 90, 91, 92, 94, 253, 691], "schema_overrid": [88, 90, 91, 92, 93, 94, 171, 216, 253, 691], "copi": [88, 89, 133, 136, 137, 171, 211, 216, 217, 230, 253, 380, 515, 593, 609, 610, 669, 691, 696, 750, 754, 767, 820, 950, 963, 968, 969, 986], "closest": 88, "pair": [88, 90, 91, 92, 94, 123, 191, 253, 647, 691, 994], "declar": [88, 90, 91, 92, 94, 253, 691], "sever": [88, 90, 91, 92, 94, 253, 691, 994], "wai": [88, 90, 91, 92, 94, 141, 157, 171, 186, 206, 233, 253, 443, 445, 480, 490, 544, 593, 613, 624, 643, 658, 673, 691, 925], "As": [88, 90, 91, 92, 94, 105, 253, 575, 691], "auto": [88, 90, 91, 92, 94, 110, 116, 221, 253, 509, 691, 944, 994], "form": [88, 90, 91, 92, 94, 170, 196, 224, 253, 444, 593, 691, 874, 986], "them": [88, 90, 91, 92, 94, 112, 147, 158, 159, 173, 180, 226, 253, 291, 396, 438, 439, 545, 593, 625, 626, 631, 640, 691, 699, 724, 870, 871, 986], "dimens": [88, 90, 92, 94, 253, 454, 593, 691, 884, 986], "construct": [88, 90, 91, 92, 93, 94, 253, 421, 593, 623, 646, 691, 986], "allow_copi": [89, 133], "interchang": [89, 133], "protocol": [89, 103, 133], "__dataframe__": 89, "convers": [89, 133, 171, 217, 253, 509, 510, 511, 513, 604, 944, 945, 946, 948, 967, 968, 969, 986], "detail": [89, 103, 119, 120, 133, 253, 691, 994], "latest": [89, 104, 113, 133, 388, 430, 593], "index": [89, 93, 97, 103, 118, 133, 151, 158, 159, 164, 169, 173, 187, 193, 195, 205, 218, 226, 231, 253, 261, 275, 276, 277, 279, 280, 281, 289, 299, 303, 304, 356, 457, 458, 459, 460, 461, 463, 464, 465, 468, 478, 490, 503, 522, 593, 625, 626, 631, 657, 671, 691, 707, 708, 709, 710, 711, 713, 714, 722, 732, 736, 737, 796, 853, 872, 898, 901, 913, 925, 938, 958, 986], "throw": [89, 314, 492, 493, 593, 745, 927, 928, 986], "runtimeerror": 89, "from_panda": [89, 105], "from_arrow": 89, "effici": [89, 171, 253], "clone": [90, 91, 92, 93, 94, 136, 216, 217, 253, 609, 691, 750, 967, 968, 969, 977, 986], "dimension": [90, 92, 94, 253, 691, 986], "infer_schema_length": [91, 94, 101, 102, 105, 112, 115, 253, 691], "NOT": [91, 119, 120, 428], "typic": [91, 134, 253, 700, 986], "clearer": 91, "load": [91, 93, 104, 113, 125, 127, 253, 604, 627, 634, 691, 994], "want": [91, 134, 147, 183, 253, 267, 317, 318, 319, 383, 419, 421, 457, 458, 459, 460, 461, 463, 464, 465, 550, 559, 593, 611, 627, 634, 691, 699, 700, 751, 752, 753, 968, 986], "_partial_": [91, 253, 691], "omit": [91, 95, 122, 124, 126, 129, 131, 183, 253], "mani": [91, 94, 103, 147, 253, 699, 986], "scan": [91, 94, 101, 102, 110, 112, 113, 114, 115, 116, 117, 618, 627, 634, 691], "slow": [91, 94, 101, 102, 112, 267, 328, 593, 761, 986], "partial": 91, "np": [92, 150, 216, 253, 522, 593, 691, 838, 842, 844, 845, 886, 958, 986], "ndarrai": [92, 150, 216, 253, 522, 593, 691, 765, 898, 901, 958, 968, 986], "numpi": [92, 118, 139, 216, 217, 253, 438, 439, 593, 691, 838, 842, 844, 845, 870, 871, 886, 968, 969, 977, 986], "columnar": [92, 94, 170, 196, 253], "interpret": [92, 94, 101, 102, 112, 253, 691], "yield": [92, 94, 101, 102, 112, 145, 147, 221, 253, 691, 699, 814, 986], "conclus": [92, 94, 253, 691], "nan_to_nul": [93, 253, 691, 986], "include_index": 93, "datetimeindex": [93, 765, 986], "panda": [93, 105, 118, 217, 253, 352, 353, 526, 593, 691, 792, 793, 969, 970, 986], "instal": [93, 101, 102, 103, 106, 110, 118, 139, 216, 217, 253, 654, 691, 969, 986], "nan": [93, 119, 120, 124, 133, 148, 217, 253, 331, 332, 373, 381, 389, 390, 395, 402, 404, 405, 406, 411, 418, 422, 433, 438, 439, 440, 528, 547, 579, 593, 619, 691, 702, 706, 766, 821, 844, 845, 870, 871, 886, 969, 986, 994], "convert": [93, 96, 104, 105, 113, 133, 212, 213, 214, 215, 216, 219, 253, 304, 335, 363, 366, 420, 498, 509, 510, 511, 513, 593, 691, 737, 771, 803, 806, 933, 944, 945, 946, 948, 955, 966, 967, 968, 969, 977, 986], "pd": [93, 105, 526, 593, 970, 986], "pd_df": 93, "pd_seri": 93, "tbl": [95, 98, 102], "reconstruct": 95, "repr": [95, 124, 126], "need": [95, 101, 102, 105, 119, 120, 158, 159, 204, 216, 253, 304, 421, 472, 494, 593, 625, 626, 691, 906, 929, 986], "trim": 95, "whitespac": [95, 496, 502, 508, 931, 937, 943], "prompt": 95, "extract": [95, 338, 339, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 354, 355, 357, 358, 361, 362, 368, 369, 371, 445, 491, 492, 493, 593, 772, 773, 774, 775, 777, 778, 780, 784, 785, 786, 787, 789, 790, 791, 794, 795, 797, 798, 801, 802, 804, 808, 809, 811, 926, 927, 928], "to_init_repr": [95, 253, 986], "handl": [95, 101, 102, 112, 117, 285, 329, 515, 593, 718, 764, 950, 986], "truncat": [95, 158, 253, 356, 625, 644, 691, 796], "identifi": [95, 179, 185, 222, 253, 639, 664, 691], "compound": 95, "struct": [95, 183, 199, 219, 223, 230, 253, 304, 421, 492, 505, 506, 532, 550, 551, 552, 566, 593, 650, 665, 669, 691, 737, 927, 940, 941], "neither": [95, 105, 197, 253, 304, 737], "source_ac": 95, "source_cha": 95, "ident": [95, 136, 137, 253, 363, 609, 610, 691, 750, 754, 803, 986], "timestamp": [95, 359, 561, 799], "tor_id": 95, "nnel_id": 95, "asia": [95, 772, 773, 804], "tokyo": 95, "123456780": 95, "9876543210": 95, "56": [95, 129, 524, 593], "59": [95, 123, 129, 334, 349, 361, 554, 584, 770, 789, 801], "663053": 95, "jst": 95, "803065983": 95, "2055938745": 95, "38": [95, 124], "18": [95, 129, 159, 253, 327, 360, 367, 370, 395, 408, 593, 626, 644, 691, 810], "050545": 95, "source_actor_id": 95, "source_channel_id": 95, "sr": [95, 696, 986], "to_list": [95, 159, 253, 626, 691, 919, 986], "dummi": [96, 214, 253, 964, 986], "to_dummi": [96, 253, 986], "foo_1": [96, 214, 253], "foo_2": [96, 214, 253], "bar_3": [96, 214, 253], "bar_4": [96, 214, 253], "ham_a": [96, 214, 253], "ham_b": [96, 214, 253], "datatypeclass": 97, "uint32": [97, 118, 145, 253, 277, 280, 281, 293, 338, 341, 345, 347, 349, 351, 354, 357, 358, 361, 368, 369, 453, 485, 494, 497, 522, 526, 593, 710, 713, 714, 726, 745, 774, 777, 784, 786, 789, 791, 794, 797, 798, 801, 808, 809, 814, 843, 899, 920, 970, 986], "regular": [97, 170, 195, 196, 226, 253, 377, 484, 485, 490, 491, 499, 500, 544, 557, 567, 570, 582, 593, 919, 920, 925, 926, 934, 935], "uint64": [97, 160, 253, 280, 281, 391, 452, 593, 713, 714, 828, 882, 986], "bigidx": 97, "read": [98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 147, 253, 419, 586, 593, 618, 623, 646, 691, 699, 986], "batch": [98, 102, 115, 635, 691], "over": [98, 101, 102, 104, 112, 124, 134, 147, 170, 171, 195, 196, 221, 232, 235, 253, 267, 328, 382, 395, 419, 420, 456, 457, 458, 459, 460, 461, 463, 464, 465, 538, 550, 551, 559, 566, 574, 593, 675, 699, 700, 761, 886, 887, 888, 890, 894, 986], "fetch": [98, 112, 174, 253, 609, 611, 627, 634, 691], "ideal": 98, "read_csv_batch": [98, 605], "tpch": [98, 102], "tables_scale_100": [98, 102], "lineitem": [98, 102, 103], "try_parse_d": [98, 101, 102, 112], "probabl": [99, 130, 372, 593, 813, 986], "n_row": [100, 101, 102, 106, 110, 112, 114, 115, 116, 171, 253, 618, 691], "accept": [100, 101, 102, 104, 106, 110, 135, 146, 157, 199, 206, 220, 230, 233, 253, 260, 377, 396, 443, 480, 535, 536, 537, 541, 543, 544, 545, 546, 552, 557, 567, 570, 581, 582, 593, 607, 617, 624, 650, 658, 663, 669, 673, 691, 834, 986], "stop": [100, 101, 102, 106, 110, 112, 114, 115, 116, 129, 338, 340, 341, 343, 344, 349, 351, 357, 358, 360, 361, 365, 367, 368, 369, 371, 769, 771, 774, 776, 777, 779, 784, 786, 789, 791, 794, 797, 798, 800, 801, 805, 807, 808, 809, 810, 811], "textio": 101, "new_column": [101, 102, 105, 112, 192, 253], "comment_char": [101, 102, 112], "quote_char": [101, 102, 112], "skip_row": [101, 102, 112], "missing_utf8_is_empty_str": [101, 102, 112], "ignore_error": [101, 102, 112], "n_thread": [101, 102], "8192": 101, "csvencod": [101, 102, 112], "low_memori": [101, 102, 110, 112, 115, 116], "storage_opt": [101, 104, 106, 110, 113, 114, 116], "skip_rows_after_head": [101, 102, 112], "row_count_nam": [101, 102, 106, 110, 112, 114, 115, 116], "row_count_offset": [101, 102, 106, 110, 112, 114, 115, 116], "sample_s": [101, 102], "eol_char": [101, 102, 112], "we": [101, 102, 105, 112, 173, 253, 286, 498, 565, 586, 631, 635, 691, 700, 719, 830, 878, 933, 986], "handler": [101, 102, 105], "g": [101, 102, 104, 105, 106, 110, 113, 114, 116, 158, 159, 173, 224, 226, 253, 260, 267, 356, 360, 367, 377, 457, 458, 459, 460, 461, 463, 464, 465, 472, 557, 593, 625, 626, 631, 647, 691, 796, 800, 807, 899, 968, 986], "builtin": [101, 102, 105], "stringio": [101, 102], "fsspec": [101, 102, 106, 110, 113, 114, 116, 118], "remot": [101, 102, 106, 110], "first": [101, 102, 105, 112, 115, 123, 134, 156, 158, 161, 173, 175, 182, 186, 187, 209, 215, 221, 222, 226, 238, 253, 277, 279, 286, 289, 290, 304, 328, 353, 356, 360, 392, 399, 413, 421, 445, 468, 480, 490, 492, 493, 499, 500, 543, 550, 559, 563, 586, 593, 611, 625, 627, 631, 634, 643, 664, 670, 678, 691, 709, 719, 722, 723, 737, 761, 763, 793, 796, 800, 829, 839, 856, 861, 898, 925, 927, 928, 934, 935, 957, 966, 986, 994], "autogener": [101, 102, 112], "column_x": [101, 102, 112], "enumer": [101, 102, 112, 171, 253], "shorter": [101, 102], "remain": [101, 102, 112, 145, 253, 505, 506, 635, 691, 814, 940, 941, 986], "comment": [101, 102, 112], "instanc": [101, 102, 112, 124, 126, 131, 147, 152, 253, 314, 430, 457, 458, 459, 460, 461, 463, 464, 465, 550, 559, 593, 635, 671, 691, 699, 745, 986], "special": [101, 102, 112, 491, 700, 926, 986], "escap": [101, 102, 112], "dure": [101, 102, 112, 131, 147, 253, 699, 986], "would": [101, 102, 112, 277, 289, 429, 450, 541, 593, 709, 722, 880, 968, 986], "prefer": [101, 102, 104, 112, 127, 134, 147, 170, 195, 196, 235, 253, 267, 456, 593, 675, 691, 699, 700, 886, 986, 994], "treat": [101, 102, 112, 484, 499, 500, 919, 934, 935], "10000": [101, 171, 253, 515], "check": [101, 102, 112, 119, 120, 153, 167, 169, 253, 263, 265, 283, 307, 310, 311, 396, 400, 484, 488, 507, 593, 635, 691, 697, 698, 716, 739, 742, 743, 835, 837, 840, 841, 843, 848, 849, 850, 852, 853, 899, 919, 923, 942, 986], "might": [101, 102, 112, 128, 267, 530, 593, 969, 986], "issu": [101, 102, 105, 112, 326, 327, 520, 593, 759, 760, 956, 986], "iso8601": [101, 102, 112], "alwai": [101, 123, 134, 235, 253, 429, 509, 586, 635, 675, 691, 700, 944, 986, 994], "physic": [101, 102, 173, 253, 315, 526, 593, 608, 630, 631, 691, 747, 970, 986], "cpu": [101, 102], "system": [101, 102], "wrongli": 101, "done": [101, 102, 112, 117, 156, 173, 253, 266, 268, 314, 495, 501, 539, 593, 631, 691, 745, 930, 936, 986], "buffer": [101, 102, 145, 170, 253, 814, 986], "modifi": [101, 102, 112, 128, 131, 163, 170, 228, 253, 278, 359, 370, 484, 490, 491, 499, 593, 799, 810, 883, 919, 925, 926, 934, 947, 949, 986], "lossi": [101, 102, 112], "decod": [101, 102], "reduc": [101, 102, 110, 112, 114, 115, 116, 240, 241, 243, 246, 472, 559, 593, 656, 680, 681, 683, 686, 691, 863, 877, 906, 956, 986], "usag": [101, 102, 112, 124, 126, 204, 253, 907, 986], "expens": [101, 102, 110, 112, 115, 116, 125, 127, 134, 170, 195, 196, 221, 222, 253, 267, 593, 664, 691, 699, 700, 986, 994], "nativ": [101, 106, 110, 122, 134, 170, 196, 213, 235, 253, 267, 593, 598, 675, 700, 986, 994], "parser": 101, "even": [101, 445, 593], "regard": [101, 547, 579], "sens": [101, 106, 110, 114, 116, 158, 159, 180, 226, 253, 625, 626, 640, 691], "particular": [101, 106, 110, 114, 116, 145, 253, 814, 986], "storag": [101, 104, 106, 110, 113, 114, 116], "skip": [101, 102, 105, 110, 112, 116, 224, 253, 700, 986], "offset": [101, 102, 106, 110, 112, 114, 115, 116, 158, 159, 205, 226, 231, 253, 299, 352, 353, 356, 360, 367, 478, 503, 509, 511, 593, 625, 626, 657, 671, 691, 732, 792, 793, 796, 800, 807, 913, 938, 944, 946, 986], "row_count": [101, 102, 106, 110, 112, 114, 115, 116], "sampl": [101, 102, 235, 253, 477, 593, 675, 912, 986], "estim": [101, 102, 145, 253, 268, 375, 376, 409, 539, 593, 691, 814, 816, 817, 854, 986], "alloc": [101, 102, 145, 190, 253, 814, 986], "scan_csv": [101, 102, 655, 656, 691], "lazili": [101, 102, 112, 113, 114, 115, 116, 421, 593], "glob": [101, 102, 112, 114, 115, 116], "pattern": [101, 102, 112, 114, 115, 116, 170, 253, 427, 484, 485, 490, 491, 499, 500, 900, 901, 919, 920, 925, 926, 934, 935, 986], "store": [101, 110, 147, 170, 196, 253, 699, 986], "continu": [101, 110, 477, 593, 912, 986], "benchmark": [101, 110, 313, 593], "50000": 102, "batchedcsvread": [102, 604], "upon": 102, "creation": 102, "gather": 102, "next_batch": 102, "big": 102, "interest": 102, "seen_group": 102, "big_fil": 102, "while": [102, 104, 105, 113, 124, 126, 170, 179, 221, 253, 639, 691], "df_current_batch": 102, "concat": [102, 749, 867, 986], "partition_df": 102, "partition_bi": [102, 171, 253], "as_dict": [102, 185, 253], "fh": 102, "write_csv": [102, 112, 253], "els": [102, 586], "partition_on": 103, "partition_rang": 103, "partition_num": 103, "dbreadengin": 103, "connectorx": [103, 118], "raw": 103, "partit": [103, 104, 110, 113, 117, 171, 185, 253], "backend": [103, 104, 113], "transfer": 103, "document": [103, 105, 363, 366, 493, 509, 510, 511, 513, 803, 806, 928, 944, 945, 946, 948], "redshift": 103, "mysql": 103, "mariadb": 103, "clickhous": 103, "oracl": 103, "bigqueri": 103, "pleas": 103, "doc": [103, 139, 253], "github": 103, "sfu": 103, "db": 103, "connector": 103, "destin": 103, "sqlite": 103, "develop": [103, 124, 126], "flight_sql": 103, "further": [103, 969, 986], "wide": [103, 156, 179, 224, 253, 639, 691], "adopt": 103, "significantli": [103, 994], "better": [103, 134, 216, 235, 253, 267, 532, 593, 675, 900, 901, 986], "driver": 103, "cpp": 103, "partition_col": 103, "explicitli": [103, 122, 124, 131, 421, 581, 593], "delta_table_opt": [104, 113], "lake": [104, 113, 604], "root": [104, 113, 408, 420, 431, 447, 481, 519, 592, 593, 915, 986], "filesystem": [104, 113], "absolut": [104, 113, 119, 120, 259, 374, 375, 376, 593, 695, 815, 816, 817, 986], "gc": [104, 113], "azur": [104, 113], "deltalak": [104, 113, 118], "cloud": [104, 113, 117], "configur": [104, 113], "authent": [104, 113], "keyword": [104, 110, 113, 139, 186, 195, 199, 230, 233, 253, 445, 578, 581, 593, 643, 650, 669, 673, 691, 986], "table_path": [104, 113], "avoid": 104, "year": [104, 113, 158, 159, 173, 226, 253, 343, 344, 356, 357, 360, 367, 368, 457, 458, 459, 460, 461, 463, 464, 465, 553, 554, 593, 625, 626, 631, 691, 779, 780, 796, 797, 800, 807, 808], "2021": [104, 113, 140, 156, 158, 226, 253, 509, 565, 625, 691, 772, 773, 780, 804, 850, 944, 986], "aw": [104, 113], "bucket": [104, 113, 360, 367, 800, 807, 830, 986], "aws_access_key_id": [104, 113], "the_aws_access_key_id": [104, 113], "aws_secret_access_kei": [104, 113], "the_aws_secret_access_kei": [104, 113], "googl": [104, 113], "service_account": [104, 113], "service_account_json_absolute_path": [104, 113], "az": [104, 113], "adl": [104, 113], "abf": [104, 113], "azure_storage_account_nam": [104, 113], "azure_storage_account_kei": [104, 113], "without_fil": [104, 113], "track": [104, 113, 134, 253, 304], "sheet_id": 105, "sheet_nam": 105, "xlsx2csv_option": 105, "read_csv_opt": 105, "noreturn": 105, "xlsx2csv": [105, 118], "read_csv": [105, 112], "nor": [105, 197, 253], "skip_empty_lin": 105, "my": [105, 117], "datasheet": 105, "correct": [105, 375, 376, 409, 462, 477, 593, 635, 691, 816, 817, 854, 892, 912, 986], "look": [105, 304, 307, 739], "fix": [105, 122, 124, 370, 457, 458, 459, 460, 461, 463, 464, 465, 593, 810], "whole": [105, 479, 480, 490, 593, 691, 925], "With": [105, 134, 169, 253, 267, 593, 700, 853, 986], "1000": [105, 145, 215, 253, 345, 346, 515, 785, 966, 986, 994], "spreadsheet": [105, 187, 253], "xl": 105, "xlsm": 105, "xlsb": 105, "odf": 105, "od": [105, 508, 943], "odt": 105, "memory_map": [106, 110, 114], "v2": [106, 114], "greatli": [106, 114], "improv": [106, 114, 656, 691], "repeat": [106, 114, 451, 453, 593], "o": [106, 114, 312, 328, 489, 527, 593, 744, 761, 924, 971, 986], "page": [106, 110, 114, 116, 253, 593, 604, 656, 691, 986], "give": [106, 110, 114, 115, 116, 179, 222, 253, 340, 409, 453, 528, 593, 604, 639, 664, 691, 776, 854, 986], "That": [106, 635, 691], "filenam": 106, "my_fil": 106, "write_ipc": [106, 253], "read_ndjson": 108, "parallelstrategi": [110, 116], "use_statist": [110, 116], "awar": [110, 170, 196, 213, 253, 509, 511, 944, 946], "stabl": [110, 139, 197, 253, 416, 593, 639, 691], "row_group": [110, 116], "pressur": [110, 115, 116, 472, 593, 656, 691, 906, 986], "read_tabl": 110, "with_column_nam": 112, "push": [112, 114, 115, 116, 117], "down": [112, 114, 115, 116, 117, 386, 593, 825, 986], "therebi": [112, 114, 115, 116], "potenti": [112, 114, 115, 116], "overhead": [112, 114, 115, 116], "realloc": [112, 114, 115, 147, 253, 699, 986], "headerless": 112, "unlik": 112, "fewer": 112, "my_long_fil": 112, "doesn": [112, 372, 593, 813, 977, 986], "thing": [112, 558], "less": [112, 173, 253, 411, 418, 495, 501, 506, 515, 593, 631, 691, 930, 936, 941, 950, 994], "limit": [112, 149, 253, 306, 317, 318, 319, 382, 388, 593, 620, 627, 656, 691, 751, 752, 753, 822, 986], "breezah": 112, "languag": [112, 158, 159, 173, 226, 253, 356, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 626, 631, 691, 796, 800, 807], "hard": [112, 635, 691], "mydf": 112, "lambda": [112, 134, 152, 186, 235, 253, 267, 304, 374, 375, 376, 419, 420, 456, 538, 550, 551, 559, 566, 574, 593, 635, 643, 675, 691, 700, 737, 815, 816, 817, 986], "simpli": [112, 550, 559], "idx": [112, 158, 171, 253, 304, 625, 691, 737, 901, 986], "uint16": [112, 326, 327, 520, 593, 759, 760, 956, 986], "u16": [112, 124, 994], "aws_region": 113, "eu": 113, "central": [113, 409, 477, 593, 854, 912, 986], "allow_pyarrow_filt": 117, "comparison": 117, "dset": 117, "folder": 117, "1970": 117, "stdout": [118, 156, 253], "platform": 118, "linux": 118, "90": 118, "wsl2": 118, "x86_64": 118, "glibc2": 118, "main": 118, "apr": 118, "14": [118, 124, 129, 134, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 253, 344, 395, 593, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 800], "44": [118, 330, 593], "51": 118, "gcc": 118, "matplotlib": [118, 644, 654, 691], "check_dtyp": [119, 120], "check_exact": [119, 120], "rtol": [119, 120], "1e": [119, 120], "atol": [119, 120], "nans_compare_equ": [119, 120], "check_column_ord": 119, "check_row_ord": 119, "assertionerror": [119, 120], "compar": [119, 120, 153, 253, 373, 389, 390, 411, 418, 440, 537, 593, 899, 986], "exactli": [119, 120, 123, 124, 126, 505, 506, 907, 940, 941, 986], "toler": [119, 120, 173, 253, 631, 691], "inexact": [119, 120], "assert": [119, 120, 122, 124, 126, 159, 253, 604, 626, 691, 827, 986], "irrespect": 119, "unsort": 119, "check_nam": 120, "s1": [120, 152, 253, 737, 853, 969, 978, 986], "searchstrategi": [121, 123, 124, 126], "null_prob": [121, 124, 126], "percentag": [121, 124, 126, 444, 593, 874, 986], "chanc": [121, 124, 126, 994], "independ": [121, 122, 124, 126], "flag": [121, 469, 484, 490, 491, 499, 593, 616, 635, 691, 902, 919, 925, 926, 934, 986], "hypothesi": [121, 122, 123, 124, 125, 126, 994], "sampled_from": [121, 994], "unique_small_int": 121, "ccy": [121, 994], "gbp": [121, 994], "eur": [121, 140, 156, 253, 994], "jpy": [121, 994], "min_col": [122, 124], "max_col": [122, 124], "suitabl": [122, 134, 253, 267, 468, 593, 700, 898, 986, 994], "standalon": [122, 124], "itself": [122, 633, 691], "mincol": 122, "exact": [122, 124, 126, 204, 253, 509, 510, 511, 528, 593, 944, 945, 946], "minimum": [122, 123, 124, 126, 152, 181, 253, 374, 375, 376, 433, 439, 450, 570, 593, 641, 656, 691, 751, 788, 815, 816, 817, 871, 876, 880, 986, 994], "especi": 122, "test_unique_xyz": 122, "assert_someth": 122, "punctuat": 122, "test_special_char_colname_init": 122, "inner_dtyp": [123, 126], "select_from": [123, 126], "min_siz": [123, 124, 126, 994], "max_siz": [123, 124, 126, 994], "anoth": [123, 157, 253, 303, 328, 333, 425, 428, 593, 624, 670, 691, 736, 761, 769, 899, 986], "randomli": 123, "innermost": 123, "ignor": [123, 124, 126, 177, 208, 253, 285, 329, 359, 374, 375, 376, 438, 439, 593, 718, 764, 799, 815, 816, 817, 870, 871, 986], "2x": 123, "lst": 123, "11330": 123, "24030": 123, "116": 123, "zz": [123, 126], "small": [123, 174, 253, 360, 618, 691, 994], "uint8_pair": [123, 994], "uint": [123, 994], "zip": [123, 994], "131": 123, "176": 123, "149": [123, 994], "include_col": 124, "allow_infin": [124, 126], "allowed_dtyp": [124, 126, 994], "excluded_dtyp": [124, 126], "describ": [124, 156, 253, 986], "desir": [124, 304, 737], "n_chunk": [124, 126, 253, 986], "randomis": 124, "onto": 124, "either": [124, 159, 169, 174, 177, 185, 195, 208, 253, 509, 536, 541, 581, 626, 633, 691, 944], "pct": 124, "preced": 124, "disallow": [124, 126], "exclud": [124, 126, 324, 327, 396, 544, 579, 593, 834, 850, 986], "deploi": [124, 126], "characterist": [124, 126], "concret": [124, 126], "test_repr": 124, "isinst": [124, 126, 253], "0x11f561580": 124, "known": [124, 304, 675, 737], "0565": 124, "34715": 124, "5844": 124, "33": [124, 461, 466, 544, 593, 891, 986], "076854": 124, "3382": 124, "48662": 124, "7540": 124, "29": [124, 129, 158, 159, 173, 226, 253, 352, 356, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 626, 631, 691, 792, 796, 800, 807], "836271": 124, "4063": 124, "06": [124, 129, 226, 253, 334, 344, 358, 359, 371, 799, 800, 809], "39092": 124, "1889": 124, "13": [124, 129, 136, 137, 148, 149, 155, 159, 164, 174, 182, 230, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 253, 456, 458, 545, 550, 559, 585, 593, 609, 610, 619, 620, 626, 633, 669, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 691, 700, 800, 807, 808, 986], "41": [124, 994], "874455": 124, "15836": 124, "1755e": 124, "575050513": 124, "profil": [125, 127, 691], "balanc": [125, 127, 994], "set_environ": 125, "polars_hypothesis_profil": [125, 127], "1500": 125, "constructor": 126, "max_data_s": 126, "normal": [126, 158, 253, 372, 409, 477, 593, 625, 691, 813, 854, 912, 986], "test_repr_is_valid_str": 126, "experi": 126, "create_list_strategi": [126, 994], "polars_max_thread": 128, "behind": 128, "lock": 128, "reason": 128, "pyspark": 128, "udf": [128, 134, 186, 235, 253, 267, 445, 538, 593, 643, 675, 691, 700, 986], "similar": [128, 152, 173, 253, 363, 366, 443, 586, 593, 631, 691, 803, 806], "recommend": [128, 170, 186, 253], "1h": [129, 158, 159, 173, 226, 253, 356, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 626, 631, 691, 777, 796, 800, 807], "23": [129, 158, 159, 253, 334, 341, 360, 554, 584, 625, 626, 691, 770, 777, 994], "999999": [129, 554, 584], "1h30m25": 129, "tm": [129, 334], "third": [129, 419, 593], "lf": [129, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 691, 994], "6h": 129, "5h59m": 129, "1h29m": 129, "58": 129, "57": [129, 896, 986, 994], "19": [129, 159, 173, 253, 360, 626, 631, 691, 800, 807], "lifetim": 131, "initi": [131, 550, 559, 586], "whatev": 131, "were": 131, "enter": 131, "advantag": [131, 186, 253], "initialis": [131, 691], "set_": 131, "set_verbos": 131, "do_various_th": 131, "restor": 131, "prefix": [131, 262, 311, 420, 507, 515, 519, 593, 743, 942, 950], "breviti": 131, "nan_as_nul": 133, "_pyarrowdatafram": 133, "nullabl": 133, "extens": [133, 217, 253, 969, 986], "propag": [133, 177, 208, 253, 438, 439, 593, 870, 871, 986], "inference_s": [134, 253], "256": [134, 253, 874, 986], "user": [134, 186, 235, 253, 267, 445, 469, 538, 593, 643, 675, 691, 700, 902, 986], "logic": [134, 235, 253, 264, 442, 526, 535, 593, 623, 630, 646, 672, 675, 691, 700, 970, 986], "almost": [134, 235, 253, 675, 700, 986], "_significantly_": [134, 235, 253, 675, 700, 986], "intens": [134, 235, 253, 675, 700, 986], "becaus": [134, 145, 158, 174, 224, 235, 253, 286, 625, 675, 691, 700, 719, 814, 986], "forc": [134, 173, 235, 253, 630, 631, 675, 691, 700, 986], "materi": [134, 235, 253, 644, 675, 691, 700, 986], "parallelis": [134, 235, 253, 675, 700, 986], "optimis": [134, 235, 253, 675, 691, 700, 900, 901, 986], "achiev": [134, 235, 253, 267, 593, 675, 700, 986], "best": [134, 235, 253, 267, 593, 675, 700, 986], "tri": [134, 253], "arbitrarili": [134, 253], "rearrang": [134, 253], "transform": [134, 253, 419, 512, 514, 593], "preserv": [134, 216, 217, 253, 474, 593, 909, 969, 986], "lru_cach": [134, 253, 267, 593, 700, 986], "magnitud": [134, 253, 267, 593, 700, 986], "speedup": [134, 170, 253, 267, 593, 700, 986], "column_1": [134, 221, 253], "scalar": [134, 169, 195, 253, 468, 538, 565, 593, 853, 898, 986], "k": [135, 220, 253, 312, 315, 409, 527, 593, 607, 663, 691, 744, 747, 854, 971, 986], "intoexpr": [135, 157, 158, 159, 199, 206, 220, 230, 233, 253, 396, 443, 480, 536, 537, 541, 543, 545, 546, 550, 552, 559, 567, 570, 578, 581, 582, 586, 593, 607, 624, 625, 626, 650, 658, 663, 669, 673, 691, 834, 986], "nulls_last": [135, 206, 220, 253, 277, 479, 593, 607, 658, 663, 691, 709, 986], "smallest": [135, 220, 253, 312, 593, 607, 663, 691, 744, 986], "largest": [135, 158, 159, 173, 220, 226, 253, 356, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 527, 593, 607, 625, 626, 631, 663, 691, 796, 800, 807, 971, 986], "top": [135, 220, 253, 607, 663, 691], "top_k": [135, 253, 312, 593, 607, 691, 744, 986], "cheap": [136, 137, 253, 609, 610, 691, 699, 750, 754, 986], "deepcopi": [136, 137, 253, 609, 610, 691, 750, 754, 986], "clear": [137, 253, 610, 691, 754, 986], "properti": [138, 144, 162, 198, 201, 229, 253, 612, 615, 649, 668, 691, 994], "appl": [138, 163, 172, 191, 193, 212, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 253, 447, 455, 488, 507, 519, 593, 630, 647, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 691, 923, 942], "banana": [138, 212, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 253, 447, 455, 519, 593, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686], "pearson": [139, 253, 409, 477, 547, 572, 593, 854, 912, 986], "correl": [139, 253, 547, 572, 576, 579], "coeffici": [139, 253, 477, 593, 912, 986], "corrcoef": [139, 253], "percentil": [140, 253, 763, 986], "summari": [140, 253, 763, 986], "One": [140, 183, 187, 253, 264, 442, 593, 763, 986], "glimps": [140, 161, 253], "usd": [140, 156, 253, 994], "2020": [140, 156, 159, 253, 335, 339, 342, 345, 346, 348, 350, 355, 359, 362, 363, 366, 509, 510, 511, 626, 691, 771, 775, 778, 785, 787, 790, 795, 799, 802, 803, 806, 944, 945, 946], "null_count": [140, 143, 253, 328, 593, 691, 761, 763, 986], "266667": [140, 253], "666667": [140, 177, 227, 241, 253, 374, 593, 667, 681, 691], "std": [140, 253, 456, 593, 691, 763, 893, 986], "101514": [140, 253], "707107": [140, 253, 375, 593, 816, 986], "57735": [140, 253], "median": [140, 187, 253, 459, 593, 670, 691, 763, 889, 986], "more_column": [141, 146, 200, 223, 253, 377, 557, 593, 613, 617, 651, 665, 691], "Or": [141, 157, 158, 159, 173, 206, 226, 233, 253, 443, 480, 544, 586, 593, 613, 624, 625, 626, 631, 658, 673, 691], "subset": [143, 183, 222, 253, 614, 664, 691], "snippet": [143, 253, 614, 691], "is_nul": [143, 253, 593, 614, 691, 986], "sizeunit": [145, 253, 814, 986], "heap": [145, 253, 814, 986], "its": [145, 253, 334, 360, 367, 480, 593, 770, 800, 807, 814, 986], "bitmap": [145, 253, 814, 986], "therefor": [145, 253, 586, 814, 986], "structarrai": [145, 253, 814, 986], "constant": [145, 159, 253, 380, 593, 626, 691, 814, 820, 986], "unchang": [145, 253, 526, 593, 635, 675, 691, 814, 970, 986], "capac": [145, 204, 253, 814, 907, 986], "ffi": [145, 253, 814, 986], "kb": [145, 253, 814, 986], "mb": [145, 253, 814, 986], "gb": [145, 253, 814, 986], "tb": [145, 253, 814, 986], "revers": [145, 253, 323, 324, 325, 326, 327, 420, 447, 519, 593, 691, 757, 758, 759, 760, 986], "1_000_000": [145, 253, 814, 986], "25888898": [145, 253], "689577102661133": [145, 253], "long": [146, 179, 224, 253, 617, 639, 691], "letter": [146, 238, 247, 253, 377, 491, 557, 593, 617, 678, 687, 691, 926], "thu": [147, 253, 547, 579, 699, 986], "faster": [147, 224, 253, 267, 456, 497, 530, 593, 655, 656, 691, 699, 700, 886, 932, 986], "onlin": [147, 253, 699, 986], "rerun": [147, 253, 699, 986], "fill_valu": [148, 203, 224, 253, 471, 593, 653, 691, 905, 986], "Not": [148, 253, 402, 404, 421, 593, 619, 691], "To": [148, 253, 331, 332, 356, 382, 484, 490, 491, 499, 582, 593, 619, 691, 796, 919, 925, 926, 934], "fillnullstrategi": [149, 253, 382, 593, 620, 691, 822, 986], "matches_supertyp": [149, 253, 620, 691], "forward": [149, 173, 253, 352, 382, 388, 593, 620, 631, 691, 792, 822, 986], "consecut": [149, 253, 306, 382, 388, 483, 593, 620, 691, 822, 918, 986], "supertyp": [149, 253, 266, 593, 620, 691], "fill_nan": [149, 253, 593, 691, 986], "OR": [150, 253, 537, 621, 691], "reduct": [152, 253], "supercast": [152, 253], "parent": [152, 253], "rule": [152, 253], "arithmet": [152, 253], "zip_with": [152, 253, 986], "foo11": [152, 253], "bar22": [152, 253], "null_equ": [153, 253, 899, 986], "retriev": [154, 253, 280, 281, 516, 713, 714, 951], "return_as_str": [156, 253], "preview": [156, 253], "nice": [156, 253], "few": [156, 253], "rather": [156, 173, 253, 515, 631, 691, 950], "head": [156, 175, 209, 253, 266, 413, 593, 634, 691, 856, 957, 986], "tail": [156, 161, 253, 266, 477, 593, 691, 829, 912, 986], "more_bi": [157, 185, 206, 253, 480, 593, 624, 658, 691], "maintain_ord": [157, 185, 187, 222, 226, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 253, 261, 267, 305, 522, 529, 548, 593, 611, 616, 618, 624, 644, 654, 655, 656, 664, 674, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 691, 738, 762, 878, 972, 986], "consist": [157, 185, 253, 509, 624, 691, 944], "agg": [157, 158, 159, 253, 261, 267, 383, 385, 479, 480, 522, 534, 548, 593, 611, 616, 618, 624, 625, 626, 644, 654, 691], "index_column": [158, 159, 253, 625, 626, 691], "include_boundari": [158, 253, 625, 691], "start_bi": [158, 253, 625, 691], "startbi": [158, 253, 625, 691], "dynamicgroupbi": [158, 253], "groupbi": [158, 159, 183, 253, 261, 267, 286, 328, 383, 385, 443, 479, 480, 522, 534, 538, 548, 593, 611, 616, 618, 625, 626, 644, 654, 691, 719, 761, 986], "member": [158, 253, 625, 691, 841, 986], "seen": [158, 253, 306, 388, 593, 625, 691], "roll": [158, 159, 253, 352, 353, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 545, 576, 577, 593, 625, 626, 691, 792, 793, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 986], "slot": [158, 253, 285, 328, 329, 593, 625, 691, 718, 761, 764, 986], "1n": [158, 159, 173, 226, 253, 356, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 626, 631, 691, 796, 800, 807], "nanosecond": [158, 159, 173, 226, 253, 356, 360, 361, 367, 457, 458, 459, 460, 461, 463, 464, 465, 555, 593, 625, 626, 631, 691, 796, 800, 801, 807], "1u": [158, 159, 173, 226, 253, 356, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 626, 631, 691, 796, 800, 807], "microsecond": [158, 159, 173, 226, 253, 356, 360, 361, 367, 457, 458, 459, 460, 461, 463, 464, 465, 554, 555, 584, 593, 625, 626, 631, 644, 691, 796, 800, 807], "1m": [158, 159, 173, 226, 253, 345, 346, 348, 355, 356, 360, 362, 367, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 626, 631, 691, 785, 787, 795, 796, 800, 802, 807], "millisecond": [158, 159, 173, 226, 253, 356, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 555, 593, 625, 626, 631, 691, 796, 800, 807], "1w": [158, 159, 173, 226, 253, 356, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 626, 631, 691, 796, 800, 807], "week": [158, 159, 173, 226, 253, 356, 360, 367, 369, 457, 458, 459, 460, 461, 463, 464, 465, 555, 593, 625, 626, 631, 691, 796, 800, 807, 809], "1y": [158, 159, 173, 226, 253, 343, 356, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 626, 631, 691, 779, 796, 800, 807, 811], "1i": [158, 159, 173, 226, 253, 356, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 626, 631, 691, 796], "suffix": [158, 159, 172, 173, 199, 226, 230, 233, 253, 262, 310, 356, 360, 367, 402, 404, 405, 406, 420, 443, 447, 455, 457, 458, 459, 460, 461, 463, 464, 465, 488, 593, 625, 626, 630, 631, 650, 669, 670, 673, 691, 742, 796, 800, 807, 923], "_satur": [158, 159, 173, 226, 253, 356, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 626, 631, 691, 796, 800, 807], "satur": [158, 159, 173, 226, 253, 356, 360, 367, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 626, 631, 691, 796, 800, 807], "10i": [158, 159, 253, 625, 626, 691], "ascend": [158, 159, 253, 625, 626, 691], "often": [158, 159, 253, 284, 453, 593, 625, 626, 691, 717], "dynam": [158, 253, 304, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 691, 737], "matter": [158, 159, 170, 196, 213, 253, 625, 626, 691], "_lower_bound": [158, 253, 625, 691], "_upper_bound": [158, 253, 625, 691], "impact": [158, 253, 625, 691], "harder": [158, 253, 625, 691], "inclus": [158, 159, 253, 396, 457, 458, 459, 460, 461, 463, 464, 465, 504, 505, 593, 625, 626, 691, 834, 939, 940, 986], "datapoint": [158, 253, 625, 691], "mondai": [158, 253, 369, 625, 691, 809], "tuesdai": [158, 253, 625, 691], "wednesdai": [158, 253, 625, 691], "thursdai": [158, 253, 625, 691], "fridai": [158, 253, 625, 691], "saturdai": [158, 253, 625, 691], "sundai": [158, 253, 369, 625, 691, 809], "date_rang": [158, 226, 253, 333, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 365, 367, 368, 369, 370, 371, 625, 691, 769, 771, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 805, 807, 808, 809, 810, 811], "30m": [158, 253, 360, 367, 625, 691, 800, 807], "time_min": [158, 253, 625, 691], "time_max": [158, 253, 625, 691], "boundari": [158, 253, 317, 318, 319, 593, 625, 691, 751, 752, 753, 830, 986], "time_count": [158, 253, 625, 691], "_lower_boundari": [158, 253, 625, 691], "_upper_boundari": [158, 253, 625, 691], "lower_bound": [158, 253, 317, 319, 396, 593, 625, 691, 751, 753, 834, 974, 986], "upper_bound": [158, 253, 304, 317, 318, 396, 593, 625, 691, 751, 752, 834, 860, 986], "time_agg_list": [158, 253, 625, 691], "arang": [158, 224, 235, 253, 625, 675, 691], "2i": [158, 253, 625, 691], "3i": [158, 253, 625, 691], "a_agg_list": [158, 253, 625, 691], "rollinggroupbi": [159, 253], "dynamic_groupbi": [159, 253, 626, 691], "groupby_dynam": [159, 253, 626, 691], "48": [159, 253, 626, 691], "43": [159, 253, 327, 593, 626, 691], "strptime": [159, 253, 359, 626, 691, 799], "set_sort": [159, 173, 226, 253, 593, 626, 631, 691, 986], "2d": [159, 216, 253, 565, 626, 691, 774], "sum_a": [159, 253, 626, 691], "min_a": [159, 253, 626, 691], "max_a": [159, 253, 626, 691], "seed": [160, 197, 253, 391, 450, 467, 473, 593, 828, 880, 897, 908, 986], "seed_1": [160, 253, 391, 593, 828, 986], "seed_2": [160, 253, 391, 593, 828, 986], "seed_3": [160, 253, 391, 593, 828, 986], "hash": [160, 253, 593, 986], "u64": [160, 253, 391, 452, 593, 644, 691, 828, 986], "10783150408545073287": [160, 253], "1438741209321515184": [160, 253], "10047419486152048166": [160, 253], "2047317070637311557": [160, 253], "ab": [161, 175, 209, 230, 253, 516, 517, 593, 669, 691, 829, 856, 957, 986], "grown": [163, 253], "baz": [164, 165, 187, 223, 253, 504, 506, 629, 665, 691, 941], "intermedi": [165, 253, 629, 691, 833, 986, 994], "linear": [165, 189, 245, 253, 282, 395, 424, 449, 461, 545, 546, 573, 593, 629, 645, 685, 691, 715, 833, 879, 891, 986], "mask": [166, 168, 253, 283, 307, 308, 397, 399, 407, 484, 486, 593, 716, 739, 740, 823, 834, 836, 839, 851, 875, 876, 900, 919, 921, 978, 986], "visual": [166, 168, 253], "buffer_s": [170, 253], "intern": [170, 253], "veri": [170, 221, 253, 267, 593, 610, 691, 754, 986], "fit": [170, 204, 224, 253, 472, 593, 906, 907, 986], "signific": [170, 253, 267, 593], "4x": [170, 253], "materialis": [170, 171, 195, 196, 253], "iter_row": [171, 195, 196, 253], "17_500": [171, 253], "klmnoopqrstuvwxyz": [171, 253], "__name__": [171, 253], "7500": [171, 253], "15_000": [171, 253], "record_batch": [171, 253], "to_arrow": [171, 253, 986], "to_batch": [171, 253], "date32": [171, 253], "large_str": [171, 211, 217, 253], "15000": [171, 253], "2500": [171, 253], "joinstrategi": [172, 253, 630, 691], "left_on": [172, 173, 253, 630, 631, 691], "right_on": [172, 173, 253, 630, 631, 691], "_right": [172, 173, 253, 630, 631, 691], "semi": [172, 253, 630, 691], "anti": [172, 253, 630, 691, 900, 901, 986], "cross": [172, 253, 630, 691], "join_asof": [172, 253, 630, 691], "stringcach": [172, 253, 604], "other_df": [172, 253], "by_left": [173, 253, 631, 691], "by_right": [173, 253, 631, 691], "asofjoinstrategi": [173, 253, 631, 691], "allow_parallel": [173, 253, 630, 631, 691], "force_parallel": [173, 253, 630, 631, 691], "asof": [173, 253, 631, 691], "asof_join": [173, 253], "search": [173, 253, 631, 691], "greater": [173, 253, 389, 390, 477, 506, 593, 631, 691, 912, 941, 986], "distanc": [173, 253, 631, 691, 830, 986], "plan": [173, 174, 253, 608, 616, 623, 630, 631, 646, 654, 672, 691], "gdp": [173, 253, 631, 691], "2016": [173, 253, 631, 691], "2017": [173, 253, 631, 691], "2018": [173, 253, 359, 631, 691, 799], "2019": [173, 253, 631, 691], "record": [173, 216, 253, 631, 691], "jan": [173, 253, 631, 691], "1st": [173, 253, 631, 691], "4164": [173, 253, 631, 691], "4411": [173, 253, 631, 691], "4566": [173, 253, 631, 691], "4696": [173, 253, 631, 691], "popul": [173, 253, 631, 691], "12th": [173, 253, 631, 691], "82": [173, 253, 631, 691], "66": [173, 253, 535, 593, 631, 691, 891, 986], "83": [173, 253, 631, 691], "52": [173, 230, 253, 466, 593, 631, 669, 691], "request": [174, 253], "describe_plan": [174, 253, 691], "unoptim": [174, 253, 691], "describe_optimized_plan": [174, 253, 691], "show_graph": [174, 253, 691], "un": [174, 253], "graphviz": [174, 253, 654, 691], "axi": [176, 177, 179, 181, 208, 253, 639, 691], "null_strategi": [177, 208, 253], "nullstrategi": [177, 208, 253], "spam": [177, 253, 491, 926], "id_var": [179, 253, 639, 691], "value_var": [179, 253, 639, 691], "variable_nam": [179, 253, 639, 691], "value_nam": [179, 253, 639, 691], "unpivot": [179, 253, 639, 691], "leav": [179, 253, 304, 639, 691], "massag": [179, 253, 639, 691], "measur": [179, 253, 639, 691], "merg": [180, 253, 640, 691], "caller": [180, 253, 304, 635, 640, 675, 691], "respons": [180, 253, 640, 691], "what": [183, 253, 968, 977, 986], "pack": [183, 253], "expr_unique_subset": [183, 253], "df_nuniqu": [183, 253], "df_agg_nuniqu": [183, 253], "offer": [186, 253, 445, 593, 643, 691], "fulli": [186, 197, 253], "cast_str_to_int": [186, 253, 643, 691], "col_nam": [186, 253, 420, 593, 643, 691], "tdf": [186, 253, 643, 691], "aggregate_funct": [187, 253], "pivotagg": [187, 253], "nodefault": [187, 253, 509, 944], "sort_column": [187, 253], "predefin": [187, 253], "predict": [187, 190, 226, 253], "transpos": [187, 253], "discoveri": [187, 253], "col1": [187, 224, 253, 691, 994], "col2": [187, 224, 253, 691, 994], "col3": [187, 253, 994], "tanh": [187, 253, 593, 986], "998347": [187, 253], "964028": [187, 253], "999954": [187, 253], "interpol": [189, 245, 253, 382, 424, 449, 461, 573, 593, 645, 685, 691, 879, 891, 986], "rollinginterpolationmethod": [189, 245, 253, 449, 461, 573, 593, 645, 685, 691, 879, 891, 986], "midpoint": [189, 245, 253, 449, 461, 573, 593, 645, 685, 691, 879, 891, 986], "old": [191, 253, 647, 691], "by_pred": [195, 253], "accord": [195, 253, 421, 593, 780], "never": [195, 253], "mutual": [195, 253], "exclus": [195, 253, 535, 593], "addition": [195, 253], "clariti": [195, 253], "anyth": [195, 253, 491, 926], "toomanyrowsreturnederror": [195, 253, 604], "norowsreturnederror": [195, 253, 604], "inherit": [195, 253], "rowserror": [195, 253, 604], "with_replac": [197, 253, 467, 593, 897, 986], "shuffl": [197, 235, 253, 467, 593, 675, 897, 986], "modul": [197, 253, 467, 473, 592, 593, 897, 908, 986], "more_expr": [199, 230, 253, 443, 536, 537, 541, 543, 545, 546, 552, 567, 570, 578, 581, 582, 593, 650, 669, 691], "named_expr": [199, 230, 253, 578, 581, 650, 669, 691], "threshold": [199, 253, 650, 691], "set_auto_structifi": [199, 230, 253, 650, 669, 691], "auto_structifi": [199, 230, 253, 650, 669, 691], "is_odd": [199, 253, 650, 691], "_is_odd": [199, 253, 650, 691], "shift_and_fil": [202, 253, 593, 691, 986], "shift": [203, 253, 285, 329, 444, 471, 545, 593, 653, 691, 718, 764, 874, 905, 986], "shrink": [204, 253, 472, 593, 906, 907, 986], "hold": [204, 253], "ddof": [207, 227, 253, 482, 533, 547, 572, 576, 577, 579, 580, 585, 593, 659, 667, 691, 916, 976, 986], "deviat": [207, 253, 375, 463, 482, 580, 593, 659, 691, 816, 916, 986], "degre": [207, 227, 253, 482, 533, 547, 572, 576, 577, 579, 580, 585, 593, 659, 667, 691, 916, 976, 986], "freedom": [207, 227, 253, 482, 533, 547, 572, 576, 577, 579, 580, 585, 593, 659, 667, 691, 916, 976, 986], "divisor": [207, 227, 253, 482, 533, 547, 572, 576, 577, 579, 580, 585, 593, 659, 667, 691, 916, 976, 986], "816497": [207, 253], "21": [208, 253, 561], "16a": [208, 253], "27b": [208, 253], "38c": [208, 253], "nth": [210, 253, 506, 523, 593, 662, 691, 941, 959, 986], "mostli": [211, 253, 383, 593], "categoricaltyp": [211, 253], "as_seri": [212, 253], "fruit": [212, 253, 447, 455, 488, 507, 519, 593, 923, 942], "car": [212, 253, 447, 455, 519, 593], "beetl": [212, 253, 447, 455, 519, 593], "audi": [212, 253, 447, 455, 519, 593], "300": [212, 253, 887, 888, 890, 986], "instantiat": [215, 253, 966, 986], "from_repr": [215, 253, 966, 986], "df_from_str_repr": [215, 253], "eval": [215, 253, 556, 966, 986], "correspond": [216, 253, 344, 450, 593, 780, 880, 986], "re": [216, 253, 352, 353, 792, 793], "ll": [216, 253], "u1": [216, 253], "f4": [216, 253], "view": [216, 253, 968, 986], "recarrai": [216, 253], "rec": [216, 253], "use_pyarrow_extension_arrai": [217, 253, 969, 986], "trigger": [217, 253, 969, 986], "sent": [217, 253, 968, 969, 986], "pandas_df1": [217, 253], "pandas_df2": [217, 253], "pandas_df2_pa": [217, 253], "na": [217, 253, 969, 986], "get_column": [218, 253, 582], "four": [219, 253], "five": [219, 253, 994], "bottom_k": [220, 253, 527, 593, 663, 691, 971, 986], "include_head": [221, 253], "header_nam": [221, 253], "column_nam": [221, 253], "perhap": [221, 253], "column_2": [221, 253], "name_gener": [221, 253], "base_nam": [221, 253], "my_column_": [221, 253], "my_column_0": [221, 253], "my_column_1": [221, 253], "my_column_2": [221, 253], "uniquekeepstrategi": [222, 253, 664, 691], "kept": [222, 253, 664, 691], "decompos": [223, 253, 665, 691], "t_a": [223, 253, 665, 691], "t_b": [223, 253, 665, 691], "t_c": [223, 253, 665, 691], "t_d": [223, 253, 665, 691], "womp": [223, 253, 665, 691], "t_": [223, 253, 665, 691], "t_struct": [223, 253, 665, 691], "step": [224, 253, 540], "unstackdirect": [224, 253], "much": [224, 253, 303, 328, 593, 736, 761, 986], "pivot": [224, 253], "phase": [224, 253], "subject": [224, 253], "ascii_uppercas": [224, 253], "h": [224, 253, 260, 363, 366, 472, 509, 511, 513, 593, 944, 946, 948], "col1_0": [224, 253], "col1_1": [224, 253], "col1_2": [224, 253], "col2_0": [224, 253], "col2_1": [224, 253], "col2_2": [224, 253], "syntact": [225, 253, 557, 558, 562, 573, 578, 666, 691, 915, 986], "sugar": [225, 253, 557, 558, 562, 573, 578, 666, 691, 915, 986], "coalesc": [225, 253, 509, 666, 691, 944], "400": [225, 253, 666, 691, 887, 888, 890, 986], "600": [225, 253, 666, 691], "700": [225, 253, 666, 691], "new_df": [225, 253, 666, 691], "time_column": [226, 253], "frequenc": [226, 253], "forward_fil": [226, 253, 324, 327, 593], "varianc": [227, 253, 376, 409, 465, 533, 585, 593, 667, 691, 817, 854, 895, 976, 986], "grow": [228, 253], "is_not": [230, 253, 593, 669, 691], "not_c": [230, 253, 669, 691], "diff": [230, 253, 339, 342, 346, 348, 350, 355, 362, 593, 669, 691, 775, 778, 785, 787, 790, 795, 802, 986], "_diff": [230, 253, 669, 691], "row_nr": [231, 253, 421, 593, 671, 691, 901, 986], "more_agg": [233, 673], "named_agg": [233, 673], "_sum": [233, 673], "_mean_squar": [233, 673], "b_sum": [233, 673], "c_mean_squar": [233, 673], "sub": [235, 593], "triangl": [235, 675], "group_df": [235, 675], "deem": [236, 322, 548, 593, 676], "nr": [238, 247, 678, 687], "maxim": [240, 275, 593, 680, 707, 986], "833333": [241, 681], "minim": [243, 276, 281, 472, 480, 593, 683, 708, 714, 865, 906, 986], "overview": [253, 593, 604, 691, 986, 994], "public": [253, 593, 604, 691, 986], "frameinittyp": [253, 691], "variou": [253, 593, 691, 986], "entri": [253, 691], "prevent": [253, 326, 327, 408, 520, 593, 691, 759, 760, 956, 986], "come": [253, 352, 353, 409, 593, 605, 690, 691, 792, 793, 854, 986], "behavior": [253, 267, 303, 538, 593, 736], "mydatafram": 253, "notic": [253, 691, 986], "df4": 253, "df5": 253, "df6": 253, "corr": [253, 572, 579], "drop_in_plac": 253, "drop_nul": [253, 331, 593, 691, 986], "estimated_s": [253, 986], "explod": [253, 385, 454, 593, 691, 884, 986], "find_idx_by_nam": 253, "fold": [253, 430, 543, 550, 551, 574], "frame_equ": [253, 360, 367], "groupby_rol": [253, 457, 458, 459, 460, 461, 463, 464, 465, 593, 625, 691], "hash_row": 253, "hstack": 253, "insert_at_idx": 253, "is_dupl": [253, 593, 986], "is_empti": [253, 986], "is_uniqu": [253, 593, 986], "iter_slic": 253, "melt": [253, 691], "merge_sort": [253, 691], "n_uniqu": [253, 593, 986], "pipe": [253, 593, 691], "quantil": [253, 461, 593, 691, 878, 891, 986], "replace_at_idx": 253, "shrink_to_fit": [253, 986], "take_everi": [253, 593, 691, 986], "to_dict": 253, "to_numpi": [253, 419, 593, 986], "to_panda": [253, 986], "to_struct": [253, 491], "unnest": [253, 491, 505, 506, 517, 691, 737, 940, 941], "unstack": 253, "updat": [253, 691], "upsampl": 253, "write_avro": 253, "write_databas": 253, "write_excel": 253, "write_json": [253, 646, 691], "write_parquet": 253, "cumprod": [260, 593, 986], "ghi": [260, 491, 593, 926], "94": [261, 593], "map_alia": [262, 447, 519, 593], "confus": [263, 402, 404, 593], "tt": [263, 593], "tf": [263, 265, 593], "ff": [263, 265, 593], "upcast": [266, 593], "skip_nul": [267, 593, 700, 986], "pass_nam": [267, 593], "applystrategi": [267, 593], "thread_loc": [267, 593], "unknown": [267, 421, 490, 565, 593, 925], "stage": [267, 593], "speed": [267, 593, 656, 691], "code": [267, 469, 593, 633, 691, 902, 986], "amount": [267, 593], "releas": [267, 593, 994], "gil": [267, 593], "discourag": [267, 593], "loop": [267, 593], "a_times_2": [267, 593], "approx": [268, 539, 593, 691], "hyperloglog": [268, 539, 593, 691], "algorithm": [268, 539, 593, 691], "cardin": [268, 539, 593, 691], "invers": [269, 270, 271, 272, 273, 274, 593, 701, 702, 703, 704, 705, 706, 986], "cosin": [269, 270, 320, 321, 419, 593, 701, 702, 755, 756, 986], "570796": [269, 271, 593, 701, 703, 986], "hyperbol": [270, 272, 274, 321, 476, 525, 593, 702, 704, 706, 756, 911, 961, 986], "sine": [271, 272, 419, 475, 476, 593, 703, 704, 910, 911, 986], "881374": [272, 593, 704, 986], "tangent": [273, 274, 524, 525, 593, 705, 706, 960, 961, 986], "785398": [273, 593, 705, 986], "arg_wher": [278, 593], "sublist": [280, 281, 283, 285, 288, 289, 290, 291, 292, 299, 302, 303, 304, 713, 714, 716, 718, 721, 722, 723, 724, 725, 732, 735, 736, 737, 841, 986], "membership": [283, 716], "listcol": 284, "number_of_two": 284, "null_behavior": [285, 329, 593, 718, 764, 986], "nullbehavior": [285, 329, 593, 718, 764, 986], "th": [285, 329, 477, 593, 718, 764, 912, 986], "blindli": [286, 719], "worth": [286, 719], "enough": [286, 477, 593, 719, 912, 986], "concat_list": [286, 556, 719], "rank": [286, 547, 556, 579, 593, 719, 986], "exprnamespac": 287, "reshap": [287, 593, 720, 986], "flat": [287, 454, 593, 720, 884, 986], "taken": [299, 503, 522, 593, 732, 938], "null_on_oob": [303, 736], "cheaper": [303, 736], "n_field_strategi": [304, 737], "tostructstrategi": [304, 737], "first_non_nul": [304, 737], "max_width": [304, 737], "field_0": [304, 737], "field_1": [304, 737], "field_n": [304, 737], "know": [304, 497, 932, 968, 977, 986], "incorrectli": 304, "pre": 304, "n0": 304, "n1": 304, "maintain": [305, 468, 529, 593, 655, 656, 691, 738, 898, 972, 986], "substr": [307, 310, 311, 484, 488, 499, 500, 504, 505, 506, 507, 739, 742, 743, 919, 923, 934, 935, 939, 940, 941, 942], "transferencod": [308, 309, 486, 487, 740, 741, 921, 922], "strict": [308, 314, 484, 486, 498, 509, 510, 511, 513, 593, 740, 745, 899, 919, 921, 933, 944, 945, 946, 948, 986], "hex": [308, 309, 486, 487, 498, 740, 741, 921, 922, 933], "base64": [308, 309, 486, 487, 740, 741, 921, 922], "complex": [312, 328, 527, 593, 744, 761, 971, 986], "frac": [312, 374, 375, 376, 477, 527, 593, 744, 815, 816, 817, 912, 971, 986], "hurt": [313, 593], "lot": [313, 593], "content": [313, 473, 532, 593, 908, 986], "problem": [313, 593], "due": [314, 359, 593, 745, 799, 986], "overflow": [314, 326, 327, 498, 520, 593, 745, 759, 760, 933, 956, 986], "categoricalord": [315, 747], "lexic": [315, 747], "foo_clip": [317, 318, 319, 593], "clip": [318, 319, 593, 752, 753, 986], "543081": [321, 593, 756, 986], "cumul": [323, 324, 325, 326, 327, 550, 551, 552, 593, 757, 758, 759, 760, 986], "a_revers": [323, 324, 325, 326, 327, 420, 455, 519, 593], "value_cummax": [324, 593], "value_cummax_all_fil": [324, 593], "value_cumsum": [327, 593], "value_cumsum_all_fil": [327, 593], "min_period": [328, 374, 375, 376, 456, 457, 458, 459, 460, 461, 463, 464, 465, 576, 577, 593, 761, 815, 816, 817, 886, 887, 888, 889, 890, 891, 893, 894, 895, 986], "slide": [328, 593, 761, 986], "realli": [328, 593, 761, 986], "visit": [328, 593, 761, 986], "drop_nan": [332, 593, 986], "lose": [333, 769], "2001": [333, 338, 340, 341, 343, 344, 349, 351, 356, 357, 358, 360, 361, 365, 367, 368, 369, 370, 371, 509, 769, 774, 776, 777, 779, 781, 782, 783, 784, 786, 788, 789, 791, 794, 796, 797, 798, 800, 801, 805, 807, 808, 809, 810, 811, 944], "time_unit_m": [333, 769], "time_unit_n": [333, 769], "naiv": [334, 770], "compon": [334, 361, 509, 511, 555, 770, 801, 944, 946], "resolv": 334, "456000": [334, 770], "101000": 334, "456": [334, 770, 965, 986], "101": [334, 498, 933, 994], "d1": 334, "d2": 334, "d3": 334, "utc": [335, 359, 509, 511, 771, 799, 944, 946], "europ": [335, 359, 771, 799], "london": [335, 359, 771, 799], "gmt": [335, 359, 771, 799], "bst": [335, 359, 771, 799], "weekdai": [338, 357], "day_of_month": [338, 357, 369], "ordinal_dai": [338, 369], "day_of_year": [338, 357, 369], "days_diff": 339, "epochtimeunit": [340, 561, 776], "unix": [340, 561, 776], "epoch_n": [340, 776], "epoch_": [340, 776], "978307200000000": [340, 365, 776, 805], "978307200": [340, 776], "978393600000000": [340, 365, 776, 805], "978393600": [340, 776], "978480000000000": [340, 365, 776, 805], "978480000": [340, 776], "hours_diff": 342, "leap": [343, 356, 779, 796], "2000": [343, 345, 352, 353, 356, 779, 792, 793, 796], "2002": [343, 344, 356, 358, 371, 779, 796, 811], "iso": [344, 368, 369, 780, 808, 809], "2006": [344, 356, 796], "180": [344, 358, 371], "2004": [344, 356, 796], "2005": [344, 356, 796], "1_001": [345, 346, 348, 355], "002": [345, 346, 348, 355, 555, 785, 787, 795], "003": [345, 346, 348, 355], "3000": 345, "997": [345, 346, 348, 355], "997000": 345, "998": [345, 346, 348, 355], "998000": 345, "999": [345, 346, 348, 355, 994], "999000": 345, "microseconds_diff": 346, "milliseconds_diff": 348, "minutes_diff": 350, "1440": [350, 790], "think": [352, 353, 792, 793], "vectoris": [352, 353, 792, 793], "tseri": [352, 353, 792, 793], "monthend": [352, 792], "rollforward": [352, 792], "monthbegin": [353, 793], "rollback": [353, 793], "nanoseconds_diff": 355, "1000000": [355, 515, 795], "minu": [356, 796], "dictat": [356, 796], "date_plus_1i": [356, 796], "1y2mo": [356, 796], "date_min": 356, "1998": [356, 796], "1999": [356, 796], "2003": [356, 561, 796], "ordin": [357, 450, 593, 797, 880, 986], "366": [357, 797], "use_earliest": [359, 799], "convert_time_zon": [359, 799], "ambigu": [359, 799], "sai": [359, 799], "daylight": [359, 799], "earliest": [359, 799], "london_timezon": [359, 799], "amsterdam": [359, 799], "london_to_amsterdam": [359, 799], "cet": [359, 799], "cest": [359, 799], "dst": [359, 799], "ts_local": [359, 799], "brussel": [359, 799], "half": [360, 374, 375, 376, 593, 800, 815, 816, 817, 986], "225": [360, 367], "to_fram": [360, 367, 509, 900, 901, 940, 941, 944, 986], "10m": [360, 367, 800, 807], "milli": [361, 801], "micro": [361, 801], "456789": 361, "654321": 361, "111110": 361, "765431": 361, "sec": [361, 994], "11111": 361, "seconds_diff": 362, "to_str": [363, 803], "datetime_str": [363, 366], "timestamp_n": [365, 805], "timestamp_m": 365, "978307200000": 365, "978393600000": 365, "978480000000": 365, "strftime": [366, 806], "1mo_satur": 367, "53": [368, 808], "incorrect": [370, 469, 593, 675, 810, 902, 986], "time_unit_u": [370, 810], "32971": [370, 810], "32974": [370, 810], "32976": [370, 810], "718281828459045": [372, 414, 593, 813, 857, 986], "pk": [372, 593, 813, 986], "459148": [372, 593], "754888": [372, 593], "span": [374, 375, 376, 593, 815, 816, 817, 986], "half_lif": [374, 375, 376, 593, 815, 816, 817, 986], "adjust": [374, 375, 376, 477, 593, 815, 816, 817, 912, 986], "ignore_nul": [374, 375, 376, 593, 815, 816, 817, 977, 986], "exponenti": [374, 375, 376, 378, 446, 593, 815, 816, 817, 818, 986], "weight": [374, 375, 376, 456, 457, 458, 459, 460, 461, 463, 464, 465, 477, 593, 815, 816, 817, 886, 887, 888, 889, 890, 891, 893, 894, 895, 912, 986], "decai": [374, 375, 376, 593, 815, 816, 817, 986], "term": [374, 375, 376, 494, 497, 593, 815, 816, 817, 929, 932, 986], "mass": [374, 375, 376, 593, 815, 816, 817, 986], "gamma": [374, 375, 376, 593, 815, 816, 817, 986], "foral": [374, 375, 376, 593, 815, 816, 817, 986], "geq": [374, 375, 376, 593, 815, 816, 817, 986], "theta": [374, 375, 376, 593, 815, 816, 817, 986], "life": [374, 375, 376, 593, 815, 816, 817, 986], "exp": [374, 375, 376, 593, 815, 816, 817, 986], "ln": [374, 375, 376, 593, 815, 816, 817, 986], "smooth": [374, 375, 376, 593, 815, 816, 817, 986], "factor": [374, 375, 376, 526, 593, 815, 816, 817, 970, 986], "leq": [374, 375, 376, 593, 815, 816, 817, 986], "begin": [374, 375, 376, 490, 593, 815, 816, 817, 925, 986], "imbal": [374, 375, 376, 593, 815, 816, 817, 986], "ew": [374, 375, 376, 593, 815, 816, 817, 986], "w_i": [374, 375, 376, 593, 815, 816, 817, 986], "recurs": [374, 375, 376, 593, 815, 816, 817, 986], "y_0": [374, 375, 376, 593, 815, 816, 817, 986], "x_0": [374, 375, 376, 593, 815, 816, 817, 986], "y_t": [374, 375, 376, 593, 815, 816, 817, 986], "y_": [374, 375, 376, 593, 815, 816, 817, 986], "x_t": [374, 375, 376, 593, 815, 816, 817, 986], "observ": [374, 375, 376, 593, 815, 816, 817, 986], "x_2": [374, 375, 376, 593, 815, 816, 817, 986], "428571": [374, 593], "bia": [375, 376, 409, 462, 477, 593, 816, 817, 854, 892, 912, 986], "unbias": [375, 376, 593, 816, 817, 986], "963624": [375, 593, 816, 986], "928571": [376, 593, 817, 986], "wildcard": [377, 544, 550, 551, 559, 574, 593], "regex": [377, 427, 484, 485, 488, 490, 491, 499, 500, 507, 557, 582, 593, 919, 920, 923, 925, 926, 934, 935, 942], "aa": [377, 484, 557, 593, 919], "ba": [377, 557, 593], "cc": [377, 557, 593], "718282": [378, 593], "389056": [378, 593], "54": [378, 593, 994], "59815": [378, 593], "expand": [379, 426, 427, 453, 593, 819, 986], "exprlistnamespac": [379, 385, 454, 593], "exprstringnamespac": [379, 593], "pythonliter": [380, 567, 570, 593, 820, 862, 865, 986], "extrem": [380, 593, 820, 986], "group_col": [383, 534, 593], "g1": [383, 534, 593], "g2": [383, 534, 593], "lt": [383, 534, 593, 986], "gte": [383, 534, 593], "divis": [387, 528, 593], "truediv": [387, 593], "9774092659964970114": [391, 593], "13614470193936745724": [391, 593], "1101441246220388612": [391, 593], "11638928888656214026": [391, 593], "13382926553367784577": [391, 593], "cumsum": [394, 518, 593, 628, 691, 853, 986], "interpolationmethod": [395, 593, 833, 986], "regrid": [395, 593], "grid": [395, 593], "df_original_grid": [395, 593], "grid_point": [395, 593], "df_new_grid": [395, 593], "conflat": [396, 593], "finit": [398, 528, 547, 579, 593, 838, 986], "primit": [400, 593, 968, 986], "optional_memb": [400, 593, 841, 986], "infinit": [401, 528, 593, 842, 986], "_isnan": [402, 593], "b_isnan": [402, 593], "negat": [403, 593], "_is_not_nan": [404, 593], "b_is_not_nan": [404, 593], "_not_nul": [405, 593], "a_not_nul": [405, 593], "b_not_nul": [405, 593], "_isnul": [406, 593], "a_isnul": [406, 593], "b_isnul": [406, 593], "undo": [408, 432, 593], "duplicateerror": [408, 593, 604], "occurr": [408, 593, 830, 986], "333333": [408, 465, 593, 874, 895, 986], "fisher": [409, 477, 593, 854, 912, 986], "fourth": [409, 593, 854, 986], "subtract": [409, 518, 593, 854, 986], "distribut": [409, 477, 593, 854, 912, 986], "elimin": [409, 593, 854, 986], "bias": [409, 477, 593, 854, 912, 986], "scipi": [409, 477, 593, 854, 912, 986], "stat": [409, 477, 593, 854, 912, 986], "153061": [409, 593], "logarithm": [414, 415, 416, 593, 857, 858, 859, 986], "584963": [414, 593], "30103": [415, 593], "60206": [415, 593], "natur": [416, 593, 859, 986], "plu": [416, 593, 859, 986], "693147": [416, 593], "098612": [416, 593], "386294": [416, 593], "lowest": [417, 593], "9223372036854775808": [417, 593], "agg_list": [419, 593], "elementwis": [419, 456, 457, 458, 459, 460, 461, 463, 464, 465, 593, 886, 887, 888, 889, 890, 891, 893, 894, 895, 986], "parti": [419, 593], "book": [419, 593], "map_dict": [419, 593, 986], "argmax": [419, 593], "_revers": [420, 455, 519, 593], "rsplit": [420, 593], "b_revers": [420, 455, 519, 593], "remap": [421, 593, 861, 986], "lookup": [421, 593, 861, 986], "country_code_dict": [421, 593], "ca": [421, 593], "canada": [421, 593], "de": [421, 593], "germani": [421, 593], "fr": [421, 593], "franc": [421, 593], "country_cod": [421, 593], "rest": [421, 593], "exprmetanamespac": [425, 428], "computeerror": [429, 498, 604, 933], "keep_nam": [432, 593], "modulu": [434, 593], "xlog2": [436, 446, 593], "poison": [438, 439, 593, 870, 871, 986], "nanmax": [438, 439, 593, 870, 871, 986], "wherea": [438, 439, 593, 627, 634, 691, 870, 871, 986], "inequ": [440, 593], "outcom": [443, 593], "_max": [443, 593], "c_max": [443, 593], "_min": [443, 593], "c_min": [443, 593], "percent": [444, 593, 874, 986], "090909": [444, 593], "extract_numb": [445, 593], "digit": [445, 466, 491, 515, 593, 896, 920, 926, 950, 986, 994], "r": [445, 485, 489, 490, 491, 499, 593, 920, 924, 925, 926, 934], "scale_negative_even": [445, 593], "expon": [446, 593, 986], "reverse_": [447, 593], "reverse_a": [447, 593], "reverse_fruit": [447, 593], "reverse_b": [447, 593], "reverse_car": [447, 593], "rankmethod": [450, 593, 880, 986], "ti": [450, 593, 880, 986], "competit": [450, 593, 880, 986], "highest": [450, 531, 547, 579, 593, 691, 880, 986], "64bit": [452, 593, 882, 986], "safe": [452, 509, 593, 882, 944, 968, 986], "coerc": [453, 593], "fruits_revers": [455, 519, 593], "cars_revers": [455, 519, 593], "window_s": [456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 576, 577, 593, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 986], "rolling_min": [456, 593, 886, 986], "rolling_max": [456, 593, 886, 986], "rolling_mean": [456, 593, 886, 986], "rolling_sum": [456, 593, 886, 986], "multipli": [456, 457, 458, 459, 460, 461, 463, 464, 465, 593, 886, 887, 888, 889, 890, 891, 893, 894, 895, 986], "358899": [456, 593], "041452": [456, 593], "567764": [456, 593], "travers": [457, 458, 460, 463, 464, 465, 593, 887, 888, 890, 893, 894, 895, 986], "vector": [457, 458, 460, 463, 464, 465, 593, 887, 888, 890, 893, 894, 895, 986], "5h": [457, 458, 459, 460, 461, 463, 464, 465, 593], "skew": [462, 593, 892, 986], "527525": [463, 593, 893, 986], "searchsortedsid": [468, 593, 898, 986], "leftmost": [468, 593, 898, 986], "rightmost": [468, 593, 898, 986], "six": [468, 593], "downstream": [469, 593, 902, 986], "extrema": [472, 593, 906, 986], "112": [472, 593, 994], "129": [472, 593], "i8": [472, 593, 764, 885, 974, 986], "8589934592": [472, 593], "1073741824": [472, 593], "175201": [476, 593, 911, 986], "about": [477, 484, 490, 491, 499, 593, 912, 919, 925, 926, 934, 986, 994], "unimod": [477, 593, 912, 986], "skewtest": [477, 593, 912, 986], "speak": [477, 593, 912, 986], "g_1": [477, 593, 912, 986], "m_3": [477, 593, 912, 986], "m_2": [477, 593, 912, 986], "m_i": [477, 593, 912, 986], "sum_": [477, 593, 912, 986], "texttt": [477, 593, 912, 986], "k_3": [477, 593, 912, 986], "k_2": [477, 593, 912, 986], "sqrt": [477, 593, 912, 986], "343622": [477, 593], "value1": [480, 593], "value2": [480, 593], "attain": [480, 593], "414214": [481, 593, 915, 986], "ends_with": [484, 507, 942], "sensit": [484, 491, 499, 919, 926, 934], "ilmsuxu": [484, 490, 491, 499, 919, 925, 926, 934], "default_match": 484, "insensitive_match": 484, "section": [484, 490, 491, 499, 919, 925, 926, 934], "crab": [484, 919], "dog": [484, 512, 514, 546, 919], "rab": [484, 919], "success": [485, 491, 920, 926], "overlap": [485, 491, 920, 926], "captur": [485, 490, 491, 920, 925, 926], "123": [485, 491, 500, 920, 926, 935, 965, 986], "bla": [485, 491, 920, 926], "asd": [485, 491, 920, 926], "678": [485, 491, 920, 926], "910t": [485, 491, 920, 926], "count_digit": 485, "666f6f": [487, 922], "626172": [487, 922], "mango": [488, 507, 923, 942], "go": [488, 923], "has_suffix": 488, "group_index": [490, 925], "nthose": [490, 925], "nodd": [490, 925], "nthe": [490, 925], "url": [490, 925], "vote": [490, 925], "ballon_dor": [490, 925], "404": [490, 925], "ref": [490, 925], "candid": [490, 925], "messi": [490, 925], "ronaldo": [490, 925], "did": [491, 926], "email": [491, 926], "real": [491, 926], "some_account": [491, 926], "somewher": [491, 926], "net": [491, 926], "jkl": [491, 926], "uvw": [491, 926], "co": [491, 593, 926, 986], "uk": [491, 926], "address": 491, "xi": [491, 926], "insensit": [491, 499, 919, 926, 934], "quantifi": [491, 926], "arr": [491, 556, 594, 968, 986, 987], "email_part": [491, 926], "extracted_nr": 491, "910": [491, 926], "json_path_match": [492, 927], "jsonpath": [492, 493, 927, 928], "json_path": [493, 928], "regardless": [493, 928], "json_val": [493, 928], "n_char": [494, 929], "caf\u00e9": [494, 497, 929, 932], "345": [494, 497, 929, 932], "\u6771\u4eac": [494, 497, 929, 932], "nchar": [494, 497], "fill_char": [495, 501, 930, 936], "justifi": [495, 501, 930, 936], "pad": [495, 501, 515, 930, 936, 950], "cow": [495, 501, 930, 936], "monkei": [495, 501, 930, 936], "hippopotamu": [495, 501, 930, 936], "strip": [496, 502, 931, 937], "tworld": [496, 508, 931, 943], "wod": [496, 502, 931, 937], "rld": [496, 931], "text": [497, 499, 500, 932, 994], "radix": [498, 933], "parseerror": [498, 933], "becom": [498, 933], "silent": [498, 933], "110": [498, 933], "010": [498, 933], "fa1e": [498, 933], "ff00": [498, 933], "cafe": [498, 933], "64030": [498, 933], "65280": [498, 933], "51966": [498, 933], "replace_al": [499, 934], "citi": 499, "philadelphia": 499, "season": 499, "spring": 499, "summer": 499, "autumn": 499, "winter": 499, "weather": [499, 934], "raini": [499, 934], "sunni": [499, 934], "cloudi": 499, "snowi": 499, "foggi": [499, 934], "123abc": [499, 934], "abc456": [499, 934], "abcabc": [500, 935], "123a123": [500, 935], "bc": [500, 582, 935], "trail": [502, 508, 937, 943], "worl": [502, 508, 937, 943], "subslic": [503, 938], "pear": [503, 938], "papaya": [503, 938], "dragonfruit": [503, 938], "s_slice": 503, "ear": [503, 938], "aya": [503, 938], "uit": [503, 938], "ya": [503, 938], "onf": [503, 938], "a_1": [505, 940, 964, 986], "d_4": [505, 940], "rename_field": [505, 506, 940, 941], "first_part": [505, 506, 940, 941], "second_part": [505, 506, 940, 941], "remaind": [506, 941], "app": [507, 942], "has_prefix": 507, "polarstemporaltyp": [509, 944], "tz_awar": [509, 944], "anywher": [509, 510, 511, 944, 945, 946], "toggl": [509, 944], "futur": [509, 944], "3f": [509, 511, 944, 946], "00z": [509, 511, 944, 946], "sun": [509, 944], "jul": [509, 944], "34": [509, 944], "_tz_awar": 511, "lowercas": [512, 947], "variant": [512, 514], "uppercas": [514, 949], "100000": 515, "0010": 515, "0001": 515, "00000": 515, "00001": 515, "cd": [516, 517], "struct_col": [516, 517], "www": 517, "xxx": 517, "yyi": 517, "zzz": 517, "obvious": 517, "structfieldnotfounderror": [517, 604], "761594": [525, 593, 961, 986], "replic": [526, 593, 970, 986], "vals_phys": [526, 593], "floordiv": [528, 593], "ieee": [528, 593], "754": [528, 593], "mathemat": [528, 556, 593], "undefin": [528, 593], "On": [528, 593], "operand": [528, 593], "infin": [528, 593], "value_count": [530, 593, 986], "9223372036854775807": [531, 593], "multithread": [532, 593], "binary_str": [535, 593], "zfill": [535, 593], "250": [535, 593, 888, 986, 994], "bin_x": [535, 593], "bin_i": [535, 593], "xor_xi": [535, 593], "bin_xor_xi": [535, 593], "00001010": [535, 593], "00000001": [535, 593], "00001011": [535, 593], "00001000": [535, 593], "00000010": [535, 593], "11111010": [535, 593], "00000011": [535, 593], "249": [535, 593], "11111001": [535, 593], "01000010": [535, 593], "00000100": [535, 593], "70": [535, 593], "01000110": [535, 593], "bitwis": [536, 537], "AND": 536, "returns_scalar": 538, "product_a": 538, "49": 538, "Be": 540, "more_nam": 544, "hamburg": 544, "lag": 545, "mimic": 545, "a_lag_": 545, "a_rol": 545, "plai": 546, "swim": 546, "walk": 546, "full_sent": 546, "correlationmethod": 547, "propagate_nan": [547, 579], "spearman": [547, 579], "larger": [547, 579, 655, 656, 691], "544705": [547, 572], "covari": [549, 577], "acc": [550, 551, 559, 574], "include_init": 550, "accumul": [550, 551, 559, 574], "fn": [550, 551, 559, 574], "new_valu": [550, 551, 559, 574], "cumreduc": 550, "tbl_width_char": 555, "120": 555, "add_week": 555, "add_dai": 555, "add_second": 555, "add_milli": 555, "add_hour": 555, "a_b_doubl": 556, "f_string": 560, "placehold": 560, "hello_": 560, "_world": 560, "foo_": 560, "_bar_": 560, "foo_a_bar_1": 560, "foo_b_bar_2": 560, "foo_c_bar_3": 560, "epoch": 561, "timestep": 561, "1666683077": 561, "1666683099": 561, "39": 561, "12345": [561, 748, 825, 896, 986], "12346": 561, "agg_group": [562, 593], "favor": [564, 572, 579], "implod": [564, 593, 986], "allow_object": 565, "valueexcept": 565, "foo_bar": 565, "test_func": 566, "605551": 580, "605551275463989": 580, "my_struct": 581, "q": 581, "selector": 582, "statement": 586, "chain": 586, "isn": 586, "thens": 586, "elif": 586, "pick": 586, "sometim": 592, "and_": 593, "approx_uniqu": [593, 691], "arcco": [593, 986], "arccosh": [593, 986], "arcsin": [593, 986], "arcsinh": [593, 986], "arctan": [593, 986], "arctanh": [593, 986], "arg_max": [593, 986], "arg_min": [593, 986], "arg_sort": [593, 986], "arg_uniqu": [593, 986], "backward_fil": 593, "clip_max": [593, 986], "clip_min": [593, 986], "cosh": [593, 986], "cumcount": 593, "cummax": [593, 986], "cummin": [593, 986], "cumulative_ev": [593, 986], "entropi": [593, 986], "eq": [593, 986], "ewm_mean": [593, 986], "ewm_std": [593, 986], "ewm_var": [593, 986], "extend_const": [593, 986], "flatten": 593, "ge": [593, 986], "gt": [593, 986], "inspect": [593, 691], "is_between": [593, 986], "is_finit": [593, 986], "is_first": [593, 986], "is_in": [593, 986], "is_infinit": [593, 986], "is_nan": [593, 986], "is_not_nan": [593, 986], "is_not_nul": [593, 986], "kurtosi": [593, 986], "le": [593, 986], "log10": [593, 986], "log1p": [593, 986], "mod": 593, "mul": 593, "nan_max": [593, 986], "nan_min": [593, 986], "ne": [593, 986], "or_": 593, "pct_chang": [593, 986], "pow": [593, 986], "reinterpret": [593, 986], "repeat_bi": 593, "rolling_appli": [593, 986], "rolling_median": [593, 986], "rolling_quantil": [593, 986], "rolling_skew": [593, 986], "rolling_std": [593, 986], "rolling_var": [593, 986], "search_sort": [593, 986], "shrink_dtyp": [593, 986], "sin": [593, 986], "sinh": [593, 986], "sort_bi": 593, "tan": [593, 986], "to_phys": [593, 986], "unique_count": [593, 986], "xor": 593, "expos": 604, "registr": 604, "miscellan": 604, "arrowerror": 604, "columnnotfounderror": 604, "invalidoperationerror": 604, "nodataerror": 604, "polarspanicerror": 604, "schemaerror": 604, "schemafieldnotfounderror": 604, "shapeerror": 604, "parametr": 604, "build_info": 604, "get_index_typ": 604, "show_vers": 604, "threadpool_s": 604, "sqlcontext": [604, 993], "hit": [608, 691], "node": [608, 628, 635, 639, 644, 647, 691], "huge": [611, 691], "saver": [611, 691], "purpos": [618, 691], "influenc": [618, 635, 691], "read_json": [623, 672, 691], "lazygroupbi": [624, 625, 626, 691], "other_lf": [630, 691], "validate_output_schema": [635, 691], "streamabl": [635, 639, 691], "past": [635, 691], "assum": [635, 675, 691], "paramount": [635, 691], "bug": [635, 675, 691], "elig": [635, 691], "invari": [635, 691], "upheld": [635, 691], "prune": [635, 691], "show_plot": [644, 691], "truncate_nod": [644, 691], "figsiz": [644, 654, 691], "gantt": [644, 691], "plot": [644, 654, 691], "groupby_partit": [644, 691], "470": [644, 691], "475": [644, 691], "1964": [644, 691], "from_json": [646, 691], "swap": [647, 691], "output_path": [654, 691], "raw_output": [654, 691], "figur": [654, 691], "persist": [655, 656, 691], "ram": [655, 656, 691], "slightli": [655, 656, 691], "my_larger_than_ram_fil": [655, 656, 691], "data_pagesize_limit": [656, 691], "290994": [659, 691], "118034": [659, 691], "433013": [659, 691], "1875": [667, 691], "extern": [670, 691], "lf_other": [670, 691], "afoo": [670, 691], "cfoo": [670, 691], "train_lf": [670, 691], "feature_0": [670, 691], "feature_1": [670, 691], "test_lf": [670, 691], "_train": [670, 691], "feature_0_train": [670, 691], "dataframescan": [672, 691], "output_schema": [672, 691], "lf3": 691, "lf4": 691, "lf5": 691, "lf6": 691, "explain": 691, "sink_ipc": 691, "sink_parquet": 691, "with_context": 691, "new_aliased_sr": [696, 986], "append_chunk": [699, 986], "super": [699, 986], "141593": [701, 986], "292432": [702, 986], "549306": [706, 986], "listnamespac": [712, 819, 884, 986], "field_2": 737, "n00": 737, "n01": 737, "n02": 737, "catnamespac": 746, "56789": [748, 825, 896, 986], "901234": [748, 825, 896, 986], "pi": [755, 910, 960, 986], "1232e": [755, 986], "quick": [763, 986, 994], "series_num": [763, 986], "581139": [763, 986], "series_str": [763, 986], "datetimenamespac": 768, "ser": [772, 773, 804], "replace_time_zon": [772, 773, 804], "kathmandu": [772, 773, 804], "0545": [772, 773, 804], "500m": [784, 786, 794, 801], "500000": 784, "2m": 789, "500000000": 794, "date_minus_1y_2mon": 796, "165": [800, 807], "series_equ": [800, 807, 986], "timestamp_u": 805, "978307200000000000": 805, "978393600000000000": 805, "978480000000000000": 805, "005": [813, 986], "06293300616044681": [813, 986], "65": [813, 986], "8568409950394724": [813, 986], "4000000": [814, 986], "814697265625": [814, 986], "stringnamespac": [819, 917, 986], "bitmask": [827, 986], "swiftli": [827, 986], "10734580197236529959": [828, 986], "3022416320763508302": [828, 986], "13756996518000038261": [828, 986], "bin_count": [830, 986], "a_count": [830, 986], "fall": [834, 986], "2147483648": [860, 986], "iso3166": [861, 986], "tur": [861, 986], "jpn": [861, 986], "nld": [861, 986], "country_lookup": [861, 986], "japan": [861, 986], "t\u00fcrkiy": [861, 986], "netherland": [861, 986], "unrecognis": [861, 986], "unspecifi": [861, 986], "country_nam": [861, 986], "166667": [874, 986], "142857": [874, 986], "peak": [875, 876, 986], "quanil": [878, 986], "nanstd": [886, 986], "858612": [886, 986], "200": [887, 888, 890, 986], "150": [888, 986], "350": [888, 986], "450": [888, 986], "381802": [892, 986], "dev": [893, 986], "frequent": [900, 901, 986], "mutat": [901, 986], "2246e": [910, 960, 986], "6331e16": [960, 986], "lib": [963, 986], "int64arrai": [963, 986], "a_2": [964, 986], "a_3": [964, 986], "s_from_str_repr": [966, 986], "zero_copy_onli": [968, 986], "writabl": [968, 986], "complet": [968, 986], "presenc": [968, 986], "immut": [968, 986], "127": [974, 986], "seriesview": [977, 986], "arraylik": 986, "dtype_if_empti": 986, "position": 986, "scenario": 986, "through": 986, "chunk_length": 986, "cut": 986, "get_chunk": 986, "has_valid": 986, "hist": 986, "is_boolean": 986, "is_float": 986, "is_integ": 986, "is_numer": [986, 994], "is_sort": 986, "is_tempor": 986, "is_utf8": 986, "new_from_index": 986, "peak_max": 986, "peak_min": 986, "power": 986, "qcut": 986, "set_at_idx": 986, "guid": 994, "easi": 994, "approxim": 994, "own": 994, "machin": 994, "xdist": 994, "vari": 994, "hardwar": 994, "setup": 994, "numeric_dtyp": 994, "null_probabililti": 994, "test_numer": 994, "col0": 994, "col4": 994, "29096": 994, "485": 994, "2147483647": 994, "8257e14": 994, "7508": 994, "37338": 994, "7264": 994, "321": 994, "16996": 994, "121": 994, "361": 994, "63204": 994, "1443e235": 994, "conform": 994, "ascii_lett": 994, "id_char": 994, "alphabet": 994, "price": 994, "min_valu": 994, "max_valu": 994, "test_price_calcul": 994, "a101": 994, "8nin": 994, "qhoo": 994, "714": 994, "544": 994, "i0e0": 994, "0000": 994, "colz": 994, "test_miscellan": 994, "143": 994, "235": 994, "87": 994, "186": 994, "174": 994, "179": 994, "213": 994, "221": 994, "86": 994, "255": 994}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [34, 0, 1, "", "DataType"], [35, 0, 1, "", "Date"], [36, 0, 1, "", "Datetime"], [37, 0, 1, "", "Decimal"], [38, 0, 1, "", "Duration"], [39, 0, 1, "", "Float32"], [40, 0, 1, "", "Float64"], [41, 0, 1, "", "Int16"], [42, 0, 1, "", "Int32"], [43, 0, 1, "", "Int64"], [44, 0, 1, "", "Int8"], [45, 0, 1, "", "List"], [46, 0, 1, "", "Null"], [47, 0, 1, "", "Object"], [993, 0, 1, "", "SQLContext"], [53, 0, 1, "", "StringCache"], [54, 0, 1, "", "Struct"], [55, 0, 1, "", "Time"], [56, 0, 1, "", "UInt16"], [57, 0, 1, "", "UInt32"], [58, 0, 1, "", "UInt64"], [59, 0, 1, "", "UInt8"], [60, 0, 1, "", "Unknown"], [61, 0, 1, "", "Utf8"], [62, 4, 1, "", "align_frames"], [536, 4, 1, "", "all"], [537, 4, 1, "", "any"], [538, 4, 1, "", "apply"], [539, 4, 1, "", "approx_unique"], [540, 4, 1, "", "arange"], [541, 4, 1, "", "arg_sort_by"], [67, 4, 1, "", "arg_where"], [542, 4, 1, "", "avg"], [68, 4, 1, "", "build_info"], [543, 4, 1, "", "coalesce"], [544, 4, 1, "", "col"], [69, 4, 1, "", "collect_all"], [70, 4, 1, "", "concat"], [545, 4, 1, "", "concat_list"], [546, 4, 1, "", "concat_str"], [547, 4, 1, "", "corr"], [548, 4, 1, "", "count"], [549, 4, 1, "", "cov"], [550, 4, 1, "", "cumfold"], [551, 4, 1, "", "cumreduce"], [552, 4, 1, "", "cumsum"], [71, 4, 1, "", "cut"], [553, 4, 1, "", "date"], [72, 4, 1, "", "date_range"], [554, 4, 1, "", "datetime"], [555, 4, 1, "", "duration"], [556, 4, 1, "", "element"], [73, 4, 1, "", "enable_string_cache"], [557, 4, 1, "", "exclude"], [558, 4, 1, "", "first"], [559, 4, 1, "", "fold"], [560, 4, 1, "", "format"], [88, 4, 1, "", "from_arrow"], [89, 4, 1, "", "from_dataframe"], [90, 4, 1, "", "from_dict"], [91, 4, 1, "", "from_dicts"], [561, 4, 1, "", "from_epoch"], [92, 4, 1, "", "from_numpy"], [93, 4, 1, "", "from_pandas"], [94, 4, 1, "", "from_records"], [95, 4, 1, "", "from_repr"], [96, 4, 1, "", "get_dummies"], [97, 4, 1, "", "get_index_type"], [562, 4, 1, "", "groups"], [563, 4, 1, "", "head"], [564, 4, 1, "", "list"], [565, 4, 1, "", "lit"], [566, 4, 1, "", "map"], [567, 4, 1, "", "max"], [568, 4, 1, "", "mean"], [569, 4, 1, "", "median"], [570, 4, 1, "", "min"], [571, 4, 1, "", "n_unique"], [99, 4, 1, "", "ones"], [572, 4, 1, "", "pearson_corr"], [573, 4, 1, "", "quantile"], [100, 4, 1, "", "read_avro"], [101, 4, 1, "", "read_csv"], [102, 4, 1, "", "read_csv_batched"], [103, 4, 1, "", "read_database"], [104, 4, 1, "", "read_delta"], [105, 4, 1, "", "read_excel"], [106, 4, 1, "", "read_ipc"], [107, 4, 1, "", "read_ipc_schema"], [108, 4, 1, "", "read_json"], [109, 4, 1, "", "read_ndjson"], [110, 4, 1, "", "read_parquet"], [111, 4, 1, "", "read_parquet_schema"], [574, 4, 1, "", "reduce"], [575, 4, 1, "", "repeat"], [576, 4, 1, "", "rolling_corr"], [577, 4, 1, "", "rolling_cov"], [112, 4, 1, "", "scan_csv"], [113, 4, 1, "", "scan_delta"], [114, 4, 1, "", "scan_ipc"], [115, 4, 1, "", "scan_ndjson"], [116, 4, 1, "", "scan_parquet"], [117, 4, 1, "", "scan_pyarrow_dataset"], [578, 4, 1, "", "select"], [118, 4, 1, "", "show_versions"], [579, 4, 1, "", "spearman_rank_corr"], [580, 4, 1, "", "std"], [581, 4, 1, "", "struct"], [582, 4, 1, "", "sum"], [583, 4, 1, "", "tail"], [128, 4, 1, "", "threadpool_size"], [584, 4, 1, "", "time"], [129, 4, 1, "", "time_range"], [585, 4, 1, "", "var"], [586, 4, 1, "", "when"], [130, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "activate_decimals"], [6, 1, 1, "", "load"], [7, 1, 1, "", "restore_defaults"], [8, 1, 1, "", "save"], [9, 1, 1, "", "set_ascii_tables"], [10, 1, 1, "", "set_fmt_float"], [11, 1, 1, "", "set_fmt_str_lengths"], [12, 1, 1, "", "set_streaming_chunk_size"], [13, 1, 1, "", "set_tbl_cell_alignment"], [14, 1, 1, "", "set_tbl_cols"], [15, 1, 1, "", "set_tbl_column_data_type_inline"], [16, 1, 1, "", "set_tbl_dataframe_shape_below"], [17, 1, 1, "", "set_tbl_formatting"], [18, 1, 1, "", "set_tbl_hide_column_data_types"], [19, 1, 1, "", "set_tbl_hide_column_names"], [20, 1, 1, "", "set_tbl_hide_dataframe_shape"], [21, 1, 1, "", "set_tbl_hide_dtype_separator"], [22, 1, 1, "", "set_tbl_rows"], [23, 1, 1, "", "set_tbl_width_chars"], [24, 1, 1, "", "set_verbose"], [25, 1, 1, "", "state"]], "polars.DataFrame": [[133, 1, 1, "", "__dataframe__"], [134, 1, 1, "", "apply"], [135, 1, 1, "", "bottom_k"], [136, 1, 1, "", "clear"], [137, 1, 1, "", "clone"], [138, 2, 1, "", "columns"], [139, 1, 1, "", "corr"], [140, 1, 1, "", "describe"], [141, 1, 1, "", "drop"], [142, 1, 1, "", "drop_in_place"], [143, 1, 1, "", "drop_nulls"], [144, 2, 1, "", "dtypes"], [145, 1, 1, "", "estimated_size"], [146, 1, 1, "", "explode"], [147, 1, 1, "", "extend"], [148, 1, 1, "", "fill_nan"], [149, 1, 1, "", "fill_null"], [150, 1, 1, "", "filter"], [151, 1, 1, "", "find_idx_by_name"], [152, 1, 1, "", "fold"], [153, 1, 1, "", "frame_equal"], [154, 1, 1, "", "get_column"], [155, 1, 1, "", "get_columns"], [156, 1, 1, "", "glimpse"], [157, 1, 1, "", "groupby"], [158, 1, 1, "", "groupby_dynamic"], [159, 1, 1, "", "groupby_rolling"], [160, 1, 1, "", "hash_rows"], [161, 1, 1, "", "head"], [162, 2, 1, "", "height"], [163, 1, 1, "", "hstack"], [164, 1, 1, "", "insert_at_idx"], [165, 1, 1, "", "interpolate"], [166, 1, 1, "", "is_duplicated"], [167, 1, 1, "", "is_empty"], [168, 1, 1, "", "is_unique"], [169, 1, 1, "", "item"], [170, 1, 1, "", "iter_rows"], [171, 1, 1, "", "iter_slices"], [172, 1, 1, "", "join"], [173, 1, 1, "", "join_asof"], [174, 1, 1, "", "lazy"], [175, 1, 1, "", "limit"], [176, 1, 1, "", "max"], [177, 1, 1, "", "mean"], [178, 1, 1, "", "median"], [179, 1, 1, "", "melt"], [180, 1, 1, "", "merge_sorted"], [181, 1, 1, "", "min"], [182, 1, 1, "", "n_chunks"], [183, 1, 1, "", "n_unique"], [184, 1, 1, "", "null_count"], [185, 1, 1, "", "partition_by"], [186, 1, 1, "", "pipe"], [187, 1, 1, "", "pivot"], [188, 1, 1, "", "product"], [189, 1, 1, "", "quantile"], [190, 1, 1, "", "rechunk"], [191, 1, 1, "", "rename"], [192, 1, 1, "", "replace"], [193, 1, 1, "", "replace_at_idx"], [194, 1, 1, "", "reverse"], [195, 1, 1, "", "row"], [196, 1, 1, "", "rows"], [197, 1, 1, "", "sample"], [198, 2, 1, "", "schema"], [199, 1, 1, "", "select"], [200, 1, 1, "", "set_sorted"], [201, 2, 1, "", "shape"], [202, 1, 1, "", "shift"], [203, 1, 1, "", "shift_and_fill"], [204, 1, 1, "", "shrink_to_fit"], [205, 1, 1, "", "slice"], [206, 1, 1, "", "sort"], [207, 1, 1, "", "std"], [208, 1, 1, "", "sum"], [209, 1, 1, "", "tail"], [210, 1, 1, "", "take_every"], [211, 1, 1, "", "to_arrow"], [212, 1, 1, "", "to_dict"], [213, 1, 1, "", "to_dicts"], [214, 1, 1, "", "to_dummies"], [215, 1, 1, "", "to_init_repr"], [216, 1, 1, "", "to_numpy"], [217, 1, 1, "", "to_pandas"], [218, 1, 1, "", "to_series"], [219, 1, 1, "", "to_struct"], [220, 1, 1, "", "top_k"], [221, 1, 1, "", "transpose"], [222, 1, 1, "", "unique"], [223, 1, 1, "", "unnest"], [224, 1, 1, "", "unstack"], [225, 1, 1, "", "update"], [226, 1, 1, "", "upsample"], [227, 1, 1, "", "var"], [228, 1, 1, "", "vstack"], [229, 2, 1, "", "width"], [230, 1, 1, "", "with_columns"], [231, 1, 1, "", "with_row_count"], [26, 1, 1, "", "write_avro"], [27, 1, 1, "", "write_csv"], [28, 1, 1, "", "write_database"], [29, 1, 1, "", "write_excel"], [30, 1, 1, "", "write_ipc"], [31, 1, 1, "", "write_json"], [32, 1, 1, "", "write_ndjson"], [33, 1, 1, "", "write_parquet"]], "polars.DataType": [[34, 1, 1, "", "__init__"]], "polars.Date": [[35, 1, 1, "", "__init__"]], "polars.Datetime": [[36, 1, 1, "", "__init__"]], "polars.Decimal": [[37, 1, 1, "", "__init__"]], "polars.Duration": [[38, 1, 1, "", "__init__"]], "polars.Expr": [[259, 1, 1, "", "abs"], [260, 1, 1, "", "add"], [261, 1, 1, "", "agg_groups"], [262, 1, 1, "", "alias"], [263, 1, 1, "", "all"], [264, 1, 1, "", "and_"], [265, 1, 1, "", "any"], [266, 1, 1, "", "append"], [267, 1, 1, "", "apply"], [268, 1, 1, "", "approx_unique"], [269, 1, 1, "", "arccos"], [270, 1, 1, "", "arccosh"], [271, 1, 1, "", "arcsin"], [272, 1, 1, "", "arcsinh"], [273, 1, 1, "", "arctan"], [274, 1, 1, "", "arctanh"], [275, 1, 1, "", "arg_max"], [276, 1, 1, "", "arg_min"], [277, 1, 1, "", "arg_sort"], [278, 1, 1, "", "arg_true"], [279, 1, 1, "", "arg_unique"], [306, 1, 1, "", "backward_fill"], [312, 1, 1, "", "bottom_k"], [313, 1, 1, "", "cache"], [314, 1, 1, "", "cast"], [316, 1, 1, "", "ceil"], [317, 1, 1, "", "clip"], [318, 1, 1, "", "clip_max"], [319, 1, 1, "", "clip_min"], [320, 1, 1, "", "cos"], [321, 1, 1, "", "cosh"], [322, 1, 1, "", "count"], [323, 1, 1, "", "cumcount"], [324, 1, 1, "", "cummax"], [325, 1, 1, "", "cummin"], [326, 1, 1, "", "cumprod"], [327, 1, 1, "", "cumsum"], [328, 1, 1, "", "cumulative_eval"], [329, 1, 1, "", "diff"], [330, 1, 1, "", "dot"], [331, 1, 1, "", "drop_nans"], [332, 1, 1, "", "drop_nulls"], [372, 1, 1, "", "entropy"], [373, 1, 1, "", "eq"], [374, 1, 1, "", "ewm_mean"], [375, 1, 1, "", "ewm_std"], [376, 1, 1, "", "ewm_var"], [377, 1, 1, "", "exclude"], [378, 1, 1, "", "exp"], [379, 1, 1, "", "explode"], [380, 1, 1, "", "extend_constant"], [381, 1, 1, "", "fill_nan"], [382, 1, 1, "", "fill_null"], [383, 1, 1, "", "filter"], [384, 1, 1, "", "first"], [385, 1, 1, "", "flatten"], [386, 1, 1, "", "floor"], [387, 1, 1, "", "floordiv"], [388, 1, 1, "", "forward_fill"], [389, 1, 1, "", "ge"], [390, 1, 1, "", "gt"], [391, 1, 1, "", "hash"], [392, 1, 1, "", "head"], [393, 1, 1, "", "implode"], [394, 1, 1, "", "inspect"], [395, 1, 1, "", "interpolate"], [396, 1, 1, "", "is_between"], [397, 1, 1, "", "is_duplicated"], [398, 1, 1, "", "is_finite"], [399, 1, 1, "", "is_first"], [400, 1, 1, "", "is_in"], [401, 1, 1, "", "is_infinite"], [402, 1, 1, "", "is_nan"], [403, 1, 1, "", "is_not"], [404, 1, 1, "", "is_not_nan"], [405, 1, 1, "", "is_not_null"], [406, 1, 1, "", "is_null"], [407, 1, 1, "", "is_unique"], [408, 1, 1, "", "keep_name"], [409, 1, 1, "", "kurtosis"], [410, 1, 1, "", "last"], [411, 1, 1, "", "le"], [412, 1, 1, "", "len"], [413, 1, 1, "", "limit"], [414, 1, 1, "", "log"], [415, 1, 1, "", "log10"], [416, 1, 1, "", "log1p"], [417, 1, 1, "", "lower_bound"], [418, 1, 1, "", "lt"], [419, 1, 1, "", "map"], [420, 1, 1, "", "map_alias"], [421, 1, 1, "", "map_dict"], [422, 1, 1, "", "max"], [423, 1, 1, "", "mean"], [424, 1, 1, "", "median"], [433, 1, 1, "", "min"], [434, 1, 1, "", "mod"], [435, 1, 1, "", "mode"], [436, 1, 1, "", "mul"], [437, 1, 1, "", "n_unique"], [438, 1, 1, "", "nan_max"], [439, 1, 1, "", "nan_min"], [440, 1, 1, "", "ne"], [441, 1, 1, "", "null_count"], [442, 1, 1, "", "or_"], [443, 1, 1, "", "over"], [444, 1, 1, "", "pct_change"], [445, 1, 1, "", "pipe"], [446, 1, 1, "", "pow"], [447, 1, 1, "", "prefix"], [448, 1, 1, "", "product"], [449, 1, 1, "", "quantile"], [450, 1, 1, "", "rank"], [451, 1, 1, "", "rechunk"], [452, 1, 1, "", "reinterpret"], [453, 1, 1, "", "repeat_by"], [454, 1, 1, "", "reshape"], [455, 1, 1, "", "reverse"], [456, 1, 1, "", "rolling_apply"], [457, 1, 1, "", "rolling_max"], [458, 1, 1, "", "rolling_mean"], [459, 1, 1, "", "rolling_median"], [460, 1, 1, "", "rolling_min"], [461, 1, 1, "", "rolling_quantile"], [462, 1, 1, "", "rolling_skew"], [463, 1, 1, "", "rolling_std"], [464, 1, 1, "", "rolling_sum"], [465, 1, 1, "", "rolling_var"], [466, 1, 1, "", "round"], [467, 1, 1, "", "sample"], [468, 1, 1, "", "search_sorted"], [469, 1, 1, "", "set_sorted"], [470, 1, 1, "", "shift"], [471, 1, 1, "", "shift_and_fill"], [472, 1, 1, "", "shrink_dtype"], [473, 1, 1, "", "shuffle"], [474, 1, 1, "", "sign"], [475, 1, 1, "", "sin"], [476, 1, 1, "", "sinh"], [477, 1, 1, "", "skew"], [478, 1, 1, "", "slice"], [479, 1, 1, "", "sort"], [480, 1, 1, "", "sort_by"], [481, 1, 1, "", "sqrt"], [482, 1, 1, "", "std"], [518, 1, 1, "", "sub"], [519, 1, 1, "", "suffix"], [520, 1, 1, "", "sum"], [521, 1, 1, "", "tail"], [522, 1, 1, "", "take"], [523, 1, 1, "", "take_every"], [524, 1, 1, "", "tan"], [525, 1, 1, "", "tanh"], [526, 1, 1, "", "to_physical"], [527, 1, 1, "", "top_k"], [528, 1, 1, "", "truediv"], [529, 1, 1, "", "unique"], [530, 1, 1, "", "unique_counts"], [531, 1, 1, "", "upper_bound"], [532, 1, 1, "", "value_counts"], [533, 1, 1, "", "var"], [534, 1, 1, "", "where"], [535, 1, 1, "", "xor"]], "polars.Expr.arr": [[280, 1, 1, "", "arg_max"], [281, 1, 1, "", "arg_min"], [282, 1, 1, "", "concat"], [283, 1, 1, "", "contains"], [284, 1, 1, "", "count_match"], [285, 1, 1, "", "diff"], [286, 1, 1, "", "eval"], [287, 1, 1, "", "explode"], [288, 1, 1, "", "first"], [289, 1, 1, "", "get"], [290, 1, 1, "", "head"], [291, 1, 1, "", "join"], [292, 1, 1, "", "last"], [293, 1, 1, "", "lengths"], [294, 1, 1, "", "max"], [295, 1, 1, "", "mean"], [296, 1, 1, "", "min"], [297, 1, 1, "", "reverse"], [298, 1, 1, "", "shift"], [299, 1, 1, "", "slice"], [300, 1, 1, "", "sort"], [301, 1, 1, "", "sum"], [302, 1, 1, "", "tail"], [303, 1, 1, "", "take"], [304, 1, 1, "", "to_struct"], [305, 1, 1, "", "unique"]], "polars.Expr.bin": [[307, 1, 1, "", "contains"], [308, 1, 1, "", "decode"], [309, 1, 1, "", "encode"], [310, 1, 1, "", "ends_with"], [311, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[315, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[333, 1, 1, "", "cast_time_unit"], [334, 1, 1, "", "combine"], [335, 1, 1, "", "convert_time_zone"], [336, 1, 1, "", "date"], [337, 1, 1, "", "datetime"], [338, 1, 1, "", "day"], [339, 1, 1, "", "days"], [340, 1, 1, "", "epoch"], [341, 1, 1, "", "hour"], [342, 1, 1, "", "hours"], [343, 1, 1, "", "is_leap_year"], [344, 1, 1, "", "iso_year"], [345, 1, 1, "", "microsecond"], [346, 1, 1, "", "microseconds"], [347, 1, 1, "", "millisecond"], [348, 1, 1, "", "milliseconds"], [349, 1, 1, "", "minute"], [350, 1, 1, "", "minutes"], [351, 1, 1, "", "month"], [352, 1, 1, "", "month_end"], [353, 1, 1, "", "month_start"], [354, 1, 1, "", "nanosecond"], [355, 1, 1, "", "nanoseconds"], [356, 1, 1, "", "offset_by"], [357, 1, 1, "", "ordinal_day"], [358, 1, 1, "", "quarter"], [359, 1, 1, "", "replace_time_zone"], [360, 1, 1, "", "round"], [361, 1, 1, "", "second"], [362, 1, 1, "", "seconds"], [363, 1, 1, "", "strftime"], [364, 1, 1, "", "time"], [365, 1, 1, "", "timestamp"], [366, 1, 1, "", "to_string"], [367, 1, 1, "", "truncate"], [368, 1, 1, "", "week"], [369, 1, 1, "", "weekday"], [370, 1, 1, "", "with_time_unit"], [371, 1, 1, "", "year"]], "polars.Expr.meta": [[425, 1, 1, "", "eq"], [426, 1, 1, "", "has_multiple_outputs"], [427, 1, 1, "", "is_regex_projection"], [428, 1, 1, "", "ne"], [429, 1, 1, "", "output_name"], [430, 1, 1, "", "pop"], [431, 1, 1, "", "root_names"], [432, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[483, 1, 1, "", "concat"], [484, 1, 1, "", "contains"], [485, 1, 1, "", "count_match"], [486, 1, 1, "", "decode"], [487, 1, 1, "", "encode"], [488, 1, 1, "", "ends_with"], [489, 1, 1, "", "explode"], [490, 1, 1, "", "extract"], [491, 1, 1, "", "extract_all"], [492, 1, 1, "", "json_extract"], [493, 1, 1, "", "json_path_match"], [494, 1, 1, "", "lengths"], [495, 1, 1, "", "ljust"], [496, 1, 1, "", "lstrip"], [497, 1, 1, "", "n_chars"], [498, 1, 1, "", "parse_int"], [499, 1, 1, "", "replace"], [500, 1, 1, "", "replace_all"], [501, 1, 1, "", "rjust"], [502, 1, 1, "", "rstrip"], [503, 1, 1, "", "slice"], [504, 1, 1, "", "split"], [505, 1, 1, "", "split_exact"], [506, 1, 1, "", "splitn"], [507, 1, 1, "", "starts_with"], [508, 1, 1, "", "strip"], [509, 1, 1, "", "strptime"], [510, 1, 1, "", "to_date"], [511, 1, 1, "", "to_datetime"], [512, 1, 1, "", "to_lowercase"], [513, 1, 1, "", "to_time"], [514, 1, 1, "", "to_uppercase"], [515, 1, 1, "", "zfill"]], "polars.Expr.struct": [[516, 1, 1, "", "field"], [517, 1, 1, "", "rename_fields"]], "polars.Float32": [[39, 1, 1, "", "__init__"]], "polars.Float64": [[40, 1, 1, "", "__init__"]], "polars.Int16": [[41, 1, 1, "", "__init__"]], "polars.Int32": [[42, 1, 1, "", "__init__"]], "polars.Int64": [[43, 1, 1, "", "__init__"]], "polars.Int8": [[44, 1, 1, "", "__init__"]], "polars.LazyFrame": [[607, 1, 1, "", "bottom_k"], [608, 1, 1, "", "cache"], [609, 1, 1, "", "clear"], [610, 1, 1, "", "clone"], [611, 1, 1, "", "collect"], [612, 2, 1, "", "columns"], [613, 1, 1, "", "drop"], [614, 1, 1, "", "drop_nulls"], [615, 2, 1, "", "dtypes"], [616, 1, 1, "", "explain"], [617, 1, 1, "", "explode"], [618, 1, 1, "", "fetch"], [619, 1, 1, "", "fill_nan"], [620, 1, 1, "", "fill_null"], [621, 1, 1, "", "filter"], [622, 1, 1, "", "first"], [623, 1, 1, "", "from_json"], [624, 1, 1, "", "groupby"], [625, 1, 1, "", "groupby_dynamic"], [626, 1, 1, "", "groupby_rolling"], [627, 1, 1, "", "head"], [628, 1, 1, "", "inspect"], [629, 1, 1, "", "interpolate"], [630, 1, 1, "", "join"], [631, 1, 1, "", "join_asof"], [632, 1, 1, "", "last"], [633, 1, 1, "", "lazy"], [634, 1, 1, "", "limit"], [635, 1, 1, "", "map"], [636, 1, 1, "", "max"], [637, 1, 1, "", "mean"], [638, 1, 1, "", "median"], [639, 1, 1, "", "melt"], [640, 1, 1, "", "merge_sorted"], [641, 1, 1, "", "min"], [642, 1, 1, "", "null_count"], [643, 1, 1, "", "pipe"], [644, 1, 1, "", "profile"], [645, 1, 1, "", "quantile"], [646, 1, 1, "", "read_json"], [647, 1, 1, "", "rename"], [648, 1, 1, "", "reverse"], [649, 2, 1, "", "schema"], [650, 1, 1, "", "select"], [651, 1, 1, "", "set_sorted"], [652, 1, 1, "", "shift"], [653, 1, 1, "", "shift_and_fill"], [654, 1, 1, "", "show_graph"], [655, 1, 1, "", "sink_ipc"], [656, 1, 1, "", "sink_parquet"], [657, 1, 1, "", "slice"], [658, 1, 1, "", "sort"], [659, 1, 1, "", "std"], [660, 1, 1, "", "sum"], [661, 1, 1, "", "tail"], [662, 1, 1, "", "take_every"], [663, 1, 1, "", "top_k"], [664, 1, 1, "", "unique"], [665, 1, 1, "", "unnest"], [666, 1, 1, "", "update"], [667, 1, 1, "", "var"], [668, 2, 1, "", "width"], [669, 1, 1, "", "with_columns"], [670, 1, 1, "", "with_context"], [671, 1, 1, "", "with_row_count"], [672, 1, 1, "", "write_json"]], "polars.List": [[45, 1, 1, "", "__init__"]], "polars.Null": [[46, 1, 1, "", "__init__"]], "polars.Object": [[47, 1, 1, "", "__init__"]], "polars.SQLContext": [[48, 1, 1, "", "execute"], [49, 1, 1, "", "register"], [50, 1, 1, "", "register_globals"], [51, 1, 1, "", "register_many"], [52, 1, 1, "", "unregister"]], "polars.Series": [[695, 1, 1, "", "abs"], [696, 1, 1, "", "alias"], [697, 1, 1, "", "all"], [698, 1, 1, "", "any"], [699, 1, 1, "", "append"], [700, 1, 1, "", "apply"], [701, 1, 1, "", "arccos"], [702, 1, 1, "", "arccosh"], [703, 1, 1, "", "arcsin"], [704, 1, 1, "", "arcsinh"], [705, 1, 1, "", "arctan"], [706, 1, 1, "", "arctanh"], [707, 1, 1, "", "arg_max"], [708, 1, 1, "", "arg_min"], [709, 1, 1, "", "arg_sort"], [710, 1, 1, "", "arg_true"], [711, 1, 1, "", "arg_unique"], [712, 3, 1, "", "arr"], [744, 1, 1, "", "bottom_k"], [745, 1, 1, "", "cast"], [746, 3, 1, "", "cat"], [748, 1, 1, "", "ceil"], [749, 1, 1, "", "chunk_lengths"], [750, 1, 1, "", "clear"], [751, 1, 1, "", "clip"], [752, 1, 1, "", "clip_max"], [753, 1, 1, "", "clip_min"], [754, 1, 1, "", "clone"], [755, 1, 1, "", "cos"], [756, 1, 1, "", "cosh"], [757, 1, 1, "", "cummax"], [758, 1, 1, "", "cummin"], [759, 1, 1, "", "cumprod"], [760, 1, 1, "", "cumsum"], [761, 1, 1, "", "cumulative_eval"], [762, 1, 1, "", "cut"], [763, 1, 1, "", "describe"], [764, 1, 1, "", "diff"], [765, 1, 1, "", "dot"], [766, 1, 1, "", "drop_nans"], [767, 1, 1, "", "drop_nulls"], [768, 3, 1, "", "dt"], [812, 3, 1, "", "dtype"], [813, 1, 1, "", "entropy"], [814, 1, 1, "", "estimated_size"], [815, 1, 1, "", "ewm_mean"], [816, 1, 1, "", "ewm_std"], [817, 1, 1, "", "ewm_var"], [818, 1, 1, "", "exp"], [819, 1, 1, "", "explode"], [820, 1, 1, "", "extend_constant"], [821, 1, 1, "", "fill_nan"], [822, 1, 1, "", "fill_null"], [823, 1, 1, "", "filter"], [824, 3, 1, "", "flags"], [825, 1, 1, "", "floor"], [826, 1, 1, "", "get_chunks"], [827, 1, 1, "", "has_validity"], [828, 1, 1, "", "hash"], [829, 1, 1, "", "head"], [830, 1, 1, "", "hist"], [831, 1, 1, "", "implode"], [832, 3, 1, "", "inner_dtype"], [833, 1, 1, "", "interpolate"], [834, 1, 1, "", "is_between"], [835, 1, 1, "", "is_boolean"], [836, 1, 1, "", "is_duplicated"], [837, 1, 1, "", "is_empty"], [838, 1, 1, "", "is_finite"], [839, 1, 1, "", "is_first"], [840, 1, 1, "", "is_float"], [841, 1, 1, "", "is_in"], [842, 1, 1, "", "is_infinite"], [843, 1, 1, "", "is_integer"], [844, 1, 1, "", "is_nan"], [845, 1, 1, "", "is_not_nan"], [846, 1, 1, "", "is_not_null"], [847, 1, 1, "", "is_null"], [848, 1, 1, "", "is_numeric"], [849, 1, 1, "", "is_sorted"], [850, 1, 1, "", "is_temporal"], [851, 1, 1, "", "is_unique"], [852, 1, 1, "", "is_utf8"], [853, 1, 1, "", "item"], [854, 1, 1, "", "kurtosis"], [855, 1, 1, "", "len"], [856, 1, 1, "", "limit"], [857, 1, 1, "", "log"], [858, 1, 1, "", "log10"], [859, 1, 1, "", "log1p"], [860, 1, 1, "", "lower_bound"], [861, 1, 1, "", "map_dict"], [862, 1, 1, "", "max"], [863, 1, 1, "", "mean"], [864, 1, 1, "", "median"], [865, 1, 1, "", "min"], [866, 1, 1, "", "mode"], [867, 1, 1, "", "n_chunks"], [868, 1, 1, "", "n_unique"], [869, 3, 1, "", "name"], [870, 1, 1, "", "nan_max"], [871, 1, 1, "", "nan_min"], [872, 1, 1, "", "new_from_index"], [873, 1, 1, "", "null_count"], [874, 1, 1, "", "pct_change"], [875, 1, 1, "", "peak_max"], [876, 1, 1, "", "peak_min"], [877, 1, 1, "", "product"], [878, 1, 1, "", "qcut"], [879, 1, 1, "", "quantile"], [880, 1, 1, "", "rank"], [881, 1, 1, "", "rechunk"], [882, 1, 1, "", "reinterpret"], [883, 1, 1, "", "rename"], [884, 1, 1, "", "reshape"], [885, 1, 1, "", "reverse"], [886, 1, 1, "", "rolling_apply"], [887, 1, 1, "", "rolling_max"], [888, 1, 1, "", "rolling_mean"], [889, 1, 1, "", "rolling_median"], [890, 1, 1, "", "rolling_min"], [891, 1, 1, "", "rolling_quantile"], [892, 1, 1, "", "rolling_skew"], [893, 1, 1, "", "rolling_std"], [894, 1, 1, "", "rolling_sum"], [895, 1, 1, "", "rolling_var"], [896, 1, 1, "", "round"], [897, 1, 1, "", "sample"], [898, 1, 1, "", "search_sorted"], [899, 1, 1, "", "series_equal"], [900, 1, 1, "", "set"], [901, 1, 1, "", "set_at_idx"], [902, 1, 1, "", "set_sorted"], [903, 3, 1, "", "shape"], [904, 1, 1, "", "shift"], [905, 1, 1, "", "shift_and_fill"], [906, 1, 1, "", "shrink_dtype"], [907, 1, 1, "", "shrink_to_fit"], [908, 1, 1, "", "shuffle"], [909, 1, 1, "", "sign"], [910, 1, 1, "", "sin"], [911, 1, 1, "", "sinh"], [912, 1, 1, "", "skew"], [913, 1, 1, "", "slice"], [914, 1, 1, "", "sort"], [915, 1, 1, "", "sqrt"], [916, 1, 1, "", "std"], [917, 3, 1, "", "str"], [956, 1, 1, "", "sum"], [957, 1, 1, "", "tail"], [958, 1, 1, "", "take"], [959, 1, 1, "", "take_every"], [960, 1, 1, "", "tan"], [961, 1, 1, "", "tanh"], [962, 3, 1, "", "time_unit"], [963, 1, 1, "", "to_arrow"], [964, 1, 1, "", "to_dummies"], [965, 1, 1, "", "to_frame"], [966, 1, 1, "", "to_init_repr"], [967, 1, 1, "", "to_list"], [968, 1, 1, "", "to_numpy"], [969, 1, 1, "", "to_pandas"], [970, 1, 1, "", "to_physical"], [971, 1, 1, "", "top_k"], [972, 1, 1, "", "unique"], [973, 1, 1, "", "unique_counts"], [974, 1, 1, "", "upper_bound"], [975, 1, 1, "", "value_counts"], [976, 1, 1, "", "var"], [977, 1, 1, "", "view"], [978, 1, 1, "", "zip_with"]], "polars.Series.arr": [[713, 1, 1, "", "arg_max"], [714, 1, 1, "", "arg_min"], [715, 1, 1, "", "concat"], [716, 1, 1, "", "contains"], [717, 1, 1, "", "count_match"], [718, 1, 1, "", "diff"], [719, 1, 1, "", "eval"], [720, 1, 1, "", "explode"], [721, 1, 1, "", "first"], [722, 1, 1, "", "get"], [723, 1, 1, "", "head"], [724, 1, 1, "", "join"], [725, 1, 1, "", "last"], [726, 1, 1, "", "lengths"], [727, 1, 1, "", "max"], [728, 1, 1, "", "mean"], [729, 1, 1, "", "min"], [730, 1, 1, "", "reverse"], [731, 1, 1, "", "shift"], [732, 1, 1, "", "slice"], [733, 1, 1, "", "sort"], [734, 1, 1, "", "sum"], [735, 1, 1, "", "tail"], [736, 1, 1, "", "take"], [737, 1, 1, "", "to_struct"], [738, 1, 1, "", "unique"]], "polars.Series.bin": [[739, 1, 1, "", "contains"], [740, 1, 1, "", "decode"], [741, 1, 1, "", "encode"], [742, 1, 1, "", "ends_with"], [743, 1, 1, "", "starts_with"]], "polars.Series.cat": [[747, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[769, 1, 1, "", "cast_time_unit"], [770, 1, 1, "", "combine"], [771, 1, 1, "", "convert_time_zone"], [772, 1, 1, "", "date"], [773, 1, 1, "", "datetime"], [774, 1, 1, "", "day"], [775, 1, 1, "", "days"], [776, 1, 1, "", "epoch"], [777, 1, 1, "", "hour"], [778, 1, 1, "", "hours"], [779, 1, 1, "", "is_leap_year"], [780, 1, 1, "", "iso_year"], [781, 1, 1, "", "max"], [782, 1, 1, "", "mean"], [783, 1, 1, "", "median"], [784, 1, 1, "", "microsecond"], [785, 1, 1, "", "microseconds"], [786, 1, 1, "", "millisecond"], [787, 1, 1, "", "milliseconds"], [788, 1, 1, "", "min"], [789, 1, 1, "", "minute"], [790, 1, 1, "", "minutes"], [791, 1, 1, "", "month"], [792, 1, 1, "", "month_end"], [793, 1, 1, "", "month_start"], [794, 1, 1, "", "nanosecond"], [795, 1, 1, "", "nanoseconds"], [796, 1, 1, "", "offset_by"], [797, 1, 1, "", "ordinal_day"], [798, 1, 1, "", "quarter"], [799, 1, 1, "", "replace_time_zone"], [800, 1, 1, "", "round"], [801, 1, 1, "", "second"], [802, 1, 1, "", "seconds"], [803, 1, 1, "", "strftime"], [804, 1, 1, "", "time"], [805, 1, 1, "", "timestamp"], [806, 1, 1, "", "to_string"], [807, 1, 1, "", "truncate"], [808, 1, 1, "", "week"], [809, 1, 1, "", "weekday"], [810, 1, 1, "", "with_time_unit"], [811, 1, 1, "", "year"]], "polars.Series.str": [[918, 1, 1, "", "concat"], [919, 1, 1, "", "contains"], [920, 1, 1, "", "count_match"], [921, 1, 1, "", "decode"], [922, 1, 1, "", "encode"], [923, 1, 1, "", "ends_with"], [924, 1, 1, "", "explode"], [925, 1, 1, "", "extract"], [926, 1, 1, "", "extract_all"], [927, 1, 1, "", "json_extract"], [928, 1, 1, "", "json_path_match"], [929, 1, 1, "", "lengths"], [930, 1, 1, "", "ljust"], [931, 1, 1, "", "lstrip"], [932, 1, 1, "", "n_chars"], [933, 1, 1, "", "parse_int"], [934, 1, 1, "", "replace"], [935, 1, 1, "", "replace_all"], [936, 1, 1, "", "rjust"], [937, 1, 1, "", "rstrip"], [938, 1, 1, "", "slice"], [939, 1, 1, "", "split"], [940, 1, 1, "", "split_exact"], [941, 1, 1, "", "splitn"], [942, 1, 1, "", "starts_with"], [943, 1, 1, "", "strip"], [944, 1, 1, "", "strptime"], [945, 1, 1, "", "to_date"], [946, 1, 1, "", "to_datetime"], [947, 1, 1, "", "to_lowercase"], [948, 1, 1, "", "to_time"], [949, 1, 1, "", "to_uppercase"], [950, 1, 1, "", "zfill"]], "polars.Series.struct": [[951, 1, 1, "", "field"], [952, 3, 1, "", "fields"], [953, 1, 1, "", "rename_fields"], [954, 3, 1, "", "schema"], [955, 1, 1, "", "unnest"]], "polars.StringCache": [[53, 1, 1, "", "__init__"]], "polars.Struct": [[54, 1, 1, "", "__init__"]], "polars.Time": [[55, 1, 1, "", "__init__"]], "polars.UInt16": [[56, 1, 1, "", "__init__"]], "polars.UInt32": [[57, 1, 1, "", "__init__"]], "polars.UInt64": [[58, 1, 1, "", "__init__"]], "polars.UInt8": [[59, 1, 1, "", "__init__"]], "polars.Unknown": [[60, 1, 1, "", "__init__"]], "polars.Utf8": [[61, 1, 1, "", "__init__"]], "polars.api": [[63, 4, 1, "", "register_dataframe_namespace"], [64, 4, 1, "", "register_expr_namespace"], [65, 4, 1, "", "register_lazyframe_namespace"], [66, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[232, 1, 1, "", "__iter__"], [233, 1, 1, "", "agg"], [234, 1, 1, "", "all"], [235, 1, 1, "", "apply"], [236, 1, 1, "", "count"], [237, 1, 1, "", "first"], [238, 1, 1, "", "head"], [239, 1, 1, "", "last"], [240, 1, 1, "", "max"], [241, 1, 1, "", "mean"], [242, 1, 1, "", "median"], [243, 1, 1, "", "min"], [244, 1, 1, "", "n_unique"], [245, 1, 1, "", "quantile"], [246, 1, 1, "", "sum"], [247, 1, 1, "", "tail"]], "polars.exceptions": [[74, 5, 1, "", "ArrowError"], [75, 5, 1, "", "ColumnNotFoundError"], [76, 5, 1, "", "ComputeError"], [77, 5, 1, "", "DuplicateError"], [78, 5, 1, "", "InvalidOperationError"], [79, 5, 1, "", "NoDataError"], [80, 5, 1, "", "NoRowsReturnedError"], [81, 5, 1, "", "PolarsPanicError"], [82, 5, 1, "", "RowsError"], [83, 5, 1, "", "SchemaError"], [84, 5, 1, "", "SchemaFieldNotFoundError"], [85, 5, 1, "", "ShapeError"], [86, 5, 1, "", "StructFieldNotFoundError"], [87, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[98, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[673, 1, 1, "", "agg"], [674, 1, 1, "", "all"], [675, 1, 1, "", "apply"], [676, 1, 1, "", "count"], [677, 1, 1, "", "first"], [678, 1, 1, "", "head"], [679, 1, 1, "", "last"], [680, 1, 1, "", "max"], [681, 1, 1, "", "mean"], [682, 1, 1, "", "median"], [683, 1, 1, "", "min"], [684, 1, 1, "", "n_unique"], [685, 1, 1, "", "quantile"], [686, 1, 1, "", "sum"], [687, 1, 1, "", "tail"]], "polars.testing": [[119, 4, 1, "", "assert_frame_equal"], [120, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[121, 0, 1, "", "column"], [122, 4, 1, "", "columns"], [123, 4, 1, "", "create_list_strategy"], [124, 4, 1, "", "dataframes"], [125, 4, 1, "", "load_profile"], [126, 4, 1, "", "series"], [127, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[121, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 147], "api": [1, 63, 64, 65, 66, 604], "provid": 1, "new": 1, "function": [1, 592, 603], "avail": 1, "registr": 1, "exampl": [1, 994], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 994], "binari": [2, 587, 598, 980], "boolean": [3, 588, 981], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 131], "activate_decim": 5, "load": [6, 131], "restore_default": 7, "save": [8, 131], "set_ascii_t": 9, "set_fmt_float": 10, "set_fmt_str_length": 11, "set_streaming_chunk_s": 12, "set_tbl_cell_align": 13, "set_tbl_col": 14, "set_tbl_column_data_type_inlin": 15, "set_tbl_dataframe_shape_below": 16, "set_tbl_format": 17, "set_tbl_hide_column_data_typ": 18, "set_tbl_hide_column_nam": 19, "set_tbl_hide_dataframe_shap": 20, "set_tbl_hide_dtype_separ": 21, "set_tbl_row": 22, "set_tbl_width_char": 23, "set_verbos": 24, "state": [25, 131], "datafram": [26, 27, 28, 29, 30, 31, 32, 33, 124, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 253], "write_avro": 26, "write_csv": 27, "write_databas": 28, "write_excel": 29, "write_ipc": 30, "write_json": [31, 672], "write_ndjson": 32, "write_parquet": 33, "datatyp": 34, "date": [35, 336, 553, 772], "datetim": [36, 337, 554, 773], "decim": 37, "durat": [38, 555], "float32": 39, "float64": 40, "int16": 41, "int32": 42, "int64": 43, "int8": 44, "list": [45, 564, 594, 987], "null": 46, "object": 47, "sqlcontext": [48, 49, 50, 51, 52], "execut": 48, "regist": 49, "register_glob": 50, "register_mani": 51, "unregist": 52, "stringcach": [53, 603], "struct": [54, 516, 517, 581, 600, 951, 952, 953, 954, 955, 991], "time": [55, 364, 584, 804], "uint16": 56, "uint32": 57, "uint64": 58, "uint8": 59, "unknown": 60, "utf8": 61, "align_fram": 62, "register_dataframe_namespac": 63, "register_expr_namespac": 64, "register_lazyframe_namespac": 65, "register_series_namespac": 66, "arg_wher": 67, "build_info": 68, "collect_al": 69, "concat": [70, 282, 483, 715, 918], "cut": [71, 762], "date_rang": 72, "enable_string_cach": 73, "except": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 257], "arrowerror": 74, "columnnotfounderror": 75, "computeerror": 76, "duplicateerror": 77, "invalidoperationerror": 78, "nodataerror": 79, "norowsreturnederror": 80, "polarspanicerror": 81, "rowserror": 82, "schemaerror": 83, "schemafieldnotfounderror": 84, "shapeerror": 85, "structfieldnotfounderror": 86, "toomanyrowsreturnederror": 87, "from_arrow": 88, "from_datafram": 89, "from_dict": [90, 91], "from_numpi": 92, "from_panda": 93, "from_record": 94, "from_repr": 95, "get_dummi": 96, "get_index_typ": 97, "io": 98, "csv": [98, 605], "batched_read": 98, "batchedcsvread": [98, 605], "next_batch": 98, "ones": 99, "read_avro": 100, "read_csv": 101, "read_csv_batch": 102, "read_databas": 103, "read_delta": 104, "read_excel": 105, "read_ipc": 106, "read_ipc_schema": 107, "read_json": [108, 646], "read_ndjson": 109, "read_parquet": 110, "read_parquet_schema": 111, "scan_csv": 112, "scan_delta": 113, "scan_ipc": 114, "scan_ndjson": 115, "scan_parquet": 116, "scan_pyarrow_dataset": 117, "show_vers": 118, "test": [119, 120, 121, 122, 123, 124, 125, 126, 127, 994], "assert_frame_equ": 119, "assert_series_equ": 120, "parametr": [121, 122, 123, 124, 125, 126, 127, 994], "column": [121, 122, 138, 590, 612], "create_list_strategi": 123, "load_profil": 125, "seri": [126, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 986], "set_profil": 127, "threadpool_s": 128, "time_rang": 129, "zero": 130, "option": 131, "current": 131, "us": 131, "context": 131, "manag": 131, "aggreg": [132, 258, 606, 694], "__dataframe__": 133, "appli": [134, 235, 267, 538, 675, 700], "bottom_k": [135, 312, 607, 744], "clear": [136, 609, 750], "clone": [137, 610, 754], "corr": [139, 547], "describ": [140, 763], "drop": [141, 613], "drop_in_plac": 142, "drop_nul": [143, 332, 614, 767], "dtype": [144, 615, 812], "estimated_s": [145, 814], "explod": [146, 287, 379, 489, 617, 720, 819, 924], "fill_nan": [148, 381, 619, 821], "fill_nul": [149, 382, 620, 822], "filter": [150, 383, 621, 823], "find_idx_by_nam": 151, "fold": [152, 559], "frame_equ": 153, "get_column": [154, 155], "glimps": 156, "groupbi": [157, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 252, 624, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690], "groupby_dynam": [158, 625], "groupby_rol": [159, 626], "hash_row": 160, "head": [161, 238, 290, 392, 563, 627, 678, 723, 829], "height": 162, "hstack": 163, "insert_at_idx": 164, "interpol": [165, 395, 629, 833], "is_dupl": [166, 397, 836], "is_empti": [167, 837], "is_uniqu": [168, 407, 851], "item": [169, 853], "iter_row": 170, "iter_slic": 171, "join": [172, 291, 630, 724], "join_asof": [173, 631], "lazi": [174, 603, 633], "limit": [175, 413, 634, 856], "max": [176, 240, 294, 422, 567, 636, 680, 727, 781, 862], "mean": [177, 241, 295, 423, 568, 637, 681, 728, 782, 863], "median": [178, 242, 424, 569, 638, 682, 783, 864], "melt": [179, 639], "merge_sort": [180, 640], "min": [181, 243, 296, 433, 570, 641, 683, 729, 788, 865], "n_chunk": [182, 867], "n_uniqu": [183, 244, 437, 571, 684, 868], "null_count": [184, 441, 642, 873], "partition_bi": 185, "pipe": [186, 445, 643], "pivot": 187, "product": [188, 448, 877], "quantil": [189, 245, 449, 573, 645, 685, 879], "rechunk": [190, 451, 881], "renam": [191, 647, 883], "replac": [192, 499, 934], "replace_at_idx": 193, "revers": [194, 297, 455, 648, 730, 885], "row": [195, 196], "sampl": [197, 467, 897], "schema": [198, 649, 954], "select": [199, 255, 578, 597, 650, 693, 989], "set_sort": [200, 469, 651, 902], "shape": [201, 903], "shift": [202, 298, 470, 652, 731, 904], "shift_and_fil": [203, 471, 653, 905], "shrink_to_fit": [204, 907], "slice": [205, 299, 478, 503, 657, 732, 913, 938], "sort": [206, 300, 479, 658, 733, 914], "std": [207, 482, 580, 659, 916], "sum": [208, 246, 301, 520, 582, 660, 686, 734, 956], "tail": [209, 247, 302, 521, 583, 661, 687, 735, 957], "take_everi": [210, 523, 662, 959], "to_arrow": [211, 963], "to_dict": [212, 213], "to_dummi": [214, 964], "to_init_repr": [215, 966], "to_numpi": [216, 968], "to_panda": [217, 969], "to_seri": 218, "to_struct": [219, 304, 737], "top_k": [220, 527, 663, 971], "transpos": 221, "uniqu": [222, 305, 529, 664, 738, 972], "unnest": [223, 665, 955], "unstack": 224, "updat": [225, 666], "upsampl": 226, "var": [227, 533, 585, 667, 976], "vstack": 228, "width": [229, 668], "with_column": [230, 669], "with_row_count": [231, 671], "__iter__": 232, "agg": [233, 673], "all": [234, 263, 536, 674, 697], "count": [236, 322, 548, 676], "first": [237, 288, 384, 558, 622, 677, 721], "last": [239, 292, 410, 632, 679, 725], "attribut": [248, 688, 979], "comput": [249, 591, 983], "descript": [250, 689, 984], "export": [251, 985], "miscellan": [254, 596, 603, 692, 988], "manipul": [255, 597, 693, 989], "data": 256, "type": 256, "numer": [256, 598], "tempor": [256, 601, 992], "nest": 256, "other": 256, "expr": [259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535], "ab": [259, 695], "add": 260, "agg_group": 261, "alia": [262, 696], "and_": 264, "ani": [265, 537, 698], "append": [266, 699], "approx_uniqu": [268, 539], "arcco": [269, 701], "arccosh": [270, 702], "arcsin": [271, 703], "arcsinh": [272, 704], "arctan": [273, 705], "arctanh": [274, 706], "arg_max": [275, 280, 707, 713], "arg_min": [276, 281, 708, 714], "arg_sort": [277, 709], "arg_tru": [278, 710], "arg_uniqu": [279, 711], "arr": [280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738], "contain": [283, 307, 484, 716, 739, 919], "count_match": [284, 485, 717, 920], "diff": [285, 329, 718, 764], "eval": [286, 719], "get": [289, 722], "length": [293, 494, 726, 929], "take": [303, 522, 736, 958], "backward_fil": 306, "bin": [307, 308, 309, 310, 311, 739, 740, 741, 742, 743], "decod": [308, 486, 740, 921], "encod": [309, 487, 741, 922], "ends_with": [310, 488, 742, 923], "starts_with": [311, 507, 743, 942], "cach": [313, 608], "cast": [314, 745], "cat": [315, 746, 747], "set_ord": [315, 747], "ceil": [316, 748], "clip": [317, 751], "clip_max": [318, 752], "clip_min": [319, 753], "co": [320, 755], "cosh": [321, 756], "cumcount": 323, "cummax": [324, 757], "cummin": [325, 758], "cumprod": [326, 759], "cumsum": [327, 552, 760], "cumulative_ev": [328, 761], "dot": [330, 765], "drop_nan": [331, 766], "dt": [333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811], "cast_time_unit": [333, 769], "combin": [334, 770], "convert_time_zon": [335, 771], "dai": [338, 339, 774, 775], "epoch": [340, 776], "hour": [341, 342, 777, 778], "is_leap_year": [343, 779], "iso_year": [344, 780], "microsecond": [345, 346, 784, 785], "millisecond": [347, 348, 786, 787], "minut": [349, 350, 789, 790], "month": [351, 791], "month_end": [352, 792], "month_start": [353, 793], "nanosecond": [354, 355, 794, 795], "offset_bi": [356, 796], "ordinal_dai": [357, 797], "quarter": [358, 798], "replace_time_zon": [359, 799], "round": [360, 466, 800, 896], "second": [361, 362, 801, 802], "strftime": [363, 803], "timestamp": [365, 805], "to_str": [366, 806], "truncat": [367, 807], "week": [368, 808], "weekdai": [369, 809], "with_time_unit": [370, 810], "year": [371, 811], "entropi": [372, 813], "eq": [373, 425], "ewm_mean": [374, 815], "ewm_std": [375, 816], "ewm_var": [376, 817], "exclud": [377, 557], "exp": [378, 818], "extend_const": [380, 820], "flatten": 385, "floor": [386, 825], "floordiv": 387, "forward_fil": 388, "ge": 389, "gt": 390, "hash": [391, 828], "implod": [393, 831], "inspect": [394, 628], "is_between": [396, 834], "is_finit": [398, 838], "is_first": [399, 839], "is_in": [400, 841], "is_infinit": [401, 842], "is_nan": [402, 844], "is_not": 403, "is_not_nan": [404, 845], "is_not_nul": [405, 846], "is_nul": [406, 847], "keep_nam": 408, "kurtosi": [409, 854], "le": 411, "len": [412, 855], "log": [414, 857], "log10": [415, 858], "log1p": [416, 859], "lower_bound": [417, 860], "lt": 418, "map": [419, 566, 635], "map_alia": 420, "map_dict": [421, 861], "meta": [425, 426, 427, 428, 429, 430, 431, 432, 595], "has_multiple_output": 426, "is_regex_project": 427, "ne": [428, 440], "output_nam": 429, "pop": 430, "root_nam": 431, "undo_alias": 432, "mod": 434, "mode": [435, 866], "mul": 436, "nan_max": [438, 870], "nan_min": [439, 871], "or_": 442, "over": 443, "pct_chang": [444, 874], "pow": 446, "prefix": 447, "rank": [450, 880], "reinterpret": [452, 882], "repeat_bi": 453, "reshap": [454, 884], "rolling_appli": [456, 886], "rolling_max": [457, 887], "rolling_mean": [458, 888], "rolling_median": [459, 889], "rolling_min": [460, 890], "rolling_quantil": [461, 891], "rolling_skew": [462, 892], "rolling_std": [463, 893], "rolling_sum": [464, 894], "rolling_var": [465, 895], "search_sort": [468, 898], "shrink_dtyp": [472, 906], "shuffl": [473, 908], "sign": [474, 909], "sin": [475, 910], "sinh": [476, 911], "skew": [477, 912], "sort_bi": 480, "sqrt": [481, 915], "str": [483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950], "extract": [490, 925], "extract_al": [491, 926], "json_extract": [492, 927], "json_path_match": [493, 928], "ljust": [495, 930], "lstrip": [496, 931], "n_char": [497, 932], "parse_int": [498, 933], "replace_al": [500, 935], "rjust": [501, 936], "rstrip": [502, 937], "split": [504, 939], "split_exact": [505, 940], "splitn": [506, 941], "strip": [508, 943], "strptime": [509, 944], "to_dat": [510, 945], "to_datetim": [511, 946], "to_lowercas": [512, 947], "to_tim": [513, 948], "to_uppercas": [514, 949], "zfill": [515, 950], "field": [516, 951, 952], "rename_field": [517, 953], "sub": 518, "suffix": 519, "tan": [524, 960], "tanh": [525, 961], "to_phys": [526, 970], "truediv": 528, "unique_count": [530, 973], "upper_bound": [531, 974], "value_count": [532, 975], "where": 534, "xor": 535, "arang": 540, "arg_sort_bi": 541, "avg": 542, "coalesc": 543, "col": 544, "concat_list": 545, "concat_str": 546, "cov": 549, "cumfold": 550, "cumreduc": 551, "element": 556, "format": 560, "from_epoch": 561, "group": 562, "lit": 565, "pearson_corr": 572, "reduc": 574, "repeat": 575, "rolling_corr": 576, "rolling_cov": 577, "spearman_rank_corr": 579, "when": 586, "categori": [589, 982], "name": [590, 869], "express": 593, "oper": 598, "conjunct": 598, "comparison": 598, "string": [599, 990], "window": 602, "convers": 603, "eager": 603, "parallel": 603, "refer": 604, "input": 605, "output": 605, "feather": 605, "ipc": 605, "parquet": 605, "databas": 605, "json": 605, "avro": 605, "excel": 605, "delta": 605, "lake": 605, "dataset": 605, "lazyfram": [607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691], "collect": 611, "explain": 616, "fetch": 618, "from_json": 623, "profil": [644, 994], "show_graph": 654, "sink_ipc": 655, "sink_parquet": 656, "with_context": 670, "lazygroupbi": [673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687], "read": 692, "write": 692, "logic": 692, "plan": 692, "chunk_length": 749, "flag": 824, "get_chunk": 826, "has_valid": 827, "hist": 830, "inner_dtyp": 832, "is_boolean": 835, "is_float": 840, "is_integ": 843, "is_numer": 848, "is_sort": 849, "is_tempor": 850, "is_utf8": 852, "new_from_index": 872, "peak_max": 875, "peak_min": 876, "qcut": 878, "series_equ": 899, "set": 900, "set_at_idx": 901, "time_unit": 962, "to_fram": 965, "to_list": 967, "view": 977, "zip_with": 978, "sql": 993, "method": 993, "assert": 994, "primit": 994, "strategi": 994, "helper": 994, "util": 995}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.DataFrame.corr": [[139, "polars-dataframe-corr"]], "polars.exceptions.SchemaError": [[83, "polars-exceptions-schemaerror"]], "polars.DataFrame.clone": [[137, "polars-dataframe-clone"]], "polars.scan_csv": [[112, "polars-scan-csv"]], "Config": [[131, "config"]], "Config options": [[131, "config-options"]], "Config load, save, and current state": [[131, "config-load-save-and-current-state"]], "Use as a context manager": [[131, "use-as-a-context-manager"]], "polars.scan_parquet": [[116, "polars-scan-parquet"]], "polars.exceptions.PolarsPanicError": [[81, "polars-exceptions-polarspanicerror"]], "polars.from_arrow": [[88, "polars-from-arrow"]], "polars.DataFrame.__dataframe__": [[133, "polars-dataframe-dataframe"]], "polars.read_json": [[108, "polars-read-json"]], "polars.from_records": [[94, "polars-from-records"]], "polars.read_ipc": [[106, "polars-read-ipc"]], "polars.date_range": [[72, "polars-date-range"]], "polars.testing.assert_series_equal": [[120, "polars-testing-assert-series-equal"]], "polars.from_dataframe": [[89, "polars-from-dataframe"]], "polars.testing.assert_frame_equal": [[119, "polars-testing-assert-frame-equal"]], "polars.exceptions.InvalidOperationError": [[78, "polars-exceptions-invalidoperationerror"]], "polars.DataFrame.bottom_k": [[135, "polars-dataframe-bottom-k"]], "polars.enable_string_cache": [[73, "polars-enable-string-cache"]], "polars.from_pandas": [[93, "polars-from-pandas"]], "polars.read_excel": [[105, "polars-read-excel"]], "polars.get_index_type": [[97, "polars-get-index-type"]], "polars.from_dict": [[90, "polars-from-dict"]], "polars.DataFrame.columns": [[138, "polars-dataframe-columns"]], "polars.read_csv": [[101, "polars-read-csv"]], "polars.read_ndjson": [[109, "polars-read-ndjson"]], "polars.exceptions.ComputeError": [[76, "polars-exceptions-computeerror"]], "polars.scan_ipc": [[114, "polars-scan-ipc"]], "polars.read_csv_batched": [[102, "polars-read-csv-batched"]], "polars.concat": [[70, "polars-concat"]], "polars.read_parquet": [[110, "polars-read-parquet"]], "polars.scan_ndjson": [[115, "polars-scan-ndjson"]], "polars.exceptions.DuplicateError": [[77, "polars-exceptions-duplicateerror"]], "polars.get_dummies": [[96, "polars-get-dummies"]], "polars.read_avro": [[100, "polars-read-avro"]], "polars.exceptions.ShapeError": [[85, "polars-exceptions-shapeerror"]], "polars.testing.parametric.series": [[126, "polars-testing-parametric-series"]], "polars.from_repr": [[95, "polars-from-repr"]], "polars.zeros": [[130, "polars-zeros"]], "polars.exceptions.NoRowsReturnedError": [[80, "polars-exceptions-norowsreturnederror"]], "polars.show_versions": [[118, "polars-show-versions"]], "polars.exceptions.ArrowError": [[74, "polars-exceptions-arrowerror"]], "polars.scan_pyarrow_dataset": [[117, "polars-scan-pyarrow-dataset"]], "polars.ones": [[99, "polars-ones"]], "polars.threadpool_size": [[128, "polars-threadpool-size"]], "polars.read_database": [[103, "polars-read-database"]], "Aggregation": [[132, "aggregation"], [694, "aggregation"], [606, "aggregation"], [258, "aggregation"]], "polars.from_dicts": [[91, "polars-from-dicts"]], "polars.testing.parametric.columns": [[122, "polars-testing-parametric-columns"]], "polars.read_delta": [[104, "polars-read-delta"]], "polars.DataFrame.apply": [[134, "polars-dataframe-apply"]], "polars.exceptions.NoDataError": [[79, "polars-exceptions-nodataerror"]], "polars.scan_delta": [[113, "polars-scan-delta"]], "polars.testing.parametric.create_list_strategy": [[123, "polars-testing-parametric-create-list-strategy"]], "polars.exceptions.StructFieldNotFoundError": [[86, "polars-exceptions-structfieldnotfounderror"]], "polars.testing.parametric.load_profile": [[125, "polars-testing-parametric-load-profile"]], "polars.time_range": [[129, "polars-time-range"]], "polars.testing.parametric.set_profile": [[127, "polars-testing-parametric-set-profile"]], "polars.exceptions.ColumnNotFoundError": [[75, "polars-exceptions-columnnotfounderror"]], "polars.cut": [[71, "polars-cut"]], "polars.testing.parametric.column": [[121, "polars-testing-parametric-column"]], "polars.read_parquet_schema": [[111, "polars-read-parquet-schema"]], "polars.exceptions.SchemaFieldNotFoundError": [[84, "polars-exceptions-schemafieldnotfounderror"]], "polars.from_numpy": [[92, "polars-from-numpy"]], "polars.DataFrame.clear": [[136, "polars-dataframe-clear"]], "polars.read_ipc_schema": [[107, "polars-read-ipc-schema"]], "polars.testing.parametric.dataframes": [[124, "polars-testing-parametric-dataframes"]], "polars.exceptions.TooManyRowsReturnedError": [[87, "polars-exceptions-toomanyrowsreturnederror"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[98, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.exceptions.RowsError": [[82, "polars-exceptions-rowserror"]], "polars.Config.set_tbl_cols": [[14, "polars-config-set-tbl-cols"]], "polars.SQLContext.register_globals": [[50, "polars-sqlcontext-register-globals"]], "polars.Config.set_tbl_formatting": [[17, "polars-config-set-tbl-formatting"]], "polars.SQLContext.register": [[49, "polars-sqlcontext-register"]], "polars.StringCache": [[53, "polars-stringcache"]], "polars.Utf8": [[61, "polars-utf8"]], "polars.DataFrame.write_ipc": [[30, "polars-dataframe-write-ipc"]], "polars.SQLContext.register_many": [[51, "polars-sqlcontext-register-many"]], "polars.api.register_expr_namespace": [[64, "polars-api-register-expr-namespace"]], "polars.SQLContext.unregister": [[52, "polars-sqlcontext-unregister"]], "polars.Config.set_fmt_float": [[10, "polars-config-set-fmt-float"]], "polars.SQLContext.execute": [[48, "polars-sqlcontext-execute"]], "polars.Config.restore_defaults": [[7, "polars-config-restore-defaults"]], "polars.Time": [[55, "polars-time"]], "polars.UInt32": [[57, "polars-uint32"]], "polars.UInt64": [[58, "polars-uint64"]], "polars.UInt8": [[59, "polars-uint8"]], "polars.Struct": [[54, "polars-struct"]], "polars.Config.set_tbl_hide_dataframe_shape": [[20, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_hide_column_data_types": [[18, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.state": [[25, "polars-config-state"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.Config.set_tbl_hide_column_names": [[19, "polars-config-set-tbl-hide-column-names"]], "polars.DataFrame.write_excel": [[29, "polars-dataframe-write-excel"]], "polars.Int8": [[44, "polars-int8"]], "polars.Date": [[35, "polars-date"]], "polars.api.register_dataframe_namespace": [[63, "polars-api-register-dataframe-namespace"]], "polars.Config.set_streaming_chunk_size": [[12, "polars-config-set-streaming-chunk-size"]], "polars.collect_all": [[69, "polars-collect-all"]], "polars.DataFrame.write_avro": [[26, "polars-dataframe-write-avro"]], "polars.api.register_lazyframe_namespace": [[65, "polars-api-register-lazyframe-namespace"]], "polars.Binary": [[2, "polars-binary"]], "polars.align_frames": [[62, "polars-align-frames"]], "polars.Config.set_tbl_column_data_type_inline": [[15, "polars-config-set-tbl-column-data-type-inline"]], "polars.DataFrame.write_database": [[28, "polars-dataframe-write-database"]], "polars.DataFrame.write_ndjson": [[32, "polars-dataframe-write-ndjson"]], "polars.Decimal": [[37, "polars-decimal"]], "polars.Null": [[46, "polars-null"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Config.activate_decimals": [[5, "polars-config-activate-decimals"]], "polars.DataFrame.write_parquet": [[33, "polars-dataframe-write-parquet"]], "polars.DataType": [[34, "polars-datatype"]], "polars.Float32": [[39, "polars-float32"]], "polars.List": [[45, "polars-list"]], "polars.Config.set_verbose": [[24, "polars-config-set-verbose"]], "polars.Int32": [[42, "polars-int32"]], "polars.api.register_series_namespace": [[66, "polars-api-register-series-namespace"]], "polars.Unknown": [[60, "polars-unknown"]], "polars.Config.set_ascii_tables": [[9, "polars-config-set-ascii-tables"]], "polars.Config.set_tbl_dataframe_shape_below": [[16, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Datetime": [[36, "polars-datetime"]], "polars.Duration": [[38, "polars-duration"]], "polars.Config.set_tbl_width_chars": [[23, "polars-config-set-tbl-width-chars"]], "polars.Config.save": [[8, "polars-config-save"]], "polars.Config.set_tbl_hide_dtype_separator": [[21, "polars-config-set-tbl-hide-dtype-separator"]], "polars.UInt16": [[56, "polars-uint16"]], "polars.build_info": [[68, "polars-build-info"]], "polars.arg_where": [[67, "polars-arg-where"]], "polars.Config.load": [[6, "polars-config-load"]], "polars.Float64": [[40, "polars-float64"]], "polars.Config.set_fmt_str_lengths": [[11, "polars-config-set-fmt-str-lengths"]], "polars.DataFrame.write_json": [[31, "polars-dataframe-write-json"]], "polars.Int64": [[43, "polars-int64"]], "polars.DataFrame.write_csv": [[27, "polars-dataframe-write-csv"]], "polars.Object": [[47, "polars-object"]], "polars.Config.set_tbl_cell_alignment": [[13, "polars-config-set-tbl-cell-alignment"]], "polars.Int16": [[41, "polars-int16"]], "polars.Config.set_tbl_rows": [[22, "polars-config-set-tbl-rows"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [994, "examples"]], "polars.Series.str.json_extract": [[927, "polars-series-str-json-extract"]], "polars.Series.unique": [[972, "polars-series-unique"]], "polars.Series.tail": [[957, "polars-series-tail"]], "polars.Series.take": [[958, "polars-series-take"]], "polars.Series.to_init_repr": [[966, "polars-series-to-init-repr"]], "polars.Series.unique_counts": [[973, "polars-series-unique-counts"]], "polars.Series.str.n_chars": [[932, "polars-series-str-n-chars"]], "polars.Series.str.to_datetime": [[946, "polars-series-str-to-datetime"]], "polars.Series.str.starts_with": [[942, "polars-series-str-starts-with"]], "polars.Series.struct.schema": [[954, "polars-series-struct-schema"]], "polars.Series.tanh": [[961, "polars-series-tanh"]], "polars.Series.str.ljust": [[930, "polars-series-str-ljust"]], "polars.Series.str.lstrip": [[931, "polars-series-str-lstrip"]], "polars.Series.str.explode": [[924, "polars-series-str-explode"]], "polars.Series.str.strptime": [[944, "polars-series-str-strptime"]], "polars.Series.tan": [[960, "polars-series-tan"]], "polars.Series.str.extract": [[925, "polars-series-str-extract"]], "polars.Series.upper_bound": [[974, "polars-series-upper-bound"]], "polars.Series.value_counts": [[975, "polars-series-value-counts"]], "polars.Series.skew": [[912, "polars-series-skew"]], "polars.Series.struct.unnest": [[955, "polars-series-struct-unnest"]], "Attributes": [[979, "attributes"], [688, "attributes"], [248, "attributes"]], "polars.Series.str.to_lowercase": [[947, "polars-series-str-to-lowercase"]], "polars.Series.sort": [[914, "polars-series-sort"]], "polars.Series.sum": [[956, "polars-series-sum"]], "polars.Series.str.ends_with": [[923, "polars-series-str-ends-with"]], "polars.Series.sqrt": [[915, "polars-series-sqrt"]], "polars.Series.str.lengths": [[929, "polars-series-str-lengths"]], "polars.Series.struct.fields": [[952, "polars-series-struct-fields"]], "polars.Series.struct.field": [[951, "polars-series-struct-field"]], "polars.Series.to_frame": [[965, "polars-series-to-frame"]], "polars.Series.str.split": [[939, "polars-series-str-split"]], "polars.Series.str.count_match": [[920, "polars-series-str-count-match"]], "polars.Series.to_dummies": [[964, "polars-series-to-dummies"]], "polars.Series.sin": [[910, "polars-series-sin"]], "polars.Series.to_pandas": [[969, "polars-series-to-pandas"]], "polars.Series.to_physical": [[970, "polars-series-to-physical"]], "polars.Series.top_k": [[971, "polars-series-top-k"]], "polars.Series.str.splitn": [[941, "polars-series-str-splitn"]], "polars.Series.str.concat": [[918, "polars-series-str-concat"]], "polars.Series.take_every": [[959, "polars-series-take-every"]], "polars.Series.slice": [[913, "polars-series-slice"]], "polars.Series.to_list": [[967, "polars-series-to-list"]], "polars.Series.zip_with": [[978, "polars-series-zip-with"]], "polars.Series.str.split_exact": [[940, "polars-series-str-split-exact"]], "polars.Series.str.contains": [[919, "polars-series-str-contains"]], "polars.Series.sinh": [[911, "polars-series-sinh"]], "polars.Series.str.zfill": [[950, "polars-series-str-zfill"]], "polars.Series.str.rjust": [[936, "polars-series-str-rjust"]], "polars.Series.str.rstrip": [[937, "polars-series-str-rstrip"]], "polars.Series.str.decode": [[921, "polars-series-str-decode"]], "polars.Series.str.replace": [[934, "polars-series-str-replace"]], "polars.Series.str.to_time": [[948, "polars-series-str-to-time"]], "polars.Series.str.to_date": [[945, "polars-series-str-to-date"]], "polars.Series.str.to_uppercase": [[949, "polars-series-str-to-uppercase"]], "polars.Series.std": [[916, "polars-series-std"]], "polars.Series.to_arrow": [[963, "polars-series-to-arrow"]], "polars.Series.time_unit": [[962, "polars-series-time-unit"]], "polars.Series.str.strip": [[943, "polars-series-str-strip"]], "polars.Series.str.parse_int": [[933, "polars-series-str-parse-int"]], "polars.Series.to_numpy": [[968, "polars-series-to-numpy"]], "polars.Series.var": [[976, "polars-series-var"]], "polars.Series.view": [[977, "polars-series-view"]], "polars.Series.struct.rename_fields": [[953, "polars-series-struct-rename-fields"]], "polars.Series.str.json_path_match": [[928, "polars-series-str-json-path-match"]], "polars.Series.str.extract_all": [[926, "polars-series-str-extract-all"]], "polars.Series.str.encode": [[922, "polars-series-str-encode"]], "polars.Series.str.slice": [[938, "polars-series-str-slice"]], "polars.Series.str": [[917, "polars-series-str"]], "polars.Series.str.replace_all": [[935, "polars-series-str-replace-all"]], "polars.Series.reverse": [[885, "polars-series-reverse"]], "polars.Series.mean": [[863, "polars-series-mean"]], "polars.Series.rolling_mean": [[888, "polars-series-rolling-mean"]], "polars.Series.search_sorted": [[898, "polars-series-search-sorted"]], "polars.Series.sample": [[897, "polars-series-sample"]], "polars.Series.n_chunks": [[867, "polars-series-n-chunks"]], "polars.Series.peak_min": [[876, "polars-series-peak-min"]], "polars.Series.set": [[900, "polars-series-set"]], "polars.Series.rolling_sum": [[894, "polars-series-rolling-sum"]], "polars.Series.set_sorted": [[902, "polars-series-set-sorted"]], "polars.Series.log": [[857, "polars-series-log"]], "polars.Series.kurtosis": [[854, "polars-series-kurtosis"]], "polars.Series.is_infinite": [[842, "polars-series-is-infinite"]], "polars.Series.shrink_to_fit": [[907, "polars-series-shrink-to-fit"]], "polars.Series.rolling_std": [[893, "polars-series-rolling-std"]], "polars.Series.min": [[865, "polars-series-min"]], "polars.Series.reshape": [[884, "polars-series-reshape"]], "polars.Series.rolling_quantile": [[891, "polars-series-rolling-quantile"]], "polars.Series.rolling_skew": [[892, "polars-series-rolling-skew"]], "polars.Series.log10": [[858, "polars-series-log10"]], "polars.Series.quantile": [[879, "polars-series-quantile"]], "polars.Series.is_numeric": [[848, "polars-series-is-numeric"]], "polars.Series.is_nan": [[844, "polars-series-is-nan"]], "polars.Series.len": [[855, "polars-series-len"]], "polars.Series.is_in": [[841, "polars-series-is-in"]], "polars.Series.is_float": [[840, "polars-series-is-float"]], "polars.Series.max": [[862, "polars-series-max"]], "polars.Series.is_sorted": [[849, "polars-series-is-sorted"]], "polars.Series.pct_change": [[874, "polars-series-pct-change"]], "polars.Series.rolling_apply": [[886, "polars-series-rolling-apply"]], "polars.Series.is_not_nan": [[845, "polars-series-is-not-nan"]], "polars.Series.rolling_max": [[887, "polars-series-rolling-max"]], "polars.Series.lower_bound": [[860, "polars-series-lower-bound"]], "polars.Series.item": [[853, "polars-series-item"]], "polars.Series.limit": [[856, "polars-series-limit"]], "polars.Series.is_utf8": [[852, "polars-series-is-utf8"]], "polars.Series.log1p": [[859, "polars-series-log1p"]], "polars.Series.sign": [[909, "polars-series-sign"]], "polars.Series.rechunk": [[881, "polars-series-rechunk"]], "polars.Series.qcut": [[878, "polars-series-qcut"]], "polars.Series.nan_min": [[871, "polars-series-nan-min"]], "polars.Series.new_from_index": [[872, "polars-series-new-from-index"]], "polars.Series.median": [[864, "polars-series-median"]], "polars.Series.rename": [[883, "polars-series-rename"]], "polars.Series.map_dict": [[861, "polars-series-map-dict"]], "polars.Series.nan_max": [[870, "polars-series-nan-max"]], "polars.Series.rolling_min": [[890, "polars-series-rolling-min"]], "polars.Series.is_null": [[847, "polars-series-is-null"]], "polars.Series.shrink_dtype": [[906, "polars-series-shrink-dtype"]], "polars.Series.product": [[877, "polars-series-product"]], "polars.Series.shape": [[903, "polars-series-shape"]], "polars.Series.is_not_null": [[846, "polars-series-is-not-null"]], "polars.Series.mode": [[866, "polars-series-mode"]], "polars.Series.name": [[869, "polars-series-name"]], "polars.Series.is_integer": [[843, "polars-series-is-integer"]], "polars.Series.reinterpret": [[882, "polars-series-reinterpret"]], "polars.Series.n_unique": [[868, "polars-series-n-unique"]], "polars.Series.is_unique": [[851, "polars-series-is-unique"]], "polars.Series.shift": [[904, "polars-series-shift"]], "polars.Series.shift_and_fill": [[905, "polars-series-shift-and-fill"]], "polars.Series.rolling_var": [[895, "polars-series-rolling-var"]], "polars.Series.peak_max": [[875, "polars-series-peak-max"]], "polars.Series.shuffle": [[908, "polars-series-shuffle"]], "polars.Series.round": [[896, "polars-series-round"]], "polars.Series.null_count": [[873, "polars-series-null-count"]], "polars.Series.rolling_median": [[889, "polars-series-rolling-median"]], "polars.Series.is_temporal": [[850, "polars-series-is-temporal"]], "polars.Series.series_equal": [[899, "polars-series-series-equal"]], "polars.Series.set_at_idx": [[901, "polars-series-set-at-idx"]], "polars.Series.rank": [[880, "polars-series-rank"]], "polars.Series.dt.mean": [[782, "polars-series-dt-mean"]], "polars.Series.dt.round": [[800, "polars-series-dt-round"]], "polars.Series.ewm_var": [[817, "polars-series-ewm-var"]], "polars.Series.dt.month_start": [[793, "polars-series-dt-month-start"]], "polars.Series.dt.timestamp": [[805, "polars-series-dt-timestamp"]], "polars.Series.dt.to_string": [[806, "polars-series-dt-to-string"]], "polars.Series.dt.replace_time_zone": [[799, "polars-series-dt-replace-time-zone"]], "polars.Series.entropy": [[813, "polars-series-entropy"]], "polars.Series.dt.seconds": [[802, "polars-series-dt-seconds"]], "polars.Series.interpolate": [[833, "polars-series-interpolate"]], "polars.Series.extend_constant": [[820, "polars-series-extend-constant"]], "polars.Series.implode": [[831, "polars-series-implode"]], "polars.Series.dt.week": [[808, "polars-series-dt-week"]], "polars.Series.dt.microsecond": [[784, "polars-series-dt-microsecond"]], "polars.Series.dtype": [[812, "polars-series-dtype"]], "polars.Series.explode": [[819, "polars-series-explode"]], "polars.Series.head": [[829, "polars-series-head"]], "polars.Series.dt.day": [[774, "polars-series-dt-day"]], "polars.Series.get_chunks": [[826, "polars-series-get-chunks"]], "polars.Series.hist": [[830, "polars-series-hist"]], "polars.Series.dt.quarter": [[798, "polars-series-dt-quarter"]], "polars.Series.is_between": [[834, "polars-series-is-between"]], "polars.Series.dt.minutes": [[790, "polars-series-dt-minutes"]], "polars.Series.dt.convert_time_zone": [[771, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.hours": [[778, "polars-series-dt-hours"]], "polars.Series.dt.month": [[791, "polars-series-dt-month"]], "polars.Series.dt.datetime": [[773, "polars-series-dt-datetime"]], "polars.Series.has_validity": [[827, "polars-series-has-validity"]], "polars.Series.dt.millisecond": [[786, "polars-series-dt-millisecond"]], "polars.Series.dt.epoch": [[776, "polars-series-dt-epoch"]], "polars.Series.dt.max": [[781, "polars-series-dt-max"]], "polars.Series.flags": [[824, "polars-series-flags"]], "polars.Series.dt.minute": [[789, "polars-series-dt-minute"]], "polars.Series.is_finite": [[838, "polars-series-is-finite"]], "polars.Series.dt.month_end": [[792, "polars-series-dt-month-end"]], "polars.Series.dt.year": [[811, "polars-series-dt-year"]], "polars.Series.dt.min": [[788, "polars-series-dt-min"]], "polars.Series.dt.nanoseconds": [[795, "polars-series-dt-nanoseconds"]], "polars.Series.dt.milliseconds": [[787, "polars-series-dt-milliseconds"]], "polars.Series.dt.strftime": [[803, "polars-series-dt-strftime"]], "polars.Series.dt.weekday": [[809, "polars-series-dt-weekday"]], "polars.Series.ewm_std": [[816, "polars-series-ewm-std"]], "polars.Series.fill_null": [[822, "polars-series-fill-null"]], "polars.Series.filter": [[823, "polars-series-filter"]], "polars.Series.is_boolean": [[835, "polars-series-is-boolean"]], "polars.Series.dt.nanosecond": [[794, "polars-series-dt-nanosecond"]], "polars.Series.inner_dtype": [[832, "polars-series-inner-dtype"]], "polars.Series.dt.ordinal_day": [[797, "polars-series-dt-ordinal-day"]], "polars.Series.exp": [[818, "polars-series-exp"]], "polars.Series.hash": [[828, "polars-series-hash"]], "polars.Series.dt.days": [[775, "polars-series-dt-days"]], "polars.Series.dt.with_time_unit": [[810, "polars-series-dt-with-time-unit"]], "polars.Series.dt.time": [[804, "polars-series-dt-time"]], "polars.Series.floor": [[825, "polars-series-floor"]], "polars.Series.is_duplicated": [[836, "polars-series-is-duplicated"]], "polars.Series.estimated_size": [[814, "polars-series-estimated-size"]], "polars.Series.is_empty": [[837, "polars-series-is-empty"]], "polars.Series.dt.hour": [[777, "polars-series-dt-hour"]], "polars.Series.dt.microseconds": [[785, "polars-series-dt-microseconds"]], "polars.Series.dt.combine": [[770, "polars-series-dt-combine"]], "polars.Series.dt.date": [[772, "polars-series-dt-date"]], "polars.Series.dt.iso_year": [[780, "polars-series-dt-iso-year"]], "polars.Series.dt.is_leap_year": [[779, "polars-series-dt-is-leap-year"]], "polars.Series.dt.second": [[801, "polars-series-dt-second"]], "polars.Series.ewm_mean": [[815, "polars-series-ewm-mean"]], "polars.Series.dt.median": [[783, "polars-series-dt-median"]], "polars.Series.fill_nan": [[821, "polars-series-fill-nan"]], "polars.Series.dt.truncate": [[807, "polars-series-dt-truncate"]], "polars.Series.dt.offset_by": [[796, "polars-series-dt-offset-by"]], "polars.Series.is_first": [[839, "polars-series-is-first"]], "polars.Series.arg_true": [[710, "polars-series-arg-true"]], "polars.Series.cummin": [[758, "polars-series-cummin"]], "polars.Series.arctan": [[705, "polars-series-arctan"]], "polars.Series.drop_nans": [[766, "polars-series-drop-nans"]], "polars.Series.clone": [[754, "polars-series-clone"]], "polars.Series.arr": [[712, "polars-series-arr"]], "polars.Series.arr.sum": [[734, "polars-series-arr-sum"]], "polars.Series.cosh": [[756, "polars-series-cosh"]], "polars.Series.bin.starts_with": [[743, "polars-series-bin-starts-with"]], "polars.Series.dt.cast_time_unit": [[769, "polars-series-dt-cast-time-unit"]], "polars.Series.clip": [[751, "polars-series-clip"]], "polars.Series.bin.decode": [[740, "polars-series-bin-decode"]], "polars.Series.arr.lengths": [[726, "polars-series-arr-lengths"]], "polars.Series.arccos": [[701, "polars-series-arccos"]], "polars.Series.cast": [[745, "polars-series-cast"]], "polars.Series.cumulative_eval": [[761, "polars-series-cumulative-eval"]], "polars.Series.drop_nulls": [[767, "polars-series-drop-nulls"]], "polars.Series.arcsin": [[703, "polars-series-arcsin"]], "polars.Series.bin.ends_with": [[742, "polars-series-bin-ends-with"]], "polars.Series.arr.arg_max": [[713, "polars-series-arr-arg-max"]], "polars.Series.arr.join": [[724, "polars-series-arr-join"]], "polars.Series.arr.reverse": [[730, "polars-series-arr-reverse"]], "polars.Series.arr.to_struct": [[737, "polars-series-arr-to-struct"]], "polars.Series.arr.max": [[727, "polars-series-arr-max"]], "polars.Series.arcsinh": [[704, "polars-series-arcsinh"]], "polars.Series.arr.first": [[721, "polars-series-arr-first"]], "polars.Series.arr.last": [[725, "polars-series-arr-last"]], "polars.Series.arr.contains": [[716, "polars-series-arr-contains"]], "polars.Series.cos": [[755, "polars-series-cos"]], "polars.Series.arctanh": [[706, "polars-series-arctanh"]], "polars.Series.bin.encode": [[741, "polars-series-bin-encode"]], "polars.Series.cat.set_ordering": [[747, "polars-series-cat-set-ordering"]], "polars.Series.cut": [[762, "polars-series-cut"]], "polars.Series.apply": [[700, "polars-series-apply"]], "polars.Series.bin.contains": [[739, "polars-series-bin-contains"]], "polars.Series.diff": [[764, "polars-series-diff"]], "polars.Series.arg_unique": [[711, "polars-series-arg-unique"]], "polars.Series.cumsum": [[760, "polars-series-cumsum"]], "polars.Series.clip_min": [[753, "polars-series-clip-min"]], "polars.Series.arg_sort": [[709, "polars-series-arg-sort"]], "polars.Series.bottom_k": [[744, "polars-series-bottom-k"]], "polars.Series.arr.mean": [[728, "polars-series-arr-mean"]], "polars.Series.dot": [[765, "polars-series-dot"]], "polars.Series.dt": [[768, "polars-series-dt"]], "polars.Series.arr.tail": [[735, "polars-series-arr-tail"]], "polars.Series.arr.sort": [[733, "polars-series-arr-sort"]], "polars.Series.cummax": [[757, "polars-series-cummax"]], "polars.Series.arr.arg_min": [[714, "polars-series-arr-arg-min"]], "polars.Series.arr.unique": [[738, "polars-series-arr-unique"]], "polars.Series.arr.explode": [[720, "polars-series-arr-explode"]], "polars.Series.describe": [[763, "polars-series-describe"]], "polars.Series.arr.take": [[736, "polars-series-arr-take"]], "polars.Series.arr.count_match": [[717, "polars-series-arr-count-match"]], "polars.Series.clear": [[750, "polars-series-clear"]], "polars.Series.arr.shift": [[731, "polars-series-arr-shift"]], "polars.Series.ceil": [[748, "polars-series-ceil"]], "polars.Series.cumprod": [[759, "polars-series-cumprod"]], "polars.Series.arr.head": [[723, "polars-series-arr-head"]], "polars.Series.arg_max": [[707, "polars-series-arg-max"]], "polars.Series.clip_max": [[752, "polars-series-clip-max"]], "polars.Series.arr.get": [[722, "polars-series-arr-get"]], "polars.Series.arr.concat": [[715, "polars-series-arr-concat"]], "polars.Series.arr.diff": [[718, "polars-series-arr-diff"]], "polars.Series.cat": [[746, "polars-series-cat"]], "polars.Series.arg_min": [[708, "polars-series-arg-min"]], "polars.Series.arr.eval": [[719, "polars-series-arr-eval"]], "polars.Series.chunk_lengths": [[749, "polars-series-chunk-lengths"]], "polars.Series.arr.slice": [[732, "polars-series-arr-slice"]], "polars.Series.arr.min": [[729, "polars-series-arr-min"]], "polars.Series.arccosh": [[702, "polars-series-arccosh"]], "Temporal": [[992, "temporal"], [601, "temporal"], [256, "temporal"]], "Series": [[986, "series"]], "List": [[987, "list"], [594, "list"]], "Descriptive": [[984, "descriptive"], [689, "descriptive"], [250, "descriptive"]], "Manipulation/selection": [[989, "manipulation-selection"], [693, "manipulation-selection"], [597, "manipulation-selection"], [255, "manipulation-selection"]], "Categories": [[982, "categories"], [589, "categories"]], "SQL": [[993, "sql"]], "Methods": [[993, "methods"]], "Binary": [[980, "binary"], [587, "binary"], [598, "binary"]], "Computation": [[983, "computation"], [591, "computation"], [249, "computation"]], "Export": [[985, "export"], [251, "export"]], "String": [[990, "string"], [599, "string"]], "Testing": [[994, "testing"]], "Asserts": [[994, "asserts"]], "Parametric testing": [[994, "parametric-testing"]], "Polars primitives": [[994, "polars-primitives"]], "Strategy helpers": [[994, "strategy-helpers"]], "Profiles": [[994, "profiles"]], "Struct": [[991, "struct"], [600, "struct"]], "Utils": [[995, "utils"]], "Miscellaneous": [[988, "miscellaneous"], [692, "miscellaneous"], [603, "miscellaneous"], [596, "miscellaneous"], [254, "miscellaneous"]], "Boolean": [[981, "boolean"], [588, "boolean"]], "polars.LazyFrame.set_sorted": [[651, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.slice": [[657, "polars-lazyframe-slice"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[673, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.LazyFrame.null_count": [[642, "polars-lazyframe-null-count"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[677, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.LazyFrame.width": [[668, "polars-lazyframe-width"]], "polars.LazyFrame.with_context": [[670, "polars-lazyframe-with-context"]], "polars.LazyFrame.max": [[636, "polars-lazyframe-max"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[678, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.LazyFrame.sort": [[658, "polars-lazyframe-sort"]], "polars.LazyFrame.map": [[635, "polars-lazyframe-map"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[686, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.LazyFrame.unique": [[664, "polars-lazyframe-unique"]], "polars.LazyFrame.limit": [[634, "polars-lazyframe-limit"]], "polars.LazyFrame.min": [[641, "polars-lazyframe-min"]], "polars.LazyFrame.std": [[659, "polars-lazyframe-std"]], "polars.LazyFrame.write_json": [[672, "polars-lazyframe-write-json"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[685, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.Series.abs": [[695, "polars-series-abs"]], "polars.LazyFrame.tail": [[661, "polars-lazyframe-tail"]], "GroupBy": [[690, "groupby"], [252, "groupby"]], "polars.LazyFrame.reverse": [[648, "polars-lazyframe-reverse"]], "polars.LazyFrame.take_every": [[662, "polars-lazyframe-take-every"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[681, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.LazyFrame.show_graph": [[654, "polars-lazyframe-show-graph"]], "polars.LazyFrame.median": [[638, "polars-lazyframe-median"]], "polars.LazyFrame.update": [[666, "polars-lazyframe-update"]], "polars.LazyFrame.shift_and_fill": [[653, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.schema": [[649, "polars-lazyframe-schema"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[674, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[675, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[682, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.LazyFrame.unnest": [[665, "polars-lazyframe-unnest"]], "polars.LazyFrame.sum": [[660, "polars-lazyframe-sum"]], "polars.LazyFrame.sink_parquet": [[656, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.read_json": [[646, "polars-lazyframe-read-json"]], "Read/write logical plan": [[692, "read-write-logical-plan"]], "polars.LazyFrame.top_k": [[663, "polars-lazyframe-top-k"]], "polars.Series.alias": [[696, "polars-series-alias"]], "polars.LazyFrame.profile": [[644, "polars-lazyframe-profile"]], "polars.LazyFrame.var": [[667, "polars-lazyframe-var"]], "polars.LazyFrame.rename": [[647, "polars-lazyframe-rename"]], "polars.LazyFrame.join": [[630, "polars-lazyframe-join"]], "LazyFrame": [[691, "lazyframe"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[683, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.LazyFrame.with_row_count": [[671, "polars-lazyframe-with-row-count"]], "polars.Series.all": [[697, "polars-series-all"]], "polars.Series.append": [[699, "polars-series-append"]], "polars.Series.any": [[698, "polars-series-any"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[687, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.LazyFrame.lazy": [[633, "polars-lazyframe-lazy"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[676, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.LazyFrame.shift": [[652, "polars-lazyframe-shift"]], "polars.LazyFrame.mean": [[637, "polars-lazyframe-mean"]], "polars.LazyFrame.melt": [[639, "polars-lazyframe-melt"]], "polars.LazyFrame.sink_ipc": [[655, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.merge_sorted": [[640, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.pipe": [[643, "polars-lazyframe-pipe"]], "polars.LazyFrame.with_columns": [[669, "polars-lazyframe-with-columns"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[679, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.LazyFrame.last": [[632, "polars-lazyframe-last"]], "polars.LazyFrame.join_asof": [[631, "polars-lazyframe-join-asof"]], "polars.LazyFrame.select": [[650, "polars-lazyframe-select"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[680, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[684, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.LazyFrame.quantile": [[645, "polars-lazyframe-quantile"]], "polars.Expr.str.split_exact": [[505, "polars-expr-str-split-exact"]], "polars.Expr.str.strip": [[508, "polars-expr-str-strip"]], "polars.Expr.str.strptime": [[509, "polars-expr-str-strptime"]], "polars.Expr.to_physical": [[526, "polars-expr-to-physical"]], "polars.Expr.str.rjust": [[501, "polars-expr-str-rjust"]], "polars.avg": [[542, "polars-avg"]], "polars.element": [[556, "polars-element"]], "polars.Expr.str.slice": [[503, "polars-expr-str-slice"]], "polars.Expr.str.extract_all": [[491, "polars-expr-str-extract-all"]], "polars.Expr.struct.rename_fields": [[517, "polars-expr-struct-rename-fields"]], "polars.apply": [[538, "polars-apply"]], "polars.arg_sort_by": [[541, "polars-arg-sort-by"]], "polars.Expr.where": [[534, "polars-expr-where"]], "polars.coalesce": [[543, "polars-coalesce"]], "polars.duration": [[555, "polars-duration"]], "polars.Expr.str.to_uppercase": [[514, "polars-expr-str-to-uppercase"]], "polars.Expr.str.splitn": [[506, "polars-expr-str-splitn"]], "polars.Expr.str.replace_all": [[500, "polars-expr-str-replace-all"]], "polars.Expr.sub": [[518, "polars-expr-sub"]], "polars.Expr.xor": [[535, "polars-expr-xor"]], "polars.col": [[544, "polars-col"]], "polars.cumreduce": [[551, "polars-cumreduce"]], "polars.Expr.str.split": [[504, "polars-expr-str-split"]], "polars.arange": [[540, "polars-arange"]], "polars.Expr.str.to_datetime": [[511, "polars-expr-str-to-datetime"]], "polars.Expr.str.to_lowercase": [[512, "polars-expr-str-to-lowercase"]], "polars.exclude": [[557, "polars-exclude"]], "polars.Expr.tanh": [[525, "polars-expr-tanh"]], "polars.Expr.truediv": [[528, "polars-expr-truediv"]], "polars.Expr.suffix": [[519, "polars-expr-suffix"]], "polars.any": [[537, "polars-any"]], "polars.corr": [[547, "polars-corr"]], "polars.cumsum": [[552, "polars-cumsum"]], "polars.Expr.str.starts_with": [[507, "polars-expr-str-starts-with"]], "polars.Expr.upper_bound": [[531, "polars-expr-upper-bound"]], "polars.concat_str": [[546, "polars-concat-str"]], "polars.count": [[548, "polars-count"]], "polars.Expr.str.rstrip": [[502, "polars-expr-str-rstrip"]], "polars.approx_unique": [[539, "polars-approx-unique"]], "polars.Expr.str.json_extract": [[492, "polars-expr-str-json-extract"]], "polars.Expr.tan": [[524, "polars-expr-tan"]], "polars.Expr.str.zfill": [[515, "polars-expr-str-zfill"]], "polars.Expr.str.extract": [[490, "polars-expr-str-extract"]], "polars.cumfold": [[550, "polars-cumfold"]], "polars.Expr.str.lengths": [[494, "polars-expr-str-lengths"]], "polars.all": [[536, "polars-all"]], "polars.concat_list": [[545, "polars-concat-list"]], "polars.date": [[553, "polars-date"]], "polars.Expr.str.json_path_match": [[493, "polars-expr-str-json-path-match"]], "polars.Expr.str.replace": [[499, "polars-expr-str-replace"]], "polars.Expr.take": [[522, "polars-expr-take"]], "polars.fold": [[559, "polars-fold"]], "polars.Expr.str.n_chars": [[497, "polars-expr-str-n-chars"]], "polars.datetime": [[554, "polars-datetime"]], "polars.Expr.sum": [[520, "polars-expr-sum"]], "polars.Expr.tail": [[521, "polars-expr-tail"]], "polars.Expr.top_k": [[527, "polars-expr-top-k"]], "polars.Expr.value_counts": [[532, "polars-expr-value-counts"]], "polars.Expr.str.parse_int": [[498, "polars-expr-str-parse-int"]], "polars.Expr.unique": [[529, "polars-expr-unique"]], "polars.Expr.str.to_time": [[513, "polars-expr-str-to-time"]], "polars.Expr.take_every": [[523, "polars-expr-take-every"]], "polars.Expr.str.lstrip": [[496, "polars-expr-str-lstrip"]], "polars.Expr.struct.field": [[516, "polars-expr-struct-field"]], "polars.first": [[558, "polars-first"]], "polars.Expr.str.ljust": [[495, "polars-expr-str-ljust"]], "polars.Expr.var": [[533, "polars-expr-var"]], "polars.Expr.unique_counts": [[530, "polars-expr-unique-counts"]], "polars.cov": [[549, "polars-cov"]], "polars.Expr.str.to_date": [[510, "polars-expr-str-to-date"]], "polars.Expr.rolling_quantile": [[461, "polars-expr-rolling-quantile"]], "polars.Expr.shift_and_fill": [[471, "polars-expr-shift-and-fill"]], "polars.Expr.meta.ne": [[428, "polars-expr-meta-ne"]], "polars.Expr.meta.undo_aliases": [[432, "polars-expr-meta-undo-aliases"]], "polars.Expr.shift": [[470, "polars-expr-shift"]], "polars.Expr.meta.output_name": [[429, "polars-expr-meta-output-name"]], "polars.Expr.mode": [[435, "polars-expr-mode"]], "polars.Expr.sqrt": [[481, "polars-expr-sqrt"]], "polars.Expr.str.decode": [[486, "polars-expr-str-decode"]], "polars.Expr.shrink_dtype": [[472, "polars-expr-shrink-dtype"]], "polars.Expr.rolling_sum": [[464, "polars-expr-rolling-sum"]], "polars.Expr.std": [[482, "polars-expr-std"]], "polars.Expr.meta.root_names": [[431, "polars-expr-meta-root-names"]], "polars.Expr.min": [[433, "polars-expr-min"]], "polars.Expr.ne": [[440, "polars-expr-ne"]], "polars.Expr.round": [[466, "polars-expr-round"]], "polars.Expr.str.ends_with": [[488, "polars-expr-str-ends-with"]], "polars.Expr.sin": [[475, "polars-expr-sin"]], "polars.Expr.rank": [[450, "polars-expr-rank"]], "polars.Expr.map_dict": [[421, "polars-expr-map-dict"]], "polars.Expr.rolling_apply": [[456, "polars-expr-rolling-apply"]], "polars.Expr.null_count": [[441, "polars-expr-null-count"]], "polars.Expr.pipe": [[445, "polars-expr-pipe"]], "polars.Expr.reinterpret": [[452, "polars-expr-reinterpret"]], "polars.Expr.rolling_var": [[465, "polars-expr-rolling-var"]], "polars.Expr.pct_change": [[444, "polars-expr-pct-change"]], "polars.Expr.sample": [[467, "polars-expr-sample"]], "polars.Expr.mod": [[434, "polars-expr-mod"]], "polars.Expr.prefix": [[447, "polars-expr-prefix"]], "polars.Expr.rechunk": [[451, "polars-expr-rechunk"]], "polars.Expr.quantile": [[449, "polars-expr-quantile"]], "polars.Expr.rolling_skew": [[462, "polars-expr-rolling-skew"]], "polars.Expr.pow": [[446, "polars-expr-pow"]], "polars.Expr.str.explode": [[489, "polars-expr-str-explode"]], "polars.Expr.sort": [[479, "polars-expr-sort"]], "polars.Expr.rolling_std": [[463, "polars-expr-rolling-std"]], "polars.Expr.nan_max": [[438, "polars-expr-nan-max"]], "polars.Expr.rolling_median": [[459, "polars-expr-rolling-median"]], "polars.Expr.meta.is_regex_projection": [[427, "polars-expr-meta-is-regex-projection"]], "polars.Expr.nan_min": [[439, "polars-expr-nan-min"]], "polars.Expr.sort_by": [[480, "polars-expr-sort-by"]], "polars.Expr.over": [[443, "polars-expr-over"]], "polars.Expr.meta.pop": [[430, "polars-expr-meta-pop"]], "polars.Expr.str.count_match": [[485, "polars-expr-str-count-match"]], "polars.Expr.max": [[422, "polars-expr-max"]], "polars.Expr.str.encode": [[487, "polars-expr-str-encode"]], "polars.Expr.product": [[448, "polars-expr-product"]], "polars.Expr.rolling_mean": [[458, "polars-expr-rolling-mean"]], "polars.Expr.mean": [[423, "polars-expr-mean"]], "polars.Expr.search_sorted": [[468, "polars-expr-search-sorted"]], "polars.Expr.meta.has_multiple_outputs": [[426, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.str.contains": [[484, "polars-expr-str-contains"]], "polars.Expr.skew": [[477, "polars-expr-skew"]], "polars.Expr.set_sorted": [[469, "polars-expr-set-sorted"]], "polars.Expr.meta.eq": [[425, "polars-expr-meta-eq"]], "polars.Expr.sign": [[474, "polars-expr-sign"]], "polars.Expr.rolling_min": [[460, "polars-expr-rolling-min"]], "polars.Expr.str.concat": [[483, "polars-expr-str-concat"]], "polars.Expr.or_": [[442, "polars-expr-or"]], "polars.Expr.mul": [[436, "polars-expr-mul"]], "polars.Expr.repeat_by": [[453, "polars-expr-repeat-by"]], "polars.Expr.reshape": [[454, "polars-expr-reshape"]], "polars.Expr.shuffle": [[473, "polars-expr-shuffle"]], "polars.Expr.rolling_max": [[457, "polars-expr-rolling-max"]], "polars.Expr.map_alias": [[420, "polars-expr-map-alias"]], "polars.Expr.sinh": [[476, "polars-expr-sinh"]], "polars.Expr.median": [[424, "polars-expr-median"]], "polars.Expr.reverse": [[455, "polars-expr-reverse"]], "polars.Expr.slice": [[478, "polars-expr-slice"]], "polars.Expr.n_unique": [[437, "polars-expr-n-unique"]], "polars.Expr.is_nan": [[402, "polars-expr-is-nan"]], "polars.Expr.dt.month_end": [[352, "polars-expr-dt-month-end"]], "polars.Expr.dt.week": [[368, "polars-expr-dt-week"]], "polars.Expr.exclude": [[377, "polars-expr-exclude"]], "polars.Expr.filter": [[383, "polars-expr-filter"]], "polars.Expr.len": [[412, "polars-expr-len"]], "polars.Expr.map": [[419, "polars-expr-map"]], "polars.Expr.ewm_var": [[376, "polars-expr-ewm-var"]], "polars.Expr.dt.timestamp": [[365, "polars-expr-dt-timestamp"]], "polars.Expr.ewm_mean": [[374, "polars-expr-ewm-mean"]], "polars.Expr.floor": [[386, "polars-expr-floor"]], "polars.Expr.log1p": [[416, "polars-expr-log1p"]], "polars.Expr.extend_constant": [[380, "polars-expr-extend-constant"]], "polars.Expr.keep_name": [[408, "polars-expr-keep-name"]], "polars.Expr.dt.to_string": [[366, "polars-expr-dt-to-string"]], "polars.Expr.is_infinite": [[401, "polars-expr-is-infinite"]], "polars.Expr.is_not_nan": [[404, "polars-expr-is-not-nan"]], "polars.Expr.is_in": [[400, "polars-expr-is-in"]], "polars.Expr.exp": [[378, "polars-expr-exp"]], "polars.Expr.dt.nanoseconds": [[355, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.replace_time_zone": [[359, "polars-expr-dt-replace-time-zone"]], "polars.Expr.explode": [[379, "polars-expr-explode"]], "polars.Expr.forward_fill": [[388, "polars-expr-forward-fill"]], "polars.Expr.inspect": [[394, "polars-expr-inspect"]], "polars.Expr.dt.weekday": [[369, "polars-expr-dt-weekday"]], "polars.Expr.dt.offset_by": [[356, "polars-expr-dt-offset-by"]], "polars.Expr.dt.ordinal_day": [[357, "polars-expr-dt-ordinal-day"]], "polars.Expr.is_between": [[396, "polars-expr-is-between"]], "polars.Expr.dt.strftime": [[363, "polars-expr-dt-strftime"]], "polars.Expr.is_duplicated": [[397, "polars-expr-is-duplicated"]], "polars.Expr.is_not_null": [[405, "polars-expr-is-not-null"]], "polars.Expr.log": [[414, "polars-expr-log"]], "polars.Expr.limit": [[413, "polars-expr-limit"]], "polars.Expr.dt.nanosecond": [[354, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.minutes": [[350, "polars-expr-dt-minutes"]], "polars.Expr.gt": [[390, "polars-expr-gt"]], "polars.Expr.lt": [[418, "polars-expr-lt"]], "polars.Expr.eq": [[373, "polars-expr-eq"]], "polars.Expr.is_null": [[406, "polars-expr-is-null"]], "polars.Expr.lower_bound": [[417, "polars-expr-lower-bound"]], "polars.Expr.last": [[410, "polars-expr-last"]], "polars.Expr.dt.round": [[360, "polars-expr-dt-round"]], "polars.Expr.kurtosis": [[409, "polars-expr-kurtosis"]], "polars.Expr.fill_nan": [[381, "polars-expr-fill-nan"]], "polars.Expr.entropy": [[372, "polars-expr-entropy"]], "polars.Expr.log10": [[415, "polars-expr-log10"]], "polars.Expr.dt.with_time_unit": [[370, "polars-expr-dt-with-time-unit"]], "polars.Expr.ge": [[389, "polars-expr-ge"]], "polars.Expr.floordiv": [[387, "polars-expr-floordiv"]], "polars.Expr.is_finite": [[398, "polars-expr-is-finite"]], "polars.Expr.interpolate": [[395, "polars-expr-interpolate"]], "polars.Expr.dt.month_start": [[353, "polars-expr-dt-month-start"]], "polars.Expr.le": [[411, "polars-expr-le"]], "polars.Expr.dt.year": [[371, "polars-expr-dt-year"]], "polars.Expr.first": [[384, "polars-expr-first"]], "polars.Expr.dt.quarter": [[358, "polars-expr-dt-quarter"]], "polars.Expr.dt.month": [[351, "polars-expr-dt-month"]], "polars.Expr.dt.seconds": [[362, "polars-expr-dt-seconds"]], "polars.Expr.fill_null": [[382, "polars-expr-fill-null"]], "polars.Expr.dt.second": [[361, "polars-expr-dt-second"]], "polars.Expr.dt.time": [[364, "polars-expr-dt-time"]], "polars.Expr.ewm_std": [[375, "polars-expr-ewm-std"]], "polars.Expr.head": [[392, "polars-expr-head"]], "polars.Expr.hash": [[391, "polars-expr-hash"]], "polars.Expr.dt.truncate": [[367, "polars-expr-dt-truncate"]], "polars.Expr.implode": [[393, "polars-expr-implode"]], "polars.Expr.is_first": [[399, "polars-expr-is-first"]], "polars.Expr.is_unique": [[407, "polars-expr-is-unique"]], "polars.Expr.is_not": [[403, "polars-expr-is-not"]], "polars.Expr.flatten": [[385, "polars-expr-flatten"]], "Functions": [[603, "functions"], [592, "functions"]], "Conversion": [[603, "conversion"]], "Eager/Lazy functions": [[603, "eager-lazy-functions"]], "Parallelization": [[603, "parallelization"]], "StringCache": [[603, "stringcache"]], "polars.LazyFrame.groupby": [[624, "polars-lazyframe-groupby"]], "Window": [[602, "window"]], "polars.LazyFrame.groupby_dynamic": [[625, "polars-lazyframe-groupby-dynamic"]], "polars.map": [[566, "polars-map"]], "polars.time": [[584, "polars-time"]], "polars.repeat": [[575, "polars-repeat"]], "polars.LazyFrame.cache": [[608, "polars-lazyframe-cache"]], "polars.LazyFrame.clone": [[610, "polars-lazyframe-clone"]], "polars.LazyFrame.collect": [[611, "polars-lazyframe-collect"]], "polars.std": [[580, "polars-std"]], "polars.list": [[564, "polars-list"]], "polars.median": [[569, "polars-median"]], "polars.LazyFrame.explode": [[617, "polars-lazyframe-explode"]], "polars.LazyFrame.head": [[627, "polars-lazyframe-head"]], "polars.quantile": [[573, "polars-quantile"]], "polars.LazyFrame.inspect": [[628, "polars-lazyframe-inspect"]], "polars.reduce": [[574, "polars-reduce"]], "Operators": [[598, "operators"]], "Conjunction": [[598, "conjunction"]], "Comparison": [[598, "comparison"]], "Numeric": [[598, "numeric"], [256, "numeric"]], "polars.when": [[586, "polars-when"]], "polars.LazyFrame.bottom_k": [[607, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.groupby_rolling": [[626, "polars-lazyframe-groupby-rolling"]], "polars.rolling_corr": [[576, "polars-rolling-corr"]], "polars.mean": [[568, "polars-mean"]], "Meta": [[595, "meta"]], "polars.LazyFrame.drop_nulls": [[614, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.dtypes": [[615, "polars-lazyframe-dtypes"]], "polars.LazyFrame.from_json": [[623, "polars-lazyframe-from-json"]], "polars.max": [[567, "polars-max"]], "polars.rolling_cov": [[577, "polars-rolling-cov"]], "polars.pearson_corr": [[572, "polars-pearson-corr"]], "polars.LazyFrame.drop": [[613, "polars-lazyframe-drop"]], "polars.n_unique": [[571, "polars-n-unique"]], "polars.LazyFrame.interpolate": [[629, "polars-lazyframe-interpolate"]], "Expressions": [[593, "expressions"]], "polars.tail": [[583, "polars-tail"]], "polars.var": [[585, "polars-var"]], "polars.from_epoch": [[561, "polars-from-epoch"]], "polars.head": [[563, "polars-head"]], "polars.lit": [[565, "polars-lit"]], "polars.LazyFrame.clear": [[609, "polars-lazyframe-clear"]], "Input/output": [[605, "input-output"]], "CSV": [[605, "csv"]], "Feather/ IPC": [[605, "feather-ipc"]], "Parquet": [[605, "parquet"]], "Database": [[605, "database"]], "JSON": [[605, "json"]], "AVRO": [[605, "avro"]], "Excel": [[605, "excel"]], "Delta Lake": [[605, "delta-lake"]], "Datasets": [[605, "datasets"]], "BatchedCsvReader": [[605, "batchedcsvreader"]], "polars.LazyFrame.columns": [[612, "polars-lazyframe-columns"]], "API reference": [[604, "api-reference"]], "polars.struct": [[581, "polars-struct"]], "Columns / names": [[590, "columns-names"]], "polars.LazyFrame.explain": [[616, "polars-lazyframe-explain"]], "polars.LazyFrame.fetch": [[618, "polars-lazyframe-fetch"]], "polars.LazyFrame.fill_nan": [[619, "polars-lazyframe-fill-nan"]], "polars.spearman_rank_corr": [[579, "polars-spearman-rank-corr"]], "polars.min": [[570, "polars-min"]], "polars.sum": [[582, "polars-sum"]], "polars.format": [[560, "polars-format"]], "polars.LazyFrame.filter": [[621, "polars-lazyframe-filter"]], "polars.LazyFrame.fill_null": [[620, "polars-lazyframe-fill-null"]], "polars.LazyFrame.first": [[622, "polars-lazyframe-first"]], "polars.select": [[578, "polars-select"]], "polars.groups": [[562, "polars-groups"]], "polars.Expr.dt.iso_year": [[344, "polars-expr-dt-iso-year"]], "polars.Expr.arr.shift": [[298, "polars-expr-arr-shift"]], "polars.Expr.dt.convert_time_zone": [[335, "polars-expr-dt-convert-time-zone"]], "polars.Expr.bin.ends_with": [[310, "polars-expr-bin-ends-with"]], "polars.Expr.bin.encode": [[309, "polars-expr-bin-encode"]], "polars.Expr.backward_fill": [[306, "polars-expr-backward-fill"]], "polars.Expr.cummin": [[325, "polars-expr-cummin"]], "polars.Expr.drop_nulls": [[332, "polars-expr-drop-nulls"]], "polars.Expr.cos": [[320, "polars-expr-cos"]], "polars.Expr.cast": [[314, "polars-expr-cast"]], "polars.Expr.arr.arg_max": [[280, "polars-expr-arr-arg-max"]], "polars.Expr.arr.sum": [[301, "polars-expr-arr-sum"]], "polars.Expr.clip_max": [[318, "polars-expr-clip-max"]], "polars.Expr.dot": [[330, "polars-expr-dot"]], "polars.Expr.arr.arg_min": [[281, "polars-expr-arr-arg-min"]], "polars.Expr.arr.take": [[303, "polars-expr-arr-take"]], "polars.Expr.drop_nans": [[331, "polars-expr-drop-nans"]], "polars.Expr.dt.days": [[339, "polars-expr-dt-days"]], "polars.Expr.dt.datetime": [[337, "polars-expr-dt-datetime"]], "polars.Expr.clip_min": [[319, "polars-expr-clip-min"]], "polars.Expr.arr.reverse": [[297, "polars-expr-arr-reverse"]], "polars.Expr.bottom_k": [[312, "polars-expr-bottom-k"]], "polars.Expr.cat.set_ordering": [[315, "polars-expr-cat-set-ordering"]], "polars.Expr.cache": [[313, "polars-expr-cache"]], "polars.Expr.arr.tail": [[302, "polars-expr-arr-tail"]], "polars.Expr.dt.millisecond": [[347, "polars-expr-dt-millisecond"]], "polars.Expr.arr.contains": [[283, "polars-expr-arr-contains"]], "polars.Expr.dt.epoch": [[340, "polars-expr-dt-epoch"]], "polars.Expr.arr.explode": [[287, "polars-expr-arr-explode"]], "polars.Expr.arr.get": [[289, "polars-expr-arr-get"]], "polars.Expr.arr.min": [[296, "polars-expr-arr-min"]], "polars.Expr.clip": [[317, "polars-expr-clip"]], "polars.Expr.cumulative_eval": [[328, "polars-expr-cumulative-eval"]], "polars.Expr.dt.microsecond": [[345, "polars-expr-dt-microsecond"]], "polars.Expr.cumprod": [[326, "polars-expr-cumprod"]], "polars.Expr.bin.starts_with": [[311, "polars-expr-bin-starts-with"]], "polars.Expr.arr.to_struct": [[304, "polars-expr-arr-to-struct"]], "polars.Expr.bin.contains": [[307, "polars-expr-bin-contains"]], "polars.Expr.cummax": [[324, "polars-expr-cummax"]], "polars.Expr.bin.decode": [[308, "polars-expr-bin-decode"]], "polars.Expr.cosh": [[321, "polars-expr-cosh"]], "polars.Expr.dt.combine": [[334, "polars-expr-dt-combine"]], "polars.Expr.arr.last": [[292, "polars-expr-arr-last"]], "polars.Expr.arr.lengths": [[293, "polars-expr-arr-lengths"]], "polars.Expr.ceil": [[316, "polars-expr-ceil"]], "polars.Expr.dt.day": [[338, "polars-expr-dt-day"]], "polars.Expr.dt.hour": [[341, "polars-expr-dt-hour"]], "polars.Expr.dt.milliseconds": [[348, "polars-expr-dt-milliseconds"]], "polars.Expr.arr.eval": [[286, "polars-expr-arr-eval"]], "polars.Expr.arr.unique": [[305, "polars-expr-arr-unique"]], "polars.Expr.cumsum": [[327, "polars-expr-cumsum"]], "polars.Expr.count": [[322, "polars-expr-count"]], "polars.Expr.arr.concat": [[282, "polars-expr-arr-concat"]], "polars.Expr.arr.first": [[288, "polars-expr-arr-first"]], "polars.Expr.arr.diff": [[285, "polars-expr-arr-diff"]], "polars.Expr.dt.minute": [[349, "polars-expr-dt-minute"]], "polars.Expr.arr.head": [[290, "polars-expr-arr-head"]], "polars.Expr.arr.slice": [[299, "polars-expr-arr-slice"]], "polars.Expr.dt.is_leap_year": [[343, "polars-expr-dt-is-leap-year"]], "polars.Expr.arr.sort": [[300, "polars-expr-arr-sort"]], "polars.Expr.dt.microseconds": [[346, "polars-expr-dt-microseconds"]], "polars.Expr.dt.date": [[336, "polars-expr-dt-date"]], "polars.Expr.arr.join": [[291, "polars-expr-arr-join"]], "polars.Expr.arr.mean": [[295, "polars-expr-arr-mean"]], "polars.Expr.arr.max": [[294, "polars-expr-arr-max"]], "polars.Expr.cumcount": [[323, "polars-expr-cumcount"]], "polars.Expr.dt.hours": [[342, "polars-expr-dt-hours"]], "polars.Expr.diff": [[329, "polars-expr-diff"]], "polars.Expr.dt.cast_time_unit": [[333, "polars-expr-dt-cast-time-unit"]], "polars.Expr.arr.count_match": [[284, "polars-expr-arr-count-match"]], "polars.DataFrame.find_idx_by_name": [[151, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.describe": [[140, "polars-dataframe-describe"]], "polars.DataFrame.filter": [[150, "polars-dataframe-filter"]], "polars.DataFrame.rechunk": [[190, "polars-dataframe-rechunk"]], "polars.DataFrame.estimated_size": [[145, "polars-dataframe-estimated-size"]], "polars.DataFrame.rename": [[191, "polars-dataframe-rename"]], "polars.DataFrame.n_unique": [[183, "polars-dataframe-n-unique"]], "polars.DataFrame.fill_null": [[149, "polars-dataframe-fill-null"]], "polars.DataFrame.groupby_rolling": [[159, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.is_duplicated": [[166, "polars-dataframe-is-duplicated"]], "polars.DataFrame.pipe": [[186, "polars-dataframe-pipe"]], "polars.DataFrame.shift_and_fill": [[203, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.shrink_to_fit": [[204, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.hstack": [[163, "polars-dataframe-hstack"]], "polars.DataFrame.get_column": [[154, "polars-dataframe-get-column"]], "polars.DataFrame.n_chunks": [[182, "polars-dataframe-n-chunks"]], "polars.DataFrame.hash_rows": [[160, "polars-dataframe-hash-rows"]], "polars.DataFrame.replace": [[192, "polars-dataframe-replace"]], "polars.DataFrame.min": [[181, "polars-dataframe-min"]], "polars.DataFrame.head": [[161, "polars-dataframe-head"]], "polars.DataFrame.tail": [[209, "polars-dataframe-tail"]], "polars.DataFrame.median": [[178, "polars-dataframe-median"]], "polars.DataFrame.is_empty": [[167, "polars-dataframe-is-empty"]], "polars.DataFrame.dtypes": [[144, "polars-dataframe-dtypes"]], "polars.DataFrame.drop_nulls": [[143, "polars-dataframe-drop-nulls"]], "polars.DataFrame.join_asof": [[173, "polars-dataframe-join-asof"]], "polars.DataFrame.lazy": [[174, "polars-dataframe-lazy"]], "polars.DataFrame.partition_by": [[185, "polars-dataframe-partition-by"]], "polars.DataFrame.iter_slices": [[171, "polars-dataframe-iter-slices"]], "polars.DataFrame.drop_in_place": [[142, "polars-dataframe-drop-in-place"]], "polars.DataFrame.is_unique": [[168, "polars-dataframe-is-unique"]], "polars.DataFrame.extend": [[147, "polars-dataframe-extend"]], "polars.DataFrame.height": [[162, "polars-dataframe-height"]], "polars.DataFrame.join": [[172, "polars-dataframe-join"]], "polars.DataFrame.drop": [[141, "polars-dataframe-drop"]], "polars.DataFrame.mean": [[177, "polars-dataframe-mean"]], "polars.DataFrame.pivot": [[187, "polars-dataframe-pivot"]], "polars.DataFrame.quantile": [[189, "polars-dataframe-quantile"]], "polars.DataFrame.row": [[195, "polars-dataframe-row"]], "polars.DataFrame.rows": [[196, "polars-dataframe-rows"]], "polars.DataFrame.merge_sorted": [[180, "polars-dataframe-merge-sorted"]], "polars.DataFrame.std": [[207, "polars-dataframe-std"]], "polars.DataFrame.fill_nan": [[148, "polars-dataframe-fill-nan"]], "polars.DataFrame.sort": [[206, "polars-dataframe-sort"]], "polars.DataFrame.set_sorted": [[200, "polars-dataframe-set-sorted"]], "polars.DataFrame.schema": [[198, "polars-dataframe-schema"]], "polars.DataFrame.sample": [[197, "polars-dataframe-sample"]], "polars.DataFrame.shape": [[201, "polars-dataframe-shape"]], "polars.DataFrame.melt": [[179, "polars-dataframe-melt"]], "polars.DataFrame.get_columns": [[155, "polars-dataframe-get-columns"]], "polars.DataFrame.limit": [[175, "polars-dataframe-limit"]], "polars.DataFrame.groupby_dynamic": [[158, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.fold": [[152, "polars-dataframe-fold"]], "polars.DataFrame.null_count": [[184, "polars-dataframe-null-count"]], "polars.DataFrame.glimpse": [[156, "polars-dataframe-glimpse"]], "polars.DataFrame.groupby": [[157, "polars-dataframe-groupby"]], "polars.DataFrame.iter_rows": [[170, "polars-dataframe-iter-rows"]], "polars.DataFrame.select": [[199, "polars-dataframe-select"]], "polars.DataFrame.sum": [[208, "polars-dataframe-sum"]], "polars.DataFrame.item": [[169, "polars-dataframe-item"]], "polars.DataFrame.frame_equal": [[153, "polars-dataframe-frame-equal"]], "polars.DataFrame.explode": [[146, "polars-dataframe-explode"]], "polars.DataFrame.replace_at_idx": [[193, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.shift": [[202, "polars-dataframe-shift"]], "polars.DataFrame.reverse": [[194, "polars-dataframe-reverse"]], "polars.DataFrame.slice": [[205, "polars-dataframe-slice"]], "polars.DataFrame.insert_at_idx": [[164, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.max": [[176, "polars-dataframe-max"]], "polars.DataFrame.product": [[188, "polars-dataframe-product"]], "polars.DataFrame.interpolate": [[165, "polars-dataframe-interpolate"]], "polars.DataFrame.to_arrow": [[211, "polars-dataframe-to-arrow"]], "polars.DataFrame.unnest": [[223, "polars-dataframe-unnest"]], "polars.dataframe.groupby.GroupBy.quantile": [[245, "polars-dataframe-groupby-groupby-quantile"]], "polars.Expr.alias": [[262, "polars-expr-alias"]], "polars.dataframe.groupby.GroupBy.n_unique": [[244, "polars-dataframe-groupby-groupby-n-unique"]], "polars.Expr.arccosh": [[270, "polars-expr-arccosh"]], "polars.Expr.add": [[260, "polars-expr-add"]], "polars.Expr.abs": [[259, "polars-expr-abs"]], "polars.Expr.arg_unique": [[279, "polars-expr-arg-unique"]], "polars.dataframe.groupby.GroupBy.count": [[236, "polars-dataframe-groupby-groupby-count"]], "polars.dataframe.groupby.GroupBy.median": [[242, "polars-dataframe-groupby-groupby-median"]], "polars.DataFrame.to_pandas": [[217, "polars-dataframe-to-pandas"]], "polars.DataFrame.upsample": [[226, "polars-dataframe-upsample"]], "polars.Expr.arg_min": [[276, "polars-expr-arg-min"]], "polars.Expr.arccos": [[269, "polars-expr-arccos"]], "polars.Expr.approx_unique": [[268, "polars-expr-approx-unique"]], "polars.DataFrame.to_dict": [[212, "polars-dataframe-to-dict"]], "polars.Expr.arctanh": [[274, "polars-expr-arctanh"]], "polars.dataframe.groupby.GroupBy.min": [[243, "polars-dataframe-groupby-groupby-min"]], "polars.dataframe.groupby.GroupBy.apply": [[235, "polars-dataframe-groupby-groupby-apply"]], "polars.Expr.apply": [[267, "polars-expr-apply"]], "polars.dataframe.groupby.GroupBy.last": [[239, "polars-dataframe-groupby-groupby-last"]], "polars.dataframe.groupby.GroupBy.first": [[237, "polars-dataframe-groupby-groupby-first"]], "DataFrame": [[253, "dataframe"]], "polars.Expr.arctan": [[273, "polars-expr-arctan"]], "polars.Expr.arg_sort": [[277, "polars-expr-arg-sort"]], "polars.Expr.arg_true": [[278, "polars-expr-arg-true"]], "polars.DataFrame.transpose": [[221, "polars-dataframe-transpose"]], "polars.Expr.arcsin": [[271, "polars-expr-arcsin"]], "polars.dataframe.groupby.GroupBy.all": [[234, "polars-dataframe-groupby-groupby-all"]], "polars.dataframe.groupby.GroupBy.tail": [[247, "polars-dataframe-groupby-groupby-tail"]], "polars.Expr.append": [[266, "polars-expr-append"]], "polars.Expr.all": [[263, "polars-expr-all"]], "polars.DataFrame.var": [[227, "polars-dataframe-var"]], "polars.dataframe.groupby.GroupBy.sum": [[246, "polars-dataframe-groupby-groupby-sum"]], "polars.Expr.and_": [[264, "polars-expr-and"]], "polars.DataFrame.with_columns": [[230, "polars-dataframe-with-columns"]], "polars.DataFrame.unstack": [[224, "polars-dataframe-unstack"]], "polars.DataFrame.width": [[229, "polars-dataframe-width"]], "polars.DataFrame.with_row_count": [[231, "polars-dataframe-with-row-count"]], "polars.DataFrame.to_dummies": [[214, "polars-dataframe-to-dummies"]], "polars.Expr.agg_groups": [[261, "polars-expr-agg-groups"]], "polars.DataFrame.to_dicts": [[213, "polars-dataframe-to-dicts"]], "polars.Expr.arg_max": [[275, "polars-expr-arg-max"]], "polars.DataFrame.to_numpy": [[216, "polars-dataframe-to-numpy"]], "polars.DataFrame.unique": [[222, "polars-dataframe-unique"]], "polars.dataframe.groupby.GroupBy.mean": [[241, "polars-dataframe-groupby-groupby-mean"]], "polars.dataframe.groupby.GroupBy.head": [[238, "polars-dataframe-groupby-groupby-head"]], "polars.DataFrame.top_k": [[220, "polars-dataframe-top-k"]], "polars.dataframe.groupby.GroupBy.max": [[240, "polars-dataframe-groupby-groupby-max"]], "polars.DataFrame.to_init_repr": [[215, "polars-dataframe-to-init-repr"]], "polars.DataFrame.take_every": [[210, "polars-dataframe-take-every"]], "polars.DataFrame.vstack": [[228, "polars-dataframe-vstack"]], "polars.dataframe.groupby.GroupBy.__iter__": [[232, "polars-dataframe-groupby-groupby-iter"]], "Data types": [[256, "data-types"]], "Nested": [[256, "nested"]], "Other": [[256, "other"]], "polars.dataframe.groupby.GroupBy.agg": [[233, "polars-dataframe-groupby-groupby-agg"]], "polars.DataFrame.to_series": [[218, "polars-dataframe-to-series"]], "polars.Expr.arcsinh": [[272, "polars-expr-arcsinh"]], "polars.DataFrame.update": [[225, "polars-dataframe-update"]], "polars.Expr.any": [[265, "polars-expr-any"]], "polars.DataFrame.to_struct": [[219, "polars-dataframe-to-struct"]], "Exceptions": [[257, "exceptions"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[5, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[6, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[7, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[8, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[9, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[10, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[11, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[12, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[13, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[14, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[15, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[16, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[17, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[22, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[23, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[24, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[25, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[26, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[27, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[28, "polars.DataFrame.write_database"]], "write_excel() (polars.dataframe method)": [[29, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[30, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[31, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[32, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[33, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[34, "polars.DataType"]], "__init__() (polars.datatype method)": [[34, "polars.DataType.__init__"]], "date (class in polars)": [[35, "polars.Date"]], "__init__() (polars.date method)": [[35, "polars.Date.__init__"]], "datetime (class in polars)": [[36, "polars.Datetime"]], "__init__() (polars.datetime method)": [[36, "polars.Datetime.__init__"]], "decimal (class in polars)": [[37, "polars.Decimal"]], "__init__() (polars.decimal method)": [[37, "polars.Decimal.__init__"]], "duration (class in polars)": [[38, "polars.Duration"]], "__init__() (polars.duration method)": [[38, "polars.Duration.__init__"]], "float32 (class in polars)": [[39, "polars.Float32"]], "__init__() (polars.float32 method)": [[39, "polars.Float32.__init__"]], "float64 (class in polars)": [[40, "polars.Float64"]], "__init__() (polars.float64 method)": [[40, "polars.Float64.__init__"]], "int16 (class in polars)": [[41, "polars.Int16"]], "__init__() (polars.int16 method)": [[41, "polars.Int16.__init__"]], "int32 (class in polars)": [[42, "polars.Int32"]], "__init__() (polars.int32 method)": [[42, "polars.Int32.__init__"]], "int64 (class in polars)": [[43, "polars.Int64"]], "__init__() (polars.int64 method)": [[43, "polars.Int64.__init__"]], "int8 (class in polars)": [[44, "polars.Int8"]], "__init__() (polars.int8 method)": [[44, "polars.Int8.__init__"]], "list (class in polars)": [[45, "polars.List"]], "__init__() (polars.list method)": [[45, "polars.List.__init__"]], "null (class in polars)": [[46, "polars.Null"]], "__init__() (polars.null method)": [[46, "polars.Null.__init__"]], "object (class in polars)": [[47, "polars.Object"]], "__init__() (polars.object method)": [[47, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[48, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[49, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[50, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[51, "polars.SQLContext.register_many"]], "unregister() (polars.sqlcontext method)": [[52, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[53, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[53, "polars.StringCache.__init__"]], "struct (class in polars)": [[54, "polars.Struct"]], "__init__() (polars.struct method)": [[54, "polars.Struct.__init__"]], "time (class in polars)": [[55, "polars.Time"]], "__init__() (polars.time method)": [[55, "polars.Time.__init__"]], "uint16 (class in polars)": [[56, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[56, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[57, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[57, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[58, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[58, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[59, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[59, "polars.UInt8.__init__"]], "unknown (class in polars)": [[60, "polars.Unknown"]], "__init__() (polars.unknown method)": [[60, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[61, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[61, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[62, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[63, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[64, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[65, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[66, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[67, "polars.arg_where"]], "build_info() (in module polars)": [[68, "polars.build_info"]], "collect_all() (in module polars)": [[69, "polars.collect_all"]], "concat() (in module polars)": [[70, "polars.concat"]], "cut() (in module polars)": [[71, "polars.cut"]], "date_range() (in module polars)": [[72, "polars.date_range"]], "enable_string_cache() (in module polars)": [[73, "polars.enable_string_cache"]], "arrowerror": [[74, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[75, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[76, "polars.exceptions.ComputeError"]], "duplicateerror": [[77, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[78, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[79, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[80, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[81, "polars.exceptions.PolarsPanicError"]], "rowserror": [[82, "polars.exceptions.RowsError"]], "schemaerror": [[83, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[84, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[85, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[86, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[87, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[88, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[89, "polars.from_dataframe"]], "from_dict() (in module polars)": [[90, "polars.from_dict"]], "from_dicts() (in module polars)": [[91, "polars.from_dicts"]], "from_numpy() (in module polars)": [[92, "polars.from_numpy"]], "from_pandas() (in module polars)": [[93, "polars.from_pandas"]], "from_records() (in module polars)": [[94, "polars.from_records"]], "from_repr() (in module polars)": [[95, "polars.from_repr"]], "get_dummies() (in module polars)": [[96, "polars.get_dummies"]], "get_index_type() (in module polars)": [[97, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[98, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[99, "polars.ones"]], "read_avro() (in module polars)": [[100, "polars.read_avro"]], "read_csv() (in module polars)": [[101, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[102, "polars.read_csv_batched"]], "read_database() (in module polars)": [[103, "polars.read_database"]], "read_delta() (in module polars)": [[104, "polars.read_delta"]], "read_excel() (in module polars)": [[105, "polars.read_excel"]], "read_ipc() (in module polars)": [[106, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[107, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[108, "polars.read_json"]], "read_ndjson() (in module polars)": [[109, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[110, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[111, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[112, "polars.scan_csv"]], "scan_delta() (in module polars)": [[113, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[114, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[115, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[116, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[117, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[118, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[119, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[120, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[121, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[121, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[122, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[123, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[124, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[125, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[126, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[127, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[128, "polars.threadpool_size"]], "time_range() (in module polars)": [[129, "polars.time_range"]], "zeros() (in module polars)": [[130, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[133, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[134, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[135, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[136, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[137, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[138, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[139, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[140, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[141, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[142, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[143, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[144, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[145, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[146, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[147, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[148, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[149, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[150, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[151, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[152, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[153, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[154, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[155, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[156, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[157, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[158, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[159, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[160, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[161, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[162, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[163, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[164, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[165, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[166, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[167, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[168, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[169, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[170, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[171, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[172, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[173, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[174, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[175, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[176, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[177, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[178, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[179, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[180, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[181, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[182, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[183, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[184, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[185, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[186, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[187, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[188, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[189, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[190, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[191, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[192, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[193, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[194, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[195, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[196, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[197, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[198, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[199, "polars.DataFrame.select"]], "set_sorted() (polars.dataframe method)": [[200, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[201, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[202, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[203, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[204, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[205, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[206, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[207, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[208, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[209, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[210, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[211, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[212, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[213, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[214, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[215, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[216, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[217, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[218, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[219, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[220, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[221, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[222, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[223, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[224, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[225, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[226, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[227, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[228, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[229, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[230, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[231, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[232, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[241, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[242, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[243, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[244, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[245, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[246, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[247, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[259, "polars.Expr.abs"]], "add() (polars.expr method)": [[260, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[261, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[262, "polars.Expr.alias"]], "all() (polars.expr method)": [[263, "polars.Expr.all"]], "and_() (polars.expr method)": [[264, "polars.Expr.and_"]], "any() (polars.expr method)": [[265, "polars.Expr.any"]], "append() (polars.expr method)": [[266, "polars.Expr.append"]], "apply() (polars.expr method)": [[267, "polars.Expr.apply"]], "approx_unique() (polars.expr method)": [[268, "polars.Expr.approx_unique"]], "arccos() (polars.expr method)": [[269, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[270, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[271, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[272, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[273, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[274, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[275, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[276, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[277, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[278, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[279, "polars.Expr.arg_unique"]], "arg_max() (polars.expr.arr method)": [[280, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[281, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[282, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[283, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[284, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[285, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[286, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[287, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[288, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[289, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[290, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[291, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[292, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[293, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[294, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[295, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[296, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[297, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[298, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[299, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[300, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[301, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[302, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[303, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[304, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[305, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[306, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[307, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[308, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[309, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[310, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[311, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[312, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[313, "polars.Expr.cache"]], "cast() (polars.expr method)": [[314, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[315, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[316, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[317, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[318, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[319, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[320, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[321, "polars.Expr.cosh"]], "count() (polars.expr method)": [[322, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[323, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[324, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[325, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[326, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[327, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[328, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[329, "polars.Expr.diff"]], "dot() (polars.expr method)": [[330, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[331, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[332, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[333, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[334, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[335, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[336, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[337, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[338, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[339, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[340, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[341, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[342, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[343, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[344, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[345, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[346, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[347, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[348, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[349, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[350, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[351, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[352, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[353, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[354, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[355, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[356, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[357, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[358, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[359, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[360, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[361, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[362, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[363, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[364, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[365, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[366, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[367, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[368, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[369, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[370, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[371, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[372, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[373, "polars.Expr.eq"]], "ewm_mean() (polars.expr method)": [[374, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[375, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[376, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[377, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[378, "polars.Expr.exp"]], "explode() (polars.expr method)": [[379, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[380, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[381, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[382, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[383, "polars.Expr.filter"]], "first() (polars.expr method)": [[384, "polars.Expr.first"]], "flatten() (polars.expr method)": [[385, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[386, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[387, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[388, "polars.Expr.forward_fill"]], "ge() (polars.expr method)": [[389, "polars.Expr.ge"]], "gt() (polars.expr method)": [[390, "polars.Expr.gt"]], "hash() (polars.expr method)": [[391, "polars.Expr.hash"]], "head() (polars.expr method)": [[392, "polars.Expr.head"]], "implode() (polars.expr method)": [[393, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[394, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[395, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[396, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[397, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[398, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[399, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[400, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[401, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[402, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[403, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[404, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[405, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[406, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[407, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[408, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[409, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[410, "polars.Expr.last"]], "le() (polars.expr method)": [[411, "polars.Expr.le"]], "len() (polars.expr method)": [[412, "polars.Expr.len"]], "limit() (polars.expr method)": [[413, "polars.Expr.limit"]], "log() (polars.expr method)": [[414, "polars.Expr.log"]], "log10() (polars.expr method)": [[415, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[416, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[417, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[418, "polars.Expr.lt"]], "map() (polars.expr method)": [[419, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[420, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[421, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[422, "polars.Expr.max"]], "mean() (polars.expr method)": [[423, "polars.Expr.mean"]], "median() (polars.expr method)": [[424, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[425, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[426, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[427, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[428, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[429, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[430, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[431, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[432, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[433, "polars.Expr.min"]], "mod() (polars.expr method)": [[434, "polars.Expr.mod"]], "mode() (polars.expr method)": [[435, "polars.Expr.mode"]], "mul() (polars.expr method)": [[436, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[437, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[438, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[439, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[440, "polars.Expr.ne"]], "null_count() (polars.expr method)": [[441, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[442, "polars.Expr.or_"]], "over() (polars.expr method)": [[443, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[444, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[445, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[446, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[447, "polars.Expr.prefix"]], "product() (polars.expr method)": [[448, "polars.Expr.product"]], "quantile() (polars.expr method)": [[449, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[450, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[451, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[452, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[453, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[454, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[455, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[456, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[457, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[458, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[459, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[460, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[461, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[462, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[463, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[464, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[465, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[466, "polars.Expr.round"]], "sample() (polars.expr method)": [[467, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[468, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[469, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[470, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[471, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[472, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[473, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[474, "polars.Expr.sign"]], "sin() (polars.expr method)": [[475, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[476, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[477, "polars.Expr.skew"]], "slice() (polars.expr method)": [[478, "polars.Expr.slice"]], "sort() (polars.expr method)": [[479, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[480, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[481, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[482, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[483, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[484, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[485, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[486, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[487, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[488, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[489, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[490, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[491, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[492, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[493, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[494, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[495, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[496, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[497, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[498, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[499, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[500, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[501, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[502, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[503, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[504, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[505, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[506, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[507, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[508, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[509, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[510, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[511, "polars.Expr.str.to_datetime"]], "to_lowercase() (polars.expr.str method)": [[512, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[513, "polars.Expr.str.to_time"]], "to_uppercase() (polars.expr.str method)": [[514, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[515, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[516, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[517, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[518, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[519, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[520, "polars.Expr.sum"]], "tail() (polars.expr method)": [[521, "polars.Expr.tail"]], "take() (polars.expr method)": [[522, "polars.Expr.take"]], "take_every() (polars.expr method)": [[523, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[524, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[525, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[526, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[527, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[528, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[529, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[530, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[531, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[532, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[533, "polars.Expr.var"]], "where() (polars.expr method)": [[534, "polars.Expr.where"]], "xor() (polars.expr method)": [[535, "polars.Expr.xor"]], "all() (in module polars)": [[536, "polars.all"]], "any() (in module polars)": [[537, "polars.any"]], "apply() (in module polars)": [[538, "polars.apply"]], "approx_unique() (in module polars)": [[539, "polars.approx_unique"]], "arange() (in module polars)": [[540, "polars.arange"]], "arg_sort_by() (in module polars)": [[541, "polars.arg_sort_by"]], "avg() (in module polars)": [[542, "polars.avg"]], "coalesce() (in module polars)": [[543, "polars.coalesce"]], "col() (in module polars)": [[544, "polars.col"]], "concat_list() (in module polars)": [[545, "polars.concat_list"]], "concat_str() (in module polars)": [[546, "polars.concat_str"]], "corr() (in module polars)": [[547, "polars.corr"]], "count() (in module polars)": [[548, "polars.count"]], "cov() (in module polars)": [[549, "polars.cov"]], "cumfold() (in module polars)": [[550, "polars.cumfold"]], "cumreduce() (in module polars)": [[551, "polars.cumreduce"]], "cumsum() (in module polars)": [[552, "polars.cumsum"]], "date() (in module polars)": [[553, "polars.date"]], "datetime() (in module polars)": [[554, "polars.datetime"]], "duration() (in module polars)": [[555, "polars.duration"]], "element() (in module polars)": [[556, "polars.element"]], "exclude() (in module polars)": [[557, "polars.exclude"]], "first() (in module polars)": [[558, "polars.first"]], "fold() (in module polars)": [[559, "polars.fold"]], "format() (in module polars)": [[560, "polars.format"]], "from_epoch() (in module polars)": [[561, "polars.from_epoch"]], "groups() (in module polars)": [[562, "polars.groups"]], "head() (in module polars)": [[563, "polars.head"]], "list() (in module polars)": [[564, "polars.list"]], "lit() (in module polars)": [[565, "polars.lit"]], "map() (in module polars)": [[566, "polars.map"]], "max() (in module polars)": [[567, "polars.max"]], "mean() (in module polars)": [[568, "polars.mean"]], "median() (in module polars)": [[569, "polars.median"]], "min() (in module polars)": [[570, "polars.min"]], "n_unique() (in module polars)": [[571, "polars.n_unique"]], "pearson_corr() (in module polars)": [[572, "polars.pearson_corr"]], "quantile() (in module polars)": [[573, "polars.quantile"]], "reduce() (in module polars)": [[574, "polars.reduce"]], "repeat() (in module polars)": [[575, "polars.repeat"]], "rolling_corr() (in module polars)": [[576, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[577, "polars.rolling_cov"]], "select() (in module polars)": [[578, "polars.select"]], "spearman_rank_corr() (in module polars)": [[579, "polars.spearman_rank_corr"]], "std() (in module polars)": [[580, "polars.std"]], "struct() (in module polars)": [[581, "polars.struct"]], "sum() (in module polars)": [[582, "polars.sum"]], "tail() (in module polars)": [[583, "polars.tail"]], "time() (in module polars)": [[584, "polars.time"]], "var() (in module polars)": [[585, "polars.var"]], "when() (in module polars)": [[586, "polars.when"]], "bottom_k() (polars.lazyframe method)": [[607, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[608, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[609, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[610, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[611, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[612, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[613, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[614, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[615, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[616, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[617, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[618, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[619, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[620, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[621, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[622, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[623, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[624, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[625, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[626, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[627, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[628, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[629, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[630, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[631, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[632, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[633, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[634, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[635, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[636, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[637, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[638, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[639, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[640, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[641, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[642, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[643, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[644, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[645, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[646, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[647, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[648, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[649, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[650, "polars.LazyFrame.select"]], "set_sorted() (polars.lazyframe method)": [[651, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[652, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[653, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[654, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[655, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[656, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[657, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[658, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[659, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[660, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[661, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[662, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[663, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[664, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[665, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[666, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[667, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[668, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[669, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[670, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[671, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[672, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[673, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[674, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[675, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[676, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[677, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[678, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[679, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[680, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[681, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[682, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[683, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[684, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[685, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[686, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[687, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[695, "polars.Series.abs"]], "alias() (polars.series method)": [[696, "polars.Series.alias"]], "all() (polars.series method)": [[697, "polars.Series.all"]], "any() (polars.series method)": [[698, "polars.Series.any"]], "append() (polars.series method)": [[699, "polars.Series.append"]], "apply() (polars.series method)": [[700, "polars.Series.apply"]], "arccos() (polars.series method)": [[701, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[702, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[703, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[704, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[705, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[706, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[707, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[708, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[709, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[710, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[711, "polars.Series.arg_unique"]], "arr (polars.series attribute)": [[712, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[713, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[714, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[715, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[716, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[717, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[718, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[719, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[720, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[721, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[722, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[723, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[724, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[725, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[726, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[727, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[728, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[729, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[730, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[731, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[732, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[733, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[734, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[735, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[736, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[737, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[738, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[739, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[740, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[741, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[742, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[743, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[744, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[745, "polars.Series.cast"]], "cat (polars.series attribute)": [[746, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[747, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[748, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[749, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[750, "polars.Series.clear"]], "clip() (polars.series method)": [[751, "polars.Series.clip"]], "clip_max() (polars.series method)": [[752, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[753, "polars.Series.clip_min"]], "clone() (polars.series method)": [[754, "polars.Series.clone"]], "cos() (polars.series method)": [[755, "polars.Series.cos"]], "cosh() (polars.series method)": [[756, "polars.Series.cosh"]], "cummax() (polars.series method)": [[757, "polars.Series.cummax"]], "cummin() (polars.series method)": [[758, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[759, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[760, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[761, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[762, "polars.Series.cut"]], "describe() (polars.series method)": [[763, "polars.Series.describe"]], "diff() (polars.series method)": [[764, "polars.Series.diff"]], "dot() (polars.series method)": [[765, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[766, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[767, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[768, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[769, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[770, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[771, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[772, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[773, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[774, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[775, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[776, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[777, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[778, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[779, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[780, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[781, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[782, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[783, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[784, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[785, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[786, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[787, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[788, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[789, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[790, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[791, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[792, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[793, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[794, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[795, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[796, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[797, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[798, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[799, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[800, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[801, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[802, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[803, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[804, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[805, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[806, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[807, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[808, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[809, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[810, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[811, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[812, "polars.Series.dtype"]], "entropy() (polars.series method)": [[813, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[814, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[815, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[816, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[817, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[818, "polars.Series.exp"]], "explode() (polars.series method)": [[819, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[820, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[821, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[822, "polars.Series.fill_null"]], "filter() (polars.series method)": [[823, "polars.Series.filter"]], "flags (polars.series attribute)": [[824, "polars.Series.flags"]], "floor() (polars.series method)": [[825, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[826, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[827, "polars.Series.has_validity"]], "hash() (polars.series method)": [[828, "polars.Series.hash"]], "head() (polars.series method)": [[829, "polars.Series.head"]], "hist() (polars.series method)": [[830, "polars.Series.hist"]], "implode() (polars.series method)": [[831, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[832, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[833, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[834, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[835, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[836, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[837, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[838, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[839, "polars.Series.is_first"]], "is_float() (polars.series method)": [[840, "polars.Series.is_float"]], "is_in() (polars.series method)": [[841, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[842, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[843, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[844, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[845, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[846, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[847, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[848, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[849, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[850, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[851, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[852, "polars.Series.is_utf8"]], "item() (polars.series method)": [[853, "polars.Series.item"]], "kurtosis() (polars.series method)": [[854, "polars.Series.kurtosis"]], "len() (polars.series method)": [[855, "polars.Series.len"]], "limit() (polars.series method)": [[856, "polars.Series.limit"]], "log() (polars.series method)": [[857, "polars.Series.log"]], "log10() (polars.series method)": [[858, "polars.Series.log10"]], "log1p() (polars.series method)": [[859, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[860, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[861, "polars.Series.map_dict"]], "max() (polars.series method)": [[862, "polars.Series.max"]], "mean() (polars.series method)": [[863, "polars.Series.mean"]], "median() (polars.series method)": [[864, "polars.Series.median"]], "min() (polars.series method)": [[865, "polars.Series.min"]], "mode() (polars.series method)": [[866, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[867, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[868, "polars.Series.n_unique"]], "name (polars.series attribute)": [[869, "polars.Series.name"]], "nan_max() (polars.series method)": [[870, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[871, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[872, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[873, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[874, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[875, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[876, "polars.Series.peak_min"]], "product() (polars.series method)": [[877, "polars.Series.product"]], "qcut() (polars.series method)": [[878, "polars.Series.qcut"]], "quantile() (polars.series method)": [[879, "polars.Series.quantile"]], "rank() (polars.series method)": [[880, "polars.Series.rank"]], "rechunk() (polars.series method)": [[881, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[882, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[883, "polars.Series.rename"]], "reshape() (polars.series method)": [[884, "polars.Series.reshape"]], "reverse() (polars.series method)": [[885, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[886, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[887, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[888, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[889, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[890, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[891, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[892, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[893, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[894, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[895, "polars.Series.rolling_var"]], "round() (polars.series method)": [[896, "polars.Series.round"]], "sample() (polars.series method)": [[897, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[898, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[899, "polars.Series.series_equal"]], "set() (polars.series method)": [[900, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[901, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[902, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[903, "polars.Series.shape"]], "shift() (polars.series method)": [[904, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[905, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[906, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[907, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[908, "polars.Series.shuffle"]], "sign() (polars.series method)": [[909, "polars.Series.sign"]], "sin() (polars.series method)": [[910, "polars.Series.sin"]], "sinh() (polars.series method)": [[911, "polars.Series.sinh"]], "skew() (polars.series method)": [[912, "polars.Series.skew"]], "slice() (polars.series method)": [[913, "polars.Series.slice"]], "sort() (polars.series method)": [[914, "polars.Series.sort"]], "sqrt() (polars.series method)": [[915, "polars.Series.sqrt"]], "std() (polars.series method)": [[916, "polars.Series.std"]], "str (polars.series attribute)": [[917, "polars.Series.str"]], "concat() (polars.series.str method)": [[918, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[919, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[920, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[921, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[922, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[923, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[924, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[925, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[926, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[927, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[928, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[929, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[930, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[931, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[932, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[933, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[934, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[935, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[936, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[937, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[938, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[939, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[940, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[941, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[942, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[943, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[944, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[945, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[946, "polars.Series.str.to_datetime"]], "to_lowercase() (polars.series.str method)": [[947, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[948, "polars.Series.str.to_time"]], "to_uppercase() (polars.series.str method)": [[949, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[950, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[951, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[952, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[953, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[954, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[955, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[956, "polars.Series.sum"]], "tail() (polars.series method)": [[957, "polars.Series.tail"]], "take() (polars.series method)": [[958, "polars.Series.take"]], "take_every() (polars.series method)": [[959, "polars.Series.take_every"]], "tan() (polars.series method)": [[960, "polars.Series.tan"]], "tanh() (polars.series method)": [[961, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[962, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[963, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[964, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[965, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[966, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[967, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[968, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[969, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[970, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[971, "polars.Series.top_k"]], "unique() (polars.series method)": [[972, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[973, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[974, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[975, "polars.Series.value_counts"]], "var() (polars.series method)": [[976, "polars.Series.var"]], "view() (polars.series method)": [[977, "polars.Series.view"]], "zip_with() (polars.series method)": [[978, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[993, "polars.SQLContext"]]}})