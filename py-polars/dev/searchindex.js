Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_dummies", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.time_range", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.time_range.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_dummies", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.time_range", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.any", "polars.apply", "polars.approx_unique", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.time", "polars.var", "polars.when", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 90, 100, 118, 131, 134, 135, 236, 254, 268, 594, 676, 701, 987], "refer": [0, 30, 102, 103, 106, 140, 254, 364, 367, 422, 451, 491, 510, 511, 512, 514, 594, 804, 807, 881, 945, 946, 947, 949, 987], "input": [0, 63, 92, 102, 103, 106, 135, 136, 147, 158, 186, 200, 207, 221, 231, 234, 254, 261, 268, 378, 397, 416, 431, 444, 481, 536, 537, 538, 539, 542, 544, 545, 546, 547, 553, 558, 559, 567, 568, 571, 582, 583, 594, 605, 608, 618, 625, 651, 659, 664, 670, 674, 692, 701, 835, 859, 860, 862, 987], "output": [0, 25, 27, 30, 31, 32, 33, 73, 106, 130, 135, 159, 160, 171, 181, 188, 197, 200, 227, 231, 254, 263, 268, 420, 421, 430, 533, 539, 548, 567, 580, 594, 605, 626, 627, 636, 640, 641, 651, 670, 673, 676, 692, 701, 976, 987], "seri": [0, 1, 22, 64, 65, 66, 67, 68, 71, 72, 73, 89, 91, 94, 96, 100, 121, 125, 130, 131, 135, 143, 151, 153, 155, 156, 161, 164, 165, 167, 169, 177, 178, 182, 193, 194, 209, 213, 216, 219, 220, 235, 254, 267, 268, 270, 271, 272, 273, 274, 275, 278, 279, 281, 282, 283, 288, 291, 292, 299, 300, 303, 304, 305, 308, 316, 317, 321, 322, 334, 336, 340, 343, 347, 349, 351, 356, 360, 361, 363, 368, 371, 380, 381, 387, 395, 397, 399, 400, 401, 402, 403, 405, 406, 407, 418, 420, 447, 451, 452, 453, 454, 455, 457, 469, 470, 473, 476, 477, 484, 499, 504, 510, 511, 512, 514, 517, 523, 524, 525, 526, 532, 537, 538, 539, 540, 541, 543, 549, 551, 552, 553, 559, 560, 562, 564, 566, 567, 568, 569, 570, 571, 572, 575, 576, 579, 581, 582, 583, 584, 586, 594, 605, 622, 675, 692, 981, 983, 986, 988, 991, 992, 993, 995], "datafram": [0, 1, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 49, 50, 52, 54, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 117, 120, 122, 123, 130, 252, 253, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 301, 302, 305, 306, 307, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 362, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 564, 567, 568, 569, 570, 571, 572, 573, 575, 579, 580, 581, 582, 583, 584, 586, 587, 594, 605, 612, 614, 618, 619, 623, 626, 631, 632, 633, 634, 636, 640, 641, 645, 649, 656, 657, 658, 659, 665, 666, 667, 670, 671, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 700, 701, 720, 748, 763, 764, 800, 831, 879, 929, 941, 942, 956, 965, 966, 976, 987, 995], "lazyfram": [0, 1, 49, 50, 51, 52, 63, 64, 65, 66, 67, 70, 71, 113, 114, 115, 116, 117, 118, 120, 125, 130, 175, 187, 254, 305, 384, 594, 605, 691, 994, 995], "express": [0, 68, 70, 73, 122, 125, 127, 130, 135, 136, 147, 149, 151, 158, 184, 188, 196, 200, 207, 221, 231, 234, 236, 254, 261, 263, 264, 265, 267, 268, 279, 285, 287, 305, 314, 318, 319, 320, 323, 329, 331, 335, 353, 354, 357, 364, 374, 378, 381, 384, 388, 390, 391, 395, 397, 401, 404, 409, 412, 413, 418, 419, 420, 421, 422, 426, 427, 428, 429, 430, 431, 435, 437, 441, 443, 444, 446, 447, 448, 449, 454, 468, 469, 470, 472, 474, 479, 481, 485, 486, 491, 492, 493, 494, 500, 501, 519, 520, 523, 529, 530, 532, 535, 536, 537, 538, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 566, 567, 568, 571, 573, 575, 576, 577, 578, 579, 580, 582, 583, 585, 587, 593, 605, 608, 612, 617, 618, 619, 622, 625, 645, 651, 654, 655, 656, 657, 659, 664, 670, 671, 674, 676, 692, 701, 718, 720, 752, 753, 754, 762, 771, 793, 794, 797, 821, 835, 899, 906, 920, 921, 926, 927, 928, 929, 935, 936, 987], "extend": [0, 92, 254, 381, 594, 605, 700, 821, 987], "function": [0, 30, 63, 64, 65, 66, 67, 72, 90, 96, 102, 103, 106, 113, 123, 135, 140, 146, 153, 180, 187, 188, 218, 222, 225, 226, 236, 254, 264, 268, 305, 329, 361, 375, 376, 377, 420, 421, 444, 446, 457, 458, 459, 460, 461, 462, 464, 465, 466, 478, 527, 537, 538, 539, 551, 552, 553, 559, 560, 562, 567, 568, 571, 575, 583, 594, 605, 636, 640, 644, 667, 676, 692, 701, 738, 762, 801, 815, 816, 817, 818, 831, 879, 887, 901, 902, 908, 913, 970, 987, 995], "data": [0, 1, 5, 15, 18, 28, 29, 30, 31, 35, 49, 54, 63, 64, 66, 71, 74, 79, 80, 84, 86, 89, 90, 91, 92, 93, 94, 95, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 120, 121, 123, 124, 125, 127, 134, 135, 137, 138, 148, 157, 158, 159, 171, 172, 173, 175, 186, 187, 191, 196, 197, 205, 212, 217, 218, 231, 233, 252, 254, 265, 268, 306, 315, 334, 362, 371, 374, 390, 391, 396, 403, 405, 412, 419, 441, 443, 451, 467, 468, 478, 491, 492, 510, 511, 512, 514, 527, 529, 530, 536, 545, 566, 580, 594, 605, 610, 611, 619, 625, 626, 644, 656, 657, 670, 692, 700, 701, 739, 746, 751, 755, 768, 770, 811, 831, 881, 897, 898, 908, 913, 945, 946, 947, 949, 968, 969, 970, 971, 973, 978, 986, 987], "type": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 73, 79, 89, 91, 92, 93, 94, 95, 100, 102, 103, 105, 106, 113, 114, 119, 120, 121, 124, 125, 130, 131, 135, 153, 157, 159, 160, 161, 172, 212, 218, 220, 223, 254, 268, 292, 305, 315, 316, 318, 319, 320, 336, 340, 343, 347, 349, 351, 356, 360, 363, 378, 392, 399, 401, 402, 422, 454, 505, 506, 507, 510, 527, 539, 545, 554, 555, 556, 558, 559, 566, 585, 594, 605, 612, 617, 619, 626, 627, 645, 655, 656, 657, 665, 692, 725, 738, 746, 748, 752, 753, 754, 772, 776, 779, 786, 788, 791, 796, 800, 803, 829, 908, 940, 941, 942, 945, 968, 969, 971, 979, 987], "config": [0, 63, 200, 231, 254, 556, 605, 651, 670, 692], "except": [0, 162, 174, 176, 210, 254, 558, 605, 632, 692, 830, 857, 958, 969, 978, 987], "test": [0, 106, 605, 628, 635, 692], "util": [0, 96, 562, 605, 619, 692], "sql": [0, 28, 49, 104, 173, 254, 605], "These": [1, 30, 132, 254, 368, 593, 808], "allow": [1, 29, 30, 54, 79, 90, 113, 115, 116, 117, 118, 125, 127, 134, 171, 174, 175, 196, 197, 198, 218, 223, 233, 254, 357, 364, 367, 453, 468, 510, 511, 512, 594, 631, 632, 636, 640, 656, 657, 665, 671, 692, 797, 804, 807, 883, 898, 900, 945, 946, 947, 970, 987, 995], "you": [1, 12, 30, 34, 63, 71, 89, 91, 92, 93, 95, 100, 102, 103, 106, 107, 111, 113, 120, 131, 132, 135, 144, 148, 159, 160, 171, 174, 184, 196, 197, 214, 217, 222, 236, 254, 268, 287, 305, 318, 319, 320, 353, 354, 360, 364, 367, 384, 397, 420, 422, 453, 458, 459, 460, 461, 462, 464, 465, 466, 495, 498, 510, 512, 541, 551, 560, 594, 612, 615, 626, 627, 628, 632, 635, 655, 657, 676, 692, 700, 701, 720, 752, 753, 754, 793, 794, 800, 804, 807, 835, 883, 930, 933, 945, 947, 969, 978, 987, 995], "regist": [1, 51, 52, 64, 65, 66, 67, 126, 128], "custom": [1, 30, 64, 65, 66, 67, 126, 127, 128, 135, 236, 254, 268, 305, 364, 367, 420, 457, 539, 567, 594, 636, 676, 692, 701, 738, 804, 807, 887, 987, 995], "dedic": [1, 90, 171, 197, 254], "namespac": [1, 253, 593, 605, 691], "underli": [1, 49, 75, 82, 89, 91, 92, 93, 95, 111, 122, 125, 127, 148, 171, 172, 197, 212, 254, 309, 334, 335, 339, 342, 344, 345, 346, 348, 350, 352, 355, 358, 359, 360, 362, 369, 370, 371, 372, 453, 467, 485, 487, 594, 692, 700, 741, 770, 771, 775, 778, 780, 781, 785, 787, 790, 792, 795, 798, 799, 800, 802, 809, 810, 811, 812, 883, 897, 908, 920, 922, 964, 969, 987], "polar": [1, 254, 593, 594, 599, 605, 692, 987, 994], "class": [1, 2, 3, 4, 14, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 94, 122, 123, 218, 254, 594, 599, 605, 692, 968, 969, 987, 994], "without": [1, 5, 72, 96, 105, 108, 112, 114, 118, 225, 226, 254, 268, 329, 361, 458, 459, 460, 461, 462, 464, 465, 466, 579, 594, 667, 692, 762, 768, 801, 831, 879, 987], "requir": [1, 29, 30, 34, 63, 94, 120, 121, 140, 196, 218, 254, 306, 375, 376, 377, 473, 510, 511, 512, 530, 594, 657, 692, 739, 816, 817, 818, 907, 945, 946, 947, 969, 970, 973, 987], "subclass": [1, 254], "mixin": 1, "expr": [1, 63, 64, 65, 66, 67, 68, 73, 130, 147, 149, 151, 173, 174, 184, 188, 196, 200, 231, 254, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 594, 595, 596, 599, 600, 601, 602, 618, 620, 622, 631, 632, 646, 651, 654, 670, 692, 718, 720, 762, 771, 822, 906, 920, 924, 943, 959, 987], "ar": [1, 5, 10, 14, 17, 25, 29, 30, 54, 63, 73, 74, 81, 88, 89, 90, 91, 92, 93, 94, 95, 96, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 118, 120, 121, 123, 125, 132, 134, 135, 136, 140, 144, 146, 149, 153, 158, 159, 160, 171, 174, 175, 180, 181, 186, 196, 197, 200, 201, 207, 213, 218, 221, 226, 227, 231, 234, 254, 264, 305, 325, 327, 328, 332, 333, 361, 368, 373, 375, 376, 377, 397, 399, 401, 402, 403, 405, 406, 407, 410, 422, 444, 451, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 475, 478, 480, 481, 495, 498, 499, 521, 537, 538, 541, 542, 544, 546, 547, 548, 553, 568, 571, 580, 582, 583, 587, 588, 590, 593, 594, 595, 596, 599, 600, 601, 602, 605, 608, 615, 620, 625, 626, 627, 628, 632, 635, 636, 640, 641, 645, 648, 651, 652, 656, 657, 659, 664, 667, 670, 671, 674, 692, 698, 700, 738, 760, 761, 801, 808, 814, 815, 816, 817, 818, 828, 835, 839, 842, 843, 845, 846, 847, 848, 855, 881, 885, 887, 893, 910, 913, 930, 933, 934, 957, 969, 970, 978, 981, 983, 987, 988, 991, 992, 993, 995], "all": [1, 7, 14, 17, 22, 25, 30, 35, 63, 70, 73, 89, 92, 94, 95, 97, 102, 103, 105, 106, 107, 111, 113, 115, 116, 122, 123, 127, 141, 144, 150, 162, 167, 169, 171, 172, 175, 176, 180, 183, 184, 191, 196, 197, 206, 210, 215, 223, 225, 227, 254, 265, 266, 267, 287, 292, 302, 305, 307, 323, 329, 333, 378, 389, 392, 394, 396, 399, 402, 406, 407, 409, 413, 420, 421, 436, 442, 448, 451, 456, 473, 479, 481, 486, 492, 494, 497, 500, 501, 503, 509, 520, 533, 545, 553, 558, 560, 575, 582, 583, 587, 594, 599, 605, 612, 615, 617, 619, 621, 636, 640, 645, 655, 658, 665, 671, 692, 720, 725, 735, 738, 762, 764, 768, 830, 837, 852, 857, 881, 914, 921, 927, 929, 932, 935, 936, 938, 944, 958, 987, 995], "support": [1, 29, 30, 34, 71, 89, 90, 91, 92, 93, 94, 95, 96, 104, 105, 106, 114, 122, 127, 132, 134, 171, 172, 197, 206, 207, 214, 218, 254, 300, 444, 479, 481, 504, 545, 594, 599, 658, 659, 692, 733, 914, 939, 970, 987], "target": [1, 29, 30, 69, 254, 368, 491, 510, 511, 512, 926, 945, 946, 947], "thi": [1, 5, 7, 11, 12, 25, 27, 29, 30, 32, 34, 38, 50, 52, 53, 54, 63, 70, 71, 72, 74, 89, 91, 92, 93, 94, 95, 96, 99, 100, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 131, 132, 134, 135, 140, 144, 145, 146, 148, 153, 158, 159, 160, 161, 165, 167, 169, 170, 171, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 186, 189, 190, 191, 196, 197, 198, 200, 204, 206, 208, 209, 212, 214, 217, 218, 222, 223, 225, 226, 227, 228, 229, 231, 232, 236, 237, 253, 254, 264, 267, 268, 269, 278, 287, 288, 292, 301, 305, 306, 313, 314, 316, 323, 329, 334, 345, 353, 354, 357, 360, 361, 364, 367, 371, 380, 395, 396, 397, 401, 413, 417, 418, 420, 426, 427, 428, 429, 430, 431, 439, 440, 444, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 468, 470, 472, 473, 474, 479, 480, 481, 491, 496, 497, 502, 503, 509, 510, 512, 516, 528, 530, 531, 532, 533, 537, 538, 540, 541, 546, 549, 551, 553, 559, 560, 562, 568, 571, 579, 583, 594, 605, 606, 609, 612, 615, 617, 619, 625, 626, 627, 629, 632, 636, 640, 641, 645, 648, 651, 654, 655, 656, 657, 658, 665, 667, 670, 671, 672, 673, 676, 677, 691, 692, 700, 701, 710, 720, 721, 725, 734, 739, 745, 748, 762, 768, 770, 771, 781, 793, 794, 797, 800, 801, 804, 807, 811, 815, 820, 827, 828, 831, 836, 841, 842, 844, 849, 851, 853, 854, 856, 861, 863, 864, 865, 866, 868, 869, 871, 872, 874, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 891, 894, 895, 896, 898, 901, 902, 903, 906, 907, 908, 909, 914, 915, 917, 926, 931, 932, 937, 938, 944, 945, 947, 951, 952, 956, 957, 964, 966, 968, 969, 970, 972, 973, 975, 977, 978, 987, 995], "featur": [1, 34, 38, 54, 69, 254], "i": [1, 5, 11, 12, 14, 27, 29, 30, 31, 32, 33, 38, 49, 54, 63, 68, 69, 70, 71, 72, 73, 76, 78, 79, 81, 85, 87, 89, 90, 91, 92, 93, 94, 95, 99, 102, 103, 104, 105, 107, 111, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 127, 129, 130, 134, 135, 144, 146, 154, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 174, 175, 176, 178, 180, 181, 184, 186, 187, 188, 196, 197, 198, 206, 207, 208, 209, 210, 212, 218, 222, 223, 225, 226, 227, 228, 236, 237, 253, 254, 261, 264, 266, 267, 268, 269, 279, 287, 290, 300, 304, 305, 314, 323, 329, 335, 344, 357, 361, 364, 368, 375, 376, 377, 380, 392, 395, 397, 410, 417, 420, 422, 426, 429, 431, 444, 451, 453, 455, 458, 459, 460, 461, 462, 464, 465, 466, 468, 469, 470, 474, 475, 478, 479, 480, 481, 483, 485, 486, 491, 492, 494, 496, 497, 499, 500, 502, 503, 504, 507, 509, 510, 511, 512, 514, 516, 533, 534, 537, 538, 540, 541, 545, 546, 548, 549, 551, 552, 553, 560, 566, 568, 571, 573, 577, 578, 579, 580, 581, 583, 586, 587, 594, 612, 615, 617, 619, 625, 626, 627, 630, 632, 634, 636, 640, 641, 645, 655, 656, 657, 658, 659, 660, 665, 667, 668, 673, 676, 677, 692, 699, 700, 701, 720, 723, 733, 737, 738, 762, 771, 780, 797, 801, 804, 808, 815, 816, 817, 818, 820, 828, 829, 830, 831, 834, 836, 838, 844, 849, 850, 851, 853, 854, 855, 857, 879, 881, 883, 885, 898, 899, 900, 901, 902, 903, 909, 910, 913, 914, 917, 920, 921, 926, 927, 929, 931, 932, 934, 935, 937, 938, 939, 942, 944, 945, 946, 947, 949, 951, 958, 964, 969, 970, 976, 977, 978, 987, 995], "primarili": 1, "intend": 1, "us": [1, 9, 11, 12, 17, 22, 23, 27, 28, 30, 34, 49, 51, 54, 63, 71, 72, 73, 90, 92, 93, 95, 97, 98, 100, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 126, 127, 129, 130, 131, 135, 142, 144, 149, 150, 153, 158, 159, 160, 167, 169, 171, 172, 174, 178, 180, 183, 184, 187, 188, 196, 198, 200, 207, 208, 209, 215, 216, 218, 222, 223, 225, 226, 227, 228, 231, 234, 236, 254, 262, 268, 269, 279, 287, 305, 309, 310, 314, 316, 329, 332, 333, 360, 364, 367, 371, 373, 375, 376, 377, 383, 384, 396, 397, 410, 420, 422, 425, 444, 451, 453, 455, 458, 459, 460, 461, 462, 464, 465, 466, 468, 470, 473, 474, 478, 480, 481, 483, 485, 487, 488, 489, 491, 492, 495, 496, 500, 502, 504, 506, 508, 510, 511, 512, 514, 534, 537, 538, 539, 540, 541, 545, 547, 548, 551, 553, 560, 562, 566, 568, 571, 573, 576, 577, 578, 579, 580, 581, 582, 583, 586, 593, 594, 605, 612, 614, 615, 620, 621, 625, 626, 627, 628, 632, 634, 635, 640, 651, 657, 659, 660, 665, 667, 668, 670, 674, 676, 692, 701, 720, 738, 741, 742, 748, 762, 800, 804, 807, 811, 814, 816, 817, 818, 822, 823, 828, 831, 835, 855, 862, 881, 883, 885, 898, 901, 902, 903, 907, 909, 913, 917, 920, 922, 923, 926, 927, 930, 931, 935, 937, 939, 941, 945, 946, 947, 949, 959, 965, 967, 968, 969, 970, 977, 978, 987, 995], "librari": [1, 75, 82, 420, 594, 995], "author": 1, "domain": [1, 492, 927], "specif": [1, 25, 29, 30, 89, 91, 93, 95, 102, 104, 105, 114, 124, 125, 171, 254, 364, 367, 457, 510, 511, 512, 514, 594, 692, 804, 807, 887, 945, 946, 947, 949, 987, 995], "capabl": [1, 30, 254], "which": [1, 17, 26, 27, 30, 31, 32, 33, 34, 63, 64, 65, 66, 67, 92, 102, 103, 104, 105, 106, 113, 114, 120, 126, 128, 136, 144, 148, 159, 160, 217, 221, 223, 254, 264, 305, 364, 381, 397, 399, 402, 403, 405, 406, 407, 431, 458, 459, 460, 461, 462, 464, 465, 466, 499, 587, 594, 608, 615, 617, 626, 627, 656, 657, 664, 665, 673, 692, 700, 738, 804, 821, 835, 839, 843, 845, 846, 847, 848, 901, 934, 987, 995], "mai": [1, 29, 38, 71, 72, 89, 91, 92, 93, 95, 102, 105, 107, 114, 115, 118, 135, 146, 148, 174, 203, 204, 218, 225, 226, 254, 268, 299, 304, 305, 329, 334, 345, 361, 430, 458, 459, 460, 461, 462, 464, 465, 466, 471, 472, 510, 512, 551, 552, 560, 575, 594, 632, 636, 653, 654, 657, 667, 672, 676, 692, 700, 701, 732, 737, 762, 770, 781, 801, 815, 831, 879, 905, 906, 945, 947, 987, 995], "exist": [1, 28, 29, 30, 63, 105, 114, 125, 231, 254, 335, 368, 670, 692, 771], "belong": [1, 159, 254, 626, 692], "core": [1, 218, 254, 995], "cannot": [1, 90, 102, 103, 106, 107, 120, 129, 135, 198, 236, 254, 309, 422, 468, 487, 506, 518, 594, 655, 676, 692, 701, 741, 898, 922, 941, 987], "overrid": [1, 30, 89, 91, 92, 93, 94, 95, 102, 122, 123, 127, 129, 254, 422, 594, 692, 862, 987], "str": [1, 6, 8, 11, 13, 14, 17, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 49, 50, 51, 52, 53, 54, 63, 64, 65, 66, 67, 69, 72, 73, 74, 89, 91, 92, 93, 95, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 123, 125, 126, 127, 128, 130, 136, 139, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 155, 157, 158, 159, 160, 162, 164, 167, 169, 170, 171, 173, 174, 177, 178, 179, 180, 181, 182, 184, 186, 188, 190, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 261, 262, 263, 268, 283, 284, 285, 290, 291, 292, 300, 303, 305, 331, 336, 357, 360, 361, 364, 367, 368, 378, 382, 384, 386, 395, 397, 404, 421, 422, 430, 432, 444, 446, 448, 454, 456, 458, 459, 460, 461, 462, 464, 465, 466, 472, 473, 480, 481, 517, 518, 520, 523, 535, 536, 537, 539, 540, 543, 545, 547, 548, 549, 550, 551, 552, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 569, 570, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 584, 585, 586, 594, 600, 608, 612, 613, 614, 615, 617, 618, 619, 622, 624, 625, 626, 627, 629, 631, 632, 640, 641, 645, 647, 648, 649, 652, 654, 655, 656, 657, 658, 659, 664, 665, 666, 667, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 697, 717, 718, 725, 738, 746, 763, 764, 772, 797, 800, 801, 804, 807, 808, 823, 862, 871, 872, 879, 884, 901, 902, 952, 954, 965, 966, 967, 987, 991, 995], "dt": [1, 63, 73, 160, 254, 556, 602, 627, 692, 993], "attempt": [1, 217, 254], "do": [1, 30, 63, 70, 71, 113, 148, 174, 212, 222, 225, 254, 287, 329, 497, 503, 509, 594, 612, 617, 632, 636, 645, 655, 656, 657, 692, 700, 720, 762, 932, 938, 944, 969, 978, 987], "so": [1, 54, 104, 113, 129, 157, 159, 160, 188, 254, 279, 290, 305, 314, 397, 497, 503, 509, 594, 626, 627, 692, 723, 932, 938, 944], "rais": [1, 13, 17, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 120, 121, 196, 254, 304, 309, 360, 430, 485, 487, 499, 510, 511, 512, 514, 566, 737, 741, 800, 920, 922, 934, 945, 946, 947, 949, 969, 978, 987], "an": [1, 5, 25, 28, 29, 30, 38, 64, 66, 67, 68, 70, 73, 75, 79, 80, 82, 89, 102, 103, 104, 105, 106, 108, 111, 113, 115, 123, 125, 127, 130, 135, 137, 138, 146, 149, 151, 153, 159, 160, 171, 172, 174, 184, 188, 194, 196, 212, 217, 225, 231, 236, 254, 263, 264, 268, 285, 287, 290, 304, 305, 309, 315, 318, 319, 320, 324, 325, 326, 327, 328, 329, 335, 360, 364, 371, 381, 384, 409, 420, 421, 431, 449, 457, 458, 459, 460, 461, 462, 464, 465, 466, 485, 487, 492, 510, 511, 512, 514, 523, 529, 537, 538, 541, 545, 553, 557, 562, 566, 568, 571, 575, 576, 579, 582, 583, 587, 594, 605, 610, 611, 612, 617, 619, 622, 626, 627, 632, 636, 645, 655, 670, 671, 676, 692, 701, 718, 720, 723, 737, 741, 746, 751, 752, 753, 754, 755, 758, 759, 760, 761, 762, 771, 800, 804, 811, 815, 821, 844, 887, 888, 889, 890, 891, 892, 894, 895, 896, 901, 902, 920, 922, 927, 945, 946, 947, 949, 969, 978, 987], "attributeerror": 1, "howev": [1, 92, 146, 254, 815, 987], "can": [1, 12, 30, 63, 73, 80, 92, 102, 103, 106, 107, 111, 113, 115, 117, 118, 123, 124, 125, 127, 129, 130, 132, 135, 136, 145, 153, 159, 160, 167, 169, 184, 188, 200, 207, 217, 221, 222, 225, 231, 236, 254, 268, 287, 305, 314, 325, 328, 329, 353, 354, 357, 360, 368, 381, 396, 397, 430, 436, 453, 458, 459, 460, 461, 462, 464, 465, 466, 470, 473, 475, 478, 481, 494, 497, 503, 509, 510, 533, 541, 542, 545, 560, 562, 587, 593, 594, 608, 612, 617, 626, 627, 651, 659, 664, 670, 672, 676, 692, 701, 720, 738, 762, 793, 794, 797, 800, 808, 821, 835, 867, 883, 901, 902, 903, 907, 910, 913, 929, 932, 938, 944, 945, 987], "other": [1, 17, 30, 73, 102, 103, 106, 113, 120, 121, 144, 148, 154, 173, 174, 180, 181, 196, 200, 226, 231, 252, 254, 261, 265, 267, 279, 283, 318, 319, 320, 331, 374, 388, 390, 391, 397, 401, 412, 419, 422, 426, 429, 435, 437, 441, 443, 481, 519, 527, 529, 536, 537, 538, 544, 546, 547, 553, 568, 571, 582, 583, 594, 605, 615, 631, 632, 640, 641, 651, 667, 670, 671, 692, 700, 716, 752, 753, 754, 766, 842, 900, 971, 979, 986, 987], "onli": [1, 17, 25, 30, 51, 54, 63, 69, 71, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 125, 127, 132, 135, 144, 159, 160, 171, 174, 178, 197, 209, 214, 216, 227, 254, 262, 268, 279, 314, 317, 318, 319, 320, 357, 378, 387, 453, 531, 576, 594, 612, 615, 626, 627, 628, 632, 635, 692, 749, 752, 753, 754, 797, 826, 844, 883, 964, 967, 987, 995], "gener": [1, 97, 104, 122, 123, 124, 125, 127, 130, 140, 188, 198, 215, 222, 254, 468, 474, 594, 692, 898, 909, 965, 987, 995], "userwarn": 1, "pl": [1, 7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32, 33, 34, 51, 54, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 89, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 103, 104, 105, 106, 107, 113, 114, 118, 119, 120, 121, 122, 123, 124, 125, 127, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 579, 580, 581, 582, 583, 584, 585, 586, 587, 594, 606, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 697, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 719, 720, 721, 724, 725, 727, 732, 733, 734, 736, 738, 745, 746, 748, 749, 750, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 817, 818, 821, 822, 823, 824, 826, 829, 830, 831, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 875, 876, 877, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 909, 910, 911, 912, 914, 915, 916, 917, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 949, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 987, 995], "register_expr_namespac": [1, 64, 66, 67], "greet": 1, "def": [1, 64, 65, 66, 67, 123, 124, 125, 127, 187, 222, 254, 261, 446, 492, 536, 567, 594, 644, 692, 927, 995], "__init__": [1, 2, 3, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 122], "self": [1, 50, 51, 52, 53, 64, 65, 66, 67, 70, 135, 136, 137, 138, 140, 141, 142, 144, 147, 148, 149, 150, 151, 158, 159, 160, 162, 164, 165, 166, 173, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 307, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 594, 608, 609, 610, 611, 612, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 692, 700, 701, 746, 755, 824, 832, 861, 862, 873, 876, 877, 882, 901, 902, 903, 915, 975, 979, 987], "_expr": [1, 65], "hello": [1, 17, 497, 503, 509, 537, 725, 932, 938, 944], "return": [1, 25, 27, 30, 31, 32, 33, 49, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 81, 83, 88, 89, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 112, 113, 114, 124, 130, 131, 135, 136, 137, 140, 143, 144, 145, 146, 147, 149, 150, 153, 157, 158, 159, 160, 162, 164, 170, 171, 172, 173, 175, 176, 183, 184, 186, 187, 188, 196, 197, 198, 210, 211, 217, 218, 221, 222, 223, 227, 231, 233, 236, 239, 243, 248, 254, 264, 266, 270, 271, 272, 273, 274, 275, 278, 279, 281, 282, 284, 288, 290, 291, 292, 303, 304, 308, 310, 313, 321, 322, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 366, 368, 369, 370, 372, 380, 393, 397, 399, 400, 401, 402, 403, 405, 406, 407, 414, 418, 422, 431, 436, 446, 454, 455, 468, 469, 475, 476, 477, 484, 486, 488, 490, 491, 492, 494, 495, 496, 498, 499, 502, 504, 505, 506, 507, 516, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 536, 537, 538, 539, 541, 542, 545, 554, 555, 556, 562, 564, 566, 567, 576, 579, 582, 584, 585, 587, 594, 608, 610, 612, 615, 616, 617, 619, 626, 627, 628, 634, 635, 636, 644, 645, 655, 656, 657, 662, 663, 664, 665, 670, 673, 679, 683, 688, 692, 697, 698, 699, 701, 708, 709, 711, 712, 714, 715, 717, 721, 723, 724, 725, 736, 737, 740, 742, 745, 751, 763, 764, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 805, 806, 808, 809, 810, 812, 815, 820, 828, 830, 831, 837, 839, 840, 842, 843, 845, 846, 847, 848, 852, 854, 857, 861, 862, 867, 879, 885, 886, 898, 899, 900, 902, 910, 919, 920, 921, 923, 925, 926, 927, 929, 930, 931, 933, 934, 937, 939, 940, 941, 942, 951, 958, 960, 972, 974, 975, 979, 987, 995], "lit": [1, 100, 131, 397, 409, 551, 560, 587, 594, 823, 987], "alia": [1, 11, 63, 65, 67, 159, 160, 176, 224, 231, 254, 261, 265, 268, 285, 287, 313, 318, 319, 320, 324, 325, 326, 327, 328, 330, 334, 335, 336, 339, 340, 341, 343, 345, 346, 347, 349, 351, 356, 357, 358, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 374, 384, 386, 388, 390, 391, 395, 397, 400, 401, 409, 412, 413, 414, 419, 421, 422, 433, 435, 437, 441, 443, 445, 447, 448, 453, 469, 485, 486, 489, 491, 492, 495, 498, 504, 506, 507, 508, 517, 518, 519, 520, 527, 528, 529, 535, 536, 537, 538, 539, 543, 544, 546, 547, 551, 552, 553, 556, 557, 560, 561, 567, 568, 571, 575, 576, 582, 583, 587, 594, 626, 627, 629, 635, 666, 670, 692, 720, 770, 772, 777, 797, 800, 804, 806, 811, 857, 926, 927, 941, 942, 987], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 17, 497, 503, 509, 725, 932, 938, 944], "select": [1, 28, 51, 63, 64, 65, 66, 68, 101, 102, 103, 104, 105, 107, 111, 113, 118, 124, 135, 170, 174, 184, 187, 196, 206, 219, 224, 227, 254, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 301, 302, 305, 306, 307, 313, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 385, 387, 389, 392, 394, 395, 396, 398, 399, 401, 402, 404, 408, 409, 410, 411, 413, 415, 416, 417, 418, 420, 421, 423, 424, 425, 434, 436, 438, 439, 440, 442, 443, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 490, 491, 492, 493, 494, 496, 497, 499, 502, 503, 505, 506, 507, 509, 510, 513, 515, 517, 518, 520, 521, 524, 525, 526, 528, 530, 531, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 552, 553, 556, 558, 559, 560, 561, 562, 564, 568, 569, 570, 571, 572, 573, 575, 580, 581, 582, 583, 584, 586, 594, 613, 629, 632, 644, 658, 666, 671, 673, 692, 720, 800, 901, 902, 914, 929, 945, 959, 987], "shape": [1, 9, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 51, 54, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 86, 89, 91, 92, 93, 94, 95, 96, 97, 100, 113, 118, 125, 127, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 173, 174, 177, 178, 179, 180, 182, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 198, 200, 203, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 564, 567, 568, 569, 570, 571, 572, 573, 575, 579, 580, 581, 582, 583, 584, 586, 587, 594, 608, 610, 612, 614, 615, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 648, 649, 651, 653, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 700, 701, 702, 703, 704, 705, 706, 707, 710, 711, 712, 719, 720, 721, 724, 725, 727, 732, 733, 734, 736, 738, 745, 746, 748, 749, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 817, 818, 821, 822, 823, 824, 826, 829, 830, 831, 834, 835, 837, 839, 842, 843, 845, 846, 847, 848, 852, 854, 861, 862, 867, 875, 876, 877, 879, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 901, 902, 905, 909, 910, 911, 912, 914, 915, 916, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 949, 956, 958, 959, 960, 961, 962, 965, 966, 967, 971, 972, 973, 974, 975, 976, 979, 987], "3": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 34, 51, 54, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 89, 91, 92, 93, 94, 95, 96, 97, 104, 106, 113, 118, 119, 120, 121, 124, 125, 130, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 261, 262, 263, 264, 268, 278, 279, 280, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 307, 313, 315, 316, 317, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 344, 350, 352, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 435, 436, 437, 441, 442, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 478, 480, 481, 482, 485, 488, 489, 491, 492, 493, 495, 498, 500, 504, 505, 506, 507, 508, 511, 514, 517, 518, 519, 520, 522, 523, 524, 528, 531, 532, 533, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 579, 580, 581, 582, 583, 584, 586, 587, 594, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 648, 649, 650, 651, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 697, 700, 701, 702, 704, 705, 706, 708, 709, 710, 711, 712, 719, 720, 721, 724, 727, 732, 733, 734, 736, 738, 745, 746, 748, 749, 750, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 770, 771, 772, 775, 776, 777, 778, 780, 782, 783, 784, 786, 788, 789, 790, 792, 796, 798, 800, 801, 802, 804, 806, 807, 808, 810, 811, 815, 817, 818, 821, 822, 823, 824, 826, 829, 830, 831, 834, 835, 837, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 855, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 875, 876, 877, 879, 880, 881, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 909, 911, 912, 913, 914, 915, 917, 923, 924, 926, 927, 928, 930, 933, 935, 939, 943, 946, 949, 956, 957, 958, 959, 960, 961, 962, 964, 965, 968, 969, 970, 972, 973, 974, 975, 976, 977, 979, 987, 995], "1": [1, 9, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 34, 51, 54, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 89, 91, 92, 93, 94, 95, 96, 97, 100, 102, 103, 104, 105, 106, 107, 113, 114, 118, 119, 120, 121, 122, 125, 127, 130, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 313, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 594, 608, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 648, 649, 650, 651, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 697, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 719, 720, 721, 723, 724, 727, 732, 733, 734, 736, 738, 745, 746, 748, 749, 750, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 816, 817, 818, 821, 822, 823, 824, 826, 829, 830, 831, 834, 835, 837, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 854, 856, 861, 863, 864, 865, 866, 867, 868, 869, 875, 876, 877, 879, 880, 881, 884, 885, 886, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 926, 928, 929, 935, 941, 942, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 987, 995], "2": [1, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 34, 51, 54, 63, 64, 65, 66, 67, 68, 71, 72, 74, 89, 91, 92, 93, 94, 95, 96, 97, 104, 113, 118, 119, 120, 121, 124, 125, 127, 130, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 175, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 265, 266, 267, 268, 269, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 313, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 335, 336, 340, 342, 343, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 359, 360, 361, 362, 363, 364, 367, 368, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 478, 479, 480, 481, 482, 484, 486, 489, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 503, 504, 506, 507, 508, 509, 510, 512, 513, 515, 517, 518, 519, 520, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567, 568, 569, 570, 571, 572, 573, 575, 579, 580, 581, 582, 583, 584, 586, 587, 594, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 645, 646, 648, 649, 650, 651, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 697, 700, 701, 703, 707, 708, 709, 710, 711, 712, 719, 720, 721, 724, 725, 727, 732, 733, 734, 736, 738, 745, 748, 749, 750, 751, 755, 756, 759, 760, 761, 762, 763, 764, 765, 766, 771, 773, 774, 778, 783, 784, 790, 792, 793, 794, 799, 800, 801, 802, 805, 808, 810, 812, 814, 815, 816, 817, 818, 821, 822, 823, 824, 826, 829, 830, 831, 834, 835, 837, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 856, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 875, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 909, 911, 913, 914, 915, 916, 917, 919, 921, 926, 927, 928, 929, 932, 933, 934, 935, 936, 938, 941, 942, 944, 945, 947, 956, 957, 958, 959, 960, 961, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 979, 987, 995], "column_0": [1, 135, 222, 254], "register_dataframe_namespac": [1, 65, 66, 67], "split": [1, 64, 172, 254, 506, 507, 941, 942], "splitfram": [1, 64], "df": [1, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 34, 64, 65, 68, 89, 90, 91, 92, 93, 94, 95, 96, 97, 103, 113, 123, 125, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 301, 302, 305, 306, 307, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 564, 567, 568, 569, 570, 571, 572, 573, 575, 579, 580, 581, 582, 583, 584, 586, 587, 594, 627, 666, 667, 673, 676, 679, 688, 692, 720, 748, 800, 929, 936, 941, 942, 966, 987, 995], "_df": [1, 64], "by_alternate_row": 1, "list": [1, 29, 30, 37, 63, 64, 66, 70, 72, 89, 91, 92, 93, 95, 96, 99, 101, 102, 103, 104, 105, 107, 111, 113, 114, 123, 124, 125, 127, 130, 139, 142, 145, 146, 147, 151, 156, 158, 159, 164, 171, 183, 186, 196, 197, 200, 207, 213, 214, 222, 223, 224, 225, 231, 234, 235, 254, 262, 283, 286, 287, 288, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 380, 386, 394, 420, 431, 432, 444, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 472, 480, 481, 492, 505, 517, 518, 523, 527, 542, 545, 546, 553, 557, 566, 582, 583, 594, 613, 614, 616, 618, 622, 625, 626, 640, 651, 659, 665, 666, 670, 671, 674, 675, 692, 713, 716, 719, 720, 721, 723, 724, 725, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 750, 763, 815, 820, 824, 827, 831, 832, 842, 879, 885, 887, 888, 889, 890, 891, 892, 894, 895, 896, 899, 927, 940, 959, 968, 971, 987, 995], "with_row_count": [1, 254, 422, 594, 692, 902, 987], "name": [1, 15, 19, 21, 28, 30, 32, 50, 51, 52, 53, 64, 65, 66, 67, 71, 72, 73, 78, 89, 91, 92, 93, 94, 95, 97, 101, 102, 103, 105, 106, 107, 108, 111, 112, 113, 115, 116, 117, 121, 122, 123, 125, 126, 127, 128, 130, 135, 136, 139, 142, 143, 144, 147, 152, 155, 157, 158, 170, 171, 173, 174, 180, 186, 188, 192, 196, 197, 199, 200, 207, 213, 215, 217, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 254, 263, 268, 305, 361, 368, 378, 397, 409, 421, 430, 432, 444, 448, 481, 492, 517, 518, 520, 537, 538, 540, 542, 544, 545, 546, 547, 548, 550, 553, 558, 564, 565, 568, 571, 573, 574, 576, 577, 578, 580, 582, 583, 584, 594, 608, 613, 614, 615, 618, 625, 631, 632, 640, 648, 650, 651, 659, 664, 665, 666, 667, 670, 672, 673, 674, 692, 697, 738, 751, 763, 801, 808, 879, 884, 926, 927, 935, 952, 954, 965, 966, 970, 987, 995], "n": [1, 11, 14, 22, 33, 37, 39, 51, 64, 65, 66, 67, 73, 99, 100, 102, 103, 113, 131, 135, 137, 148, 159, 162, 171, 172, 176, 197, 198, 208, 210, 211, 214, 216, 228, 239, 248, 254, 286, 291, 303, 305, 313, 329, 330, 334, 335, 341, 366, 371, 381, 393, 414, 445, 446, 454, 468, 478, 483, 500, 506, 507, 512, 522, 524, 528, 529, 534, 536, 548, 562, 564, 573, 576, 577, 578, 580, 581, 584, 586, 594, 610, 612, 626, 628, 635, 660, 662, 663, 668, 679, 688, 692, 700, 719, 724, 736, 738, 745, 751, 762, 765, 770, 771, 777, 806, 811, 821, 830, 857, 875, 898, 913, 917, 935, 941, 942, 947, 958, 960, 967, 972, 977, 987, 995], "filter": [1, 64, 105, 113, 114, 118, 144, 167, 168, 169, 236, 254, 489, 508, 535, 541, 560, 594, 615, 619, 629, 676, 692, 901, 987], "col": [1, 11, 27, 30, 63, 64, 65, 66, 68, 93, 95, 113, 123, 125, 135, 147, 151, 158, 159, 160, 168, 170, 184, 187, 196, 200, 207, 224, 231, 234, 254, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 301, 302, 305, 306, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 381, 384, 385, 386, 387, 388, 390, 391, 395, 396, 397, 398, 400, 401, 403, 404, 405, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 422, 423, 424, 425, 434, 435, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 515, 516, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 544, 546, 547, 551, 552, 553, 556, 559, 560, 561, 562, 563, 568, 571, 574, 575, 583, 587, 594, 618, 622, 625, 626, 627, 629, 644, 651, 659, 666, 670, 671, 674, 692, 720, 748, 797, 800, 885, 901, 902, 929, 945, 987, 995], "0": [1, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 34, 63, 64, 65, 67, 68, 72, 73, 97, 102, 103, 104, 106, 107, 111, 113, 115, 116, 117, 118, 119, 122, 123, 124, 125, 127, 130, 131, 135, 137, 138, 140, 141, 142, 145, 149, 150, 153, 154, 156, 157, 158, 159, 161, 165, 170, 171, 172, 173, 175, 177, 178, 179, 182, 183, 184, 185, 188, 189, 190, 194, 198, 199, 200, 204, 206, 207, 208, 209, 215, 216, 217, 218, 219, 222, 225, 227, 228, 231, 232, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 260, 262, 265, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 285, 287, 290, 296, 305, 315, 317, 319, 320, 321, 322, 324, 329, 332, 333, 342, 346, 347, 349, 350, 356, 362, 363, 374, 375, 376, 377, 379, 381, 382, 383, 387, 388, 390, 391, 392, 396, 399, 402, 403, 405, 406, 407, 409, 410, 412, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 434, 435, 437, 439, 440, 441, 442, 443, 445, 446, 447, 450, 451, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 473, 475, 476, 477, 478, 482, 483, 491, 492, 510, 516, 519, 521, 525, 526, 527, 529, 534, 541, 542, 543, 544, 546, 548, 550, 551, 555, 557, 560, 565, 569, 570, 573, 574, 575, 580, 585, 586, 587, 594, 610, 611, 614, 616, 620, 621, 625, 626, 631, 634, 639, 643, 645, 646, 650, 651, 654, 655, 657, 659, 660, 668, 670, 671, 672, 674, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 692, 702, 703, 704, 705, 706, 707, 708, 710, 712, 720, 723, 738, 746, 749, 751, 756, 757, 762, 763, 764, 766, 778, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 796, 802, 803, 814, 816, 817, 818, 822, 826, 829, 831, 839, 841, 843, 845, 846, 847, 848, 854, 855, 861, 864, 865, 875, 879, 880, 881, 887, 889, 890, 892, 893, 894, 896, 897, 898, 910, 911, 912, 916, 917, 919, 926, 927, 929, 945, 951, 961, 962, 965, 970, 971, 975, 977, 978, 987, 995], "drop": [1, 92, 135, 143, 144, 223, 231, 254, 286, 330, 332, 333, 510, 594, 615, 665, 670, 692, 719, 765, 767, 768, 945, 987], "aaa": [1, 30, 254, 485, 517, 518, 920], "bbb": [1, 30, 254, 517, 518], "ccc": [1, 30, 254, 517, 518], "ddd": [1, 30, 254, 517, 518], "eee": [1, 30, 254], "fff": 1, "column": [1, 14, 15, 18, 19, 21, 30, 32, 54, 63, 64, 71, 72, 73, 76, 78, 89, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 120, 125, 130, 134, 135, 136, 142, 143, 144, 145, 147, 152, 155, 157, 158, 159, 160, 164, 165, 170, 171, 173, 174, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 207, 208, 209, 213, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 234, 254, 264, 266, 268, 278, 283, 288, 301, 304, 305, 335, 339, 342, 344, 345, 346, 348, 350, 352, 355, 358, 359, 362, 364, 367, 369, 370, 372, 378, 380, 384, 386, 397, 409, 422, 428, 430, 432, 444, 448, 452, 454, 455, 458, 459, 460, 461, 462, 464, 465, 466, 473, 480, 481, 490, 506, 507, 510, 511, 512, 514, 520, 535, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 594, 608, 614, 615, 616, 618, 625, 626, 627, 631, 632, 636, 637, 638, 639, 640, 642, 643, 644, 646, 648, 650, 651, 652, 659, 660, 661, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 692, 698, 699, 716, 721, 734, 737, 763, 773, 774, 775, 778, 780, 781, 785, 787, 790, 792, 795, 798, 799, 802, 804, 805, 807, 809, 810, 812, 820, 879, 885, 907, 925, 941, 942, 945, 946, 947, 949, 956, 965, 966, 987, 995], "txt": [1, 11, 113], "utf8": [1, 9, 17, 54, 74, 92, 96, 102, 103, 113, 122, 124, 127, 145, 146, 147, 153, 199, 217, 254, 292, 364, 367, 380, 422, 484, 488, 491, 492, 494, 495, 504, 505, 506, 507, 510, 511, 512, 514, 545, 547, 594, 616, 618, 650, 692, 725, 804, 807, 820, 853, 919, 923, 926, 927, 929, 930, 939, 940, 941, 942, 945, 946, 947, 949, 987], "register_lazyframe_namespac": [1, 64, 65, 67], "dtypeoper": [1, 66], "ldf": [1, 66, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688], "_ldf": [1, 66], "upcast_integer_typ": [1, 66], "with_column": [1, 11, 66, 130, 160, 187, 254, 261, 268, 279, 287, 315, 316, 318, 319, 320, 325, 328, 330, 360, 364, 367, 374, 388, 390, 391, 392, 396, 397, 400, 403, 405, 406, 407, 409, 412, 419, 421, 422, 435, 437, 441, 444, 445, 446, 447, 485, 489, 492, 495, 498, 500, 501, 504, 506, 507, 508, 516, 519, 527, 529, 536, 539, 541, 544, 547, 553, 557, 567, 583, 587, 594, 627, 644, 692, 720, 748, 800], "tp": [1, 66], "cast": [1, 65, 66, 74, 89, 153, 159, 160, 187, 218, 231, 254, 267, 316, 327, 328, 334, 364, 367, 422, 443, 446, 453, 493, 494, 516, 521, 527, 547, 594, 626, 627, 644, 670, 692, 748, 760, 761, 770, 804, 807, 883, 928, 929, 957, 966, 971, 987], "int64": [1, 30, 32, 65, 66, 96, 100, 102, 131, 145, 153, 159, 160, 187, 199, 212, 218, 254, 327, 328, 340, 343, 347, 349, 351, 356, 363, 378, 446, 453, 493, 521, 527, 541, 545, 558, 566, 582, 594, 616, 626, 627, 644, 650, 673, 692, 760, 761, 776, 779, 786, 788, 791, 796, 803, 883, 900, 957, 969, 970, 971, 987], "int8": [1, 66, 153, 254, 327, 328, 521, 594, 760, 761, 765, 862, 886, 957, 975, 987], "int16": [1, 66, 327, 328, 521, 594, 760, 761, 862, 957, 967, 987], "int32": [1, 66, 89, 92, 96, 124, 125, 159, 160, 172, 254, 315, 345, 372, 527, 594, 626, 627, 692, 781, 812, 861, 971, 987], "b": [1, 26, 27, 29, 31, 34, 51, 54, 66, 71, 74, 89, 91, 92, 93, 94, 95, 96, 97, 106, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 164, 165, 167, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 261, 263, 267, 268, 280, 283, 287, 292, 294, 307, 315, 316, 323, 331, 332, 333, 378, 382, 383, 384, 386, 389, 392, 394, 396, 397, 399, 402, 403, 404, 405, 406, 407, 409, 413, 421, 436, 442, 444, 446, 448, 456, 473, 479, 481, 490, 493, 500, 520, 531, 533, 535, 537, 538, 539, 540, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 557, 558, 559, 560, 561, 564, 567, 568, 569, 570, 571, 572, 573, 575, 577, 578, 580, 581, 582, 583, 584, 586, 594, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 628, 631, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 648, 649, 650, 651, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 700, 720, 748, 764, 766, 814, 815, 823, 835, 842, 853, 884, 900, 925, 928, 935, 956, 970, 974, 987], "4": [1, 14, 22, 26, 27, 29, 30, 31, 34, 51, 54, 63, 64, 65, 66, 67, 68, 71, 73, 74, 89, 91, 92, 93, 94, 95, 96, 97, 113, 119, 120, 121, 127, 130, 135, 136, 137, 138, 141, 144, 147, 148, 149, 150, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 178, 180, 183, 184, 186, 187, 188, 189, 193, 197, 202, 207, 210, 211, 212, 213, 214, 215, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 265, 267, 268, 280, 285, 286, 287, 288, 291, 299, 300, 303, 307, 313, 315, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 335, 339, 343, 350, 351, 352, 358, 359, 361, 362, 363, 364, 367, 368, 369, 370, 372, 374, 379, 382, 383, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 406, 407, 409, 412, 413, 414, 416, 419, 421, 422, 435, 437, 441, 443, 444, 446, 447, 448, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 469, 471, 472, 475, 479, 480, 481, 482, 485, 495, 496, 498, 499, 500, 502, 504, 506, 507, 510, 517, 518, 519, 520, 522, 523, 524, 527, 528, 529, 536, 539, 540, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 557, 559, 560, 564, 566, 567, 568, 569, 570, 571, 572, 573, 580, 581, 582, 583, 584, 586, 587, 594, 608, 610, 611, 612, 615, 617, 618, 619, 620, 621, 623, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 645, 646, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 700, 703, 710, 719, 720, 721, 724, 732, 733, 736, 745, 749, 750, 752, 762, 764, 766, 778, 779, 785, 787, 790, 791, 792, 793, 794, 795, 799, 801, 802, 803, 804, 807, 808, 809, 810, 822, 823, 830, 831, 834, 835, 837, 842, 845, 846, 847, 848, 852, 862, 868, 875, 876, 877, 879, 881, 885, 890, 892, 893, 894, 895, 896, 898, 900, 910, 914, 915, 920, 930, 931, 933, 934, 937, 939, 941, 942, 945, 956, 958, 959, 960, 967, 970, 971, 972, 979, 987, 995], "c": [1, 26, 27, 29, 31, 34, 51, 54, 64, 66, 71, 74, 92, 94, 96, 106, 113, 123, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 151, 152, 153, 154, 156, 157, 158, 159, 162, 164, 165, 172, 173, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 192, 194, 195, 196, 198, 199, 200, 203, 204, 206, 207, 208, 209, 210, 212, 216, 217, 218, 219, 221, 222, 225, 226, 228, 229, 231, 234, 237, 238, 239, 240, 241, 242, 244, 247, 248, 254, 261, 268, 283, 292, 294, 397, 409, 444, 446, 473, 506, 510, 531, 533, 537, 538, 540, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 559, 560, 561, 564, 567, 568, 569, 570, 571, 572, 573, 580, 581, 583, 584, 586, 594, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 622, 625, 626, 631, 634, 640, 643, 645, 648, 649, 650, 651, 655, 658, 659, 664, 667, 670, 671, 674, 677, 678, 679, 680, 681, 682, 684, 687, 688, 692, 764, 835, 853, 941, 945, 974, 987], "5": [1, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 29, 31, 34, 63, 64, 66, 67, 68, 71, 72, 89, 92, 93, 94, 95, 96, 99, 100, 103, 119, 125, 131, 135, 137, 138, 141, 147, 148, 149, 150, 153, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 168, 170, 171, 174, 175, 176, 178, 180, 183, 184, 186, 188, 189, 190, 193, 197, 202, 207, 210, 211, 212, 213, 214, 217, 220, 225, 227, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 261, 262, 265, 285, 287, 288, 291, 296, 302, 303, 313, 315, 316, 317, 318, 319, 320, 329, 330, 331, 335, 336, 340, 360, 362, 363, 364, 367, 369, 377, 378, 381, 387, 388, 390, 391, 393, 394, 397, 400, 403, 405, 406, 407, 409, 412, 414, 435, 437, 443, 444, 445, 446, 448, 450, 451, 455, 456, 457, 458, 459, 461, 465, 467, 469, 475, 481, 486, 494, 495, 498, 499, 516, 519, 520, 522, 524, 528, 529, 539, 540, 543, 544, 546, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 564, 566, 567, 568, 569, 570, 571, 572, 573, 575, 580, 581, 583, 584, 586, 594, 610, 611, 612, 617, 618, 619, 620, 621, 623, 625, 626, 627, 628, 630, 632, 633, 634, 635, 638, 639, 640, 645, 653, 654, 655, 658, 659, 660, 661, 662, 663, 669, 670, 672, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 700, 703, 707, 710, 720, 721, 724, 727, 736, 745, 748, 750, 752, 758, 762, 763, 764, 765, 766, 771, 772, 773, 774, 775, 776, 800, 802, 803, 804, 805, 807, 809, 810, 818, 821, 830, 831, 834, 835, 861, 862, 868, 875, 876, 877, 879, 880, 881, 885, 887, 888, 889, 891, 892, 895, 898, 900, 910, 916, 921, 929, 930, 934, 958, 972, 975, 979, 987, 995], "6": [1, 26, 27, 29, 30, 31, 32, 33, 34, 64, 66, 71, 89, 92, 93, 94, 95, 97, 135, 139, 142, 143, 144, 145, 147, 148, 151, 152, 154, 155, 156, 157, 159, 160, 162, 164, 165, 166, 168, 170, 171, 173, 177, 178, 179, 180, 182, 185, 188, 189, 190, 192, 193, 194, 196, 197, 198, 199, 200, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 224, 225, 226, 227, 228, 229, 231, 232, 239, 247, 248, 254, 261, 265, 268, 288, 307, 315, 327, 328, 331, 335, 357, 359, 362, 373, 382, 383, 389, 393, 394, 396, 414, 443, 449, 451, 452, 455, 458, 459, 460, 461, 462, 464, 465, 466, 469, 481, 486, 490, 495, 498, 499, 519, 522, 524, 536, 537, 539, 551, 552, 553, 557, 560, 567, 583, 594, 612, 613, 614, 615, 616, 617, 618, 619, 622, 623, 626, 627, 628, 630, 631, 633, 635, 636, 640, 643, 645, 648, 650, 651, 653, 654, 655, 658, 659, 662, 663, 666, 667, 669, 670, 672, 673, 679, 687, 688, 692, 700, 721, 750, 756, 760, 761, 766, 797, 810, 831, 868, 881, 885, 890, 892, 893, 894, 896, 900, 921, 925, 930, 934, 957, 987, 995], "7": [1, 26, 27, 29, 30, 31, 32, 33, 34, 64, 66, 71, 73, 119, 139, 140, 141, 142, 143, 145, 147, 151, 152, 154, 159, 160, 162, 164, 166, 173, 177, 178, 179, 182, 185, 188, 190, 192, 194, 196, 198, 199, 200, 203, 204, 206, 208, 209, 210, 211, 216, 217, 218, 219, 225, 226, 227, 228, 229, 254, 261, 265, 328, 335, 339, 358, 360, 361, 368, 370, 372, 379, 393, 396, 414, 422, 443, 455, 459, 465, 481, 522, 524, 539, 551, 552, 560, 567, 583, 594, 613, 614, 616, 618, 622, 626, 627, 628, 630, 631, 635, 643, 646, 648, 650, 651, 662, 663, 667, 673, 692, 707, 771, 775, 781, 800, 801, 808, 810, 854, 862, 885, 895, 987, 995], "float32": [1, 27, 66, 153, 216, 217, 254, 566, 692, 838, 861, 987], "lazi": [1, 66, 71, 73, 100, 113, 125, 131, 174, 187, 254, 268, 541, 562, 594, 605, 631, 632, 671, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 692, 995], "i16": [1, 66, 473, 594, 862, 967, 987, 995], "i32": [1, 66, 89, 92, 96, 124, 125, 200, 254, 315, 345, 372, 473, 499, 587, 594, 651, 692, 781, 812, 861, 934, 987, 995], "f32": [1, 66, 144, 216, 254, 287, 451, 473, 557, 594, 615, 692, 720, 861, 881, 987], "i64": [1, 14, 18, 51, 64, 65, 66, 67, 71, 89, 91, 92, 93, 94, 95, 96, 100, 113, 131, 135, 136, 137, 138, 139, 142, 144, 145, 147, 148, 150, 151, 155, 156, 157, 158, 159, 160, 162, 164, 165, 166, 167, 169, 173, 174, 177, 180, 182, 186, 187, 188, 189, 192, 193, 194, 195, 198, 200, 203, 204, 206, 207, 209, 210, 211, 213, 219, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 244, 247, 248, 254, 261, 263, 267, 268, 286, 287, 288, 289, 290, 291, 293, 295, 297, 298, 299, 300, 301, 302, 303, 306, 307, 313, 316, 318, 319, 320, 325, 326, 327, 328, 330, 331, 340, 341, 343, 347, 349, 351, 356, 363, 366, 378, 381, 383, 384, 385, 386, 388, 389, 393, 394, 395, 396, 397, 400, 403, 405, 406, 407, 409, 411, 414, 418, 420, 421, 435, 436, 437, 444, 445, 446, 447, 448, 449, 452, 453, 455, 456, 468, 470, 471, 473, 474, 475, 479, 480, 481, 500, 501, 517, 518, 519, 520, 521, 522, 523, 524, 528, 529, 530, 532, 535, 537, 539, 544, 545, 547, 551, 552, 553, 556, 557, 558, 559, 560, 564, 566, 567, 568, 571, 575, 579, 583, 584, 587, 594, 608, 610, 612, 614, 615, 618, 619, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 640, 642, 644, 645, 648, 649, 651, 653, 654, 658, 659, 661, 662, 663, 664, 665, 666, 667, 670, 672, 674, 675, 676, 678, 679, 680, 681, 684, 687, 688, 692, 700, 701, 719, 720, 721, 724, 732, 733, 734, 736, 738, 745, 748, 752, 755, 758, 759, 760, 761, 764, 776, 777, 779, 786, 788, 791, 796, 803, 806, 821, 823, 824, 830, 834, 842, 867, 884, 885, 888, 891, 895, 898, 901, 902, 905, 909, 910, 914, 915, 956, 958, 959, 960, 966, 972, 973, 976, 979, 987, 995], "register_series_namespac": [1, 64, 65, 66], "math": [1, 67, 756, 911, 961, 987], "mathshortcut": [1, 67], "": [1, 27, 30, 67, 72, 89, 96, 97, 102, 103, 114, 127, 136, 142, 144, 146, 147, 158, 159, 165, 173, 174, 186, 188, 193, 194, 200, 207, 211, 215, 221, 223, 224, 225, 254, 291, 292, 299, 300, 303, 341, 364, 367, 378, 410, 431, 436, 439, 440, 444, 445, 453, 457, 481, 485, 491, 492, 495, 496, 498, 500, 502, 504, 505, 507, 510, 511, 512, 514, 516, 517, 518, 537, 538, 542, 545, 548, 553, 558, 561, 562, 568, 571, 573, 582, 583, 594, 608, 614, 615, 618, 625, 626, 632, 651, 659, 664, 665, 666, 676, 692, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 719, 721, 724, 725, 727, 732, 733, 734, 736, 745, 746, 749, 750, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 765, 766, 771, 777, 793, 794, 801, 804, 807, 808, 815, 817, 818, 821, 822, 823, 824, 826, 829, 830, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 875, 876, 877, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 909, 910, 911, 912, 914, 915, 917, 920, 921, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 937, 938, 939, 942, 943, 944, 945, 946, 947, 949, 951, 954, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 971, 972, 973, 974, 975, 976, 977, 978, 987], "_": [1, 63, 67, 97, 188, 215, 254, 492, 506, 927, 941, 965, 987], "squar": [1, 67, 236, 410, 482, 594, 676, 855, 916, 987], "cube": [1, 67, 447, 594], "s2": [1, 121, 153, 254, 700, 738, 750, 766, 842, 854, 868, 900, 970, 979, 987], "renam": [1, 92, 102, 103, 200, 231, 234, 254, 263, 421, 433, 518, 579, 582, 594, 651, 670, 674, 692, 862, 954, 966, 987], "n2": [1, 305], "in_plac": [1, 164, 205, 229, 254, 882, 884, 908, 915, 987], "true": [1, 5, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 30, 32, 49, 51, 68, 70, 71, 73, 74, 89, 90, 94, 96, 99, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 130, 132, 134, 136, 137, 138, 141, 150, 153, 154, 156, 157, 158, 159, 165, 167, 168, 169, 171, 174, 175, 178, 183, 184, 186, 188, 189, 196, 197, 198, 200, 207, 213, 217, 218, 221, 222, 223, 224, 225, 227, 231, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 262, 264, 265, 266, 267, 268, 279, 284, 301, 304, 305, 309, 315, 324, 325, 326, 327, 328, 334, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 390, 391, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 419, 441, 443, 453, 463, 468, 473, 478, 480, 481, 485, 487, 489, 493, 494, 499, 505, 506, 508, 510, 511, 512, 514, 517, 518, 523, 530, 533, 536, 537, 538, 539, 541, 542, 548, 549, 560, 576, 580, 582, 587, 594, 608, 610, 611, 612, 617, 619, 621, 625, 626, 631, 632, 634, 636, 640, 645, 651, 655, 656, 657, 659, 664, 665, 666, 670, 675, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 692, 698, 699, 700, 701, 711, 734, 737, 741, 746, 750, 751, 770, 772, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 808, 809, 810, 811, 812, 814, 816, 817, 818, 824, 828, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 855, 868, 876, 877, 883, 893, 900, 913, 915, 920, 922, 924, 928, 929, 934, 940, 941, 943, 945, 946, 947, 949, 969, 970, 978, 979, 987, 995], "s3": [1, 29, 105, 114, 118, 254, 738, 987], "n3": 1, "8": [1, 26, 27, 29, 31, 32, 33, 34, 45, 60, 62, 63, 64, 66, 67, 71, 72, 97, 119, 123, 125, 135, 139, 140, 141, 142, 143, 144, 145, 147, 151, 152, 154, 157, 162, 164, 173, 177, 178, 179, 182, 190, 192, 194, 196, 198, 199, 200, 203, 204, 206, 208, 209, 210, 211, 216, 217, 218, 219, 225, 226, 228, 229, 231, 254, 265, 267, 280, 286, 287, 323, 325, 328, 329, 332, 333, 335, 396, 413, 437, 443, 447, 448, 455, 456, 459, 460, 462, 464, 466, 473, 479, 481, 496, 502, 510, 520, 524, 536, 540, 543, 548, 549, 550, 552, 553, 557, 559, 564, 567, 568, 569, 570, 571, 572, 573, 580, 581, 583, 584, 586, 594, 613, 614, 615, 616, 618, 622, 628, 631, 635, 636, 645, 648, 650, 651, 662, 663, 667, 670, 673, 692, 719, 720, 762, 781, 831, 854, 875, 879, 885, 887, 890, 892, 893, 894, 896, 931, 937, 945, 987, 995], "9": [1, 26, 27, 29, 31, 34, 63, 71, 135, 140, 141, 153, 160, 162, 166, 200, 210, 225, 226, 229, 231, 247, 254, 261, 265, 267, 280, 286, 298, 301, 323, 325, 328, 332, 333, 335, 339, 358, 369, 370, 396, 401, 409, 413, 443, 455, 457, 459, 465, 475, 479, 492, 524, 539, 546, 551, 552, 594, 627, 628, 630, 635, 651, 662, 667, 670, 687, 692, 719, 734, 764, 775, 785, 787, 795, 801, 802, 808, 809, 842, 854, 885, 887, 895, 897, 910, 927, 987], "27": [1, 67, 247, 328, 345, 359, 372, 594, 687, 987, 995], "16": [1, 30, 42, 57, 65, 72, 97, 159, 160, 231, 254, 325, 328, 396, 437, 447, 459, 499, 510, 539, 551, 556, 557, 560, 573, 580, 594, 626, 627, 655, 670, 692, 801, 808, 875, 911, 934, 945, 961, 987], "64": [1, 41, 44, 59, 65, 67, 437, 447, 594, 657, 692, 875, 987], "25": [1, 30, 67, 73, 96, 125, 130, 141, 159, 160, 174, 227, 231, 254, 330, 345, 361, 368, 372, 529, 562, 594, 626, 627, 632, 638, 668, 670, 692, 764, 765, 801, 808, 814, 831, 875, 879, 987], "125": [1, 30, 67, 254, 261, 594, 875, 987], "arg": [2, 3, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 62, 187, 218, 254, 446, 542, 561, 594, 644, 692, 701, 969, 970, 987], "ani": [2, 3, 4, 7, 27, 29, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 69, 89, 90, 91, 92, 93, 94, 95, 102, 103, 105, 106, 107, 111, 113, 114, 115, 117, 122, 124, 125, 127, 132, 135, 140, 144, 148, 150, 151, 153, 170, 171, 172, 186, 187, 196, 197, 213, 214, 217, 218, 223, 225, 254, 261, 265, 268, 283, 287, 315, 362, 374, 383, 388, 390, 391, 401, 412, 419, 420, 422, 433, 435, 437, 441, 443, 446, 455, 457, 469, 472, 499, 510, 511, 512, 514, 519, 523, 529, 536, 537, 539, 548, 559, 566, 580, 587, 594, 615, 621, 644, 665, 692, 700, 701, 716, 720, 766, 802, 823, 842, 854, 862, 885, 887, 899, 902, 934, 945, 946, 947, 949, 959, 968, 969, 970, 987, 995], "kwarg": [2, 3, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 140, 187, 218, 254, 446, 594, 644, 692, 970, 987], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 594, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 987, 994], "method": [2, 3, 4, 7, 26, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 62, 71, 90, 102, 103, 106, 122, 132, 144, 158, 166, 171, 184, 190, 196, 197, 223, 231, 246, 254, 261, 264, 265, 364, 367, 374, 381, 388, 390, 391, 396, 412, 419, 435, 437, 441, 443, 447, 450, 451, 458, 459, 460, 461, 462, 464, 465, 466, 519, 529, 531, 536, 548, 573, 574, 580, 588, 590, 594, 595, 596, 599, 600, 601, 602, 605, 615, 630, 646, 665, 670, 686, 692, 701, 804, 807, 821, 834, 880, 881, 892, 971, 981, 983, 987, 988, 991, 992, 993], "attribut": [2, 3, 4, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 55, 56, 57, 58, 59, 60, 61, 62, 122, 254, 588, 590, 595, 596, 600, 601, 602, 692, 981, 983, 988, 991, 992, 993], "A": [4, 27, 30, 49, 52, 70, 73, 96, 102, 103, 104, 111, 113, 129, 130, 153, 159, 174, 188, 197, 213, 225, 226, 227, 231, 254, 260, 305, 335, 340, 343, 347, 349, 351, 356, 363, 374, 381, 390, 391, 399, 402, 403, 405, 412, 419, 420, 421, 431, 441, 448, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 485, 486, 491, 492, 494, 500, 501, 516, 520, 546, 557, 561, 594, 626, 632, 648, 667, 670, 692, 771, 776, 779, 786, 788, 791, 796, 803, 821, 887, 888, 889, 891, 894, 895, 896, 920, 921, 926, 927, 929, 935, 936, 951, 987], "encod": [4, 62, 102, 103, 113, 309, 487, 741, 922], "set": [4, 5, 6, 7, 8, 9, 11, 13, 14, 17, 22, 23, 25, 27, 29, 30, 31, 32, 33, 63, 64, 68, 73, 90, 92, 95, 97, 102, 103, 106, 107, 111, 113, 115, 116, 117, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 139, 144, 158, 161, 171, 174, 180, 198, 200, 206, 215, 222, 223, 225, 231, 254, 268, 300, 304, 305, 371, 392, 401, 422, 446, 457, 458, 459, 460, 461, 462, 464, 465, 466, 468, 474, 478, 479, 497, 503, 504, 509, 510, 511, 512, 514, 541, 576, 577, 578, 582, 587, 594, 613, 615, 617, 625, 631, 632, 636, 640, 651, 656, 657, 658, 665, 670, 673, 676, 692, 700, 701, 733, 737, 738, 811, 829, 842, 862, 887, 888, 889, 890, 891, 892, 894, 895, 896, 898, 902, 909, 913, 914, 932, 938, 939, 944, 945, 946, 947, 949, 969, 987, 995], "string": [4, 6, 8, 11, 12, 13, 17, 27, 30, 32, 33, 37, 49, 54, 62, 73, 74, 96, 102, 103, 113, 122, 123, 124, 127, 130, 136, 153, 157, 158, 159, 160, 174, 200, 207, 216, 221, 225, 227, 231, 234, 254, 261, 292, 311, 316, 357, 361, 364, 367, 368, 380, 386, 397, 422, 444, 446, 458, 459, 460, 461, 462, 464, 465, 466, 481, 484, 485, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 516, 537, 538, 542, 544, 546, 547, 553, 561, 568, 571, 582, 583, 594, 608, 617, 624, 625, 626, 627, 632, 651, 659, 664, 670, 673, 674, 692, 725, 743, 748, 797, 801, 804, 807, 808, 820, 835, 918, 919, 920, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 950, 951, 967, 987, 995], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 624, 647, 692], "activ": [5, 9, 15, 16, 18, 19, 20, 21, 24, 287, 492, 720, 927], "bool": [5, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 30, 32, 34, 63, 68, 70, 71, 74, 89, 90, 94, 96, 102, 103, 107, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 130, 134, 136, 137, 138, 150, 151, 153, 154, 156, 157, 158, 159, 164, 165, 167, 168, 169, 174, 186, 188, 198, 201, 205, 207, 213, 217, 218, 221, 222, 223, 224, 227, 229, 231, 238, 240, 241, 244, 254, 264, 265, 266, 267, 268, 278, 284, 285, 287, 301, 304, 306, 309, 315, 324, 325, 326, 327, 328, 329, 344, 360, 362, 373, 374, 375, 376, 377, 390, 391, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 419, 420, 426, 427, 428, 429, 441, 443, 451, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 472, 473, 478, 480, 481, 485, 487, 489, 499, 500, 501, 505, 506, 508, 510, 511, 512, 514, 518, 530, 533, 536, 537, 538, 539, 541, 542, 548, 551, 566, 576, 580, 582, 594, 608, 610, 612, 617, 619, 621, 622, 625, 626, 631, 632, 636, 640, 645, 652, 655, 656, 657, 659, 664, 665, 666, 670, 678, 680, 681, 684, 692, 698, 699, 700, 701, 710, 717, 718, 720, 734, 737, 739, 741, 746, 751, 758, 759, 760, 761, 762, 763, 780, 800, 802, 814, 816, 817, 818, 824, 828, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 876, 877, 879, 881, 882, 883, 884, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 900, 902, 903, 908, 913, 915, 920, 922, 924, 934, 935, 936, 940, 941, 943, 945, 946, 947, 949, 968, 969, 970, 973, 976, 978, 987], "decim": [5, 27, 30, 254, 467, 594, 897, 987], "temporari": 5, "remov": [5, 7, 142, 226, 254, 268, 378, 421, 497, 503, 509, 510, 558, 565, 573, 580, 594, 614, 667, 692, 932, 938, 944, 945], "later": 5, "onc": [5, 102, 103, 106, 129, 134, 135, 198, 234, 254, 268, 314, 468, 594, 609, 674, 692, 701, 898, 987], "stabil": 5, "happen": 5, "being": [5, 72, 102, 103, 113, 118, 225, 226, 254, 268, 329, 361, 458, 459, 460, 461, 462, 464, 465, 466, 557, 594, 667, 692, 762, 801, 831, 879, 987, 995], "consid": [5, 72, 102, 103, 113, 118, 135, 144, 154, 180, 223, 225, 226, 254, 268, 318, 319, 320, 329, 361, 458, 459, 460, 461, 462, 464, 465, 466, 551, 560, 594, 615, 628, 635, 640, 665, 667, 692, 701, 752, 753, 754, 762, 801, 831, 844, 879, 900, 901, 902, 987], "break": [5, 72, 118, 225, 226, 254, 268, 329, 361, 458, 459, 460, 461, 462, 464, 465, 466, 594, 667, 692, 762, 801, 831, 879, 987], "chang": [5, 25, 63, 72, 102, 103, 118, 225, 226, 227, 254, 268, 329, 330, 361, 445, 458, 459, 460, 461, 462, 464, 465, 466, 594, 667, 692, 762, 801, 831, 875, 879, 908, 987], "current": [5, 8, 25, 51, 90, 96, 104, 134, 137, 138, 254, 305, 361, 445, 594, 605, 610, 611, 692, 751, 755, 801, 875, 987], "alpha": [5, 70, 268, 375, 376, 377, 594, 612, 617, 619, 645, 655, 692, 816, 817, 818, 987], "state": [5, 7, 70, 82, 551, 605, 612, 617, 619, 645, 655, 692], "cfg": [6, 7, 8, 14, 132], "previous": 6, "save": [6, 360, 605, 800], "share": [6, 54, 146, 254, 815, 987], "option": [6, 7, 8, 25, 29, 30, 38, 63, 73, 102, 105, 106, 107, 111, 114, 115, 117, 119, 122, 123, 124, 125, 126, 127, 128, 170, 174, 180, 213, 217, 222, 254, 410, 457, 458, 459, 460, 461, 462, 464, 465, 466, 478, 504, 566, 582, 587, 594, 605, 631, 632, 640, 692, 851, 855, 887, 888, 889, 890, 891, 892, 894, 895, 896, 913, 939, 966, 987], "paramet": [6, 10, 11, 12, 13, 14, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 39, 46, 49, 50, 51, 52, 53, 55, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 170, 171, 172, 173, 174, 176, 178, 180, 181, 183, 184, 186, 187, 188, 190, 192, 193, 194, 196, 197, 198, 200, 201, 203, 204, 206, 207, 208, 209, 210, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 236, 239, 246, 248, 254, 261, 263, 265, 267, 268, 278, 283, 284, 285, 286, 287, 290, 291, 292, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 318, 319, 320, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 341, 357, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374, 375, 376, 377, 378, 381, 383, 384, 388, 389, 390, 391, 392, 393, 396, 397, 401, 410, 412, 414, 415, 419, 420, 421, 422, 435, 437, 441, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 519, 520, 522, 523, 528, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 560, 561, 562, 564, 565, 566, 567, 568, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 594, 608, 610, 612, 614, 615, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 631, 632, 635, 636, 640, 641, 644, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 676, 679, 686, 688, 692, 697, 700, 701, 710, 716, 717, 718, 719, 720, 723, 724, 725, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 748, 751, 752, 753, 754, 758, 759, 760, 761, 762, 763, 764, 765, 766, 770, 771, 772, 777, 797, 800, 801, 802, 804, 806, 807, 808, 811, 814, 815, 816, 817, 818, 821, 822, 823, 824, 829, 830, 831, 834, 835, 844, 850, 851, 855, 857, 862, 875, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 905, 906, 909, 913, 914, 915, 917, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 931, 932, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 951, 952, 954, 958, 959, 965, 966, 967, 968, 969, 970, 972, 973, 976, 977, 978, 979, 987], "json": [6, 8, 32, 33, 109, 110, 116, 254, 493, 494, 605, 624, 647, 673, 692, 928, 929], "produc": [6, 124, 125, 127, 285, 430, 567, 636, 692, 718], "reset": [7, 132], "default": [7, 12, 25, 26, 27, 29, 30, 31, 32, 33, 34, 49, 63, 68, 71, 73, 89, 91, 92, 93, 94, 95, 96, 97, 100, 102, 103, 106, 111, 113, 122, 123, 124, 125, 126, 127, 130, 131, 144, 146, 158, 160, 161, 171, 174, 180, 186, 188, 196, 197, 198, 208, 215, 223, 225, 228, 232, 254, 300, 304, 305, 316, 360, 373, 375, 376, 377, 392, 415, 422, 439, 440, 445, 451, 468, 474, 483, 491, 497, 499, 503, 504, 509, 510, 511, 512, 514, 534, 541, 548, 562, 566, 573, 576, 580, 581, 582, 586, 594, 615, 617, 625, 627, 632, 640, 657, 660, 665, 668, 673, 692, 733, 737, 738, 748, 800, 814, 815, 816, 817, 818, 829, 862, 871, 872, 875, 881, 898, 909, 917, 920, 926, 932, 934, 938, 939, 944, 945, 946, 947, 949, 977, 987, 995], "note": [7, 17, 29, 30, 38, 63, 73, 89, 90, 91, 93, 95, 96, 100, 102, 104, 105, 111, 113, 114, 123, 125, 127, 129, 131, 132, 134, 135, 140, 149, 159, 160, 170, 171, 173, 174, 184, 187, 196, 197, 214, 217, 222, 226, 227, 231, 254, 268, 287, 304, 327, 328, 332, 333, 353, 354, 357, 361, 368, 397, 403, 405, 458, 459, 460, 461, 462, 464, 465, 466, 478, 485, 491, 492, 495, 497, 498, 500, 503, 509, 510, 521, 529, 551, 560, 575, 587, 594, 612, 619, 620, 626, 627, 628, 632, 635, 648, 655, 667, 670, 692, 701, 720, 737, 760, 761, 793, 794, 797, 808, 901, 902, 908, 913, 920, 926, 927, 930, 932, 933, 935, 938, 944, 945, 957, 987], "oper": [7, 30, 54, 71, 79, 80, 89, 91, 92, 93, 94, 95, 102, 111, 135, 148, 153, 158, 165, 175, 181, 184, 186, 187, 191, 212, 217, 218, 222, 225, 233, 234, 254, 261, 262, 265, 305, 324, 325, 326, 327, 328, 329, 374, 388, 390, 391, 409, 412, 419, 433, 435, 437, 441, 443, 447, 453, 519, 529, 536, 537, 538, 546, 547, 557, 594, 619, 625, 628, 631, 635, 640, 641, 674, 692, 700, 758, 759, 760, 761, 762, 883, 964, 968, 969, 970, 978, 987], "from": [7, 27, 30, 51, 53, 63, 71, 73, 89, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 141, 142, 146, 148, 157, 159, 160, 171, 172, 174, 175, 180, 192, 196, 198, 200, 222, 223, 225, 227, 254, 305, 324, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 378, 396, 410, 439, 440, 445, 446, 468, 481, 491, 492, 493, 499, 510, 511, 512, 514, 531, 533, 544, 554, 555, 556, 580, 581, 585, 593, 594, 614, 619, 624, 626, 627, 632, 640, 647, 648, 651, 665, 671, 692, 700, 738, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 815, 851, 855, 871, 872, 873, 875, 898, 926, 927, 928, 934, 945, 946, 947, 949, 976, 979, 987, 995], "environ": [7, 25, 126, 129], "local": [7, 29, 105, 114, 127, 254, 360, 773, 774, 800, 805, 876, 877, 987], "non": [7, 30, 38, 63, 94, 172, 180, 200, 226, 231, 254, 305, 397, 445, 457, 458, 459, 460, 461, 462, 464, 465, 466, 486, 492, 537, 538, 544, 546, 547, 553, 568, 571, 577, 578, 582, 583, 594, 640, 651, 667, 670, 692, 738, 835, 875, 887, 888, 889, 890, 891, 892, 894, 895, 896, 921, 927, 969, 987], "env": [7, 128], "back": [7, 63, 148, 218, 254, 444, 594, 700, 970, 987], "valu": [7, 10, 11, 14, 25, 27, 30, 32, 46, 47, 49, 54, 61, 63, 71, 72, 74, 92, 94, 102, 103, 104, 113, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 141, 144, 148, 149, 150, 154, 157, 159, 160, 161, 162, 166, 170, 171, 176, 177, 178, 179, 180, 182, 184, 186, 188, 189, 190, 192, 196, 197, 198, 203, 204, 207, 208, 209, 210, 213, 214, 218, 221, 225, 226, 227, 228, 237, 238, 240, 241, 242, 244, 245, 254, 260, 261, 262, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 285, 286, 289, 290, 291, 293, 295, 296, 297, 299, 302, 303, 306, 307, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 328, 329, 330, 332, 333, 335, 339, 352, 358, 369, 374, 375, 376, 377, 379, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 402, 403, 405, 406, 407, 408, 411, 412, 413, 416, 418, 419, 420, 422, 423, 424, 425, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 446, 447, 450, 451, 454, 457, 458, 459, 460, 461, 462, 464, 465, 466, 468, 469, 470, 471, 472, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 500, 501, 504, 506, 507, 508, 516, 519, 521, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 536, 538, 540, 544, 547, 549, 551, 552, 553, 559, 560, 566, 568, 569, 570, 571, 572, 575, 576, 577, 578, 583, 587, 594, 608, 615, 620, 621, 626, 627, 629, 630, 637, 638, 639, 640, 642, 643, 646, 648, 653, 654, 659, 660, 661, 664, 667, 668, 673, 677, 678, 680, 681, 682, 684, 685, 692, 696, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714, 715, 718, 719, 722, 723, 724, 726, 728, 729, 730, 732, 736, 739, 741, 742, 743, 744, 748, 749, 752, 753, 754, 756, 757, 762, 763, 764, 765, 767, 768, 771, 775, 792, 798, 809, 815, 816, 817, 818, 821, 822, 823, 826, 828, 829, 830, 831, 832, 834, 835, 837, 839, 840, 842, 843, 845, 846, 847, 848, 852, 857, 862, 863, 864, 866, 867, 869, 871, 872, 873, 874, 875, 878, 879, 880, 881, 887, 888, 889, 890, 891, 892, 894, 895, 896, 898, 899, 900, 901, 902, 905, 906, 910, 911, 912, 913, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 933, 935, 936, 939, 941, 942, 943, 951, 957, 958, 959, 960, 961, 962, 970, 971, 974, 976, 978, 979, 987, 995], "exampl": [7, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 51, 54, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 89, 91, 92, 93, 94, 95, 96, 97, 99, 100, 103, 104, 105, 106, 113, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567, 568, 569, 570, 571, 572, 573, 575, 579, 580, 581, 582, 583, 584, 586, 587, 594, 605, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 697, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 719, 720, 721, 724, 725, 727, 732, 733, 734, 736, 738, 745, 746, 748, 749, 750, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 821, 822, 823, 824, 826, 829, 830, 831, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 856, 861, 862, 863, 864, 865, 866, 867, 868, 869, 875, 876, 877, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 905, 909, 910, 911, 912, 914, 915, 917, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 949, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 987], "ascii": [9, 17, 496, 498, 502, 516, 931, 933, 937, 951], "charact": [9, 11, 17, 23, 27, 102, 103, 113, 254, 357, 490, 492, 495, 496, 497, 502, 503, 505, 506, 509, 516, 645, 692, 797, 925, 927, 930, 931, 932, 937, 938, 940, 941, 944, 951], "displai": [9, 10, 11, 14, 16, 20, 22, 30, 254], "tabl": [9, 13, 14, 16, 17, 18, 19, 20, 22, 23, 28, 29, 30, 50, 51, 53, 89, 96, 102, 103, 105, 113, 114, 188, 212, 218, 225, 226, 254, 667, 692, 970, 987], "outlin": 9, "fals": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 29, 30, 32, 34, 49, 63, 68, 70, 73, 90, 94, 96, 102, 103, 106, 107, 111, 113, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 130, 134, 136, 137, 138, 141, 153, 154, 156, 157, 158, 159, 164, 165, 167, 168, 169, 171, 174, 175, 178, 183, 184, 186, 188, 189, 196, 197, 198, 201, 205, 207, 213, 217, 218, 221, 222, 223, 227, 229, 231, 237, 238, 240, 241, 242, 244, 247, 254, 264, 265, 266, 268, 278, 284, 287, 301, 304, 306, 324, 325, 326, 327, 328, 329, 344, 360, 362, 373, 374, 375, 376, 377, 390, 391, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 419, 420, 441, 443, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 473, 478, 480, 481, 485, 489, 493, 499, 500, 501, 505, 506, 508, 510, 511, 512, 530, 533, 536, 537, 538, 541, 542, 548, 551, 566, 576, 580, 582, 587, 594, 608, 610, 611, 612, 617, 619, 625, 626, 631, 632, 634, 636, 645, 652, 655, 656, 657, 659, 664, 665, 670, 677, 678, 680, 681, 682, 684, 687, 692, 700, 710, 720, 734, 737, 739, 746, 750, 751, 758, 759, 760, 761, 762, 763, 780, 800, 802, 814, 816, 817, 818, 824, 835, 836, 837, 839, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 855, 868, 876, 877, 879, 881, 882, 884, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 900, 903, 908, 913, 915, 920, 924, 928, 934, 935, 936, 940, 941, 943, 945, 946, 947, 968, 969, 970, 973, 976, 978, 979, 987], "revert": 9, "abc": [9, 15, 16, 17, 18, 19, 20, 21, 22, 261, 492, 500, 594, 927, 935], "xyz": [9, 15, 16, 17, 18, 19, 20, 21, 22, 261, 486, 492, 594, 921, 927, 966, 987], "f64": [9, 13, 15, 16, 18, 19, 20, 21, 22, 63, 65, 67, 72, 92, 118, 125, 137, 138, 140, 141, 142, 145, 149, 150, 153, 156, 157, 158, 165, 173, 174, 178, 179, 188, 189, 190, 206, 207, 208, 228, 231, 234, 238, 240, 241, 242, 243, 244, 246, 247, 254, 260, 270, 271, 272, 273, 274, 275, 296, 315, 317, 321, 322, 329, 332, 333, 362, 373, 374, 375, 376, 377, 378, 379, 387, 388, 390, 391, 396, 403, 405, 406, 407, 409, 410, 412, 415, 416, 417, 419, 423, 424, 425, 434, 437, 439, 440, 441, 445, 447, 450, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 476, 477, 478, 482, 483, 525, 526, 529, 534, 543, 544, 546, 548, 550, 558, 569, 570, 573, 580, 581, 586, 594, 610, 614, 620, 621, 625, 631, 632, 638, 639, 646, 659, 660, 668, 670, 671, 674, 678, 680, 681, 682, 683, 684, 686, 687, 692, 702, 703, 704, 705, 706, 707, 749, 756, 757, 762, 763, 764, 802, 817, 818, 822, 826, 831, 875, 879, 887, 889, 890, 892, 893, 894, 896, 897, 911, 912, 916, 961, 962, 975, 987, 995], "fmt": [10, 395, 561, 594, 629, 692], "floatfmt": 10, "mix": [10, 510, 512, 764, 945, 947, 987], "control": [10, 30, 71, 123, 254, 617, 692], "how": [10, 29, 30, 54, 63, 71, 74, 92, 95, 104, 144, 173, 225, 226, 254, 285, 286, 316, 330, 396, 444, 454, 587, 594, 615, 631, 667, 692, 718, 719, 748, 765, 987], "float": [10, 30, 40, 41, 72, 118, 120, 121, 122, 125, 127, 141, 146, 149, 174, 190, 198, 204, 246, 254, 284, 285, 317, 318, 319, 320, 332, 333, 362, 373, 374, 375, 376, 377, 382, 387, 390, 391, 396, 399, 402, 403, 405, 406, 407, 412, 415, 419, 423, 434, 439, 440, 441, 447, 450, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 472, 529, 543, 569, 570, 574, 576, 581, 583, 586, 594, 620, 632, 646, 654, 655, 686, 692, 717, 718, 746, 749, 752, 753, 754, 763, 764, 766, 802, 814, 815, 816, 817, 818, 822, 826, 831, 841, 855, 858, 864, 865, 871, 872, 878, 879, 880, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 901, 902, 913, 917, 957, 977, 987, 995], "point": [10, 30, 40, 41, 125, 127, 149, 159, 175, 254, 317, 332, 333, 362, 382, 387, 403, 405, 467, 468, 594, 620, 626, 636, 648, 692, 749, 802, 822, 826, 841, 897, 898, 987], "full": [10, 37, 63, 69, 71, 102, 103, 105, 113, 114, 510, 511, 512, 514, 636, 692, 945, 946, 947, 949], "format": [10, 13, 17, 27, 30, 101, 102, 103, 113, 118, 147, 157, 171, 180, 197, 214, 252, 254, 361, 364, 367, 499, 510, 511, 512, 514, 538, 618, 624, 640, 673, 692, 804, 807, 934, 945, 946, 947, 949, 986], "number": [10, 11, 12, 14, 22, 23, 27, 30, 34, 63, 83, 89, 91, 93, 95, 99, 100, 102, 103, 106, 113, 116, 123, 125, 126, 128, 129, 131, 136, 137, 146, 147, 149, 150, 162, 171, 172, 175, 176, 183, 184, 198, 203, 204, 208, 210, 221, 225, 228, 237, 239, 248, 254, 279, 286, 291, 299, 303, 305, 307, 313, 323, 329, 330, 342, 345, 350, 352, 362, 369, 370, 372, 375, 376, 377, 381, 383, 389, 393, 403, 405, 413, 414, 446, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 471, 472, 474, 483, 495, 498, 500, 506, 507, 522, 528, 534, 548, 549, 564, 573, 577, 578, 580, 581, 584, 586, 594, 608, 610, 618, 619, 620, 621, 628, 635, 645, 653, 654, 657, 660, 662, 664, 668, 677, 679, 688, 692, 719, 724, 732, 736, 738, 745, 751, 762, 765, 778, 781, 790, 792, 802, 809, 810, 812, 815, 816, 817, 818, 821, 823, 830, 841, 857, 868, 869, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 905, 906, 909, 917, 930, 933, 935, 941, 942, 958, 972, 977, 987, 995], "int": [11, 12, 14, 22, 23, 27, 30, 34, 38, 51, 65, 92, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 123, 124, 125, 126, 127, 128, 129, 131, 135, 136, 137, 146, 149, 150, 152, 161, 162, 163, 165, 170, 171, 172, 174, 176, 177, 178, 182, 183, 184, 194, 196, 198, 202, 203, 204, 206, 208, 209, 210, 211, 216, 219, 221, 225, 228, 230, 232, 239, 248, 254, 261, 284, 285, 286, 290, 291, 299, 300, 303, 304, 305, 307, 313, 318, 319, 320, 329, 330, 375, 376, 377, 381, 382, 383, 389, 392, 393, 414, 443, 445, 446, 447, 451, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 479, 483, 491, 496, 499, 500, 502, 504, 506, 507, 516, 522, 523, 524, 528, 534, 536, 541, 548, 549, 554, 555, 556, 562, 564, 570, 572, 573, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 594, 608, 610, 619, 620, 621, 628, 632, 635, 645, 653, 654, 657, 658, 660, 662, 663, 664, 668, 669, 672, 679, 688, 692, 708, 709, 717, 718, 719, 723, 724, 732, 733, 736, 737, 738, 745, 746, 750, 751, 752, 753, 754, 762, 765, 815, 816, 817, 818, 821, 822, 823, 829, 830, 831, 854, 856, 857, 864, 868, 869, 871, 872, 873, 874, 875, 878, 881, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 905, 906, 909, 914, 917, 926, 931, 934, 935, 937, 939, 941, 942, 951, 957, 958, 959, 960, 967, 972, 977, 987, 995], "plai": [11, 547], "sam": 11, "As": [11, 89, 91, 92, 93, 95, 106, 254, 576, 692], "time": [11, 29, 37, 39, 49, 69, 70, 73, 113, 130, 148, 159, 160, 174, 227, 254, 283, 284, 285, 305, 313, 334, 335, 336, 341, 357, 360, 364, 366, 367, 371, 510, 512, 514, 527, 528, 546, 547, 556, 562, 576, 594, 612, 626, 627, 632, 645, 692, 700, 716, 718, 745, 770, 771, 772, 777, 797, 800, 804, 806, 807, 811, 945, 947, 949, 971, 972, 987, 995], "goe": 11, "By": [11, 12, 63, 102, 103, 106, 113, 174, 208, 228, 254, 483, 499, 534, 548, 566, 573, 580, 581, 586, 594, 632, 660, 668, 692, 917, 934, 969, 977, 987], "begin": [11, 375, 376, 377, 491, 594, 816, 817, 818, 926, 987], "beauti": 11, "friendship": 11, "length": [11, 71, 72, 100, 113, 123, 131, 159, 160, 206, 254, 300, 305, 329, 361, 368, 431, 457, 458, 459, 460, 461, 462, 464, 465, 466, 479, 496, 498, 502, 504, 516, 541, 577, 578, 594, 626, 627, 645, 658, 692, 733, 738, 750, 762, 763, 771, 801, 808, 856, 873, 879, 887, 888, 889, 890, 891, 892, 894, 895, 896, 914, 931, 933, 937, 939, 951, 987], "len": [11, 30, 72, 123, 125, 172, 254, 324, 455, 496, 502, 516, 594, 763, 879, 885, 931, 937, 951, 987], "u32": [11, 68, 159, 185, 232, 237, 245, 247, 254, 262, 269, 276, 277, 278, 279, 280, 281, 282, 285, 294, 323, 324, 339, 342, 346, 350, 352, 358, 359, 362, 369, 370, 413, 422, 438, 442, 451, 469, 486, 495, 498, 527, 531, 540, 542, 549, 572, 594, 626, 643, 672, 677, 685, 687, 692, 710, 711, 712, 727, 746, 775, 778, 785, 787, 790, 792, 795, 798, 799, 802, 809, 810, 831, 881, 921, 930, 933, 971, 974, 976, 987], "37": 11, "beaut": 11, "48": [11, 160, 254, 627, 692], "fmt_str_length": 11, "50": [11, 30, 148, 254, 318, 319, 320, 361, 368, 594, 752, 808, 987], "print": [11, 14, 16, 17, 22, 103, 119, 145, 157, 158, 172, 175, 216, 233, 254, 395, 556, 594, 629, 692, 842, 887, 967, 987, 995], "size": [12, 34, 102, 103, 123, 124, 125, 127, 129, 146, 159, 225, 254, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 541, 577, 578, 594, 626, 657, 692, 815, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 987, 995], "overwrit": [12, 28, 29, 89, 91, 92, 93, 95, 102, 103, 113, 134, 254, 619, 692], "chunk": [12, 99, 102, 103, 111, 113, 115, 116, 117, 125, 127, 148, 172, 183, 254, 267, 452, 594, 657, 692, 700, 750, 827, 868, 882, 964, 987], "stream": [12, 31, 70, 158, 223, 254, 612, 617, 619, 625, 636, 640, 645, 655, 656, 657, 665, 692], "engin": [12, 28, 104, 129, 135, 158, 223, 236, 254, 625, 636, 640, 665, 676, 692, 701, 987], "determin": [12, 30, 61, 63, 71, 92, 95, 102, 103, 106, 111, 113, 117, 135, 153, 159, 160, 171, 172, 222, 227, 254, 305, 316, 344, 360, 422, 430, 454, 458, 459, 460, 461, 462, 464, 465, 466, 478, 594, 626, 627, 692, 738, 748, 780, 800, 831, 862, 913, 987], "schema": [12, 29, 54, 64, 65, 66, 71, 74, 84, 85, 87, 89, 91, 92, 93, 95, 96, 102, 103, 108, 112, 113, 116, 123, 125, 135, 137, 138, 145, 146, 181, 184, 217, 254, 305, 430, 536, 582, 594, 610, 611, 616, 636, 641, 673, 676, 692, 755, 987], "thread": [12, 27, 99, 102, 103, 104, 129, 254, 268, 287, 594, 720], "pool": [12, 129], "For": [12, 29, 30, 104, 105, 106, 114, 148, 160, 173, 174, 236, 254, 305, 315, 375, 376, 377, 431, 453, 478, 485, 491, 492, 500, 551, 560, 561, 594, 627, 632, 676, 692, 700, 816, 817, 818, 883, 913, 920, 926, 927, 935, 969, 987], "some": [12, 25, 29, 30, 92, 102, 103, 113, 144, 254, 615, 692, 842, 987, 995], "dataset": [12, 102, 103, 113, 118, 410, 594, 605, 636, 692, 855, 987], "esp": 12, "when": [12, 14, 16, 20, 30, 34, 54, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 97, 102, 103, 104, 107, 111, 113, 114, 115, 116, 125, 127, 135, 136, 145, 146, 148, 150, 153, 159, 187, 196, 200, 207, 215, 221, 223, 254, 305, 318, 319, 320, 360, 375, 376, 377, 383, 420, 422, 431, 446, 480, 481, 497, 503, 509, 510, 542, 551, 560, 594, 608, 621, 626, 636, 651, 657, 659, 664, 665, 692, 700, 752, 753, 754, 800, 815, 816, 817, 818, 823, 862, 901, 902, 932, 938, 944, 945, 965, 987], "have": [12, 25, 30, 63, 74, 90, 102, 103, 106, 125, 127, 148, 171, 191, 197, 214, 254, 314, 329, 375, 376, 377, 431, 451, 510, 512, 594, 640, 655, 672, 692, 700, 762, 816, 817, 818, 828, 881, 945, 947, 987, 995], "larg": [12, 63, 159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 627, 632, 692, 797, 801, 808], "element": [12, 22, 100, 124, 127, 131, 136, 170, 188, 196, 208, 221, 228, 254, 268, 270, 271, 272, 273, 274, 275, 285, 287, 288, 313, 321, 322, 324, 325, 326, 327, 328, 329, 379, 392, 401, 416, 417, 445, 451, 454, 469, 475, 476, 477, 482, 483, 506, 507, 525, 526, 528, 534, 548, 573, 577, 578, 580, 581, 586, 594, 608, 660, 664, 668, 692, 701, 702, 703, 704, 705, 706, 707, 718, 720, 721, 745, 751, 756, 757, 758, 759, 760, 761, 762, 819, 824, 830, 842, 854, 857, 859, 860, 875, 881, 899, 910, 911, 912, 916, 917, 941, 942, 958, 961, 962, 967, 972, 973, 977, 987], "too": [12, 159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 627, 632, 692, 797, 801, 808], "optimist": 12, "lead": [12, 96, 118, 254, 470, 497, 509, 516, 523, 533, 548, 580, 594, 636, 676, 692, 903, 932, 944, 951, 987], "out": [12, 96, 119, 160, 254, 290, 304, 309, 399, 402, 485, 487, 587, 594, 627, 656, 657, 692, 723, 737, 741, 920, 922], "memori": [12, 71, 89, 90, 93, 94, 95, 102, 103, 107, 111, 113, 115, 116, 117, 134, 135, 148, 205, 236, 254, 452, 473, 594, 657, 676, 692, 700, 701, 882, 907, 908, 987], "error": [12, 29, 75, 102, 103, 113, 159, 160, 174, 196, 227, 254, 292, 304, 309, 315, 357, 361, 368, 409, 458, 459, 460, 461, 462, 464, 465, 466, 485, 487, 491, 493, 494, 510, 511, 512, 514, 594, 626, 627, 632, 676, 692, 725, 737, 741, 746, 797, 801, 808, 920, 922, 926, 928, 929, 945, 946, 947, 949, 987], "row": [12, 17, 22, 27, 30, 32, 34, 63, 64, 66, 71, 81, 83, 88, 92, 93, 95, 96, 102, 103, 106, 107, 111, 113, 115, 116, 117, 120, 123, 125, 135, 136, 137, 144, 148, 151, 153, 157, 159, 161, 162, 167, 169, 170, 171, 172, 174, 175, 176, 180, 184, 198, 206, 210, 211, 214, 216, 221, 223, 225, 226, 232, 236, 239, 248, 254, 268, 279, 288, 305, 380, 393, 414, 445, 455, 479, 481, 490, 522, 542, 551, 552, 560, 564, 568, 571, 575, 584, 587, 594, 608, 610, 612, 615, 619, 622, 623, 626, 628, 632, 633, 635, 636, 640, 657, 658, 662, 663, 664, 665, 667, 672, 676, 679, 688, 692, 700, 721, 820, 830, 854, 875, 885, 914, 925, 958, 987, 995], "per": [12, 27, 30, 123, 125, 136, 157, 184, 185, 207, 221, 243, 245, 246, 254, 268, 287, 290, 304, 314, 481, 542, 594, 608, 659, 664, 683, 685, 686, 692, 720, 723, 737], "everi": [12, 102, 103, 113, 159, 211, 214, 227, 254, 281, 282, 286, 288, 290, 291, 300, 303, 324, 325, 326, 327, 328, 329, 361, 368, 380, 490, 524, 551, 552, 594, 619, 626, 663, 692, 714, 715, 719, 721, 723, 724, 733, 736, 758, 759, 760, 761, 762, 801, 808, 820, 925, 960, 987], "process": [12, 27, 129, 254, 656, 657, 692], "liter": [13, 17, 29, 49, 68, 73, 106, 126, 127, 128, 157, 171, 177, 178, 182, 183, 186, 196, 197, 200, 209, 213, 226, 231, 254, 264, 266, 308, 335, 374, 381, 388, 390, 391, 397, 409, 412, 419, 435, 437, 441, 447, 452, 485, 500, 501, 519, 529, 537, 538, 541, 544, 546, 547, 553, 554, 555, 566, 568, 571, 576, 582, 583, 585, 594, 621, 651, 667, 670, 692, 698, 699, 740, 771, 821, 835, 901, 902, 920, 935, 936, 987], "left": [13, 51, 63, 73, 120, 121, 130, 159, 160, 173, 174, 226, 254, 375, 376, 377, 396, 397, 458, 459, 460, 461, 462, 464, 465, 466, 469, 496, 516, 527, 544, 551, 552, 560, 575, 587, 594, 626, 627, 631, 632, 667, 692, 816, 817, 818, 835, 899, 931, 951, 971, 987], "center": [13, 30, 254, 375, 376, 377, 457, 458, 459, 460, 461, 462, 464, 465, 466, 594, 816, 817, 818, 887, 888, 889, 890, 891, 892, 894, 895, 896, 987], "right": [13, 15, 30, 73, 102, 103, 120, 121, 130, 159, 160, 173, 174, 254, 375, 376, 377, 397, 458, 459, 460, 461, 462, 464, 465, 466, 469, 478, 502, 544, 594, 626, 627, 631, 632, 692, 816, 817, 818, 835, 899, 913, 937, 987], "cell": 13, "align": [13, 30, 63, 71, 254, 516, 951], "keyerror": [13, 17], "recognis": [13, 17, 122], "column_abc": 13, "column_xyz": 13, "visibl": [14, 146, 254, 815, 987], "eg": [14, 22, 30, 254, 361, 510, 512, 529, 594, 945, 947], "low": [14, 129], "rang": [14, 30, 72, 73, 104, 130, 141, 146, 159, 172, 254, 339, 352, 358, 359, 361, 368, 369, 396, 541, 546, 554, 555, 585, 594, 626, 692, 763, 764, 775, 792, 798, 799, 801, 808, 809, 815, 875, 879, 987], "100": [14, 30, 92, 95, 102, 103, 113, 116, 254, 516, 541, 692, 888, 889, 891, 987, 995], "98": [14, 165, 254, 313, 480, 523, 528, 594], "99": [14, 30, 149, 150, 165, 168, 254, 262, 313, 381, 383, 480, 523, 528, 594, 620, 621, 692, 814, 821, 987], "tbl_col": 14, "10": [14, 26, 27, 29, 30, 31, 34, 63, 71, 72, 73, 96, 104, 113, 125, 127, 130, 138, 148, 156, 159, 160, 162, 164, 165, 166, 183, 187, 189, 193, 194, 200, 210, 231, 234, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 267, 276, 277, 278, 280, 286, 291, 299, 300, 303, 318, 323, 325, 328, 330, 332, 333, 335, 353, 354, 360, 361, 368, 371, 392, 393, 396, 401, 409, 413, 414, 416, 445, 446, 459, 479, 516, 522, 536, 544, 551, 557, 560, 562, 564, 566, 567, 573, 580, 584, 594, 612, 626, 627, 628, 630, 635, 644, 645, 651, 657, 661, 662, 670, 674, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 692, 701, 719, 724, 732, 733, 736, 752, 763, 765, 771, 800, 808, 811, 814, 830, 842, 857, 859, 875, 901, 902, 958, 987, 995], "95": [14, 262, 594], "96": [14, 262, 594], "97": [14, 165, 254, 262, 594], "move": [15, 375, 376, 377, 458, 459, 461, 465, 594, 816, 817, 818, 888, 889, 891, 895, 987], "inlin": [15, 485, 491, 492, 500, 920, 926, 927, 935], "parenthes": 15, "below": [16, 30, 105, 114, 144, 254, 396, 587, 594, 615, 692], "ascii_ful": 17, "ascii_full_condens": 17, "ascii_no_bord": 17, "ascii_borders_onli": 17, "ascii_borders_only_condens": 17, "ascii_horizontal_onli": 17, "ascii_markdown": 17, "utf8_ful": [17, 63, 96], "utf8_full_condens": [17, 96], "utf8_no_bord": 17, "utf8_borders_onli": 17, "utf8_horizontal_onli": 17, "noth": [17, 486, 491, 494, 921, 926, 929], "none": [17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 47, 49, 51, 52, 63, 72, 73, 74, 89, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 135, 137, 141, 144, 149, 150, 157, 159, 160, 161, 166, 170, 173, 174, 175, 178, 180, 184, 185, 188, 196, 198, 200, 204, 206, 207, 213, 215, 218, 222, 223, 224, 225, 226, 227, 231, 234, 254, 263, 267, 268, 280, 290, 300, 305, 307, 318, 319, 320, 323, 325, 328, 332, 333, 360, 361, 368, 375, 376, 377, 378, 381, 382, 383, 389, 392, 396, 397, 403, 404, 405, 406, 407, 413, 420, 422, 442, 445, 451, 452, 457, 458, 459, 460, 461, 462, 464, 465, 466, 468, 472, 473, 474, 475, 479, 480, 484, 485, 488, 489, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 527, 537, 539, 541, 544, 547, 549, 555, 556, 558, 559, 566, 567, 568, 571, 576, 577, 578, 579, 581, 582, 585, 586, 587, 594, 610, 611, 615, 620, 621, 626, 627, 630, 631, 632, 634, 636, 640, 643, 651, 654, 655, 656, 657, 658, 659, 665, 666, 667, 670, 671, 673, 674, 676, 692, 701, 708, 709, 723, 733, 738, 751, 752, 763, 764, 766, 782, 783, 784, 789, 800, 801, 808, 813, 814, 816, 817, 818, 821, 822, 823, 825, 828, 829, 831, 833, 834, 835, 844, 847, 848, 851, 854, 855, 862, 863, 864, 865, 866, 870, 879, 880, 881, 887, 888, 889, 890, 891, 892, 894, 895, 896, 898, 902, 904, 906, 909, 910, 913, 914, 917, 919, 920, 923, 924, 928, 929, 930, 931, 932, 933, 934, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 949, 963, 966, 967, 970, 971, 977, 978, 987], "rounded_corn": 17, "style": [17, 30, 188, 254], "border": 17, "line": [17, 30, 102, 103, 106, 113, 157, 167, 169, 254, 491, 926], "includ": [17, 25, 27, 29, 30, 69, 105, 114, 125, 136, 141, 146, 159, 221, 222, 225, 254, 362, 397, 505, 506, 551, 594, 608, 626, 664, 692, 764, 802, 815, 835, 940, 941, 978, 987], "divid": [17, 361, 368, 375, 376, 377, 410, 594, 801, 808, 816, 817, 818, 855, 987], "same": [17, 29, 30, 54, 63, 70, 71, 74, 107, 113, 123, 135, 142, 158, 207, 223, 231, 234, 236, 254, 260, 267, 368, 380, 426, 429, 444, 457, 458, 459, 460, 461, 462, 464, 465, 466, 481, 518, 545, 594, 614, 625, 636, 659, 665, 670, 674, 676, 692, 696, 700, 701, 771, 820, 887, 888, 889, 890, 891, 892, 894, 895, 896, 979, 987], "dens": [17, 157, 254, 451, 594, 881, 987], "space": 17, "horizont": [17, 71, 153, 164, 225, 254, 537, 538, 546, 547, 551, 552, 553, 557, 560, 568, 571, 575, 583], "markdown": 17, "compat": [17, 30, 34, 104, 254, 485, 486, 491, 492, 500, 501, 657, 692, 920, 921, 926, 927, 935, 936], "No": 17, "appli": [17, 27, 30, 49, 71, 113, 122, 125, 127, 153, 187, 254, 339, 342, 344, 345, 346, 348, 350, 352, 355, 358, 359, 362, 369, 370, 372, 376, 377, 420, 446, 457, 458, 459, 461, 465, 500, 510, 511, 512, 514, 536, 541, 551, 552, 560, 567, 575, 594, 628, 635, 636, 644, 692, 773, 774, 775, 778, 780, 781, 785, 787, 790, 792, 795, 798, 799, 802, 805, 809, 810, 812, 817, 818, 887, 888, 889, 891, 895, 935, 945, 946, 947, 949, 987], "round": [17, 30, 65, 96, 254, 317, 387, 525, 594, 749, 826, 987], "corner": [17, 96], "op": [17, 127, 254, 454, 594, 692, 987], "The": [17, 28, 30, 34, 46, 55, 63, 69, 89, 91, 92, 93, 95, 99, 102, 104, 111, 113, 129, 135, 143, 145, 157, 158, 159, 160, 161, 166, 171, 174, 181, 186, 196, 197, 200, 224, 227, 231, 234, 236, 254, 304, 307, 308, 309, 310, 339, 352, 357, 358, 361, 364, 368, 369, 378, 381, 389, 392, 420, 444, 451, 454, 457, 458, 459, 460, 461, 462, 464, 465, 466, 475, 478, 484, 487, 488, 493, 495, 496, 497, 502, 503, 509, 510, 516, 545, 558, 562, 577, 578, 579, 582, 587, 588, 590, 594, 595, 596, 600, 601, 602, 626, 627, 628, 630, 632, 635, 636, 641, 645, 651, 657, 666, 670, 674, 676, 692, 701, 737, 740, 741, 742, 751, 775, 792, 797, 798, 801, 804, 808, 809, 821, 829, 834, 881, 887, 888, 889, 890, 891, 892, 894, 895, 896, 910, 913, 919, 922, 923, 928, 930, 931, 932, 937, 938, 944, 945, 951, 981, 983, 987, 988, 991, 992, 993, 995], "one": [17, 28, 30, 53, 63, 81, 89, 91, 92, 93, 94, 95, 126, 127, 128, 132, 150, 151, 157, 158, 159, 160, 171, 180, 188, 196, 197, 201, 220, 235, 254, 262, 305, 383, 409, 417, 457, 480, 492, 523, 583, 587, 594, 621, 622, 625, 626, 627, 640, 652, 671, 675, 692, 700, 738, 823, 851, 860, 887, 927, 952, 987], "more": [17, 30, 32, 34, 53, 63, 71, 88, 89, 90, 91, 92, 93, 94, 95, 105, 111, 114, 125, 127, 132, 135, 140, 141, 171, 175, 180, 184, 196, 197, 198, 223, 236, 254, 265, 268, 306, 318, 319, 320, 409, 410, 417, 420, 443, 468, 478, 492, 530, 583, 587, 594, 640, 657, 665, 676, 692, 701, 739, 752, 753, 754, 764, 851, 855, 898, 913, 927, 973, 987, 995], "semigraph": 17, "box": [17, 135, 254], "draw": [17, 22, 23, 124, 995], "found": [17, 27, 76, 85, 87, 92, 96, 145, 226, 254, 469, 494, 510, 512, 594, 667, 692, 899, 929, 945, 947, 987], "unicod": 17, "block": [17, 158, 223, 254, 625, 648, 665, 672, 692, 901, 902, 987], "http": [17, 30, 90, 104, 134, 140, 254, 491, 926], "en": [17, 30, 254], "wikipedia": 17, "org": [17, 90, 104, 134, 140, 254], "wiki": 17, "drawing_charact": 17, "box_draw": 17, "mno": 17, "tbl_format": 17, "tbl_hide_column_data_typ": 17, "tbl_hide_dataframe_shap": 17, "hide": [18, 19, 20, 21, 30, 254], "etc": [18, 29, 30, 102, 105, 107, 111, 114, 115, 117, 254, 541, 901, 902, 987], "inform": [20, 69, 105, 114, 140, 254, 318, 319, 320, 410, 478, 485, 491, 492, 500, 594, 645, 692, 752, 753, 754, 855, 913, 920, 926, 927, 935, 987], "separ": [21, 27, 97, 99, 102, 103, 113, 186, 188, 215, 222, 224, 254, 268, 288, 292, 490, 547, 551, 552, 594, 666, 692, 721, 725, 925, 956, 965, 987], "between": [21, 71, 122, 123, 125, 127, 190, 246, 254, 292, 315, 331, 397, 445, 450, 462, 484, 548, 550, 573, 574, 577, 578, 580, 594, 646, 686, 692, 725, 746, 766, 835, 875, 880, 892, 919, 987], "set_tbl_column_data_type_inlin": 21, "max": [22, 30, 34, 129, 141, 150, 158, 159, 160, 188, 254, 305, 318, 319, 325, 383, 444, 451, 458, 470, 507, 594, 621, 625, 626, 627, 657, 692, 738, 752, 753, 758, 764, 823, 881, 888, 903, 942, 987], "both": [22, 27, 54, 73, 104, 130, 159, 160, 173, 174, 181, 196, 254, 267, 397, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 627, 631, 632, 641, 692, 835, 844, 987], "tbl_row": 22, "width": [23, 30, 102, 103, 254, 496, 502, 516, 692, 931, 937, 951], "char": [23, 54, 74, 492, 498, 927, 933], "enabl": [24, 74, 200, 231, 254, 470, 594, 651, 670, 692, 903, 987], "addit": [24, 29, 30, 92, 105, 114, 123, 142, 147, 158, 186, 200, 201, 207, 224, 231, 234, 254, 261, 378, 381, 444, 481, 485, 491, 492, 500, 537, 538, 542, 544, 545, 546, 547, 553, 558, 568, 571, 579, 582, 583, 594, 614, 618, 625, 651, 652, 659, 666, 670, 674, 692, 821, 920, 926, 927, 935, 987], "verbos": [24, 132, 492, 927], "debug": [24, 612, 619, 636, 692, 995], "log": [24, 65, 313, 373, 417, 437, 447, 528, 594, 745, 814, 972, 987], "if_set": 25, "env_onli": 25, "dict": [25, 29, 30, 34, 64, 66, 69, 89, 91, 92, 93, 94, 95, 102, 103, 105, 106, 107, 108, 111, 112, 113, 114, 115, 117, 125, 171, 186, 192, 196, 197, 199, 213, 214, 254, 422, 594, 648, 650, 692, 862, 987], "show": [25, 30, 144, 157, 175, 185, 254, 615, 645, 655, 692], "variabl": [25, 51, 97, 126, 129, 180, 215, 254, 640, 692, 965, 987], "restrict": [25, 507, 942], "dictionari": [25, 30, 89, 91, 92, 93, 95, 102, 103, 108, 112, 113, 171, 186, 196, 197, 213, 214, 254, 422, 594, 692, 764, 862, 987], "those": [25, 30, 102, 254, 451, 491, 594, 881, 926, 987], "been": [25, 30, 72, 97, 254, 451, 594, 881, 987], "set_fmt_float": 25, "directli": [25, 125, 127, 132, 375, 376, 377, 594, 692, 816, 817, 818, 987, 995], "via": [25, 102, 103, 106, 113, 115, 116, 117, 171, 197, 254, 268, 594], "set_stat": 25, "all_stat": 25, "file": [26, 27, 31, 32, 33, 34, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 148, 254, 619, 647, 656, 657, 673, 692, 700, 987], "binaryio": [26, 31, 101, 102, 106, 107, 108, 111, 112, 254], "bytesio": [26, 27, 30, 31, 34, 101, 102, 103, 106, 107, 111, 254], "path": [26, 27, 29, 30, 31, 32, 33, 34, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 254, 470, 494, 594, 647, 656, 657, 673, 692, 903, 929, 987], "compress": [26, 31, 34, 254, 656, 657, 692], "avrocompress": [26, 254], "uncompress": [26, 31, 34, 107, 115, 254, 657, 692], "write": [26, 27, 28, 29, 30, 31, 32, 34, 103, 107, 254, 318, 319, 320, 594, 634, 655, 657, 673, 692, 752, 753, 754, 987], "apach": [26, 34, 101, 104, 254], "avro": [26, 101, 254, 605], "should": [26, 27, 30, 31, 32, 33, 34, 71, 89, 91, 93, 95, 97, 100, 105, 113, 122, 123, 127, 131, 134, 135, 142, 159, 160, 171, 174, 196, 197, 214, 215, 224, 227, 236, 254, 262, 268, 287, 316, 329, 357, 361, 368, 371, 378, 403, 405, 457, 458, 459, 460, 461, 462, 464, 465, 466, 469, 478, 545, 558, 565, 566, 577, 578, 587, 594, 614, 626, 627, 631, 632, 636, 655, 656, 657, 666, 673, 676, 692, 701, 720, 748, 762, 797, 801, 808, 811, 887, 888, 889, 890, 891, 892, 894, 895, 896, 899, 913, 987], "written": [26, 27, 30, 31, 32, 33, 34, 254, 656, 657, 673, 692], "snappi": [26, 34, 254, 657, 692], "deflat": [26, 254], "import": [26, 27, 30, 31, 34, 37, 63, 73, 89, 93, 94, 113, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 141, 157, 159, 172, 174, 217, 218, 225, 227, 254, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 556, 626, 632, 636, 692, 756, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 839, 843, 845, 846, 851, 887, 911, 961, 987, 995], "pathlib": [26, 27, 31, 34, 113, 254], "foo": [26, 27, 29, 31, 32, 33, 34, 97, 135, 139, 140, 142, 143, 144, 145, 148, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 168, 173, 177, 178, 179, 182, 185, 188, 190, 192, 193, 194, 196, 198, 199, 200, 202, 203, 204, 206, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 222, 223, 224, 228, 229, 230, 233, 254, 263, 284, 289, 290, 293, 294, 318, 319, 320, 357, 393, 395, 414, 455, 471, 472, 484, 486, 488, 490, 492, 497, 503, 505, 507, 509, 513, 515, 522, 524, 537, 540, 541, 543, 545, 548, 549, 550, 559, 563, 564, 568, 569, 570, 571, 572, 573, 574, 579, 580, 581, 584, 586, 587, 594, 613, 614, 615, 616, 622, 629, 630, 631, 643, 648, 650, 651, 665, 666, 669, 671, 673, 692, 725, 752, 797, 885, 921, 923, 925, 927, 942, 987], "bar": [26, 27, 29, 31, 32, 33, 34, 97, 135, 139, 140, 142, 143, 144, 145, 148, 151, 152, 153, 154, 155, 156, 162, 164, 165, 166, 168, 173, 177, 178, 179, 182, 185, 188, 190, 192, 193, 194, 196, 198, 199, 200, 203, 204, 206, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 223, 224, 228, 229, 233, 254, 263, 294, 395, 478, 488, 490, 505, 507, 537, 540, 543, 545, 548, 549, 550, 559, 564, 568, 569, 570, 571, 572, 573, 579, 580, 581, 584, 586, 587, 594, 613, 614, 615, 616, 622, 629, 630, 631, 643, 648, 650, 651, 665, 666, 669, 673, 692, 725, 913, 923, 925, 942, 987], "ham": [26, 27, 29, 31, 34, 97, 139, 140, 142, 143, 144, 145, 151, 152, 154, 161, 162, 164, 173, 177, 178, 179, 182, 185, 190, 192, 194, 196, 198, 199, 200, 203, 204, 206, 208, 209, 210, 215, 216, 217, 218, 219, 223, 228, 229, 254, 545, 613, 614, 615, 616, 622, 631, 643, 648, 650, 651, 665, 671, 692], "d": [26, 27, 29, 31, 34, 54, 74, 92, 118, 141, 157, 161, 162, 165, 173, 210, 212, 225, 229, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 261, 341, 364, 367, 397, 446, 473, 486, 492, 506, 510, 511, 512, 544, 562, 594, 631, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 692, 777, 804, 807, 835, 921, 927, 941, 945, 946, 947, 987], "e": [26, 27, 29, 31, 34, 54, 74, 90, 102, 103, 106, 107, 111, 115, 117, 141, 157, 159, 160, 162, 174, 210, 212, 225, 227, 254, 261, 268, 357, 361, 368, 373, 378, 397, 415, 422, 458, 459, 460, 461, 462, 464, 465, 466, 473, 478, 558, 587, 594, 626, 627, 632, 634, 648, 692, 797, 801, 808, 814, 835, 900, 913, 969, 987], "dirpath": [26, 27, 31, 34, 113, 254], "new_fil": [26, 27, 31, 34, 254], "has_head": [27, 30, 102, 103, 106, 113, 254], "quot": [27, 102, 103, 113, 254], "batch_siz": [27, 102, 103, 116, 254], "1024": [27, 102, 103, 116, 254, 657, 692], "datetime_format": [27, 254], "date_format": [27, 254], "time_format": [27, 254], "float_precis": [27, 30, 254], "null_valu": [27, 102, 103, 113, 254], "comma": [27, 254], "csv": [27, 102, 103, 106, 113, 254, 605, 656, 657, 692], "result": [27, 32, 33, 63, 71, 93, 95, 104, 105, 113, 115, 117, 118, 127, 148, 159, 160, 184, 204, 218, 227, 234, 254, 305, 364, 367, 375, 376, 377, 381, 410, 444, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 470, 472, 505, 506, 512, 529, 541, 551, 552, 567, 577, 578, 594, 609, 626, 627, 636, 645, 654, 656, 657, 673, 674, 692, 700, 804, 807, 816, 817, 818, 855, 885, 887, 888, 889, 890, 891, 892, 894, 895, 896, 903, 906, 940, 941, 947, 969, 987, 995], "If": [27, 29, 30, 31, 32, 33, 49, 54, 68, 69, 71, 72, 73, 89, 90, 91, 92, 93, 94, 95, 97, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 126, 130, 134, 135, 136, 144, 148, 157, 159, 160, 162, 170, 171, 174, 176, 180, 184, 197, 198, 206, 210, 214, 215, 217, 221, 222, 223, 225, 226, 254, 268, 300, 305, 318, 319, 320, 335, 353, 354, 360, 384, 410, 420, 422, 451, 453, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 474, 478, 479, 493, 495, 497, 498, 503, 504, 505, 506, 507, 509, 510, 511, 512, 514, 537, 538, 539, 541, 548, 549, 551, 553, 560, 566, 568, 571, 576, 577, 578, 580, 582, 583, 587, 594, 608, 615, 617, 626, 627, 631, 632, 636, 640, 648, 657, 658, 664, 665, 667, 673, 676, 692, 700, 701, 733, 738, 752, 753, 754, 763, 771, 793, 794, 800, 828, 830, 831, 854, 855, 857, 879, 881, 883, 885, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 903, 909, 913, 914, 928, 930, 932, 933, 938, 939, 940, 941, 942, 944, 945, 946, 947, 949, 958, 964, 969, 978, 987], "instead": [27, 32, 33, 49, 63, 68, 71, 73, 100, 102, 111, 125, 130, 131, 135, 159, 160, 171, 174, 184, 186, 196, 197, 200, 218, 227, 231, 254, 278, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 495, 497, 503, 509, 541, 568, 571, 576, 582, 594, 620, 626, 627, 632, 651, 670, 673, 692, 710, 797, 801, 808, 901, 902, 930, 932, 938, 944, 970, 987], "whether": [27, 73, 93, 95, 127, 130, 201, 254, 344, 360, 362, 427, 428, 470, 594, 636, 652, 692, 780, 800, 802], "header": [27, 30, 34, 96, 102, 103, 106, 113, 145, 188, 222, 254, 657, 692], "field": [27, 55, 85, 87, 92, 217, 224, 254, 305, 422, 492, 493, 506, 507, 518, 551, 552, 567, 582, 594, 666, 692, 738, 941, 942, 954, 956], "symbol": [27, 254], "byte": [27, 102, 103, 106, 107, 108, 111, 112, 113, 146, 254, 308, 311, 312, 495, 498, 657, 692, 740, 743, 744, 815, 930, 933, 987], "specifi": [27, 30, 63, 73, 76, 85, 87, 106, 125, 136, 142, 146, 147, 150, 158, 186, 196, 200, 201, 207, 221, 224, 231, 234, 254, 375, 376, 377, 378, 383, 422, 444, 454, 481, 496, 502, 537, 538, 542, 544, 545, 546, 547, 553, 558, 568, 571, 579, 582, 583, 594, 608, 614, 618, 621, 625, 651, 652, 659, 664, 666, 670, 674, 692, 815, 816, 817, 818, 823, 931, 937, 987], "defin": [27, 30, 37, 73, 122, 123, 125, 130, 135, 159, 160, 184, 187, 236, 254, 268, 304, 397, 446, 458, 459, 460, 461, 462, 464, 465, 466, 539, 566, 582, 594, 626, 627, 644, 676, 692, 701, 737, 835, 987], "chrono": [27, 254, 364, 367, 510, 511, 512, 514, 804, 807, 945, 946, 947, 949], "rust": [27, 34, 82, 107, 111, 135, 236, 254, 676, 701, 987], "crate": [27, 254, 485, 486, 491, 492, 500, 501, 510, 511, 512, 514, 920, 921, 926, 927, 935, 936, 945, 946, 947, 949], "fraction": [27, 120, 121, 198, 254, 362, 445, 468, 510, 512, 594, 802, 875, 898, 945, 947, 987], "second": [27, 73, 124, 130, 159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 510, 512, 555, 556, 585, 587, 594, 626, 627, 632, 692, 797, 801, 808, 945, 947, 995], "precis": [27, 30, 38, 171, 197, 214, 254, 334, 770], "infer": [27, 89, 91, 92, 93, 94, 95, 102, 103, 106, 113, 116, 135, 254, 455, 493, 510, 511, 512, 514, 594, 692, 885, 928, 945, 946, 947, 949, 987], "maximum": [27, 102, 103, 113, 123, 124, 125, 127, 177, 254, 281, 423, 439, 451, 568, 594, 637, 692, 714, 752, 782, 863, 871, 876, 881, 987], "timeunit": [27, 37, 39, 73, 254, 334, 335, 366, 371, 512, 770, 771, 806, 811, 947], "frame": [27, 28, 30, 49, 50, 52, 63, 71, 92, 120, 125, 135, 137, 171, 172, 181, 184, 187, 196, 197, 218, 225, 254, 610, 641, 644, 692, 751, 987, 995], "datetim": [27, 30, 63, 73, 96, 125, 130, 141, 157, 159, 160, 172, 174, 227, 254, 284, 285, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 458, 459, 460, 461, 462, 464, 465, 466, 510, 512, 527, 556, 562, 566, 576, 594, 626, 627, 632, 692, 717, 718, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 851, 871, 872, 902, 945, 947, 971, 987], "place": [27, 136, 143, 164, 165, 193, 203, 204, 207, 221, 229, 254, 278, 292, 299, 471, 472, 480, 594, 608, 653, 654, 659, 664, 692, 710, 725, 732, 882, 884, 905, 906, 915, 987], "float64": [27, 30, 92, 100, 102, 125, 131, 145, 146, 153, 199, 218, 231, 254, 270, 271, 272, 273, 274, 275, 315, 321, 322, 362, 378, 403, 405, 476, 477, 525, 526, 545, 558, 594, 616, 650, 670, 692, 802, 970, 975, 987], "datatyp": [27, 32, 46, 61, 89, 91, 92, 93, 95, 98, 100, 106, 108, 112, 127, 131, 145, 147, 153, 199, 254, 288, 315, 378, 473, 490, 527, 545, 558, 566, 594, 605, 618, 650, 673, 692, 701, 721, 746, 764, 844, 849, 851, 853, 907, 925, 971, 987], "repres": [27, 47, 61, 73, 89, 91, 93, 94, 95, 130, 208, 228, 254, 403, 405, 483, 534, 537, 545, 548, 558, 566, 573, 577, 578, 580, 581, 586, 594, 660, 668, 692, 902, 917, 977, 987], "null": [27, 29, 51, 63, 71, 92, 102, 103, 113, 118, 134, 136, 137, 141, 144, 150, 153, 154, 166, 173, 178, 179, 185, 188, 190, 203, 204, 207, 208, 209, 213, 218, 221, 224, 226, 228, 231, 237, 254, 263, 267, 268, 278, 286, 289, 290, 293, 299, 304, 305, 307, 309, 318, 319, 320, 323, 325, 328, 330, 332, 333, 340, 343, 347, 349, 351, 356, 363, 375, 376, 377, 378, 381, 382, 383, 384, 389, 396, 403, 404, 405, 406, 407, 413, 422, 442, 445, 452, 457, 458, 459, 460, 461, 462, 464, 465, 466, 471, 472, 473, 475, 480, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 498, 499, 502, 504, 506, 507, 508, 516, 517, 518, 527, 535, 537, 544, 546, 547, 549, 558, 566, 577, 578, 582, 587, 594, 608, 610, 615, 621, 630, 631, 643, 653, 654, 659, 664, 666, 667, 670, 671, 673, 677, 692, 701, 710, 719, 732, 737, 738, 741, 751, 752, 765, 768, 776, 779, 786, 788, 791, 796, 803, 816, 817, 818, 821, 823, 828, 847, 848, 874, 875, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 900, 905, 906, 910, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 933, 934, 937, 939, 941, 942, 943, 967, 969, 970, 971, 978, 987, 995], "empti": [27, 80, 92, 102, 103, 106, 113, 137, 138, 168, 180, 254, 566, 579, 610, 611, 640, 692, 751, 755, 838, 987], "table_nam": [28, 30, 254], "connection_uri": [28, 104, 254], "if_exist": [28, 254], "dbwritemod": [28, 254], "fail": [28, 29, 90, 105, 107, 114, 134, 223, 254, 279, 305, 510, 511, 512, 514, 594, 665, 692, 701, 945, 946, 947, 949, 987], "dbwriteengin": [28, 254], "sqlalchemi": [28, 254], "databas": [28, 104, 254, 605], "append": [28, 29, 125, 148, 173, 174, 254, 452, 587, 594, 631, 632, 692, 987], "creat": [28, 30, 72, 73, 89, 93, 95, 114, 123, 124, 125, 126, 127, 128, 130, 137, 138, 159, 160, 185, 188, 227, 231, 254, 305, 335, 361, 368, 452, 504, 533, 541, 546, 554, 555, 556, 585, 594, 610, 611, 617, 626, 627, 670, 692, 751, 755, 763, 768, 771, 801, 808, 873, 879, 882, 939, 969, 987, 995], "connect": [28, 102, 104, 107, 111, 115, 117, 118, 254, 606], "uri": [28, 29, 104, 105, 114, 254], "postgresql": [28, 104, 254, 444, 594], "usernam": [28, 102, 104, 107, 111, 115, 117, 254], "password": [28, 102, 104, 107, 111, 115, 117, 254], "server": [28, 104, 254], "port": [28, 102, 104, 107, 111, 115, 117, 254], "replac": [28, 29, 102, 103, 113, 149, 150, 194, 222, 231, 254, 335, 360, 422, 501, 594, 620, 670, 692, 771, 800, 862, 901, 902, 936, 987], "insert": [28, 102, 103, 107, 111, 113, 115, 116, 117, 165, 193, 222, 224, 254, 469, 484, 516, 594, 666, 692, 899, 919, 951, 987], "mode": [28, 29, 254, 492, 576, 594, 692, 927, 987], "new": [28, 29, 30, 100, 113, 131, 132, 135, 144, 164, 165, 184, 185, 192, 193, 211, 224, 225, 231, 254, 263, 335, 380, 396, 421, 500, 501, 506, 507, 517, 518, 524, 594, 605, 615, 648, 663, 666, 670, 676, 692, 697, 768, 771, 820, 873, 884, 935, 936, 941, 942, 952, 954, 960, 966, 979, 987], "alreadi": [28, 29, 254, 287, 329, 594, 720, 762, 987], "adbc": [28, 104, 254], "deltalak": [29, 105, 114, 119, 254], "deltat": [29, 254], "ignor": [29, 124, 125, 127, 178, 209, 254, 286, 330, 360, 375, 376, 377, 439, 440, 594, 719, 765, 800, 816, 817, 818, 871, 872, 987], "overwrite_schema": [29, 254], "storage_opt": [29, 102, 105, 107, 111, 114, 115, 117, 254], "delta_write_opt": [29, 254], "delta": [29, 39, 105, 114, 208, 228, 254, 483, 534, 548, 573, 577, 578, 580, 581, 586, 594, 605, 660, 668, 692, 917, 977, 987], "like": [29, 73, 90, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 130, 167, 169, 173, 254, 287, 433, 451, 491, 583, 594, 619, 647, 692, 720, 881, 926, 987], "categor": [29, 54, 74, 97, 173, 215, 216, 254, 316, 422, 527, 594, 747, 748, 971, 987], "protocol": [29, 90, 104, 134, 254], "object": [29, 30, 31, 34, 51, 52, 71, 73, 90, 91, 96, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 123, 125, 127, 130, 134, 158, 159, 160, 175, 217, 218, 254, 566, 605, 611, 626, 627, 629, 634, 647, 692, 713, 747, 769, 918, 964, 987], "handl": [29, 71, 96, 102, 103, 113, 118, 254, 286, 330, 516, 594, 719, 765, 951, 987], "throw": [29, 90, 254, 315, 493, 494, 594, 746, 928, 929, 987], "add": [29, 30, 50, 103, 135, 148, 159, 231, 232, 254, 448, 520, 556, 560, 587, 594, 626, 631, 670, 671, 672, 692, 700, 987], "anyth": [29, 196, 254, 492, 927], "updat": [29, 254, 692], "extra": [29, 34, 102, 105, 106, 107, 111, 114, 115, 117, 148, 254, 657, 692, 700, 987], "storag": [29, 102, 105, 107, 111, 114, 115, 117, 254], "backend": [29, 104, 105, 114, 254], "cloud": [29, 105, 114, 118, 254], "configur": [29, 105, 114, 254], "authent": [29, 105, 114, 254], "see": [29, 30, 104, 105, 106, 114, 120, 121, 125, 127, 140, 173, 187, 254, 318, 319, 320, 383, 396, 410, 420, 478, 485, 491, 492, 500, 575, 594, 752, 753, 754, 855, 913, 920, 926, 927, 935, 987, 995], "here": [29, 30, 89, 91, 92, 93, 95, 104, 105, 114, 123, 125, 127, 254, 494, 692, 929], "gc": [29, 105, 114, 254], "azur": [29, 105, 114, 254], "keyword": [29, 105, 111, 114, 140, 187, 196, 200, 231, 234, 254, 446, 579, 582, 594, 644, 651, 670, 674, 692, 987], "argument": [29, 34, 102, 105, 111, 114, 140, 142, 147, 158, 159, 160, 178, 186, 187, 188, 200, 201, 207, 209, 218, 224, 227, 231, 234, 254, 361, 368, 378, 397, 444, 446, 458, 459, 460, 461, 462, 464, 465, 466, 481, 497, 503, 509, 510, 537, 538, 542, 544, 545, 546, 547, 553, 558, 568, 571, 579, 582, 583, 594, 614, 618, 625, 626, 627, 644, 651, 652, 659, 666, 670, 674, 692, 801, 808, 835, 932, 938, 944, 945, 970, 987], "while": [29, 103, 105, 106, 114, 125, 127, 171, 180, 222, 254, 640, 692], "lake": [29, 105, 114, 254, 605], "instanti": [29, 30, 200, 231, 254, 651, 670, 692], "basic": [29, 30, 254, 995], "filesystem": [29, 105, 114, 254], "table_path": [29, 105, 114, 254], "doe": [29, 63, 71, 83, 89, 91, 92, 93, 95, 96, 102, 103, 105, 106, 113, 114, 118, 120, 121, 148, 172, 196, 197, 223, 231, 254, 305, 368, 371, 422, 531, 559, 594, 619, 636, 665, 670, 692, 700, 811, 828, 862, 908, 978, 987], "match": [29, 30, 71, 83, 89, 91, 92, 93, 95, 120, 121, 150, 174, 196, 254, 428, 485, 486, 489, 491, 492, 493, 494, 500, 501, 508, 510, 511, 512, 545, 621, 632, 692, 844, 851, 920, 921, 924, 926, 927, 928, 929, 935, 936, 943, 945, 946, 947, 987], "version": [29, 69, 72, 73, 97, 105, 114, 119, 254, 353, 354, 510, 565, 573, 575, 580, 793, 794, 945], "old": [29, 192, 254, 648, 692], "existing_table_path": [29, 254], "store": [29, 102, 111, 148, 171, 197, 254, 700, 987], "bucket": [29, 105, 114, 254, 361, 368, 801, 808, 831, 987], "prefix": [29, 132, 254, 263, 312, 421, 508, 516, 520, 594, 744, 943, 951], "aws_region": [29, 114, 254], "the_aws_region": [29, 254], "aws_access_key_id": [29, 105, 114, 254], "the_aws_access_key_id": [29, 105, 114, 254], "aws_secret_access_kei": [29, 105, 114, 254], "the_aws_secret_access_kei": [29, 105, 114, 254], "workbook": [30, 254], "worksheet": [30, 254], "posit": [30, 142, 147, 158, 186, 200, 201, 207, 224, 231, 234, 254, 375, 376, 377, 378, 444, 481, 499, 537, 538, 542, 544, 545, 546, 547, 553, 558, 568, 571, 579, 582, 583, 594, 614, 618, 625, 651, 652, 659, 666, 670, 674, 692, 816, 817, 818, 934, 987], "tupl": [30, 104, 135, 171, 196, 197, 202, 233, 254, 455, 594, 645, 655, 692, 885, 987], "a1": [30, 64, 66, 254], "table_styl": [30, 254], "column_format": [30, 254], "dtype_format": [30, 254], "oneormoredatatyp": [30, 123, 254, 851, 987], "conditional_format": [30, 254], "conditionalformatdict": [30, 254], "column_tot": [30, 254], "columntotalsdefinit": [30, 254], "column_width": [30, 254], "row_tot": [30, 254], "rowtotalsdefinit": [30, 254], "row_height": [30, 254], "sparklin": [30, 254], "sequenc": [30, 55, 63, 70, 89, 91, 92, 93, 95, 97, 99, 102, 103, 113, 123, 124, 125, 136, 141, 142, 144, 147, 148, 173, 174, 180, 184, 187, 188, 207, 215, 221, 222, 223, 224, 225, 226, 227, 254, 305, 401, 420, 446, 481, 518, 539, 542, 551, 552, 560, 562, 567, 575, 594, 608, 614, 615, 618, 631, 632, 644, 659, 664, 665, 666, 667, 692, 700, 738, 764, 766, 902, 954, 987], "formula": [30, 254, 373, 594, 814, 987], "autofilt": [30, 254], "autofit": [30, 254], "hidden_column": [30, 254], "hide_gridlin": [30, 254], "sheet_zoom": [30, 254], "excel": [30, 106, 254, 605], "open": [30, 102, 103, 106, 107, 111, 115, 117, 254], "xlsxwriter": [30, 119, 254], "ha": [30, 63, 72, 97, 113, 134, 227, 254, 268, 313, 329, 409, 431, 528, 539, 594, 676, 745, 751, 762, 764, 828, 841, 972, 987], "close": [30, 73, 130, 159, 160, 254, 397, 417, 458, 459, 460, 461, 462, 464, 465, 466, 478, 594, 626, 627, 692, 835, 913, 987], "xlsx": [30, 106, 254], "work": [30, 38, 103, 106, 160, 193, 254, 268, 287, 306, 317, 318, 319, 320, 378, 387, 444, 498, 530, 594, 627, 692, 720, 739, 749, 752, 753, 754, 826, 933, 973, 987], "directori": [30, 111, 254], "sheet1": [30, 254], "valid": [30, 49, 107, 111, 127, 132, 146, 254, 329, 485, 486, 491, 492, 494, 500, 501, 594, 762, 815, 828, 920, 921, 926, 927, 929, 935, 936, 987], "notat": [30, 254], "integ": [30, 42, 43, 44, 45, 57, 58, 59, 60, 123, 125, 126, 128, 159, 160, 254, 317, 362, 387, 388, 453, 458, 459, 460, 461, 462, 463, 464, 465, 466, 499, 536, 541, 562, 594, 626, 627, 692, 708, 709, 749, 802, 826, 844, 883, 893, 902, 934, 987, 995], "medium": [30, 254], "kei": [30, 63, 69, 71, 159, 174, 181, 186, 188, 192, 195, 254, 626, 632, 641, 648, 649, 692], "contain": [30, 63, 69, 91, 94, 96, 105, 114, 120, 124, 136, 144, 172, 184, 188, 221, 254, 268, 401, 422, 486, 489, 491, 492, 494, 507, 508, 594, 608, 615, 645, 664, 692, 862, 868, 921, 924, 926, 927, 929, 942, 943, 964, 987], "follow": [30, 69, 102, 103, 105, 113, 114, 135, 159, 160, 174, 187, 227, 254, 268, 357, 361, 368, 446, 451, 458, 459, 460, 461, 462, 464, 465, 466, 518, 529, 539, 587, 588, 590, 594, 595, 596, 600, 601, 602, 626, 627, 632, 644, 692, 797, 801, 808, 881, 901, 902, 981, 983, 987, 988, 991, 992, 993, 995], "first_column": [30, 254], "last_column": [30, 254], "banded_column": [30, 254], "banded_row": [30, 254], "sheet": [30, 106, 254], "chart": [30, 254, 645, 692], "subsequ": [30, 191, 218, 254, 305, 617, 692], "colnam": [30, 113, 125, 145, 254, 616, 692], "given": [30, 49, 50, 63, 72, 73, 89, 91, 92, 93, 95, 100, 102, 103, 113, 122, 123, 125, 126, 127, 128, 130, 131, 135, 136, 146, 147, 170, 186, 187, 196, 203, 204, 207, 221, 226, 254, 268, 284, 299, 305, 336, 364, 366, 367, 373, 397, 415, 444, 446, 451, 454, 455, 458, 459, 461, 464, 465, 466, 469, 471, 472, 492, 510, 512, 518, 558, 594, 608, 618, 636, 644, 653, 654, 659, 664, 667, 676, 692, 701, 717, 732, 738, 763, 772, 804, 806, 807, 814, 815, 831, 835, 854, 858, 861, 873, 879, 881, 885, 888, 889, 891, 894, 895, 896, 899, 905, 906, 927, 945, 947, 975, 979, 987, 995], "dd": [30, 254], "mm": [30, 254], "yyyi": [30, 254], "00": [30, 73, 125, 130, 159, 174, 227, 254, 334, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 510, 512, 514, 556, 626, 632, 692, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 808, 809, 810, 811, 812, 945, 947, 949], "dtype": [30, 66, 74, 89, 91, 93, 95, 96, 100, 102, 103, 113, 122, 123, 124, 125, 127, 131, 134, 159, 160, 174, 216, 217, 218, 254, 268, 270, 271, 272, 273, 274, 275, 278, 281, 282, 283, 292, 304, 315, 318, 319, 320, 321, 322, 327, 328, 340, 343, 347, 349, 351, 356, 363, 371, 378, 380, 418, 420, 422, 453, 454, 458, 459, 460, 461, 462, 464, 465, 466, 473, 476, 477, 484, 493, 504, 510, 521, 523, 525, 526, 527, 532, 533, 539, 541, 549, 558, 562, 566, 567, 582, 594, 626, 627, 632, 692, 714, 715, 716, 725, 737, 746, 751, 752, 753, 754, 760, 761, 764, 765, 776, 779, 786, 788, 791, 796, 803, 811, 815, 820, 838, 844, 851, 861, 862, 886, 900, 907, 919, 928, 939, 945, 957, 967, 969, 970, 971, 975, 987, 995], "overridden": [30, 89, 91, 93, 95, 129, 254, 692], "basi": [30, 125, 254], "param": [30, 89, 91, 92, 93, 95, 102, 103, 113, 124, 125, 127, 196, 254, 692], "It": [30, 135, 181, 187, 236, 254, 268, 314, 430, 594, 636, 641, 676, 692, 901, 902, 987], "also": [30, 73, 92, 113, 123, 124, 125, 126, 127, 145, 158, 159, 160, 181, 184, 200, 207, 231, 254, 325, 328, 360, 396, 397, 451, 458, 459, 460, 461, 462, 464, 465, 466, 481, 551, 552, 560, 562, 575, 587, 593, 594, 599, 625, 626, 627, 641, 651, 659, 670, 671, 692, 800, 835, 881, 987], "group": [30, 34, 103, 158, 159, 160, 172, 184, 186, 188, 225, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 262, 268, 287, 386, 444, 480, 481, 485, 491, 492, 500, 523, 539, 594, 625, 626, 627, 657, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692, 720, 920, 926, 927, 935], "float_dtyp": [30, 254], "simplifi": [30, 70, 254, 612, 617, 619, 645, 655, 656, 657, 692], "uniform": [30, 254], "condit": [30, 68, 144, 151, 196, 254, 489, 508, 560, 587, 615, 622, 692], "suppli": [30, 89, 91, 92, 93, 95, 196, 254, 446, 594, 692], "typenam": [30, 254], "3_color_scal": [30, 254], "data_bar": [30, 254], "make": [30, 55, 71, 89, 94, 102, 103, 104, 107, 111, 115, 117, 159, 160, 181, 184, 191, 227, 254, 376, 377, 422, 454, 506, 516, 594, 626, 627, 641, 692, 817, 818, 831, 862, 941, 951, 987, 995], "icon": [30, 254], "multipl": [30, 52, 70, 71, 102, 103, 113, 115, 116, 117, 123, 127, 136, 142, 146, 148, 151, 158, 159, 164, 172, 186, 188, 200, 201, 207, 221, 231, 234, 254, 304, 427, 431, 436, 437, 444, 455, 458, 459, 460, 461, 462, 464, 465, 466, 481, 537, 538, 542, 545, 551, 552, 553, 560, 567, 568, 571, 575, 583, 587, 594, 608, 614, 622, 625, 626, 651, 652, 659, 664, 670, 674, 692, 700, 737, 815, 867, 885, 987], "singl": [30, 63, 71, 102, 103, 104, 111, 113, 123, 142, 143, 144, 148, 155, 170, 186, 196, 207, 254, 268, 285, 304, 357, 384, 420, 452, 455, 481, 484, 535, 537, 538, 539, 542, 545, 546, 547, 553, 567, 568, 571, 576, 583, 594, 614, 615, 659, 692, 700, 718, 737, 797, 882, 885, 919, 964, 987], "across": [30, 63, 254, 537, 538, 553, 568, 571, 583], "effect": [30, 134, 153, 254, 268, 594, 672, 692], "heatmap": [30, 254], "min": [30, 34, 130, 141, 150, 159, 160, 188, 254, 318, 320, 326, 383, 444, 451, 461, 579, 594, 621, 626, 627, 657, 692, 752, 754, 759, 764, 823, 881, 891, 987, 995], "entir": [30, 254], "final": [30, 63, 117, 254, 375, 376, 377, 594, 619, 692, 816, 817, 818, 987], "made": [30, 130, 254, 969, 987], "up": [30, 55, 104, 171, 174, 197, 214, 254, 268, 317, 516, 594, 631, 632, 636, 692, 749, 951, 987], "abov": [30, 254, 368, 587], "order": [30, 51, 63, 92, 120, 135, 136, 158, 159, 160, 186, 187, 188, 198, 201, 207, 221, 223, 227, 254, 268, 278, 301, 306, 316, 451, 468, 469, 470, 480, 481, 518, 530, 531, 542, 594, 608, 625, 626, 627, 640, 652, 656, 657, 659, 664, 665, 692, 701, 710, 734, 739, 748, 763, 850, 879, 881, 886, 898, 899, 903, 915, 954, 973, 974, 987], "than": [30, 73, 88, 93, 95, 102, 103, 113, 118, 125, 127, 135, 157, 158, 171, 174, 186, 196, 197, 198, 225, 236, 254, 268, 390, 391, 409, 412, 419, 468, 478, 496, 502, 507, 516, 548, 580, 583, 594, 625, 632, 656, 657, 676, 692, 701, 898, 913, 931, 937, 942, 951, 987, 995], "total": [30, 146, 254, 815, 987], "export": [30, 171, 172, 197, 214, 217, 254], "numer": [30, 174, 254, 261, 318, 319, 320, 388, 397, 417, 435, 437, 447, 454, 473, 519, 529, 594, 605, 632, 692, 752, 753, 754, 764, 835, 849, 900, 907, 987, 995], "associ": [30, 63, 124, 254], "sum": [30, 63, 146, 153, 158, 160, 170, 188, 234, 254, 268, 305, 327, 328, 373, 384, 458, 459, 461, 464, 465, 466, 535, 537, 551, 553, 560, 575, 594, 612, 617, 619, 625, 627, 643, 645, 655, 674, 692, 760, 761, 814, 815, 888, 889, 891, 894, 895, 896, 987], "pass": [30, 34, 63, 73, 91, 106, 113, 123, 125, 127, 136, 140, 142, 158, 159, 160, 162, 176, 186, 187, 200, 207, 210, 221, 227, 231, 234, 254, 268, 341, 360, 381, 395, 444, 446, 481, 497, 503, 509, 537, 538, 542, 545, 553, 562, 568, 571, 582, 583, 594, 608, 614, 625, 626, 627, 629, 636, 644, 651, 655, 659, 664, 670, 674, 692, 701, 777, 800, 821, 830, 857, 932, 938, 944, 958, 987], "must": [30, 72, 90, 91, 105, 114, 141, 147, 159, 160, 174, 181, 196, 254, 305, 420, 458, 459, 460, 461, 462, 464, 465, 466, 594, 618, 626, 627, 632, 636, 641, 692, 763, 764, 879, 987], "funcnam": [30, 254], "averag": [30, 254, 375, 376, 377, 451, 594, 816, 817, 818, 881, 987], "count_num": [30, 254], "count": [30, 102, 103, 107, 111, 113, 115, 116, 117, 141, 159, 160, 174, 184, 185, 188, 222, 226, 227, 232, 236, 245, 254, 269, 285, 324, 357, 413, 438, 442, 458, 459, 460, 461, 462, 464, 465, 466, 486, 531, 533, 540, 572, 594, 626, 627, 632, 643, 667, 672, 676, 685, 692, 718, 764, 797, 831, 869, 874, 921, 974, 976, 987], "std_dev": [30, 254], "var": [30, 128, 254, 594, 692, 987], "pixel": [30, 254], "unit": [30, 37, 39, 73, 125, 127, 146, 254, 334, 335, 341, 366, 371, 418, 431, 510, 512, 532, 562, 594, 645, 692, 770, 771, 777, 806, 811, 815, 861, 945, 947, 975, 987, 995], "hand": [30, 102, 103, 113, 254], "side": [30, 159, 160, 254, 397, 458, 459, 460, 461, 462, 464, 465, 466, 469, 594, 626, 627, 692, 835, 899, 987], "call": [30, 103, 125, 127, 132, 135, 158, 159, 160, 175, 253, 254, 268, 325, 328, 568, 571, 594, 606, 625, 626, 627, 691, 692, 701, 987], "ad": [30, 92, 134, 159, 222, 231, 254, 267, 381, 551, 552, 594, 626, 670, 692, 821, 987], "end": [30, 73, 102, 103, 111, 113, 130, 159, 254, 300, 311, 357, 361, 362, 378, 397, 485, 489, 492, 504, 508, 541, 545, 558, 587, 594, 626, 628, 635, 645, 692, 733, 743, 797, 801, 835, 924, 927, 939, 943, 987], "wise": [30, 63, 153, 254, 270, 271, 272, 273, 274, 275, 321, 322, 379, 416, 475, 476, 477, 525, 526, 551, 552, 560, 568, 571, 575, 594, 702, 703, 704, 705, 706, 707, 756, 757, 819, 859, 860, 910, 911, 912, 961, 962, 987], "particip": [30, 254], "distinct": [30, 127, 186, 254, 306, 451, 556, 594, 739, 881, 987, 995], "referenc": [30, 254, 518], "differ": [30, 102, 118, 120, 148, 159, 160, 171, 197, 214, 222, 254, 286, 330, 339, 357, 358, 360, 369, 422, 439, 440, 510, 531, 559, 562, 594, 617, 626, 627, 692, 700, 701, 719, 765, 775, 797, 798, 800, 809, 871, 872, 900, 945, 987], "row_index": [30, 254], "height": [30, 144, 254], "provid": [30, 52, 102, 103, 104, 105, 113, 114, 125, 127, 170, 254, 305, 309, 310, 487, 488, 491, 493, 494, 562, 605, 656, 657, 692, 741, 742, 831, 854, 922, 923, 926, 928, 929, 987, 995], "intersect": [30, 254], "bodi": [30, 254], "start": [30, 73, 101, 102, 103, 107, 111, 113, 115, 116, 117, 129, 130, 158, 159, 175, 206, 227, 232, 254, 300, 312, 339, 341, 342, 344, 345, 350, 352, 358, 359, 361, 362, 366, 368, 369, 370, 372, 378, 397, 479, 485, 489, 492, 504, 508, 541, 545, 551, 558, 560, 587, 594, 625, 626, 645, 658, 672, 692, 733, 744, 770, 772, 775, 777, 778, 780, 785, 787, 790, 792, 795, 798, 799, 801, 802, 806, 808, 809, 810, 811, 812, 835, 914, 924, 927, 939, 943, 987, 995], "zero": [30, 89, 90, 101, 102, 103, 107, 111, 124, 134, 137, 150, 171, 196, 212, 217, 218, 254, 305, 382, 383, 417, 469, 478, 516, 529, 594, 610, 621, 692, 738, 751, 823, 913, 951, 964, 969, 970, 987], "unless": [30, 63, 91, 218, 254, 692, 970, 978, 987], "marker": [30, 254], "compliant": [30, 254], "case": [30, 63, 89, 91, 92, 93, 95, 117, 129, 135, 148, 159, 160, 171, 254, 420, 421, 430, 431, 485, 492, 500, 594, 626, 627, 692, 700, 920, 927, 935, 987], "three": [30, 220, 254, 305, 469, 594, 738], "avail": [30, 99, 105, 114, 123, 132, 253, 254, 451, 588, 590, 593, 594, 595, 596, 599, 600, 601, 602, 605, 606, 619, 691, 692, 881, 981, 983, 987, 988, 991, 992, 993], "insert_befor": [30, 254], "insert_aft": [30, 254], "respect": [30, 254], "direct": [30, 104, 111, 117, 225, 254], "far": [30, 254], "thei": [30, 92, 113, 120, 132, 175, 254, 457, 594, 887, 987], "strongli": [30, 129, 135, 196, 236, 254, 268, 594, 676, 701, 987], "advis": [30, 175, 254, 314, 594], "structur": [30, 80, 84, 86, 148, 187, 217, 254, 446, 594, 644, 692, 700, 987], "your": [30, 63, 102, 103, 120, 121, 135, 171, 200, 231, 234, 254, 268, 314, 594, 612, 628, 635, 636, 651, 670, 674, 692, 701, 987, 995], "wherev": [30, 135, 236, 254, 268, 594, 676, 701, 987], "possibl": [30, 102, 135, 158, 171, 197, 223, 236, 254, 268, 418, 430, 507, 532, 594, 625, 665, 676, 692, 701, 942, 987], "simpl": [30, 127, 184, 254], "colx": [30, 254, 995], "coli": [30, 254, 995], "after": [30, 71, 92, 101, 102, 103, 107, 111, 113, 115, 116, 117, 148, 224, 253, 254, 378, 422, 451, 516, 594, 666, 692, 700, 862, 881, 951, 987], "befor": [30, 102, 113, 129, 132, 148, 159, 174, 224, 254, 327, 328, 329, 422, 445, 457, 458, 459, 460, 461, 462, 464, 465, 466, 516, 521, 577, 578, 594, 626, 629, 632, 666, 692, 700, 760, 761, 762, 862, 875, 887, 888, 889, 890, 891, 892, 894, 895, 896, 951, 957, 987], "most": [30, 51, 89, 102, 103, 113, 254, 431, 436, 445, 507, 533, 594, 867, 875, 942, 976, 987], "mandatori": [30, 254], "return_dtyp": [30, 135, 254, 268, 420, 422, 539, 567, 594, 701, 862, 987], "latter": [30, 148, 254, 700, 987], "appropri": [30, 254, 451, 594, 881, 987], "pure": [30, 254], "actual": [30, 92, 106, 125, 127, 254, 314, 594, 908, 987], "indic": [30, 68, 97, 101, 102, 103, 107, 111, 113, 122, 123, 127, 159, 160, 174, 201, 215, 227, 254, 279, 304, 357, 361, 368, 399, 402, 403, 405, 406, 407, 426, 429, 458, 459, 460, 461, 462, 464, 465, 466, 469, 475, 523, 542, 594, 626, 627, 632, 652, 692, 737, 797, 801, 808, 839, 843, 845, 846, 847, 848, 899, 910, 959, 965, 987, 995], "calcul": [30, 63, 159, 208, 228, 254, 286, 330, 375, 376, 377, 410, 418, 463, 478, 483, 532, 534, 537, 539, 548, 573, 577, 578, 580, 581, 586, 594, 626, 660, 668, 692, 719, 765, 816, 817, 818, 855, 893, 913, 917, 977, 987], "individu": [30, 125, 160, 217, 254, 268, 492, 594, 627, 657, 692, 750, 927, 987], "gridlin": [30, 254], "zoom": [30, 254], "level": [30, 34, 113, 115, 116, 117, 125, 135, 153, 184, 254, 384, 594, 628, 635, 657, 692], "definit": [30, 123, 254, 410, 594, 855, 987], "take": [30, 125, 132, 153, 181, 187, 211, 254, 357, 481, 524, 557, 559, 594, 641, 663, 692, 797, 960, 979, 987], "care": [30, 254, 268, 470, 594, 903, 987], "rel": [30, 105, 114, 120, 121, 254, 357, 375, 376, 377, 594, 797, 816, 817, 818, 987], "readthedoc": [30, 254], "io": [30, 254], "working_with_conditional_format": [30, 254], "html": [30, 90, 104, 134, 140, 254], "similarli": [30, 92, 254], "well": [30, 102, 103, 113, 147, 188, 254, 397, 594, 618, 692, 835, 987], "adjac": [30, 254], "two": [30, 91, 93, 95, 104, 130, 153, 180, 181, 188, 220, 235, 236, 254, 262, 305, 331, 335, 480, 523, 548, 550, 573, 577, 578, 580, 594, 640, 641, 675, 676, 692, 738, 766, 771, 987], "help": [30, 254, 619, 692], "where": [30, 63, 68, 104, 124, 144, 148, 171, 180, 197, 208, 228, 254, 279, 370, 373, 469, 478, 481, 483, 534, 548, 573, 577, 578, 580, 581, 586, 587, 594, 640, 660, 668, 692, 700, 711, 810, 814, 899, 913, 917, 977, 979, 987], "appear": [30, 92, 120, 254, 531, 594, 974, 987], "working_with_sparklin": [30, 254], "inject": [30, 63, 254], "locat": [30, 148, 194, 219, 224, 254, 469, 594, 666, 692, 700, 899, 902, 959, 987], "syntax": [30, 135, 184, 254, 485, 491, 492, 500, 655, 692, 920, 926, 927, 935, 987], "ensur": [30, 74, 124, 125, 127, 158, 186, 196, 254, 397, 533, 594, 625, 636, 692, 969, 976, 987], "correctli": [30, 254], "microsoft": [30, 119, 254], "com": [30, 104, 254, 375, 376, 377, 491, 492, 594, 816, 817, 818, 926, 927, 987], "u": [30, 37, 39, 73, 96, 171, 197, 214, 254, 334, 335, 341, 366, 371, 510, 512, 562, 770, 771, 777, 806, 811, 945, 947], "offic": [30, 254], "f5ed2452": [30, 254], "2337": [30, 254], "4f71": [30, 254], "bed3": [30, 254], "c8ae6d2b276": [30, 254], "random": [30, 123, 125, 127, 161, 198, 254, 392, 451, 468, 474, 594, 829, 881, 898, 909, 987], "date": [30, 37, 63, 73, 102, 103, 104, 113, 118, 125, 141, 157, 159, 160, 172, 174, 227, 254, 284, 285, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 458, 459, 460, 461, 462, 464, 465, 466, 510, 511, 527, 562, 566, 576, 585, 594, 626, 627, 632, 692, 717, 718, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 851, 871, 872, 902, 945, 946, 971, 987], "dtm": [30, 254, 335, 771], "2023": [30, 96, 119, 172, 254, 335, 566, 771], "num": [30, 220, 254, 397, 400, 516, 594, 835, 987], "500": [30, 171, 226, 254, 619, 667, 692, 785, 787, 795, 802, 888, 889, 891, 987], "val": [30, 195, 254, 316, 446, 527, 587, 594, 649, 692, 748], "10_000": [30, 254], "20_000": [30, 254], "30_000": [30, 254], "increas": [30, 63, 102, 111, 254, 329, 594, 762, 987], "b4": [30, 254], "light": [30, 254], "twice": [30, 106, 254], "each": [30, 63, 103, 116, 120, 121, 123, 135, 157, 158, 159, 160, 172, 174, 186, 218, 224, 227, 233, 234, 236, 237, 239, 248, 254, 268, 291, 303, 357, 361, 368, 417, 451, 481, 492, 506, 507, 539, 542, 547, 582, 594, 626, 627, 632, 645, 666, 674, 676, 677, 679, 688, 692, 724, 736, 750, 797, 801, 808, 881, 927, 941, 942, 956, 987, 995], "titl": [30, 254], "explicit": [30, 113, 123, 254, 541, 575], "integr": [30, 254, 995], "multi_fram": [30, 254], "wb": [30, 254], "coordin": [30, 254], "advanc": [30, 254, 305, 738, 995], "min_color": [30, 254], "76933c": [30, 254], "mid_color": [30, 254], "c4d79b": [30, 254], "max_color": [30, 254], "ebf1d": [30, 254], "data_bar_2010": [30, 254], "bar_color": [30, 254], "9bbb59": [30, 254], "bar_negative_color_sam": [30, 254], "bar_negative_border_color_sam": [30, 254], "000": [30, 254, 995], "white": [30, 254], "w": [30, 51, 254, 491, 926], "get_worksheet_by_nam": [30, 254], "fmt_titl": [30, 254], "add_format": [30, 254], "font_color": [30, 254], "4f6228": [30, 254], "font_siz": [30, 254], "12": [30, 63, 72, 73, 96, 124, 125, 130, 159, 160, 174, 227, 254, 327, 335, 342, 345, 352, 353, 354, 359, 361, 368, 372, 445, 473, 552, 554, 555, 567, 594, 626, 627, 628, 632, 635, 655, 662, 692, 701, 763, 771, 792, 801, 808, 897, 987, 995], "ital": [30, 254], "bold": [30, 254], "customis": [30, 254], "trend": [30, 254], "win_loss": [30, 254], "subtl": [30, 254], "tone": [30, 254], "hidden": [30, 254], "id": [30, 71, 236, 254, 500, 501, 531, 533, 594, 676, 974, 987, 995], "q1": [30, 254], "55": [30, 65, 254], "20": [30, 125, 130, 148, 164, 165, 187, 189, 193, 194, 254, 276, 277, 278, 330, 361, 368, 392, 396, 446, 562, 566, 594, 644, 692, 765, 808, 987], "35": [30, 119, 254, 330, 594, 765, 987], "q2": [30, 254], "30": [30, 72, 130, 148, 159, 164, 187, 193, 194, 213, 231, 254, 276, 277, 278, 330, 335, 340, 345, 353, 359, 360, 361, 368, 372, 392, 473, 566, 594, 626, 644, 670, 692, 763, 765, 771, 776, 793, 800, 801, 808, 987, 995], "15": [30, 119, 124, 130, 135, 159, 160, 165, 254, 329, 330, 354, 361, 368, 446, 552, 594, 626, 627, 692, 762, 765, 801, 808, 987], "60": [30, 148, 254, 362, 363, 510, 798, 802, 803, 945], "q3": [30, 254], "40": [30, 148, 187, 254, 361, 368, 392, 594, 644, 692, 781, 808], "80": [30, 254], "q4": [30, 254], "75": [30, 141, 254, 265, 443, 594, 764, 831, 879, 987, 995], "account": [30, 96, 254, 357, 375, 376, 377, 594, 797, 816, 817, 818, 987], "flavour": [30, 254], "integer_dtyp": [30, 200, 254, 651, 692], "0_": [30, 254], "just": [30, 104, 113, 180, 254, 640, 692], "unifi": [30, 254], "multi": [30, 102, 103, 254, 378, 491, 568, 571, 594, 926], "2_color_scal": [30, 254], "95b3d7": [30, 254], "ffffff": [30, 254], "base": [30, 35, 144, 151, 159, 160, 254, 373, 375, 376, 377, 415, 416, 499, 594, 615, 622, 626, 627, 692, 814, 816, 817, 818, 831, 858, 859, 879, 934, 979, 987, 995], "standardis": [30, 254], "z": [30, 51, 71, 96, 123, 125, 146, 167, 169, 173, 180, 254, 261, 265, 283, 316, 392, 443, 454, 492, 510, 512, 594, 631, 640, 658, 692, 748, 823, 927, 945, 947, 987], "score": [30, 254], "conjunct": [30, 106, 254], "a123": [30, 254], "b345": [30, 254], "c567": [30, 254], "d789": [30, 254], "e101": [30, 254], "45": [30, 130, 160, 254, 335, 361, 368, 486, 492, 566, 627, 692, 771, 801, 808, 921, 927, 995], "85": [30, 254, 995], "font": [30, 254], "consola": [30, 254], "standard": [30, 119, 208, 217, 254, 345, 376, 464, 478, 483, 494, 581, 594, 660, 692, 781, 817, 913, 917, 929, 987, 995], "stdev": [30, 254], "ipccompress": [31, 254], "arrow": [31, 75, 89, 104, 107, 115, 212, 254, 656, 692, 964, 969, 987], "ipc": [31, 107, 108, 115, 118, 254, 605], "binari": [31, 254, 308, 310, 311, 312, 538, 740, 742, 743, 744], "feather": [31, 107, 115, 254, 605], "lz4": [31, 34, 254, 656, 657, 692], "zstd": [31, 34, 254, 656, 657, 692], "pretti": [32, 254], "row_ori": [32, 254], "iobas": [32, 33, 109, 110, 254, 647, 673, 692], "serial": [32, 33, 254], "represent": [32, 33, 216, 254, 316, 339, 342, 345, 346, 348, 350, 352, 355, 358, 359, 362, 369, 370, 372, 527, 594, 617, 634, 692, 748, 775, 778, 780, 781, 785, 787, 790, 792, 795, 798, 799, 802, 809, 810, 812, 967, 971, 987], "orient": [32, 64, 66, 93, 95, 254, 692], "slower": [32, 93, 95, 135, 158, 186, 227, 236, 254, 625, 676, 692, 701, 987], "common": [32, 63, 71, 254, 599], "write_ndjson": [32, 254], "newlin": [33, 110, 116, 254], "delimit": [33, 97, 102, 103, 110, 113, 116, 188, 215, 254, 484, 919, 965, 987], "parquetcompress": [34, 254], "compression_level": [34, 254, 657, 692], "statist": [34, 102, 103, 111, 117, 141, 254, 376, 377, 410, 458, 459, 460, 461, 462, 463, 464, 465, 466, 478, 594, 657, 692, 764, 817, 818, 855, 893, 913, 987], "row_group_s": [34, 254, 657, 692], "use_pyarrow": [34, 102, 107, 111, 254, 657, 692, 968, 969, 987], "pyarrow_opt": [34, 105, 111, 114, 254], "parquet": [34, 111, 112, 117, 254, 605, 657, 692], "gzip": [34, 254, 657, 692], "lzo": [34, 254, 657, 692], "brotli": [34, 254, 657, 692], "choos": [34, 254, 656, 657, 692], "good": [34, 171, 254, 656, 657, 692], "perform": [34, 63, 80, 90, 102, 103, 107, 111, 113, 115, 116, 117, 134, 135, 159, 160, 174, 191, 236, 254, 268, 314, 444, 594, 626, 627, 632, 656, 657, 672, 676, 692, 701, 987], "fast": [34, 126, 128, 254, 381, 470, 594, 656, 657, 692, 821, 903, 987, 995], "decompress": [34, 254, 656, 657, 692], "backward": [34, 150, 174, 254, 307, 354, 383, 594, 621, 632, 657, 692, 794, 823, 987], "guarante": [34, 90, 102, 103, 223, 254, 619, 657, 665, 692], "deal": [34, 171, 254, 360, 451, 510, 594, 657, 692, 800, 881, 945, 987], "older": [34, 254, 657, 692], "reader": [34, 99, 102, 103, 107, 111, 254, 606, 657, 692], "higher": [34, 190, 246, 254, 450, 462, 574, 594, 646, 657, 686, 692, 880, 892, 987], "mean": [34, 102, 103, 107, 111, 113, 141, 150, 158, 188, 234, 254, 380, 383, 459, 478, 491, 543, 594, 621, 625, 636, 657, 674, 692, 764, 820, 823, 828, 889, 913, 926, 987], "smaller": [34, 146, 254, 619, 657, 692, 815, 987], "disk": [34, 107, 254, 655, 656, 657, 692], "11": [34, 119, 125, 160, 254, 332, 333, 345, 353, 354, 357, 361, 368, 396, 445, 465, 479, 516, 536, 545, 583, 594, 612, 627, 628, 635, 645, 657, 662, 692, 701, 797, 801, 808, 887, 987], "22": [34, 124, 254, 361, 368, 371, 510, 545, 657, 692, 801, 808, 811, 945, 995], "comput": [34, 70, 71, 77, 146, 158, 174, 218, 223, 234, 246, 254, 260, 270, 271, 272, 273, 274, 275, 295, 296, 297, 321, 322, 324, 325, 326, 327, 328, 331, 373, 379, 410, 415, 416, 417, 436, 444, 445, 449, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 475, 476, 477, 478, 482, 525, 526, 537, 538, 542, 548, 550, 553, 557, 568, 571, 573, 577, 578, 580, 583, 594, 625, 629, 631, 632, 657, 665, 671, 674, 686, 692, 696, 702, 703, 704, 705, 706, 707, 728, 729, 730, 756, 757, 758, 759, 760, 761, 766, 814, 815, 819, 855, 858, 859, 860, 867, 875, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 910, 911, 912, 913, 916, 961, 962, 970, 987], "512": [34, 254, 447, 594, 875, 987], "implement": [34, 90, 134, 135, 236, 254, 268, 594, 676, 701, 901, 902, 987], "v": [34, 51, 72, 146, 254, 469, 594, 763, 899, 987], "At": [34, 254], "moment": [34, 140, 254, 410, 478, 594, 855, 913, 987], "pyarrow": [34, 89, 94, 102, 105, 107, 111, 114, 118, 119, 172, 212, 217, 218, 254, 606, 964, 968, 969, 970, 987], "write_t": [34, 254], "calendar": [36, 37, 159, 160, 174, 227, 254, 345, 357, 361, 368, 372, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 627, 632, 692, 781, 797, 801, 808, 812], "time_unit": [37, 39, 73, 96, 334, 335, 341, 366, 371, 512, 562, 770, 771, 777, 806, 811, 947], "time_zon": [37, 73, 96, 336, 360, 512, 772, 800, 947], "timezon": [37, 73], "m": [37, 39, 73, 334, 335, 341, 364, 366, 367, 371, 491, 510, 511, 512, 514, 562, 770, 771, 777, 804, 806, 807, 811, 926, 945, 946, 947, 949], "zone": [37, 73, 336, 360, 510, 512, 772, 800, 945, 947], "zoneinfo": 37, "run": [37, 70, 126, 128, 135, 158, 175, 188, 223, 236, 254, 268, 287, 329, 579, 594, 612, 617, 619, 625, 636, 640, 645, 655, 656, 657, 665, 676, 692, 701, 720, 762, 987, 994, 995], "available_timezon": 37, "128": [38, 65, 875, 987], "bit": [38, 40, 41, 42, 43, 44, 45, 57, 58, 59, 60, 453, 485, 594, 883, 920, 987], "neg": [38, 159, 162, 176, 203, 204, 206, 210, 254, 299, 300, 446, 471, 472, 479, 504, 594, 626, 653, 654, 658, 672, 692, 732, 733, 830, 857, 905, 906, 914, 939, 958, 987], "scale": [38, 146, 254, 446, 594, 815, 987], "experiment": [38, 72, 118, 200, 225, 226, 231, 254, 329, 361, 458, 459, 460, 461, 462, 464, 465, 466, 594, 651, 667, 670, 692, 762, 801, 831, 879, 987], "progress": 38, "expect": [38, 81, 83, 88, 268, 539, 566, 594, 634, 636, 692, 879, 987], "32": [40, 43, 58, 65, 160, 170, 254, 437, 473, 594, 627, 692, 766, 798, 875, 892, 987], "sign": [42, 43, 44, 45, 357, 453, 516, 594, 797, 844, 883, 951, 987], "inner": [46, 54, 74, 124, 173, 226, 254, 292, 331, 527, 594, 631, 667, 673, 692, 725, 766, 971, 987], "polarsdatatyp": [46, 100, 102, 103, 108, 112, 113, 122, 123, 124, 125, 127, 131, 135, 145, 254, 268, 315, 378, 420, 422, 493, 539, 541, 545, 558, 566, 567, 594, 616, 692, 701, 746, 862, 928, 987], "pythondatatyp": 46, "nest": [46, 54, 96, 146, 254, 605, 815, 987, 995], "arrai": [46, 89, 93, 102, 103, 111, 146, 212, 217, 218, 254, 283, 294, 295, 296, 297, 298, 301, 302, 310, 318, 319, 320, 324, 325, 326, 327, 328, 416, 458, 459, 461, 464, 465, 466, 470, 486, 488, 491, 494, 557, 594, 692, 716, 727, 728, 729, 730, 731, 734, 735, 742, 752, 753, 754, 758, 759, 760, 761, 766, 815, 859, 860, 888, 889, 891, 894, 895, 896, 903, 908, 921, 923, 926, 929, 964, 969, 970, 978, 987], "within": [46, 120, 121, 159, 160, 174, 227, 254, 481, 594, 626, 627, 632, 692], "wrap": [48, 96, 397, 594], "arbitrari": [48, 125], "python": [48, 73, 102, 103, 119, 130, 135, 171, 197, 214, 236, 254, 268, 335, 420, 539, 587, 594, 599, 676, 701, 771, 782, 783, 784, 789, 968, 987], "queri": [49, 70, 104, 107, 113, 115, 116, 117, 148, 175, 187, 254, 422, 494, 594, 612, 617, 619, 628, 635, 645, 655, 672, 676, 692, 700, 929, 987, 994], "eager": [49, 68, 73, 130, 159, 225, 254, 334, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 366, 368, 369, 370, 371, 372, 541, 562, 576, 582, 593, 605, 626, 692, 770, 772, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 808, 809, 810, 811, 812], "pars": [49, 102, 103, 106, 113, 115, 116, 136, 158, 200, 207, 221, 231, 234, 254, 397, 444, 481, 493, 499, 510, 512, 537, 538, 542, 544, 546, 547, 553, 562, 568, 571, 582, 583, 594, 608, 625, 651, 659, 664, 670, 674, 692, 835, 928, 934, 945, 947, 987], "against": [49, 287, 692, 720, 994, 995], "eagerli": [49, 305], "unset": [49, 124, 305, 360, 800], "init": [49, 132], "eager_execut": 49, "under": [50, 64, 65, 66, 67, 588, 590, 595, 596, 600, 601, 602, 981, 983, 988, 991, 992, 993], "present": [51, 92, 120, 125, 401, 594, 978, 987], "global": [51, 54, 74, 125, 422, 594], "scope": [51, 132], "automat": [51, 89, 91, 92, 93, 95, 96, 102, 103, 104, 113, 125, 127, 129, 200, 231, 254, 422, 497, 503, 509, 510, 594, 651, 670, 692, 862, 932, 938, 944, 945, 987], "map": [51, 52, 91, 92, 102, 103, 107, 108, 111, 112, 113, 115, 135, 145, 171, 192, 196, 197, 213, 254, 361, 368, 421, 422, 533, 539, 594, 616, 648, 692, 801, 808, 862, 987], "recent": [51, 445, 594, 875, 987], "lf1": 51, "x": [51, 63, 71, 96, 102, 103, 104, 113, 123, 125, 146, 164, 167, 169, 173, 180, 188, 254, 261, 265, 268, 283, 292, 374, 388, 390, 391, 392, 412, 417, 419, 420, 435, 437, 441, 443, 447, 454, 475, 478, 506, 519, 527, 529, 536, 539, 551, 552, 560, 566, 567, 575, 594, 631, 636, 640, 658, 692, 697, 701, 823, 853, 910, 913, 941, 971, 987], "lf2": [51, 692], "t": [51, 71, 106, 113, 135, 187, 223, 225, 254, 268, 287, 329, 360, 373, 375, 376, 377, 446, 491, 497, 503, 509, 510, 512, 539, 587, 594, 644, 665, 692, 701, 720, 762, 800, 814, 816, 817, 818, 900, 926, 932, 938, 944, 945, 947, 978, 987], "execut": [51, 71, 175, 254, 287, 314, 594, 609, 636, 645, 692, 720], "join": [51, 54, 63, 70, 71, 74, 174, 226, 254, 396, 444, 594, 612, 617, 619, 632, 645, 655, 667, 671, 692], "BY": 51, "desc": 51, "collect": [51, 53, 66, 70, 113, 114, 118, 125, 127, 130, 175, 212, 254, 268, 401, 541, 546, 562, 582, 594, 608, 614, 615, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 635, 636, 637, 638, 639, 640, 642, 643, 644, 646, 648, 649, 651, 653, 654, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 670, 671, 672, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 692, 842, 987, 995], "named_fram": 52, "context": [54, 129, 130, 184, 237, 254, 262, 268, 287, 314, 323, 384, 430, 480, 481, 533, 539, 549, 559, 562, 579, 593, 594, 605, 671, 677, 692, 720], "manag": [54, 605], "temporarili": [54, 129, 159, 160, 254, 626, 627, 692], "cach": [54, 70, 74, 107, 113, 115, 117, 422, 458, 459, 460, 461, 462, 464, 465, 466, 510, 511, 512, 514, 594, 612, 617, 619, 645, 655, 692, 945, 946, 947, 949], "categori": [54, 72, 74, 316, 748, 763, 831, 879, 987], "until": [54, 175, 254, 314, 594], "finish": [54, 77, 148, 254, 700, 987], "invalid": [54, 102, 103, 113, 493, 494, 499, 529, 594, 928, 929, 934], "outermost": 54, "exit": [54, 132], "df1": [54, 63, 71, 74, 120, 148, 154, 218, 229, 254], "color": [54, 74, 236, 676], "red": [54, 74, 236, 676], "green": [54, 74, 236, 676], "blue": [54, 74], "orang": [54, 74, 139, 237, 238, 240, 241, 242, 244, 246, 247, 254, 677, 678, 680, 681, 682, 684, 686, 687], "uint8": [54, 74, 122, 124, 216, 217, 254, 327, 328, 422, 521, 536, 594, 760, 761, 957, 987, 995], "df2": [54, 63, 71, 74, 120, 148, 154, 218, 229, 254], "yellow": [54, 74], "black": [54, 74, 135, 254], "succe": [54, 102, 103, 113], "df_join": [54, 74], "cat": [54, 72, 74, 216, 254, 485, 513, 515, 527, 547, 590, 594, 763, 831, 879, 920, 983, 987], "u8": [54, 74, 97, 215, 216, 254, 422, 536, 594, 965, 987, 995], "schemadict": [55, 89, 91, 92, 93, 94, 95, 113, 199, 254, 582, 636, 650, 676, 692], "composit": [55, 124, 995], "dai": [56, 73, 159, 160, 172, 174, 227, 254, 341, 345, 352, 353, 354, 357, 358, 359, 361, 366, 368, 369, 370, 372, 458, 459, 460, 461, 462, 464, 465, 466, 554, 555, 556, 594, 626, 627, 632, 692, 793, 794, 797, 798, 801, 808, 810], "unsign": [57, 58, 59, 60, 453, 594, 844, 883, 987], "could": [61, 77, 144, 159, 254, 315, 551, 560, 594, 615, 626, 692, 746, 987], "static": [61, 676], "utf": 62, "frametyp": 63, "joinstrategi": [63, 173, 254, 631, 692], "outer": [63, 71, 173, 254, 631, 692], "descend": [63, 136, 201, 207, 221, 254, 278, 301, 451, 470, 480, 481, 542, 594, 608, 652, 659, 664, 692, 710, 734, 850, 881, 903, 915, 987], "fill": [63, 71, 100, 131, 149, 150, 204, 225, 254, 307, 325, 328, 382, 383, 389, 396, 458, 459, 461, 464, 465, 466, 472, 496, 502, 516, 561, 594, 620, 621, 654, 671, 692, 822, 823, 873, 888, 889, 891, 894, 895, 896, 906, 931, 937, 951, 987], "sort": [63, 64, 120, 124, 136, 159, 160, 174, 181, 187, 188, 201, 221, 227, 239, 248, 254, 278, 316, 384, 470, 481, 533, 535, 542, 594, 608, 617, 626, 627, 632, 641, 644, 645, 652, 655, 664, 679, 688, 692, 710, 748, 850, 903, 973, 976, 987, 995], "origin": [63, 102, 103, 223, 254, 360, 409, 422, 444, 453, 486, 491, 492, 494, 496, 502, 516, 594, 665, 692, 763, 800, 862, 879, 921, 926, 927, 929, 931, 937, 951, 987], "In": [63, 100, 105, 114, 117, 125, 127, 131, 135, 146, 148, 159, 160, 184, 254, 268, 594, 626, 627, 692, 700, 815, 882, 987], "duplic": [63, 78, 167, 173, 174, 223, 254, 398, 594, 631, 632, 665, 692, 837, 987], "behaviour": [63, 71, 485, 491, 492, 500, 529, 594, 920, 926, 927, 935], "strategi": [63, 71, 102, 122, 123, 124, 125, 127, 150, 159, 173, 174, 183, 254, 268, 305, 383, 594, 621, 626, 631, 632, 692, 738, 823, 987], "suitabl": [63, 71, 123, 135, 254, 268, 469, 594, 701, 899, 987, 995], "get": [63, 73, 98, 108, 112, 129, 136, 139, 145, 155, 156, 159, 160, 162, 163, 167, 169, 170, 176, 183, 196, 199, 202, 206, 210, 221, 230, 239, 248, 254, 262, 276, 277, 278, 280, 289, 293, 294, 306, 324, 325, 326, 327, 328, 341, 357, 385, 393, 398, 400, 408, 411, 414, 423, 424, 425, 430, 432, 434, 439, 440, 450, 479, 483, 495, 498, 521, 522, 530, 534, 559, 564, 568, 569, 570, 571, 581, 584, 586, 594, 608, 613, 616, 623, 626, 627, 628, 633, 635, 650, 658, 662, 664, 669, 679, 688, 692, 708, 709, 710, 711, 712, 722, 726, 727, 739, 750, 758, 759, 760, 761, 777, 797, 827, 830, 835, 837, 840, 852, 857, 863, 865, 866, 868, 871, 872, 876, 877, 880, 914, 917, 930, 933, 958, 964, 965, 973, 977, 978, 987], "speedup": [63, 135, 171, 254, 268, 594, 701, 987], "receiv": [63, 113, 135, 187, 254, 446, 594, 644, 692, 995], "now": [63, 160, 254, 510, 627, 692, 945], "One": [63, 141, 184, 188, 254, 265, 443, 594, 764, 987], "whose": [63, 174, 188, 254, 378, 558, 594, 632, 692], "uniqu": [63, 122, 123, 124, 127, 169, 184, 245, 254, 269, 280, 400, 408, 438, 510, 511, 512, 514, 531, 533, 540, 572, 594, 685, 692, 712, 764, 840, 852, 869, 945, 946, 947, 949, 974, 976, 987], "post": 63, "constrain": 63, "newli": 63, "boolean": [63, 68, 136, 151, 153, 207, 221, 254, 264, 265, 266, 284, 308, 344, 384, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 443, 481, 493, 535, 536, 542, 582, 594, 608, 622, 659, 664, 692, 698, 699, 711, 717, 740, 780, 824, 835, 836, 837, 839, 840, 842, 843, 845, 846, 847, 848, 852, 876, 877, 901, 920, 979, 987], "know": [63, 305, 498, 933, 969, 978, 987], "first": [63, 102, 103, 106, 113, 116, 124, 135, 157, 159, 162, 174, 176, 183, 187, 188, 210, 216, 222, 223, 227, 239, 254, 278, 280, 287, 290, 291, 305, 329, 354, 357, 361, 393, 400, 414, 422, 446, 469, 481, 491, 493, 494, 500, 501, 544, 551, 560, 564, 587, 594, 612, 626, 628, 632, 635, 644, 665, 671, 679, 692, 710, 720, 723, 724, 738, 762, 764, 794, 797, 801, 830, 840, 857, 862, 899, 926, 928, 929, 935, 936, 958, 967, 987, 995], "2022": [63, 73, 141, 157, 159, 160, 174, 227, 254, 335, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 510, 556, 562, 594, 626, 627, 632, 692, 771, 781, 797, 801, 808, 945], "y": [63, 71, 96, 123, 125, 146, 167, 169, 173, 180, 188, 254, 261, 265, 283, 292, 364, 367, 374, 390, 391, 412, 419, 441, 443, 454, 510, 511, 512, 529, 536, 566, 594, 631, 640, 658, 692, 697, 804, 807, 945, 946, 947, 987], "df3": [63, 254], "set_tbl_format": 63, "09": [63, 125, 160, 254, 335, 345, 353, 354, 627, 692, 775], "01": [63, 73, 125, 130, 141, 157, 159, 160, 227, 254, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 510, 511, 512, 514, 556, 626, 627, 692, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 945, 946, 947, 949], "02": [63, 73, 130, 157, 159, 160, 174, 227, 254, 334, 335, 341, 342, 343, 350, 351, 352, 353, 354, 357, 360, 361, 362, 363, 366, 368, 369, 371, 458, 459, 460, 461, 462, 464, 465, 466, 467, 510, 511, 512, 514, 556, 594, 626, 627, 632, 692, 738, 770, 771, 773, 774, 777, 778, 779, 782, 783, 784, 785, 787, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 805, 806, 808, 809, 810, 811, 945, 946, 947, 949], "03": [63, 73, 96, 159, 160, 227, 254, 334, 335, 336, 340, 341, 343, 351, 352, 353, 354, 360, 361, 362, 363, 364, 366, 367, 368, 369, 371, 511, 514, 626, 627, 692, 770, 771, 772, 775, 776, 777, 778, 779, 782, 783, 784, 785, 787, 789, 791, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 806, 807, 809, 810, 811, 946, 949], "af1": 63, "af2": 63, "af3": 63, "keep": [63, 102, 103, 113, 223, 226, 227, 254, 409, 422, 544, 594, 665, 667, 692, 763, 862, 879, 987], "easili": [63, 200, 231, 234, 254, 545, 582, 651, 670, 674, 692], "dot": [63, 594, 655, 692, 987], "product": [63, 140, 254, 327, 331, 539, 594, 760, 766, 987], "fill_nul": [63, 149, 254, 594, 620, 671, 692, 987], "167": 63, "47": 63, "callabl": [64, 65, 66, 67, 113, 135, 153, 187, 236, 254, 268, 305, 420, 421, 446, 457, 539, 551, 552, 560, 567, 575, 594, 636, 644, 676, 692, 701, 738, 887, 987], "decor": [64, 65, 66, 67, 125, 127, 135, 254, 268, 594, 701, 987], "access": [64, 65, 66, 67, 171, 196, 197, 254, 422, 594, 671, 692, 995], "by_first_letter_of_column_nam": 64, "f": [64, 103, 141, 157, 172, 212, 222, 225, 254, 261, 268, 305, 473, 490, 510, 512, 539, 546, 567, 594, 738, 925, 945, 947], "fromkei": [64, 66], "by_first_letter_of_column_valu": 64, "starts_with": [64, 485, 489, 924], "slice": [64, 70, 146, 162, 172, 210, 254, 291, 303, 457, 458, 459, 460, 461, 462, 464, 465, 466, 594, 612, 617, 619, 636, 645, 655, 656, 657, 692, 724, 736, 815, 830, 887, 888, 889, 890, 891, 892, 894, 895, 896, 958, 987], "to_seri": [64, 68, 155, 254, 510, 945], "xx": [64, 66, 124, 127], "xy": [64, 66], "yy": [64, 66, 124, 127], "yz": [64, 66], "a2": [64, 66], "b1": [64, 66], "b2": [64, 66], "pow_n": 65, "powersofn": 65, "next": [65, 307, 451, 594, 881, 987], "p": [65, 187, 254, 446, 582, 594, 644, 692], "ceil": [65, 594, 987], "previou": [65, 132, 445, 518, 594, 875, 987], "floor": [65, 594, 987], "nearest": [65, 174, 190, 246, 254, 317, 387, 450, 462, 574, 594, 632, 646, 686, 692, 749, 826, 834, 880, 892, 987], "24": [65, 119, 135, 146, 160, 254, 327, 329, 343, 437, 594, 627, 692, 762, 779, 854, 987], "001": [65, 346, 347, 349, 356, 556, 786, 788, 796], "next_pow2": 65, "prev_pow2": 65, "nearest_pow2": 65, "split_by_column_dtyp": 66, "collect_al": 66, "31": [67, 73, 125, 335, 339, 340, 352, 353, 357, 369, 510, 554, 555, 562, 566, 771, 775, 776, 793, 797, 945, 995], "42": [67, 160, 161, 254, 627, 692, 829, 987], "961": 67, "1764": 67, "4160": 67, "evalu": [68, 73, 130, 149, 151, 174, 254, 265, 279, 305, 329, 395, 397, 401, 422, 443, 537, 538, 541, 557, 576, 582, 587, 594, 622, 629, 631, 632, 692, 711, 762, 979, 987], "immedi": [68, 73, 130, 451, 541, 576, 582, 594, 881, 987], "arg_tru": [68, 594, 987], "build": [69, 90, 995], "wa": 69, "compil": [69, 281, 282, 714, 715], "gate": 69, "info": [69, 105, 114, 119, 344, 780], "otherwis": [69, 124, 129, 181, 200, 254, 305, 309, 318, 319, 320, 360, 375, 376, 377, 446, 453, 485, 487, 537, 538, 553, 568, 571, 583, 587, 594, 641, 651, 692, 701, 738, 741, 752, 753, 754, 800, 816, 817, 818, 883, 901, 902, 920, 922, 987], "depend": [69, 119, 268, 281, 282, 430, 451, 539, 559, 562, 594, 714, 715, 881, 987, 995], "host": [69, 102, 107, 111, 115, 117], "git": 69, "lazy_fram": 70, "type_coercion": [70, 612, 617, 619, 645, 655, 656, 657, 692], "predicate_pushdown": [70, 612, 617, 619, 636, 645, 655, 656, 657, 692], "projection_pushdown": [70, 612, 617, 619, 636, 645, 655, 656, 657, 692], "simplify_express": [70, 612, 617, 619, 645, 655, 656, 657, 692], "no_optim": [70, 612, 619, 636, 645, 656, 657, 692], "slice_pushdown": [70, 612, 617, 619, 636, 645, 655, 656, 657, 692], "common_subplan_elimin": [70, 612, 617, 619, 645, 655, 692], "graph": [70, 175, 254, 629, 671, 692], "parallel": [70, 71, 99, 104, 111, 117, 159, 174, 175, 187, 254, 287, 329, 594, 605, 626, 631, 632, 692, 720, 762, 987], "threadpool": [70, 129], "coercion": [70, 454, 594, 612, 617, 619, 645, 655, 656, 657, 692], "optim": [70, 111, 113, 115, 116, 117, 171, 175, 187, 191, 197, 223, 254, 612, 617, 619, 636, 645, 655, 656, 657, 665, 672, 692], "predic": [70, 113, 115, 116, 117, 118, 151, 170, 196, 254, 384, 535, 560, 594, 612, 617, 619, 622, 636, 645, 648, 655, 656, 657, 672, 692, 824, 901, 902, 987], "pushdown": [70, 612, 617, 619, 636, 645, 648, 655, 656, 657, 672, 692, 901, 902, 987], "project": [70, 113, 115, 116, 117, 268, 480, 481, 594, 612, 617, 619, 636, 645, 648, 655, 656, 657, 673, 692], "turn": [70, 102, 103, 113, 533, 594, 612, 617, 619, 636, 645, 656, 657, 692], "off": [70, 102, 103, 113, 533, 594, 612, 617, 619, 636, 645, 656, 657, 692], "Will": [70, 222, 254, 612, 617, 619, 645, 655, 692, 987], "try": [70, 84, 86, 102, 103, 106, 107, 111, 113, 115, 117, 612, 617, 619, 645, 655, 692], "branch": [70, 612, 617, 619, 645, 655, 692], "subplan": [70, 612, 617, 619, 645, 655, 692], "occur": [70, 285, 436, 451, 594, 612, 617, 619, 645, 655, 692, 718, 867, 881, 987], "union": [70, 71, 612, 617, 619, 645, 655, 692], "part": [70, 89, 125, 492, 506, 507, 612, 617, 619, 645, 655, 671, 692, 775, 778, 785, 787, 790, 792, 795, 802, 812, 927, 941, 942], "fashion": [70, 173, 254, 612, 617, 619, 645, 655, 692], "item": [71, 103, 196, 198, 254, 284, 290, 292, 380, 468, 507, 594, 717, 723, 725, 820, 898, 942, 987], "iter": [71, 126, 128, 136, 158, 159, 160, 171, 172, 186, 196, 197, 200, 201, 207, 221, 222, 231, 233, 234, 254, 329, 378, 444, 481, 537, 538, 542, 544, 545, 546, 547, 553, 558, 568, 571, 579, 582, 583, 587, 594, 608, 625, 626, 627, 651, 652, 659, 664, 670, 674, 692, 762, 987, 995], "polarstyp": 71, "concatmethod": 71, "vertic": [71, 148, 225, 229, 254, 484, 919], "rechunk": [71, 89, 94, 102, 103, 107, 111, 113, 115, 116, 117, 148, 254, 594, 700, 750, 868, 987], "combin": [71, 73, 84, 86, 159, 160, 161, 174, 227, 254, 265, 279, 357, 368, 443, 497, 503, 509, 594, 626, 627, 632, 655, 692, 797, 808, 932, 938, 944], "concaten": [71, 153, 187, 254, 446, 546, 547, 594, 644, 692, 750, 868, 987], "diagon": [71, 222, 254], "vstack": [71, 148, 254], "find": [71, 152, 254, 469, 594, 899, 987], "miss": [71, 102, 103, 113, 149, 254, 307, 375, 376, 377, 389, 396, 403, 405, 580, 594, 620, 692, 816, 817, 818, 978, 987], "stack": [71, 164, 229, 254], "don": [71, 135, 223, 225, 254, 268, 287, 329, 539, 594, 665, 692, 701, 720, 762, 900, 978, 987], "auto": [71, 89, 91, 92, 93, 95, 111, 117, 222, 254, 510, 692, 945, 995], "logic": [71, 135, 236, 254, 265, 443, 527, 536, 594, 624, 631, 647, 673, 676, 692, 701, 971, 987], "align_fram": 71, "pattern": [71, 102, 103, 113, 115, 116, 117, 171, 254, 428, 485, 486, 491, 492, 500, 501, 901, 902, 920, 921, 926, 927, 935, 936, 987], "collis": 71, "need": [71, 96, 102, 103, 106, 120, 121, 159, 160, 205, 217, 254, 305, 422, 473, 495, 594, 626, 627, 692, 907, 930, 987], "sure": [71, 89, 94, 102, 103, 104, 107, 111, 191, 254, 541], "contigu": [71, 89, 94, 102, 103, 107, 111, 113, 115, 116, 117, 191, 254], "relev": 71, "df_h1": 71, "l1": 71, "l2": 71, "df_h2": 71, "r1": 71, "r2": 71, "r3": 71, "df_d1": 71, "df_d2": 71, "df_a1": 71, "df_a2": 71, "df_a3": 71, "bin": [72, 499, 536, 588, 594, 763, 831, 879, 934, 981, 987], "label": [72, 457, 458, 459, 460, 461, 462, 464, 465, 466, 594, 645, 692, 763, 879, 887, 888, 889, 890, 891, 892, 894, 895, 896, 987], "break_point_label": [72, 763, 879, 987], "break_point": [72, 763, 831, 879, 987], "category_label": [72, 763, 879, 987], "discret": [72, 286, 330, 373, 594, 719, 763, 765, 814, 831, 879, 987], "deprec": [72, 73, 97, 510, 565, 573, 580, 692, 945], "sinc": [72, 73, 97, 105, 114, 341, 510, 562, 565, 573, 580, 777, 945], "assign": [72, 123, 159, 254, 305, 451, 506, 507, 594, 626, 692, 738, 763, 862, 879, 881, 941, 942, 987], "breakpoint": [72, 763, 879, 987], "inf": [72, 125, 127, 275, 399, 402, 529, 594, 707, 763, 831, 839, 843, 861, 875, 879, 975, 987], "interv": [73, 130, 159, 160, 227, 254, 344, 361, 362, 368, 397, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 627, 692, 775, 777, 778, 780, 785, 787, 790, 792, 795, 798, 799, 801, 802, 806, 808, 809, 810, 812, 835, 987], "timedelta": [73, 130, 159, 160, 227, 254, 339, 341, 342, 345, 350, 352, 357, 358, 359, 361, 362, 366, 368, 369, 370, 372, 458, 459, 460, 461, 462, 464, 465, 466, 576, 594, 626, 627, 692, 782, 784, 789, 797, 801, 808, 871, 872, 987], "1d": [73, 159, 160, 174, 227, 254, 334, 343, 351, 357, 361, 368, 371, 458, 459, 460, 461, 462, 464, 465, 466, 566, 594, 626, 627, 632, 692, 770, 777, 779, 782, 783, 784, 789, 791, 797, 801, 806, 808, 810, 811], "_nodefault": [73, 188, 254, 510, 945], "no_default": [73, 188, 254, 510, 945], "closedinterv": [73, 130, 159, 160, 254, 397, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 627, 692, 835, 987], "lower": [73, 113, 130, 159, 190, 246, 254, 318, 320, 397, 418, 421, 450, 453, 462, 541, 574, 594, 619, 626, 646, 686, 692, 754, 835, 861, 880, 883, 892, 975, 987], "bound": [73, 102, 103, 130, 146, 159, 254, 290, 304, 305, 318, 319, 320, 397, 418, 532, 541, 594, 626, 692, 723, 737, 753, 754, 815, 835, 861, 975, 987], "upper": [73, 102, 103, 130, 146, 159, 254, 305, 318, 319, 397, 532, 541, 594, 626, 692, 753, 815, 835, 861, 975, 987], "period": [73, 130, 159, 160, 203, 204, 254, 299, 361, 368, 375, 376, 377, 445, 471, 472, 594, 626, 627, 653, 654, 692, 732, 801, 808, 816, 817, 818, 875, 905, 906, 987], "durat": [73, 130, 174, 227, 254, 340, 343, 347, 349, 351, 356, 363, 371, 527, 594, 632, 692, 776, 779, 786, 788, 791, 796, 803, 811, 971, 987], "3d12h4m25": [73, 159, 160, 174, 227, 254, 361, 368, 626, 627, 632, 692, 801, 808], "hour": [73, 130, 159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 555, 556, 585, 594, 626, 627, 632, 692, 797, 801, 808], "minut": [73, 130, 159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 555, 556, 585, 594, 626, 627, 632, 692, 797, 801, 808], "17": [73, 119, 125, 130, 234, 467, 510, 562, 565, 594, 674, 756, 801, 945, 987, 995], "tempor": [73, 130, 159, 160, 171, 197, 214, 254, 397, 458, 459, 460, 461, 462, 464, 465, 466, 594, 605, 626, 627, 692, 835, 851, 987], "window": [73, 130, 159, 160, 254, 329, 361, 368, 375, 376, 377, 444, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 546, 577, 578, 594, 626, 627, 692, 762, 801, 808, 816, 817, 818, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 987], "granular": 73, "finer": 73, "permut": 73, "1mo": [73, 159, 160, 174, 227, 254, 336, 340, 353, 354, 357, 360, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 627, 632, 692, 772, 776, 792, 793, 794, 797, 798, 799, 800, 801, 808, 809], "dtrang": 73, "1985": 73, "04": [73, 118, 159, 227, 254, 335, 336, 339, 340, 343, 350, 351, 352, 353, 354, 358, 360, 361, 362, 363, 364, 367, 369, 370, 371, 510, 556, 626, 692, 772, 776, 779, 785, 787, 790, 791, 792, 793, 794, 795, 799, 800, 802, 803, 804, 807, 809, 810, 811, 945], "05": [73, 118, 120, 121, 125, 174, 227, 254, 335, 336, 340, 360, 362, 364, 367, 632, 692, 771, 772, 773, 774, 775, 776, 800, 801, 804, 805, 807, 808, 810], "07": [73, 130, 335, 339, 358, 360, 361, 368, 370, 510, 562, 771, 775, 800, 810, 945], "08": [73, 120, 121, 125, 130, 160, 254, 335, 361, 510, 556, 627, 692, 801, 808, 945], "america": 73, "new_york": 73, "\u03bc": [73, 96, 125, 159, 160, 174, 227, 254, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 510, 512, 556, 562, 626, 627, 632, 692, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 808, 809, 810, 811, 812, 945, 947], "est": 73, "month_end": 73, "last": [73, 136, 162, 174, 176, 188, 207, 210, 221, 223, 248, 254, 278, 290, 303, 329, 339, 353, 358, 368, 369, 480, 507, 522, 584, 594, 608, 632, 659, 662, 664, 665, 688, 692, 710, 723, 736, 762, 775, 793, 798, 809, 830, 857, 942, 958, 987], "month": [73, 159, 160, 174, 227, 254, 339, 353, 354, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 554, 555, 594, 626, 627, 632, 692, 775, 793, 794, 797, 801, 808], "28": [73, 159, 160, 174, 213, 227, 254, 261, 357, 360, 361, 368, 371, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 627, 632, 692, 797, 800, 801, 808, 811, 995], "disabl": [74, 171, 254], "equal": [74, 102, 103, 113, 120, 121, 154, 159, 174, 181, 254, 305, 374, 390, 412, 457, 458, 459, 460, 461, 462, 464, 465, 466, 495, 496, 502, 516, 541, 577, 578, 594, 626, 632, 641, 692, 738, 887, 888, 889, 890, 891, 892, 894, 895, 896, 900, 930, 931, 937, 951, 987, 995], "encount": [75, 159, 254, 439, 440, 493, 494, 548, 551, 560, 580, 594, 626, 692, 871, 872, 928, 929, 987], "certain": [79, 105, 114, 165, 227, 254, 545, 612, 645, 656, 657, 692, 987], "least": [81, 125, 445, 533, 594, 875, 976, 987], "unexpect": [82, 254], "caus": [82, 90, 102, 103, 113, 134, 148, 254, 700, 987], "panic": 82, "mismatch": 84, "incompat": 86, "pa": [89, 118], "chunkedarrai": [89, 183, 254, 766, 987], "recordbatch": [89, 172, 254], "schemadefinit": [89, 91, 92, 93, 95, 254, 692], "schema_overrid": [89, 91, 92, 93, 94, 95, 172, 217, 254, 692], "copi": [89, 90, 134, 137, 138, 172, 212, 217, 218, 231, 254, 381, 516, 594, 610, 611, 670, 692, 697, 751, 755, 768, 821, 951, 964, 969, 970, 987], "closest": 89, "pair": [89, 91, 92, 93, 95, 124, 192, 254, 648, 692, 995], "declar": [89, 91, 92, 93, 95, 254, 692], "sever": [89, 91, 92, 93, 95, 254, 692, 995], "wai": [89, 91, 92, 93, 95, 142, 158, 172, 187, 207, 234, 254, 444, 446, 481, 491, 545, 594, 614, 625, 644, 659, 674, 692, 926], "equival": [89, 91, 92, 93, 95, 105, 170, 184, 254, 261, 265, 374, 388, 390, 391, 412, 419, 435, 437, 441, 443, 447, 498, 519, 529, 536, 594, 692, 854, 933, 948, 950, 987], "form": [89, 91, 92, 93, 95, 171, 197, 225, 254, 445, 594, 692, 875, 987], "them": [89, 91, 92, 93, 95, 113, 148, 159, 160, 174, 181, 227, 254, 292, 397, 439, 440, 546, 594, 626, 627, 632, 641, 692, 700, 725, 871, 872, 987], "dimens": [89, 91, 93, 95, 254, 455, 594, 692, 885, 987], "construct": [89, 91, 92, 93, 94, 95, 254, 422, 594, 624, 647, 692, 987], "allow_copi": [90, 134], "interchang": [90, 134], "__dataframe__": 90, "convers": [90, 134, 172, 218, 254, 510, 511, 512, 514, 605, 945, 946, 947, 949, 968, 969, 970, 987], "detail": [90, 104, 120, 121, 134, 254, 692, 995], "latest": [90, 105, 114, 134, 389, 431, 594], "index": [90, 94, 98, 104, 119, 134, 152, 159, 160, 165, 170, 174, 188, 194, 196, 206, 219, 227, 232, 254, 262, 276, 277, 278, 280, 281, 282, 290, 300, 304, 305, 357, 458, 459, 460, 461, 462, 464, 465, 466, 469, 479, 491, 504, 523, 594, 626, 627, 632, 658, 672, 692, 708, 709, 710, 711, 712, 714, 715, 723, 733, 737, 738, 797, 854, 873, 899, 902, 914, 926, 939, 959, 987], "runtimeerror": 90, "from_panda": [90, 106], "from_arrow": 90, "effici": [90, 172, 254], "clone": [91, 92, 93, 94, 95, 137, 217, 218, 254, 610, 692, 751, 968, 969, 970, 978, 987], "dimension": [91, 93, 95, 254, 692, 987], "infer_schema_length": [92, 95, 102, 103, 106, 113, 116, 254, 692], "NOT": [92, 120, 121, 429], "typic": [92, 135, 254, 701, 987], "clearer": 92, "load": [92, 94, 105, 114, 126, 128, 254, 605, 628, 635, 692, 995], "want": [92, 135, 148, 184, 254, 268, 318, 319, 320, 384, 420, 422, 458, 459, 460, 461, 462, 464, 465, 466, 551, 560, 594, 612, 628, 635, 692, 700, 701, 752, 753, 754, 969, 987], "_partial_": [92, 254, 692], "omit": [92, 96, 123, 125, 127, 130, 132, 184, 254], "mani": [92, 95, 104, 148, 254, 700, 987], "scan": [92, 95, 102, 103, 111, 113, 114, 115, 116, 117, 118, 619, 628, 635, 692], "slow": [92, 95, 102, 103, 113, 268, 329, 594, 762, 987], "partial": 92, "np": [93, 151, 217, 254, 523, 594, 692, 839, 843, 845, 846, 887, 959, 987], "ndarrai": [93, 151, 217, 254, 523, 594, 692, 766, 899, 902, 959, 969, 987], "numpi": [93, 119, 140, 217, 218, 254, 439, 440, 594, 692, 839, 843, 845, 846, 871, 872, 887, 969, 970, 978, 987], "columnar": [93, 95, 171, 197, 254], "interpret": [93, 95, 102, 103, 113, 254, 692], "yield": [93, 95, 102, 103, 113, 146, 148, 222, 254, 692, 700, 815, 987], "conclus": [93, 95, 254, 692], "nan_to_nul": [94, 254, 692, 987], "include_index": 94, "datetimeindex": [94, 766, 987], "panda": [94, 106, 119, 218, 254, 353, 354, 527, 594, 692, 793, 794, 970, 971, 987], "instal": [94, 102, 103, 104, 107, 111, 119, 140, 217, 218, 254, 655, 692, 970, 987], "nan": [94, 120, 121, 125, 134, 149, 218, 254, 332, 333, 374, 382, 390, 391, 396, 403, 405, 406, 407, 412, 419, 423, 434, 439, 440, 441, 529, 548, 580, 594, 620, 692, 703, 707, 767, 822, 845, 846, 871, 872, 887, 970, 987, 995], "convert": [94, 97, 105, 106, 114, 134, 213, 214, 215, 216, 217, 220, 254, 305, 336, 364, 367, 421, 499, 510, 511, 512, 514, 594, 692, 738, 772, 804, 807, 934, 945, 946, 947, 949, 956, 967, 968, 969, 970, 978, 987], "pd": [94, 106, 527, 594, 971, 987], "pd_df": 94, "pd_seri": 94, "tbl": [96, 99, 103], "reconstruct": 96, "repr": [96, 125, 127], "trim": 96, "whitespac": [96, 497, 503, 509, 932, 938, 944], "prompt": 96, "extract": [96, 339, 340, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 355, 356, 358, 359, 362, 363, 369, 370, 372, 446, 492, 493, 494, 594, 773, 774, 775, 776, 778, 779, 781, 785, 786, 787, 788, 790, 791, 792, 795, 796, 798, 799, 802, 803, 805, 809, 810, 812, 927, 928, 929], "to_init_repr": [96, 254, 987], "truncat": [96, 159, 254, 357, 626, 645, 692, 797], "identifi": [96, 180, 186, 223, 254, 640, 665, 692], "compound": 96, "struct": [96, 184, 200, 220, 224, 231, 254, 305, 422, 493, 506, 507, 533, 551, 552, 553, 567, 594, 651, 666, 670, 692, 738, 928, 941, 942], "neither": [96, 106, 198, 254, 305, 738], "source_ac": 96, "source_cha": 96, "ident": [96, 137, 138, 254, 364, 610, 611, 692, 751, 755, 804, 987], "timestamp": [96, 360, 562, 800], "tor_id": 96, "nnel_id": 96, "asia": [96, 773, 774, 805], "tokyo": 96, "123456780": 96, "9876543210": 96, "56": [96, 130, 525, 594], "59": [96, 124, 130, 335, 350, 362, 555, 585, 771, 790, 802], "663053": 96, "jst": 96, "803065983": 96, "2055938745": 96, "38": [96, 125], "18": [96, 130, 160, 254, 328, 361, 368, 371, 396, 409, 594, 627, 645, 692, 811], "050545": 96, "source_actor_id": 96, "source_channel_id": 96, "sr": [96, 697, 987], "to_list": [96, 160, 254, 627, 692, 920, 987], "dummi": [97, 215, 254, 965, 987], "to_dummi": [97, 254, 987], "foo_1": [97, 215, 254], "foo_2": [97, 215, 254], "bar_3": [97, 215, 254], "bar_4": [97, 215, 254], "ham_a": [97, 215, 254], "ham_b": [97, 215, 254], "datatypeclass": 98, "uint32": [98, 119, 146, 254, 278, 281, 282, 294, 339, 342, 346, 348, 350, 352, 355, 358, 359, 362, 369, 370, 454, 486, 495, 498, 523, 527, 594, 711, 714, 715, 727, 746, 775, 778, 785, 787, 790, 792, 795, 798, 799, 802, 809, 810, 815, 844, 900, 921, 971, 987], "regular": [98, 171, 196, 197, 227, 254, 378, 485, 486, 491, 492, 500, 501, 545, 558, 568, 571, 583, 594, 920, 921, 926, 927, 935, 936], "uint64": [98, 161, 254, 281, 282, 392, 453, 594, 714, 715, 829, 883, 987], "bigidx": 98, "read": [99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 148, 254, 420, 587, 594, 619, 624, 647, 692, 700, 987], "batch": [99, 103, 116, 636, 692], "over": [99, 102, 103, 105, 113, 125, 135, 148, 171, 172, 196, 197, 222, 233, 236, 254, 268, 329, 383, 396, 420, 421, 457, 458, 459, 460, 461, 462, 464, 465, 466, 539, 551, 552, 560, 567, 575, 594, 676, 700, 701, 762, 887, 888, 889, 891, 895, 987], "fetch": [99, 113, 175, 254, 610, 612, 628, 635, 692], "ideal": 99, "read_csv_batch": [99, 606], "tpch": [99, 103], "tables_scale_100": [99, 103], "lineitem": [99, 103, 104], "try_parse_d": [99, 102, 103, 113], "probabl": [100, 131, 373, 594, 814, 987], "n_row": [101, 102, 103, 107, 111, 113, 115, 116, 117, 172, 254, 619, 692], "accept": [101, 102, 103, 105, 107, 111, 136, 147, 158, 200, 207, 221, 231, 234, 254, 261, 378, 397, 444, 481, 536, 537, 538, 542, 544, 545, 546, 547, 553, 558, 568, 571, 582, 583, 594, 608, 618, 625, 651, 659, 664, 670, 674, 692, 835, 987], "stop": [101, 102, 103, 107, 111, 113, 115, 116, 117, 130, 339, 341, 342, 344, 345, 350, 352, 358, 359, 361, 362, 366, 368, 369, 370, 372, 770, 772, 775, 777, 778, 780, 785, 787, 790, 792, 795, 798, 799, 801, 802, 806, 808, 809, 810, 811, 812], "textio": 102, "new_column": [102, 103, 106, 113, 193, 254], "comment_char": [102, 103, 113], "quote_char": [102, 103, 113], "skip_row": [102, 103, 113], "missing_utf8_is_empty_str": [102, 103, 113], "ignore_error": [102, 103, 113], "n_thread": [102, 103], "8192": 102, "csvencod": [102, 103, 113], "low_memori": [102, 103, 111, 113, 116, 117], "skip_rows_after_head": [102, 103, 113], "row_count_nam": [102, 103, 107, 111, 113, 115, 116, 117], "row_count_offset": [102, 103, 107, 111, 113, 115, 116, 117], "sample_s": [102, 103], "eol_char": [102, 103, 113], "we": [102, 103, 106, 113, 174, 254, 287, 499, 566, 587, 632, 636, 692, 701, 720, 831, 879, 934, 987], "handler": [102, 103, 106], "g": [102, 103, 105, 106, 107, 111, 114, 115, 117, 159, 160, 174, 225, 227, 254, 261, 268, 357, 361, 368, 378, 458, 459, 460, 461, 462, 464, 465, 466, 473, 558, 594, 626, 627, 632, 648, 692, 797, 801, 808, 900, 969, 987], "builtin": [102, 103, 106], "stringio": [102, 103], "fsspec": [102, 103, 107, 111, 114, 115, 117, 119], "remot": [102, 103, 107, 111], "autogener": [102, 103, 113], "column_x": [102, 103, 113], "enumer": [102, 103, 113, 172, 254], "shorter": [102, 103], "remain": [102, 103, 113, 146, 254, 506, 507, 636, 692, 815, 941, 942, 987], "comment": [102, 103, 113], "instanc": [102, 103, 113, 125, 127, 132, 148, 153, 254, 315, 431, 458, 459, 460, 461, 462, 464, 465, 466, 551, 560, 594, 636, 672, 692, 700, 746, 987], "special": [102, 103, 113, 492, 701, 927, 987], "escap": [102, 103, 113], "dure": [102, 103, 113, 132, 148, 254, 700, 987], "would": [102, 103, 113, 278, 290, 430, 451, 542, 594, 710, 723, 881, 969, 987], "prefer": [102, 103, 105, 113, 128, 135, 148, 171, 196, 197, 236, 254, 268, 457, 594, 676, 692, 700, 701, 887, 987, 995], "treat": [102, 103, 113, 485, 500, 501, 920, 935, 936], "10000": [102, 172, 254, 516], "check": [102, 103, 113, 120, 121, 154, 168, 170, 254, 264, 266, 284, 308, 311, 312, 397, 401, 485, 489, 508, 594, 636, 692, 698, 699, 717, 740, 743, 744, 836, 838, 841, 842, 844, 849, 850, 851, 853, 854, 900, 920, 924, 943, 987], "might": [102, 103, 113, 129, 268, 531, 594, 970, 987], "issu": [102, 103, 106, 113, 327, 328, 521, 594, 760, 761, 957, 987], "iso8601": [102, 103, 113], "alwai": [102, 124, 135, 236, 254, 430, 510, 587, 636, 676, 692, 701, 945, 987, 995], "physic": [102, 103, 174, 254, 316, 527, 594, 609, 631, 632, 692, 748, 971, 987], "cpu": [102, 103], "system": [102, 103], "wrongli": 102, "done": [102, 103, 113, 118, 157, 174, 254, 267, 269, 315, 496, 502, 540, 594, 632, 692, 746, 931, 937, 987], "buffer": [102, 103, 146, 171, 254, 815, 987], "modifi": [102, 103, 113, 129, 132, 164, 171, 229, 254, 279, 360, 371, 485, 491, 492, 500, 594, 800, 811, 884, 920, 926, 927, 935, 948, 950, 987], "lossi": [102, 103, 113], "decod": [102, 103], "reduc": [102, 103, 111, 113, 115, 116, 117, 241, 242, 244, 247, 473, 560, 594, 657, 681, 682, 684, 687, 692, 864, 878, 907, 957, 987], "usag": [102, 103, 113, 125, 127, 205, 254, 908, 987], "expens": [102, 103, 111, 113, 116, 117, 126, 128, 135, 171, 196, 197, 222, 223, 254, 268, 594, 665, 692, 700, 701, 987, 995], "aggreg": [102, 103, 111, 153, 159, 160, 177, 178, 179, 182, 184, 188, 189, 190, 208, 209, 225, 228, 234, 235, 238, 240, 254, 262, 384, 394, 420, 444, 457, 458, 459, 460, 461, 462, 464, 465, 466, 533, 537, 538, 551, 552, 553, 560, 565, 568, 571, 575, 583, 594, 626, 627, 636, 637, 638, 639, 642, 643, 646, 660, 661, 668, 674, 675, 678, 680, 692, 832, 887, 888, 889, 891, 894, 895, 896, 987], "nativ": [102, 107, 111, 123, 135, 171, 197, 214, 236, 254, 268, 594, 599, 676, 701, 987, 995], "parser": 102, "even": [102, 446, 594], "regard": [102, 548, 580], "sens": [102, 107, 111, 115, 117, 159, 160, 181, 227, 254, 626, 627, 641, 692], "particular": [102, 107, 111, 115, 117, 146, 254, 815, 987], "skip": [102, 103, 106, 111, 113, 117, 225, 254, 701, 987], "offset": [102, 103, 107, 111, 113, 115, 116, 117, 159, 160, 206, 227, 232, 254, 300, 353, 354, 357, 361, 368, 479, 504, 510, 512, 594, 626, 627, 658, 672, 692, 733, 793, 794, 797, 801, 808, 914, 939, 945, 947, 987], "row_count": [102, 103, 107, 111, 113, 115, 116, 117], "sampl": [102, 103, 236, 254, 478, 594, 676, 913, 987], "estim": [102, 103, 146, 254, 269, 376, 377, 410, 540, 594, 692, 815, 817, 818, 855, 987], "alloc": [102, 103, 146, 191, 254, 815, 987], "scan_csv": [102, 103, 656, 657, 692], "lazili": [102, 103, 113, 114, 115, 116, 117, 422, 594], "glob": [102, 103, 113, 115, 116, 117], "continu": [102, 111, 478, 594, 913, 987], "benchmark": [102, 111, 314, 594], "50000": 103, "batchedcsvread": [103, 605], "upon": 103, "creation": 103, "gather": 103, "next_batch": 103, "big": 103, "interest": 103, "seen_group": 103, "big_fil": 103, "df_current_batch": 103, "concat": [103, 750, 868, 987], "partition_df": 103, "partition_bi": [103, 172, 254], "as_dict": [103, 186, 254], "fh": 103, "write_csv": [103, 113, 254], "els": [103, 587], "partition_on": 104, "partition_rang": 104, "partition_num": 104, "dbreadengin": 104, "connectorx": [104, 119], "raw": 104, "partit": [104, 105, 111, 114, 118, 172, 186, 254], "transfer": 104, "document": [104, 106, 364, 367, 494, 510, 511, 512, 514, 804, 807, 929, 945, 946, 947, 949], "redshift": 104, "mysql": 104, "mariadb": 104, "clickhous": 104, "oracl": 104, "bigqueri": 104, "pleas": 104, "doc": [104, 140, 254], "github": 104, "sfu": 104, "db": 104, "connector": 104, "destin": 104, "sqlite": 104, "develop": [104, 125, 127], "flight_sql": 104, "further": [104, 970, 987], "wide": [104, 157, 180, 225, 254, 640, 692], "adopt": 104, "significantli": [104, 995], "better": [104, 135, 217, 236, 254, 268, 533, 594, 676, 901, 902, 987], "driver": 104, "cpp": 104, "partition_col": 104, "explicitli": [104, 123, 125, 132, 422, 582, 594], "delta_table_opt": [105, 114], "root": [105, 114, 409, 421, 432, 448, 482, 520, 593, 594, 916, 987], "absolut": [105, 114, 120, 121, 260, 375, 376, 377, 594, 696, 816, 817, 818, 987], "avoid": 105, "year": [105, 114, 159, 160, 174, 227, 254, 344, 345, 357, 358, 361, 368, 369, 458, 459, 460, 461, 462, 464, 465, 466, 554, 555, 594, 626, 627, 632, 692, 780, 781, 797, 798, 801, 808, 809], "2021": [105, 114, 141, 157, 159, 227, 254, 510, 566, 626, 692, 773, 774, 781, 805, 851, 945, 987], "aw": [105, 114], "googl": [105, 114], "service_account": [105, 114], "service_account_json_absolute_path": [105, 114], "az": [105, 114], "adl": [105, 114], "abf": [105, 114], "azure_storage_account_nam": [105, 114], "azure_storage_account_kei": [105, 114], "without_fil": [105, 114], "track": [105, 114, 135, 254, 305], "sheet_id": 106, "sheet_nam": 106, "xlsx2csv_option": 106, "read_csv_opt": 106, "noreturn": 106, "xlsx2csv": [106, 119], "read_csv": [106, 113], "nor": [106, 198, 254], "skip_empty_lin": 106, "my": [106, 118], "datasheet": 106, "correct": [106, 376, 377, 410, 463, 478, 594, 636, 692, 817, 818, 855, 893, 913, 987], "look": [106, 305, 308, 740], "fix": [106, 123, 125, 371, 458, 459, 460, 461, 462, 464, 465, 466, 594, 811], "whole": [106, 480, 481, 491, 594, 692, 926], "With": [106, 135, 170, 254, 268, 594, 701, 854, 987], "1000": [106, 146, 216, 254, 346, 347, 516, 786, 967, 987, 995], "spreadsheet": [106, 188, 254], "xl": 106, "xlsm": 106, "xlsb": 106, "odf": 106, "od": [106, 509, 944], "odt": 106, "memory_map": [107, 111, 115], "v2": [107, 115], "greatli": [107, 115], "improv": [107, 115, 657, 692], "repeat": [107, 115, 452, 454, 594], "o": [107, 115, 313, 329, 490, 528, 594, 745, 762, 925, 972, 987], "page": [107, 111, 115, 117, 254, 594, 605, 657, 692, 987], "give": [107, 111, 115, 116, 117, 180, 223, 254, 341, 410, 454, 529, 594, 605, 640, 665, 692, 777, 855, 987], "That": [107, 636, 692], "filenam": 107, "my_fil": 107, "write_ipc": [107, 254], "read_ndjson": 109, "parallelstrategi": [111, 117], "use_statist": [111, 117], "awar": [111, 171, 197, 214, 254, 510, 512, 945, 947], "stabl": [111, 140, 198, 254, 417, 594, 640, 692], "row_group": [111, 117], "pressur": [111, 116, 117, 473, 594, 657, 692, 907, 987], "read_tabl": 111, "with_column_nam": 113, "push": [113, 115, 116, 117, 118], "down": [113, 115, 116, 117, 118, 387, 594, 826, 987], "therebi": [113, 115, 116, 117], "potenti": [113, 115, 116, 117], "overhead": [113, 115, 116, 117], "realloc": [113, 115, 116, 148, 254, 700, 987], "headerless": 113, "unlik": 113, "fewer": 113, "my_long_fil": 113, "doesn": [113, 373, 594, 814, 978, 987], "thing": [113, 559], "less": [113, 174, 254, 412, 419, 496, 502, 507, 516, 594, 632, 692, 931, 937, 942, 951, 995], "limit": [113, 150, 254, 307, 318, 319, 320, 383, 389, 594, 621, 628, 657, 692, 752, 753, 754, 823, 987], "breezah": 113, "languag": [113, 159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 627, 632, 692, 797, 801, 808], "hard": [113, 636, 692], "mydf": 113, "lambda": [113, 135, 153, 187, 236, 254, 268, 305, 375, 376, 377, 420, 421, 457, 539, 551, 552, 560, 567, 575, 594, 636, 644, 676, 692, 701, 738, 816, 817, 818, 987], "simpli": [113, 551, 560], "idx": [113, 159, 172, 254, 305, 626, 692, 738, 902, 987], "uint16": [113, 327, 328, 521, 594, 760, 761, 957, 987], "u16": [113, 125, 995], "eu": 114, "central": [114, 410, 478, 594, 855, 913, 987], "allow_pyarrow_filt": 118, "comparison": 118, "dset": 118, "folder": 118, "1970": 118, "stdout": [119, 157, 254], "platform": 119, "linux": 119, "90": 119, "wsl2": 119, "x86_64": 119, "glibc2": 119, "main": 119, "apr": 119, "14": [119, 125, 130, 135, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 345, 396, 594, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 801], "44": [119, 331, 594], "51": 119, "gcc": 119, "matplotlib": [119, 645, 655, 692], "check_dtyp": [120, 121], "check_exact": [120, 121], "rtol": [120, 121], "1e": [120, 121], "atol": [120, 121], "nans_compare_equ": [120, 121], "check_column_ord": 120, "check_row_ord": 120, "assertionerror": [120, 121], "compar": [120, 121, 154, 254, 374, 390, 391, 412, 419, 441, 538, 594, 900, 987], "exactli": [120, 121, 124, 125, 127, 506, 507, 908, 941, 942, 987], "toler": [120, 121, 174, 254, 632, 692], "inexact": [120, 121], "assert": [120, 121, 123, 125, 127, 160, 254, 605, 627, 692, 828, 987], "irrespect": 120, "unsort": 120, "check_nam": 121, "s1": [121, 153, 254, 738, 854, 970, 979, 987], "searchstrategi": [122, 124, 125, 127], "null_prob": [122, 125, 127], "percentag": [122, 125, 127, 445, 594, 875, 987], "chanc": [122, 125, 127, 995], "independ": [122, 123, 125, 127], "flag": [122, 470, 485, 491, 492, 500, 594, 617, 636, 692, 903, 920, 926, 927, 935, 987], "hypothesi": [122, 123, 124, 125, 126, 127, 995], "sampled_from": [122, 995], "unique_small_int": 122, "ccy": [122, 995], "gbp": [122, 995], "eur": [122, 141, 157, 254, 995], "jpy": [122, 995], "min_col": [123, 125], "max_col": [123, 125], "standalon": [123, 125], "itself": [123, 634, 692], "mincol": 123, "exact": [123, 125, 127, 205, 254, 510, 511, 512, 529, 594, 945, 946, 947], "minimum": [123, 124, 125, 127, 153, 182, 254, 375, 376, 377, 434, 440, 451, 571, 594, 642, 657, 692, 752, 789, 816, 817, 818, 872, 877, 881, 987, 995], "especi": 123, "test_unique_xyz": 123, "assert_someth": 123, "punctuat": 123, "test_special_char_colname_init": 123, "inner_dtyp": [124, 127], "select_from": [124, 127], "min_siz": [124, 125, 127, 995], "max_siz": [124, 125, 127, 995], "anoth": [124, 158, 254, 304, 329, 334, 426, 429, 594, 625, 671, 692, 737, 762, 770, 900, 987], "randomli": 124, "innermost": 124, "2x": 124, "lst": 124, "11330": 124, "24030": 124, "116": 124, "zz": [124, 127], "small": [124, 175, 254, 361, 619, 692, 995], "uint8_pair": [124, 995], "uint": [124, 995], "zip": [124, 995], "131": 124, "176": 124, "149": [124, 995], "include_col": 125, "allow_infin": [125, 127], "allowed_dtyp": [125, 127, 995], "excluded_dtyp": [125, 127], "describ": [125, 157, 254, 987], "desir": [125, 305, 738], "n_chunk": [125, 127, 254, 987], "randomis": 125, "onto": 125, "either": [125, 160, 170, 175, 178, 186, 196, 209, 254, 510, 537, 542, 582, 627, 634, 692, 945], "pct": 125, "preced": 125, "disallow": [125, 127], "exclud": [125, 127, 325, 328, 397, 545, 580, 594, 835, 851, 987], "deploi": [125, 127], "characterist": [125, 127], "concret": [125, 127], "test_repr": 125, "isinst": [125, 127, 254], "0x11f561580": 125, "known": [125, 305, 676, 738], "0565": 125, "34715": 125, "5844": 125, "33": [125, 462, 467, 545, 594, 892, 987], "076854": 125, "3382": 125, "48662": 125, "7540": 125, "29": [125, 130, 159, 160, 174, 227, 254, 353, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 627, 632, 692, 793, 797, 801, 808], "836271": 125, "4063": 125, "06": [125, 130, 227, 254, 335, 345, 359, 360, 372, 800, 801, 810], "39092": 125, "1889": 125, "13": [125, 130, 137, 138, 149, 150, 156, 160, 165, 175, 183, 231, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 457, 459, 546, 551, 560, 586, 594, 610, 611, 620, 621, 627, 634, 670, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 692, 701, 801, 808, 809, 987], "41": [125, 995], "874455": 125, "15836": 125, "1755e": 125, "575050513": 125, "profil": [126, 128, 692], "balanc": [126, 128, 995], "set_environ": 126, "polars_hypothesis_profil": [126, 128], "1500": 126, "constructor": 127, "max_data_s": 127, "normal": [127, 159, 254, 373, 410, 478, 594, 626, 692, 814, 855, 913, 987], "test_repr_is_valid_str": 127, "experi": 127, "create_list_strategi": [127, 995], "polars_max_thread": 129, "behind": 129, "lock": 129, "reason": 129, "pyspark": 129, "udf": [129, 135, 187, 236, 254, 268, 446, 539, 594, 644, 676, 692, 701, 987], "similar": [129, 153, 174, 254, 364, 367, 444, 587, 594, 632, 692, 804, 807], "recommend": [129, 171, 187, 254], "1h": [130, 159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 627, 632, 692, 778, 797, 801, 808], "23": [130, 159, 160, 254, 335, 342, 361, 555, 585, 626, 627, 692, 771, 778, 995], "999999": [130, 555, 585], "1h30m25": 130, "tm": [130, 335], "third": [130, 420, 594], "lf": [130, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 673, 692, 995], "6h": 130, "5h59m": 130, "1h29m": 130, "58": 130, "57": [130, 897, 987, 995], "19": [130, 160, 174, 254, 361, 627, 632, 692, 801, 808], "lifetim": 132, "initi": [132, 551, 560, 587], "whatev": 132, "were": 132, "enter": 132, "advantag": [132, 187, 254], "initialis": [132, 692], "set_": 132, "set_verbos": 132, "do_various_th": 132, "restor": 132, "breviti": 132, "nan_as_nul": 134, "_pyarrowdatafram": 134, "nullabl": 134, "extens": [134, 218, 254, 970, 987], "propag": [134, 178, 209, 254, 439, 440, 594, 871, 872, 987], "inference_s": [135, 254], "256": [135, 254, 875, 987], "user": [135, 187, 236, 254, 268, 446, 470, 539, 594, 644, 676, 692, 701, 903, 987], "almost": [135, 236, 254, 676, 701, 987], "_significantly_": [135, 236, 254, 676, 701, 987], "intens": [135, 236, 254, 676, 701, 987], "becaus": [135, 146, 159, 175, 225, 236, 254, 287, 626, 676, 692, 701, 720, 815, 987], "forc": [135, 174, 236, 254, 631, 632, 676, 692, 701, 987], "materi": [135, 236, 254, 645, 676, 692, 701, 987], "parallelis": [135, 236, 254, 676, 701, 987], "optimis": [135, 236, 254, 676, 692, 701, 901, 902, 987], "achiev": [135, 236, 254, 268, 594, 676, 701, 987], "best": [135, 236, 254, 268, 594, 676, 701, 987], "tri": [135, 254], "arbitrarili": [135, 254], "rearrang": [135, 254], "transform": [135, 254, 420, 513, 515, 594], "preserv": [135, 217, 218, 254, 475, 594, 910, 970, 987], "lru_cach": [135, 254, 268, 594, 701, 987], "magnitud": [135, 254, 268, 594, 701, 987], "column_1": [135, 222, 254], "scalar": [135, 170, 196, 254, 469, 539, 566, 594, 854, 899, 987], "k": [136, 221, 254, 313, 316, 410, 528, 594, 608, 664, 692, 745, 748, 855, 972, 987], "intoexpr": [136, 158, 159, 160, 200, 207, 221, 231, 234, 254, 397, 444, 481, 537, 538, 542, 544, 546, 547, 551, 553, 560, 568, 571, 579, 582, 583, 587, 594, 608, 625, 626, 627, 651, 659, 664, 670, 674, 692, 835, 987], "nulls_last": [136, 207, 221, 254, 278, 480, 594, 608, 659, 664, 692, 710, 987], "smallest": [136, 221, 254, 313, 594, 608, 664, 692, 745, 987], "largest": [136, 159, 160, 174, 221, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 528, 594, 608, 626, 627, 632, 664, 692, 797, 801, 808, 972, 987], "top": [136, 221, 254, 608, 664, 692], "top_k": [136, 254, 313, 594, 608, 692, 745, 987], "cheap": [137, 138, 254, 610, 611, 692, 700, 751, 755, 987], "deepcopi": [137, 138, 254, 610, 611, 692, 751, 755, 987], "clear": [138, 254, 611, 692, 755, 987], "properti": [139, 145, 163, 199, 202, 230, 254, 613, 616, 650, 669, 692, 995], "appl": [139, 164, 173, 192, 194, 213, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 448, 456, 489, 508, 520, 594, 631, 648, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 692, 924, 943], "banana": [139, 213, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 448, 456, 520, 594, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687], "pearson": [140, 254, 410, 478, 548, 573, 594, 855, 913, 987], "correl": [140, 254, 548, 573, 577, 580], "coeffici": [140, 254, 478, 594, 913, 987], "corrcoef": [140, 254], "percentil": [141, 254, 764, 987], "summari": [141, 254, 764, 987], "glimps": [141, 162, 254], "usd": [141, 157, 254, 995], "2020": [141, 157, 160, 254, 336, 340, 343, 346, 347, 349, 351, 356, 360, 363, 364, 367, 510, 511, 512, 627, 692, 772, 776, 779, 786, 788, 791, 796, 800, 803, 804, 807, 945, 946, 947], "null_count": [141, 144, 254, 329, 594, 692, 762, 764, 987], "266667": [141, 254], "666667": [141, 178, 228, 242, 254, 375, 594, 668, 682, 692], "std": [141, 254, 457, 594, 692, 764, 894, 987], "101514": [141, 254], "707107": [141, 254, 376, 594, 817, 987], "57735": [141, 254], "median": [141, 188, 254, 460, 594, 671, 692, 764, 890, 987], "more_column": [142, 147, 201, 224, 254, 378, 558, 594, 614, 618, 652, 666, 692], "Or": [142, 158, 159, 160, 174, 207, 227, 234, 254, 444, 481, 545, 587, 594, 614, 625, 626, 627, 632, 659, 674, 692], "subset": [144, 184, 223, 254, 615, 665, 692], "snippet": [144, 254, 615, 692], "is_nul": [144, 254, 594, 615, 692, 987], "sizeunit": [146, 254, 815, 987], "heap": [146, 254, 815, 987], "its": [146, 254, 335, 361, 368, 481, 594, 771, 801, 808, 815, 987], "bitmap": [146, 254, 815, 987], "therefor": [146, 254, 587, 815, 987], "structarrai": [146, 254, 815, 987], "constant": [146, 160, 254, 381, 594, 627, 692, 815, 821, 987], "unchang": [146, 254, 527, 594, 636, 676, 692, 815, 971, 987], "capac": [146, 205, 254, 815, 908, 987], "ffi": [146, 254, 815, 987], "kb": [146, 254, 815, 987], "mb": [146, 254, 815, 987], "gb": [146, 254, 815, 987], "tb": [146, 254, 815, 987], "revers": [146, 254, 324, 325, 326, 327, 328, 421, 448, 520, 594, 692, 758, 759, 760, 761, 987], "1_000_000": [146, 254, 815, 987], "25888898": [146, 254], "689577102661133": [146, 254], "long": [147, 180, 225, 254, 618, 640, 692], "letter": [147, 239, 248, 254, 378, 492, 558, 594, 618, 679, 688, 692, 927], "thu": [148, 254, 548, 580, 700, 987], "faster": [148, 225, 254, 268, 457, 498, 531, 594, 656, 657, 692, 700, 701, 887, 933, 987], "onlin": [148, 254, 700, 987], "rerun": [148, 254, 700, 987], "fill_valu": [149, 204, 225, 254, 472, 594, 654, 692, 906, 987], "Not": [149, 254, 403, 405, 422, 594, 620, 692], "To": [149, 254, 332, 333, 357, 383, 485, 491, 492, 500, 583, 594, 620, 692, 797, 920, 926, 927, 935], "fillnullstrategi": [150, 254, 383, 594, 621, 692, 823, 987], "matches_supertyp": [150, 254, 621, 692], "forward": [150, 174, 254, 353, 383, 389, 594, 621, 632, 692, 793, 823, 987], "consecut": [150, 254, 307, 383, 389, 484, 594, 621, 692, 823, 919, 987], "supertyp": [150, 254, 267, 594, 621, 692], "fill_nan": [150, 254, 594, 692, 987], "OR": [151, 254, 538, 622, 692], "reduct": [153, 254], "supercast": [153, 254], "parent": [153, 254], "rule": [153, 254], "arithmet": [153, 254], "zip_with": [153, 254, 987], "foo11": [153, 254], "bar22": [153, 254], "null_equ": [154, 254, 900, 987], "retriev": [155, 254, 281, 282, 517, 714, 715, 952], "return_as_str": [157, 254], "preview": [157, 254], "nice": [157, 254], "few": [157, 254], "rather": [157, 174, 254, 516, 632, 692, 951], "head": [157, 176, 210, 254, 267, 414, 594, 635, 692, 857, 958, 987], "tail": [157, 162, 254, 267, 478, 594, 692, 830, 913, 987], "more_bi": [158, 186, 207, 254, 481, 594, 625, 659, 692], "maintain_ord": [158, 186, 188, 223, 227, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 262, 268, 306, 523, 530, 549, 594, 612, 617, 619, 625, 645, 655, 656, 657, 665, 675, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 692, 739, 763, 879, 973, 987], "consist": [158, 186, 254, 510, 625, 692, 945], "agg": [158, 159, 160, 254, 262, 268, 384, 386, 480, 481, 523, 535, 549, 594, 612, 617, 619, 625, 626, 627, 645, 655, 692], "index_column": [159, 160, 254, 626, 627, 692], "include_boundari": [159, 254, 626, 692], "start_bi": [159, 254, 626, 692], "startbi": [159, 254, 626, 692], "dynamicgroupbi": [159, 254], "groupbi": [159, 160, 184, 254, 262, 268, 287, 329, 384, 386, 444, 480, 481, 523, 535, 539, 549, 594, 612, 617, 619, 626, 627, 645, 655, 692, 720, 762, 987], "member": [159, 254, 626, 692, 842, 987], "seen": [159, 254, 307, 389, 594, 626, 692], "roll": [159, 160, 254, 353, 354, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 546, 577, 578, 594, 626, 627, 692, 793, 794, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 987], "slot": [159, 254, 286, 329, 330, 594, 626, 692, 719, 762, 765, 987], "1n": [159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 627, 632, 692, 797, 801, 808], "nanosecond": [159, 160, 174, 227, 254, 357, 361, 362, 368, 458, 459, 460, 461, 462, 464, 465, 466, 556, 594, 626, 627, 632, 692, 797, 801, 802, 808], "1u": [159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 627, 632, 692, 797, 801, 808], "microsecond": [159, 160, 174, 227, 254, 357, 361, 362, 368, 458, 459, 460, 461, 462, 464, 465, 466, 555, 556, 585, 594, 626, 627, 632, 645, 692, 797, 801, 808], "1m": [159, 160, 174, 227, 254, 346, 347, 349, 356, 357, 361, 363, 368, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 627, 632, 692, 786, 788, 796, 797, 801, 803, 808], "millisecond": [159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 556, 594, 626, 627, 632, 692, 797, 801, 808], "1w": [159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 627, 632, 692, 797, 801, 808], "week": [159, 160, 174, 227, 254, 357, 361, 368, 370, 458, 459, 460, 461, 462, 464, 465, 466, 556, 594, 626, 627, 632, 692, 797, 801, 808, 810], "1y": [159, 160, 174, 227, 254, 344, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 627, 632, 692, 780, 797, 801, 808, 812], "1i": [159, 160, 174, 227, 254, 357, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 627, 632, 692, 797], "suffix": [159, 160, 173, 174, 200, 227, 231, 234, 254, 263, 311, 357, 361, 368, 403, 405, 406, 407, 421, 444, 448, 456, 458, 459, 460, 461, 462, 464, 465, 466, 489, 594, 626, 627, 631, 632, 651, 670, 671, 674, 692, 743, 797, 801, 808, 924], "_satur": [159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 627, 632, 692, 797, 801, 808], "satur": [159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 627, 632, 692, 797, 801, 808], "10i": [159, 160, 254, 626, 627, 692], "ascend": [159, 160, 254, 626, 627, 692], "often": [159, 160, 254, 285, 454, 594, 626, 627, 692, 718], "dynam": [159, 254, 305, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 692, 738], "matter": [159, 160, 171, 197, 214, 254, 626, 627, 692], "_lower_bound": [159, 254, 626, 692], "_upper_bound": [159, 254, 626, 692], "impact": [159, 254, 626, 692], "harder": [159, 254, 626, 692], "inclus": [159, 160, 254, 397, 458, 459, 460, 461, 462, 464, 465, 466, 505, 506, 594, 626, 627, 692, 835, 940, 941, 987], "datapoint": [159, 254, 626, 692], "mondai": [159, 254, 370, 626, 692, 810], "tuesdai": [159, 254, 626, 692], "wednesdai": [159, 254, 626, 692], "thursdai": [159, 254, 626, 692], "fridai": [159, 254, 626, 692], "saturdai": [159, 254, 626, 692], "sundai": [159, 254, 370, 626, 692, 810], "date_rang": [159, 227, 254, 334, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 366, 368, 369, 370, 371, 372, 626, 692, 770, 772, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 808, 809, 810, 811, 812], "30m": [159, 254, 361, 368, 626, 692, 801, 808], "time_min": [159, 254, 626, 692], "time_max": [159, 254, 626, 692], "boundari": [159, 254, 318, 319, 320, 594, 626, 692, 752, 753, 754, 831, 987], "time_count": [159, 254, 626, 692], "_lower_boundari": [159, 254, 626, 692], "_upper_boundari": [159, 254, 626, 692], "lower_bound": [159, 254, 318, 320, 397, 594, 626, 692, 752, 754, 835, 975, 987], "upper_bound": [159, 254, 305, 318, 319, 397, 594, 626, 692, 752, 753, 835, 861, 987], "time_agg_list": [159, 254, 626, 692], "arang": [159, 225, 236, 254, 626, 676, 692], "2i": [159, 254, 626, 692], "3i": [159, 254, 626, 692], "a_agg_list": [159, 254, 626, 692], "rollinggroupbi": [160, 254], "dynamic_groupbi": [160, 254, 627, 692], "groupby_dynam": [160, 254, 627, 692], "43": [160, 254, 328, 594, 627, 692], "strptime": [160, 254, 360, 627, 692, 800], "set_sort": [160, 174, 227, 254, 594, 627, 632, 692, 987], "2d": [160, 217, 254, 566, 627, 692, 775], "sum_a": [160, 254, 627, 692], "min_a": [160, 254, 627, 692], "max_a": [160, 254, 627, 692], "seed": [161, 198, 254, 392, 451, 468, 474, 594, 829, 881, 898, 909, 987], "seed_1": [161, 254, 392, 594, 829, 987], "seed_2": [161, 254, 392, 594, 829, 987], "seed_3": [161, 254, 392, 594, 829, 987], "hash": [161, 254, 594, 987], "u64": [161, 254, 392, 453, 594, 645, 692, 829, 987], "10783150408545073287": [161, 254], "1438741209321515184": [161, 254], "10047419486152048166": [161, 254], "2047317070637311557": [161, 254], "ab": [162, 176, 210, 231, 254, 517, 518, 594, 670, 692, 830, 857, 958, 987], "grown": [164, 254], "baz": [165, 166, 188, 224, 254, 505, 507, 630, 666, 692, 942], "intermedi": [166, 254, 630, 692, 834, 987, 995], "linear": [166, 190, 246, 254, 283, 396, 425, 450, 462, 546, 547, 574, 594, 630, 646, 686, 692, 716, 834, 880, 892, 987], "mask": [167, 169, 254, 284, 308, 309, 398, 400, 408, 485, 487, 594, 717, 740, 741, 824, 835, 837, 840, 852, 876, 877, 901, 920, 922, 979, 987], "visual": [167, 169, 254], "buffer_s": [171, 254], "intern": [171, 254], "veri": [171, 222, 254, 268, 594, 611, 692, 755, 987], "fit": [171, 205, 225, 254, 473, 594, 907, 908, 987], "signific": [171, 254, 268, 594], "4x": [171, 254], "materialis": [171, 172, 196, 197, 254], "iter_row": [172, 196, 197, 254], "17_500": [172, 254], "klmnoopqrstuvwxyz": [172, 254], "__name__": [172, 254], "7500": [172, 254], "15_000": [172, 254], "record_batch": [172, 254], "to_arrow": [172, 254, 987], "to_batch": [172, 254], "date32": [172, 254], "large_str": [172, 212, 218, 254], "15000": [172, 254], "2500": [172, 254], "left_on": [173, 174, 254, 631, 632, 692], "right_on": [173, 174, 254, 631, 632, 692], "_right": [173, 174, 254, 631, 632, 692], "semi": [173, 254, 631, 692], "anti": [173, 254, 631, 692, 901, 902, 987], "cross": [173, 254, 631, 692], "join_asof": [173, 254, 631, 692], "stringcach": [173, 254, 605], "other_df": [173, 254], "by_left": [174, 254, 632, 692], "by_right": [174, 254, 632, 692], "asofjoinstrategi": [174, 254, 632, 692], "allow_parallel": [174, 254, 631, 632, 692], "force_parallel": [174, 254, 631, 632, 692], "asof": [174, 254, 632, 692], "asof_join": [174, 254], "search": [174, 254, 632, 692], "greater": [174, 254, 390, 391, 478, 507, 594, 632, 692, 913, 942, 987], "distanc": [174, 254, 632, 692, 831, 987], "plan": [174, 175, 254, 609, 617, 624, 631, 632, 647, 655, 673, 692], "gdp": [174, 254, 632, 692], "2016": [174, 254, 632, 692], "2017": [174, 254, 632, 692], "2018": [174, 254, 360, 632, 692, 800], "2019": [174, 254, 632, 692], "record": [174, 217, 254, 632, 692], "jan": [174, 254, 632, 692], "1st": [174, 254, 632, 692], "4164": [174, 254, 632, 692], "4411": [174, 254, 632, 692], "4566": [174, 254, 632, 692], "4696": [174, 254, 632, 692], "popul": [174, 254, 632, 692], "12th": [174, 254, 632, 692], "82": [174, 254, 632, 692], "66": [174, 254, 536, 594, 632, 692, 892, 987], "83": [174, 254, 632, 692], "52": [174, 231, 254, 467, 594, 632, 670, 692], "request": [175, 254], "describe_plan": [175, 254, 692], "unoptim": [175, 254, 692], "describe_optimized_plan": [175, 254, 692], "show_graph": [175, 254, 692], "un": [175, 254], "graphviz": [175, 254, 655, 692], "axi": [177, 178, 180, 182, 209, 254, 640, 692], "null_strategi": [178, 209, 254], "nullstrategi": [178, 209, 254], "spam": [178, 254, 492, 927], "id_var": [180, 254, 640, 692], "value_var": [180, 254, 640, 692], "variable_nam": [180, 254, 640, 692], "value_nam": [180, 254, 640, 692], "unpivot": [180, 254, 640, 692], "leav": [180, 254, 305, 640, 692], "massag": [180, 254, 640, 692], "measur": [180, 254, 640, 692], "merg": [181, 254, 641, 692], "caller": [181, 254, 305, 636, 641, 676, 692], "respons": [181, 254, 641, 692], "what": [184, 254, 969, 978, 987], "pack": [184, 254], "expr_unique_subset": [184, 254], "df_nuniqu": [184, 254], "df_agg_nuniqu": [184, 254], "offer": [187, 254, 446, 594, 644, 692], "fulli": [187, 198, 254], "cast_str_to_int": [187, 254, 644, 692], "col_nam": [187, 254, 421, 594, 644, 692], "tdf": [187, 254, 644, 692], "aggregate_funct": [188, 254], "pivotagg": [188, 254], "nodefault": [188, 254, 510, 945], "sort_column": [188, 254], "predefin": [188, 254], "predict": [188, 191, 227, 254], "transpos": [188, 254], "discoveri": [188, 254], "col1": [188, 225, 254, 692, 995], "col2": [188, 225, 254, 692, 995], "col3": [188, 254, 995], "tanh": [188, 254, 594, 987], "998347": [188, 254], "964028": [188, 254], "999954": [188, 254], "interpol": [190, 246, 254, 383, 425, 450, 462, 574, 594, 646, 686, 692, 880, 892, 987], "rollinginterpolationmethod": [190, 246, 254, 450, 462, 574, 594, 646, 686, 692, 880, 892, 987], "midpoint": [190, 246, 254, 450, 462, 574, 594, 646, 686, 692, 880, 892, 987], "by_pred": [196, 254], "accord": [196, 254, 422, 594, 781], "never": [196, 254], "mutual": [196, 254], "exclus": [196, 254, 536, 594], "addition": [196, 254], "clariti": [196, 254], "toomanyrowsreturnederror": [196, 254, 605], "norowsreturnederror": [196, 254, 605], "inherit": [196, 254], "rowserror": [196, 254, 605], "with_replac": [198, 254, 468, 594, 898, 987], "shuffl": [198, 236, 254, 468, 594, 676, 898, 987], "modul": [198, 254, 468, 474, 593, 594, 898, 909, 987], "more_expr": [200, 231, 254, 444, 537, 538, 542, 544, 546, 547, 553, 568, 571, 579, 582, 583, 594, 651, 670, 692], "named_expr": [200, 231, 254, 579, 582, 651, 670, 692], "threshold": [200, 254, 651, 692], "set_auto_structifi": [200, 231, 254, 651, 670, 692], "auto_structifi": [200, 231, 254, 651, 670, 692], "is_odd": [200, 254, 651, 692], "_is_odd": [200, 254, 651, 692], "shift_and_fil": [203, 254, 594, 692, 987], "shift": [204, 254, 286, 330, 445, 472, 546, 594, 654, 692, 719, 765, 875, 906, 987], "shrink": [205, 254, 473, 594, 907, 908, 987], "hold": [205, 254], "ddof": [208, 228, 254, 483, 534, 548, 573, 577, 578, 580, 581, 586, 594, 660, 668, 692, 917, 977, 987], "deviat": [208, 254, 376, 464, 483, 581, 594, 660, 692, 817, 917, 987], "degre": [208, 228, 254, 483, 534, 548, 573, 577, 578, 580, 581, 586, 594, 660, 668, 692, 917, 977, 987], "freedom": [208, 228, 254, 483, 534, 548, 573, 577, 578, 580, 581, 586, 594, 660, 668, 692, 917, 977, 987], "divisor": [208, 228, 254, 483, 534, 548, 573, 577, 578, 580, 581, 586, 594, 660, 668, 692, 917, 977, 987], "816497": [208, 254], "21": [209, 254, 562], "16a": [209, 254], "27b": [209, 254], "38c": [209, 254], "nth": [211, 254, 507, 524, 594, 663, 692, 942, 960, 987], "mostli": [212, 254, 384, 594], "categoricaltyp": [212, 254], "as_seri": [213, 254], "fruit": [213, 254, 448, 456, 489, 508, 520, 594, 924, 943], "car": [213, 254, 448, 456, 520, 594], "beetl": [213, 254, 448, 456, 520, 594], "audi": [213, 254, 448, 456, 520, 594], "300": [213, 254, 888, 889, 891, 987], "instantiat": [216, 254, 967, 987], "from_repr": [216, 254, 967, 987], "df_from_str_repr": [216, 254], "eval": [216, 254, 557, 967, 987], "correspond": [217, 254, 345, 451, 594, 781, 881, 987], "re": [217, 254, 353, 354, 793, 794], "ll": [217, 254], "u1": [217, 254], "f4": [217, 254], "view": [217, 254, 969, 987], "recarrai": [217, 254], "rec": [217, 254], "use_pyarrow_extension_arrai": [218, 254, 970, 987], "trigger": [218, 254, 970, 987], "sent": [218, 254, 969, 970, 987], "pandas_df1": [218, 254], "pandas_df2": [218, 254], "pandas_df2_pa": [218, 254], "na": [218, 254, 970, 987], "get_column": [219, 254, 583], "four": [220, 254], "five": [220, 254, 995], "bottom_k": [221, 254, 528, 594, 664, 692, 972, 987], "include_head": [222, 254], "header_nam": [222, 254], "column_nam": [222, 254], "perhap": [222, 254], "column_2": [222, 254], "name_gener": [222, 254], "base_nam": [222, 254], "my_column_": [222, 254], "my_column_0": [222, 254], "my_column_1": [222, 254], "my_column_2": [222, 254], "uniquekeepstrategi": [223, 254, 665, 692], "kept": [223, 254, 665, 692], "decompos": [224, 254, 666, 692], "t_a": [224, 254, 666, 692], "t_b": [224, 254, 666, 692], "t_c": [224, 254, 666, 692], "t_d": [224, 254, 666, 692], "womp": [224, 254, 666, 692], "t_": [224, 254, 666, 692], "t_struct": [224, 254, 666, 692], "step": [225, 254, 541], "unstackdirect": [225, 254], "much": [225, 254, 304, 329, 594, 737, 762, 987], "pivot": [225, 254], "phase": [225, 254], "subject": [225, 254], "ascii_uppercas": [225, 254], "h": [225, 254, 261, 364, 367, 473, 510, 512, 514, 594, 945, 947, 949], "col1_0": [225, 254], "col1_1": [225, 254], "col1_2": [225, 254], "col2_0": [225, 254], "col2_1": [225, 254], "col2_2": [225, 254], "syntact": [226, 254, 558, 559, 563, 574, 579, 667, 692, 916, 987], "sugar": [226, 254, 558, 559, 563, 574, 579, 667, 692, 916, 987], "coalesc": [226, 254, 510, 667, 692, 945], "400": [226, 254, 667, 692, 888, 889, 891, 987], "600": [226, 254, 667, 692], "700": [226, 254, 667, 692], "new_df": [226, 254, 667, 692], "time_column": [227, 254], "frequenc": [227, 254], "forward_fil": [227, 254, 325, 328, 594], "varianc": [228, 254, 377, 410, 466, 534, 586, 594, 668, 692, 818, 855, 896, 977, 987], "grow": [229, 254], "is_not": [231, 254, 594, 670, 692], "not_c": [231, 254, 670, 692], "diff": [231, 254, 340, 343, 347, 349, 351, 356, 363, 594, 670, 692, 776, 779, 786, 788, 791, 796, 803, 987], "_diff": [231, 254, 670, 692], "row_nr": [232, 254, 422, 594, 672, 692, 902, 987], "more_agg": [234, 674], "named_agg": [234, 674], "_sum": [234, 674], "_mean_squar": [234, 674], "b_sum": [234, 674], "c_mean_squar": [234, 674], "sub": [236, 594], "triangl": [236, 676], "group_df": [236, 676], "deem": [237, 323, 549, 594, 677], "nr": [239, 248, 679, 688], "maxim": [241, 276, 594, 681, 708, 987], "833333": [242, 682], "minim": [244, 277, 282, 473, 481, 594, 684, 709, 715, 866, 907, 987], "overview": [254, 594, 605, 692, 987, 995], "public": [254, 594, 605, 692, 987], "frameinittyp": [254, 692], "variou": [254, 594, 692, 987], "entri": [254, 692], "prevent": [254, 327, 328, 409, 521, 594, 692, 760, 761, 957, 987], "come": [254, 353, 354, 410, 594, 606, 691, 692, 793, 794, 855, 987], "behavior": [254, 268, 304, 539, 594, 737], "mydatafram": 254, "notic": [254, 692, 987], "df4": 254, "df5": 254, "df6": 254, "corr": [254, 573, 580], "drop_in_plac": 254, "drop_nul": [254, 332, 594, 692, 987], "estimated_s": [254, 987], "explod": [254, 386, 455, 594, 692, 885, 987], "find_idx_by_nam": 254, "fold": [254, 431, 544, 551, 552, 575], "frame_equ": [254, 361, 368], "groupby_rol": [254, 458, 459, 460, 461, 462, 464, 465, 466, 594, 626, 692], "hash_row": 254, "hstack": 254, "insert_at_idx": 254, "is_dupl": [254, 594, 987], "is_empti": [254, 987], "is_uniqu": [254, 594, 987], "iter_slic": 254, "melt": [254, 692], "merge_sort": [254, 692], "n_uniqu": [254, 594, 987], "pipe": [254, 594, 692], "quantil": [254, 462, 594, 692, 879, 892, 987], "replace_at_idx": 254, "shrink_to_fit": [254, 987], "take_everi": [254, 594, 692, 987], "to_dict": 254, "to_numpi": [254, 420, 594, 987], "to_panda": [254, 987], "to_struct": [254, 492], "unnest": [254, 492, 506, 507, 518, 692, 738, 941, 942], "unstack": 254, "upsampl": 254, "write_avro": 254, "write_databas": 254, "write_delta": 254, "write_excel": 254, "write_json": [254, 647, 692], "write_parquet": 254, "cumprod": [261, 594, 987], "ghi": [261, 492, 594, 927], "94": [262, 594], "map_alia": [263, 448, 520, 594], "confus": [264, 403, 405, 594], "tt": [264, 594], "tf": [264, 266, 594], "ff": [264, 266, 594], "upcast": [267, 594], "skip_nul": [268, 594, 701, 987], "pass_nam": [268, 594], "applystrategi": [268, 594], "thread_loc": [268, 594], "unknown": [268, 422, 491, 566, 594, 926], "stage": [268, 594], "speed": [268, 594, 657, 692], "code": [268, 470, 594, 634, 692, 903, 987], "amount": [268, 594], "releas": [268, 594, 995], "gil": [268, 594], "discourag": [268, 594], "loop": [268, 594], "a_times_2": [268, 594], "approx": [269, 540, 594, 692], "hyperloglog": [269, 540, 594, 692], "algorithm": [269, 540, 594, 692], "cardin": [269, 540, 594, 692], "invers": [270, 271, 272, 273, 274, 275, 594, 702, 703, 704, 705, 706, 707, 987], "cosin": [270, 271, 321, 322, 420, 594, 702, 703, 756, 757, 987], "570796": [270, 272, 594, 702, 704, 987], "hyperbol": [271, 273, 275, 322, 477, 526, 594, 703, 705, 707, 757, 912, 962, 987], "sine": [272, 273, 420, 476, 477, 594, 704, 705, 911, 912, 987], "881374": [273, 594, 705, 987], "tangent": [274, 275, 525, 526, 594, 706, 707, 961, 962, 987], "785398": [274, 594, 706, 987], "arg_wher": [279, 594], "sublist": [281, 282, 284, 286, 289, 290, 291, 292, 293, 300, 303, 304, 305, 714, 715, 717, 719, 722, 723, 724, 725, 726, 733, 736, 737, 738, 842, 987], "membership": [284, 717], "listcol": 285, "number_of_two": 285, "null_behavior": [286, 330, 594, 719, 765, 987], "nullbehavior": [286, 330, 594, 719, 765, 987], "th": [286, 330, 478, 594, 719, 765, 913, 987], "blindli": [287, 720], "worth": [287, 720], "enough": [287, 478, 594, 720, 913, 987], "concat_list": [287, 557, 720], "rank": [287, 548, 557, 580, 594, 720, 987], "exprnamespac": 288, "reshap": [288, 594, 721, 987], "flat": [288, 455, 594, 721, 885, 987], "taken": [300, 504, 523, 594, 733, 939], "null_on_oob": [304, 737], "cheaper": [304, 737], "n_field_strategi": [305, 738], "tostructstrategi": [305, 738], "first_non_nul": [305, 738], "max_width": [305, 738], "field_0": [305, 738], "field_1": [305, 738], "field_n": [305, 738], "incorrectli": 305, "pre": 305, "n0": 305, "n1": 305, "maintain": [306, 469, 530, 594, 656, 657, 692, 739, 899, 973, 987], "substr": [308, 311, 312, 485, 489, 500, 501, 505, 506, 507, 508, 740, 743, 744, 920, 924, 935, 936, 940, 941, 942, 943], "transferencod": [309, 310, 487, 488, 741, 742, 922, 923], "strict": [309, 315, 485, 487, 499, 510, 511, 512, 514, 594, 741, 746, 900, 920, 922, 934, 945, 946, 947, 949, 987], "hex": [309, 310, 487, 488, 499, 741, 742, 922, 923, 934], "base64": [309, 310, 487, 488, 741, 742, 922, 923], "complex": [313, 329, 528, 594, 745, 762, 972, 987], "frac": [313, 375, 376, 377, 478, 528, 594, 745, 816, 817, 818, 913, 972, 987], "hurt": [314, 594], "lot": [314, 594], "content": [314, 474, 533, 594, 909, 987], "problem": [314, 594], "due": [315, 360, 594, 746, 800, 987], "overflow": [315, 327, 328, 499, 521, 594, 746, 760, 761, 934, 957, 987], "categoricalord": [316, 748], "lexic": [316, 748], "foo_clip": [318, 319, 320, 594], "clip": [319, 320, 594, 753, 754, 987], "543081": [322, 594, 757, 987], "cumul": [324, 325, 326, 327, 328, 551, 552, 553, 594, 758, 759, 760, 761, 987], "a_revers": [324, 325, 326, 327, 328, 421, 456, 520, 594], "value_cummax": [325, 594], "value_cummax_all_fil": [325, 594], "value_cumsum": [328, 594], "value_cumsum_all_fil": [328, 594], "min_period": [329, 375, 376, 377, 457, 458, 459, 460, 461, 462, 464, 465, 466, 577, 578, 594, 762, 816, 817, 818, 887, 888, 889, 890, 891, 892, 894, 895, 896, 987], "slide": [329, 594, 762, 987], "realli": [329, 594, 762, 987], "visit": [329, 594, 762, 987], "drop_nan": [333, 594, 987], "lose": [334, 770], "2001": [334, 339, 341, 342, 344, 345, 350, 352, 357, 358, 359, 361, 362, 366, 368, 369, 370, 371, 372, 510, 770, 775, 777, 778, 780, 782, 783, 784, 785, 787, 789, 790, 792, 795, 797, 798, 799, 801, 802, 806, 808, 809, 810, 811, 812, 945], "time_unit_m": [334, 770], "time_unit_n": [334, 770], "naiv": [335, 771], "compon": [335, 362, 510, 512, 556, 771, 802, 945, 947], "resolv": 335, "456000": [335, 771], "101000": 335, "456": [335, 771, 966, 987], "101": [335, 499, 934, 995], "d1": 335, "d2": 335, "d3": 335, "utc": [336, 360, 510, 512, 772, 800, 945, 947], "europ": [336, 360, 772, 800], "london": [336, 360, 772, 800], "gmt": [336, 360, 772, 800], "bst": [336, 360, 772, 800], "weekdai": [339, 358], "day_of_month": [339, 358, 370], "ordinal_dai": [339, 370], "day_of_year": [339, 358, 370], "days_diff": 340, "epochtimeunit": [341, 562, 777], "unix": [341, 562, 777], "epoch_n": [341, 777], "epoch_": [341, 777], "978307200000000": [341, 366, 777, 806], "978307200": [341, 777], "978393600000000": [341, 366, 777, 806], "978393600": [341, 777], "978480000000000": [341, 366, 777, 806], "978480000": [341, 777], "hours_diff": 343, "leap": [344, 357, 780, 797], "2000": [344, 346, 353, 354, 357, 780, 793, 794, 797], "2002": [344, 345, 357, 359, 372, 780, 797, 812], "iso": [345, 369, 370, 781, 809, 810], "2006": [345, 357, 797], "180": [345, 359, 372], "2004": [345, 357, 797], "2005": [345, 357, 797], "1_001": [346, 347, 349, 356], "002": [346, 347, 349, 356, 556, 786, 788, 796], "003": [346, 347, 349, 356], "3000": 346, "997": [346, 347, 349, 356], "997000": 346, "998": [346, 347, 349, 356], "998000": 346, "999": [346, 347, 349, 356, 995], "999000": 346, "microseconds_diff": 347, "milliseconds_diff": 349, "minutes_diff": 351, "1440": [351, 791], "think": [353, 354, 793, 794], "vectoris": [353, 354, 793, 794], "tseri": [353, 354, 793, 794], "monthend": [353, 793], "rollforward": [353, 793], "monthbegin": [354, 794], "rollback": [354, 794], "nanoseconds_diff": 356, "1000000": [356, 516, 796], "minu": [357, 797], "dictat": [357, 797], "date_plus_1i": [357, 797], "1y2mo": [357, 797], "date_min": 357, "1998": [357, 797], "1999": [357, 797], "2003": [357, 562, 797], "ordin": [358, 451, 594, 798, 881, 987], "366": [358, 798], "use_earliest": [360, 800], "convert_time_zon": [360, 800], "ambigu": [360, 800], "sai": [360, 800], "daylight": [360, 800], "earliest": [360, 800], "london_timezon": [360, 800], "amsterdam": [360, 800], "london_to_amsterdam": [360, 800], "cet": [360, 800], "cest": [360, 800], "dst": [360, 800], "ts_local": [360, 800], "brussel": [360, 800], "half": [361, 375, 376, 377, 594, 801, 816, 817, 818, 987], "225": [361, 368], "to_fram": [361, 368, 510, 901, 902, 941, 942, 945, 987], "10m": [361, 368, 801, 808], "milli": [362, 802], "micro": [362, 802], "456789": 362, "654321": 362, "111110": 362, "765431": 362, "sec": [362, 995], "11111": 362, "seconds_diff": 363, "to_str": [364, 804], "datetime_str": [364, 367], "timestamp_n": [366, 806], "timestamp_m": 366, "978307200000": 366, "978393600000": 366, "978480000000": 366, "strftime": [367, 807], "1mo_satur": 368, "53": [369, 809], "incorrect": [371, 470, 594, 676, 811, 903, 987], "time_unit_u": [371, 811], "32971": [371, 811], "32974": [371, 811], "32976": [371, 811], "718281828459045": [373, 415, 594, 814, 858, 987], "pk": [373, 594, 814, 987], "459148": [373, 594], "754888": [373, 594], "span": [375, 376, 377, 594, 816, 817, 818, 987], "half_lif": [375, 376, 377, 594, 816, 817, 818, 987], "adjust": [375, 376, 377, 478, 594, 816, 817, 818, 913, 987], "ignore_nul": [375, 376, 377, 594, 816, 817, 818, 978, 987], "exponenti": [375, 376, 377, 379, 447, 594, 816, 817, 818, 819, 987], "weight": [375, 376, 377, 457, 458, 459, 460, 461, 462, 464, 465, 466, 478, 594, 816, 817, 818, 887, 888, 889, 890, 891, 892, 894, 895, 896, 913, 987], "decai": [375, 376, 377, 594, 816, 817, 818, 987], "term": [375, 376, 377, 495, 498, 594, 816, 817, 818, 930, 933, 987], "mass": [375, 376, 377, 594, 816, 817, 818, 987], "gamma": [375, 376, 377, 594, 816, 817, 818, 987], "foral": [375, 376, 377, 594, 816, 817, 818, 987], "geq": [375, 376, 377, 594, 816, 817, 818, 987], "theta": [375, 376, 377, 594, 816, 817, 818, 987], "life": [375, 376, 377, 594, 816, 817, 818, 987], "exp": [375, 376, 377, 594, 816, 817, 818, 987], "ln": [375, 376, 377, 594, 816, 817, 818, 987], "smooth": [375, 376, 377, 594, 816, 817, 818, 987], "factor": [375, 376, 377, 527, 594, 816, 817, 818, 971, 987], "leq": [375, 376, 377, 594, 816, 817, 818, 987], "imbal": [375, 376, 377, 594, 816, 817, 818, 987], "ew": [375, 376, 377, 594, 816, 817, 818, 987], "w_i": [375, 376, 377, 594, 816, 817, 818, 987], "recurs": [375, 376, 377, 594, 816, 817, 818, 987], "y_0": [375, 376, 377, 594, 816, 817, 818, 987], "x_0": [375, 376, 377, 594, 816, 817, 818, 987], "y_t": [375, 376, 377, 594, 816, 817, 818, 987], "y_": [375, 376, 377, 594, 816, 817, 818, 987], "x_t": [375, 376, 377, 594, 816, 817, 818, 987], "observ": [375, 376, 377, 594, 816, 817, 818, 987], "x_2": [375, 376, 377, 594, 816, 817, 818, 987], "428571": [375, 594], "bia": [376, 377, 410, 463, 478, 594, 817, 818, 855, 893, 913, 987], "unbias": [376, 377, 594, 817, 818, 987], "963624": [376, 594, 817, 987], "928571": [377, 594, 818, 987], "wildcard": [378, 545, 551, 552, 560, 575, 594], "regex": [378, 428, 485, 486, 489, 491, 492, 500, 501, 508, 558, 583, 594, 920, 921, 924, 926, 927, 935, 936, 943], "aa": [378, 485, 558, 594, 920], "ba": [378, 558, 594], "cc": [378, 558, 594], "718282": [379, 594], "389056": [379, 594], "54": [379, 594, 995], "59815": [379, 594], "expand": [380, 427, 428, 454, 594, 820, 987], "exprlistnamespac": [380, 386, 455, 594], "exprstringnamespac": [380, 594], "pythonliter": [381, 568, 571, 594, 821, 863, 866, 987], "extrem": [381, 594, 821, 987], "group_col": [384, 535, 594], "g1": [384, 535, 594], "g2": [384, 535, 594], "lt": [384, 535, 594, 987], "gte": [384, 535, 594], "divis": [388, 529, 594], "truediv": [388, 594], "9774092659964970114": [392, 594], "13614470193936745724": [392, 594], "1101441246220388612": [392, 594], "11638928888656214026": [392, 594], "13382926553367784577": [392, 594], "cumsum": [395, 519, 594, 629, 692, 854, 987], "interpolationmethod": [396, 594, 834, 987], "regrid": [396, 594], "grid": [396, 594], "df_original_grid": [396, 594], "grid_point": [396, 594], "df_new_grid": [396, 594], "conflat": [397, 594], "finit": [399, 529, 548, 580, 594, 839, 987], "primit": [401, 594, 969, 987], "optional_memb": [401, 594, 842, 987], "infinit": [402, 529, 594, 843, 987], "_isnan": [403, 594], "b_isnan": [403, 594], "negat": [404, 594], "_is_not_nan": [405, 594], "b_is_not_nan": [405, 594], "_not_nul": [406, 594], "a_not_nul": [406, 594], "b_not_nul": [406, 594], "_isnul": [407, 594], "a_isnul": [407, 594], "b_isnul": [407, 594], "undo": [409, 433, 594], "duplicateerror": [409, 594, 605], "occurr": [409, 594, 831, 987], "333333": [409, 466, 594, 875, 896, 987], "fisher": [410, 478, 594, 855, 913, 987], "fourth": [410, 594, 855, 987], "subtract": [410, 519, 594, 855, 987], "distribut": [410, 478, 594, 855, 913, 987], "elimin": [410, 594, 855, 987], "bias": [410, 478, 594, 855, 913, 987], "scipi": [410, 478, 594, 855, 913, 987], "stat": [410, 478, 594, 855, 913, 987], "153061": [410, 594], "logarithm": [415, 416, 417, 594, 858, 859, 860, 987], "584963": [415, 594], "30103": [416, 594], "60206": [416, 594], "natur": [417, 594, 860, 987], "plu": [417, 594, 860, 987], "693147": [417, 594], "098612": [417, 594], "386294": [417, 594], "lowest": [418, 594], "9223372036854775808": [418, 594], "agg_list": [420, 594], "elementwis": [420, 457, 458, 459, 460, 461, 462, 464, 465, 466, 594, 887, 888, 889, 890, 891, 892, 894, 895, 896, 987], "parti": [420, 594], "book": [420, 594], "map_dict": [420, 594, 987], "argmax": [420, 594], "_revers": [421, 456, 520, 594], "rsplit": [421, 594], "b_revers": [421, 456, 520, 594], "remap": [422, 594, 862, 987], "lookup": [422, 594, 862, 987], "country_code_dict": [422, 594], "ca": [422, 594], "canada": [422, 594], "de": [422, 594], "germani": [422, 594], "fr": [422, 594], "franc": [422, 594], "country_cod": [422, 594], "rest": [422, 594], "exprmetanamespac": [426, 429], "computeerror": [430, 499, 605, 934], "keep_nam": [433, 594], "modulu": [435, 594], "xlog2": [437, 447, 594], "poison": [439, 440, 594, 871, 872, 987], "nanmax": [439, 440, 594, 871, 872, 987], "wherea": [439, 440, 594, 628, 635, 692, 871, 872, 987], "inequ": [441, 594], "outcom": [444, 594], "_max": [444, 594], "c_max": [444, 594], "_min": [444, 594], "c_min": [444, 594], "percent": [445, 594, 875, 987], "090909": [445, 594], "extract_numb": [446, 594], "digit": [446, 467, 492, 516, 594, 897, 921, 927, 951, 987, 995], "r": [446, 486, 490, 491, 492, 500, 594, 921, 925, 926, 927, 935], "scale_negative_even": [446, 594], "expon": [447, 594, 987], "reverse_": [448, 594], "reverse_a": [448, 594], "reverse_fruit": [448, 594], "reverse_b": [448, 594], "reverse_car": [448, 594], "rankmethod": [451, 594, 881, 987], "ti": [451, 594, 881, 987], "competit": [451, 594, 881, 987], "highest": [451, 532, 548, 580, 594, 692, 881, 987], "64bit": [453, 594, 883, 987], "safe": [453, 510, 594, 883, 945, 969, 987], "coerc": [454, 594], "fruits_revers": [456, 520, 594], "cars_revers": [456, 520, 594], "window_s": [457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 577, 578, 594, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 987], "rolling_min": [457, 594, 887, 987], "rolling_max": [457, 594, 887, 987], "rolling_mean": [457, 594, 887, 987], "rolling_sum": [457, 594, 887, 987], "multipli": [457, 458, 459, 460, 461, 462, 464, 465, 466, 594, 887, 888, 889, 890, 891, 892, 894, 895, 896, 987], "358899": [457, 594], "041452": [457, 594], "567764": [457, 594], "travers": [458, 459, 461, 464, 465, 466, 594, 888, 889, 891, 894, 895, 896, 987], "vector": [458, 459, 461, 464, 465, 466, 594, 888, 889, 891, 894, 895, 896, 987], "5h": [458, 459, 460, 461, 462, 464, 465, 466, 594], "skew": [463, 594, 893, 987], "527525": [464, 594, 894, 987], "searchsortedsid": [469, 594, 899, 987], "leftmost": [469, 594, 899, 987], "rightmost": [469, 594, 899, 987], "six": [469, 594], "downstream": [470, 594, 903, 987], "extrema": [473, 594, 907, 987], "112": [473, 594, 995], "129": [473, 594], "i8": [473, 594, 765, 886, 975, 987], "8589934592": [473, 594], "1073741824": [473, 594], "175201": [477, 594, 912, 987], "about": [478, 485, 491, 492, 500, 594, 913, 920, 926, 927, 935, 987, 995], "unimod": [478, 594, 913, 987], "skewtest": [478, 594, 913, 987], "speak": [478, 594, 913, 987], "g_1": [478, 594, 913, 987], "m_3": [478, 594, 913, 987], "m_2": [478, 594, 913, 987], "m_i": [478, 594, 913, 987], "sum_": [478, 594, 913, 987], "texttt": [478, 594, 913, 987], "k_3": [478, 594, 913, 987], "k_2": [478, 594, 913, 987], "sqrt": [478, 594, 913, 987], "343622": [478, 594], "value1": [481, 594], "value2": [481, 594], "attain": [481, 594], "414214": [482, 594, 916, 987], "ends_with": [485, 508, 943], "sensit": [485, 492, 500, 920, 927, 935], "ilmsuxu": [485, 491, 492, 500, 920, 926, 927, 935], "default_match": 485, "insensitive_match": 485, "section": [485, 491, 492, 500, 920, 926, 927, 935], "crab": [485, 920], "dog": [485, 513, 515, 547, 920], "rab": [485, 920], "success": [486, 492, 921, 927], "overlap": [486, 492, 921, 927], "captur": [486, 491, 492, 921, 926, 927], "123": [486, 492, 501, 921, 927, 936, 966, 987], "bla": [486, 492, 921, 927], "asd": [486, 492, 921, 927], "678": [486, 492, 921, 927], "910t": [486, 492, 921, 927], "count_digit": 486, "666f6f": [488, 923], "626172": [488, 923], "mango": [489, 508, 924, 943], "go": [489, 924], "has_suffix": 489, "group_index": [491, 926], "nthose": [491, 926], "nodd": [491, 926], "nthe": [491, 926], "url": [491, 926], "vote": [491, 926], "ballon_dor": [491, 926], "404": [491, 926], "ref": [491, 926], "candid": [491, 926], "messi": [491, 926], "ronaldo": [491, 926], "did": [492, 927], "email": [492, 927], "real": [492, 927], "some_account": [492, 927], "somewher": [492, 927], "net": [492, 927], "jkl": [492, 927], "uvw": [492, 927], "co": [492, 594, 927, 987], "uk": [492, 927], "address": 492, "xi": [492, 927], "insensit": [492, 500, 920, 927, 935], "quantifi": [492, 927], "arr": [492, 557, 595, 969, 987, 988], "email_part": [492, 927], "extracted_nr": 492, "910": [492, 927], "json_path_match": [493, 928], "jsonpath": [493, 494, 928, 929], "json_path": [494, 929], "regardless": [494, 929], "json_val": [494, 929], "n_char": [495, 930], "caf\u00e9": [495, 498, 930, 933], "345": [495, 498, 930, 933], "\u6771\u4eac": [495, 498, 930, 933], "nchar": [495, 498], "fill_char": [496, 502, 931, 937], "justifi": [496, 502, 931, 937], "pad": [496, 502, 516, 931, 937, 951], "cow": [496, 502, 931, 937], "monkei": [496, 502, 931, 937], "hippopotamu": [496, 502, 931, 937], "strip": [497, 503, 932, 938], "tworld": [497, 509, 932, 944], "wod": [497, 503, 932, 938], "rld": [497, 932], "text": [498, 500, 501, 933, 995], "radix": [499, 934], "parseerror": [499, 934], "becom": [499, 934], "silent": [499, 934], "110": [499, 934], "010": [499, 934], "fa1e": [499, 934], "ff00": [499, 934], "cafe": [499, 934], "64030": [499, 934], "65280": [499, 934], "51966": [499, 934], "replace_al": [500, 935], "citi": 500, "philadelphia": 500, "season": 500, "spring": 500, "summer": 500, "autumn": 500, "winter": 500, "weather": [500, 935], "raini": [500, 935], "sunni": [500, 935], "cloudi": 500, "snowi": 500, "foggi": [500, 935], "123abc": [500, 935], "abc456": [500, 935], "abcabc": [501, 936], "123a123": [501, 936], "bc": [501, 583, 936], "trail": [503, 509, 938, 944], "worl": [503, 509, 938, 944], "subslic": [504, 939], "pear": [504, 939], "papaya": [504, 939], "dragonfruit": [504, 939], "s_slice": 504, "ear": [504, 939], "aya": [504, 939], "uit": [504, 939], "ya": [504, 939], "onf": [504, 939], "a_1": [506, 941, 965, 987], "d_4": [506, 941], "rename_field": [506, 507, 941, 942], "first_part": [506, 507, 941, 942], "second_part": [506, 507, 941, 942], "remaind": [507, 942], "app": [508, 943], "has_prefix": 508, "polarstemporaltyp": [510, 945], "tz_awar": [510, 945], "anywher": [510, 511, 512, 945, 946, 947], "toggl": [510, 945], "futur": [510, 945], "3f": [510, 512, 945, 947], "00z": [510, 512, 945, 947], "sun": [510, 945], "jul": [510, 945], "34": [510, 945], "_tz_awar": 512, "lowercas": [513, 948], "variant": [513, 515], "uppercas": [515, 950], "100000": 516, "0010": 516, "0001": 516, "00000": 516, "00001": 516, "cd": [517, 518], "struct_col": [517, 518], "www": 518, "xxx": 518, "yyi": 518, "zzz": 518, "obvious": 518, "structfieldnotfounderror": [518, 605], "761594": [526, 594, 962, 987], "replic": [527, 594, 971, 987], "vals_phys": [527, 594], "floordiv": [529, 594], "ieee": [529, 594], "754": [529, 594], "mathemat": [529, 557, 594], "undefin": [529, 594], "On": [529, 594], "operand": [529, 594], "infin": [529, 594], "value_count": [531, 594, 987], "9223372036854775807": [532, 594], "multithread": [533, 594], "binary_str": [536, 594], "zfill": [536, 594], "250": [536, 594, 889, 987, 995], "bin_x": [536, 594], "bin_i": [536, 594], "xor_xi": [536, 594], "bin_xor_xi": [536, 594], "00001010": [536, 594], "00000001": [536, 594], "00001011": [536, 594], "00001000": [536, 594], "00000010": [536, 594], "11111010": [536, 594], "00000011": [536, 594], "249": [536, 594], "11111001": [536, 594], "01000010": [536, 594], "00000100": [536, 594], "70": [536, 594], "01000110": [536, 594], "bitwis": [537, 538], "AND": 537, "returns_scalar": 539, "product_a": 539, "49": 539, "Be": 541, "more_nam": 545, "hamburg": 545, "lag": 546, "mimic": 546, "a_lag_": 546, "a_rol": 546, "swim": 547, "walk": 547, "full_sent": 547, "correlationmethod": 548, "propagate_nan": [548, 580], "spearman": [548, 580], "larger": [548, 580, 656, 657, 692], "544705": [548, 573], "covari": [550, 578], "acc": [551, 552, 560, 575], "include_init": 551, "accumul": [551, 552, 560, 575], "fn": [551, 552, 560, 575], "new_valu": [551, 552, 560, 575], "cumreduc": 551, "tbl_width_char": 556, "120": 556, "add_week": 556, "add_dai": 556, "add_second": 556, "add_milli": 556, "add_hour": 556, "a_b_doubl": 557, "f_string": 561, "placehold": 561, "hello_": 561, "_world": 561, "foo_": 561, "_bar_": 561, "foo_a_bar_1": 561, "foo_b_bar_2": 561, "foo_c_bar_3": 561, "epoch": 562, "timestep": 562, "1666683077": 562, "1666683099": 562, "39": 562, "12345": [562, 749, 826, 897, 987], "12346": 562, "agg_group": [563, 594], "favor": [565, 573, 580], "implod": [565, 594, 987], "allow_object": 566, "valueexcept": 566, "foo_bar": 566, "test_func": 567, "605551": 581, "605551275463989": 581, "my_struct": 582, "q": 582, "selector": 583, "statement": 587, "chain": 587, "isn": 587, "thens": 587, "elif": 587, "pick": 587, "sometim": 593, "and_": 594, "approx_uniqu": [594, 692], "arcco": [594, 987], "arccosh": [594, 987], "arcsin": [594, 987], "arcsinh": [594, 987], "arctan": [594, 987], "arctanh": [594, 987], "arg_max": [594, 987], "arg_min": [594, 987], "arg_sort": [594, 987], "arg_uniqu": [594, 987], "backward_fil": 594, "clip_max": [594, 987], "clip_min": [594, 987], "cosh": [594, 987], "cumcount": 594, "cummax": [594, 987], "cummin": [594, 987], "cumulative_ev": [594, 987], "entropi": [594, 987], "eq": [594, 987], "ewm_mean": [594, 987], "ewm_std": [594, 987], "ewm_var": [594, 987], "extend_const": [594, 987], "flatten": 594, "ge": [594, 987], "gt": [594, 987], "inspect": [594, 692], "is_between": [594, 987], "is_finit": [594, 987], "is_first": [594, 987], "is_in": [594, 987], "is_infinit": [594, 987], "is_nan": [594, 987], "is_not_nan": [594, 987], "is_not_nul": [594, 987], "kurtosi": [594, 987], "le": [594, 987], "log10": [594, 987], "log1p": [594, 987], "mod": 594, "mul": 594, "nan_max": [594, 987], "nan_min": [594, 987], "ne": [594, 987], "or_": 594, "pct_chang": [594, 987], "pow": [594, 987], "reinterpret": [594, 987], "repeat_bi": 594, "rolling_appli": [594, 987], "rolling_median": [594, 987], "rolling_quantil": [594, 987], "rolling_skew": [594, 987], "rolling_std": [594, 987], "rolling_var": [594, 987], "search_sort": [594, 987], "shrink_dtyp": [594, 987], "sin": [594, 987], "sinh": [594, 987], "sort_bi": 594, "tan": [594, 987], "to_phys": [594, 987], "unique_count": [594, 987], "xor": 594, "expos": 605, "registr": 605, "miscellan": 605, "arrowerror": 605, "columnnotfounderror": 605, "invalidoperationerror": 605, "nodataerror": 605, "polarspanicerror": 605, "schemaerror": 605, "schemafieldnotfounderror": 605, "shapeerror": 605, "parametr": 605, "build_info": 605, "get_index_typ": 605, "show_vers": 605, "threadpool_s": 605, "sqlcontext": [605, 994], "hit": [609, 692], "node": [609, 629, 636, 640, 645, 648, 692], "huge": [612, 692], "saver": [612, 692], "purpos": [619, 692], "influenc": [619, 636, 692], "read_json": [624, 673, 692], "lazygroupbi": [625, 626, 627, 692], "other_lf": [631, 692], "validate_output_schema": [636, 692], "streamabl": [636, 640, 692], "past": [636, 692], "assum": [636, 676, 692], "paramount": [636, 692], "bug": [636, 676, 692], "elig": [636, 692], "invari": [636, 692], "upheld": [636, 692], "prune": [636, 692], "show_plot": [645, 692], "truncate_nod": [645, 692], "figsiz": [645, 655, 692], "gantt": [645, 692], "plot": [645, 655, 692], "groupby_partit": [645, 692], "470": [645, 692], "475": [645, 692], "1964": [645, 692], "from_json": [647, 692], "swap": [648, 692], "output_path": [655, 692], "raw_output": [655, 692], "figur": [655, 692], "persist": [656, 657, 692], "ram": [656, 657, 692], "slightli": [656, 657, 692], "my_larger_than_ram_fil": [656, 657, 692], "data_pagesize_limit": [657, 692], "290994": [660, 692], "118034": [660, 692], "433013": [660, 692], "1875": [668, 692], "extern": [671, 692], "lf_other": [671, 692], "afoo": [671, 692], "cfoo": [671, 692], "train_lf": [671, 692], "feature_0": [671, 692], "feature_1": [671, 692], "test_lf": [671, 692], "_train": [671, 692], "feature_0_train": [671, 692], "dataframescan": [673, 692], "output_schema": [673, 692], "lf3": 692, "lf4": 692, "lf5": 692, "lf6": 692, "explain": 692, "sink_ipc": 692, "sink_parquet": 692, "with_context": 692, "new_aliased_sr": [697, 987], "append_chunk": [700, 987], "super": [700, 987], "141593": [702, 987], "292432": [703, 987], "549306": [707, 987], "listnamespac": [713, 820, 885, 987], "field_2": 738, "n00": 738, "n01": 738, "n02": 738, "catnamespac": 747, "56789": [749, 826, 897, 987], "901234": [749, 826, 897, 987], "pi": [756, 911, 961, 987], "1232e": [756, 987], "quick": [764, 987, 995], "series_num": [764, 987], "581139": [764, 987], "series_str": [764, 987], "datetimenamespac": 769, "ser": [773, 774, 805], "replace_time_zon": [773, 774, 805], "kathmandu": [773, 774, 805], "0545": [773, 774, 805], "500m": [785, 787, 795, 802], "500000": 785, "2m": 790, "500000000": 795, "date_minus_1y_2mon": 797, "165": [801, 808], "series_equ": [801, 808, 987], "timestamp_u": 806, "978307200000000000": 806, "978393600000000000": 806, "978480000000000000": 806, "005": [814, 987], "06293300616044681": [814, 987], "65": [814, 987], "8568409950394724": [814, 987], "4000000": [815, 987], "814697265625": [815, 987], "stringnamespac": [820, 918, 987], "bitmask": [828, 987], "swiftli": [828, 987], "10734580197236529959": [829, 987], "3022416320763508302": [829, 987], "13756996518000038261": [829, 987], "bin_count": [831, 987], "a_count": [831, 987], "fall": [835, 987], "2147483648": [861, 987], "iso3166": [862, 987], "tur": [862, 987], "jpn": [862, 987], "nld": [862, 987], "country_lookup": [862, 987], "japan": [862, 987], "t\u00fcrkiy": [862, 987], "netherland": [862, 987], "unrecognis": [862, 987], "unspecifi": [862, 987], "country_nam": [862, 987], "166667": [875, 987], "142857": [875, 987], "peak": [876, 877, 987], "quanil": [879, 987], "nanstd": [887, 987], "858612": [887, 987], "200": [888, 889, 891, 987], "150": [889, 987], "350": [889, 987], "450": [889, 987], "381802": [893, 987], "dev": [894, 987], "frequent": [901, 902, 987], "mutat": [902, 987], "2246e": [911, 961, 987], "6331e16": [961, 987], "lib": [964, 987], "int64arrai": [964, 987], "a_2": [965, 987], "a_3": [965, 987], "s_from_str_repr": [967, 987], "zero_copy_onli": [969, 987], "writabl": [969, 987], "complet": [969, 987], "presenc": [969, 987], "immut": [969, 987], "127": [975, 987], "seriesview": [978, 987], "arraylik": 987, "dtype_if_empti": 987, "position": 987, "scenario": 987, "through": 987, "chunk_length": 987, "cut": 987, "get_chunk": 987, "has_valid": 987, "hist": 987, "is_boolean": 987, "is_float": 987, "is_integ": 987, "is_numer": [987, 995], "is_sort": 987, "is_tempor": 987, "is_utf8": 987, "new_from_index": 987, "peak_max": 987, "peak_min": 987, "power": 987, "qcut": 987, "set_at_idx": 987, "guid": 995, "easi": 995, "approxim": 995, "own": 995, "machin": 995, "xdist": 995, "vari": 995, "hardwar": 995, "setup": 995, "numeric_dtyp": 995, "null_probabililti": 995, "test_numer": 995, "col0": 995, "col4": 995, "29096": 995, "485": 995, "2147483647": 995, "8257e14": 995, "7508": 995, "37338": 995, "7264": 995, "321": 995, "16996": 995, "121": 995, "361": 995, "63204": 995, "1443e235": 995, "conform": 995, "ascii_lett": 995, "id_char": 995, "alphabet": 995, "price": 995, "min_valu": 995, "max_valu": 995, "test_price_calcul": 995, "a101": 995, "8nin": 995, "qhoo": 995, "714": 995, "544": 995, "i0e0": 995, "0000": 995, "colz": 995, "test_miscellan": 995, "143": 995, "235": 995, "87": 995, "186": 995, "174": 995, "179": 995, "213": 995, "221": 995, "86": 995, "255": 995}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [35, 0, 1, "", "DataType"], [36, 0, 1, "", "Date"], [37, 0, 1, "", "Datetime"], [38, 0, 1, "", "Decimal"], [39, 0, 1, "", "Duration"], [40, 0, 1, "", "Float32"], [41, 0, 1, "", "Float64"], [42, 0, 1, "", "Int16"], [43, 0, 1, "", "Int32"], [44, 0, 1, "", "Int64"], [45, 0, 1, "", "Int8"], [46, 0, 1, "", "List"], [47, 0, 1, "", "Null"], [48, 0, 1, "", "Object"], [994, 0, 1, "", "SQLContext"], [54, 0, 1, "", "StringCache"], [55, 0, 1, "", "Struct"], [56, 0, 1, "", "Time"], [57, 0, 1, "", "UInt16"], [58, 0, 1, "", "UInt32"], [59, 0, 1, "", "UInt64"], [60, 0, 1, "", "UInt8"], [61, 0, 1, "", "Unknown"], [62, 0, 1, "", "Utf8"], [63, 4, 1, "", "align_frames"], [537, 4, 1, "", "all"], [538, 4, 1, "", "any"], [539, 4, 1, "", "apply"], [540, 4, 1, "", "approx_unique"], [541, 4, 1, "", "arange"], [542, 4, 1, "", "arg_sort_by"], [68, 4, 1, "", "arg_where"], [543, 4, 1, "", "avg"], [69, 4, 1, "", "build_info"], [544, 4, 1, "", "coalesce"], [545, 4, 1, "", "col"], [70, 4, 1, "", "collect_all"], [71, 4, 1, "", "concat"], [546, 4, 1, "", "concat_list"], [547, 4, 1, "", "concat_str"], [548, 4, 1, "", "corr"], [549, 4, 1, "", "count"], [550, 4, 1, "", "cov"], [551, 4, 1, "", "cumfold"], [552, 4, 1, "", "cumreduce"], [553, 4, 1, "", "cumsum"], [72, 4, 1, "", "cut"], [554, 4, 1, "", "date"], [73, 4, 1, "", "date_range"], [555, 4, 1, "", "datetime"], [556, 4, 1, "", "duration"], [557, 4, 1, "", "element"], [74, 4, 1, "", "enable_string_cache"], [558, 4, 1, "", "exclude"], [559, 4, 1, "", "first"], [560, 4, 1, "", "fold"], [561, 4, 1, "", "format"], [89, 4, 1, "", "from_arrow"], [90, 4, 1, "", "from_dataframe"], [91, 4, 1, "", "from_dict"], [92, 4, 1, "", "from_dicts"], [562, 4, 1, "", "from_epoch"], [93, 4, 1, "", "from_numpy"], [94, 4, 1, "", "from_pandas"], [95, 4, 1, "", "from_records"], [96, 4, 1, "", "from_repr"], [97, 4, 1, "", "get_dummies"], [98, 4, 1, "", "get_index_type"], [563, 4, 1, "", "groups"], [564, 4, 1, "", "head"], [565, 4, 1, "", "list"], [566, 4, 1, "", "lit"], [567, 4, 1, "", "map"], [568, 4, 1, "", "max"], [569, 4, 1, "", "mean"], [570, 4, 1, "", "median"], [571, 4, 1, "", "min"], [572, 4, 1, "", "n_unique"], [100, 4, 1, "", "ones"], [573, 4, 1, "", "pearson_corr"], [574, 4, 1, "", "quantile"], [101, 4, 1, "", "read_avro"], [102, 4, 1, "", "read_csv"], [103, 4, 1, "", "read_csv_batched"], [104, 4, 1, "", "read_database"], [105, 4, 1, "", "read_delta"], [106, 4, 1, "", "read_excel"], [107, 4, 1, "", "read_ipc"], [108, 4, 1, "", "read_ipc_schema"], [109, 4, 1, "", "read_json"], [110, 4, 1, "", "read_ndjson"], [111, 4, 1, "", "read_parquet"], [112, 4, 1, "", "read_parquet_schema"], [575, 4, 1, "", "reduce"], [576, 4, 1, "", "repeat"], [577, 4, 1, "", "rolling_corr"], [578, 4, 1, "", "rolling_cov"], [113, 4, 1, "", "scan_csv"], [114, 4, 1, "", "scan_delta"], [115, 4, 1, "", "scan_ipc"], [116, 4, 1, "", "scan_ndjson"], [117, 4, 1, "", "scan_parquet"], [118, 4, 1, "", "scan_pyarrow_dataset"], [579, 4, 1, "", "select"], [119, 4, 1, "", "show_versions"], [580, 4, 1, "", "spearman_rank_corr"], [581, 4, 1, "", "std"], [582, 4, 1, "", "struct"], [583, 4, 1, "", "sum"], [584, 4, 1, "", "tail"], [129, 4, 1, "", "threadpool_size"], [585, 4, 1, "", "time"], [130, 4, 1, "", "time_range"], [586, 4, 1, "", "var"], [587, 4, 1, "", "when"], [131, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "activate_decimals"], [6, 1, 1, "", "load"], [7, 1, 1, "", "restore_defaults"], [8, 1, 1, "", "save"], [9, 1, 1, "", "set_ascii_tables"], [10, 1, 1, "", "set_fmt_float"], [11, 1, 1, "", "set_fmt_str_lengths"], [12, 1, 1, "", "set_streaming_chunk_size"], [13, 1, 1, "", "set_tbl_cell_alignment"], [14, 1, 1, "", "set_tbl_cols"], [15, 1, 1, "", "set_tbl_column_data_type_inline"], [16, 1, 1, "", "set_tbl_dataframe_shape_below"], [17, 1, 1, "", "set_tbl_formatting"], [18, 1, 1, "", "set_tbl_hide_column_data_types"], [19, 1, 1, "", "set_tbl_hide_column_names"], [20, 1, 1, "", "set_tbl_hide_dataframe_shape"], [21, 1, 1, "", "set_tbl_hide_dtype_separator"], [22, 1, 1, "", "set_tbl_rows"], [23, 1, 1, "", "set_tbl_width_chars"], [24, 1, 1, "", "set_verbose"], [25, 1, 1, "", "state"]], "polars.DataFrame": [[134, 1, 1, "", "__dataframe__"], [135, 1, 1, "", "apply"], [136, 1, 1, "", "bottom_k"], [137, 1, 1, "", "clear"], [138, 1, 1, "", "clone"], [139, 2, 1, "", "columns"], [140, 1, 1, "", "corr"], [141, 1, 1, "", "describe"], [142, 1, 1, "", "drop"], [143, 1, 1, "", "drop_in_place"], [144, 1, 1, "", "drop_nulls"], [145, 2, 1, "", "dtypes"], [146, 1, 1, "", "estimated_size"], [147, 1, 1, "", "explode"], [148, 1, 1, "", "extend"], [149, 1, 1, "", "fill_nan"], [150, 1, 1, "", "fill_null"], [151, 1, 1, "", "filter"], [152, 1, 1, "", "find_idx_by_name"], [153, 1, 1, "", "fold"], [154, 1, 1, "", "frame_equal"], [155, 1, 1, "", "get_column"], [156, 1, 1, "", "get_columns"], [157, 1, 1, "", "glimpse"], [158, 1, 1, "", "groupby"], [159, 1, 1, "", "groupby_dynamic"], [160, 1, 1, "", "groupby_rolling"], [161, 1, 1, "", "hash_rows"], [162, 1, 1, "", "head"], [163, 2, 1, "", "height"], [164, 1, 1, "", "hstack"], [165, 1, 1, "", "insert_at_idx"], [166, 1, 1, "", "interpolate"], [167, 1, 1, "", "is_duplicated"], [168, 1, 1, "", "is_empty"], [169, 1, 1, "", "is_unique"], [170, 1, 1, "", "item"], [171, 1, 1, "", "iter_rows"], [172, 1, 1, "", "iter_slices"], [173, 1, 1, "", "join"], [174, 1, 1, "", "join_asof"], [175, 1, 1, "", "lazy"], [176, 1, 1, "", "limit"], [177, 1, 1, "", "max"], [178, 1, 1, "", "mean"], [179, 1, 1, "", "median"], [180, 1, 1, "", "melt"], [181, 1, 1, "", "merge_sorted"], [182, 1, 1, "", "min"], [183, 1, 1, "", "n_chunks"], [184, 1, 1, "", "n_unique"], [185, 1, 1, "", "null_count"], [186, 1, 1, "", "partition_by"], [187, 1, 1, "", "pipe"], [188, 1, 1, "", "pivot"], [189, 1, 1, "", "product"], [190, 1, 1, "", "quantile"], [191, 1, 1, "", "rechunk"], [192, 1, 1, "", "rename"], [193, 1, 1, "", "replace"], [194, 1, 1, "", "replace_at_idx"], [195, 1, 1, "", "reverse"], [196, 1, 1, "", "row"], [197, 1, 1, "", "rows"], [198, 1, 1, "", "sample"], [199, 2, 1, "", "schema"], [200, 1, 1, "", "select"], [201, 1, 1, "", "set_sorted"], [202, 2, 1, "", "shape"], [203, 1, 1, "", "shift"], [204, 1, 1, "", "shift_and_fill"], [205, 1, 1, "", "shrink_to_fit"], [206, 1, 1, "", "slice"], [207, 1, 1, "", "sort"], [208, 1, 1, "", "std"], [209, 1, 1, "", "sum"], [210, 1, 1, "", "tail"], [211, 1, 1, "", "take_every"], [212, 1, 1, "", "to_arrow"], [213, 1, 1, "", "to_dict"], [214, 1, 1, "", "to_dicts"], [215, 1, 1, "", "to_dummies"], [216, 1, 1, "", "to_init_repr"], [217, 1, 1, "", "to_numpy"], [218, 1, 1, "", "to_pandas"], [219, 1, 1, "", "to_series"], [220, 1, 1, "", "to_struct"], [221, 1, 1, "", "top_k"], [222, 1, 1, "", "transpose"], [223, 1, 1, "", "unique"], [224, 1, 1, "", "unnest"], [225, 1, 1, "", "unstack"], [226, 1, 1, "", "update"], [227, 1, 1, "", "upsample"], [228, 1, 1, "", "var"], [229, 1, 1, "", "vstack"], [230, 2, 1, "", "width"], [231, 1, 1, "", "with_columns"], [232, 1, 1, "", "with_row_count"], [26, 1, 1, "", "write_avro"], [27, 1, 1, "", "write_csv"], [28, 1, 1, "", "write_database"], [29, 1, 1, "", "write_delta"], [30, 1, 1, "", "write_excel"], [31, 1, 1, "", "write_ipc"], [32, 1, 1, "", "write_json"], [33, 1, 1, "", "write_ndjson"], [34, 1, 1, "", "write_parquet"]], "polars.DataType": [[35, 1, 1, "", "__init__"]], "polars.Date": [[36, 1, 1, "", "__init__"]], "polars.Datetime": [[37, 1, 1, "", "__init__"]], "polars.Decimal": [[38, 1, 1, "", "__init__"]], "polars.Duration": [[39, 1, 1, "", "__init__"]], "polars.Expr": [[260, 1, 1, "", "abs"], [261, 1, 1, "", "add"], [262, 1, 1, "", "agg_groups"], [263, 1, 1, "", "alias"], [264, 1, 1, "", "all"], [265, 1, 1, "", "and_"], [266, 1, 1, "", "any"], [267, 1, 1, "", "append"], [268, 1, 1, "", "apply"], [269, 1, 1, "", "approx_unique"], [270, 1, 1, "", "arccos"], [271, 1, 1, "", "arccosh"], [272, 1, 1, "", "arcsin"], [273, 1, 1, "", "arcsinh"], [274, 1, 1, "", "arctan"], [275, 1, 1, "", "arctanh"], [276, 1, 1, "", "arg_max"], [277, 1, 1, "", "arg_min"], [278, 1, 1, "", "arg_sort"], [279, 1, 1, "", "arg_true"], [280, 1, 1, "", "arg_unique"], [307, 1, 1, "", "backward_fill"], [313, 1, 1, "", "bottom_k"], [314, 1, 1, "", "cache"], [315, 1, 1, "", "cast"], [317, 1, 1, "", "ceil"], [318, 1, 1, "", "clip"], [319, 1, 1, "", "clip_max"], [320, 1, 1, "", "clip_min"], [321, 1, 1, "", "cos"], [322, 1, 1, "", "cosh"], [323, 1, 1, "", "count"], [324, 1, 1, "", "cumcount"], [325, 1, 1, "", "cummax"], [326, 1, 1, "", "cummin"], [327, 1, 1, "", "cumprod"], [328, 1, 1, "", "cumsum"], [329, 1, 1, "", "cumulative_eval"], [330, 1, 1, "", "diff"], [331, 1, 1, "", "dot"], [332, 1, 1, "", "drop_nans"], [333, 1, 1, "", "drop_nulls"], [373, 1, 1, "", "entropy"], [374, 1, 1, "", "eq"], [375, 1, 1, "", "ewm_mean"], [376, 1, 1, "", "ewm_std"], [377, 1, 1, "", "ewm_var"], [378, 1, 1, "", "exclude"], [379, 1, 1, "", "exp"], [380, 1, 1, "", "explode"], [381, 1, 1, "", "extend_constant"], [382, 1, 1, "", "fill_nan"], [383, 1, 1, "", "fill_null"], [384, 1, 1, "", "filter"], [385, 1, 1, "", "first"], [386, 1, 1, "", "flatten"], [387, 1, 1, "", "floor"], [388, 1, 1, "", "floordiv"], [389, 1, 1, "", "forward_fill"], [390, 1, 1, "", "ge"], [391, 1, 1, "", "gt"], [392, 1, 1, "", "hash"], [393, 1, 1, "", "head"], [394, 1, 1, "", "implode"], [395, 1, 1, "", "inspect"], [396, 1, 1, "", "interpolate"], [397, 1, 1, "", "is_between"], [398, 1, 1, "", "is_duplicated"], [399, 1, 1, "", "is_finite"], [400, 1, 1, "", "is_first"], [401, 1, 1, "", "is_in"], [402, 1, 1, "", "is_infinite"], [403, 1, 1, "", "is_nan"], [404, 1, 1, "", "is_not"], [405, 1, 1, "", "is_not_nan"], [406, 1, 1, "", "is_not_null"], [407, 1, 1, "", "is_null"], [408, 1, 1, "", "is_unique"], [409, 1, 1, "", "keep_name"], [410, 1, 1, "", "kurtosis"], [411, 1, 1, "", "last"], [412, 1, 1, "", "le"], [413, 1, 1, "", "len"], [414, 1, 1, "", "limit"], [415, 1, 1, "", "log"], [416, 1, 1, "", "log10"], [417, 1, 1, "", "log1p"], [418, 1, 1, "", "lower_bound"], [419, 1, 1, "", "lt"], [420, 1, 1, "", "map"], [421, 1, 1, "", "map_alias"], [422, 1, 1, "", "map_dict"], [423, 1, 1, "", "max"], [424, 1, 1, "", "mean"], [425, 1, 1, "", "median"], [434, 1, 1, "", "min"], [435, 1, 1, "", "mod"], [436, 1, 1, "", "mode"], [437, 1, 1, "", "mul"], [438, 1, 1, "", "n_unique"], [439, 1, 1, "", "nan_max"], [440, 1, 1, "", "nan_min"], [441, 1, 1, "", "ne"], [442, 1, 1, "", "null_count"], [443, 1, 1, "", "or_"], [444, 1, 1, "", "over"], [445, 1, 1, "", "pct_change"], [446, 1, 1, "", "pipe"], [447, 1, 1, "", "pow"], [448, 1, 1, "", "prefix"], [449, 1, 1, "", "product"], [450, 1, 1, "", "quantile"], [451, 1, 1, "", "rank"], [452, 1, 1, "", "rechunk"], [453, 1, 1, "", "reinterpret"], [454, 1, 1, "", "repeat_by"], [455, 1, 1, "", "reshape"], [456, 1, 1, "", "reverse"], [457, 1, 1, "", "rolling_apply"], [458, 1, 1, "", "rolling_max"], [459, 1, 1, "", "rolling_mean"], [460, 1, 1, "", "rolling_median"], [461, 1, 1, "", "rolling_min"], [462, 1, 1, "", "rolling_quantile"], [463, 1, 1, "", "rolling_skew"], [464, 1, 1, "", "rolling_std"], [465, 1, 1, "", "rolling_sum"], [466, 1, 1, "", "rolling_var"], [467, 1, 1, "", "round"], [468, 1, 1, "", "sample"], [469, 1, 1, "", "search_sorted"], [470, 1, 1, "", "set_sorted"], [471, 1, 1, "", "shift"], [472, 1, 1, "", "shift_and_fill"], [473, 1, 1, "", "shrink_dtype"], [474, 1, 1, "", "shuffle"], [475, 1, 1, "", "sign"], [476, 1, 1, "", "sin"], [477, 1, 1, "", "sinh"], [478, 1, 1, "", "skew"], [479, 1, 1, "", "slice"], [480, 1, 1, "", "sort"], [481, 1, 1, "", "sort_by"], [482, 1, 1, "", "sqrt"], [483, 1, 1, "", "std"], [519, 1, 1, "", "sub"], [520, 1, 1, "", "suffix"], [521, 1, 1, "", "sum"], [522, 1, 1, "", "tail"], [523, 1, 1, "", "take"], [524, 1, 1, "", "take_every"], [525, 1, 1, "", "tan"], [526, 1, 1, "", "tanh"], [527, 1, 1, "", "to_physical"], [528, 1, 1, "", "top_k"], [529, 1, 1, "", "truediv"], [530, 1, 1, "", "unique"], [531, 1, 1, "", "unique_counts"], [532, 1, 1, "", "upper_bound"], [533, 1, 1, "", "value_counts"], [534, 1, 1, "", "var"], [535, 1, 1, "", "where"], [536, 1, 1, "", "xor"]], "polars.Expr.arr": [[281, 1, 1, "", "arg_max"], [282, 1, 1, "", "arg_min"], [283, 1, 1, "", "concat"], [284, 1, 1, "", "contains"], [285, 1, 1, "", "count_match"], [286, 1, 1, "", "diff"], [287, 1, 1, "", "eval"], [288, 1, 1, "", "explode"], [289, 1, 1, "", "first"], [290, 1, 1, "", "get"], [291, 1, 1, "", "head"], [292, 1, 1, "", "join"], [293, 1, 1, "", "last"], [294, 1, 1, "", "lengths"], [295, 1, 1, "", "max"], [296, 1, 1, "", "mean"], [297, 1, 1, "", "min"], [298, 1, 1, "", "reverse"], [299, 1, 1, "", "shift"], [300, 1, 1, "", "slice"], [301, 1, 1, "", "sort"], [302, 1, 1, "", "sum"], [303, 1, 1, "", "tail"], [304, 1, 1, "", "take"], [305, 1, 1, "", "to_struct"], [306, 1, 1, "", "unique"]], "polars.Expr.bin": [[308, 1, 1, "", "contains"], [309, 1, 1, "", "decode"], [310, 1, 1, "", "encode"], [311, 1, 1, "", "ends_with"], [312, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[316, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[334, 1, 1, "", "cast_time_unit"], [335, 1, 1, "", "combine"], [336, 1, 1, "", "convert_time_zone"], [337, 1, 1, "", "date"], [338, 1, 1, "", "datetime"], [339, 1, 1, "", "day"], [340, 1, 1, "", "days"], [341, 1, 1, "", "epoch"], [342, 1, 1, "", "hour"], [343, 1, 1, "", "hours"], [344, 1, 1, "", "is_leap_year"], [345, 1, 1, "", "iso_year"], [346, 1, 1, "", "microsecond"], [347, 1, 1, "", "microseconds"], [348, 1, 1, "", "millisecond"], [349, 1, 1, "", "milliseconds"], [350, 1, 1, "", "minute"], [351, 1, 1, "", "minutes"], [352, 1, 1, "", "month"], [353, 1, 1, "", "month_end"], [354, 1, 1, "", "month_start"], [355, 1, 1, "", "nanosecond"], [356, 1, 1, "", "nanoseconds"], [357, 1, 1, "", "offset_by"], [358, 1, 1, "", "ordinal_day"], [359, 1, 1, "", "quarter"], [360, 1, 1, "", "replace_time_zone"], [361, 1, 1, "", "round"], [362, 1, 1, "", "second"], [363, 1, 1, "", "seconds"], [364, 1, 1, "", "strftime"], [365, 1, 1, "", "time"], [366, 1, 1, "", "timestamp"], [367, 1, 1, "", "to_string"], [368, 1, 1, "", "truncate"], [369, 1, 1, "", "week"], [370, 1, 1, "", "weekday"], [371, 1, 1, "", "with_time_unit"], [372, 1, 1, "", "year"]], "polars.Expr.meta": [[426, 1, 1, "", "eq"], [427, 1, 1, "", "has_multiple_outputs"], [428, 1, 1, "", "is_regex_projection"], [429, 1, 1, "", "ne"], [430, 1, 1, "", "output_name"], [431, 1, 1, "", "pop"], [432, 1, 1, "", "root_names"], [433, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[484, 1, 1, "", "concat"], [485, 1, 1, "", "contains"], [486, 1, 1, "", "count_match"], [487, 1, 1, "", "decode"], [488, 1, 1, "", "encode"], [489, 1, 1, "", "ends_with"], [490, 1, 1, "", "explode"], [491, 1, 1, "", "extract"], [492, 1, 1, "", "extract_all"], [493, 1, 1, "", "json_extract"], [494, 1, 1, "", "json_path_match"], [495, 1, 1, "", "lengths"], [496, 1, 1, "", "ljust"], [497, 1, 1, "", "lstrip"], [498, 1, 1, "", "n_chars"], [499, 1, 1, "", "parse_int"], [500, 1, 1, "", "replace"], [501, 1, 1, "", "replace_all"], [502, 1, 1, "", "rjust"], [503, 1, 1, "", "rstrip"], [504, 1, 1, "", "slice"], [505, 1, 1, "", "split"], [506, 1, 1, "", "split_exact"], [507, 1, 1, "", "splitn"], [508, 1, 1, "", "starts_with"], [509, 1, 1, "", "strip"], [510, 1, 1, "", "strptime"], [511, 1, 1, "", "to_date"], [512, 1, 1, "", "to_datetime"], [513, 1, 1, "", "to_lowercase"], [514, 1, 1, "", "to_time"], [515, 1, 1, "", "to_uppercase"], [516, 1, 1, "", "zfill"]], "polars.Expr.struct": [[517, 1, 1, "", "field"], [518, 1, 1, "", "rename_fields"]], "polars.Float32": [[40, 1, 1, "", "__init__"]], "polars.Float64": [[41, 1, 1, "", "__init__"]], "polars.Int16": [[42, 1, 1, "", "__init__"]], "polars.Int32": [[43, 1, 1, "", "__init__"]], "polars.Int64": [[44, 1, 1, "", "__init__"]], "polars.Int8": [[45, 1, 1, "", "__init__"]], "polars.LazyFrame": [[608, 1, 1, "", "bottom_k"], [609, 1, 1, "", "cache"], [610, 1, 1, "", "clear"], [611, 1, 1, "", "clone"], [612, 1, 1, "", "collect"], [613, 2, 1, "", "columns"], [614, 1, 1, "", "drop"], [615, 1, 1, "", "drop_nulls"], [616, 2, 1, "", "dtypes"], [617, 1, 1, "", "explain"], [618, 1, 1, "", "explode"], [619, 1, 1, "", "fetch"], [620, 1, 1, "", "fill_nan"], [621, 1, 1, "", "fill_null"], [622, 1, 1, "", "filter"], [623, 1, 1, "", "first"], [624, 1, 1, "", "from_json"], [625, 1, 1, "", "groupby"], [626, 1, 1, "", "groupby_dynamic"], [627, 1, 1, "", "groupby_rolling"], [628, 1, 1, "", "head"], [629, 1, 1, "", "inspect"], [630, 1, 1, "", "interpolate"], [631, 1, 1, "", "join"], [632, 1, 1, "", "join_asof"], [633, 1, 1, "", "last"], [634, 1, 1, "", "lazy"], [635, 1, 1, "", "limit"], [636, 1, 1, "", "map"], [637, 1, 1, "", "max"], [638, 1, 1, "", "mean"], [639, 1, 1, "", "median"], [640, 1, 1, "", "melt"], [641, 1, 1, "", "merge_sorted"], [642, 1, 1, "", "min"], [643, 1, 1, "", "null_count"], [644, 1, 1, "", "pipe"], [645, 1, 1, "", "profile"], [646, 1, 1, "", "quantile"], [647, 1, 1, "", "read_json"], [648, 1, 1, "", "rename"], [649, 1, 1, "", "reverse"], [650, 2, 1, "", "schema"], [651, 1, 1, "", "select"], [652, 1, 1, "", "set_sorted"], [653, 1, 1, "", "shift"], [654, 1, 1, "", "shift_and_fill"], [655, 1, 1, "", "show_graph"], [656, 1, 1, "", "sink_ipc"], [657, 1, 1, "", "sink_parquet"], [658, 1, 1, "", "slice"], [659, 1, 1, "", "sort"], [660, 1, 1, "", "std"], [661, 1, 1, "", "sum"], [662, 1, 1, "", "tail"], [663, 1, 1, "", "take_every"], [664, 1, 1, "", "top_k"], [665, 1, 1, "", "unique"], [666, 1, 1, "", "unnest"], [667, 1, 1, "", "update"], [668, 1, 1, "", "var"], [669, 2, 1, "", "width"], [670, 1, 1, "", "with_columns"], [671, 1, 1, "", "with_context"], [672, 1, 1, "", "with_row_count"], [673, 1, 1, "", "write_json"]], "polars.List": [[46, 1, 1, "", "__init__"]], "polars.Null": [[47, 1, 1, "", "__init__"]], "polars.Object": [[48, 1, 1, "", "__init__"]], "polars.SQLContext": [[49, 1, 1, "", "execute"], [50, 1, 1, "", "register"], [51, 1, 1, "", "register_globals"], [52, 1, 1, "", "register_many"], [53, 1, 1, "", "unregister"]], "polars.Series": [[696, 1, 1, "", "abs"], [697, 1, 1, "", "alias"], [698, 1, 1, "", "all"], [699, 1, 1, "", "any"], [700, 1, 1, "", "append"], [701, 1, 1, "", "apply"], [702, 1, 1, "", "arccos"], [703, 1, 1, "", "arccosh"], [704, 1, 1, "", "arcsin"], [705, 1, 1, "", "arcsinh"], [706, 1, 1, "", "arctan"], [707, 1, 1, "", "arctanh"], [708, 1, 1, "", "arg_max"], [709, 1, 1, "", "arg_min"], [710, 1, 1, "", "arg_sort"], [711, 1, 1, "", "arg_true"], [712, 1, 1, "", "arg_unique"], [713, 3, 1, "", "arr"], [745, 1, 1, "", "bottom_k"], [746, 1, 1, "", "cast"], [747, 3, 1, "", "cat"], [749, 1, 1, "", "ceil"], [750, 1, 1, "", "chunk_lengths"], [751, 1, 1, "", "clear"], [752, 1, 1, "", "clip"], [753, 1, 1, "", "clip_max"], [754, 1, 1, "", "clip_min"], [755, 1, 1, "", "clone"], [756, 1, 1, "", "cos"], [757, 1, 1, "", "cosh"], [758, 1, 1, "", "cummax"], [759, 1, 1, "", "cummin"], [760, 1, 1, "", "cumprod"], [761, 1, 1, "", "cumsum"], [762, 1, 1, "", "cumulative_eval"], [763, 1, 1, "", "cut"], [764, 1, 1, "", "describe"], [765, 1, 1, "", "diff"], [766, 1, 1, "", "dot"], [767, 1, 1, "", "drop_nans"], [768, 1, 1, "", "drop_nulls"], [769, 3, 1, "", "dt"], [813, 3, 1, "", "dtype"], [814, 1, 1, "", "entropy"], [815, 1, 1, "", "estimated_size"], [816, 1, 1, "", "ewm_mean"], [817, 1, 1, "", "ewm_std"], [818, 1, 1, "", "ewm_var"], [819, 1, 1, "", "exp"], [820, 1, 1, "", "explode"], [821, 1, 1, "", "extend_constant"], [822, 1, 1, "", "fill_nan"], [823, 1, 1, "", "fill_null"], [824, 1, 1, "", "filter"], [825, 3, 1, "", "flags"], [826, 1, 1, "", "floor"], [827, 1, 1, "", "get_chunks"], [828, 1, 1, "", "has_validity"], [829, 1, 1, "", "hash"], [830, 1, 1, "", "head"], [831, 1, 1, "", "hist"], [832, 1, 1, "", "implode"], [833, 3, 1, "", "inner_dtype"], [834, 1, 1, "", "interpolate"], [835, 1, 1, "", "is_between"], [836, 1, 1, "", "is_boolean"], [837, 1, 1, "", "is_duplicated"], [838, 1, 1, "", "is_empty"], [839, 1, 1, "", "is_finite"], [840, 1, 1, "", "is_first"], [841, 1, 1, "", "is_float"], [842, 1, 1, "", "is_in"], [843, 1, 1, "", "is_infinite"], [844, 1, 1, "", "is_integer"], [845, 1, 1, "", "is_nan"], [846, 1, 1, "", "is_not_nan"], [847, 1, 1, "", "is_not_null"], [848, 1, 1, "", "is_null"], [849, 1, 1, "", "is_numeric"], [850, 1, 1, "", "is_sorted"], [851, 1, 1, "", "is_temporal"], [852, 1, 1, "", "is_unique"], [853, 1, 1, "", "is_utf8"], [854, 1, 1, "", "item"], [855, 1, 1, "", "kurtosis"], [856, 1, 1, "", "len"], [857, 1, 1, "", "limit"], [858, 1, 1, "", "log"], [859, 1, 1, "", "log10"], [860, 1, 1, "", "log1p"], [861, 1, 1, "", "lower_bound"], [862, 1, 1, "", "map_dict"], [863, 1, 1, "", "max"], [864, 1, 1, "", "mean"], [865, 1, 1, "", "median"], [866, 1, 1, "", "min"], [867, 1, 1, "", "mode"], [868, 1, 1, "", "n_chunks"], [869, 1, 1, "", "n_unique"], [870, 3, 1, "", "name"], [871, 1, 1, "", "nan_max"], [872, 1, 1, "", "nan_min"], [873, 1, 1, "", "new_from_index"], [874, 1, 1, "", "null_count"], [875, 1, 1, "", "pct_change"], [876, 1, 1, "", "peak_max"], [877, 1, 1, "", "peak_min"], [878, 1, 1, "", "product"], [879, 1, 1, "", "qcut"], [880, 1, 1, "", "quantile"], [881, 1, 1, "", "rank"], [882, 1, 1, "", "rechunk"], [883, 1, 1, "", "reinterpret"], [884, 1, 1, "", "rename"], [885, 1, 1, "", "reshape"], [886, 1, 1, "", "reverse"], [887, 1, 1, "", "rolling_apply"], [888, 1, 1, "", "rolling_max"], [889, 1, 1, "", "rolling_mean"], [890, 1, 1, "", "rolling_median"], [891, 1, 1, "", "rolling_min"], [892, 1, 1, "", "rolling_quantile"], [893, 1, 1, "", "rolling_skew"], [894, 1, 1, "", "rolling_std"], [895, 1, 1, "", "rolling_sum"], [896, 1, 1, "", "rolling_var"], [897, 1, 1, "", "round"], [898, 1, 1, "", "sample"], [899, 1, 1, "", "search_sorted"], [900, 1, 1, "", "series_equal"], [901, 1, 1, "", "set"], [902, 1, 1, "", "set_at_idx"], [903, 1, 1, "", "set_sorted"], [904, 3, 1, "", "shape"], [905, 1, 1, "", "shift"], [906, 1, 1, "", "shift_and_fill"], [907, 1, 1, "", "shrink_dtype"], [908, 1, 1, "", "shrink_to_fit"], [909, 1, 1, "", "shuffle"], [910, 1, 1, "", "sign"], [911, 1, 1, "", "sin"], [912, 1, 1, "", "sinh"], [913, 1, 1, "", "skew"], [914, 1, 1, "", "slice"], [915, 1, 1, "", "sort"], [916, 1, 1, "", "sqrt"], [917, 1, 1, "", "std"], [918, 3, 1, "", "str"], [957, 1, 1, "", "sum"], [958, 1, 1, "", "tail"], [959, 1, 1, "", "take"], [960, 1, 1, "", "take_every"], [961, 1, 1, "", "tan"], [962, 1, 1, "", "tanh"], [963, 3, 1, "", "time_unit"], [964, 1, 1, "", "to_arrow"], [965, 1, 1, "", "to_dummies"], [966, 1, 1, "", "to_frame"], [967, 1, 1, "", "to_init_repr"], [968, 1, 1, "", "to_list"], [969, 1, 1, "", "to_numpy"], [970, 1, 1, "", "to_pandas"], [971, 1, 1, "", "to_physical"], [972, 1, 1, "", "top_k"], [973, 1, 1, "", "unique"], [974, 1, 1, "", "unique_counts"], [975, 1, 1, "", "upper_bound"], [976, 1, 1, "", "value_counts"], [977, 1, 1, "", "var"], [978, 1, 1, "", "view"], [979, 1, 1, "", "zip_with"]], "polars.Series.arr": [[714, 1, 1, "", "arg_max"], [715, 1, 1, "", "arg_min"], [716, 1, 1, "", "concat"], [717, 1, 1, "", "contains"], [718, 1, 1, "", "count_match"], [719, 1, 1, "", "diff"], [720, 1, 1, "", "eval"], [721, 1, 1, "", "explode"], [722, 1, 1, "", "first"], [723, 1, 1, "", "get"], [724, 1, 1, "", "head"], [725, 1, 1, "", "join"], [726, 1, 1, "", "last"], [727, 1, 1, "", "lengths"], [728, 1, 1, "", "max"], [729, 1, 1, "", "mean"], [730, 1, 1, "", "min"], [731, 1, 1, "", "reverse"], [732, 1, 1, "", "shift"], [733, 1, 1, "", "slice"], [734, 1, 1, "", "sort"], [735, 1, 1, "", "sum"], [736, 1, 1, "", "tail"], [737, 1, 1, "", "take"], [738, 1, 1, "", "to_struct"], [739, 1, 1, "", "unique"]], "polars.Series.bin": [[740, 1, 1, "", "contains"], [741, 1, 1, "", "decode"], [742, 1, 1, "", "encode"], [743, 1, 1, "", "ends_with"], [744, 1, 1, "", "starts_with"]], "polars.Series.cat": [[748, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[770, 1, 1, "", "cast_time_unit"], [771, 1, 1, "", "combine"], [772, 1, 1, "", "convert_time_zone"], [773, 1, 1, "", "date"], [774, 1, 1, "", "datetime"], [775, 1, 1, "", "day"], [776, 1, 1, "", "days"], [777, 1, 1, "", "epoch"], [778, 1, 1, "", "hour"], [779, 1, 1, "", "hours"], [780, 1, 1, "", "is_leap_year"], [781, 1, 1, "", "iso_year"], [782, 1, 1, "", "max"], [783, 1, 1, "", "mean"], [784, 1, 1, "", "median"], [785, 1, 1, "", "microsecond"], [786, 1, 1, "", "microseconds"], [787, 1, 1, "", "millisecond"], [788, 1, 1, "", "milliseconds"], [789, 1, 1, "", "min"], [790, 1, 1, "", "minute"], [791, 1, 1, "", "minutes"], [792, 1, 1, "", "month"], [793, 1, 1, "", "month_end"], [794, 1, 1, "", "month_start"], [795, 1, 1, "", "nanosecond"], [796, 1, 1, "", "nanoseconds"], [797, 1, 1, "", "offset_by"], [798, 1, 1, "", "ordinal_day"], [799, 1, 1, "", "quarter"], [800, 1, 1, "", "replace_time_zone"], [801, 1, 1, "", "round"], [802, 1, 1, "", "second"], [803, 1, 1, "", "seconds"], [804, 1, 1, "", "strftime"], [805, 1, 1, "", "time"], [806, 1, 1, "", "timestamp"], [807, 1, 1, "", "to_string"], [808, 1, 1, "", "truncate"], [809, 1, 1, "", "week"], [810, 1, 1, "", "weekday"], [811, 1, 1, "", "with_time_unit"], [812, 1, 1, "", "year"]], "polars.Series.str": [[919, 1, 1, "", "concat"], [920, 1, 1, "", "contains"], [921, 1, 1, "", "count_match"], [922, 1, 1, "", "decode"], [923, 1, 1, "", "encode"], [924, 1, 1, "", "ends_with"], [925, 1, 1, "", "explode"], [926, 1, 1, "", "extract"], [927, 1, 1, "", "extract_all"], [928, 1, 1, "", "json_extract"], [929, 1, 1, "", "json_path_match"], [930, 1, 1, "", "lengths"], [931, 1, 1, "", "ljust"], [932, 1, 1, "", "lstrip"], [933, 1, 1, "", "n_chars"], [934, 1, 1, "", "parse_int"], [935, 1, 1, "", "replace"], [936, 1, 1, "", "replace_all"], [937, 1, 1, "", "rjust"], [938, 1, 1, "", "rstrip"], [939, 1, 1, "", "slice"], [940, 1, 1, "", "split"], [941, 1, 1, "", "split_exact"], [942, 1, 1, "", "splitn"], [943, 1, 1, "", "starts_with"], [944, 1, 1, "", "strip"], [945, 1, 1, "", "strptime"], [946, 1, 1, "", "to_date"], [947, 1, 1, "", "to_datetime"], [948, 1, 1, "", "to_lowercase"], [949, 1, 1, "", "to_time"], [950, 1, 1, "", "to_uppercase"], [951, 1, 1, "", "zfill"]], "polars.Series.struct": [[952, 1, 1, "", "field"], [953, 3, 1, "", "fields"], [954, 1, 1, "", "rename_fields"], [955, 3, 1, "", "schema"], [956, 1, 1, "", "unnest"]], "polars.StringCache": [[54, 1, 1, "", "__init__"]], "polars.Struct": [[55, 1, 1, "", "__init__"]], "polars.Time": [[56, 1, 1, "", "__init__"]], "polars.UInt16": [[57, 1, 1, "", "__init__"]], "polars.UInt32": [[58, 1, 1, "", "__init__"]], "polars.UInt64": [[59, 1, 1, "", "__init__"]], "polars.UInt8": [[60, 1, 1, "", "__init__"]], "polars.Unknown": [[61, 1, 1, "", "__init__"]], "polars.Utf8": [[62, 1, 1, "", "__init__"]], "polars.api": [[64, 4, 1, "", "register_dataframe_namespace"], [65, 4, 1, "", "register_expr_namespace"], [66, 4, 1, "", "register_lazyframe_namespace"], [67, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[233, 1, 1, "", "__iter__"], [234, 1, 1, "", "agg"], [235, 1, 1, "", "all"], [236, 1, 1, "", "apply"], [237, 1, 1, "", "count"], [238, 1, 1, "", "first"], [239, 1, 1, "", "head"], [240, 1, 1, "", "last"], [241, 1, 1, "", "max"], [242, 1, 1, "", "mean"], [243, 1, 1, "", "median"], [244, 1, 1, "", "min"], [245, 1, 1, "", "n_unique"], [246, 1, 1, "", "quantile"], [247, 1, 1, "", "sum"], [248, 1, 1, "", "tail"]], "polars.exceptions": [[75, 5, 1, "", "ArrowError"], [76, 5, 1, "", "ColumnNotFoundError"], [77, 5, 1, "", "ComputeError"], [78, 5, 1, "", "DuplicateError"], [79, 5, 1, "", "InvalidOperationError"], [80, 5, 1, "", "NoDataError"], [81, 5, 1, "", "NoRowsReturnedError"], [82, 5, 1, "", "PolarsPanicError"], [83, 5, 1, "", "RowsError"], [84, 5, 1, "", "SchemaError"], [85, 5, 1, "", "SchemaFieldNotFoundError"], [86, 5, 1, "", "ShapeError"], [87, 5, 1, "", "StructFieldNotFoundError"], [88, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[99, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[674, 1, 1, "", "agg"], [675, 1, 1, "", "all"], [676, 1, 1, "", "apply"], [677, 1, 1, "", "count"], [678, 1, 1, "", "first"], [679, 1, 1, "", "head"], [680, 1, 1, "", "last"], [681, 1, 1, "", "max"], [682, 1, 1, "", "mean"], [683, 1, 1, "", "median"], [684, 1, 1, "", "min"], [685, 1, 1, "", "n_unique"], [686, 1, 1, "", "quantile"], [687, 1, 1, "", "sum"], [688, 1, 1, "", "tail"]], "polars.testing": [[120, 4, 1, "", "assert_frame_equal"], [121, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[122, 0, 1, "", "column"], [123, 4, 1, "", "columns"], [124, 4, 1, "", "create_list_strategy"], [125, 4, 1, "", "dataframes"], [126, 4, 1, "", "load_profile"], [127, 4, 1, "", "series"], [128, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[122, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 148], "api": [1, 64, 65, 66, 67, 605], "provid": 1, "new": 1, "function": [1, 593, 604], "avail": 1, "registr": 1, "exampl": [1, 995], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 995], "binari": [2, 588, 599, 981], "boolean": [3, 589, 982], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 132], "activate_decim": 5, "load": [6, 132], "restore_default": 7, "save": [8, 132], "set_ascii_t": 9, "set_fmt_float": 10, "set_fmt_str_length": 11, "set_streaming_chunk_s": 12, "set_tbl_cell_align": 13, "set_tbl_col": 14, "set_tbl_column_data_type_inlin": 15, "set_tbl_dataframe_shape_below": 16, "set_tbl_format": 17, "set_tbl_hide_column_data_typ": 18, "set_tbl_hide_column_nam": 19, "set_tbl_hide_dataframe_shap": 20, "set_tbl_hide_dtype_separ": 21, "set_tbl_row": 22, "set_tbl_width_char": 23, "set_verbos": 24, "state": [25, 132], "datafram": [26, 27, 28, 29, 30, 31, 32, 33, 34, 125, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254], "write_avro": 26, "write_csv": 27, "write_databas": 28, "write_delta": 29, "write_excel": 30, "write_ipc": 31, "write_json": [32, 673], "write_ndjson": 33, "write_parquet": 34, "datatyp": 35, "date": [36, 337, 554, 773], "datetim": [37, 338, 555, 774], "decim": 38, "durat": [39, 556], "float32": 40, "float64": 41, "int16": 42, "int32": 43, "int64": 44, "int8": 45, "list": [46, 565, 595, 988], "null": 47, "object": 48, "sqlcontext": [49, 50, 51, 52, 53], "execut": 49, "regist": 50, "register_glob": 51, "register_mani": 52, "unregist": 53, "stringcach": [54, 604], "struct": [55, 517, 518, 582, 601, 952, 953, 954, 955, 956, 992], "time": [56, 365, 585, 805], "uint16": 57, "uint32": 58, "uint64": 59, "uint8": 60, "unknown": 61, "utf8": 62, "align_fram": 63, "register_dataframe_namespac": 64, "register_expr_namespac": 65, "register_lazyframe_namespac": 66, "register_series_namespac": 67, "arg_wher": 68, "build_info": 69, "collect_al": 70, "concat": [71, 283, 484, 716, 919], "cut": [72, 763], "date_rang": 73, "enable_string_cach": 74, "except": [75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 258], "arrowerror": 75, "columnnotfounderror": 76, "computeerror": 77, "duplicateerror": 78, "invalidoperationerror": 79, "nodataerror": 80, "norowsreturnederror": 81, "polarspanicerror": 82, "rowserror": 83, "schemaerror": 84, "schemafieldnotfounderror": 85, "shapeerror": 86, "structfieldnotfounderror": 87, "toomanyrowsreturnederror": 88, "from_arrow": 89, "from_datafram": 90, "from_dict": [91, 92], "from_numpi": 93, "from_panda": 94, "from_record": 95, "from_repr": 96, "get_dummi": 97, "get_index_typ": 98, "io": 99, "csv": [99, 606], "batched_read": 99, "batchedcsvread": [99, 606], "next_batch": 99, "ones": 100, "read_avro": 101, "read_csv": 102, "read_csv_batch": 103, "read_databas": 104, "read_delta": 105, "read_excel": 106, "read_ipc": 107, "read_ipc_schema": 108, "read_json": [109, 647], "read_ndjson": 110, "read_parquet": 111, "read_parquet_schema": 112, "scan_csv": 113, "scan_delta": 114, "scan_ipc": 115, "scan_ndjson": 116, "scan_parquet": 117, "scan_pyarrow_dataset": 118, "show_vers": 119, "test": [120, 121, 122, 123, 124, 125, 126, 127, 128, 995], "assert_frame_equ": 120, "assert_series_equ": 121, "parametr": [122, 123, 124, 125, 126, 127, 128, 995], "column": [122, 123, 139, 591, 613], "create_list_strategi": 124, "load_profil": 126, "seri": [127, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 987], "set_profil": 128, "threadpool_s": 129, "time_rang": 130, "zero": 131, "option": 132, "current": 132, "us": 132, "context": 132, "manag": 132, "aggreg": [133, 259, 607, 695], "__dataframe__": 134, "appli": [135, 236, 268, 539, 676, 701], "bottom_k": [136, 313, 608, 745], "clear": [137, 610, 751], "clone": [138, 611, 755], "corr": [140, 548], "describ": [141, 764], "drop": [142, 614], "drop_in_plac": 143, "drop_nul": [144, 333, 615, 768], "dtype": [145, 616, 813], "estimated_s": [146, 815], "explod": [147, 288, 380, 490, 618, 721, 820, 925], "fill_nan": [149, 382, 620, 822], "fill_nul": [150, 383, 621, 823], "filter": [151, 384, 622, 824], "find_idx_by_nam": 152, "fold": [153, 560], "frame_equ": 154, "get_column": [155, 156], "glimps": 157, "groupbi": [158, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 253, 625, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691], "groupby_dynam": [159, 626], "groupby_rol": [160, 627], "hash_row": 161, "head": [162, 239, 291, 393, 564, 628, 679, 724, 830], "height": 163, "hstack": 164, "insert_at_idx": 165, "interpol": [166, 396, 630, 834], "is_dupl": [167, 398, 837], "is_empti": [168, 838], "is_uniqu": [169, 408, 852], "item": [170, 854], "iter_row": 171, "iter_slic": 172, "join": [173, 292, 631, 725], "join_asof": [174, 632], "lazi": [175, 604, 634], "limit": [176, 414, 635, 857], "max": [177, 241, 295, 423, 568, 637, 681, 728, 782, 863], "mean": [178, 242, 296, 424, 569, 638, 682, 729, 783, 864], "median": [179, 243, 425, 570, 639, 683, 784, 865], "melt": [180, 640], "merge_sort": [181, 641], "min": [182, 244, 297, 434, 571, 642, 684, 730, 789, 866], "n_chunk": [183, 868], "n_uniqu": [184, 245, 438, 572, 685, 869], "null_count": [185, 442, 643, 874], "partition_bi": 186, "pipe": [187, 446, 644], "pivot": 188, "product": [189, 449, 878], "quantil": [190, 246, 450, 574, 646, 686, 880], "rechunk": [191, 452, 882], "renam": [192, 648, 884], "replac": [193, 500, 935], "replace_at_idx": 194, "revers": [195, 298, 456, 649, 731, 886], "row": [196, 197], "sampl": [198, 468, 898], "schema": [199, 650, 955], "select": [200, 256, 579, 598, 651, 694, 990], "set_sort": [201, 470, 652, 903], "shape": [202, 904], "shift": [203, 299, 471, 653, 732, 905], "shift_and_fil": [204, 472, 654, 906], "shrink_to_fit": [205, 908], "slice": [206, 300, 479, 504, 658, 733, 914, 939], "sort": [207, 301, 480, 659, 734, 915], "std": [208, 483, 581, 660, 917], "sum": [209, 247, 302, 521, 583, 661, 687, 735, 957], "tail": [210, 248, 303, 522, 584, 662, 688, 736, 958], "take_everi": [211, 524, 663, 960], "to_arrow": [212, 964], "to_dict": [213, 214], "to_dummi": [215, 965], "to_init_repr": [216, 967], "to_numpi": [217, 969], "to_panda": [218, 970], "to_seri": 219, "to_struct": [220, 305, 738], "top_k": [221, 528, 664, 972], "transpos": 222, "uniqu": [223, 306, 530, 665, 739, 973], "unnest": [224, 666, 956], "unstack": 225, "updat": [226, 667], "upsampl": 227, "var": [228, 534, 586, 668, 977], "vstack": 229, "width": [230, 669], "with_column": [231, 670], "with_row_count": [232, 672], "__iter__": 233, "agg": [234, 674], "all": [235, 264, 537, 675, 698], "count": [237, 323, 549, 677], "first": [238, 289, 385, 559, 623, 678, 722], "last": [240, 293, 411, 633, 680, 726], "attribut": [249, 689, 980], "comput": [250, 592, 984], "descript": [251, 690, 985], "export": [252, 986], "miscellan": [255, 597, 604, 693, 989], "manipul": [256, 598, 694, 990], "data": 257, "type": 257, "numer": [257, 599], "tempor": [257, 602, 993], "nest": 257, "other": 257, "expr": [260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536], "ab": [260, 696], "add": 261, "agg_group": 262, "alia": [263, 697], "and_": 265, "ani": [266, 538, 699], "append": [267, 700], "approx_uniqu": [269, 540], "arcco": [270, 702], "arccosh": [271, 703], "arcsin": [272, 704], "arcsinh": [273, 705], "arctan": [274, 706], "arctanh": [275, 707], "arg_max": [276, 281, 708, 714], "arg_min": [277, 282, 709, 715], "arg_sort": [278, 710], "arg_tru": [279, 711], "arg_uniqu": [280, 712], "arr": [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739], "contain": [284, 308, 485, 717, 740, 920], "count_match": [285, 486, 718, 921], "diff": [286, 330, 719, 765], "eval": [287, 720], "get": [290, 723], "length": [294, 495, 727, 930], "take": [304, 523, 737, 959], "backward_fil": 307, "bin": [308, 309, 310, 311, 312, 740, 741, 742, 743, 744], "decod": [309, 487, 741, 922], "encod": [310, 488, 742, 923], "ends_with": [311, 489, 743, 924], "starts_with": [312, 508, 744, 943], "cach": [314, 609], "cast": [315, 746], "cat": [316, 747, 748], "set_ord": [316, 748], "ceil": [317, 749], "clip": [318, 752], "clip_max": [319, 753], "clip_min": [320, 754], "co": [321, 756], "cosh": [322, 757], "cumcount": 324, "cummax": [325, 758], "cummin": [326, 759], "cumprod": [327, 760], "cumsum": [328, 553, 761], "cumulative_ev": [329, 762], "dot": [331, 766], "drop_nan": [332, 767], "dt": [334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812], "cast_time_unit": [334, 770], "combin": [335, 771], "convert_time_zon": [336, 772], "dai": [339, 340, 775, 776], "epoch": [341, 777], "hour": [342, 343, 778, 779], "is_leap_year": [344, 780], "iso_year": [345, 781], "microsecond": [346, 347, 785, 786], "millisecond": [348, 349, 787, 788], "minut": [350, 351, 790, 791], "month": [352, 792], "month_end": [353, 793], "month_start": [354, 794], "nanosecond": [355, 356, 795, 796], "offset_bi": [357, 797], "ordinal_dai": [358, 798], "quarter": [359, 799], "replace_time_zon": [360, 800], "round": [361, 467, 801, 897], "second": [362, 363, 802, 803], "strftime": [364, 804], "timestamp": [366, 806], "to_str": [367, 807], "truncat": [368, 808], "week": [369, 809], "weekdai": [370, 810], "with_time_unit": [371, 811], "year": [372, 812], "entropi": [373, 814], "eq": [374, 426], "ewm_mean": [375, 816], "ewm_std": [376, 817], "ewm_var": [377, 818], "exclud": [378, 558], "exp": [379, 819], "extend_const": [381, 821], "flatten": 386, "floor": [387, 826], "floordiv": 388, "forward_fil": 389, "ge": 390, "gt": 391, "hash": [392, 829], "implod": [394, 832], "inspect": [395, 629], "is_between": [397, 835], "is_finit": [399, 839], "is_first": [400, 840], "is_in": [401, 842], "is_infinit": [402, 843], "is_nan": [403, 845], "is_not": 404, "is_not_nan": [405, 846], "is_not_nul": [406, 847], "is_nul": [407, 848], "keep_nam": 409, "kurtosi": [410, 855], "le": 412, "len": [413, 856], "log": [415, 858], "log10": [416, 859], "log1p": [417, 860], "lower_bound": [418, 861], "lt": 419, "map": [420, 567, 636], "map_alia": 421, "map_dict": [422, 862], "meta": [426, 427, 428, 429, 430, 431, 432, 433, 596], "has_multiple_output": 427, "is_regex_project": 428, "ne": [429, 441], "output_nam": 430, "pop": 431, "root_nam": 432, "undo_alias": 433, "mod": 435, "mode": [436, 867], "mul": 437, "nan_max": [439, 871], "nan_min": [440, 872], "or_": 443, "over": 444, "pct_chang": [445, 875], "pow": 447, "prefix": 448, "rank": [451, 881], "reinterpret": [453, 883], "repeat_bi": 454, "reshap": [455, 885], "rolling_appli": [457, 887], "rolling_max": [458, 888], "rolling_mean": [459, 889], "rolling_median": [460, 890], "rolling_min": [461, 891], "rolling_quantil": [462, 892], "rolling_skew": [463, 893], "rolling_std": [464, 894], "rolling_sum": [465, 895], "rolling_var": [466, 896], "search_sort": [469, 899], "shrink_dtyp": [473, 907], "shuffl": [474, 909], "sign": [475, 910], "sin": [476, 911], "sinh": [477, 912], "skew": [478, 913], "sort_bi": 481, "sqrt": [482, 916], "str": [484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951], "extract": [491, 926], "extract_al": [492, 927], "json_extract": [493, 928], "json_path_match": [494, 929], "ljust": [496, 931], "lstrip": [497, 932], "n_char": [498, 933], "parse_int": [499, 934], "replace_al": [501, 936], "rjust": [502, 937], "rstrip": [503, 938], "split": [505, 940], "split_exact": [506, 941], "splitn": [507, 942], "strip": [509, 944], "strptime": [510, 945], "to_dat": [511, 946], "to_datetim": [512, 947], "to_lowercas": [513, 948], "to_tim": [514, 949], "to_uppercas": [515, 950], "zfill": [516, 951], "field": [517, 952, 953], "rename_field": [518, 954], "sub": 519, "suffix": 520, "tan": [525, 961], "tanh": [526, 962], "to_phys": [527, 971], "truediv": 529, "unique_count": [531, 974], "upper_bound": [532, 975], "value_count": [533, 976], "where": 535, "xor": 536, "arang": 541, "arg_sort_bi": 542, "avg": 543, "coalesc": 544, "col": 545, "concat_list": 546, "concat_str": 547, "cov": 550, "cumfold": 551, "cumreduc": 552, "element": 557, "format": 561, "from_epoch": 562, "group": 563, "lit": 566, "pearson_corr": 573, "reduc": 575, "repeat": 576, "rolling_corr": 577, "rolling_cov": 578, "spearman_rank_corr": 580, "when": 587, "categori": [590, 983], "name": [591, 870], "express": 594, "oper": 599, "conjunct": 599, "comparison": 599, "string": [600, 991], "window": 603, "convers": 604, "eager": 604, "parallel": 604, "refer": 605, "input": 606, "output": 606, "feather": 606, "ipc": 606, "parquet": 606, "databas": 606, "json": 606, "avro": 606, "excel": 606, "delta": 606, "lake": 606, "dataset": 606, "lazyfram": [608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 692], "collect": 612, "explain": 617, "fetch": 619, "from_json": 624, "profil": [645, 995], "show_graph": 655, "sink_ipc": 656, "sink_parquet": 657, "with_context": 671, "lazygroupbi": [674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688], "read": 693, "write": 693, "logic": 693, "plan": 693, "chunk_length": 750, "flag": 825, "get_chunk": 827, "has_valid": 828, "hist": 831, "inner_dtyp": 833, "is_boolean": 836, "is_float": 841, "is_integ": 844, "is_numer": 849, "is_sort": 850, "is_tempor": 851, "is_utf8": 853, "new_from_index": 873, "peak_max": 876, "peak_min": 877, "qcut": 879, "series_equ": 900, "set": 901, "set_at_idx": 902, "time_unit": 963, "to_fram": 966, "to_list": 968, "view": 978, "zip_with": 979, "sql": 994, "method": 994, "assert": 995, "primit": 995, "strategi": 995, "helper": 995, "util": 996}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.from_dataframe": [[90, "polars-from-dataframe"]], "polars.exceptions.DuplicateError": [[78, "polars-exceptions-duplicateerror"]], "polars.exceptions.InvalidOperationError": [[79, "polars-exceptions-invalidoperationerror"]], "polars.time_range": [[130, "polars-time-range"]], "polars.from_pandas": [[94, "polars-from-pandas"]], "polars.ones": [[100, "polars-ones"]], "polars.read_ipc_schema": [[108, "polars-read-ipc-schema"]], "polars.exceptions.SchemaError": [[84, "polars-exceptions-schemaerror"]], "polars.enable_string_cache": [[74, "polars-enable-string-cache"]], "polars.exceptions.ArrowError": [[75, "polars-exceptions-arrowerror"]], "polars.from_records": [[95, "polars-from-records"]], "polars.testing.parametric.column": [[122, "polars-testing-parametric-column"]], "polars.testing.parametric.series": [[127, "polars-testing-parametric-series"]], "polars.exceptions.TooManyRowsReturnedError": [[88, "polars-exceptions-toomanyrowsreturnederror"]], "polars.scan_pyarrow_dataset": [[118, "polars-scan-pyarrow-dataset"]], "polars.testing.parametric.load_profile": [[126, "polars-testing-parametric-load-profile"]], "polars.DataFrame.__dataframe__": [[134, "polars-dataframe-dataframe"]], "polars.from_arrow": [[89, "polars-from-arrow"]], "polars.DataFrame.apply": [[135, "polars-dataframe-apply"]], "polars.DataFrame.clear": [[137, "polars-dataframe-clear"]], "polars.DataFrame.clone": [[138, "polars-dataframe-clone"]], "polars.read_ndjson": [[110, "polars-read-ndjson"]], "polars.exceptions.SchemaFieldNotFoundError": [[85, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.RowsError": [[83, "polars-exceptions-rowserror"]], "polars.testing.parametric.set_profile": [[128, "polars-testing-parametric-set-profile"]], "polars.scan_parquet": [[117, "polars-scan-parquet"]], "polars.testing.parametric.create_list_strategy": [[124, "polars-testing-parametric-create-list-strategy"]], "polars.scan_delta": [[114, "polars-scan-delta"]], "polars.testing.assert_frame_equal": [[120, "polars-testing-assert-frame-equal"]], "polars.collect_all": [[70, "polars-collect-all"]], "polars.read_csv": [[102, "polars-read-csv"]], "polars.from_numpy": [[93, "polars-from-numpy"]], "polars.exceptions.ComputeError": [[77, "polars-exceptions-computeerror"]], "polars.from_repr": [[96, "polars-from-repr"]], "polars.testing.parametric.columns": [[123, "polars-testing-parametric-columns"]], "Aggregation": [[133, "aggregation"], [695, "aggregation"], [607, "aggregation"], [259, "aggregation"]], "polars.exceptions.ShapeError": [[86, "polars-exceptions-shapeerror"]], "polars.read_parquet": [[111, "polars-read-parquet"]], "polars.from_dicts": [[92, "polars-from-dicts"]], "polars.date_range": [[73, "polars-date-range"]], "polars.get_dummies": [[97, "polars-get-dummies"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[99, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.read_parquet_schema": [[112, "polars-read-parquet-schema"]], "polars.exceptions.NoRowsReturnedError": [[81, "polars-exceptions-norowsreturnederror"]], "polars.get_index_type": [[98, "polars-get-index-type"]], "polars.cut": [[72, "polars-cut"]], "polars.read_json": [[109, "polars-read-json"]], "polars.scan_ndjson": [[116, "polars-scan-ndjson"]], "polars.read_avro": [[101, "polars-read-avro"]], "polars.testing.parametric.dataframes": [[125, "polars-testing-parametric-dataframes"]], "Config": [[132, "config"]], "Config options": [[132, "config-options"]], "Config load, save, and current state": [[132, "config-load-save-and-current-state"]], "Use as a context manager": [[132, "use-as-a-context-manager"]], "polars.exceptions.NoDataError": [[80, "polars-exceptions-nodataerror"]], "polars.DataFrame.bottom_k": [[136, "polars-dataframe-bottom-k"]], "polars.scan_csv": [[113, "polars-scan-csv"]], "polars.read_database": [[104, "polars-read-database"]], "polars.threadpool_size": [[129, "polars-threadpool-size"]], "polars.exceptions.StructFieldNotFoundError": [[87, "polars-exceptions-structfieldnotfounderror"]], "polars.scan_ipc": [[115, "polars-scan-ipc"]], "polars.zeros": [[131, "polars-zeros"]], "polars.read_excel": [[106, "polars-read-excel"]], "polars.testing.assert_series_equal": [[121, "polars-testing-assert-series-equal"]], "polars.read_ipc": [[107, "polars-read-ipc"]], "polars.concat": [[71, "polars-concat"]], "polars.exceptions.ColumnNotFoundError": [[76, "polars-exceptions-columnnotfounderror"]], "polars.show_versions": [[119, "polars-show-versions"]], "polars.from_dict": [[91, "polars-from-dict"]], "polars.read_delta": [[105, "polars-read-delta"]], "polars.exceptions.PolarsPanicError": [[82, "polars-exceptions-polarspanicerror"]], "polars.DataFrame.columns": [[139, "polars-dataframe-columns"]], "polars.read_csv_batched": [[103, "polars-read-csv-batched"]], "polars.Config.set_tbl_hide_column_names": [[19, "polars-config-set-tbl-hide-column-names"]], "polars.arg_where": [[68, "polars-arg-where"]], "polars.UInt16": [[57, "polars-uint16"]], "polars.Config.set_tbl_cell_alignment": [[13, "polars-config-set-tbl-cell-alignment"]], "polars.Date": [[36, "polars-date"]], "polars.Config.save": [[8, "polars-config-save"]], "polars.DataFrame.write_ipc": [[31, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_ndjson": [[33, "polars-dataframe-write-ndjson"]], "polars.Utf8": [[62, "polars-utf8"]], "polars.Config.set_tbl_hide_column_data_types": [[18, "polars-config-set-tbl-hide-column-data-types"]], "polars.Int64": [[44, "polars-int64"]], "polars.List": [[46, "polars-list"]], "polars.Unknown": [[61, "polars-unknown"]], "polars.Config.set_tbl_formatting": [[17, "polars-config-set-tbl-formatting"]], "polars.Float32": [[40, "polars-float32"]], "polars.SQLContext.execute": [[49, "polars-sqlcontext-execute"]], "polars.Int8": [[45, "polars-int8"]], "polars.SQLContext.unregister": [[53, "polars-sqlcontext-unregister"]], "polars.StringCache": [[54, "polars-stringcache"]], "polars.align_frames": [[63, "polars-align-frames"]], "polars.Config.set_ascii_tables": [[9, "polars-config-set-ascii-tables"]], "polars.api.register_lazyframe_namespace": [[66, "polars-api-register-lazyframe-namespace"]], "polars.Config.set_streaming_chunk_size": [[12, "polars-config-set-streaming-chunk-size"]], "polars.DataFrame.write_delta": [[29, "polars-dataframe-write-delta"]], "polars.DataFrame.write_csv": [[27, "polars-dataframe-write-csv"]], "polars.DataFrame.write_excel": [[30, "polars-dataframe-write-excel"]], "polars.Config.set_tbl_hide_dataframe_shape": [[20, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.activate_decimals": [[5, "polars-config-activate-decimals"]], "polars.DataFrame.write_avro": [[26, "polars-dataframe-write-avro"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Struct": [[55, "polars-struct"]], "polars.UInt32": [[58, "polars-uint32"]], "polars.Config.set_fmt_float": [[10, "polars-config-set-fmt-float"]], "polars.api.register_expr_namespace": [[65, "polars-api-register-expr-namespace"]], "polars.Config.set_fmt_str_lengths": [[11, "polars-config-set-fmt-str-lengths"]], "polars.build_info": [[69, "polars-build-info"]], "polars.Int32": [[43, "polars-int32"]], "polars.Config.set_tbl_rows": [[22, "polars-config-set-tbl-rows"]], "polars.DataFrame.write_database": [[28, "polars-dataframe-write-database"]], "polars.DataFrame.write_json": [[32, "polars-dataframe-write-json"]], "polars.SQLContext.register": [[50, "polars-sqlcontext-register"]], "polars.Int16": [[42, "polars-int16"]], "polars.Config.load": [[6, "polars-config-load"]], "polars.Config.state": [[25, "polars-config-state"]], "polars.Datetime": [[37, "polars-datetime"]], "polars.DataFrame.write_parquet": [[34, "polars-dataframe-write-parquet"]], "polars.UInt8": [[60, "polars-uint8"]], "polars.Config.set_tbl_cols": [[14, "polars-config-set-tbl-cols"]], "polars.Config.restore_defaults": [[7, "polars-config-restore-defaults"]], "polars.SQLContext.register_many": [[52, "polars-sqlcontext-register-many"]], "polars.Decimal": [[38, "polars-decimal"]], "polars.api.register_dataframe_namespace": [[64, "polars-api-register-dataframe-namespace"]], "polars.Binary": [[2, "polars-binary"]], "polars.Categorical": [[4, "polars-categorical"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [995, "examples"]], "polars.DataType": [[35, "polars-datatype"]], "polars.Duration": [[39, "polars-duration"]], "polars.Null": [[47, "polars-null"]], "polars.Object": [[48, "polars-object"]], "polars.SQLContext.register_globals": [[51, "polars-sqlcontext-register-globals"]], "polars.Time": [[56, "polars-time"]], "polars.Config.set_verbose": [[24, "polars-config-set-verbose"]], "polars.Config.set_tbl_column_data_type_inline": [[15, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_width_chars": [[23, "polars-config-set-tbl-width-chars"]], "polars.Float64": [[41, "polars-float64"]], "polars.Config.set_tbl_hide_dtype_separator": [[21, "polars-config-set-tbl-hide-dtype-separator"]], "polars.UInt64": [[59, "polars-uint64"]], "polars.api.register_series_namespace": [[67, "polars-api-register-series-namespace"]], "polars.Config.set_tbl_dataframe_shape_below": [[16, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Series.tan": [[961, "polars-series-tan"]], "polars.Series.upper_bound": [[975, "polars-series-upper-bound"]], "polars.Series.sin": [[911, "polars-series-sin"]], "polars.Series.view": [[978, "polars-series-view"]], "polars.Series.time_unit": [[963, "polars-series-time-unit"]], "polars.Series.str.to_time": [[949, "polars-series-str-to-time"]], "polars.Series.str.count_match": [[921, "polars-series-str-count-match"]], "polars.Series.str.to_datetime": [[947, "polars-series-str-to-datetime"]], "polars.Series.to_arrow": [[964, "polars-series-to-arrow"]], "polars.Series.sign": [[910, "polars-series-sign"]], "polars.Series.str.to_lowercase": [[948, "polars-series-str-to-lowercase"]], "polars.Series.struct.schema": [[955, "polars-series-struct-schema"]], "polars.Series.str.explode": [[925, "polars-series-str-explode"]], "polars.Series.std": [[917, "polars-series-std"]], "polars.Series.str.split_exact": [[941, "polars-series-str-split-exact"]], "polars.Series.struct.rename_fields": [[954, "polars-series-struct-rename-fields"]], "polars.Series.tail": [[958, "polars-series-tail"]], "polars.Series.str.strptime": [[945, "polars-series-str-strptime"]], "polars.Series.to_numpy": [[969, "polars-series-to-numpy"]], "polars.Series.str.to_date": [[946, "polars-series-str-to-date"]], "polars.Series.unique_counts": [[974, "polars-series-unique-counts"]], "polars.Series.str.zfill": [[951, "polars-series-str-zfill"]], "polars.Series.value_counts": [[976, "polars-series-value-counts"]], "polars.Series.str.contains": [[920, "polars-series-str-contains"]], "polars.Series.str.extract_all": [[927, "polars-series-str-extract-all"]], "polars.Series.sinh": [[912, "polars-series-sinh"]], "polars.Series.to_init_repr": [[967, "polars-series-to-init-repr"]], "polars.Series.top_k": [[972, "polars-series-top-k"]], "polars.Series.to_physical": [[971, "polars-series-to-physical"]], "polars.Series.var": [[977, "polars-series-var"]], "polars.Series.to_pandas": [[970, "polars-series-to-pandas"]], "polars.Series.take_every": [[960, "polars-series-take-every"]], "polars.Series.str.extract": [[926, "polars-series-str-extract"]], "polars.Series.str.json_path_match": [[929, "polars-series-str-json-path-match"]], "polars.Series.str.encode": [[923, "polars-series-str-encode"]], "polars.Series.str.parse_int": [[934, "polars-series-str-parse-int"]], "polars.Series.str.ljust": [[931, "polars-series-str-ljust"]], "polars.Series.skew": [[913, "polars-series-skew"]], "polars.Series.str.splitn": [[942, "polars-series-str-splitn"]], "polars.Series.str.slice": [[939, "polars-series-str-slice"]], "polars.Series.take": [[959, "polars-series-take"]], "polars.Series.tanh": [[962, "polars-series-tanh"]], "polars.Series.str.ends_with": [[924, "polars-series-str-ends-with"]], "polars.Series.str.strip": [[944, "polars-series-str-strip"]], "polars.Series.struct.unnest": [[956, "polars-series-struct-unnest"]], "polars.Series.to_frame": [[966, "polars-series-to-frame"]], "polars.Series.struct.field": [[952, "polars-series-struct-field"]], "polars.Series.sum": [[957, "polars-series-sum"]], "polars.Series.str.starts_with": [[943, "polars-series-str-starts-with"]], "polars.Series.unique": [[973, "polars-series-unique"]], "polars.Series.to_list": [[968, "polars-series-to-list"]], "polars.Series.sqrt": [[916, "polars-series-sqrt"]], "polars.Series.struct.fields": [[953, "polars-series-struct-fields"]], "polars.Series.str.rjust": [[937, "polars-series-str-rjust"]], "polars.Series.str.lstrip": [[932, "polars-series-str-lstrip"]], "polars.Series.str.rstrip": [[938, "polars-series-str-rstrip"]], "polars.Series.str.to_uppercase": [[950, "polars-series-str-to-uppercase"]], "polars.Series.to_dummies": [[965, "polars-series-to-dummies"]], "polars.Series.str": [[918, "polars-series-str"]], "polars.Series.str.decode": [[922, "polars-series-str-decode"]], "polars.Series.zip_with": [[979, "polars-series-zip-with"]], "polars.Series.str.concat": [[919, "polars-series-str-concat"]], "polars.Series.str.split": [[940, "polars-series-str-split"]], "polars.Series.str.json_extract": [[928, "polars-series-str-json-extract"]], "polars.Series.str.n_chars": [[933, "polars-series-str-n-chars"]], "polars.Series.str.replace": [[935, "polars-series-str-replace"]], "polars.Series.slice": [[914, "polars-series-slice"]], "polars.Series.sort": [[915, "polars-series-sort"]], "polars.Series.str.replace_all": [[936, "polars-series-str-replace-all"]], "polars.Series.str.lengths": [[930, "polars-series-str-lengths"]], "polars.Series.lower_bound": [[861, "polars-series-lower-bound"]], "polars.Series.log1p": [[860, "polars-series-log1p"]], "polars.Series.item": [[854, "polars-series-item"]], "polars.Series.is_in": [[842, "polars-series-is-in"]], "polars.Series.map_dict": [[862, "polars-series-map-dict"]], "polars.Series.new_from_index": [[873, "polars-series-new-from-index"]], "polars.Series.rolling_min": [[891, "polars-series-rolling-min"]], "polars.Series.is_utf8": [[853, "polars-series-is-utf8"]], "polars.Series.rolling_max": [[888, "polars-series-rolling-max"]], "polars.Series.is_sorted": [[850, "polars-series-is-sorted"]], "polars.Series.shrink_dtype": [[907, "polars-series-shrink-dtype"]], "polars.Series.is_integer": [[844, "polars-series-is-integer"]], "polars.Series.nan_min": [[872, "polars-series-nan-min"]], "polars.Series.name": [[870, "polars-series-name"]], "polars.Series.qcut": [[879, "polars-series-qcut"]], "polars.Series.rolling_median": [[890, "polars-series-rolling-median"]], "polars.Series.null_count": [[874, "polars-series-null-count"]], "polars.Series.rolling_skew": [[893, "polars-series-rolling-skew"]], "polars.Series.mean": [[864, "polars-series-mean"]], "polars.Series.len": [[856, "polars-series-len"]], "polars.Series.series_equal": [[900, "polars-series-series-equal"]], "polars.Series.set": [[901, "polars-series-set"]], "polars.Series.is_not_nan": [[846, "polars-series-is-not-nan"]], "polars.Series.rolling_var": [[896, "polars-series-rolling-var"]], "polars.Series.is_nan": [[845, "polars-series-is-nan"]], "polars.Series.reinterpret": [[883, "polars-series-reinterpret"]], "polars.Series.is_first": [[840, "polars-series-is-first"]], "polars.Series.reverse": [[886, "polars-series-reverse"]], "polars.Series.is_null": [[848, "polars-series-is-null"]], "polars.Series.search_sorted": [[899, "polars-series-search-sorted"]], "polars.Series.shuffle": [[909, "polars-series-shuffle"]], "polars.Series.n_unique": [[869, "polars-series-n-unique"]], "polars.Series.median": [[865, "polars-series-median"]], "polars.Series.shift_and_fill": [[906, "polars-series-shift-and-fill"]], "polars.Series.is_numeric": [[849, "polars-series-is-numeric"]], "polars.Series.peak_min": [[877, "polars-series-peak-min"]], "polars.Series.mode": [[867, "polars-series-mode"]], "polars.Series.log10": [[859, "polars-series-log10"]], "polars.Series.sample": [[898, "polars-series-sample"]], "polars.Series.is_infinite": [[843, "polars-series-is-infinite"]], "polars.Series.round": [[897, "polars-series-round"]], "polars.Series.peak_max": [[876, "polars-series-peak-max"]], "polars.Series.nan_max": [[871, "polars-series-nan-max"]], "polars.Series.rank": [[881, "polars-series-rank"]], "polars.Series.set_at_idx": [[902, "polars-series-set-at-idx"]], "polars.Series.limit": [[857, "polars-series-limit"]], "polars.Series.is_float": [[841, "polars-series-is-float"]], "polars.Series.rolling_quantile": [[892, "polars-series-rolling-quantile"]], "polars.Series.shift": [[905, "polars-series-shift"]], "polars.Series.n_chunks": [[868, "polars-series-n-chunks"]], "polars.Series.shape": [[904, "polars-series-shape"]], "polars.Series.min": [[866, "polars-series-min"]], "polars.Series.kurtosis": [[855, "polars-series-kurtosis"]], "polars.Series.rolling_std": [[894, "polars-series-rolling-std"]], "polars.Series.rolling_sum": [[895, "polars-series-rolling-sum"]], "polars.Series.rolling_mean": [[889, "polars-series-rolling-mean"]], "polars.Series.is_unique": [[852, "polars-series-is-unique"]], "polars.Series.is_not_null": [[847, "polars-series-is-not-null"]], "polars.Series.log": [[858, "polars-series-log"]], "polars.Series.product": [[878, "polars-series-product"]], "polars.Series.pct_change": [[875, "polars-series-pct-change"]], "polars.Series.rolling_apply": [[887, "polars-series-rolling-apply"]], "polars.Series.set_sorted": [[903, "polars-series-set-sorted"]], "polars.Series.rechunk": [[882, "polars-series-rechunk"]], "polars.Series.reshape": [[885, "polars-series-reshape"]], "polars.Series.rename": [[884, "polars-series-rename"]], "polars.Series.is_temporal": [[851, "polars-series-is-temporal"]], "polars.Series.shrink_to_fit": [[908, "polars-series-shrink-to-fit"]], "polars.Series.max": [[863, "polars-series-max"]], "polars.Series.quantile": [[880, "polars-series-quantile"]], "polars.Series.inner_dtype": [[833, "polars-series-inner-dtype"]], "polars.Series.dt.microseconds": [[786, "polars-series-dt-microseconds"]], "polars.Series.dt.timestamp": [[806, "polars-series-dt-timestamp"]], "polars.Series.estimated_size": [[815, "polars-series-estimated-size"]], "polars.Series.interpolate": [[834, "polars-series-interpolate"]], "polars.Series.dt.combine": [[771, "polars-series-dt-combine"]], "polars.Series.dt.mean": [[783, "polars-series-dt-mean"]], "polars.Series.dt.month_end": [[793, "polars-series-dt-month-end"]], "polars.Series.dt.to_string": [[807, "polars-series-dt-to-string"]], "polars.Series.filter": [[824, "polars-series-filter"]], "polars.Series.has_validity": [[828, "polars-series-has-validity"]], "polars.Series.dt.datetime": [[774, "polars-series-dt-datetime"]], "polars.Series.ewm_var": [[818, "polars-series-ewm-var"]], "polars.Series.fill_nan": [[822, "polars-series-fill-nan"]], "polars.Series.hash": [[829, "polars-series-hash"]], "polars.Series.explode": [[820, "polars-series-explode"]], "polars.Series.floor": [[826, "polars-series-floor"]], "polars.Series.dt.millisecond": [[787, "polars-series-dt-millisecond"]], "polars.Series.dt.microsecond": [[785, "polars-series-dt-microsecond"]], "polars.Series.implode": [[832, "polars-series-implode"]], "polars.Series.hist": [[831, "polars-series-hist"]], "polars.Series.dt.min": [[789, "polars-series-dt-min"]], "polars.Series.get_chunks": [[827, "polars-series-get-chunks"]], "polars.Series.dt.max": [[782, "polars-series-dt-max"]], "polars.Series.dtype": [[813, "polars-series-dtype"]], "polars.Series.dt.round": [[801, "polars-series-dt-round"]], "polars.Series.dt.replace_time_zone": [[800, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.seconds": [[803, "polars-series-dt-seconds"]], "polars.Series.is_duplicated": [[837, "polars-series-is-duplicated"]], "polars.Series.dt.month_start": [[794, "polars-series-dt-month-start"]], "polars.Series.dt.minutes": [[791, "polars-series-dt-minutes"]], "polars.Series.dt.epoch": [[777, "polars-series-dt-epoch"]], "polars.Series.dt.quarter": [[799, "polars-series-dt-quarter"]], "polars.Series.dt.month": [[792, "polars-series-dt-month"]], "polars.Series.head": [[830, "polars-series-head"]], "polars.Series.is_boolean": [[836, "polars-series-is-boolean"]], "polars.Series.dt.day": [[775, "polars-series-dt-day"]], "polars.Series.is_between": [[835, "polars-series-is-between"]], "polars.Series.dt.nanoseconds": [[796, "polars-series-dt-nanoseconds"]], "polars.Series.fill_null": [[823, "polars-series-fill-null"]], "polars.Series.dt.truncate": [[808, "polars-series-dt-truncate"]], "polars.Series.dt.minute": [[790, "polars-series-dt-minute"]], "polars.Series.entropy": [[814, "polars-series-entropy"]], "polars.Series.flags": [[825, "polars-series-flags"]], "polars.Series.dt.hours": [[779, "polars-series-dt-hours"]], "polars.Series.dt.iso_year": [[781, "polars-series-dt-iso-year"]], "polars.Series.dt.is_leap_year": [[780, "polars-series-dt-is-leap-year"]], "polars.Series.dt.weekday": [[810, "polars-series-dt-weekday"]], "polars.Series.dt.with_time_unit": [[811, "polars-series-dt-with-time-unit"]], "polars.Series.is_empty": [[838, "polars-series-is-empty"]], "polars.Series.dt.second": [[802, "polars-series-dt-second"]], "polars.Series.dt.offset_by": [[797, "polars-series-dt-offset-by"]], "polars.Series.extend_constant": [[821, "polars-series-extend-constant"]], "polars.Series.dt.year": [[812, "polars-series-dt-year"]], "polars.Series.dt.cast_time_unit": [[770, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.hour": [[778, "polars-series-dt-hour"]], "polars.Series.dt.convert_time_zone": [[772, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.ordinal_day": [[798, "polars-series-dt-ordinal-day"]], "polars.Series.dt.strftime": [[804, "polars-series-dt-strftime"]], "polars.Series.ewm_mean": [[816, "polars-series-ewm-mean"]], "polars.Series.dt.days": [[776, "polars-series-dt-days"]], "polars.Series.dt.week": [[809, "polars-series-dt-week"]], "polars.Series.dt.date": [[773, "polars-series-dt-date"]], "polars.Series.exp": [[819, "polars-series-exp"]], "polars.Series.dt.nanosecond": [[795, "polars-series-dt-nanosecond"]], "polars.Series.dt.time": [[805, "polars-series-dt-time"]], "polars.Series.is_finite": [[839, "polars-series-is-finite"]], "polars.Series.dt.median": [[784, "polars-series-dt-median"]], "polars.Series.dt.milliseconds": [[788, "polars-series-dt-milliseconds"]], "polars.Series.ewm_std": [[817, "polars-series-ewm-std"]], "polars.Series.bottom_k": [[745, "polars-series-bottom-k"]], "polars.Series.cumulative_eval": [[762, "polars-series-cumulative-eval"]], "polars.Series.bin.ends_with": [[743, "polars-series-bin-ends-with"]], "polars.Series.arg_sort": [[710, "polars-series-arg-sort"]], "polars.Series.arr.lengths": [[727, "polars-series-arr-lengths"]], "polars.Series.arg_unique": [[712, "polars-series-arg-unique"]], "polars.Series.arr.tail": [[736, "polars-series-arr-tail"]], "polars.Series.drop_nulls": [[768, "polars-series-drop-nulls"]], "polars.Series.arg_min": [[709, "polars-series-arg-min"]], "polars.Series.arr.last": [[726, "polars-series-arr-last"]], "polars.Series.arr.eval": [[720, "polars-series-arr-eval"]], "polars.Series.arr.contains": [[717, "polars-series-arr-contains"]], "polars.Series.arccos": [[702, "polars-series-arccos"]], "polars.Series.bin.encode": [[742, "polars-series-bin-encode"]], "polars.Series.arcsin": [[704, "polars-series-arcsin"]], "polars.Series.arr.diff": [[719, "polars-series-arr-diff"]], "polars.Series.arr.max": [[728, "polars-series-arr-max"]], "polars.Series.arcsinh": [[705, "polars-series-arcsinh"]], "polars.Series.cummin": [[759, "polars-series-cummin"]], "polars.Series.cumprod": [[760, "polars-series-cumprod"]], "polars.Series.arr.arg_min": [[715, "polars-series-arr-arg-min"]], "polars.Series.arr.slice": [[733, "polars-series-arr-slice"]], "polars.Series.arr.head": [[724, "polars-series-arr-head"]], "polars.Series.cosh": [[757, "polars-series-cosh"]], "polars.Series.arr.sum": [[735, "polars-series-arr-sum"]], "polars.Series.bin.decode": [[741, "polars-series-bin-decode"]], "polars.Series.cast": [[746, "polars-series-cast"]], "polars.Series.arr.reverse": [[731, "polars-series-arr-reverse"]], "polars.Series.arr": [[713, "polars-series-arr"]], "polars.Series.arr.sort": [[734, "polars-series-arr-sort"]], "polars.Series.arr.first": [[722, "polars-series-arr-first"]], "polars.Series.dot": [[766, "polars-series-dot"]], "polars.Series.arr.count_match": [[718, "polars-series-arr-count-match"]], "polars.Series.bin.contains": [[740, "polars-series-bin-contains"]], "polars.Series.clear": [[751, "polars-series-clear"]], "polars.Series.drop_nans": [[767, "polars-series-drop-nans"]], "polars.Series.dt": [[769, "polars-series-dt"]], "polars.Series.arr.to_struct": [[738, "polars-series-arr-to-struct"]], "polars.Series.cos": [[756, "polars-series-cos"]], "polars.Series.arr.shift": [[732, "polars-series-arr-shift"]], "polars.Series.cat.set_ordering": [[748, "polars-series-cat-set-ordering"]], "polars.Series.apply": [[701, "polars-series-apply"]], "polars.Series.cummax": [[758, "polars-series-cummax"]], "polars.Series.arr.take": [[737, "polars-series-arr-take"]], "polars.Series.cat": [[747, "polars-series-cat"]], "polars.Series.cut": [[763, "polars-series-cut"]], "polars.Series.arg_max": [[708, "polars-series-arg-max"]], "polars.Series.clone": [[755, "polars-series-clone"]], "polars.Series.cumsum": [[761, "polars-series-cumsum"]], "polars.Series.diff": [[765, "polars-series-diff"]], "polars.Series.arccosh": [[703, "polars-series-arccosh"]], "polars.Series.arr.concat": [[716, "polars-series-arr-concat"]], "polars.Series.arr.arg_max": [[714, "polars-series-arr-arg-max"]], "polars.Series.arctan": [[706, "polars-series-arctan"]], "polars.Series.arr.get": [[723, "polars-series-arr-get"]], "polars.Series.bin.starts_with": [[744, "polars-series-bin-starts-with"]], "polars.Series.arr.explode": [[721, "polars-series-arr-explode"]], "polars.Series.ceil": [[749, "polars-series-ceil"]], "polars.Series.arg_true": [[711, "polars-series-arg-true"]], "polars.Series.chunk_lengths": [[750, "polars-series-chunk-lengths"]], "polars.Series.clip": [[752, "polars-series-clip"]], "polars.Series.describe": [[764, "polars-series-describe"]], "polars.Series.arr.unique": [[739, "polars-series-arr-unique"]], "polars.Series.clip_min": [[754, "polars-series-clip-min"]], "polars.Series.arr.mean": [[729, "polars-series-arr-mean"]], "polars.Series.arr.join": [[725, "polars-series-arr-join"]], "polars.Series.arr.min": [[730, "polars-series-arr-min"]], "polars.Series.append": [[700, "polars-series-append"]], "polars.Series.arctanh": [[707, "polars-series-arctanh"]], "polars.Series.clip_max": [[753, "polars-series-clip-max"]], "Binary": [[981, "binary"], [588, "binary"], [599, "binary"]], "SQL": [[994, "sql"]], "Methods": [[994, "methods"]], "String": [[991, "string"], [600, "string"]], "Computation": [[984, "computation"], [592, "computation"], [250, "computation"]], "Struct": [[992, "struct"], [601, "struct"]], "Temporal": [[993, "temporal"], [602, "temporal"], [257, "temporal"]], "Series": [[987, "series"]], "Testing": [[995, "testing"]], "Asserts": [[995, "asserts"]], "Parametric testing": [[995, "parametric-testing"]], "Polars primitives": [[995, "polars-primitives"]], "Strategy helpers": [[995, "strategy-helpers"]], "Profiles": [[995, "profiles"]], "Categories": [[983, "categories"], [590, "categories"]], "Boolean": [[982, "boolean"], [589, "boolean"]], "Export": [[986, "export"], [252, "export"]], "Attributes": [[980, "attributes"], [689, "attributes"], [249, "attributes"]], "Manipulation/selection": [[990, "manipulation-selection"], [694, "manipulation-selection"], [598, "manipulation-selection"], [256, "manipulation-selection"]], "Descriptive": [[985, "descriptive"], [690, "descriptive"], [251, "descriptive"]], "Miscellaneous": [[989, "miscellaneous"], [693, "miscellaneous"], [604, "miscellaneous"], [597, "miscellaneous"], [255, "miscellaneous"]], "List": [[988, "list"], [595, "list"]], "Utils": [[996, "utils"]], "Read/write logical plan": [[693, "read-write-logical-plan"]], "polars.LazyFrame.mean": [[638, "polars-lazyframe-mean"]], "polars.LazyFrame.pipe": [[644, "polars-lazyframe-pipe"]], "polars.LazyFrame.sink_ipc": [[656, "polars-lazyframe-sink-ipc"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[686, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.LazyFrame.reverse": [[649, "polars-lazyframe-reverse"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[688, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.LazyFrame.select": [[651, "polars-lazyframe-select"]], "polars.LazyFrame.sum": [[661, "polars-lazyframe-sum"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[678, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[679, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.LazyFrame.sort": [[659, "polars-lazyframe-sort"]], "polars.LazyFrame.rename": [[648, "polars-lazyframe-rename"]], "polars.LazyFrame.profile": [[645, "polars-lazyframe-profile"]], "polars.LazyFrame.last": [[633, "polars-lazyframe-last"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[677, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[682, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[684, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[687, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.Series.abs": [[696, "polars-series-abs"]], "polars.LazyFrame.map": [[636, "polars-lazyframe-map"]], "polars.LazyFrame.with_columns": [[670, "polars-lazyframe-with-columns"]], "polars.LazyFrame.std": [[660, "polars-lazyframe-std"]], "polars.LazyFrame.unnest": [[666, "polars-lazyframe-unnest"]], "polars.LazyFrame.update": [[667, "polars-lazyframe-update"]], "polars.LazyFrame.unique": [[665, "polars-lazyframe-unique"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[675, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.LazyFrame.join_asof": [[632, "polars-lazyframe-join-asof"]], "polars.LazyFrame.write_json": [[673, "polars-lazyframe-write-json"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[683, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[680, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.LazyFrame.tail": [[662, "polars-lazyframe-tail"]], "polars.LazyFrame.merge_sorted": [[641, "polars-lazyframe-merge-sorted"]], "LazyFrame": [[692, "lazyframe"]], "polars.LazyFrame.schema": [[650, "polars-lazyframe-schema"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[685, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.LazyFrame.top_k": [[664, "polars-lazyframe-top-k"]], "polars.LazyFrame.shift": [[653, "polars-lazyframe-shift"]], "polars.LazyFrame.max": [[637, "polars-lazyframe-max"]], "polars.LazyFrame.median": [[639, "polars-lazyframe-median"]], "polars.LazyFrame.set_sorted": [[652, "polars-lazyframe-set-sorted"]], "GroupBy": [[691, "groupby"], [253, "groupby"]], "polars.LazyFrame.slice": [[658, "polars-lazyframe-slice"]], "polars.LazyFrame.show_graph": [[655, "polars-lazyframe-show-graph"]], "polars.LazyFrame.take_every": [[663, "polars-lazyframe-take-every"]], "polars.LazyFrame.var": [[668, "polars-lazyframe-var"]], "polars.Series.all": [[698, "polars-series-all"]], "polars.LazyFrame.limit": [[635, "polars-lazyframe-limit"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[676, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.LazyFrame.shift_and_fill": [[654, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.null_count": [[643, "polars-lazyframe-null-count"]], "polars.LazyFrame.sink_parquet": [[657, "polars-lazyframe-sink-parquet"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[674, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.LazyFrame.lazy": [[634, "polars-lazyframe-lazy"]], "polars.Series.alias": [[697, "polars-series-alias"]], "polars.Series.any": [[699, "polars-series-any"]], "polars.LazyFrame.interpolate": [[630, "polars-lazyframe-interpolate"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[681, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.LazyFrame.with_row_count": [[672, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.width": [[669, "polars-lazyframe-width"]], "polars.LazyFrame.quantile": [[646, "polars-lazyframe-quantile"]], "polars.LazyFrame.min": [[642, "polars-lazyframe-min"]], "polars.LazyFrame.with_context": [[671, "polars-lazyframe-with-context"]], "polars.LazyFrame.melt": [[640, "polars-lazyframe-melt"]], "polars.LazyFrame.read_json": [[647, "polars-lazyframe-read-json"]], "polars.LazyFrame.join": [[631, "polars-lazyframe-join"]], "polars.Expr.take_every": [[524, "polars-expr-take-every"]], "polars.date": [[554, "polars-date"]], "polars.Expr.str.splitn": [[507, "polars-expr-str-splitn"]], "polars.Expr.str.rstrip": [[503, "polars-expr-str-rstrip"]], "polars.Expr.struct.field": [[517, "polars-expr-struct-field"]], "polars.Expr.where": [[535, "polars-expr-where"]], "polars.Expr.str.to_date": [[511, "polars-expr-str-to-date"]], "polars.coalesce": [[544, "polars-coalesce"]], "polars.concat_list": [[546, "polars-concat-list"]], "polars.Expr.str.strip": [[509, "polars-expr-str-strip"]], "polars.count": [[549, "polars-count"]], "polars.Expr.str.json_path_match": [[494, "polars-expr-str-json-path-match"]], "polars.Expr.truediv": [[529, "polars-expr-truediv"]], "polars.Expr.str.to_uppercase": [[515, "polars-expr-str-to-uppercase"]], "polars.Expr.upper_bound": [[532, "polars-expr-upper-bound"]], "polars.Expr.to_physical": [[527, "polars-expr-to-physical"]], "polars.Expr.struct.rename_fields": [[518, "polars-expr-struct-rename-fields"]], "polars.arg_sort_by": [[542, "polars-arg-sort-by"]], "polars.Expr.tan": [[525, "polars-expr-tan"]], "polars.cumsum": [[553, "polars-cumsum"]], "polars.Expr.str.extract_all": [[492, "polars-expr-str-extract-all"]], "polars.Expr.str.to_datetime": [[512, "polars-expr-str-to-datetime"]], "polars.Expr.sum": [[521, "polars-expr-sum"]], "polars.Expr.str.split_exact": [[506, "polars-expr-str-split-exact"]], "polars.Expr.str.n_chars": [[498, "polars-expr-str-n-chars"]], "polars.Expr.str.replace_all": [[501, "polars-expr-str-replace-all"]], "polars.datetime": [[555, "polars-datetime"]], "polars.Expr.sub": [[519, "polars-expr-sub"]], "polars.Expr.top_k": [[528, "polars-expr-top-k"]], "polars.Expr.str.slice": [[504, "polars-expr-str-slice"]], "polars.Expr.str.replace": [[500, "polars-expr-str-replace"]], "polars.Expr.str.starts_with": [[508, "polars-expr-str-starts-with"]], "polars.Expr.tanh": [[526, "polars-expr-tanh"]], "polars.avg": [[543, "polars-avg"]], "polars.Expr.str.to_time": [[514, "polars-expr-str-to-time"]], "polars.Expr.str.explode": [[490, "polars-expr-str-explode"]], "polars.cov": [[550, "polars-cov"]], "polars.exclude": [[558, "polars-exclude"]], "polars.Expr.str.zfill": [[516, "polars-expr-str-zfill"]], "polars.first": [[559, "polars-first"]], "polars.Expr.xor": [[536, "polars-expr-xor"]], "polars.Expr.str.extract": [[491, "polars-expr-str-extract"]], "polars.Expr.str.ljust": [[496, "polars-expr-str-ljust"]], "polars.Expr.str.rjust": [[502, "polars-expr-str-rjust"]], "polars.Expr.take": [[523, "polars-expr-take"]], "polars.Expr.unique": [[530, "polars-expr-unique"]], "polars.Expr.var": [[534, "polars-expr-var"]], "polars.Expr.tail": [[522, "polars-expr-tail"]], "polars.apply": [[539, "polars-apply"]], "polars.cumreduce": [[552, "polars-cumreduce"]], "polars.Expr.unique_counts": [[531, "polars-expr-unique-counts"]], "polars.approx_unique": [[540, "polars-approx-unique"]], "polars.arange": [[541, "polars-arange"]], "polars.any": [[538, "polars-any"]], "polars.Expr.str.lstrip": [[497, "polars-expr-str-lstrip"]], "polars.duration": [[556, "polars-duration"]], "polars.concat_str": [[547, "polars-concat-str"]], "polars.Expr.str.parse_int": [[499, "polars-expr-str-parse-int"]], "polars.element": [[557, "polars-element"]], "polars.Expr.str.strptime": [[510, "polars-expr-str-strptime"]], "polars.cumfold": [[551, "polars-cumfold"]], "polars.Expr.str.json_extract": [[493, "polars-expr-str-json-extract"]], "polars.Expr.suffix": [[520, "polars-expr-suffix"]], "polars.corr": [[548, "polars-corr"]], "polars.Expr.str.to_lowercase": [[513, "polars-expr-str-to-lowercase"]], "polars.col": [[545, "polars-col"]], "polars.Expr.str.lengths": [[495, "polars-expr-str-lengths"]], "polars.Expr.str.split": [[505, "polars-expr-str-split"]], "polars.all": [[537, "polars-all"]], "polars.Expr.value_counts": [[533, "polars-expr-value-counts"]], "polars.Expr.set_sorted": [[470, "polars-expr-set-sorted"]], "polars.Expr.round": [[467, "polars-expr-round"]], "polars.Expr.sqrt": [[482, "polars-expr-sqrt"]], "polars.Expr.meta.pop": [[431, "polars-expr-meta-pop"]], "polars.Expr.mul": [[437, "polars-expr-mul"]], "polars.Expr.map": [[420, "polars-expr-map"]], "polars.Expr.rechunk": [[452, "polars-expr-rechunk"]], "polars.Expr.rolling_std": [[464, "polars-expr-rolling-std"]], "polars.Expr.meta.is_regex_projection": [[428, "polars-expr-meta-is-regex-projection"]], "polars.Expr.mean": [[424, "polars-expr-mean"]], "polars.Expr.sign": [[475, "polars-expr-sign"]], "polars.Expr.rolling_apply": [[457, "polars-expr-rolling-apply"]], "polars.Expr.rolling_quantile": [[462, "polars-expr-rolling-quantile"]], "polars.Expr.repeat_by": [[454, "polars-expr-repeat-by"]], "polars.Expr.nan_min": [[440, "polars-expr-nan-min"]], "polars.Expr.map_dict": [[422, "polars-expr-map-dict"]], "polars.Expr.meta.eq": [[426, "polars-expr-meta-eq"]], "polars.Expr.std": [[483, "polars-expr-std"]], "polars.Expr.rolling_skew": [[463, "polars-expr-rolling-skew"]], "polars.Expr.str.ends_with": [[489, "polars-expr-str-ends-with"]], "polars.Expr.mode": [[436, "polars-expr-mode"]], "polars.Expr.skew": [[478, "polars-expr-skew"]], "polars.Expr.rolling_mean": [[459, "polars-expr-rolling-mean"]], "polars.Expr.pow": [[447, "polars-expr-pow"]], "polars.Expr.meta.root_names": [[432, "polars-expr-meta-root-names"]], "polars.Expr.slice": [[479, "polars-expr-slice"]], "polars.Expr.map_alias": [[421, "polars-expr-map-alias"]], "polars.Expr.reverse": [[456, "polars-expr-reverse"]], "polars.Expr.pct_change": [[445, "polars-expr-pct-change"]], "polars.Expr.null_count": [[442, "polars-expr-null-count"]], "polars.Expr.prefix": [[448, "polars-expr-prefix"]], "polars.Expr.or_": [[443, "polars-expr-or"]], "polars.Expr.search_sorted": [[469, "polars-expr-search-sorted"]], "polars.Expr.shrink_dtype": [[473, "polars-expr-shrink-dtype"]], "polars.Expr.rolling_max": [[458, "polars-expr-rolling-max"]], "polars.Expr.meta.output_name": [[430, "polars-expr-meta-output-name"]], "polars.Expr.sample": [[468, "polars-expr-sample"]], "polars.Expr.sin": [[476, "polars-expr-sin"]], "polars.Expr.max": [[423, "polars-expr-max"]], "polars.Expr.rank": [[451, "polars-expr-rank"]], "polars.Expr.reinterpret": [[453, "polars-expr-reinterpret"]], "polars.Expr.str.decode": [[487, "polars-expr-str-decode"]], "polars.Expr.median": [[425, "polars-expr-median"]], "polars.Expr.reshape": [[455, "polars-expr-reshape"]], "polars.Expr.str.contains": [[485, "polars-expr-str-contains"]], "polars.Expr.over": [[444, "polars-expr-over"]], "polars.Expr.sinh": [[477, "polars-expr-sinh"]], "polars.Expr.shift_and_fill": [[472, "polars-expr-shift-and-fill"]], "polars.Expr.sort": [[480, "polars-expr-sort"]], "polars.Expr.pipe": [[446, "polars-expr-pipe"]], "polars.Expr.quantile": [[450, "polars-expr-quantile"]], "polars.Expr.rolling_min": [[461, "polars-expr-rolling-min"]], "polars.Expr.meta.ne": [[429, "polars-expr-meta-ne"]], "polars.Expr.nan_max": [[439, "polars-expr-nan-max"]], "polars.Expr.min": [[434, "polars-expr-min"]], "polars.Expr.product": [[449, "polars-expr-product"]], "polars.Expr.meta.has_multiple_outputs": [[427, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.mod": [[435, "polars-expr-mod"]], "polars.Expr.shift": [[471, "polars-expr-shift"]], "polars.Expr.rolling_sum": [[465, "polars-expr-rolling-sum"]], "polars.Expr.str.concat": [[484, "polars-expr-str-concat"]], "polars.Expr.str.encode": [[488, "polars-expr-str-encode"]], "polars.Expr.rolling_var": [[466, "polars-expr-rolling-var"]], "polars.Expr.shuffle": [[474, "polars-expr-shuffle"]], "polars.Expr.ne": [[441, "polars-expr-ne"]], "polars.Expr.meta.undo_aliases": [[433, "polars-expr-meta-undo-aliases"]], "polars.Expr.n_unique": [[438, "polars-expr-n-unique"]], "polars.Expr.sort_by": [[481, "polars-expr-sort-by"]], "polars.Expr.rolling_median": [[460, "polars-expr-rolling-median"]], "polars.Expr.str.count_match": [[486, "polars-expr-str-count-match"]], "polars.Expr.dt.minute": [[350, "polars-expr-dt-minute"]], "polars.Expr.gt": [[391, "polars-expr-gt"]], "polars.Expr.entropy": [[373, "polars-expr-entropy"]], "polars.Expr.dt.offset_by": [[357, "polars-expr-dt-offset-by"]], "polars.Expr.is_nan": [[403, "polars-expr-is-nan"]], "polars.Expr.le": [[412, "polars-expr-le"]], "polars.Expr.floor": [[387, "polars-expr-floor"]], "polars.Expr.is_in": [[401, "polars-expr-is-in"]], "polars.Expr.explode": [[380, "polars-expr-explode"]], "polars.Expr.is_first": [[400, "polars-expr-is-first"]], "polars.Expr.last": [[411, "polars-expr-last"]], "polars.Expr.dt.timestamp": [[366, "polars-expr-dt-timestamp"]], "polars.Expr.dt.weekday": [[370, "polars-expr-dt-weekday"]], "polars.Expr.head": [[393, "polars-expr-head"]], "polars.Expr.dt.month_end": [[353, "polars-expr-dt-month-end"]], "polars.Expr.dt.minutes": [[351, "polars-expr-dt-minutes"]], "polars.Expr.inspect": [[395, "polars-expr-inspect"]], "polars.Expr.dt.month": [[352, "polars-expr-dt-month"]], "polars.Expr.interpolate": [[396, "polars-expr-interpolate"]], "polars.Expr.is_infinite": [[402, "polars-expr-is-infinite"]], "polars.Expr.dt.year": [[372, "polars-expr-dt-year"]], "polars.Expr.kurtosis": [[410, "polars-expr-kurtosis"]], "polars.Expr.ewm_var": [[377, "polars-expr-ewm-var"]], "polars.Expr.dt.strftime": [[364, "polars-expr-dt-strftime"]], "polars.Expr.floordiv": [[388, "polars-expr-floordiv"]], "polars.Expr.keep_name": [[409, "polars-expr-keep-name"]], "polars.Expr.log10": [[416, "polars-expr-log10"]], "polars.Expr.dt.seconds": [[363, "polars-expr-dt-seconds"]], "polars.Expr.dt.to_string": [[367, "polars-expr-dt-to-string"]], "polars.Expr.is_not_nan": [[405, "polars-expr-is-not-nan"]], "polars.Expr.hash": [[392, "polars-expr-hash"]], "polars.Expr.len": [[413, "polars-expr-len"]], "polars.Expr.dt.truncate": [[368, "polars-expr-dt-truncate"]], "polars.Expr.dt.month_start": [[354, "polars-expr-dt-month-start"]], "polars.Expr.dt.time": [[365, "polars-expr-dt-time"]], "polars.Expr.is_duplicated": [[398, "polars-expr-is-duplicated"]], "polars.Expr.lower_bound": [[418, "polars-expr-lower-bound"]], "polars.Expr.ewm_mean": [[375, "polars-expr-ewm-mean"]], "polars.Expr.dt.nanoseconds": [[356, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.quarter": [[359, "polars-expr-dt-quarter"]], "polars.Expr.lt": [[419, "polars-expr-lt"]], "polars.Expr.ewm_std": [[376, "polars-expr-ewm-std"]], "polars.Expr.flatten": [[386, "polars-expr-flatten"]], "polars.Expr.implode": [[394, "polars-expr-implode"]], "polars.Expr.first": [[385, "polars-expr-first"]], "polars.Expr.fill_nan": [[382, "polars-expr-fill-nan"]], "polars.Expr.is_unique": [[408, "polars-expr-is-unique"]], "polars.Expr.is_not_null": [[406, "polars-expr-is-not-null"]], "polars.Expr.exp": [[379, "polars-expr-exp"]], "polars.Expr.filter": [[384, "polars-expr-filter"]], "polars.Expr.eq": [[374, "polars-expr-eq"]], "polars.Expr.dt.ordinal_day": [[358, "polars-expr-dt-ordinal-day"]], "polars.Expr.is_finite": [[399, "polars-expr-is-finite"]], "polars.Expr.is_not": [[404, "polars-expr-is-not"]], "polars.Expr.log1p": [[417, "polars-expr-log1p"]], "polars.Expr.dt.round": [[361, "polars-expr-dt-round"]], "polars.Expr.extend_constant": [[381, "polars-expr-extend-constant"]], "polars.Expr.is_between": [[397, "polars-expr-is-between"]], "polars.Expr.limit": [[414, "polars-expr-limit"]], "polars.Expr.exclude": [[378, "polars-expr-exclude"]], "polars.Expr.log": [[415, "polars-expr-log"]], "polars.Expr.dt.nanosecond": [[355, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.replace_time_zone": [[360, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.week": [[369, "polars-expr-dt-week"]], "polars.Expr.dt.with_time_unit": [[371, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.second": [[362, "polars-expr-dt-second"]], "polars.Expr.forward_fill": [[389, "polars-expr-forward-fill"]], "polars.Expr.is_null": [[407, "polars-expr-is-null"]], "polars.Expr.fill_null": [[383, "polars-expr-fill-null"]], "polars.Expr.ge": [[390, "polars-expr-ge"]], "polars.max": [[568, "polars-max"]], "polars.std": [[581, "polars-std"]], "polars.LazyFrame.explode": [[618, "polars-lazyframe-explode"]], "polars.LazyFrame.head": [[628, "polars-lazyframe-head"]], "Columns / names": [[591, "columns-names"]], "API reference": [[605, "api-reference"]], "polars.LazyFrame.cache": [[609, "polars-lazyframe-cache"]], "Functions": [[593, "functions"], [604, "functions"]], "polars.reduce": [[575, "polars-reduce"]], "polars.from_epoch": [[562, "polars-from-epoch"]], "polars.n_unique": [[572, "polars-n-unique"]], "polars.min": [[571, "polars-min"]], "polars.time": [[585, "polars-time"]], "polars.pearson_corr": [[573, "polars-pearson-corr"]], "Expressions": [[594, "expressions"]], "polars.struct": [[582, "polars-struct"]], "Operators": [[599, "operators"]], "Conjunction": [[599, "conjunction"]], "Comparison": [[599, "comparison"]], "Numeric": [[599, "numeric"], [257, "numeric"]], "polars.when": [[587, "polars-when"]], "polars.groups": [[563, "polars-groups"]], "polars.spearman_rank_corr": [[580, "polars-spearman-rank-corr"]], "polars.quantile": [[574, "polars-quantile"]], "polars.LazyFrame.fetch": [[619, "polars-lazyframe-fetch"]], "polars.LazyFrame.from_json": [[624, "polars-lazyframe-from-json"]], "polars.format": [[561, "polars-format"]], "polars.LazyFrame.bottom_k": [[608, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.first": [[623, "polars-lazyframe-first"]], "polars.LazyFrame.inspect": [[629, "polars-lazyframe-inspect"]], "Conversion": [[604, "conversion"]], "Eager/Lazy functions": [[604, "eager-lazy-functions"]], "Parallelization": [[604, "parallelization"]], "StringCache": [[604, "stringcache"]], "polars.median": [[570, "polars-median"]], "polars.LazyFrame.dtypes": [[616, "polars-lazyframe-dtypes"]], "polars.mean": [[569, "polars-mean"]], "polars.map": [[567, "polars-map"]], "polars.LazyFrame.drop": [[614, "polars-lazyframe-drop"]], "polars.LazyFrame.fill_null": [[621, "polars-lazyframe-fill-null"]], "Input/output": [[606, "input-output"]], "CSV": [[606, "csv"]], "Feather/ IPC": [[606, "feather-ipc"]], "Parquet": [[606, "parquet"]], "Database": [[606, "database"]], "JSON": [[606, "json"]], "AVRO": [[606, "avro"]], "Excel": [[606, "excel"]], "Delta Lake": [[606, "delta-lake"]], "Datasets": [[606, "datasets"]], "BatchedCsvReader": [[606, "batchedcsvreader"]], "polars.LazyFrame.clear": [[610, "polars-lazyframe-clear"]], "polars.sum": [[583, "polars-sum"]], "polars.LazyFrame.drop_nulls": [[615, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.fill_nan": [[620, "polars-lazyframe-fill-nan"]], "polars.list": [[565, "polars-list"]], "polars.tail": [[584, "polars-tail"]], "polars.LazyFrame.groupby_rolling": [[627, "polars-lazyframe-groupby-rolling"]], "polars.rolling_corr": [[577, "polars-rolling-corr"]], "polars.LazyFrame.groupby_dynamic": [[626, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.collect": [[612, "polars-lazyframe-collect"]], "polars.LazyFrame.groupby": [[625, "polars-lazyframe-groupby"]], "Meta": [[596, "meta"]], "polars.rolling_cov": [[578, "polars-rolling-cov"]], "polars.LazyFrame.filter": [[622, "polars-lazyframe-filter"]], "polars.LazyFrame.columns": [[613, "polars-lazyframe-columns"]], "polars.fold": [[560, "polars-fold"]], "polars.var": [[586, "polars-var"]], "polars.LazyFrame.explain": [[617, "polars-lazyframe-explain"]], "polars.select": [[579, "polars-select"]], "Window": [[603, "window"]], "polars.LazyFrame.clone": [[611, "polars-lazyframe-clone"]], "polars.repeat": [[576, "polars-repeat"]], "polars.lit": [[566, "polars-lit"]], "polars.head": [[564, "polars-head"]], "polars.Expr.arr.mean": [[296, "polars-expr-arr-mean"]], "polars.Expr.dt.microsecond": [[346, "polars-expr-dt-microsecond"]], "polars.Expr.drop_nulls": [[333, "polars-expr-drop-nulls"]], "polars.Expr.cumsum": [[328, "polars-expr-cumsum"]], "polars.Expr.arr.sum": [[302, "polars-expr-arr-sum"]], "polars.Expr.drop_nans": [[332, "polars-expr-drop-nans"]], "polars.Expr.cat.set_ordering": [[316, "polars-expr-cat-set-ordering"]], "polars.Expr.bin.ends_with": [[311, "polars-expr-bin-ends-with"]], "polars.Expr.cache": [[314, "polars-expr-cache"]], "polars.Expr.arr.take": [[304, "polars-expr-arr-take"]], "polars.Expr.cos": [[321, "polars-expr-cos"]], "polars.Expr.arr.to_struct": [[305, "polars-expr-arr-to-struct"]], "polars.Expr.cumprod": [[327, "polars-expr-cumprod"]], "polars.Expr.cosh": [[322, "polars-expr-cosh"]], "polars.Expr.arr.unique": [[306, "polars-expr-arr-unique"]], "polars.Expr.bin.contains": [[308, "polars-expr-bin-contains"]], "polars.Expr.arr.join": [[292, "polars-expr-arr-join"]], "polars.Expr.arr.eval": [[287, "polars-expr-arr-eval"]], "polars.Expr.arr.last": [[293, "polars-expr-arr-last"]], "polars.Expr.bin.starts_with": [[312, "polars-expr-bin-starts-with"]], "polars.Expr.cummin": [[326, "polars-expr-cummin"]], "polars.Expr.arr.reverse": [[298, "polars-expr-arr-reverse"]], "polars.Expr.ceil": [[317, "polars-expr-ceil"]], "polars.Expr.dt.hour": [[342, "polars-expr-dt-hour"]], "polars.Expr.dt.milliseconds": [[349, "polars-expr-dt-milliseconds"]], "polars.Expr.cast": [[315, "polars-expr-cast"]], "polars.Expr.dt.iso_year": [[345, "polars-expr-dt-iso-year"]], "polars.Expr.arr.arg_max": [[281, "polars-expr-arr-arg-max"]], "polars.Expr.arr.contains": [[284, "polars-expr-arr-contains"]], "polars.Expr.dt.epoch": [[341, "polars-expr-dt-epoch"]], "polars.Expr.bin.decode": [[309, "polars-expr-bin-decode"]], "polars.Expr.dt.day": [[339, "polars-expr-dt-day"]], "polars.Expr.count": [[323, "polars-expr-count"]], "polars.Expr.arr.diff": [[286, "polars-expr-arr-diff"]], "polars.Expr.arr.lengths": [[294, "polars-expr-arr-lengths"]], "polars.Expr.arr.count_match": [[285, "polars-expr-arr-count-match"]], "polars.Expr.backward_fill": [[307, "polars-expr-backward-fill"]], "polars.Expr.dt.hours": [[343, "polars-expr-dt-hours"]], "polars.Expr.bin.encode": [[310, "polars-expr-bin-encode"]], "polars.Expr.arr.max": [[295, "polars-expr-arr-max"]], "polars.Expr.dt.date": [[337, "polars-expr-dt-date"]], "polars.Expr.clip_max": [[319, "polars-expr-clip-max"]], "polars.Expr.arr.min": [[297, "polars-expr-arr-min"]], "polars.Expr.dt.datetime": [[338, "polars-expr-dt-datetime"]], "polars.Expr.dot": [[331, "polars-expr-dot"]], "polars.Expr.dt.convert_time_zone": [[336, "polars-expr-dt-convert-time-zone"]], "polars.Expr.arr.first": [[289, "polars-expr-arr-first"]], "polars.Expr.dt.days": [[340, "polars-expr-dt-days"]], "polars.Expr.dt.microseconds": [[347, "polars-expr-dt-microseconds"]], "polars.Expr.arr.concat": [[283, "polars-expr-arr-concat"]], "polars.Expr.arr.head": [[291, "polars-expr-arr-head"]], "polars.Expr.bottom_k": [[313, "polars-expr-bottom-k"]], "polars.Expr.arr.arg_min": [[282, "polars-expr-arr-arg-min"]], "polars.Expr.clip": [[318, "polars-expr-clip"]], "polars.Expr.clip_min": [[320, "polars-expr-clip-min"]], "polars.Expr.arr.get": [[290, "polars-expr-arr-get"]], "polars.Expr.cumulative_eval": [[329, "polars-expr-cumulative-eval"]], "polars.Expr.dt.cast_time_unit": [[334, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.millisecond": [[348, "polars-expr-dt-millisecond"]], "polars.Expr.arr.explode": [[288, "polars-expr-arr-explode"]], "polars.Expr.dt.is_leap_year": [[344, "polars-expr-dt-is-leap-year"]], "polars.Expr.arr.sort": [[301, "polars-expr-arr-sort"]], "polars.Expr.cummax": [[325, "polars-expr-cummax"]], "polars.Expr.arg_unique": [[280, "polars-expr-arg-unique"]], "polars.Expr.arr.shift": [[299, "polars-expr-arr-shift"]], "polars.Expr.dt.combine": [[335, "polars-expr-dt-combine"]], "polars.Expr.arr.slice": [[300, "polars-expr-arr-slice"]], "polars.Expr.arr.tail": [[303, "polars-expr-arr-tail"]], "polars.Expr.diff": [[330, "polars-expr-diff"]], "polars.Expr.cumcount": [[324, "polars-expr-cumcount"]], "polars.DataFrame.get_columns": [[156, "polars-dataframe-get-columns"]], "polars.DataFrame.fill_nan": [[149, "polars-dataframe-fill-nan"]], "polars.DataFrame.is_duplicated": [[167, "polars-dataframe-is-duplicated"]], "polars.DataFrame.join_asof": [[174, "polars-dataframe-join-asof"]], "polars.DataFrame.get_column": [[155, "polars-dataframe-get-column"]], "polars.DataFrame.max": [[177, "polars-dataframe-max"]], "polars.DataFrame.height": [[163, "polars-dataframe-height"]], "polars.DataFrame.groupby_dynamic": [[159, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.head": [[162, "polars-dataframe-head"]], "polars.DataFrame.item": [[170, "polars-dataframe-item"]], "polars.DataFrame.shrink_to_fit": [[205, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.groupby_rolling": [[160, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.replace_at_idx": [[194, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.quantile": [[190, "polars-dataframe-quantile"]], "polars.DataFrame.median": [[179, "polars-dataframe-median"]], "polars.DataFrame.n_unique": [[184, "polars-dataframe-n-unique"]], "polars.DataFrame.select": [[200, "polars-dataframe-select"]], "polars.DataFrame.slice": [[206, "polars-dataframe-slice"]], "polars.DataFrame.shift": [[203, "polars-dataframe-shift"]], "polars.DataFrame.estimated_size": [[146, "polars-dataframe-estimated-size"]], "polars.DataFrame.groupby": [[158, "polars-dataframe-groupby"]], "polars.DataFrame.glimpse": [[157, "polars-dataframe-glimpse"]], "polars.DataFrame.find_idx_by_name": [[152, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.is_empty": [[168, "polars-dataframe-is-empty"]], "polars.DataFrame.iter_slices": [[172, "polars-dataframe-iter-slices"]], "polars.DataFrame.hash_rows": [[161, "polars-dataframe-hash-rows"]], "polars.DataFrame.drop_nulls": [[144, "polars-dataframe-drop-nulls"]], "polars.DataFrame.mean": [[178, "polars-dataframe-mean"]], "polars.DataFrame.melt": [[180, "polars-dataframe-melt"]], "polars.DataFrame.merge_sorted": [[181, "polars-dataframe-merge-sorted"]], "polars.DataFrame.rows": [[197, "polars-dataframe-rows"]], "polars.DataFrame.schema": [[199, "polars-dataframe-schema"]], "polars.DataFrame.shift_and_fill": [[204, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.rename": [[192, "polars-dataframe-rename"]], "polars.DataFrame.frame_equal": [[154, "polars-dataframe-frame-equal"]], "polars.DataFrame.iter_rows": [[171, "polars-dataframe-iter-rows"]], "polars.DataFrame.set_sorted": [[201, "polars-dataframe-set-sorted"]], "polars.DataFrame.row": [[196, "polars-dataframe-row"]], "polars.DataFrame.shape": [[202, "polars-dataframe-shape"]], "polars.DataFrame.null_count": [[185, "polars-dataframe-null-count"]], "polars.DataFrame.dtypes": [[145, "polars-dataframe-dtypes"]], "polars.DataFrame.limit": [[176, "polars-dataframe-limit"]], "polars.DataFrame.partition_by": [[186, "polars-dataframe-partition-by"]], "polars.DataFrame.insert_at_idx": [[165, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.pipe": [[187, "polars-dataframe-pipe"]], "polars.DataFrame.describe": [[141, "polars-dataframe-describe"]], "polars.DataFrame.corr": [[140, "polars-dataframe-corr"]], "polars.DataFrame.min": [[182, "polars-dataframe-min"]], "polars.DataFrame.n_chunks": [[183, "polars-dataframe-n-chunks"]], "polars.DataFrame.reverse": [[195, "polars-dataframe-reverse"]], "polars.DataFrame.sort": [[207, "polars-dataframe-sort"]], "polars.DataFrame.fill_null": [[150, "polars-dataframe-fill-null"]], "polars.DataFrame.drop_in_place": [[143, "polars-dataframe-drop-in-place"]], "polars.DataFrame.extend": [[148, "polars-dataframe-extend"]], "polars.DataFrame.interpolate": [[166, "polars-dataframe-interpolate"]], "polars.DataFrame.join": [[173, "polars-dataframe-join"]], "polars.DataFrame.lazy": [[175, "polars-dataframe-lazy"]], "polars.DataFrame.sample": [[198, "polars-dataframe-sample"]], "polars.DataFrame.rechunk": [[191, "polars-dataframe-rechunk"]], "polars.DataFrame.explode": [[147, "polars-dataframe-explode"]], "polars.DataFrame.fold": [[153, "polars-dataframe-fold"]], "polars.DataFrame.product": [[189, "polars-dataframe-product"]], "polars.DataFrame.hstack": [[164, "polars-dataframe-hstack"]], "polars.DataFrame.std": [[208, "polars-dataframe-std"]], "polars.DataFrame.is_unique": [[169, "polars-dataframe-is-unique"]], "polars.DataFrame.sum": [[209, "polars-dataframe-sum"]], "polars.DataFrame.drop": [[142, "polars-dataframe-drop"]], "polars.DataFrame.replace": [[193, "polars-dataframe-replace"]], "polars.DataFrame.filter": [[151, "polars-dataframe-filter"]], "polars.DataFrame.pivot": [[188, "polars-dataframe-pivot"]], "polars.Expr.arccos": [[270, "polars-expr-arccos"]], "polars.DataFrame.to_dict": [[213, "polars-dataframe-to-dict"]], "polars.DataFrame.to_dicts": [[214, "polars-dataframe-to-dicts"]], "polars.Expr.add": [[261, "polars-expr-add"]], "polars.DataFrame.to_series": [[219, "polars-dataframe-to-series"]], "polars.Expr.append": [[267, "polars-expr-append"]], "polars.Expr.arg_max": [[276, "polars-expr-arg-max"]], "polars.dataframe.groupby.GroupBy.count": [[237, "polars-dataframe-groupby-groupby-count"]], "polars.Expr.apply": [[268, "polars-expr-apply"]], "polars.DataFrame.upsample": [[227, "polars-dataframe-upsample"]], "polars.DataFrame.to_pandas": [[218, "polars-dataframe-to-pandas"]], "polars.DataFrame.var": [[228, "polars-dataframe-var"]], "Data types": [[257, "data-types"]], "Nested": [[257, "nested"]], "Other": [[257, "other"]], "polars.Expr.all": [[264, "polars-expr-all"]], "polars.dataframe.groupby.GroupBy.first": [[238, "polars-dataframe-groupby-groupby-first"]], "polars.dataframe.groupby.GroupBy.head": [[239, "polars-dataframe-groupby-groupby-head"]], "polars.dataframe.groupby.GroupBy.tail": [[248, "polars-dataframe-groupby-groupby-tail"]], "polars.Expr.arg_sort": [[278, "polars-expr-arg-sort"]], "polars.dataframe.groupby.GroupBy.all": [[235, "polars-dataframe-groupby-groupby-all"]], "Exceptions": [[258, "exceptions"]], "polars.DataFrame.top_k": [[221, "polars-dataframe-top-k"]], "polars.DataFrame.unnest": [[224, "polars-dataframe-unnest"]], "polars.dataframe.groupby.GroupBy.last": [[240, "polars-dataframe-groupby-groupby-last"]], "polars.dataframe.groupby.GroupBy.__iter__": [[233, "polars-dataframe-groupby-groupby-iter"]], "polars.DataFrame.with_row_count": [[232, "polars-dataframe-with-row-count"]], "polars.Expr.arcsin": [[272, "polars-expr-arcsin"]], "polars.DataFrame.unique": [[223, "polars-dataframe-unique"]], "polars.Expr.agg_groups": [[262, "polars-expr-agg-groups"]], "polars.dataframe.groupby.GroupBy.mean": [[242, "polars-dataframe-groupby-groupby-mean"]], "polars.DataFrame.to_struct": [[220, "polars-dataframe-to-struct"]], "polars.Expr.abs": [[260, "polars-expr-abs"]], "polars.DataFrame.vstack": [[229, "polars-dataframe-vstack"]], "polars.DataFrame.to_init_repr": [[216, "polars-dataframe-to-init-repr"]], "polars.Expr.alias": [[263, "polars-expr-alias"]], "polars.dataframe.groupby.GroupBy.sum": [[247, "polars-dataframe-groupby-groupby-sum"]], "polars.dataframe.groupby.GroupBy.median": [[243, "polars-dataframe-groupby-groupby-median"]], "polars.Expr.approx_unique": [[269, "polars-expr-approx-unique"]], "polars.DataFrame.update": [[226, "polars-dataframe-update"]], "polars.Expr.arccosh": [[271, "polars-expr-arccosh"]], "polars.Expr.arg_true": [[279, "polars-expr-arg-true"]], "polars.Expr.arctanh": [[275, "polars-expr-arctanh"]], "polars.DataFrame.tail": [[210, "polars-dataframe-tail"]], "polars.dataframe.groupby.GroupBy.max": [[241, "polars-dataframe-groupby-groupby-max"]], "polars.dataframe.groupby.GroupBy.min": [[244, "polars-dataframe-groupby-groupby-min"]], "polars.Expr.any": [[266, "polars-expr-any"]], "polars.DataFrame.take_every": [[211, "polars-dataframe-take-every"]], "polars.Expr.and_": [[265, "polars-expr-and"]], "polars.Expr.arg_min": [[277, "polars-expr-arg-min"]], "polars.dataframe.groupby.GroupBy.agg": [[234, "polars-dataframe-groupby-groupby-agg"]], "polars.DataFrame.to_numpy": [[217, "polars-dataframe-to-numpy"]], "polars.dataframe.groupby.GroupBy.quantile": [[246, "polars-dataframe-groupby-groupby-quantile"]], "polars.Expr.arctan": [[274, "polars-expr-arctan"]], "polars.DataFrame.to_dummies": [[215, "polars-dataframe-to-dummies"]], "polars.dataframe.groupby.GroupBy.n_unique": [[245, "polars-dataframe-groupby-groupby-n-unique"]], "polars.DataFrame.width": [[230, "polars-dataframe-width"]], "polars.DataFrame.to_arrow": [[212, "polars-dataframe-to-arrow"]], "polars.dataframe.groupby.GroupBy.apply": [[236, "polars-dataframe-groupby-groupby-apply"]], "DataFrame": [[254, "dataframe"]], "polars.Expr.arcsinh": [[273, "polars-expr-arcsinh"]], "polars.DataFrame.unstack": [[225, "polars-dataframe-unstack"]], "polars.DataFrame.with_columns": [[231, "polars-dataframe-with-columns"]], "polars.DataFrame.transpose": [[222, "polars-dataframe-transpose"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[5, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[6, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[7, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[8, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[9, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[10, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[11, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[12, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[13, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[14, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[15, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[16, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[17, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[22, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[23, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[24, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[25, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[26, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[27, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[28, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[29, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[30, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[31, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[32, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[33, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[34, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[35, "polars.DataType"]], "__init__() (polars.datatype method)": [[35, "polars.DataType.__init__"]], "date (class in polars)": [[36, "polars.Date"]], "__init__() (polars.date method)": [[36, "polars.Date.__init__"]], "datetime (class in polars)": [[37, "polars.Datetime"]], "__init__() (polars.datetime method)": [[37, "polars.Datetime.__init__"]], "decimal (class in polars)": [[38, "polars.Decimal"]], "__init__() (polars.decimal method)": [[38, "polars.Decimal.__init__"]], "duration (class in polars)": [[39, "polars.Duration"]], "__init__() (polars.duration method)": [[39, "polars.Duration.__init__"]], "float32 (class in polars)": [[40, "polars.Float32"]], "__init__() (polars.float32 method)": [[40, "polars.Float32.__init__"]], "float64 (class in polars)": [[41, "polars.Float64"]], "__init__() (polars.float64 method)": [[41, "polars.Float64.__init__"]], "int16 (class in polars)": [[42, "polars.Int16"]], "__init__() (polars.int16 method)": [[42, "polars.Int16.__init__"]], "int32 (class in polars)": [[43, "polars.Int32"]], "__init__() (polars.int32 method)": [[43, "polars.Int32.__init__"]], "int64 (class in polars)": [[44, "polars.Int64"]], "__init__() (polars.int64 method)": [[44, "polars.Int64.__init__"]], "int8 (class in polars)": [[45, "polars.Int8"]], "__init__() (polars.int8 method)": [[45, "polars.Int8.__init__"]], "list (class in polars)": [[46, "polars.List"]], "__init__() (polars.list method)": [[46, "polars.List.__init__"]], "null (class in polars)": [[47, "polars.Null"]], "__init__() (polars.null method)": [[47, "polars.Null.__init__"]], "object (class in polars)": [[48, "polars.Object"]], "__init__() (polars.object method)": [[48, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[49, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[50, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[51, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[52, "polars.SQLContext.register_many"]], "unregister() (polars.sqlcontext method)": [[53, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[54, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[54, "polars.StringCache.__init__"]], "struct (class in polars)": [[55, "polars.Struct"]], "__init__() (polars.struct method)": [[55, "polars.Struct.__init__"]], "time (class in polars)": [[56, "polars.Time"]], "__init__() (polars.time method)": [[56, "polars.Time.__init__"]], "uint16 (class in polars)": [[57, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[57, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[58, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[58, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[59, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[59, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[60, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[60, "polars.UInt8.__init__"]], "unknown (class in polars)": [[61, "polars.Unknown"]], "__init__() (polars.unknown method)": [[61, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[62, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[62, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[63, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[64, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[65, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[66, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[67, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[68, "polars.arg_where"]], "build_info() (in module polars)": [[69, "polars.build_info"]], "collect_all() (in module polars)": [[70, "polars.collect_all"]], "concat() (in module polars)": [[71, "polars.concat"]], "cut() (in module polars)": [[72, "polars.cut"]], "date_range() (in module polars)": [[73, "polars.date_range"]], "enable_string_cache() (in module polars)": [[74, "polars.enable_string_cache"]], "arrowerror": [[75, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[76, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[77, "polars.exceptions.ComputeError"]], "duplicateerror": [[78, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[79, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[80, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[81, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[82, "polars.exceptions.PolarsPanicError"]], "rowserror": [[83, "polars.exceptions.RowsError"]], "schemaerror": [[84, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[85, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[86, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[87, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[88, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[89, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[90, "polars.from_dataframe"]], "from_dict() (in module polars)": [[91, "polars.from_dict"]], "from_dicts() (in module polars)": [[92, "polars.from_dicts"]], "from_numpy() (in module polars)": [[93, "polars.from_numpy"]], "from_pandas() (in module polars)": [[94, "polars.from_pandas"]], "from_records() (in module polars)": [[95, "polars.from_records"]], "from_repr() (in module polars)": [[96, "polars.from_repr"]], "get_dummies() (in module polars)": [[97, "polars.get_dummies"]], "get_index_type() (in module polars)": [[98, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[99, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[100, "polars.ones"]], "read_avro() (in module polars)": [[101, "polars.read_avro"]], "read_csv() (in module polars)": [[102, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[103, "polars.read_csv_batched"]], "read_database() (in module polars)": [[104, "polars.read_database"]], "read_delta() (in module polars)": [[105, "polars.read_delta"]], "read_excel() (in module polars)": [[106, "polars.read_excel"]], "read_ipc() (in module polars)": [[107, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[108, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[109, "polars.read_json"]], "read_ndjson() (in module polars)": [[110, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[111, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[112, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[113, "polars.scan_csv"]], "scan_delta() (in module polars)": [[114, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[115, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[116, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[117, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[118, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[119, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[120, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[121, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[122, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[122, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[123, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[124, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[125, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[126, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[127, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[128, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[129, "polars.threadpool_size"]], "time_range() (in module polars)": [[130, "polars.time_range"]], "zeros() (in module polars)": [[131, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[134, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[135, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[136, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[137, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[138, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[139, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[140, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[141, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[142, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[143, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[144, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[145, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[146, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[147, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[148, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[149, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[150, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[151, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[152, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[153, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[154, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[155, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[156, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[157, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[158, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[159, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[160, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[161, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[162, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[163, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[164, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[165, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[166, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[167, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[168, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[169, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[170, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[171, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[172, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[173, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[174, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[175, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[176, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[177, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[178, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[179, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[180, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[181, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[182, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[183, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[184, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[185, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[186, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[187, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[188, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[189, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[190, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[191, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[192, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[193, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[194, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[195, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[196, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[197, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[198, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[199, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[200, "polars.DataFrame.select"]], "set_sorted() (polars.dataframe method)": [[201, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[202, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[203, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[204, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[205, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[206, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[207, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[208, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[209, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[210, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[211, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[212, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[213, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[214, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[215, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[216, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[217, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[218, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[219, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[220, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[221, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[222, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[223, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[224, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[225, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[226, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[227, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[228, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[229, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[230, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[231, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[232, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[241, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[242, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[243, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[244, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[245, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[246, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[247, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[248, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[260, "polars.Expr.abs"]], "add() (polars.expr method)": [[261, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[262, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[263, "polars.Expr.alias"]], "all() (polars.expr method)": [[264, "polars.Expr.all"]], "and_() (polars.expr method)": [[265, "polars.Expr.and_"]], "any() (polars.expr method)": [[266, "polars.Expr.any"]], "append() (polars.expr method)": [[267, "polars.Expr.append"]], "apply() (polars.expr method)": [[268, "polars.Expr.apply"]], "approx_unique() (polars.expr method)": [[269, "polars.Expr.approx_unique"]], "arccos() (polars.expr method)": [[270, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[271, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[272, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[273, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[274, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[275, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[276, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[277, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[278, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[279, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[280, "polars.Expr.arg_unique"]], "arg_max() (polars.expr.arr method)": [[281, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[282, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[283, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[284, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[285, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[286, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[287, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[288, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[289, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[290, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[291, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[292, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[293, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[294, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[295, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[296, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[297, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[298, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[299, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[300, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[301, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[302, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[303, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[304, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[305, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[306, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[307, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[308, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[309, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[310, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[311, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[312, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[313, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[314, "polars.Expr.cache"]], "cast() (polars.expr method)": [[315, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[316, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[317, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[318, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[319, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[320, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[321, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[322, "polars.Expr.cosh"]], "count() (polars.expr method)": [[323, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[324, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[325, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[326, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[327, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[328, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[329, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[330, "polars.Expr.diff"]], "dot() (polars.expr method)": [[331, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[332, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[333, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[334, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[335, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[336, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[337, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[338, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[339, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[340, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[341, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[342, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[343, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[344, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[345, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[346, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[347, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[348, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[349, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[350, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[351, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[352, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[353, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[354, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[355, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[356, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[357, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[358, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[359, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[360, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[361, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[362, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[363, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[364, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[365, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[366, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[367, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[368, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[369, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[370, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[371, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[372, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[373, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[374, "polars.Expr.eq"]], "ewm_mean() (polars.expr method)": [[375, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[376, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[377, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[378, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[379, "polars.Expr.exp"]], "explode() (polars.expr method)": [[380, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[381, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[382, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[383, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[384, "polars.Expr.filter"]], "first() (polars.expr method)": [[385, "polars.Expr.first"]], "flatten() (polars.expr method)": [[386, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[387, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[388, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[389, "polars.Expr.forward_fill"]], "ge() (polars.expr method)": [[390, "polars.Expr.ge"]], "gt() (polars.expr method)": [[391, "polars.Expr.gt"]], "hash() (polars.expr method)": [[392, "polars.Expr.hash"]], "head() (polars.expr method)": [[393, "polars.Expr.head"]], "implode() (polars.expr method)": [[394, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[395, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[396, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[397, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[398, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[399, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[400, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[401, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[402, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[403, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[404, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[405, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[406, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[407, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[408, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[409, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[410, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[411, "polars.Expr.last"]], "le() (polars.expr method)": [[412, "polars.Expr.le"]], "len() (polars.expr method)": [[413, "polars.Expr.len"]], "limit() (polars.expr method)": [[414, "polars.Expr.limit"]], "log() (polars.expr method)": [[415, "polars.Expr.log"]], "log10() (polars.expr method)": [[416, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[417, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[418, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[419, "polars.Expr.lt"]], "map() (polars.expr method)": [[420, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[421, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[422, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[423, "polars.Expr.max"]], "mean() (polars.expr method)": [[424, "polars.Expr.mean"]], "median() (polars.expr method)": [[425, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[426, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[427, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[428, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[429, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[430, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[431, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[432, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[433, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[434, "polars.Expr.min"]], "mod() (polars.expr method)": [[435, "polars.Expr.mod"]], "mode() (polars.expr method)": [[436, "polars.Expr.mode"]], "mul() (polars.expr method)": [[437, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[438, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[439, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[440, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[441, "polars.Expr.ne"]], "null_count() (polars.expr method)": [[442, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[443, "polars.Expr.or_"]], "over() (polars.expr method)": [[444, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[445, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[446, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[447, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[448, "polars.Expr.prefix"]], "product() (polars.expr method)": [[449, "polars.Expr.product"]], "quantile() (polars.expr method)": [[450, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[451, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[452, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[453, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[454, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[455, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[456, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[457, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[458, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[459, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[460, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[461, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[462, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[463, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[464, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[465, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[466, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[467, "polars.Expr.round"]], "sample() (polars.expr method)": [[468, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[469, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[470, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[471, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[472, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[473, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[474, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[475, "polars.Expr.sign"]], "sin() (polars.expr method)": [[476, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[477, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[478, "polars.Expr.skew"]], "slice() (polars.expr method)": [[479, "polars.Expr.slice"]], "sort() (polars.expr method)": [[480, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[481, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[482, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[483, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[484, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[485, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[486, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[487, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[488, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[489, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[490, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[491, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[492, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[493, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[494, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[495, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[496, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[497, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[498, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[499, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[500, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[501, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[502, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[503, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[504, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[505, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[506, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[507, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[508, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[509, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[510, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[511, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[512, "polars.Expr.str.to_datetime"]], "to_lowercase() (polars.expr.str method)": [[513, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[514, "polars.Expr.str.to_time"]], "to_uppercase() (polars.expr.str method)": [[515, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[516, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[517, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[518, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[519, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[520, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[521, "polars.Expr.sum"]], "tail() (polars.expr method)": [[522, "polars.Expr.tail"]], "take() (polars.expr method)": [[523, "polars.Expr.take"]], "take_every() (polars.expr method)": [[524, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[525, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[526, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[527, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[528, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[529, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[530, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[531, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[532, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[533, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[534, "polars.Expr.var"]], "where() (polars.expr method)": [[535, "polars.Expr.where"]], "xor() (polars.expr method)": [[536, "polars.Expr.xor"]], "all() (in module polars)": [[537, "polars.all"]], "any() (in module polars)": [[538, "polars.any"]], "apply() (in module polars)": [[539, "polars.apply"]], "approx_unique() (in module polars)": [[540, "polars.approx_unique"]], "arange() (in module polars)": [[541, "polars.arange"]], "arg_sort_by() (in module polars)": [[542, "polars.arg_sort_by"]], "avg() (in module polars)": [[543, "polars.avg"]], "coalesce() (in module polars)": [[544, "polars.coalesce"]], "col() (in module polars)": [[545, "polars.col"]], "concat_list() (in module polars)": [[546, "polars.concat_list"]], "concat_str() (in module polars)": [[547, "polars.concat_str"]], "corr() (in module polars)": [[548, "polars.corr"]], "count() (in module polars)": [[549, "polars.count"]], "cov() (in module polars)": [[550, "polars.cov"]], "cumfold() (in module polars)": [[551, "polars.cumfold"]], "cumreduce() (in module polars)": [[552, "polars.cumreduce"]], "cumsum() (in module polars)": [[553, "polars.cumsum"]], "date() (in module polars)": [[554, "polars.date"]], "datetime() (in module polars)": [[555, "polars.datetime"]], "duration() (in module polars)": [[556, "polars.duration"]], "element() (in module polars)": [[557, "polars.element"]], "exclude() (in module polars)": [[558, "polars.exclude"]], "first() (in module polars)": [[559, "polars.first"]], "fold() (in module polars)": [[560, "polars.fold"]], "format() (in module polars)": [[561, "polars.format"]], "from_epoch() (in module polars)": [[562, "polars.from_epoch"]], "groups() (in module polars)": [[563, "polars.groups"]], "head() (in module polars)": [[564, "polars.head"]], "list() (in module polars)": [[565, "polars.list"]], "lit() (in module polars)": [[566, "polars.lit"]], "map() (in module polars)": [[567, "polars.map"]], "max() (in module polars)": [[568, "polars.max"]], "mean() (in module polars)": [[569, "polars.mean"]], "median() (in module polars)": [[570, "polars.median"]], "min() (in module polars)": [[571, "polars.min"]], "n_unique() (in module polars)": [[572, "polars.n_unique"]], "pearson_corr() (in module polars)": [[573, "polars.pearson_corr"]], "quantile() (in module polars)": [[574, "polars.quantile"]], "reduce() (in module polars)": [[575, "polars.reduce"]], "repeat() (in module polars)": [[576, "polars.repeat"]], "rolling_corr() (in module polars)": [[577, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[578, "polars.rolling_cov"]], "select() (in module polars)": [[579, "polars.select"]], "spearman_rank_corr() (in module polars)": [[580, "polars.spearman_rank_corr"]], "std() (in module polars)": [[581, "polars.std"]], "struct() (in module polars)": [[582, "polars.struct"]], "sum() (in module polars)": [[583, "polars.sum"]], "tail() (in module polars)": [[584, "polars.tail"]], "time() (in module polars)": [[585, "polars.time"]], "var() (in module polars)": [[586, "polars.var"]], "when() (in module polars)": [[587, "polars.when"]], "bottom_k() (polars.lazyframe method)": [[608, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[609, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[610, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[611, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[612, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[613, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[614, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[615, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[616, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[617, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[618, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[619, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[620, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[621, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[622, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[623, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[624, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[625, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[626, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[627, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[628, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[629, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[630, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[631, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[632, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[633, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[634, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[635, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[636, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[637, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[638, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[639, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[640, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[641, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[642, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[643, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[644, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[645, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[646, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[647, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[648, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[649, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[650, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[651, "polars.LazyFrame.select"]], "set_sorted() (polars.lazyframe method)": [[652, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[653, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[654, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[655, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[656, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[657, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[658, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[659, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[660, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[661, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[662, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[663, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[664, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[665, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[666, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[667, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[668, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[669, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[670, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[671, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[672, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[673, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[674, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[675, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[676, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[677, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[678, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[679, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[680, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[681, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[682, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[683, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[684, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[685, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[686, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[687, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[688, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[696, "polars.Series.abs"]], "alias() (polars.series method)": [[697, "polars.Series.alias"]], "all() (polars.series method)": [[698, "polars.Series.all"]], "any() (polars.series method)": [[699, "polars.Series.any"]], "append() (polars.series method)": [[700, "polars.Series.append"]], "apply() (polars.series method)": [[701, "polars.Series.apply"]], "arccos() (polars.series method)": [[702, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[703, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[704, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[705, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[706, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[707, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[708, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[709, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[710, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[711, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[712, "polars.Series.arg_unique"]], "arr (polars.series attribute)": [[713, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[714, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[715, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[716, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[717, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[718, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[719, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[720, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[721, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[722, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[723, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[724, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[725, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[726, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[727, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[728, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[729, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[730, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[731, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[732, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[733, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[734, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[735, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[736, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[737, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[738, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[739, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[740, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[741, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[742, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[743, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[744, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[745, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[746, "polars.Series.cast"]], "cat (polars.series attribute)": [[747, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[748, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[749, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[750, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[751, "polars.Series.clear"]], "clip() (polars.series method)": [[752, "polars.Series.clip"]], "clip_max() (polars.series method)": [[753, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[754, "polars.Series.clip_min"]], "clone() (polars.series method)": [[755, "polars.Series.clone"]], "cos() (polars.series method)": [[756, "polars.Series.cos"]], "cosh() (polars.series method)": [[757, "polars.Series.cosh"]], "cummax() (polars.series method)": [[758, "polars.Series.cummax"]], "cummin() (polars.series method)": [[759, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[760, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[761, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[762, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[763, "polars.Series.cut"]], "describe() (polars.series method)": [[764, "polars.Series.describe"]], "diff() (polars.series method)": [[765, "polars.Series.diff"]], "dot() (polars.series method)": [[766, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[767, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[768, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[769, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[770, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[771, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[772, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[773, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[774, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[775, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[776, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[777, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[778, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[779, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[780, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[781, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[782, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[783, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[784, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[785, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[786, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[787, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[788, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[789, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[790, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[791, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[792, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[793, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[794, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[795, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[796, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[797, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[798, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[799, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[800, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[801, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[802, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[803, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[804, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[805, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[806, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[807, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[808, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[809, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[810, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[811, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[812, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[813, "polars.Series.dtype"]], "entropy() (polars.series method)": [[814, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[815, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[816, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[817, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[818, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[819, "polars.Series.exp"]], "explode() (polars.series method)": [[820, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[821, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[822, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[823, "polars.Series.fill_null"]], "filter() (polars.series method)": [[824, "polars.Series.filter"]], "flags (polars.series attribute)": [[825, "polars.Series.flags"]], "floor() (polars.series method)": [[826, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[827, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[828, "polars.Series.has_validity"]], "hash() (polars.series method)": [[829, "polars.Series.hash"]], "head() (polars.series method)": [[830, "polars.Series.head"]], "hist() (polars.series method)": [[831, "polars.Series.hist"]], "implode() (polars.series method)": [[832, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[833, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[834, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[835, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[836, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[837, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[838, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[839, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[840, "polars.Series.is_first"]], "is_float() (polars.series method)": [[841, "polars.Series.is_float"]], "is_in() (polars.series method)": [[842, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[843, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[844, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[845, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[846, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[847, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[848, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[849, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[850, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[851, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[852, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[853, "polars.Series.is_utf8"]], "item() (polars.series method)": [[854, "polars.Series.item"]], "kurtosis() (polars.series method)": [[855, "polars.Series.kurtosis"]], "len() (polars.series method)": [[856, "polars.Series.len"]], "limit() (polars.series method)": [[857, "polars.Series.limit"]], "log() (polars.series method)": [[858, "polars.Series.log"]], "log10() (polars.series method)": [[859, "polars.Series.log10"]], "log1p() (polars.series method)": [[860, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[861, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[862, "polars.Series.map_dict"]], "max() (polars.series method)": [[863, "polars.Series.max"]], "mean() (polars.series method)": [[864, "polars.Series.mean"]], "median() (polars.series method)": [[865, "polars.Series.median"]], "min() (polars.series method)": [[866, "polars.Series.min"]], "mode() (polars.series method)": [[867, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[868, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[869, "polars.Series.n_unique"]], "name (polars.series attribute)": [[870, "polars.Series.name"]], "nan_max() (polars.series method)": [[871, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[872, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[873, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[874, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[875, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[876, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[877, "polars.Series.peak_min"]], "product() (polars.series method)": [[878, "polars.Series.product"]], "qcut() (polars.series method)": [[879, "polars.Series.qcut"]], "quantile() (polars.series method)": [[880, "polars.Series.quantile"]], "rank() (polars.series method)": [[881, "polars.Series.rank"]], "rechunk() (polars.series method)": [[882, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[883, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[884, "polars.Series.rename"]], "reshape() (polars.series method)": [[885, "polars.Series.reshape"]], "reverse() (polars.series method)": [[886, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[887, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[888, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[889, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[890, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[891, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[892, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[893, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[894, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[895, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[896, "polars.Series.rolling_var"]], "round() (polars.series method)": [[897, "polars.Series.round"]], "sample() (polars.series method)": [[898, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[899, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[900, "polars.Series.series_equal"]], "set() (polars.series method)": [[901, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[902, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[903, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[904, "polars.Series.shape"]], "shift() (polars.series method)": [[905, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[906, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[907, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[908, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[909, "polars.Series.shuffle"]], "sign() (polars.series method)": [[910, "polars.Series.sign"]], "sin() (polars.series method)": [[911, "polars.Series.sin"]], "sinh() (polars.series method)": [[912, "polars.Series.sinh"]], "skew() (polars.series method)": [[913, "polars.Series.skew"]], "slice() (polars.series method)": [[914, "polars.Series.slice"]], "sort() (polars.series method)": [[915, "polars.Series.sort"]], "sqrt() (polars.series method)": [[916, "polars.Series.sqrt"]], "std() (polars.series method)": [[917, "polars.Series.std"]], "str (polars.series attribute)": [[918, "polars.Series.str"]], "concat() (polars.series.str method)": [[919, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[920, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[921, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[922, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[923, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[924, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[925, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[926, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[927, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[928, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[929, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[930, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[931, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[932, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[933, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[934, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[935, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[936, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[937, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[938, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[939, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[940, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[941, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[942, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[943, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[944, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[945, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[946, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[947, "polars.Series.str.to_datetime"]], "to_lowercase() (polars.series.str method)": [[948, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[949, "polars.Series.str.to_time"]], "to_uppercase() (polars.series.str method)": [[950, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[951, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[952, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[953, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[954, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[955, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[956, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[957, "polars.Series.sum"]], "tail() (polars.series method)": [[958, "polars.Series.tail"]], "take() (polars.series method)": [[959, "polars.Series.take"]], "take_every() (polars.series method)": [[960, "polars.Series.take_every"]], "tan() (polars.series method)": [[961, "polars.Series.tan"]], "tanh() (polars.series method)": [[962, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[963, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[964, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[965, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[966, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[967, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[968, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[969, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[970, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[971, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[972, "polars.Series.top_k"]], "unique() (polars.series method)": [[973, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[974, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[975, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[976, "polars.Series.value_counts"]], "var() (polars.series method)": [[977, "polars.Series.var"]], "view() (polars.series method)": [[978, "polars.Series.view"]], "zip_with() (polars.series method)": [[979, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[994, "polars.SQLContext"]]}})