Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.get_idx_type", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pearson_corr", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/strings", "reference/expressions/struct", "reference/expressions/timeseries", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/strings", "reference/series/struct", "reference/series/timeseries", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_idx_type.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pearson_corr.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/strings.rst", "reference/expressions/struct.rst", "reference/expressions/timeseries.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/strings.rst", "reference/series/struct.rst", "reference/series/timeseries.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.get_idx_type", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.scan_csv", "polars.scan_delta", "polars.scan_ds", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pearson_corr", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.internals.dataframe.groupby.GroupBy.__iter__", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.all", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "Meta", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.all", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.count", "polars.internals.lazyframe.groupby.LazyGroupBy.first", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.last", "polars.internals.lazyframe.groupby.LazyGroupBy.max", "polars.internals.lazyframe.groupby.LazyGroupBy.mean", "polars.internals.lazyframe.groupby.LazyGroupBy.median", "polars.internals.lazyframe.groupby.LazyGroupBy.min", "polars.internals.lazyframe.groupby.LazyGroupBy.n_unique", "polars.internals.lazyframe.groupby.LazyGroupBy.quantile", "polars.internals.lazyframe.groupby.LazyGroupBy.sum", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 81, 90, 105, 118, 121, 122, 219, 237, 249, 542, 618], "refer": [0, 92, 93, 95, 409, 468, 542, 811, 875, 913], "input": [0, 55, 83, 92, 93, 95, 132, 143, 171, 186, 192, 214, 217, 237, 349, 383, 394, 403, 439, 491, 493, 495, 496, 498, 508, 509, 517, 518, 521, 530, 542, 551, 563, 570, 595, 602, 612, 616, 634, 791, 913], "output": [0, 25, 27, 28, 65, 95, 112, 122, 144, 145, 156, 166, 174, 183, 186, 210, 214, 237, 245, 249, 385, 386, 393, 486, 491, 517, 528, 542, 551, 571, 572, 581, 586, 595, 612, 615, 618, 634, 643, 901, 913], "seri": [0, 1, 20, 46, 56, 57, 58, 59, 60, 63, 64, 65, 80, 82, 85, 90, 111, 112, 114, 118, 122, 128, 136, 138, 140, 141, 146, 149, 150, 152, 154, 162, 163, 167, 179, 180, 194, 198, 203, 204, 218, 237, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 261, 262, 263, 264, 269, 272, 273, 280, 281, 284, 285, 286, 289, 295, 296, 300, 301, 313, 315, 317, 320, 323, 325, 327, 330, 334, 335, 337, 340, 343, 351, 352, 358, 362, 364, 366, 367, 368, 369, 370, 372, 373, 374, 384, 385, 405, 409, 410, 411, 412, 413, 415, 427, 428, 431, 434, 435, 442, 462, 468, 472, 477, 478, 479, 480, 485, 491, 492, 494, 497, 499, 501, 502, 503, 509, 510, 512, 514, 516, 517, 518, 519, 520, 521, 522, 525, 526, 527, 529, 530, 531, 532, 533, 534, 542, 551, 567, 612, 617, 634, 905, 907, 909, 912, 916, 917, 918], "datafram": [0, 1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 44, 46, 55, 56, 57, 58, 59, 60, 62, 63, 64, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 106, 107, 108, 110, 112, 113, 235, 236, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 282, 283, 286, 287, 288, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 514, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 534, 542, 551, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 642, 663, 681, 690, 705, 706, 856, 859, 871, 872, 882, 891, 892, 901, 913], "lazyfram": [0, 1, 43, 45, 55, 56, 57, 58, 59, 62, 63, 103, 104, 105, 106, 107, 108, 110, 114, 160, 173, 237, 286, 355, 542, 551, 633, 919], "express": [0, 60, 62, 65, 112, 114, 115, 122, 132, 134, 136, 143, 169, 174, 182, 186, 192, 214, 217, 219, 237, 245, 246, 248, 249, 259, 266, 268, 286, 297, 298, 299, 302, 308, 310, 314, 331, 349, 352, 355, 362, 364, 368, 371, 376, 379, 384, 385, 386, 387, 391, 392, 393, 394, 403, 405, 406, 407, 412, 426, 427, 428, 430, 432, 437, 439, 443, 451, 452, 468, 474, 477, 483, 485, 488, 492, 493, 495, 496, 498, 500, 501, 502, 503, 507, 508, 509, 510, 511, 512, 516, 517, 518, 521, 523, 525, 526, 527, 528, 530, 531, 534, 541, 551, 557, 562, 563, 564, 567, 570, 589, 595, 597, 598, 599, 600, 602, 612, 613, 616, 618, 634, 661, 663, 694, 695, 696, 704, 713, 734, 756, 768, 829, 836, 850, 858, 859, 913], "extend": [0, 83, 237, 352, 542, 551, 642, 756, 913], "function": [0, 56, 57, 58, 59, 64, 81, 92, 93, 95, 103, 113, 122, 131, 138, 165, 172, 173, 174, 202, 205, 208, 209, 219, 237, 246, 249, 286, 308, 335, 346, 347, 348, 385, 386, 387, 403, 415, 416, 417, 418, 419, 420, 422, 423, 424, 436, 481, 489, 491, 501, 502, 509, 510, 512, 517, 525, 542, 551, 581, 585, 588, 609, 618, 634, 643, 681, 704, 705, 738, 750, 751, 752, 753, 817, 831, 832, 838, 843, 895, 913], "data": [0, 1, 13, 16, 30, 46, 55, 56, 58, 63, 70, 71, 75, 77, 80, 81, 82, 83, 84, 85, 86, 92, 93, 94, 95, 96, 97, 100, 101, 103, 110, 111, 113, 114, 115, 121, 123, 124, 133, 142, 143, 144, 156, 157, 158, 160, 171, 173, 177, 182, 183, 190, 197, 201, 202, 214, 216, 235, 237, 294, 313, 336, 343, 363, 370, 372, 409, 425, 426, 436, 468, 481, 483, 496, 528, 542, 551, 555, 556, 564, 570, 571, 588, 599, 600, 612, 634, 642, 688, 693, 697, 710, 712, 746, 811, 827, 828, 838, 843, 875, 893, 894, 895, 896, 898, 903, 912, 913], "type": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 62, 65, 70, 80, 82, 83, 84, 85, 86, 90, 92, 93, 94, 95, 103, 104, 109, 110, 111, 114, 117, 118, 122, 138, 142, 144, 145, 146, 157, 197, 201, 202, 204, 206, 207, 237, 249, 273, 286, 294, 295, 297, 298, 299, 315, 317, 320, 323, 325, 327, 330, 334, 337, 349, 360, 366, 368, 369, 387, 412, 463, 464, 465, 468, 481, 491, 496, 504, 505, 506, 508, 509, 516, 542, 551, 557, 562, 564, 571, 572, 589, 598, 599, 600, 607, 608, 634, 668, 681, 688, 690, 694, 695, 696, 714, 716, 719, 725, 727, 730, 733, 737, 740, 764, 838, 870, 871, 872, 893, 894, 896, 904, 913], "config": [0, 55, 186, 214, 237, 551, 595, 612, 634], "except": [0, 147, 159, 195, 237, 508, 551, 577, 634, 894, 903, 913], "test": [0, 95, 551, 573, 580, 634], "util": [0, 512, 551, 564, 634], "sql": [0, 43, 102, 158, 237, 551], "These": [1, 119, 340, 541, 743], "allow": [1, 46, 70, 81, 103, 105, 106, 107, 108, 114, 115, 121, 156, 159, 160, 182, 183, 184, 202, 216, 237, 331, 411, 426, 468, 542, 576, 577, 581, 599, 600, 613, 634, 734, 813, 828, 830, 875, 895, 913], "you": [1, 29, 55, 80, 82, 83, 84, 86, 90, 92, 93, 95, 96, 100, 103, 110, 118, 122, 129, 133, 156, 159, 169, 182, 183, 199, 201, 205, 219, 237, 249, 268, 297, 298, 299, 355, 364, 385, 387, 411, 416, 417, 418, 419, 420, 422, 423, 424, 453, 456, 468, 492, 501, 510, 542, 557, 560, 573, 577, 580, 598, 600, 618, 634, 642, 663, 694, 695, 696, 768, 813, 860, 863, 875, 894, 903, 913], "regist": [1, 56, 57, 58, 59], "custom": [1, 56, 57, 58, 59, 122, 219, 237, 249, 286, 385, 415, 491, 517, 542, 581, 618, 634, 643, 681, 817, 913], "dedic": [1, 81, 156, 183, 237], "namespac": [1, 236, 541, 551, 633], "underli": [1, 66, 73, 80, 82, 83, 84, 86, 100, 114, 115, 133, 156, 157, 183, 197, 237, 290, 313, 314, 316, 319, 321, 322, 324, 326, 328, 329, 332, 333, 334, 336, 341, 342, 343, 344, 411, 425, 443, 445, 542, 634, 642, 684, 712, 713, 715, 718, 720, 724, 726, 729, 731, 732, 735, 736, 737, 739, 744, 745, 746, 747, 813, 827, 838, 850, 852, 890, 894, 913], "polar": [1, 237, 541, 542, 551, 634, 913, 919, 920], "class": [1, 2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 85, 112, 113, 201, 202, 237, 542, 551, 634, 893, 894, 913, 919], "without": [1, 64, 94, 97, 101, 104, 105, 208, 209, 237, 249, 308, 335, 387, 416, 417, 418, 419, 420, 422, 423, 424, 527, 542, 609, 634, 704, 705, 710, 738, 913], "requir": [1, 29, 85, 110, 111, 172, 182, 202, 237, 346, 347, 348, 431, 468, 483, 542, 600, 634, 751, 752, 753, 837, 875, 894, 895, 898, 913], "subclass": [1, 237], "mixin": 1, "expr": [1, 55, 56, 57, 58, 59, 60, 63, 65, 132, 134, 136, 158, 159, 169, 174, 182, 186, 214, 237, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 542, 543, 546, 547, 548, 563, 565, 567, 576, 577, 590, 595, 597, 612, 634, 661, 663, 704, 713, 757, 768, 836, 850, 854, 873, 885, 913], "ar": [1, 9, 15, 29, 46, 65, 72, 79, 80, 81, 82, 83, 84, 85, 86, 92, 93, 94, 95, 96, 100, 103, 104, 105, 106, 107, 110, 111, 113, 114, 117, 119, 121, 122, 129, 131, 134, 138, 143, 144, 145, 156, 159, 160, 165, 166, 171, 172, 182, 183, 186, 192, 198, 202, 209, 210, 214, 217, 237, 246, 286, 304, 306, 307, 311, 312, 335, 340, 345, 346, 347, 348, 364, 366, 368, 369, 370, 372, 373, 374, 377, 387, 403, 409, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 433, 436, 438, 439, 453, 456, 457, 475, 492, 493, 495, 498, 528, 530, 535, 536, 538, 541, 542, 543, 546, 547, 548, 551, 560, 565, 570, 571, 572, 573, 577, 580, 581, 585, 586, 589, 592, 595, 599, 600, 602, 609, 612, 613, 616, 634, 640, 642, 681, 702, 703, 738, 743, 749, 750, 751, 752, 753, 763, 768, 772, 775, 776, 777, 778, 779, 780, 787, 811, 815, 817, 823, 840, 843, 860, 863, 864, 883, 894, 895, 903, 905, 907, 909, 913, 916, 917, 918], "all": [1, 6, 12, 15, 20, 23, 30, 62, 63, 65, 80, 83, 85, 86, 87, 92, 93, 94, 95, 96, 100, 103, 106, 107, 112, 113, 115, 129, 135, 147, 152, 154, 156, 157, 160, 165, 168, 169, 177, 182, 183, 191, 195, 200, 206, 208, 210, 237, 247, 248, 268, 273, 283, 286, 288, 302, 308, 312, 349, 359, 360, 363, 366, 369, 373, 374, 376, 379, 381, 385, 386, 398, 402, 406, 409, 414, 431, 437, 444, 450, 452, 455, 458, 459, 461, 467, 474, 486, 496, 508, 510, 525, 530, 542, 551, 557, 560, 562, 564, 566, 581, 585, 589, 598, 601, 607, 613, 634, 663, 668, 678, 681, 704, 710, 770, 784, 811, 844, 851, 857, 859, 862, 865, 866, 868, 874, 913], "support": [1, 29, 63, 80, 81, 82, 83, 84, 85, 86, 94, 95, 102, 104, 112, 115, 119, 121, 156, 157, 183, 191, 192, 199, 202, 237, 281, 403, 437, 439, 462, 496, 542, 601, 602, 634, 676, 844, 869, 895, 913], "target": [1, 61, 237, 449, 468, 856, 875], "thi": [1, 6, 23, 25, 27, 29, 45, 46, 55, 62, 63, 64, 80, 82, 83, 84, 85, 86, 89, 90, 92, 93, 94, 95, 96, 100, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 121, 122, 129, 130, 131, 133, 138, 143, 144, 145, 146, 150, 152, 154, 156, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 175, 176, 177, 182, 183, 184, 186, 189, 191, 193, 194, 197, 199, 201, 202, 205, 206, 208, 209, 210, 211, 212, 214, 215, 219, 236, 237, 246, 248, 249, 258, 261, 268, 269, 273, 282, 286, 295, 302, 308, 313, 321, 331, 334, 335, 343, 351, 362, 363, 364, 368, 379, 384, 385, 387, 391, 392, 393, 394, 400, 401, 403, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 422, 423, 424, 426, 428, 430, 431, 432, 437, 438, 439, 454, 455, 460, 461, 467, 468, 471, 482, 483, 484, 485, 486, 489, 492, 497, 499, 501, 503, 509, 510, 512, 527, 531, 542, 551, 552, 554, 557, 560, 562, 564, 570, 571, 572, 574, 577, 581, 585, 586, 589, 592, 595, 597, 598, 599, 600, 601, 607, 609, 612, 613, 614, 615, 618, 633, 634, 642, 643, 652, 655, 663, 664, 668, 677, 690, 704, 705, 710, 712, 713, 720, 734, 737, 738, 746, 750, 755, 762, 763, 769, 774, 775, 781, 783, 785, 788, 792, 794, 795, 796, 797, 799, 800, 802, 803, 805, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 821, 824, 825, 826, 828, 831, 832, 833, 836, 837, 838, 839, 844, 845, 847, 861, 862, 867, 868, 874, 875, 878, 879, 882, 883, 890, 892, 893, 894, 895, 897, 898, 900, 902, 903, 913], "featur": [1, 29, 46, 61, 237], "i": [1, 12, 25, 27, 28, 46, 55, 60, 61, 62, 63, 64, 65, 67, 69, 70, 72, 76, 78, 80, 81, 82, 83, 84, 85, 86, 89, 92, 93, 94, 96, 100, 103, 104, 105, 106, 107, 108, 112, 113, 114, 115, 121, 122, 129, 131, 139, 142, 143, 144, 145, 146, 150, 151, 153, 155, 156, 157, 159, 160, 163, 165, 166, 169, 171, 173, 174, 182, 183, 184, 191, 192, 194, 197, 202, 205, 206, 208, 209, 210, 219, 236, 237, 246, 247, 248, 249, 259, 268, 271, 281, 285, 286, 308, 314, 331, 335, 340, 346, 347, 348, 351, 360, 362, 364, 377, 385, 387, 394, 403, 409, 411, 413, 416, 417, 418, 419, 420, 422, 423, 424, 426, 427, 428, 432, 433, 436, 437, 438, 439, 443, 444, 449, 450, 452, 454, 455, 457, 460, 461, 462, 465, 467, 468, 471, 486, 490, 492, 496, 497, 499, 501, 502, 503, 510, 516, 527, 531, 542, 557, 560, 562, 564, 570, 571, 572, 575, 577, 579, 581, 585, 586, 589, 598, 599, 600, 601, 602, 607, 609, 615, 618, 634, 641, 642, 643, 663, 666, 676, 680, 704, 705, 713, 734, 738, 743, 750, 751, 752, 753, 755, 763, 764, 767, 769, 771, 781, 782, 783, 785, 786, 787, 811, 813, 815, 828, 829, 830, 831, 832, 833, 839, 840, 843, 844, 847, 850, 851, 856, 857, 859, 861, 862, 864, 867, 868, 869, 872, 874, 878, 890, 894, 895, 901, 902, 903, 913], "primarili": 1, "intend": 1, "us": [1, 8, 10, 12, 15, 20, 21, 25, 29, 46, 55, 64, 65, 80, 81, 83, 84, 86, 87, 88, 90, 92, 93, 94, 95, 96, 100, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 115, 118, 122, 127, 129, 134, 135, 138, 143, 144, 145, 152, 154, 156, 157, 159, 163, 165, 168, 169, 173, 174, 182, 184, 186, 192, 194, 200, 202, 205, 206, 208, 209, 210, 214, 217, 219, 237, 244, 249, 259, 268, 286, 290, 291, 295, 308, 311, 312, 343, 345, 346, 347, 348, 354, 355, 363, 364, 377, 385, 387, 390, 403, 409, 411, 413, 416, 417, 418, 419, 420, 422, 423, 424, 426, 428, 431, 432, 436, 438, 439, 445, 446, 447, 453, 454, 460, 462, 464, 466, 468, 491, 492, 496, 498, 501, 503, 510, 512, 516, 518, 521, 526, 527, 530, 531, 541, 542, 551, 557, 559, 560, 565, 566, 570, 571, 572, 573, 577, 579, 580, 585, 595, 600, 602, 607, 609, 612, 616, 618, 634, 643, 663, 681, 684, 685, 690, 704, 746, 749, 751, 752, 753, 757, 758, 763, 768, 787, 793, 811, 813, 815, 828, 831, 832, 833, 837, 839, 843, 847, 852, 853, 860, 861, 867, 869, 871, 875, 885, 891, 893, 894, 895, 902, 903, 913], "librari": [1, 66, 73, 385, 542, 920], "author": 1, "domain": 1, "specif": [1, 23, 80, 82, 84, 86, 92, 94, 102, 104, 114, 156, 237, 415, 468, 542, 634, 817, 875, 913], "capabl": [1, 237], "which": [1, 15, 24, 25, 26, 27, 28, 29, 55, 56, 57, 58, 59, 83, 92, 93, 94, 95, 102, 103, 104, 110, 129, 133, 144, 145, 206, 237, 246, 286, 352, 364, 366, 369, 370, 372, 373, 374, 394, 416, 417, 418, 419, 420, 422, 423, 424, 457, 542, 560, 562, 571, 572, 599, 600, 607, 615, 634, 642, 756, 768, 772, 776, 777, 778, 779, 780, 831, 864, 913], "mai": [1, 29, 63, 64, 80, 82, 83, 84, 86, 92, 94, 96, 104, 105, 106, 122, 131, 133, 159, 188, 189, 202, 208, 209, 237, 249, 280, 285, 286, 308, 313, 321, 335, 387, 416, 417, 418, 419, 420, 422, 423, 424, 429, 430, 468, 501, 502, 510, 525, 542, 577, 581, 596, 597, 600, 609, 614, 618, 634, 642, 675, 680, 704, 705, 712, 720, 738, 750, 835, 836, 875, 913], "exist": [1, 80, 94, 104, 114, 214, 237, 314, 612, 634, 713], "belong": [1, 144, 237, 571, 634], "core": [1, 202, 237], "cannot": [1, 81, 92, 93, 96, 110, 122, 184, 219, 237, 290, 387, 426, 445, 464, 473, 542, 598, 618, 634, 684, 828, 852, 871, 913], "overrid": [1, 80, 82, 83, 84, 85, 86, 92, 112, 113, 115, 237, 634], "str": [1, 5, 7, 9, 11, 12, 15, 16, 23, 24, 25, 26, 27, 28, 29, 32, 40, 43, 44, 45, 46, 47, 55, 56, 57, 58, 59, 61, 64, 65, 80, 82, 83, 84, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 112, 113, 114, 115, 125, 126, 127, 128, 129, 130, 131, 132, 136, 137, 138, 140, 142, 143, 144, 145, 147, 149, 152, 154, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 171, 174, 176, 178, 179, 180, 181, 182, 183, 184, 188, 189, 191, 192, 193, 194, 195, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 244, 245, 249, 264, 265, 266, 271, 272, 273, 281, 284, 286, 310, 315, 331, 334, 335, 338, 340, 349, 351, 353, 355, 357, 362, 364, 368, 371, 386, 387, 393, 395, 403, 406, 412, 414, 416, 417, 418, 419, 420, 422, 423, 424, 430, 431, 438, 439, 472, 473, 474, 477, 488, 489, 490, 491, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 542, 546, 557, 558, 559, 560, 562, 563, 564, 567, 569, 570, 571, 572, 574, 576, 577, 585, 586, 589, 591, 592, 593, 597, 598, 599, 600, 601, 602, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 639, 660, 661, 668, 681, 688, 705, 706, 714, 734, 737, 738, 741, 743, 755, 758, 768, 793, 794, 797, 802, 803, 814, 831, 832, 879, 881, 891, 892, 913, 916], "dt": [1, 55, 145, 237, 548, 572, 634, 918], "attempt": [1, 201, 237], "do": [1, 55, 62, 103, 133, 159, 197, 205, 208, 237, 268, 308, 455, 461, 467, 489, 542, 557, 562, 577, 581, 589, 598, 599, 600, 634, 642, 663, 704, 862, 868, 874, 894, 903, 913], "so": [1, 46, 102, 103, 104, 142, 144, 145, 174, 237, 259, 271, 364, 455, 461, 467, 542, 571, 572, 634, 666, 862, 868, 874], "rais": [1, 11, 15, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 110, 111, 182, 237, 285, 290, 393, 405, 443, 445, 468, 516, 542, 680, 684, 850, 852, 875, 894, 903, 913], "an": [1, 56, 58, 59, 60, 62, 65, 66, 70, 71, 73, 80, 92, 93, 94, 95, 100, 102, 103, 106, 113, 114, 115, 122, 123, 124, 131, 134, 136, 138, 144, 145, 156, 157, 159, 169, 174, 180, 182, 197, 201, 208, 214, 219, 237, 245, 246, 249, 266, 268, 271, 285, 286, 290, 294, 297, 298, 299, 303, 304, 305, 306, 307, 308, 314, 343, 352, 355, 364, 376, 385, 386, 394, 407, 415, 416, 417, 418, 419, 420, 422, 423, 424, 443, 445, 450, 468, 477, 492, 496, 507, 512, 516, 525, 526, 527, 530, 542, 551, 555, 556, 557, 562, 564, 567, 571, 572, 577, 581, 589, 598, 612, 613, 618, 634, 661, 663, 666, 680, 684, 688, 693, 694, 695, 696, 697, 700, 701, 702, 703, 704, 713, 746, 750, 756, 768, 817, 818, 819, 820, 821, 822, 824, 825, 826, 831, 832, 850, 852, 857, 875, 894, 903, 913], "attributeerror": 1, "howev": [1, 83, 131, 237, 750, 913], "can": [1, 55, 65, 71, 83, 92, 93, 95, 96, 100, 103, 105, 106, 108, 113, 114, 115, 122, 130, 138, 144, 152, 154, 169, 174, 186, 192, 205, 208, 214, 219, 237, 249, 268, 286, 304, 307, 308, 331, 340, 352, 363, 364, 398, 411, 416, 417, 418, 419, 420, 422, 423, 424, 428, 431, 433, 436, 439, 452, 455, 461, 467, 486, 489, 492, 493, 496, 503, 510, 512, 518, 531, 541, 542, 557, 562, 571, 595, 602, 612, 614, 618, 634, 643, 663, 681, 704, 734, 743, 756, 768, 798, 813, 831, 832, 833, 837, 840, 843, 859, 862, 868, 874, 913], "other": [1, 15, 65, 92, 93, 95, 103, 110, 111, 129, 133, 139, 158, 159, 165, 166, 182, 186, 209, 214, 235, 237, 248, 259, 264, 297, 298, 299, 310, 368, 387, 439, 481, 495, 498, 530, 542, 551, 560, 576, 577, 585, 586, 595, 609, 612, 613, 634, 642, 659, 694, 695, 696, 708, 775, 830, 896, 904, 912, 913], "onli": [1, 15, 23, 46, 55, 61, 63, 92, 93, 94, 95, 96, 100, 103, 104, 106, 107, 108, 114, 115, 119, 122, 129, 156, 159, 163, 183, 194, 199, 237, 244, 249, 259, 296, 297, 298, 299, 331, 349, 358, 411, 484, 526, 542, 557, 560, 573, 577, 580, 634, 691, 694, 695, 696, 734, 761, 813, 890, 913], "gener": [1, 87, 102, 112, 113, 114, 115, 174, 184, 200, 205, 237, 286, 426, 432, 542, 634, 681, 828, 839, 891, 913], "userwarn": 1, "pl": [1, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 80, 82, 83, 84, 85, 86, 87, 89, 90, 92, 93, 94, 95, 96, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 393, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 542, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 662, 663, 664, 667, 668, 670, 675, 676, 677, 679, 681, 688, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 752, 753, 756, 757, 758, 759, 761, 764, 765, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 806, 807, 808, 810, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 835, 839, 840, 841, 842, 844, 845, 846, 847, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 913], "register_expr_namespac": [1, 56, 58, 59], "greet": 1, "def": [1, 56, 57, 58, 59, 113, 114, 115, 173, 205, 237, 517, 542, 588, 634], "__init__": [1, 2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 112], "self": [1, 56, 57, 58, 59, 62, 122, 123, 124, 126, 127, 129, 132, 133, 134, 135, 136, 143, 144, 145, 147, 149, 150, 151, 158, 159, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 237, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 288, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 542, 554, 555, 556, 557, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 634, 642, 792, 793, 831, 832, 845, 900, 904, 913], "_expr": [1, 57], "hello": [1, 455, 461, 467, 489, 668, 862, 868, 874], "return": [1, 23, 25, 27, 28, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 72, 74, 79, 80, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 103, 104, 118, 122, 123, 128, 129, 130, 131, 132, 134, 135, 138, 142, 143, 147, 149, 155, 156, 157, 158, 160, 161, 168, 169, 171, 172, 173, 174, 182, 183, 184, 195, 196, 202, 205, 206, 214, 216, 219, 222, 226, 231, 237, 246, 247, 250, 251, 252, 253, 254, 255, 258, 259, 261, 262, 263, 265, 269, 271, 272, 273, 284, 285, 289, 291, 300, 301, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 341, 342, 344, 351, 361, 364, 366, 367, 368, 369, 370, 372, 373, 374, 380, 384, 394, 398, 412, 413, 426, 427, 433, 434, 435, 442, 444, 446, 448, 449, 450, 452, 453, 454, 456, 457, 460, 462, 463, 464, 465, 471, 476, 477, 478, 479, 480, 482, 484, 485, 486, 490, 491, 492, 493, 496, 504, 505, 506, 512, 514, 516, 517, 526, 527, 530, 532, 534, 542, 555, 557, 560, 561, 562, 564, 573, 579, 580, 581, 588, 589, 598, 599, 600, 605, 606, 607, 612, 615, 621, 625, 630, 634, 639, 640, 641, 643, 650, 651, 653, 654, 657, 658, 660, 664, 666, 667, 668, 679, 680, 683, 685, 693, 705, 706, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 747, 750, 755, 763, 765, 770, 772, 773, 775, 776, 777, 778, 779, 780, 784, 786, 789, 792, 798, 815, 816, 828, 829, 830, 832, 840, 849, 850, 851, 853, 855, 856, 857, 859, 860, 861, 863, 864, 867, 869, 870, 871, 872, 875, 878, 884, 886, 897, 899, 900, 904, 913], "lit": [1, 90, 118, 289, 364, 376, 501, 503, 510, 531, 534, 542, 683, 758, 913], "alia": [1, 55, 57, 59, 144, 145, 161, 207, 214, 237, 249, 261, 266, 268, 297, 298, 299, 303, 304, 305, 306, 307, 309, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 325, 327, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 342, 343, 355, 357, 362, 364, 367, 368, 376, 379, 380, 387, 396, 404, 411, 427, 443, 444, 447, 450, 453, 456, 462, 464, 465, 466, 472, 473, 481, 482, 488, 491, 494, 495, 497, 498, 501, 502, 503, 506, 507, 510, 511, 517, 525, 526, 530, 531, 542, 571, 572, 574, 580, 608, 612, 634, 655, 663, 712, 714, 717, 734, 737, 742, 746, 789, 871, 872, 913], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 455, 461, 467, 668, 862, 868, 874], "select": [1, 55, 56, 57, 58, 60, 91, 92, 93, 94, 96, 100, 102, 103, 105, 122, 155, 159, 169, 173, 182, 191, 203, 207, 210, 237, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 282, 283, 286, 287, 288, 296, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 356, 358, 359, 360, 362, 363, 365, 366, 368, 369, 371, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 397, 398, 399, 400, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 452, 454, 455, 457, 460, 461, 463, 464, 465, 467, 469, 470, 472, 473, 474, 475, 478, 479, 480, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 496, 497, 499, 500, 501, 502, 503, 506, 508, 509, 510, 511, 512, 514, 518, 519, 520, 521, 522, 523, 525, 528, 529, 530, 531, 532, 533, 542, 558, 574, 577, 588, 601, 608, 613, 615, 634, 663, 681, 831, 832, 844, 856, 859, 885, 913], "shape": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 77, 80, 82, 83, 84, 85, 86, 87, 90, 103, 105, 114, 115, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 158, 159, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 184, 186, 188, 189, 191, 192, 193, 194, 195, 196, 198, 200, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 514, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 534, 542, 555, 557, 559, 560, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 592, 593, 595, 596, 597, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 662, 663, 664, 667, 668, 670, 675, 676, 677, 679, 681, 688, 690, 691, 693, 694, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 752, 753, 756, 757, 758, 759, 761, 764, 765, 767, 768, 770, 772, 775, 776, 777, 778, 779, 780, 784, 786, 789, 792, 793, 798, 806, 807, 808, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 835, 839, 840, 841, 842, 844, 845, 846, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 882, 884, 885, 886, 887, 888, 891, 892, 896, 898, 899, 900, 901, 904, 913], "3": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 80, 82, 83, 84, 85, 86, 87, 95, 102, 103, 105, 109, 110, 111, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 244, 245, 246, 249, 258, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 288, 294, 295, 296, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 326, 328, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 379, 381, 382, 383, 384, 386, 387, 398, 402, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 438, 439, 440, 443, 446, 447, 449, 451, 453, 456, 457, 462, 463, 464, 465, 466, 472, 473, 474, 476, 477, 478, 482, 484, 485, 486, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 507, 508, 509, 510, 511, 514, 516, 517, 518, 519, 520, 521, 523, 525, 527, 528, 529, 530, 531, 532, 533, 534, 542, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 639, 642, 643, 644, 646, 647, 648, 650, 651, 652, 653, 654, 662, 663, 664, 667, 670, 675, 676, 677, 679, 681, 688, 690, 691, 692, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 714, 715, 716, 717, 718, 721, 722, 723, 725, 727, 728, 729, 731, 733, 735, 737, 738, 739, 742, 743, 745, 746, 750, 752, 753, 756, 757, 758, 759, 761, 764, 765, 767, 768, 770, 772, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 787, 788, 789, 792, 794, 795, 796, 797, 798, 799, 800, 806, 807, 808, 810, 811, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 835, 839, 841, 842, 843, 844, 845, 847, 853, 854, 856, 858, 860, 863, 864, 869, 873, 882, 883, 884, 885, 886, 887, 888, 890, 891, 893, 894, 895, 898, 899, 900, 901, 902, 904, 913], "1": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 80, 82, 83, 84, 85, 86, 87, 90, 92, 93, 94, 96, 102, 103, 104, 105, 109, 110, 111, 112, 114, 115, 122, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 446, 447, 448, 449, 450, 451, 452, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 542, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 662, 663, 664, 666, 667, 670, 675, 676, 677, 679, 681, 688, 690, 691, 692, 694, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 751, 752, 753, 756, 757, 758, 759, 761, 764, 765, 767, 768, 770, 772, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 786, 788, 789, 792, 794, 795, 796, 797, 798, 799, 800, 806, 807, 808, 810, 811, 814, 815, 816, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 856, 858, 859, 871, 872, 875, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 913], "2": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 80, 82, 83, 84, 85, 86, 87, 102, 103, 105, 109, 110, 111, 114, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 243, 244, 245, 247, 248, 249, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 315, 317, 319, 320, 321, 322, 323, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 337, 338, 340, 343, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 437, 438, 439, 440, 442, 444, 447, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 488, 489, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 534, 542, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 576, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 639, 642, 643, 645, 649, 650, 651, 652, 653, 654, 662, 663, 664, 667, 668, 670, 675, 676, 677, 679, 681, 690, 691, 692, 693, 697, 698, 701, 702, 703, 704, 705, 706, 707, 708, 713, 718, 722, 723, 729, 731, 736, 738, 739, 743, 745, 747, 749, 750, 751, 752, 753, 756, 757, 758, 759, 761, 764, 765, 767, 768, 770, 772, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 788, 789, 790, 792, 794, 795, 796, 797, 798, 799, 800, 806, 807, 808, 810, 811, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 835, 839, 841, 843, 844, 845, 846, 847, 849, 851, 857, 858, 859, 862, 863, 864, 865, 866, 868, 871, 872, 874, 875, 882, 883, 884, 885, 886, 887, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 904, 913], "column_0": [1, 80, 122, 205, 237], "register_dataframe_namespac": [1, 57, 58, 59], "split": [1, 56, 157, 237, 464, 465, 871, 872], "splitfram": [1, 56], "df": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 56, 57, 60, 80, 81, 82, 83, 84, 85, 86, 87, 93, 103, 113, 114, 115, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 282, 283, 286, 287, 288, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 514, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 534, 542, 556, 557, 558, 560, 562, 563, 564, 565, 566, 568, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 592, 593, 596, 597, 598, 601, 603, 604, 605, 607, 608, 609, 610, 614, 615, 618, 621, 630, 634, 663, 681, 690, 856, 859, 866, 871, 872, 892, 913], "_df": [1, 56], "by_alternate_row": 1, "list": [1, 32, 55, 56, 58, 62, 64, 80, 82, 83, 84, 86, 89, 91, 92, 93, 94, 96, 100, 102, 103, 104, 113, 114, 115, 125, 127, 130, 131, 132, 136, 141, 143, 144, 149, 156, 168, 171, 182, 183, 186, 192, 198, 199, 205, 206, 207, 208, 214, 217, 218, 237, 244, 264, 267, 268, 269, 272, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 351, 357, 385, 394, 395, 403, 412, 413, 415, 416, 417, 418, 419, 420, 422, 423, 424, 430, 438, 439, 450, 463, 472, 473, 477, 493, 496, 497, 503, 507, 518, 521, 530, 531, 542, 558, 559, 561, 563, 567, 570, 571, 585, 595, 602, 607, 608, 612, 613, 616, 617, 634, 656, 659, 662, 663, 664, 666, 667, 668, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 692, 705, 750, 755, 759, 762, 775, 815, 817, 818, 819, 820, 821, 822, 824, 825, 826, 829, 857, 870, 881, 885, 893, 913], "with_row_count": [1, 237, 387, 542, 634, 832, 913], "name": [1, 13, 17, 19, 27, 45, 56, 57, 58, 59, 64, 65, 69, 80, 82, 83, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 100, 101, 103, 106, 107, 108, 111, 112, 113, 114, 115, 122, 125, 127, 128, 129, 132, 137, 140, 142, 143, 156, 158, 159, 165, 171, 174, 178, 182, 183, 185, 186, 192, 198, 200, 204, 205, 206, 207, 208, 209, 214, 215, 216, 217, 237, 245, 249, 286, 335, 340, 349, 364, 376, 386, 393, 395, 403, 406, 439, 472, 473, 474, 489, 490, 493, 495, 496, 498, 500, 503, 508, 514, 515, 518, 521, 523, 524, 526, 528, 530, 531, 532, 542, 558, 559, 560, 563, 570, 576, 577, 585, 592, 594, 595, 602, 607, 608, 609, 612, 614, 615, 616, 634, 639, 681, 693, 705, 738, 743, 814, 879, 881, 891, 892, 895, 913], "n": [1, 10, 12, 20, 28, 32, 33, 56, 57, 58, 59, 65, 89, 90, 92, 93, 103, 118, 122, 123, 133, 144, 147, 156, 157, 161, 183, 184, 195, 196, 199, 222, 231, 237, 267, 272, 284, 308, 309, 313, 314, 318, 339, 343, 352, 361, 380, 404, 412, 426, 436, 464, 465, 476, 478, 482, 512, 514, 526, 532, 542, 555, 557, 571, 573, 580, 605, 606, 621, 630, 634, 642, 662, 667, 679, 693, 704, 707, 712, 713, 717, 742, 746, 756, 765, 789, 806, 828, 843, 847, 871, 872, 884, 886, 897, 902, 913], "filter": [1, 56, 94, 103, 104, 105, 129, 152, 153, 154, 219, 237, 447, 466, 488, 492, 510, 542, 560, 564, 574, 618, 634, 831, 913], "col": [1, 25, 55, 56, 57, 58, 60, 84, 86, 103, 113, 114, 122, 132, 136, 143, 144, 145, 153, 155, 169, 173, 182, 186, 192, 207, 214, 217, 237, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 282, 283, 286, 287, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 352, 355, 356, 357, 358, 362, 363, 364, 365, 367, 368, 370, 371, 372, 375, 376, 377, 378, 382, 383, 384, 387, 388, 389, 390, 397, 399, 400, 401, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 495, 497, 498, 501, 502, 503, 506, 509, 510, 511, 512, 513, 518, 521, 524, 525, 531, 534, 542, 563, 567, 570, 571, 572, 574, 588, 595, 602, 608, 612, 613, 616, 634, 663, 681, 690, 734, 815, 831, 832, 856, 859, 875, 913], "0": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 29, 55, 56, 57, 59, 60, 64, 87, 92, 93, 95, 96, 100, 102, 103, 105, 106, 107, 108, 109, 112, 113, 114, 115, 118, 122, 123, 124, 126, 127, 130, 134, 135, 138, 139, 141, 142, 143, 144, 146, 150, 155, 156, 157, 158, 160, 162, 163, 164, 167, 168, 169, 170, 172, 175, 176, 180, 184, 185, 186, 189, 191, 192, 193, 194, 200, 202, 203, 205, 208, 210, 211, 214, 215, 217, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 237, 243, 244, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 266, 268, 271, 277, 286, 294, 296, 298, 299, 300, 301, 303, 308, 311, 312, 319, 322, 323, 325, 326, 330, 336, 337, 346, 347, 348, 350, 351, 352, 353, 354, 358, 360, 363, 366, 369, 370, 372, 373, 374, 376, 377, 382, 383, 385, 387, 388, 389, 390, 397, 400, 401, 402, 404, 405, 408, 409, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 431, 433, 434, 435, 436, 440, 441, 449, 471, 475, 479, 480, 481, 487, 492, 493, 494, 495, 497, 500, 501, 503, 507, 510, 519, 520, 523, 524, 525, 528, 531, 533, 534, 542, 555, 556, 559, 561, 565, 566, 570, 571, 576, 579, 584, 589, 590, 594, 595, 597, 598, 600, 602, 603, 610, 612, 613, 614, 616, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 634, 644, 645, 646, 647, 648, 649, 650, 652, 654, 655, 663, 666, 688, 691, 693, 698, 699, 704, 705, 706, 708, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 732, 733, 739, 740, 749, 751, 752, 753, 755, 757, 761, 764, 772, 774, 776, 777, 778, 779, 780, 786, 787, 792, 795, 796, 806, 810, 811, 817, 819, 820, 822, 823, 824, 826, 828, 840, 841, 842, 846, 847, 849, 856, 859, 878, 887, 888, 891, 895, 896, 900, 902, 903, 913], "drop": [1, 83, 122, 128, 129, 206, 214, 237, 267, 309, 311, 312, 542, 560, 607, 612, 634, 662, 707, 709, 710, 913], "aaa": [1, 472, 473], "bbb": [1, 472, 473], "ccc": [1, 472, 473], "ddd": [1, 472, 473], "eee": 1, "fff": 1, "column": [1, 12, 13, 16, 17, 19, 27, 46, 55, 56, 63, 64, 65, 67, 69, 80, 82, 83, 84, 85, 86, 87, 91, 92, 93, 94, 96, 97, 100, 101, 102, 103, 104, 106, 107, 108, 110, 114, 121, 122, 127, 128, 129, 130, 132, 137, 140, 142, 143, 144, 145, 149, 150, 156, 158, 159, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 182, 183, 185, 186, 192, 193, 194, 198, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 214, 215, 217, 237, 246, 247, 249, 258, 261, 264, 269, 282, 285, 286, 314, 316, 319, 321, 322, 324, 326, 328, 329, 332, 333, 336, 341, 342, 344, 349, 351, 355, 357, 364, 376, 387, 392, 393, 395, 403, 406, 410, 412, 413, 416, 417, 418, 419, 420, 422, 423, 424, 431, 438, 439, 448, 457, 464, 465, 468, 474, 488, 489, 490, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 509, 510, 512, 513, 514, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 529, 530, 531, 532, 533, 534, 542, 559, 560, 561, 563, 570, 571, 572, 576, 577, 581, 582, 583, 584, 585, 587, 588, 590, 592, 594, 595, 602, 603, 604, 607, 608, 609, 610, 612, 613, 614, 615, 616, 634, 640, 641, 659, 664, 677, 680, 705, 715, 718, 720, 724, 726, 729, 731, 732, 735, 736, 739, 744, 745, 747, 755, 815, 837, 855, 864, 871, 872, 882, 891, 892, 913], "txt": 1, "utf8": [1, 8, 15, 46, 83, 92, 93, 103, 112, 130, 131, 132, 138, 185, 201, 237, 273, 351, 387, 442, 446, 449, 450, 452, 453, 462, 463, 464, 465, 468, 496, 498, 542, 561, 563, 594, 634, 668, 741, 755, 785, 849, 853, 856, 857, 859, 860, 869, 870, 871, 872, 875, 913], "register_lazyframe_namespac": [1, 56, 57, 59], "dtypeoper": [1, 58], "ldf": [1, 58, 555, 559, 570, 595, 599, 600, 602, 612, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634], "_ldf": [1, 58], "upcast_integer_typ": [1, 58], "with_column": [1, 58, 145, 173, 237, 249, 259, 268, 294, 295, 297, 298, 299, 304, 307, 309, 360, 363, 364, 367, 370, 372, 373, 374, 376, 387, 403, 404, 447, 453, 456, 458, 459, 462, 464, 465, 466, 468, 471, 481, 491, 492, 495, 497, 498, 503, 507, 517, 531, 534, 542, 572, 588, 634, 663, 690, 875], "tp": [1, 58], "cast": [1, 57, 58, 80, 117, 138, 144, 145, 173, 202, 214, 237, 248, 295, 306, 307, 313, 387, 411, 451, 452, 471, 475, 481, 498, 542, 571, 572, 588, 612, 634, 690, 702, 703, 712, 813, 858, 859, 883, 892, 896, 913], "int64": [1, 27, 57, 58, 90, 92, 118, 130, 138, 144, 145, 173, 185, 197, 202, 237, 306, 307, 317, 320, 323, 325, 327, 330, 337, 349, 411, 451, 475, 481, 492, 496, 508, 530, 542, 561, 571, 572, 588, 594, 615, 634, 702, 703, 716, 719, 725, 727, 730, 733, 740, 813, 830, 883, 894, 895, 896, 913], "int8": [1, 58, 138, 237, 306, 307, 475, 542, 702, 703, 707, 816, 883, 900, 913], "int16": [1, 58, 306, 307, 475, 542, 702, 703, 883, 913], "int32": [1, 58, 83, 114, 115, 144, 145, 157, 237, 294, 321, 344, 481, 542, 571, 572, 634, 720, 747, 792, 896, 913], "b": [1, 24, 25, 26, 29, 46, 58, 63, 80, 82, 83, 84, 85, 86, 87, 95, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 149, 150, 152, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 245, 248, 249, 260, 264, 268, 273, 275, 288, 294, 295, 302, 310, 311, 312, 349, 353, 354, 355, 357, 359, 360, 363, 364, 366, 369, 370, 371, 372, 373, 374, 376, 379, 381, 386, 398, 402, 403, 406, 414, 431, 437, 439, 448, 451, 458, 474, 484, 486, 488, 489, 490, 491, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 507, 508, 509, 510, 511, 514, 517, 518, 519, 520, 521, 522, 523, 525, 528, 529, 530, 531, 532, 533, 542, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 576, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 642, 663, 690, 706, 708, 749, 750, 758, 768, 775, 785, 814, 830, 855, 858, 865, 882, 895, 899, 913], "4": [1, 12, 20, 24, 25, 26, 29, 46, 55, 56, 57, 58, 59, 60, 63, 65, 80, 82, 83, 84, 85, 86, 87, 103, 109, 110, 111, 115, 122, 123, 124, 126, 129, 132, 133, 134, 135, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 165, 168, 169, 171, 173, 174, 175, 179, 183, 187, 192, 195, 196, 197, 198, 199, 200, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 243, 244, 248, 249, 260, 266, 267, 268, 269, 272, 280, 281, 284, 288, 294, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 314, 316, 320, 326, 327, 328, 332, 333, 335, 336, 337, 340, 341, 342, 344, 350, 353, 354, 357, 358, 359, 361, 362, 363, 364, 373, 374, 376, 379, 381, 383, 386, 387, 403, 405, 406, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 427, 429, 430, 433, 437, 438, 439, 440, 443, 453, 454, 456, 460, 462, 464, 465, 468, 472, 473, 474, 476, 477, 478, 481, 482, 491, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 507, 509, 510, 514, 517, 518, 519, 520, 521, 522, 523, 528, 529, 530, 531, 532, 533, 534, 542, 555, 556, 557, 560, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 596, 597, 598, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 642, 645, 652, 662, 663, 664, 667, 675, 676, 679, 691, 692, 694, 704, 706, 708, 718, 719, 724, 726, 729, 730, 731, 732, 736, 738, 739, 740, 741, 743, 744, 745, 757, 758, 767, 768, 770, 775, 777, 778, 779, 780, 784, 793, 799, 806, 807, 808, 811, 815, 820, 822, 823, 824, 825, 826, 828, 830, 840, 844, 845, 850, 860, 861, 863, 867, 869, 871, 872, 875, 882, 885, 886, 895, 896, 904, 913], "c": [1, 24, 25, 26, 29, 46, 56, 58, 83, 85, 95, 103, 113, 123, 124, 125, 126, 127, 128, 129, 130, 132, 136, 137, 138, 139, 141, 142, 143, 144, 147, 149, 150, 157, 158, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 174, 175, 176, 178, 180, 181, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 197, 201, 202, 203, 205, 208, 209, 211, 212, 214, 217, 220, 221, 222, 223, 224, 225, 227, 230, 231, 237, 249, 264, 273, 275, 364, 376, 403, 431, 464, 468, 484, 486, 489, 490, 494, 495, 496, 498, 499, 500, 501, 502, 503, 509, 510, 511, 514, 517, 518, 519, 520, 521, 522, 523, 528, 529, 531, 532, 533, 542, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 570, 571, 576, 579, 585, 589, 592, 593, 594, 595, 598, 601, 602, 609, 612, 613, 616, 619, 620, 621, 622, 623, 624, 626, 629, 630, 634, 706, 768, 785, 871, 875, 899, 913], "5": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 29, 55, 56, 58, 59, 60, 63, 64, 80, 83, 84, 85, 86, 89, 90, 93, 109, 114, 115, 118, 122, 123, 124, 126, 132, 133, 134, 135, 138, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 153, 155, 156, 159, 160, 161, 163, 165, 168, 169, 171, 174, 175, 176, 179, 183, 187, 192, 195, 196, 197, 198, 199, 204, 208, 210, 213, 214, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 244, 261, 266, 268, 269, 272, 277, 283, 284, 294, 295, 296, 297, 298, 299, 308, 309, 310, 314, 315, 317, 334, 336, 337, 338, 341, 348, 349, 352, 358, 361, 364, 367, 370, 372, 373, 374, 376, 381, 403, 404, 406, 408, 409, 413, 414, 415, 416, 417, 419, 423, 425, 427, 433, 439, 444, 452, 453, 456, 457, 471, 474, 476, 478, 482, 491, 494, 495, 497, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 514, 517, 518, 519, 520, 521, 522, 523, 525, 528, 529, 531, 532, 533, 542, 555, 556, 557, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 575, 577, 578, 579, 580, 583, 584, 585, 589, 596, 597, 598, 601, 602, 603, 604, 605, 606, 611, 612, 614, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 642, 645, 649, 652, 655, 663, 664, 667, 670, 679, 690, 692, 694, 700, 704, 705, 706, 707, 708, 713, 714, 715, 716, 737, 739, 740, 744, 745, 753, 756, 767, 768, 792, 799, 806, 807, 808, 810, 811, 815, 817, 818, 819, 821, 822, 825, 828, 830, 840, 846, 851, 859, 860, 864, 897, 900, 904, 913], "6": [1, 24, 25, 26, 27, 28, 29, 56, 58, 63, 80, 83, 84, 85, 86, 87, 122, 125, 127, 128, 129, 130, 132, 133, 136, 137, 139, 140, 141, 142, 144, 145, 147, 149, 150, 151, 153, 155, 156, 158, 161, 162, 163, 164, 165, 167, 170, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 207, 208, 209, 210, 211, 212, 214, 215, 222, 230, 231, 237, 249, 269, 288, 294, 306, 307, 310, 314, 331, 333, 336, 345, 353, 354, 359, 361, 363, 381, 407, 409, 410, 413, 416, 417, 418, 419, 420, 422, 423, 424, 427, 439, 444, 448, 453, 456, 457, 476, 478, 489, 491, 501, 502, 503, 507, 510, 517, 531, 542, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 571, 572, 573, 575, 576, 578, 580, 581, 585, 589, 592, 594, 595, 596, 597, 598, 601, 602, 605, 606, 608, 609, 611, 612, 614, 615, 621, 629, 630, 634, 642, 664, 692, 698, 702, 703, 706, 708, 734, 745, 799, 811, 815, 820, 822, 823, 824, 826, 830, 851, 855, 860, 864, 883, 913], "7": [1, 24, 25, 26, 27, 28, 29, 56, 58, 63, 65, 125, 126, 127, 128, 130, 132, 136, 137, 139, 144, 145, 147, 149, 151, 158, 162, 163, 164, 167, 170, 172, 176, 178, 180, 182, 184, 185, 186, 188, 189, 191, 193, 194, 195, 196, 201, 202, 203, 208, 209, 210, 211, 212, 237, 307, 314, 316, 332, 334, 335, 340, 342, 344, 350, 361, 363, 413, 417, 423, 439, 476, 478, 491, 501, 502, 510, 517, 531, 542, 558, 559, 561, 563, 567, 571, 572, 573, 575, 576, 580, 590, 592, 594, 595, 605, 606, 609, 615, 634, 649, 713, 715, 720, 738, 743, 745, 815, 825, 913], "float32": [1, 25, 58, 138, 237, 634, 771, 792, 913], "lazi": [1, 58, 63, 65, 90, 103, 114, 118, 159, 173, 237, 249, 286, 492, 512, 542, 551, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 634], "i16": [1, 58, 431, 542], "i32": [1, 58, 83, 114, 186, 237, 294, 321, 344, 431, 457, 534, 542, 595, 634, 720, 747, 792, 864, 913], "f32": [1, 58, 237, 268, 409, 431, 507, 542, 634, 663, 792, 811, 913], "i64": [1, 12, 16, 56, 57, 58, 59, 63, 80, 82, 83, 84, 85, 86, 90, 103, 115, 118, 122, 123, 124, 125, 127, 129, 130, 132, 133, 135, 136, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 152, 154, 155, 158, 159, 161, 162, 165, 167, 171, 173, 174, 175, 178, 179, 180, 181, 184, 186, 188, 189, 191, 192, 194, 195, 196, 198, 203, 205, 206, 207, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 227, 230, 231, 237, 245, 248, 249, 267, 268, 269, 270, 271, 272, 274, 276, 278, 279, 280, 281, 282, 283, 284, 287, 288, 295, 297, 298, 299, 304, 305, 306, 307, 309, 310, 317, 318, 320, 323, 325, 327, 330, 337, 339, 349, 352, 354, 355, 356, 357, 359, 361, 362, 363, 364, 367, 370, 372, 373, 374, 376, 378, 381, 384, 385, 386, 398, 403, 404, 406, 407, 410, 411, 413, 414, 426, 428, 429, 431, 432, 433, 437, 438, 439, 458, 459, 472, 473, 474, 475, 476, 477, 478, 482, 483, 485, 488, 489, 491, 495, 496, 498, 501, 502, 503, 507, 508, 509, 510, 514, 517, 518, 521, 525, 527, 531, 532, 534, 542, 555, 557, 559, 560, 563, 564, 566, 567, 568, 570, 571, 572, 573, 575, 576, 577, 578, 580, 581, 582, 585, 587, 588, 589, 592, 593, 595, 596, 597, 601, 602, 604, 605, 606, 607, 608, 609, 612, 614, 616, 617, 618, 620, 621, 622, 623, 626, 629, 630, 634, 642, 643, 662, 663, 664, 667, 675, 676, 677, 679, 690, 694, 697, 700, 701, 702, 703, 706, 716, 717, 719, 725, 727, 730, 733, 737, 740, 742, 756, 758, 759, 765, 767, 775, 789, 798, 814, 815, 818, 821, 825, 828, 831, 832, 835, 839, 840, 844, 845, 882, 884, 885, 886, 892, 898, 901, 904, 913], "register_series_namespac": [1, 56, 57, 58], "math": [1, 59, 698, 841, 887, 913], "mathshortcut": [1, 59], "": [1, 25, 59, 64, 87, 92, 93, 115, 127, 129, 131, 132, 143, 144, 150, 158, 159, 171, 174, 179, 180, 186, 192, 196, 200, 206, 208, 237, 272, 273, 280, 281, 284, 318, 338, 349, 377, 394, 398, 400, 401, 403, 404, 411, 415, 439, 453, 454, 456, 460, 462, 463, 465, 468, 471, 472, 473, 493, 496, 503, 506, 508, 511, 512, 518, 521, 523, 530, 531, 542, 559, 560, 563, 570, 571, 577, 595, 602, 606, 607, 618, 634, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 662, 664, 667, 668, 670, 675, 676, 677, 679, 688, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 703, 704, 707, 708, 713, 717, 737, 738, 743, 750, 752, 753, 756, 757, 758, 759, 761, 764, 765, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 806, 807, 808, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 835, 839, 840, 841, 842, 844, 845, 847, 850, 851, 853, 854, 855, 857, 858, 860, 861, 862, 863, 864, 865, 867, 868, 869, 872, 873, 874, 875, 878, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 896, 898, 899, 900, 901, 902, 903, 913], "_": [1, 55, 59, 87, 174, 200, 237, 464, 871, 891, 913], "squar": [1, 59, 219, 377, 440, 542, 618, 787, 846, 913], "cube": [1, 59], "s2": [1, 111, 138, 237, 642, 692, 708, 775, 799, 830, 895, 904, 913], "renam": [1, 83, 92, 93, 186, 214, 217, 237, 245, 386, 396, 473, 527, 530, 542, 595, 612, 616, 634, 793, 881, 892, 913], "n2": 1, "in_plac": [1, 149, 190, 212, 237, 812, 814, 838, 845, 913], "true": [1, 8, 11, 13, 14, 16, 17, 18, 19, 20, 22, 23, 25, 27, 29, 60, 62, 63, 65, 80, 81, 85, 89, 92, 93, 94, 95, 96, 100, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 119, 121, 123, 124, 126, 135, 138, 139, 141, 142, 143, 144, 150, 152, 153, 154, 156, 159, 160, 163, 168, 169, 171, 174, 175, 182, 183, 184, 186, 192, 198, 202, 205, 206, 207, 208, 210, 214, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 237, 244, 246, 247, 248, 249, 259, 265, 282, 285, 290, 294, 303, 304, 305, 306, 307, 335, 336, 340, 345, 346, 347, 348, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 411, 421, 426, 431, 436, 438, 439, 443, 445, 447, 451, 452, 463, 464, 466, 468, 472, 473, 477, 482, 483, 486, 490, 491, 492, 493, 499, 510, 526, 528, 530, 534, 542, 555, 556, 557, 562, 564, 566, 570, 571, 576, 577, 579, 581, 589, 595, 598, 599, 600, 602, 607, 608, 612, 617, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 634, 640, 641, 642, 643, 653, 677, 680, 684, 688, 692, 693, 738, 739, 743, 749, 751, 752, 753, 759, 763, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 787, 799, 807, 808, 813, 823, 830, 843, 845, 850, 852, 854, 858, 859, 870, 871, 873, 875, 894, 895, 897, 903, 904, 913], "s3": [1, 94, 104, 105, 913], "n3": 1, "8": [1, 24, 25, 26, 27, 28, 29, 39, 52, 54, 55, 56, 58, 59, 63, 64, 87, 109, 113, 114, 122, 125, 126, 127, 128, 129, 130, 132, 136, 137, 139, 142, 147, 149, 158, 162, 163, 164, 167, 172, 176, 178, 180, 182, 184, 185, 186, 188, 189, 191, 193, 194, 195, 196, 201, 202, 203, 208, 209, 211, 212, 214, 237, 248, 260, 267, 268, 302, 304, 307, 308, 311, 312, 314, 363, 379, 405, 406, 413, 414, 417, 418, 420, 422, 424, 431, 437, 439, 454, 460, 468, 474, 478, 494, 499, 500, 502, 503, 507, 509, 514, 517, 518, 519, 520, 521, 522, 523, 528, 529, 531, 532, 533, 542, 558, 559, 560, 561, 563, 567, 573, 576, 580, 581, 589, 592, 594, 595, 605, 606, 609, 612, 615, 634, 662, 663, 704, 720, 806, 815, 817, 820, 822, 823, 824, 826, 861, 867, 875, 913], "9": [1, 24, 25, 26, 29, 55, 63, 122, 138, 145, 147, 151, 172, 186, 195, 208, 209, 212, 214, 230, 237, 248, 260, 267, 279, 282, 302, 304, 307, 311, 312, 314, 316, 332, 341, 342, 363, 368, 376, 379, 413, 415, 417, 423, 433, 437, 478, 491, 497, 501, 502, 542, 572, 573, 575, 580, 595, 605, 609, 612, 629, 634, 662, 677, 715, 724, 726, 732, 738, 739, 743, 744, 775, 815, 817, 825, 827, 840, 913], "27": [1, 59, 230, 307, 321, 333, 344, 405, 542, 629], "16": [1, 36, 49, 57, 64, 87, 109, 144, 145, 214, 237, 261, 304, 307, 351, 363, 417, 457, 491, 501, 506, 507, 510, 542, 571, 572, 598, 612, 634, 655, 738, 743, 755, 806, 841, 864, 887, 913], "64": [1, 29, 35, 38, 51, 57, 59, 237, 405, 542, 600, 634, 806, 913], "25": [1, 59, 65, 144, 145, 159, 210, 214, 237, 309, 321, 335, 340, 344, 512, 542, 571, 572, 577, 583, 610, 612, 634, 707, 738, 743, 749, 806, 913], "125": [1, 59, 237, 806, 913], "arg": [2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 173, 202, 237, 493, 511, 542, 588, 634, 643, 894, 895, 913], "ani": [2, 3, 4, 6, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 61, 80, 81, 82, 83, 84, 85, 86, 92, 93, 94, 95, 96, 100, 103, 104, 106, 108, 112, 114, 115, 119, 122, 129, 133, 135, 136, 138, 155, 156, 157, 171, 172, 173, 182, 183, 198, 199, 201, 202, 208, 237, 249, 264, 268, 294, 336, 354, 368, 385, 387, 396, 413, 415, 427, 430, 468, 477, 491, 509, 516, 528, 542, 560, 566, 588, 634, 642, 643, 659, 663, 708, 739, 758, 775, 786, 793, 815, 817, 829, 832, 875, 885, 893, 894, 895, 913], "kwarg": [2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 172, 173, 202, 237, 542, 588, 634, 894, 895, 913], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 542, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 913, 919], "method": [2, 3, 4, 6, 24, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 81, 92, 93, 95, 112, 129, 143, 151, 156, 169, 176, 182, 183, 206, 214, 229, 237, 246, 352, 363, 408, 409, 416, 417, 418, 419, 420, 422, 423, 424, 484, 524, 535, 536, 538, 542, 543, 546, 547, 548, 551, 560, 575, 590, 607, 612, 628, 634, 643, 756, 767, 810, 811, 822, 896, 905, 907, 909, 913, 916, 917, 918], "A": [4, 25, 43, 62, 65, 92, 93, 100, 102, 103, 104, 138, 144, 159, 174, 183, 198, 208, 209, 210, 214, 237, 243, 286, 314, 317, 320, 323, 325, 327, 330, 337, 352, 366, 369, 370, 372, 385, 386, 394, 406, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 443, 444, 449, 450, 452, 471, 474, 497, 507, 511, 542, 571, 577, 592, 609, 612, 634, 681, 713, 716, 719, 725, 727, 730, 733, 740, 756, 817, 818, 819, 821, 824, 825, 826, 850, 851, 856, 857, 859, 865, 866, 875, 878, 913], "encod": [4, 54, 92, 93, 103, 290, 445, 684, 852], "set": [4, 5, 6, 7, 8, 10, 11, 12, 15, 20, 21, 23, 25, 27, 28, 56, 60, 65, 81, 83, 86, 87, 92, 93, 95, 96, 100, 103, 106, 107, 108, 110, 111, 113, 114, 115, 119, 121, 125, 129, 143, 146, 156, 159, 165, 184, 186, 191, 200, 205, 206, 208, 214, 237, 249, 281, 285, 286, 343, 360, 368, 387, 415, 416, 417, 418, 419, 420, 422, 423, 424, 426, 432, 436, 437, 455, 461, 462, 467, 492, 526, 530, 542, 558, 560, 562, 570, 576, 577, 581, 585, 595, 599, 600, 601, 607, 612, 615, 618, 634, 642, 643, 676, 680, 681, 746, 764, 775, 793, 817, 818, 819, 820, 821, 822, 824, 825, 826, 828, 832, 839, 843, 844, 862, 868, 869, 874, 894, 913], "string": [4, 5, 7, 10, 11, 15, 25, 27, 28, 32, 46, 54, 65, 92, 93, 103, 112, 113, 115, 117, 138, 142, 143, 144, 145, 159, 186, 192, 208, 210, 214, 217, 237, 273, 292, 295, 331, 335, 340, 351, 357, 364, 387, 403, 416, 417, 418, 419, 420, 422, 423, 424, 439, 442, 443, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 493, 495, 498, 511, 518, 521, 530, 542, 562, 569, 570, 571, 572, 577, 595, 602, 612, 615, 616, 634, 668, 686, 690, 734, 738, 743, 755, 768, 848, 849, 850, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 913], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 569, 591, 634], "cfg": [5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 119, 186, 214, 237, 595, 612, 634], "previous": 5, "save": [5, 551], "share": [5, 46, 131, 237, 750, 913], "option": [5, 6, 7, 55, 65, 87, 92, 94, 95, 96, 100, 104, 106, 108, 109, 112, 113, 114, 115, 159, 165, 169, 198, 205, 237, 377, 415, 416, 417, 418, 419, 420, 422, 423, 424, 436, 462, 489, 516, 530, 542, 551, 576, 577, 585, 634, 783, 787, 817, 818, 819, 820, 821, 822, 824, 825, 826, 832, 843, 869, 892, 913], "paramet": [5, 9, 10, 11, 12, 15, 20, 21, 23, 24, 25, 26, 27, 28, 29, 32, 33, 40, 43, 45, 47, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 118, 121, 122, 123, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 156, 157, 158, 159, 161, 163, 165, 166, 168, 169, 171, 172, 173, 174, 176, 178, 179, 180, 182, 183, 184, 186, 188, 189, 191, 192, 193, 194, 195, 198, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 217, 219, 222, 229, 231, 237, 245, 248, 249, 258, 261, 264, 265, 266, 267, 268, 271, 272, 273, 280, 281, 282, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 315, 318, 331, 334, 335, 339, 340, 343, 345, 346, 347, 348, 349, 352, 354, 355, 359, 360, 361, 363, 364, 368, 377, 380, 382, 385, 386, 387, 403, 404, 408, 409, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 476, 477, 482, 483, 486, 487, 488, 489, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 510, 511, 512, 514, 516, 517, 518, 523, 524, 525, 526, 527, 528, 530, 531, 532, 542, 555, 557, 559, 560, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 576, 577, 580, 581, 585, 586, 588, 589, 590, 591, 592, 595, 596, 597, 598, 599, 600, 601, 602, 605, 607, 608, 609, 612, 613, 614, 615, 616, 618, 621, 628, 630, 634, 639, 642, 643, 652, 655, 659, 660, 661, 662, 663, 666, 667, 668, 675, 676, 677, 679, 680, 681, 683, 684, 685, 686, 687, 688, 690, 693, 694, 695, 696, 700, 701, 702, 703, 704, 705, 707, 708, 712, 713, 714, 717, 734, 737, 738, 742, 743, 746, 749, 750, 751, 752, 753, 756, 757, 758, 759, 764, 765, 767, 768, 782, 783, 787, 789, 793, 806, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 839, 843, 844, 845, 847, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 878, 879, 881, 884, 885, 891, 892, 893, 894, 895, 897, 898, 901, 902, 903, 904, 913], "json": [5, 7, 27, 28, 98, 99, 107, 237, 451, 452, 551, 569, 591, 615, 634, 858, 859], "produc": [5, 114, 115, 266, 393, 517, 581, 634, 661], "reset": [6, 119], "default": [6, 23, 24, 25, 26, 27, 28, 29, 60, 80, 82, 83, 84, 85, 86, 87, 90, 92, 93, 100, 103, 112, 113, 114, 115, 118, 129, 131, 143, 145, 146, 156, 159, 165, 171, 174, 182, 183, 184, 200, 206, 208, 215, 237, 281, 285, 286, 295, 345, 346, 347, 348, 360, 382, 387, 400, 401, 404, 409, 426, 432, 449, 455, 457, 461, 462, 467, 468, 492, 512, 516, 526, 528, 530, 542, 560, 562, 570, 572, 577, 585, 600, 607, 615, 634, 676, 680, 681, 690, 749, 750, 751, 752, 753, 764, 793, 802, 803, 806, 811, 828, 839, 847, 856, 862, 864, 868, 869, 874, 902, 913], "state": [6, 62, 73, 501, 551, 557, 562, 564, 589, 598, 634], "note": [6, 15, 55, 65, 80, 81, 82, 84, 86, 90, 92, 94, 100, 102, 104, 113, 114, 115, 118, 119, 121, 122, 134, 144, 145, 156, 158, 159, 169, 172, 173, 182, 183, 199, 201, 205, 209, 210, 214, 237, 249, 268, 285, 306, 307, 311, 312, 331, 335, 340, 364, 370, 372, 416, 417, 418, 419, 420, 422, 423, 424, 436, 453, 455, 456, 461, 467, 468, 475, 501, 510, 525, 542, 557, 564, 565, 571, 572, 573, 577, 580, 592, 598, 609, 612, 634, 663, 680, 702, 703, 734, 743, 831, 832, 838, 843, 860, 862, 863, 868, 874, 883, 913], "oper": [6, 46, 63, 70, 71, 80, 82, 83, 84, 85, 86, 92, 100, 122, 133, 138, 143, 150, 160, 166, 169, 171, 173, 177, 197, 201, 202, 205, 208, 216, 217, 237, 244, 286, 303, 304, 305, 306, 307, 308, 376, 396, 411, 489, 490, 498, 507, 542, 564, 570, 573, 576, 580, 586, 616, 634, 642, 700, 701, 702, 703, 704, 813, 890, 893, 894, 895, 903, 913], "remov": [6, 127, 209, 237, 249, 261, 349, 351, 455, 461, 467, 508, 542, 559, 609, 634, 655, 755, 862, 868, 874, 913], "from": [6, 25, 55, 65, 80, 81, 82, 83, 84, 85, 86, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 115, 126, 127, 131, 133, 142, 144, 145, 156, 157, 159, 160, 165, 178, 182, 184, 186, 205, 206, 208, 210, 237, 303, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 349, 363, 377, 400, 401, 404, 426, 449, 451, 457, 468, 484, 486, 495, 504, 505, 506, 516, 528, 541, 542, 559, 564, 569, 571, 572, 577, 585, 591, 592, 595, 607, 613, 634, 642, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 750, 783, 787, 802, 803, 804, 806, 828, 856, 858, 864, 901, 904, 913], "environ": [6, 23], "local": [6, 94, 104, 807, 808, 913], "non": [6, 55, 85, 157, 165, 186, 209, 214, 237, 404, 415, 416, 417, 418, 419, 420, 422, 423, 424, 444, 450, 495, 498, 530, 542, 585, 595, 609, 612, 634, 681, 806, 817, 818, 819, 820, 821, 822, 824, 825, 826, 851, 857, 894, 913], "env": 6, "back": [6, 55, 133, 202, 237, 403, 542, 642, 895, 913], "valu": [6, 9, 10, 23, 25, 27, 40, 41, 53, 55, 63, 64, 83, 85, 92, 93, 102, 103, 105, 110, 111, 112, 113, 114, 115, 117, 119, 121, 122, 129, 133, 134, 135, 139, 142, 144, 145, 146, 147, 151, 156, 162, 163, 164, 165, 167, 169, 171, 174, 175, 176, 178, 182, 183, 184, 188, 189, 192, 193, 194, 195, 198, 199, 202, 208, 209, 210, 211, 220, 221, 223, 224, 225, 227, 228, 237, 243, 244, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 266, 267, 270, 271, 272, 274, 276, 277, 278, 280, 283, 284, 286, 287, 288, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 304, 307, 308, 309, 311, 312, 314, 316, 328, 332, 341, 346, 347, 348, 350, 352, 353, 354, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 369, 370, 372, 373, 374, 375, 378, 379, 383, 384, 385, 387, 388, 389, 390, 397, 398, 399, 400, 401, 402, 404, 408, 409, 412, 415, 416, 417, 418, 419, 420, 422, 423, 424, 426, 427, 428, 429, 430, 433, 434, 435, 436, 438, 440, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 458, 459, 462, 464, 465, 466, 471, 475, 477, 478, 479, 480, 482, 483, 484, 485, 486, 490, 495, 498, 499, 501, 502, 503, 509, 510, 516, 518, 519, 520, 521, 522, 525, 526, 531, 534, 542, 560, 565, 566, 571, 572, 574, 575, 582, 583, 584, 585, 587, 590, 592, 596, 597, 602, 603, 604, 609, 610, 615, 619, 620, 622, 623, 624, 626, 627, 634, 638, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 657, 658, 661, 662, 665, 666, 667, 669, 671, 672, 673, 675, 679, 682, 684, 685, 686, 687, 690, 691, 694, 695, 696, 698, 699, 704, 705, 706, 707, 709, 710, 713, 715, 731, 735, 744, 750, 751, 752, 753, 756, 757, 758, 761, 763, 764, 767, 768, 770, 772, 773, 775, 776, 777, 778, 779, 780, 784, 793, 794, 795, 797, 798, 800, 802, 803, 804, 805, 806, 809, 810, 811, 817, 818, 819, 820, 821, 822, 824, 825, 826, 828, 829, 830, 831, 832, 835, 836, 840, 841, 842, 843, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 863, 865, 866, 869, 871, 872, 873, 878, 883, 885, 886, 887, 888, 895, 896, 899, 901, 903, 904, 913], "exampl": [6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 80, 82, 83, 84, 85, 86, 87, 89, 90, 93, 94, 95, 102, 103, 104, 105, 109, 110, 111, 112, 113, 114, 115, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 519, 520, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 534, 542, 551, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 662, 663, 664, 667, 668, 670, 675, 676, 677, 679, 681, 688, 690, 691, 692, 693, 694, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 756, 757, 758, 759, 761, 764, 765, 767, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 806, 807, 808, 810, 811, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 835, 839, 840, 841, 842, 844, 845, 847, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 913], "current": [7, 23, 81, 121, 123, 124, 237, 286, 335, 404, 542, 551, 555, 556, 634, 693, 697, 738, 806, 913], "activ": [8, 13, 14, 16, 17, 18, 19, 22, 268, 663], "bool": [8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 29, 40, 55, 60, 62, 63, 80, 81, 85, 92, 93, 96, 100, 103, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 121, 123, 124, 135, 136, 138, 139, 141, 142, 143, 144, 149, 150, 152, 153, 154, 159, 171, 174, 184, 190, 192, 198, 202, 205, 206, 207, 210, 212, 214, 221, 223, 224, 227, 237, 246, 247, 248, 249, 258, 261, 265, 266, 268, 282, 285, 290, 294, 303, 304, 305, 306, 307, 308, 336, 345, 346, 347, 348, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 385, 391, 392, 409, 411, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 428, 430, 431, 436, 438, 439, 443, 445, 447, 458, 459, 463, 464, 466, 468, 473, 482, 483, 486, 490, 491, 492, 493, 501, 516, 526, 528, 530, 534, 542, 555, 557, 562, 564, 566, 567, 570, 571, 576, 577, 581, 589, 598, 599, 600, 602, 607, 608, 612, 620, 622, 623, 626, 634, 640, 641, 642, 643, 652, 655, 660, 661, 663, 677, 680, 684, 688, 693, 700, 701, 702, 703, 704, 739, 749, 751, 752, 753, 759, 763, 768, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 807, 808, 811, 812, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 830, 832, 833, 838, 843, 845, 850, 852, 854, 865, 866, 870, 871, 873, 875, 893, 894, 895, 897, 898, 901, 903, 913], "ascii": [8, 15, 454, 456, 460, 471, 861, 863, 867, 878], "charact": [8, 10, 15, 21, 25, 92, 93, 103, 237, 331, 448, 453, 454, 455, 460, 461, 463, 464, 467, 471, 589, 634, 734, 855, 860, 861, 862, 867, 868, 870, 871, 874, 878], "print": [8, 10, 12, 14, 20, 93, 109, 130, 142, 143, 157, 160, 216, 237, 362, 542, 574, 634, 775, 817, 913], "tabl": [8, 11, 12, 14, 15, 16, 17, 18, 20, 21, 45, 80, 92, 93, 94, 103, 104, 174, 197, 202, 208, 209, 237, 609, 634, 895, 913], "outlin": 8, "fals": [8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 23, 27, 29, 55, 60, 62, 65, 81, 85, 92, 93, 95, 96, 100, 103, 107, 108, 110, 111, 112, 113, 114, 115, 121, 123, 124, 126, 138, 139, 141, 142, 143, 144, 149, 150, 152, 153, 154, 156, 159, 160, 163, 168, 169, 171, 174, 175, 182, 183, 184, 190, 192, 198, 202, 205, 210, 212, 214, 220, 221, 223, 224, 225, 227, 230, 237, 246, 247, 249, 258, 261, 265, 268, 282, 285, 303, 304, 305, 306, 307, 308, 336, 345, 346, 347, 348, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 385, 409, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 428, 431, 436, 438, 439, 443, 447, 451, 458, 459, 463, 464, 466, 468, 482, 483, 486, 490, 492, 493, 501, 516, 526, 528, 530, 534, 542, 555, 556, 557, 562, 564, 570, 571, 576, 577, 579, 581, 589, 598, 599, 600, 602, 612, 619, 620, 622, 623, 624, 626, 629, 634, 642, 652, 655, 663, 677, 680, 688, 692, 693, 700, 701, 702, 703, 704, 739, 749, 751, 752, 753, 759, 768, 769, 770, 772, 775, 776, 777, 778, 779, 780, 782, 783, 784, 787, 799, 807, 808, 811, 812, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 830, 833, 838, 843, 845, 850, 854, 858, 865, 866, 870, 871, 873, 875, 893, 894, 895, 897, 898, 901, 903, 904, 913], "revert": 8, "abc": [8, 13, 14, 16, 17, 18, 19, 20, 458, 865], "xyz": [8, 13, 14, 16, 17, 18, 19, 20, 444, 450, 851, 857, 892, 913], "f64": [8, 11, 13, 14, 16, 17, 18, 19, 20, 55, 57, 59, 64, 83, 105, 114, 123, 124, 126, 127, 129, 130, 134, 135, 138, 141, 142, 143, 150, 158, 159, 163, 164, 172, 175, 176, 191, 192, 193, 211, 214, 217, 221, 223, 224, 225, 226, 227, 229, 230, 237, 243, 250, 251, 252, 253, 254, 255, 277, 294, 296, 300, 301, 308, 311, 312, 336, 345, 346, 347, 348, 349, 350, 358, 363, 370, 372, 373, 374, 376, 377, 382, 383, 388, 389, 390, 397, 400, 401, 404, 405, 408, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 434, 435, 436, 440, 441, 479, 480, 487, 494, 495, 497, 500, 508, 519, 520, 523, 528, 529, 533, 542, 555, 559, 560, 565, 566, 570, 576, 577, 583, 584, 590, 602, 603, 610, 612, 613, 616, 620, 622, 623, 624, 625, 626, 628, 629, 634, 644, 645, 646, 647, 648, 649, 691, 698, 699, 704, 705, 706, 739, 752, 753, 757, 761, 806, 817, 819, 820, 822, 823, 824, 826, 827, 841, 842, 846, 887, 888, 900, 913], "fmt": [9, 237, 338, 362, 468, 511, 542, 574, 634, 741, 875], "mix": [9, 468, 706, 875, 913], "control": [9, 113, 237, 562, 634], "how": [9, 46, 63, 83, 86, 102, 129, 158, 208, 209, 237, 266, 267, 295, 309, 363, 403, 412, 542, 560, 576, 609, 634, 661, 662, 690, 707, 913], "float": [9, 34, 35, 40, 64, 105, 110, 111, 112, 114, 115, 131, 134, 159, 176, 184, 189, 229, 237, 265, 266, 296, 297, 298, 299, 311, 312, 336, 345, 346, 347, 348, 353, 358, 363, 364, 366, 369, 370, 372, 373, 374, 382, 388, 397, 400, 401, 405, 408, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 430, 494, 503, 518, 519, 520, 521, 524, 526, 529, 531, 533, 542, 565, 577, 590, 597, 598, 628, 634, 660, 661, 688, 691, 694, 695, 696, 705, 708, 739, 749, 750, 751, 752, 753, 757, 761, 768, 774, 787, 790, 794, 795, 796, 797, 802, 803, 809, 810, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 831, 832, 843, 847, 883, 902, 913], "point": [9, 34, 35, 104, 114, 115, 134, 144, 160, 237, 296, 311, 312, 336, 353, 358, 370, 372, 425, 426, 542, 565, 571, 581, 592, 634, 691, 739, 757, 761, 774, 827, 828, 913], "displai": [9, 14, 18, 237], "full": [9, 32, 61, 92, 93, 94, 103, 104, 237, 581, 634], "format": [9, 11, 15, 25, 91, 92, 93, 103, 105, 132, 142, 156, 165, 183, 199, 235, 237, 335, 338, 457, 468, 490, 563, 569, 585, 615, 634, 741, 864, 875, 912], "number": [9, 10, 12, 20, 21, 25, 29, 55, 74, 80, 82, 84, 86, 89, 90, 92, 93, 95, 103, 107, 113, 114, 118, 123, 131, 132, 134, 135, 147, 156, 157, 160, 161, 168, 169, 184, 188, 189, 195, 208, 220, 222, 231, 237, 259, 267, 272, 280, 284, 286, 288, 302, 308, 309, 319, 321, 326, 328, 336, 341, 342, 344, 346, 347, 348, 352, 354, 359, 361, 370, 372, 379, 380, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 429, 430, 432, 453, 456, 464, 465, 476, 482, 499, 514, 528, 532, 542, 555, 563, 564, 565, 566, 573, 580, 589, 596, 597, 600, 605, 619, 621, 630, 634, 662, 667, 675, 679, 681, 693, 704, 707, 718, 720, 729, 731, 739, 744, 745, 747, 750, 751, 752, 753, 756, 758, 765, 774, 789, 799, 800, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 835, 836, 839, 847, 860, 863, 871, 872, 884, 897, 902, 913], "int": [10, 12, 20, 21, 25, 29, 40, 57, 83, 86, 89, 90, 91, 92, 93, 94, 95, 96, 100, 102, 103, 104, 106, 107, 108, 112, 113, 114, 115, 116, 118, 122, 123, 131, 134, 135, 137, 146, 147, 148, 150, 156, 157, 159, 161, 162, 163, 167, 168, 169, 180, 182, 184, 187, 188, 189, 191, 193, 194, 195, 196, 203, 208, 211, 213, 215, 222, 231, 237, 265, 266, 267, 271, 272, 280, 281, 284, 285, 286, 288, 297, 298, 299, 308, 309, 346, 347, 348, 352, 353, 354, 359, 360, 361, 364, 380, 404, 405, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 432, 437, 441, 449, 454, 457, 460, 462, 464, 465, 471, 476, 477, 478, 482, 487, 492, 499, 503, 504, 505, 506, 512, 514, 518, 520, 521, 522, 523, 526, 528, 529, 530, 531, 532, 533, 542, 555, 564, 565, 566, 573, 577, 580, 589, 596, 597, 600, 601, 603, 605, 606, 610, 611, 614, 621, 630, 634, 650, 651, 660, 661, 662, 666, 667, 675, 676, 679, 680, 681, 688, 692, 693, 694, 695, 696, 704, 707, 750, 751, 752, 753, 756, 757, 758, 764, 765, 768, 788, 789, 794, 795, 797, 799, 800, 802, 803, 804, 805, 806, 809, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 835, 836, 839, 844, 847, 856, 861, 864, 867, 869, 871, 872, 878, 883, 884, 885, 886, 897, 902, 913], "liter": [11, 15, 60, 65, 95, 115, 142, 156, 162, 163, 167, 168, 171, 182, 183, 186, 194, 198, 214, 237, 246, 247, 314, 352, 364, 376, 410, 443, 458, 459, 492, 495, 498, 504, 505, 516, 526, 530, 534, 542, 566, 595, 612, 634, 640, 641, 713, 756, 768, 831, 832, 850, 865, 866, 913], "left": [11, 65, 110, 111, 144, 145, 158, 159, 209, 237, 346, 347, 348, 363, 364, 416, 417, 418, 419, 420, 422, 423, 424, 427, 454, 471, 481, 495, 501, 502, 510, 525, 542, 571, 572, 576, 577, 609, 634, 751, 752, 753, 768, 829, 861, 878, 896, 913], "center": [11, 346, 347, 348, 415, 416, 417, 418, 419, 420, 422, 423, 424, 542, 751, 752, 753, 817, 818, 819, 820, 821, 822, 824, 825, 826, 913], "right": [11, 13, 65, 92, 93, 110, 111, 144, 145, 158, 159, 237, 346, 347, 348, 364, 416, 417, 418, 419, 420, 422, 423, 424, 427, 436, 460, 495, 542, 571, 572, 576, 577, 634, 751, 752, 753, 768, 829, 843, 867, 913], "cell": 11, "align": [11, 55, 471, 878], "keyerror": [11, 15], "recognis": [11, 15, 112, 237], "column_abc": 11, "column_xyz": 11, "If": [12, 25, 27, 28, 29, 46, 60, 61, 64, 65, 80, 81, 82, 83, 84, 85, 86, 87, 92, 93, 94, 95, 96, 100, 103, 104, 106, 107, 108, 121, 122, 129, 133, 142, 144, 145, 156, 159, 165, 169, 183, 184, 191, 199, 200, 201, 205, 206, 208, 209, 237, 249, 281, 286, 297, 298, 299, 314, 355, 377, 385, 387, 411, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 432, 436, 437, 451, 453, 455, 456, 461, 462, 463, 464, 465, 467, 468, 482, 489, 491, 492, 499, 501, 510, 516, 526, 528, 530, 542, 560, 562, 571, 572, 576, 577, 581, 585, 592, 600, 601, 607, 609, 615, 618, 634, 642, 643, 676, 694, 695, 696, 705, 713, 763, 787, 813, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 828, 829, 833, 839, 843, 844, 858, 860, 862, 863, 868, 869, 870, 871, 872, 874, 875, 890, 894, 897, 903, 913], "rang": [12, 64, 65, 102, 131, 144, 157, 237, 316, 328, 332, 333, 335, 340, 341, 363, 492, 497, 504, 505, 542, 571, 634, 705, 715, 731, 735, 736, 738, 743, 744, 750, 806, 913], "100": [12, 83, 86, 92, 93, 103, 107, 237, 471, 492, 634, 818, 819, 821, 913], "98": [12, 150, 237, 438, 477, 482, 542], "99": [12, 134, 135, 150, 153, 237, 244, 352, 354, 438, 477, 482, 542, 565, 566, 634, 749, 756, 913], "10": [12, 24, 25, 26, 29, 55, 63, 64, 65, 102, 103, 109, 114, 115, 124, 133, 141, 144, 145, 147, 149, 150, 151, 168, 173, 175, 179, 180, 186, 195, 214, 217, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 237, 248, 256, 257, 258, 260, 261, 267, 272, 280, 281, 284, 297, 302, 304, 307, 309, 311, 312, 314, 335, 340, 343, 360, 361, 363, 368, 376, 379, 380, 383, 404, 417, 437, 471, 476, 495, 501, 507, 510, 512, 514, 517, 532, 542, 557, 571, 572, 573, 575, 580, 588, 589, 595, 600, 604, 605, 612, 616, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 634, 643, 662, 667, 675, 676, 679, 694, 705, 707, 713, 743, 746, 749, 765, 775, 789, 791, 806, 831, 832, 884, 913], "95": [12, 244, 542], "96": [12, 244, 542], "97": [12, 150, 237, 244, 542], "move": [13, 346, 347, 348, 416, 417, 419, 423, 542, 751, 752, 753, 818, 819, 821, 825, 913], "inlin": 13, "parenthes": 13, "below": [14, 94, 104, 129, 237, 363, 534, 542, 560, 634], "when": [14, 18, 29, 46, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 87, 92, 93, 96, 100, 103, 104, 106, 107, 114, 115, 117, 122, 130, 131, 133, 135, 138, 144, 173, 182, 186, 192, 200, 206, 237, 297, 298, 299, 346, 347, 348, 354, 385, 387, 394, 438, 439, 455, 461, 467, 468, 493, 501, 510, 542, 566, 571, 581, 595, 600, 602, 607, 634, 642, 694, 695, 696, 750, 751, 752, 753, 758, 793, 831, 832, 862, 868, 874, 891, 913], "ascii_ful": 15, "ascii_full_condens": 15, "ascii_no_bord": 15, "ascii_borders_onli": 15, "ascii_borders_only_condens": 15, "ascii_horizontal_onli": 15, "ascii_markdown": 15, "utf8_ful": [15, 55], "utf8_full_condens": 15, "utf8_no_bord": 15, "utf8_borders_onli": 15, "utf8_horizontal_onli": 15, "noth": [15, 444, 449, 450, 452, 851, 856, 857, 859], "none": [15, 23, 24, 25, 26, 27, 28, 29, 32, 40, 41, 45, 55, 64, 65, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 122, 123, 126, 129, 134, 135, 142, 144, 145, 146, 151, 158, 159, 160, 163, 165, 169, 170, 182, 184, 186, 189, 191, 192, 198, 200, 202, 205, 206, 207, 208, 209, 210, 214, 217, 237, 245, 248, 249, 260, 271, 281, 286, 288, 297, 298, 299, 302, 304, 307, 311, 312, 334, 335, 340, 346, 347, 348, 349, 352, 353, 354, 359, 360, 363, 364, 370, 371, 372, 373, 374, 379, 385, 387, 402, 404, 410, 415, 416, 417, 418, 419, 420, 422, 423, 424, 426, 430, 431, 432, 433, 437, 438, 442, 443, 446, 447, 451, 452, 453, 454, 455, 456, 460, 461, 462, 464, 465, 466, 467, 468, 471, 472, 473, 481, 489, 491, 492, 495, 498, 499, 505, 506, 508, 509, 516, 517, 526, 527, 529, 530, 533, 542, 555, 556, 560, 565, 566, 571, 572, 575, 576, 577, 579, 581, 585, 595, 597, 598, 599, 600, 601, 602, 607, 608, 609, 612, 613, 615, 616, 618, 634, 643, 650, 651, 666, 676, 681, 693, 694, 705, 706, 708, 721, 722, 723, 728, 737, 738, 743, 748, 749, 751, 752, 753, 756, 757, 758, 760, 763, 764, 766, 767, 768, 779, 780, 783, 787, 793, 794, 795, 796, 797, 801, 810, 817, 818, 819, 820, 821, 822, 824, 825, 826, 828, 834, 836, 839, 840, 843, 844, 847, 849, 850, 853, 854, 858, 859, 860, 861, 862, 863, 867, 868, 869, 871, 872, 873, 874, 875, 889, 892, 895, 896, 902, 903, 913], "rounded_corn": 15, "style": [15, 174, 237], "border": 15, "line": [15, 92, 93, 95, 103, 142, 152, 154, 237], "includ": [15, 23, 25, 61, 94, 104, 114, 131, 144, 205, 208, 237, 336, 364, 463, 464, 501, 542, 571, 634, 739, 750, 768, 870, 871, 903, 913], "row": [15, 20, 25, 27, 29, 55, 56, 58, 72, 74, 79, 83, 84, 86, 92, 93, 95, 96, 100, 103, 106, 107, 108, 110, 113, 114, 122, 123, 129, 133, 136, 138, 142, 144, 146, 147, 152, 154, 156, 157, 159, 160, 161, 165, 169, 184, 191, 195, 196, 199, 206, 208, 209, 215, 219, 222, 231, 237, 249, 259, 269, 351, 361, 380, 404, 413, 437, 448, 476, 493, 501, 502, 510, 514, 518, 521, 525, 532, 542, 555, 557, 560, 564, 567, 568, 571, 573, 577, 578, 580, 581, 585, 600, 601, 605, 606, 607, 609, 614, 618, 621, 630, 634, 642, 664, 755, 765, 789, 806, 815, 844, 855, 884, 913], "divid": [15, 335, 340, 346, 347, 348, 377, 542, 738, 743, 751, 752, 753, 787, 913], "same": [15, 46, 55, 62, 96, 113, 122, 127, 143, 192, 206, 214, 217, 219, 237, 243, 248, 351, 403, 415, 416, 417, 418, 419, 420, 422, 423, 424, 439, 473, 496, 542, 559, 570, 581, 602, 607, 612, 616, 618, 634, 638, 642, 643, 713, 755, 817, 818, 819, 820, 821, 822, 824, 825, 826, 904, 913], "dens": [15, 142, 237, 409, 542, 811, 913], "space": 15, "horizont": [15, 63, 138, 149, 208, 237, 498, 501, 502, 503, 507, 510, 518, 521, 525, 531], "markdown": 15, "compat": [15, 29, 102, 104, 237, 600, 634], "No": 15, "appli": [15, 25, 63, 103, 112, 114, 115, 138, 173, 237, 316, 319, 321, 322, 324, 326, 328, 329, 332, 333, 336, 341, 342, 344, 347, 348, 385, 415, 416, 417, 419, 423, 468, 489, 492, 501, 502, 510, 517, 525, 542, 573, 580, 581, 588, 634, 715, 718, 720, 724, 726, 729, 731, 732, 735, 736, 739, 744, 745, 747, 752, 753, 817, 818, 819, 821, 825, 875, 913], "round": [15, 57, 237, 296, 358, 479, 542, 691, 761, 913], "corner": 15, "op": [15, 115, 237, 412, 542, 634, 913], "The": [15, 29, 40, 47, 55, 61, 80, 82, 83, 84, 86, 89, 92, 100, 102, 103, 104, 122, 128, 130, 142, 143, 144, 145, 146, 151, 156, 159, 166, 171, 182, 183, 186, 207, 210, 214, 217, 219, 237, 285, 286, 288, 289, 290, 291, 316, 328, 331, 332, 335, 340, 341, 349, 352, 359, 360, 385, 403, 409, 412, 415, 416, 417, 418, 419, 420, 422, 423, 424, 433, 436, 442, 445, 446, 451, 453, 454, 455, 460, 461, 467, 471, 496, 508, 512, 527, 530, 535, 536, 538, 542, 543, 546, 547, 548, 571, 572, 573, 575, 577, 580, 581, 586, 589, 595, 600, 608, 612, 616, 618, 634, 680, 683, 684, 685, 693, 715, 731, 734, 735, 738, 743, 744, 756, 764, 767, 811, 817, 818, 819, 820, 821, 822, 824, 825, 826, 840, 843, 849, 852, 853, 858, 860, 861, 862, 867, 868, 874, 878, 905, 907, 909, 913, 916, 917, 918], "one": [15, 55, 72, 80, 82, 83, 84, 85, 86, 115, 135, 136, 142, 143, 144, 145, 156, 165, 174, 182, 183, 204, 218, 237, 244, 354, 376, 415, 438, 477, 489, 518, 521, 531, 542, 566, 567, 570, 571, 572, 585, 613, 617, 634, 642, 758, 783, 817, 879, 913], "more": [15, 27, 29, 55, 79, 80, 81, 82, 83, 84, 85, 86, 94, 100, 104, 114, 115, 122, 156, 160, 165, 169, 172, 182, 183, 184, 206, 219, 237, 249, 297, 298, 299, 376, 377, 385, 426, 436, 483, 518, 521, 531, 542, 585, 600, 607, 618, 634, 643, 694, 695, 696, 783, 787, 828, 843, 898, 913, 920], "semigraph": 15, "box": [15, 122, 237], "draw": [15, 20, 21], "found": [15, 25, 67, 76, 78, 83, 130, 209, 237, 427, 452, 468, 542, 609, 634, 829, 859, 913], "unicod": 15, "block": [15, 592, 614, 634, 831, 832, 913], "http": [15, 81, 102, 121, 237, 449, 856, 920], "en": 15, "wikipedia": 15, "org": [15, 81, 121], "wiki": 15, "drawing_charact": 15, "box_draw": 15, "hide": [16, 17, 18, 19, 237], "etc": [16, 80, 92, 94, 96, 100, 104, 106, 108, 237, 492, 831, 832, 913], "inform": [18, 61, 94, 104, 172, 237, 297, 298, 299, 377, 436, 542, 589, 634, 694, 695, 696, 787, 843, 913], "separ": [19, 25, 87, 171, 174, 200, 205, 237, 249, 269, 273, 448, 498, 501, 502, 542, 664, 668, 855, 882, 891, 913], "between": [19, 63, 112, 113, 114, 115, 176, 229, 237, 273, 294, 310, 364, 404, 408, 420, 442, 500, 523, 524, 528, 542, 590, 628, 634, 668, 688, 708, 768, 806, 810, 822, 849, 913], "set_tbl_column_data_type_inlin": 19, "max": [20, 29, 114, 115, 126, 135, 143, 144, 145, 174, 237, 297, 298, 304, 354, 403, 409, 416, 428, 465, 542, 566, 570, 571, 572, 600, 634, 681, 694, 695, 700, 706, 758, 811, 818, 833, 872, 913], "both": [20, 25, 46, 65, 144, 145, 158, 159, 166, 182, 237, 248, 364, 416, 417, 418, 419, 420, 422, 423, 424, 542, 571, 572, 576, 577, 586, 634, 768, 913], "element": [20, 90, 115, 118, 249, 250, 251, 252, 253, 254, 255, 266, 268, 269, 300, 301, 303, 304, 305, 306, 307, 308, 350, 360, 368, 383, 404, 409, 412, 427, 433, 434, 435, 440, 464, 465, 479, 480, 482, 542, 643, 644, 645, 646, 647, 648, 649, 661, 663, 664, 693, 698, 699, 700, 701, 702, 703, 704, 754, 759, 775, 791, 806, 811, 829, 840, 841, 842, 846, 847, 871, 872, 887, 888, 897, 898, 902, 913], "width": [21, 92, 93, 237, 454, 460, 471, 634, 861, 867, 878], "char": [21, 46, 456, 863], "enabl": [22, 186, 214, 237, 428, 542, 595, 612, 634, 833, 913], "addit": [22, 83, 94, 104, 112, 113, 127, 132, 143, 171, 186, 192, 214, 217, 237, 349, 352, 403, 439, 495, 496, 508, 527, 530, 542, 559, 563, 570, 595, 602, 612, 616, 634, 756, 913], "verbos": 22, "debug": [22, 557, 564, 581, 634], "log": [22, 57, 345, 482, 542, 749, 897, 913], "if_set": 23, "dict": [23, 29, 56, 58, 61, 80, 82, 83, 84, 85, 86, 92, 93, 94, 95, 96, 97, 100, 101, 103, 104, 106, 108, 114, 156, 171, 178, 182, 183, 185, 198, 199, 237, 387, 542, 592, 594, 634, 793, 913], "show": [23, 129, 142, 160, 170, 237, 560, 589, 598, 634], "variabl": [23, 87, 165, 200, 237, 585, 634, 891, 913], "chang": [23, 55, 64, 92, 93, 105, 208, 209, 210, 237, 249, 308, 309, 335, 387, 404, 416, 417, 418, 419, 420, 422, 423, 424, 542, 609, 634, 704, 705, 737, 738, 806, 838, 913], "restrict": [23, 465, 872], "dictionari": [23, 80, 82, 83, 84, 86, 92, 93, 97, 101, 103, 156, 171, 182, 183, 198, 199, 237, 387, 542, 634, 706, 793, 913], "those": [23, 92, 237, 409, 542, 811, 913], "_have_": 23, "been": [23, 64, 87, 237, 409, 542, 811, 913], "set_stat": 23, "all_stat": 23, "file": [24, 25, 26, 27, 28, 29, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 133, 237, 564, 591, 599, 600, 615, 634, 642, 913], "binaryio": [24, 26, 91, 92, 95, 96, 97, 100, 101, 237], "bytesio": [24, 25, 26, 29, 91, 92, 93, 95, 96, 100, 237], "path": [24, 25, 26, 27, 28, 29, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 108, 237, 428, 452, 542, 591, 599, 600, 615, 634, 833, 859, 913], "compress": [24, 26, 29, 237, 599, 600, 634], "avrocompress": [24, 237], "uncompress": [24, 26, 29, 96, 106, 237, 600, 634], "write": [24, 25, 26, 27, 29, 93, 96, 237, 297, 298, 299, 542, 579, 598, 600, 615, 634, 694, 695, 696, 913], "apach": [24, 29, 91, 237], "avro": [24, 91, 237, 551], "should": [24, 25, 26, 27, 28, 29, 80, 82, 84, 86, 87, 90, 94, 112, 113, 115, 118, 121, 122, 127, 144, 156, 159, 182, 183, 199, 200, 219, 237, 244, 249, 268, 295, 308, 343, 349, 370, 372, 415, 416, 417, 418, 419, 420, 422, 423, 424, 427, 436, 496, 508, 516, 542, 559, 571, 576, 577, 581, 598, 599, 600, 615, 618, 634, 643, 663, 690, 704, 746, 817, 818, 819, 820, 821, 822, 824, 825, 826, 829, 843, 913], "written": [24, 25, 26, 27, 28, 29, 237, 599, 600, 615, 634], "snappi": [24, 29, 237, 600, 634], "deflat": [24, 237], "import": [24, 25, 26, 29, 32, 55, 65, 80, 84, 85, 103, 104, 105, 110, 111, 112, 113, 114, 115, 126, 142, 144, 157, 159, 186, 202, 208, 210, 237, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 506, 516, 571, 577, 581, 595, 634, 698, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 772, 776, 777, 778, 783, 817, 841, 887, 913], "pathlib": [24, 25, 26, 29, 103, 106, 107, 237, 599, 600, 634], "foo": [24, 25, 26, 27, 28, 29, 87, 122, 125, 127, 128, 129, 130, 133, 136, 137, 138, 139, 140, 141, 146, 147, 148, 149, 150, 151, 153, 158, 161, 162, 163, 164, 167, 170, 172, 174, 176, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 191, 193, 194, 195, 197, 199, 200, 201, 202, 203, 205, 206, 207, 211, 212, 213, 216, 237, 245, 265, 270, 271, 274, 275, 297, 298, 299, 331, 361, 362, 405, 413, 429, 430, 442, 444, 446, 448, 450, 455, 461, 463, 465, 467, 469, 470, 476, 478, 489, 492, 494, 496, 499, 500, 509, 513, 514, 516, 518, 519, 520, 521, 522, 523, 524, 527, 528, 529, 532, 533, 534, 542, 558, 559, 560, 561, 567, 574, 575, 576, 592, 594, 595, 607, 608, 611, 613, 615, 634, 668, 694, 734, 815, 851, 853, 855, 857, 872, 913], "bar": [24, 25, 26, 27, 28, 29, 87, 122, 125, 127, 128, 129, 130, 133, 136, 137, 138, 139, 140, 141, 147, 149, 150, 151, 153, 158, 161, 162, 163, 164, 167, 170, 172, 174, 176, 178, 179, 180, 182, 184, 185, 186, 188, 189, 191, 193, 194, 195, 197, 199, 200, 201, 202, 203, 206, 207, 211, 212, 216, 237, 245, 275, 362, 436, 446, 448, 463, 465, 489, 494, 496, 499, 500, 509, 514, 518, 519, 520, 521, 522, 523, 527, 528, 529, 532, 533, 534, 542, 558, 559, 560, 561, 567, 574, 575, 576, 592, 594, 595, 607, 608, 611, 615, 634, 668, 843, 853, 855, 872, 913], "ham": [24, 25, 26, 29, 87, 125, 127, 128, 129, 130, 136, 137, 139, 146, 147, 149, 158, 162, 163, 164, 167, 170, 172, 176, 178, 180, 182, 184, 185, 186, 188, 189, 191, 193, 194, 195, 200, 201, 202, 203, 206, 211, 212, 237, 496, 558, 559, 560, 561, 567, 576, 592, 594, 595, 607, 613, 634], "d": [24, 25, 26, 29, 46, 63, 83, 105, 126, 142, 146, 147, 150, 158, 161, 195, 197, 208, 212, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 237, 318, 338, 364, 431, 444, 450, 464, 468, 495, 512, 542, 576, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 634, 717, 741, 768, 851, 857, 871, 875, 913], "e": [24, 25, 26, 29, 46, 81, 92, 93, 95, 96, 100, 106, 108, 126, 142, 147, 161, 195, 197, 208, 237, 249, 345, 349, 364, 382, 387, 431, 436, 508, 542, 579, 592, 634, 749, 768, 830, 843, 894, 913], "dirpath": [24, 25, 26, 29, 103, 237], "new_fil": [24, 25, 26, 29, 237], "has_head": [25, 92, 93, 95, 103, 237], "sep": [25, 89, 92, 93, 103, 237], "quot": [25, 92, 93, 103, 237], "batch_siz": [25, 92, 93, 107, 237], "1024": [25, 29, 92, 93, 107, 237, 600, 634], "datetime_format": [25, 237], "date_format": [25, 237, 338], "time_format": [25, 237], "float_precis": [25, 237], "null_valu": [25, 92, 93, 103, 237], "comma": [25, 237], "csv": [25, 92, 93, 95, 103, 237, 551, 599, 600, 634], "result": [25, 27, 28, 55, 80, 84, 86, 94, 102, 103, 105, 106, 108, 115, 133, 144, 155, 169, 189, 202, 217, 237, 346, 347, 348, 352, 377, 403, 413, 415, 416, 417, 418, 419, 420, 422, 423, 424, 428, 430, 463, 464, 492, 501, 502, 503, 517, 531, 542, 554, 571, 581, 589, 597, 599, 600, 615, 616, 634, 642, 751, 752, 753, 787, 815, 817, 818, 819, 820, 821, 822, 824, 825, 826, 833, 836, 870, 871, 894, 913], "instead": [25, 27, 28, 60, 90, 92, 100, 114, 118, 122, 144, 156, 169, 171, 182, 183, 186, 202, 214, 237, 258, 261, 453, 455, 461, 467, 492, 526, 530, 542, 565, 571, 595, 612, 615, 634, 652, 655, 831, 832, 860, 862, 868, 874, 895, 913], "whether": [25, 65, 84, 86, 115, 237, 391, 392, 428, 542, 581, 634], "header": [25, 29, 92, 93, 95, 103, 130, 174, 205, 237, 600, 634], "field": [25, 47, 76, 78, 83, 207, 237, 286, 387, 451, 464, 465, 473, 501, 502, 517, 530, 542, 608, 634, 681, 871, 872, 881, 882], "symbol": [25, 237], "byte": [25, 40, 92, 93, 95, 96, 97, 100, 101, 103, 131, 237, 289, 292, 293, 453, 456, 600, 634, 683, 686, 687, 750, 860, 863, 913], "process": [25, 237, 599, 600, 634], "per": [25, 113, 114, 142, 169, 170, 192, 226, 228, 229, 237, 249, 268, 271, 285, 439, 493, 542, 602, 625, 627, 628, 634, 663, 666, 680], "thread": [25, 89, 92, 93, 102, 116, 237, 249, 268, 542, 663], "specifi": [25, 55, 65, 67, 76, 78, 80, 114, 127, 131, 132, 135, 143, 171, 182, 186, 192, 214, 217, 237, 346, 347, 348, 349, 354, 387, 403, 412, 439, 454, 460, 493, 495, 496, 508, 527, 530, 542, 559, 563, 566, 570, 595, 602, 612, 616, 634, 750, 751, 752, 753, 758, 861, 867, 913], "defin": [25, 32, 65, 112, 113, 114, 122, 144, 145, 169, 173, 219, 237, 249, 285, 364, 416, 417, 418, 419, 420, 422, 423, 424, 491, 516, 530, 542, 571, 572, 588, 618, 634, 643, 680, 768, 913], "chrono": [25, 237, 338, 468, 741, 875], "rust": [25, 29, 73, 96, 100, 122, 219, 237, 618], "crate": [25, 237], "fraction": [25, 110, 111, 184, 237, 336, 404, 426, 468, 542, 739, 806, 828, 913], "second": [25, 65, 144, 145, 159, 210, 237, 331, 335, 340, 416, 417, 418, 419, 420, 422, 423, 424, 468, 505, 506, 542, 571, 572, 577, 634, 734, 738, 743], "precis": [25, 156, 183, 199, 237, 313, 468, 712], "infer": [25, 80, 82, 83, 84, 85, 86, 92, 93, 95, 103, 107, 112, 122, 237, 413, 451, 468, 542, 634, 815, 858, 913], "maximum": [25, 92, 93, 103, 113, 114, 115, 162, 237, 262, 297, 298, 388, 400, 409, 518, 542, 582, 634, 657, 694, 695, 721, 794, 802, 807, 811, 913], "timeunit": [25, 32, 33, 65, 237, 313, 314, 339, 343, 712, 713, 742, 746], "frame": [25, 55, 83, 110, 114, 122, 123, 156, 157, 166, 169, 173, 182, 183, 202, 208, 237, 555, 586, 588, 634, 693, 913], "datetim": [25, 40, 55, 65, 126, 142, 144, 145, 157, 159, 210, 237, 265, 266, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 364, 416, 417, 418, 419, 420, 422, 423, 424, 468, 481, 506, 512, 516, 521, 542, 571, 572, 577, 634, 660, 661, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 768, 783, 794, 797, 802, 803, 832, 875, 896, 913], "decim": [25, 40, 237, 425, 542, 827, 913], "place": [25, 128, 149, 150, 179, 188, 189, 192, 212, 237, 258, 261, 273, 280, 429, 430, 438, 542, 596, 597, 602, 634, 652, 655, 668, 675, 812, 814, 835, 836, 845, 913], "float64": [25, 83, 90, 92, 114, 118, 130, 131, 138, 185, 202, 214, 237, 250, 251, 252, 253, 254, 255, 294, 300, 301, 336, 349, 370, 372, 434, 435, 479, 480, 496, 508, 542, 561, 594, 612, 634, 739, 895, 900, 913], "datatyp": [25, 27, 40, 47, 53, 80, 82, 83, 84, 86, 88, 90, 95, 97, 101, 115, 118, 130, 132, 138, 185, 186, 237, 269, 294, 349, 431, 448, 468, 481, 496, 508, 542, 551, 563, 594, 595, 615, 634, 643, 664, 688, 706, 781, 783, 785, 837, 855, 875, 896, 913], "repres": [25, 41, 53, 65, 80, 82, 84, 85, 86, 237, 370, 372, 496, 508, 516, 542, 832, 847, 902, 913], "null": [25, 55, 63, 83, 92, 93, 103, 105, 121, 123, 126, 129, 135, 138, 139, 151, 158, 163, 164, 170, 176, 188, 189, 192, 193, 194, 198, 202, 207, 209, 211, 214, 237, 245, 248, 249, 258, 261, 267, 270, 271, 274, 280, 285, 286, 288, 290, 297, 298, 299, 302, 304, 307, 309, 311, 312, 317, 320, 323, 325, 327, 330, 337, 346, 347, 348, 349, 352, 353, 354, 355, 359, 363, 370, 371, 372, 373, 374, 379, 387, 402, 404, 410, 415, 416, 417, 418, 419, 420, 422, 423, 424, 429, 430, 431, 433, 438, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 456, 460, 462, 464, 465, 466, 471, 472, 473, 481, 488, 489, 495, 497, 498, 508, 516, 530, 542, 555, 560, 566, 575, 576, 596, 597, 602, 608, 609, 612, 613, 615, 634, 643, 652, 655, 662, 675, 680, 681, 684, 693, 694, 707, 710, 716, 719, 725, 727, 730, 733, 740, 751, 752, 753, 756, 758, 763, 779, 780, 805, 806, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 830, 835, 836, 840, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 863, 867, 869, 871, 872, 873, 894, 895, 896, 903, 913], "empti": [25, 71, 83, 92, 93, 95, 103, 123, 124, 153, 165, 237, 527, 555, 556, 585, 634, 693, 697, 771, 913], "ipccompress": [26, 237], "arrow": [26, 66, 80, 96, 106, 197, 237, 599, 634, 890, 894, 913], "ipc": [26, 96, 97, 105, 106, 237, 551], "binari": [26, 237, 289, 291, 292, 293, 490, 683, 685, 686, 687], "stream": [26, 62, 237, 557, 562, 564, 581, 589, 598, 599, 600, 634], "feather": [26, 96, 106, 237, 551], "lz4": [26, 29, 237, 599, 600, 634], "zstd": [26, 29, 237, 599, 600, 634], "pretti": [27, 237], "row_ori": [27, 237], "iobas": [27, 28, 98, 99, 237, 591, 615, 634], "serial": [27, 28, 237], "represent": [27, 28, 237, 295, 316, 319, 321, 322, 324, 326, 328, 329, 332, 333, 336, 341, 342, 344, 481, 542, 562, 579, 634, 690, 715, 718, 720, 724, 726, 729, 731, 732, 735, 736, 739, 744, 745, 747, 896, 913], "orient": [27, 56, 58, 84, 86, 237, 634], "slower": [27, 84, 86, 122, 143, 171, 210, 219, 237, 570, 618, 634], "common": [27, 237], "write_ndjson": [27, 237], "newlin": [28, 99, 107, 237], "delimit": [28, 87, 92, 93, 99, 103, 107, 174, 200, 237, 442, 849, 891, 913], "parquetcompress": [29, 237], "compression_level": [29, 237, 600, 634], "statist": [29, 92, 93, 100, 108, 126, 237, 347, 348, 377, 416, 417, 418, 419, 420, 421, 422, 423, 424, 436, 542, 600, 634, 706, 752, 753, 787, 823, 843, 913], "row_group_s": [29, 237, 600, 634], "use_pyarrow": [29, 92, 96, 100, 237, 600, 634, 893, 894, 913], "pyarrow_opt": [29, 94, 100, 104, 237], "object": [29, 65, 81, 82, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 113, 114, 115, 121, 143, 160, 202, 237, 516, 551, 556, 574, 579, 591, 634, 656, 689, 711, 848, 890, 913], "parquet": [29, 100, 101, 108, 237, 551, 600, 634], "gzip": [29, 237, 600, 634], "lzo": [29, 237, 600, 634], "brotli": [29, 237, 600, 634], "choos": [29, 237, 599, 600, 634], "good": [29, 156, 237, 599, 600, 634], "perform": [29, 71, 81, 92, 93, 96, 100, 103, 106, 107, 108, 121, 122, 144, 145, 159, 177, 219, 237, 249, 403, 542, 571, 572, 577, 599, 600, 614, 618, 634], "fast": [29, 237, 352, 428, 542, 599, 600, 634, 756, 833, 913], "decompress": [29, 237, 599, 600, 634], "backward": [29, 135, 159, 237, 288, 354, 542, 566, 577, 600, 634, 758, 913], "guarante": [29, 81, 92, 93, 237, 564, 600, 634], "deal": [29, 237, 409, 468, 542, 600, 634, 811, 875, 913], "older": [29, 237, 600, 634], "reader": [29, 89, 92, 93, 96, 100, 237, 552, 600, 634], "level": [29, 103, 106, 107, 108, 114, 122, 138, 169, 237, 355, 542, 573, 580, 600, 634], "higher": [29, 176, 229, 237, 408, 420, 524, 542, 590, 600, 628, 634, 810, 822, 913], "mean": [29, 92, 93, 96, 100, 103, 126, 135, 143, 174, 217, 237, 351, 354, 417, 436, 449, 494, 542, 566, 570, 581, 600, 616, 634, 706, 755, 758, 763, 819, 843, 856, 913], "smaller": [29, 131, 237, 564, 600, 634, 750, 913], "disk": [29, 96, 237, 598, 599, 600, 634], "min": [29, 114, 115, 126, 135, 144, 145, 174, 237, 297, 299, 305, 354, 403, 409, 419, 527, 542, 566, 571, 572, 600, 634, 694, 696, 701, 706, 758, 811, 821, 913], "11": [29, 145, 237, 311, 312, 321, 331, 335, 340, 363, 404, 423, 437, 471, 496, 531, 542, 557, 572, 573, 580, 589, 600, 605, 634, 643, 734, 738, 743, 817, 913], "22": [29, 237, 335, 340, 343, 468, 496, 600, 634, 738, 743, 746, 875], "extra": [29, 92, 94, 95, 96, 100, 104, 106, 108, 133, 237, 600, 634, 642, 913], "comput": [29, 62, 63, 68, 131, 143, 159, 202, 206, 217, 229, 237, 243, 250, 251, 252, 253, 254, 255, 276, 277, 278, 300, 301, 303, 304, 305, 306, 307, 310, 345, 350, 377, 382, 383, 398, 403, 404, 407, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 433, 434, 435, 436, 440, 479, 480, 493, 500, 507, 523, 528, 542, 570, 574, 576, 577, 600, 607, 613, 616, 628, 634, 638, 644, 645, 646, 647, 648, 649, 671, 672, 673, 698, 699, 700, 701, 702, 703, 708, 749, 750, 754, 787, 790, 791, 798, 806, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 840, 841, 842, 843, 846, 887, 888, 895, 913], "size": [29, 92, 93, 113, 114, 115, 116, 131, 144, 208, 237, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 492, 542, 571, 600, 634, 750, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 913], "group": [29, 93, 143, 144, 145, 157, 169, 171, 174, 208, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 244, 249, 268, 357, 403, 438, 439, 449, 477, 491, 542, 570, 571, 572, 600, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634, 663, 856], "chunk": [29, 89, 92, 93, 100, 103, 106, 107, 108, 114, 115, 133, 157, 168, 237, 248, 410, 542, 600, 634, 642, 692, 762, 799, 812, 890, 913], "reduc": [29, 92, 93, 100, 103, 106, 107, 108, 224, 225, 227, 230, 237, 431, 510, 542, 600, 623, 624, 626, 629, 634, 795, 809, 837, 883, 913], "memori": [29, 63, 80, 81, 84, 85, 86, 92, 93, 96, 100, 103, 106, 107, 108, 121, 122, 133, 190, 219, 237, 410, 431, 542, 600, 618, 634, 642, 812, 837, 838, 913], "pressur": [29, 100, 107, 108, 237, 431, 542, 600, 634, 837, 913], "improv": [29, 96, 106, 237, 600, 634], "speed": [29, 237, 249, 542, 600, 634], "minimum": [29, 113, 114, 115, 138, 167, 237, 297, 299, 346, 347, 348, 397, 401, 409, 521, 542, 587, 600, 634, 694, 696, 728, 751, 752, 753, 803, 808, 811, 913], "implement": [29, 81, 104, 121, 122, 219, 237, 249, 542, 618, 831, 832, 913], "v": [29, 64, 131, 237, 427, 542, 705, 829, 913], "At": [29, 237], "moment": [29, 172, 237, 377, 436, 542, 787, 843, 913], "argument": [29, 92, 94, 100, 104, 127, 132, 143, 144, 145, 163, 171, 172, 173, 174, 186, 192, 194, 202, 210, 214, 217, 237, 335, 340, 349, 364, 403, 416, 417, 418, 419, 420, 422, 423, 424, 439, 455, 461, 467, 495, 496, 508, 527, 530, 542, 559, 563, 570, 571, 572, 588, 595, 602, 612, 616, 634, 738, 743, 768, 862, 868, 874, 895, 913], "pass": [29, 55, 65, 82, 95, 104, 113, 114, 115, 127, 143, 171, 172, 173, 186, 192, 214, 217, 237, 249, 318, 334, 352, 362, 403, 439, 455, 461, 467, 493, 496, 512, 530, 542, 559, 570, 574, 581, 588, 595, 598, 602, 612, 616, 634, 643, 717, 737, 756, 862, 868, 874, 913], "pyarrow": [29, 80, 85, 92, 94, 96, 100, 104, 105, 109, 157, 197, 201, 202, 237, 552, 890, 893, 894, 895, 913], "write_t": [29, 237], "base": [30, 129, 136, 144, 145, 237, 345, 346, 347, 348, 382, 383, 457, 518, 521, 542, 551, 560, 567, 571, 572, 634, 749, 751, 752, 753, 790, 791, 864, 904, 913], "calendar": [31, 32, 144, 145, 159, 210, 237, 321, 331, 335, 340, 344, 416, 417, 418, 419, 420, 422, 423, 424, 542, 571, 572, 577, 634, 720, 734, 738, 743, 747], "date": [32, 40, 55, 65, 92, 93, 102, 103, 105, 126, 142, 144, 145, 157, 159, 237, 265, 266, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 364, 416, 417, 418, 419, 420, 422, 423, 424, 468, 481, 512, 521, 542, 551, 571, 572, 577, 634, 660, 661, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 768, 783, 794, 797, 802, 803, 832, 875, 896, 913], "time": [32, 33, 40, 61, 62, 65, 103, 133, 144, 145, 159, 210, 237, 264, 265, 266, 286, 313, 314, 315, 318, 331, 334, 339, 343, 364, 468, 481, 482, 497, 498, 504, 505, 506, 512, 526, 542, 551, 557, 571, 572, 577, 589, 634, 642, 659, 661, 712, 713, 714, 717, 734, 737, 742, 746, 768, 875, 896, 897, 913], "time_unit": [32, 33, 65, 343, 746], "u": [32, 33, 65, 156, 183, 199, 237, 313, 314, 318, 339, 343, 468, 512, 526, 712, 713, 717, 742, 746], "time_zon": [32, 65, 315, 334, 714, 737], "m": [32, 33, 65, 313, 314, 318, 338, 339, 343, 468, 506, 512, 712, 713, 717, 741, 742, 746, 875], "unit": [32, 33, 65, 114, 115, 131, 237, 313, 314, 318, 339, 343, 384, 394, 485, 512, 542, 589, 634, 712, 713, 717, 742, 746, 750, 792, 900, 913], "timezon": [32, 65, 468, 875], "zoneinfo": 32, "run": [32, 62, 122, 160, 219, 237, 249, 268, 308, 527, 542, 557, 562, 564, 581, 589, 598, 599, 600, 618, 634, 663, 704, 913, 919], "available_timezon": 32, "attribut": [32, 33, 40, 112, 237, 535, 536, 538, 543, 546, 547, 548, 634, 905, 907, 909, 916, 917, 918], "delta": [33, 94, 104, 523, 528, 551, 847, 902, 913], "32": [34, 37, 50, 57, 109, 145, 155, 237, 431, 542, 572, 634, 708, 735, 806, 822, 913], "bit": [34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 411, 443, 542, 813, 850, 913], "sign": [36, 37, 38, 39, 331, 411, 471, 542, 734, 813, 878, 913], "integ": [36, 37, 38, 39, 49, 50, 51, 52, 113, 114, 144, 145, 237, 296, 336, 358, 411, 416, 417, 418, 419, 420, 421, 422, 423, 424, 457, 492, 512, 516, 542, 571, 572, 634, 650, 651, 691, 739, 761, 813, 823, 832, 864, 913], "inner": [40, 46, 158, 209, 237, 273, 310, 542, 576, 609, 615, 634, 668, 708, 913], "union": [40, 47, 55, 62, 63, 87, 88, 169, 171, 237, 489, 490, 497, 502, 503, 512, 518, 521, 525, 531, 557, 562, 564, 589, 598, 634, 708, 775, 832, 913], "datatypeclass": [40, 47, 88], "timedelta": [40, 65, 144, 145, 210, 237, 316, 318, 319, 321, 326, 328, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 344, 416, 417, 418, 419, 420, 422, 423, 424, 542, 571, 572, 634, 721, 723, 728, 734, 738, 743, 794, 797, 802, 803, 913], "tupl": [40, 102, 122, 156, 182, 183, 187, 216, 237, 413, 542, 589, 598, 634, 815, 913], "nest": [40, 46, 131, 237, 551, 750, 913], "arrai": [40, 80, 84, 92, 93, 100, 131, 197, 201, 202, 237, 264, 275, 276, 277, 278, 279, 282, 283, 291, 297, 298, 299, 303, 304, 305, 306, 307, 383, 416, 417, 419, 422, 423, 424, 428, 444, 446, 449, 450, 452, 497, 507, 542, 634, 659, 670, 671, 672, 673, 674, 677, 678, 685, 694, 695, 696, 700, 701, 702, 703, 708, 750, 791, 818, 819, 821, 824, 825, 826, 833, 838, 851, 853, 856, 857, 859, 890, 894, 895, 903, 913], "within": [40, 110, 111, 159, 237, 577, 634], "wrap": [42, 104, 364, 542], "arbitrari": [42, 114], "python": [42, 65, 92, 93, 109, 122, 156, 183, 199, 219, 237, 249, 314, 385, 491, 542, 618, 643, 713, 721, 722, 723, 728, 893, 913], "queri": [43, 62, 96, 102, 103, 106, 107, 108, 133, 160, 173, 237, 286, 387, 452, 542, 557, 562, 564, 573, 580, 589, 598, 614, 618, 634, 642, 859, 913, 919], "pars": [43, 92, 93, 95, 103, 106, 107, 143, 186, 192, 214, 217, 237, 403, 439, 451, 457, 468, 493, 495, 498, 512, 530, 542, 570, 595, 602, 612, 616, 634, 858, 864, 875], "given": [43, 45, 55, 64, 65, 80, 82, 83, 84, 86, 90, 92, 93, 103, 112, 113, 114, 115, 118, 122, 131, 132, 171, 173, 182, 188, 189, 192, 209, 237, 265, 280, 315, 339, 345, 364, 382, 403, 409, 412, 413, 416, 417, 419, 422, 423, 424, 427, 429, 430, 450, 468, 473, 482, 489, 508, 542, 563, 581, 588, 596, 597, 602, 609, 618, 634, 643, 660, 675, 705, 714, 742, 749, 750, 768, 790, 792, 804, 811, 815, 818, 819, 821, 824, 825, 826, 829, 835, 836, 857, 875, 897, 900, 904, 913], "transform": [43, 122, 237, 385, 469, 470, 542], "lf": [45, 561, 567, 594, 611, 634], "under": [45, 56, 57, 58, 59, 535, 536, 538, 543, 546, 547, 548, 905, 907, 909, 916, 917, 918], "add": [45, 93, 122, 133, 144, 214, 215, 237, 406, 474, 506, 510, 534, 542, 571, 576, 612, 613, 614, 634, 642, 913], "context": [46, 169, 237, 244, 249, 268, 355, 393, 438, 439, 486, 491, 499, 509, 512, 527, 541, 542, 551, 613, 634, 663], "manag": [46, 551], "categor": [46, 87, 117, 158, 200, 237, 295, 387, 481, 542, 689, 690, 896, 913], "temporarili": [46, 144, 145, 237, 571, 572, 634], "cach": [46, 62, 96, 103, 106, 108, 117, 387, 416, 417, 418, 419, 420, 422, 423, 424, 468, 542, 557, 562, 564, 589, 598, 634, 875], "categori": [46, 64, 117, 295, 690, 705, 913], "until": [46, 160, 237], "finish": [46, 68, 133, 237, 642, 913], "global": [46, 114, 117, 387, 542], "invalid": [46, 92, 93, 103, 451, 452, 858, 859], "outermost": 46, "exit": [46, 119], "df1": [46, 55, 63, 110, 133, 139, 202, 212, 237], "color": [46, 219, 618], "red": [46, 219, 237, 618], "green": [46, 219, 618], "blue": 46, "orang": [46, 125, 220, 221, 223, 224, 225, 227, 229, 230, 237, 619, 620, 622, 623, 624, 626, 628, 629], "uint8": [46, 112, 306, 307, 475, 542, 702, 703, 883, 913], "df2": [46, 55, 63, 110, 133, 139, 202, 212, 237], "yellow": 46, "black": [46, 122, 237], "join": [46, 55, 62, 159, 209, 237, 363, 403, 542, 557, 562, 564, 577, 589, 598, 609, 613, 634], "succe": [46, 92, 93, 103], "df_join": 46, "cat": [46, 64, 443, 469, 470, 481, 498, 538, 542, 705, 850, 909, 913], "u8": [46, 87, 200, 237, 891, 913], "sequenc": [47, 55, 62, 80, 82, 83, 84, 86, 87, 89, 92, 93, 113, 114, 115, 127, 129, 132, 133, 158, 159, 165, 169, 173, 174, 192, 200, 205, 206, 207, 208, 209, 210, 237, 368, 385, 439, 489, 490, 491, 493, 497, 501, 502, 503, 510, 512, 517, 518, 521, 525, 531, 542, 559, 560, 563, 576, 577, 588, 602, 607, 609, 634, 642, 708, 775, 832, 913], "map": [47, 82, 83, 92, 93, 96, 97, 100, 101, 103, 106, 122, 130, 156, 178, 182, 183, 198, 237, 335, 340, 386, 387, 486, 491, 542, 561, 592, 634, 738, 743, 793, 913], "composit": 47, "make": [47, 63, 80, 85, 92, 93, 96, 100, 102, 106, 108, 144, 145, 166, 169, 177, 210, 237, 347, 348, 412, 464, 471, 542, 571, 572, 586, 634, 752, 753, 871, 878, 913], "up": [47, 102, 156, 159, 183, 199, 237, 249, 296, 471, 542, 576, 577, 581, 634, 691, 878, 913], "dai": [48, 65, 144, 145, 157, 159, 210, 237, 318, 321, 328, 331, 332, 333, 335, 339, 340, 341, 342, 344, 416, 417, 418, 419, 420, 422, 423, 424, 504, 505, 506, 542, 571, 572, 577, 634, 734, 735, 738, 743, 745], "unsign": [49, 50, 51, 52, 411, 542, 813, 913], "could": [53, 68, 129, 144, 237, 294, 501, 510, 542, 560, 571, 634, 688, 913], "determin": [53, 55, 63, 83, 86, 92, 93, 95, 100, 108, 122, 138, 144, 145, 156, 157, 205, 210, 237, 286, 295, 393, 412, 416, 417, 418, 419, 420, 422, 423, 424, 436, 542, 571, 572, 634, 681, 690, 843, 913], "static": [53, 618], "utf": 54, "intern": [55, 60, 156, 182, 198, 237, 357, 492, 503, 512, 518, 521, 526, 530, 531, 542, 656, 689, 711, 829, 848, 913], "descend": [55, 192, 237, 258, 261, 282, 409, 428, 438, 439, 482, 493, 542, 602, 634, 652, 655, 677, 782, 811, 833, 845, 897, 913], "uniqu": [55, 112, 113, 115, 154, 169, 228, 237, 260, 367, 375, 399, 468, 484, 486, 522, 542, 627, 634, 654, 706, 773, 784, 800, 875, 899, 901, 913], "kei": [55, 61, 144, 159, 166, 171, 174, 178, 181, 237, 571, 577, 586, 592, 593, 634], "contain": [55, 61, 82, 85, 94, 104, 110, 129, 157, 169, 174, 237, 249, 368, 387, 444, 447, 449, 450, 452, 465, 466, 542, 560, 589, 634, 793, 799, 851, 854, 856, 857, 859, 872, 873, 890, 913], "have": [55, 81, 92, 93, 95, 114, 115, 117, 133, 156, 177, 183, 199, 237, 308, 346, 347, 348, 394, 409, 468, 542, 598, 614, 634, 642, 704, 737, 751, 752, 753, 763, 811, 875, 913], "inject": 55, "fill": [55, 63, 90, 118, 134, 135, 189, 208, 237, 288, 304, 307, 353, 354, 359, 363, 416, 417, 419, 422, 423, 424, 430, 454, 460, 471, 511, 542, 565, 566, 597, 613, 634, 757, 758, 804, 818, 819, 821, 824, 825, 826, 836, 861, 867, 878, 913], "each": [55, 93, 107, 110, 111, 113, 122, 142, 143, 157, 159, 171, 202, 216, 217, 219, 220, 222, 231, 237, 249, 272, 284, 335, 340, 409, 450, 464, 465, 491, 498, 530, 542, 577, 589, 616, 618, 619, 621, 630, 634, 667, 679, 692, 738, 743, 811, 857, 871, 872, 882, 913], "sort": [55, 56, 110, 144, 145, 159, 166, 173, 174, 210, 222, 231, 237, 258, 261, 295, 355, 428, 439, 486, 488, 493, 542, 562, 571, 572, 577, 586, 588, 589, 598, 621, 630, 634, 652, 655, 690, 782, 833, 898, 901, 913], "origin": [55, 92, 93, 206, 237, 334, 376, 387, 403, 411, 444, 449, 450, 452, 454, 460, 471, 542, 607, 634, 737, 793, 851, 856, 857, 859, 861, 867, 878, 913], "order": [55, 83, 110, 143, 144, 145, 171, 173, 174, 184, 192, 206, 210, 237, 258, 261, 282, 295, 409, 426, 427, 428, 438, 439, 473, 483, 484, 493, 542, 570, 571, 572, 599, 600, 602, 607, 634, 652, 655, 677, 690, 782, 811, 816, 828, 829, 833, 845, 881, 898, 899, 913], "unless": [55, 82, 202, 237, 634, 895, 903, 913], "case": [55, 80, 82, 83, 84, 86, 108, 122, 133, 144, 145, 156, 237, 385, 393, 394, 534, 542, 571, 572, 634, 642, 913], "final": [55, 108, 346, 347, 348, 542, 564, 634, 751, 752, 753, 913], "doe": [55, 74, 80, 82, 83, 84, 86, 92, 93, 94, 95, 103, 104, 105, 110, 111, 133, 157, 182, 183, 214, 237, 343, 387, 484, 509, 542, 564, 581, 612, 634, 642, 746, 763, 793, 838, 903, 913], "receiv": [55, 122, 173, 237, 542, 588, 634], "now": [55, 145, 237, 572, 634], "ha": [55, 64, 87, 104, 121, 210, 237, 249, 308, 376, 394, 482, 491, 542, 618, 693, 704, 763, 774, 897, 913], "whose": [55, 159, 174, 237, 349, 508, 542, 577, 634], "post": 55, "constrain": 55, "newli": 55, "singl": [55, 63, 92, 93, 100, 102, 103, 113, 127, 128, 129, 133, 140, 171, 182, 192, 237, 249, 266, 285, 331, 355, 385, 410, 413, 439, 442, 488, 491, 493, 496, 498, 517, 526, 542, 559, 560, 602, 634, 642, 661, 680, 734, 812, 815, 849, 890, 913], "boolean": [55, 60, 136, 138, 192, 237, 246, 247, 265, 289, 355, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 439, 451, 488, 493, 530, 542, 567, 602, 634, 640, 641, 653, 660, 683, 759, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 784, 807, 808, 831, 850, 904, 913], "associ": [55, 237], "2022": [55, 65, 109, 126, 142, 237, 314, 468, 506, 512, 713, 720, 875], "x": [55, 92, 93, 102, 103, 113, 114, 131, 149, 152, 154, 158, 165, 237, 249, 264, 273, 360, 385, 412, 433, 436, 464, 481, 491, 501, 502, 503, 510, 517, 525, 531, 542, 576, 581, 585, 601, 634, 639, 643, 758, 785, 840, 843, 871, 896, 913], "y": [55, 113, 114, 131, 152, 154, 158, 165, 237, 264, 273, 338, 412, 468, 503, 531, 542, 576, 585, 601, 634, 639, 741, 875, 913], "12": [55, 64, 65, 144, 145, 159, 210, 237, 306, 314, 319, 321, 328, 333, 335, 340, 344, 404, 431, 502, 504, 505, 517, 542, 571, 572, 573, 577, 580, 598, 605, 634, 643, 705, 713, 731, 738, 743, 827, 913], "df3": [55, 237], "set_tbl_format": 55, "09": [55, 145, 237, 314, 321, 572, 634, 715], "01": [55, 65, 126, 142, 144, 145, 210, 237, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 468, 506, 571, 572, 634, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 875], "02": [55, 65, 142, 144, 145, 210, 237, 313, 314, 318, 319, 320, 326, 327, 328, 336, 337, 339, 341, 343, 425, 468, 506, 542, 571, 572, 634, 712, 713, 717, 718, 719, 721, 722, 723, 724, 726, 728, 729, 730, 731, 732, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 875], "03": [55, 65, 144, 145, 210, 237, 313, 314, 315, 317, 318, 320, 327, 328, 334, 335, 336, 337, 338, 339, 340, 341, 343, 571, 572, 634, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 726, 728, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746], "af1": 55, "af2": 55, "af3": 55, "keep": [55, 92, 93, 103, 206, 209, 210, 237, 376, 387, 495, 542, 607, 609, 634, 793, 913], "easili": [55, 186, 214, 217, 237, 496, 530, 595, 612, 616, 634], "calcul": [55, 144, 237, 267, 309, 346, 347, 348, 377, 384, 421, 436, 485, 491, 542, 571, 634, 662, 707, 751, 752, 753, 787, 823, 843, 847, 902, 913], "wise": [55, 138, 237, 250, 251, 252, 253, 254, 255, 300, 301, 350, 383, 433, 434, 435, 479, 480, 501, 502, 510, 525, 542, 644, 645, 646, 647, 648, 649, 698, 699, 754, 791, 840, 841, 842, 887, 888, 913], "dot": [55, 542, 598, 634, 913], "product": [55, 172, 237, 306, 310, 491, 542, 702, 708, 913], "fill_nul": [55, 134, 237, 468, 542, 565, 613, 634, 875, 913], "sum": [55, 131, 138, 143, 145, 155, 174, 217, 237, 249, 286, 306, 307, 345, 355, 416, 417, 419, 422, 423, 424, 488, 489, 501, 503, 510, 518, 521, 525, 542, 557, 562, 564, 570, 572, 589, 598, 616, 634, 702, 703, 749, 750, 818, 819, 821, 824, 825, 826, 913], "167": 55, "47": 55, "callabl": [56, 57, 58, 59, 103, 122, 138, 173, 219, 237, 249, 286, 385, 386, 415, 491, 501, 502, 510, 517, 525, 542, 581, 588, 618, 634, 643, 681, 817, 913], "decor": [56, 57, 58, 59, 114, 115], "access": [56, 57, 58, 59, 156, 182, 183, 237, 387, 542, 613, 634], "by_first_letter_of_column_nam": 56, "f": [56, 93, 104, 126, 142, 157, 161, 197, 205, 208, 237, 249, 286, 431, 448, 468, 491, 497, 501, 502, 510, 517, 525, 542, 681, 855, 875], "fromkei": [56, 58], "by_first_letter_of_column_valu": 56, "starts_with": [56, 443, 447, 854], "slice": [56, 62, 131, 147, 157, 195, 237, 272, 284, 415, 416, 417, 418, 419, 420, 422, 423, 424, 542, 557, 562, 564, 581, 589, 598, 599, 600, 634, 667, 679, 750, 817, 818, 819, 820, 821, 822, 824, 825, 826, 913], "to_seri": [56, 60, 237, 286, 681], "xx": [56, 58], "xy": [56, 58], "yy": [56, 58], "yz": [56, 58], "schema": [56, 57, 58, 63, 75, 76, 78, 80, 82, 83, 84, 86, 92, 93, 97, 101, 103, 107, 113, 114, 122, 123, 124, 130, 131, 166, 169, 237, 286, 393, 530, 555, 556, 561, 581, 586, 615, 618, 634, 697, 913], "a1": [56, 58, 237], "a2": [56, 58], "b1": [56, 58], "b2": [56, 58], "pow_n": 57, "powersofn": 57, "next": [57, 288, 409, 542, 811, 913], "p": [57, 173, 237, 530, 542, 588, 634], "ceil": [57, 542, 913], "previou": [57, 119, 404, 473, 542, 806, 913], "floor": [57, 542, 913], "nearest": [57, 159, 176, 229, 237, 296, 358, 408, 420, 524, 542, 577, 590, 628, 634, 691, 761, 767, 810, 822, 913], "24": [57, 122, 131, 145, 237, 306, 308, 320, 542, 572, 634, 704, 719, 913], "55": 57, "001": [57, 322, 323, 325, 330, 506, 725, 727, 733], "next_pow2": 57, "prev_pow2": 57, "nearest_pow2": 57, "128": [57, 806, 913], "split_by_column_dtyp": 58, "dtype": [58, 80, 82, 84, 86, 90, 92, 93, 103, 112, 113, 114, 115, 118, 121, 144, 145, 159, 202, 237, 249, 250, 251, 252, 253, 254, 255, 258, 261, 262, 263, 264, 273, 285, 294, 297, 298, 299, 300, 301, 306, 307, 317, 320, 323, 325, 327, 330, 337, 343, 349, 351, 384, 385, 411, 412, 416, 417, 418, 419, 420, 422, 423, 424, 431, 434, 435, 442, 451, 462, 475, 477, 479, 480, 481, 485, 486, 491, 492, 497, 499, 508, 512, 516, 517, 530, 542, 571, 572, 577, 634, 657, 658, 659, 668, 680, 688, 693, 694, 695, 696, 702, 703, 707, 716, 719, 725, 727, 730, 733, 740, 746, 750, 755, 771, 783, 792, 816, 830, 837, 849, 858, 869, 875, 883, 894, 895, 896, 900, 913], "collect": [58, 62, 104, 105, 160, 197, 237, 249, 492, 497, 512, 530, 542, 559, 560, 563, 564, 565, 566, 567, 568, 570, 571, 573, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 587, 588, 590, 592, 593, 595, 596, 597, 601, 602, 603, 604, 605, 606, 607, 610, 612, 613, 614, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 634], "31": [59, 109, 314, 316, 317, 328, 341, 468, 504, 505, 512, 713, 715, 716, 875], "42": [59, 145, 146, 237, 572, 634, 764, 913], "961": 59, "1764": 59, "4160": 59, "condit": [60, 129, 136, 182, 237, 447, 466, 510, 560, 567, 634], "eager": [60, 144, 208, 237, 492, 512, 516, 526, 530, 541, 551, 571, 634], "indic": [60, 87, 91, 92, 93, 96, 100, 103, 112, 113, 115, 144, 145, 200, 237, 259, 285, 366, 369, 370, 372, 373, 374, 416, 417, 418, 419, 420, 422, 423, 424, 427, 433, 477, 493, 542, 571, 572, 634, 680, 772, 776, 777, 778, 779, 780, 829, 840, 885, 891, 913], "where": [60, 102, 129, 133, 156, 165, 183, 237, 259, 342, 345, 427, 436, 528, 534, 542, 585, 634, 642, 653, 745, 749, 829, 843, 847, 902, 904, 913], "evalu": [60, 134, 136, 159, 237, 259, 308, 362, 364, 368, 387, 490, 492, 507, 526, 530, 542, 567, 574, 576, 577, 634, 653, 704, 904, 913], "immedi": [60, 409, 492, 526, 530, 542, 811, 913], "arg_tru": [60, 542, 913], "u32": [60, 144, 170, 215, 220, 228, 230, 237, 244, 256, 257, 258, 259, 260, 261, 262, 263, 266, 275, 302, 303, 316, 319, 322, 326, 328, 332, 333, 336, 341, 342, 379, 387, 399, 402, 409, 427, 444, 453, 456, 481, 484, 493, 499, 522, 542, 571, 614, 619, 627, 629, 634, 652, 653, 654, 670, 688, 715, 718, 724, 726, 729, 731, 732, 735, 736, 739, 744, 745, 811, 851, 860, 863, 896, 899, 901, 913], "build": [61, 81], "wa": 61, "compil": [61, 262, 263, 657, 658], "gate": 61, "info": [61, 94, 104, 109], "otherwis": [61, 166, 186, 237, 290, 297, 298, 299, 346, 347, 348, 411, 443, 445, 534, 542, 586, 595, 634, 643, 684, 694, 695, 696, 751, 752, 753, 813, 831, 832, 850, 852, 913], "version": [61, 64, 87, 94, 104, 109, 261, 351, 525, 542, 655, 755, 913], "follow": [61, 92, 93, 94, 103, 104, 122, 144, 145, 159, 173, 210, 237, 249, 331, 335, 340, 409, 416, 417, 418, 419, 420, 422, 423, 424, 473, 491, 535, 536, 538, 542, 543, 546, 547, 548, 571, 572, 577, 588, 634, 734, 738, 743, 811, 831, 832, 905, 907, 909, 913, 916, 917, 918, 920], "depend": [61, 109, 249, 262, 263, 393, 409, 491, 509, 512, 542, 657, 658, 811, 913], "host": [61, 92, 96, 100, 106, 108], "git": 61, "lazy_fram": 62, "type_coercion": [62, 557, 562, 564, 589, 598, 599, 600, 634], "predicate_pushdown": [62, 557, 562, 564, 581, 589, 598, 599, 600, 634], "projection_pushdown": [62, 557, 562, 564, 581, 589, 598, 599, 600, 634], "simplify_express": [62, 557, 562, 564, 589, 598, 599, 600, 634], "no_optim": [62, 557, 564, 581, 589, 599, 600, 634], "slice_pushdown": [62, 557, 562, 564, 581, 589, 598, 599, 600, 634], "common_subplan_elimin": [62, 557, 562, 564, 589, 598, 634], "multipl": [62, 63, 92, 93, 103, 106, 107, 108, 113, 115, 127, 131, 133, 136, 143, 144, 149, 157, 171, 174, 186, 192, 214, 217, 237, 285, 391, 394, 398, 403, 413, 416, 417, 418, 419, 420, 422, 423, 424, 439, 493, 496, 501, 502, 510, 517, 525, 534, 542, 559, 567, 570, 571, 595, 602, 612, 616, 634, 642, 680, 750, 798, 815, 913], "graph": [62, 160, 237, 574, 613, 634], "parallel": [62, 63, 89, 100, 102, 108, 144, 159, 160, 173, 237, 268, 308, 542, 551, 571, 576, 577, 634, 663, 704, 913], "threadpool": 62, "coercion": [62, 412, 542, 557, 562, 564, 589, 598, 599, 600, 634], "optim": [62, 100, 103, 106, 107, 108, 156, 160, 173, 177, 183, 237, 557, 562, 564, 581, 589, 598, 599, 600, 614, 634], "predic": [62, 103, 105, 106, 107, 108, 136, 182, 237, 355, 488, 510, 534, 542, 557, 562, 564, 567, 581, 589, 592, 598, 599, 600, 614, 634, 759, 831, 832, 913], "pushdown": [62, 557, 562, 564, 581, 589, 592, 598, 599, 600, 614, 634, 831, 832, 913], "project": [62, 103, 104, 106, 107, 108, 249, 438, 439, 542, 557, 562, 564, 581, 589, 592, 598, 599, 600, 615, 634], "simplifi": [62, 237, 557, 562, 564, 589, 598, 599, 600, 634], "turn": [62, 92, 93, 103, 117, 486, 542, 557, 562, 564, 581, 589, 599, 600, 634], "off": [62, 92, 93, 103, 117, 486, 542, 557, 562, 564, 581, 589, 599, 600, 634], "Will": [62, 205, 237, 518, 521, 557, 562, 564, 589, 598, 634, 913], "try": [62, 75, 77, 92, 93, 95, 96, 100, 103, 106, 108, 557, 562, 564, 589, 598, 634], "branch": [62, 557, 562, 564, 589, 598, 634], "subplan": [62, 557, 562, 564, 589, 598, 634], "occur": [62, 266, 398, 409, 542, 557, 562, 564, 589, 598, 634, 661, 798, 811, 913], "part": [62, 80, 464, 465, 557, 562, 564, 589, 598, 613, 634, 715, 718, 724, 726, 729, 731, 732, 739, 747, 871, 872], "fashion": [62, 158, 237, 557, 562, 564, 589, 598, 634], "alpha": [62, 249, 346, 347, 348, 542, 557, 562, 564, 589, 598, 634, 751, 752, 753, 913], "item": [63, 93, 184, 237, 265, 271, 273, 351, 426, 465, 542, 660, 666, 668, 755, 828, 872, 913], "iter": [63, 143, 144, 145, 156, 157, 171, 182, 183, 186, 192, 205, 214, 216, 217, 237, 308, 349, 403, 439, 493, 495, 496, 498, 508, 527, 530, 542, 570, 571, 572, 595, 602, 612, 616, 634, 704, 913], "rechunk": [63, 80, 85, 92, 93, 96, 100, 103, 106, 107, 108, 133, 237, 542, 642, 692, 799, 913], "concatmethod": 63, "vertic": [63, 133, 208, 212, 237, 442, 518, 849], "aggreg": [63, 92, 93, 100, 138, 144, 162, 163, 164, 167, 169, 174, 175, 176, 193, 194, 208, 211, 217, 218, 221, 223, 237, 244, 355, 381, 385, 403, 415, 416, 417, 418, 419, 420, 422, 423, 424, 486, 501, 502, 503, 510, 515, 518, 521, 525, 531, 542, 571, 581, 582, 583, 584, 587, 590, 603, 604, 610, 616, 617, 620, 622, 634, 817, 818, 819, 821, 824, 825, 826, 913], "concaten": [63, 138, 173, 237, 498, 542, 588, 634, 692, 799, 913], "sure": [63, 80, 85, 92, 93, 96, 100, 102, 177, 237, 492], "contigu": [63, 80, 85, 92, 93, 96, 100, 103, 106, 107, 108, 177, 237], "diagon": [63, 205, 237], "strategi": [63, 92, 112, 113, 114, 115, 135, 144, 158, 159, 168, 237, 249, 286, 354, 542, 566, 571, 576, 577, 634, 681, 758, 913], "vstack": [63, 133, 237], "find": [63, 137, 237, 427, 542, 829, 913], "miss": [63, 80, 92, 93, 103, 134, 237, 288, 346, 347, 348, 359, 363, 370, 372, 528, 542, 565, 634, 751, 752, 753, 903, 913], "stack": [63, 149, 212, 237], "length": [63, 64, 90, 113, 118, 144, 145, 191, 237, 281, 308, 335, 340, 394, 415, 416, 417, 418, 419, 420, 422, 423, 424, 437, 454, 456, 460, 462, 471, 492, 542, 571, 572, 589, 601, 634, 676, 681, 692, 704, 705, 713, 738, 743, 788, 804, 817, 818, 819, 820, 821, 822, 824, 825, 826, 844, 861, 863, 867, 869, 878, 913], "don": [63, 208, 237, 249, 268, 308, 491, 542, 663, 704, 830, 903, 913], "t": [63, 95, 103, 122, 173, 208, 237, 249, 268, 308, 345, 346, 347, 348, 455, 461, 467, 468, 491, 534, 542, 588, 634, 663, 704, 749, 751, 752, 753, 830, 862, 868, 874, 875, 903, 913], "match": [63, 74, 80, 82, 83, 84, 86, 110, 111, 135, 159, 182, 237, 392, 443, 444, 447, 450, 451, 452, 455, 458, 459, 461, 466, 467, 468, 496, 566, 577, 634, 783, 850, 851, 854, 857, 858, 859, 862, 865, 866, 868, 873, 874, 875, 913], "relev": 63, "execut": [63, 160, 237, 268, 554, 581, 589, 634, 663], "df_h1": 63, "l1": 63, "l2": 63, "df_h2": 63, "r1": 63, "r2": 63, "r3": 63, "df_d1": 63, "df_d2": 63, "bin": [64, 457, 536, 705, 864, 907, 913], "label": [64, 80, 415, 416, 417, 418, 419, 420, 422, 423, 424, 542, 589, 634, 705, 817, 818, 819, 820, 821, 822, 824, 825, 826, 913], "break_point_label": [64, 705, 913], "break_point": [64, 705, 913], "category_label": [64, 705, 913], "discret": [64, 267, 309, 345, 542, 662, 705, 707, 749, 913], "deprec": [64, 87, 261, 351, 542, 634, 655, 755, 913], "sinc": [64, 87, 94, 104, 261, 318, 351, 512, 542, 655, 717, 755, 913], "creat": [64, 65, 80, 84, 86, 104, 113, 114, 115, 123, 124, 144, 145, 170, 174, 210, 214, 237, 314, 335, 340, 410, 462, 486, 492, 497, 504, 505, 506, 542, 555, 556, 562, 571, 572, 612, 634, 693, 697, 705, 710, 713, 738, 743, 804, 812, 869, 894, 913], "assign": [64, 113, 144, 237, 409, 464, 465, 542, 571, 634, 705, 811, 871, 872, 913], "must": [64, 80, 81, 82, 94, 104, 132, 144, 145, 159, 166, 182, 237, 286, 385, 416, 417, 418, 419, 420, 422, 423, 424, 542, 563, 571, 572, 577, 581, 586, 634, 705, 913], "len": [64, 113, 114, 157, 237, 303, 413, 454, 460, 471, 542, 705, 815, 861, 867, 878, 913], "breakpoint": [64, 705, 913], "experiment": [64, 105, 186, 208, 209, 214, 237, 308, 335, 387, 416, 417, 418, 419, 420, 422, 423, 424, 542, 595, 609, 612, 634, 704, 705, 738, 913], "being": [64, 92, 93, 103, 105, 208, 209, 237, 249, 308, 335, 387, 416, 417, 418, 419, 420, 422, 423, 424, 507, 534, 542, 609, 634, 704, 705, 738, 913], "consid": [64, 92, 93, 103, 105, 129, 139, 165, 206, 208, 209, 237, 297, 298, 299, 308, 335, 387, 416, 417, 418, 419, 420, 422, 423, 424, 501, 510, 542, 560, 573, 580, 585, 607, 609, 634, 694, 695, 696, 704, 705, 738, 830, 831, 832, 913], "break": [64, 105, 208, 209, 237, 249, 308, 335, 387, 416, 417, 418, 419, 420, 422, 423, 424, 542, 609, 634, 704, 705, 738, 913], "30": [64, 133, 144, 149, 173, 179, 180, 198, 214, 237, 256, 257, 258, 261, 309, 314, 317, 321, 333, 335, 340, 344, 360, 431, 542, 571, 588, 612, 634, 705, 707, 713, 716, 738, 743, 913], "inf": [64, 114, 115, 255, 366, 369, 542, 649, 705, 772, 776, 792, 806, 900, 913], "low": [65, 144, 237, 336, 492, 571, 634], "high": [65, 144, 237, 336, 492, 571, 634], "pli": [65, 162, 163, 167, 194, 237], "interv": [65, 144, 145, 210, 237, 335, 336, 340, 364, 416, 417, 418, 419, 420, 422, 423, 424, 542, 571, 572, 634, 715, 717, 718, 724, 726, 729, 731, 732, 735, 736, 738, 739, 741, 742, 743, 744, 745, 747, 768, 913], "1d": [65, 144, 145, 159, 210, 237, 313, 320, 327, 331, 335, 340, 343, 416, 417, 418, 419, 420, 422, 423, 424, 542, 571, 572, 577, 634, 712, 717, 719, 721, 722, 723, 728, 730, 734, 738, 741, 742, 743, 745, 746], "close": [65, 144, 145, 237, 364, 416, 417, 418, 419, 420, 422, 423, 424, 436, 542, 571, 572, 634, 768, 843, 913], "closedinterv": [65, 144, 145, 237, 364, 416, 417, 418, 419, 420, 422, 423, 424, 542, 571, 572, 634, 768, 913], "lower": [65, 103, 144, 176, 229, 237, 364, 384, 408, 411, 420, 492, 524, 542, 564, 571, 590, 628, 634, 768, 792, 810, 813, 822, 900, 913], "bound": [65, 92, 93, 131, 144, 237, 271, 285, 364, 384, 485, 492, 542, 571, 634, 666, 680, 750, 768, 792, 900, 913], "upper": [65, 92, 93, 131, 144, 237, 364, 485, 492, 542, 571, 634, 750, 768, 792, 900, 913], "period": [65, 144, 145, 188, 189, 237, 280, 335, 340, 346, 347, 348, 404, 429, 430, 542, 571, 572, 596, 597, 634, 675, 738, 743, 751, 752, 753, 806, 835, 836, 913], "It": [65, 122, 166, 173, 219, 237, 249, 286, 393, 542, 581, 586, 618, 634, 831, 832, 913], "like": [65, 81, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 152, 154, 158, 237, 268, 396, 409, 518, 521, 531, 542, 564, 591, 634, 663, 811, 913], "durat": [65, 159, 210, 237, 317, 320, 323, 325, 327, 330, 337, 343, 481, 542, 577, 634, 716, 719, 725, 727, 730, 733, 740, 746, 896, 913], "3d12h4m25": [65, 144, 145, 159, 210, 237, 335, 340, 571, 572, 577, 634, 738, 743], "hour": [65, 144, 145, 159, 210, 237, 331, 335, 340, 416, 417, 418, 419, 420, 422, 423, 424, 505, 506, 542, 571, 572, 577, 634, 734, 738, 743], "minut": [65, 144, 145, 159, 210, 237, 331, 335, 340, 416, 417, 418, 419, 420, 422, 423, 424, 505, 506, 542, 571, 572, 577, 634, 734, 738, 743], "tempor": [65, 144, 145, 156, 183, 199, 237, 364, 416, 417, 418, 419, 420, 422, 423, 424, 542, 571, 572, 634, 768, 783, 913], "window": [65, 144, 145, 237, 308, 335, 340, 346, 347, 348, 403, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 497, 542, 571, 572, 634, 704, 738, 743, 751, 752, 753, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 913], "granular": 65, "finer": 65, "than": [65, 79, 84, 86, 92, 93, 105, 114, 115, 122, 142, 143, 156, 159, 171, 182, 183, 184, 208, 219, 237, 376, 426, 436, 454, 460, 465, 471, 518, 521, 528, 531, 542, 570, 577, 599, 600, 618, 634, 828, 843, 861, 867, 872, 878, 913], "also": [65, 83, 114, 115, 130, 143, 144, 145, 166, 169, 186, 192, 214, 237, 304, 307, 334, 363, 364, 409, 416, 417, 418, 419, 420, 422, 423, 424, 439, 501, 502, 510, 512, 525, 541, 542, 570, 571, 572, 586, 595, 602, 612, 613, 634, 737, 768, 811, 913], "permut": 65, "1mo": [65, 144, 145, 159, 210, 237, 315, 317, 331, 334, 335, 338, 340, 416, 417, 418, 419, 420, 422, 423, 424, 542, 571, 572, 577, 634, 714, 716, 731, 734, 735, 736, 737, 738, 743, 744], "dtrang": 65, "1985": 65, "00": [65, 144, 159, 210, 237, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 468, 506, 571, 577, 634, 712, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 875], "04": [65, 105, 144, 210, 237, 314, 315, 316, 317, 320, 326, 327, 328, 332, 334, 335, 336, 337, 338, 341, 342, 343, 468, 506, 571, 634, 714, 716, 719, 724, 726, 729, 730, 731, 732, 736, 737, 739, 740, 741, 744, 745, 746, 875], "05": [65, 105, 110, 111, 159, 210, 237, 314, 315, 317, 334, 336, 338, 577, 634, 713, 714, 715, 716, 737, 738, 743, 745], "07": [65, 314, 316, 332, 334, 335, 340, 342, 468, 512, 713, 715, 745, 875], "08": [65, 110, 111, 145, 237, 314, 335, 468, 506, 572, 634, 738, 743, 875], "zone": [65, 315, 334, 714, 737], "america": [65, 737], "new_york": [65, 737], "\u03bc": [65, 144, 145, 159, 210, 237, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 468, 512, 571, 572, 577, 634, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 875], "est": [65, 737], "encount": [66, 144, 237, 400, 401, 451, 452, 501, 510, 528, 542, 571, 634, 802, 803, 858, 859, 913], "error": [66, 92, 93, 103, 182, 237, 273, 285, 290, 294, 376, 443, 445, 451, 452, 468, 542, 618, 668, 680, 684, 688, 850, 852, 858, 859, 875, 913], "duplic": [69, 152, 158, 159, 206, 237, 365, 542, 576, 577, 607, 634, 770, 913], "certain": [70, 94, 104, 150, 210, 237, 496, 557, 589, 599, 600, 634, 913], "structur": [71, 75, 77, 133, 173, 237, 542, 588, 634, 642, 913], "least": [72, 114, 404, 486, 542, 806, 901, 913], "expect": [72, 74, 79, 249, 491, 542, 579, 581, 634], "unexpect": [73, 237], "caus": [73, 81, 92, 93, 103, 121, 133, 237, 642, 913], "panic": 73, "combin": [75, 77, 144, 145, 146, 159, 210, 237, 259, 340, 455, 461, 467, 542, 571, 572, 577, 598, 634, 743, 862, 868, 874], "mismatch": 75, "incompat": 77, "pa": [80, 104, 105], "chunkedarrai": [80, 168, 237, 708, 913], "schema_overrid": [80, 82, 83, 84, 85, 86, 157, 237, 634], "schemadict": [80, 82, 83, 84, 85, 86, 103, 185, 237, 530, 581, 594, 618, 634], "zero": [80, 81, 91, 92, 93, 96, 100, 121, 123, 135, 156, 182, 197, 202, 237, 353, 354, 427, 436, 471, 542, 555, 566, 634, 681, 693, 758, 843, 878, 890, 894, 895, 913], "copi": [80, 81, 121, 123, 124, 157, 197, 202, 214, 237, 352, 471, 542, 555, 556, 612, 634, 639, 693, 697, 710, 756, 878, 890, 894, 895, 913], "most": [80, 394, 398, 404, 465, 486, 542, 798, 806, 872, 901, 913], "closest": 80, "dimens": [80, 82, 84, 86, 237, 413, 542, 634, 815, 913], "column_1": [80, 122, 205, 237], "pair": [80, 82, 83, 84, 86, 178, 237, 592, 634], "declar": [80, 82, 83, 84, 86, 237, 634], "sever": [80, 82, 83, 84, 86, 237, 634], "wai": [80, 82, 83, 84, 86, 127, 143, 157, 173, 192, 217, 237, 403, 439, 496, 542, 559, 570, 588, 602, 616, 634], "As": [80, 82, 83, 84, 86, 95, 237, 526, 634], "auto": [80, 82, 83, 84, 86, 100, 108, 205, 237, 634], "automat": [80, 82, 83, 84, 86, 92, 93, 102, 103, 114, 115, 186, 214, 237, 455, 461, 467, 468, 595, 612, 634, 862, 868, 874, 875, 913], "equival": [80, 82, 83, 84, 86, 94, 155, 169, 237, 456, 634, 786, 863, 876, 877, 913], "form": [80, 82, 83, 84, 86, 156, 183, 208, 237, 404, 542, 634, 806, 913], "suppli": [80, 82, 83, 84, 86, 182, 237, 634], "here": [80, 82, 83, 84, 86, 94, 102, 104, 113, 114, 115, 237, 452, 634, 859], "overwrit": [80, 82, 83, 84, 86, 92, 93, 103, 121, 237, 564, 634], "them": [80, 82, 83, 84, 86, 133, 144, 145, 159, 166, 210, 237, 273, 364, 400, 401, 497, 542, 571, 572, 577, 586, 634, 642, 668, 802, 803, 913], "param": [80, 82, 83, 84, 86, 92, 93, 103, 114, 115, 182, 237, 634], "overridden": [80, 82, 84, 86, 237, 634], "construct": [80, 82, 83, 84, 85, 86, 237, 387, 542, 569, 591, 634, 913], "allow_copi": [81, 121], "interchang": [81, 121], "protocol": [81, 102, 121], "__dataframe__": 81, "convers": [81, 121, 157, 202, 237, 468, 551, 875, 893, 894, 895, 913], "fail": [81, 94, 96, 104, 121, 206, 237, 259, 286, 468, 542, 607, 634, 643, 875, 913], "detail": [81, 102, 110, 111, 121, 237, 634, 920], "latest": [81, 94, 104, 121, 359, 394, 542], "index": [81, 85, 88, 109, 121, 137, 144, 145, 150, 159, 174, 180, 182, 191, 203, 210, 215, 237, 244, 256, 257, 258, 260, 261, 262, 263, 271, 281, 285, 331, 416, 417, 418, 419, 420, 422, 423, 424, 427, 437, 449, 462, 477, 542, 571, 572, 577, 601, 614, 634, 650, 651, 652, 653, 654, 655, 657, 658, 666, 676, 680, 734, 804, 829, 832, 844, 856, 869, 885, 913], "html": [81, 121, 237], "throw": [81, 294, 451, 452, 542, 688, 858, 859, 913], "runtimeerror": 81, "from_panda": [81, 95], "from_arrow": 81, "effici": [81, 157, 237], "schemadefinit": [82, 83, 84, 86, 237, 634], "clone": [82, 83, 84, 85, 86, 123, 201, 202, 237, 555, 634, 693, 893, 894, 895, 903, 913], "two": [82, 84, 86, 102, 138, 165, 166, 174, 204, 218, 219, 237, 244, 310, 314, 438, 477, 489, 500, 523, 528, 542, 585, 586, 617, 618, 634, 708, 713, 913], "dimension": [82, 84, 86, 237, 634, 913], "infer_schema_length": [83, 86, 92, 93, 95, 103, 107, 237, 634], "mani": [83, 86, 102, 133, 237, 642, 913], "scan": [83, 86, 92, 93, 100, 103, 104, 105, 106, 107, 108, 564, 573, 580, 634], "slow": [83, 86, 92, 93, 103, 249, 308, 542, 704, 913], "NOT": [83, 110, 111], "actual": [83, 95, 114, 115, 237, 838, 913], "thei": [83, 110, 119, 160, 237, 415, 542, 817, 913], "appear": [83, 110, 484, 542, 899, 913], "typic": 83, "clearer": 83, "after": [83, 91, 92, 93, 96, 100, 103, 106, 107, 108, 133, 207, 236, 237, 349, 387, 409, 471, 542, 608, 634, 642, 737, 793, 811, 878, 913], "load": [83, 85, 94, 104, 237, 551, 573, 580, 634], "want": [83, 122, 133, 169, 237, 297, 298, 299, 355, 385, 387, 416, 417, 418, 419, 420, 422, 423, 424, 501, 510, 542, 557, 573, 580, 634, 642, 694, 695, 696, 894, 913], "some": [83, 92, 93, 103, 129, 237, 560, 634, 775, 913], "_partial_": [83, 237, 634], "omit": [83, 113, 114, 115, 169, 237], "similarli": 83, "ad": [83, 121, 144, 205, 214, 237, 248, 352, 501, 502, 542, 571, 612, 634, 756, 913], "partial": 83, "present": [83, 110, 114, 368, 542, 903, 913], "np": [84, 136, 237, 477, 542, 634, 772, 776, 777, 778, 817, 913], "ndarrai": [84, 136, 201, 237, 477, 542, 634, 708, 829, 832, 885, 894, 913], "numpi": [84, 109, 172, 201, 202, 237, 400, 401, 542, 634, 772, 776, 777, 778, 802, 803, 817, 829, 885, 894, 895, 903, 913], "columnar": [84, 86, 156, 183, 237], "interpret": [84, 86, 92, 93, 103, 237, 634], "yield": [84, 86, 92, 93, 103, 131, 133, 205, 237, 634, 642, 750, 913], "conclus": [84, 86, 237, 634], "pd": [85, 95, 481, 542, 896, 913], "nan_to_nul": [85, 237, 634, 913], "include_index": 85, "datetimeindex": [85, 708, 913], "panda": [85, 95, 109, 202, 237, 481, 542, 634, 895, 896, 913], "instal": [85, 92, 93, 96, 100, 102, 104, 109, 172, 201, 202, 237, 598, 634, 895, 913], "nan": [85, 110, 111, 114, 121, 134, 202, 237, 311, 312, 353, 363, 370, 372, 373, 374, 388, 397, 400, 401, 528, 542, 565, 634, 645, 649, 709, 757, 777, 778, 802, 803, 817, 895, 913], "convert": [85, 87, 94, 95, 104, 121, 198, 199, 200, 201, 204, 237, 286, 315, 468, 634, 681, 714, 875, 882, 893, 894, 895, 903, 913], "pd_df": 85, "pd_seri": 85, "dummi": [87, 200, 237, 891, 913], "to_dummi": [87, 237, 913], "foo_1": [87, 200, 237], "foo_2": [87, 200, 237], "bar_3": [87, 200, 237], "bar_4": [87, 200, 237], "ham_a": [87, 200, 237], "ham_b": [87, 200, 237], "get": [88, 97, 101, 116, 125, 130, 140, 141, 144, 145, 147, 148, 152, 154, 161, 168, 182, 185, 187, 191, 195, 213, 222, 231, 237, 244, 256, 257, 258, 260, 261, 270, 274, 275, 287, 303, 304, 305, 306, 307, 318, 356, 361, 365, 367, 375, 378, 380, 388, 389, 390, 393, 395, 397, 400, 401, 408, 437, 441, 453, 456, 475, 476, 483, 487, 509, 514, 518, 519, 520, 521, 529, 532, 533, 542, 558, 561, 568, 571, 572, 573, 578, 580, 594, 601, 605, 611, 621, 630, 634, 650, 651, 652, 653, 654, 655, 665, 669, 670, 682, 692, 700, 701, 702, 703, 717, 762, 765, 768, 770, 773, 784, 789, 794, 796, 797, 799, 802, 803, 807, 808, 810, 844, 847, 860, 863, 884, 890, 891, 898, 902, 903, 913], "uint32": [88, 109, 131, 237, 258, 261, 262, 263, 275, 316, 319, 322, 324, 326, 328, 329, 332, 333, 336, 341, 342, 412, 444, 453, 456, 477, 481, 542, 653, 657, 658, 670, 688, 715, 718, 724, 726, 729, 731, 732, 735, 736, 739, 744, 745, 750, 830, 851, 896, 913], "regular": [88, 156, 182, 183, 210, 237, 349, 496, 508, 518, 521, 531, 542], "uint64": [88, 146, 237, 262, 263, 360, 411, 542, 657, 658, 764, 813, 913], "bigidx": 88, "read": [89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 133, 237, 385, 542, 564, 569, 591, 634, 642, 913], "over": [89, 92, 93, 94, 103, 114, 122, 133, 156, 157, 182, 183, 205, 216, 219, 237, 249, 308, 354, 363, 385, 386, 415, 416, 417, 418, 419, 420, 422, 423, 424, 491, 501, 502, 510, 517, 525, 542, 618, 642, 643, 704, 817, 818, 819, 821, 825, 913], "avail": [89, 94, 104, 113, 236, 409, 535, 536, 538, 541, 542, 543, 546, 547, 548, 551, 552, 564, 633, 634, 811, 905, 907, 909, 913, 916, 917, 918], "fetch": [89, 103, 160, 237, 555, 557, 573, 580, 608, 634], "ideal": 89, "read_csv_batch": [89, 552], "tpch": [89, 93], "tables_scale_100": [89, 93], "lineitem": [89, 93, 102], "tbl": [89, 93], "try_parse_d": [89, 92, 93, 103], "polarsdatatyp": [90, 92, 93, 97, 101, 112, 114, 115, 118, 122, 130, 237, 249, 294, 349, 385, 451, 491, 492, 496, 508, 516, 517, 542, 561, 634, 643, 688, 858, 913], "new": [90, 118, 119, 122, 129, 149, 150, 169, 170, 178, 179, 196, 208, 214, 237, 245, 314, 351, 363, 386, 458, 459, 464, 465, 472, 473, 478, 542, 551, 560, 592, 606, 612, 618, 634, 639, 643, 710, 713, 755, 804, 814, 865, 866, 871, 872, 879, 881, 886, 892, 904, 913], "In": [90, 94, 104, 108, 114, 115, 118, 122, 131, 133, 144, 145, 169, 237, 249, 393, 542, 571, 572, 634, 642, 750, 812, 913], "probabl": [90, 118, 345, 542, 749, 913], "n_row": [91, 92, 93, 96, 100, 103, 106, 107, 108, 157, 237, 564, 634], "accept": [91, 92, 93, 94, 96, 100, 132, 143, 186, 192, 214, 217, 237, 349, 403, 439, 493, 495, 496, 498, 508, 530, 542, 563, 570, 595, 602, 612, 616, 634], "start": [91, 92, 93, 96, 100, 103, 106, 107, 108, 143, 144, 160, 191, 210, 215, 237, 281, 293, 316, 318, 319, 321, 326, 328, 332, 333, 335, 336, 339, 340, 341, 342, 344, 349, 364, 437, 443, 447, 462, 466, 496, 501, 508, 510, 534, 542, 570, 571, 589, 601, 614, 634, 676, 687, 712, 714, 715, 717, 718, 724, 726, 729, 731, 732, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 768, 844, 854, 869, 873, 913], "stop": [91, 92, 93, 96, 100, 103, 106, 107, 108, 316, 318, 319, 321, 326, 328, 332, 333, 335, 336, 339, 340, 341, 342, 344, 712, 714, 715, 717, 718, 724, 726, 729, 731, 732, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747], "textio": 92, "new_column": [92, 93, 95], "comment_char": [92, 93, 103], "quote_char": [92, 93, 103], "skip_row": [92, 93, 103], "missing_utf8_is_empty_str": [92, 93, 103], "ignore_error": [92, 93, 103], "n_thread": [92, 93], "8192": 92, "csvencod": [92, 93, 103], "low_memori": [92, 93, 100, 103, 107, 108], "storage_opt": [92, 94, 96, 100, 104, 106, 108], "skip_rows_after_head": [92, 93, 103], "row_count_nam": [92, 93, 96, 100, 103, 106, 107, 108], "row_count_offset": [92, 93, 96, 100, 103, 106, 107, 108], "sample_s": [92, 93], "eol_char": [92, 93, 103], "By": [92, 93, 95, 103, 159, 237, 457, 516, 577, 634, 847, 864, 894, 902, 913], "we": [92, 93, 95, 103, 159, 237, 268, 457, 516, 534, 577, 581, 634, 643, 663, 864, 913], "handler": [92, 93, 95], "g": [92, 93, 94, 95, 96, 100, 104, 106, 108, 208, 237, 249, 349, 431, 508, 542, 592, 634, 830, 894, 913], "via": [92, 93, 95, 103, 106, 107, 108, 156, 183, 237, 249, 542], "builtin": [92, 93, 95], "open": [92, 93, 95, 96, 100, 106, 108, 237], "stringio": [92, 93], "fsspec": [92, 93, 96, 100, 104, 106, 108, 109], "remot": [92, 93, 96, 100], "first": [92, 93, 95, 103, 107, 122, 142, 144, 147, 159, 161, 168, 173, 174, 195, 205, 206, 210, 222, 237, 258, 260, 261, 268, 271, 272, 308, 331, 335, 361, 367, 380, 387, 427, 449, 451, 452, 458, 459, 495, 501, 510, 514, 542, 557, 571, 573, 577, 580, 588, 607, 613, 621, 634, 652, 655, 663, 666, 667, 681, 704, 706, 734, 738, 765, 773, 789, 829, 856, 858, 859, 865, 866, 913], "dataset": [92, 93, 103, 105, 377, 542, 551, 581, 634, 787, 913], "autogener": [92, 93, 103], "column_x": [92, 93, 103], "enumer": [92, 93, 103, 157, 237], "everi": [92, 93, 103, 144, 196, 199, 210, 237, 262, 263, 267, 269, 271, 272, 281, 284, 303, 304, 305, 306, 307, 308, 335, 340, 351, 448, 478, 501, 502, 542, 564, 571, 606, 634, 657, 658, 662, 664, 666, 667, 676, 679, 700, 701, 702, 703, 704, 738, 743, 755, 855, 886, 913], "shorter": [92, 93], "remain": [92, 93, 103, 131, 237, 249, 464, 465, 542, 581, 634, 750, 871, 872, 913], "comment": [92, 93, 103], "instanc": [92, 93, 103, 114, 115, 133, 138, 237, 286, 294, 394, 416, 417, 418, 419, 420, 422, 423, 424, 501, 510, 542, 581, 614, 634, 642, 688, 913], "special": [92, 93, 103, 643, 913], "handl": [92, 93, 103, 105, 267, 309, 471, 542, 662, 707, 878, 913], "escap": [92, 93, 103], "dure": [92, 93, 103, 119, 133, 237, 642, 913], "provid": [92, 93, 94, 102, 103, 104, 114, 115, 237, 286, 290, 291, 445, 446, 449, 451, 452, 512, 551, 599, 600, 634, 684, 685, 852, 853, 856, 858, 859, 920], "equal": [92, 93, 103, 110, 111, 117, 139, 144, 159, 166, 237, 415, 416, 417, 418, 419, 420, 422, 423, 424, 453, 454, 460, 471, 492, 542, 571, 577, 586, 634, 817, 818, 819, 820, 821, 822, 824, 825, 826, 830, 860, 861, 867, 878, 913], "would": [92, 93, 103, 258, 261, 271, 393, 409, 493, 542, 581, 634, 652, 655, 666, 811, 894, 913], "prefer": [92, 93, 94, 103, 122, 133, 156, 182, 183, 219, 237, 249, 415, 542, 618, 634, 642, 817, 913], "treat": [92, 93, 103, 443, 458, 459, 850, 865, 866], "befor": [92, 103, 119, 133, 144, 159, 207, 237, 306, 307, 308, 387, 404, 415, 416, 417, 418, 419, 420, 422, 423, 424, 471, 475, 542, 571, 574, 577, 608, 634, 642, 702, 703, 704, 793, 806, 817, 818, 819, 820, 821, 822, 824, 825, 826, 878, 883, 913], "increas": [92, 100, 237, 308, 542, 704, 913], "10000": [92, 157, 237, 471], "check": [92, 93, 103, 110, 111, 139, 153, 155, 237, 246, 247, 265, 289, 292, 293, 364, 368, 443, 447, 466, 542, 581, 634, 640, 641, 660, 683, 686, 687, 769, 771, 774, 775, 781, 782, 783, 785, 786, 830, 850, 854, 873, 913], "might": [92, 93, 103, 249, 393, 484, 542, 895, 913], "issu": [92, 93, 95, 103, 306, 307, 475, 542, 702, 703, 883, 913], "alwai": [92, 122, 219, 237, 393, 581, 618, 634], "physic": [92, 93, 159, 237, 295, 481, 542, 554, 576, 577, 634, 690, 896, 913], "cpu": [92, 93], "your": [92, 93, 110, 111, 156, 186, 214, 217, 237, 249, 542, 557, 573, 580, 581, 595, 612, 616, 634], "system": [92, 93], "wrongli": 92, "done": [92, 93, 103, 105, 142, 159, 237, 248, 294, 454, 460, 542, 577, 634, 688, 861, 867, 913], "buffer": [92, 93, 131, 156, 237, 750, 913], "onc": [92, 93, 95, 121, 184, 217, 237, 426, 542, 554, 616, 634, 828, 913], "modifi": [92, 93, 103, 119, 149, 156, 212, 237, 259, 334, 343, 542, 737, 746, 814, 876, 877, 913], "multi": [92, 93, 349, 542], "lossi": [92, 93, 103], "replac": [92, 93, 103, 134, 135, 180, 205, 214, 237, 314, 334, 387, 459, 542, 565, 612, 634, 713, 737, 793, 831, 832, 866, 913], "decod": [92, 93], "im": [92, 93], "usag": [92, 93, 103, 114, 115, 190, 237, 838, 913], "expens": [92, 93, 100, 103, 107, 108, 156, 182, 183, 205, 206, 237, 249, 542, 607, 634, 642, 913], "nativ": [92, 96, 100, 122, 156, 183, 199, 219, 237, 249, 542, 618], "parser": 92, "even": 92, "possibl": [92, 122, 156, 183, 219, 237, 249, 384, 393, 465, 485, 542, 618, 872, 913], "differ": [92, 105, 110, 133, 144, 145, 156, 183, 199, 205, 237, 267, 309, 316, 331, 332, 334, 341, 387, 400, 401, 468, 484, 509, 512, 518, 521, 542, 562, 571, 572, 634, 642, 662, 707, 715, 734, 735, 737, 744, 802, 803, 830, 875, 913], "regard": [92, 528], "sens": [92, 96, 100, 106, 108, 144, 145, 166, 210, 237, 571, 572, 586, 634], "particular": [92, 96, 100, 106, 108, 131, 237, 750, 913], "storag": [92, 94, 96, 100, 104, 106, 108], "connect": [92, 96, 100, 102, 105, 106, 108, 552], "port": [92, 96, 100, 102, 106, 108], "usernam": [92, 96, 100, 102, 106, 108], "password": [92, 96, 100, 102, 106, 108], "skip": [92, 93, 95, 100, 103, 108, 208, 237, 643, 913], "insert": [92, 93, 96, 100, 103, 106, 107, 108, 150, 179, 205, 207, 237, 427, 442, 471, 542, 608, 634, 829, 849, 878, 913], "count": [92, 93, 96, 100, 103, 106, 107, 108, 126, 144, 145, 159, 169, 170, 174, 205, 209, 210, 215, 219, 228, 237, 266, 303, 331, 379, 399, 402, 416, 417, 418, 419, 420, 422, 423, 424, 444, 484, 486, 522, 542, 571, 572, 577, 609, 614, 618, 627, 634, 661, 706, 734, 800, 805, 851, 899, 901, 913], "offset": [92, 93, 96, 100, 103, 106, 107, 108, 144, 145, 191, 210, 215, 237, 281, 331, 335, 340, 437, 462, 468, 542, 571, 572, 601, 614, 634, 676, 734, 738, 743, 844, 869, 875, 913], "row_count": [92, 93, 96, 100, 103, 106, 107, 108], "sampl": [92, 93, 219, 237, 436, 542, 618, 843, 913], "estim": [92, 93, 131, 237, 347, 348, 377, 542, 750, 752, 753, 787, 913], "alloc": [92, 93, 131, 177, 237, 750, 913], "need": [92, 93, 95, 110, 111, 144, 145, 190, 201, 237, 286, 387, 431, 453, 542, 571, 572, 634, 837, 860, 913], "end": [92, 93, 100, 103, 144, 237, 281, 292, 335, 349, 364, 443, 447, 462, 466, 496, 508, 542, 571, 573, 580, 589, 634, 676, 686, 738, 768, 854, 869, 873, 913], "scan_csv": [92, 93, 599, 600, 634], "lazili": [92, 93, 103, 104, 106, 107, 108, 387, 542], "glob": [92, 93, 103, 106, 107, 108], "pattern": [92, 93, 103, 106, 107, 108, 156, 237, 392, 443, 444, 449, 450, 458, 459, 831, 832, 850, 851, 856, 857, 865, 866, 913], "store": [92, 100, 133, 156, 183, 237, 642, 913], "continu": [92, 100, 436, 542, 843, 913], "benchmark": [92, 100], "50000": 93, "batchedcsvread": [93, 551], "batch": [93, 107, 581, 634], "upon": 93, "creation": 93, "gather": 93, "work": [93, 95, 145, 179, 237, 249, 268, 296, 297, 298, 299, 349, 358, 403, 456, 483, 542, 572, 634, 663, 691, 694, 695, 696, 761, 863, 898, 913], "next_batch": 93, "call": [93, 114, 115, 143, 160, 236, 237, 249, 304, 307, 542, 552, 570, 633, 634, 643, 913], "big": 93, "interest": 93, "seen_group": 93, "big_fil": 93, "while": [93, 94, 95, 104, 114, 115, 156, 165, 205, 237, 585, 634], "df_current_batch": 93, "concat": [93, 497, 692, 799, 913], "partition_df": 93, "partition_bi": [93, 157, 237], "as_dict": [93, 171, 237], "fh": 93, "write_csv": [93, 103, 237], "els": 93, "table_uri": [94, 104], "delta_table_opt": [94, 104], "lake": [94, 104, 551], "uri": [94, 102, 104], "root": [94, 104, 376, 386, 395, 406, 440, 474, 541, 542, 846, 913], "For": [94, 95, 102, 104, 133, 145, 158, 159, 219, 237, 286, 294, 346, 347, 348, 394, 411, 436, 501, 510, 511, 542, 572, 577, 618, 634, 642, 751, 752, 753, 813, 843, 894, 913], "filesystem": [94, 104], "absolut": [94, 104, 110, 111, 182, 237, 243, 346, 347, 348, 542, 638, 751, 752, 753, 913], "rel": [94, 104, 110, 111, 331, 346, 347, 348, 542, 734, 751, 752, 753, 913], "But": [94, 104], "gc": [94, 104], "azur": [94, 104], "thu": [94, 103, 104, 133, 237, 528, 642, 913], "backend": [94, 102, 104], "deltalak": [94, 104], "cloud": [94, 104, 105], "configur": [94, 104], "authent": [94, 104], "keyword": [94, 100, 104, 172, 173, 182, 186, 214, 217, 237, 527, 530, 542, 588, 595, 612, 616, 634, 913], "table_path": [94, 104], "partit": [94, 100, 102, 104, 105, 157, 171, 237], "avoid": 94, "year": [94, 104, 144, 145, 159, 210, 237, 321, 331, 332, 335, 340, 341, 416, 417, 418, 419, 420, 422, 423, 424, 504, 505, 542, 571, 572, 577, 634, 720, 734, 735, 738, 743, 744], "2021": [94, 104, 126, 142, 144, 210, 237, 468, 516, 571, 634, 720, 783, 875, 913], "aw": [94, 104], "see": [94, 95, 102, 104, 110, 111, 114, 115, 158, 172, 173, 237, 297, 298, 299, 338, 354, 363, 377, 385, 436, 525, 542, 694, 695, 696, 741, 787, 843, 913, 920], "bucket": [94, 104, 335, 340, 738, 743], "aws_access_key_id": [94, 104], "the_aws_access_key_id": [94, 104], "aws_secret_access_kei": [94, 104], "the_aws_secret_access_kei": [94, 104], "googl": [94, 104], "service_account": [94, 104], "service_account_json_absolute_path": [94, 104], "az": [94, 104], "adl": [94, 104], "abf": [94, 104], "azure_storage_account_nam": [94, 104], "azure_storage_account_kei": [94, 104], "without_fil": [94, 104], "track": [94, 104, 122, 237], "sheet_id": 95, "sheet_nam": 95, "xlsx2csv_option": 95, "read_csv_opt": 95, "excel": [95, 237, 551], "xlsx": [95, 237], "sheet": [95, 237], "xlsx2csv": [95, 109], "read_csv": [95, 103], "skip_empty_lin": 95, "my": [95, 104, 105], "datasheet": 95, "excel_fil": 95, "correct": [95, 347, 348, 377, 421, 436, 542, 581, 634, 752, 753, 787, 823, 843, 913], "look": [95, 286, 289, 683], "document": [95, 102, 452, 468, 859, 875], "fix": [95, 113, 114, 343, 416, 417, 418, 419, 420, 422, 423, 424, 542, 746], "whole": [95, 438, 439, 449, 542, 634, 856], "twice": [95, 237], "With": 95, "1000": [95, 131, 237, 322, 323, 471, 725], "spreadsheet": [95, 174, 237], "xl": 95, "xlsm": 95, "xlsb": 95, "odf": 95, "od": [95, 467, 874], "odt": 95, "memory_map": [96, 100, 106], "v2": [96, 106], "valid": [96, 100, 115, 119, 131, 237, 308, 443, 444, 449, 450, 452, 542, 704, 750, 763, 850, 851, 856, 857, 859, 865, 866, 913], "greatli": [96, 106], "repeat": [96, 106, 410, 412, 542], "o": [96, 106, 308, 448, 482, 542, 704, 855, 897, 913], "page": [96, 100, 106, 108, 237, 542, 551, 600, 634, 913], "give": [96, 100, 106, 107, 108, 165, 237, 318, 377, 412, 542, 551, 585, 634, 717, 787, 913], "That": [96, 581, 634], "filenam": 96, "my_fil": 96, "write_ipc": [96, 237], "read_ndjson": 98, "parallelstrategi": [100, 108], "use_statist": [100, 108], "directori": [100, 237], "awar": [100, 156, 183, 199, 237, 468, 875], "stabl": [100, 184, 237], "row_group": [100, 108], "direct": [100, 102, 108, 208, 237], "read_tabl": 100, "connection_uri": 102, "partition_on": 102, "partition_rang": 102, "partition_num": 102, "databas": 102, "postgresql": [102, 403, 542], "redshift": 102, "mysql": 102, "mariadb": 102, "clickhous": 102, "oracl": 102, "bigqueri": 102, "server": 102, "pleas": [102, 104], "connectorx": [102, 109], "doc": 102, "github": 102, "com": [102, 346, 347, 348, 449, 542, 751, 752, 753, 856, 913], "sfu": 102, "db": 102, "connector": 102, "destin": 102, "raw": 102, "transfer": 102, "partition_col": 102, "explicitli": [102, 113, 114, 530], "with_column_nam": 103, "push": [103, 105, 106, 107, 108], "down": [103, 105, 106, 107, 108, 358, 542, 761, 913], "therebi": [103, 106, 107, 108], "potenti": [103, 106, 107, 108], "overhead": [103, 106, 107, 108], "updat": [103, 237, 634], "just": [103, 165, 237, 585, 634], "realloc": [103, 106, 107, 133, 237, 642, 913], "my_long_fil": 103, "doesn": [103, 345, 542, 749, 903, 913], "thing": [103, 489, 509], "less": [103, 159, 237, 454, 460, 465, 471, 577, 634, 861, 867, 872, 878], "limit": [103, 135, 237, 288, 297, 298, 299, 354, 359, 542, 566, 573, 600, 634, 694, 695, 696, 758, 913], "breezah": 103, "languag": [103, 144, 145, 159, 210, 237, 331, 335, 340, 416, 417, 418, 419, 420, 422, 423, 424, 542, 571, 572, 577, 634, 734, 738, 743], "terribl": 103, "mydf": 103, "lambda": [103, 122, 138, 173, 219, 237, 249, 286, 346, 347, 348, 385, 386, 415, 491, 501, 502, 503, 510, 517, 525, 531, 542, 581, 588, 618, 634, 643, 681, 751, 752, 753, 913], "raw_filesystem": 104, "adjust": [104, 346, 347, 348, 436, 542, 751, 752, 753, 843, 913], "subtreefilesystem": 104, "reli": 104, "mention": 104, "ensur": [104, 114, 115, 117, 143, 171, 182, 237, 364, 486, 542, 570, 581, 634, 894, 901, 913], "gcsf": 104, "pyfilesystem": 104, "fsspechandl": 104, "gcsfilesystem": 104, "id": [104, 219, 458, 459, 484, 486, 542, 618, 899, 913], "token": 104, "pa_f": 104, "adlf": 104, "azureblobfilesystem": 104, "account_nam": 104, "account_kei": 104, "allow_pyarrow_filt": 105, "lead": [105, 237, 428, 455, 467, 471, 477, 486, 518, 521, 528, 542, 581, 618, 634, 833, 862, 874, 878, 913], "comparison": 105, "dset": 105, "folder": 105, "out": [105, 109, 145, 237, 271, 285, 290, 366, 369, 443, 445, 542, 572, 599, 600, 634, 666, 680, 684, 850, 852], "1970": 105, "stdout": [109, 142, 237], "14": [109, 122, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 237, 321, 363, 542, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 738], "platform": 109, "linux": 109, "microsoft": 109, "standard": [109, 193, 237, 321, 347, 422, 436, 441, 452, 529, 542, 603, 634, 720, 752, 843, 847, 859, 913], "wsl2": 109, "x86_64": 109, "glibc2": 109, "main": 109, "jul": [109, 468, 875], "56": [109, 479, 542], "gcc": 109, "20210110": 109, "23": [109, 144, 145, 237, 314, 319, 335, 505, 571, 572, 634, 713, 718], "check_dtyp": [110, 111], "check_exact": [110, 111], "rtol": [110, 111], "1e": [110, 111], "atol": [110, 111], "nans_compare_equ": [110, 111], "check_column_ord": 110, "check_row_ord": 110, "assertionerror": [110, 111], "compar": [110, 111, 139, 237, 490, 830, 913], "exactli": [110, 111, 114, 115, 464, 465, 838, 871, 872, 913], "toler": [110, 111, 159, 237, 577, 634], "inexact": [110, 111], "assert": [110, 111, 113, 114, 115, 145, 237, 551, 572, 634, 763, 913], "irrespect": 110, "unsort": 110, "check_nam": 111, "s1": [111, 138, 237, 895, 904, 913], "searchstrategi": [112, 114, 115], "null_prob": [112, 114, 115], "percentag": [112, 114, 115, 404, 542, 806, 913], "chanc": [112, 114, 115], "flag": [112, 428, 542, 562, 581, 634, 833, 913], "hypothesi": [112, 113, 114, 115, 920], "sampled_from": 112, "unique_small_int": 112, "ccy": 112, "gbp": 112, "eur": [112, 126, 142, 237], "jpy": 112, "oneormoredatatyp": [113, 237, 783, 913], "min_col": [113, 114], "max_col": [113, 114], "suitabl": [113, 427, 542, 829, 913], "standalon": [113, 114], "itself": [113, 579, 634], "explicit": [113, 492, 525], "random": [113, 114, 115, 146, 184, 237, 360, 409, 426, 432, 542, 764, 811, 828, 839, 913], "mincol": 113, "exact": [113, 114, 115, 190, 237, 468, 875], "especi": 113, "punctuat": 113, "test_special_char_colname_init": 113, "z": [113, 114, 131, 152, 154, 158, 165, 237, 264, 295, 360, 412, 468, 542, 576, 585, 601, 634, 690, 758, 875, 913], "test_unique_xyz": 113, "assert_someth": 113, "min_siz": [114, 115], "max_siz": [114, 115], "include_col": 114, "allow_infin": [114, 115], "allowed_dtyp": [114, 115], "excluded_dtyp": [114, 115], "describ": [114, 142, 237, 913], "desir": 114, "ignor": [114, 115, 163, 194, 237, 267, 309, 334, 346, 347, 348, 400, 401, 542, 662, 707, 737, 751, 752, 753, 802, 803, 913], "n_chunk": [114, 115, 237, 913], "randomis": 114, "individu": [114, 145, 237, 249, 450, 542, 572, 600, 634, 692, 857, 913], "append": [114, 133, 158, 159, 237, 410, 542, 576, 577, 634, 913], "onto": 114, "independ": [114, 115], "either": [114, 145, 160, 163, 171, 182, 194, 237, 572, 579, 634], "basi": [114, 237], "pct": 114, "take": [114, 138, 166, 173, 196, 237, 331, 478, 507, 509, 542, 586, 606, 634, 734, 886, 904, 913], "preced": 114, "disallow": [114, 115], "exclud": [114, 115, 304, 307, 364, 496, 528, 542, 768, 783, 913], "deploi": [114, 115], "characterist": [114, 115], "develop": [114, 115], "directli": [114, 115, 346, 347, 348, 542, 634, 751, 752, 753, 913], "concret": [114, 115], "test_repr": [114, 115], "isinst": [114, 115, 237], "repr": [114, 115], "known": [114, 618], "colnam": [114, 130, 237, 386, 542, 561, 634], "df_strategi": 114, "15836": 114, "1755e": 114, "38": 114, "575050513": 114, "constructor": 115, "max_data_s": 115, "distinct": [115, 171, 237, 287, 409, 504, 505, 506, 542, 682, 811, 913], "54666": 115, "35": [115, 309, 542, 707, 913], "6414": 115, "63290": 115, "pool": 116, "toggl": [117, 468, 875], "scope": 119, "lifetim": 119, "initi": [119, 501, 510], "whatev": 119, "were": 119, "enter": 119, "set_verbos": 119, "do_various_th": 119, "restor": 119, "nan_as_nul": 121, "_pyarrowdatafram": 121, "effect": [121, 138, 237, 249, 542, 614, 634], "nullabl": 121, "extens": [121, 202, 237, 895, 913], "propag": [121, 163, 194, 237, 400, 401, 542, 802, 803, 913], "return_dtyp": [122, 237, 249, 385, 491, 517, 542, 643, 913], "inference_s": [122, 237], "256": [122, 237, 806, 913], "user": [122, 173, 219, 237, 249, 428, 491, 542, 588, 618, 634, 643, 833, 913], "udf": [122, 173, 219, 237, 249, 491, 542, 588, 618, 634, 643, 913], "logic": [122, 219, 237, 481, 542, 569, 576, 591, 615, 618, 634, 896, 913], "almost": [122, 219, 237, 618], "_significantly_": [122, 219, 237, 618], "intens": [122, 219, 237, 618], "becaus": [122, 131, 144, 160, 208, 219, 237, 268, 571, 618, 634, 643, 663, 750, 913], "engin": [122, 219, 237, 581, 618, 634], "forc": [122, 159, 219, 237, 576, 577, 618, 634], "materi": [122, 219, 237, 589, 618, 634], "parallelis": [122, 219, 237, 618], "optimis": [122, 219, 237, 618, 634, 831, 832, 913], "wherev": [122, 219, 237, 249, 542, 618], "strongli": [122, 182, 219, 237, 249, 542, 618], "achiev": [122, 219, 237, 249, 542, 618], "best": [122, 219, 237, 249, 542, 618], "tri": [122, 237], "arbitrarili": [122, 237], "rearrang": [122, 237], "preserv": [122, 202, 237, 433, 542, 840, 895, 913], "syntax": [122, 169, 237, 598, 634, 913], "15": [122, 144, 145, 150, 237, 308, 309, 335, 340, 351, 502, 542, 571, 572, 634, 704, 707, 738, 743, 755, 913], "better": [122, 219, 237, 249, 486, 542, 618, 831, 832, 913], "scalar": [122, 155, 237, 427, 491, 542, 786, 829, 913], "ident": [123, 124, 237, 555, 556, 634, 693, 697, 913], "cheap": [123, 124, 237, 555, 556, 634, 642, 693, 697, 913], "deepcopi": [123, 124, 237, 555, 556, 634, 693, 697, 913], "13": [123, 124, 134, 135, 141, 145, 150, 160, 168, 214, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 237, 415, 417, 497, 501, 510, 533, 542, 555, 556, 565, 566, 572, 579, 612, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 634, 643, 738, 743, 744, 913], "clear": [124, 237, 556, 634, 697, 913], "properti": [125, 130, 148, 185, 187, 213, 237, 551, 558, 561, 594, 611, 634], "appl": [125, 149, 158, 178, 180, 198, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 237, 406, 414, 447, 466, 474, 542, 576, 592, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 634, 854, 873], "banana": [125, 198, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 237, 406, 414, 474, 542, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629], "summari": [126, 237, 706, 913], "glimps": [126, 147, 237], "usd": [126, 142, 237], "2020": [126, 142, 145, 237, 315, 317, 320, 322, 323, 325, 327, 330, 334, 337, 338, 468, 572, 634, 714, 716, 719, 725, 727, 730, 733, 737, 740, 875], "null_count": [126, 129, 237, 308, 542, 704, 706, 913], "266667": [126, 237], "666667": [126, 163, 211, 225, 237, 346, 542, 610, 624, 634], "std": [126, 237, 415, 542, 634, 706, 824, 913], "101514": [126, 237], "707107": [126, 237, 347, 542, 752, 913], "57735": [126, 237], "median": [126, 174, 237, 418, 542, 613, 634, 820, 913], "more_column": [127, 132, 237, 349, 508, 542, 559, 563, 634], "posit": [127, 132, 143, 171, 186, 192, 214, 217, 237, 346, 347, 348, 349, 403, 439, 457, 495, 496, 508, 527, 542, 559, 563, 570, 595, 602, 612, 616, 634, 751, 752, 753, 864, 913], "Or": [127, 143, 144, 145, 159, 192, 210, 217, 237, 403, 439, 496, 534, 542, 559, 570, 571, 572, 577, 602, 616, 634], "subset": [129, 169, 206, 237, 560, 607, 634], "snippet": [129, 237, 560, 634], "is_nul": [129, 237, 542, 560, 634, 913], "height": [129, 237], "sizeunit": [131, 237, 750, 913], "total": [131, 237, 750, 913], "heap": [131, 237, 750, 913], "its": [131, 207, 237, 314, 335, 340, 608, 634, 713, 738, 743, 750, 913], "bitmap": [131, 237, 750, 913], "therefor": [131, 237, 286, 750, 913], "structarrai": [131, 237, 750, 913], "constant": [131, 145, 237, 352, 542, 572, 634, 750, 756, 913], "unchang": [131, 237, 249, 481, 542, 581, 618, 634, 750, 896, 913], "visibl": [131, 237, 750, 913], "capac": [131, 190, 237, 750, 838, 913], "ffi": [131, 237, 750, 913], "kb": [131, 237, 750, 913], "mb": [131, 237, 750, 913], "gb": [131, 237, 750, 913], "tb": [131, 237, 750, 913], "scale": [131, 237, 750, 913], "revers": [131, 237, 282, 303, 304, 305, 306, 307, 386, 406, 474, 542, 634, 700, 701, 702, 703, 913], "1_000_000": [131, 237, 750, 913], "25888898": [131, 237], "689577102661133": [131, 237], "long": [132, 165, 208, 237, 563, 585, 634], "well": [132, 174, 237, 364, 542, 563, 634, 768, 913], "letter": [132, 222, 231, 237, 349, 508, 542, 563, 621, 630, 634], "locat": [133, 180, 203, 207, 237, 427, 542, 608, 634, 642, 829, 832, 885, 913], "faster": [133, 208, 237, 249, 415, 456, 484, 542, 599, 600, 634, 642, 643, 817, 863, 913], "onlin": [133, 237, 642, 913], "rerun": [133, 237, 642, 913], "latter": [133, 237, 642, 913], "20": [133, 149, 150, 173, 175, 179, 180, 237, 256, 257, 258, 261, 309, 335, 340, 360, 363, 512, 516, 542, 588, 634, 707, 743, 913], "40": [133, 173, 237, 335, 340, 360, 542, 588, 634, 720, 743], "50": [133, 237, 297, 298, 299, 335, 340, 542, 694, 743, 913], "60": [133, 237, 336, 337, 468, 735, 739, 740, 875], "fill_valu": [134, 189, 208, 237, 353, 430, 542, 565, 597, 634, 757, 836, 913], "Not": [134, 237, 370, 372, 387, 542, 565, 634], "To": [134, 237, 311, 312, 354, 518, 521, 531, 542, 565, 634], "fillnullstrategi": [135, 237, 354, 542, 566, 634, 758, 913], "matches_supertyp": [135, 237, 566, 634], "forward": [135, 159, 237, 354, 359, 542, 566, 577, 634, 758, 913], "consecut": [135, 237, 288, 354, 359, 442, 542, 566, 634, 758, 849, 913], "supertyp": [135, 237, 248, 542, 566, 634], "fill_nan": [135, 237, 542, 634, 913], "OR": [136, 237, 490, 567, 634], "reduct": [138, 237], "supercast": [138, 237], "similar": [138, 159, 237, 403, 542, 577, 634], "parent": [138, 237], "rule": [138, 237, 338, 741], "arithmet": [138, 237], "zip_with": [138, 237, 913], "foo11": [138, 237], "bar22": [138, 237], "null_equ": [139, 237, 830, 913], "retriev": [140, 237, 262, 263, 472, 657, 658, 879], "return_as_str": [142, 237], "preview": [142, 237], "wide": [142, 165, 208, 237, 585, 634], "nice": [142, 237], "few": [142, 237], "rather": [142, 159, 237, 471, 577, 634, 878], "head": [142, 161, 195, 237, 248, 380, 542, 580, 634, 789, 913], "tail": [142, 147, 237, 248, 436, 542, 634, 843, 913], "intoexpr": [143, 144, 145, 186, 192, 214, 217, 237, 403, 439, 493, 495, 498, 501, 510, 527, 530, 542, 570, 571, 572, 595, 602, 616, 634], "more_bi": [143, 171, 192, 237, 439, 542, 570, 602, 634], "maintain_ord": [143, 171, 174, 206, 210, 218, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 237, 244, 249, 477, 483, 499, 542, 557, 562, 564, 570, 589, 598, 599, 600, 607, 617, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 634, 898, 913], "consist": [143, 171, 237, 468, 570, 634, 875], "agg": [143, 144, 145, 237, 244, 249, 355, 357, 438, 439, 477, 488, 499, 542, 557, 562, 564, 570, 571, 572, 589, 598, 634], "anoth": [143, 237, 285, 308, 313, 542, 570, 613, 634, 643, 680, 704, 712, 830, 913], "index_column": [144, 145, 237, 571, 572, 634], "truncat": [144, 237, 571, 589, 634], "include_boundari": [144, 237, 571, 634], "start_bi": [144, 237, 571, 634], "startbi": [144, 237, 571, 634], "dynamicgroupbi": [144, 237], "normal": [144, 237, 345, 377, 436, 542, 571, 634, 749, 787, 843, 913], "groupbi": [144, 145, 169, 237, 244, 249, 268, 308, 355, 357, 403, 438, 439, 477, 488, 491, 499, 542, 557, 562, 564, 571, 572, 589, 598, 634, 663, 704, 913], "member": [144, 237, 571, 634, 775, 913], "seen": [144, 237, 288, 359, 542, 571, 634], "roll": [144, 145, 237, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 497, 542, 571, 572, 634, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 913], "slot": [144, 237, 267, 308, 309, 542, 571, 634, 662, 704, 707, 913], "1n": [144, 145, 159, 210, 237, 331, 335, 340, 416, 417, 418, 419, 420, 422, 423, 424, 542, 571, 572, 577, 634, 734, 738, 743], "nanosecond": [144, 145, 159, 210, 237, 331, 335, 336, 340, 416, 417, 418, 419, 420, 422, 423, 424, 506, 542, 571, 572, 577, 634, 734, 738, 739, 743], "1u": [144, 145, 159, 210, 237, 331, 335, 340, 416, 417, 418, 419, 420, 422, 423, 424, 542, 571, 572, 577, 634, 734, 738, 743], "microsecond": [144, 145, 159, 210, 237, 331, 335, 336, 340, 416, 417, 418, 419, 420, 422, 423, 424, 505, 506, 542, 571, 572, 577, 589, 634, 734, 738, 743], "1m": [144, 145, 159, 210, 237, 322, 323, 325, 330, 331, 335, 337, 340, 416, 417, 418, 419, 420, 422, 423, 424, 542, 571, 572, 577, 634, 725, 727, 733, 734, 738, 740, 743], "millisecond": [144, 145, 159, 210, 237, 331, 335, 340, 416, 417, 418, 419, 420, 422, 423, 424, 506, 542, 571, 572, 577, 634, 734, 738, 743], "1h": [144, 145, 159, 210, 237, 331, 335, 340, 416, 417, 418, 419, 420, 422, 423, 424, 542, 571, 572, 577, 634, 718, 734, 738, 743], "1w": [144, 145, 159, 210, 237, 331, 335, 340, 416, 417, 418, 419, 420, 422, 423, 424, 542, 571, 572, 577, 634, 734, 738, 743], "week": [144, 145, 159, 210, 237, 331, 335, 340, 342, 416, 417, 418, 419, 420, 422, 423, 424, 506, 542, 571, 572, 577, 634, 734, 738, 743, 745], "month": [144, 145, 159, 210, 237, 316, 331, 335, 340, 416, 417, 418, 419, 420, 422, 423, 424, 504, 505, 542, 571, 572, 577, 634, 715, 734, 738, 743], "1y": [144, 145, 159, 210, 237, 331, 335, 340, 416, 417, 418, 419, 420, 422, 423, 424, 542, 571, 572, 577, 634, 734, 738, 743, 747], "1i": [144, 145, 159, 210, 237, 331, 416, 417, 418, 419, 420, 422, 423, 424, 542, 571, 572, 577, 634, 734], "10i": [144, 145, 237, 571, 572, 634], "ascend": [144, 145, 237, 571, 572, 634], "often": [144, 145, 237, 266, 412, 542, 571, 572, 634, 661], "dynam": [144, 237, 416, 417, 418, 419, 420, 422, 423, 424, 542, 571, 634], "matter": [144, 145, 156, 183, 199, 237, 571, 572, 634], "neg": [144, 147, 188, 189, 191, 195, 237, 280, 281, 429, 430, 437, 462, 542, 571, 596, 597, 601, 614, 634, 675, 676, 835, 836, 844, 869, 913], "_lower_bound": [144, 237, 571, 634], "_upper_bound": [144, 237, 571, 634], "impact": [144, 237, 571, 634], "harder": [144, 237, 571, 634], "side": [144, 145, 237, 364, 416, 417, 418, 419, 420, 422, 423, 424, 427, 542, 571, 572, 634, 768, 829, 913], "inclus": [144, 145, 237, 364, 416, 417, 418, 419, 420, 422, 423, 424, 463, 464, 542, 571, 572, 634, 768, 870, 871, 913], "datapoint": [144, 237, 571, 634], "mondai": [144, 237, 342, 571, 634, 745], "date_rang": [144, 210, 237, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 571, 634, 712, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747], "30m": [144, 237, 335, 340, 571, 634, 738, 743], "time_min": [144, 237, 571, 634], "time_max": [144, 237, 571, 634], "boundari": [144, 237, 297, 298, 299, 542, 571, 634, 694, 695, 696, 913], "time_count": [144, 237, 571, 634], "_lower_boundari": [144, 237, 571, 634], "_upper_boundari": [144, 237, 571, 634], "lower_bound": [144, 237, 542, 571, 634, 900, 913], "upper_bound": [144, 237, 286, 542, 571, 634, 792, 913], "time_agg_list": [144, 237, 571, 634], "idx": [144, 157, 237, 286, 571, 634, 681, 832, 913], "arang": [144, 208, 219, 237, 571, 618, 634], "2i": [144, 237, 571, 634], "3i": [144, 237, 571, 634], "a_agg_list": [144, 237, 571, 634], "rollinggroupbi": [145, 237], "dynamic_groupbi": [145, 237, 572, 634], "groupby_dynam": [145, 237, 572, 634], "45": [145, 237, 314, 335, 340, 444, 450, 572, 634, 713, 738, 743, 851, 857], "48": [145, 237, 572, 634], "18": [145, 237, 307, 335, 340, 343, 363, 376, 542, 572, 589, 634, 746], "19": [145, 159, 237, 335, 572, 577, 634, 738, 743], "43": [145, 237, 307, 542, 572, 634], "strptime": [145, 237, 338, 572, 634, 741], "2d": [145, 201, 237, 572, 634, 715], "sum_a": [145, 237, 572, 634], "min_a": [145, 237, 572, 634], "max_a": [145, 237, 572, 634], "to_list": [145, 237, 286, 572, 634, 681, 913], "seed": [146, 184, 237, 360, 426, 432, 542, 764, 828, 839, 913], "seed_1": [146, 237, 360, 542, 764, 913], "seed_2": [146, 237, 360, 542, 764, 913], "seed_3": [146, 237, 360, 542, 764, 913], "hash": [146, 237, 542, 913], "u64": [146, 237, 360, 411, 542, 589, 634, 764, 913], "10783150408545073287": [146, 237], "1438741209321515184": [146, 237], "10047419486152048166": [146, 237], "2047317070637311557": [146, 237], "last": [147, 159, 174, 192, 195, 206, 231, 237, 258, 261, 271, 284, 308, 316, 332, 341, 438, 465, 476, 532, 542, 577, 602, 605, 607, 630, 634, 652, 655, 666, 679, 704, 715, 735, 744, 872, 884, 913], "_except_": [147, 195, 237], "ab": [147, 195, 214, 237, 472, 473, 518, 521, 542, 612, 634, 913], "grown": [149, 237], "baz": [150, 151, 174, 207, 237, 463, 465, 575, 608, 634, 872], "intermedi": [151, 237, 575, 634, 767, 913], "linear": [151, 176, 229, 237, 264, 363, 390, 408, 420, 497, 498, 524, 542, 575, 590, 628, 634, 659, 767, 810, 822, 913], "mask": [152, 154, 237, 265, 289, 290, 365, 367, 375, 443, 445, 542, 660, 683, 684, 759, 768, 770, 773, 784, 807, 808, 831, 850, 852, 904, 913], "visual": [152, 154, 237], "buffer_s": [156, 237], "500": [156, 209, 237, 564, 609, 634, 724, 726, 732, 739, 818, 819, 821, 913], "veri": [156, 205, 237, 249, 542, 556, 634, 697, 913], "fit": [156, 190, 208, 237, 431, 542, 837, 838, 913], "speedup": [156, 237], "signific": [156, 237, 249, 542], "4x": [156, 237], "disabl": [156, 237], "export": [156, 157, 183, 199, 237, 515], "materialis": [156, 157, 182, 183, 237], "iter_row": [157, 182, 183, 237], "17_500": [157, 237], "2023": [157, 237, 314, 713], "klmnoopqrstuvwxyz": [157, 237], "__name__": [157, 237], "7500": [157, 237], "recordbatch": [157, 237], "15_000": [157, 237], "record_batch": [157, 237], "to_arrow": [157, 237, 913], "to_batch": [157, 237], "date32": [157, 237], "large_str": [157, 197, 202, 237], "15000": [157, 237], "2500": [157, 237], "left_on": [158, 159, 237, 576, 577, 634], "right_on": [158, 159, 237, 576, 577, 634], "joinstrategi": [158, 237, 576, 634], "suffix": [158, 159, 186, 214, 217, 237, 292, 370, 372, 373, 374, 403, 414, 447, 542, 576, 577, 595, 612, 613, 616, 634, 686, 854], "_right": [158, 159, 237, 576, 577, 634], "outer": [158, 237, 576, 634], "semi": [158, 237, 576, 634], "anti": [158, 237, 576, 634, 831, 832, 913], "cross": [158, 237, 576, 634], "join_asof": [158, 237, 576, 634], "stringcach": [158, 237, 551], "other_df": [158, 237, 576, 634], "by_left": [159, 237, 577, 634], "by_right": [159, 237, 577, 634], "asofjoinstrategi": [159, 237, 577, 634], "allow_parallel": [159, 237, 576, 577, 634], "force_parallel": [159, 237, 576, 577, 634], "asof": [159, 237, 577, 634], "asof_join": [159, 237], "search": [159, 237, 577, 634], "greater": [159, 237, 436, 465, 542, 577, 634, 843, 872, 913], "numer": [159, 237, 297, 298, 299, 364, 412, 431, 542, 551, 577, 634, 694, 695, 696, 768, 781, 830, 837, 913], "distanc": [159, 237, 577, 634], "plan": [159, 160, 237, 554, 562, 569, 576, 577, 591, 598, 615, 634], "gdp": [159, 237, 577, 634], "2016": [159, 237, 577, 634], "2017": [159, 237, 577, 634], "2018": [159, 237, 577, 634], "2019": [159, 237, 577, 634], "record": [159, 237, 577, 634], "jan": [159, 237, 577, 634], "1st": [159, 237, 577, 634], "4164": [159, 237, 577, 634], "4411": [159, 237, 577, 634], "4566": [159, 237, 577, 634], "4696": [159, 237, 577, 634], "popul": [159, 237, 577, 634], "12th": [159, 237, 577, 634], "82": [159, 237, 577, 634], "66": [159, 237, 577, 634, 822, 913], "83": [159, 237, 577, 634], "52": [159, 214, 237, 425, 542, 577, 612, 634], "request": [160, 237], "small": [160, 237, 335, 564, 634], "describe_plan": [160, 237, 634], "unoptim": [160, 237, 634], "describe_optimized_plan": [160, 237, 634], "show_graph": [160, 237, 634], "un": [160, 237], "graphviz": [160, 237, 598, 634], "advis": [160, 237], "axi": [162, 163, 165, 167, 194, 237, 585, 634], "null_strategi": [163, 194, 237], "nullstrategi": [163, 194, 237], "spam": [163, 237], "id_var": [165, 237, 585, 634], "value_var": [165, 237, 585, 634], "variable_nam": [165, 237, 585, 634], "value_nam": [165, 237, 585, 634], "unpivot": [165, 237, 585, 634], "leav": [165, 237, 585, 634], "identifi": [165, 171, 206, 237, 585, 607, 634], "massag": [165, 237, 585, 634], "measur": [165, 237, 585, 634], "merg": [166, 237, 586, 634], "caller": [166, 237, 286, 581, 586, 618, 634], "respons": [166, 237, 586, 634], "One": [169, 174, 237, 913], "what": [169, 237, 894, 903, 913], "struct": [169, 186, 204, 207, 214, 237, 286, 387, 451, 464, 465, 486, 501, 502, 503, 517, 542, 595, 608, 612, 634, 681, 858, 871, 872], "pack": [169, 237], "expr_unique_subset": [169, 237], "df_nuniqu": [169, 237], "df_agg_nuniqu": [169, 237], "simpl": [169, 237], "pearson": [172, 237, 377, 436, 523, 542, 787, 843, 913], "correl": [172, 237, 523, 528], "coeffici": [172, 237, 436, 542, 843, 913], "corrcoef": [172, 237], "func": [173, 237, 588, 634], "offer": [173, 237, 542, 588, 634], "recommend": [173, 237], "fulli": [173, 184, 237], "advantag": [173, 237], "cast_str_to_int": [173, 237, 588, 634], "col_nam": [173, 237, 588, 634], "tdf": [173, 237, 588, 634], "aggregate_funct": [174, 237], "pivotagg": [174, 237], "sort_column": [174, 237], "predefin": [174, 237], "predict": [174, 177, 210, 237], "transpos": [174, 237], "discoveri": [174, 237], "interpol": [176, 229, 237, 354, 390, 408, 420, 524, 542, 590, 628, 634, 810, 822, 913], "rollinginterpolationmethod": [176, 229, 237, 408, 420, 524, 542, 590, 628, 634, 810, 822, 913], "midpoint": [176, 229, 237, 408, 420, 524, 542, 590, 628, 634, 810, 822, 913], "subsequ": [177, 202, 237, 562, 634], "old": [178, 237, 592, 634], "new_col": [179, 237], "val": [181, 237, 295, 481, 542, 593, 634, 690], "by_pred": [182, 237], "accord": [182, 237, 387, 542, 720], "never": [182, 237], "mutual": [182, 237], "exclus": [182, 237], "addition": [182, 237], "clariti": [182, 237], "anyth": [182, 237], "toomanyrowsreturn": [182, 237, 551], "norowsreturn": [182, 237, 551], "inherit": [182, 237], "rowsexcept": [182, 237, 551], "frac": [184, 237, 346, 347, 348, 426, 436, 482, 542, 751, 752, 753, 828, 843, 897, 913], "with_replac": [184, 237, 426, 542, 828, 913], "shuffl": [184, 219, 237, 426, 542, 618, 828, 913], "neither": [184, 237], "nor": [184, 237], "modul": [184, 237, 426, 432, 541, 542, 828, 839, 913], "more_expr": [186, 214, 237, 403, 495, 527, 542, 595, 612, 634], "named_expr": [186, 214, 237, 527, 530, 595, 612, 634], "threshold": [186, 237, 595, 634], "instanti": [186, 214, 237, 595, 612, 634], "set_auto_structifi": [186, 214, 237, 595, 612, 634], "integer_dtyp": [186, 237, 595, 634], "is_odd": [186, 237, 595, 634], "_is_odd": [186, 237, 595, 634], "shift_and_fil": [188, 237, 542, 634, 913], "shift": [189, 237, 267, 309, 404, 430, 497, 542, 597, 634, 662, 707, 806, 836, 913], "shrink": [190, 237, 431, 542, 837, 838, 913], "hold": [190, 237], "nulls_last": [192, 237, 258, 261, 438, 542, 602, 634, 652, 655, 913], "ddof": [193, 211, 237, 441, 487, 523, 528, 529, 533, 542, 603, 610, 634, 847, 902, 913], "deviat": [193, 237, 347, 422, 441, 529, 542, 603, 634, 752, 847, 913], "degre": [193, 211, 237, 441, 487, 523, 528, 542, 847, 902, 913], "freedom": [193, 211, 237, 441, 487, 523, 528, 542, 847, 902, 913], "816497": [193, 237], "21": [194, 237, 512], "16a": [194, 237], "27b": [194, 237], "38c": [194, 237], "nth": [196, 237, 465, 478, 542, 606, 634, 872, 886, 913], "mostli": [197, 237, 355, 542], "categoricaltyp": [197, 237], "as_seri": [198, 237], "fruit": [198, 237, 406, 414, 447, 466, 474, 542, 854, 873], "car": [198, 237, 406, 414, 474, 542], "beetl": [198, 237, 406, 414, 474, 542], "audi": [198, 237, 406, 414, 474, 542], "28": [198, 237, 343, 746], "300": [198, 237, 818, 819, 821, 913], "re": [201, 237, 515], "ll": [201, 237], "numpy_arrai": [201, 237], "use_pyarrow_extension_arrai": [202, 237, 895, 913], "trigger": [202, 237, 895, 913], "sent": [202, 237, 894, 895, 913], "pandas_df1": [202, 237], "pandas_df2": [202, 237], "pandas_df2_pa": [202, 237], "na": [202, 237, 895, 913], "three": [204, 237, 427, 542], "four": [204, 237], "five": [204, 237], "num": [204, 237, 364, 367, 471, 542, 768, 913], "include_head": [205, 237], "header_nam": [205, 237], "column_nam": [205, 237], "perhap": [205, 237], "column_2": [205, 237], "name_gener": [205, 237, 286, 681], "base_nam": [205, 237], "my_column_": [205, 237], "my_column_0": [205, 237], "my_column_1": [205, 237], "my_column_2": [205, 237], "uniquekeepstrategi": [206, 237, 607, 634], "decompos": [207, 237, 608, 634], "t_a": [207, 237, 608, 634], "t_b": [207, 237, 608, 634], "t_c": [207, 237, 608, 634], "t_d": [207, 237, 608, 634], "womp": [207, 237, 608, 634], "t_": [207, 237, 608, 634], "t_struct": [207, 237, 608, 634], "step": [208, 237, 492], "unstackdirect": [208, 237], "much": [208, 237, 285, 308, 542, 680, 704, 913], "pivot": [208, 237], "phase": [208, 237], "subject": [208, 237], "ascii_uppercas": [208, 237], "col1": [208, 237, 634], "col2": [208, 237, 634], "h": [208, 237, 338, 431, 468, 542, 875], "col1_0": [208, 237], "col1_1": [208, 237], "col1_2": [208, 237], "col2_0": [208, 237], "col2_1": [208, 237], "col2_2": [208, 237], "syntact": [209, 237, 503, 508, 509, 513, 524, 527, 531, 609, 634, 846, 913], "sugar": [209, 237, 503, 508, 509, 513, 524, 527, 531, 609, 634, 846, 913], "coalesc": [209, 237, 609, 634], "400": [209, 237, 609, 634, 818, 819, 821, 913], "600": [209, 237, 609, 634], "700": [209, 237, 609, 634], "new_df": [209, 237, 609, 634], "time_column": [210, 237], "frequenc": [210, 237], "forward_fil": [210, 237, 304, 307, 542], "06": [210, 237, 314, 321, 333, 334, 344, 738, 745], "varianc": [211, 237, 348, 377, 424, 487, 533, 542, 610, 634, 753, 787, 826, 902, 913], "grow": [212, 237], "is_not": [214, 237, 542, 612, 634], "not_c": [214, 237, 612, 634], "diff": [214, 237, 317, 320, 323, 325, 327, 330, 337, 542, 612, 634, 716, 719, 725, 727, 730, 733, 740, 913], "_diff": [214, 237, 612, 634], "row_nr": [215, 237, 387, 542, 614, 634, 832, 913], "more_agg": [217, 616], "named_agg": [217, 616], "_sum": [217, 616], "_mean_squar": [217, 616], "b_sum": [217, 616], "c_mean_squar": [217, 616], "17": [217, 425, 512, 542, 616, 698, 738, 913], "sub": [219, 292, 293, 447, 466, 686, 687, 854, 873], "triangl": [219, 618], "group_df": [219, 618], "nr": [222, 231, 621, 630], "maxim": [224, 256, 542, 623, 650, 913], "833333": [225, 624], "minim": [227, 257, 263, 431, 542, 626, 651, 658, 797, 837, 913], "overview": [237, 542, 551, 634, 913], "public": [237, 542, 551, 634, 913], "frameinittyp": [237, 634], "variou": [237, 542, 634, 913], "entri": [237, 634], "prevent": [237, 306, 307, 376, 475, 542, 634, 702, 703, 883, 913], "come": [237, 377, 542, 552, 633, 634, 787, 913], "behavior": [237, 249, 285, 491, 518, 521, 542, 680], "mydatafram": 237, "notic": [237, 634, 913], "df4": 237, "df5": 237, "df6": 237, "drop_in_plac": 237, "drop_nul": [237, 311, 542, 634, 913], "estimated_s": [237, 913], "explod": [237, 357, 413, 542, 634, 815, 913], "find_idx_by_nam": 237, "fold": [237, 394, 495, 501, 502, 525, 531], "frame_equ": [237, 335, 340], "get_column": [237, 531], "groupby_rol": [237, 416, 417, 418, 419, 420, 422, 423, 424, 542, 571, 634], "hash_row": 237, "hstack": 237, "insert_at_idx": 237, "is_dupl": [237, 542, 913], "is_empti": [237, 913], "is_uniqu": [237, 542, 913], "iter_slic": 237, "melt": [237, 634], "merge_sort": [237, 634], "n_uniqu": [237, 542, 913], "pearson_corr": 237, "pipe": [237, 542, 634], "quantil": [237, 420, 542, 634, 822, 913], "replace_at_idx": 237, "shrink_to_fit": [237, 913], "take_everi": [237, 542, 634, 913], "to_dict": 237, "to_numpi": [237, 385, 542, 913], "to_panda": [237, 913], "to_struct": 237, "unnest": [237, 464, 465, 473, 634, 871, 872], "unstack": 237, "upsampl": 237, "var": [237, 542, 634, 913], "write_avro": 237, "write_excel": 237, "workbook": 237, "worksheet": 237, "table_styl": 237, "table_nam": 237, "column_format": 237, "column_width": 237, "column_tot": 237, "conditional_format": 237, "dtype_format": 237, "autofilt": 237, "autofit": 237, "hidden_column": 237, "hide_gridlin": 237, "xlsxwriter": 237, "sheet1": 237, "notat": 237, "eg": [237, 335, 468], "medium": 237, "first_column": 237, "last_column": 237, "banded_column": 237, "banded_row": 237, "dd": 237, "mm": 237, "yyyi": 237, "0_": 237, "pixel": 237, "fn": [237, 501, 502, 510, 525], "averag": [237, 346, 347, 348, 409, 542, 751, 752, 753, 811, 913], "count_num": 237, "std_dev": 237, "typenam": 237, "definit": [237, 377, 542, 787, 913], "3_color_scal": 237, "data_bar": 237, "complet": [237, 894, 913], "flexibl": 237, "icon": 237, "formula": [237, 345, 542, 749, 913], "float_dtyp": 237, "uniform": 237, "pure": 237, "gridlin": 237, "care": [237, 249, 428, 542, 833, 913], "respect": 237, "readthedoc": [237, 920], "io": [237, 920], "working_with_conditional_format": 237, "dtm": [237, 314, 713], "10_000": 237, "20_000": 237, "30_000": 237, "b4": 237, "light": 237, "titl": 237, "integr": 237, "multi_fram": 237, "wb": 237, "basic": 237, "coordin": 237, "advanc": 237, "min_color": 237, "76933c": 237, "mid_color": 237, "c4d79b": 237, "max_color": 237, "ebf1d": 237, "data_bar_2010": 237, "bar_color": 237, "9bbb59": 237, "bar_negative_color_sam": 237, "bar_negative_border_color_sam": 237, "000": 237, "white": 237, "w": [237, 449, 856], "get_worksheet_by_nam": 237, "fmt_titl": 237, "add_format": 237, "font_color": 237, "4f6228": 237, "font_siz": 237, "ital": 237, "bold": 237, "customis": 237, "write_json": [237, 591, 634], "write_parquet": 237, "94": [244, 542], "confus": [246, 370, 372, 542], "tt": [246, 542], "tf": [246, 247, 542], "ff": [246, 247, 542], "upcast": [248, 542], "skip_nul": [249, 542, 643, 913], "pass_nam": [249, 542], "applystrategi": [249, 542], "thread_loc": [249, 542], "assum": [249, 542, 581, 618, 634], "stage": [249, 542], "considd": [249, 542], "code": [249, 428, 542, 579, 634, 833, 913], "amount": [249, 542], "releas": [249, 542], "gil": [249, 542], "discourag": [249, 542], "loop": [249, 542], "a_times_2": [249, 542], "invers": [250, 251, 252, 253, 254, 255, 542, 644, 645, 646, 647, 648, 649, 913], "cosin": [250, 251, 300, 301, 385, 542, 644, 645, 698, 699, 913], "570796": [250, 252, 542, 644, 646, 913], "hyperbol": [251, 253, 255, 301, 435, 480, 542, 645, 647, 649, 699, 842, 888, 913], "sine": [252, 253, 385, 434, 435, 542, 646, 647, 841, 842, 913], "881374": [253, 542, 647, 913], "tangent": [254, 255, 479, 480, 542, 648, 649, 887, 888, 913], "785398": [254, 542, 648, 913], "arg_wher": [259, 542], "arg_sort": [261, 542, 655, 913], "favour": [261, 351, 542, 655, 755, 913], "sublist": [262, 263, 265, 267, 270, 271, 272, 273, 274, 281, 284, 285, 657, 658, 660, 662, 665, 666, 667, 668, 669, 676, 679, 680, 681, 775, 913], "membership": [265, 660], "listcol": 266, "number_of_two": 266, "null_behavior": [267, 309, 542, 662, 707, 913], "nullbehavior": [267, 309, 542, 662, 707, 913], "th": [267, 309, 436, 542, 662, 707, 843, 913], "against": [268, 634, 663, 919], "blindli": [268, 663], "worth": [268, 663], "enough": [268, 436, 542, 663, 843, 913], "alreadi": [268, 308, 542, 663, 704, 913], "concat_list": [268, 507, 663], "rank": [268, 507, 528, 542, 663, 913], "exprnamespac": 269, "reshap": [269, 542, 664, 913], "flat": [269, 413, 542, 664, 815, 913], "taken": [281, 462, 477, 542, 676, 869], "null_on_oob": [285, 680], "cheaper": [285, 680], "n_field_strategi": [286, 681], "tostructstrategi": [286, 681], "first_non_nul": [286, 681], "max_width": [286, 681], "field_0": [286, 681], "field_1": [286, 681], "field_n": [286, 681], "know": [286, 456, 863, 894, 903, 913], "incorrectli": 286, "downstream": [286, 428, 542, 833, 913], "advic": 286, "col_name_": [286, 681], "col_name_0": [286, 681], "col_name_1": [286, 681], "col_name_2": [286, 681], "substr": [289, 292, 293, 443, 447, 458, 459, 463, 464, 465, 466, 683, 686, 687, 850, 854, 865, 866, 870, 871, 872, 873], "transferencod": [290, 291, 445, 446, 684, 685, 852, 853], "strict": [290, 294, 443, 445, 468, 542, 684, 688, 830, 850, 852, 875, 913], "hex": [290, 291, 445, 446, 457, 684, 685, 852, 853, 864], "base64": [290, 291, 445, 446, 684, 685, 852, 853], "prefix": [293, 466, 471, 542, 687, 873, 878], "due": [294, 542, 688, 913], "overflow": [294, 306, 307, 475, 542, 688, 702, 703, 883, 913], "categoricalord": [295, 690], "lexic": [295, 690], "k": [295, 377, 482, 542, 690, 787, 897, 913], "min_val": [297, 299, 542, 694, 696, 913], "max_val": [297, 298, 542, 694, 695, 913], "foo_clip": [297, 298, 299, 542], "clip": [298, 299, 542, 695, 696, 913], "543081": [301, 542, 699, 913], "cumul": [303, 304, 305, 306, 307, 501, 502, 503, 542, 700, 701, 702, 703, 913], "a_revers": [303, 304, 305, 306, 307, 386, 414, 474, 542], "value_cummax": [304, 542], "value_cummax_all_fil": [304, 542], "uint16": [306, 307, 475, 542, 702, 703, 883, 913], "value_cumsum": [307, 542], "value_cumsum_all_fil": [307, 542], "min_period": [308, 346, 347, 348, 415, 416, 417, 418, 419, 420, 422, 423, 424, 542, 704, 751, 752, 753, 817, 818, 819, 820, 821, 822, 824, 825, 826, 913], "slide": [308, 542, 704, 913], "realli": [308, 542, 704, 913], "complex": [308, 482, 542, 704, 897, 913], "visit": [308, 542, 704, 913], "44": [310, 542], "drop_nan": [312, 542, 913], "tu": [313, 314, 318, 339, 343, 712, 713, 717, 737, 742, 746], "lose": [313, 712], "2001": [313, 316, 318, 319, 321, 326, 328, 331, 332, 333, 335, 336, 339, 340, 341, 342, 343, 344, 468, 712, 715, 717, 718, 721, 722, 723, 724, 726, 728, 729, 731, 732, 734, 735, 736, 738, 739, 741, 742, 743, 744, 745, 746, 747, 875], "tu_m": [313, 712], "tu_n": [313, 712], "tm": [314, 713], "naiv": [314, 713], "compon": [314, 336, 468, 504, 505, 506, 713, 739], "resolv": 314, "59": [314, 326, 336, 505, 713, 729, 739], "456000": [314, 713], "101000": 314, "456": [314, 713, 892, 913], "101": [314, 457, 864], "d1": 314, "d2": 314, "d3": 314, "utc": [315, 334, 468, 714, 737, 875], "tz": [315, 334, 714, 737], "europ": [315, 334, 714, 737], "london": [315, 334, 714, 737], "gmt": [315, 334, 714, 737], "bst": [315, 334, 714, 737], "extract": [316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 336, 337, 341, 342, 344, 450, 451, 452, 542, 715, 716, 718, 719, 720, 724, 725, 726, 727, 729, 730, 731, 732, 733, 735, 736, 739, 740, 744, 745, 747, 857, 858, 859], "weekdai": [316, 332], "day_of_month": [316, 332, 342], "ordinal_dai": [316, 342], "day_of_year": [316, 332, 342], "days_diff": 317, "epochtimeunit": [318, 512, 717], "unix": [318, 512, 717], "epoch_n": [318, 717], "epoch_": [318, 717], "978307200000000": [318, 339, 717, 742], "978307200": [318, 717], "978393600000000": [318, 339, 717, 742], "978393600": [318, 717], "978480000000000": [318, 339, 717, 742], "978480000": [318, 717], "hours_diff": 320, "iso": [321, 341, 342, 720, 744, 745], "correspond": [321, 409, 542, 720, 811, 913], "2006": [321, 331, 734], "180": [321, 333, 344], "2002": [321, 331, 333, 344, 734, 747], "2004": [321, 331, 734], "2005": [321, 331, 734], "1001": [322, 323, 325, 330], "002": [322, 323, 325, 330, 506, 725, 727, 733], "2000": [322, 331, 734], "003": [322, 323, 325, 330], "3000": 322, "997": [322, 323, 325, 330], "997000": 322, "998": [322, 323, 325, 330], "998000": 322, "999": [322, 323, 325, 330], "999000": 322, "microseconds_diff": 323, "milliseconds_diff": 325, "minutes_diff": 327, "1440": [327, 730], "nanoseconds_diff": 330, "1000000": [330, 471, 733], "leap": [331, 734], "account": [331, 346, 347, 348, 542, 734, 751, 752, 753, 913], "minu": [331, 734], "dictat": [331, 734], "date_plus_1i": [331, 734], "1y2mo": [331, 734], "date_min": 331, "1998": [331, 734], "1999": [331, 734], "2003": [331, 512, 734], "ordin": [332, 409, 542, 735, 811, 913], "366": [332, 735], "convert_time_zon": [334, 737], "timestamp": [334, 512, 737], "unset": [334, 737], "london_timezon": 334, "amsterdam": 334, "london_to_amsterdam": 334, "cet": 334, "cest": 334, "half": [335, 346, 347, 348, 542, 738, 751, 752, 753, 913], "225": [335, 340], "to_fram": [335, 340, 468, 831, 832, 871, 872, 875, 913], "10m": [335, 340, 738, 743], "milli": [336, 739], "micro": [336, 739], "456789": 336, "654321": 336, "111110": 336, "765431": 336, "sec": 336, "11111": 336, "seconds_diff": 337, "timestamp_n": [339, 742], "timestamp_m": 339, "978307200000": 339, "978393600000": 339, "978480000000": 339, "53": [341, 744], "sundai": [342, 745], "incorrect": [343, 428, 542, 618, 746, 833, 913], "tu_u": [343, 746], "32971": [343, 746], "32974": [343, 746], "32976": [343, 746], "718281828459045": [345, 382, 542, 749, 790, 913], "pk": [345, 542, 749, 913], "459148": [345, 542], "754888": [345, 542], "span": [346, 347, 348, 542, 751, 752, 753, 913], "half_lif": [346, 347, 348, 542, 751, 752, 753, 913], "ignore_nul": [346, 347, 348, 542, 751, 752, 753, 903, 913], "exponenti": [346, 347, 348, 350, 542, 751, 752, 753, 754, 913], "weight": [346, 347, 348, 415, 416, 417, 418, 419, 420, 422, 423, 424, 436, 542, 751, 752, 753, 817, 818, 819, 820, 821, 822, 824, 825, 826, 843, 913], "decai": [346, 347, 348, 542, 751, 752, 753, 913], "term": [346, 347, 348, 453, 456, 542, 751, 752, 753, 860, 863, 913], "mass": [346, 347, 348, 542, 751, 752, 753, 913], "gamma": [346, 347, 348, 542, 751, 752, 753, 913], "foral": [346, 347, 348, 542, 751, 752, 753, 913], "geq": [346, 347, 348, 542, 751, 752, 753, 913], "theta": [346, 347, 348, 542, 751, 752, 753, 913], "life": [346, 347, 348, 542, 751, 752, 753, 913], "exp": [346, 347, 348, 542, 751, 752, 753, 913], "ln": [346, 347, 348, 542, 751, 752, 753, 913], "smooth": [346, 347, 348, 542, 751, 752, 753, 913], "factor": [346, 347, 348, 481, 542, 751, 752, 753, 896, 913], "leq": [346, 347, 348, 542, 751, 752, 753, 913], "begin": [346, 347, 348, 449, 542, 751, 752, 753, 856, 913], "imbal": [346, 347, 348, 542, 751, 752, 753, 913], "ew": [346, 347, 348, 542, 751, 752, 753, 913], "w_i": [346, 347, 348, 542, 751, 752, 753, 913], "recurs": [346, 347, 348, 542, 751, 752, 753, 913], "y_0": [346, 347, 348, 542, 751, 752, 753, 913], "x_0": [346, 347, 348, 542, 751, 752, 753, 913], "y_t": [346, 347, 348, 542, 751, 752, 753, 913], "y_": [346, 347, 348, 542, 751, 752, 753, 913], "x_t": [346, 347, 348, 542, 751, 752, 753, 913], "observ": [346, 347, 348, 542, 751, 752, 753, 913], "x_2": [346, 347, 348, 542, 751, 752, 753, 913], "428571": [346, 542], "bia": [347, 348, 377, 421, 436, 542, 752, 753, 787, 823, 843, 913], "unbias": [347, 348, 542, 752, 753, 913], "963624": [347, 542, 752, 913], "928571": [348, 542, 753, 913], "wildcard": [349, 489, 496, 501, 502, 510, 525, 542], "regex": [349, 392, 443, 444, 447, 449, 450, 458, 459, 466, 508, 518, 521, 531, 542, 850, 851, 854, 856, 857, 865, 866, 873], "aa": [349, 508, 542], "ba": [349, 508, 542], "cc": [349, 508, 542], "718282": [350, 542], "389056": [350, 542], "54": [350, 542], "59815": [350, 542], "expand": [351, 391, 392, 412, 542, 755, 913], "arr": [351, 507, 535, 542, 755, 894, 905, 913], "exprlistnamespac": [351, 357, 413, 542], "exprstringnamespac": [351, 542], "pythonliter": [352, 542, 612, 634, 756, 913], "extrem": [352, 542, 756, 913], "group_col": [355, 488, 542], "g1": [355, 488, 542], "g2": [355, 488, 542], "lt": [355, 488, 542, 913], "gte": [355, 488, 542], "9774092659964970114": [360, 542], "13614470193936745724": [360, 542], "1101441246220388612": [360, 542], "11638928888656214026": [360, 542], "13382926553367784577": [360, 542], "cumsum": [362, 542, 574, 634, 913], "interpolationmethod": [363, 542, 767, 913], "regrid": [363, 542], "grid": [363, 542], "df_original_grid": [363, 542], "grid_point": [363, 542], "df_new_grid": [363, 542], "conflat": [364, 542], "finit": [366, 528, 542, 772, 913], "primit": [368, 542, 894, 913], "optional_memb": [368, 542, 775, 913], "infinit": [369, 542, 776, 913], "_isnan": [370, 542], "b_isnan": [370, 542], "negat": [371, 542], "_is_not_nan": [372, 542], "b_is_not_nan": [372, 542], "_not_nul": [373, 542], "a_not_nul": [373, 542], "b_not_nul": [373, 542], "_isnul": [374, 542], "a_isnul": [374, 542], "b_isnul": [374, 542], "undo": [376, 396, 542], "duplicateerror": [376, 542, 551], "occurr": [376, 542], "333333": [376, 424, 542, 806, 826, 913], "fisher": [377, 436, 542, 787, 843, 913], "fourth": [377, 542, 787, 913], "central": [377, 436, 542, 787, 843, 913], "subtract": [377, 542, 787, 913], "distribut": [377, 436, 542, 787, 843, 913], "elimin": [377, 542, 787, 913], "bias": [377, 436, 542, 787, 843, 913], "scipi": [377, 436, 542, 787, 843, 913], "stat": [377, 436, 542, 787, 843, 913], "153061": [377, 542], "logarithm": [382, 383, 542, 790, 791, 913], "584963": [382, 542], "30103": [383, 542], "60206": [383, 542], "lowest": [384, 542], "9223372036854775808": [384, 542], "agg_list": [385, 542], "elementwis": [385, 415, 416, 417, 418, 419, 420, 422, 423, 424, 489, 490, 542, 817, 818, 819, 820, 821, 822, 824, 825, 826, 913], "third": [385, 542], "parti": [385, 542], "book": [385, 542], "argmax": [385, 542], "_revers": [386, 414, 474, 542], "b_revers": [386, 414, 474, 542], "remap": [387, 542, 793, 913], "lookup": [387, 542, 793, 913], "country_code_dict": [387, 542], "ca": [387, 542], "canada": [387, 542], "de": [387, 542], "germani": [387, 542], "fr": [387, 542], "franc": [387, 542], "country_cod": [387, 542], "unknown": [387, 516, 542], "rest": [387, 542], "computeerror": [393, 551], "keep_nam": [396, 542], "poison": [400, 401, 542, 802, 803, 913], "nanmax": [400, 401, 542, 802, 803, 913], "wherea": [400, 401, 542, 573, 580, 634, 802, 803, 913], "outcom": [403, 542], "_max": [403, 542], "c_max": [403, 542], "_min": [403, 542], "c_min": [403, 542], "recent": [404, 542, 806, 913], "percent": [404, 542, 806, 913], "090909": [404, 542], "expon": [405, 542], "power": [405, 542], "reverse_": [406, 542], "reverse_a": [406, 542], "reverse_fruit": [406, 542], "reverse_b": [406, 542], "reverse_car": [406, 542], "rankmethod": [409, 542, 811, 913], "ti": [409, 542, 811, 913], "appropri": [409, 542, 811, 913], "competit": [409, 542, 811, 913], "highest": [409, 485, 528, 542, 634, 811, 913], "64bit": [411, 542, 813, 913], "safe": [411, 542, 813, 894, 913], "coerc": [412, 542], "dim": [413, 542, 815, 913], "fruits_revers": [414, 474, 542], "cars_revers": [414, 474, 542], "window_s": [415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 542, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 913], "rolling_min": [415, 542, 817, 913], "rolling_max": [415, 542, 817, 913], "rolling_mean": [415, 542, 817, 913], "rolling_sum": [415, 542, 817, 913], "multipli": [415, 416, 417, 418, 419, 420, 422, 423, 424, 542, 817, 818, 819, 820, 821, 822, 824, 825, 826, 913], "358899": [415, 542], "041452": [415, 542], "567764": [415, 542], "travers": [416, 417, 419, 422, 423, 424, 542, 818, 819, 821, 824, 825, 826, 913], "vector": [416, 417, 419, 422, 423, 424, 542, 818, 819, 821, 824, 825, 826, 913], "5h": [416, 417, 418, 419, 420, 422, 423, 424, 542], "33": [420, 425, 496, 542, 822, 913], "skew": [421, 542, 823, 913], "527525": [422, 542, 824, 913], "digit": [425, 471, 542, 827, 851, 878, 913], "searchsortedsid": [427, 542, 829, 913], "maintain": [427, 483, 542, 599, 600, 634, 829, 898, 913], "leftmost": [427, 542, 829, 913], "rightmost": [427, 542, 829, 913], "six": [427, 542], "extrema": [431, 542, 837, 913], "112": [431, 542], "129": [431, 542], "i8": [431, 542, 707, 816, 900, 913], "8589934592": [431, 542], "1073741824": [431, 542], "content": [432, 486, 542, 839, 913], "175201": [435, 542, 842, 913], "about": [436, 542, 843, 913], "unimod": [436, 542, 843, 913], "skewtest": [436, 542, 843, 913], "speak": [436, 542, 843, 913], "g_1": [436, 542, 843, 913], "m_3": [436, 542, 843, 913], "m_2": [436, 542, 843, 913], "m_i": [436, 542, 843, 913], "sum_": [436, 542, 843, 913], "texttt": [436, 542, 843, 913], "k_3": [436, 542, 843, 913], "k_2": [436, 542, 843, 913], "sqrt": [436, 542, 843, 913], "343622": [436, 542], "value1": [439, 542], "value2": [439, 542], "414214": [440, 542, 846, 913], "ends_with": [443, 466, 873], "crab": [443, 850], "dog": [443, 469, 470, 498, 850], "rab": [443, 850], "success": [444, 450, 851, 857], "overlap": [444, 450, 851, 857], "captur": [444, 449, 450, 851, 856, 857], "123": [444, 450, 459, 851, 857, 866, 892, 913], "bla": [444, 450, 851, 857], "asd": [444, 450, 851, 857], "678": [444, 450, 851, 857], "910t": [444, 450, 851, 857], "r": [444, 448, 449, 450, 458, 542, 851, 855, 856, 857, 865], "count_digit": 444, "666f6f": [446, 853], "626172": [446, 853], "mango": [447, 466, 854, 873], "go": [447, 854], "has_suffix": 447, "group_index": [449, 856], "vote": [449, 856], "ballon_dor": [449, 856], "candid": [449, 856], "messi": [449, 856], "ref": [449, 856], "candidat": [449, 856], "jorginho": [449, 856], "ronaldo": [449, 856], "extracted_nr": 450, "910": [450, 857], "json_path_match": [451, 858], "jsonpath": [451, 452, 858, 859], "json_path": [452, 859], "regardless": [452, 859], "json_val": [452, 859], "n_char": [453, 860], "caf\u00e9": [453, 456, 860, 863], "345": [453, 456, 860, 863], "\u6771\u4eac": [453, 456, 860, 863], "nchar": [453, 456], "fillchar": [454, 460, 861, 867], "justifi": [454, 460, 861, 867], "pad": [454, 460, 471, 861, 867, 878], "cow": [454, 460, 861, 867], "monkei": [454, 460, 861, 867], "hippopotamu": [454, 460, 861, 867], "strip": [455, 461, 862, 868], "whitespac": [455, 461, 467, 862, 868, 874], "tworld": [455, 467, 862, 874], "wod": [455, 461, 862, 868], "rld": [455, 862], "text": [456, 458, 459, 863], "radix": [457, 864], "110": [457, 864], "010": [457, 864], "fa1e": [457, 864], "ff00": [457, 864], "cafe": [457, 864], "64030": [457, 864], "65280": [457, 864], "51966": [457, 864], "replace_al": [458, 865], "123abc": [458, 865], "abc456": [458, 865], "abcabc": [459, 866], "123a123": [459, 866], "bc": [459, 531, 866], "trail": [461, 467, 868, 874], "worl": [461, 467, 868, 874], "subslic": [462, 869], "pear": [462, 869], "papaya": [462, 869], "dragonfruit": [462, 869], "s_slice": 462, "ear": [462, 869], "aya": [462, 869], "uit": [462, 869], "ya": [462, 869], "onf": [462, 869], "a_1": [464, 871, 891, 913], "d_4": [464, 871], "rename_field": [464, 465, 871, 872], "first_part": [464, 465, 871, 872], "second_part": [464, 465, 871, 872], "remaind": [465, 872], "app": [466, 873], "has_prefix": 466, "polarstemporaltyp": [468, 875], "tz_awar": [468, 875], "strftime": [468, 875], "anywher": [468, 875], "3f": 468, "00z": [468, 875], "sun": [468, 875], "34": [468, 875], "lowercas": [469, 876], "variant": [469, 470], "uppercas": [470, 877], "100000": 471, "0010": 471, "0001": 471, "00000": 471, "00001": 471, "cd": [472, 473], "struct_col": [472, 473], "www": 473, "xxx": 473, "yyi": 473, "zzz": 473, "obvious": 473, "referenc": 473, "structfieldnotfounderror": [473, 551], "761594": [480, 542, 888, 913], "replic": [481, 542, 896, 913], "vals_phys": [481, 542], "largest": [482, 542, 897, 913], "smallest": [482, 542, 897, 913], "bottom_k": [482, 542], "value_count": [484, 542, 913], "9223372036854775807": [485, 542], "multithread": [486, 542], "columnwis": [489, 490], "AND": 489, "bitwis": [489, 490], "returns_scalar": 491, "product_a": 491, "49": 491, "Be": 492, "more_nam": 496, "hamburg": 496, "lag": 497, "mimic": 497, "a_lag_": 497, "a_rol": 497, "plai": 498, "swim": 498, "walk": 498, "full_sent": 498, "covari": 500, "acc": [501, 502, 510, 525], "include_init": 501, "accumul": [501, 502, 510, 525], "new_valu": [501, 502, 510, 525], "simpli": [501, 510], "cumreduc": 501, "across": [503, 531], "cumfold": 503, "999999": 505, "add_week": 506, "add_dai": 506, "add_second": 506, "add_millisecond": 506, "add_hour": 506, "add_millisec": 506, "ond": 506, "eval": 507, "mathemat": 507, "a_b_doubl": 507, "fstring": 511, "placehold": 511, "hello_": 511, "_world": 511, "foo_": 511, "_bar_": 511, "foo_a_bar_1": 511, "foo_b_bar_2": 511, "foo_c_bar_3": 511, "epoch": [512, 737], "timestep": 512, "1666683077": 512, "1666683099": 512, "39": 512, "12345": [512, 691, 761, 827, 913], "12346": 512, "agg_group": [513, 542], "allow_object": 516, "valueexcept": 516, "test_func": 517, "selector": [518, 521, 531], "544705": 523, "mode": [526, 542, 634, 913], "propagate_nan": 528, "spearman": 528, "larger": [528, 599, 600, 634], "605551": 529, "605551275463989": 529, "my_struct": 530, "q": 530, "isn": 534, "thens": 534, "chain": 534, "sometim": 541, "arcco": [542, 913], "arccosh": [542, 913], "arcsin": [542, 913], "arcsinh": [542, 913], "arctan": [542, 913], "arctanh": [542, 913], "arg_max": [542, 913], "arg_min": [542, 913], "arg_uniqu": [542, 913], "argsort": [542, 913], "backward_fil": 542, "clip_max": [542, 913], "clip_min": [542, 913], "co": [542, 913], "cosh": [542, 913], "cumcount": 542, "cummax": [542, 913], "cummin": [542, 913], "cumprod": [542, 913], "cumulative_ev": [542, 913], "entropi": [542, 913], "ewm_mean": [542, 913], "ewm_std": [542, 913], "ewm_var": [542, 913], "extend_const": [542, 913], "flatten": 542, "inspect": [542, 634], "is_between": [542, 913], "is_finit": [542, 913], "is_first": [542, 913], "is_in": [542, 913], "is_infinit": [542, 913], "is_nan": [542, 913], "is_not_nan": [542, 913], "is_not_nul": [542, 913], "kurtosi": [542, 913], "log10": [542, 913], "map_alia": 542, "map_dict": [542, 913], "nan_max": [542, 913], "nan_min": [542, 913], "pct_chang": [542, 913], "extract_numb": 542, "pow": 542, "reinterpret": [542, 913], "repeat_bi": 542, "rolling_appli": [542, 913], "rolling_median": [542, 913], "rolling_quantil": [542, 913], "rolling_skew": [542, 913], "rolling_std": [542, 913], "rolling_var": [542, 913], "search_sort": [542, 913], "set_sort": [542, 913], "shrink_dtyp": [542, 913], "sin": [542, 913], "sinh": [542, 913], "sort_bi": 542, "tan": [542, 913], "tanh": [542, 913], "to_phys": [542, 913], "top_k": [542, 913], "unique_count": [542, 913], "expos": 551, "registr": 551, "miscellan": 551, "arrowerror": 551, "columnnotfounderror": 551, "invalidoperationerror": 551, "nodataerror": 551, "panicexcept": 551, "schemaerror": 551, "schemafieldnotfounderror": 551, "shapeerror": 551, "build_info": 551, "show_vers": 551, "sqlcontext": [551, 919], "hit": [554, 634], "node": [554, 574, 581, 589, 592, 634], "huge": [557, 634], "saver": [557, 634], "purpos": [564, 634], "help": [564, 634], "influenc": [564, 581, 634], "read_json": [569, 615, 634], "lazygroupbi": [570, 571, 572, 634], "validate_output_schema": [581, 634], "streamabl": [581, 634], "past": [581, 634], "paramount": [581, 634], "hard": [581, 634], "bug": [581, 618, 634], "elig": [581, 634], "ot": [581, 634], "exectut": [581, 634], "invari": [581, 634], "upheld": [581, 634], "prune": [581, 634], "show_plot": [589, 634], "truncate_nod": [589, 634], "figsiz": [589, 598, 634], "gantt": [589, 634], "chart": [589, 634], "matplotlib": [589, 598, 634], "plot": [589, 598, 634], "groupby_partit": [589, 634], "470": [589, 634], "475": [589, 634], "1964": [589, 634], "from_json": [591, 634], "swap": [592, 634], "output_path": [598, 634], "raw_output": [598, 634], "figur": [598, 634], "persist": [599, 600, 634], "ram": [599, 600, 634], "slightli": [599, 600, 634], "my_larger_than_ram_fil": [599, 600, 634], "data_pagesize_limit": [600, 634], "290994": [603, 634], "118034": [603, 634], "433013": [603, 634], "1875": [610, 634], "polarsexprtyp": [612, 634], "extern": [613, 634], "df_a": [613, 634], "df_other": [613, 634], "afoo": [613, 634], "cfoo": [613, 634], "train_df": [613, 634], "feature_0": [613, 634], "feature_1": [613, 634], "test_df": [613, 634], "_train": [613, 634], "feature_0_train": [613, 634], "dataframescan": [615, 634], "output_schema": [615, 634], "initialis": 634, "ldf2": 634, "ldf3": 634, "ldf4": 634, "ldf5": 634, "ldf6": 634, "explain": 634, "profil": 634, "sink_ipc": 634, "sink_parquet": 634, "with_context": 634, "sr": [639, 913], "new_aliased_sr": [639, 913], "append_chunk": [642, 913], "super": [642, 913], "141593": [644, 913], "292432": [645, 913], "549306": [649, 913], "listnamespac": [656, 755, 815, 913], "catnamespac": 689, "56789": [691, 761, 827, 913], "901234": [691, 761, 827, 913], "pi": [698, 841, 887, 913], "1232e": [698, 913], "quick": [706, 913], "series_num": [706, 913], "581139": [706, 913], "series_str": [706, 913], "datetimenamespac": 711, "500m": [724, 726, 732, 739], "500000": 724, "2m": 729, "500000000": 732, "date_minus_1y_2mon": 734, "1583020800": 737, "1585699200": 737, "1588291200": 737, "nyc": 737, "edt": 737, "1583038800": 737, "1585717200": 737, "1588309200": 737, "165": [738, 743], "series_equ": [738, 743, 913], "timestamp_u": 742, "978307200000000000": 742, "978393600000000000": 742, "978480000000000000": 742, "005": [749, 913], "06293300616044681": [749, 913], "65": [749, 913], "8568409950394724": [749, 913], "4000000": [750, 913], "814697265625": [750, 913], "stringnamespac": [755, 848, 913], "bitmask": [763, 913], "swiftli": [763, 913], "10734580197236529959": [764, 913], "3022416320763508302": [764, 913], "13756996518000038261": [764, 913], "fall": [768, 913], "2147483648": [792, 913], "iso3166": [793, 913], "tur": [793, 913], "jpn": [793, 913], "nld": [793, 913], "country_lookup": [793, 913], "japan": [793, 913], "t\u00fcrkiy": [793, 913], "netherland": [793, 913], "unrecognis": [793, 913], "unspecifi": [793, 913], "country_nam": [793, 913], "166667": [806, 913], "142857": [806, 913], "512": [806, 913], "peak": [807, 808, 913], "nanstd": [817, 913], "858612": [817, 913], "200": [818, 819, 821, 913], "150": [819, 913], "250": [819, 913], "350": [819, 913], "450": [819, 913], "381802": [823, 913], "dev": [824, 913], "57": [827, 913], "frequent": [831, 832, 913], "mutat": [832, 913], "2246e": [841, 887, 913], "divisor": [847, 902, 913], "6331e16": [887, 913], "lib": [890, 913], "int64arrai": [890, 913], "a_2": [891, 913], "a_3": [891, 913], "zero_copy_onli": [894, 913], "writabl": [894, 913], "view": [894, 913], "presenc": [894, 913], "immut": [894, 913], "made": [894, 913], "further": [895, 913], "127": [900, 913], "seriesview": [903, 913], "arraylik": 913, "dtype_if_empti": 913, "position": 913, "scenario": 913, "through": 913, "chunk_length": 913, "cut": 913, "eq": 913, "ge": 913, "get_chunk": 913, "gt": 913, "has_valid": 913, "is_boolean": 913, "is_float": 913, "is_numer": 913, "is_sort": 913, "is_tempor": 913, "is_utf8": 913, "le": 913, "ne": 913, "new_from_index": 913, "peak_max": 913, "peak_min": 913, "set_at_idx": 913}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [30, 0, 1, "", "DataType"], [31, 0, 1, "", "Date"], [32, 0, 1, "", "Datetime"], [33, 0, 1, "", "Duration"], [34, 0, 1, "", "Float32"], [35, 0, 1, "", "Float64"], [36, 0, 1, "", "Int16"], [37, 0, 1, "", "Int32"], [38, 0, 1, "", "Int64"], [39, 0, 1, "", "Int8"], [40, 0, 1, "", "List"], [41, 0, 1, "", "Null"], [42, 0, 1, "", "Object"], [919, 0, 1, "", "SQLContext"], [46, 0, 1, "", "StringCache"], [47, 0, 1, "", "Struct"], [48, 0, 1, "", "Time"], [49, 0, 1, "", "UInt16"], [50, 0, 1, "", "UInt32"], [51, 0, 1, "", "UInt64"], [52, 0, 1, "", "UInt8"], [53, 0, 1, "", "Unknown"], [54, 0, 1, "", "Utf8"], [55, 4, 1, "", "align_frames"], [489, 4, 1, "", "all"], [490, 4, 1, "", "any"], [491, 4, 1, "", "apply"], [492, 4, 1, "", "arange"], [493, 4, 1, "", "arg_sort_by"], [60, 4, 1, "", "arg_where"], [494, 4, 1, "", "avg"], [61, 4, 1, "", "build_info"], [495, 4, 1, "", "coalesce"], [496, 4, 1, "", "col"], [62, 4, 1, "", "collect_all"], [63, 4, 1, "", "concat"], [497, 4, 1, "", "concat_list"], [498, 4, 1, "", "concat_str"], [499, 4, 1, "", "count"], [500, 4, 1, "", "cov"], [501, 4, 1, "", "cumfold"], [502, 4, 1, "", "cumreduce"], [503, 4, 1, "", "cumsum"], [64, 4, 1, "", "cut"], [504, 4, 1, "", "date"], [65, 4, 1, "", "date_range"], [505, 4, 1, "", "datetime"], [506, 4, 1, "", "duration"], [507, 4, 1, "", "element"], [508, 4, 1, "", "exclude"], [509, 4, 1, "", "first"], [510, 4, 1, "", "fold"], [511, 4, 1, "", "format"], [80, 4, 1, "", "from_arrow"], [81, 4, 1, "", "from_dataframe"], [82, 4, 1, "", "from_dict"], [83, 4, 1, "", "from_dicts"], [512, 4, 1, "", "from_epoch"], [84, 4, 1, "", "from_numpy"], [85, 4, 1, "", "from_pandas"], [86, 4, 1, "", "from_records"], [87, 4, 1, "", "get_dummies"], [88, 4, 1, "", "get_idx_type"], [513, 4, 1, "", "groups"], [514, 4, 1, "", "head"], [515, 4, 1, "", "list"], [516, 4, 1, "", "lit"], [517, 4, 1, "", "map"], [518, 4, 1, "", "max"], [519, 4, 1, "", "mean"], [520, 4, 1, "", "median"], [521, 4, 1, "", "min"], [522, 4, 1, "", "n_unique"], [90, 4, 1, "", "ones"], [523, 4, 1, "", "pearson_corr"], [524, 4, 1, "", "quantile"], [91, 4, 1, "", "read_avro"], [92, 4, 1, "", "read_csv"], [93, 4, 1, "", "read_csv_batched"], [94, 4, 1, "", "read_delta"], [95, 4, 1, "", "read_excel"], [96, 4, 1, "", "read_ipc"], [97, 4, 1, "", "read_ipc_schema"], [98, 4, 1, "", "read_json"], [99, 4, 1, "", "read_ndjson"], [100, 4, 1, "", "read_parquet"], [101, 4, 1, "", "read_parquet_schema"], [102, 4, 1, "", "read_sql"], [525, 4, 1, "", "reduce"], [526, 4, 1, "", "repeat"], [103, 4, 1, "", "scan_csv"], [104, 4, 1, "", "scan_delta"], [105, 4, 1, "", "scan_ds"], [106, 4, 1, "", "scan_ipc"], [107, 4, 1, "", "scan_ndjson"], [108, 4, 1, "", "scan_parquet"], [527, 4, 1, "", "select"], [109, 4, 1, "", "show_versions"], [528, 4, 1, "", "spearman_rank_corr"], [529, 4, 1, "", "std"], [530, 4, 1, "", "struct"], [531, 4, 1, "", "sum"], [532, 4, 1, "", "tail"], [116, 4, 1, "", "threadpool_size"], [117, 4, 1, "", "toggle_string_cache"], [533, 4, 1, "", "var"], [534, 4, 1, "", "when"], [118, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "load"], [6, 1, 1, "", "restore_defaults"], [7, 1, 1, "", "save"], [8, 1, 1, "", "set_ascii_tables"], [9, 1, 1, "", "set_fmt_float"], [10, 1, 1, "", "set_fmt_str_lengths"], [11, 1, 1, "", "set_tbl_cell_alignment"], [12, 1, 1, "", "set_tbl_cols"], [13, 1, 1, "", "set_tbl_column_data_type_inline"], [14, 1, 1, "", "set_tbl_dataframe_shape_below"], [15, 1, 1, "", "set_tbl_formatting"], [16, 1, 1, "", "set_tbl_hide_column_data_types"], [17, 1, 1, "", "set_tbl_hide_column_names"], [18, 1, 1, "", "set_tbl_hide_dataframe_shape"], [19, 1, 1, "", "set_tbl_hide_dtype_separator"], [20, 1, 1, "", "set_tbl_rows"], [21, 1, 1, "", "set_tbl_width_chars"], [22, 1, 1, "", "set_verbose"], [23, 1, 1, "", "state"]], "polars.DataFrame": [[121, 1, 1, "", "__dataframe__"], [122, 1, 1, "", "apply"], [123, 1, 1, "", "clear"], [124, 1, 1, "", "clone"], [125, 2, 1, "", "columns"], [126, 1, 1, "", "describe"], [127, 1, 1, "", "drop"], [128, 1, 1, "", "drop_in_place"], [129, 1, 1, "", "drop_nulls"], [130, 2, 1, "", "dtypes"], [131, 1, 1, "", "estimated_size"], [132, 1, 1, "", "explode"], [133, 1, 1, "", "extend"], [134, 1, 1, "", "fill_nan"], [135, 1, 1, "", "fill_null"], [136, 1, 1, "", "filter"], [137, 1, 1, "", "find_idx_by_name"], [138, 1, 1, "", "fold"], [139, 1, 1, "", "frame_equal"], [140, 1, 1, "", "get_column"], [141, 1, 1, "", "get_columns"], [142, 1, 1, "", "glimpse"], [143, 1, 1, "", "groupby"], [144, 1, 1, "", "groupby_dynamic"], [145, 1, 1, "", "groupby_rolling"], [146, 1, 1, "", "hash_rows"], [147, 1, 1, "", "head"], [148, 2, 1, "", "height"], [149, 1, 1, "", "hstack"], [150, 1, 1, "", "insert_at_idx"], [151, 1, 1, "", "interpolate"], [152, 1, 1, "", "is_duplicated"], [153, 1, 1, "", "is_empty"], [154, 1, 1, "", "is_unique"], [155, 1, 1, "", "item"], [156, 1, 1, "", "iter_rows"], [157, 1, 1, "", "iter_slices"], [158, 1, 1, "", "join"], [159, 1, 1, "", "join_asof"], [160, 1, 1, "", "lazy"], [161, 1, 1, "", "limit"], [162, 1, 1, "", "max"], [163, 1, 1, "", "mean"], [164, 1, 1, "", "median"], [165, 1, 1, "", "melt"], [166, 1, 1, "", "merge_sorted"], [167, 1, 1, "", "min"], [168, 1, 1, "", "n_chunks"], [169, 1, 1, "", "n_unique"], [170, 1, 1, "", "null_count"], [171, 1, 1, "", "partition_by"], [172, 1, 1, "", "pearson_corr"], [173, 1, 1, "", "pipe"], [174, 1, 1, "", "pivot"], [175, 1, 1, "", "product"], [176, 1, 1, "", "quantile"], [177, 1, 1, "", "rechunk"], [178, 1, 1, "", "rename"], [179, 1, 1, "", "replace"], [180, 1, 1, "", "replace_at_idx"], [181, 1, 1, "", "reverse"], [182, 1, 1, "", "row"], [183, 1, 1, "", "rows"], [184, 1, 1, "", "sample"], [185, 2, 1, "", "schema"], [186, 1, 1, "", "select"], [187, 2, 1, "", "shape"], [188, 1, 1, "", "shift"], [189, 1, 1, "", "shift_and_fill"], [190, 1, 1, "", "shrink_to_fit"], [191, 1, 1, "", "slice"], [192, 1, 1, "", "sort"], [193, 1, 1, "", "std"], [194, 1, 1, "", "sum"], [195, 1, 1, "", "tail"], [196, 1, 1, "", "take_every"], [197, 1, 1, "", "to_arrow"], [198, 1, 1, "", "to_dict"], [199, 1, 1, "", "to_dicts"], [200, 1, 1, "", "to_dummies"], [201, 1, 1, "", "to_numpy"], [202, 1, 1, "", "to_pandas"], [203, 1, 1, "", "to_series"], [204, 1, 1, "", "to_struct"], [205, 1, 1, "", "transpose"], [206, 1, 1, "", "unique"], [207, 1, 1, "", "unnest"], [208, 1, 1, "", "unstack"], [209, 1, 1, "", "update"], [210, 1, 1, "", "upsample"], [211, 1, 1, "", "var"], [212, 1, 1, "", "vstack"], [213, 2, 1, "", "width"], [214, 1, 1, "", "with_columns"], [215, 1, 1, "", "with_row_count"], [24, 1, 1, "", "write_avro"], [25, 1, 1, "", "write_csv"], [26, 1, 1, "", "write_ipc"], [27, 1, 1, "", "write_json"], [28, 1, 1, "", "write_ndjson"], [29, 1, 1, "", "write_parquet"]], "polars.DataType": [[30, 1, 1, "", "__init__"]], "polars.Date": [[31, 1, 1, "", "__init__"]], "polars.Datetime": [[32, 1, 1, "", "__init__"]], "polars.Duration": [[33, 1, 1, "", "__init__"]], "polars.Expr": [[243, 1, 1, "", "abs"], [244, 1, 1, "", "agg_groups"], [245, 1, 1, "", "alias"], [246, 1, 1, "", "all"], [247, 1, 1, "", "any"], [248, 1, 1, "", "append"], [249, 1, 1, "", "apply"], [250, 1, 1, "", "arccos"], [251, 1, 1, "", "arccosh"], [252, 1, 1, "", "arcsin"], [253, 1, 1, "", "arcsinh"], [254, 1, 1, "", "arctan"], [255, 1, 1, "", "arctanh"], [256, 1, 1, "", "arg_max"], [257, 1, 1, "", "arg_min"], [258, 1, 1, "", "arg_sort"], [259, 1, 1, "", "arg_true"], [260, 1, 1, "", "arg_unique"], [261, 1, 1, "", "argsort"], [288, 1, 1, "", "backward_fill"], [294, 1, 1, "", "cast"], [296, 1, 1, "", "ceil"], [297, 1, 1, "", "clip"], [298, 1, 1, "", "clip_max"], [299, 1, 1, "", "clip_min"], [300, 1, 1, "", "cos"], [301, 1, 1, "", "cosh"], [302, 1, 1, "", "count"], [303, 1, 1, "", "cumcount"], [304, 1, 1, "", "cummax"], [305, 1, 1, "", "cummin"], [306, 1, 1, "", "cumprod"], [307, 1, 1, "", "cumsum"], [308, 1, 1, "", "cumulative_eval"], [309, 1, 1, "", "diff"], [310, 1, 1, "", "dot"], [311, 1, 1, "", "drop_nans"], [312, 1, 1, "", "drop_nulls"], [345, 1, 1, "", "entropy"], [346, 1, 1, "", "ewm_mean"], [347, 1, 1, "", "ewm_std"], [348, 1, 1, "", "ewm_var"], [349, 1, 1, "", "exclude"], [350, 1, 1, "", "exp"], [351, 1, 1, "", "explode"], [352, 1, 1, "", "extend_constant"], [353, 1, 1, "", "fill_nan"], [354, 1, 1, "", "fill_null"], [355, 1, 1, "", "filter"], [356, 1, 1, "", "first"], [357, 1, 1, "", "flatten"], [358, 1, 1, "", "floor"], [359, 1, 1, "", "forward_fill"], [360, 1, 1, "", "hash"], [361, 1, 1, "", "head"], [362, 1, 1, "", "inspect"], [363, 1, 1, "", "interpolate"], [364, 1, 1, "", "is_between"], [365, 1, 1, "", "is_duplicated"], [366, 1, 1, "", "is_finite"], [367, 1, 1, "", "is_first"], [368, 1, 1, "", "is_in"], [369, 1, 1, "", "is_infinite"], [370, 1, 1, "", "is_nan"], [371, 1, 1, "", "is_not"], [372, 1, 1, "", "is_not_nan"], [373, 1, 1, "", "is_not_null"], [374, 1, 1, "", "is_null"], [375, 1, 1, "", "is_unique"], [376, 1, 1, "", "keep_name"], [377, 1, 1, "", "kurtosis"], [378, 1, 1, "", "last"], [379, 1, 1, "", "len"], [380, 1, 1, "", "limit"], [381, 1, 1, "", "list"], [382, 1, 1, "", "log"], [383, 1, 1, "", "log10"], [384, 1, 1, "", "lower_bound"], [385, 1, 1, "", "map"], [386, 1, 1, "", "map_alias"], [387, 1, 1, "", "map_dict"], [388, 1, 1, "", "max"], [389, 1, 1, "", "mean"], [390, 1, 1, "", "median"], [397, 1, 1, "", "min"], [398, 1, 1, "", "mode"], [399, 1, 1, "", "n_unique"], [400, 1, 1, "", "nan_max"], [401, 1, 1, "", "nan_min"], [402, 1, 1, "", "null_count"], [403, 1, 1, "", "over"], [404, 1, 1, "", "pct_change"], [405, 1, 1, "", "pow"], [406, 1, 1, "", "prefix"], [407, 1, 1, "", "product"], [408, 1, 1, "", "quantile"], [409, 1, 1, "", "rank"], [410, 1, 1, "", "rechunk"], [411, 1, 1, "", "reinterpret"], [412, 1, 1, "", "repeat_by"], [413, 1, 1, "", "reshape"], [414, 1, 1, "", "reverse"], [415, 1, 1, "", "rolling_apply"], [416, 1, 1, "", "rolling_max"], [417, 1, 1, "", "rolling_mean"], [418, 1, 1, "", "rolling_median"], [419, 1, 1, "", "rolling_min"], [420, 1, 1, "", "rolling_quantile"], [421, 1, 1, "", "rolling_skew"], [422, 1, 1, "", "rolling_std"], [423, 1, 1, "", "rolling_sum"], [424, 1, 1, "", "rolling_var"], [425, 1, 1, "", "round"], [426, 1, 1, "", "sample"], [427, 1, 1, "", "search_sorted"], [428, 1, 1, "", "set_sorted"], [429, 1, 1, "", "shift"], [430, 1, 1, "", "shift_and_fill"], [431, 1, 1, "", "shrink_dtype"], [432, 1, 1, "", "shuffle"], [433, 1, 1, "", "sign"], [434, 1, 1, "", "sin"], [435, 1, 1, "", "sinh"], [436, 1, 1, "", "skew"], [437, 1, 1, "", "slice"], [438, 1, 1, "", "sort"], [439, 1, 1, "", "sort_by"], [440, 1, 1, "", "sqrt"], [441, 1, 1, "", "std"], [474, 1, 1, "", "suffix"], [475, 1, 1, "", "sum"], [476, 1, 1, "", "tail"], [477, 1, 1, "", "take"], [478, 1, 1, "", "take_every"], [479, 1, 1, "", "tan"], [480, 1, 1, "", "tanh"], [481, 1, 1, "", "to_physical"], [482, 1, 1, "", "top_k"], [483, 1, 1, "", "unique"], [484, 1, 1, "", "unique_counts"], [485, 1, 1, "", "upper_bound"], [486, 1, 1, "", "value_counts"], [487, 1, 1, "", "var"], [488, 1, 1, "", "where"]], "polars.Expr.arr": [[262, 1, 1, "", "arg_max"], [263, 1, 1, "", "arg_min"], [264, 1, 1, "", "concat"], [265, 1, 1, "", "contains"], [266, 1, 1, "", "count_match"], [267, 1, 1, "", "diff"], [268, 1, 1, "", "eval"], [269, 1, 1, "", "explode"], [270, 1, 1, "", "first"], [271, 1, 1, "", "get"], [272, 1, 1, "", "head"], [273, 1, 1, "", "join"], [274, 1, 1, "", "last"], [275, 1, 1, "", "lengths"], [276, 1, 1, "", "max"], [277, 1, 1, "", "mean"], [278, 1, 1, "", "min"], [279, 1, 1, "", "reverse"], [280, 1, 1, "", "shift"], [281, 1, 1, "", "slice"], [282, 1, 1, "", "sort"], [283, 1, 1, "", "sum"], [284, 1, 1, "", "tail"], [285, 1, 1, "", "take"], [286, 1, 1, "", "to_struct"], [287, 1, 1, "", "unique"]], "polars.Expr.bin": [[289, 1, 1, "", "contains"], [290, 1, 1, "", "decode"], [291, 1, 1, "", "encode"], [292, 1, 1, "", "ends_with"], [293, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[295, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[313, 1, 1, "", "cast_time_unit"], [314, 1, 1, "", "combine"], [315, 1, 1, "", "convert_time_zone"], [316, 1, 1, "", "day"], [317, 1, 1, "", "days"], [318, 1, 1, "", "epoch"], [319, 1, 1, "", "hour"], [320, 1, 1, "", "hours"], [321, 1, 1, "", "iso_year"], [322, 1, 1, "", "microsecond"], [323, 1, 1, "", "microseconds"], [324, 1, 1, "", "millisecond"], [325, 1, 1, "", "milliseconds"], [326, 1, 1, "", "minute"], [327, 1, 1, "", "minutes"], [328, 1, 1, "", "month"], [329, 1, 1, "", "nanosecond"], [330, 1, 1, "", "nanoseconds"], [331, 1, 1, "", "offset_by"], [332, 1, 1, "", "ordinal_day"], [333, 1, 1, "", "quarter"], [334, 1, 1, "", "replace_time_zone"], [335, 1, 1, "", "round"], [336, 1, 1, "", "second"], [337, 1, 1, "", "seconds"], [338, 1, 1, "", "strftime"], [339, 1, 1, "", "timestamp"], [340, 1, 1, "", "truncate"], [341, 1, 1, "", "week"], [342, 1, 1, "", "weekday"], [343, 1, 1, "", "with_time_unit"], [344, 1, 1, "", "year"]], "polars.Expr.meta": [[391, 1, 1, "", "has_multiple_outputs"], [392, 1, 1, "", "is_regex_projection"], [393, 1, 1, "", "output_name"], [394, 1, 1, "", "pop"], [395, 1, 1, "", "root_names"], [396, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[442, 1, 1, "", "concat"], [443, 1, 1, "", "contains"], [444, 1, 1, "", "count_match"], [445, 1, 1, "", "decode"], [446, 1, 1, "", "encode"], [447, 1, 1, "", "ends_with"], [448, 1, 1, "", "explode"], [449, 1, 1, "", "extract"], [450, 1, 1, "", "extract_all"], [451, 1, 1, "", "json_extract"], [452, 1, 1, "", "json_path_match"], [453, 1, 1, "", "lengths"], [454, 1, 1, "", "ljust"], [455, 1, 1, "", "lstrip"], [456, 1, 1, "", "n_chars"], [457, 1, 1, "", "parse_int"], [458, 1, 1, "", "replace"], [459, 1, 1, "", "replace_all"], [460, 1, 1, "", "rjust"], [461, 1, 1, "", "rstrip"], [462, 1, 1, "", "slice"], [463, 1, 1, "", "split"], [464, 1, 1, "", "split_exact"], [465, 1, 1, "", "splitn"], [466, 1, 1, "", "starts_with"], [467, 1, 1, "", "strip"], [468, 1, 1, "", "strptime"], [469, 1, 1, "", "to_lowercase"], [470, 1, 1, "", "to_uppercase"], [471, 1, 1, "", "zfill"]], "polars.Expr.struct": [[472, 1, 1, "", "field"], [473, 1, 1, "", "rename_fields"]], "polars.Float32": [[34, 1, 1, "", "__init__"]], "polars.Float64": [[35, 1, 1, "", "__init__"]], "polars.Int16": [[36, 1, 1, "", "__init__"]], "polars.Int32": [[37, 1, 1, "", "__init__"]], "polars.Int64": [[38, 1, 1, "", "__init__"]], "polars.Int8": [[39, 1, 1, "", "__init__"]], "polars.LazyFrame": [[554, 1, 1, "", "cache"], [555, 1, 1, "", "clear"], [556, 1, 1, "", "clone"], [557, 1, 1, "", "collect"], [558, 2, 1, "", "columns"], [559, 1, 1, "", "drop"], [560, 1, 1, "", "drop_nulls"], [561, 2, 1, "", "dtypes"], [562, 1, 1, "", "explain"], [563, 1, 1, "", "explode"], [564, 1, 1, "", "fetch"], [565, 1, 1, "", "fill_nan"], [566, 1, 1, "", "fill_null"], [567, 1, 1, "", "filter"], [568, 1, 1, "", "first"], [569, 1, 1, "", "from_json"], [570, 1, 1, "", "groupby"], [571, 1, 1, "", "groupby_dynamic"], [572, 1, 1, "", "groupby_rolling"], [573, 1, 1, "", "head"], [574, 1, 1, "", "inspect"], [575, 1, 1, "", "interpolate"], [576, 1, 1, "", "join"], [577, 1, 1, "", "join_asof"], [578, 1, 1, "", "last"], [579, 1, 1, "", "lazy"], [580, 1, 1, "", "limit"], [581, 1, 1, "", "map"], [582, 1, 1, "", "max"], [583, 1, 1, "", "mean"], [584, 1, 1, "", "median"], [585, 1, 1, "", "melt"], [586, 1, 1, "", "merge_sorted"], [587, 1, 1, "", "min"], [588, 1, 1, "", "pipe"], [589, 1, 1, "", "profile"], [590, 1, 1, "", "quantile"], [591, 1, 1, "", "read_json"], [592, 1, 1, "", "rename"], [593, 1, 1, "", "reverse"], [594, 2, 1, "", "schema"], [595, 1, 1, "", "select"], [596, 1, 1, "", "shift"], [597, 1, 1, "", "shift_and_fill"], [598, 1, 1, "", "show_graph"], [599, 1, 1, "", "sink_ipc"], [600, 1, 1, "", "sink_parquet"], [601, 1, 1, "", "slice"], [602, 1, 1, "", "sort"], [603, 1, 1, "", "std"], [604, 1, 1, "", "sum"], [605, 1, 1, "", "tail"], [606, 1, 1, "", "take_every"], [607, 1, 1, "", "unique"], [608, 1, 1, "", "unnest"], [609, 1, 1, "", "update"], [610, 1, 1, "", "var"], [611, 2, 1, "", "width"], [612, 1, 1, "", "with_columns"], [613, 1, 1, "", "with_context"], [614, 1, 1, "", "with_row_count"], [615, 1, 1, "", "write_json"]], "polars.List": [[40, 1, 1, "", "__init__"]], "polars.Null": [[41, 1, 1, "", "__init__"]], "polars.Object": [[42, 1, 1, "", "__init__"]], "polars.SQLContext": [[43, 1, 1, "", "execute"], [44, 1, 1, "", "query"], [45, 1, 1, "", "register"]], "polars.Series": [[638, 1, 1, "", "abs"], [639, 1, 1, "", "alias"], [640, 1, 1, "", "all"], [641, 1, 1, "", "any"], [642, 1, 1, "", "append"], [643, 1, 1, "", "apply"], [644, 1, 1, "", "arccos"], [645, 1, 1, "", "arccosh"], [646, 1, 1, "", "arcsin"], [647, 1, 1, "", "arcsinh"], [648, 1, 1, "", "arctan"], [649, 1, 1, "", "arctanh"], [650, 1, 1, "", "arg_max"], [651, 1, 1, "", "arg_min"], [652, 1, 1, "", "arg_sort"], [653, 1, 1, "", "arg_true"], [654, 1, 1, "", "arg_unique"], [655, 1, 1, "", "argsort"], [656, 3, 1, "", "arr"], [688, 1, 1, "", "cast"], [689, 3, 1, "", "cat"], [691, 1, 1, "", "ceil"], [692, 1, 1, "", "chunk_lengths"], [693, 1, 1, "", "clear"], [694, 1, 1, "", "clip"], [695, 1, 1, "", "clip_max"], [696, 1, 1, "", "clip_min"], [697, 1, 1, "", "clone"], [698, 1, 1, "", "cos"], [699, 1, 1, "", "cosh"], [700, 1, 1, "", "cummax"], [701, 1, 1, "", "cummin"], [702, 1, 1, "", "cumprod"], [703, 1, 1, "", "cumsum"], [704, 1, 1, "", "cumulative_eval"], [705, 1, 1, "", "cut"], [706, 1, 1, "", "describe"], [707, 1, 1, "", "diff"], [708, 1, 1, "", "dot"], [709, 1, 1, "", "drop_nans"], [710, 1, 1, "", "drop_nulls"], [711, 3, 1, "", "dt"], [748, 3, 1, "", "dtype"], [749, 1, 1, "", "entropy"], [750, 1, 1, "", "estimated_size"], [751, 1, 1, "", "ewm_mean"], [752, 1, 1, "", "ewm_std"], [753, 1, 1, "", "ewm_var"], [754, 1, 1, "", "exp"], [755, 1, 1, "", "explode"], [756, 1, 1, "", "extend_constant"], [757, 1, 1, "", "fill_nan"], [758, 1, 1, "", "fill_null"], [759, 1, 1, "", "filter"], [760, 3, 1, "", "flags"], [761, 1, 1, "", "floor"], [762, 1, 1, "", "get_chunks"], [763, 1, 1, "", "has_validity"], [764, 1, 1, "", "hash"], [765, 1, 1, "", "head"], [766, 3, 1, "", "inner_dtype"], [767, 1, 1, "", "interpolate"], [768, 1, 1, "", "is_between"], [769, 1, 1, "", "is_boolean"], [770, 1, 1, "", "is_duplicated"], [771, 1, 1, "", "is_empty"], [772, 1, 1, "", "is_finite"], [773, 1, 1, "", "is_first"], [774, 1, 1, "", "is_float"], [775, 1, 1, "", "is_in"], [776, 1, 1, "", "is_infinite"], [777, 1, 1, "", "is_nan"], [778, 1, 1, "", "is_not_nan"], [779, 1, 1, "", "is_not_null"], [780, 1, 1, "", "is_null"], [781, 1, 1, "", "is_numeric"], [782, 1, 1, "", "is_sorted"], [783, 1, 1, "", "is_temporal"], [784, 1, 1, "", "is_unique"], [785, 1, 1, "", "is_utf8"], [786, 1, 1, "", "item"], [787, 1, 1, "", "kurtosis"], [788, 1, 1, "", "len"], [789, 1, 1, "", "limit"], [790, 1, 1, "", "log"], [791, 1, 1, "", "log10"], [792, 1, 1, "", "lower_bound"], [793, 1, 1, "", "map_dict"], [794, 1, 1, "", "max"], [795, 1, 1, "", "mean"], [796, 1, 1, "", "median"], [797, 1, 1, "", "min"], [798, 1, 1, "", "mode"], [799, 1, 1, "", "n_chunks"], [800, 1, 1, "", "n_unique"], [801, 3, 1, "", "name"], [802, 1, 1, "", "nan_max"], [803, 1, 1, "", "nan_min"], [804, 1, 1, "", "new_from_index"], [805, 1, 1, "", "null_count"], [806, 1, 1, "", "pct_change"], [807, 1, 1, "", "peak_max"], [808, 1, 1, "", "peak_min"], [809, 1, 1, "", "product"], [810, 1, 1, "", "quantile"], [811, 1, 1, "", "rank"], [812, 1, 1, "", "rechunk"], [813, 1, 1, "", "reinterpret"], [814, 1, 1, "", "rename"], [815, 1, 1, "", "reshape"], [816, 1, 1, "", "reverse"], [817, 1, 1, "", "rolling_apply"], [818, 1, 1, "", "rolling_max"], [819, 1, 1, "", "rolling_mean"], [820, 1, 1, "", "rolling_median"], [821, 1, 1, "", "rolling_min"], [822, 1, 1, "", "rolling_quantile"], [823, 1, 1, "", "rolling_skew"], [824, 1, 1, "", "rolling_std"], [825, 1, 1, "", "rolling_sum"], [826, 1, 1, "", "rolling_var"], [827, 1, 1, "", "round"], [828, 1, 1, "", "sample"], [829, 1, 1, "", "search_sorted"], [830, 1, 1, "", "series_equal"], [831, 1, 1, "", "set"], [832, 1, 1, "", "set_at_idx"], [833, 1, 1, "", "set_sorted"], [834, 3, 1, "", "shape"], [835, 1, 1, "", "shift"], [836, 1, 1, "", "shift_and_fill"], [837, 1, 1, "", "shrink_dtype"], [838, 1, 1, "", "shrink_to_fit"], [839, 1, 1, "", "shuffle"], [840, 1, 1, "", "sign"], [841, 1, 1, "", "sin"], [842, 1, 1, "", "sinh"], [843, 1, 1, "", "skew"], [844, 1, 1, "", "slice"], [845, 1, 1, "", "sort"], [846, 1, 1, "", "sqrt"], [847, 1, 1, "", "std"], [848, 3, 1, "", "str"], [883, 1, 1, "", "sum"], [884, 1, 1, "", "tail"], [885, 1, 1, "", "take"], [886, 1, 1, "", "take_every"], [887, 1, 1, "", "tan"], [888, 1, 1, "", "tanh"], [889, 3, 1, "", "time_unit"], [890, 1, 1, "", "to_arrow"], [891, 1, 1, "", "to_dummies"], [892, 1, 1, "", "to_frame"], [893, 1, 1, "", "to_list"], [894, 1, 1, "", "to_numpy"], [895, 1, 1, "", "to_pandas"], [896, 1, 1, "", "to_physical"], [897, 1, 1, "", "top_k"], [898, 1, 1, "", "unique"], [899, 1, 1, "", "unique_counts"], [900, 1, 1, "", "upper_bound"], [901, 1, 1, "", "value_counts"], [902, 1, 1, "", "var"], [903, 1, 1, "", "view"], [904, 1, 1, "", "zip_with"]], "polars.Series.arr": [[657, 1, 1, "", "arg_max"], [658, 1, 1, "", "arg_min"], [659, 1, 1, "", "concat"], [660, 1, 1, "", "contains"], [661, 1, 1, "", "count_match"], [662, 1, 1, "", "diff"], [663, 1, 1, "", "eval"], [664, 1, 1, "", "explode"], [665, 1, 1, "", "first"], [666, 1, 1, "", "get"], [667, 1, 1, "", "head"], [668, 1, 1, "", "join"], [669, 1, 1, "", "last"], [670, 1, 1, "", "lengths"], [671, 1, 1, "", "max"], [672, 1, 1, "", "mean"], [673, 1, 1, "", "min"], [674, 1, 1, "", "reverse"], [675, 1, 1, "", "shift"], [676, 1, 1, "", "slice"], [677, 1, 1, "", "sort"], [678, 1, 1, "", "sum"], [679, 1, 1, "", "tail"], [680, 1, 1, "", "take"], [681, 1, 1, "", "to_struct"], [682, 1, 1, "", "unique"]], "polars.Series.bin": [[683, 1, 1, "", "contains"], [684, 1, 1, "", "decode"], [685, 1, 1, "", "encode"], [686, 1, 1, "", "ends_with"], [687, 1, 1, "", "starts_with"]], "polars.Series.cat": [[690, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[712, 1, 1, "", "cast_time_unit"], [713, 1, 1, "", "combine"], [714, 1, 1, "", "convert_time_zone"], [715, 1, 1, "", "day"], [716, 1, 1, "", "days"], [717, 1, 1, "", "epoch"], [718, 1, 1, "", "hour"], [719, 1, 1, "", "hours"], [720, 1, 1, "", "iso_year"], [721, 1, 1, "", "max"], [722, 1, 1, "", "mean"], [723, 1, 1, "", "median"], [724, 1, 1, "", "microsecond"], [725, 1, 1, "", "microseconds"], [726, 1, 1, "", "millisecond"], [727, 1, 1, "", "milliseconds"], [728, 1, 1, "", "min"], [729, 1, 1, "", "minute"], [730, 1, 1, "", "minutes"], [731, 1, 1, "", "month"], [732, 1, 1, "", "nanosecond"], [733, 1, 1, "", "nanoseconds"], [734, 1, 1, "", "offset_by"], [735, 1, 1, "", "ordinal_day"], [736, 1, 1, "", "quarter"], [737, 1, 1, "", "replace_time_zone"], [738, 1, 1, "", "round"], [739, 1, 1, "", "second"], [740, 1, 1, "", "seconds"], [741, 1, 1, "", "strftime"], [742, 1, 1, "", "timestamp"], [743, 1, 1, "", "truncate"], [744, 1, 1, "", "week"], [745, 1, 1, "", "weekday"], [746, 1, 1, "", "with_time_unit"], [747, 1, 1, "", "year"]], "polars.Series.str": [[849, 1, 1, "", "concat"], [850, 1, 1, "", "contains"], [851, 1, 1, "", "count_match"], [852, 1, 1, "", "decode"], [853, 1, 1, "", "encode"], [854, 1, 1, "", "ends_with"], [855, 1, 1, "", "explode"], [856, 1, 1, "", "extract"], [857, 1, 1, "", "extract_all"], [858, 1, 1, "", "json_extract"], [859, 1, 1, "", "json_path_match"], [860, 1, 1, "", "lengths"], [861, 1, 1, "", "ljust"], [862, 1, 1, "", "lstrip"], [863, 1, 1, "", "n_chars"], [864, 1, 1, "", "parse_int"], [865, 1, 1, "", "replace"], [866, 1, 1, "", "replace_all"], [867, 1, 1, "", "rjust"], [868, 1, 1, "", "rstrip"], [869, 1, 1, "", "slice"], [870, 1, 1, "", "split"], [871, 1, 1, "", "split_exact"], [872, 1, 1, "", "splitn"], [873, 1, 1, "", "starts_with"], [874, 1, 1, "", "strip"], [875, 1, 1, "", "strptime"], [876, 1, 1, "", "to_lowercase"], [877, 1, 1, "", "to_uppercase"], [878, 1, 1, "", "zfill"]], "polars.Series.struct": [[879, 1, 1, "", "field"], [880, 3, 1, "", "fields"], [881, 1, 1, "", "rename_fields"], [882, 1, 1, "", "unnest"]], "polars.StringCache": [[46, 1, 1, "", "__init__"]], "polars.Struct": [[47, 1, 1, "", "__init__"]], "polars.Time": [[48, 1, 1, "", "__init__"]], "polars.UInt16": [[49, 1, 1, "", "__init__"]], "polars.UInt32": [[50, 1, 1, "", "__init__"]], "polars.UInt64": [[51, 1, 1, "", "__init__"]], "polars.UInt8": [[52, 1, 1, "", "__init__"]], "polars.Unknown": [[53, 1, 1, "", "__init__"]], "polars.Utf8": [[54, 1, 1, "", "__init__"]], "polars.api": [[56, 4, 1, "", "register_dataframe_namespace"], [57, 4, 1, "", "register_expr_namespace"], [58, 4, 1, "", "register_lazyframe_namespace"], [59, 4, 1, "", "register_series_namespace"]], "polars.exceptions": [[66, 5, 1, "", "ArrowError"], [67, 5, 1, "", "ColumnNotFoundError"], [68, 5, 1, "", "ComputeError"], [69, 5, 1, "", "DuplicateError"], [70, 5, 1, "", "InvalidOperationError"], [71, 5, 1, "", "NoDataError"], [72, 5, 1, "", "NoRowsReturned"], [73, 5, 1, "", "PanicException"], [74, 5, 1, "", "RowsException"], [75, 5, 1, "", "SchemaError"], [76, 5, 1, "", "SchemaFieldNotFoundError"], [77, 5, 1, "", "ShapeError"], [78, 5, 1, "", "StructFieldNotFoundError"], [79, 5, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[89, 1, 1, "", "next_batches"]], "polars.internals.dataframe.groupby.GroupBy": [[216, 1, 1, "", "__iter__"], [217, 1, 1, "", "agg"], [218, 1, 1, "", "all"], [219, 1, 1, "", "apply"], [220, 1, 1, "", "count"], [221, 1, 1, "", "first"], [222, 1, 1, "", "head"], [223, 1, 1, "", "last"], [224, 1, 1, "", "max"], [225, 1, 1, "", "mean"], [226, 1, 1, "", "median"], [227, 1, 1, "", "min"], [228, 1, 1, "", "n_unique"], [229, 1, 1, "", "quantile"], [230, 1, 1, "", "sum"], [231, 1, 1, "", "tail"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[616, 1, 1, "", "agg"], [617, 1, 1, "", "all"], [618, 1, 1, "", "apply"], [619, 1, 1, "", "count"], [620, 1, 1, "", "first"], [621, 1, 1, "", "head"], [622, 1, 1, "", "last"], [623, 1, 1, "", "max"], [624, 1, 1, "", "mean"], [625, 1, 1, "", "median"], [626, 1, 1, "", "min"], [627, 1, 1, "", "n_unique"], [628, 1, 1, "", "quantile"], [629, 1, 1, "", "sum"], [630, 1, 1, "", "tail"]], "polars.testing": [[110, 4, 1, "", "assert_frame_equal"], [111, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[112, 0, 1, "", "column"], [113, 4, 1, "", "columns"], [114, 4, 1, "", "dataframes"], [115, 4, 1, "", "series"]], "polars.testing.parametric.column": [[112, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 133], "api": [1, 56, 57, 58, 59, 551], "provid": 1, "new": 1, "function": [1, 240, 541, 550], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904], "binari": [2, 536, 907], "boolean": [3, 537, 908], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 119], "load": [5, 119], "restore_default": 6, "save": [7, 119], "set_ascii_t": 8, "set_fmt_float": 9, "set_fmt_str_length": 10, "set_tbl_cell_align": 11, "set_tbl_col": 12, "set_tbl_column_data_type_inlin": 13, "set_tbl_dataframe_shape_below": 14, "set_tbl_format": 15, "set_tbl_hide_column_data_typ": 16, "set_tbl_hide_column_nam": 17, "set_tbl_hide_dataframe_shap": 18, "set_tbl_hide_dtype_separ": 19, "set_tbl_row": 20, "set_tbl_width_char": 21, "set_verbos": 22, "state": [23, 119], "datafram": [24, 25, 26, 27, 28, 29, 114, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237], "write_avro": 24, "write_csv": 25, "write_ipc": 26, "write_json": [27, 615], "write_ndjson": 28, "write_parquet": 29, "datatyp": 30, "date": [31, 240, 504], "datetim": [32, 505], "durat": [33, 506], "float32": 34, "float64": 35, "int16": 36, "int32": 37, "int64": 38, "int8": 39, "list": [40, 381, 515], "null": 41, "object": 42, "sqlcontext": [43, 44, 45], "execut": 43, "queri": 44, "regist": 45, "stringcach": [46, 550], "struct": [47, 472, 473, 530, 547, 879, 880, 881, 882, 917], "time": [48, 240], "uint16": 49, "uint32": 50, "uint64": 51, "uint8": 52, "unknown": 53, "utf8": 54, "align_fram": 55, "register_dataframe_namespac": 56, "register_expr_namespac": 57, "register_lazyframe_namespac": 58, "register_series_namespac": 59, "arg_wher": 60, "build_info": 61, "collect_al": 62, "concat": [63, 264, 442, 659, 849], "cut": [64, 705], "date_rang": 65, "except": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 241], "arrowerror": 66, "columnnotfounderror": 67, "computeerror": 68, "duplicateerror": 69, "invalidoperationerror": 70, "nodataerror": 71, "norowsreturn": 72, "panicexcept": 73, "rowsexcept": 74, "schemaerror": 75, "schemafieldnotfounderror": 76, "shapeerror": 77, "structfieldnotfounderror": 78, "toomanyrowsreturn": 79, "from_arrow": 80, "from_datafram": 81, "from_dict": [82, 83], "from_numpi": 84, "from_panda": 85, "from_record": 86, "get_dummi": 87, "get_idx_typ": 88, "intern": [89, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630], "batch": 89, "batchedcsvread": [89, 552], "next_batch": 89, "ones": 90, "read_avro": 91, "read_csv": 92, "read_csv_batch": 93, "read_delta": 94, "read_excel": 95, "read_ipc": 96, "read_ipc_schema": 97, "read_json": [98, 591], "read_ndjson": 99, "read_parquet": 100, "read_parquet_schema": 101, "read_sql": 102, "scan_csv": 103, "scan_delta": 104, "scan_d": 105, "scan_ipc": 106, "scan_ndjson": 107, "scan_parquet": 108, "show_vers": 109, "test": [110, 111, 112, 113, 114, 115, 920], "assert_frame_equ": 110, "assert_series_equ": 111, "parametr": [112, 113, 114, 115], "column": [112, 113, 125, 539, 558], "seri": [115, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 913], "threadpool_s": 116, "toggle_string_cach": 117, "zero": 118, "option": 119, "current": 119, "us": 119, "context": 119, "manag": 119, "aggreg": [120, 242, 553, 637], "__dataframe__": 121, "appli": [122, 219, 249, 491, 618, 643], "clear": [123, 555, 693], "clone": [124, 556, 697], "describ": [126, 706], "drop": [127, 559], "drop_in_plac": 128, "drop_nul": [129, 312, 560, 710], "dtype": [130, 561, 748], "estimated_s": [131, 750], "explod": [132, 269, 351, 448, 563, 664, 755, 855], "fill_nan": [134, 353, 565, 757], "fill_nul": [135, 354, 566, 758], "filter": [136, 355, 567, 759], "find_idx_by_nam": 137, "fold": [138, 510], "frame_equ": 139, "get_column": [140, 141], "glimps": 142, "groupbi": [143, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 570, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633], "groupby_dynam": [144, 571], "groupby_rol": [145, 572], "hash_row": 146, "head": [147, 222, 272, 361, 514, 573, 621, 667, 765], "height": 148, "hstack": 149, "insert_at_idx": 150, "interpol": [151, 363, 575, 767], "is_dupl": [152, 365, 770], "is_empti": [153, 771], "is_uniqu": [154, 375, 784], "item": [155, 786], "iter_row": 156, "iter_slic": 157, "join": [158, 273, 576, 668], "join_asof": [159, 577], "lazi": [160, 550, 579], "limit": [161, 380, 580, 789], "max": [162, 224, 276, 388, 518, 582, 623, 671, 721, 794], "mean": [163, 225, 277, 389, 519, 583, 624, 672, 722, 795], "median": [164, 226, 390, 520, 584, 625, 723, 796], "melt": [165, 585], "merge_sort": [166, 586], "min": [167, 227, 278, 397, 521, 587, 626, 673, 728, 797], "n_chunk": [168, 799], "n_uniqu": [169, 228, 399, 522, 627, 800], "null_count": [170, 402, 805], "partition_bi": 171, "pearson_corr": [172, 523], "pipe": [173, 588], "pivot": 174, "product": [175, 407, 809], "quantil": [176, 229, 408, 524, 590, 628, 810], "rechunk": [177, 410, 812], "renam": [178, 592, 814], "replac": [179, 458, 865], "replace_at_idx": 180, "revers": [181, 279, 414, 593, 674, 816], "row": [182, 183], "sampl": [184, 426, 828], "schema": [185, 594], "select": [186, 239, 527, 545, 595, 636, 915], "shape": [187, 834], "shift": [188, 280, 429, 596, 675, 835], "shift_and_fil": [189, 430, 597, 836], "shrink_to_fit": [190, 838], "slice": [191, 281, 437, 462, 601, 676, 844, 869], "sort": [192, 282, 438, 602, 677, 845], "std": [193, 441, 529, 603, 847], "sum": [194, 230, 283, 475, 531, 604, 629, 678, 883], "tail": [195, 231, 284, 476, 532, 605, 630, 679, 884], "take_everi": [196, 478, 606, 886], "to_arrow": [197, 890], "to_dict": [198, 199], "to_dummi": [200, 891], "to_numpi": [201, 894], "to_panda": [202, 895], "to_seri": 203, "to_struct": [204, 286, 681], "transpos": 205, "uniqu": [206, 287, 483, 607, 682, 898], "unnest": [207, 608, 882], "unstack": 208, "updat": [209, 609], "upsampl": 210, "var": [211, 487, 533, 610, 902], "vstack": 212, "width": [213, 611], "with_column": [214, 612], "with_row_count": [215, 614], "__iter__": 216, "agg": [217, 616], "all": [218, 246, 489, 617, 640], "count": [220, 302, 499, 619], "first": [221, 270, 356, 509, 568, 620, 665], "last": [223, 274, 378, 578, 622, 669], "attribut": [232, 631, 906], "comput": [233, 540, 910], "descript": [234, 632, 911], "export": [235, 912], "miscellan": [238, 544, 550, 635, 914], "manipul": [239, 545, 636, 915], "data": 240, "type": 240, "numer": 240, "nest": 240, "other": 240, "expr": [243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488], "ab": [243, 638], "agg_group": 244, "alia": [245, 639], "ani": [247, 490, 641], "append": [248, 642], "arcco": [250, 644], "arccosh": [251, 645], "arcsin": [252, 646], "arcsinh": [253, 647], "arctan": [254, 648], "arctanh": [255, 649], "arg_max": [256, 262, 650, 657], "arg_min": [257, 263, 651, 658], "arg_sort": [258, 652], "arg_tru": [259, 653], "arg_uniqu": [260, 654], "argsort": [261, 655], "arr": [262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682], "contain": [265, 289, 443, 660, 683, 850], "count_match": [266, 444, 661, 851], "diff": [267, 309, 662, 707], "eval": [268, 663], "get": [271, 666], "length": [275, 453, 670, 860], "take": [285, 477, 680, 885], "backward_fil": 288, "bin": [289, 290, 291, 292, 293, 683, 684, 685, 686, 687], "decod": [290, 445, 684, 852], "encod": [291, 446, 685, 853], "ends_with": [292, 447, 686, 854], "starts_with": [293, 466, 687, 873], "cast": [294, 688], "cat": [295, 689, 690], "set_ord": [295, 690], "ceil": [296, 691], "clip": [297, 694], "clip_max": [298, 695], "clip_min": [299, 696], "co": [300, 698], "cosh": [301, 699], "cumcount": 303, "cummax": [304, 700], "cummin": [305, 701], "cumprod": [306, 702], "cumsum": [307, 503, 703], "cumulative_ev": [308, 704], "dot": [310, 708], "drop_nan": [311, 709], "dt": [313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747], "cast_time_unit": [313, 712], "combin": [314, 713], "convert_time_zon": [315, 714], "dai": [316, 317, 715, 716], "epoch": [318, 717], "hour": [319, 320, 718, 719], "iso_year": [321, 720], "microsecond": [322, 323, 724, 725], "millisecond": [324, 325, 726, 727], "minut": [326, 327, 729, 730], "month": [328, 731], "nanosecond": [329, 330, 732, 733], "offset_bi": [331, 734], "ordinal_dai": [332, 735], "quarter": [333, 736], "replace_time_zon": [334, 737], "round": [335, 425, 738, 827], "second": [336, 337, 739, 740], "strftime": [338, 741], "timestamp": [339, 742], "truncat": [340, 743], "week": [341, 744], "weekdai": [342, 745], "with_time_unit": [343, 746], "year": [344, 747], "entropi": [345, 749], "ewm_mean": [346, 751], "ewm_std": [347, 752], "ewm_var": [348, 753], "exclud": [349, 508], "exp": [350, 754], "extend_const": [352, 756], "flatten": 357, "floor": [358, 761], "forward_fil": 359, "hash": [360, 764], "inspect": [362, 574], "is_between": [364, 768], "is_finit": [366, 772], "is_first": [367, 773], "is_in": [368, 775], "is_infinit": [369, 776], "is_nan": [370, 777], "is_not": 371, "is_not_nan": [372, 778], "is_not_nul": [373, 779], "is_nul": [374, 780], "keep_nam": 376, "kurtosi": [377, 787], "len": [379, 788], "log": [382, 790], "log10": [383, 791], "lower_bound": [384, 792], "map": [385, 517, 581], "map_alia": 386, "map_dict": [387, 793], "meta": [391, 392, 393, 394, 395, 396, 543], "has_multiple_output": 391, "is_regex_project": 392, "output_nam": 393, "pop": 394, "root_nam": 395, "undo_alias": 396, "mode": [398, 798], "nan_max": [400, 802], "nan_min": [401, 803], "over": 403, "pct_chang": [404, 806], "pow": 405, "prefix": 406, "rank": [409, 811], "reinterpret": [411, 813], "repeat_bi": 412, "reshap": [413, 815], "rolling_appli": [415, 817], "rolling_max": [416, 818], "rolling_mean": [417, 819], "rolling_median": [418, 820], "rolling_min": [419, 821], "rolling_quantil": [420, 822], "rolling_skew": [421, 823], "rolling_std": [422, 824], "rolling_sum": [423, 825], "rolling_var": [424, 826], "search_sort": [427, 829], "set_sort": [428, 833], "shrink_dtyp": [431, 837], "shuffl": [432, 839], "sign": [433, 840], "sin": [434, 841], "sinh": [435, 842], "skew": [436, 843], "sort_bi": 439, "sqrt": [440, 846], "str": [442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878], "extract": [449, 856], "extract_al": [450, 857], "json_extract": [451, 858], "json_path_match": [452, 859], "ljust": [454, 861], "lstrip": [455, 862], "n_char": [456, 863], "parse_int": [457, 864], "replace_al": [459, 866], "rjust": [460, 867], "rstrip": [461, 868], "split": [463, 870], "split_exact": [464, 871], "splitn": [465, 872], "strip": [467, 874], "strptime": [468, 875], "to_lowercas": [469, 876], "to_uppercas": [470, 877], "zfill": [471, 878], "field": [472, 879, 880], "rename_field": [473, 881], "suffix": 474, "tan": [479, 887], "tanh": [480, 888], "to_phys": [481, 896], "top_k": [482, 897], "unique_count": [484, 899], "upper_bound": [485, 900], "value_count": [486, 901], "where": 488, "arang": 492, "arg_sort_bi": 493, "avg": 494, "coalesc": 495, "col": 496, "concat_list": 497, "concat_str": 498, "cov": 500, "cumfold": 501, "cumreduc": 502, "element": 507, "format": 511, "from_epoch": 512, "group": 513, "lit": 516, "reduc": 525, "repeat": 526, "spearman_rank_corr": 528, "when": 534, "arrai": [535, 905], "categori": [538, 909], "name": [539, 801], "express": 542, "string": [546, 916], "tempor": [548, 918], "window": 549, "convers": 550, "eager": 550, "parallel": 550, "refer": 551, "input": 552, "output": 552, "csv": 552, "feather": 552, "ipc": 552, "parquet": 552, "sql": [552, 919], "json": 552, "avro": 552, "excel": 552, "delta": 552, "lake": 552, "dataset": 552, "lazyfram": [554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 634], "cach": 554, "collect": 557, "explain": 562, "fetch": 564, "from_json": 569, "profil": 589, "show_graph": 598, "sink_ipc": 599, "sink_parquet": 600, "with_context": 613, "lazygroupbi": [616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630], "read": 635, "write": 635, "logic": 635, "plan": 635, "chunk_length": 692, "flag": 760, "get_chunk": 762, "has_valid": 763, "inner_dtyp": 766, "is_boolean": 769, "is_float": 774, "is_numer": 781, "is_sort": 782, "is_tempor": 783, "is_utf8": 785, "new_from_index": 804, "peak_max": 807, "peak_min": 808, "series_equ": 830, "set": 831, "set_at_idx": 832, "time_unit": 889, "to_fram": 892, "to_list": 893, "view": 903, "zip_with": 904, "method": 919, "assert": 920, "properti": 920, "base": 920, "strategi": 920, "helper": 920, "util": 921}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.exceptions.SchemaError": [[75, "polars-exceptions-schemaerror"]], "polars.from_dataframe": [[81, "polars-from-dataframe"]], "polars.read_excel": [[95, "polars-read-excel"]], "polars.read_parquet_schema": [[101, "polars-read-parquet-schema"]], "polars.ones": [[90, "polars-ones"]], "polars.from_records": [[86, "polars-from-records"]], "polars.scan_csv": [[103, "polars-scan-csv"]], "polars.testing.parametric.series": [[115, "polars-testing-parametric-series"]], "polars.exceptions.ComputeError": [[68, "polars-exceptions-computeerror"]], "polars.from_dict": [[82, "polars-from-dict"]], "polars.testing.parametric.dataframes": [[114, "polars-testing-parametric-dataframes"]], "polars.exceptions.ColumnNotFoundError": [[67, "polars-exceptions-columnnotfounderror"]], "polars.DataFrame.clear": [[123, "polars-dataframe-clear"]], "polars.DataFrame.drop": [[127, "polars-dataframe-drop"]], "polars.DataFrame.dtypes": [[130, "polars-dataframe-dtypes"]], "polars.read_ipc_schema": [[97, "polars-read-ipc-schema"]], "polars.DataFrame.clone": [[124, "polars-dataframe-clone"]], "polars.DataFrame.estimated_size": [[131, "polars-dataframe-estimated-size"]], "polars.DataFrame.apply": [[122, "polars-dataframe-apply"]], "polars.from_arrow": [[80, "polars-from-arrow"]], "polars.scan_ndjson": [[107, "polars-scan-ndjson"]], "polars.get_dummies": [[87, "polars-get-dummies"]], "polars.show_versions": [[109, "polars-show-versions"]], "polars.DataFrame.drop_in_place": [[128, "polars-dataframe-drop-in-place"]], "polars.DataFrame.describe": [[126, "polars-dataframe-describe"]], "polars.read_ndjson": [[99, "polars-read-ndjson"]], "polars.from_numpy": [[84, "polars-from-numpy"]], "polars.from_dicts": [[83, "polars-from-dicts"]], "polars.read_csv_batched": [[93, "polars-read-csv-batched"]], "polars.exceptions.NoDataError": [[71, "polars-exceptions-nodataerror"]], "polars.read_csv": [[92, "polars-read-csv"]], "polars.zeros": [[118, "polars-zeros"]], "polars.DataFrame.__dataframe__": [[121, "polars-dataframe-dataframe"]], "polars.read_delta": [[94, "polars-read-delta"]], "polars.scan_parquet": [[108, "polars-scan-parquet"]], "polars.threadpool_size": [[116, "polars-threadpool-size"]], "polars.exceptions.DuplicateError": [[69, "polars-exceptions-duplicateerror"]], "polars.DataFrame.columns": [[125, "polars-dataframe-columns"]], "polars.read_parquet": [[100, "polars-read-parquet"]], "polars.exceptions.RowsException": [[74, "polars-exceptions-rowsexception"]], "polars.DataFrame.drop_nulls": [[129, "polars-dataframe-drop-nulls"]], "polars.exceptions.StructFieldNotFoundError": [[78, "polars-exceptions-structfieldnotfounderror"]], "polars.testing.parametric.column": [[112, "polars-testing-parametric-column"]], "polars.DataFrame.explode": [[132, "polars-dataframe-explode"]], "polars.scan_delta": [[104, "polars-scan-delta"]], "polars.testing.assert_frame_equal": [[110, "polars-testing-assert-frame-equal"]], "polars.scan_ds": [[105, "polars-scan-ds"]], "polars.toggle_string_cache": [[117, "polars-toggle-string-cache"]], "polars.get_idx_type": [[88, "polars-get-idx-type"]], "polars.exceptions.InvalidOperationError": [[70, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.NoRowsReturned": [[72, "polars-exceptions-norowsreturned"]], "polars.exceptions.PanicException": [[73, "polars-exceptions-panicexception"]], "polars.exceptions.SchemaFieldNotFoundError": [[76, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.ShapeError": [[77, "polars-exceptions-shapeerror"]], "polars.read_avro": [[91, "polars-read-avro"]], "polars.testing.parametric.columns": [[113, "polars-testing-parametric-columns"]], "polars.read_json": [[98, "polars-read-json"]], "Aggregation": [[120, "aggregation"], [637, "aggregation"], [553, "aggregation"], [242, "aggregation"]], "polars.read_ipc": [[96, "polars-read-ipc"]], "polars.exceptions.TooManyRowsReturned": [[79, "polars-exceptions-toomanyrowsreturned"]], "Config": [[119, "config"]], "Config options": [[119, "config-options"]], "Config load, save, and current state": [[119, "config-load-save-and-current-state"]], "Use as a context manager": [[119, "use-as-a-context-manager"]], "polars.DataFrame.extend": [[133, "polars-dataframe-extend"]], "polars.read_sql": [[102, "polars-read-sql"]], "polars.scan_ipc": [[106, "polars-scan-ipc"]], "polars.testing.assert_series_equal": [[111, "polars-testing-assert-series-equal"]], "polars.from_pandas": [[85, "polars-from-pandas"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[89, "polars-internals-batched-batchedcsvreader-next-batches"]], "polars.SQLContext.query": [[44, "polars-sqlcontext-query"]], "polars.api.register_dataframe_namespace": [[56, "polars-api-register-dataframe-namespace"]], "polars.Config.set_tbl_cell_alignment": [[11, "polars-config-set-tbl-cell-alignment"]], "polars.date_range": [[65, "polars-date-range"]], "polars.api.register_series_namespace": [[59, "polars-api-register-series-namespace"]], "polars.Struct": [[47, "polars-struct"]], "polars.Object": [[42, "polars-object"]], "polars.DataFrame.write_json": [[27, "polars-dataframe-write-json"]], "polars.Config.restore_defaults": [[6, "polars-config-restore-defaults"]], "polars.collect_all": [[62, "polars-collect-all"]], "polars.Config.set_tbl_hide_column_names": [[17, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_rows": [[20, "polars-config-set-tbl-rows"]], "polars.arg_where": [[60, "polars-arg-where"]], "polars.Config.save": [[7, "polars-config-save"]], "polars.DataFrame.write_avro": [[24, "polars-dataframe-write-avro"]], "polars.Duration": [[33, "polars-duration"]], "polars.SQLContext.execute": [[43, "polars-sqlcontext-execute"]], "polars.SQLContext.register": [[45, "polars-sqlcontext-register"]], "polars.DataFrame.write_csv": [[25, "polars-dataframe-write-csv"]], "polars.Int8": [[39, "polars-int8"]], "polars.UInt8": [[52, "polars-uint8"]], "polars.Unknown": [[53, "polars-unknown"]], "polars.align_frames": [[55, "polars-align-frames"]], "polars.api.register_expr_namespace": [[57, "polars-api-register-expr-namespace"]], "polars.Config.set_fmt_float": [[9, "polars-config-set-fmt-float"]], "polars.Config.set_tbl_formatting": [[15, "polars-config-set-tbl-formatting"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Config.set_ascii_tables": [[8, "polars-config-set-ascii-tables"]], "polars.Config.state": [[23, "polars-config-state"]], "polars.StringCache": [[46, "polars-stringcache"]], "polars.build_info": [[61, "polars-build-info"]], "polars.Int32": [[37, "polars-int32"]], "polars.Float64": [[35, "polars-float64"]], "polars.Config.set_tbl_hide_dtype_separator": [[19, "polars-config-set-tbl-hide-dtype-separator"]], "polars.cut": [[64, "polars-cut"]], "polars.Utf8": [[54, "polars-utf8"]], "polars.Binary": [[2, "polars-binary"]], "polars.Config.set_tbl_hide_column_data_types": [[16, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_width_chars": [[21, "polars-config-set-tbl-width-chars"]], "polars.UInt16": [[49, "polars-uint16"]], "polars.DataFrame.write_parquet": [[29, "polars-dataframe-write-parquet"]], "polars.UInt32": [[50, "polars-uint32"]], "polars.Config.set_tbl_hide_dataframe_shape": [[18, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_cols": [[12, "polars-config-set-tbl-cols"]], "polars.Datetime": [[32, "polars-datetime"]], "polars.UInt64": [[51, "polars-uint64"]], "polars.exceptions.ArrowError": [[66, "polars-exceptions-arrowerror"]], "polars.Float32": [[34, "polars-float32"]], "polars.Config.set_tbl_column_data_type_inline": [[13, "polars-config-set-tbl-column-data-type-inline"]], "polars.DataType": [[30, "polars-datatype"]], "polars.Null": [[41, "polars-null"]], "polars.Config.set_tbl_dataframe_shape_below": [[14, "polars-config-set-tbl-dataframe-shape-below"]], "polars.DataFrame.write_ipc": [[26, "polars-dataframe-write-ipc"]], "polars.Time": [[48, "polars-time"]], "polars.Config.set_verbose": [[22, "polars-config-set-verbose"]], "polars.Config.load": [[5, "polars-config-load"]], "polars.Int64": [[38, "polars-int64"]], "polars.Int16": [[36, "polars-int16"]], "polars.List": [[40, "polars-list"]], "polars.Date": [[31, "polars-date"]], "polars.Config.set_fmt_str_lengths": [[10, "polars-config-set-fmt-str-lengths"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.DataFrame.write_ndjson": [[28, "polars-dataframe-write-ndjson"]], "polars.concat": [[63, "polars-concat"]], "polars.api.register_lazyframe_namespace": [[58, "polars-api-register-lazyframe-namespace"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.Series.rolling_var": [[826, "polars-series-rolling-var"]], "polars.Series.shrink_to_fit": [[838, "polars-series-shrink-to-fit"]], "polars.Series.str.extract_all": [[857, "polars-series-str-extract-all"]], "polars.Series.rolling_skew": [[823, "polars-series-rolling-skew"]], "polars.Series.sample": [[828, "polars-series-sample"]], "polars.Series.rename": [[814, "polars-series-rename"]], "polars.Series.rolling_sum": [[825, "polars-series-rolling-sum"]], "polars.Series.set_sorted": [[833, "polars-series-set-sorted"]], "polars.Series.slice": [[844, "polars-series-slice"]], "polars.Series.quantile": [[810, "polars-series-quantile"]], "polars.Series.str.decode": [[852, "polars-series-str-decode"]], "polars.Series.rolling_quantile": [[822, "polars-series-rolling-quantile"]], "polars.Series.reshape": [[815, "polars-series-reshape"]], "polars.Series.sort": [[845, "polars-series-sort"]], "polars.Series.str.lengths": [[860, "polars-series-str-lengths"]], "polars.Series.rolling_min": [[821, "polars-series-rolling-min"]], "polars.Series.rolling_apply": [[817, "polars-series-rolling-apply"]], "polars.Series.str.json_extract": [[858, "polars-series-str-json-extract"]], "polars.Series.str.ljust": [[861, "polars-series-str-ljust"]], "polars.Series.str.split": [[870, "polars-series-str-split"]], "polars.Series.str.contains": [[850, "polars-series-str-contains"]], "polars.Series.shape": [[834, "polars-series-shape"]], "polars.Series.str.json_path_match": [[859, "polars-series-str-json-path-match"]], "polars.Series.set_at_idx": [[832, "polars-series-set-at-idx"]], "polars.Series.str.parse_int": [[864, "polars-series-str-parse-int"]], "polars.Series.str.slice": [[869, "polars-series-str-slice"]], "polars.Series.rolling_max": [[818, "polars-series-rolling-max"]], "polars.Series.shrink_dtype": [[837, "polars-series-shrink-dtype"]], "polars.Series.shuffle": [[839, "polars-series-shuffle"]], "polars.Series.str.lstrip": [[862, "polars-series-str-lstrip"]], "polars.Series.str.encode": [[853, "polars-series-str-encode"]], "polars.Series.rank": [[811, "polars-series-rank"]], "polars.Series.str.replace": [[865, "polars-series-str-replace"]], "polars.Series.std": [[847, "polars-series-std"]], "polars.Series.str.n_chars": [[863, "polars-series-str-n-chars"]], "polars.Series.str.ends_with": [[854, "polars-series-str-ends-with"]], "polars.Series.sin": [[841, "polars-series-sin"]], "polars.Series.sqrt": [[846, "polars-series-sqrt"]], "polars.Series.skew": [[843, "polars-series-skew"]], "polars.Series.str.extract": [[856, "polars-series-str-extract"]], "polars.Series.null_count": [[805, "polars-series-null-count"]], "polars.Series.str.explode": [[855, "polars-series-str-explode"]], "polars.Series.reinterpret": [[813, "polars-series-reinterpret"]], "polars.Series.rolling_mean": [[819, "polars-series-rolling-mean"]], "polars.Series.peak_min": [[808, "polars-series-peak-min"]], "polars.Series.new_from_index": [[804, "polars-series-new-from-index"]], "polars.Series.series_equal": [[830, "polars-series-series-equal"]], "polars.Series.shift": [[835, "polars-series-shift"]], "polars.Series.str": [[848, "polars-series-str"]], "polars.Series.rolling_median": [[820, "polars-series-rolling-median"]], "polars.Series.round": [[827, "polars-series-round"]], "polars.Series.pct_change": [[806, "polars-series-pct-change"]], "polars.Series.str.count_match": [[851, "polars-series-str-count-match"]], "polars.Series.peak_max": [[807, "polars-series-peak-max"]], "polars.Series.product": [[809, "polars-series-product"]], "polars.Series.sign": [[840, "polars-series-sign"]], "polars.Series.shift_and_fill": [[836, "polars-series-shift-and-fill"]], "polars.Series.str.rstrip": [[868, "polars-series-str-rstrip"]], "polars.Series.set": [[831, "polars-series-set"]], "polars.Series.sinh": [[842, "polars-series-sinh"]], "polars.Series.reverse": [[816, "polars-series-reverse"]], "polars.Series.str.replace_all": [[866, "polars-series-str-replace-all"]], "polars.Series.search_sorted": [[829, "polars-series-search-sorted"]], "polars.Series.str.concat": [[849, "polars-series-str-concat"]], "polars.Series.str.rjust": [[867, "polars-series-str-rjust"]], "polars.Series.rechunk": [[812, "polars-series-rechunk"]], "polars.Series.rolling_std": [[824, "polars-series-rolling-std"]], "polars.Series.is_null": [[780, "polars-series-is-null"]], "polars.Series.log": [[790, "polars-series-log"]], "polars.Series.map_dict": [[793, "polars-series-map-dict"]], "polars.Series.is_temporal": [[783, "polars-series-is-temporal"]], "polars.Series.dt.with_time_unit": [[746, "polars-series-dt-with-time-unit"]], "polars.Series.is_not_null": [[779, "polars-series-is-not-null"]], "polars.Series.n_chunks": [[799, "polars-series-n-chunks"]], "polars.Series.dt.seconds": [[740, "polars-series-dt-seconds"]], "polars.Series.interpolate": [[767, "polars-series-interpolate"]], "polars.Series.inner_dtype": [[766, "polars-series-inner-dtype"]], "polars.Series.explode": [[755, "polars-series-explode"]], "polars.Series.dt.year": [[747, "polars-series-dt-year"]], "polars.Series.is_finite": [[772, "polars-series-is-finite"]], "polars.Series.fill_nan": [[757, "polars-series-fill-nan"]], "polars.Series.filter": [[759, "polars-series-filter"]], "polars.Series.fill_null": [[758, "polars-series-fill-null"]], "polars.Series.is_infinite": [[776, "polars-series-is-infinite"]], "polars.Series.is_duplicated": [[770, "polars-series-is-duplicated"]], "polars.Series.hash": [[764, "polars-series-hash"]], "polars.Series.dt.second": [[739, "polars-series-dt-second"]], "polars.Series.entropy": [[749, "polars-series-entropy"]], "polars.Series.dtype": [[748, "polars-series-dtype"]], "polars.Series.kurtosis": [[787, "polars-series-kurtosis"]], "polars.Series.dt.timestamp": [[742, "polars-series-dt-timestamp"]], "polars.Series.item": [[786, "polars-series-item"]], "polars.Series.dt.replace_time_zone": [[737, "polars-series-dt-replace-time-zone"]], "polars.Series.is_boolean": [[769, "polars-series-is-boolean"]], "polars.Series.is_float": [[774, "polars-series-is-float"]], "polars.Series.is_nan": [[777, "polars-series-is-nan"]], "polars.Series.dt.truncate": [[743, "polars-series-dt-truncate"]], "polars.Series.head": [[765, "polars-series-head"]], "polars.Series.is_sorted": [[782, "polars-series-is-sorted"]], "polars.Series.is_utf8": [[785, "polars-series-is-utf8"]], "polars.Series.dt.round": [[738, "polars-series-dt-round"]], "polars.Series.is_numeric": [[781, "polars-series-is-numeric"]], "polars.Series.dt.weekday": [[745, "polars-series-dt-weekday"]], "polars.Series.n_unique": [[800, "polars-series-n-unique"]], "polars.Series.estimated_size": [[750, "polars-series-estimated-size"]], "polars.Series.nan_min": [[803, "polars-series-nan-min"]], "polars.Series.is_not_nan": [[778, "polars-series-is-not-nan"]], "polars.Series.min": [[797, "polars-series-min"]], "polars.Series.floor": [[761, "polars-series-floor"]], "polars.Series.ewm_std": [[752, "polars-series-ewm-std"]], "polars.Series.mode": [[798, "polars-series-mode"]], "polars.Series.dt.week": [[744, "polars-series-dt-week"]], "polars.Series.ewm_mean": [[751, "polars-series-ewm-mean"]], "polars.Series.ewm_var": [[753, "polars-series-ewm-var"]], "polars.Series.median": [[796, "polars-series-median"]], "polars.Series.flags": [[760, "polars-series-flags"]], "polars.Series.extend_constant": [[756, "polars-series-extend-constant"]], "polars.Series.get_chunks": [[762, "polars-series-get-chunks"]], "polars.Series.limit": [[789, "polars-series-limit"]], "polars.Series.is_in": [[775, "polars-series-is-in"]], "polars.Series.name": [[801, "polars-series-name"]], "polars.Series.is_between": [[768, "polars-series-is-between"]], "polars.Series.mean": [[795, "polars-series-mean"]], "polars.Series.is_first": [[773, "polars-series-is-first"]], "polars.Series.is_unique": [[784, "polars-series-is-unique"]], "polars.Series.dt.strftime": [[741, "polars-series-dt-strftime"]], "polars.Series.max": [[794, "polars-series-max"]], "polars.Series.lower_bound": [[792, "polars-series-lower-bound"]], "polars.Series.log10": [[791, "polars-series-log10"]], "polars.Series.is_empty": [[771, "polars-series-is-empty"]], "polars.Series.has_validity": [[763, "polars-series-has-validity"]], "polars.Series.len": [[788, "polars-series-len"]], "polars.Series.exp": [[754, "polars-series-exp"]], "polars.Series.nan_max": [[802, "polars-series-nan-max"]], "polars.Series.clone": [[697, "polars-series-clone"]], "polars.Series.dt.epoch": [[717, "polars-series-dt-epoch"]], "polars.Series.cummax": [[700, "polars-series-cummax"]], "polars.Series.dt.hour": [[718, "polars-series-dt-hour"]], "polars.Series.drop_nans": [[709, "polars-series-drop-nans"]], "polars.Series.chunk_lengths": [[692, "polars-series-chunk-lengths"]], "polars.Series.arr.tail": [[679, "polars-series-arr-tail"]], "polars.Series.arr.to_struct": [[681, "polars-series-arr-to-struct"]], "polars.Series.describe": [[706, "polars-series-describe"]], "polars.Series.diff": [[707, "polars-series-diff"]], "polars.Series.dt.microsecond": [[724, "polars-series-dt-microsecond"]], "polars.Series.dt.hours": [[719, "polars-series-dt-hours"]], "polars.Series.cat": [[689, "polars-series-cat"]], "polars.Series.cat.set_ordering": [[690, "polars-series-cat-set-ordering"]], "polars.Series.bin.encode": [[685, "polars-series-bin-encode"]], "polars.Series.dt.day": [[715, "polars-series-dt-day"]], "polars.Series.cumsum": [[703, "polars-series-cumsum"]], "polars.Series.arr.slice": [[676, "polars-series-arr-slice"]], "polars.Series.cummin": [[701, "polars-series-cummin"]], "polars.Series.dt.max": [[721, "polars-series-dt-max"]], "polars.Series.dt.nanoseconds": [[733, "polars-series-dt-nanoseconds"]], "polars.Series.arr.reverse": [[674, "polars-series-arr-reverse"]], "polars.Series.cos": [[698, "polars-series-cos"]], "polars.Series.drop_nulls": [[710, "polars-series-drop-nulls"]], "polars.Series.arr.shift": [[675, "polars-series-arr-shift"]], "polars.Series.dt.offset_by": [[734, "polars-series-dt-offset-by"]], "polars.Series.clear": [[693, "polars-series-clear"]], "polars.Series.dt": [[711, "polars-series-dt"]], "polars.Series.dt.min": [[728, "polars-series-dt-min"]], "polars.Series.cut": [[705, "polars-series-cut"]], "polars.Series.bin.ends_with": [[686, "polars-series-bin-ends-with"]], "polars.Series.clip_min": [[696, "polars-series-clip-min"]], "polars.Series.cumprod": [[702, "polars-series-cumprod"]], "polars.Series.cumulative_eval": [[704, "polars-series-cumulative-eval"]], "polars.Series.dt.milliseconds": [[727, "polars-series-dt-milliseconds"]], "polars.Series.clip_max": [[695, "polars-series-clip-max"]], "polars.Series.arr.sort": [[677, "polars-series-arr-sort"]], "polars.Series.cosh": [[699, "polars-series-cosh"]], "polars.Series.dt.nanosecond": [[732, "polars-series-dt-nanosecond"]], "polars.Series.dt.cast_time_unit": [[712, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.combine": [[713, "polars-series-dt-combine"]], "polars.Series.dt.mean": [[722, "polars-series-dt-mean"]], "polars.Series.arr.take": [[680, "polars-series-arr-take"]], "polars.Series.dt.microseconds": [[725, "polars-series-dt-microseconds"]], "polars.Series.bin.starts_with": [[687, "polars-series-bin-starts-with"]], "polars.Series.dt.month": [[731, "polars-series-dt-month"]], "polars.Series.dt.minute": [[729, "polars-series-dt-minute"]], "polars.Series.dt.ordinal_day": [[735, "polars-series-dt-ordinal-day"]], "polars.Series.cast": [[688, "polars-series-cast"]], "polars.Series.bin.contains": [[683, "polars-series-bin-contains"]], "polars.Series.bin.decode": [[684, "polars-series-bin-decode"]], "polars.Series.clip": [[694, "polars-series-clip"]], "polars.Series.dt.quarter": [[736, "polars-series-dt-quarter"]], "polars.Series.dt.median": [[723, "polars-series-dt-median"]], "polars.Series.dt.iso_year": [[720, "polars-series-dt-iso-year"]], "polars.Series.dt.minutes": [[730, "polars-series-dt-minutes"]], "polars.Series.arr.min": [[673, "polars-series-arr-min"]], "polars.Series.dt.millisecond": [[726, "polars-series-dt-millisecond"]], "polars.Series.arr.sum": [[678, "polars-series-arr-sum"]], "polars.Series.arr.lengths": [[670, "polars-series-arr-lengths"]], "polars.Series.arr.mean": [[672, "polars-series-arr-mean"]], "polars.Series.ceil": [[691, "polars-series-ceil"]], "polars.Series.dt.convert_time_zone": [[714, "polars-series-dt-convert-time-zone"]], "polars.Series.arr.unique": [[682, "polars-series-arr-unique"]], "polars.Series.arr.max": [[671, "polars-series-arr-max"]], "polars.Series.dt.days": [[716, "polars-series-dt-days"]], "polars.Series.dot": [[708, "polars-series-dot"]], "Categories": [[909, "categories"], [538, "categories"]], "Struct": [[917, "struct"], [547, "struct"]], "polars.Series.struct.field": [[879, "polars-series-struct-field"]], "polars.Series.str.strip": [[874, "polars-series-str-strip"]], "polars.Series.str.zfill": [[878, "polars-series-str-zfill"]], "Array": [[905, "array"], [535, "array"]], "polars.Series.to_physical": [[896, "polars-series-to-physical"]], "polars.Series.tanh": [[888, "polars-series-tanh"]], "polars.Series.to_numpy": [[894, "polars-series-to-numpy"]], "Boolean": [[908, "boolean"], [537, "boolean"]], "polars.Series.struct.fields": [[880, "polars-series-struct-fields"]], "polars.Series.to_arrow": [[890, "polars-series-to-arrow"]], "polars.Series.to_pandas": [[895, "polars-series-to-pandas"]], "polars.Series.sum": [[883, "polars-series-sum"]], "polars.Series.str.starts_with": [[873, "polars-series-str-starts-with"]], "polars.Series.zip_with": [[904, "polars-series-zip-with"]], "polars.Series.str.to_uppercase": [[877, "polars-series-str-to-uppercase"]], "Binary": [[907, "binary"], [536, "binary"]], "polars.Series.var": [[902, "polars-series-var"]], "polars.Series.str.splitn": [[872, "polars-series-str-splitn"]], "Manipulation/selection": [[915, "manipulation-selection"], [636, "manipulation-selection"], [545, "manipulation-selection"], [239, "manipulation-selection"]], "SQL": [[919, "sql"], [552, "sql"]], "Methods": [[919, "methods"]], "Miscellaneous": [[914, "miscellaneous"], [635, "miscellaneous"], [550, "miscellaneous"], [544, "miscellaneous"], [238, "miscellaneous"]], "polars.Series.struct.unnest": [[882, "polars-series-struct-unnest"]], "Export": [[912, "export"], [235, "export"]], "polars.Series.upper_bound": [[900, "polars-series-upper-bound"]], "Temporal": [[918, "temporal"], [548, "temporal"]], "polars.Series.str.strptime": [[875, "polars-series-str-strptime"]], "Attributes": [[906, "attributes"], [631, "attributes"], [232, "attributes"]], "Descriptive": [[911, "descriptive"], [632, "descriptive"], [234, "descriptive"]], "polars.Series.view": [[903, "polars-series-view"]], "polars.Series.tan": [[887, "polars-series-tan"]], "polars.Series.value_counts": [[901, "polars-series-value-counts"]], "polars.Series.time_unit": [[889, "polars-series-time-unit"]], "polars.Series.top_k": [[897, "polars-series-top-k"]], "polars.Series.unique": [[898, "polars-series-unique"]], "polars.Series.take": [[885, "polars-series-take"]], "Testing": [[920, "testing"]], "Asserts": [[920, "asserts"]], "Property-based testing": [[920, "property-based-testing"]], "Strategies": [[920, "strategies"]], "Strategy helpers": [[920, "strategy-helpers"]], "polars.Series.tail": [[884, "polars-series-tail"]], "polars.Series.to_dummies": [[891, "polars-series-to-dummies"]], "polars.Series.to_list": [[893, "polars-series-to-list"]], "polars.Series.unique_counts": [[899, "polars-series-unique-counts"]], "polars.Series.take_every": [[886, "polars-series-take-every"]], "polars.Series.to_frame": [[892, "polars-series-to-frame"]], "Computation": [[910, "computation"], [540, "computation"], [233, "computation"]], "polars.Series.str.to_lowercase": [[876, "polars-series-str-to-lowercase"]], "Series": [[913, "series"]], "Utils": [[921, "utils"]], "polars.Series.str.split_exact": [[871, "polars-series-str-split-exact"]], "Strings": [[916, "strings"], [546, "strings"]], "polars.Series.struct.rename_fields": [[881, "polars-series-struct-rename-fields"]], "polars.internals.lazyframe.groupby.LazyGroupBy.min": [[626, "polars-internals-lazyframe-groupby-lazygroupby-min"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[616, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.LazyFrame.update": [[609, "polars-lazyframe-update"]], "polars.internals.lazyframe.groupby.LazyGroupBy.median": [[625, "polars-internals-lazyframe-groupby-lazygroupby-median"]], "LazyFrame": [[634, "lazyframe"]], "polars.Series.arccos": [[644, "polars-series-arccos"]], "polars.Series.arr.first": [[665, "polars-series-arr-first"]], "polars.internals.lazyframe.groupby.LazyGroupBy.all": [[617, "polars-internals-lazyframe-groupby-lazygroupby-all"]], "polars.Series.all": [[640, "polars-series-all"]], "polars.Series.arr.get": [[666, "polars-series-arr-get"]], "polars.Series.arg_unique": [[654, "polars-series-arg-unique"]], "polars.LazyFrame.width": [[611, "polars-lazyframe-width"]], "polars.LazyFrame.with_row_count": [[614, "polars-lazyframe-with-row-count"]], "polars.Series.arcsin": [[646, "polars-series-arcsin"]], "GroupBy": [[633, "groupby"], [236, "groupby"]], "polars.LazyFrame.write_json": [[615, "polars-lazyframe-write-json"]], "polars.internals.lazyframe.groupby.LazyGroupBy.quantile": [[628, "polars-internals-lazyframe-groupby-lazygroupby-quantile"]], "Read/write logical plan": [[635, "read-write-logical-plan"]], "polars.Series.arg_min": [[651, "polars-series-arg-min"]], "polars.Series.arr.count_match": [[661, "polars-series-arr-count-match"]], "polars.LazyFrame.tail": [[605, "polars-lazyframe-tail"]], "polars.Series.arr.explode": [[664, "polars-series-arr-explode"]], "polars.LazyFrame.with_columns": [[612, "polars-lazyframe-with-columns"]], "polars.Series.arr.eval": [[663, "polars-series-arr-eval"]], "polars.internals.lazyframe.groupby.LazyGroupBy.first": [[620, "polars-internals-lazyframe-groupby-lazygroupby-first"]], "polars.Series.arccosh": [[645, "polars-series-arccosh"]], "polars.Series.arr.head": [[667, "polars-series-arr-head"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[630, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[618, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.LazyFrame.unnest": [[608, "polars-lazyframe-unnest"]], "polars.Series.arr.last": [[669, "polars-series-arr-last"]], "polars.internals.lazyframe.groupby.LazyGroupBy.n_unique": [[627, "polars-internals-lazyframe-groupby-lazygroupby-n-unique"]], "polars.Series.arr.contains": [[660, "polars-series-arr-contains"]], "polars.Series.arr.arg_min": [[658, "polars-series-arr-arg-min"]], "polars.Series.arr.diff": [[662, "polars-series-arr-diff"]], "polars.internals.lazyframe.groupby.LazyGroupBy.mean": [[624, "polars-internals-lazyframe-groupby-lazygroupby-mean"]], "polars.Series.arctan": [[648, "polars-series-arctan"]], "polars.internals.lazyframe.groupby.LazyGroupBy.sum": [[629, "polars-internals-lazyframe-groupby-lazygroupby-sum"]], "polars.Series.apply": [[643, "polars-series-apply"]], "polars.Series.arg_sort": [[652, "polars-series-arg-sort"]], "polars.internals.lazyframe.groupby.LazyGroupBy.last": [[622, "polars-internals-lazyframe-groupby-lazygroupby-last"]], "polars.LazyFrame.var": [[610, "polars-lazyframe-var"]], "polars.Series.arcsinh": [[647, "polars-series-arcsinh"]], "polars.Series.append": [[642, "polars-series-append"]], "polars.Series.argsort": [[655, "polars-series-argsort"]], "polars.Series.arr.arg_max": [[657, "polars-series-arr-arg-max"]], "polars.internals.lazyframe.groupby.LazyGroupBy.max": [[623, "polars-internals-lazyframe-groupby-lazygroupby-max"]], "polars.LazyFrame.sum": [[604, "polars-lazyframe-sum"]], "polars.Series.any": [[641, "polars-series-any"]], "polars.internals.lazyframe.groupby.LazyGroupBy.count": [[619, "polars-internals-lazyframe-groupby-lazygroupby-count"]], "polars.Series.arctanh": [[649, "polars-series-arctanh"]], "polars.Series.arr": [[656, "polars-series-arr"]], "polars.Series.arr.join": [[668, "polars-series-arr-join"]], "polars.LazyFrame.take_every": [[606, "polars-lazyframe-take-every"]], "polars.LazyFrame.with_context": [[613, "polars-lazyframe-with-context"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[621, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "polars.Series.arr.concat": [[659, "polars-series-arr-concat"]], "polars.Series.arg_true": [[653, "polars-series-arg-true"]], "polars.Series.alias": [[639, "polars-series-alias"]], "polars.Series.arg_max": [[650, "polars-series-arg-max"]], "polars.Series.abs": [[638, "polars-series-abs"]], "polars.LazyFrame.std": [[603, "polars-lazyframe-std"]], "polars.LazyFrame.unique": [[607, "polars-lazyframe-unique"]], "polars.element": [[507, "polars-element"]], "polars.sum": [[531, "polars-sum"]], "polars.groups": [[513, "polars-groups"]], "polars.Expr.struct.rename_fields": [[473, "polars-expr-struct-rename-fields"]], "polars.Expr.take_every": [[478, "polars-expr-take-every"]], "polars.arange": [[492, "polars-arange"]], "polars.concat_str": [[498, "polars-concat-str"]], "polars.pearson_corr": [[523, "polars-pearson-corr"]], "polars.datetime": [[505, "polars-datetime"]], "polars.Expr.value_counts": [[486, "polars-expr-value-counts"]], "polars.cumfold": [[501, "polars-cumfold"]], "polars.coalesce": [[495, "polars-coalesce"]], "polars.Expr.where": [[488, "polars-expr-where"]], "polars.col": [[496, "polars-col"]], "polars.all": [[489, "polars-all"]], "polars.date": [[504, "polars-date"]], "polars.Expr.take": [[477, "polars-expr-take"]], "polars.format": [[511, "polars-format"]], "polars.repeat": [[526, "polars-repeat"]], "polars.struct": [[530, "polars-struct"]], "polars.any": [[490, "polars-any"]], "polars.duration": [[506, "polars-duration"]], "polars.lit": [[516, "polars-lit"]], "polars.mean": [[519, "polars-mean"]], "polars.spearman_rank_corr": [[528, "polars-spearman-rank-corr"]], "polars.std": [[529, "polars-std"]], "polars.Expr.tan": [[479, "polars-expr-tan"]], "polars.Expr.tail": [[476, "polars-expr-tail"]], "polars.Expr.suffix": [[474, "polars-expr-suffix"]], "polars.Expr.to_physical": [[481, "polars-expr-to-physical"]], "polars.first": [[509, "polars-first"]], "polars.count": [[499, "polars-count"]], "polars.Expr.str.to_uppercase": [[470, "polars-expr-str-to-uppercase"]], "polars.apply": [[491, "polars-apply"]], "polars.cumsum": [[503, "polars-cumsum"]], "polars.arg_sort_by": [[493, "polars-arg-sort-by"]], "polars.from_epoch": [[512, "polars-from-epoch"]], "polars.avg": [[494, "polars-avg"]], "polars.Expr.struct.field": [[472, "polars-expr-struct-field"]], "polars.cov": [[500, "polars-cov"]], "polars.n_unique": [[522, "polars-n-unique"]], "polars.cumreduce": [[502, "polars-cumreduce"]], "polars.reduce": [[525, "polars-reduce"]], "polars.Expr.tanh": [[480, "polars-expr-tanh"]], "polars.max": [[518, "polars-max"]], "polars.tail": [[532, "polars-tail"]], "polars.Expr.top_k": [[482, "polars-expr-top-k"]], "polars.map": [[517, "polars-map"]], "polars.Expr.unique": [[483, "polars-expr-unique"]], "polars.Expr.str.to_lowercase": [[469, "polars-expr-str-to-lowercase"]], "polars.select": [[527, "polars-select"]], "polars.concat_list": [[497, "polars-concat-list"]], "polars.Expr.sum": [[475, "polars-expr-sum"]], "polars.Expr.upper_bound": [[485, "polars-expr-upper-bound"]], "polars.head": [[514, "polars-head"]], "polars.quantile": [[524, "polars-quantile"]], "polars.fold": [[510, "polars-fold"]], "polars.var": [[533, "polars-var"]], "polars.Expr.unique_counts": [[484, "polars-expr-unique-counts"]], "polars.Expr.str.zfill": [[471, "polars-expr-str-zfill"]], "polars.median": [[520, "polars-median"]], "polars.list": [[515, "polars-list"]], "polars.min": [[521, "polars-min"]], "polars.exclude": [[508, "polars-exclude"]], "polars.Expr.var": [[487, "polars-expr-var"]], "polars.when": [[534, "polars-when"]], "polars.Expr.rolling_mean": [[417, "polars-expr-rolling-mean"]], "polars.Expr.str.replace": [[458, "polars-expr-str-replace"]], "polars.Expr.str.split_exact": [[464, "polars-expr-str-split-exact"]], "polars.Expr.str.lengths": [[453, "polars-expr-str-lengths"]], "polars.Expr.rolling_max": [[416, "polars-expr-rolling-max"]], "polars.Expr.rolling_quantile": [[420, "polars-expr-rolling-quantile"]], "polars.Expr.str.ends_with": [[447, "polars-expr-str-ends-with"]], "polars.Expr.str.json_extract": [[451, "polars-expr-str-json-extract"]], "polars.Expr.round": [[425, "polars-expr-round"]], "polars.Expr.str.rstrip": [[461, "polars-expr-str-rstrip"]], "polars.Expr.search_sorted": [[427, "polars-expr-search-sorted"]], "polars.Expr.null_count": [[402, "polars-expr-null-count"]], "polars.Expr.repeat_by": [[412, "polars-expr-repeat-by"]], "polars.Expr.reinterpret": [[411, "polars-expr-reinterpret"]], "polars.Expr.str.split": [[463, "polars-expr-str-split"]], "polars.Expr.reshape": [[413, "polars-expr-reshape"]], "polars.Expr.sample": [[426, "polars-expr-sample"]], "polars.Expr.sin": [[434, "polars-expr-sin"]], "polars.Expr.quantile": [[408, "polars-expr-quantile"]], "polars.Expr.over": [[403, "polars-expr-over"]], "polars.Expr.str.extract": [[449, "polars-expr-str-extract"]], "polars.Expr.str.ljust": [[454, "polars-expr-str-ljust"]], "polars.Expr.str.parse_int": [[457, "polars-expr-str-parse-int"]], "polars.Expr.set_sorted": [[428, "polars-expr-set-sorted"]], "polars.Expr.rolling_std": [[422, "polars-expr-rolling-std"]], "polars.Expr.str.decode": [[445, "polars-expr-str-decode"]], "polars.Expr.str.extract_all": [[450, "polars-expr-str-extract-all"]], "polars.Expr.rank": [[409, "polars-expr-rank"]], "polars.Expr.str.encode": [[446, "polars-expr-str-encode"]], "polars.Expr.pct_change": [[404, "polars-expr-pct-change"]], "polars.Expr.str.rjust": [[460, "polars-expr-str-rjust"]], "polars.Expr.str.strptime": [[468, "polars-expr-str-strptime"]], "polars.Expr.reverse": [[414, "polars-expr-reverse"]], "polars.Expr.str.count_match": [[444, "polars-expr-str-count-match"]], "polars.Expr.product": [[407, "polars-expr-product"]], "polars.Expr.shuffle": [[432, "polars-expr-shuffle"]], "polars.Expr.str.starts_with": [[466, "polars-expr-str-starts-with"]], "polars.Expr.str.strip": [[467, "polars-expr-str-strip"]], "polars.Expr.rolling_median": [[418, "polars-expr-rolling-median"]], "polars.Expr.sort_by": [[439, "polars-expr-sort-by"]], "polars.Expr.sign": [[433, "polars-expr-sign"]], "polars.Expr.str.n_chars": [[456, "polars-expr-str-n-chars"]], "polars.Expr.std": [[441, "polars-expr-std"]], "polars.Expr.slice": [[437, "polars-expr-slice"]], "polars.Expr.str.lstrip": [[455, "polars-expr-str-lstrip"]], "polars.Expr.sqrt": [[440, "polars-expr-sqrt"]], "polars.Expr.str.slice": [[462, "polars-expr-str-slice"]], "polars.Expr.rolling_apply": [[415, "polars-expr-rolling-apply"]], "polars.Expr.str.explode": [[448, "polars-expr-str-explode"]], "polars.Expr.shift": [[429, "polars-expr-shift"]], "polars.Expr.rolling_min": [[419, "polars-expr-rolling-min"]], "polars.Expr.str.concat": [[442, "polars-expr-str-concat"]], "polars.Expr.str.json_path_match": [[452, "polars-expr-str-json-path-match"]], "polars.Expr.str.splitn": [[465, "polars-expr-str-splitn"]], "polars.Expr.shrink_dtype": [[431, "polars-expr-shrink-dtype"]], "polars.Expr.sinh": [[435, "polars-expr-sinh"]], "polars.Expr.skew": [[436, "polars-expr-skew"]], "polars.Expr.sort": [[438, "polars-expr-sort"]], "polars.Expr.rechunk": [[410, "polars-expr-rechunk"]], "polars.Expr.shift_and_fill": [[430, "polars-expr-shift-and-fill"]], "polars.Expr.str.replace_all": [[459, "polars-expr-str-replace-all"]], "polars.Expr.rolling_skew": [[421, "polars-expr-rolling-skew"]], "polars.Expr.rolling_var": [[424, "polars-expr-rolling-var"]], "polars.Expr.pow": [[405, "polars-expr-pow"]], "polars.Expr.prefix": [[406, "polars-expr-prefix"]], "polars.Expr.rolling_sum": [[423, "polars-expr-rolling-sum"]], "polars.Expr.str.contains": [[443, "polars-expr-str-contains"]], "polars.Expr.dt.year": [[344, "polars-expr-dt-year"]], "polars.Expr.dt.week": [[341, "polars-expr-dt-week"]], "polars.Expr.dt.timestamp": [[339, "polars-expr-dt-timestamp"]], "polars.Expr.extend_constant": [[352, "polars-expr-extend-constant"]], "polars.Expr.last": [[378, "polars-expr-last"]], "polars.Expr.dt.strftime": [[338, "polars-expr-dt-strftime"]], "polars.Expr.exp": [[350, "polars-expr-exp"]], "polars.Expr.log10": [[383, "polars-expr-log10"]], "polars.Expr.map_dict": [[387, "polars-expr-map-dict"]], "polars.Expr.map_alias": [[386, "polars-expr-map-alias"]], "polars.Expr.entropy": [[345, "polars-expr-entropy"]], "polars.Expr.floor": [[358, "polars-expr-floor"]], "polars.Expr.is_first": [[367, "polars-expr-is-first"]], "polars.Expr.meta.is_regex_projection": [[392, "polars-expr-meta-is-regex-projection"]], "polars.Expr.is_not_nan": [[372, "polars-expr-is-not-nan"]], "polars.Expr.head": [[361, "polars-expr-head"]], "polars.Expr.dt.truncate": [[340, "polars-expr-dt-truncate"]], "polars.Expr.max": [[388, "polars-expr-max"]], "polars.Expr.mean": [[389, "polars-expr-mean"]], "polars.Expr.nan_max": [[400, "polars-expr-nan-max"]], "polars.Expr.forward_fill": [[359, "polars-expr-forward-fill"]], "polars.Expr.log": [[382, "polars-expr-log"]], "polars.Expr.is_duplicated": [[365, "polars-expr-is-duplicated"]], "polars.Expr.is_not_null": [[373, "polars-expr-is-not-null"]], "polars.Expr.meta.has_multiple_outputs": [[391, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.flatten": [[357, "polars-expr-flatten"]], "polars.Expr.meta.undo_aliases": [[396, "polars-expr-meta-undo-aliases"]], "polars.Expr.meta.root_names": [[395, "polars-expr-meta-root-names"]], "polars.Expr.nan_min": [[401, "polars-expr-nan-min"]], "polars.Expr.list": [[381, "polars-expr-list"]], "polars.Expr.n_unique": [[399, "polars-expr-n-unique"]], "polars.Expr.median": [[390, "polars-expr-median"]], "polars.Expr.exclude": [[349, "polars-expr-exclude"]], "polars.Expr.fill_nan": [[353, "polars-expr-fill-nan"]], "polars.Expr.limit": [[380, "polars-expr-limit"]], "polars.Expr.lower_bound": [[384, "polars-expr-lower-bound"]], "polars.Expr.min": [[397, "polars-expr-min"]], "polars.Expr.dt.weekday": [[342, "polars-expr-dt-weekday"]], "polars.Expr.inspect": [[362, "polars-expr-inspect"]], "polars.Expr.meta.output_name": [[393, "polars-expr-meta-output-name"]], "polars.Expr.dt.round": [[335, "polars-expr-dt-round"]], "polars.Expr.is_finite": [[366, "polars-expr-is-finite"]], "polars.Expr.is_null": [[374, "polars-expr-is-null"]], "polars.Expr.ewm_std": [[347, "polars-expr-ewm-std"]], "polars.Expr.meta.pop": [[394, "polars-expr-meta-pop"]], "polars.Expr.hash": [[360, "polars-expr-hash"]], "polars.Expr.filter": [[355, "polars-expr-filter"]], "polars.Expr.dt.second": [[336, "polars-expr-dt-second"]], "polars.Expr.kurtosis": [[377, "polars-expr-kurtosis"]], "polars.Expr.is_unique": [[375, "polars-expr-is-unique"]], "polars.Expr.is_between": [[364, "polars-expr-is-between"]], "polars.Expr.mode": [[398, "polars-expr-mode"]], "polars.Expr.ewm_var": [[348, "polars-expr-ewm-var"]], "polars.Expr.ewm_mean": [[346, "polars-expr-ewm-mean"]], "polars.Expr.first": [[356, "polars-expr-first"]], "polars.Expr.is_not": [[371, "polars-expr-is-not"]], "polars.Expr.dt.seconds": [[337, "polars-expr-dt-seconds"]], "polars.Expr.is_in": [[368, "polars-expr-is-in"]], "polars.Expr.fill_null": [[354, "polars-expr-fill-null"]], "polars.Expr.dt.with_time_unit": [[343, "polars-expr-dt-with-time-unit"]], "polars.Expr.explode": [[351, "polars-expr-explode"]], "polars.Expr.is_infinite": [[369, "polars-expr-is-infinite"]], "polars.Expr.len": [[379, "polars-expr-len"]], "polars.Expr.map": [[385, "polars-expr-map"]], "polars.Expr.keep_name": [[376, "polars-expr-keep-name"]], "polars.Expr.interpolate": [[363, "polars-expr-interpolate"]], "polars.Expr.is_nan": [[370, "polars-expr-is-nan"]], "polars.LazyFrame.first": [[568, "polars-lazyframe-first"]], "polars.LazyFrame.groupby_dynamic": [[571, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.pipe": [[588, "polars-lazyframe-pipe"]], "polars.LazyFrame.inspect": [[574, "polars-lazyframe-inspect"]], "polars.LazyFrame.cache": [[554, "polars-lazyframe-cache"]], "polars.LazyFrame.dtypes": [[561, "polars-lazyframe-dtypes"]], "API reference": [[551, "api-reference"]], "polars.LazyFrame.slice": [[601, "polars-lazyframe-slice"]], "Functions": [[541, "functions"], [550, "functions"], [240, "functions"]], "polars.LazyFrame.melt": [[585, "polars-lazyframe-melt"]], "polars.LazyFrame.drop": [[559, "polars-lazyframe-drop"]], "polars.LazyFrame.profile": [[589, "polars-lazyframe-profile"]], "Columns / names": [[539, "columns-names"]], "polars.LazyFrame.sink_ipc": [[599, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.fill_nan": [[565, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.shift": [[596, "polars-lazyframe-shift"]], "Conversion": [[550, "conversion"]], "Eager/Lazy functions": [[550, "eager-lazy-functions"]], "Parallelization": [[550, "parallelization"]], "StringCache": [[550, "stringcache"]], "polars.LazyFrame.clone": [[556, "polars-lazyframe-clone"]], "polars.LazyFrame.groupby_rolling": [[572, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.lazy": [[579, "polars-lazyframe-lazy"]], "polars.LazyFrame.filter": [[567, "polars-lazyframe-filter"]], "polars.LazyFrame.min": [[587, "polars-lazyframe-min"]], "polars.LazyFrame.clear": [[555, "polars-lazyframe-clear"]], "polars.LazyFrame.explain": [[562, "polars-lazyframe-explain"]], "polars.LazyFrame.read_json": [[591, "polars-lazyframe-read-json"]], "polars.LazyFrame.collect": [[557, "polars-lazyframe-collect"]], "polars.LazyFrame.quantile": [[590, "polars-lazyframe-quantile"]], "polars.LazyFrame.sink_parquet": [[600, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.from_json": [[569, "polars-lazyframe-from-json"]], "polars.LazyFrame.sort": [[602, "polars-lazyframe-sort"]], "polars.LazyFrame.explode": [[563, "polars-lazyframe-explode"]], "Input/output": [[552, "input-output"]], "CSV": [[552, "csv"]], "Feather/ IPC": [[552, "feather-ipc"]], "Parquet": [[552, "parquet"]], "JSON": [[552, "json"]], "AVRO": [[552, "avro"]], "Excel": [[552, "excel"]], "Delta Lake": [[552, "delta-lake"]], "Datasets": [[552, "datasets"]], "BatchedCsvReader": [[552, "batchedcsvreader"]], "polars.LazyFrame.limit": [[580, "polars-lazyframe-limit"]], "polars.LazyFrame.merge_sorted": [[586, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.rename": [[592, "polars-lazyframe-rename"]], "polars.LazyFrame.join_asof": [[577, "polars-lazyframe-join-asof"]], "polars.LazyFrame.fill_null": [[566, "polars-lazyframe-fill-null"]], "polars.LazyFrame.columns": [[558, "polars-lazyframe-columns"]], "Expressions": [[542, "expressions"]], "polars.LazyFrame.mean": [[583, "polars-lazyframe-mean"]], "polars.LazyFrame.schema": [[594, "polars-lazyframe-schema"]], "polars.LazyFrame.shift_and_fill": [[597, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.fetch": [[564, "polars-lazyframe-fetch"]], "polars.LazyFrame.groupby": [[570, "polars-lazyframe-groupby"]], "polars.LazyFrame.last": [[578, "polars-lazyframe-last"]], "Meta": [[543, "meta"]], "polars.LazyFrame.join": [[576, "polars-lazyframe-join"]], "polars.LazyFrame.median": [[584, "polars-lazyframe-median"]], "polars.LazyFrame.map": [[581, "polars-lazyframe-map"]], "polars.LazyFrame.select": [[595, "polars-lazyframe-select"]], "Window": [[549, "window"]], "polars.LazyFrame.drop_nulls": [[560, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.head": [[573, "polars-lazyframe-head"]], "polars.LazyFrame.reverse": [[593, "polars-lazyframe-reverse"]], "polars.LazyFrame.show_graph": [[598, "polars-lazyframe-show-graph"]], "polars.LazyFrame.max": [[582, "polars-lazyframe-max"]], "polars.LazyFrame.interpolate": [[575, "polars-lazyframe-interpolate"]], "polars.Expr.dt.convert_time_zone": [[315, "polars-expr-dt-convert-time-zone"]], "polars.Expr.arr.join": [[273, "polars-expr-arr-join"]], "polars.Expr.arr.first": [[270, "polars-expr-arr-first"]], "polars.Expr.bin.decode": [[290, "polars-expr-bin-decode"]], "polars.Expr.dt.quarter": [[333, "polars-expr-dt-quarter"]], "polars.Expr.dt.microseconds": [[323, "polars-expr-dt-microseconds"]], "polars.Expr.arr.slice": [[281, "polars-expr-arr-slice"]], "polars.Expr.cumprod": [[306, "polars-expr-cumprod"]], "polars.Expr.dt.ordinal_day": [[332, "polars-expr-dt-ordinal-day"]], "polars.Expr.arr.sum": [[283, "polars-expr-arr-sum"]], "polars.Expr.dt.cast_time_unit": [[313, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.hour": [[319, "polars-expr-dt-hour"]], "polars.Expr.cumsum": [[307, "polars-expr-cumsum"]], "polars.Expr.arr.get": [[271, "polars-expr-arr-get"]], "polars.Expr.arr.max": [[276, "polars-expr-arr-max"]], "polars.Expr.dt.combine": [[314, "polars-expr-dt-combine"]], "polars.Expr.dt.day": [[316, "polars-expr-dt-day"]], "polars.Expr.dt.minutes": [[327, "polars-expr-dt-minutes"]], "polars.Expr.arr.to_struct": [[286, "polars-expr-arr-to-struct"]], "polars.Expr.dt.millisecond": [[324, "polars-expr-dt-millisecond"]], "polars.Expr.dt.minute": [[326, "polars-expr-dt-minute"]], "polars.Expr.arr.eval": [[268, "polars-expr-arr-eval"]], "polars.Expr.cast": [[294, "polars-expr-cast"]], "polars.Expr.dt.replace_time_zone": [[334, "polars-expr-dt-replace-time-zone"]], "polars.Expr.bin.starts_with": [[293, "polars-expr-bin-starts-with"]], "polars.Expr.arr.reverse": [[279, "polars-expr-arr-reverse"]], "polars.Expr.count": [[302, "polars-expr-count"]], "polars.Expr.dt.hours": [[320, "polars-expr-dt-hours"]], "polars.Expr.dot": [[310, "polars-expr-dot"]], "polars.Expr.arr.tail": [[284, "polars-expr-arr-tail"]], "polars.Expr.arr.sort": [[282, "polars-expr-arr-sort"]], "polars.Expr.clip": [[297, "polars-expr-clip"]], "polars.Expr.dt.nanoseconds": [[330, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.offset_by": [[331, "polars-expr-dt-offset-by"]], "polars.Expr.cosh": [[301, "polars-expr-cosh"]], "polars.Expr.dt.microsecond": [[322, "polars-expr-dt-microsecond"]], "polars.Expr.cumcount": [[303, "polars-expr-cumcount"]], "polars.Expr.arr.explode": [[269, "polars-expr-arr-explode"]], "polars.Expr.bin.contains": [[289, "polars-expr-bin-contains"]], "polars.Expr.drop_nans": [[311, "polars-expr-drop-nans"]], "polars.Expr.arr.lengths": [[275, "polars-expr-arr-lengths"]], "polars.Expr.ceil": [[296, "polars-expr-ceil"]], "polars.Expr.arr.mean": [[277, "polars-expr-arr-mean"]], "polars.Expr.drop_nulls": [[312, "polars-expr-drop-nulls"]], "polars.Expr.cat.set_ordering": [[295, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.month": [[328, "polars-expr-dt-month"]], "polars.Expr.arr.take": [[285, "polars-expr-arr-take"]], "polars.Expr.cummax": [[304, "polars-expr-cummax"]], "polars.Expr.arr.head": [[272, "polars-expr-arr-head"]], "polars.Expr.diff": [[309, "polars-expr-diff"]], "polars.Expr.cos": [[300, "polars-expr-cos"]], "polars.Expr.dt.iso_year": [[321, "polars-expr-dt-iso-year"]], "polars.Expr.bin.ends_with": [[292, "polars-expr-bin-ends-with"]], "polars.Expr.dt.days": [[317, "polars-expr-dt-days"]], "polars.Expr.clip_max": [[298, "polars-expr-clip-max"]], "polars.Expr.clip_min": [[299, "polars-expr-clip-min"]], "polars.Expr.arr.shift": [[280, "polars-expr-arr-shift"]], "polars.Expr.cummin": [[305, "polars-expr-cummin"]], "polars.Expr.bin.encode": [[291, "polars-expr-bin-encode"]], "polars.Expr.cumulative_eval": [[308, "polars-expr-cumulative-eval"]], "polars.Expr.dt.epoch": [[318, "polars-expr-dt-epoch"]], "polars.Expr.arr.last": [[274, "polars-expr-arr-last"]], "polars.Expr.arr.min": [[278, "polars-expr-arr-min"]], "polars.Expr.dt.milliseconds": [[325, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.nanosecond": [[329, "polars-expr-dt-nanosecond"]], "polars.Expr.backward_fill": [[288, "polars-expr-backward-fill"]], "polars.Expr.arr.unique": [[287, "polars-expr-arr-unique"]], "polars.DataFrame.max": [[162, "polars-dataframe-max"]], "polars.DataFrame.is_unique": [[154, "polars-dataframe-is-unique"]], "polars.DataFrame.pearson_corr": [[172, "polars-dataframe-pearson-corr"]], "polars.DataFrame.get_column": [[140, "polars-dataframe-get-column"]], "polars.DataFrame.mean": [[163, "polars-dataframe-mean"]], "polars.DataFrame.merge_sorted": [[166, "polars-dataframe-merge-sorted"]], "polars.DataFrame.find_idx_by_name": [[137, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.melt": [[165, "polars-dataframe-melt"]], "polars.DataFrame.product": [[175, "polars-dataframe-product"]], "polars.DataFrame.head": [[147, "polars-dataframe-head"]], "polars.DataFrame.n_chunks": [[168, "polars-dataframe-n-chunks"]], "polars.DataFrame.row": [[182, "polars-dataframe-row"]], "polars.DataFrame.shape": [[187, "polars-dataframe-shape"]], "polars.DataFrame.insert_at_idx": [[150, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.to_dicts": [[199, "polars-dataframe-to-dicts"]], "polars.DataFrame.fill_nan": [[134, "polars-dataframe-fill-nan"]], "polars.DataFrame.quantile": [[176, "polars-dataframe-quantile"]], "polars.DataFrame.fill_null": [[135, "polars-dataframe-fill-null"]], "polars.DataFrame.hstack": [[149, "polars-dataframe-hstack"]], "polars.DataFrame.n_unique": [[169, "polars-dataframe-n-unique"]], "polars.DataFrame.groupby": [[143, "polars-dataframe-groupby"]], "polars.DataFrame.is_duplicated": [[152, "polars-dataframe-is-duplicated"]], "polars.DataFrame.rename": [[178, "polars-dataframe-rename"]], "polars.DataFrame.shift": [[188, "polars-dataframe-shift"]], "polars.DataFrame.min": [[167, "polars-dataframe-min"]], "polars.DataFrame.sort": [[192, "polars-dataframe-sort"]], "polars.DataFrame.slice": [[191, "polars-dataframe-slice"]], "polars.DataFrame.join_asof": [[159, "polars-dataframe-join-asof"]], "polars.DataFrame.partition_by": [[171, "polars-dataframe-partition-by"]], "polars.DataFrame.get_columns": [[141, "polars-dataframe-get-columns"]], "polars.DataFrame.join": [[158, "polars-dataframe-join"]], "polars.DataFrame.to_dict": [[198, "polars-dataframe-to-dict"]], "polars.DataFrame.pivot": [[174, "polars-dataframe-pivot"]], "polars.DataFrame.tail": [[195, "polars-dataframe-tail"]], "polars.DataFrame.sample": [[184, "polars-dataframe-sample"]], "polars.DataFrame.rechunk": [[177, "polars-dataframe-rechunk"]], "polars.DataFrame.shift_and_fill": [[189, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.groupby_rolling": [[145, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.to_dummies": [[200, "polars-dataframe-to-dummies"]], "polars.DataFrame.replace_at_idx": [[180, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.item": [[155, "polars-dataframe-item"]], "polars.DataFrame.pipe": [[173, "polars-dataframe-pipe"]], "polars.DataFrame.schema": [[185, "polars-dataframe-schema"]], "polars.DataFrame.interpolate": [[151, "polars-dataframe-interpolate"]], "polars.DataFrame.rows": [[183, "polars-dataframe-rows"]], "polars.DataFrame.iter_rows": [[156, "polars-dataframe-iter-rows"]], "polars.DataFrame.select": [[186, "polars-dataframe-select"]], "polars.DataFrame.take_every": [[196, "polars-dataframe-take-every"]], "polars.DataFrame.shrink_to_fit": [[190, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.filter": [[136, "polars-dataframe-filter"]], "polars.DataFrame.fold": [[138, "polars-dataframe-fold"]], "polars.DataFrame.median": [[164, "polars-dataframe-median"]], "polars.DataFrame.lazy": [[160, "polars-dataframe-lazy"]], "polars.DataFrame.std": [[193, "polars-dataframe-std"]], "polars.DataFrame.replace": [[179, "polars-dataframe-replace"]], "polars.DataFrame.glimpse": [[142, "polars-dataframe-glimpse"]], "polars.DataFrame.iter_slices": [[157, "polars-dataframe-iter-slices"]], "polars.DataFrame.limit": [[161, "polars-dataframe-limit"]], "polars.DataFrame.to_arrow": [[197, "polars-dataframe-to-arrow"]], "polars.DataFrame.hash_rows": [[146, "polars-dataframe-hash-rows"]], "polars.DataFrame.is_empty": [[153, "polars-dataframe-is-empty"]], "polars.DataFrame.sum": [[194, "polars-dataframe-sum"]], "polars.DataFrame.reverse": [[181, "polars-dataframe-reverse"]], "polars.DataFrame.frame_equal": [[139, "polars-dataframe-frame-equal"]], "polars.DataFrame.null_count": [[170, "polars-dataframe-null-count"]], "polars.DataFrame.groupby_dynamic": [[144, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.height": [[148, "polars-dataframe-height"]], "polars.Expr.arctan": [[254, "polars-expr-arctan"]], "polars.Expr.arr.arg_min": [[263, "polars-expr-arr-arg-min"]], "polars.Expr.arctanh": [[255, "polars-expr-arctanh"]], "polars.Expr.alias": [[245, "polars-expr-alias"]], "polars.DataFrame.unnest": [[207, "polars-dataframe-unnest"]], "polars.Expr.argsort": [[261, "polars-expr-argsort"]], "polars.DataFrame.to_series": [[203, "polars-dataframe-to-series"]], "polars.internals.dataframe.groupby.GroupBy.count": [[220, "polars-internals-dataframe-groupby-groupby-count"]], "polars.DataFrame.to_struct": [[204, "polars-dataframe-to-struct"]], "polars.Expr.arg_unique": [[260, "polars-expr-arg-unique"]], "polars.DataFrame.with_row_count": [[215, "polars-dataframe-with-row-count"]], "polars.Expr.agg_groups": [[244, "polars-expr-agg-groups"]], "polars.internals.dataframe.groupby.GroupBy.first": [[221, "polars-internals-dataframe-groupby-groupby-first"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[219, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.DataFrame.to_pandas": [[202, "polars-dataframe-to-pandas"]], "polars.internals.dataframe.groupby.GroupBy.max": [[224, "polars-internals-dataframe-groupby-groupby-max"]], "polars.internals.dataframe.groupby.GroupBy.__iter__": [[216, "polars-internals-dataframe-groupby-groupby-iter"]], "polars.DataFrame.transpose": [[205, "polars-dataframe-transpose"]], "polars.internals.dataframe.groupby.GroupBy.last": [[223, "polars-internals-dataframe-groupby-groupby-last"]], "polars.Expr.arr.arg_max": [[262, "polars-expr-arr-arg-max"]], "polars.Expr.arr.contains": [[265, "polars-expr-arr-contains"]], "polars.Expr.arr.count_match": [[266, "polars-expr-arr-count-match"]], "polars.DataFrame.update": [[209, "polars-dataframe-update"]], "polars.internals.dataframe.groupby.GroupBy.median": [[226, "polars-internals-dataframe-groupby-groupby-median"]], "polars.Expr.arcsin": [[252, "polars-expr-arcsin"]], "polars.DataFrame.to_numpy": [[201, "polars-dataframe-to-numpy"]], "polars.Expr.arcsinh": [[253, "polars-expr-arcsinh"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[225, "polars-internals-dataframe-groupby-groupby-mean"]], "polars.Expr.arg_min": [[257, "polars-expr-arg-min"]], "polars.DataFrame.unstack": [[208, "polars-dataframe-unstack"]], "polars.internals.dataframe.groupby.GroupBy.all": [[218, "polars-internals-dataframe-groupby-groupby-all"]], "polars.internals.dataframe.groupby.GroupBy.head": [[222, "polars-internals-dataframe-groupby-groupby-head"]], "polars.Expr.apply": [[249, "polars-expr-apply"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[228, "polars-internals-dataframe-groupby-groupby-n-unique"]], "polars.Expr.arccos": [[250, "polars-expr-arccos"]], "polars.Expr.arg_max": [[256, "polars-expr-arg-max"]], "polars.Expr.arg_true": [[259, "polars-expr-arg-true"]], "polars.DataFrame.unique": [[206, "polars-dataframe-unique"]], "polars.DataFrame.upsample": [[210, "polars-dataframe-upsample"]], "polars.Expr.arg_sort": [[258, "polars-expr-arg-sort"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[231, "polars-internals-dataframe-groupby-groupby-tail"]], "polars.internals.dataframe.groupby.GroupBy.min": [[227, "polars-internals-dataframe-groupby-groupby-min"]], "polars.Expr.abs": [[243, "polars-expr-abs"]], "DataFrame": [[237, "dataframe"]], "Exceptions": [[241, "exceptions"]], "polars.Expr.arr.diff": [[267, "polars-expr-arr-diff"]], "polars.Expr.arccosh": [[251, "polars-expr-arccosh"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[230, "polars-internals-dataframe-groupby-groupby-sum"]], "polars.DataFrame.vstack": [[212, "polars-dataframe-vstack"]], "polars.Expr.all": [[246, "polars-expr-all"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[217, "polars-internals-dataframe-groupby-groupby-agg"]], "Data types": [[240, "data-types"]], "Numeric": [[240, "numeric"]], "Date / Time": [[240, "date-time"]], "Nested": [[240, "nested"]], "Other": [[240, "other"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[229, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.DataFrame.with_columns": [[214, "polars-dataframe-with-columns"]], "polars.Expr.arr.concat": [[264, "polars-expr-arr-concat"]], "polars.Expr.any": [[247, "polars-expr-any"]], "polars.DataFrame.width": [[213, "polars-dataframe-width"]], "polars.DataFrame.var": [[211, "polars-dataframe-var"]], "polars.Expr.append": [[248, "polars-expr-append"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "load() (polars.config class method)": [[5, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[6, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[7, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[8, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[9, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[10, "polars.Config.set_fmt_str_lengths"]], "set_tbl_cell_alignment() (polars.config class method)": [[11, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[12, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[13, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[14, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[15, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[16, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[17, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[20, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[21, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[22, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[23, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[24, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[25, "polars.DataFrame.write_csv"]], "write_ipc() (polars.dataframe method)": [[26, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[27, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[28, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[29, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[30, "polars.DataType"]], "__init__() (polars.datatype method)": [[30, "polars.DataType.__init__"]], "date (class in polars)": [[31, "polars.Date"]], "__init__() (polars.date method)": [[31, "polars.Date.__init__"]], "datetime (class in polars)": [[32, "polars.Datetime"]], "__init__() (polars.datetime method)": [[32, "polars.Datetime.__init__"]], "duration (class in polars)": [[33, "polars.Duration"]], "__init__() (polars.duration method)": [[33, "polars.Duration.__init__"]], "float32 (class in polars)": [[34, "polars.Float32"]], "__init__() (polars.float32 method)": [[34, "polars.Float32.__init__"]], "float64 (class in polars)": [[35, "polars.Float64"]], "__init__() (polars.float64 method)": [[35, "polars.Float64.__init__"]], "int16 (class in polars)": [[36, "polars.Int16"]], "__init__() (polars.int16 method)": [[36, "polars.Int16.__init__"]], "int32 (class in polars)": [[37, "polars.Int32"]], "__init__() (polars.int32 method)": [[37, "polars.Int32.__init__"]], "int64 (class in polars)": [[38, "polars.Int64"]], "__init__() (polars.int64 method)": [[38, "polars.Int64.__init__"]], "int8 (class in polars)": [[39, "polars.Int8"]], "__init__() (polars.int8 method)": [[39, "polars.Int8.__init__"]], "list (class in polars)": [[40, "polars.List"]], "__init__() (polars.list method)": [[40, "polars.List.__init__"]], "null (class in polars)": [[41, "polars.Null"]], "__init__() (polars.null method)": [[41, "polars.Null.__init__"]], "object (class in polars)": [[42, "polars.Object"]], "__init__() (polars.object method)": [[42, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[43, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[44, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[45, "polars.SQLContext.register"]], "stringcache (class in polars)": [[46, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[46, "polars.StringCache.__init__"]], "struct (class in polars)": [[47, "polars.Struct"]], "__init__() (polars.struct method)": [[47, "polars.Struct.__init__"]], "time (class in polars)": [[48, "polars.Time"]], "__init__() (polars.time method)": [[48, "polars.Time.__init__"]], "uint16 (class in polars)": [[49, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[49, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[50, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[50, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[51, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[51, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[52, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[52, "polars.UInt8.__init__"]], "unknown (class in polars)": [[53, "polars.Unknown"]], "__init__() (polars.unknown method)": [[53, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[54, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[54, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[55, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[56, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[57, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[58, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[59, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[60, "polars.arg_where"]], "build_info() (in module polars)": [[61, "polars.build_info"]], "collect_all() (in module polars)": [[62, "polars.collect_all"]], "concat() (in module polars)": [[63, "polars.concat"]], "cut() (in module polars)": [[64, "polars.cut"]], "date_range() (in module polars)": [[65, "polars.date_range"]], "arrowerror": [[66, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[67, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[68, "polars.exceptions.ComputeError"]], "duplicateerror": [[69, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[70, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[71, "polars.exceptions.NoDataError"]], "norowsreturned": [[72, "polars.exceptions.NoRowsReturned"]], "panicexception": [[73, "polars.exceptions.PanicException"]], "rowsexception": [[74, "polars.exceptions.RowsException"]], "schemaerror": [[75, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[76, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[77, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[78, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturned": [[79, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[80, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[81, "polars.from_dataframe"]], "from_dict() (in module polars)": [[82, "polars.from_dict"]], "from_dicts() (in module polars)": [[83, "polars.from_dicts"]], "from_numpy() (in module polars)": [[84, "polars.from_numpy"]], "from_pandas() (in module polars)": [[85, "polars.from_pandas"]], "from_records() (in module polars)": [[86, "polars.from_records"]], "get_dummies() (in module polars)": [[87, "polars.get_dummies"]], "get_idx_type() (in module polars)": [[88, "polars.get_idx_type"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[89, "polars.internals.batched.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[90, "polars.ones"]], "read_avro() (in module polars)": [[91, "polars.read_avro"]], "read_csv() (in module polars)": [[92, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[93, "polars.read_csv_batched"]], "read_delta() (in module polars)": [[94, "polars.read_delta"]], "read_excel() (in module polars)": [[95, "polars.read_excel"]], "read_ipc() (in module polars)": [[96, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[97, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[98, "polars.read_json"]], "read_ndjson() (in module polars)": [[99, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[100, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[101, "polars.read_parquet_schema"]], "read_sql() (in module polars)": [[102, "polars.read_sql"]], "scan_csv() (in module polars)": [[103, "polars.scan_csv"]], "scan_delta() (in module polars)": [[104, "polars.scan_delta"]], "scan_ds() (in module polars)": [[105, "polars.scan_ds"]], "scan_ipc() (in module polars)": [[106, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[107, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[108, "polars.scan_parquet"]], "show_versions() (in module polars)": [[109, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[110, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[111, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[112, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[112, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[113, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[114, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[115, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[116, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[117, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[118, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[121, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[122, "polars.DataFrame.apply"]], "clear() (polars.dataframe method)": [[123, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[124, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[125, "polars.DataFrame.columns"]], "describe() (polars.dataframe method)": [[126, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[127, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[128, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[129, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[130, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[131, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[132, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[133, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[134, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[135, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[136, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[137, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[138, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[139, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[140, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[141, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[142, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[143, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[144, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[145, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[146, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[147, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[148, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[149, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[150, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[151, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[152, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[153, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[154, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[155, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[156, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[157, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[158, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[159, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[160, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[161, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[162, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[163, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[164, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[165, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[166, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[167, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[168, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[169, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[170, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[171, "polars.DataFrame.partition_by"]], "pearson_corr() (polars.dataframe method)": [[172, "polars.DataFrame.pearson_corr"]], "pipe() (polars.dataframe method)": [[173, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[174, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[175, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[176, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[177, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[178, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[179, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[180, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[181, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[182, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[183, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[184, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[185, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[186, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[187, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[188, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[189, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[190, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[191, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[192, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[193, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[194, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[195, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[196, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[197, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[198, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[199, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[200, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[201, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[202, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[203, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[204, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[205, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[206, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[207, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[208, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[209, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[210, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[211, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[212, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[213, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[214, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[215, "polars.DataFrame.with_row_count"]], "__iter__() (polars.internals.dataframe.groupby.groupby method)": [[216, "polars.internals.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[217, "polars.internals.dataframe.groupby.GroupBy.agg"]], "all() (polars.internals.dataframe.groupby.groupby method)": [[218, "polars.internals.dataframe.groupby.GroupBy.all"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[219, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[220, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[221, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[222, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[223, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[224, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[225, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[226, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[227, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[228, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[229, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[230, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[231, "polars.internals.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[243, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[244, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[245, "polars.Expr.alias"]], "all() (polars.expr method)": [[246, "polars.Expr.all"]], "any() (polars.expr method)": [[247, "polars.Expr.any"]], "append() (polars.expr method)": [[248, "polars.Expr.append"]], "apply() (polars.expr method)": [[249, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[250, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[251, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[252, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[253, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[254, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[255, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[256, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[257, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[258, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[259, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[260, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[261, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[262, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[263, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[264, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[265, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[266, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[267, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[268, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[269, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[270, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[271, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[272, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[273, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[274, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[275, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[276, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[277, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[278, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[279, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[280, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[281, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[282, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[283, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[284, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[285, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[286, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[287, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[288, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[289, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[290, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[291, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[292, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[293, "polars.Expr.bin.starts_with"]], "cast() (polars.expr method)": [[294, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[295, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[296, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[297, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[298, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[299, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[300, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[301, "polars.Expr.cosh"]], "count() (polars.expr method)": [[302, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[303, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[304, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[305, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[306, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[307, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[308, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[309, "polars.Expr.diff"]], "dot() (polars.expr method)": [[310, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[311, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[312, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[313, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[314, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[315, "polars.Expr.dt.convert_time_zone"]], "day() (polars.expr.dt method)": [[316, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[317, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[318, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[319, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[320, "polars.Expr.dt.hours"]], "iso_year() (polars.expr.dt method)": [[321, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[322, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[323, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[324, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[325, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[326, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[327, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[328, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[329, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[330, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[331, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[332, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[333, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[334, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[335, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[336, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[337, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[338, "polars.Expr.dt.strftime"]], "timestamp() (polars.expr.dt method)": [[339, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[340, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[341, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[342, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[343, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[344, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[345, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[346, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[347, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[348, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[349, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[350, "polars.Expr.exp"]], "explode() (polars.expr method)": [[351, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[352, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[353, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[354, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[355, "polars.Expr.filter"]], "first() (polars.expr method)": [[356, "polars.Expr.first"]], "flatten() (polars.expr method)": [[357, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[358, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[359, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[360, "polars.Expr.hash"]], "head() (polars.expr method)": [[361, "polars.Expr.head"]], "inspect() (polars.expr method)": [[362, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[363, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[364, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[365, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[366, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[367, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[368, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[369, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[370, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[371, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[372, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[373, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[374, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[375, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[376, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[377, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[378, "polars.Expr.last"]], "len() (polars.expr method)": [[379, "polars.Expr.len"]], "limit() (polars.expr method)": [[380, "polars.Expr.limit"]], "list() (polars.expr method)": [[381, "polars.Expr.list"]], "log() (polars.expr method)": [[382, "polars.Expr.log"]], "log10() (polars.expr method)": [[383, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[384, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[385, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[386, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[387, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[388, "polars.Expr.max"]], "mean() (polars.expr method)": [[389, "polars.Expr.mean"]], "median() (polars.expr method)": [[390, "polars.Expr.median"]], "has_multiple_outputs() (polars.expr.meta method)": [[391, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[392, "polars.Expr.meta.is_regex_projection"]], "output_name() (polars.expr.meta method)": [[393, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[394, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[395, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[396, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[397, "polars.Expr.min"]], "mode() (polars.expr method)": [[398, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[399, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[400, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[401, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[402, "polars.Expr.null_count"]], "over() (polars.expr method)": [[403, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[404, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[405, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[406, "polars.Expr.prefix"]], "product() (polars.expr method)": [[407, "polars.Expr.product"]], "quantile() (polars.expr method)": [[408, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[409, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[410, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[411, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[412, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[413, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[414, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[415, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[416, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[417, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[418, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[419, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[420, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[421, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[422, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[423, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[424, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[425, "polars.Expr.round"]], "sample() (polars.expr method)": [[426, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[427, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[428, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[429, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[430, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[431, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[432, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[433, "polars.Expr.sign"]], "sin() (polars.expr method)": [[434, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[435, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[436, "polars.Expr.skew"]], "slice() (polars.expr method)": [[437, "polars.Expr.slice"]], "sort() (polars.expr method)": [[438, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[439, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[440, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[441, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[442, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[443, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[444, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[445, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[446, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[447, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[448, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[449, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[450, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[451, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[452, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[453, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[454, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[455, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[456, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[457, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[458, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[459, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[460, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[461, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[462, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[463, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[464, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[465, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[466, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[467, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[468, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[469, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[470, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[471, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[472, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[473, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[474, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[475, "polars.Expr.sum"]], "tail() (polars.expr method)": [[476, "polars.Expr.tail"]], "take() (polars.expr method)": [[477, "polars.Expr.take"]], "take_every() (polars.expr method)": [[478, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[479, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[480, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[481, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[482, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[483, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[484, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[485, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[486, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[487, "polars.Expr.var"]], "where() (polars.expr method)": [[488, "polars.Expr.where"]], "all() (in module polars)": [[489, "polars.all"]], "any() (in module polars)": [[490, "polars.any"]], "apply() (in module polars)": [[491, "polars.apply"]], "arange() (in module polars)": [[492, "polars.arange"]], "arg_sort_by() (in module polars)": [[493, "polars.arg_sort_by"]], "avg() (in module polars)": [[494, "polars.avg"]], "coalesce() (in module polars)": [[495, "polars.coalesce"]], "col() (in module polars)": [[496, "polars.col"]], "concat_list() (in module polars)": [[497, "polars.concat_list"]], "concat_str() (in module polars)": [[498, "polars.concat_str"]], "count() (in module polars)": [[499, "polars.count"]], "cov() (in module polars)": [[500, "polars.cov"]], "cumfold() (in module polars)": [[501, "polars.cumfold"]], "cumreduce() (in module polars)": [[502, "polars.cumreduce"]], "cumsum() (in module polars)": [[503, "polars.cumsum"]], "date() (in module polars)": [[504, "polars.date"]], "datetime() (in module polars)": [[505, "polars.datetime"]], "duration() (in module polars)": [[506, "polars.duration"]], "element() (in module polars)": [[507, "polars.element"]], "exclude() (in module polars)": [[508, "polars.exclude"]], "first() (in module polars)": [[509, "polars.first"]], "fold() (in module polars)": [[510, "polars.fold"]], "format() (in module polars)": [[511, "polars.format"]], "from_epoch() (in module polars)": [[512, "polars.from_epoch"]], "groups() (in module polars)": [[513, "polars.groups"]], "head() (in module polars)": [[514, "polars.head"]], "list() (in module polars)": [[515, "polars.list"]], "lit() (in module polars)": [[516, "polars.lit"]], "map() (in module polars)": [[517, "polars.map"]], "max() (in module polars)": [[518, "polars.max"]], "mean() (in module polars)": [[519, "polars.mean"]], "median() (in module polars)": [[520, "polars.median"]], "min() (in module polars)": [[521, "polars.min"]], "n_unique() (in module polars)": [[522, "polars.n_unique"]], "pearson_corr() (in module polars)": [[523, "polars.pearson_corr"]], "quantile() (in module polars)": [[524, "polars.quantile"]], "reduce() (in module polars)": [[525, "polars.reduce"]], "repeat() (in module polars)": [[526, "polars.repeat"]], "select() (in module polars)": [[527, "polars.select"]], "spearman_rank_corr() (in module polars)": [[528, "polars.spearman_rank_corr"]], "std() (in module polars)": [[529, "polars.std"]], "struct() (in module polars)": [[530, "polars.struct"]], "sum() (in module polars)": [[531, "polars.sum"]], "tail() (in module polars)": [[532, "polars.tail"]], "var() (in module polars)": [[533, "polars.var"]], "when() (in module polars)": [[534, "polars.when"]], "cache() (polars.lazyframe method)": [[554, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[555, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[556, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[557, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[558, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[559, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[560, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[561, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[562, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[563, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[564, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[565, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[566, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[567, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[568, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[569, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[570, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[571, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[572, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[573, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[574, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[575, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[576, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[577, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[578, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[579, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[580, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[581, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[582, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[583, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[584, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[585, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[586, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[587, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[588, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[589, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[590, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[591, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[592, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[593, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[594, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[595, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[596, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[597, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[598, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[599, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[600, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[601, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[602, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[603, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[604, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[605, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[606, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[607, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[608, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[609, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[610, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[611, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[612, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[613, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[614, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[615, "polars.LazyFrame.write_json"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[616, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.internals.lazyframe.groupby.lazygroupby method)": [[617, "polars.internals.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[618, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.internals.lazyframe.groupby.lazygroupby method)": [[619, "polars.internals.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.internals.lazyframe.groupby.lazygroupby method)": [[620, "polars.internals.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[621, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.internals.lazyframe.groupby.lazygroupby method)": [[622, "polars.internals.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.internals.lazyframe.groupby.lazygroupby method)": [[623, "polars.internals.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.internals.lazyframe.groupby.lazygroupby method)": [[624, "polars.internals.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.internals.lazyframe.groupby.lazygroupby method)": [[625, "polars.internals.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.internals.lazyframe.groupby.lazygroupby method)": [[626, "polars.internals.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.internals.lazyframe.groupby.lazygroupby method)": [[627, "polars.internals.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.internals.lazyframe.groupby.lazygroupby method)": [[628, "polars.internals.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.internals.lazyframe.groupby.lazygroupby method)": [[629, "polars.internals.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[630, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[638, "polars.Series.abs"]], "alias() (polars.series method)": [[639, "polars.Series.alias"]], "all() (polars.series method)": [[640, "polars.Series.all"]], "any() (polars.series method)": [[641, "polars.Series.any"]], "append() (polars.series method)": [[642, "polars.Series.append"]], "apply() (polars.series method)": [[643, "polars.Series.apply"]], "arccos() (polars.series method)": [[644, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[645, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[646, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[647, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[648, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[649, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[650, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[651, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[652, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[653, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[654, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[655, "polars.Series.argsort"]], "arr (polars.series attribute)": [[656, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[657, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[658, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[659, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[660, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[661, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[662, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[663, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[664, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[665, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[666, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[667, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[668, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[669, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[670, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[671, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[672, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[673, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[674, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[675, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[676, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[677, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[678, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[679, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[680, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[681, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[682, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[683, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[684, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[685, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[686, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[687, "polars.Series.bin.starts_with"]], "cast() (polars.series method)": [[688, "polars.Series.cast"]], "cat (polars.series attribute)": [[689, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[690, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[691, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[692, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[693, "polars.Series.clear"]], "clip() (polars.series method)": [[694, "polars.Series.clip"]], "clip_max() (polars.series method)": [[695, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[696, "polars.Series.clip_min"]], "clone() (polars.series method)": [[697, "polars.Series.clone"]], "cos() (polars.series method)": [[698, "polars.Series.cos"]], "cosh() (polars.series method)": [[699, "polars.Series.cosh"]], "cummax() (polars.series method)": [[700, "polars.Series.cummax"]], "cummin() (polars.series method)": [[701, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[702, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[703, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[704, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[705, "polars.Series.cut"]], "describe() (polars.series method)": [[706, "polars.Series.describe"]], "diff() (polars.series method)": [[707, "polars.Series.diff"]], "dot() (polars.series method)": [[708, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[709, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[710, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[711, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[712, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[713, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[714, "polars.Series.dt.convert_time_zone"]], "day() (polars.series.dt method)": [[715, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[716, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[717, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[718, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[719, "polars.Series.dt.hours"]], "iso_year() (polars.series.dt method)": [[720, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[721, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[722, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[723, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[724, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[725, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[726, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[727, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[728, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[729, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[730, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[731, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[732, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[733, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[734, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[735, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[736, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[737, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[738, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[739, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[740, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[741, "polars.Series.dt.strftime"]], "timestamp() (polars.series.dt method)": [[742, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[743, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[744, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[745, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[746, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[747, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[748, "polars.Series.dtype"]], "entropy() (polars.series method)": [[749, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[750, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[751, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[752, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[753, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[754, "polars.Series.exp"]], "explode() (polars.series method)": [[755, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[756, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[757, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[758, "polars.Series.fill_null"]], "filter() (polars.series method)": [[759, "polars.Series.filter"]], "flags (polars.series attribute)": [[760, "polars.Series.flags"]], "floor() (polars.series method)": [[761, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[762, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[763, "polars.Series.has_validity"]], "hash() (polars.series method)": [[764, "polars.Series.hash"]], "head() (polars.series method)": [[765, "polars.Series.head"]], "inner_dtype (polars.series attribute)": [[766, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[767, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[768, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[769, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[770, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[771, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[772, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[773, "polars.Series.is_first"]], "is_float() (polars.series method)": [[774, "polars.Series.is_float"]], "is_in() (polars.series method)": [[775, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[776, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[777, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[778, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[779, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[780, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[781, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[782, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[783, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[784, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[785, "polars.Series.is_utf8"]], "item() (polars.series method)": [[786, "polars.Series.item"]], "kurtosis() (polars.series method)": [[787, "polars.Series.kurtosis"]], "len() (polars.series method)": [[788, "polars.Series.len"]], "limit() (polars.series method)": [[789, "polars.Series.limit"]], "log() (polars.series method)": [[790, "polars.Series.log"]], "log10() (polars.series method)": [[791, "polars.Series.log10"]], "lower_bound() (polars.series method)": [[792, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[793, "polars.Series.map_dict"]], "max() (polars.series method)": [[794, "polars.Series.max"]], "mean() (polars.series method)": [[795, "polars.Series.mean"]], "median() (polars.series method)": [[796, "polars.Series.median"]], "min() (polars.series method)": [[797, "polars.Series.min"]], "mode() (polars.series method)": [[798, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[799, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[800, "polars.Series.n_unique"]], "name (polars.series attribute)": [[801, "polars.Series.name"]], "nan_max() (polars.series method)": [[802, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[803, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[804, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[805, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[806, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[807, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[808, "polars.Series.peak_min"]], "product() (polars.series method)": [[809, "polars.Series.product"]], "quantile() (polars.series method)": [[810, "polars.Series.quantile"]], "rank() (polars.series method)": [[811, "polars.Series.rank"]], "rechunk() (polars.series method)": [[812, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[813, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[814, "polars.Series.rename"]], "reshape() (polars.series method)": [[815, "polars.Series.reshape"]], "reverse() (polars.series method)": [[816, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[817, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[818, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[819, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[820, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[821, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[822, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[823, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[824, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[825, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[826, "polars.Series.rolling_var"]], "round() (polars.series method)": [[827, "polars.Series.round"]], "sample() (polars.series method)": [[828, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[829, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[830, "polars.Series.series_equal"]], "set() (polars.series method)": [[831, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[832, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[833, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[834, "polars.Series.shape"]], "shift() (polars.series method)": [[835, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[836, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[837, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[838, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[839, "polars.Series.shuffle"]], "sign() (polars.series method)": [[840, "polars.Series.sign"]], "sin() (polars.series method)": [[841, "polars.Series.sin"]], "sinh() (polars.series method)": [[842, "polars.Series.sinh"]], "skew() (polars.series method)": [[843, "polars.Series.skew"]], "slice() (polars.series method)": [[844, "polars.Series.slice"]], "sort() (polars.series method)": [[845, "polars.Series.sort"]], "sqrt() (polars.series method)": [[846, "polars.Series.sqrt"]], "std() (polars.series method)": [[847, "polars.Series.std"]], "str (polars.series attribute)": [[848, "polars.Series.str"]], "concat() (polars.series.str method)": [[849, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[850, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[851, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[852, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[853, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[854, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[855, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[856, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[857, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[858, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[859, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[860, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[861, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[862, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[863, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[864, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[865, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[866, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[867, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[868, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[869, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[870, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[871, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[872, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[873, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[874, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[875, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[876, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[877, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[878, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[879, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[880, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[881, "polars.Series.struct.rename_fields"]], "unnest() (polars.series.struct method)": [[882, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[883, "polars.Series.sum"]], "tail() (polars.series method)": [[884, "polars.Series.tail"]], "take() (polars.series method)": [[885, "polars.Series.take"]], "take_every() (polars.series method)": [[886, "polars.Series.take_every"]], "tan() (polars.series method)": [[887, "polars.Series.tan"]], "tanh() (polars.series method)": [[888, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[889, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[890, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[891, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[892, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[893, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[894, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[895, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[896, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[897, "polars.Series.top_k"]], "unique() (polars.series method)": [[898, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[899, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[900, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[901, "polars.Series.value_counts"]], "var() (polars.series method)": [[902, "polars.Series.var"]], "view() (polars.series method)": [[903, "polars.Series.view"]], "zip_with() (polars.series method)": [[904, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[919, "polars.SQLContext"]]}})