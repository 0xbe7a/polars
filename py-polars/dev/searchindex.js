Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_dummies", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_dummies", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 86, 96, 114, 124, 127, 128, 227, 245, 259, 569, 648, 673, 948], "refer": [0, 29, 98, 99, 102, 132, 245, 406, 433, 492, 569, 846, 910, 948], "input": [0, 60, 88, 98, 99, 102, 128, 139, 150, 178, 192, 198, 212, 222, 225, 245, 252, 259, 363, 381, 401, 413, 426, 463, 515, 518, 520, 522, 523, 524, 525, 536, 537, 545, 546, 549, 558, 569, 580, 592, 599, 624, 631, 636, 642, 646, 664, 673, 802, 825, 827, 948], "output": [0, 25, 27, 29, 31, 32, 70, 102, 118, 128, 151, 152, 163, 173, 180, 189, 192, 218, 222, 245, 254, 259, 404, 405, 406, 412, 512, 518, 526, 545, 556, 569, 580, 600, 601, 610, 614, 615, 624, 642, 645, 648, 664, 673, 827, 937, 948], "seri": [0, 1, 22, 51, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 90, 92, 96, 117, 118, 120, 124, 128, 135, 143, 145, 147, 148, 153, 156, 157, 159, 161, 169, 170, 174, 185, 186, 200, 204, 207, 210, 211, 226, 245, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 271, 272, 273, 278, 281, 282, 289, 290, 293, 294, 295, 298, 304, 305, 309, 310, 322, 324, 328, 331, 335, 337, 339, 342, 346, 347, 349, 353, 356, 365, 366, 372, 379, 381, 383, 384, 385, 386, 387, 389, 390, 391, 402, 404, 429, 433, 434, 435, 436, 437, 439, 451, 452, 455, 458, 459, 466, 481, 486, 492, 496, 502, 503, 504, 505, 511, 518, 519, 521, 527, 529, 530, 531, 537, 538, 540, 542, 544, 545, 546, 547, 548, 549, 550, 553, 554, 555, 557, 558, 559, 560, 561, 569, 580, 596, 642, 647, 664, 942, 944, 947, 949, 952, 953, 954], "datafram": [0, 1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 49, 51, 60, 61, 62, 63, 64, 65, 67, 68, 69, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 111, 112, 113, 116, 118, 119, 243, 244, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 291, 292, 295, 296, 297, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 348, 349, 350, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 542, 545, 546, 547, 548, 549, 550, 551, 553, 555, 556, 557, 558, 559, 560, 561, 562, 569, 580, 586, 588, 592, 593, 596, 597, 600, 601, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 618, 619, 622, 624, 628, 629, 630, 631, 632, 633, 637, 638, 639, 640, 642, 643, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 672, 673, 692, 710, 719, 734, 735, 799, 844, 891, 894, 906, 907, 917, 926, 927, 937, 948], "lazyfram": [0, 1, 48, 50, 60, 61, 62, 63, 64, 67, 68, 109, 110, 111, 112, 113, 114, 116, 120, 167, 179, 245, 295, 369, 569, 580, 663, 955], "express": [0, 65, 67, 70, 118, 120, 121, 128, 139, 141, 143, 150, 176, 180, 188, 192, 198, 212, 222, 225, 227, 245, 252, 254, 255, 256, 258, 259, 269, 275, 277, 295, 306, 307, 308, 311, 317, 319, 323, 343, 359, 363, 366, 369, 373, 375, 376, 379, 381, 385, 388, 393, 396, 397, 402, 403, 404, 405, 406, 410, 411, 412, 413, 417, 419, 423, 425, 426, 428, 429, 430, 431, 436, 450, 451, 452, 454, 456, 461, 463, 467, 475, 476, 492, 498, 499, 502, 508, 509, 511, 514, 515, 519, 520, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 544, 545, 546, 549, 551, 553, 554, 555, 556, 558, 559, 562, 568, 580, 586, 591, 592, 593, 596, 599, 618, 624, 626, 627, 628, 629, 631, 636, 642, 643, 646, 648, 664, 673, 690, 692, 723, 724, 725, 733, 742, 766, 789, 802, 864, 871, 885, 893, 894, 948], "extend": [0, 88, 245, 366, 569, 580, 672, 789, 948], "function": [0, 29, 61, 62, 63, 64, 69, 86, 92, 98, 99, 102, 109, 119, 128, 132, 138, 145, 172, 179, 180, 209, 213, 216, 217, 227, 245, 255, 259, 295, 317, 347, 360, 361, 362, 404, 405, 426, 428, 439, 440, 441, 442, 443, 444, 446, 447, 448, 460, 506, 516, 518, 529, 530, 537, 538, 540, 545, 553, 569, 580, 610, 614, 617, 639, 648, 664, 673, 710, 733, 770, 783, 784, 785, 786, 799, 844, 852, 866, 867, 873, 878, 931, 948], "data": [0, 1, 5, 15, 18, 28, 29, 34, 51, 60, 61, 63, 68, 75, 76, 80, 82, 85, 86, 87, 88, 89, 90, 91, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 116, 117, 119, 120, 121, 127, 128, 129, 130, 140, 149, 150, 151, 163, 164, 165, 167, 178, 179, 183, 188, 189, 196, 203, 208, 209, 222, 224, 243, 245, 256, 259, 296, 303, 322, 348, 356, 359, 375, 376, 380, 387, 389, 396, 403, 423, 425, 433, 449, 450, 460, 492, 506, 508, 509, 515, 523, 556, 569, 580, 584, 585, 593, 599, 600, 617, 628, 629, 642, 664, 672, 673, 711, 717, 722, 726, 739, 741, 779, 799, 846, 862, 863, 873, 878, 910, 929, 930, 931, 932, 934, 939, 947, 948], "type": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 67, 70, 75, 85, 87, 88, 89, 90, 91, 92, 96, 98, 99, 101, 102, 109, 110, 115, 116, 117, 120, 123, 124, 128, 145, 149, 151, 152, 153, 164, 203, 208, 209, 211, 214, 245, 259, 282, 295, 303, 304, 306, 307, 308, 324, 328, 331, 335, 337, 339, 342, 346, 349, 363, 377, 383, 385, 386, 406, 436, 487, 488, 489, 492, 506, 518, 523, 532, 533, 534, 536, 537, 544, 569, 580, 586, 591, 593, 600, 601, 618, 627, 628, 629, 637, 664, 697, 710, 717, 719, 723, 724, 725, 743, 747, 750, 757, 759, 762, 765, 769, 772, 797, 873, 905, 906, 907, 929, 930, 932, 940, 948], "config": [0, 60, 192, 222, 245, 580, 624, 642, 664], "except": [0, 154, 166, 168, 201, 245, 536, 580, 606, 664, 798, 823, 919, 930, 939, 948], "test": [0, 102, 580, 602, 609, 664], "util": [0, 540, 580, 593, 664], "sql": [0, 28, 48, 100, 165, 245, 580], "These": [1, 29, 125, 245, 353, 568, 776], "allow": [1, 29, 51, 75, 86, 109, 111, 112, 113, 114, 120, 121, 127, 163, 166, 167, 188, 189, 190, 209, 214, 224, 245, 343, 435, 450, 492, 569, 605, 606, 610, 614, 628, 629, 637, 643, 664, 766, 848, 863, 865, 910, 931, 948], "you": [1, 12, 29, 33, 60, 85, 87, 88, 89, 91, 96, 98, 99, 102, 103, 107, 109, 116, 124, 128, 136, 140, 163, 166, 176, 188, 189, 205, 208, 213, 227, 245, 259, 277, 306, 307, 308, 369, 381, 404, 406, 435, 440, 441, 442, 443, 444, 446, 447, 448, 477, 480, 492, 519, 529, 538, 569, 586, 589, 602, 606, 609, 627, 629, 648, 664, 672, 673, 692, 723, 724, 725, 802, 848, 895, 898, 910, 930, 939, 948], "regist": [1, 61, 62, 63, 64], "custom": [1, 29, 61, 62, 63, 64, 128, 227, 245, 259, 295, 404, 439, 518, 545, 569, 610, 648, 664, 673, 710, 852, 948], "dedic": [1, 86, 163, 189, 245], "namespac": [1, 244, 568, 580, 663], "underli": [1, 71, 78, 85, 87, 88, 89, 91, 107, 120, 121, 140, 163, 164, 189, 203, 245, 299, 322, 323, 327, 330, 332, 333, 334, 336, 338, 340, 341, 344, 345, 346, 348, 354, 355, 356, 357, 435, 449, 467, 469, 569, 664, 672, 713, 741, 742, 746, 749, 751, 752, 756, 758, 761, 763, 764, 767, 768, 769, 771, 777, 778, 779, 780, 848, 862, 873, 885, 887, 925, 930, 948], "polar": [1, 245, 568, 569, 574, 580, 664, 948, 955, 956], "class": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 90, 118, 119, 208, 209, 245, 569, 574, 580, 664, 929, 930, 948, 955], "without": [1, 5, 69, 92, 101, 104, 108, 110, 114, 216, 217, 245, 259, 317, 347, 440, 441, 442, 443, 444, 446, 447, 448, 555, 569, 639, 664, 733, 739, 770, 799, 844, 948], "requir": [1, 29, 33, 90, 116, 117, 132, 188, 209, 245, 296, 360, 361, 362, 455, 492, 509, 569, 629, 664, 711, 784, 785, 786, 872, 910, 930, 931, 934, 948], "subclass": [1, 245], "mixin": 1, "expr": [1, 60, 61, 62, 63, 64, 65, 68, 70, 139, 141, 143, 165, 166, 176, 180, 188, 192, 222, 245, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 569, 570, 571, 574, 575, 576, 577, 592, 594, 596, 605, 606, 619, 624, 626, 642, 664, 690, 692, 733, 742, 790, 871, 885, 889, 908, 920, 948], "ar": [1, 5, 10, 14, 17, 25, 29, 33, 51, 70, 77, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 114, 116, 117, 119, 120, 123, 125, 127, 128, 132, 136, 138, 141, 145, 150, 151, 152, 163, 166, 167, 172, 173, 178, 188, 189, 192, 198, 204, 209, 212, 217, 218, 222, 225, 245, 255, 295, 313, 315, 316, 320, 321, 347, 353, 358, 360, 361, 362, 381, 383, 385, 386, 387, 389, 390, 391, 394, 406, 426, 433, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 457, 460, 462, 463, 477, 480, 481, 500, 519, 520, 522, 524, 525, 526, 546, 549, 556, 558, 562, 563, 565, 568, 569, 570, 571, 574, 575, 576, 577, 580, 589, 594, 599, 600, 601, 602, 606, 609, 610, 614, 615, 618, 621, 624, 628, 629, 631, 636, 639, 642, 643, 646, 664, 670, 672, 710, 731, 732, 770, 776, 782, 783, 784, 785, 786, 796, 802, 806, 809, 810, 811, 812, 813, 814, 821, 846, 850, 852, 858, 875, 878, 895, 898, 899, 918, 930, 931, 939, 942, 944, 948, 949, 952, 953, 954], "all": [1, 7, 14, 17, 22, 25, 29, 34, 67, 68, 70, 85, 88, 90, 91, 93, 98, 99, 101, 102, 103, 107, 109, 111, 112, 118, 119, 121, 136, 142, 154, 159, 161, 163, 164, 167, 168, 172, 175, 176, 183, 188, 189, 197, 201, 206, 214, 216, 218, 245, 256, 257, 258, 277, 282, 292, 295, 297, 311, 317, 321, 363, 374, 377, 380, 383, 386, 390, 391, 393, 397, 399, 404, 405, 418, 424, 430, 433, 438, 455, 461, 463, 468, 474, 476, 479, 482, 483, 485, 491, 499, 512, 523, 536, 538, 553, 558, 562, 569, 574, 580, 586, 589, 591, 593, 595, 610, 614, 618, 627, 630, 637, 643, 664, 692, 697, 707, 710, 733, 739, 798, 804, 818, 823, 846, 879, 886, 892, 894, 897, 900, 901, 903, 909, 919, 948], "support": [1, 29, 33, 68, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 110, 118, 121, 125, 127, 163, 164, 189, 197, 198, 205, 209, 245, 290, 426, 461, 463, 486, 523, 569, 574, 630, 631, 664, 705, 879, 904, 931, 948], "target": [1, 29, 66, 245, 473, 492, 891, 910], "thi": [1, 5, 7, 12, 25, 27, 29, 31, 33, 37, 50, 51, 60, 67, 68, 69, 85, 87, 88, 89, 90, 91, 92, 95, 96, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 124, 127, 128, 132, 136, 137, 138, 140, 145, 150, 151, 152, 153, 157, 159, 161, 163, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 178, 181, 182, 183, 188, 189, 190, 192, 195, 197, 199, 200, 203, 205, 208, 209, 213, 214, 216, 217, 218, 219, 220, 222, 223, 227, 244, 245, 255, 258, 259, 268, 277, 278, 282, 291, 295, 296, 304, 311, 317, 322, 333, 343, 346, 347, 356, 365, 379, 380, 381, 385, 397, 402, 404, 410, 411, 412, 413, 421, 422, 426, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 452, 454, 455, 456, 461, 462, 463, 478, 479, 484, 485, 491, 492, 495, 507, 509, 510, 511, 512, 516, 519, 524, 527, 529, 531, 537, 538, 540, 555, 559, 569, 580, 581, 583, 586, 589, 591, 593, 599, 600, 601, 603, 606, 610, 614, 615, 618, 621, 624, 626, 627, 628, 629, 630, 637, 639, 642, 643, 644, 645, 648, 663, 664, 672, 673, 682, 692, 693, 697, 706, 711, 719, 733, 739, 741, 742, 752, 766, 769, 770, 779, 783, 788, 795, 796, 799, 803, 808, 809, 815, 817, 819, 822, 826, 828, 829, 830, 831, 833, 834, 836, 837, 839, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 856, 859, 860, 861, 863, 866, 867, 868, 871, 872, 873, 874, 879, 880, 882, 896, 897, 902, 903, 909, 910, 913, 914, 917, 918, 925, 927, 929, 930, 931, 933, 934, 936, 938, 939, 948], "featur": [1, 33, 37, 51, 66, 245], "i": [1, 5, 12, 14, 27, 29, 31, 32, 37, 51, 60, 65, 66, 67, 68, 69, 70, 72, 74, 75, 77, 81, 83, 85, 86, 87, 88, 89, 90, 91, 92, 95, 98, 99, 100, 101, 103, 107, 109, 110, 111, 112, 113, 114, 118, 119, 120, 121, 127, 128, 136, 138, 146, 149, 150, 151, 152, 153, 154, 157, 158, 160, 162, 163, 164, 166, 167, 168, 170, 172, 173, 176, 178, 179, 180, 188, 189, 190, 197, 198, 199, 200, 201, 203, 209, 213, 214, 216, 217, 218, 219, 227, 244, 245, 252, 255, 257, 258, 259, 269, 277, 280, 290, 294, 295, 317, 323, 332, 343, 347, 353, 360, 361, 362, 365, 377, 379, 381, 394, 404, 406, 413, 426, 433, 435, 437, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 452, 456, 457, 460, 461, 462, 463, 465, 467, 468, 473, 474, 476, 478, 479, 481, 484, 485, 486, 489, 491, 492, 495, 512, 513, 517, 519, 523, 524, 526, 527, 529, 530, 531, 538, 544, 546, 549, 551, 555, 556, 557, 559, 561, 562, 569, 586, 589, 591, 593, 599, 600, 601, 604, 606, 608, 610, 614, 615, 618, 627, 628, 629, 630, 631, 632, 637, 639, 640, 645, 648, 664, 671, 672, 673, 692, 695, 705, 709, 733, 742, 751, 766, 770, 776, 783, 784, 785, 786, 788, 796, 797, 798, 799, 801, 803, 805, 815, 816, 817, 819, 820, 821, 823, 844, 846, 848, 850, 863, 864, 865, 866, 867, 868, 874, 875, 878, 879, 882, 885, 886, 891, 892, 894, 896, 897, 899, 902, 903, 904, 907, 909, 913, 919, 925, 930, 931, 937, 938, 939, 948], "primarili": 1, "intend": 1, "us": [1, 9, 11, 12, 17, 22, 23, 27, 28, 29, 33, 51, 60, 69, 70, 86, 88, 89, 91, 93, 94, 96, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 118, 119, 120, 121, 124, 128, 134, 136, 141, 142, 145, 150, 151, 152, 159, 161, 163, 164, 166, 170, 172, 175, 176, 179, 180, 188, 190, 192, 198, 199, 200, 206, 207, 209, 213, 214, 216, 217, 218, 219, 222, 225, 227, 245, 253, 259, 269, 277, 295, 299, 300, 304, 317, 320, 321, 356, 358, 360, 361, 362, 368, 369, 380, 381, 394, 404, 406, 409, 426, 433, 435, 437, 440, 441, 442, 443, 444, 446, 447, 448, 450, 452, 455, 456, 460, 462, 463, 465, 469, 470, 471, 477, 478, 484, 486, 488, 490, 492, 513, 518, 519, 523, 525, 526, 529, 531, 538, 540, 544, 546, 549, 551, 554, 555, 556, 557, 558, 559, 561, 568, 569, 580, 586, 588, 589, 594, 595, 599, 600, 601, 602, 606, 608, 609, 614, 624, 629, 631, 632, 637, 639, 640, 642, 646, 648, 664, 673, 692, 710, 713, 714, 719, 733, 779, 782, 784, 785, 786, 790, 791, 796, 799, 802, 821, 827, 846, 848, 850, 863, 866, 867, 868, 872, 874, 878, 882, 887, 888, 895, 896, 902, 904, 906, 910, 920, 926, 928, 929, 930, 931, 938, 939, 948], "librari": [1, 71, 78, 404, 569, 956], "author": 1, "domain": 1, "specif": [1, 25, 29, 85, 87, 89, 91, 98, 100, 101, 110, 120, 163, 245, 439, 492, 569, 664, 852, 910, 948], "capabl": [1, 29, 245], "which": [1, 17, 26, 27, 29, 30, 31, 32, 33, 60, 61, 62, 63, 64, 88, 98, 99, 100, 101, 102, 109, 110, 116, 136, 140, 151, 152, 214, 245, 255, 295, 366, 381, 383, 386, 387, 389, 390, 391, 413, 440, 441, 442, 443, 444, 446, 447, 448, 481, 562, 569, 589, 591, 600, 601, 628, 629, 637, 645, 664, 672, 789, 802, 806, 810, 811, 812, 813, 814, 866, 899, 948], "mai": [1, 33, 37, 68, 69, 85, 87, 88, 89, 91, 98, 101, 103, 110, 111, 114, 128, 138, 140, 166, 194, 195, 209, 216, 217, 245, 259, 289, 294, 295, 317, 322, 333, 347, 440, 441, 442, 443, 444, 446, 447, 448, 453, 454, 492, 529, 530, 538, 553, 569, 606, 610, 625, 626, 629, 639, 644, 648, 664, 672, 673, 704, 709, 733, 741, 752, 770, 783, 799, 844, 870, 871, 910, 948], "exist": [1, 28, 29, 101, 110, 120, 222, 245, 323, 642, 664, 742], "belong": [1, 151, 245, 600, 664], "core": [1, 209, 245], "cannot": [1, 86, 98, 99, 103, 116, 128, 190, 227, 245, 299, 406, 450, 469, 488, 497, 569, 627, 648, 664, 673, 713, 863, 887, 906, 948], "overrid": [1, 29, 85, 87, 88, 89, 90, 91, 98, 118, 119, 121, 245, 406, 569, 664, 827, 948], "str": [1, 6, 8, 13, 14, 17, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 48, 49, 50, 51, 60, 61, 62, 63, 64, 66, 69, 70, 85, 87, 88, 89, 91, 92, 93, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 131, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 147, 149, 150, 151, 152, 154, 156, 159, 161, 163, 165, 166, 169, 170, 171, 172, 173, 174, 176, 178, 180, 182, 184, 185, 186, 187, 188, 189, 190, 194, 195, 197, 198, 199, 200, 201, 204, 205, 206, 207, 211, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 252, 253, 254, 259, 273, 274, 275, 280, 281, 282, 290, 293, 295, 319, 324, 343, 346, 347, 350, 353, 363, 365, 367, 369, 371, 379, 381, 388, 405, 406, 412, 414, 426, 428, 430, 436, 438, 440, 441, 442, 443, 444, 446, 447, 448, 454, 455, 462, 463, 496, 497, 499, 502, 514, 515, 516, 517, 518, 521, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 569, 575, 586, 587, 588, 589, 591, 592, 593, 596, 598, 599, 600, 601, 603, 605, 606, 614, 615, 618, 620, 621, 622, 626, 627, 628, 629, 630, 631, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 669, 689, 690, 697, 710, 717, 734, 735, 743, 766, 769, 770, 773, 776, 788, 791, 827, 836, 837, 844, 849, 866, 867, 914, 916, 926, 927, 928, 948, 952], "dt": [1, 60, 152, 245, 577, 601, 664, 954], "attempt": [1, 208, 245], "do": [1, 29, 60, 67, 109, 140, 166, 203, 213, 216, 245, 277, 317, 479, 485, 491, 516, 569, 586, 591, 606, 610, 618, 627, 628, 629, 664, 672, 692, 733, 897, 903, 909, 930, 939, 948], "so": [1, 51, 100, 109, 149, 151, 152, 180, 245, 269, 280, 381, 479, 485, 491, 569, 600, 601, 664, 695, 897, 903, 909], "rais": [1, 13, 17, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 116, 117, 188, 245, 294, 299, 412, 467, 469, 481, 492, 544, 709, 713, 885, 887, 899, 910, 930, 939, 948], "an": [1, 25, 28, 29, 37, 61, 63, 64, 65, 67, 70, 71, 75, 76, 78, 85, 98, 99, 100, 101, 102, 104, 107, 109, 111, 119, 120, 121, 128, 129, 130, 138, 141, 143, 145, 151, 152, 163, 164, 166, 176, 180, 186, 188, 203, 208, 216, 222, 227, 245, 254, 255, 259, 275, 277, 280, 294, 295, 299, 303, 306, 307, 308, 312, 313, 314, 315, 316, 317, 323, 356, 366, 369, 393, 404, 405, 413, 431, 439, 440, 441, 442, 443, 444, 446, 447, 448, 467, 469, 474, 492, 502, 508, 519, 523, 535, 540, 544, 553, 554, 555, 558, 562, 569, 580, 584, 585, 586, 591, 593, 596, 600, 601, 606, 610, 618, 627, 642, 643, 648, 664, 673, 690, 692, 695, 709, 713, 717, 722, 723, 724, 725, 726, 729, 730, 731, 732, 733, 742, 779, 783, 789, 852, 853, 854, 855, 856, 857, 859, 860, 861, 866, 867, 885, 887, 892, 910, 930, 939, 948], "attributeerror": 1, "howev": [1, 88, 138, 245, 783, 948], "can": [1, 12, 29, 60, 70, 76, 88, 98, 99, 102, 103, 107, 109, 111, 113, 114, 119, 120, 121, 128, 137, 145, 151, 159, 161, 176, 180, 192, 198, 212, 213, 216, 222, 227, 245, 259, 277, 295, 313, 316, 317, 343, 353, 366, 380, 381, 418, 435, 440, 441, 442, 443, 444, 446, 447, 448, 452, 455, 457, 460, 463, 476, 479, 485, 491, 492, 512, 516, 519, 520, 523, 531, 538, 540, 559, 562, 568, 569, 586, 591, 600, 624, 631, 636, 642, 644, 648, 664, 673, 692, 710, 733, 766, 776, 789, 802, 832, 848, 866, 867, 868, 872, 875, 878, 894, 897, 903, 909, 948], "other": [1, 17, 29, 70, 98, 99, 102, 109, 116, 117, 136, 140, 146, 165, 166, 172, 173, 188, 192, 217, 222, 243, 245, 252, 256, 258, 269, 273, 306, 307, 308, 319, 359, 373, 375, 376, 381, 385, 396, 403, 406, 417, 419, 423, 425, 463, 498, 506, 508, 515, 522, 524, 525, 546, 549, 558, 569, 580, 589, 605, 606, 614, 615, 624, 639, 642, 643, 664, 672, 688, 723, 724, 725, 737, 809, 865, 932, 940, 947, 948], "onli": [1, 17, 25, 29, 51, 60, 66, 68, 98, 99, 101, 102, 103, 107, 109, 110, 111, 112, 113, 120, 121, 125, 128, 136, 163, 166, 170, 189, 200, 205, 207, 245, 253, 259, 269, 305, 306, 307, 308, 343, 363, 372, 435, 510, 554, 569, 586, 589, 602, 606, 609, 664, 720, 723, 724, 725, 766, 794, 848, 925, 928, 948], "gener": [1, 93, 100, 118, 119, 120, 121, 132, 180, 190, 206, 213, 245, 295, 450, 456, 569, 664, 710, 863, 874, 926, 948], "userwarn": 1, "pl": [1, 7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 109, 110, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 412, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 569, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 692, 693, 696, 697, 699, 704, 705, 706, 708, 710, 717, 719, 720, 721, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 785, 786, 789, 790, 791, 792, 794, 797, 798, 799, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 840, 841, 842, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 874, 875, 876, 877, 879, 880, 881, 882, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 948], "register_expr_namespac": [1, 61, 63, 64], "greet": 1, "def": [1, 61, 62, 63, 64, 119, 120, 121, 179, 213, 245, 252, 428, 515, 545, 569, 617, 664], "__init__": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 118], "self": [1, 61, 62, 63, 64, 67, 128, 129, 130, 132, 133, 134, 136, 139, 140, 141, 142, 143, 150, 151, 152, 154, 156, 157, 158, 165, 166, 168, 169, 170, 171, 172, 173, 174, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 190, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 206, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 297, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 569, 583, 584, 585, 586, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 624, 625, 626, 627, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 664, 672, 673, 717, 726, 792, 826, 827, 838, 841, 842, 847, 866, 867, 868, 880, 936, 940, 948], "_expr": [1, 62], "hello": [1, 479, 485, 491, 516, 697, 897, 903, 909], "return": [1, 25, 27, 29, 31, 32, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 77, 79, 84, 85, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 124, 128, 129, 132, 135, 136, 137, 138, 139, 141, 142, 145, 149, 150, 154, 156, 162, 163, 164, 165, 167, 168, 175, 176, 178, 179, 180, 188, 189, 190, 201, 202, 209, 212, 213, 214, 222, 224, 227, 230, 234, 239, 245, 255, 257, 260, 261, 262, 263, 264, 265, 268, 269, 271, 272, 274, 278, 280, 281, 282, 293, 294, 298, 300, 309, 310, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 352, 353, 354, 355, 357, 365, 378, 381, 383, 384, 385, 386, 387, 389, 390, 391, 398, 402, 413, 418, 428, 436, 437, 450, 451, 457, 458, 459, 466, 468, 470, 472, 473, 474, 476, 477, 478, 480, 481, 484, 486, 487, 488, 489, 495, 501, 502, 503, 504, 505, 507, 508, 510, 511, 512, 515, 517, 518, 519, 520, 523, 532, 533, 534, 540, 542, 544, 545, 554, 555, 558, 560, 562, 569, 584, 586, 589, 590, 591, 593, 602, 608, 609, 610, 617, 618, 627, 628, 629, 634, 635, 636, 637, 642, 645, 651, 655, 660, 664, 669, 670, 671, 673, 680, 681, 683, 684, 686, 687, 689, 693, 695, 696, 697, 708, 709, 712, 714, 722, 734, 735, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 783, 788, 796, 798, 799, 804, 806, 807, 809, 810, 811, 812, 813, 814, 818, 820, 823, 826, 832, 844, 850, 851, 863, 864, 865, 867, 875, 884, 885, 886, 888, 890, 891, 892, 894, 895, 896, 898, 899, 902, 904, 905, 906, 907, 910, 913, 919, 921, 933, 935, 936, 940, 948], "lit": [1, 96, 124, 298, 381, 393, 529, 531, 538, 559, 562, 569, 712, 791, 948], "alia": [1, 60, 62, 64, 151, 152, 168, 215, 222, 245, 252, 256, 259, 275, 277, 306, 307, 308, 312, 313, 314, 315, 316, 318, 322, 323, 324, 327, 328, 329, 331, 333, 334, 335, 337, 339, 342, 343, 344, 346, 347, 348, 349, 350, 352, 353, 355, 356, 359, 369, 371, 373, 375, 376, 379, 381, 384, 385, 393, 396, 397, 398, 403, 406, 415, 417, 419, 423, 425, 427, 429, 435, 451, 467, 468, 471, 474, 477, 480, 486, 488, 489, 490, 496, 497, 498, 506, 507, 508, 514, 515, 518, 521, 522, 524, 525, 529, 530, 531, 534, 535, 538, 539, 545, 553, 554, 558, 559, 562, 569, 600, 601, 603, 609, 638, 642, 664, 692, 741, 743, 748, 766, 769, 775, 779, 823, 906, 907, 948], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 479, 485, 491, 697, 897, 903, 909], "select": [1, 28, 60, 61, 62, 63, 65, 97, 98, 99, 100, 101, 103, 107, 109, 114, 128, 162, 166, 176, 179, 188, 197, 210, 215, 218, 245, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 291, 292, 295, 296, 297, 305, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 366, 370, 372, 374, 377, 379, 380, 382, 383, 385, 386, 388, 392, 393, 394, 395, 397, 399, 400, 401, 402, 404, 405, 407, 408, 409, 416, 418, 420, 421, 422, 424, 425, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 478, 479, 481, 484, 485, 487, 488, 489, 491, 493, 494, 496, 497, 499, 500, 503, 504, 505, 507, 509, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 529, 530, 531, 534, 536, 537, 538, 539, 540, 542, 546, 547, 548, 549, 550, 551, 553, 556, 557, 558, 559, 560, 561, 569, 587, 603, 606, 617, 630, 638, 643, 645, 664, 692, 710, 866, 867, 879, 891, 894, 920, 948], "shape": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 82, 85, 87, 88, 89, 90, 91, 92, 93, 96, 109, 114, 120, 121, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 165, 166, 169, 170, 171, 172, 174, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 190, 192, 194, 195, 197, 198, 199, 200, 201, 202, 204, 206, 207, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 542, 545, 546, 547, 548, 549, 550, 551, 553, 555, 556, 557, 558, 559, 560, 561, 562, 569, 584, 586, 588, 589, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 624, 625, 626, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 672, 673, 674, 675, 676, 677, 678, 679, 682, 683, 684, 691, 692, 693, 696, 697, 699, 704, 705, 706, 708, 710, 717, 719, 720, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 785, 786, 789, 790, 791, 792, 794, 797, 798, 799, 801, 802, 804, 806, 809, 810, 811, 812, 813, 814, 818, 820, 826, 827, 832, 840, 841, 842, 844, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 866, 867, 870, 874, 875, 876, 877, 879, 880, 881, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 917, 919, 920, 921, 922, 923, 926, 927, 928, 932, 934, 935, 936, 937, 940, 948], "3": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 93, 100, 102, 109, 114, 115, 116, 117, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 252, 253, 254, 255, 259, 268, 269, 270, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 297, 303, 304, 305, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 332, 338, 340, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 417, 418, 419, 423, 424, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 462, 463, 464, 467, 470, 471, 473, 475, 477, 480, 486, 487, 488, 489, 490, 496, 497, 498, 499, 501, 502, 503, 507, 510, 511, 512, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 535, 536, 537, 538, 539, 542, 544, 545, 546, 547, 548, 549, 551, 553, 555, 556, 557, 558, 559, 560, 561, 562, 569, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 669, 672, 673, 674, 676, 677, 678, 680, 681, 682, 683, 684, 691, 692, 693, 696, 699, 704, 705, 706, 708, 710, 717, 719, 720, 721, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 742, 743, 746, 747, 748, 749, 751, 753, 754, 755, 757, 759, 760, 761, 763, 765, 767, 769, 770, 771, 775, 776, 778, 779, 783, 785, 786, 789, 790, 791, 792, 794, 797, 798, 799, 801, 802, 804, 806, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 840, 841, 842, 844, 845, 846, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 874, 876, 877, 878, 879, 880, 882, 888, 889, 891, 893, 895, 898, 904, 908, 917, 918, 919, 920, 921, 922, 923, 925, 926, 929, 930, 931, 934, 935, 936, 937, 938, 940, 948], "1": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 103, 109, 110, 114, 115, 116, 117, 118, 120, 121, 128, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 569, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 692, 693, 695, 696, 699, 704, 705, 706, 708, 710, 717, 719, 720, 721, 723, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 784, 785, 786, 789, 790, 791, 792, 794, 797, 798, 799, 801, 802, 804, 806, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 820, 822, 826, 828, 829, 830, 831, 832, 833, 834, 840, 841, 842, 844, 845, 846, 849, 850, 851, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 891, 893, 894, 900, 906, 907, 910, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 948], "2": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 85, 87, 88, 89, 90, 91, 92, 93, 100, 109, 114, 115, 116, 117, 120, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 165, 167, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 254, 256, 257, 258, 259, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 323, 324, 328, 330, 331, 333, 334, 335, 337, 338, 339, 340, 342, 343, 345, 346, 347, 348, 349, 350, 353, 356, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 417, 418, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 460, 461, 462, 463, 464, 466, 468, 471, 474, 475, 476, 477, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 542, 544, 545, 546, 547, 548, 549, 550, 551, 553, 555, 556, 557, 558, 559, 560, 561, 562, 569, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 669, 672, 673, 675, 679, 680, 681, 682, 683, 684, 691, 692, 693, 696, 697, 699, 704, 705, 706, 708, 710, 719, 720, 721, 722, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 742, 744, 745, 749, 754, 755, 761, 763, 768, 770, 771, 774, 776, 778, 780, 782, 783, 784, 785, 786, 789, 790, 791, 792, 794, 797, 798, 799, 801, 802, 804, 806, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 822, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 840, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 874, 876, 878, 879, 880, 881, 882, 884, 886, 892, 893, 894, 897, 898, 899, 900, 901, 903, 906, 907, 909, 910, 917, 918, 919, 920, 921, 922, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 940, 948], "column_0": [1, 128, 213, 245], "register_dataframe_namespac": [1, 62, 63, 64], "split": [1, 61, 164, 245, 488, 489, 906, 907], "splitfram": [1, 61], "df": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 61, 62, 65, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99, 109, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 291, 292, 295, 296, 297, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 542, 545, 546, 547, 548, 549, 550, 551, 553, 555, 556, 557, 558, 559, 560, 561, 562, 569, 601, 638, 639, 645, 648, 651, 660, 664, 692, 710, 719, 891, 894, 901, 906, 907, 927, 948], "_df": [1, 61], "by_alternate_row": 1, "list": [1, 29, 36, 60, 61, 63, 67, 69, 85, 87, 88, 89, 91, 92, 95, 97, 98, 99, 100, 101, 103, 107, 109, 110, 119, 120, 121, 131, 134, 137, 138, 139, 143, 148, 150, 151, 156, 163, 175, 178, 188, 189, 192, 198, 204, 205, 213, 214, 215, 216, 222, 225, 226, 245, 253, 273, 276, 277, 278, 281, 282, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 365, 371, 404, 413, 414, 426, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 454, 462, 463, 474, 487, 496, 497, 502, 520, 523, 524, 531, 535, 546, 549, 558, 559, 569, 587, 588, 590, 592, 596, 599, 600, 614, 624, 631, 637, 638, 642, 643, 646, 647, 664, 685, 688, 691, 692, 693, 695, 696, 697, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 721, 734, 783, 788, 792, 795, 799, 809, 844, 850, 852, 853, 854, 855, 856, 857, 859, 860, 861, 864, 892, 905, 920, 929, 948], "with_row_count": [1, 245, 406, 569, 664, 867, 948], "name": [1, 15, 19, 21, 28, 29, 31, 50, 61, 62, 63, 64, 69, 70, 74, 85, 87, 88, 89, 90, 91, 93, 97, 98, 99, 101, 102, 103, 104, 107, 108, 109, 111, 112, 113, 117, 118, 119, 120, 121, 128, 131, 134, 135, 136, 139, 144, 147, 149, 150, 163, 165, 166, 172, 178, 180, 184, 188, 189, 191, 192, 198, 204, 206, 211, 212, 213, 214, 215, 216, 217, 222, 223, 224, 225, 245, 254, 259, 295, 347, 353, 363, 381, 393, 405, 412, 414, 426, 430, 463, 496, 497, 499, 516, 517, 520, 522, 523, 524, 525, 526, 528, 531, 536, 542, 543, 546, 549, 551, 552, 554, 556, 558, 559, 560, 569, 587, 588, 589, 592, 599, 605, 606, 614, 621, 623, 624, 631, 636, 637, 638, 639, 642, 644, 645, 646, 664, 669, 710, 722, 734, 770, 776, 844, 849, 914, 916, 926, 927, 931, 948], "n": [1, 11, 14, 22, 32, 36, 38, 61, 62, 63, 64, 70, 95, 96, 98, 99, 109, 124, 128, 129, 140, 151, 154, 163, 164, 168, 189, 190, 199, 201, 202, 205, 207, 219, 230, 239, 245, 276, 281, 293, 317, 318, 322, 323, 329, 352, 356, 366, 378, 398, 427, 436, 450, 460, 465, 482, 488, 489, 501, 503, 507, 508, 513, 515, 526, 540, 542, 551, 554, 556, 557, 560, 561, 569, 584, 586, 600, 602, 609, 632, 634, 635, 640, 651, 660, 664, 672, 691, 696, 708, 722, 733, 736, 741, 742, 748, 775, 779, 789, 798, 823, 840, 863, 878, 882, 900, 906, 907, 919, 921, 928, 933, 938, 948], "filter": [1, 61, 101, 109, 110, 114, 136, 159, 160, 161, 227, 245, 471, 490, 514, 519, 538, 569, 589, 593, 603, 648, 664, 866, 948], "col": [1, 27, 29, 60, 61, 62, 63, 65, 89, 91, 109, 119, 120, 128, 139, 143, 150, 151, 152, 160, 162, 176, 179, 188, 192, 198, 215, 222, 225, 245, 251, 252, 253, 254, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 291, 292, 295, 296, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 366, 369, 370, 371, 372, 373, 375, 376, 379, 380, 381, 382, 384, 385, 387, 388, 389, 392, 393, 394, 395, 396, 400, 401, 402, 403, 406, 407, 408, 409, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 518, 519, 522, 524, 525, 529, 530, 531, 534, 537, 538, 539, 540, 541, 546, 549, 552, 553, 559, 562, 569, 592, 596, 599, 600, 601, 603, 617, 624, 631, 638, 642, 643, 646, 664, 692, 710, 719, 766, 850, 866, 867, 891, 894, 910, 948], "0": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 33, 60, 61, 62, 64, 65, 69, 93, 98, 99, 100, 102, 103, 107, 109, 111, 112, 113, 114, 115, 118, 119, 120, 121, 124, 128, 129, 130, 132, 133, 134, 137, 141, 142, 145, 146, 148, 149, 150, 151, 153, 157, 162, 163, 164, 165, 167, 169, 170, 171, 174, 175, 176, 177, 181, 182, 186, 190, 191, 192, 195, 197, 198, 199, 200, 206, 207, 209, 210, 213, 216, 218, 219, 222, 223, 225, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 251, 253, 256, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 275, 277, 280, 286, 295, 303, 305, 307, 308, 309, 310, 312, 317, 320, 321, 330, 334, 335, 337, 338, 342, 348, 349, 359, 360, 361, 362, 364, 365, 366, 367, 368, 372, 373, 375, 376, 377, 380, 383, 386, 387, 389, 390, 391, 393, 394, 396, 400, 401, 403, 404, 406, 407, 408, 409, 416, 417, 419, 421, 422, 423, 424, 425, 427, 428, 429, 432, 433, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 455, 457, 458, 459, 460, 464, 465, 473, 492, 495, 498, 500, 504, 505, 506, 508, 513, 519, 520, 521, 522, 524, 526, 528, 529, 531, 535, 538, 547, 548, 551, 552, 553, 556, 559, 561, 562, 569, 584, 585, 588, 590, 594, 595, 599, 600, 605, 608, 613, 618, 619, 623, 624, 626, 627, 629, 631, 632, 640, 642, 643, 644, 646, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 664, 674, 675, 676, 677, 678, 679, 680, 682, 684, 692, 695, 717, 720, 722, 727, 728, 733, 734, 735, 737, 749, 753, 754, 755, 756, 757, 758, 759, 760, 761, 764, 765, 771, 772, 782, 784, 785, 786, 788, 790, 794, 797, 799, 806, 808, 810, 811, 812, 813, 814, 820, 821, 826, 829, 830, 840, 844, 845, 846, 852, 854, 855, 857, 858, 859, 861, 863, 875, 876, 877, 881, 882, 884, 891, 894, 913, 922, 923, 926, 931, 932, 936, 938, 939, 948], "drop": [1, 88, 128, 135, 136, 214, 222, 245, 276, 318, 320, 321, 492, 569, 589, 637, 642, 664, 691, 736, 738, 739, 948], "aaa": [1, 29, 245, 496, 497], "bbb": [1, 29, 245, 496, 497], "ccc": [1, 29, 245, 496, 497], "ddd": [1, 29, 245, 496, 497], "eee": [1, 29, 245], "fff": 1, "column": [1, 14, 15, 18, 19, 21, 29, 31, 51, 60, 61, 68, 69, 70, 72, 74, 85, 87, 88, 89, 90, 91, 92, 93, 97, 98, 99, 100, 101, 103, 104, 107, 108, 109, 110, 111, 112, 113, 116, 120, 127, 128, 134, 135, 136, 137, 139, 144, 147, 149, 150, 151, 152, 156, 157, 163, 165, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 188, 189, 191, 192, 198, 199, 200, 204, 206, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 222, 223, 225, 245, 255, 257, 259, 268, 273, 278, 291, 294, 295, 323, 327, 330, 332, 333, 334, 336, 338, 340, 341, 344, 345, 348, 354, 355, 357, 363, 365, 369, 371, 381, 393, 406, 411, 412, 414, 426, 430, 434, 436, 437, 440, 441, 442, 443, 444, 446, 447, 448, 455, 462, 463, 472, 488, 489, 492, 499, 514, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 569, 588, 589, 590, 592, 599, 600, 601, 605, 606, 610, 611, 612, 613, 614, 616, 617, 619, 621, 623, 624, 631, 632, 633, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 664, 670, 671, 688, 693, 706, 709, 734, 744, 745, 746, 749, 751, 752, 756, 758, 761, 763, 764, 767, 768, 771, 774, 777, 778, 780, 788, 844, 850, 872, 890, 906, 907, 917, 926, 927, 948], "txt": [1, 109], "utf8": [1, 9, 17, 51, 88, 92, 98, 99, 109, 118, 137, 138, 139, 145, 191, 208, 245, 282, 365, 406, 466, 470, 473, 474, 476, 477, 486, 487, 488, 489, 492, 523, 525, 569, 590, 592, 623, 664, 697, 773, 788, 819, 884, 888, 891, 892, 894, 895, 904, 905, 906, 907, 910, 948], "register_lazyframe_namespac": [1, 61, 62, 64], "dtypeoper": [1, 63], "ldf": [1, 63, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660], "_ldf": [1, 63], "upcast_integer_typ": [1, 63], "with_column": [1, 63, 152, 179, 245, 252, 259, 269, 277, 303, 304, 306, 307, 308, 313, 316, 318, 359, 373, 375, 376, 377, 380, 381, 384, 387, 389, 390, 391, 393, 396, 403, 406, 417, 419, 423, 426, 427, 428, 429, 471, 477, 480, 482, 483, 486, 488, 489, 490, 492, 495, 498, 506, 508, 515, 518, 519, 522, 525, 531, 535, 545, 559, 562, 569, 601, 617, 664, 692, 719, 910], "tp": [1, 63], "cast": [1, 62, 63, 85, 123, 145, 151, 152, 179, 209, 222, 245, 258, 304, 315, 316, 322, 406, 425, 428, 435, 475, 476, 495, 500, 506, 525, 569, 600, 601, 617, 642, 664, 719, 731, 732, 741, 848, 893, 894, 918, 927, 932, 948], "int64": [1, 29, 31, 62, 63, 92, 96, 98, 124, 137, 145, 151, 152, 179, 191, 203, 209, 245, 315, 316, 328, 331, 335, 337, 339, 342, 349, 363, 428, 435, 475, 500, 506, 519, 523, 536, 558, 569, 590, 600, 601, 617, 623, 645, 664, 731, 732, 747, 750, 757, 759, 762, 765, 772, 848, 865, 918, 930, 931, 932, 948], "int8": [1, 63, 145, 245, 315, 316, 500, 569, 731, 732, 736, 827, 851, 918, 936, 948], "int16": [1, 63, 315, 316, 500, 569, 731, 732, 827, 918, 928, 948], "int32": [1, 63, 88, 92, 120, 121, 151, 152, 164, 245, 303, 333, 357, 506, 569, 600, 601, 664, 752, 780, 826, 932, 948], "b": [1, 26, 27, 30, 33, 51, 63, 68, 85, 87, 88, 89, 90, 91, 92, 93, 102, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 156, 157, 159, 161, 162, 163, 164, 165, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 252, 254, 258, 259, 270, 273, 277, 282, 284, 297, 303, 304, 311, 319, 320, 321, 363, 367, 368, 369, 371, 374, 377, 380, 381, 383, 386, 387, 388, 389, 390, 391, 393, 397, 399, 405, 418, 424, 426, 428, 430, 438, 455, 461, 463, 472, 475, 482, 499, 510, 512, 514, 516, 517, 518, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 535, 536, 537, 538, 539, 542, 545, 546, 547, 548, 549, 550, 551, 553, 556, 557, 558, 559, 560, 561, 569, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 602, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 642, 643, 644, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 672, 692, 719, 735, 737, 782, 783, 791, 802, 809, 819, 849, 865, 890, 893, 900, 917, 931, 935, 948], "4": [1, 14, 22, 26, 27, 29, 30, 33, 51, 60, 61, 62, 63, 64, 65, 68, 70, 85, 87, 88, 89, 90, 91, 92, 93, 109, 116, 117, 121, 128, 129, 130, 133, 136, 139, 140, 141, 142, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 170, 172, 175, 176, 178, 179, 180, 181, 185, 189, 193, 198, 201, 202, 203, 204, 205, 206, 211, 213, 215, 216, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 256, 258, 259, 270, 275, 276, 277, 278, 281, 289, 290, 293, 297, 303, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 327, 331, 338, 339, 340, 344, 345, 347, 348, 349, 353, 354, 355, 357, 359, 364, 367, 368, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 390, 391, 393, 396, 397, 398, 399, 401, 403, 405, 406, 417, 419, 423, 425, 426, 429, 430, 432, 433, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 451, 453, 454, 457, 461, 462, 463, 464, 467, 477, 478, 480, 481, 484, 486, 488, 489, 492, 496, 497, 498, 499, 501, 502, 503, 506, 507, 508, 515, 518, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 535, 537, 538, 542, 545, 546, 547, 548, 549, 550, 551, 556, 557, 558, 559, 560, 561, 562, 569, 584, 585, 586, 589, 591, 592, 593, 594, 595, 597, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 625, 626, 627, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 672, 675, 682, 691, 692, 693, 696, 704, 705, 708, 720, 721, 723, 733, 735, 737, 749, 750, 756, 758, 761, 762, 763, 764, 768, 770, 771, 772, 773, 776, 777, 778, 790, 791, 798, 799, 801, 802, 804, 809, 811, 812, 813, 814, 818, 827, 833, 840, 841, 842, 844, 846, 850, 855, 857, 858, 859, 860, 861, 863, 865, 875, 879, 880, 885, 895, 896, 898, 899, 902, 904, 906, 907, 910, 917, 919, 920, 921, 928, 931, 932, 940, 948], "c": [1, 26, 27, 30, 33, 51, 61, 63, 88, 90, 92, 102, 109, 119, 129, 130, 131, 133, 134, 135, 136, 137, 139, 143, 144, 145, 146, 148, 149, 150, 151, 154, 156, 157, 164, 165, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 180, 181, 182, 184, 186, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 203, 207, 208, 209, 210, 213, 216, 217, 219, 220, 222, 225, 228, 229, 230, 231, 232, 233, 235, 238, 239, 245, 252, 259, 273, 282, 284, 381, 393, 426, 428, 455, 488, 492, 510, 512, 516, 517, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 537, 538, 539, 542, 545, 546, 547, 548, 549, 550, 551, 556, 557, 559, 560, 561, 569, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 596, 599, 600, 605, 608, 614, 618, 621, 622, 623, 624, 627, 630, 631, 639, 642, 643, 646, 649, 650, 651, 652, 653, 654, 656, 659, 660, 664, 735, 802, 819, 906, 910, 935, 948], "5": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 30, 33, 60, 61, 63, 64, 65, 68, 69, 85, 88, 89, 90, 91, 92, 95, 96, 99, 115, 120, 121, 124, 128, 129, 130, 133, 139, 140, 141, 142, 145, 147, 148, 149, 150, 151, 152, 154, 155, 157, 158, 160, 162, 163, 166, 167, 168, 170, 172, 175, 176, 178, 180, 181, 182, 185, 189, 193, 198, 201, 202, 203, 204, 205, 211, 216, 218, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 252, 253, 256, 275, 277, 278, 281, 286, 292, 293, 303, 304, 305, 306, 307, 308, 317, 318, 319, 323, 324, 328, 346, 348, 349, 350, 354, 362, 363, 366, 372, 373, 375, 376, 378, 381, 384, 387, 389, 390, 391, 393, 396, 398, 399, 417, 419, 425, 426, 427, 430, 432, 433, 437, 438, 439, 440, 441, 443, 447, 449, 451, 457, 463, 468, 476, 477, 480, 481, 495, 498, 499, 501, 503, 507, 508, 518, 521, 522, 524, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 542, 545, 546, 547, 548, 549, 550, 551, 553, 556, 557, 559, 560, 561, 569, 584, 585, 586, 591, 592, 593, 594, 595, 597, 599, 600, 601, 602, 604, 606, 607, 608, 609, 612, 613, 614, 618, 625, 626, 627, 630, 631, 632, 633, 634, 635, 641, 642, 644, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 672, 675, 679, 682, 692, 693, 696, 699, 708, 719, 721, 723, 729, 733, 734, 735, 736, 737, 742, 743, 744, 745, 746, 747, 769, 771, 772, 774, 777, 778, 786, 789, 798, 799, 801, 802, 826, 827, 833, 840, 841, 842, 844, 845, 846, 850, 852, 853, 854, 856, 857, 860, 863, 865, 875, 881, 886, 894, 895, 899, 919, 933, 936, 940, 948], "6": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 85, 88, 89, 90, 91, 93, 128, 131, 134, 135, 136, 137, 139, 140, 143, 144, 146, 147, 148, 149, 151, 152, 154, 156, 157, 158, 160, 162, 163, 165, 169, 170, 171, 172, 174, 177, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 215, 216, 217, 218, 219, 220, 222, 223, 230, 238, 239, 245, 252, 256, 259, 278, 297, 303, 315, 316, 319, 323, 343, 345, 348, 358, 367, 368, 374, 378, 380, 398, 399, 425, 431, 433, 434, 437, 440, 441, 442, 443, 444, 446, 447, 448, 451, 463, 468, 472, 477, 480, 481, 498, 501, 503, 515, 516, 518, 529, 530, 531, 535, 538, 545, 559, 569, 586, 587, 588, 589, 590, 591, 592, 593, 596, 597, 600, 601, 602, 604, 605, 607, 609, 610, 614, 618, 621, 623, 624, 625, 626, 627, 630, 631, 634, 635, 638, 639, 641, 642, 644, 645, 651, 659, 660, 664, 672, 693, 721, 727, 731, 732, 735, 737, 766, 778, 799, 833, 846, 850, 855, 857, 858, 859, 861, 865, 886, 890, 895, 899, 918, 948], "7": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 70, 131, 132, 133, 134, 135, 137, 139, 143, 144, 146, 151, 152, 154, 156, 158, 165, 169, 170, 171, 174, 177, 182, 184, 186, 188, 190, 191, 192, 194, 195, 197, 199, 200, 201, 202, 207, 208, 209, 210, 216, 217, 218, 219, 220, 245, 252, 256, 316, 323, 327, 344, 346, 347, 353, 355, 357, 364, 378, 380, 398, 406, 425, 437, 441, 447, 463, 501, 503, 518, 529, 530, 538, 545, 559, 569, 587, 588, 590, 592, 596, 600, 601, 602, 604, 605, 609, 619, 621, 623, 624, 634, 635, 639, 645, 664, 679, 742, 746, 752, 770, 776, 778, 827, 850, 860, 948], "float32": [1, 27, 63, 145, 207, 245, 664, 805, 826, 948], "lazi": [1, 63, 68, 70, 96, 109, 120, 124, 166, 179, 245, 259, 295, 519, 540, 569, 580, 605, 606, 643, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 664], "i16": [1, 63, 455, 569, 827, 928, 948], "i32": [1, 63, 88, 92, 120, 192, 245, 303, 333, 357, 455, 481, 562, 569, 624, 664, 752, 780, 826, 899, 948], "f32": [1, 63, 207, 245, 277, 433, 455, 535, 569, 664, 692, 826, 846, 948], "i64": [1, 14, 18, 61, 62, 63, 64, 68, 85, 87, 88, 89, 90, 91, 92, 96, 109, 121, 124, 128, 129, 130, 131, 134, 136, 137, 139, 140, 142, 143, 147, 148, 149, 150, 151, 152, 154, 156, 157, 158, 159, 161, 162, 165, 166, 169, 172, 174, 178, 179, 180, 181, 184, 185, 186, 187, 190, 192, 194, 195, 197, 198, 200, 201, 202, 204, 210, 213, 214, 215, 216, 217, 218, 220, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 235, 238, 239, 245, 252, 254, 258, 259, 276, 277, 278, 279, 280, 281, 283, 285, 287, 288, 289, 290, 291, 292, 293, 296, 297, 304, 306, 307, 308, 313, 314, 315, 316, 318, 319, 328, 329, 331, 335, 337, 339, 342, 349, 352, 363, 366, 368, 369, 370, 371, 373, 374, 378, 379, 380, 381, 384, 387, 389, 390, 391, 393, 395, 398, 399, 402, 404, 405, 417, 418, 419, 426, 427, 428, 429, 430, 431, 434, 435, 437, 438, 450, 452, 453, 455, 456, 457, 461, 462, 463, 482, 483, 496, 497, 498, 499, 500, 501, 502, 503, 507, 508, 509, 511, 514, 516, 518, 522, 523, 525, 529, 530, 531, 535, 536, 537, 538, 542, 545, 546, 549, 553, 555, 559, 560, 562, 569, 584, 586, 588, 589, 592, 593, 595, 596, 597, 599, 600, 601, 602, 604, 605, 606, 607, 609, 610, 611, 614, 616, 617, 618, 621, 622, 624, 625, 626, 630, 631, 633, 634, 635, 637, 638, 639, 642, 644, 646, 647, 648, 650, 651, 652, 653, 656, 659, 660, 664, 672, 673, 691, 692, 693, 696, 704, 705, 706, 708, 719, 723, 726, 729, 730, 731, 732, 735, 747, 748, 750, 757, 759, 762, 765, 769, 772, 775, 789, 791, 792, 798, 801, 809, 832, 849, 850, 853, 856, 860, 863, 866, 867, 870, 874, 875, 879, 880, 917, 919, 920, 921, 927, 934, 937, 940, 948], "register_series_namespac": [1, 61, 62, 63], "math": [1, 64, 727, 876, 922, 948], "mathshortcut": [1, 64], "": [1, 27, 29, 64, 69, 93, 98, 99, 110, 121, 134, 136, 138, 139, 150, 151, 157, 165, 166, 178, 180, 185, 186, 192, 198, 202, 206, 212, 214, 215, 216, 245, 281, 282, 289, 290, 293, 329, 350, 363, 394, 413, 418, 421, 422, 426, 427, 435, 439, 463, 477, 478, 480, 484, 486, 487, 489, 492, 495, 496, 497, 520, 523, 526, 531, 534, 536, 539, 540, 546, 549, 551, 558, 559, 569, 588, 589, 592, 599, 600, 606, 624, 631, 636, 637, 638, 648, 664, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 693, 696, 697, 699, 704, 705, 706, 708, 717, 720, 721, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 736, 737, 742, 748, 769, 770, 776, 783, 785, 786, 789, 790, 791, 792, 794, 797, 798, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 840, 841, 842, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 874, 875, 876, 877, 879, 880, 882, 885, 886, 888, 889, 890, 892, 893, 895, 896, 897, 898, 899, 900, 902, 903, 904, 907, 908, 909, 910, 913, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 932, 934, 935, 936, 937, 938, 939, 948], "_": [1, 60, 64, 93, 180, 206, 245, 488, 906, 926, 948], "squar": [1, 64, 227, 394, 464, 569, 648, 821, 881, 948], "cube": [1, 64, 429, 569], "s2": [1, 117, 145, 245, 672, 721, 737, 809, 833, 865, 931, 940, 948], "renam": [1, 88, 98, 99, 192, 222, 225, 245, 254, 405, 415, 497, 555, 558, 569, 624, 642, 646, 664, 827, 916, 927, 948], "n2": 1, "in_plac": [1, 156, 196, 220, 245, 847, 849, 873, 880, 948], "true": [1, 9, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 65, 67, 68, 70, 85, 86, 90, 95, 98, 99, 101, 102, 103, 107, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 125, 127, 129, 130, 133, 142, 145, 146, 148, 149, 150, 151, 157, 159, 160, 161, 163, 166, 167, 170, 175, 176, 178, 180, 181, 188, 189, 190, 192, 198, 204, 209, 212, 213, 214, 215, 216, 218, 222, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 253, 255, 256, 257, 258, 259, 269, 274, 291, 294, 299, 303, 312, 313, 314, 315, 316, 332, 347, 348, 353, 358, 359, 360, 361, 362, 375, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 396, 403, 423, 425, 435, 445, 450, 455, 460, 462, 463, 467, 469, 471, 475, 476, 481, 487, 488, 490, 492, 496, 497, 502, 507, 509, 512, 515, 517, 518, 519, 520, 526, 527, 538, 554, 556, 558, 562, 569, 584, 585, 586, 591, 593, 595, 599, 600, 605, 606, 608, 610, 614, 618, 624, 627, 628, 629, 631, 636, 637, 638, 642, 647, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 664, 670, 671, 672, 673, 683, 706, 709, 713, 717, 721, 722, 751, 770, 771, 776, 782, 784, 785, 786, 792, 796, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 821, 833, 841, 842, 848, 858, 865, 878, 880, 885, 887, 889, 893, 894, 899, 905, 906, 908, 910, 930, 931, 933, 939, 940, 948], "s3": [1, 101, 110, 114, 948], "n3": 1, "8": [1, 26, 27, 30, 31, 32, 33, 44, 57, 59, 60, 61, 63, 64, 68, 69, 93, 115, 119, 120, 128, 131, 132, 133, 134, 135, 136, 137, 139, 143, 144, 146, 149, 154, 156, 165, 169, 170, 171, 174, 182, 184, 186, 188, 190, 191, 192, 194, 195, 197, 199, 200, 201, 202, 207, 208, 209, 210, 216, 217, 219, 220, 222, 245, 256, 258, 270, 276, 277, 311, 313, 316, 317, 320, 321, 323, 380, 397, 419, 425, 429, 430, 437, 438, 441, 442, 444, 446, 448, 455, 461, 463, 478, 484, 492, 499, 503, 515, 521, 526, 527, 528, 530, 531, 535, 537, 542, 545, 546, 547, 548, 549, 550, 551, 556, 557, 559, 560, 561, 569, 587, 588, 589, 590, 592, 596, 602, 605, 609, 610, 618, 621, 623, 624, 634, 635, 639, 642, 645, 664, 691, 692, 733, 752, 799, 840, 844, 850, 852, 855, 857, 858, 859, 861, 896, 902, 910, 948], "9": [1, 26, 27, 30, 33, 60, 68, 128, 132, 145, 152, 154, 158, 192, 201, 216, 217, 220, 222, 238, 245, 252, 256, 258, 270, 276, 288, 291, 311, 313, 316, 320, 321, 323, 327, 344, 354, 355, 380, 385, 393, 397, 425, 437, 439, 441, 447, 457, 461, 503, 518, 524, 529, 530, 569, 601, 602, 604, 609, 624, 634, 639, 642, 659, 664, 691, 706, 746, 756, 758, 764, 770, 771, 776, 777, 809, 850, 852, 860, 862, 875, 948], "27": [1, 64, 238, 316, 333, 345, 357, 569, 659, 948], "16": [1, 29, 41, 54, 62, 69, 93, 115, 151, 152, 222, 245, 313, 316, 365, 380, 419, 429, 441, 481, 492, 518, 529, 534, 535, 538, 551, 556, 569, 600, 601, 627, 642, 664, 770, 776, 788, 840, 876, 899, 922, 948], "64": [1, 33, 40, 43, 56, 62, 64, 245, 419, 429, 569, 629, 664, 840, 948], "25": [1, 29, 64, 70, 92, 151, 152, 166, 218, 222, 245, 318, 333, 347, 353, 357, 508, 540, 569, 600, 601, 606, 612, 640, 642, 664, 736, 770, 776, 782, 799, 840, 844, 948], "125": [1, 29, 64, 245, 252, 569, 840, 948], "arg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 179, 209, 245, 428, 520, 539, 569, 617, 664, 673, 930, 931, 948], "ani": [2, 3, 4, 7, 27, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 66, 85, 86, 87, 88, 89, 90, 91, 98, 99, 101, 102, 103, 107, 109, 110, 111, 113, 118, 120, 121, 125, 128, 132, 136, 140, 142, 143, 145, 162, 163, 164, 178, 179, 188, 189, 204, 205, 208, 209, 214, 216, 245, 252, 256, 259, 273, 277, 303, 348, 359, 368, 373, 375, 376, 385, 396, 403, 404, 406, 415, 417, 419, 423, 425, 428, 437, 439, 451, 454, 481, 492, 498, 502, 508, 515, 518, 526, 537, 544, 556, 562, 569, 589, 595, 617, 637, 664, 672, 673, 688, 692, 737, 771, 791, 809, 820, 827, 850, 852, 864, 867, 899, 910, 920, 929, 930, 931, 948], "kwarg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 132, 179, 209, 245, 428, 569, 617, 664, 931, 948], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 569, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 948, 955], "method": [2, 3, 4, 7, 26, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 86, 98, 99, 102, 118, 136, 150, 158, 163, 176, 182, 188, 189, 214, 222, 237, 245, 252, 255, 256, 359, 366, 373, 375, 376, 380, 396, 403, 417, 419, 423, 425, 429, 432, 433, 440, 441, 442, 443, 444, 446, 447, 448, 498, 508, 510, 515, 526, 551, 552, 556, 563, 565, 569, 570, 571, 574, 575, 576, 577, 580, 589, 604, 619, 637, 642, 658, 664, 673, 789, 801, 845, 846, 857, 932, 942, 944, 948, 949, 952, 953, 954], "A": [4, 27, 29, 48, 67, 70, 92, 98, 99, 100, 107, 109, 145, 151, 166, 180, 189, 204, 216, 217, 218, 222, 245, 251, 295, 323, 328, 331, 335, 337, 339, 342, 349, 359, 366, 375, 376, 383, 386, 387, 389, 396, 403, 404, 405, 413, 423, 430, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 467, 468, 473, 474, 476, 482, 483, 495, 499, 524, 535, 539, 569, 600, 606, 621, 639, 642, 664, 710, 742, 747, 750, 757, 759, 762, 765, 772, 789, 852, 853, 854, 856, 859, 860, 861, 885, 886, 891, 892, 894, 900, 901, 910, 913, 948], "encod": [4, 59, 98, 99, 109, 299, 469, 713, 887], "set": [4, 5, 6, 7, 8, 9, 11, 13, 14, 17, 22, 23, 25, 27, 29, 31, 32, 61, 65, 70, 86, 88, 91, 93, 98, 99, 102, 103, 107, 109, 111, 112, 113, 116, 117, 119, 120, 121, 125, 127, 131, 136, 150, 153, 163, 166, 172, 190, 192, 197, 206, 213, 214, 216, 222, 245, 259, 290, 294, 295, 356, 377, 385, 406, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 456, 460, 461, 479, 485, 486, 491, 519, 554, 558, 562, 569, 587, 589, 591, 599, 605, 606, 610, 614, 624, 628, 629, 630, 637, 642, 645, 648, 664, 672, 673, 705, 709, 710, 779, 797, 809, 827, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 867, 874, 878, 879, 897, 903, 904, 909, 930, 948], "string": [4, 6, 8, 11, 12, 13, 17, 27, 29, 31, 32, 36, 51, 59, 70, 92, 98, 99, 109, 118, 119, 121, 123, 145, 149, 150, 151, 152, 166, 192, 198, 207, 212, 216, 218, 222, 225, 245, 252, 282, 301, 304, 343, 347, 353, 365, 371, 381, 406, 426, 440, 441, 442, 443, 444, 446, 447, 448, 463, 466, 467, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 520, 522, 524, 525, 539, 546, 549, 558, 569, 591, 598, 599, 600, 601, 606, 624, 631, 636, 642, 645, 646, 664, 697, 715, 719, 766, 770, 776, 788, 802, 883, 884, 885, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 928, 948], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 598, 620, 664], "activ": [5, 9, 15, 16, 18, 19, 20, 21, 24, 277, 692], "decim": [5, 27, 29, 245, 449, 569, 862, 948], "temporari": 5, "remov": [5, 7, 134, 217, 245, 259, 363, 365, 479, 485, 491, 492, 536, 551, 556, 569, 588, 639, 664, 788, 897, 903, 909, 948], "later": 5, "onc": [5, 98, 99, 102, 127, 128, 190, 225, 245, 259, 450, 569, 583, 646, 664, 673, 863, 948], "stabil": 5, "happen": 5, "being": [5, 69, 98, 99, 109, 114, 216, 217, 245, 259, 317, 347, 440, 441, 442, 443, 444, 446, 447, 448, 535, 569, 639, 664, 733, 770, 799, 844, 948], "consid": [5, 69, 98, 99, 109, 114, 128, 136, 146, 172, 214, 216, 217, 245, 259, 306, 307, 308, 317, 347, 440, 441, 442, 443, 444, 446, 447, 448, 529, 538, 569, 589, 602, 609, 614, 637, 639, 664, 673, 723, 724, 725, 733, 770, 799, 844, 865, 866, 867, 948], "break": [5, 69, 114, 216, 217, 245, 259, 317, 347, 440, 441, 442, 443, 444, 446, 447, 448, 569, 639, 664, 733, 770, 799, 844, 948], "chang": [5, 25, 60, 69, 98, 99, 114, 216, 217, 218, 245, 259, 317, 318, 347, 427, 440, 441, 442, 443, 444, 446, 447, 448, 569, 639, 664, 733, 769, 770, 799, 840, 844, 873, 948], "current": [5, 8, 25, 86, 92, 100, 127, 129, 130, 245, 295, 347, 427, 569, 580, 584, 585, 664, 722, 726, 770, 840, 948], "alpha": [5, 67, 259, 360, 361, 362, 569, 586, 591, 593, 618, 627, 664, 784, 785, 786, 948], "stage": [5, 259, 569], "cfg": [6, 7, 8, 14, 125, 192, 222, 245, 624, 642, 664], "previous": 6, "save": [6, 580], "share": [6, 51, 138, 245, 783, 948], "option": [6, 7, 8, 25, 29, 37, 60, 70, 98, 101, 102, 103, 107, 110, 111, 113, 115, 118, 119, 120, 121, 166, 172, 204, 213, 245, 394, 439, 440, 441, 442, 443, 444, 446, 447, 448, 460, 486, 544, 558, 562, 569, 580, 605, 606, 614, 664, 817, 821, 852, 853, 854, 855, 856, 857, 859, 860, 861, 867, 878, 904, 927, 948], "paramet": [6, 10, 11, 12, 13, 14, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 38, 45, 48, 50, 52, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 124, 127, 128, 129, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 163, 164, 165, 166, 168, 170, 172, 173, 175, 176, 178, 179, 180, 182, 184, 185, 186, 188, 189, 190, 192, 194, 195, 197, 198, 199, 200, 201, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 227, 230, 237, 239, 245, 252, 254, 256, 258, 259, 268, 273, 274, 275, 276, 277, 280, 281, 282, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 329, 343, 346, 347, 352, 353, 356, 358, 359, 360, 361, 362, 363, 366, 368, 369, 373, 374, 375, 376, 377, 378, 380, 381, 385, 394, 396, 398, 400, 403, 404, 405, 406, 417, 419, 423, 425, 426, 427, 428, 429, 432, 433, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 501, 502, 507, 508, 509, 512, 513, 514, 515, 516, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 538, 539, 540, 542, 543, 544, 545, 546, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 569, 584, 586, 588, 589, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 605, 606, 609, 610, 614, 615, 617, 618, 619, 620, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 648, 651, 658, 660, 664, 669, 672, 673, 682, 688, 689, 690, 691, 692, 695, 696, 697, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 722, 723, 724, 725, 729, 730, 731, 732, 733, 734, 736, 737, 741, 742, 743, 748, 766, 769, 770, 775, 776, 779, 782, 783, 784, 785, 786, 789, 790, 791, 792, 797, 798, 799, 801, 802, 816, 817, 821, 823, 827, 840, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 870, 871, 874, 878, 879, 880, 882, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 916, 919, 920, 926, 927, 928, 929, 930, 931, 933, 934, 937, 938, 939, 940, 948], "json": [6, 8, 31, 32, 105, 106, 112, 245, 475, 476, 580, 598, 620, 645, 664, 893, 894], "produc": [6, 120, 121, 275, 412, 545, 610, 664, 690], "reset": [7, 125], "default": [7, 12, 25, 26, 27, 29, 30, 31, 32, 33, 65, 85, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 107, 109, 118, 119, 120, 121, 124, 136, 138, 150, 152, 153, 163, 166, 172, 178, 180, 188, 189, 190, 199, 206, 214, 216, 219, 223, 245, 290, 294, 295, 304, 358, 360, 361, 362, 377, 400, 406, 421, 422, 427, 433, 450, 456, 465, 473, 479, 481, 485, 486, 491, 492, 513, 519, 526, 540, 544, 551, 554, 556, 557, 558, 561, 569, 589, 591, 599, 601, 606, 614, 629, 632, 637, 640, 645, 664, 705, 709, 710, 719, 782, 783, 784, 785, 786, 797, 827, 836, 837, 840, 846, 863, 874, 882, 891, 897, 899, 903, 904, 909, 938, 948], "state": [7, 67, 78, 529, 580, 586, 591, 593, 618, 627, 664], "note": [7, 17, 29, 37, 60, 70, 85, 86, 87, 89, 91, 92, 96, 98, 100, 101, 107, 109, 110, 119, 120, 121, 124, 125, 127, 128, 132, 141, 151, 152, 163, 165, 166, 176, 179, 188, 189, 205, 208, 213, 217, 218, 222, 245, 259, 277, 294, 315, 316, 320, 321, 343, 347, 353, 381, 387, 389, 440, 441, 442, 443, 444, 446, 447, 448, 460, 477, 479, 480, 485, 491, 492, 500, 508, 529, 538, 553, 562, 569, 586, 593, 594, 600, 601, 602, 606, 609, 621, 627, 639, 642, 664, 673, 692, 709, 731, 732, 766, 776, 866, 867, 873, 878, 895, 897, 898, 903, 909, 918, 948], "oper": [7, 29, 51, 68, 75, 76, 85, 87, 88, 89, 90, 91, 98, 107, 128, 140, 145, 150, 157, 167, 173, 176, 178, 179, 183, 203, 208, 209, 213, 216, 224, 225, 245, 252, 253, 256, 295, 312, 313, 314, 315, 316, 317, 359, 373, 375, 376, 393, 396, 403, 415, 417, 419, 423, 425, 429, 435, 498, 508, 515, 516, 517, 524, 525, 535, 569, 593, 599, 602, 605, 609, 614, 615, 646, 664, 672, 729, 730, 731, 732, 733, 848, 925, 929, 930, 931, 939, 948], "from": [7, 27, 29, 60, 68, 70, 85, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 133, 134, 138, 140, 149, 151, 152, 163, 164, 166, 167, 172, 184, 188, 190, 192, 213, 214, 216, 218, 245, 312, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 363, 380, 394, 421, 422, 427, 450, 463, 473, 475, 481, 492, 510, 512, 522, 532, 533, 534, 544, 556, 557, 568, 569, 588, 593, 598, 600, 601, 606, 614, 620, 621, 624, 637, 643, 664, 672, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 783, 817, 821, 836, 837, 838, 840, 863, 891, 893, 899, 937, 940, 948], "environ": [7, 25], "local": [7, 101, 110, 744, 745, 774, 841, 842, 948], "non": [7, 29, 37, 60, 90, 164, 172, 192, 217, 222, 245, 381, 427, 439, 440, 441, 442, 443, 444, 446, 447, 448, 468, 474, 522, 524, 525, 546, 549, 558, 569, 614, 624, 639, 642, 664, 710, 802, 840, 852, 853, 854, 855, 856, 857, 859, 860, 861, 886, 892, 930, 948], "env": 7, "back": [7, 60, 140, 209, 245, 426, 569, 672, 931, 948], "valu": [7, 10, 11, 25, 27, 29, 31, 45, 46, 58, 60, 68, 69, 88, 90, 98, 99, 100, 109, 114, 116, 117, 118, 119, 120, 121, 123, 125, 127, 128, 136, 140, 141, 142, 146, 149, 151, 152, 153, 154, 158, 163, 168, 169, 170, 171, 172, 174, 176, 178, 180, 181, 182, 184, 188, 189, 190, 194, 195, 198, 199, 200, 201, 204, 205, 209, 212, 216, 217, 218, 219, 228, 229, 231, 232, 233, 235, 236, 245, 251, 252, 253, 255, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 275, 276, 279, 280, 281, 283, 285, 286, 287, 289, 292, 293, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 316, 317, 318, 320, 321, 323, 327, 340, 344, 354, 359, 360, 361, 362, 364, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 386, 387, 389, 390, 391, 392, 395, 396, 397, 401, 402, 403, 404, 406, 407, 408, 409, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 429, 432, 433, 436, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 452, 453, 454, 457, 458, 459, 460, 462, 463, 464, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 482, 483, 486, 488, 489, 490, 495, 498, 500, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 515, 517, 522, 525, 527, 529, 530, 531, 537, 538, 544, 546, 547, 548, 549, 550, 553, 554, 559, 562, 569, 589, 594, 595, 600, 601, 603, 604, 611, 612, 613, 614, 616, 619, 621, 625, 626, 631, 632, 633, 636, 639, 640, 645, 649, 650, 652, 653, 654, 656, 657, 664, 668, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 690, 691, 694, 695, 696, 698, 700, 701, 702, 704, 708, 711, 713, 714, 715, 716, 719, 720, 723, 724, 725, 727, 728, 733, 734, 735, 736, 738, 739, 742, 746, 763, 767, 777, 783, 784, 785, 786, 789, 790, 791, 794, 796, 797, 798, 799, 801, 802, 804, 806, 807, 809, 810, 811, 812, 813, 814, 818, 823, 827, 828, 829, 831, 832, 834, 836, 837, 838, 839, 840, 843, 844, 845, 846, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 865, 866, 867, 870, 871, 875, 876, 877, 878, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 898, 900, 901, 904, 906, 907, 908, 913, 918, 919, 920, 921, 922, 923, 931, 932, 935, 937, 939, 940, 948], "exampl": [7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 99, 100, 101, 102, 109, 110, 114, 115, 116, 117, 118, 119, 120, 121, 124, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 534, 535, 536, 537, 538, 539, 540, 542, 544, 545, 546, 547, 548, 549, 550, 551, 553, 555, 556, 557, 558, 559, 560, 561, 562, 569, 580, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 692, 693, 696, 697, 699, 704, 705, 706, 708, 710, 717, 719, 720, 721, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 789, 790, 791, 792, 794, 797, 798, 799, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 822, 826, 827, 828, 829, 830, 831, 832, 833, 834, 840, 841, 842, 844, 845, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 870, 874, 875, 876, 877, 879, 880, 882, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 917, 918, 919, 920, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 939, 940, 948], "bool": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 60, 65, 67, 68, 85, 86, 90, 98, 99, 103, 107, 109, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 123, 127, 129, 130, 142, 143, 145, 146, 148, 149, 150, 151, 156, 157, 159, 160, 161, 166, 178, 180, 190, 196, 198, 204, 209, 212, 213, 214, 215, 218, 220, 222, 229, 231, 232, 235, 245, 255, 256, 257, 258, 259, 268, 274, 275, 277, 291, 294, 296, 299, 303, 312, 313, 314, 315, 316, 317, 332, 348, 358, 359, 360, 361, 362, 375, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 396, 403, 404, 410, 411, 423, 425, 433, 435, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 452, 454, 455, 460, 462, 463, 467, 469, 471, 481, 482, 483, 487, 488, 490, 492, 497, 507, 509, 512, 515, 517, 518, 519, 520, 526, 529, 544, 554, 556, 558, 569, 584, 586, 591, 593, 595, 596, 599, 600, 605, 606, 610, 614, 618, 627, 628, 629, 631, 636, 637, 638, 642, 650, 652, 653, 656, 664, 670, 671, 672, 673, 682, 689, 690, 692, 706, 709, 711, 713, 717, 722, 729, 730, 731, 732, 733, 734, 751, 771, 782, 784, 785, 786, 792, 796, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 841, 842, 844, 846, 847, 848, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 865, 867, 868, 873, 878, 880, 885, 887, 889, 899, 900, 901, 905, 906, 908, 910, 929, 930, 931, 933, 934, 937, 939, 948], "ascii": [9, 17, 478, 480, 484, 495, 896, 898, 902, 913], "charact": [9, 11, 17, 23, 27, 98, 99, 109, 245, 343, 472, 477, 478, 479, 484, 485, 487, 488, 491, 495, 618, 664, 766, 890, 895, 896, 897, 902, 903, 905, 906, 909, 913], "displai": [9, 10, 11, 14, 16, 20, 22, 29, 245], "tabl": [9, 13, 14, 16, 17, 18, 19, 20, 22, 23, 28, 29, 50, 85, 92, 98, 99, 101, 109, 110, 180, 203, 209, 216, 217, 245, 639, 664, 931, 948], "outlin": 9, "fals": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 29, 31, 33, 60, 65, 67, 70, 86, 90, 98, 99, 102, 103, 107, 109, 112, 113, 116, 117, 118, 119, 120, 121, 127, 129, 130, 133, 145, 146, 148, 149, 150, 151, 156, 157, 159, 160, 161, 163, 166, 167, 170, 175, 176, 178, 180, 181, 188, 189, 190, 196, 198, 204, 209, 212, 213, 214, 218, 220, 222, 228, 229, 231, 232, 233, 235, 238, 245, 255, 256, 257, 259, 268, 274, 277, 291, 294, 296, 312, 313, 314, 315, 316, 317, 332, 348, 358, 359, 360, 361, 362, 375, 376, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 396, 403, 404, 423, 425, 433, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 452, 455, 460, 462, 463, 467, 471, 475, 481, 482, 483, 487, 488, 490, 492, 507, 509, 512, 515, 517, 519, 520, 526, 529, 544, 554, 556, 558, 562, 569, 584, 585, 586, 591, 593, 599, 600, 605, 606, 608, 610, 618, 627, 628, 629, 631, 636, 637, 642, 649, 650, 652, 653, 654, 656, 659, 664, 672, 682, 692, 706, 709, 711, 717, 721, 722, 729, 730, 731, 732, 733, 734, 751, 771, 782, 784, 785, 786, 792, 802, 803, 804, 806, 809, 810, 811, 812, 813, 814, 816, 817, 818, 821, 833, 841, 842, 844, 846, 847, 849, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 865, 868, 873, 878, 880, 885, 889, 893, 899, 900, 901, 905, 906, 908, 910, 929, 930, 931, 933, 934, 937, 939, 940, 948], "revert": 9, "abc": [9, 15, 16, 18, 19, 20, 21, 22, 252, 482, 569, 900], "xyz": [9, 15, 16, 18, 19, 20, 21, 22, 252, 468, 474, 569, 886, 892, 927, 948], "f64": [9, 13, 15, 16, 18, 19, 20, 21, 22, 60, 62, 64, 69, 88, 114, 120, 129, 130, 132, 133, 134, 136, 137, 141, 142, 145, 148, 149, 150, 157, 165, 166, 170, 171, 181, 182, 197, 198, 199, 219, 222, 225, 229, 231, 232, 233, 234, 235, 237, 238, 245, 251, 260, 261, 262, 263, 264, 265, 286, 303, 305, 309, 310, 317, 320, 321, 348, 358, 359, 360, 361, 362, 363, 364, 372, 373, 375, 376, 380, 387, 389, 390, 391, 393, 394, 396, 400, 401, 403, 407, 408, 409, 416, 419, 421, 422, 423, 427, 429, 432, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 458, 459, 460, 464, 465, 504, 505, 508, 513, 521, 522, 524, 526, 528, 536, 547, 548, 551, 556, 557, 561, 569, 584, 588, 589, 594, 595, 599, 605, 606, 612, 613, 619, 631, 632, 640, 642, 643, 646, 650, 652, 653, 654, 655, 656, 658, 659, 664, 674, 675, 676, 677, 678, 679, 720, 727, 728, 733, 734, 735, 771, 785, 786, 790, 794, 799, 840, 844, 852, 854, 855, 857, 858, 859, 861, 862, 876, 877, 881, 922, 923, 936, 948], "fmt": [10, 350, 379, 492, 539, 569, 603, 664, 773, 910], "floatfmt": 10, "mix": [10, 492, 735, 910, 948], "control": [10, 29, 119, 245, 591, 664], "how": [10, 29, 51, 68, 88, 91, 100, 136, 165, 216, 217, 245, 275, 276, 304, 318, 380, 426, 436, 562, 569, 589, 605, 639, 664, 690, 691, 719, 736, 948], "float": [10, 29, 39, 40, 69, 114, 116, 117, 118, 120, 121, 138, 141, 166, 182, 190, 195, 237, 245, 274, 275, 305, 306, 307, 308, 320, 321, 348, 358, 359, 360, 361, 362, 367, 372, 375, 376, 380, 383, 386, 387, 389, 390, 391, 396, 400, 403, 407, 416, 421, 422, 423, 429, 432, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 454, 508, 521, 531, 547, 548, 552, 554, 557, 559, 561, 569, 594, 606, 619, 626, 627, 658, 664, 689, 690, 717, 720, 723, 724, 725, 734, 737, 771, 782, 783, 784, 785, 786, 790, 794, 799, 808, 821, 824, 829, 830, 836, 837, 843, 844, 845, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 866, 867, 878, 882, 918, 938, 948], "point": [10, 29, 39, 40, 120, 121, 141, 151, 167, 245, 305, 320, 321, 348, 367, 372, 387, 389, 449, 450, 569, 594, 600, 610, 621, 664, 720, 771, 790, 794, 808, 862, 863, 948], "full": [10, 36, 66, 98, 99, 101, 109, 110, 610, 664], "format": [10, 13, 17, 27, 29, 92, 97, 98, 99, 109, 114, 139, 149, 163, 172, 189, 205, 243, 245, 347, 350, 481, 492, 517, 592, 598, 614, 645, 664, 773, 899, 910, 947], "number": [10, 11, 12, 14, 22, 23, 27, 29, 33, 60, 79, 85, 87, 89, 91, 95, 96, 98, 99, 102, 109, 112, 119, 120, 122, 124, 129, 138, 139, 141, 142, 154, 163, 164, 167, 168, 175, 176, 190, 194, 195, 199, 201, 212, 216, 219, 228, 230, 239, 245, 269, 276, 281, 289, 293, 295, 297, 311, 317, 318, 330, 333, 338, 340, 348, 354, 355, 357, 360, 361, 362, 366, 368, 374, 378, 387, 389, 397, 398, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 453, 454, 456, 465, 477, 480, 482, 488, 489, 501, 507, 513, 526, 527, 542, 551, 556, 557, 560, 561, 569, 584, 592, 593, 594, 595, 602, 609, 618, 625, 626, 629, 632, 634, 636, 640, 649, 651, 660, 664, 691, 696, 704, 708, 710, 722, 733, 736, 749, 752, 761, 763, 771, 777, 778, 780, 783, 784, 785, 786, 789, 791, 798, 808, 823, 833, 834, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 870, 871, 874, 882, 895, 898, 900, 906, 907, 919, 933, 938, 948], "int": [11, 12, 14, 22, 23, 27, 29, 33, 37, 62, 88, 91, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 124, 128, 129, 138, 141, 142, 144, 153, 154, 155, 157, 163, 164, 166, 168, 169, 170, 174, 175, 176, 186, 188, 190, 193, 194, 195, 197, 199, 200, 201, 202, 207, 210, 212, 216, 219, 221, 223, 230, 239, 245, 252, 274, 275, 276, 280, 281, 289, 290, 293, 294, 295, 297, 306, 307, 308, 317, 318, 360, 361, 362, 366, 367, 368, 374, 377, 378, 398, 425, 427, 429, 433, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 456, 461, 465, 473, 478, 481, 482, 484, 486, 488, 489, 495, 501, 502, 503, 507, 513, 515, 519, 526, 527, 531, 532, 533, 534, 540, 542, 548, 550, 551, 554, 556, 557, 558, 559, 560, 561, 569, 584, 593, 594, 595, 602, 606, 609, 618, 625, 626, 629, 630, 632, 634, 635, 636, 640, 641, 644, 651, 660, 664, 680, 681, 689, 690, 691, 695, 696, 704, 705, 708, 709, 710, 717, 721, 722, 723, 724, 725, 733, 736, 783, 784, 785, 786, 789, 790, 791, 797, 798, 799, 822, 823, 829, 833, 834, 836, 837, 838, 839, 840, 843, 846, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 867, 870, 871, 874, 879, 882, 891, 896, 899, 900, 902, 904, 906, 907, 913, 918, 919, 920, 921, 928, 933, 938, 948], "size": [12, 33, 98, 99, 119, 120, 121, 138, 151, 216, 245, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 519, 569, 600, 629, 664, 783, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 948], "overwrit": [12, 28, 85, 87, 88, 89, 91, 98, 99, 109, 127, 245, 593, 664], "chunk": [12, 33, 95, 98, 99, 107, 109, 111, 112, 113, 120, 121, 140, 164, 175, 245, 258, 434, 569, 629, 664, 672, 721, 795, 833, 847, 925, 948], "stream": [12, 30, 67, 150, 214, 245, 586, 591, 593, 599, 610, 614, 618, 627, 628, 629, 637, 664], "engin": [12, 28, 100, 128, 150, 214, 227, 245, 599, 610, 614, 637, 648, 664, 673, 948], "By": [12, 98, 99, 102, 109, 166, 199, 219, 245, 465, 481, 513, 526, 544, 551, 556, 557, 561, 569, 606, 632, 640, 664, 882, 899, 930, 938, 948], "determin": [12, 29, 58, 60, 68, 88, 91, 98, 99, 102, 107, 109, 113, 128, 145, 151, 152, 163, 164, 213, 218, 245, 295, 304, 332, 412, 436, 440, 441, 442, 443, 444, 446, 447, 448, 460, 569, 600, 601, 664, 710, 719, 751, 799, 878, 948], "schema": [12, 61, 62, 63, 68, 80, 81, 83, 85, 87, 88, 89, 91, 92, 98, 99, 104, 108, 109, 112, 119, 120, 128, 129, 130, 137, 138, 173, 176, 245, 295, 412, 515, 558, 569, 584, 585, 590, 610, 615, 645, 648, 664, 726, 948], "thread": [12, 27, 95, 98, 99, 100, 122, 245, 259, 277, 569, 692], "pool": [12, 122], "For": [12, 29, 100, 101, 102, 110, 140, 152, 165, 166, 227, 245, 295, 303, 360, 361, 362, 413, 435, 460, 529, 538, 539, 569, 601, 606, 648, 664, 672, 784, 785, 786, 848, 878, 930, 948], "some": [12, 25, 29, 88, 98, 99, 109, 136, 245, 589, 664, 809, 948], "dataset": [12, 98, 99, 109, 114, 394, 569, 580, 610, 664, 821, 948], "esp": 12, "when": [12, 14, 16, 20, 29, 33, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 98, 99, 100, 103, 107, 109, 110, 111, 112, 120, 121, 123, 128, 137, 138, 140, 142, 145, 151, 179, 188, 192, 198, 206, 214, 245, 306, 307, 308, 360, 361, 362, 368, 404, 406, 413, 462, 463, 479, 485, 491, 492, 520, 529, 538, 569, 595, 600, 610, 624, 629, 631, 637, 664, 672, 723, 724, 725, 783, 784, 785, 786, 791, 827, 866, 867, 897, 903, 909, 926, 948], "have": [12, 25, 29, 60, 86, 98, 99, 102, 120, 121, 123, 140, 163, 183, 189, 205, 245, 317, 360, 361, 362, 413, 433, 492, 569, 614, 627, 644, 664, 672, 733, 769, 784, 785, 786, 796, 846, 910, 948], "larg": 12, "element": [12, 22, 96, 121, 124, 199, 212, 219, 245, 259, 260, 261, 262, 263, 264, 265, 275, 277, 278, 309, 310, 312, 313, 314, 315, 316, 317, 364, 377, 385, 401, 427, 433, 436, 451, 457, 458, 459, 464, 465, 488, 489, 504, 505, 507, 513, 526, 551, 556, 557, 561, 569, 632, 636, 640, 664, 673, 674, 675, 676, 677, 678, 679, 690, 692, 693, 722, 727, 728, 729, 730, 731, 732, 733, 787, 792, 798, 809, 823, 825, 840, 846, 864, 875, 876, 877, 881, 882, 906, 907, 919, 922, 923, 928, 933, 934, 938, 948], "too": 12, "optimist": 12, "lead": [12, 92, 114, 245, 452, 479, 491, 495, 502, 512, 526, 556, 569, 610, 648, 664, 868, 897, 909, 913, 948], "out": [12, 92, 115, 152, 245, 280, 294, 299, 383, 386, 467, 469, 562, 569, 601, 628, 629, 664, 695, 709, 713, 885, 887], "memori": [12, 33, 68, 85, 86, 89, 90, 91, 98, 99, 103, 107, 109, 111, 112, 113, 127, 128, 140, 196, 227, 245, 434, 455, 569, 629, 648, 664, 672, 673, 847, 872, 873, 948], "error": [12, 71, 98, 99, 109, 188, 245, 282, 294, 299, 303, 393, 467, 469, 475, 476, 492, 569, 648, 697, 709, 713, 717, 885, 887, 893, 894, 910, 948], "row": [12, 17, 22, 27, 29, 31, 33, 60, 61, 63, 77, 79, 84, 88, 89, 91, 92, 98, 99, 102, 103, 107, 109, 111, 112, 113, 116, 119, 120, 128, 129, 136, 140, 143, 145, 149, 151, 153, 154, 159, 161, 163, 164, 166, 167, 168, 172, 176, 190, 197, 201, 202, 205, 207, 212, 214, 216, 217, 223, 227, 230, 239, 245, 259, 269, 278, 365, 378, 398, 427, 437, 461, 463, 472, 501, 520, 529, 530, 538, 542, 546, 549, 553, 560, 562, 569, 584, 586, 589, 593, 596, 597, 600, 602, 606, 607, 609, 610, 614, 629, 630, 634, 635, 636, 637, 639, 644, 648, 651, 660, 664, 672, 693, 788, 798, 840, 850, 879, 890, 919, 948], "per": [12, 27, 29, 119, 120, 149, 176, 177, 198, 212, 234, 236, 237, 245, 259, 277, 280, 294, 463, 520, 569, 631, 636, 655, 657, 658, 664, 692, 695, 709], "everi": [12, 98, 99, 109, 151, 202, 205, 218, 245, 271, 272, 276, 278, 280, 281, 290, 293, 312, 313, 314, 315, 316, 317, 347, 353, 365, 472, 503, 529, 530, 569, 593, 600, 635, 664, 686, 687, 691, 693, 695, 696, 705, 708, 729, 730, 731, 732, 733, 770, 776, 788, 890, 921, 948], "process": [12, 27, 245, 628, 629, 664], "liter": [13, 17, 65, 70, 102, 121, 149, 163, 169, 170, 174, 175, 178, 188, 189, 192, 200, 204, 222, 245, 255, 257, 323, 359, 366, 373, 375, 376, 381, 393, 396, 403, 417, 419, 423, 429, 434, 467, 482, 483, 498, 508, 519, 522, 524, 525, 532, 533, 544, 546, 549, 554, 558, 569, 595, 624, 642, 664, 670, 671, 742, 789, 802, 866, 867, 885, 900, 901, 948], "left": [13, 70, 116, 117, 151, 152, 165, 166, 217, 245, 360, 361, 362, 380, 381, 440, 441, 442, 443, 444, 446, 447, 448, 451, 478, 495, 506, 522, 529, 530, 538, 553, 562, 569, 600, 601, 605, 606, 639, 664, 784, 785, 786, 802, 864, 896, 913, 932, 948], "center": [13, 29, 245, 360, 361, 362, 439, 440, 441, 442, 443, 444, 446, 447, 448, 569, 784, 785, 786, 852, 853, 854, 855, 856, 857, 859, 860, 861, 948], "right": [13, 15, 29, 70, 98, 99, 116, 117, 151, 152, 165, 166, 245, 360, 361, 362, 381, 440, 441, 442, 443, 444, 446, 447, 448, 451, 460, 484, 522, 569, 600, 601, 605, 606, 664, 784, 785, 786, 802, 864, 878, 902, 948], "cell": 13, "align": [13, 29, 60, 245, 495, 913], "keyerror": [13, 17], "recognis": [13, 17, 118], "column_abc": 13, "column_xyz": 13, "visibl": [14, 138, 245, 783, 948], "eg": [14, 22, 29, 245, 347, 492, 508, 569], "rang": [14, 29, 69, 70, 100, 138, 151, 164, 245, 327, 340, 344, 345, 347, 353, 354, 380, 519, 524, 532, 533, 569, 600, 664, 734, 746, 763, 767, 768, 770, 776, 777, 783, 840, 844, 948], "100": [14, 29, 88, 91, 98, 99, 109, 112, 245, 495, 519, 664, 853, 854, 856, 948], "98": [14, 157, 245, 462, 502, 507, 569], "99": [14, 29, 141, 142, 157, 160, 245, 253, 366, 368, 462, 502, 507, 569, 594, 595, 664, 782, 789, 948], "10": [14, 26, 27, 29, 30, 33, 60, 68, 69, 70, 92, 100, 109, 120, 121, 130, 140, 148, 151, 152, 154, 156, 157, 158, 175, 179, 181, 185, 186, 192, 201, 222, 225, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 258, 266, 267, 268, 270, 276, 281, 289, 290, 293, 306, 311, 313, 316, 318, 320, 321, 323, 347, 353, 356, 377, 378, 380, 385, 393, 397, 398, 401, 427, 441, 461, 495, 501, 515, 522, 529, 535, 538, 540, 542, 545, 551, 556, 560, 569, 586, 600, 601, 602, 604, 609, 617, 618, 624, 629, 633, 634, 642, 646, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 664, 673, 691, 696, 704, 705, 708, 723, 734, 736, 742, 776, 779, 782, 798, 809, 823, 825, 840, 866, 867, 919, 948], "95": [14, 253, 569], "96": [14, 253, 569], "97": [14, 157, 245, 253, 569], "move": [15, 360, 361, 362, 440, 441, 443, 447, 569, 784, 785, 786, 853, 854, 856, 860, 948], "inlin": 15, "parenthes": 15, "print": [16, 99, 115, 137, 149, 150, 164, 167, 207, 224, 245, 379, 569, 603, 664, 809, 852, 928, 948], "below": [16, 29, 101, 110, 136, 245, 380, 562, 569, 589, 664], "ascii_ful": 17, "ascii_full_condens": 17, "ascii_no_bord": 17, "ascii_borders_onli": 17, "ascii_borders_only_condens": 17, "ascii_horizontal_onli": 17, "ascii_markdown": 17, "utf8_ful": [17, 60, 92], "utf8_full_condens": [17, 92], "utf8_no_bord": 17, "utf8_borders_onli": 17, "utf8_horizontal_onli": 17, "noth": [17, 468, 473, 474, 476, 886, 891, 892, 894], "none": [17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 46, 50, 60, 69, 70, 85, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 128, 129, 133, 136, 141, 142, 149, 151, 152, 153, 158, 165, 166, 167, 170, 172, 176, 177, 180, 188, 190, 192, 195, 197, 198, 204, 206, 209, 213, 214, 215, 216, 217, 218, 222, 225, 245, 254, 258, 259, 270, 280, 290, 295, 297, 306, 307, 308, 311, 313, 316, 320, 321, 346, 347, 353, 360, 361, 362, 363, 366, 367, 368, 374, 377, 380, 381, 387, 388, 389, 390, 391, 397, 404, 406, 424, 427, 433, 434, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 454, 455, 456, 457, 461, 462, 466, 467, 470, 471, 475, 476, 477, 478, 479, 480, 481, 484, 485, 486, 488, 489, 490, 491, 492, 495, 496, 497, 506, 516, 518, 519, 522, 525, 527, 533, 534, 536, 537, 544, 545, 546, 549, 554, 555, 557, 558, 561, 562, 569, 584, 585, 589, 594, 595, 600, 601, 604, 605, 606, 608, 610, 614, 624, 626, 627, 628, 629, 630, 631, 637, 638, 639, 642, 643, 645, 646, 648, 664, 673, 680, 681, 695, 705, 710, 722, 723, 734, 735, 737, 753, 754, 755, 760, 769, 770, 776, 781, 782, 784, 785, 786, 789, 790, 791, 793, 796, 797, 799, 800, 801, 802, 813, 814, 817, 821, 827, 828, 829, 830, 831, 835, 844, 845, 846, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 869, 871, 874, 875, 878, 879, 882, 884, 885, 888, 889, 893, 894, 895, 896, 897, 898, 899, 902, 903, 904, 906, 907, 908, 909, 910, 924, 927, 928, 931, 932, 938, 939, 948], "rounded_corn": 17, "style": [17, 29, 180, 245], "border": 17, "line": [17, 29, 98, 99, 102, 109, 149, 159, 161, 245], "includ": [17, 25, 27, 29, 66, 101, 110, 120, 138, 151, 212, 213, 216, 245, 348, 381, 487, 488, 529, 569, 600, 636, 664, 771, 783, 802, 905, 906, 939, 948], "divid": [17, 347, 353, 360, 361, 362, 394, 569, 770, 776, 784, 785, 786, 821, 948], "same": [17, 29, 51, 60, 67, 103, 109, 119, 128, 134, 150, 198, 214, 222, 225, 227, 245, 251, 258, 365, 426, 439, 440, 441, 442, 443, 444, 446, 447, 448, 463, 497, 523, 569, 588, 599, 610, 631, 637, 642, 646, 648, 664, 668, 672, 673, 742, 788, 852, 853, 854, 855, 856, 857, 859, 860, 861, 940, 948], "dens": [17, 149, 245, 433, 569, 846, 948], "space": 17, "horizont": [17, 68, 145, 156, 216, 245, 524, 525, 529, 530, 531, 535, 538, 546, 549, 553, 559], "markdown": 17, "compat": [17, 29, 33, 100, 245, 467, 468, 473, 474, 482, 483, 629, 664], "No": 17, "appli": [17, 27, 29, 68, 109, 118, 120, 121, 145, 179, 245, 327, 330, 332, 333, 334, 336, 338, 340, 341, 344, 345, 348, 354, 355, 357, 361, 362, 404, 428, 439, 440, 441, 443, 447, 492, 515, 516, 519, 529, 530, 538, 545, 553, 569, 602, 609, 610, 617, 664, 744, 745, 746, 749, 751, 752, 756, 758, 761, 763, 764, 767, 768, 771, 774, 777, 778, 780, 785, 786, 852, 853, 854, 856, 860, 910, 948], "round": [17, 29, 62, 92, 245, 305, 372, 504, 569, 720, 794, 948], "corner": [17, 92], "op": [17, 121, 245, 436, 569, 664, 948], "The": [17, 28, 29, 33, 45, 52, 60, 66, 85, 87, 88, 89, 91, 95, 98, 100, 107, 109, 128, 135, 137, 149, 150, 151, 152, 153, 158, 163, 166, 173, 178, 188, 189, 192, 215, 218, 222, 225, 227, 245, 294, 295, 297, 298, 299, 300, 327, 340, 343, 344, 347, 353, 354, 363, 366, 374, 377, 404, 426, 433, 436, 439, 440, 441, 442, 443, 444, 446, 447, 448, 457, 460, 466, 469, 470, 475, 477, 478, 479, 484, 485, 491, 495, 523, 536, 540, 555, 558, 562, 563, 565, 569, 570, 571, 575, 576, 577, 600, 601, 602, 604, 606, 609, 610, 615, 618, 624, 629, 638, 642, 646, 648, 664, 673, 709, 712, 713, 714, 722, 746, 763, 766, 767, 770, 776, 777, 789, 797, 801, 846, 852, 853, 854, 855, 856, 857, 859, 860, 861, 875, 878, 884, 887, 888, 893, 895, 896, 897, 902, 903, 909, 913, 942, 944, 948, 949, 952, 953, 954], "one": [17, 28, 29, 60, 77, 85, 87, 88, 89, 90, 91, 121, 142, 143, 149, 150, 151, 152, 163, 172, 180, 188, 189, 211, 226, 245, 253, 368, 393, 439, 462, 502, 516, 546, 549, 559, 562, 569, 595, 596, 599, 600, 601, 614, 643, 647, 664, 672, 791, 817, 852, 914, 948], "more": [17, 29, 31, 33, 60, 84, 85, 86, 87, 88, 89, 90, 91, 101, 107, 110, 120, 121, 128, 132, 163, 167, 172, 176, 188, 189, 190, 214, 227, 245, 256, 259, 296, 306, 307, 308, 393, 394, 404, 425, 450, 460, 509, 546, 549, 559, 562, 569, 614, 629, 637, 648, 664, 673, 711, 723, 724, 725, 817, 821, 863, 878, 934, 948, 956], "semigraph": 17, "box": [17, 128, 245], "draw": [17, 22, 23], "found": [17, 27, 72, 81, 83, 88, 92, 137, 217, 245, 451, 476, 492, 569, 639, 664, 864, 894, 948], "unicod": 17, "block": [17, 150, 214, 245, 599, 621, 637, 644, 664, 866, 867, 948], "http": [17, 29, 86, 100, 127, 132, 245, 473, 891, 956], "en": [17, 29, 245], "wikipedia": 17, "org": [17, 86, 100, 127, 132, 245], "wiki": 17, "drawing_charact": 17, "box_draw": 17, "hide": [18, 19, 20, 21, 29, 245], "etc": [18, 29, 98, 101, 103, 107, 110, 111, 113, 245, 519, 866, 867, 948], "inform": [20, 66, 101, 110, 132, 245, 306, 307, 308, 394, 460, 569, 618, 664, 723, 724, 725, 821, 878, 948], "separ": [21, 27, 93, 95, 98, 99, 109, 178, 180, 206, 213, 215, 245, 259, 278, 282, 472, 525, 529, 530, 569, 638, 664, 693, 697, 890, 917, 926, 948], "between": [21, 68, 118, 119, 120, 121, 182, 237, 245, 282, 303, 319, 381, 427, 432, 444, 466, 526, 528, 551, 552, 556, 569, 619, 658, 664, 697, 717, 737, 802, 840, 845, 857, 884, 948], "set_tbl_column_data_type_inlin": 21, "max": [22, 29, 33, 120, 121, 133, 142, 150, 151, 152, 180, 245, 306, 307, 313, 368, 426, 433, 440, 452, 489, 569, 595, 599, 600, 601, 629, 664, 710, 723, 724, 729, 735, 791, 846, 853, 868, 907, 948], "both": [22, 27, 51, 70, 100, 151, 152, 165, 166, 173, 188, 245, 258, 381, 440, 441, 442, 443, 444, 446, 447, 448, 569, 600, 601, 605, 606, 615, 664, 802, 948], "width": [23, 29, 98, 99, 245, 478, 484, 495, 664, 896, 902, 913], "char": [23, 51, 480, 898], "enabl": [24, 192, 222, 245, 452, 569, 624, 642, 664, 868, 948], "addit": [24, 29, 88, 101, 110, 118, 119, 134, 139, 150, 178, 192, 198, 215, 222, 225, 245, 252, 363, 366, 426, 463, 520, 522, 523, 524, 525, 536, 546, 549, 555, 558, 569, 588, 592, 599, 624, 631, 638, 642, 646, 664, 789, 948], "verbos": 24, "debug": [24, 92, 586, 593, 610, 664], "log": [24, 62, 358, 419, 429, 507, 569, 782, 933, 948], "if_set": 25, "env_onli": 25, "dict": [25, 29, 33, 61, 63, 66, 85, 87, 88, 89, 90, 91, 98, 99, 101, 102, 103, 104, 107, 108, 109, 110, 111, 113, 120, 163, 178, 184, 188, 189, 191, 204, 205, 245, 406, 569, 621, 623, 664, 827, 948], "show": [25, 29, 136, 149, 167, 177, 245, 589, 618, 627, 664], "variabl": [25, 93, 172, 206, 245, 614, 664, 926, 948], "restrict": [25, 489, 907], "dictionari": [25, 29, 85, 87, 88, 89, 91, 98, 99, 104, 108, 109, 163, 178, 188, 189, 204, 205, 245, 406, 569, 664, 735, 827, 948], "those": [25, 29, 98, 245, 433, 569, 846, 948], "been": [25, 29, 69, 93, 245, 433, 569, 846, 948], "set_fmt_float": 25, "directli": [25, 120, 121, 360, 361, 362, 569, 664, 784, 785, 786, 948], "via": [25, 98, 99, 102, 109, 111, 112, 113, 163, 189, 245, 259, 569], "set_stat": 25, "all_stat": 25, "file": [26, 27, 30, 31, 32, 33, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 140, 245, 593, 620, 628, 629, 645, 664, 672, 948], "binaryio": [26, 30, 97, 98, 102, 103, 104, 107, 108, 245], "bytesio": [26, 27, 29, 30, 33, 97, 98, 99, 102, 103, 107, 245], "path": [26, 27, 29, 30, 31, 32, 33, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 245, 452, 476, 569, 620, 628, 629, 645, 664, 868, 894, 948], "compress": [26, 30, 33, 245, 628, 629, 664], "avrocompress": [26, 245], "uncompress": [26, 30, 33, 103, 111, 245, 629, 664], "write": [26, 27, 28, 29, 30, 31, 33, 99, 103, 245, 306, 307, 308, 569, 608, 627, 629, 645, 664, 723, 724, 725, 948], "apach": [26, 33, 97, 100, 245], "avro": [26, 97, 245, 580], "should": [26, 27, 29, 30, 31, 32, 33, 85, 87, 89, 91, 93, 96, 101, 109, 118, 119, 121, 124, 127, 128, 134, 151, 163, 166, 188, 189, 205, 206, 215, 227, 245, 253, 259, 277, 304, 317, 356, 363, 387, 389, 439, 440, 441, 442, 443, 444, 446, 447, 448, 451, 460, 523, 536, 543, 544, 562, 569, 588, 600, 605, 606, 610, 627, 628, 629, 638, 645, 648, 664, 673, 692, 719, 733, 779, 852, 853, 854, 855, 856, 857, 859, 860, 861, 864, 878, 948], "written": [26, 27, 29, 30, 31, 32, 33, 245, 628, 629, 645, 664], "snappi": [26, 33, 245, 629, 664], "deflat": [26, 245], "import": [26, 27, 29, 30, 33, 36, 60, 70, 85, 89, 90, 109, 114, 116, 117, 118, 119, 120, 121, 133, 149, 151, 164, 166, 209, 216, 218, 245, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 534, 544, 600, 606, 610, 664, 727, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 806, 810, 811, 812, 817, 852, 876, 922, 948], "pathlib": [26, 27, 30, 33, 109, 245], "foo": [26, 27, 30, 31, 32, 33, 93, 128, 131, 132, 134, 135, 136, 137, 140, 143, 144, 145, 146, 147, 148, 153, 154, 155, 156, 157, 158, 160, 165, 169, 170, 171, 174, 177, 180, 182, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 213, 214, 215, 219, 220, 221, 224, 245, 254, 274, 279, 280, 283, 284, 306, 307, 308, 343, 378, 379, 398, 437, 453, 454, 466, 468, 470, 472, 474, 479, 485, 487, 489, 491, 493, 494, 501, 503, 516, 519, 521, 523, 526, 527, 528, 537, 541, 542, 544, 546, 547, 548, 549, 550, 551, 552, 555, 556, 557, 560, 561, 562, 569, 587, 588, 589, 590, 596, 603, 604, 605, 621, 623, 624, 637, 638, 641, 643, 645, 664, 697, 723, 766, 850, 886, 888, 890, 892, 907, 948], "bar": [26, 27, 30, 31, 32, 33, 93, 128, 131, 132, 134, 135, 136, 137, 140, 143, 144, 145, 146, 147, 148, 154, 156, 157, 158, 160, 165, 169, 170, 171, 174, 177, 180, 182, 184, 185, 186, 188, 190, 191, 192, 194, 195, 197, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 214, 215, 219, 220, 224, 245, 254, 284, 379, 460, 470, 472, 487, 489, 516, 521, 523, 526, 527, 528, 537, 542, 546, 547, 548, 549, 550, 551, 555, 556, 557, 560, 561, 562, 569, 587, 588, 589, 590, 596, 603, 604, 605, 621, 623, 624, 637, 638, 641, 645, 664, 697, 878, 888, 890, 907, 948], "ham": [26, 27, 30, 33, 93, 131, 132, 134, 135, 136, 137, 143, 144, 146, 153, 154, 156, 165, 169, 170, 171, 174, 177, 182, 184, 186, 188, 190, 191, 192, 194, 195, 197, 199, 200, 201, 206, 207, 208, 209, 210, 214, 219, 220, 245, 523, 587, 588, 589, 590, 596, 605, 621, 623, 624, 637, 643, 664], "d": [26, 27, 30, 33, 51, 68, 88, 114, 133, 149, 153, 154, 157, 165, 201, 203, 216, 220, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 252, 329, 350, 381, 428, 455, 468, 474, 488, 492, 522, 540, 569, 605, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 664, 748, 773, 802, 886, 892, 906, 910, 948], "e": [26, 27, 30, 33, 51, 86, 98, 99, 102, 103, 107, 111, 113, 133, 149, 154, 201, 203, 216, 245, 252, 259, 358, 363, 381, 400, 406, 455, 460, 536, 562, 569, 608, 621, 664, 782, 802, 865, 878, 930, 948], "dirpath": [26, 27, 30, 33, 109, 245], "new_fil": [26, 27, 30, 33, 245], "has_head": [27, 29, 98, 99, 102, 109, 245], "quot": [27, 98, 99, 109, 245], "batch_siz": [27, 98, 99, 112, 245], "1024": [27, 33, 98, 99, 112, 245, 629, 664], "datetime_format": [27, 245], "date_format": [27, 245, 350], "time_format": [27, 245], "float_precis": [27, 29, 245], "null_valu": [27, 98, 99, 109, 245], "comma": [27, 245], "csv": [27, 98, 99, 102, 109, 245, 580, 628, 629, 664], "result": [27, 31, 32, 60, 89, 91, 100, 101, 109, 111, 113, 114, 121, 140, 151, 162, 176, 195, 209, 225, 245, 360, 361, 362, 366, 394, 426, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 452, 454, 487, 488, 508, 519, 529, 530, 531, 545, 559, 569, 583, 600, 610, 618, 626, 628, 629, 645, 646, 664, 672, 784, 785, 786, 821, 850, 852, 853, 854, 855, 856, 857, 859, 860, 861, 868, 871, 905, 906, 930, 948], "If": [27, 29, 31, 32, 33, 51, 65, 66, 69, 70, 85, 86, 87, 88, 89, 90, 91, 93, 98, 99, 101, 102, 103, 107, 109, 110, 111, 112, 113, 127, 128, 136, 140, 149, 151, 152, 154, 163, 166, 168, 172, 176, 189, 190, 197, 201, 205, 206, 208, 212, 213, 214, 216, 217, 245, 259, 290, 295, 306, 307, 308, 323, 369, 394, 404, 406, 433, 435, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 456, 460, 461, 475, 477, 479, 480, 485, 486, 487, 488, 489, 491, 492, 507, 516, 518, 519, 526, 527, 529, 538, 544, 546, 549, 554, 556, 558, 562, 569, 589, 591, 600, 601, 605, 606, 610, 614, 621, 629, 630, 636, 637, 639, 645, 648, 664, 672, 673, 705, 723, 724, 725, 734, 742, 796, 798, 799, 821, 823, 844, 846, 848, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 868, 874, 878, 879, 893, 895, 897, 898, 903, 904, 905, 906, 907, 909, 910, 919, 925, 930, 933, 939, 948], "instead": [27, 31, 32, 65, 96, 98, 107, 120, 124, 128, 151, 163, 176, 178, 188, 189, 192, 209, 222, 245, 268, 477, 479, 485, 491, 519, 554, 558, 569, 594, 600, 624, 642, 645, 664, 682, 866, 867, 895, 897, 903, 909, 931, 948], "whether": [27, 70, 89, 91, 121, 245, 332, 410, 411, 452, 569, 610, 664, 751], "header": [27, 29, 33, 92, 98, 99, 102, 109, 137, 180, 213, 245, 629, 664], "field": [27, 52, 81, 83, 88, 215, 245, 295, 406, 475, 488, 489, 497, 529, 530, 545, 558, 569, 638, 664, 710, 906, 907, 916, 917], "symbol": [27, 245], "byte": [27, 98, 99, 102, 103, 104, 107, 108, 109, 138, 245, 298, 301, 302, 477, 480, 629, 664, 712, 715, 716, 783, 895, 898, 948], "specifi": [27, 29, 60, 70, 72, 81, 83, 120, 134, 138, 139, 142, 150, 178, 188, 192, 198, 212, 215, 222, 225, 245, 360, 361, 362, 363, 368, 406, 426, 436, 463, 478, 484, 520, 522, 523, 524, 525, 536, 546, 549, 555, 558, 569, 588, 592, 595, 599, 624, 631, 636, 638, 642, 646, 664, 783, 784, 785, 786, 791, 896, 902, 948], "defin": [27, 29, 36, 70, 118, 119, 120, 128, 151, 152, 176, 179, 227, 245, 259, 294, 381, 428, 440, 441, 442, 443, 444, 446, 447, 448, 518, 544, 558, 569, 600, 601, 617, 648, 664, 673, 709, 802, 948], "chrono": [27, 245, 350, 492, 773, 910], "rust": [27, 33, 78, 103, 107, 128, 227, 245, 648, 673, 948], "crate": [27, 245, 467, 468, 473, 474, 482, 483], "fraction": [27, 116, 117, 190, 245, 348, 427, 450, 492, 569, 771, 840, 863, 948], "second": [27, 70, 151, 152, 166, 218, 245, 343, 347, 353, 440, 441, 442, 443, 444, 446, 447, 448, 492, 533, 534, 562, 569, 600, 601, 606, 664, 766, 770, 776], "precis": [27, 29, 37, 163, 189, 205, 245, 322, 492, 741], "infer": [27, 85, 87, 88, 89, 90, 91, 98, 99, 102, 109, 112, 118, 128, 245, 437, 475, 492, 569, 664, 850, 893, 948], "maximum": [27, 98, 99, 109, 119, 120, 121, 169, 245, 271, 306, 307, 407, 421, 433, 546, 569, 611, 664, 686, 723, 724, 753, 828, 836, 841, 846, 948], "timeunit": [27, 36, 38, 70, 245, 322, 323, 352, 356, 741, 742, 775, 779], "frame": [27, 28, 29, 60, 88, 116, 120, 128, 129, 163, 164, 173, 176, 179, 188, 189, 209, 216, 245, 584, 615, 617, 664, 722, 948], "datetim": [27, 29, 60, 70, 92, 133, 149, 151, 152, 164, 166, 218, 245, 274, 275, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 440, 441, 442, 443, 444, 446, 447, 448, 492, 506, 534, 540, 544, 569, 600, 601, 606, 664, 689, 690, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 817, 836, 837, 867, 910, 932, 948], "place": [27, 135, 156, 157, 185, 194, 195, 198, 212, 220, 245, 268, 282, 289, 453, 454, 462, 569, 625, 626, 631, 636, 664, 682, 697, 704, 847, 849, 870, 871, 880, 948], "float64": [27, 29, 88, 96, 98, 120, 124, 137, 138, 145, 191, 209, 222, 245, 260, 261, 262, 263, 264, 265, 303, 309, 310, 348, 363, 387, 389, 458, 459, 504, 505, 523, 536, 569, 590, 623, 642, 664, 771, 931, 936, 948], "datatyp": [27, 31, 45, 58, 85, 87, 88, 89, 91, 94, 96, 102, 104, 108, 121, 124, 137, 139, 145, 191, 245, 278, 303, 363, 455, 472, 492, 506, 523, 536, 569, 580, 592, 623, 645, 664, 673, 693, 717, 735, 815, 817, 819, 872, 890, 910, 932, 948], "repres": [27, 46, 58, 70, 85, 87, 89, 90, 91, 199, 219, 245, 387, 389, 465, 513, 523, 526, 536, 544, 551, 556, 557, 561, 569, 632, 640, 664, 867, 882, 938, 948], "null": [27, 60, 68, 88, 98, 99, 109, 114, 127, 129, 133, 136, 142, 145, 146, 158, 165, 170, 171, 177, 182, 194, 195, 198, 199, 200, 204, 209, 212, 215, 217, 219, 222, 245, 254, 258, 259, 268, 276, 279, 280, 283, 289, 294, 295, 297, 299, 306, 307, 308, 311, 313, 316, 318, 320, 321, 328, 331, 335, 337, 339, 342, 349, 360, 361, 362, 363, 366, 367, 368, 369, 374, 380, 387, 388, 389, 390, 391, 397, 406, 424, 427, 434, 439, 440, 441, 442, 443, 444, 446, 447, 448, 453, 454, 455, 457, 462, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 480, 481, 484, 486, 488, 489, 490, 495, 496, 497, 506, 514, 516, 522, 524, 525, 536, 544, 558, 562, 569, 584, 589, 595, 604, 605, 625, 626, 631, 636, 638, 639, 642, 643, 645, 664, 673, 682, 691, 704, 709, 710, 713, 722, 723, 736, 739, 747, 750, 757, 759, 762, 765, 772, 784, 785, 786, 789, 791, 796, 813, 814, 839, 840, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 865, 870, 871, 875, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 898, 899, 902, 904, 906, 907, 908, 928, 930, 931, 932, 939, 948], "empti": [27, 76, 88, 98, 99, 102, 109, 129, 130, 160, 172, 245, 555, 584, 585, 614, 664, 722, 726, 805, 948], "table_nam": [28, 29, 245], "connection_uri": [28, 100, 245], "if_exist": [28, 245], "dbwritemod": [28, 245], "fail": [28, 86, 101, 103, 110, 127, 214, 245, 269, 295, 492, 569, 637, 664, 673, 910, 948], "dbwriteengin": [28, 245], "sqlalchemi": [28, 245], "databas": [28, 100, 245, 580], "append": [28, 120, 140, 165, 166, 245, 434, 562, 569, 605, 606, 664, 948], "creat": [28, 29, 69, 70, 85, 89, 91, 110, 119, 120, 121, 129, 130, 151, 152, 177, 180, 218, 222, 245, 323, 347, 353, 434, 486, 512, 519, 524, 532, 533, 534, 569, 584, 585, 591, 600, 601, 642, 664, 722, 726, 734, 739, 742, 770, 776, 838, 844, 847, 904, 930, 948], "connect": [28, 98, 100, 103, 107, 111, 113, 114, 245, 581], "uri": [28, 100, 101, 110, 245], "postgresql": [28, 100, 245, 426, 569], "usernam": [28, 98, 100, 103, 107, 111, 113, 245], "password": [28, 98, 100, 103, 107, 111, 113, 245], "server": [28, 100, 245], "port": [28, 98, 100, 103, 107, 111, 113, 245], "replac": [28, 98, 99, 109, 141, 142, 186, 213, 222, 245, 323, 346, 406, 483, 569, 594, 642, 664, 742, 769, 827, 866, 867, 901, 948], "insert": [28, 98, 99, 103, 107, 109, 111, 112, 113, 157, 185, 213, 215, 245, 451, 466, 495, 569, 638, 664, 864, 884, 913, 948], "mode": [28, 245, 554, 569, 664, 948], "new": [28, 29, 96, 109, 124, 125, 128, 136, 156, 157, 176, 177, 184, 185, 202, 215, 216, 222, 245, 254, 323, 365, 380, 405, 482, 483, 488, 489, 496, 497, 503, 569, 580, 589, 621, 635, 638, 642, 648, 664, 669, 739, 742, 788, 838, 849, 900, 901, 906, 907, 914, 916, 921, 927, 940, 948], "alreadi": [28, 245, 277, 317, 569, 692, 733, 948], "adbc": [28, 100, 245], "workbook": [29, 245], "worksheet": [29, 245], "posit": [29, 134, 139, 150, 178, 192, 198, 215, 222, 225, 245, 360, 361, 362, 363, 426, 463, 481, 520, 522, 523, 524, 525, 536, 546, 549, 555, 558, 569, 588, 592, 599, 624, 631, 638, 642, 646, 664, 784, 785, 786, 899, 948], "tupl": [29, 100, 128, 163, 188, 189, 193, 224, 245, 437, 569, 618, 627, 664, 850, 948], "a1": [29, 61, 63, 245], "table_styl": [29, 245], "column_format": [29, 245], "dtype_format": [29, 245], "oneormoredatatyp": [29, 119, 245, 817, 948], "conditional_format": [29, 245], "conditionalformatdict": [29, 245], "column_tot": [29, 245], "columntotalsdefinit": [29, 245], "column_width": [29, 245], "row_tot": [29, 245], "rowtotalsdefinit": [29, 245], "row_height": [29, 245], "sparklin": [29, 245], "sequenc": [29, 52, 60, 67, 85, 87, 88, 89, 91, 93, 95, 98, 99, 109, 119, 120, 121, 134, 136, 139, 140, 165, 166, 172, 176, 179, 180, 198, 206, 212, 213, 214, 215, 216, 217, 218, 245, 385, 404, 428, 463, 497, 516, 517, 518, 520, 529, 530, 531, 538, 540, 545, 553, 559, 569, 588, 589, 592, 605, 606, 617, 631, 636, 637, 638, 639, 664, 672, 737, 867, 916, 948], "formula": [29, 245, 358, 569, 782, 948], "autofilt": [29, 245], "autofit": [29, 245], "hidden_column": [29, 245], "hide_gridlin": [29, 245], "sheet_zoom": [29, 245], "excel": [29, 102, 245, 580], "object": [29, 33, 70, 86, 87, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 119, 120, 121, 127, 150, 167, 209, 245, 544, 580, 585, 603, 608, 620, 664, 685, 718, 740, 883, 925, 948], "open": [29, 98, 99, 102, 103, 107, 111, 113, 245], "xlsxwriter": [29, 115, 245], "ha": [29, 60, 69, 93, 109, 127, 218, 245, 259, 317, 393, 413, 507, 518, 569, 648, 722, 733, 796, 808, 933, 948], "close": [29, 70, 151, 152, 245, 381, 440, 441, 442, 443, 444, 446, 447, 448, 460, 569, 600, 601, 664, 802, 878, 948], "xlsx": [29, 102, 245], "work": [29, 37, 99, 102, 152, 185, 245, 259, 277, 296, 305, 306, 307, 308, 363, 372, 426, 480, 509, 569, 601, 664, 692, 711, 720, 723, 724, 725, 794, 898, 934, 948], "directori": [29, 107, 245], "sheet1": [29, 245], "valid": [29, 103, 107, 121, 125, 138, 245, 317, 467, 476, 569, 733, 783, 796, 885, 886, 891, 892, 894, 900, 901, 948], "notat": [29, 245], "integ": [29, 41, 42, 43, 44, 54, 55, 56, 57, 119, 120, 151, 152, 245, 305, 348, 372, 373, 435, 440, 441, 442, 443, 444, 445, 446, 447, 448, 481, 515, 519, 540, 544, 569, 600, 601, 664, 680, 681, 720, 771, 794, 848, 858, 867, 899, 948], "medium": [29, 245], "kei": [29, 60, 66, 151, 166, 173, 178, 180, 184, 187, 245, 600, 606, 615, 621, 622, 664], "contain": [29, 60, 66, 87, 90, 92, 101, 110, 116, 136, 164, 176, 180, 245, 259, 385, 406, 468, 471, 473, 474, 476, 489, 490, 569, 589, 618, 664, 827, 833, 886, 889, 891, 892, 894, 907, 908, 925, 948], "follow": [29, 66, 98, 99, 101, 109, 110, 128, 151, 152, 166, 179, 218, 245, 259, 343, 347, 353, 428, 433, 440, 441, 442, 443, 444, 446, 447, 448, 497, 508, 518, 562, 563, 565, 569, 570, 571, 575, 576, 577, 600, 601, 606, 617, 664, 766, 770, 776, 846, 866, 867, 942, 944, 948, 949, 952, 953, 954, 956], "first_column": [29, 245], "last_column": [29, 245], "banded_column": [29, 245], "banded_row": [29, 245], "sheet": [29, 102, 245], "chart": [29, 245, 618, 664], "subsequ": [29, 183, 209, 245, 591, 664], "colnam": [29, 109, 120, 137, 245, 405, 569, 590, 664], "given": [29, 48, 50, 60, 69, 70, 85, 87, 88, 89, 91, 96, 98, 99, 109, 118, 119, 120, 121, 124, 128, 138, 139, 178, 179, 188, 194, 195, 198, 212, 217, 245, 259, 274, 289, 324, 352, 358, 381, 400, 426, 428, 433, 436, 437, 440, 441, 443, 446, 447, 448, 451, 453, 454, 474, 492, 497, 507, 516, 536, 569, 592, 610, 617, 625, 626, 631, 636, 639, 648, 664, 673, 689, 704, 734, 743, 775, 782, 783, 799, 802, 824, 826, 838, 844, 846, 850, 853, 854, 856, 859, 860, 861, 864, 870, 871, 892, 910, 933, 936, 940, 948], "here": [29, 85, 87, 88, 89, 91, 100, 101, 110, 119, 120, 121, 245, 476, 664, 894], "dd": [29, 245], "mm": [29, 245], "yyyi": [29, 245], "00": [29, 70, 151, 166, 218, 245, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 492, 534, 600, 606, 664, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 910], "dtype": [29, 63, 85, 87, 89, 91, 92, 96, 98, 99, 109, 118, 119, 120, 121, 124, 127, 151, 152, 166, 207, 209, 245, 259, 260, 261, 262, 263, 264, 265, 268, 271, 272, 273, 282, 294, 303, 306, 307, 308, 309, 310, 315, 316, 328, 331, 335, 337, 339, 342, 349, 356, 363, 365, 402, 404, 406, 435, 436, 440, 441, 442, 443, 444, 446, 447, 448, 455, 458, 459, 466, 475, 486, 500, 502, 504, 505, 506, 511, 512, 518, 519, 527, 536, 540, 544, 545, 558, 569, 600, 601, 606, 664, 686, 687, 688, 697, 709, 717, 722, 723, 724, 725, 731, 732, 736, 747, 750, 757, 759, 762, 765, 772, 779, 783, 788, 805, 817, 826, 827, 851, 865, 872, 884, 893, 904, 910, 918, 928, 930, 931, 932, 936, 948], "overridden": [29, 85, 87, 89, 91, 245, 664], "basi": [29, 120, 245], "param": [29, 85, 87, 88, 89, 91, 98, 99, 109, 120, 121, 188, 245, 664], "It": [29, 70, 128, 173, 179, 227, 245, 259, 295, 412, 569, 610, 615, 648, 664, 866, 867, 948], "also": [29, 70, 88, 109, 120, 121, 137, 150, 151, 152, 173, 176, 192, 198, 222, 245, 313, 316, 346, 380, 381, 433, 440, 441, 442, 443, 444, 446, 447, 448, 463, 529, 530, 538, 540, 553, 562, 568, 569, 574, 599, 600, 601, 615, 624, 631, 642, 643, 664, 769, 802, 846, 948], "group": [29, 33, 99, 150, 151, 152, 164, 176, 178, 180, 216, 218, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245, 253, 259, 277, 371, 426, 462, 463, 473, 502, 518, 569, 599, 600, 601, 629, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664, 692, 891], "float_dtyp": [29, 245], "simplifi": [29, 67, 245, 586, 591, 593, 618, 627, 628, 629, 664], "uniform": [29, 245], "condit": [29, 65, 136, 143, 188, 245, 471, 490, 538, 562, 589, 596, 664], "suppli": [29, 85, 87, 88, 89, 91, 188, 245, 664], "typenam": [29, 245], "3_color_scal": [29, 245], "data_bar": [29, 245], "make": [29, 52, 68, 85, 90, 98, 99, 100, 103, 107, 111, 113, 151, 152, 173, 176, 183, 218, 245, 361, 362, 406, 436, 488, 495, 569, 600, 601, 615, 664, 785, 786, 799, 827, 906, 913, 948], "icon": [29, 245], "multipl": [29, 67, 68, 98, 99, 109, 111, 112, 113, 119, 121, 134, 138, 140, 143, 150, 151, 156, 164, 178, 180, 192, 198, 212, 222, 225, 245, 294, 410, 413, 418, 419, 426, 437, 440, 441, 442, 443, 444, 446, 447, 448, 463, 520, 523, 529, 530, 538, 545, 546, 549, 553, 562, 569, 588, 596, 599, 600, 624, 631, 636, 642, 646, 664, 672, 709, 783, 832, 850, 948], "singl": [29, 60, 68, 98, 99, 100, 107, 109, 119, 134, 135, 136, 140, 147, 178, 188, 198, 245, 259, 275, 294, 343, 369, 404, 434, 437, 463, 466, 514, 518, 520, 523, 524, 525, 545, 546, 549, 554, 569, 588, 589, 631, 664, 672, 690, 709, 766, 847, 850, 884, 925, 948], "across": [29, 245, 531, 559], "effect": [29, 127, 145, 245, 259, 569, 644, 664], "heatmap": [29, 245], "min": [29, 33, 120, 121, 133, 142, 151, 152, 180, 245, 306, 308, 314, 368, 426, 433, 443, 555, 569, 595, 600, 601, 629, 664, 723, 725, 730, 735, 791, 846, 856, 948], "entir": [29, 245], "final": [29, 60, 113, 245, 360, 361, 362, 569, 593, 664, 784, 785, 786, 948], "made": [29, 245, 930, 948], "up": [29, 52, 100, 163, 166, 189, 205, 245, 259, 305, 495, 569, 605, 606, 610, 664, 720, 913, 948], "abov": [29, 245, 562], "order": [29, 60, 88, 116, 128, 150, 151, 152, 178, 179, 180, 190, 198, 212, 214, 218, 245, 259, 268, 291, 296, 304, 433, 450, 451, 452, 462, 463, 497, 509, 510, 520, 569, 599, 600, 601, 614, 628, 629, 631, 636, 637, 664, 673, 682, 706, 711, 719, 734, 816, 844, 846, 851, 863, 864, 868, 880, 916, 934, 935, 948], "than": [29, 70, 84, 89, 91, 98, 99, 109, 114, 120, 121, 128, 149, 150, 163, 166, 178, 188, 189, 190, 216, 227, 245, 259, 375, 376, 393, 396, 403, 450, 460, 478, 484, 489, 495, 526, 546, 549, 556, 559, 569, 599, 606, 628, 629, 648, 664, 673, 863, 878, 896, 902, 907, 913, 948], "add": [29, 50, 99, 128, 140, 151, 222, 223, 245, 430, 499, 534, 538, 562, 569, 600, 605, 642, 643, 644, 664, 672, 948], "total": [29, 138, 245, 783, 948], "export": [29, 163, 164, 189, 205, 245], "numer": [29, 166, 245, 252, 306, 307, 308, 373, 381, 417, 419, 429, 436, 455, 498, 508, 569, 580, 606, 664, 723, 724, 725, 802, 815, 865, 872, 948], "associ": [29, 60, 245], "sum": [29, 60, 138, 145, 150, 152, 162, 180, 225, 245, 259, 295, 315, 316, 358, 369, 440, 441, 443, 446, 447, 448, 514, 516, 529, 531, 538, 546, 549, 553, 569, 586, 591, 593, 599, 601, 618, 627, 646, 664, 731, 732, 782, 783, 853, 854, 856, 859, 860, 861, 948], "pass": [29, 33, 60, 70, 87, 102, 109, 119, 120, 121, 132, 134, 150, 154, 168, 178, 179, 192, 198, 201, 212, 222, 225, 245, 259, 329, 346, 366, 379, 426, 428, 463, 479, 485, 491, 520, 523, 540, 546, 549, 558, 569, 588, 599, 603, 610, 617, 624, 627, 631, 636, 642, 646, 664, 673, 748, 769, 789, 798, 823, 897, 903, 909, 919, 948], "must": [29, 69, 86, 87, 101, 110, 139, 151, 152, 166, 173, 188, 245, 295, 404, 440, 441, 442, 443, 444, 446, 447, 448, 569, 592, 600, 601, 606, 610, 615, 664, 734, 844, 948], "funcnam": [29, 245], "averag": [29, 245, 360, 361, 362, 433, 569, 784, 785, 786, 846, 948], "count_num": [29, 245], "count": [29, 98, 99, 103, 107, 109, 111, 112, 113, 133, 151, 152, 166, 176, 177, 180, 213, 217, 218, 223, 227, 236, 245, 275, 312, 343, 397, 420, 424, 440, 441, 442, 443, 444, 446, 447, 448, 468, 510, 512, 550, 569, 600, 601, 606, 639, 644, 648, 657, 664, 690, 735, 766, 799, 834, 839, 886, 935, 937, 948], "std_dev": [29, 245], "var": [29, 245, 569, 664, 948], "pixel": [29, 245], "unit": [29, 36, 38, 70, 120, 121, 138, 245, 322, 323, 329, 352, 356, 402, 413, 511, 540, 569, 618, 664, 741, 742, 748, 775, 779, 783, 826, 936, 948], "hand": [29, 98, 99, 109, 245], "side": [29, 151, 152, 245, 381, 440, 441, 442, 443, 444, 446, 447, 448, 451, 569, 600, 601, 664, 802, 864, 948], "call": [29, 99, 120, 121, 128, 150, 167, 244, 245, 259, 313, 316, 569, 581, 599, 663, 664, 673, 948], "ad": [29, 88, 127, 151, 213, 222, 245, 258, 366, 529, 530, 569, 600, 642, 664, 789, 948], "end": [29, 98, 99, 107, 109, 151, 245, 290, 301, 347, 363, 381, 467, 471, 486, 490, 523, 536, 562, 569, 600, 602, 609, 618, 664, 705, 715, 770, 802, 889, 904, 908, 948], "wise": [29, 60, 145, 245, 260, 261, 262, 263, 264, 265, 309, 310, 364, 401, 457, 458, 459, 504, 505, 529, 530, 538, 553, 569, 674, 675, 676, 677, 678, 679, 727, 728, 787, 825, 875, 876, 877, 922, 923, 948], "match": [29, 68, 79, 85, 87, 88, 89, 91, 116, 117, 142, 166, 188, 245, 411, 467, 468, 471, 474, 475, 476, 479, 482, 483, 485, 490, 491, 492, 523, 595, 606, 664, 817, 885, 886, 889, 892, 893, 894, 897, 900, 901, 903, 908, 909, 910, 948], "particip": [29, 245], "distinct": [29, 121, 178, 245, 296, 433, 534, 569, 711, 846, 948], "referenc": [29, 245, 497], "differ": [29, 98, 114, 116, 140, 151, 152, 163, 189, 205, 213, 245, 276, 318, 327, 343, 344, 346, 354, 406, 421, 422, 492, 510, 537, 540, 569, 591, 600, 601, 664, 672, 673, 691, 736, 746, 766, 767, 769, 777, 836, 837, 865, 910, 948], "row_index": [29, 245], "height": [29, 136, 245], "provid": [29, 98, 99, 100, 101, 109, 110, 120, 121, 245, 295, 299, 300, 469, 470, 473, 475, 476, 540, 580, 628, 629, 664, 713, 714, 799, 887, 888, 891, 893, 894, 948, 956], "intersect": [29, 245], "bodi": [29, 245], "start": [29, 97, 98, 99, 103, 107, 109, 111, 112, 113, 150, 151, 167, 197, 218, 223, 245, 290, 302, 327, 329, 330, 332, 333, 338, 340, 344, 345, 347, 348, 352, 353, 354, 355, 357, 363, 381, 461, 467, 471, 486, 490, 523, 529, 536, 538, 562, 569, 599, 600, 618, 630, 644, 664, 705, 716, 741, 743, 746, 748, 749, 751, 756, 758, 761, 763, 764, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 779, 780, 802, 879, 889, 904, 908, 948], "zero": [29, 85, 86, 97, 98, 99, 103, 107, 127, 129, 142, 163, 188, 203, 209, 245, 367, 368, 451, 460, 495, 508, 569, 584, 595, 664, 710, 722, 791, 878, 913, 925, 930, 931, 948], "unless": [29, 60, 87, 209, 245, 664, 931, 939, 948], "marker": [29, 245], "compliant": [29, 245], "case": [29, 60, 85, 87, 88, 89, 91, 113, 128, 140, 151, 152, 163, 245, 404, 412, 413, 569, 600, 601, 664, 672, 948], "three": [29, 211, 245, 451, 569], "avail": [29, 95, 101, 110, 119, 244, 245, 433, 563, 565, 568, 569, 570, 571, 574, 575, 576, 577, 580, 581, 593, 663, 664, 846, 942, 944, 948, 949, 952, 953, 954], "insert_befor": [29, 245], "insert_aft": [29, 245], "respect": [29, 245], "direct": [29, 100, 107, 113, 216, 245], "far": [29, 245], "thei": [29, 88, 109, 116, 125, 167, 245, 439, 569, 852, 948], "strongli": [29, 128, 188, 227, 245, 259, 569, 648, 673, 948], "advis": [29, 167, 245, 295], "structur": [29, 76, 80, 82, 140, 179, 245, 428, 569, 617, 664, 672, 948], "your": [29, 98, 99, 116, 117, 128, 163, 192, 222, 225, 245, 259, 569, 586, 602, 609, 610, 624, 642, 646, 664, 673, 948], "wherev": [29, 128, 227, 245, 259, 569, 648, 673, 948], "possibl": [29, 98, 128, 150, 163, 189, 214, 227, 245, 259, 402, 412, 489, 511, 569, 599, 637, 648, 664, 673, 907, 948], "simpl": [29, 176, 245], "colx": [29, 245], "coli": [29, 245], "after": [29, 88, 97, 98, 99, 103, 107, 109, 111, 112, 113, 140, 215, 244, 245, 363, 406, 433, 495, 569, 638, 664, 672, 769, 827, 846, 913, 948], "befor": [29, 98, 109, 125, 140, 151, 166, 215, 245, 315, 316, 317, 406, 427, 439, 440, 441, 442, 443, 444, 446, 447, 448, 495, 500, 569, 600, 603, 606, 638, 664, 672, 731, 732, 733, 827, 840, 852, 853, 854, 855, 856, 857, 859, 860, 861, 913, 918, 948], "most": [29, 85, 98, 99, 109, 245, 413, 418, 427, 489, 512, 569, 832, 840, 907, 937, 948], "mandatori": [29, 245], "return_dtyp": [29, 128, 245, 259, 404, 518, 545, 569, 673, 948], "latter": [29, 140, 245, 672, 948], "appropri": [29, 245, 433, 569, 846, 948], "pure": [29, 245], "actual": [29, 88, 102, 120, 121, 245, 873, 948], "indic": [29, 65, 93, 97, 98, 99, 103, 107, 109, 118, 119, 121, 151, 152, 206, 245, 269, 294, 383, 386, 387, 389, 390, 391, 440, 441, 442, 443, 444, 446, 447, 448, 451, 457, 502, 520, 569, 600, 601, 664, 709, 806, 810, 811, 812, 813, 814, 864, 875, 920, 926, 948], "calcul": [29, 60, 151, 199, 219, 245, 276, 318, 360, 361, 362, 394, 402, 445, 460, 465, 511, 513, 518, 526, 551, 556, 557, 561, 569, 600, 632, 640, 664, 691, 736, 784, 785, 786, 821, 858, 878, 882, 938, 948], "individu": [29, 120, 152, 245, 259, 474, 569, 601, 629, 664, 721, 892, 948], "gridlin": [29, 245], "zoom": [29, 245], "level": [29, 33, 109, 111, 112, 113, 120, 128, 145, 176, 245, 369, 569, 602, 609, 629, 664], "definit": [29, 245, 394, 569, 821, 948], "take": [29, 120, 145, 173, 179, 202, 245, 343, 463, 503, 535, 537, 569, 615, 635, 664, 766, 921, 940, 948], "care": [29, 245, 259, 452, 569, 868, 948], "rel": [29, 101, 110, 116, 117, 245, 343, 360, 361, 362, 569, 766, 784, 785, 786, 948], "see": [29, 100, 101, 102, 110, 116, 117, 120, 121, 132, 165, 179, 245, 306, 307, 308, 350, 368, 380, 394, 404, 460, 553, 569, 723, 724, 725, 773, 821, 878, 948, 956], "readthedoc": [29, 245, 956], "io": [29, 245, 956], "working_with_conditional_format": [29, 245], "html": [29, 86, 100, 127, 132, 245], "similarli": [29, 88, 245], "well": [29, 98, 99, 109, 139, 180, 245, 381, 569, 592, 664, 802, 948], "adjac": [29, 245], "two": [29, 87, 89, 91, 100, 145, 172, 173, 180, 211, 226, 227, 245, 253, 319, 323, 462, 502, 516, 526, 528, 551, 556, 569, 614, 615, 647, 648, 664, 737, 742, 948], "help": [29, 245, 593, 664], "where": [29, 65, 100, 136, 140, 163, 172, 189, 199, 219, 245, 269, 355, 358, 451, 460, 463, 465, 513, 526, 551, 556, 557, 561, 562, 569, 614, 632, 640, 664, 672, 683, 778, 782, 864, 878, 882, 938, 940, 948], "appear": [29, 88, 116, 245, 510, 569, 935, 948], "working_with_sparklin": [29, 245], "inject": [29, 60, 245], "locat": [29, 140, 186, 210, 215, 245, 451, 569, 638, 664, 672, 864, 867, 920, 948], "syntax": [29, 128, 176, 245, 627, 664, 948], "ensur": [29, 120, 121, 123, 150, 178, 188, 245, 381, 512, 569, 599, 610, 664, 930, 937, 948], "correctli": [29, 245], "microsoft": [29, 245], "com": [29, 100, 245, 360, 361, 362, 473, 569, 784, 785, 786, 891, 948], "u": [29, 36, 38, 70, 92, 163, 189, 205, 245, 322, 323, 329, 352, 356, 492, 540, 741, 742, 748, 775, 779], "offic": [29, 245], "f5ed2452": [29, 245], "2337": [29, 245], "4f71": [29, 245], "bed3": [29, 245], "c8ae6d2b276": [29, 245], "instanti": [29, 192, 222, 245, 624, 642, 664], "basic": [29, 245], "random": [29, 119, 120, 121, 153, 190, 245, 377, 433, 450, 456, 569, 797, 846, 863, 874, 948], "date": [29, 36, 60, 70, 98, 99, 100, 109, 114, 133, 149, 151, 152, 164, 166, 245, 274, 275, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 440, 441, 442, 443, 444, 446, 447, 448, 492, 506, 540, 569, 600, 601, 606, 664, 689, 690, 741, 742, 743, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 817, 836, 837, 867, 910, 932, 948], "dtm": [29, 245, 323, 742], "2023": [29, 92, 115, 164, 245, 323, 742], "num": [29, 211, 245, 381, 384, 495, 569, 802, 948], "500": [29, 163, 217, 245, 593, 639, 664, 756, 758, 764, 771, 853, 854, 856, 948], "val": [29, 187, 245, 304, 506, 562, 569, 622, 664, 719], "10_000": [29, 245], "20_000": [29, 245], "30_000": [29, 245], "increas": [29, 98, 107, 245, 317, 569, 733, 948], "b4": [29, 245], "light": [29, 245], "twice": [29, 102, 245], "each": [29, 60, 99, 112, 116, 117, 119, 128, 149, 150, 164, 166, 178, 209, 215, 224, 225, 227, 228, 230, 239, 245, 259, 281, 293, 347, 353, 433, 463, 474, 488, 489, 518, 520, 525, 546, 549, 558, 569, 606, 618, 638, 646, 648, 649, 651, 660, 664, 696, 708, 721, 770, 776, 846, 892, 906, 907, 917, 948], "titl": [29, 245], "explicit": [29, 109, 119, 245, 519, 553], "integr": [29, 245], "multi_fram": [29, 245], "wb": [29, 245], "coordin": [29, 245], "advanc": [29, 245], "len": [29, 69, 119, 120, 164, 245, 312, 437, 478, 484, 495, 569, 734, 844, 850, 896, 902, 913, 948], "min_color": [29, 245], "76933c": [29, 245], "mid_color": [29, 245], "c4d79b": [29, 245], "max_color": [29, 245], "ebf1d": [29, 245], "data_bar_2010": [29, 245], "bar_color": [29, 245], "9bbb59": [29, 245], "bar_negative_color_sam": [29, 245], "bar_negative_border_color_sam": [29, 245], "000": [29, 245], "white": [29, 245], "w": [29, 245, 473, 891], "get_worksheet_by_nam": [29, 245], "fmt_titl": [29, 245], "add_format": [29, 245], "font_color": [29, 245], "4f6228": [29, 245], "font_siz": [29, 245], "12": [29, 60, 69, 70, 92, 151, 152, 166, 218, 245, 315, 323, 330, 333, 340, 345, 347, 353, 357, 427, 455, 530, 532, 533, 545, 569, 600, 601, 602, 606, 609, 627, 634, 664, 673, 734, 742, 763, 770, 776, 862, 948], "ital": [29, 245], "bold": [29, 245], "customis": [29, 245], "trend": [29, 245], "win_loss": [29, 245], "subtl": [29, 245], "tone": [29, 245], "hidden": [29, 245], "id": [29, 227, 245, 482, 483, 510, 512, 569, 648, 935, 948], "q1": [29, 245], "55": [29, 62, 115, 245], "20": [29, 140, 156, 157, 179, 181, 185, 186, 245, 266, 267, 268, 318, 347, 353, 377, 380, 540, 544, 569, 617, 664, 736, 776, 948], "35": [29, 121, 245, 318, 569, 736, 948], "q2": [29, 245], "30": [29, 69, 140, 151, 156, 179, 185, 186, 204, 222, 245, 266, 267, 268, 318, 323, 328, 333, 345, 347, 353, 357, 377, 455, 569, 600, 617, 642, 664, 734, 736, 742, 747, 770, 776, 948], "15": [29, 128, 151, 152, 157, 245, 317, 318, 347, 353, 365, 530, 569, 600, 601, 664, 733, 736, 770, 776, 788, 948], "60": [29, 140, 245, 348, 349, 492, 767, 771, 772, 910], "q3": [29, 245], "50": [29, 140, 245, 306, 307, 308, 347, 353, 569, 723, 776, 948], "40": [29, 140, 179, 245, 347, 353, 377, 569, 617, 664, 752, 776], "80": [29, 245], "q4": [29, 245], "75": [29, 245, 256, 425, 569, 799, 844, 948], "account": [29, 92, 245, 343, 360, 361, 362, 569, 766, 784, 785, 786, 948], "flavour": [29, 245], "integer_dtyp": [29, 192, 245, 624, 664], "0_": [29, 245], "just": [29, 100, 109, 172, 245, 614, 664], "unifi": [29, 245], "multi": [29, 98, 99, 245, 363, 569], "2_color_scal": [29, 245], "95b3d7": [29, 245], "ffffff": [29, 245], "base": [29, 34, 136, 143, 151, 152, 245, 358, 360, 361, 362, 400, 401, 481, 569, 580, 589, 596, 600, 601, 664, 782, 784, 785, 786, 799, 824, 825, 844, 899, 940, 948], "standardis": [29, 245], "z": [29, 92, 119, 120, 138, 159, 161, 165, 172, 245, 252, 256, 273, 304, 377, 425, 436, 492, 569, 605, 614, 630, 664, 719, 791, 910, 948], "score": [29, 245], "conjunct": [29, 245], "a123": [29, 245], "b345": [29, 245], "c567": [29, 245], "d789": [29, 245], "e101": [29, 245], "45": [29, 152, 245, 323, 347, 353, 468, 474, 601, 664, 742, 770, 776, 886, 892], "85": [29, 245], "font": [29, 245], "consola": [29, 245], "standard": [29, 199, 245, 333, 361, 446, 460, 465, 476, 557, 569, 632, 664, 752, 785, 878, 882, 894, 948], "stdev": [29, 245], "ipccompress": [30, 245], "arrow": [30, 71, 85, 100, 103, 111, 203, 245, 628, 664, 925, 930, 948], "ipc": [30, 103, 104, 111, 114, 245, 580], "binari": [30, 245, 298, 300, 301, 302, 517, 712, 714, 715, 716], "feather": [30, 103, 111, 245, 580], "lz4": [30, 33, 245, 628, 629, 664], "zstd": [30, 33, 245, 628, 629, 664], "pretti": [31, 245], "row_ori": [31, 245], "iobas": [31, 32, 105, 106, 245, 620, 645, 664], "serial": [31, 32, 245], "represent": [31, 32, 207, 245, 304, 327, 330, 333, 334, 336, 338, 340, 341, 344, 345, 348, 354, 355, 357, 506, 569, 591, 608, 664, 719, 746, 749, 751, 752, 756, 758, 761, 763, 764, 767, 768, 771, 777, 778, 780, 928, 932, 948], "orient": [31, 61, 63, 89, 91, 245, 664], "slower": [31, 89, 91, 128, 150, 178, 218, 227, 245, 599, 648, 664, 673, 948], "common": [31, 245, 574], "write_ndjson": [31, 245], "newlin": [32, 106, 112, 245], "delimit": [32, 93, 98, 99, 106, 109, 112, 180, 206, 245, 466, 884, 926, 948], "parquetcompress": [33, 245], "compression_level": [33, 245, 629, 664], "statist": [33, 98, 99, 107, 113, 133, 245, 361, 362, 394, 440, 441, 442, 443, 444, 445, 446, 447, 448, 460, 569, 629, 664, 735, 785, 786, 821, 858, 878, 948], "row_group_s": [33, 245, 629, 664], "use_pyarrow": [33, 98, 103, 107, 245, 629, 664, 929, 930, 948], "pyarrow_opt": [33, 101, 107, 110, 245], "parquet": [33, 107, 108, 113, 245, 580, 629, 664], "gzip": [33, 245, 629, 664], "lzo": [33, 245, 629, 664], "brotli": [33, 245, 629, 664], "choos": [33, 245, 628, 629, 664], "good": [33, 163, 245, 628, 629, 664], "perform": [33, 76, 86, 98, 99, 103, 107, 109, 111, 112, 113, 127, 128, 151, 152, 166, 183, 227, 245, 259, 426, 569, 600, 601, 606, 628, 629, 644, 648, 664, 673, 948], "fast": [33, 245, 366, 452, 569, 628, 629, 664, 789, 868, 948], "decompress": [33, 245, 628, 629, 664], "backward": [33, 142, 166, 245, 297, 368, 569, 595, 606, 629, 664, 791, 948], "guarante": [33, 86, 98, 99, 214, 245, 593, 629, 637, 664], "deal": [33, 245, 433, 492, 569, 629, 664, 846, 910, 948], "older": [33, 245, 629, 664], "reader": [33, 95, 98, 99, 103, 107, 245, 581, 629, 664], "higher": [33, 182, 237, 245, 432, 444, 552, 569, 619, 629, 658, 664, 845, 857, 948], "mean": [33, 98, 99, 103, 107, 109, 133, 142, 150, 180, 225, 245, 365, 368, 441, 460, 473, 521, 569, 595, 599, 610, 629, 646, 664, 735, 788, 791, 796, 854, 878, 891, 948], "smaller": [33, 138, 245, 593, 629, 664, 783, 948], "disk": [33, 103, 245, 627, 628, 629, 664], "11": [33, 115, 152, 245, 320, 321, 333, 343, 347, 353, 380, 427, 447, 461, 495, 515, 523, 559, 569, 586, 601, 602, 609, 618, 629, 634, 664, 673, 766, 770, 776, 852, 948], "22": [33, 245, 347, 353, 356, 492, 523, 629, 664, 770, 776, 779, 910], "extra": [33, 98, 101, 102, 103, 107, 110, 111, 113, 140, 245, 629, 664, 672, 948], "comput": [33, 67, 68, 73, 138, 150, 166, 209, 214, 225, 237, 245, 251, 260, 261, 262, 263, 264, 265, 285, 286, 287, 309, 310, 312, 313, 314, 315, 316, 319, 358, 364, 394, 400, 401, 418, 426, 427, 431, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 457, 458, 459, 460, 464, 504, 505, 520, 526, 528, 535, 551, 556, 569, 599, 603, 605, 606, 629, 637, 643, 646, 658, 664, 668, 674, 675, 676, 677, 678, 679, 700, 701, 702, 727, 728, 729, 730, 731, 732, 737, 782, 783, 787, 821, 824, 825, 832, 840, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 875, 876, 877, 878, 881, 922, 923, 931, 948], "reduc": [33, 98, 99, 107, 109, 111, 112, 113, 232, 233, 235, 238, 245, 455, 538, 569, 629, 653, 654, 656, 659, 664, 829, 843, 872, 918, 948], "pressur": [33, 107, 112, 113, 245, 455, 569, 629, 664, 872, 948], "improv": [33, 103, 111, 245, 629, 664], "speed": [33, 245, 259, 569, 629, 664], "minimum": [33, 119, 120, 121, 145, 174, 245, 306, 308, 360, 361, 362, 416, 422, 433, 549, 569, 616, 629, 664, 723, 725, 760, 784, 785, 786, 837, 842, 846, 948], "implement": [33, 86, 127, 128, 227, 245, 259, 569, 648, 673, 866, 867, 948], "v": [33, 69, 138, 245, 451, 569, 734, 864, 948], "At": [33, 245], "moment": [33, 132, 245, 394, 460, 569, 821, 878, 948], "argument": [33, 98, 101, 107, 110, 132, 134, 139, 150, 151, 152, 170, 178, 179, 180, 192, 198, 200, 209, 215, 218, 222, 225, 245, 347, 353, 363, 381, 426, 428, 440, 441, 442, 443, 444, 446, 447, 448, 463, 479, 485, 491, 492, 520, 522, 523, 524, 525, 536, 546, 549, 555, 558, 569, 588, 592, 599, 600, 601, 617, 624, 631, 638, 642, 646, 664, 770, 776, 802, 897, 903, 909, 931, 948], "pyarrow": [33, 85, 90, 98, 101, 103, 107, 110, 114, 115, 164, 203, 208, 209, 245, 581, 925, 929, 930, 931, 948], "write_t": [33, 245], "calendar": [35, 36, 151, 152, 166, 218, 245, 333, 343, 347, 353, 357, 440, 441, 442, 443, 444, 446, 447, 448, 569, 600, 601, 606, 664, 752, 766, 770, 776, 780], "time": [36, 38, 66, 67, 70, 92, 98, 99, 109, 140, 151, 152, 166, 218, 245, 273, 274, 275, 295, 322, 323, 324, 329, 343, 346, 352, 356, 492, 506, 507, 524, 525, 534, 540, 554, 569, 586, 600, 601, 606, 618, 664, 672, 688, 690, 741, 742, 743, 748, 766, 769, 775, 779, 910, 932, 933, 948], "time_unit": [36, 38, 70, 92, 322, 323, 329, 352, 356, 540, 741, 742, 748, 769, 775, 779], "time_zon": [36, 70, 92, 324, 346, 743, 769], "m": [36, 38, 70, 322, 323, 329, 350, 352, 356, 492, 534, 540, 741, 742, 748, 773, 775, 779, 910], "zone": [36, 70, 98, 99, 109, 324, 346, 743, 769], "zoneinfo": 36, "run": [36, 67, 128, 150, 167, 214, 227, 245, 259, 277, 317, 555, 569, 586, 591, 593, 599, 610, 614, 618, 627, 628, 629, 637, 648, 664, 673, 692, 733, 948, 955], "available_timezon": 36, "attribut": [36, 37, 38, 45, 118, 245, 563, 565, 570, 571, 575, 576, 577, 664, 942, 944, 949, 952, 953, 954], "128": [37, 62, 840, 948], "bit": [37, 39, 40, 41, 42, 43, 44, 54, 55, 56, 57, 435, 467, 569, 848, 885, 948], "neg": [37, 151, 154, 168, 194, 195, 197, 201, 245, 289, 290, 453, 454, 461, 486, 569, 600, 625, 626, 630, 644, 664, 704, 705, 798, 823, 870, 871, 879, 904, 919, 948], "scale": [37, 138, 245, 783, 948], "experiment": [37, 69, 114, 192, 216, 217, 222, 245, 317, 347, 440, 441, 442, 443, 444, 446, 447, 448, 569, 624, 639, 642, 664, 733, 770, 799, 844, 948], "progress": 37, "expect": [37, 77, 79, 84, 259, 518, 569, 608, 610, 664, 844, 948], "delta": [38, 101, 110, 199, 219, 245, 465, 513, 526, 551, 556, 557, 561, 569, 580, 632, 640, 664, 882, 938, 948], "32": [39, 42, 55, 62, 152, 162, 245, 419, 455, 569, 601, 664, 737, 767, 840, 857, 948], "sign": [41, 42, 43, 44, 343, 435, 495, 569, 766, 848, 913, 948], "inner": [45, 51, 165, 217, 245, 282, 319, 569, 605, 639, 645, 664, 697, 737, 948], "polarsdatatyp": [45, 96, 98, 99, 104, 108, 109, 118, 120, 121, 124, 128, 137, 245, 259, 303, 363, 404, 406, 475, 518, 519, 523, 536, 544, 545, 569, 590, 664, 673, 717, 827, 893, 948], "pythondatatyp": 45, "nest": [45, 51, 138, 245, 580, 783, 948], "arrai": [45, 85, 89, 98, 99, 107, 138, 203, 208, 209, 245, 273, 284, 285, 286, 287, 288, 291, 292, 300, 306, 307, 308, 312, 313, 314, 315, 316, 401, 440, 441, 443, 446, 447, 448, 452, 468, 470, 473, 474, 476, 535, 569, 664, 688, 699, 700, 701, 702, 703, 706, 707, 714, 723, 724, 725, 729, 730, 731, 732, 737, 783, 825, 853, 854, 856, 859, 860, 861, 868, 873, 886, 888, 891, 892, 894, 925, 930, 931, 939, 948], "within": [45, 116, 117, 166, 245, 463, 569, 606, 664], "wrap": [47, 92, 381, 569], "arbitrari": [47, 120], "python": [47, 70, 98, 99, 115, 128, 163, 189, 205, 227, 245, 259, 323, 404, 518, 562, 569, 574, 648, 673, 742, 753, 754, 755, 760, 929, 948], "queri": [48, 67, 100, 103, 109, 111, 112, 113, 140, 167, 179, 245, 295, 406, 476, 569, 586, 591, 593, 602, 609, 618, 627, 644, 648, 664, 672, 894, 948, 955], "pars": [48, 98, 99, 102, 109, 111, 112, 150, 192, 198, 212, 222, 225, 245, 381, 426, 463, 475, 481, 492, 520, 522, 524, 525, 540, 546, 549, 558, 569, 599, 624, 631, 636, 642, 646, 664, 802, 893, 899, 910, 948], "transform": [48, 128, 245, 404, 493, 494, 569], "lf": [50, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 602, 603, 604, 605, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 640, 641, 642, 643, 644, 645, 664], "under": [50, 61, 62, 63, 64, 563, 565, 570, 571, 575, 576, 577, 942, 944, 949, 952, 953, 954], "context": [51, 176, 245, 253, 259, 277, 369, 412, 462, 463, 512, 518, 527, 537, 540, 555, 568, 569, 580, 643, 664, 692], "manag": [51, 580], "categor": [51, 93, 123, 165, 206, 207, 245, 304, 406, 506, 569, 718, 719, 932, 948], "temporarili": [51, 151, 152, 245, 600, 601, 664], "cach": [51, 67, 103, 109, 111, 113, 123, 406, 440, 441, 442, 443, 444, 446, 447, 448, 492, 569, 586, 591, 593, 618, 627, 664, 910], "categori": [51, 69, 123, 304, 719, 734, 799, 844, 948], "until": [51, 167, 245], "finish": [51, 73, 140, 245, 672, 948], "global": [51, 120, 123, 406, 569], "invalid": [51, 98, 99, 109, 475, 476, 481, 508, 569, 893, 894, 899], "outermost": 51, "exit": [51, 125], "df1": [51, 60, 68, 116, 140, 146, 209, 220, 245], "color": [51, 227, 648], "red": [51, 227, 648], "green": [51, 227, 648], "blue": 51, "orang": [51, 131, 228, 229, 231, 232, 233, 235, 237, 238, 245, 649, 650, 652, 653, 654, 656, 658, 659], "uint8": [51, 118, 207, 245, 315, 316, 406, 500, 515, 569, 731, 732, 918, 948], "df2": [51, 60, 68, 116, 140, 146, 209, 220, 245], "yellow": 51, "black": [51, 128, 245], "join": [51, 60, 67, 166, 217, 245, 380, 426, 569, 586, 591, 593, 606, 618, 627, 639, 643, 664], "succe": [51, 98, 99, 109], "df_join": 51, "cat": [51, 69, 207, 245, 467, 493, 494, 506, 525, 565, 569, 734, 799, 844, 885, 944, 948], "u8": [51, 93, 206, 207, 245, 406, 515, 569, 926, 948], "schemadict": [52, 85, 87, 88, 89, 90, 91, 109, 191, 245, 558, 610, 623, 648, 664], "composit": 52, "dai": [53, 70, 151, 152, 164, 166, 218, 245, 329, 333, 340, 343, 344, 345, 347, 352, 353, 354, 355, 357, 440, 441, 442, 443, 444, 446, 447, 448, 532, 533, 534, 569, 600, 601, 606, 664, 766, 767, 770, 776, 778], "unsign": [54, 55, 56, 57, 435, 569, 848, 948], "could": [58, 73, 136, 151, 245, 303, 529, 538, 569, 589, 600, 664, 717, 948], "static": [58, 648], "utf": 59, "descend": [60, 198, 212, 245, 268, 291, 433, 452, 462, 463, 507, 520, 569, 631, 636, 664, 682, 706, 816, 846, 868, 880, 933, 948], "uniqu": [60, 118, 119, 121, 161, 176, 236, 245, 270, 384, 392, 420, 492, 510, 512, 550, 569, 657, 664, 684, 735, 807, 818, 834, 910, 935, 937, 948], "fill": [60, 68, 96, 124, 141, 142, 195, 216, 245, 297, 313, 316, 367, 368, 374, 380, 440, 441, 443, 446, 447, 448, 454, 478, 484, 495, 539, 569, 594, 595, 626, 643, 664, 790, 791, 838, 853, 854, 856, 859, 860, 861, 871, 896, 902, 913, 948], "sort": [60, 61, 116, 151, 152, 166, 173, 179, 180, 212, 218, 230, 239, 245, 268, 304, 369, 452, 463, 512, 514, 520, 569, 591, 600, 601, 606, 615, 617, 618, 627, 636, 651, 660, 664, 682, 719, 816, 868, 934, 937, 948], "origin": [60, 98, 99, 214, 245, 346, 393, 406, 426, 435, 468, 473, 474, 476, 478, 484, 495, 569, 637, 664, 734, 769, 827, 844, 886, 891, 892, 894, 896, 902, 913, 948], "doe": [60, 79, 85, 87, 88, 89, 91, 92, 98, 99, 101, 102, 109, 110, 114, 116, 117, 140, 164, 188, 189, 214, 222, 245, 356, 406, 510, 537, 569, 593, 610, 637, 642, 664, 672, 779, 796, 827, 873, 939, 948], "receiv": [60, 109, 128, 179, 245, 428, 569, 617, 664], "now": [60, 152, 245, 492, 601, 664], "whose": [60, 166, 180, 245, 363, 536, 569, 606, 664], "post": 60, "constrain": 60, "newli": 60, "boolean": [60, 65, 143, 145, 198, 212, 245, 255, 256, 257, 274, 298, 332, 369, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 425, 463, 475, 514, 515, 520, 558, 569, 596, 631, 636, 664, 670, 671, 683, 689, 712, 751, 792, 802, 803, 804, 806, 807, 809, 810, 811, 812, 813, 814, 818, 841, 842, 866, 885, 940, 948], "2022": [60, 70, 133, 149, 245, 323, 492, 534, 540, 742, 752, 910], "x": [60, 92, 98, 99, 100, 109, 119, 120, 138, 156, 159, 161, 165, 172, 245, 252, 256, 259, 273, 282, 359, 373, 375, 376, 377, 396, 403, 404, 417, 419, 423, 425, 429, 436, 457, 460, 488, 498, 506, 508, 515, 518, 529, 530, 531, 538, 545, 553, 559, 569, 605, 610, 614, 630, 664, 669, 673, 791, 819, 875, 878, 906, 932, 948], "y": [60, 92, 119, 120, 138, 159, 161, 165, 172, 245, 252, 256, 273, 282, 350, 359, 375, 376, 396, 403, 423, 425, 436, 492, 508, 515, 531, 559, 569, 605, 614, 630, 664, 669, 773, 910, 948], "df3": [60, 245], "set_tbl_format": 60, "09": [60, 152, 245, 323, 333, 601, 664, 746], "01": [60, 70, 133, 149, 151, 152, 218, 245, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 492, 534, 600, 601, 664, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 910], "02": [60, 70, 115, 149, 151, 152, 218, 245, 322, 323, 329, 330, 331, 338, 339, 340, 348, 349, 352, 354, 356, 449, 492, 534, 569, 600, 601, 664, 741, 742, 744, 745, 748, 749, 750, 753, 754, 755, 756, 758, 760, 761, 762, 763, 764, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 910], "03": [60, 70, 92, 151, 152, 218, 245, 322, 323, 324, 328, 329, 331, 339, 340, 346, 347, 348, 349, 350, 352, 353, 354, 356, 600, 601, 664, 741, 742, 743, 746, 747, 748, 749, 750, 753, 754, 755, 756, 758, 760, 762, 763, 764, 767, 768, 769, 770, 771, 772, 773, 775, 777, 778, 779], "af1": 60, "af2": 60, "af3": 60, "keep": [60, 98, 99, 109, 214, 217, 218, 245, 393, 406, 522, 569, 637, 639, 664, 734, 827, 844, 948], "easili": [60, 192, 222, 225, 245, 523, 558, 624, 642, 646, 664], "dot": [60, 569, 627, 664, 948], "product": [60, 132, 245, 315, 319, 518, 569, 731, 737, 948], "fill_nul": [60, 141, 245, 492, 569, 594, 643, 664, 910, 948], "167": 60, "47": 60, "callabl": [61, 62, 63, 64, 109, 128, 145, 179, 227, 245, 259, 295, 404, 405, 428, 439, 518, 529, 530, 538, 545, 553, 569, 610, 617, 648, 664, 673, 710, 852, 948], "decor": [61, 62, 63, 64, 120, 121, 128, 245, 259, 569, 673, 948], "access": [61, 62, 63, 64, 163, 188, 189, 245, 406, 569, 643, 664], "by_first_letter_of_column_nam": 61, "f": [61, 99, 133, 149, 164, 203, 213, 216, 245, 252, 259, 295, 455, 472, 492, 518, 524, 529, 530, 538, 545, 569, 710, 890, 910], "fromkei": [61, 63], "by_first_letter_of_column_valu": 61, "starts_with": [61, 467, 471, 889], "slice": [61, 67, 138, 154, 164, 201, 245, 281, 293, 439, 440, 441, 442, 443, 444, 446, 447, 448, 569, 586, 591, 593, 610, 618, 627, 628, 629, 664, 696, 708, 783, 798, 852, 853, 854, 855, 856, 857, 859, 860, 861, 919, 948], "to_seri": [61, 65, 245, 295, 710], "xx": [61, 63], "xy": [61, 63], "yy": [61, 63], "yz": [61, 63], "a2": [61, 63], "b1": [61, 63], "b2": [61, 63], "pow_n": 62, "powersofn": 62, "next": [62, 297, 433, 569, 846, 948], "p": [62, 179, 245, 428, 558, 569, 617, 664], "ceil": [62, 569, 948], "previou": [62, 125, 427, 497, 569, 840, 948], "floor": [62, 569, 948], "nearest": [62, 166, 182, 237, 245, 305, 372, 432, 444, 552, 569, 606, 619, 658, 664, 720, 794, 801, 845, 857, 948], "24": [62, 115, 128, 138, 152, 245, 315, 317, 331, 419, 569, 601, 664, 733, 750, 948], "001": [62, 334, 335, 337, 342, 534, 757, 759, 765], "next_pow2": 62, "prev_pow2": 62, "nearest_pow2": 62, "split_by_column_dtyp": 63, "collect": [63, 67, 109, 110, 114, 167, 203, 245, 259, 385, 519, 524, 540, 558, 569, 588, 589, 592, 593, 594, 595, 596, 597, 599, 600, 602, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 616, 617, 619, 621, 622, 624, 625, 626, 630, 631, 632, 633, 634, 635, 637, 638, 640, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 664, 809, 948], "31": [64, 323, 327, 328, 340, 354, 492, 532, 533, 540, 742, 746, 747, 910], "42": [64, 152, 153, 245, 601, 664, 797, 948], "961": 64, "1764": 64, "4160": 64, "eager": [65, 151, 216, 245, 519, 540, 544, 554, 558, 568, 580, 600, 664], "evalu": [65, 141, 143, 166, 245, 256, 269, 317, 379, 381, 385, 406, 425, 517, 519, 535, 554, 558, 562, 569, 596, 603, 605, 606, 664, 683, 733, 940, 948], "immedi": [65, 433, 519, 554, 558, 569, 846, 948], "arg_tru": [65, 569, 948], "u32": [65, 151, 177, 223, 228, 236, 238, 245, 253, 266, 267, 268, 269, 270, 271, 272, 275, 284, 311, 312, 327, 330, 334, 338, 340, 344, 345, 348, 354, 355, 397, 406, 420, 424, 433, 451, 468, 477, 480, 506, 510, 520, 527, 550, 569, 600, 644, 649, 657, 659, 664, 682, 683, 684, 699, 717, 746, 749, 756, 758, 761, 763, 764, 767, 768, 771, 777, 778, 799, 846, 886, 895, 898, 932, 935, 937, 948], "build": [66, 86], "wa": 66, "compil": [66, 271, 272, 686, 687], "gate": 66, "info": [66, 101, 110, 115, 332, 751], "otherwis": [66, 173, 192, 245, 299, 306, 307, 308, 360, 361, 362, 435, 467, 469, 562, 569, 615, 624, 664, 673, 713, 723, 724, 725, 784, 785, 786, 848, 866, 867, 885, 887, 948], "version": [66, 69, 93, 101, 110, 115, 365, 492, 551, 553, 556, 569, 788, 948], "depend": [66, 115, 259, 271, 272, 412, 433, 518, 537, 540, 569, 686, 687, 846, 948], "host": [66, 98, 103, 107, 111, 113], "git": 66, "lazy_fram": 67, "type_coercion": [67, 586, 591, 593, 618, 627, 628, 629, 664], "predicate_pushdown": [67, 586, 591, 593, 610, 618, 627, 628, 629, 664], "projection_pushdown": [67, 586, 591, 593, 610, 618, 627, 628, 629, 664], "simplify_express": [67, 586, 591, 593, 618, 627, 628, 629, 664], "no_optim": [67, 586, 593, 610, 618, 628, 629, 664], "slice_pushdown": [67, 586, 591, 593, 610, 618, 627, 628, 629, 664], "common_subplan_elimin": [67, 586, 591, 593, 618, 627, 664], "graph": [67, 167, 245, 603, 643, 664], "parallel": [67, 68, 95, 100, 107, 113, 151, 166, 167, 179, 245, 277, 317, 569, 580, 600, 605, 606, 664, 692, 733, 948], "threadpool": 67, "coercion": [67, 436, 569, 586, 591, 593, 618, 627, 628, 629, 664], "optim": [67, 107, 109, 111, 112, 113, 163, 167, 179, 183, 189, 214, 245, 586, 591, 593, 610, 618, 627, 628, 629, 637, 644, 664], "predic": [67, 109, 111, 112, 113, 114, 143, 188, 245, 369, 514, 538, 569, 586, 591, 593, 596, 610, 618, 621, 627, 628, 629, 644, 664, 792, 866, 867, 948], "pushdown": [67, 586, 591, 593, 610, 618, 621, 627, 628, 629, 644, 664, 866, 867, 948], "project": [67, 109, 111, 112, 113, 259, 462, 463, 569, 586, 591, 593, 610, 618, 621, 627, 628, 629, 645, 664], "turn": [67, 98, 99, 109, 123, 512, 569, 586, 591, 593, 610, 618, 628, 629, 664], "off": [67, 98, 99, 109, 123, 512, 569, 586, 591, 593, 610, 618, 628, 629, 664], "Will": [67, 213, 245, 586, 591, 593, 618, 627, 664, 948], "try": [67, 80, 82, 98, 99, 102, 103, 107, 109, 111, 113, 586, 591, 593, 618, 627, 664], "branch": [67, 586, 591, 593, 618, 627, 664], "subplan": [67, 586, 591, 593, 618, 627, 664], "occur": [67, 275, 418, 433, 569, 586, 591, 593, 618, 627, 664, 690, 832, 846, 948], "union": [67, 68, 586, 591, 593, 618, 627, 664, 737, 809, 867, 948], "part": [67, 85, 488, 489, 586, 591, 593, 618, 627, 643, 664, 746, 749, 756, 758, 761, 763, 764, 771, 780, 906, 907], "fashion": [67, 165, 245, 586, 591, 593, 618, 627, 664], "item": [68, 99, 190, 245, 274, 280, 282, 365, 450, 489, 569, 689, 695, 697, 788, 863, 907, 948], "iter": [68, 150, 151, 152, 163, 164, 178, 188, 189, 192, 198, 212, 213, 222, 224, 225, 245, 317, 363, 426, 463, 520, 522, 523, 524, 525, 536, 546, 549, 555, 558, 562, 569, 599, 600, 601, 624, 631, 636, 642, 646, 664, 733, 948], "rechunk": [68, 85, 90, 98, 99, 103, 107, 109, 111, 112, 113, 140, 245, 569, 672, 721, 833, 948], "concatmethod": 68, "vertic": [68, 140, 216, 220, 245, 466, 546, 549, 884], "aggreg": [68, 98, 99, 107, 145, 151, 169, 170, 171, 174, 176, 180, 181, 182, 199, 200, 216, 219, 225, 226, 229, 231, 245, 253, 369, 399, 404, 426, 439, 440, 441, 442, 443, 444, 446, 447, 448, 512, 529, 530, 531, 538, 543, 546, 549, 553, 559, 569, 600, 610, 611, 612, 613, 616, 619, 632, 633, 640, 646, 647, 650, 652, 664, 852, 853, 854, 856, 859, 860, 861, 948], "concaten": [68, 145, 179, 245, 428, 524, 525, 569, 617, 664, 721, 833, 948], "sure": [68, 85, 90, 98, 99, 100, 103, 107, 183, 245, 519], "contigu": [68, 85, 90, 98, 99, 103, 107, 109, 111, 112, 113, 183, 245], "diagon": [68, 213, 245], "strategi": [68, 98, 118, 119, 120, 121, 142, 151, 165, 166, 175, 245, 259, 295, 368, 569, 595, 600, 605, 606, 664, 710, 791, 948], "vstack": [68, 140, 245], "find": [68, 144, 245, 451, 569, 864, 948], "miss": [68, 98, 99, 109, 141, 245, 297, 360, 361, 362, 374, 380, 387, 389, 556, 569, 594, 664, 784, 785, 786, 939, 948], "stack": [68, 156, 220, 245], "length": [68, 69, 96, 109, 119, 124, 151, 152, 197, 245, 290, 317, 347, 353, 413, 439, 440, 441, 442, 443, 444, 446, 447, 448, 461, 478, 480, 484, 486, 495, 519, 569, 600, 601, 618, 630, 664, 705, 710, 721, 733, 734, 742, 770, 776, 822, 838, 844, 852, 853, 854, 855, 856, 857, 859, 860, 861, 879, 896, 898, 902, 904, 913, 948], "don": [68, 128, 214, 216, 245, 259, 277, 317, 518, 569, 637, 664, 673, 692, 733, 865, 939, 948], "t": [68, 102, 109, 128, 179, 214, 216, 245, 259, 277, 317, 358, 360, 361, 362, 428, 479, 485, 491, 492, 518, 562, 569, 617, 637, 664, 673, 692, 733, 782, 784, 785, 786, 865, 897, 903, 909, 910, 939, 948], "relev": 68, "execut": [68, 167, 245, 277, 583, 610, 618, 664, 692], "df_h1": 68, "l1": 68, "l2": 68, "df_h2": 68, "r1": 68, "r2": 68, "r3": 68, "df_d1": 68, "df_d2": 68, "bin": [69, 481, 515, 563, 569, 734, 799, 844, 899, 942, 948], "label": [69, 439, 440, 441, 442, 443, 444, 446, 447, 448, 569, 618, 664, 734, 844, 852, 853, 854, 855, 856, 857, 859, 860, 861, 948], "break_point_label": [69, 734, 844, 948], "break_point": [69, 734, 799, 844, 948], "category_label": [69, 734, 844, 948], "discret": [69, 276, 318, 358, 569, 691, 734, 736, 782, 799, 844, 948], "deprec": [69, 93, 365, 492, 551, 556, 569, 664, 788, 948], "sinc": [69, 93, 101, 110, 329, 365, 492, 540, 551, 556, 569, 748, 788, 948], "assign": [69, 119, 151, 245, 433, 488, 489, 569, 600, 664, 734, 827, 844, 846, 906, 907, 948], "breakpoint": [69, 734, 844, 948], "inf": [69, 120, 121, 265, 383, 386, 508, 569, 679, 734, 799, 806, 810, 826, 840, 844, 936, 948], "low": [70, 151, 245, 348, 519, 600, 664], "high": [70, 151, 245, 348, 519, 600, 664], "interv": [70, 151, 152, 218, 245, 332, 347, 348, 353, 381, 440, 441, 442, 443, 444, 446, 447, 448, 569, 600, 601, 664, 746, 748, 749, 751, 756, 758, 761, 763, 764, 767, 768, 770, 771, 773, 775, 776, 777, 778, 780, 802, 948], "timedelta": [70, 151, 152, 218, 245, 327, 329, 330, 333, 338, 340, 343, 344, 345, 347, 348, 350, 352, 353, 354, 355, 357, 440, 441, 442, 443, 444, 446, 447, 448, 569, 600, 601, 664, 753, 755, 760, 766, 770, 776, 836, 837, 948], "1d": [70, 151, 152, 166, 218, 245, 322, 331, 339, 343, 347, 353, 356, 440, 441, 442, 443, 444, 446, 447, 448, 569, 600, 601, 606, 664, 741, 748, 750, 753, 754, 755, 760, 762, 766, 770, 773, 775, 776, 778, 779], "closedinterv": [70, 151, 152, 245, 381, 440, 441, 442, 443, 444, 446, 447, 448, 569, 600, 601, 664, 802, 948], "lower": [70, 109, 151, 182, 237, 245, 381, 402, 432, 435, 444, 519, 552, 569, 593, 600, 619, 658, 664, 802, 826, 845, 848, 857, 936, 948], "bound": [70, 98, 99, 138, 151, 245, 280, 294, 381, 402, 511, 519, 569, 600, 664, 695, 709, 783, 802, 826, 936, 948], "upper": [70, 98, 99, 138, 151, 245, 381, 511, 519, 569, 600, 664, 783, 802, 826, 936, 948], "period": [70, 151, 152, 194, 195, 245, 289, 347, 353, 360, 361, 362, 427, 453, 454, 569, 600, 601, 625, 626, 664, 704, 770, 776, 784, 785, 786, 840, 870, 871, 948], "like": [70, 86, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 159, 161, 165, 245, 277, 415, 433, 546, 549, 559, 569, 593, 620, 664, 692, 846, 948], "durat": [70, 166, 218, 245, 328, 331, 335, 337, 339, 342, 349, 356, 506, 569, 606, 664, 747, 750, 757, 759, 762, 765, 772, 779, 932, 948], "3d12h4m25": [70, 151, 152, 166, 218, 245, 347, 353, 600, 601, 606, 664, 770, 776], "hour": [70, 151, 152, 166, 218, 245, 343, 347, 353, 440, 441, 442, 443, 444, 446, 447, 448, 533, 534, 569, 600, 601, 606, 664, 766, 770, 776], "minut": [70, 151, 152, 166, 218, 245, 343, 347, 353, 440, 441, 442, 443, 444, 446, 447, 448, 533, 534, 569, 600, 601, 606, 664, 766, 770, 776], "tempor": [70, 151, 152, 163, 189, 205, 245, 381, 440, 441, 442, 443, 444, 446, 447, 448, 569, 580, 600, 601, 664, 802, 817, 948], "window": [70, 151, 152, 245, 317, 347, 353, 360, 361, 362, 426, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 524, 569, 600, 601, 664, 733, 770, 776, 784, 785, 786, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 948], "timezon": [70, 492, 910], "granular": 70, "finer": 70, "permut": 70, "1mo": [70, 151, 152, 166, 218, 245, 324, 328, 343, 346, 347, 350, 353, 440, 441, 442, 443, 444, 446, 447, 448, 569, 600, 601, 606, 664, 743, 747, 763, 766, 767, 768, 769, 770, 776, 777], "dtrang": 70, "1985": 70, "04": [70, 114, 151, 218, 245, 323, 324, 327, 328, 331, 338, 339, 340, 344, 346, 347, 348, 349, 350, 354, 355, 356, 492, 534, 600, 664, 743, 747, 750, 756, 758, 761, 762, 763, 764, 768, 769, 771, 772, 773, 777, 778, 779, 910], "05": [70, 114, 116, 117, 166, 218, 245, 323, 324, 328, 346, 348, 350, 606, 664, 742, 743, 744, 745, 746, 747, 769, 770, 774, 776, 778], "07": [70, 323, 327, 344, 346, 347, 353, 355, 492, 540, 742, 746, 778, 910], "08": [70, 116, 117, 152, 245, 323, 347, 492, 534, 601, 664, 770, 776, 910], "america": [70, 769], "new_york": [70, 769], "\u03bc": [70, 92, 151, 152, 166, 218, 245, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 492, 540, 600, 601, 606, 664, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 910], "est": [70, 769], "encount": [71, 151, 245, 421, 422, 475, 476, 526, 529, 538, 556, 569, 600, 664, 836, 837, 893, 894, 948], "duplic": [74, 159, 165, 166, 214, 245, 382, 569, 605, 606, 637, 664, 804, 948], "certain": [75, 101, 110, 157, 218, 245, 523, 586, 618, 628, 629, 664, 948], "least": [77, 120, 427, 512, 569, 840, 937, 948], "unexpect": [78, 245], "caus": [78, 86, 98, 99, 109, 127, 140, 245, 672, 948], "panic": 78, "combin": [80, 82, 151, 152, 153, 166, 218, 245, 256, 269, 353, 425, 479, 485, 491, 569, 600, 601, 606, 627, 664, 776, 897, 903, 909], "mismatch": 80, "incompat": 82, "pa": [85, 114], "chunkedarrai": [85, 175, 245, 737, 948], "schemadefinit": [85, 87, 88, 89, 91, 245, 664], "schema_overrid": [85, 87, 88, 89, 90, 91, 164, 245, 664], "copi": [85, 86, 127, 129, 130, 164, 203, 209, 222, 245, 366, 495, 569, 584, 585, 642, 664, 669, 722, 726, 739, 789, 913, 925, 930, 931, 948], "closest": 85, "pair": [85, 87, 88, 89, 91, 184, 245, 621, 664], "declar": [85, 87, 88, 89, 91, 245, 664], "sever": [85, 87, 88, 89, 91, 245, 664], "wai": [85, 87, 88, 89, 91, 134, 150, 164, 179, 198, 225, 245, 426, 428, 463, 523, 569, 588, 599, 617, 631, 646, 664], "As": [85, 87, 88, 89, 91, 102, 245, 554, 664], "auto": [85, 87, 88, 89, 91, 107, 113, 213, 245, 492, 664], "automat": [85, 87, 88, 89, 91, 92, 98, 99, 100, 109, 120, 121, 192, 222, 245, 479, 485, 491, 492, 624, 642, 664, 897, 903, 909, 910, 948], "equival": [85, 87, 88, 89, 91, 101, 162, 176, 245, 252, 256, 359, 373, 375, 376, 396, 403, 417, 419, 423, 425, 429, 480, 498, 508, 515, 569, 664, 820, 898, 911, 912, 948], "form": [85, 87, 88, 89, 91, 163, 189, 216, 245, 427, 569, 664, 840, 948], "them": [85, 87, 88, 89, 91, 109, 140, 151, 152, 166, 173, 218, 245, 282, 381, 421, 422, 524, 569, 600, 601, 606, 615, 664, 672, 697, 836, 837, 948], "dimens": [85, 87, 89, 91, 245, 437, 569, 664, 850, 948], "construct": [85, 87, 88, 89, 90, 91, 245, 406, 569, 598, 620, 664, 948], "allow_copi": [86, 127], "interchang": [86, 127], "protocol": [86, 100, 127], "__dataframe__": 86, "convers": [86, 127, 164, 209, 245, 492, 580, 910, 929, 930, 931, 948], "detail": [86, 100, 116, 117, 127, 245, 664, 956], "latest": [86, 101, 110, 127, 374, 413, 569], "index": [86, 90, 94, 100, 115, 127, 144, 151, 152, 157, 166, 180, 186, 188, 197, 210, 218, 223, 245, 253, 266, 267, 268, 270, 271, 272, 280, 290, 294, 343, 440, 441, 442, 443, 444, 446, 447, 448, 451, 461, 473, 486, 502, 569, 600, 601, 606, 630, 644, 664, 680, 681, 682, 683, 684, 686, 687, 695, 705, 709, 766, 838, 864, 867, 879, 891, 904, 920, 948], "throw": [86, 303, 475, 476, 569, 717, 893, 894, 948], "runtimeerror": 86, "from_panda": [86, 102], "from_arrow": 86, "effici": [86, 164, 245], "map": [87, 88, 98, 99, 103, 104, 107, 108, 109, 111, 128, 137, 163, 184, 188, 189, 204, 245, 347, 353, 405, 406, 512, 518, 569, 590, 621, 664, 770, 776, 827, 948], "clone": [87, 88, 89, 90, 91, 129, 208, 209, 245, 584, 664, 722, 929, 930, 931, 939, 948], "dimension": [87, 89, 91, 245, 664, 948], "infer_schema_length": [88, 91, 98, 99, 102, 109, 112, 245, 664], "mani": [88, 91, 100, 140, 245, 672, 948], "scan": [88, 91, 98, 99, 107, 109, 110, 111, 112, 113, 114, 593, 602, 609, 664], "slow": [88, 91, 98, 99, 109, 259, 317, 569, 733, 948], "NOT": [88, 116, 117], "typic": [88, 128, 245, 673, 948], "clearer": 88, "load": [88, 90, 101, 110, 245, 580, 602, 609, 664], "want": [88, 128, 140, 176, 245, 259, 306, 307, 308, 369, 404, 406, 440, 441, 442, 443, 444, 446, 447, 448, 529, 538, 569, 586, 602, 609, 664, 672, 673, 723, 724, 725, 930, 948], "_partial_": [88, 245, 664], "omit": [88, 92, 119, 120, 121, 176, 245], "partial": 88, "present": [88, 116, 120, 385, 569, 939, 948], "np": [89, 143, 245, 502, 569, 664, 806, 810, 811, 812, 852, 920, 948], "ndarrai": [89, 143, 208, 245, 502, 569, 664, 737, 864, 867, 920, 930, 948], "numpi": [89, 115, 132, 208, 209, 245, 421, 422, 569, 664, 806, 810, 811, 812, 836, 837, 852, 864, 930, 931, 939, 948], "columnar": [89, 91, 163, 189, 245], "interpret": [89, 91, 98, 99, 109, 245, 664], "yield": [89, 91, 98, 99, 109, 138, 140, 213, 245, 664, 672, 783, 948], "conclus": [89, 91, 245, 664], "pd": [90, 102, 506, 569, 932, 948], "nan_to_nul": [90, 245, 664, 948], "include_index": 90, "datetimeindex": [90, 737, 948], "panda": [90, 102, 115, 209, 245, 506, 569, 664, 931, 932, 948], "instal": [90, 98, 99, 100, 103, 107, 115, 132, 208, 209, 245, 627, 664, 931, 948], "nan": [90, 116, 117, 120, 127, 141, 209, 245, 320, 321, 359, 367, 375, 376, 380, 387, 389, 390, 391, 396, 403, 407, 416, 421, 422, 423, 508, 526, 556, 569, 594, 664, 675, 679, 738, 790, 811, 812, 836, 837, 852, 931, 948], "convert": [90, 93, 101, 102, 110, 127, 204, 205, 206, 207, 208, 211, 245, 295, 324, 481, 492, 664, 710, 743, 899, 910, 917, 928, 929, 930, 931, 939, 948], "pd_df": 90, "pd_seri": 90, "tbl": [92, 95, 99], "reconstruct": 92, "repr": [92, 120, 121], "need": [92, 98, 99, 102, 116, 117, 151, 152, 196, 208, 245, 295, 406, 455, 477, 569, 600, 601, 664, 872, 895, 948], "trim": 92, "whitespac": [92, 479, 485, 491, 897, 903, 909], "prompt": 92, "extract": [92, 327, 328, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 348, 349, 354, 355, 357, 428, 474, 475, 476, 569, 744, 745, 746, 747, 749, 750, 752, 756, 757, 758, 759, 761, 762, 763, 764, 765, 767, 768, 771, 772, 774, 777, 778, 780, 892, 893, 894], "to_init_repr": [92, 245, 948], "handl": [92, 98, 99, 109, 114, 276, 318, 495, 569, 691, 736, 913, 948], "truncat": [92, 151, 245, 600, 618, 664], "identifi": [92, 172, 178, 214, 245, 614, 637, 664], "compound": 92, "struct": [92, 176, 192, 211, 215, 222, 245, 295, 406, 475, 488, 489, 512, 529, 530, 531, 545, 569, 624, 638, 642, 664, 710, 893, 906, 907], "neither": [92, 190, 245], "though": 92, "plan": [92, 166, 167, 245, 583, 591, 598, 605, 606, 620, 627, 645, 664], "source_ac": 92, "source_cha": 92, "ident": [92, 129, 130, 245, 584, 585, 664, 722, 726, 948], "timestamp": [92, 346, 540, 769], "tor_id": 92, "nnel_id": 92, "asia": [92, 744, 745, 774], "tokyo": 92, "123456780": 92, "9876543210": 92, "56": [92, 504, 569], "59": [92, 115, 323, 338, 348, 533, 742, 761, 771], "663053": 92, "jst": 92, "803065983": 92, "2055938745": 92, "38": [92, 120], "18": [92, 152, 245, 316, 347, 353, 356, 380, 393, 569, 601, 618, 664, 779], "050545": 92, "source_actor_id": 92, "source_channel_id": 92, "dummi": [93, 206, 245, 926, 948], "to_dummi": [93, 245, 948], "foo_1": [93, 206, 245], "foo_2": [93, 206, 245], "bar_3": [93, 206, 245], "bar_4": [93, 206, 245], "ham_a": [93, 206, 245], "ham_b": [93, 206, 245], "datatypeclass": 94, "get": [94, 104, 108, 122, 131, 137, 147, 148, 151, 152, 154, 155, 159, 161, 168, 175, 188, 191, 193, 197, 201, 221, 230, 239, 245, 253, 266, 267, 268, 270, 279, 283, 284, 296, 312, 313, 314, 315, 316, 329, 370, 378, 382, 384, 392, 395, 398, 407, 408, 409, 412, 414, 416, 421, 422, 432, 461, 465, 477, 480, 500, 501, 509, 513, 537, 542, 546, 547, 548, 549, 557, 560, 561, 569, 587, 590, 597, 600, 601, 602, 607, 609, 623, 630, 634, 641, 651, 660, 664, 680, 681, 682, 683, 684, 694, 698, 699, 711, 721, 729, 730, 731, 732, 748, 795, 798, 802, 804, 807, 818, 823, 828, 830, 831, 833, 836, 837, 841, 842, 845, 879, 882, 895, 898, 919, 925, 926, 934, 938, 939, 948], "uint32": [94, 115, 138, 245, 268, 271, 272, 284, 327, 330, 334, 336, 338, 340, 341, 344, 345, 348, 354, 355, 436, 468, 477, 480, 502, 506, 569, 683, 686, 687, 699, 717, 746, 749, 756, 758, 761, 763, 764, 767, 768, 771, 777, 778, 783, 865, 886, 932, 948], "regular": [94, 163, 188, 189, 218, 245, 363, 523, 536, 546, 549, 559, 569], "uint64": [94, 153, 245, 271, 272, 377, 435, 569, 686, 687, 797, 848, 948], "bigidx": 94, "read": [95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 140, 245, 404, 562, 569, 593, 598, 620, 664, 672, 948], "batch": [95, 99, 112, 610, 664], "over": [95, 98, 99, 101, 109, 120, 128, 140, 163, 164, 188, 189, 213, 224, 227, 245, 259, 317, 368, 380, 404, 405, 439, 440, 441, 442, 443, 444, 446, 447, 448, 518, 529, 530, 538, 545, 553, 569, 648, 672, 673, 733, 852, 853, 854, 856, 860, 948], "fetch": [95, 109, 167, 245, 584, 586, 602, 609, 664], "ideal": 95, "read_csv_batch": [95, 581], "tpch": [95, 99], "tables_scale_100": [95, 99], "lineitem": [95, 99, 100], "try_parse_d": [95, 98, 99, 109], "In": [96, 101, 110, 113, 120, 121, 124, 128, 138, 140, 151, 152, 176, 245, 259, 412, 569, 600, 601, 664, 672, 783, 847, 948], "probabl": [96, 124, 358, 569, 782, 948], "n_row": [97, 98, 99, 103, 107, 109, 111, 112, 113, 164, 245, 593, 664], "accept": [97, 98, 99, 101, 103, 107, 139, 150, 192, 198, 212, 222, 225, 245, 252, 363, 381, 426, 463, 515, 520, 522, 523, 524, 525, 536, 546, 549, 558, 569, 592, 599, 624, 631, 636, 642, 646, 664, 802, 948], "stop": [97, 98, 99, 103, 107, 109, 111, 112, 113, 327, 329, 330, 332, 333, 338, 340, 344, 345, 347, 348, 352, 353, 354, 355, 357, 741, 743, 746, 748, 749, 751, 756, 758, 761, 763, 764, 767, 768, 769, 770, 771, 773, 775, 776, 777, 778, 779, 780], "textio": 98, "new_column": [98, 99, 102, 109], "comment_char": [98, 99, 109], "quote_char": [98, 99, 109], "skip_row": [98, 99, 109], "missing_utf8_is_empty_str": [98, 99, 109], "ignore_error": [98, 99, 109], "n_thread": [98, 99], "8192": 98, "csvencod": [98, 99, 109], "low_memori": [98, 99, 107, 109, 112, 113], "storage_opt": [98, 101, 103, 107, 110, 111, 113], "skip_rows_after_head": [98, 99, 109], "row_count_nam": [98, 99, 103, 107, 109, 111, 112, 113], "row_count_offset": [98, 99, 103, 107, 109, 111, 112, 113], "sample_s": [98, 99], "eol_char": [98, 99, 109], "we": [98, 99, 102, 109, 166, 245, 277, 481, 544, 562, 606, 610, 664, 673, 692, 799, 844, 899, 948], "handler": [98, 99, 102], "g": [98, 99, 101, 102, 103, 107, 110, 111, 113, 216, 245, 252, 259, 363, 455, 536, 569, 621, 664, 865, 930, 948], "builtin": [98, 99, 102], "stringio": [98, 99], "fsspec": [98, 99, 103, 107, 110, 111, 113, 115], "remot": [98, 99, 103, 107], "first": [98, 99, 102, 109, 112, 128, 149, 151, 154, 166, 168, 175, 179, 180, 201, 207, 213, 214, 218, 230, 245, 268, 270, 277, 280, 281, 317, 343, 347, 378, 384, 398, 406, 428, 451, 463, 473, 475, 476, 482, 483, 522, 529, 538, 542, 562, 569, 586, 600, 602, 606, 609, 617, 637, 643, 651, 664, 682, 692, 695, 696, 710, 733, 735, 766, 770, 798, 807, 823, 827, 864, 891, 893, 894, 900, 901, 919, 928, 948], "autogener": [98, 99, 109], "column_x": [98, 99, 109], "enumer": [98, 99, 109, 164, 245], "shorter": [98, 99], "remain": [98, 99, 109, 138, 245, 259, 488, 489, 569, 610, 664, 783, 906, 907, 948], "comment": [98, 99, 109], "instanc": [98, 99, 109, 120, 121, 140, 145, 245, 295, 303, 413, 440, 441, 442, 443, 444, 446, 447, 448, 529, 538, 569, 610, 644, 664, 672, 717, 948], "special": [98, 99, 109, 673, 948], "escap": [98, 99, 109], "dure": [98, 99, 109, 125, 140, 245, 672, 948], "equal": [98, 99, 109, 116, 117, 123, 146, 151, 166, 173, 245, 359, 375, 396, 439, 440, 441, 442, 443, 444, 446, 447, 448, 477, 478, 484, 495, 519, 569, 600, 606, 615, 664, 852, 853, 854, 855, 856, 857, 859, 860, 861, 865, 895, 896, 902, 913, 948], "would": [98, 99, 109, 268, 280, 412, 433, 520, 569, 682, 695, 846, 930, 948], "prefer": [98, 99, 101, 109, 128, 140, 163, 188, 189, 227, 245, 259, 439, 569, 648, 664, 672, 673, 852, 948], "treat": [98, 99, 109, 467, 482, 483, 885, 900, 901], "10000": [98, 164, 245, 495], "check": [98, 99, 109, 116, 117, 146, 160, 162, 245, 255, 257, 274, 298, 301, 302, 381, 385, 467, 471, 490, 569, 610, 664, 670, 671, 689, 712, 715, 716, 803, 805, 808, 809, 815, 816, 817, 819, 820, 865, 885, 889, 908, 948], "might": [98, 99, 109, 259, 412, 510, 569, 931, 948], "issu": [98, 99, 102, 109, 315, 316, 500, 569, 731, 732, 918, 948], "iso8601": [98, 99, 109], "naiv": [98, 99, 109, 323, 742], "alwai": [98, 128, 227, 245, 412, 562, 610, 648, 664, 673, 948], "physic": [98, 99, 166, 245, 304, 506, 569, 583, 605, 606, 664, 719, 932, 948], "cpu": [98, 99], "system": [98, 99], "wrongli": 98, "done": [98, 99, 109, 114, 149, 166, 245, 258, 303, 478, 484, 569, 606, 664, 717, 896, 902, 948], "buffer": [98, 99, 138, 163, 245, 783, 948], "modifi": [98, 99, 109, 125, 156, 163, 220, 245, 269, 346, 356, 569, 769, 779, 849, 911, 912, 948], "lossi": [98, 99, 109], "decod": [98, 99], "im": [98, 99], "usag": [98, 99, 109, 120, 121, 196, 245, 873, 948], "expens": [98, 99, 107, 109, 112, 113, 128, 163, 188, 189, 213, 214, 245, 259, 569, 637, 664, 672, 673, 948], "nativ": [98, 103, 107, 128, 163, 189, 205, 227, 245, 259, 569, 574, 648, 673, 948], "parser": 98, "even": 98, "regard": [98, 526, 556], "sens": [98, 103, 107, 111, 113, 151, 152, 173, 218, 245, 600, 601, 615, 664], "particular": [98, 103, 107, 111, 113, 138, 245, 783, 948], "storag": [98, 101, 103, 107, 110, 111, 113], "skip": [98, 99, 102, 107, 109, 113, 216, 245, 673, 948], "offset": [98, 99, 103, 107, 109, 111, 112, 113, 151, 152, 197, 218, 223, 245, 290, 343, 347, 353, 461, 486, 492, 569, 600, 601, 630, 644, 664, 705, 766, 770, 776, 879, 904, 910, 948], "row_count": [98, 99, 103, 107, 109, 111, 112, 113], "sampl": [98, 99, 227, 245, 460, 569, 648, 878, 948], "estim": [98, 99, 138, 245, 361, 362, 394, 569, 783, 785, 786, 821, 948], "alloc": [98, 99, 138, 183, 245, 783, 948], "scan_csv": [98, 99, 628, 629, 664], "lazili": [98, 99, 109, 110, 111, 112, 113, 406, 569], "glob": [98, 99, 109, 111, 112, 113], "pattern": [98, 99, 109, 111, 112, 113, 163, 245, 411, 467, 468, 473, 474, 482, 483, 866, 867, 885, 886, 891, 892, 900, 901, 948], "store": [98, 107, 140, 163, 189, 245, 672, 948], "continu": [98, 107, 460, 569, 878, 948], "benchmark": [98, 107], "50000": 99, "batchedcsvread": [99, 580], "upon": 99, "creation": 99, "gather": 99, "next_batch": 99, "big": 99, "interest": 99, "seen_group": 99, "big_fil": 99, "while": [99, 101, 102, 110, 120, 121, 163, 172, 213, 245, 614, 664], "df_current_batch": 99, "concat": [99, 721, 833, 948], "partition_df": 99, "partition_bi": [99, 164, 245], "as_dict": [99, 178, 245], "fh": 99, "write_csv": [99, 109, 245], "els": [99, 562], "partition_on": 100, "partition_rang": 100, "partition_num": 100, "dbreadengin": 100, "connectorx": [100, 115], "raw": 100, "partit": [100, 101, 107, 110, 114, 164, 178, 245], "backend": [100, 101, 110], "transfer": 100, "document": [100, 102, 476, 492, 894, 910], "redshift": 100, "mysql": 100, "mariadb": 100, "clickhous": 100, "oracl": 100, "bigqueri": 100, "pleas": 100, "doc": [100, 132, 245], "github": 100, "sfu": 100, "db": 100, "connector": 100, "destin": 100, "sqlite": 100, "develop": [100, 120, 121], "flight_sql": 100, "further": [100, 931, 948], "wide": [100, 149, 172, 216, 245, 614, 664], "adopt": 100, "significantli": 100, "better": [100, 128, 227, 245, 259, 512, 569, 648, 866, 867, 948], "driver": 100, "cpp": 100, "partition_col": 100, "explicitli": [100, 119, 120, 406, 558, 569], "delta_table_opt": [101, 110], "lake": [101, 110, 580], "root": [101, 110, 393, 405, 414, 430, 464, 499, 568, 569, 881, 948], "filesystem": [101, 110], "absolut": [101, 110, 116, 117, 188, 245, 251, 360, 361, 362, 569, 668, 784, 785, 786, 948], "gc": [101, 110], "azur": [101, 110], "deltalak": [101, 110, 115], "cloud": [101, 110, 114], "configur": [101, 110], "authent": [101, 110], "keyword": [101, 107, 110, 132, 179, 188, 192, 222, 225, 245, 428, 555, 558, 569, 617, 624, 642, 646, 664, 948], "table_path": [101, 110], "avoid": 101, "year": [101, 110, 151, 152, 166, 218, 245, 332, 333, 343, 344, 347, 353, 354, 440, 441, 442, 443, 444, 446, 447, 448, 532, 533, 569, 600, 601, 606, 664, 751, 752, 766, 767, 770, 776, 777], "2021": [101, 110, 133, 149, 151, 218, 245, 492, 544, 600, 664, 744, 745, 752, 774, 817, 910, 948], "aw": [101, 110], "bucket": [101, 110, 347, 353, 770, 776, 799, 948], "aws_access_key_id": [101, 110], "the_aws_access_key_id": [101, 110], "aws_secret_access_kei": [101, 110], "the_aws_secret_access_kei": [101, 110], "googl": [101, 110], "service_account": [101, 110], "service_account_json_absolute_path": [101, 110], "az": [101, 110], "adl": [101, 110], "abf": [101, 110], "azure_storage_account_nam": [101, 110], "azure_storage_account_kei": [101, 110], "without_fil": [101, 110], "track": [101, 110, 128, 245], "sheet_id": 102, "sheet_nam": 102, "xlsx2csv_option": 102, "read_csv_opt": 102, "xlsx2csv": [102, 115], "read_csv": [102, 109], "skip_empty_lin": 102, "my": [102, 114], "datasheet": 102, "correct": [102, 361, 362, 394, 445, 460, 569, 610, 664, 785, 786, 821, 858, 878, 948], "look": [102, 295, 298, 712], "fix": [102, 119, 120, 356, 440, 441, 442, 443, 444, 446, 447, 448, 569, 779], "whole": [102, 462, 463, 473, 569, 664, 891], "With": [102, 128, 245, 259, 569, 673, 948], "1000": [102, 138, 207, 245, 334, 335, 495, 757, 928, 948], "spreadsheet": [102, 180, 245], "xl": 102, "xlsm": 102, "xlsb": 102, "odf": 102, "od": [102, 491, 909], "odt": 102, "memory_map": [103, 107, 111], "v2": [103, 111], "greatli": [103, 111], "repeat": [103, 111, 434, 436, 569], "o": [103, 111, 317, 472, 507, 569, 733, 890, 933, 948], "page": [103, 107, 111, 113, 245, 569, 580, 629, 664, 948], "give": [103, 107, 111, 112, 113, 172, 214, 245, 329, 394, 436, 508, 569, 580, 614, 637, 664, 748, 821, 948], "That": [103, 610, 664], "filenam": 103, "my_fil": 103, "write_ipc": [103, 245], "read_ndjson": 105, "parallelstrategi": [107, 113], "use_statist": [107, 113], "awar": [107, 163, 189, 205, 245, 492, 910], "stabl": [107, 132, 190, 245, 614, 664], "row_group": [107, 113], "read_tabl": 107, "with_column_nam": 109, "push": [109, 111, 112, 113, 114], "down": [109, 111, 112, 113, 114, 372, 569, 794, 948], "therebi": [109, 111, 112, 113], "potenti": [109, 111, 112, 113], "overhead": [109, 111, 112, 113], "realloc": [109, 111, 112, 140, 245, 672, 948], "headerless": 109, "unlik": 109, "fewer": 109, "my_long_fil": 109, "doesn": [109, 358, 569, 782, 939, 948], "thing": [109, 516, 537], "less": [109, 166, 245, 396, 403, 478, 484, 489, 495, 569, 606, 664, 896, 902, 907, 913], "limit": [109, 142, 245, 297, 306, 307, 308, 368, 374, 569, 595, 602, 629, 664, 723, 724, 725, 791, 948], "breezah": 109, "languag": [109, 151, 152, 166, 218, 245, 343, 347, 353, 440, 441, 442, 443, 444, 446, 447, 448, 569, 600, 601, 606, 664, 766, 770, 776], "hard": [109, 610, 664], "mydf": 109, "lambda": [109, 128, 145, 179, 227, 245, 259, 295, 360, 361, 362, 404, 405, 439, 518, 529, 530, 531, 538, 545, 553, 559, 569, 610, 617, 648, 664, 673, 710, 784, 785, 786, 948], "simpli": [109, 529, 538], "idx": [109, 151, 164, 245, 295, 600, 664, 710, 867, 948], "uint16": [109, 315, 316, 500, 569, 731, 732, 918, 948], "u16": 109, "aws_region": 110, "eu": 110, "central": [110, 394, 460, 569, 821, 878, 948], "allow_pyarrow_filt": 114, "comparison": 114, "dset": 114, "folder": 114, "1970": 114, "stdout": [115, 149, 245], "13": [115, 129, 130, 141, 142, 148, 152, 157, 167, 175, 222, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 439, 441, 524, 529, 538, 561, 569, 584, 585, 594, 595, 601, 608, 642, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 664, 673, 770, 776, 777, 948], "platform": 115, "maco": 115, "arm64": 115, "arm": 115, "64bit": [115, 435, 569, 848, 948], "main": 115, "feb": 115, "clang": 115, "14": [115, 128, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 333, 380, 569, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 770], "1400": 115, "29": 115, "202": 115, "2_alpha": 115, "detect": 115, "matplotlib": [115, 618, 627, 664], "check_dtyp": [116, 117], "check_exact": [116, 117], "rtol": [116, 117], "1e": [116, 117], "atol": [116, 117], "nans_compare_equ": [116, 117], "check_column_ord": 116, "check_row_ord": 116, "assertionerror": [116, 117], "compar": [116, 117, 146, 245, 359, 375, 376, 396, 403, 423, 517, 569, 865, 948], "exactli": [116, 117, 120, 121, 488, 489, 873, 906, 907, 948], "toler": [116, 117, 166, 245, 606, 664], "inexact": [116, 117], "assert": [116, 117, 119, 120, 121, 152, 245, 580, 601, 664, 796, 948], "irrespect": 116, "unsort": 116, "check_nam": 117, "s1": [117, 145, 245, 931, 940, 948], "searchstrategi": [118, 120, 121], "null_prob": [118, 120, 121], "percentag": [118, 120, 121, 427, 569, 840, 948], "chanc": [118, 120, 121], "flag": [118, 452, 569, 591, 610, 664, 868, 948], "hypothesi": [118, 119, 120, 121, 956], "sampled_from": 118, "unique_small_int": 118, "ccy": 118, "gbp": 118, "eur": [118, 133, 149, 245], "jpy": 118, "min_col": [119, 120], "max_col": [119, 120], "suitabl": [119, 128, 245, 259, 451, 569, 673, 864, 948], "standalon": [119, 120], "itself": [119, 608, 664], "mincol": 119, "exact": [119, 120, 121, 196, 245, 492, 508, 569, 910], "especi": 119, "punctuat": 119, "test_special_char_colname_init": 119, "test_unique_xyz": 119, "assert_someth": 119, "min_siz": [120, 121], "max_siz": [120, 121], "include_col": 120, "allow_infin": [120, 121], "allowed_dtyp": [120, 121], "excluded_dtyp": [120, 121], "describ": [120, 149, 245, 948], "desir": 120, "ignor": [120, 121, 170, 200, 245, 276, 318, 346, 360, 361, 362, 421, 422, 569, 691, 736, 769, 784, 785, 786, 836, 837, 948], "n_chunk": [120, 121, 245, 948], "randomis": 120, "onto": 120, "independ": [120, 121], "either": [120, 152, 167, 170, 178, 188, 200, 245, 520, 558, 601, 608, 664], "pct": 120, "preced": 120, "disallow": [120, 121], "exclud": [120, 121, 313, 316, 381, 523, 556, 569, 802, 817, 948], "deploi": [120, 121], "characterist": [120, 121], "concret": [120, 121], "test_repr": [120, 121], "isinst": [120, 121, 245], "known": [120, 648], "df_strategi": 120, "15836": 120, "1755e": 120, "575050513": 120, "constructor": 121, "max_data_s": 121, "54666": 121, "6414": 121, "63290": 121, "toggl": [123, 492, 910], "scope": 125, "lifetim": 125, "initi": [125, 529, 538, 562], "whatev": 125, "were": 125, "enter": 125, "set_verbos": 125, "do_various_th": 125, "restor": 125, "nan_as_nul": 127, "_pyarrowdatafram": 127, "nullabl": 127, "extens": [127, 209, 245, 931, 948], "propag": [127, 170, 200, 245, 421, 422, 569, 836, 837, 948], "inference_s": [128, 245], "256": [128, 245, 840, 948], "user": [128, 179, 227, 245, 259, 428, 452, 518, 569, 617, 648, 664, 673, 868, 948], "udf": [128, 179, 227, 245, 259, 428, 518, 569, 617, 648, 664, 673, 948], "logic": [128, 227, 245, 256, 425, 506, 515, 569, 598, 605, 620, 645, 648, 664, 673, 932, 948], "almost": [128, 227, 245, 648, 673, 948], "_significantly_": [128, 227, 245, 648, 673, 948], "intens": [128, 227, 245, 648, 673, 948], "becaus": [128, 138, 151, 167, 216, 227, 245, 277, 600, 648, 664, 673, 692, 783, 948], "forc": [128, 166, 227, 245, 605, 606, 648, 664, 673, 948], "materi": [128, 227, 245, 618, 648, 664, 673, 948], "parallelis": [128, 227, 245, 648, 673, 948], "optimis": [128, 227, 245, 648, 664, 673, 866, 867, 948], "achiev": [128, 227, 245, 259, 569, 648, 673, 948], "best": [128, 227, 245, 259, 569, 648, 673, 948], "tri": [128, 245], "arbitrarili": [128, 245], "rearrang": [128, 245], "preserv": [128, 209, 245, 457, 569, 875, 931, 948], "lru_cach": [128, 245, 259, 569, 673, 948], "magnitud": [128, 245, 259, 569, 673, 948], "speedup": [128, 163, 245, 259, 569, 673, 948], "column_1": [128, 213, 245], "scalar": [128, 162, 245, 451, 518, 569, 820, 864, 948], "cheap": [129, 130, 245, 584, 585, 664, 672, 722, 726, 948], "deepcopi": [129, 130, 245, 584, 585, 664, 722, 726, 948], "clear": [130, 245, 585, 664, 726, 948], "properti": [131, 137, 155, 191, 193, 221, 245, 580, 587, 590, 623, 641, 664], "appl": [131, 156, 165, 184, 186, 204, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 430, 438, 471, 490, 499, 569, 605, 621, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 664, 889, 908], "banana": [131, 204, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 430, 438, 499, 569, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659], "pearson": [132, 245, 394, 460, 526, 551, 569, 821, 878, 948], "correl": [132, 245, 526, 551, 556], "coeffici": [132, 245, 460, 569, 878, 948], "corrcoef": [132, 245], "summari": [133, 245, 735, 948], "glimps": [133, 154, 245], "usd": [133, 149, 245], "2020": [133, 149, 152, 245, 324, 328, 331, 334, 335, 337, 339, 342, 346, 349, 350, 492, 601, 664, 743, 747, 750, 757, 759, 762, 765, 769, 772, 910], "null_count": [133, 136, 245, 317, 569, 733, 735, 948], "266667": [133, 245], "666667": [133, 170, 219, 233, 245, 360, 569, 640, 654, 664], "std": [133, 245, 439, 569, 664, 735, 859, 948], "101514": [133, 245], "707107": [133, 245, 361, 569, 785, 948], "57735": [133, 245], "median": [133, 180, 245, 442, 569, 643, 664, 855, 948], "more_column": [134, 139, 215, 245, 363, 536, 569, 588, 592, 638, 664], "Or": [134, 150, 151, 152, 166, 198, 218, 225, 245, 426, 463, 523, 562, 569, 588, 599, 600, 601, 606, 631, 646, 664], "subset": [136, 176, 214, 245, 589, 637, 664], "snippet": [136, 245, 589, 664], "is_nul": [136, 245, 569, 589, 664, 948], "sizeunit": [138, 245, 783, 948], "heap": [138, 245, 783, 948], "its": [138, 245, 323, 347, 353, 463, 569, 742, 770, 776, 783, 948], "bitmap": [138, 245, 783, 948], "therefor": [138, 245, 295, 562, 783, 948], "structarrai": [138, 245, 783, 948], "constant": [138, 152, 245, 366, 569, 601, 664, 783, 789, 948], "unchang": [138, 245, 259, 506, 569, 610, 648, 664, 783, 932, 948], "capac": [138, 196, 245, 783, 873, 948], "ffi": [138, 245, 783, 948], "kb": [138, 245, 783, 948], "mb": [138, 245, 783, 948], "gb": [138, 245, 783, 948], "tb": [138, 245, 783, 948], "revers": [138, 245, 312, 313, 314, 315, 316, 405, 430, 499, 569, 664, 729, 730, 731, 732, 948], "1_000_000": [138, 245, 783, 948], "25888898": [138, 245], "689577102661133": [138, 245], "long": [139, 172, 216, 245, 592, 614, 664], "letter": [139, 230, 239, 245, 363, 536, 569, 592, 651, 660, 664], "thu": [140, 245, 526, 556, 672, 948], "faster": [140, 216, 245, 259, 439, 480, 510, 569, 628, 629, 664, 672, 673, 852, 898, 948], "onlin": [140, 245, 672, 948], "rerun": [140, 245, 672, 948], "fill_valu": [141, 195, 216, 245, 454, 569, 594, 626, 664, 871, 948], "Not": [141, 245, 387, 389, 406, 569, 594, 664], "To": [141, 245, 320, 321, 368, 546, 549, 559, 569, 594, 664], "fillnullstrategi": [142, 245, 368, 569, 595, 664, 791, 948], "matches_supertyp": [142, 245, 595, 664], "forward": [142, 166, 245, 368, 374, 569, 595, 606, 664, 791, 948], "consecut": [142, 245, 297, 368, 374, 466, 569, 595, 664, 791, 884, 948], "supertyp": [142, 245, 258, 569, 595, 664], "fill_nan": [142, 245, 569, 664, 948], "OR": [143, 245, 517, 596, 664], "reduct": [145, 245], "supercast": [145, 245], "similar": [145, 166, 245, 426, 562, 569, 606, 664], "parent": [145, 245], "rule": [145, 245, 350, 773], "arithmet": [145, 245], "zip_with": [145, 245, 948], "foo11": [145, 245], "bar22": [145, 245], "null_equ": [146, 245, 865, 948], "retriev": [147, 245, 271, 272, 496, 686, 687, 914], "return_as_str": [149, 245], "preview": [149, 245], "nice": [149, 245], "few": [149, 245], "rather": [149, 166, 245, 495, 606, 664, 913], "head": [149, 168, 201, 245, 258, 398, 569, 609, 664, 823, 919, 948], "tail": [149, 154, 245, 258, 460, 569, 664, 798, 878, 948], "intoexpr": [150, 151, 152, 192, 198, 212, 222, 225, 245, 381, 426, 463, 520, 522, 524, 525, 529, 538, 546, 549, 555, 558, 562, 569, 599, 600, 601, 624, 631, 636, 646, 664, 802, 948], "more_bi": [150, 178, 198, 245, 463, 569, 599, 631, 664], "maintain_ord": [150, 178, 180, 214, 218, 226, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 245, 253, 259, 296, 502, 509, 527, 569, 586, 591, 593, 599, 618, 627, 628, 629, 637, 647, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 664, 711, 734, 844, 934, 948], "consist": [150, 178, 245, 492, 599, 664, 910], "agg": [150, 151, 152, 245, 253, 259, 369, 371, 462, 463, 502, 514, 527, 569, 586, 591, 593, 599, 600, 601, 618, 627, 664], "anoth": [150, 245, 294, 317, 322, 569, 599, 643, 664, 709, 733, 741, 865, 948], "index_column": [151, 152, 245, 600, 601, 664], "include_boundari": [151, 245, 600, 664], "start_bi": [151, 245, 600, 664], "startbi": [151, 245, 600, 664], "dynamicgroupbi": [151, 245], "normal": [151, 245, 358, 394, 460, 569, 600, 664, 782, 821, 878, 948], "groupbi": [151, 152, 176, 245, 253, 259, 277, 317, 369, 371, 426, 462, 463, 502, 514, 518, 527, 569, 586, 591, 593, 600, 601, 618, 627, 664, 692, 733, 948], "member": [151, 245, 600, 664, 809, 948], "seen": [151, 245, 297, 374, 569, 600, 664], "roll": [151, 152, 245, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 524, 569, 600, 601, 664, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 948], "slot": [151, 245, 276, 317, 318, 569, 600, 664, 691, 733, 736, 948], "1n": [151, 152, 166, 218, 245, 343, 347, 353, 440, 441, 442, 443, 444, 446, 447, 448, 569, 600, 601, 606, 664, 766, 770, 776], "nanosecond": [151, 152, 166, 218, 245, 343, 347, 348, 353, 440, 441, 442, 443, 444, 446, 447, 448, 534, 569, 600, 601, 606, 664, 766, 770, 771, 776], "1u": [151, 152, 166, 218, 245, 343, 347, 353, 440, 441, 442, 443, 444, 446, 447, 448, 569, 600, 601, 606, 664, 766, 770, 776], "microsecond": [151, 152, 166, 218, 245, 343, 347, 348, 353, 440, 441, 442, 443, 444, 446, 447, 448, 533, 534, 569, 600, 601, 606, 618, 664, 766, 770, 776], "1m": [151, 152, 166, 218, 245, 334, 335, 337, 342, 343, 347, 349, 353, 440, 441, 442, 443, 444, 446, 447, 448, 569, 600, 601, 606, 664, 757, 759, 765, 766, 770, 772, 776], "millisecond": [151, 152, 166, 218, 245, 343, 347, 353, 440, 441, 442, 443, 444, 446, 447, 448, 534, 569, 600, 601, 606, 664, 766, 770, 776], "1h": [151, 152, 166, 218, 245, 343, 347, 353, 440, 441, 442, 443, 444, 446, 447, 448, 569, 600, 601, 606, 664, 749, 766, 770, 776], "1w": [151, 152, 166, 218, 245, 343, 347, 353, 440, 441, 442, 443, 444, 446, 447, 448, 569, 600, 601, 606, 664, 766, 770, 776], "week": [151, 152, 166, 218, 245, 343, 347, 353, 355, 440, 441, 442, 443, 444, 446, 447, 448, 534, 569, 600, 601, 606, 664, 766, 770, 776, 778], "month": [151, 152, 166, 218, 245, 327, 343, 347, 353, 440, 441, 442, 443, 444, 446, 447, 448, 532, 533, 569, 600, 601, 606, 664, 746, 766, 770, 776], "1y": [151, 152, 166, 218, 245, 332, 343, 347, 353, 440, 441, 442, 443, 444, 446, 447, 448, 569, 600, 601, 606, 664, 751, 766, 770, 776, 780], "1i": [151, 152, 166, 218, 245, 343, 440, 441, 442, 443, 444, 446, 447, 448, 569, 600, 601, 606, 664, 766], "10i": [151, 152, 245, 600, 601, 664], "ascend": [151, 152, 245, 600, 601, 664], "often": [151, 152, 245, 275, 436, 569, 600, 601, 664, 690], "dynam": [151, 245, 440, 441, 442, 443, 444, 446, 447, 448, 569, 600, 664], "matter": [151, 152, 163, 189, 205, 245, 600, 601, 664], "_lower_bound": [151, 245, 600, 664], "_upper_bound": [151, 245, 600, 664], "impact": [151, 245, 600, 664], "harder": [151, 245, 600, 664], "inclus": [151, 152, 245, 381, 440, 441, 442, 443, 444, 446, 447, 448, 487, 488, 569, 600, 601, 664, 802, 905, 906, 948], "datapoint": [151, 245, 600, 664], "mondai": [151, 245, 355, 600, 664, 778], "date_rang": [151, 218, 245, 322, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 600, 664, 741, 743, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780], "30m": [151, 245, 347, 353, 600, 664, 770, 776], "time_min": [151, 245, 600, 664], "time_max": [151, 245, 600, 664], "23": [151, 152, 245, 323, 330, 347, 533, 600, 601, 664, 742, 749], "boundari": [151, 245, 306, 307, 308, 569, 600, 664, 723, 724, 725, 799, 948], "time_count": [151, 245, 600, 664], "_lower_boundari": [151, 245, 600, 664], "_upper_boundari": [151, 245, 600, 664], "lower_bound": [151, 245, 569, 600, 664, 936, 948], "upper_bound": [151, 245, 295, 569, 600, 664, 826, 948], "time_agg_list": [151, 245, 600, 664], "arang": [151, 216, 227, 245, 600, 648, 664], "2i": [151, 245, 600, 664], "3i": [151, 245, 600, 664], "a_agg_list": [151, 245, 600, 664], "rollinggroupbi": [152, 245], "dynamic_groupbi": [152, 245, 601, 664], "groupby_dynam": [152, 245, 601, 664], "48": [152, 245, 601, 664], "19": [152, 166, 245, 347, 601, 606, 664, 770, 776], "43": [152, 245, 316, 569, 601, 664], "strptime": [152, 245, 350, 601, 664, 773], "2d": [152, 208, 245, 601, 664, 746], "sum_a": [152, 245, 601, 664], "min_a": [152, 245, 601, 664], "max_a": [152, 245, 601, 664], "to_list": [152, 245, 295, 601, 664, 710, 948], "seed": [153, 190, 245, 377, 433, 450, 456, 569, 797, 846, 863, 874, 948], "seed_1": [153, 245, 377, 569, 797, 948], "seed_2": [153, 245, 377, 569, 797, 948], "seed_3": [153, 245, 377, 569, 797, 948], "hash": [153, 245, 569, 948], "u64": [153, 245, 377, 435, 569, 618, 664, 797, 948], "10783150408545073287": [153, 245], "1438741209321515184": [153, 245], "10047419486152048166": [153, 245], "2047317070637311557": [153, 245], "last": [154, 166, 168, 180, 198, 201, 212, 214, 239, 245, 268, 280, 293, 317, 327, 344, 354, 462, 489, 501, 560, 569, 606, 631, 634, 636, 637, 660, 664, 682, 695, 708, 733, 746, 767, 777, 798, 823, 907, 919, 948], "ab": [154, 168, 201, 222, 245, 496, 497, 546, 549, 569, 642, 664, 798, 823, 919, 948], "grown": [156, 245], "baz": [157, 158, 180, 215, 245, 487, 489, 604, 638, 664, 907], "intermedi": [158, 245, 604, 664, 801, 948], "linear": [158, 182, 237, 245, 273, 380, 409, 432, 444, 524, 525, 552, 569, 604, 619, 658, 664, 688, 801, 845, 857, 948], "mask": [159, 161, 245, 274, 298, 299, 382, 384, 392, 467, 469, 569, 689, 712, 713, 792, 802, 804, 807, 818, 841, 842, 866, 885, 887, 940, 948], "visual": [159, 161, 245], "buffer_s": [163, 245], "intern": [163, 245], "veri": [163, 213, 245, 259, 569, 585, 664, 726, 948], "fit": [163, 196, 216, 245, 455, 569, 872, 873, 948], "signific": [163, 245, 259, 569], "4x": [163, 245], "disabl": [163, 245], "materialis": [163, 164, 188, 189, 245], "iter_row": [164, 188, 189, 245], "17_500": [164, 245], "klmnoopqrstuvwxyz": [164, 245], "__name__": [164, 245], "7500": [164, 245], "recordbatch": [164, 245], "15_000": [164, 245], "record_batch": [164, 245], "to_arrow": [164, 245, 948], "to_batch": [164, 245], "date32": [164, 245], "large_str": [164, 203, 209, 245], "15000": [164, 245], "2500": [164, 245], "left_on": [165, 166, 245, 605, 606, 664], "right_on": [165, 166, 245, 605, 606, 664], "joinstrategi": [165, 245, 605, 664], "suffix": [165, 166, 192, 222, 225, 245, 301, 387, 389, 390, 391, 426, 438, 471, 569, 605, 606, 624, 642, 643, 646, 664, 715, 889], "_right": [165, 166, 245, 605, 606, 664], "outer": [165, 245, 605, 664], "semi": [165, 245, 605, 664], "anti": [165, 245, 605, 664, 866, 867, 948], "cross": [165, 245, 605, 664], "join_asof": [165, 245, 605, 664], "stringcach": [165, 245, 580], "other_df": [165, 245], "by_left": [166, 245, 606, 664], "by_right": [166, 245, 606, 664], "asofjoinstrategi": [166, 245, 606, 664], "allow_parallel": [166, 245, 605, 606, 664], "force_parallel": [166, 245, 605, 606, 664], "asof": [166, 245, 606, 664], "asof_join": [166, 245], "search": [166, 245, 606, 664], "greater": [166, 245, 375, 376, 460, 489, 569, 606, 664, 878, 907, 948], "distanc": [166, 245, 606, 664, 799, 948], "gdp": [166, 245, 606, 664], "2016": [166, 245, 606, 664], "2017": [166, 245, 606, 664], "2018": [166, 245, 606, 664], "2019": [166, 245, 606, 664], "record": [166, 245, 606, 664], "jan": [166, 245, 606, 664], "1st": [166, 245, 606, 664], "4164": [166, 245, 606, 664], "4411": [166, 245, 606, 664], "4566": [166, 245, 606, 664], "4696": [166, 245, 606, 664], "popul": [166, 245, 606, 664], "12th": [166, 245, 606, 664], "82": [166, 245, 606, 664], "66": [166, 245, 515, 569, 606, 664, 857, 948], "83": [166, 245, 606, 664], "52": [166, 222, 245, 449, 569, 606, 642, 664], "request": [167, 245], "small": [167, 245, 347, 593, 664], "describe_plan": [167, 245, 664], "unoptim": [167, 245, 664], "describe_optimized_plan": [167, 245, 664], "show_graph": [167, 245, 664], "un": [167, 245], "graphviz": [167, 245, 627, 664], "axi": [169, 170, 172, 174, 200, 245, 614, 664], "null_strategi": [170, 200, 245], "nullstrategi": [170, 200, 245], "spam": [170, 245], "id_var": [172, 245, 614, 664], "value_var": [172, 245, 614, 664], "variable_nam": [172, 245, 614, 664], "value_nam": [172, 245, 614, 664], "unpivot": [172, 245, 614, 664], "leav": [172, 245, 614, 664], "massag": [172, 245, 614, 664], "measur": [172, 245, 614, 664], "merg": [173, 245, 615, 664], "caller": [173, 245, 295, 610, 615, 648, 664], "respons": [173, 245, 615, 664], "One": [176, 180, 245, 256, 425, 569, 948], "what": [176, 245, 930, 939, 948], "pack": [176, 245], "expr_unique_subset": [176, 245], "df_nuniqu": [176, 245], "df_agg_nuniqu": [176, 245], "offer": [179, 245, 428, 569, 617, 664], "recommend": [179, 245], "fulli": [179, 190, 245], "advantag": [179, 245], "cast_str_to_int": [179, 245, 617, 664], "col_nam": [179, 245, 617, 664], "tdf": [179, 245, 617, 664], "aggregate_funct": [180, 245], "pivotagg": [180, 245], "nodefault": [180, 245, 492], "_nodefault": [180, 245, 492], "no_default": [180, 245, 492], "sort_column": [180, 245], "predefin": [180, 245], "predict": [180, 183, 218, 245], "transpos": [180, 245], "discoveri": [180, 245], "interpol": [182, 237, 245, 368, 409, 432, 444, 552, 569, 619, 658, 664, 845, 857, 948], "rollinginterpolationmethod": [182, 237, 245, 432, 444, 552, 569, 619, 658, 664, 845, 857, 948], "midpoint": [182, 237, 245, 432, 444, 552, 569, 619, 658, 664, 845, 857, 948], "old": [184, 245, 621, 664], "new_col": [185, 245], "by_pred": [188, 245], "accord": [188, 245, 406, 569, 752], "never": [188, 245], "mutual": [188, 245], "exclus": [188, 245, 515, 569], "addition": [188, 245], "clariti": [188, 245], "anyth": [188, 245], "toomanyrowsreturnederror": [188, 245, 580], "norowsreturnederror": [188, 245, 580], "inherit": [188, 245], "rowserror": [188, 245, 580], "frac": [190, 245, 360, 361, 362, 450, 460, 507, 569, 784, 785, 786, 863, 878, 933, 948], "with_replac": [190, 245, 450, 569, 863, 948], "shuffl": [190, 227, 245, 450, 569, 648, 863, 948], "nor": [190, 245], "modul": [190, 245, 450, 456, 568, 569, 863, 874, 948], "more_expr": [192, 222, 245, 426, 520, 522, 524, 525, 546, 549, 555, 558, 569, 624, 642, 664], "named_expr": [192, 222, 245, 555, 558, 624, 642, 664], "threshold": [192, 245, 624, 664], "set_auto_structifi": [192, 222, 245, 624, 642, 664], "is_odd": [192, 245, 624, 664], "_is_odd": [192, 245, 624, 664], "shift_and_fil": [194, 245, 569, 664, 948], "shift": [195, 245, 276, 318, 427, 454, 524, 569, 626, 664, 691, 736, 840, 871, 948], "shrink": [196, 245, 455, 569, 872, 873, 948], "hold": [196, 245], "nulls_last": [198, 212, 245, 268, 462, 569, 631, 636, 664, 682, 948], "ddof": [199, 219, 245, 465, 513, 526, 551, 556, 557, 561, 569, 632, 640, 664, 882, 938, 948], "deviat": [199, 245, 361, 446, 465, 557, 569, 632, 664, 785, 882, 948], "degre": [199, 219, 245, 465, 513, 526, 551, 556, 557, 561, 569, 632, 640, 664, 882, 938, 948], "freedom": [199, 219, 245, 465, 513, 526, 551, 556, 557, 561, 569, 632, 640, 664, 882, 938, 948], "divisor": [199, 219, 245, 465, 513, 526, 551, 556, 557, 561, 569, 632, 640, 664, 882, 938, 948], "816497": [199, 245], "21": [200, 245, 540], "16a": [200, 245], "27b": [200, 245], "38c": [200, 245], "nth": [202, 245, 489, 503, 569, 635, 664, 907, 921, 948], "mostli": [203, 245, 369, 569], "categoricaltyp": [203, 245], "as_seri": [204, 245], "fruit": [204, 245, 430, 438, 471, 490, 499, 569, 889, 908], "car": [204, 245, 430, 438, 499, 569], "beetl": [204, 245, 430, 438, 499, 569], "audi": [204, 245, 430, 438, 499, 569], "28": [204, 245, 252, 356, 569, 779], "300": [204, 245, 853, 854, 856, 948], "instantiat": [207, 245, 928, 948], "from_repr": [207, 245, 928, 948], "df_from_str_repr": [207, 245], "eval": [207, 245, 535, 928, 948], "re": [208, 245], "ll": [208, 245], "numpy_arrai": [208, 245], "use_pyarrow_extension_arrai": [209, 245, 931, 948], "trigger": [209, 245, 931, 948], "sent": [209, 245, 930, 931, 948], "pandas_df1": [209, 245], "pandas_df2": [209, 245], "pandas_df2_pa": [209, 245], "na": [209, 245, 931, 948], "four": [211, 245], "five": [211, 245], "k": [212, 245, 304, 394, 507, 569, 636, 664, 719, 821, 933, 948], "largest": [212, 245, 507, 569, 636, 664, 933, 948], "smallest": [212, 245, 507, 569, 636, 664, 933, 948], "top": [212, 245, 636, 664], "include_head": [213, 245], "header_nam": [213, 245], "column_nam": [213, 245], "perhap": [213, 245], "column_2": [213, 245], "name_gener": [213, 245, 295, 710], "base_nam": [213, 245], "my_column_": [213, 245], "my_column_0": [213, 245], "my_column_1": [213, 245], "my_column_2": [213, 245], "uniquekeepstrategi": [214, 245, 637, 664], "kept": [214, 245, 637, 664], "decompos": [215, 245, 638, 664], "t_a": [215, 245, 638, 664], "t_b": [215, 245, 638, 664], "t_c": [215, 245, 638, 664], "t_d": [215, 245, 638, 664], "womp": [215, 245, 638, 664], "t_": [215, 245, 638, 664], "t_struct": [215, 245, 638, 664], "step": [216, 245, 519], "unstackdirect": [216, 245], "much": [216, 245, 294, 317, 569, 709, 733, 948], "pivot": [216, 245], "phase": [216, 245], "subject": [216, 245], "ascii_uppercas": [216, 245], "col1": [216, 245, 664], "col2": [216, 245, 664], "h": [216, 245, 252, 350, 455, 492, 569, 910], "col1_0": [216, 245], "col1_1": [216, 245], "col1_2": [216, 245], "col2_0": [216, 245], "col2_1": [216, 245], "col2_2": [216, 245], "syntact": [217, 245, 531, 536, 537, 541, 552, 555, 559, 639, 664, 881, 948], "sugar": [217, 245, 531, 536, 537, 541, 552, 555, 559, 639, 664, 881, 948], "coalesc": [217, 245, 639, 664], "400": [217, 245, 639, 664, 853, 854, 856, 948], "600": [217, 245, 639, 664], "700": [217, 245, 639, 664], "new_df": [217, 245, 639, 664], "time_column": [218, 245], "frequenc": [218, 245], "forward_fil": [218, 245, 313, 316, 569], "06": [218, 245, 323, 333, 345, 346, 357, 770, 778], "varianc": [219, 245, 362, 394, 448, 513, 561, 569, 640, 664, 786, 821, 861, 938, 948], "grow": [220, 245], "is_not": [222, 245, 569, 642, 664], "not_c": [222, 245, 642, 664], "diff": [222, 245, 328, 331, 335, 337, 339, 342, 349, 569, 642, 664, 747, 750, 757, 759, 762, 765, 772, 948], "_diff": [222, 245, 642, 664], "row_nr": [223, 245, 406, 569, 644, 664, 867, 948], "more_agg": [225, 646], "named_agg": [225, 646], "_sum": [225, 646], "_mean_squar": [225, 646], "b_sum": [225, 646], "c_mean_squar": [225, 646], "17": [225, 449, 492, 540, 569, 646, 727, 770, 948], "sub": [227, 301, 302, 471, 490, 569, 715, 716, 889, 908], "triangl": [227, 648], "group_df": [227, 648], "nr": [230, 239, 651, 660], "maxim": [232, 266, 569, 653, 680, 948], "833333": [233, 654], "minim": [235, 267, 272, 455, 463, 569, 656, 681, 687, 831, 872, 948], "overview": [245, 569, 580, 664, 948], "public": [245, 569, 580, 664, 948], "frameinittyp": [245, 664], "variou": [245, 569, 664, 948], "entri": [245, 664], "prevent": [245, 315, 316, 393, 500, 569, 664, 731, 732, 918, 948], "come": [245, 394, 569, 581, 663, 664, 821, 948], "behavior": [245, 259, 294, 518, 569, 709], "mydatafram": 245, "notic": [245, 664, 948], "df4": 245, "df5": 245, "df6": 245, "corr": [245, 551, 556], "drop_in_plac": 245, "drop_nul": [245, 320, 569, 664, 948], "estimated_s": [245, 948], "explod": [245, 371, 437, 569, 664, 850, 948], "find_idx_by_nam": 245, "fold": [245, 413, 522, 529, 530, 553, 559], "frame_equ": [245, 347, 353], "get_column": [245, 559], "groupby_rol": [245, 440, 441, 442, 443, 444, 446, 447, 448, 569, 600, 664], "hash_row": 245, "hstack": 245, "insert_at_idx": 245, "is_dupl": [245, 569, 948], "is_empti": [245, 948], "is_uniqu": [245, 569, 948], "iter_slic": 245, "melt": [245, 664], "merge_sort": [245, 664], "n_uniqu": [245, 569, 948], "pipe": [245, 569, 664], "quantil": [245, 444, 569, 664, 844, 857, 948], "replace_at_idx": 245, "shrink_to_fit": [245, 948], "take_everi": [245, 569, 664, 948], "to_dict": 245, "to_numpi": [245, 404, 569, 948], "to_panda": [245, 948], "to_struct": 245, "top_k": [245, 569, 664, 948], "unnest": [245, 488, 489, 497, 664, 906, 907], "unstack": 245, "updat": [245, 664], "upsampl": 245, "write_avro": 245, "write_databas": 245, "write_excel": 245, "write_json": [245, 620, 664], "write_parquet": 245, "cumprod": [252, 569, 948], "ghi": [252, 569], "94": [253, 569], "confus": [255, 387, 389, 569], "tt": [255, 569], "tf": [255, 257, 569], "ff": [255, 257, 569], "upcast": [258, 569], "skip_nul": [259, 569, 673, 948], "pass_nam": [259, 569], "applystrategi": [259, 569], "thread_loc": [259, 569], "assum": [259, 569, 610, 648, 664], "code": [259, 452, 569, 608, 664, 868, 948], "amount": [259, 569], "releas": [259, 569], "gil": [259, 569], "discourag": [259, 569], "loop": [259, 569], "a_times_2": [259, 569], "invers": [260, 261, 262, 263, 264, 265, 569, 674, 675, 676, 677, 678, 679, 948], "cosin": [260, 261, 309, 310, 404, 569, 674, 675, 727, 728, 948], "570796": [260, 262, 569, 674, 676, 948], "hyperbol": [261, 263, 265, 310, 459, 505, 569, 675, 677, 679, 728, 877, 923, 948], "sine": [262, 263, 404, 458, 459, 569, 676, 677, 876, 877, 948], "881374": [263, 569, 677, 948], "tangent": [264, 265, 504, 505, 569, 678, 679, 922, 923, 948], "785398": [264, 569, 678, 948], "arg_wher": [269, 569], "sublist": [271, 272, 274, 276, 279, 280, 281, 282, 283, 290, 293, 294, 686, 687, 689, 691, 694, 695, 696, 697, 698, 705, 708, 709, 710, 809, 948], "membership": [274, 689], "listcol": 275, "number_of_two": 275, "null_behavior": [276, 318, 569, 691, 736, 948], "nullbehavior": [276, 318, 569, 691, 736, 948], "th": [276, 318, 460, 569, 691, 736, 878, 948], "against": [277, 664, 692, 955], "blindli": [277, 692], "worth": [277, 692], "enough": [277, 460, 569, 692, 878, 948], "concat_list": [277, 535, 692], "rank": [277, 526, 535, 556, 569, 692, 948], "exprnamespac": 278, "reshap": [278, 569, 693, 948], "flat": [278, 437, 569, 693, 850, 948], "taken": [290, 486, 502, 569, 705, 904], "null_on_oob": [294, 709], "cheaper": [294, 709], "n_field_strategi": [295, 710], "tostructstrategi": [295, 710], "first_non_nul": [295, 710], "max_width": [295, 710], "field_0": [295, 710], "field_1": [295, 710], "field_n": [295, 710], "know": [295, 480, 898, 930, 939, 948], "incorrectli": 295, "downstream": [295, 452, 569, 868, 948], "col_name_": [295, 710], "col_name_0": [295, 710], "col_name_1": [295, 710], "col_name_2": [295, 710], "maintain": [296, 451, 509, 569, 628, 629, 664, 711, 864, 934, 948], "substr": [298, 301, 302, 467, 471, 482, 483, 487, 488, 489, 490, 712, 715, 716, 885, 889, 900, 901, 905, 906, 907, 908], "transferencod": [299, 300, 469, 470, 713, 714, 887, 888], "strict": [299, 303, 467, 469, 481, 492, 569, 713, 717, 865, 885, 887, 899, 910, 948], "hex": [299, 300, 469, 470, 481, 713, 714, 887, 888, 899], "base64": [299, 300, 469, 470, 713, 714, 887, 888], "prefix": [302, 490, 495, 569, 716, 908, 913], "due": [303, 569, 717, 948], "overflow": [303, 315, 316, 481, 500, 569, 717, 731, 732, 899, 918, 948], "categoricalord": [304, 719], "lexic": [304, 719], "min_val": [306, 308, 569, 723, 725, 948], "max_val": [306, 307, 569, 723, 724, 948], "foo_clip": [306, 307, 308, 569], "clip": [307, 308, 569, 724, 725, 948], "543081": [310, 569, 728, 948], "cumul": [312, 313, 314, 315, 316, 529, 530, 531, 569, 729, 730, 731, 732, 948], "a_revers": [312, 313, 314, 315, 316, 405, 438, 499, 569], "value_cummax": [313, 569], "value_cummax_all_fil": [313, 569], "value_cumsum": [316, 569], "value_cumsum_all_fil": [316, 569], "min_period": [317, 360, 361, 362, 439, 440, 441, 442, 443, 444, 446, 447, 448, 569, 733, 784, 785, 786, 852, 853, 854, 855, 856, 857, 859, 860, 861, 948], "slide": [317, 569, 733, 948], "realli": [317, 569, 733, 948], "complex": [317, 507, 569, 733, 933, 948], "visit": [317, 569, 733, 948], "44": [319, 569], "drop_nan": [321, 569, 948], "lose": [322, 741], "2001": [322, 327, 329, 330, 332, 333, 338, 340, 343, 344, 345, 347, 348, 352, 353, 354, 355, 356, 357, 492, 741, 746, 748, 749, 751, 753, 754, 755, 756, 758, 760, 761, 763, 764, 766, 767, 768, 770, 771, 773, 775, 776, 777, 778, 779, 780, 910], "time_unit_m": [322, 741], "time_unit_n": [322, 741], "compon": [323, 348, 492, 534, 742, 771], "resolv": 323, "tm": 323, "456000": [323, 742], "101000": 323, "456": [323, 742, 927, 948], "101": [323, 481, 899], "d1": 323, "d2": 323, "d3": 323, "utc": [324, 346, 492, 743, 769, 910], "europ": [324, 346, 743, 769], "london": [324, 346, 743, 769], "gmt": [324, 346, 743, 769], "bst": [324, 346, 743, 769], "weekdai": [327, 344], "day_of_month": [327, 344, 355], "ordinal_dai": [327, 355], "day_of_year": [327, 344, 355], "days_diff": 328, "epochtimeunit": [329, 540, 748], "unix": [329, 540, 748], "epoch_n": [329, 748], "epoch_": [329, 748], "978307200000000": [329, 352, 748, 775], "978307200": [329, 748], "978393600000000": [329, 352, 748, 775], "978393600": [329, 748], "978480000000000": [329, 352, 748, 775], "978480000": [329, 748], "hours_diff": 331, "leap": [332, 343, 751, 766], "2000": [332, 334, 343, 751, 766], "2002": [332, 333, 343, 345, 357, 751, 766, 780], "iso": [333, 354, 355, 752, 777, 778], "correspond": [333, 433, 569, 752, 846, 948], "2006": [333, 343, 766], "180": [333, 345, 357], "2004": [333, 343, 766], "2005": [333, 343, 766], "1_001": [334, 335, 337, 342], "002": [334, 335, 337, 342, 534, 757, 759, 765], "003": [334, 335, 337, 342], "3000": 334, "997": [334, 335, 337, 342], "997000": 334, "998": [334, 335, 337, 342], "998000": 334, "999": [334, 335, 337, 342], "999000": 334, "microseconds_diff": 335, "milliseconds_diff": 337, "minutes_diff": 339, "1440": [339, 762], "nanoseconds_diff": 342, "1000000": [342, 495, 765], "minu": [343, 766], "dictat": [343, 766], "date_plus_1i": [343, 766], "1y2mo": [343, 766], "date_min": 343, "1998": [343, 766], "1999": [343, 766], "2003": [343, 540, 766], "ordin": [344, 433, 569, 767, 846, 948], "366": [344, 767], "convert_time_zon": [346, 769], "unset": [346, 769], "london_timezon": 346, "amsterdam": 346, "london_to_amsterdam": 346, "cet": 346, "cest": 346, "half": [347, 360, 361, 362, 569, 770, 784, 785, 786, 948], "225": [347, 353], "to_fram": [347, 353, 492, 866, 867, 906, 907, 910, 948], "10m": [347, 353, 770, 776], "milli": [348, 771], "micro": [348, 771], "456789": 348, "654321": 348, "111110": 348, "765431": 348, "sec": 348, "11111": 348, "seconds_diff": 349, "timestamp_n": [352, 775], "timestamp_m": 352, "978307200000": 352, "978393600000": 352, "978480000000": 352, "53": [354, 777], "sundai": [355, 778], "incorrect": [356, 452, 569, 648, 779, 868, 948], "time_unit_u": [356, 779], "32971": [356, 779], "32974": [356, 779], "32976": [356, 779], "718281828459045": [358, 400, 569, 782, 824, 948], "pk": [358, 569, 782, 948], "459148": [358, 569], "754888": [358, 569], "span": [360, 361, 362, 569, 784, 785, 786, 948], "half_lif": [360, 361, 362, 569, 784, 785, 786, 948], "adjust": [360, 361, 362, 460, 569, 784, 785, 786, 878, 948], "ignore_nul": [360, 361, 362, 569, 784, 785, 786, 939, 948], "exponenti": [360, 361, 362, 364, 429, 569, 784, 785, 786, 787, 948], "weight": [360, 361, 362, 439, 440, 441, 442, 443, 444, 446, 447, 448, 460, 569, 784, 785, 786, 852, 853, 854, 855, 856, 857, 859, 860, 861, 878, 948], "decai": [360, 361, 362, 569, 784, 785, 786, 948], "term": [360, 361, 362, 477, 480, 569, 784, 785, 786, 895, 898, 948], "mass": [360, 361, 362, 569, 784, 785, 786, 948], "gamma": [360, 361, 362, 569, 784, 785, 786, 948], "foral": [360, 361, 362, 569, 784, 785, 786, 948], "geq": [360, 361, 362, 569, 784, 785, 786, 948], "theta": [360, 361, 362, 569, 784, 785, 786, 948], "life": [360, 361, 362, 569, 784, 785, 786, 948], "exp": [360, 361, 362, 569, 784, 785, 786, 948], "ln": [360, 361, 362, 569, 784, 785, 786, 948], "smooth": [360, 361, 362, 569, 784, 785, 786, 948], "factor": [360, 361, 362, 506, 569, 784, 785, 786, 932, 948], "leq": [360, 361, 362, 569, 784, 785, 786, 948], "begin": [360, 361, 362, 473, 569, 784, 785, 786, 891, 948], "imbal": [360, 361, 362, 569, 784, 785, 786, 948], "ew": [360, 361, 362, 569, 784, 785, 786, 948], "w_i": [360, 361, 362, 569, 784, 785, 786, 948], "recurs": [360, 361, 362, 569, 784, 785, 786, 948], "y_0": [360, 361, 362, 569, 784, 785, 786, 948], "x_0": [360, 361, 362, 569, 784, 785, 786, 948], "y_t": [360, 361, 362, 569, 784, 785, 786, 948], "y_": [360, 361, 362, 569, 784, 785, 786, 948], "x_t": [360, 361, 362, 569, 784, 785, 786, 948], "observ": [360, 361, 362, 569, 784, 785, 786, 948], "x_2": [360, 361, 362, 569, 784, 785, 786, 948], "428571": [360, 569], "bia": [361, 362, 394, 445, 460, 569, 785, 786, 821, 858, 878, 948], "unbias": [361, 362, 569, 785, 786, 948], "963624": [361, 569, 785, 948], "928571": [362, 569, 786, 948], "wildcard": [363, 516, 523, 529, 530, 538, 553, 569], "regex": [363, 411, 467, 468, 471, 473, 474, 482, 483, 490, 536, 546, 549, 559, 569, 885, 886, 889, 891, 892, 900, 901, 908], "aa": [363, 536, 569], "ba": [363, 536, 569], "cc": [363, 536, 569], "718282": [364, 569], "389056": [364, 569], "54": [364, 569], "59815": [364, 569], "expand": [365, 410, 411, 436, 569, 788, 948], "favour": [365, 569, 788, 948], "arr": [365, 535, 569, 570, 788, 930, 948, 949], "exprlistnamespac": [365, 371, 437, 569], "exprstringnamespac": [365, 569], "pythonliter": [366, 546, 549, 569, 642, 664, 789, 828, 831, 948], "extrem": [366, 569, 789, 948], "group_col": [369, 514, 569], "g1": [369, 514, 569], "g2": [369, 514, 569], "lt": [369, 514, 569, 948], "gte": [369, 514, 569], "divis": [373, 508, 569], "truediv": [373, 569], "9774092659964970114": [377, 569], "13614470193936745724": [377, 569], "1101441246220388612": [377, 569], "11638928888656214026": [377, 569], "13382926553367784577": [377, 569], "cumsum": [379, 498, 569, 603, 664, 948], "interpolationmethod": [380, 569, 801, 948], "regrid": [380, 569], "grid": [380, 569], "df_original_grid": [380, 569], "grid_point": [380, 569], "df_new_grid": [380, 569], "conflat": [381, 569], "finit": [383, 508, 526, 556, 569, 806, 948], "primit": [385, 569, 930, 948], "optional_memb": [385, 569, 809, 948], "infinit": [386, 508, 569, 810, 948], "_isnan": [387, 569], "b_isnan": [387, 569], "negat": [388, 569], "_is_not_nan": [389, 569], "b_is_not_nan": [389, 569], "_not_nul": [390, 569], "a_not_nul": [390, 569], "b_not_nul": [390, 569], "_isnul": [391, 569], "a_isnul": [391, 569], "b_isnul": [391, 569], "undo": [393, 415, 569], "duplicateerror": [393, 569, 580], "occurr": [393, 569, 799, 948], "333333": [393, 448, 569, 840, 861, 948], "fisher": [394, 460, 569, 821, 878, 948], "fourth": [394, 569, 821, 948], "subtract": [394, 498, 569, 821, 948], "distribut": [394, 460, 569, 821, 878, 948], "elimin": [394, 569, 821, 948], "bias": [394, 460, 569, 821, 878, 948], "scipi": [394, 460, 569, 821, 878, 948], "stat": [394, 460, 569, 821, 878, 948], "153061": [394, 569], "logarithm": [400, 401, 569, 824, 825, 948], "584963": [400, 569], "30103": [401, 569], "60206": [401, 569], "lowest": [402, 569], "9223372036854775808": [402, 569], "agg_list": [404, 569], "elementwis": [404, 439, 440, 441, 442, 443, 444, 446, 447, 448, 516, 517, 569, 852, 853, 854, 855, 856, 857, 859, 860, 861, 948], "third": [404, 569], "parti": [404, 569], "book": [404, 569], "argmax": [404, 569], "_revers": [405, 438, 499, 569], "b_revers": [405, 438, 499, 569], "remap": [406, 569, 827, 948], "lookup": [406, 569, 827, 948], "country_code_dict": [406, 569], "ca": [406, 569], "canada": [406, 569], "de": [406, 569], "germani": [406, 569], "fr": [406, 569], "franc": [406, 569], "country_cod": [406, 569], "unknown": [406, 544, 569], "rest": [406, 569], "computeerror": [412, 481, 580, 899], "keep_nam": [415, 569], "modulu": [417, 569], "xlog2": [419, 429, 569], "poison": [421, 422, 569, 836, 837, 948], "nanmax": [421, 422, 569, 836, 837, 948], "wherea": [421, 422, 569, 602, 609, 664, 836, 837, 948], "inequ": [423, 569], "outcom": [426, 569], "_max": [426, 569], "c_max": [426, 569], "_min": [426, 569], "c_min": [426, 569], "recent": [427, 569, 840, 948], "percent": [427, 569, 840, 948], "090909": [427, 569], "extract_numb": [428, 569], "r": [428, 468, 472, 473, 474, 482, 569, 886, 890, 891, 892, 900], "expon": [429, 569, 948], "512": [429, 569, 840, 948], "reverse_": [430, 569], "reverse_a": [430, 569], "reverse_fruit": [430, 569], "reverse_b": [430, 569], "reverse_car": [430, 569], "rankmethod": [433, 569, 846, 948], "ti": [433, 569, 846, 948], "competit": [433, 569, 846, 948], "highest": [433, 511, 526, 556, 569, 664, 846, 948], "safe": [435, 492, 569, 848, 930, 948], "coerc": [436, 569], "dim": [437, 569, 850, 948], "fruits_revers": [438, 499, 569], "cars_revers": [438, 499, 569], "window_s": [439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 569, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 948], "rolling_min": [439, 569, 852, 948], "rolling_max": [439, 569, 852, 948], "rolling_mean": [439, 569, 852, 948], "rolling_sum": [439, 569, 852, 948], "multipli": [439, 440, 441, 442, 443, 444, 446, 447, 448, 569, 852, 853, 854, 855, 856, 857, 859, 860, 861, 948], "358899": [439, 569], "041452": [439, 569], "567764": [439, 569], "travers": [440, 441, 443, 446, 447, 448, 569, 853, 854, 856, 859, 860, 861, 948], "vector": [440, 441, 443, 446, 447, 448, 569, 853, 854, 856, 859, 860, 861, 948], "5h": [440, 441, 442, 443, 444, 446, 447, 448, 569], "33": [444, 449, 523, 569, 857, 948], "skew": [445, 569, 858, 948], "527525": [446, 569, 859, 948], "digit": [449, 495, 569, 862, 886, 913, 948], "searchsortedsid": [451, 569, 864, 948], "leftmost": [451, 569, 864, 948], "rightmost": [451, 569, 864, 948], "six": [451, 569], "extrema": [455, 569, 872, 948], "112": [455, 569], "129": [455, 569], "i8": [455, 569, 736, 851, 936, 948], "8589934592": [455, 569], "1073741824": [455, 569], "content": [456, 512, 569, 874, 948], "175201": [459, 569, 877, 948], "about": [460, 569, 878, 948], "unimod": [460, 569, 878, 948], "skewtest": [460, 569, 878, 948], "speak": [460, 569, 878, 948], "g_1": [460, 569, 878, 948], "m_3": [460, 569, 878, 948], "m_2": [460, 569, 878, 948], "m_i": [460, 569, 878, 948], "sum_": [460, 569, 878, 948], "texttt": [460, 569, 878, 948], "k_3": [460, 569, 878, 948], "k_2": [460, 569, 878, 948], "sqrt": [460, 569, 878, 948], "343622": [460, 569], "value1": [463, 569], "value2": [463, 569], "attain": [463, 569], "414214": [464, 569, 881, 948], "ends_with": [467, 490, 908], "crab": [467, 885], "dog": [467, 493, 494, 525, 885], "rab": [467, 885], "success": [468, 474, 886, 892], "overlap": [468, 474, 886, 892], "captur": [468, 473, 474, 886, 891, 892], "123": [468, 474, 483, 886, 892, 901, 927, 948], "bla": [468, 474, 886, 892], "asd": [468, 474, 886, 892], "678": [468, 474, 886, 892], "910t": [468, 474, 886, 892], "count_digit": 468, "666f6f": [470, 888], "626172": [470, 888], "mango": [471, 490, 889, 908], "go": [471, 889], "has_suffix": 471, "group_index": [473, 891], "vote": [473, 891], "ballon_dor": [473, 891], "candid": [473, 891], "messi": [473, 891], "ref": [473, 891], "candidat": [473, 891], "jorginho": [473, 891], "ronaldo": [473, 891], "extracted_nr": 474, "910": [474, 892], "json_path_match": [475, 893], "jsonpath": [475, 476, 893, 894], "json_path": [476, 894], "regardless": [476, 894], "json_val": [476, 894], "n_char": [477, 895], "caf\u00e9": [477, 480, 895, 898], "345": [477, 480, 895, 898], "\u6771\u4eac": [477, 480, 895, 898], "nchar": [477, 480], "fillchar": [478, 484, 896, 902], "justifi": [478, 484, 896, 902], "pad": [478, 484, 495, 896, 902, 913], "cow": [478, 484, 896, 902], "monkei": [478, 484, 896, 902], "hippopotamu": [478, 484, 896, 902], "strip": [479, 485, 897, 903], "tworld": [479, 491, 897, 909], "wod": [479, 485, 897, 903], "rld": [479, 897], "text": [480, 482, 483, 898], "radix": [481, 899], "parseerror": [481, 899], "becom": [481, 899], "silent": [481, 899], "110": [481, 899], "010": [481, 899], "fa1e": [481, 899], "ff00": [481, 899], "cafe": [481, 899], "64030": [481, 899], "65280": [481, 899], "51966": [481, 899], "replace_al": [482, 900], "123abc": [482, 900], "abc456": [482, 900], "abcabc": [483, 901], "123a123": [483, 901], "bc": [483, 559, 901], "trail": [485, 491, 903, 909], "worl": [485, 491, 903, 909], "subslic": [486, 904], "pear": [486, 904], "papaya": [486, 904], "dragonfruit": [486, 904], "s_slice": 486, "ear": [486, 904], "aya": [486, 904], "uit": [486, 904], "ya": [486, 904], "onf": [486, 904], "a_1": [488, 906, 926, 948], "d_4": [488, 906], "rename_field": [488, 489, 906, 907], "first_part": [488, 489, 906, 907], "second_part": [488, 489, 906, 907], "remaind": [489, 907], "app": [490, 908], "has_prefix": 490, "polarstemporaltyp": [492, 910], "tz_awar": [492, 910], "strftime": [492, 910], "anywher": [492, 910], "futur": 492, "3f": 492, "00z": [492, 910], "sun": [492, 910], "jul": [492, 910], "34": [492, 910], "lowercas": [493, 911], "variant": [493, 494], "uppercas": [494, 912], "100000": 495, "0010": 495, "0001": 495, "00000": 495, "00001": 495, "cd": [496, 497], "struct_col": [496, 497], "www": 497, "xxx": 497, "yyi": 497, "zzz": 497, "obvious": 497, "structfieldnotfounderror": [497, 580], "761594": [505, 569, 923, 948], "replic": [506, 569, 932, 948], "vals_phys": [506, 569], "bottom_k": [507, 569], "floordiv": [508, 569], "behaviour": [508, 569], "ieee": [508, 569], "754": [508, 569], "mathemat": [508, 535, 569], "undefin": [508, 569], "On": [508, 569], "operand": [508, 569], "infin": [508, 569], "value_count": [510, 569, 948], "9223372036854775807": [511, 569], "multithread": [512, 569], "binary_str": [515, 569], "zfill": [515, 569], "250": [515, 569, 854, 948], "bin_x": [515, 569], "bin_i": [515, 569], "xor_xi": [515, 569], "bin_xor_xi": [515, 569], "00001010": [515, 569], "00000001": [515, 569], "00001011": [515, 569], "00001000": [515, 569], "00000010": [515, 569], "11111010": [515, 569], "00000011": [515, 569], "249": [515, 569], "11111001": [515, 569], "01000010": [515, 569], "00000100": [515, 569], "70": [515, 569], "01000110": [515, 569], "columnwis": [516, 517], "AND": 516, "bitwis": [516, 517], "returns_scalar": 518, "product_a": 518, "49": 518, "Be": 519, "more_nam": 523, "hamburg": 523, "lag": 524, "mimic": 524, "a_lag_": 524, "a_rol": 524, "plai": 525, "swim": 525, "walk": 525, "full_sent": 525, "correlationmethod": 526, "propagate_nan": [526, 556], "spearman": [526, 556], "larger": [526, 556, 628, 629, 664], "544705": [526, 551], "covari": 528, "acc": [529, 530, 538, 553], "include_init": 529, "accumul": [529, 530, 538, 553], "fn": [529, 530, 538, 553], "new_valu": [529, 530, 538, 553], "cumreduc": 529, "cumfold": 531, "999999": 533, "add_week": 534, "add_dai": 534, "add_second": 534, "add_millisecond": 534, "add_hour": 534, "add_millisec": 534, "ond": 534, "a_b_doubl": 535, "fstring": 539, "placehold": 539, "hello_": 539, "_world": 539, "foo_": 539, "_bar_": 539, "foo_a_bar_1": 539, "foo_b_bar_2": 539, "foo_c_bar_3": 539, "epoch": [540, 769], "timestep": 540, "1666683077": 540, "1666683099": 540, "39": 540, "12345": [540, 720, 794, 862, 948], "12346": 540, "agg_group": [541, 569], "allow_object": 544, "valueexcept": 544, "test_func": 545, "selector": [546, 549, 559], "favor": [551, 556], "605551": 557, "605551275463989": 557, "my_struct": 558, "q": 558, "statement": 562, "chain": 562, "isn": 562, "thens": 562, "elif": 562, "pick": 562, "sometim": 568, "and_": 569, "arcco": [569, 948], "arccosh": [569, 948], "arcsin": [569, 948], "arcsinh": [569, 948], "arctan": [569, 948], "arctanh": [569, 948], "arg_max": [569, 948], "arg_min": [569, 948], "arg_sort": [569, 948], "arg_uniqu": [569, 948], "backward_fil": 569, "clip_max": [569, 948], "clip_min": [569, 948], "co": [569, 948], "cosh": [569, 948], "cumcount": 569, "cummax": [569, 948], "cummin": [569, 948], "cumulative_ev": [569, 948], "entropi": [569, 948], "eq": [569, 948], "ewm_mean": [569, 948], "ewm_std": [569, 948], "ewm_var": [569, 948], "extend_const": [569, 948], "flatten": 569, "ge": [569, 948], "gt": [569, 948], "inspect": [569, 664], "is_between": [569, 948], "is_finit": [569, 948], "is_first": [569, 948], "is_in": [569, 948], "is_infinit": [569, 948], "is_nan": [569, 948], "is_not_nan": [569, 948], "is_not_nul": [569, 948], "kurtosi": [569, 948], "le": [569, 948], "log10": [569, 948], "map_alia": 569, "map_dict": [569, 948], "mod": 569, "mul": 569, "nan_max": [569, 948], "nan_min": [569, 948], "ne": [569, 948], "or_": 569, "pct_chang": [569, 948], "pow": [569, 948], "reinterpret": [569, 948], "repeat_bi": 569, "rolling_appli": [569, 948], "rolling_median": [569, 948], "rolling_quantil": [569, 948], "rolling_skew": [569, 948], "rolling_std": [569, 948], "rolling_var": [569, 948], "search_sort": [569, 948], "set_sort": [569, 948], "shrink_dtyp": [569, 948], "sin": [569, 948], "sinh": [569, 948], "sort_bi": 569, "tan": [569, 948], "tanh": [569, 948], "to_phys": [569, 948], "unique_count": [569, 948], "xor": 569, "expos": 580, "registr": 580, "miscellan": 580, "arrowerror": 580, "columnnotfounderror": 580, "invalidoperationerror": 580, "nodataerror": 580, "polarspanicerror": 580, "schemaerror": 580, "schemafieldnotfounderror": 580, "shapeerror": 580, "build_info": 580, "get_index_typ": 580, "show_vers": 580, "threadpool_s": 580, "sqlcontext": [580, 955], "hit": [583, 664], "node": [583, 603, 610, 614, 618, 621, 664], "huge": [586, 664], "saver": [586, 664], "purpos": [593, 664], "influenc": [593, 610, 664], "read_json": [598, 645, 664], "lazygroupbi": [599, 600, 601, 664], "other_lf": [605, 664], "validate_output_schema": [610, 664], "streamabl": [610, 614, 664], "past": [610, 664], "paramount": [610, 664], "bug": [610, 648, 664], "elig": [610, 664], "invari": [610, 664], "upheld": [610, 664], "prune": [610, 664], "show_plot": [618, 664], "truncate_nod": [618, 664], "figsiz": [618, 627, 664], "gantt": [618, 664], "plot": [618, 627, 664], "groupby_partit": [618, 664], "470": [618, 664], "475": [618, 664], "1964": [618, 664], "from_json": [620, 664], "swap": [621, 664], "output_path": [627, 664], "raw_output": [627, 664], "figur": [627, 664], "persist": [628, 629, 664], "ram": [628, 629, 664], "slightli": [628, 629, 664], "my_larger_than_ram_fil": [628, 629, 664], "data_pagesize_limit": [629, 664], "290994": [632, 664], "118034": [632, 664], "433013": [632, 664], "1875": [640, 664], "polarsexprtyp": [642, 664], "extern": [643, 664], "lf_other": [643, 664], "afoo": [643, 664], "cfoo": [643, 664], "train_lf": [643, 664], "feature_0": [643, 664], "feature_1": [643, 664], "test_lf": [643, 664], "_train": [643, 664], "feature_0_train": [643, 664], "dataframescan": [645, 664], "output_schema": [645, 664], "initialis": 664, "lf2": 664, "lf3": 664, "lf4": 664, "lf5": 664, "lf6": 664, "explain": 664, "profil": 664, "sink_ipc": 664, "sink_parquet": 664, "with_context": 664, "sr": [669, 948], "new_aliased_sr": [669, 948], "append_chunk": [672, 948], "super": [672, 948], "141593": [674, 948], "292432": [675, 948], "549306": [679, 948], "listnamespac": [685, 788, 850, 948], "catnamespac": 718, "56789": [720, 794, 862, 948], "901234": [720, 794, 862, 948], "pi": [727, 876, 922, 948], "1232e": [727, 948], "quick": [735, 948], "series_num": [735, 948], "581139": [735, 948], "series_str": [735, 948], "datetimenamespac": 740, "ser": [744, 745, 774], "replace_time_zon": [744, 745, 774], "kathmandu": [744, 745, 774], "0545": [744, 745, 774], "500m": [756, 758, 764, 771], "500000": 756, "2m": 761, "500000000": 764, "date_minus_1y_2mon": 766, "1583020800": 769, "1585699200": 769, "1588291200": 769, "nyc": 769, "edt": 769, "1583038800": 769, "1585717200": 769, "1588309200": 769, "165": [770, 776], "series_equ": [770, 776, 948], "timestamp_u": 775, "978307200000000000": 775, "978393600000000000": 775, "978480000000000000": 775, "005": [782, 948], "06293300616044681": [782, 948], "65": [782, 948], "8568409950394724": [782, 948], "4000000": [783, 948], "814697265625": [783, 948], "stringnamespac": [788, 883, 948], "bitmask": [796, 948], "swiftli": [796, 948], "10734580197236529959": [797, 948], "3022416320763508302": [797, 948], "13756996518000038261": [797, 948], "bin_count": [799, 948], "a_count": [799, 948], "fall": [802, 948], "2147483648": [826, 948], "iso3166": [827, 948], "tur": [827, 948], "jpn": [827, 948], "nld": [827, 948], "country_lookup": [827, 948], "japan": [827, 948], "t\u00fcrkiy": [827, 948], "netherland": [827, 948], "unrecognis": [827, 948], "unspecifi": [827, 948], "country_nam": [827, 948], "166667": [840, 948], "142857": [840, 948], "peak": [841, 842, 948], "quanil": [844, 948], "nanstd": [852, 948], "858612": [852, 948], "200": [853, 854, 856, 948], "150": [854, 948], "350": [854, 948], "450": [854, 948], "381802": [858, 948], "dev": [859, 948], "57": [862, 948], "frequent": [866, 867, 948], "mutat": [867, 948], "2246e": [876, 922, 948], "6331e16": [922, 948], "lib": [925, 948], "int64arrai": [925, 948], "a_2": [926, 948], "a_3": [926, 948], "s_from_str_repr": [928, 948], "zero_copy_onli": [930, 948], "writabl": [930, 948], "complet": [930, 948], "view": [930, 948], "presenc": [930, 948], "immut": [930, 948], "127": [936, 948], "seriesview": [939, 948], "arraylik": 948, "dtype_if_empti": 948, "position": 948, "scenario": 948, "through": 948, "chunk_length": 948, "cut": 948, "get_chunk": 948, "has_valid": 948, "hist": 948, "is_boolean": 948, "is_float": 948, "is_numer": 948, "is_sort": 948, "is_tempor": 948, "is_utf8": 948, "new_from_index": 948, "peak_max": 948, "peak_min": 948, "power": 948, "qcut": 948, "set_at_idx": 948}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [34, 0, 1, "", "DataType"], [35, 0, 1, "", "Date"], [36, 0, 1, "", "Datetime"], [37, 0, 1, "", "Decimal"], [38, 0, 1, "", "Duration"], [39, 0, 1, "", "Float32"], [40, 0, 1, "", "Float64"], [41, 0, 1, "", "Int16"], [42, 0, 1, "", "Int32"], [43, 0, 1, "", "Int64"], [44, 0, 1, "", "Int8"], [45, 0, 1, "", "List"], [46, 0, 1, "", "Null"], [47, 0, 1, "", "Object"], [955, 0, 1, "", "SQLContext"], [51, 0, 1, "", "StringCache"], [52, 0, 1, "", "Struct"], [53, 0, 1, "", "Time"], [54, 0, 1, "", "UInt16"], [55, 0, 1, "", "UInt32"], [56, 0, 1, "", "UInt64"], [57, 0, 1, "", "UInt8"], [58, 0, 1, "", "Unknown"], [59, 0, 1, "", "Utf8"], [60, 4, 1, "", "align_frames"], [516, 4, 1, "", "all"], [517, 4, 1, "", "any"], [518, 4, 1, "", "apply"], [519, 4, 1, "", "arange"], [520, 4, 1, "", "arg_sort_by"], [65, 4, 1, "", "arg_where"], [521, 4, 1, "", "avg"], [66, 4, 1, "", "build_info"], [522, 4, 1, "", "coalesce"], [523, 4, 1, "", "col"], [67, 4, 1, "", "collect_all"], [68, 4, 1, "", "concat"], [524, 4, 1, "", "concat_list"], [525, 4, 1, "", "concat_str"], [526, 4, 1, "", "corr"], [527, 4, 1, "", "count"], [528, 4, 1, "", "cov"], [529, 4, 1, "", "cumfold"], [530, 4, 1, "", "cumreduce"], [531, 4, 1, "", "cumsum"], [69, 4, 1, "", "cut"], [532, 4, 1, "", "date"], [70, 4, 1, "", "date_range"], [533, 4, 1, "", "datetime"], [534, 4, 1, "", "duration"], [535, 4, 1, "", "element"], [536, 4, 1, "", "exclude"], [537, 4, 1, "", "first"], [538, 4, 1, "", "fold"], [539, 4, 1, "", "format"], [85, 4, 1, "", "from_arrow"], [86, 4, 1, "", "from_dataframe"], [87, 4, 1, "", "from_dict"], [88, 4, 1, "", "from_dicts"], [540, 4, 1, "", "from_epoch"], [89, 4, 1, "", "from_numpy"], [90, 4, 1, "", "from_pandas"], [91, 4, 1, "", "from_records"], [92, 4, 1, "", "from_repr"], [93, 4, 1, "", "get_dummies"], [94, 4, 1, "", "get_index_type"], [541, 4, 1, "", "groups"], [542, 4, 1, "", "head"], [543, 4, 1, "", "list"], [544, 4, 1, "", "lit"], [545, 4, 1, "", "map"], [546, 4, 1, "", "max"], [547, 4, 1, "", "mean"], [548, 4, 1, "", "median"], [549, 4, 1, "", "min"], [550, 4, 1, "", "n_unique"], [96, 4, 1, "", "ones"], [551, 4, 1, "", "pearson_corr"], [552, 4, 1, "", "quantile"], [97, 4, 1, "", "read_avro"], [98, 4, 1, "", "read_csv"], [99, 4, 1, "", "read_csv_batched"], [100, 4, 1, "", "read_database"], [101, 4, 1, "", "read_delta"], [102, 4, 1, "", "read_excel"], [103, 4, 1, "", "read_ipc"], [104, 4, 1, "", "read_ipc_schema"], [105, 4, 1, "", "read_json"], [106, 4, 1, "", "read_ndjson"], [107, 4, 1, "", "read_parquet"], [108, 4, 1, "", "read_parquet_schema"], [553, 4, 1, "", "reduce"], [554, 4, 1, "", "repeat"], [109, 4, 1, "", "scan_csv"], [110, 4, 1, "", "scan_delta"], [111, 4, 1, "", "scan_ipc"], [112, 4, 1, "", "scan_ndjson"], [113, 4, 1, "", "scan_parquet"], [114, 4, 1, "", "scan_pyarrow_dataset"], [555, 4, 1, "", "select"], [115, 4, 1, "", "show_versions"], [556, 4, 1, "", "spearman_rank_corr"], [557, 4, 1, "", "std"], [558, 4, 1, "", "struct"], [559, 4, 1, "", "sum"], [560, 4, 1, "", "tail"], [122, 4, 1, "", "threadpool_size"], [123, 4, 1, "", "toggle_string_cache"], [561, 4, 1, "", "var"], [562, 4, 1, "", "when"], [124, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "activate_decimals"], [6, 1, 1, "", "load"], [7, 1, 1, "", "restore_defaults"], [8, 1, 1, "", "save"], [9, 1, 1, "", "set_ascii_tables"], [10, 1, 1, "", "set_fmt_float"], [11, 1, 1, "", "set_fmt_str_lengths"], [12, 1, 1, "", "set_streaming_chunk_size"], [13, 1, 1, "", "set_tbl_cell_alignment"], [14, 1, 1, "", "set_tbl_cols"], [15, 1, 1, "", "set_tbl_column_data_type_inline"], [16, 1, 1, "", "set_tbl_dataframe_shape_below"], [17, 1, 1, "", "set_tbl_formatting"], [18, 1, 1, "", "set_tbl_hide_column_data_types"], [19, 1, 1, "", "set_tbl_hide_column_names"], [20, 1, 1, "", "set_tbl_hide_dataframe_shape"], [21, 1, 1, "", "set_tbl_hide_dtype_separator"], [22, 1, 1, "", "set_tbl_rows"], [23, 1, 1, "", "set_tbl_width_chars"], [24, 1, 1, "", "set_verbose"], [25, 1, 1, "", "state"]], "polars.DataFrame": [[127, 1, 1, "", "__dataframe__"], [128, 1, 1, "", "apply"], [129, 1, 1, "", "clear"], [130, 1, 1, "", "clone"], [131, 2, 1, "", "columns"], [132, 1, 1, "", "corr"], [133, 1, 1, "", "describe"], [134, 1, 1, "", "drop"], [135, 1, 1, "", "drop_in_place"], [136, 1, 1, "", "drop_nulls"], [137, 2, 1, "", "dtypes"], [138, 1, 1, "", "estimated_size"], [139, 1, 1, "", "explode"], [140, 1, 1, "", "extend"], [141, 1, 1, "", "fill_nan"], [142, 1, 1, "", "fill_null"], [143, 1, 1, "", "filter"], [144, 1, 1, "", "find_idx_by_name"], [145, 1, 1, "", "fold"], [146, 1, 1, "", "frame_equal"], [147, 1, 1, "", "get_column"], [148, 1, 1, "", "get_columns"], [149, 1, 1, "", "glimpse"], [150, 1, 1, "", "groupby"], [151, 1, 1, "", "groupby_dynamic"], [152, 1, 1, "", "groupby_rolling"], [153, 1, 1, "", "hash_rows"], [154, 1, 1, "", "head"], [155, 2, 1, "", "height"], [156, 1, 1, "", "hstack"], [157, 1, 1, "", "insert_at_idx"], [158, 1, 1, "", "interpolate"], [159, 1, 1, "", "is_duplicated"], [160, 1, 1, "", "is_empty"], [161, 1, 1, "", "is_unique"], [162, 1, 1, "", "item"], [163, 1, 1, "", "iter_rows"], [164, 1, 1, "", "iter_slices"], [165, 1, 1, "", "join"], [166, 1, 1, "", "join_asof"], [167, 1, 1, "", "lazy"], [168, 1, 1, "", "limit"], [169, 1, 1, "", "max"], [170, 1, 1, "", "mean"], [171, 1, 1, "", "median"], [172, 1, 1, "", "melt"], [173, 1, 1, "", "merge_sorted"], [174, 1, 1, "", "min"], [175, 1, 1, "", "n_chunks"], [176, 1, 1, "", "n_unique"], [177, 1, 1, "", "null_count"], [178, 1, 1, "", "partition_by"], [179, 1, 1, "", "pipe"], [180, 1, 1, "", "pivot"], [181, 1, 1, "", "product"], [182, 1, 1, "", "quantile"], [183, 1, 1, "", "rechunk"], [184, 1, 1, "", "rename"], [185, 1, 1, "", "replace"], [186, 1, 1, "", "replace_at_idx"], [187, 1, 1, "", "reverse"], [188, 1, 1, "", "row"], [189, 1, 1, "", "rows"], [190, 1, 1, "", "sample"], [191, 2, 1, "", "schema"], [192, 1, 1, "", "select"], [193, 2, 1, "", "shape"], [194, 1, 1, "", "shift"], [195, 1, 1, "", "shift_and_fill"], [196, 1, 1, "", "shrink_to_fit"], [197, 1, 1, "", "slice"], [198, 1, 1, "", "sort"], [199, 1, 1, "", "std"], [200, 1, 1, "", "sum"], [201, 1, 1, "", "tail"], [202, 1, 1, "", "take_every"], [203, 1, 1, "", "to_arrow"], [204, 1, 1, "", "to_dict"], [205, 1, 1, "", "to_dicts"], [206, 1, 1, "", "to_dummies"], [207, 1, 1, "", "to_init_repr"], [208, 1, 1, "", "to_numpy"], [209, 1, 1, "", "to_pandas"], [210, 1, 1, "", "to_series"], [211, 1, 1, "", "to_struct"], [212, 1, 1, "", "top_k"], [213, 1, 1, "", "transpose"], [214, 1, 1, "", "unique"], [215, 1, 1, "", "unnest"], [216, 1, 1, "", "unstack"], [217, 1, 1, "", "update"], [218, 1, 1, "", "upsample"], [219, 1, 1, "", "var"], [220, 1, 1, "", "vstack"], [221, 2, 1, "", "width"], [222, 1, 1, "", "with_columns"], [223, 1, 1, "", "with_row_count"], [26, 1, 1, "", "write_avro"], [27, 1, 1, "", "write_csv"], [28, 1, 1, "", "write_database"], [29, 1, 1, "", "write_excel"], [30, 1, 1, "", "write_ipc"], [31, 1, 1, "", "write_json"], [32, 1, 1, "", "write_ndjson"], [33, 1, 1, "", "write_parquet"]], "polars.DataType": [[34, 1, 1, "", "__init__"]], "polars.Date": [[35, 1, 1, "", "__init__"]], "polars.Datetime": [[36, 1, 1, "", "__init__"]], "polars.Decimal": [[37, 1, 1, "", "__init__"]], "polars.Duration": [[38, 1, 1, "", "__init__"]], "polars.Expr": [[251, 1, 1, "", "abs"], [252, 1, 1, "", "add"], [253, 1, 1, "", "agg_groups"], [254, 1, 1, "", "alias"], [255, 1, 1, "", "all"], [256, 1, 1, "", "and_"], [257, 1, 1, "", "any"], [258, 1, 1, "", "append"], [259, 1, 1, "", "apply"], [260, 1, 1, "", "arccos"], [261, 1, 1, "", "arccosh"], [262, 1, 1, "", "arcsin"], [263, 1, 1, "", "arcsinh"], [264, 1, 1, "", "arctan"], [265, 1, 1, "", "arctanh"], [266, 1, 1, "", "arg_max"], [267, 1, 1, "", "arg_min"], [268, 1, 1, "", "arg_sort"], [269, 1, 1, "", "arg_true"], [270, 1, 1, "", "arg_unique"], [297, 1, 1, "", "backward_fill"], [303, 1, 1, "", "cast"], [305, 1, 1, "", "ceil"], [306, 1, 1, "", "clip"], [307, 1, 1, "", "clip_max"], [308, 1, 1, "", "clip_min"], [309, 1, 1, "", "cos"], [310, 1, 1, "", "cosh"], [311, 1, 1, "", "count"], [312, 1, 1, "", "cumcount"], [313, 1, 1, "", "cummax"], [314, 1, 1, "", "cummin"], [315, 1, 1, "", "cumprod"], [316, 1, 1, "", "cumsum"], [317, 1, 1, "", "cumulative_eval"], [318, 1, 1, "", "diff"], [319, 1, 1, "", "dot"], [320, 1, 1, "", "drop_nans"], [321, 1, 1, "", "drop_nulls"], [358, 1, 1, "", "entropy"], [359, 1, 1, "", "eq"], [360, 1, 1, "", "ewm_mean"], [361, 1, 1, "", "ewm_std"], [362, 1, 1, "", "ewm_var"], [363, 1, 1, "", "exclude"], [364, 1, 1, "", "exp"], [365, 1, 1, "", "explode"], [366, 1, 1, "", "extend_constant"], [367, 1, 1, "", "fill_nan"], [368, 1, 1, "", "fill_null"], [369, 1, 1, "", "filter"], [370, 1, 1, "", "first"], [371, 1, 1, "", "flatten"], [372, 1, 1, "", "floor"], [373, 1, 1, "", "floordiv"], [374, 1, 1, "", "forward_fill"], [375, 1, 1, "", "ge"], [376, 1, 1, "", "gt"], [377, 1, 1, "", "hash"], [378, 1, 1, "", "head"], [379, 1, 1, "", "inspect"], [380, 1, 1, "", "interpolate"], [381, 1, 1, "", "is_between"], [382, 1, 1, "", "is_duplicated"], [383, 1, 1, "", "is_finite"], [384, 1, 1, "", "is_first"], [385, 1, 1, "", "is_in"], [386, 1, 1, "", "is_infinite"], [387, 1, 1, "", "is_nan"], [388, 1, 1, "", "is_not"], [389, 1, 1, "", "is_not_nan"], [390, 1, 1, "", "is_not_null"], [391, 1, 1, "", "is_null"], [392, 1, 1, "", "is_unique"], [393, 1, 1, "", "keep_name"], [394, 1, 1, "", "kurtosis"], [395, 1, 1, "", "last"], [396, 1, 1, "", "le"], [397, 1, 1, "", "len"], [398, 1, 1, "", "limit"], [399, 1, 1, "", "list"], [400, 1, 1, "", "log"], [401, 1, 1, "", "log10"], [402, 1, 1, "", "lower_bound"], [403, 1, 1, "", "lt"], [404, 1, 1, "", "map"], [405, 1, 1, "", "map_alias"], [406, 1, 1, "", "map_dict"], [407, 1, 1, "", "max"], [408, 1, 1, "", "mean"], [409, 1, 1, "", "median"], [416, 1, 1, "", "min"], [417, 1, 1, "", "mod"], [418, 1, 1, "", "mode"], [419, 1, 1, "", "mul"], [420, 1, 1, "", "n_unique"], [421, 1, 1, "", "nan_max"], [422, 1, 1, "", "nan_min"], [423, 1, 1, "", "ne"], [424, 1, 1, "", "null_count"], [425, 1, 1, "", "or_"], [426, 1, 1, "", "over"], [427, 1, 1, "", "pct_change"], [428, 1, 1, "", "pipe"], [429, 1, 1, "", "pow"], [430, 1, 1, "", "prefix"], [431, 1, 1, "", "product"], [432, 1, 1, "", "quantile"], [433, 1, 1, "", "rank"], [434, 1, 1, "", "rechunk"], [435, 1, 1, "", "reinterpret"], [436, 1, 1, "", "repeat_by"], [437, 1, 1, "", "reshape"], [438, 1, 1, "", "reverse"], [439, 1, 1, "", "rolling_apply"], [440, 1, 1, "", "rolling_max"], [441, 1, 1, "", "rolling_mean"], [442, 1, 1, "", "rolling_median"], [443, 1, 1, "", "rolling_min"], [444, 1, 1, "", "rolling_quantile"], [445, 1, 1, "", "rolling_skew"], [446, 1, 1, "", "rolling_std"], [447, 1, 1, "", "rolling_sum"], [448, 1, 1, "", "rolling_var"], [449, 1, 1, "", "round"], [450, 1, 1, "", "sample"], [451, 1, 1, "", "search_sorted"], [452, 1, 1, "", "set_sorted"], [453, 1, 1, "", "shift"], [454, 1, 1, "", "shift_and_fill"], [455, 1, 1, "", "shrink_dtype"], [456, 1, 1, "", "shuffle"], [457, 1, 1, "", "sign"], [458, 1, 1, "", "sin"], [459, 1, 1, "", "sinh"], [460, 1, 1, "", "skew"], [461, 1, 1, "", "slice"], [462, 1, 1, "", "sort"], [463, 1, 1, "", "sort_by"], [464, 1, 1, "", "sqrt"], [465, 1, 1, "", "std"], [498, 1, 1, "", "sub"], [499, 1, 1, "", "suffix"], [500, 1, 1, "", "sum"], [501, 1, 1, "", "tail"], [502, 1, 1, "", "take"], [503, 1, 1, "", "take_every"], [504, 1, 1, "", "tan"], [505, 1, 1, "", "tanh"], [506, 1, 1, "", "to_physical"], [507, 1, 1, "", "top_k"], [508, 1, 1, "", "truediv"], [509, 1, 1, "", "unique"], [510, 1, 1, "", "unique_counts"], [511, 1, 1, "", "upper_bound"], [512, 1, 1, "", "value_counts"], [513, 1, 1, "", "var"], [514, 1, 1, "", "where"], [515, 1, 1, "", "xor"]], "polars.Expr.arr": [[271, 1, 1, "", "arg_max"], [272, 1, 1, "", "arg_min"], [273, 1, 1, "", "concat"], [274, 1, 1, "", "contains"], [275, 1, 1, "", "count_match"], [276, 1, 1, "", "diff"], [277, 1, 1, "", "eval"], [278, 1, 1, "", "explode"], [279, 1, 1, "", "first"], [280, 1, 1, "", "get"], [281, 1, 1, "", "head"], [282, 1, 1, "", "join"], [283, 1, 1, "", "last"], [284, 1, 1, "", "lengths"], [285, 1, 1, "", "max"], [286, 1, 1, "", "mean"], [287, 1, 1, "", "min"], [288, 1, 1, "", "reverse"], [289, 1, 1, "", "shift"], [290, 1, 1, "", "slice"], [291, 1, 1, "", "sort"], [292, 1, 1, "", "sum"], [293, 1, 1, "", "tail"], [294, 1, 1, "", "take"], [295, 1, 1, "", "to_struct"], [296, 1, 1, "", "unique"]], "polars.Expr.bin": [[298, 1, 1, "", "contains"], [299, 1, 1, "", "decode"], [300, 1, 1, "", "encode"], [301, 1, 1, "", "ends_with"], [302, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[304, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[322, 1, 1, "", "cast_time_unit"], [323, 1, 1, "", "combine"], [324, 1, 1, "", "convert_time_zone"], [325, 1, 1, "", "date"], [326, 1, 1, "", "datetime"], [327, 1, 1, "", "day"], [328, 1, 1, "", "days"], [329, 1, 1, "", "epoch"], [330, 1, 1, "", "hour"], [331, 1, 1, "", "hours"], [332, 1, 1, "", "is_leap_year"], [333, 1, 1, "", "iso_year"], [334, 1, 1, "", "microsecond"], [335, 1, 1, "", "microseconds"], [336, 1, 1, "", "millisecond"], [337, 1, 1, "", "milliseconds"], [338, 1, 1, "", "minute"], [339, 1, 1, "", "minutes"], [340, 1, 1, "", "month"], [341, 1, 1, "", "nanosecond"], [342, 1, 1, "", "nanoseconds"], [343, 1, 1, "", "offset_by"], [344, 1, 1, "", "ordinal_day"], [345, 1, 1, "", "quarter"], [346, 1, 1, "", "replace_time_zone"], [347, 1, 1, "", "round"], [348, 1, 1, "", "second"], [349, 1, 1, "", "seconds"], [350, 1, 1, "", "strftime"], [351, 1, 1, "", "time"], [352, 1, 1, "", "timestamp"], [353, 1, 1, "", "truncate"], [354, 1, 1, "", "week"], [355, 1, 1, "", "weekday"], [356, 1, 1, "", "with_time_unit"], [357, 1, 1, "", "year"]], "polars.Expr.meta": [[410, 1, 1, "", "has_multiple_outputs"], [411, 1, 1, "", "is_regex_projection"], [412, 1, 1, "", "output_name"], [413, 1, 1, "", "pop"], [414, 1, 1, "", "root_names"], [415, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[466, 1, 1, "", "concat"], [467, 1, 1, "", "contains"], [468, 1, 1, "", "count_match"], [469, 1, 1, "", "decode"], [470, 1, 1, "", "encode"], [471, 1, 1, "", "ends_with"], [472, 1, 1, "", "explode"], [473, 1, 1, "", "extract"], [474, 1, 1, "", "extract_all"], [475, 1, 1, "", "json_extract"], [476, 1, 1, "", "json_path_match"], [477, 1, 1, "", "lengths"], [478, 1, 1, "", "ljust"], [479, 1, 1, "", "lstrip"], [480, 1, 1, "", "n_chars"], [481, 1, 1, "", "parse_int"], [482, 1, 1, "", "replace"], [483, 1, 1, "", "replace_all"], [484, 1, 1, "", "rjust"], [485, 1, 1, "", "rstrip"], [486, 1, 1, "", "slice"], [487, 1, 1, "", "split"], [488, 1, 1, "", "split_exact"], [489, 1, 1, "", "splitn"], [490, 1, 1, "", "starts_with"], [491, 1, 1, "", "strip"], [492, 1, 1, "", "strptime"], [493, 1, 1, "", "to_lowercase"], [494, 1, 1, "", "to_uppercase"], [495, 1, 1, "", "zfill"]], "polars.Expr.struct": [[496, 1, 1, "", "field"], [497, 1, 1, "", "rename_fields"]], "polars.Float32": [[39, 1, 1, "", "__init__"]], "polars.Float64": [[40, 1, 1, "", "__init__"]], "polars.Int16": [[41, 1, 1, "", "__init__"]], "polars.Int32": [[42, 1, 1, "", "__init__"]], "polars.Int64": [[43, 1, 1, "", "__init__"]], "polars.Int8": [[44, 1, 1, "", "__init__"]], "polars.LazyFrame": [[583, 1, 1, "", "cache"], [584, 1, 1, "", "clear"], [585, 1, 1, "", "clone"], [586, 1, 1, "", "collect"], [587, 2, 1, "", "columns"], [588, 1, 1, "", "drop"], [589, 1, 1, "", "drop_nulls"], [590, 2, 1, "", "dtypes"], [591, 1, 1, "", "explain"], [592, 1, 1, "", "explode"], [593, 1, 1, "", "fetch"], [594, 1, 1, "", "fill_nan"], [595, 1, 1, "", "fill_null"], [596, 1, 1, "", "filter"], [597, 1, 1, "", "first"], [598, 1, 1, "", "from_json"], [599, 1, 1, "", "groupby"], [600, 1, 1, "", "groupby_dynamic"], [601, 1, 1, "", "groupby_rolling"], [602, 1, 1, "", "head"], [603, 1, 1, "", "inspect"], [604, 1, 1, "", "interpolate"], [605, 1, 1, "", "join"], [606, 1, 1, "", "join_asof"], [607, 1, 1, "", "last"], [608, 1, 1, "", "lazy"], [609, 1, 1, "", "limit"], [610, 1, 1, "", "map"], [611, 1, 1, "", "max"], [612, 1, 1, "", "mean"], [613, 1, 1, "", "median"], [614, 1, 1, "", "melt"], [615, 1, 1, "", "merge_sorted"], [616, 1, 1, "", "min"], [617, 1, 1, "", "pipe"], [618, 1, 1, "", "profile"], [619, 1, 1, "", "quantile"], [620, 1, 1, "", "read_json"], [621, 1, 1, "", "rename"], [622, 1, 1, "", "reverse"], [623, 2, 1, "", "schema"], [624, 1, 1, "", "select"], [625, 1, 1, "", "shift"], [626, 1, 1, "", "shift_and_fill"], [627, 1, 1, "", "show_graph"], [628, 1, 1, "", "sink_ipc"], [629, 1, 1, "", "sink_parquet"], [630, 1, 1, "", "slice"], [631, 1, 1, "", "sort"], [632, 1, 1, "", "std"], [633, 1, 1, "", "sum"], [634, 1, 1, "", "tail"], [635, 1, 1, "", "take_every"], [636, 1, 1, "", "top_k"], [637, 1, 1, "", "unique"], [638, 1, 1, "", "unnest"], [639, 1, 1, "", "update"], [640, 1, 1, "", "var"], [641, 2, 1, "", "width"], [642, 1, 1, "", "with_columns"], [643, 1, 1, "", "with_context"], [644, 1, 1, "", "with_row_count"], [645, 1, 1, "", "write_json"]], "polars.List": [[45, 1, 1, "", "__init__"]], "polars.Null": [[46, 1, 1, "", "__init__"]], "polars.Object": [[47, 1, 1, "", "__init__"]], "polars.SQLContext": [[48, 1, 1, "", "execute"], [49, 1, 1, "", "query"], [50, 1, 1, "", "register"]], "polars.Series": [[668, 1, 1, "", "abs"], [669, 1, 1, "", "alias"], [670, 1, 1, "", "all"], [671, 1, 1, "", "any"], [672, 1, 1, "", "append"], [673, 1, 1, "", "apply"], [674, 1, 1, "", "arccos"], [675, 1, 1, "", "arccosh"], [676, 1, 1, "", "arcsin"], [677, 1, 1, "", "arcsinh"], [678, 1, 1, "", "arctan"], [679, 1, 1, "", "arctanh"], [680, 1, 1, "", "arg_max"], [681, 1, 1, "", "arg_min"], [682, 1, 1, "", "arg_sort"], [683, 1, 1, "", "arg_true"], [684, 1, 1, "", "arg_unique"], [685, 3, 1, "", "arr"], [717, 1, 1, "", "cast"], [718, 3, 1, "", "cat"], [720, 1, 1, "", "ceil"], [721, 1, 1, "", "chunk_lengths"], [722, 1, 1, "", "clear"], [723, 1, 1, "", "clip"], [724, 1, 1, "", "clip_max"], [725, 1, 1, "", "clip_min"], [726, 1, 1, "", "clone"], [727, 1, 1, "", "cos"], [728, 1, 1, "", "cosh"], [729, 1, 1, "", "cummax"], [730, 1, 1, "", "cummin"], [731, 1, 1, "", "cumprod"], [732, 1, 1, "", "cumsum"], [733, 1, 1, "", "cumulative_eval"], [734, 1, 1, "", "cut"], [735, 1, 1, "", "describe"], [736, 1, 1, "", "diff"], [737, 1, 1, "", "dot"], [738, 1, 1, "", "drop_nans"], [739, 1, 1, "", "drop_nulls"], [740, 3, 1, "", "dt"], [781, 3, 1, "", "dtype"], [782, 1, 1, "", "entropy"], [783, 1, 1, "", "estimated_size"], [784, 1, 1, "", "ewm_mean"], [785, 1, 1, "", "ewm_std"], [786, 1, 1, "", "ewm_var"], [787, 1, 1, "", "exp"], [788, 1, 1, "", "explode"], [789, 1, 1, "", "extend_constant"], [790, 1, 1, "", "fill_nan"], [791, 1, 1, "", "fill_null"], [792, 1, 1, "", "filter"], [793, 3, 1, "", "flags"], [794, 1, 1, "", "floor"], [795, 1, 1, "", "get_chunks"], [796, 1, 1, "", "has_validity"], [797, 1, 1, "", "hash"], [798, 1, 1, "", "head"], [799, 1, 1, "", "hist"], [800, 3, 1, "", "inner_dtype"], [801, 1, 1, "", "interpolate"], [802, 1, 1, "", "is_between"], [803, 1, 1, "", "is_boolean"], [804, 1, 1, "", "is_duplicated"], [805, 1, 1, "", "is_empty"], [806, 1, 1, "", "is_finite"], [807, 1, 1, "", "is_first"], [808, 1, 1, "", "is_float"], [809, 1, 1, "", "is_in"], [810, 1, 1, "", "is_infinite"], [811, 1, 1, "", "is_nan"], [812, 1, 1, "", "is_not_nan"], [813, 1, 1, "", "is_not_null"], [814, 1, 1, "", "is_null"], [815, 1, 1, "", "is_numeric"], [816, 1, 1, "", "is_sorted"], [817, 1, 1, "", "is_temporal"], [818, 1, 1, "", "is_unique"], [819, 1, 1, "", "is_utf8"], [820, 1, 1, "", "item"], [821, 1, 1, "", "kurtosis"], [822, 1, 1, "", "len"], [823, 1, 1, "", "limit"], [824, 1, 1, "", "log"], [825, 1, 1, "", "log10"], [826, 1, 1, "", "lower_bound"], [827, 1, 1, "", "map_dict"], [828, 1, 1, "", "max"], [829, 1, 1, "", "mean"], [830, 1, 1, "", "median"], [831, 1, 1, "", "min"], [832, 1, 1, "", "mode"], [833, 1, 1, "", "n_chunks"], [834, 1, 1, "", "n_unique"], [835, 3, 1, "", "name"], [836, 1, 1, "", "nan_max"], [837, 1, 1, "", "nan_min"], [838, 1, 1, "", "new_from_index"], [839, 1, 1, "", "null_count"], [840, 1, 1, "", "pct_change"], [841, 1, 1, "", "peak_max"], [842, 1, 1, "", "peak_min"], [843, 1, 1, "", "product"], [844, 1, 1, "", "qcut"], [845, 1, 1, "", "quantile"], [846, 1, 1, "", "rank"], [847, 1, 1, "", "rechunk"], [848, 1, 1, "", "reinterpret"], [849, 1, 1, "", "rename"], [850, 1, 1, "", "reshape"], [851, 1, 1, "", "reverse"], [852, 1, 1, "", "rolling_apply"], [853, 1, 1, "", "rolling_max"], [854, 1, 1, "", "rolling_mean"], [855, 1, 1, "", "rolling_median"], [856, 1, 1, "", "rolling_min"], [857, 1, 1, "", "rolling_quantile"], [858, 1, 1, "", "rolling_skew"], [859, 1, 1, "", "rolling_std"], [860, 1, 1, "", "rolling_sum"], [861, 1, 1, "", "rolling_var"], [862, 1, 1, "", "round"], [863, 1, 1, "", "sample"], [864, 1, 1, "", "search_sorted"], [865, 1, 1, "", "series_equal"], [866, 1, 1, "", "set"], [867, 1, 1, "", "set_at_idx"], [868, 1, 1, "", "set_sorted"], [869, 3, 1, "", "shape"], [870, 1, 1, "", "shift"], [871, 1, 1, "", "shift_and_fill"], [872, 1, 1, "", "shrink_dtype"], [873, 1, 1, "", "shrink_to_fit"], [874, 1, 1, "", "shuffle"], [875, 1, 1, "", "sign"], [876, 1, 1, "", "sin"], [877, 1, 1, "", "sinh"], [878, 1, 1, "", "skew"], [879, 1, 1, "", "slice"], [880, 1, 1, "", "sort"], [881, 1, 1, "", "sqrt"], [882, 1, 1, "", "std"], [883, 3, 1, "", "str"], [918, 1, 1, "", "sum"], [919, 1, 1, "", "tail"], [920, 1, 1, "", "take"], [921, 1, 1, "", "take_every"], [922, 1, 1, "", "tan"], [923, 1, 1, "", "tanh"], [924, 3, 1, "", "time_unit"], [925, 1, 1, "", "to_arrow"], [926, 1, 1, "", "to_dummies"], [927, 1, 1, "", "to_frame"], [928, 1, 1, "", "to_init_repr"], [929, 1, 1, "", "to_list"], [930, 1, 1, "", "to_numpy"], [931, 1, 1, "", "to_pandas"], [932, 1, 1, "", "to_physical"], [933, 1, 1, "", "top_k"], [934, 1, 1, "", "unique"], [935, 1, 1, "", "unique_counts"], [936, 1, 1, "", "upper_bound"], [937, 1, 1, "", "value_counts"], [938, 1, 1, "", "var"], [939, 1, 1, "", "view"], [940, 1, 1, "", "zip_with"]], "polars.Series.arr": [[686, 1, 1, "", "arg_max"], [687, 1, 1, "", "arg_min"], [688, 1, 1, "", "concat"], [689, 1, 1, "", "contains"], [690, 1, 1, "", "count_match"], [691, 1, 1, "", "diff"], [692, 1, 1, "", "eval"], [693, 1, 1, "", "explode"], [694, 1, 1, "", "first"], [695, 1, 1, "", "get"], [696, 1, 1, "", "head"], [697, 1, 1, "", "join"], [698, 1, 1, "", "last"], [699, 1, 1, "", "lengths"], [700, 1, 1, "", "max"], [701, 1, 1, "", "mean"], [702, 1, 1, "", "min"], [703, 1, 1, "", "reverse"], [704, 1, 1, "", "shift"], [705, 1, 1, "", "slice"], [706, 1, 1, "", "sort"], [707, 1, 1, "", "sum"], [708, 1, 1, "", "tail"], [709, 1, 1, "", "take"], [710, 1, 1, "", "to_struct"], [711, 1, 1, "", "unique"]], "polars.Series.bin": [[712, 1, 1, "", "contains"], [713, 1, 1, "", "decode"], [714, 1, 1, "", "encode"], [715, 1, 1, "", "ends_with"], [716, 1, 1, "", "starts_with"]], "polars.Series.cat": [[719, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[741, 1, 1, "", "cast_time_unit"], [742, 1, 1, "", "combine"], [743, 1, 1, "", "convert_time_zone"], [744, 1, 1, "", "date"], [745, 1, 1, "", "datetime"], [746, 1, 1, "", "day"], [747, 1, 1, "", "days"], [748, 1, 1, "", "epoch"], [749, 1, 1, "", "hour"], [750, 1, 1, "", "hours"], [751, 1, 1, "", "is_leap_year"], [752, 1, 1, "", "iso_year"], [753, 1, 1, "", "max"], [754, 1, 1, "", "mean"], [755, 1, 1, "", "median"], [756, 1, 1, "", "microsecond"], [757, 1, 1, "", "microseconds"], [758, 1, 1, "", "millisecond"], [759, 1, 1, "", "milliseconds"], [760, 1, 1, "", "min"], [761, 1, 1, "", "minute"], [762, 1, 1, "", "minutes"], [763, 1, 1, "", "month"], [764, 1, 1, "", "nanosecond"], [765, 1, 1, "", "nanoseconds"], [766, 1, 1, "", "offset_by"], [767, 1, 1, "", "ordinal_day"], [768, 1, 1, "", "quarter"], [769, 1, 1, "", "replace_time_zone"], [770, 1, 1, "", "round"], [771, 1, 1, "", "second"], [772, 1, 1, "", "seconds"], [773, 1, 1, "", "strftime"], [774, 1, 1, "", "time"], [775, 1, 1, "", "timestamp"], [776, 1, 1, "", "truncate"], [777, 1, 1, "", "week"], [778, 1, 1, "", "weekday"], [779, 1, 1, "", "with_time_unit"], [780, 1, 1, "", "year"]], "polars.Series.str": [[884, 1, 1, "", "concat"], [885, 1, 1, "", "contains"], [886, 1, 1, "", "count_match"], [887, 1, 1, "", "decode"], [888, 1, 1, "", "encode"], [889, 1, 1, "", "ends_with"], [890, 1, 1, "", "explode"], [891, 1, 1, "", "extract"], [892, 1, 1, "", "extract_all"], [893, 1, 1, "", "json_extract"], [894, 1, 1, "", "json_path_match"], [895, 1, 1, "", "lengths"], [896, 1, 1, "", "ljust"], [897, 1, 1, "", "lstrip"], [898, 1, 1, "", "n_chars"], [899, 1, 1, "", "parse_int"], [900, 1, 1, "", "replace"], [901, 1, 1, "", "replace_all"], [902, 1, 1, "", "rjust"], [903, 1, 1, "", "rstrip"], [904, 1, 1, "", "slice"], [905, 1, 1, "", "split"], [906, 1, 1, "", "split_exact"], [907, 1, 1, "", "splitn"], [908, 1, 1, "", "starts_with"], [909, 1, 1, "", "strip"], [910, 1, 1, "", "strptime"], [911, 1, 1, "", "to_lowercase"], [912, 1, 1, "", "to_uppercase"], [913, 1, 1, "", "zfill"]], "polars.Series.struct": [[914, 1, 1, "", "field"], [915, 3, 1, "", "fields"], [916, 1, 1, "", "rename_fields"], [917, 1, 1, "", "unnest"]], "polars.StringCache": [[51, 1, 1, "", "__init__"]], "polars.Struct": [[52, 1, 1, "", "__init__"]], "polars.Time": [[53, 1, 1, "", "__init__"]], "polars.UInt16": [[54, 1, 1, "", "__init__"]], "polars.UInt32": [[55, 1, 1, "", "__init__"]], "polars.UInt64": [[56, 1, 1, "", "__init__"]], "polars.UInt8": [[57, 1, 1, "", "__init__"]], "polars.Unknown": [[58, 1, 1, "", "__init__"]], "polars.Utf8": [[59, 1, 1, "", "__init__"]], "polars.api": [[61, 4, 1, "", "register_dataframe_namespace"], [62, 4, 1, "", "register_expr_namespace"], [63, 4, 1, "", "register_lazyframe_namespace"], [64, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[224, 1, 1, "", "__iter__"], [225, 1, 1, "", "agg"], [226, 1, 1, "", "all"], [227, 1, 1, "", "apply"], [228, 1, 1, "", "count"], [229, 1, 1, "", "first"], [230, 1, 1, "", "head"], [231, 1, 1, "", "last"], [232, 1, 1, "", "max"], [233, 1, 1, "", "mean"], [234, 1, 1, "", "median"], [235, 1, 1, "", "min"], [236, 1, 1, "", "n_unique"], [237, 1, 1, "", "quantile"], [238, 1, 1, "", "sum"], [239, 1, 1, "", "tail"]], "polars.exceptions": [[71, 5, 1, "", "ArrowError"], [72, 5, 1, "", "ColumnNotFoundError"], [73, 5, 1, "", "ComputeError"], [74, 5, 1, "", "DuplicateError"], [75, 5, 1, "", "InvalidOperationError"], [76, 5, 1, "", "NoDataError"], [77, 5, 1, "", "NoRowsReturnedError"], [78, 5, 1, "", "PolarsPanicError"], [79, 5, 1, "", "RowsError"], [80, 5, 1, "", "SchemaError"], [81, 5, 1, "", "SchemaFieldNotFoundError"], [82, 5, 1, "", "ShapeError"], [83, 5, 1, "", "StructFieldNotFoundError"], [84, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[95, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[646, 1, 1, "", "agg"], [647, 1, 1, "", "all"], [648, 1, 1, "", "apply"], [649, 1, 1, "", "count"], [650, 1, 1, "", "first"], [651, 1, 1, "", "head"], [652, 1, 1, "", "last"], [653, 1, 1, "", "max"], [654, 1, 1, "", "mean"], [655, 1, 1, "", "median"], [656, 1, 1, "", "min"], [657, 1, 1, "", "n_unique"], [658, 1, 1, "", "quantile"], [659, 1, 1, "", "sum"], [660, 1, 1, "", "tail"]], "polars.testing": [[116, 4, 1, "", "assert_frame_equal"], [117, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[118, 0, 1, "", "column"], [119, 4, 1, "", "columns"], [120, 4, 1, "", "dataframes"], [121, 4, 1, "", "series"]], "polars.testing.parametric.column": [[118, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 140], "api": [1, 61, 62, 63, 64, 580], "provid": 1, "new": 1, "function": [1, 568, 579], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940], "binari": [2, 563, 574, 942], "boolean": [3, 564, 943], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 125], "activate_decim": 5, "load": [6, 125], "restore_default": 7, "save": [8, 125], "set_ascii_t": 9, "set_fmt_float": 10, "set_fmt_str_length": 11, "set_streaming_chunk_s": 12, "set_tbl_cell_align": 13, "set_tbl_col": 14, "set_tbl_column_data_type_inlin": 15, "set_tbl_dataframe_shape_below": 16, "set_tbl_format": 17, "set_tbl_hide_column_data_typ": 18, "set_tbl_hide_column_nam": 19, "set_tbl_hide_dataframe_shap": 20, "set_tbl_hide_dtype_separ": 21, "set_tbl_row": 22, "set_tbl_width_char": 23, "set_verbos": 24, "state": [25, 125], "datafram": [26, 27, 28, 29, 30, 31, 32, 33, 120, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 245], "write_avro": 26, "write_csv": 27, "write_databas": 28, "write_excel": 29, "write_ipc": 30, "write_json": [31, 645], "write_ndjson": 32, "write_parquet": 33, "datatyp": 34, "date": [35, 325, 532, 744], "datetim": [36, 326, 533, 745], "decim": 37, "durat": [38, 534], "float32": 39, "float64": 40, "int16": 41, "int32": 42, "int64": 43, "int8": 44, "list": [45, 399, 543, 570, 949], "null": 46, "object": 47, "sqlcontext": [48, 49, 50], "execut": 48, "queri": 49, "regist": 50, "stringcach": [51, 579], "struct": [52, 496, 497, 558, 576, 914, 915, 916, 917, 953], "time": [53, 351, 774], "uint16": 54, "uint32": 55, "uint64": 56, "uint8": 57, "unknown": 58, "utf8": 59, "align_fram": 60, "register_dataframe_namespac": 61, "register_expr_namespac": 62, "register_lazyframe_namespac": 63, "register_series_namespac": 64, "arg_wher": 65, "build_info": 66, "collect_al": 67, "concat": [68, 273, 466, 688, 884], "cut": [69, 734], "date_rang": 70, "except": [71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 249], "arrowerror": 71, "columnnotfounderror": 72, "computeerror": 73, "duplicateerror": 74, "invalidoperationerror": 75, "nodataerror": 76, "norowsreturnederror": 77, "polarspanicerror": 78, "rowserror": 79, "schemaerror": 80, "schemafieldnotfounderror": 81, "shapeerror": 82, "structfieldnotfounderror": 83, "toomanyrowsreturnederror": 84, "from_arrow": 85, "from_datafram": 86, "from_dict": [87, 88], "from_numpi": 89, "from_panda": 90, "from_record": 91, "from_repr": 92, "get_dummi": 93, "get_index_typ": 94, "io": 95, "csv": [95, 581], "batched_read": 95, "batchedcsvread": [95, 581], "next_batch": 95, "ones": 96, "read_avro": 97, "read_csv": 98, "read_csv_batch": 99, "read_databas": 100, "read_delta": 101, "read_excel": 102, "read_ipc": 103, "read_ipc_schema": 104, "read_json": [105, 620], "read_ndjson": 106, "read_parquet": 107, "read_parquet_schema": 108, "scan_csv": 109, "scan_delta": 110, "scan_ipc": 111, "scan_ndjson": 112, "scan_parquet": 113, "scan_pyarrow_dataset": 114, "show_vers": 115, "test": [116, 117, 118, 119, 120, 121, 956], "assert_frame_equ": 116, "assert_series_equ": 117, "parametr": [118, 119, 120, 121], "column": [118, 119, 131, 566, 587], "seri": [121, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 948], "threadpool_s": 122, "toggle_string_cach": 123, "zero": 124, "option": 125, "current": 125, "us": 125, "context": 125, "manag": 125, "aggreg": [126, 250, 582, 667], "__dataframe__": 127, "appli": [128, 227, 259, 518, 648, 673], "clear": [129, 584, 722], "clone": [130, 585, 726], "corr": [132, 526], "describ": [133, 735], "drop": [134, 588], "drop_in_plac": 135, "drop_nul": [136, 321, 589, 739], "dtype": [137, 590, 781], "estimated_s": [138, 783], "explod": [139, 278, 365, 472, 592, 693, 788, 890], "fill_nan": [141, 367, 594, 790], "fill_nul": [142, 368, 595, 791], "filter": [143, 369, 596, 792], "find_idx_by_nam": 144, "fold": [145, 538], "frame_equ": 146, "get_column": [147, 148], "glimps": 149, "groupbi": [150, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 244, 599, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663], "groupby_dynam": [151, 600], "groupby_rol": [152, 601], "hash_row": 153, "head": [154, 230, 281, 378, 542, 602, 651, 696, 798], "height": 155, "hstack": 156, "insert_at_idx": 157, "interpol": [158, 380, 604, 801], "is_dupl": [159, 382, 804], "is_empti": [160, 805], "is_uniqu": [161, 392, 818], "item": [162, 820], "iter_row": 163, "iter_slic": 164, "join": [165, 282, 605, 697], "join_asof": [166, 606], "lazi": [167, 579, 608], "limit": [168, 398, 609, 823], "max": [169, 232, 285, 407, 546, 611, 653, 700, 753, 828], "mean": [170, 233, 286, 408, 547, 612, 654, 701, 754, 829], "median": [171, 234, 409, 548, 613, 655, 755, 830], "melt": [172, 614], "merge_sort": [173, 615], "min": [174, 235, 287, 416, 549, 616, 656, 702, 760, 831], "n_chunk": [175, 833], "n_uniqu": [176, 236, 420, 550, 657, 834], "null_count": [177, 424, 839], "partition_bi": 178, "pipe": [179, 428, 617], "pivot": 180, "product": [181, 431, 843], "quantil": [182, 237, 432, 552, 619, 658, 845], "rechunk": [183, 434, 847], "renam": [184, 621, 849], "replac": [185, 482, 900], "replace_at_idx": 186, "revers": [187, 288, 438, 622, 703, 851], "row": [188, 189], "sampl": [190, 450, 863], "schema": [191, 623], "select": [192, 247, 555, 573, 624, 666, 951], "shape": [193, 869], "shift": [194, 289, 453, 625, 704, 870], "shift_and_fil": [195, 454, 626, 871], "shrink_to_fit": [196, 873], "slice": [197, 290, 461, 486, 630, 705, 879, 904], "sort": [198, 291, 462, 631, 706, 880], "std": [199, 465, 557, 632, 882], "sum": [200, 238, 292, 500, 559, 633, 659, 707, 918], "tail": [201, 239, 293, 501, 560, 634, 660, 708, 919], "take_everi": [202, 503, 635, 921], "to_arrow": [203, 925], "to_dict": [204, 205], "to_dummi": [206, 926], "to_init_repr": [207, 928], "to_numpi": [208, 930], "to_panda": [209, 931], "to_seri": 210, "to_struct": [211, 295, 710], "top_k": [212, 507, 636, 933], "transpos": 213, "uniqu": [214, 296, 509, 637, 711, 934], "unnest": [215, 638, 917], "unstack": 216, "updat": [217, 639], "upsampl": 218, "var": [219, 513, 561, 640, 938], "vstack": 220, "width": [221, 641], "with_column": [222, 642], "with_row_count": [223, 644], "__iter__": 224, "agg": [225, 646], "all": [226, 255, 516, 647, 670], "count": [228, 311, 527, 649], "first": [229, 279, 370, 537, 597, 650, 694], "last": [231, 283, 395, 607, 652, 698], "attribut": [240, 661, 941], "comput": [241, 567, 945], "descript": [242, 662, 946], "export": [243, 947], "miscellan": [246, 572, 579, 665, 950], "manipul": [247, 573, 666, 951], "data": 248, "type": 248, "numer": [248, 574], "tempor": [248, 577, 954], "nest": 248, "other": 248, "expr": [251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515], "ab": [251, 668], "add": 252, "agg_group": 253, "alia": [254, 669], "and_": 256, "ani": [257, 517, 671], "append": [258, 672], "arcco": [260, 674], "arccosh": [261, 675], "arcsin": [262, 676], "arcsinh": [263, 677], "arctan": [264, 678], "arctanh": [265, 679], "arg_max": [266, 271, 680, 686], "arg_min": [267, 272, 681, 687], "arg_sort": [268, 682], "arg_tru": [269, 683], "arg_uniqu": [270, 684], "arr": [271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711], "contain": [274, 298, 467, 689, 712, 885], "count_match": [275, 468, 690, 886], "diff": [276, 318, 691, 736], "eval": [277, 692], "get": [280, 695], "length": [284, 477, 699, 895], "take": [294, 502, 709, 920], "backward_fil": 297, "bin": [298, 299, 300, 301, 302, 712, 713, 714, 715, 716], "decod": [299, 469, 713, 887], "encod": [300, 470, 714, 888], "ends_with": [301, 471, 715, 889], "starts_with": [302, 490, 716, 908], "cast": [303, 717], "cat": [304, 718, 719], "set_ord": [304, 719], "ceil": [305, 720], "clip": [306, 723], "clip_max": [307, 724], "clip_min": [308, 725], "co": [309, 727], "cosh": [310, 728], "cumcount": 312, "cummax": [313, 729], "cummin": [314, 730], "cumprod": [315, 731], "cumsum": [316, 531, 732], "cumulative_ev": [317, 733], "dot": [319, 737], "drop_nan": [320, 738], "dt": [322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780], "cast_time_unit": [322, 741], "combin": [323, 742], "convert_time_zon": [324, 743], "dai": [327, 328, 746, 747], "epoch": [329, 748], "hour": [330, 331, 749, 750], "is_leap_year": [332, 751], "iso_year": [333, 752], "microsecond": [334, 335, 756, 757], "millisecond": [336, 337, 758, 759], "minut": [338, 339, 761, 762], "month": [340, 763], "nanosecond": [341, 342, 764, 765], "offset_bi": [343, 766], "ordinal_dai": [344, 767], "quarter": [345, 768], "replace_time_zon": [346, 769], "round": [347, 449, 770, 862], "second": [348, 349, 771, 772], "strftime": [350, 773], "timestamp": [352, 775], "truncat": [353, 776], "week": [354, 777], "weekdai": [355, 778], "with_time_unit": [356, 779], "year": [357, 780], "entropi": [358, 782], "eq": 359, "ewm_mean": [360, 784], "ewm_std": [361, 785], "ewm_var": [362, 786], "exclud": [363, 536], "exp": [364, 787], "extend_const": [366, 789], "flatten": 371, "floor": [372, 794], "floordiv": 373, "forward_fil": 374, "ge": 375, "gt": 376, "hash": [377, 797], "inspect": [379, 603], "is_between": [381, 802], "is_finit": [383, 806], "is_first": [384, 807], "is_in": [385, 809], "is_infinit": [386, 810], "is_nan": [387, 811], "is_not": 388, "is_not_nan": [389, 812], "is_not_nul": [390, 813], "is_nul": [391, 814], "keep_nam": 393, "kurtosi": [394, 821], "le": 396, "len": [397, 822], "log": [400, 824], "log10": [401, 825], "lower_bound": [402, 826], "lt": 403, "map": [404, 545, 610], "map_alia": 405, "map_dict": [406, 827], "meta": [410, 411, 412, 413, 414, 415, 571], "has_multiple_output": 410, "is_regex_project": 411, "output_nam": 412, "pop": 413, "root_nam": 414, "undo_alias": 415, "mod": 417, "mode": [418, 832], "mul": 419, "nan_max": [421, 836], "nan_min": [422, 837], "ne": 423, "or_": 425, "over": 426, "pct_chang": [427, 840], "pow": 429, "prefix": 430, "rank": [433, 846], "reinterpret": [435, 848], "repeat_bi": 436, "reshap": [437, 850], "rolling_appli": [439, 852], "rolling_max": [440, 853], "rolling_mean": [441, 854], "rolling_median": [442, 855], "rolling_min": [443, 856], "rolling_quantil": [444, 857], "rolling_skew": [445, 858], "rolling_std": [446, 859], "rolling_sum": [447, 860], "rolling_var": [448, 861], "search_sort": [451, 864], "set_sort": [452, 868], "shrink_dtyp": [455, 872], "shuffl": [456, 874], "sign": [457, 875], "sin": [458, 876], "sinh": [459, 877], "skew": [460, 878], "sort_bi": 463, "sqrt": [464, 881], "str": [466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913], "extract": [473, 891], "extract_al": [474, 892], "json_extract": [475, 893], "json_path_match": [476, 894], "ljust": [478, 896], "lstrip": [479, 897], "n_char": [480, 898], "parse_int": [481, 899], "replace_al": [483, 901], "rjust": [484, 902], "rstrip": [485, 903], "split": [487, 905], "split_exact": [488, 906], "splitn": [489, 907], "strip": [491, 909], "strptime": [492, 910], "to_lowercas": [493, 911], "to_uppercas": [494, 912], "zfill": [495, 913], "field": [496, 914, 915], "rename_field": [497, 916], "sub": 498, "suffix": 499, "tan": [504, 922], "tanh": [505, 923], "to_phys": [506, 932], "truediv": 508, "unique_count": [510, 935], "upper_bound": [511, 936], "value_count": [512, 937], "where": 514, "xor": 515, "arang": 519, "arg_sort_bi": 520, "avg": 521, "coalesc": 522, "col": 523, "concat_list": 524, "concat_str": 525, "cov": 528, "cumfold": 529, "cumreduc": 530, "element": 535, "format": 539, "from_epoch": 540, "group": 541, "lit": 544, "pearson_corr": 551, "reduc": 553, "repeat": 554, "spearman_rank_corr": 556, "when": 562, "categori": [565, 944], "name": [566, 835], "express": 569, "oper": 574, "conjunct": 574, "comparison": 574, "string": [575, 952], "window": 578, "convers": 579, "eager": 579, "parallel": 579, "refer": 580, "input": 581, "output": 581, "feather": 581, "ipc": 581, "parquet": 581, "databas": 581, "json": 581, "avro": 581, "excel": 581, "delta": 581, "lake": 581, "dataset": 581, "lazyfram": [583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 664], "cach": 583, "collect": 586, "explain": 591, "fetch": 593, "from_json": 598, "profil": 618, "show_graph": 627, "sink_ipc": 628, "sink_parquet": 629, "with_context": 643, "lazygroupbi": [646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660], "read": 665, "write": 665, "logic": 665, "plan": 665, "chunk_length": 721, "flag": 793, "get_chunk": 795, "has_valid": 796, "hist": 799, "inner_dtyp": 800, "is_boolean": 803, "is_float": 808, "is_numer": 815, "is_sort": 816, "is_tempor": 817, "is_utf8": 819, "new_from_index": 838, "peak_max": 841, "peak_min": 842, "qcut": 844, "series_equ": 865, "set": 866, "set_at_idx": 867, "time_unit": 924, "to_fram": 927, "to_list": 929, "view": 939, "zip_with": 940, "sql": 955, "method": 955, "assert": 956, "properti": 956, "base": 956, "strategi": 956, "helper": 956, "util": 957}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.DataFrame.write_parquet": [[33, "polars-dataframe-write-parquet"]], "polars.concat": [[68, "polars-concat"]], "polars.DataFrame.write_ipc": [[30, "polars-dataframe-write-ipc"]], "polars.Config.set_tbl_hide_column_names": [[19, "polars-config-set-tbl-hide-column-names"]], "polars.api.register_expr_namespace": [[62, "polars-api-register-expr-namespace"]], "polars.Date": [[35, "polars-date"]], "polars.List": [[45, "polars-list"]], "polars.Config.set_tbl_formatting": [[17, "polars-config-set-tbl-formatting"]], "polars.DataFrame.write_excel": [[29, "polars-dataframe-write-excel"]], "polars.Config.set_fmt_str_lengths": [[11, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_tbl_hide_dtype_separator": [[21, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.save": [[8, "polars-config-save"]], "polars.Null": [[46, "polars-null"]], "polars.DataFrame.write_csv": [[27, "polars-dataframe-write-csv"]], "polars.Config.set_tbl_rows": [[22, "polars-config-set-tbl-rows"]], "polars.DataType": [[34, "polars-datatype"]], "polars.collect_all": [[67, "polars-collect-all"]], "polars.Decimal": [[37, "polars-decimal"]], "polars.UInt64": [[56, "polars-uint64"]], "polars.Duration": [[38, "polars-duration"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.Config.set_streaming_chunk_size": [[12, "polars-config-set-streaming-chunk-size"]], "polars.Int8": [[44, "polars-int8"]], "polars.StringCache": [[51, "polars-stringcache"]], "polars.UInt16": [[54, "polars-uint16"]], "polars.Config.restore_defaults": [[7, "polars-config-restore-defaults"]], "polars.align_frames": [[60, "polars-align-frames"]], "polars.api.register_lazyframe_namespace": [[63, "polars-api-register-lazyframe-namespace"]], "polars.DataFrame.write_json": [[31, "polars-dataframe-write-json"]], "polars.arg_where": [[65, "polars-arg-where"]], "polars.Config.set_verbose": [[24, "polars-config-set-verbose"]], "polars.build_info": [[66, "polars-build-info"]], "polars.Config.set_ascii_tables": [[9, "polars-config-set-ascii-tables"]], "polars.Config.set_tbl_column_data_type_inline": [[15, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_cell_alignment": [[13, "polars-config-set-tbl-cell-alignment"]], "polars.DataFrame.write_ndjson": [[32, "polars-dataframe-write-ndjson"]], "polars.api.register_series_namespace": [[64, "polars-api-register-series-namespace"]], "polars.Config.set_tbl_hide_column_data_types": [[18, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_fmt_float": [[10, "polars-config-set-fmt-float"]], "polars.Float64": [[40, "polars-float64"]], "polars.Int16": [[41, "polars-int16"]], "polars.UInt8": [[57, "polars-uint8"]], "polars.DataFrame.write_database": [[28, "polars-dataframe-write-database"]], "polars.Object": [[47, "polars-object"]], "polars.Config.set_tbl_hide_dataframe_shape": [[20, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Datetime": [[36, "polars-datetime"]], "polars.SQLContext.query": [[49, "polars-sqlcontext-query"]], "polars.Unknown": [[58, "polars-unknown"]], "polars.Binary": [[2, "polars-binary"]], "polars.Utf8": [[59, "polars-utf8"]], "polars.Config.set_tbl_cols": [[14, "polars-config-set-tbl-cols"]], "polars.Struct": [[52, "polars-struct"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.Time": [[53, "polars-time"]], "polars.Config.set_tbl_width_chars": [[23, "polars-config-set-tbl-width-chars"]], "polars.DataFrame.write_avro": [[26, "polars-dataframe-write-avro"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Config.load": [[6, "polars-config-load"]], "polars.Int64": [[43, "polars-int64"]], "polars.SQLContext.register": [[50, "polars-sqlcontext-register"]], "polars.Config.set_tbl_dataframe_shape_below": [[16, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Float32": [[39, "polars-float32"]], "polars.Int32": [[42, "polars-int32"]], "polars.SQLContext.execute": [[48, "polars-sqlcontext-execute"]], "polars.UInt32": [[55, "polars-uint32"]], "polars.Config.state": [[25, "polars-config-state"]], "polars.Config.activate_decimals": [[5, "polars-config-activate-decimals"]], "polars.api.register_dataframe_namespace": [[61, "polars-api-register-dataframe-namespace"]], "polars.testing.parametric.dataframes": [[120, "polars-testing-parametric-dataframes"]], "polars.testing.parametric.series": [[121, "polars-testing-parametric-series"]], "polars.exceptions.SchemaFieldNotFoundError": [[81, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.TooManyRowsReturnedError": [[84, "polars-exceptions-toomanyrowsreturnederror"]], "polars.DataFrame.columns": [[131, "polars-dataframe-columns"]], "polars.DataFrame.drop_in_place": [[135, "polars-dataframe-drop-in-place"]], "polars.from_numpy": [[89, "polars-from-numpy"]], "polars.get_index_type": [[94, "polars-get-index-type"]], "polars.read_json": [[105, "polars-read-json"]], "polars.from_repr": [[92, "polars-from-repr"]], "polars.DataFrame.clone": [[130, "polars-dataframe-clone"]], "polars.read_ipc": [[103, "polars-read-ipc"]], "polars.testing.parametric.columns": [[119, "polars-testing-parametric-columns"]], "polars.from_pandas": [[90, "polars-from-pandas"]], "polars.DataFrame.dtypes": [[137, "polars-dataframe-dtypes"]], "polars.read_delta": [[101, "polars-read-delta"]], "polars.read_ndjson": [[106, "polars-read-ndjson"]], "polars.zeros": [[124, "polars-zeros"]], "polars.exceptions.StructFieldNotFoundError": [[83, "polars-exceptions-structfieldnotfounderror"]], "polars.get_dummies": [[93, "polars-get-dummies"]], "polars.ones": [[96, "polars-ones"]], "polars.exceptions.InvalidOperationError": [[75, "polars-exceptions-invalidoperationerror"]], "polars.threadpool_size": [[122, "polars-threadpool-size"]], "Config": [[125, "config"]], "Config options": [[125, "config-options"]], "Config load, save, and current state": [[125, "config-load-save-and-current-state"]], "Use as a context manager": [[125, "use-as-a-context-manager"]], "polars.exceptions.ShapeError": [[82, "polars-exceptions-shapeerror"]], "polars.read_csv": [[98, "polars-read-csv"]], "polars.read_excel": [[102, "polars-read-excel"]], "polars.read_parquet_schema": [[108, "polars-read-parquet-schema"]], "polars.read_ipc_schema": [[104, "polars-read-ipc-schema"]], "polars.exceptions.NoDataError": [[76, "polars-exceptions-nodataerror"]], "Aggregation": [[126, "aggregation"], [667, "aggregation"], [582, "aggregation"], [250, "aggregation"]], "polars.DataFrame.drop_nulls": [[136, "polars-dataframe-drop-nulls"]], "polars.from_dataframe": [[86, "polars-from-dataframe"]], "polars.exceptions.NoRowsReturnedError": [[77, "polars-exceptions-norowsreturnederror"]], "polars.testing.assert_frame_equal": [[116, "polars-testing-assert-frame-equal"]], "polars.read_parquet": [[107, "polars-read-parquet"]], "polars.exceptions.ArrowError": [[71, "polars-exceptions-arrowerror"]], "polars.read_avro": [[97, "polars-read-avro"]], "polars.scan_csv": [[109, "polars-scan-csv"]], "polars.exceptions.PolarsPanicError": [[78, "polars-exceptions-polarspanicerror"]], "polars.scan_ndjson": [[112, "polars-scan-ndjson"]], "polars.scan_parquet": [[113, "polars-scan-parquet"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[95, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.DataFrame.clear": [[129, "polars-dataframe-clear"]], "polars.scan_pyarrow_dataset": [[114, "polars-scan-pyarrow-dataset"]], "polars.scan_ipc": [[111, "polars-scan-ipc"]], "polars.toggle_string_cache": [[123, "polars-toggle-string-cache"]], "polars.DataFrame.corr": [[132, "polars-dataframe-corr"]], "polars.exceptions.ComputeError": [[73, "polars-exceptions-computeerror"]], "polars.DataFrame.drop": [[134, "polars-dataframe-drop"]], "polars.from_dict": [[87, "polars-from-dict"]], "polars.date_range": [[70, "polars-date-range"]], "polars.from_dicts": [[88, "polars-from-dicts"]], "polars.DataFrame.apply": [[128, "polars-dataframe-apply"]], "polars.DataFrame.describe": [[133, "polars-dataframe-describe"]], "polars.exceptions.DuplicateError": [[74, "polars-exceptions-duplicateerror"]], "polars.exceptions.SchemaError": [[80, "polars-exceptions-schemaerror"]], "polars.show_versions": [[115, "polars-show-versions"]], "polars.testing.assert_series_equal": [[117, "polars-testing-assert-series-equal"]], "polars.from_records": [[91, "polars-from-records"]], "polars.exceptions.ColumnNotFoundError": [[72, "polars-exceptions-columnnotfounderror"]], "polars.from_arrow": [[85, "polars-from-arrow"]], "polars.read_csv_batched": [[99, "polars-read-csv-batched"]], "polars.cut": [[69, "polars-cut"]], "polars.exceptions.RowsError": [[79, "polars-exceptions-rowserror"]], "polars.testing.parametric.column": [[118, "polars-testing-parametric-column"]], "polars.DataFrame.__dataframe__": [[127, "polars-dataframe-dataframe"]], "polars.read_database": [[100, "polars-read-database"]], "polars.scan_delta": [[110, "polars-scan-delta"]], "polars.Series.mode": [[832, "polars-series-mode"]], "polars.Series.nan_max": [[836, "polars-series-nan-max"]], "polars.Series.pct_change": [[840, "polars-series-pct-change"]], "polars.Series.str.contains": [[885, "polars-series-str-contains"]], "polars.Series.set_sorted": [[868, "polars-series-set-sorted"]], "polars.Series.mean": [[829, "polars-series-mean"]], "polars.Series.rolling_median": [[855, "polars-series-rolling-median"]], "polars.Series.new_from_index": [[838, "polars-series-new-from-index"]], "polars.Series.sinh": [[877, "polars-series-sinh"]], "polars.Series.str.count_match": [[886, "polars-series-str-count-match"]], "polars.Series.shape": [[869, "polars-series-shape"]], "polars.Series.series_equal": [[865, "polars-series-series-equal"]], "polars.Series.median": [[830, "polars-series-median"]], "polars.Series.shrink_to_fit": [[873, "polars-series-shrink-to-fit"]], "polars.Series.max": [[828, "polars-series-max"]], "polars.Series.reinterpret": [[848, "polars-series-reinterpret"]], "polars.Series.round": [[862, "polars-series-round"]], "polars.Series.search_sorted": [[864, "polars-series-search-sorted"]], "polars.Series.rank": [[846, "polars-series-rank"]], "polars.Series.null_count": [[839, "polars-series-null-count"]], "polars.Series.product": [[843, "polars-series-product"]], "polars.Series.rolling_min": [[856, "polars-series-rolling-min"]], "polars.Series.rolling_quantile": [[857, "polars-series-rolling-quantile"]], "polars.Series.rechunk": [[847, "polars-series-rechunk"]], "polars.Series.slice": [[879, "polars-series-slice"]], "polars.Series.str.explode": [[890, "polars-series-str-explode"]], "polars.Series.n_unique": [[834, "polars-series-n-unique"]], "polars.Series.sort": [[880, "polars-series-sort"]], "polars.Series.rolling_max": [[853, "polars-series-rolling-max"]], "polars.Series.rolling_mean": [[854, "polars-series-rolling-mean"]], "polars.Series.shrink_dtype": [[872, "polars-series-shrink-dtype"]], "polars.Series.str.extract": [[891, "polars-series-str-extract"]], "polars.Series.rename": [[849, "polars-series-rename"]], "polars.Series.qcut": [[844, "polars-series-qcut"]], "polars.Series.shift": [[870, "polars-series-shift"]], "polars.Series.reverse": [[851, "polars-series-reverse"]], "polars.Series.n_chunks": [[833, "polars-series-n-chunks"]], "polars.Series.str.lengths": [[895, "polars-series-str-lengths"]], "polars.Series.str.concat": [[884, "polars-series-str-concat"]], "polars.Series.str": [[883, "polars-series-str"]], "polars.Series.rolling_skew": [[858, "polars-series-rolling-skew"]], "polars.Series.reshape": [[850, "polars-series-reshape"]], "polars.Series.name": [[835, "polars-series-name"]], "polars.Series.shift_and_fill": [[871, "polars-series-shift-and-fill"]], "polars.Series.str.ends_with": [[889, "polars-series-str-ends-with"]], "polars.Series.quantile": [[845, "polars-series-quantile"]], "polars.Series.str.json_extract": [[893, "polars-series-str-json-extract"]], "polars.Series.min": [[831, "polars-series-min"]], "polars.Series.set": [[866, "polars-series-set"]], "polars.Series.sign": [[875, "polars-series-sign"]], "polars.Series.sqrt": [[881, "polars-series-sqrt"]], "polars.Series.str.encode": [[888, "polars-series-str-encode"]], "polars.Series.str.extract_all": [[892, "polars-series-str-extract-all"]], "polars.Series.shuffle": [[874, "polars-series-shuffle"]], "polars.Series.str.ljust": [[896, "polars-series-str-ljust"]], "polars.Series.nan_min": [[837, "polars-series-nan-min"]], "polars.Series.sin": [[876, "polars-series-sin"]], "polars.Series.str.json_path_match": [[894, "polars-series-str-json-path-match"]], "polars.Series.set_at_idx": [[867, "polars-series-set-at-idx"]], "polars.Series.rolling_var": [[861, "polars-series-rolling-var"]], "polars.Series.rolling_apply": [[852, "polars-series-rolling-apply"]], "polars.Series.rolling_sum": [[860, "polars-series-rolling-sum"]], "polars.Series.peak_min": [[842, "polars-series-peak-min"]], "polars.Series.std": [[882, "polars-series-std"]], "polars.Series.rolling_std": [[859, "polars-series-rolling-std"]], "polars.Series.sample": [[863, "polars-series-sample"]], "polars.Series.peak_max": [[841, "polars-series-peak-max"]], "polars.Series.skew": [[878, "polars-series-skew"]], "polars.Series.str.decode": [[887, "polars-series-str-decode"]], "polars.Series.dt.year": [[780, "polars-series-dt-year"]], "polars.Series.interpolate": [[801, "polars-series-interpolate"]], "polars.Series.explode": [[788, "polars-series-explode"]], "polars.Series.dt.truncate": [[776, "polars-series-dt-truncate"]], "polars.Series.dt.seconds": [[772, "polars-series-dt-seconds"]], "polars.Series.is_nan": [[811, "polars-series-is-nan"]], "polars.Series.lower_bound": [[826, "polars-series-lower-bound"]], "polars.Series.exp": [[787, "polars-series-exp"]], "polars.Series.dt.month": [[763, "polars-series-dt-month"]], "polars.Series.dt.time": [[774, "polars-series-dt-time"]], "polars.Series.dt.with_time_unit": [[779, "polars-series-dt-with-time-unit"]], "polars.Series.entropy": [[782, "polars-series-entropy"]], "polars.Series.dt.strftime": [[773, "polars-series-dt-strftime"]], "polars.Series.has_validity": [[796, "polars-series-has-validity"]], "polars.Series.dt.weekday": [[778, "polars-series-dt-weekday"]], "polars.Series.dt.quarter": [[768, "polars-series-dt-quarter"]], "polars.Series.is_sorted": [[816, "polars-series-is-sorted"]], "polars.Series.dt.second": [[771, "polars-series-dt-second"]], "polars.Series.inner_dtype": [[800, "polars-series-inner-dtype"]], "polars.Series.is_not_null": [[813, "polars-series-is-not-null"]], "polars.Series.dt.min": [[760, "polars-series-dt-min"]], "polars.Series.is_between": [[802, "polars-series-is-between"]], "polars.Series.log10": [[825, "polars-series-log10"]], "polars.Series.fill_null": [[791, "polars-series-fill-null"]], "polars.Series.hist": [[799, "polars-series-hist"]], "polars.Series.is_finite": [[806, "polars-series-is-finite"]], "polars.Series.head": [[798, "polars-series-head"]], "polars.Series.is_infinite": [[810, "polars-series-is-infinite"]], "polars.Series.dt.ordinal_day": [[767, "polars-series-dt-ordinal-day"]], "polars.Series.is_boolean": [[803, "polars-series-is-boolean"]], "polars.Series.dt.nanosecond": [[764, "polars-series-dt-nanosecond"]], "polars.Series.is_temporal": [[817, "polars-series-is-temporal"]], "polars.Series.dt.week": [[777, "polars-series-dt-week"]], "polars.Series.dt.timestamp": [[775, "polars-series-dt-timestamp"]], "polars.Series.filter": [[792, "polars-series-filter"]], "polars.Series.is_unique": [[818, "polars-series-is-unique"]], "polars.Series.dt.minute": [[761, "polars-series-dt-minute"]], "polars.Series.log": [[824, "polars-series-log"]], "polars.Series.ewm_var": [[786, "polars-series-ewm-var"]], "polars.Series.dt.nanoseconds": [[765, "polars-series-dt-nanoseconds"]], "polars.Series.floor": [[794, "polars-series-floor"]], "polars.Series.is_not_nan": [[812, "polars-series-is-not-nan"]], "polars.Series.dtype": [[781, "polars-series-dtype"]], "polars.Series.ewm_mean": [[784, "polars-series-ewm-mean"]], "polars.Series.estimated_size": [[783, "polars-series-estimated-size"]], "polars.Series.is_in": [[809, "polars-series-is-in"]], "polars.Series.is_numeric": [[815, "polars-series-is-numeric"]], "polars.Series.is_utf8": [[819, "polars-series-is-utf8"]], "polars.Series.dt.offset_by": [[766, "polars-series-dt-offset-by"]], "polars.Series.dt.round": [[770, "polars-series-dt-round"]], "polars.Series.dt.milliseconds": [[759, "polars-series-dt-milliseconds"]], "polars.Series.dt.replace_time_zone": [[769, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.minutes": [[762, "polars-series-dt-minutes"]], "polars.Series.item": [[820, "polars-series-item"]], "polars.Series.is_first": [[807, "polars-series-is-first"]], "polars.Series.flags": [[793, "polars-series-flags"]], "polars.Series.fill_nan": [[790, "polars-series-fill-nan"]], "polars.Series.extend_constant": [[789, "polars-series-extend-constant"]], "polars.Series.is_duplicated": [[804, "polars-series-is-duplicated"]], "polars.Series.is_float": [[808, "polars-series-is-float"]], "polars.Series.map_dict": [[827, "polars-series-map-dict"]], "polars.Series.ewm_std": [[785, "polars-series-ewm-std"]], "polars.Series.is_null": [[814, "polars-series-is-null"]], "polars.Series.kurtosis": [[821, "polars-series-kurtosis"]], "polars.Series.len": [[822, "polars-series-len"]], "polars.Series.hash": [[797, "polars-series-hash"]], "polars.Series.get_chunks": [[795, "polars-series-get-chunks"]], "polars.Series.limit": [[823, "polars-series-limit"]], "polars.Series.is_empty": [[805, "polars-series-is-empty"]], "polars.Series.arr.min": [[702, "polars-series-arr-min"]], "polars.Series.dt.datetime": [[745, "polars-series-dt-datetime"]], "polars.Series.arr.sort": [[706, "polars-series-arr-sort"]], "polars.Series.dt.cast_time_unit": [[741, "polars-series-dt-cast-time-unit"]], "polars.Series.arr.reverse": [[703, "polars-series-arr-reverse"]], "polars.Series.arr.sum": [[707, "polars-series-arr-sum"]], "polars.Series.ceil": [[720, "polars-series-ceil"]], "polars.Series.bin.starts_with": [[716, "polars-series-bin-starts-with"]], "polars.Series.arr.diff": [[691, "polars-series-arr-diff"]], "polars.Series.arr.max": [[700, "polars-series-arr-max"]], "polars.Series.dt.microsecond": [[756, "polars-series-dt-microsecond"]], "polars.Series.arr.explode": [[693, "polars-series-arr-explode"]], "polars.Series.dot": [[737, "polars-series-dot"]], "polars.Series.clip_max": [[724, "polars-series-clip-max"]], "polars.Series.dt.day": [[746, "polars-series-dt-day"]], "polars.Series.cumprod": [[731, "polars-series-cumprod"]], "polars.Series.describe": [[735, "polars-series-describe"]], "polars.Series.clip": [[723, "polars-series-clip"]], "polars.Series.dt.convert_time_zone": [[743, "polars-series-dt-convert-time-zone"]], "polars.Series.arr.unique": [[711, "polars-series-arr-unique"]], "polars.Series.dt.is_leap_year": [[751, "polars-series-dt-is-leap-year"]], "polars.Series.dt.mean": [[754, "polars-series-dt-mean"]], "polars.Series.dt.combine": [[742, "polars-series-dt-combine"]], "polars.Series.chunk_lengths": [[721, "polars-series-chunk-lengths"]], "polars.Series.dt.millisecond": [[758, "polars-series-dt-millisecond"]], "polars.Series.bin.contains": [[712, "polars-series-bin-contains"]], "polars.Series.cut": [[734, "polars-series-cut"]], "polars.Series.bin.decode": [[713, "polars-series-bin-decode"]], "polars.Series.arr.first": [[694, "polars-series-arr-first"]], "polars.Series.clear": [[722, "polars-series-clear"]], "polars.Series.dt.days": [[747, "polars-series-dt-days"]], "polars.Series.dt.iso_year": [[752, "polars-series-dt-iso-year"]], "polars.Series.dt.max": [[753, "polars-series-dt-max"]], "polars.Series.arr.join": [[697, "polars-series-arr-join"]], "polars.Series.cumsum": [[732, "polars-series-cumsum"]], "polars.Series.dt.median": [[755, "polars-series-dt-median"]], "polars.Series.cummax": [[729, "polars-series-cummax"]], "polars.Series.cummin": [[730, "polars-series-cummin"]], "polars.Series.bin.ends_with": [[715, "polars-series-bin-ends-with"]], "polars.Series.cat": [[718, "polars-series-cat"]], "polars.Series.clip_min": [[725, "polars-series-clip-min"]], "polars.Series.arr.to_struct": [[710, "polars-series-arr-to-struct"]], "polars.Series.drop_nans": [[738, "polars-series-drop-nans"]], "polars.Series.drop_nulls": [[739, "polars-series-drop-nulls"]], "polars.Series.arr.take": [[709, "polars-series-arr-take"]], "polars.Series.arr.slice": [[705, "polars-series-arr-slice"]], "polars.Series.cast": [[717, "polars-series-cast"]], "polars.Series.arr.tail": [[708, "polars-series-arr-tail"]], "polars.Series.arr.eval": [[692, "polars-series-arr-eval"]], "polars.Series.arr.head": [[696, "polars-series-arr-head"]], "polars.Series.bin.encode": [[714, "polars-series-bin-encode"]], "polars.Series.cos": [[727, "polars-series-cos"]], "polars.Series.cumulative_eval": [[733, "polars-series-cumulative-eval"]], "polars.Series.arr.get": [[695, "polars-series-arr-get"]], "polars.Series.arr.last": [[698, "polars-series-arr-last"]], "polars.Series.diff": [[736, "polars-series-diff"]], "polars.Series.dt.hours": [[750, "polars-series-dt-hours"]], "polars.Series.dt.epoch": [[748, "polars-series-dt-epoch"]], "polars.Series.dt.hour": [[749, "polars-series-dt-hour"]], "polars.Series.dt": [[740, "polars-series-dt"]], "polars.Series.arr.shift": [[704, "polars-series-arr-shift"]], "polars.Series.cosh": [[728, "polars-series-cosh"]], "polars.Series.dt.microseconds": [[757, "polars-series-dt-microseconds"]], "polars.Series.arr.mean": [[701, "polars-series-arr-mean"]], "polars.Series.dt.date": [[744, "polars-series-dt-date"]], "polars.Series.cat.set_ordering": [[719, "polars-series-cat-set-ordering"]], "polars.Series.arr.count_match": [[690, "polars-series-arr-count-match"]], "polars.Series.clone": [[726, "polars-series-clone"]], "polars.Series.arr.lengths": [[699, "polars-series-arr-lengths"]], "polars.Series.str.rstrip": [[903, "polars-series-str-rstrip"]], "polars.Series.unique": [[934, "polars-series-unique"]], "polars.Series.str.to_uppercase": [[912, "polars-series-str-to-uppercase"]], "SQL": [[955, "sql"]], "Methods": [[955, "methods"]], "polars.Series.to_physical": [[932, "polars-series-to-physical"]], "polars.Series.to_pandas": [[931, "polars-series-to-pandas"]], "polars.Series.str.strptime": [[910, "polars-series-str-strptime"]], "Categories": [[944, "categories"], [565, "categories"]], "polars.Series.value_counts": [[937, "polars-series-value-counts"]], "polars.Series.to_numpy": [[930, "polars-series-to-numpy"]], "polars.Series.unique_counts": [[935, "polars-series-unique-counts"]], "polars.Series.struct.field": [[914, "polars-series-struct-field"]], "polars.Series.str.starts_with": [[908, "polars-series-str-starts-with"]], "polars.Series.str.lstrip": [[897, "polars-series-str-lstrip"]], "Attributes": [[941, "attributes"], [661, "attributes"], [240, "attributes"]], "Binary": [[942, "binary"], [563, "binary"], [574, "binary"]], "Boolean": [[943, "boolean"], [564, "boolean"]], "polars.Series.str.replace": [[900, "polars-series-str-replace"]], "Series": [[948, "series"]], "polars.Series.str.zfill": [[913, "polars-series-str-zfill"]], "List": [[949, "list"], [570, "list"]], "polars.Series.zip_with": [[940, "polars-series-zip-with"]], "polars.Series.tail": [[919, "polars-series-tail"]], "polars.Series.struct.unnest": [[917, "polars-series-struct-unnest"]], "polars.Series.upper_bound": [[936, "polars-series-upper-bound"]], "polars.Series.to_init_repr": [[928, "polars-series-to-init-repr"]], "polars.Series.struct.rename_fields": [[916, "polars-series-struct-rename-fields"]], "polars.Series.str.splitn": [[907, "polars-series-str-splitn"]], "Utils": [[957, "utils"]], "polars.Series.str.n_chars": [[898, "polars-series-str-n-chars"]], "polars.Series.str.split": [[905, "polars-series-str-split"]], "polars.Series.to_list": [[929, "polars-series-to-list"]], "polars.Series.str.rjust": [[902, "polars-series-str-rjust"]], "polars.Series.struct.fields": [[915, "polars-series-struct-fields"]], "polars.Series.str.split_exact": [[906, "polars-series-str-split-exact"]], "Export": [[947, "export"], [243, "export"]], "Miscellaneous": [[950, "miscellaneous"], [665, "miscellaneous"], [579, "miscellaneous"], [572, "miscellaneous"], [246, "miscellaneous"]], "Manipulation/selection": [[951, "manipulation-selection"], [666, "manipulation-selection"], [573, "manipulation-selection"], [247, "manipulation-selection"]], "polars.Series.take_every": [[921, "polars-series-take-every"]], "Descriptive": [[946, "descriptive"], [662, "descriptive"], [242, "descriptive"]], "polars.Series.tanh": [[923, "polars-series-tanh"]], "polars.Series.var": [[938, "polars-series-var"]], "polars.Series.to_arrow": [[925, "polars-series-to-arrow"]], "polars.Series.to_frame": [[927, "polars-series-to-frame"]], "polars.Series.str.replace_all": [[901, "polars-series-str-replace-all"]], "Temporal": [[954, "temporal"], [577, "temporal"], [248, "temporal"]], "polars.Series.time_unit": [[924, "polars-series-time-unit"]], "Testing": [[956, "testing"]], "Asserts": [[956, "asserts"]], "Property-based testing": [[956, "property-based-testing"]], "Strategies": [[956, "strategies"]], "Strategy helpers": [[956, "strategy-helpers"]], "polars.Series.str.parse_int": [[899, "polars-series-str-parse-int"]], "polars.Series.tan": [[922, "polars-series-tan"]], "polars.Series.to_dummies": [[926, "polars-series-to-dummies"]], "polars.Series.view": [[939, "polars-series-view"]], "polars.Series.sum": [[918, "polars-series-sum"]], "Computation": [[945, "computation"], [567, "computation"], [241, "computation"]], "String": [[952, "string"], [575, "string"]], "Struct": [[953, "struct"], [576, "struct"]], "polars.Series.str.slice": [[904, "polars-series-str-slice"]], "polars.Series.top_k": [[933, "polars-series-top-k"]], "polars.Series.take": [[920, "polars-series-take"]], "polars.Series.str.to_lowercase": [[911, "polars-series-str-to-lowercase"]], "polars.Series.str.strip": [[909, "polars-series-str-strip"]], "LazyFrame": [[664, "lazyframe"]], "polars.Series.arcsin": [[676, "polars-series-arcsin"]], "polars.LazyFrame.with_columns": [[642, "polars-lazyframe-with-columns"]], "polars.LazyFrame.slice": [[630, "polars-lazyframe-slice"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[648, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.LazyFrame.unique": [[637, "polars-lazyframe-unique"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[652, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.LazyFrame.tail": [[634, "polars-lazyframe-tail"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[660, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.LazyFrame.sink_ipc": [[628, "polars-lazyframe-sink-ipc"]], "polars.Series.append": [[672, "polars-series-append"]], "polars.Series.arr.contains": [[689, "polars-series-arr-contains"]], "polars.Series.arctan": [[678, "polars-series-arctan"]], "polars.Series.arr": [[685, "polars-series-arr"]], "polars.Series.arg_sort": [[682, "polars-series-arg-sort"]], "polars.LazyFrame.sum": [[633, "polars-lazyframe-sum"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[656, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.Series.arg_min": [[681, "polars-series-arg-min"]], "polars.Series.arg_max": [[680, "polars-series-arg-max"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[647, "polars-lazyframe-groupby-lazygroupby-all"]], "GroupBy": [[663, "groupby"], [244, "groupby"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[651, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[649, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.Series.arctanh": [[679, "polars-series-arctanh"]], "polars.LazyFrame.rename": [[621, "polars-lazyframe-rename"]], "polars.Series.arccos": [[674, "polars-series-arccos"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[654, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.LazyFrame.shift": [[625, "polars-lazyframe-shift"]], "polars.LazyFrame.schema": [[623, "polars-lazyframe-schema"]], "polars.Series.arg_true": [[683, "polars-series-arg-true"]], "polars.LazyFrame.shift_and_fill": [[626, "polars-lazyframe-shift-and-fill"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[658, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.Series.arr.concat": [[688, "polars-series-arr-concat"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[659, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[650, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.Series.abs": [[668, "polars-series-abs"]], "polars.LazyFrame.take_every": [[635, "polars-lazyframe-take-every"]], "polars.LazyFrame.show_graph": [[627, "polars-lazyframe-show-graph"]], "polars.LazyFrame.top_k": [[636, "polars-lazyframe-top-k"]], "polars.Series.arr.arg_min": [[687, "polars-series-arr-arg-min"]], "polars.LazyFrame.var": [[640, "polars-lazyframe-var"]], "polars.LazyFrame.write_json": [[645, "polars-lazyframe-write-json"]], "polars.Series.arr.arg_max": [[686, "polars-series-arr-arg-max"]], "polars.Series.arcsinh": [[677, "polars-series-arcsinh"]], "polars.LazyFrame.std": [[632, "polars-lazyframe-std"]], "polars.Series.alias": [[669, "polars-series-alias"]], "polars.Series.any": [[671, "polars-series-any"]], "polars.LazyFrame.select": [[624, "polars-lazyframe-select"]], "polars.LazyFrame.with_context": [[643, "polars-lazyframe-with-context"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[653, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.LazyFrame.with_row_count": [[644, "polars-lazyframe-with-row-count"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[655, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.LazyFrame.unnest": [[638, "polars-lazyframe-unnest"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[657, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.LazyFrame.sink_parquet": [[629, "polars-lazyframe-sink-parquet"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[646, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.LazyFrame.update": [[639, "polars-lazyframe-update"]], "polars.Series.all": [[670, "polars-series-all"]], "polars.LazyFrame.sort": [[631, "polars-lazyframe-sort"]], "polars.Series.apply": [[673, "polars-series-apply"]], "polars.LazyFrame.reverse": [[622, "polars-lazyframe-reverse"]], "polars.LazyFrame.width": [[641, "polars-lazyframe-width"]], "polars.Series.arccosh": [[675, "polars-series-arccosh"]], "polars.Series.arg_unique": [[684, "polars-series-arg-unique"]], "Read/write logical plan": [[665, "read-write-logical-plan"]], "polars.Expr.struct.field": [[496, "polars-expr-struct-field"]], "polars.duration": [[534, "polars-duration"]], "polars.Expr.str.split_exact": [[488, "polars-expr-str-split-exact"]], "polars.concat_list": [[524, "polars-concat-list"]], "polars.element": [[535, "polars-element"]], "polars.Expr.take": [[502, "polars-expr-take"]], "polars.concat_str": [[525, "polars-concat-str"]], "polars.cumreduce": [[530, "polars-cumreduce"]], "polars.head": [[542, "polars-head"]], "polars.min": [[549, "polars-min"]], "polars.median": [[548, "polars-median"]], "polars.Expr.str.split": [[487, "polars-expr-str-split"]], "polars.lit": [[544, "polars-lit"]], "polars.cumsum": [[531, "polars-cumsum"]], "polars.count": [[527, "polars-count"]], "polars.any": [[517, "polars-any"]], "polars.Expr.str.rstrip": [[485, "polars-expr-str-rstrip"]], "polars.max": [[546, "polars-max"]], "polars.date": [[532, "polars-date"]], "polars.arange": [[519, "polars-arange"]], "polars.Expr.tail": [[501, "polars-expr-tail"]], "polars.datetime": [[533, "polars-datetime"]], "polars.first": [[537, "polars-first"]], "polars.pearson_corr": [[551, "polars-pearson-corr"]], "polars.Expr.str.rjust": [[484, "polars-expr-str-rjust"]], "polars.n_unique": [[550, "polars-n-unique"]], "polars.Expr.to_physical": [[506, "polars-expr-to-physical"]], "polars.Expr.unique": [[509, "polars-expr-unique"]], "polars.exclude": [[536, "polars-exclude"]], "polars.Expr.upper_bound": [[511, "polars-expr-upper-bound"]], "polars.Expr.sub": [[498, "polars-expr-sub"]], "polars.fold": [[538, "polars-fold"]], "polars.format": [[539, "polars-format"]], "polars.map": [[545, "polars-map"]], "polars.list": [[543, "polars-list"]], "polars.Expr.tanh": [[505, "polars-expr-tanh"]], "polars.cov": [[528, "polars-cov"]], "polars.Expr.str.strptime": [[492, "polars-expr-str-strptime"]], "polars.all": [[516, "polars-all"]], "polars.Expr.var": [[513, "polars-expr-var"]], "polars.Expr.value_counts": [[512, "polars-expr-value-counts"]], "polars.Expr.xor": [[515, "polars-expr-xor"]], "polars.Expr.truediv": [[508, "polars-expr-truediv"]], "polars.cumfold": [[529, "polars-cumfold"]], "polars.Expr.tan": [[504, "polars-expr-tan"]], "polars.coalesce": [[522, "polars-coalesce"]], "polars.Expr.str.to_uppercase": [[494, "polars-expr-str-to-uppercase"]], "polars.Expr.where": [[514, "polars-expr-where"]], "polars.Expr.str.splitn": [[489, "polars-expr-str-splitn"]], "polars.Expr.unique_counts": [[510, "polars-expr-unique-counts"]], "polars.mean": [[547, "polars-mean"]], "polars.groups": [[541, "polars-groups"]], "polars.Expr.str.starts_with": [[490, "polars-expr-str-starts-with"]], "polars.Expr.struct.rename_fields": [[497, "polars-expr-struct-rename-fields"]], "polars.Expr.take_every": [[503, "polars-expr-take-every"]], "polars.Expr.top_k": [[507, "polars-expr-top-k"]], "polars.Expr.str.slice": [[486, "polars-expr-str-slice"]], "polars.from_epoch": [[540, "polars-from-epoch"]], "polars.Expr.str.replace_all": [[483, "polars-expr-str-replace-all"]], "polars.apply": [[518, "polars-apply"]], "polars.avg": [[521, "polars-avg"]], "polars.Expr.str.to_lowercase": [[493, "polars-expr-str-to-lowercase"]], "polars.corr": [[526, "polars-corr"]], "polars.Expr.str.strip": [[491, "polars-expr-str-strip"]], "polars.Expr.str.zfill": [[495, "polars-expr-str-zfill"]], "polars.Expr.suffix": [[499, "polars-expr-suffix"]], "polars.Expr.sum": [[500, "polars-expr-sum"]], "polars.col": [[523, "polars-col"]], "polars.arg_sort_by": [[520, "polars-arg-sort-by"]], "polars.Expr.reshape": [[437, "polars-expr-reshape"]], "polars.Expr.shuffle": [[456, "polars-expr-shuffle"]], "polars.Expr.rolling_min": [[443, "polars-expr-rolling-min"]], "polars.Expr.str.parse_int": [[481, "polars-expr-str-parse-int"]], "polars.Expr.nan_min": [[422, "polars-expr-nan-min"]], "polars.Expr.pipe": [[428, "polars-expr-pipe"]], "polars.Expr.repeat_by": [[436, "polars-expr-repeat-by"]], "polars.Expr.rolling_quantile": [[444, "polars-expr-rolling-quantile"]], "polars.Expr.str.n_chars": [[480, "polars-expr-str-n-chars"]], "polars.Expr.mul": [[419, "polars-expr-mul"]], "polars.Expr.shrink_dtype": [[455, "polars-expr-shrink-dtype"]], "polars.Expr.sort_by": [[463, "polars-expr-sort-by"]], "polars.Expr.sinh": [[459, "polars-expr-sinh"]], "polars.Expr.reverse": [[438, "polars-expr-reverse"]], "polars.Expr.rolling_apply": [[439, "polars-expr-rolling-apply"]], "polars.Expr.slice": [[461, "polars-expr-slice"]], "polars.Expr.meta.root_names": [[414, "polars-expr-meta-root-names"]], "polars.Expr.min": [[416, "polars-expr-min"]], "polars.Expr.str.contains": [[467, "polars-expr-str-contains"]], "polars.Expr.rolling_mean": [[441, "polars-expr-rolling-mean"]], "polars.Expr.n_unique": [[420, "polars-expr-n-unique"]], "polars.Expr.rolling_skew": [[445, "polars-expr-rolling-skew"]], "polars.Expr.str.count_match": [[468, "polars-expr-str-count-match"]], "polars.Expr.sign": [[457, "polars-expr-sign"]], "polars.Expr.str.ends_with": [[471, "polars-expr-str-ends-with"]], "polars.Expr.sin": [[458, "polars-expr-sin"]], "polars.Expr.rolling_max": [[440, "polars-expr-rolling-max"]], "polars.Expr.mode": [[418, "polars-expr-mode"]], "polars.Expr.std": [[465, "polars-expr-std"]], "polars.Expr.prefix": [[430, "polars-expr-prefix"]], "polars.Expr.null_count": [[424, "polars-expr-null-count"]], "polars.Expr.or_": [[425, "polars-expr-or"]], "polars.Expr.over": [[426, "polars-expr-over"]], "polars.Expr.pow": [[429, "polars-expr-pow"]], "polars.Expr.rolling_median": [[442, "polars-expr-rolling-median"]], "polars.Expr.str.extract": [[473, "polars-expr-str-extract"]], "polars.Expr.str.explode": [[472, "polars-expr-str-explode"]], "polars.Expr.shift_and_fill": [[454, "polars-expr-shift-and-fill"]], "polars.Expr.rechunk": [[434, "polars-expr-rechunk"]], "polars.Expr.reinterpret": [[435, "polars-expr-reinterpret"]], "polars.Expr.search_sorted": [[451, "polars-expr-search-sorted"]], "polars.Expr.rolling_var": [[448, "polars-expr-rolling-var"]], "polars.Expr.str.lengths": [[477, "polars-expr-str-lengths"]], "polars.Expr.ne": [[423, "polars-expr-ne"]], "polars.Expr.mod": [[417, "polars-expr-mod"]], "polars.Expr.product": [[431, "polars-expr-product"]], "polars.Expr.str.concat": [[466, "polars-expr-str-concat"]], "polars.Expr.str.replace": [[482, "polars-expr-str-replace"]], "polars.Expr.nan_max": [[421, "polars-expr-nan-max"]], "polars.Expr.rolling_std": [[446, "polars-expr-rolling-std"]], "polars.Expr.set_sorted": [[452, "polars-expr-set-sorted"]], "polars.Expr.rolling_sum": [[447, "polars-expr-rolling-sum"]], "polars.Expr.quantile": [[432, "polars-expr-quantile"]], "polars.Expr.str.decode": [[469, "polars-expr-str-decode"]], "polars.Expr.round": [[449, "polars-expr-round"]], "polars.Expr.shift": [[453, "polars-expr-shift"]], "polars.Expr.skew": [[460, "polars-expr-skew"]], "polars.Expr.str.lstrip": [[479, "polars-expr-str-lstrip"]], "polars.Expr.str.json_path_match": [[476, "polars-expr-str-json-path-match"]], "polars.Expr.sample": [[450, "polars-expr-sample"]], "polars.Expr.str.extract_all": [[474, "polars-expr-str-extract-all"]], "polars.Expr.str.ljust": [[478, "polars-expr-str-ljust"]], "polars.Expr.rank": [[433, "polars-expr-rank"]], "polars.Expr.sqrt": [[464, "polars-expr-sqrt"]], "polars.Expr.str.json_extract": [[475, "polars-expr-str-json-extract"]], "polars.Expr.pct_change": [[427, "polars-expr-pct-change"]], "polars.Expr.str.encode": [[470, "polars-expr-str-encode"]], "polars.Expr.sort": [[462, "polars-expr-sort"]], "polars.Expr.meta.undo_aliases": [[415, "polars-expr-meta-undo-aliases"]], "polars.Expr.dt.round": [[347, "polars-expr-dt-round"]], "polars.Expr.hash": [[377, "polars-expr-hash"]], "polars.Expr.dt.week": [[354, "polars-expr-dt-week"]], "polars.Expr.map": [[404, "polars-expr-map"]], "polars.Expr.fill_nan": [[367, "polars-expr-fill-nan"]], "polars.Expr.gt": [[376, "polars-expr-gt"]], "polars.Expr.is_not_nan": [[389, "polars-expr-is-not-nan"]], "polars.Expr.le": [[396, "polars-expr-le"]], "polars.Expr.floor": [[372, "polars-expr-floor"]], "polars.Expr.ewm_std": [[361, "polars-expr-ewm-std"]], "polars.Expr.dt.timestamp": [[352, "polars-expr-dt-timestamp"]], "polars.Expr.exp": [[364, "polars-expr-exp"]], "polars.Expr.dt.time": [[351, "polars-expr-dt-time"]], "polars.Expr.explode": [[365, "polars-expr-explode"]], "polars.Expr.head": [[378, "polars-expr-head"]], "polars.Expr.list": [[399, "polars-expr-list"]], "polars.Expr.dt.replace_time_zone": [[346, "polars-expr-dt-replace-time-zone"]], "polars.Expr.eq": [[359, "polars-expr-eq"]], "polars.Expr.log10": [[401, "polars-expr-log10"]], "polars.Expr.dt.seconds": [[349, "polars-expr-dt-seconds"]], "polars.Expr.is_first": [[384, "polars-expr-is-first"]], "polars.Expr.is_infinite": [[386, "polars-expr-is-infinite"]], "polars.Expr.map_alias": [[405, "polars-expr-map-alias"]], "polars.Expr.mean": [[408, "polars-expr-mean"]], "polars.Expr.is_unique": [[392, "polars-expr-is-unique"]], "polars.Expr.dt.with_time_unit": [[356, "polars-expr-dt-with-time-unit"]], "polars.Expr.extend_constant": [[366, "polars-expr-extend-constant"]], "polars.Expr.is_not_null": [[390, "polars-expr-is-not-null"]], "polars.Expr.kurtosis": [[394, "polars-expr-kurtosis"]], "polars.Expr.meta.output_name": [[412, "polars-expr-meta-output-name"]], "polars.Expr.limit": [[398, "polars-expr-limit"]], "polars.Expr.lower_bound": [[402, "polars-expr-lower-bound"]], "polars.Expr.dt.truncate": [[353, "polars-expr-dt-truncate"]], "polars.Expr.len": [[397, "polars-expr-len"]], "polars.Expr.dt.second": [[348, "polars-expr-dt-second"]], "polars.Expr.filter": [[369, "polars-expr-filter"]], "polars.Expr.is_duplicated": [[382, "polars-expr-is-duplicated"]], "polars.Expr.is_finite": [[383, "polars-expr-is-finite"]], "polars.Expr.ewm_mean": [[360, "polars-expr-ewm-mean"]], "polars.Expr.flatten": [[371, "polars-expr-flatten"]], "polars.Expr.log": [[400, "polars-expr-log"]], "polars.Expr.meta.has_multiple_outputs": [[410, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.ge": [[375, "polars-expr-ge"]], "polars.Expr.fill_null": [[368, "polars-expr-fill-null"]], "polars.Expr.is_nan": [[387, "polars-expr-is-nan"]], "polars.Expr.meta.pop": [[413, "polars-expr-meta-pop"]], "polars.Expr.lt": [[403, "polars-expr-lt"]], "polars.Expr.dt.strftime": [[350, "polars-expr-dt-strftime"]], "polars.Expr.first": [[370, "polars-expr-first"]], "polars.Expr.is_in": [[385, "polars-expr-is-in"]], "polars.Expr.exclude": [[363, "polars-expr-exclude"]], "polars.Expr.is_between": [[381, "polars-expr-is-between"]], "polars.Expr.keep_name": [[393, "polars-expr-keep-name"]], "polars.Expr.median": [[409, "polars-expr-median"]], "polars.Expr.interpolate": [[380, "polars-expr-interpolate"]], "polars.Expr.floordiv": [[373, "polars-expr-floordiv"]], "polars.Expr.ewm_var": [[362, "polars-expr-ewm-var"]], "polars.Expr.inspect": [[379, "polars-expr-inspect"]], "polars.Expr.max": [[407, "polars-expr-max"]], "polars.Expr.entropy": [[358, "polars-expr-entropy"]], "polars.Expr.is_not": [[388, "polars-expr-is-not"]], "polars.Expr.dt.quarter": [[345, "polars-expr-dt-quarter"]], "polars.Expr.last": [[395, "polars-expr-last"]], "polars.Expr.dt.weekday": [[355, "polars-expr-dt-weekday"]], "polars.Expr.dt.year": [[357, "polars-expr-dt-year"]], "polars.Expr.is_null": [[391, "polars-expr-is-null"]], "polars.Expr.forward_fill": [[374, "polars-expr-forward-fill"]], "polars.Expr.meta.is_regex_projection": [[411, "polars-expr-meta-is-regex-projection"]], "polars.Expr.map_dict": [[406, "polars-expr-map-dict"]], "polars.Expr.dt.hours": [[331, "polars-expr-dt-hours"]], "polars.Expr.count": [[311, "polars-expr-count"]], "polars.Expr.arr.first": [[279, "polars-expr-arr-first"]], "polars.Expr.arr.reverse": [[288, "polars-expr-arr-reverse"]], "polars.Expr.dt.iso_year": [[333, "polars-expr-dt-iso-year"]], "polars.Expr.cumprod": [[315, "polars-expr-cumprod"]], "polars.Expr.diff": [[318, "polars-expr-diff"]], "polars.Expr.arr.sum": [[292, "polars-expr-arr-sum"]], "polars.Expr.cummin": [[314, "polars-expr-cummin"]], "polars.Expr.dt.cast_time_unit": [[322, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.day": [[327, "polars-expr-dt-day"]], "polars.Expr.cumsum": [[316, "polars-expr-cumsum"]], "polars.Expr.bin.starts_with": [[302, "polars-expr-bin-starts-with"]], "polars.Expr.arr.shift": [[289, "polars-expr-arr-shift"]], "polars.Expr.dt.minutes": [[339, "polars-expr-dt-minutes"]], "polars.Expr.arr.max": [[285, "polars-expr-arr-max"]], "polars.Expr.bin.contains": [[298, "polars-expr-bin-contains"]], "polars.Expr.dt.hour": [[330, "polars-expr-dt-hour"]], "polars.Expr.bin.ends_with": [[301, "polars-expr-bin-ends-with"]], "polars.Expr.arr.take": [[294, "polars-expr-arr-take"]], "polars.Expr.cos": [[309, "polars-expr-cos"]], "polars.Expr.dt.date": [[325, "polars-expr-dt-date"]], "polars.Expr.dt.is_leap_year": [[332, "polars-expr-dt-is-leap-year"]], "polars.Expr.arr.min": [[287, "polars-expr-arr-min"]], "polars.Expr.arr.slice": [[290, "polars-expr-arr-slice"]], "polars.Expr.dt.month": [[340, "polars-expr-dt-month"]], "polars.Expr.dt.microseconds": [[335, "polars-expr-dt-microseconds"]], "polars.Expr.arr.tail": [[293, "polars-expr-arr-tail"]], "polars.Expr.dt.nanoseconds": [[342, "polars-expr-dt-nanoseconds"]], "polars.Expr.drop_nans": [[320, "polars-expr-drop-nans"]], "polars.Expr.cumulative_eval": [[317, "polars-expr-cumulative-eval"]], "polars.Expr.dot": [[319, "polars-expr-dot"]], "polars.Expr.arr.to_struct": [[295, "polars-expr-arr-to-struct"]], "polars.Expr.dt.millisecond": [[336, "polars-expr-dt-millisecond"]], "polars.Expr.arr.get": [[280, "polars-expr-arr-get"]], "polars.Expr.clip_min": [[308, "polars-expr-clip-min"]], "polars.Expr.arr.lengths": [[284, "polars-expr-arr-lengths"]], "polars.Expr.arr.last": [[283, "polars-expr-arr-last"]], "polars.Expr.backward_fill": [[297, "polars-expr-backward-fill"]], "polars.Expr.ceil": [[305, "polars-expr-ceil"]], "polars.Expr.dt.convert_time_zone": [[324, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.days": [[328, "polars-expr-dt-days"]], "polars.Expr.dt.ordinal_day": [[344, "polars-expr-dt-ordinal-day"]], "polars.Expr.arr.diff": [[276, "polars-expr-arr-diff"]], "polars.Expr.dt.offset_by": [[343, "polars-expr-dt-offset-by"]], "polars.Expr.arr.sort": [[291, "polars-expr-arr-sort"]], "polars.Expr.bin.decode": [[299, "polars-expr-bin-decode"]], "polars.Expr.bin.encode": [[300, "polars-expr-bin-encode"]], "polars.Expr.cosh": [[310, "polars-expr-cosh"]], "polars.Expr.dt.datetime": [[326, "polars-expr-dt-datetime"]], "polars.Expr.arr.unique": [[296, "polars-expr-arr-unique"]], "polars.Expr.cummax": [[313, "polars-expr-cummax"]], "polars.Expr.dt.epoch": [[329, "polars-expr-dt-epoch"]], "polars.Expr.dt.milliseconds": [[337, "polars-expr-dt-milliseconds"]], "polars.Expr.arr.head": [[281, "polars-expr-arr-head"]], "polars.Expr.drop_nulls": [[321, "polars-expr-drop-nulls"]], "polars.Expr.dt.nanosecond": [[341, "polars-expr-dt-nanosecond"]], "polars.Expr.cast": [[303, "polars-expr-cast"]], "polars.Expr.clip": [[306, "polars-expr-clip"]], "polars.Expr.clip_max": [[307, "polars-expr-clip-max"]], "polars.Expr.arr.mean": [[286, "polars-expr-arr-mean"]], "polars.Expr.cumcount": [[312, "polars-expr-cumcount"]], "polars.Expr.arr.explode": [[278, "polars-expr-arr-explode"]], "polars.Expr.dt.combine": [[323, "polars-expr-dt-combine"]], "polars.Expr.arr.join": [[282, "polars-expr-arr-join"]], "polars.Expr.dt.minute": [[338, "polars-expr-dt-minute"]], "polars.Expr.cat.set_ordering": [[304, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.microsecond": [[334, "polars-expr-dt-microsecond"]], "polars.Expr.arr.eval": [[277, "polars-expr-arr-eval"]], "polars.LazyFrame.read_json": [[620, "polars-lazyframe-read-json"]], "polars.std": [[557, "polars-std"]], "polars.LazyFrame.map": [[610, "polars-lazyframe-map"]], "polars.select": [[555, "polars-select"]], "polars.LazyFrame.filter": [[596, "polars-lazyframe-filter"]], "polars.LazyFrame.dtypes": [[590, "polars-lazyframe-dtypes"]], "polars.LazyFrame.pipe": [[617, "polars-lazyframe-pipe"]], "polars.LazyFrame.groupby_rolling": [[601, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.drop": [[588, "polars-lazyframe-drop"]], "polars.LazyFrame.head": [[602, "polars-lazyframe-head"]], "polars.LazyFrame.groupby_dynamic": [[600, "polars-lazyframe-groupby-dynamic"]], "Functions": [[579, "functions"], [568, "functions"]], "Conversion": [[579, "conversion"]], "Eager/Lazy functions": [[579, "eager-lazy-functions"]], "Parallelization": [[579, "parallelization"]], "StringCache": [[579, "stringcache"]], "polars.LazyFrame.fill_null": [[595, "polars-lazyframe-fill-null"]], "polars.LazyFrame.groupby": [[599, "polars-lazyframe-groupby"]], "polars.var": [[561, "polars-var"]], "polars.LazyFrame.min": [[616, "polars-lazyframe-min"]], "API reference": [[580, "api-reference"]], "polars.LazyFrame.join_asof": [[606, "polars-lazyframe-join-asof"]], "polars.quantile": [[552, "polars-quantile"]], "Window": [[578, "window"]], "polars.LazyFrame.from_json": [[598, "polars-lazyframe-from-json"]], "polars.LazyFrame.interpolate": [[604, "polars-lazyframe-interpolate"]], "polars.LazyFrame.columns": [[587, "polars-lazyframe-columns"]], "polars.sum": [[559, "polars-sum"]], "polars.LazyFrame.clear": [[584, "polars-lazyframe-clear"]], "polars.LazyFrame.median": [[613, "polars-lazyframe-median"]], "polars.when": [[562, "polars-when"]], "polars.repeat": [[554, "polars-repeat"]], "polars.struct": [[558, "polars-struct"]], "polars.LazyFrame.mean": [[612, "polars-lazyframe-mean"]], "polars.reduce": [[553, "polars-reduce"]], "polars.LazyFrame.melt": [[614, "polars-lazyframe-melt"]], "polars.LazyFrame.last": [[607, "polars-lazyframe-last"]], "polars.LazyFrame.lazy": [[608, "polars-lazyframe-lazy"]], "polars.LazyFrame.max": [[611, "polars-lazyframe-max"]], "polars.LazyFrame.explode": [[592, "polars-lazyframe-explode"]], "Expressions": [[569, "expressions"]], "polars.LazyFrame.collect": [[586, "polars-lazyframe-collect"]], "polars.LazyFrame.explain": [[591, "polars-lazyframe-explain"]], "polars.LazyFrame.join": [[605, "polars-lazyframe-join"]], "polars.LazyFrame.fill_nan": [[594, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.clone": [[585, "polars-lazyframe-clone"]], "polars.LazyFrame.cache": [[583, "polars-lazyframe-cache"]], "polars.LazyFrame.inspect": [[603, "polars-lazyframe-inspect"]], "polars.spearman_rank_corr": [[556, "polars-spearman-rank-corr"]], "polars.LazyFrame.quantile": [[619, "polars-lazyframe-quantile"]], "polars.LazyFrame.drop_nulls": [[589, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.profile": [[618, "polars-lazyframe-profile"]], "Meta": [[571, "meta"]], "Operators": [[574, "operators"]], "Conjunction": [[574, "conjunction"]], "Comparison": [[574, "comparison"]], "Numeric": [[574, "numeric"], [248, "numeric"]], "polars.LazyFrame.first": [[597, "polars-lazyframe-first"]], "Input/output": [[581, "input-output"]], "CSV": [[581, "csv"]], "Feather/ IPC": [[581, "feather-ipc"]], "Parquet": [[581, "parquet"]], "Database": [[581, "database"]], "JSON": [[581, "json"]], "AVRO": [[581, "avro"]], "Excel": [[581, "excel"]], "Delta Lake": [[581, "delta-lake"]], "Datasets": [[581, "datasets"]], "BatchedCsvReader": [[581, "batchedcsvreader"]], "polars.LazyFrame.fetch": [[593, "polars-lazyframe-fetch"]], "Columns / names": [[566, "columns-names"]], "polars.tail": [[560, "polars-tail"]], "polars.LazyFrame.merge_sorted": [[615, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.limit": [[609, "polars-lazyframe-limit"]], "polars.DataFrame.fill_null": [[142, "polars-dataframe-fill-null"]], "polars.DataFrame.mean": [[170, "polars-dataframe-mean"]], "polars.DataFrame.take_every": [[202, "polars-dataframe-take-every"]], "polars.DataFrame.to_dicts": [[205, "polars-dataframe-to-dicts"]], "polars.DataFrame.n_unique": [[176, "polars-dataframe-n-unique"]], "polars.DataFrame.to_dummies": [[206, "polars-dataframe-to-dummies"]], "polars.DataFrame.shift_and_fill": [[195, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.is_empty": [[160, "polars-dataframe-is-empty"]], "polars.DataFrame.rename": [[184, "polars-dataframe-rename"]], "polars.DataFrame.insert_at_idx": [[157, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.is_duplicated": [[159, "polars-dataframe-is-duplicated"]], "polars.DataFrame.to_dict": [[204, "polars-dataframe-to-dict"]], "polars.DataFrame.glimpse": [[149, "polars-dataframe-glimpse"]], "polars.DataFrame.groupby_rolling": [[152, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.shrink_to_fit": [[196, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.row": [[188, "polars-dataframe-row"]], "polars.DataFrame.pivot": [[180, "polars-dataframe-pivot"]], "polars.DataFrame.estimated_size": [[138, "polars-dataframe-estimated-size"]], "polars.DataFrame.pipe": [[179, "polars-dataframe-pipe"]], "polars.DataFrame.max": [[169, "polars-dataframe-max"]], "polars.DataFrame.replace_at_idx": [[186, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.hstack": [[156, "polars-dataframe-hstack"]], "polars.DataFrame.merge_sorted": [[173, "polars-dataframe-merge-sorted"]], "polars.DataFrame.find_idx_by_name": [[144, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.filter": [[143, "polars-dataframe-filter"]], "polars.DataFrame.median": [[171, "polars-dataframe-median"]], "polars.DataFrame.hash_rows": [[153, "polars-dataframe-hash-rows"]], "polars.DataFrame.item": [[162, "polars-dataframe-item"]], "polars.DataFrame.min": [[174, "polars-dataframe-min"]], "polars.DataFrame.partition_by": [[178, "polars-dataframe-partition-by"]], "polars.DataFrame.sample": [[190, "polars-dataframe-sample"]], "polars.DataFrame.get_column": [[147, "polars-dataframe-get-column"]], "polars.DataFrame.shape": [[193, "polars-dataframe-shape"]], "polars.DataFrame.tail": [[201, "polars-dataframe-tail"]], "polars.DataFrame.product": [[181, "polars-dataframe-product"]], "polars.DataFrame.extend": [[140, "polars-dataframe-extend"]], "polars.DataFrame.shift": [[194, "polars-dataframe-shift"]], "polars.DataFrame.height": [[155, "polars-dataframe-height"]], "polars.DataFrame.null_count": [[177, "polars-dataframe-null-count"]], "polars.DataFrame.reverse": [[187, "polars-dataframe-reverse"]], "polars.DataFrame.interpolate": [[158, "polars-dataframe-interpolate"]], "polars.DataFrame.rechunk": [[183, "polars-dataframe-rechunk"]], "polars.DataFrame.iter_rows": [[163, "polars-dataframe-iter-rows"]], "polars.DataFrame.head": [[154, "polars-dataframe-head"]], "polars.DataFrame.get_columns": [[148, "polars-dataframe-get-columns"]], "polars.DataFrame.groupby": [[150, "polars-dataframe-groupby"]], "polars.DataFrame.iter_slices": [[164, "polars-dataframe-iter-slices"]], "polars.DataFrame.melt": [[172, "polars-dataframe-melt"]], "polars.DataFrame.slice": [[197, "polars-dataframe-slice"]], "polars.DataFrame.sum": [[200, "polars-dataframe-sum"]], "polars.DataFrame.groupby_dynamic": [[151, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.std": [[199, "polars-dataframe-std"]], "polars.DataFrame.fold": [[145, "polars-dataframe-fold"]], "polars.DataFrame.explode": [[139, "polars-dataframe-explode"]], "polars.DataFrame.frame_equal": [[146, "polars-dataframe-frame-equal"]], "polars.DataFrame.lazy": [[167, "polars-dataframe-lazy"]], "polars.DataFrame.schema": [[191, "polars-dataframe-schema"]], "polars.DataFrame.to_arrow": [[203, "polars-dataframe-to-arrow"]], "polars.DataFrame.fill_nan": [[141, "polars-dataframe-fill-nan"]], "polars.DataFrame.rows": [[189, "polars-dataframe-rows"]], "polars.DataFrame.is_unique": [[161, "polars-dataframe-is-unique"]], "polars.DataFrame.join": [[165, "polars-dataframe-join"]], "polars.DataFrame.limit": [[168, "polars-dataframe-limit"]], "polars.DataFrame.sort": [[198, "polars-dataframe-sort"]], "polars.DataFrame.quantile": [[182, "polars-dataframe-quantile"]], "polars.DataFrame.select": [[192, "polars-dataframe-select"]], "polars.DataFrame.replace": [[185, "polars-dataframe-replace"]], "polars.DataFrame.join_asof": [[166, "polars-dataframe-join-asof"]], "polars.DataFrame.n_chunks": [[175, "polars-dataframe-n-chunks"]], "polars.DataFrame.to_series": [[210, "polars-dataframe-to-series"]], "polars.DataFrame.upsample": [[218, "polars-dataframe-upsample"]], "Exceptions": [[249, "exceptions"]], "polars.Expr.append": [[258, "polars-expr-append"]], "polars.Expr.arg_max": [[266, "polars-expr-arg-max"]], "polars.dataframe.groupby.GroupBy.first": [[229, "polars-dataframe-groupby-groupby-first"]], "polars.Expr.arctanh": [[265, "polars-expr-arctanh"]], "polars.dataframe.groupby.GroupBy.last": [[231, "polars-dataframe-groupby-groupby-last"]], "polars.Expr.arg_sort": [[268, "polars-expr-arg-sort"]], "polars.DataFrame.to_numpy": [[208, "polars-dataframe-to-numpy"]], "polars.dataframe.groupby.GroupBy.apply": [[227, "polars-dataframe-groupby-groupby-apply"]], "DataFrame": [[245, "dataframe"]], "polars.dataframe.groupby.GroupBy.median": [[234, "polars-dataframe-groupby-groupby-median"]], "polars.Expr.abs": [[251, "polars-expr-abs"]], "polars.dataframe.groupby.GroupBy.min": [[235, "polars-dataframe-groupby-groupby-min"]], "polars.DataFrame.unique": [[214, "polars-dataframe-unique"]], "polars.Expr.any": [[257, "polars-expr-any"]], "polars.Expr.and_": [[256, "polars-expr-and"]], "polars.dataframe.groupby.GroupBy.sum": [[238, "polars-dataframe-groupby-groupby-sum"]], "polars.dataframe.groupby.GroupBy.mean": [[233, "polars-dataframe-groupby-groupby-mean"]], "polars.dataframe.groupby.GroupBy.n_unique": [[236, "polars-dataframe-groupby-groupby-n-unique"]], "polars.DataFrame.var": [[219, "polars-dataframe-var"]], "polars.dataframe.groupby.GroupBy.quantile": [[237, "polars-dataframe-groupby-groupby-quantile"]], "polars.Expr.agg_groups": [[253, "polars-expr-agg-groups"]], "polars.DataFrame.top_k": [[212, "polars-dataframe-top-k"]], "polars.DataFrame.to_struct": [[211, "polars-dataframe-to-struct"]], "polars.Expr.apply": [[259, "polars-expr-apply"]], "Data types": [[248, "data-types"]], "Nested": [[248, "nested"]], "Other": [[248, "other"]], "polars.dataframe.groupby.GroupBy.count": [[228, "polars-dataframe-groupby-groupby-count"]], "polars.Expr.arg_true": [[269, "polars-expr-arg-true"]], "polars.Expr.add": [[252, "polars-expr-add"]], "polars.Expr.arr.arg_min": [[272, "polars-expr-arr-arg-min"]], "polars.DataFrame.vstack": [[220, "polars-dataframe-vstack"]], "polars.Expr.arg_unique": [[270, "polars-expr-arg-unique"]], "polars.Expr.arr.concat": [[273, "polars-expr-arr-concat"]], "polars.Expr.all": [[255, "polars-expr-all"]], "polars.Expr.arcsinh": [[263, "polars-expr-arcsinh"]], "polars.dataframe.groupby.GroupBy.tail": [[239, "polars-dataframe-groupby-groupby-tail"]], "polars.Expr.arcsin": [[262, "polars-expr-arcsin"]], "polars.DataFrame.transpose": [[213, "polars-dataframe-transpose"]], "polars.Expr.arr.count_match": [[275, "polars-expr-arr-count-match"]], "polars.dataframe.groupby.GroupBy.agg": [[225, "polars-dataframe-groupby-groupby-agg"]], "polars.Expr.arr.contains": [[274, "polars-expr-arr-contains"]], "polars.Expr.arg_min": [[267, "polars-expr-arg-min"]], "polars.DataFrame.to_pandas": [[209, "polars-dataframe-to-pandas"]], "polars.Expr.alias": [[254, "polars-expr-alias"]], "polars.DataFrame.unnest": [[215, "polars-dataframe-unnest"]], "polars.DataFrame.width": [[221, "polars-dataframe-width"]], "polars.dataframe.groupby.GroupBy.max": [[232, "polars-dataframe-groupby-groupby-max"]], "polars.DataFrame.unstack": [[216, "polars-dataframe-unstack"]], "polars.DataFrame.with_columns": [[222, "polars-dataframe-with-columns"]], "polars.dataframe.groupby.GroupBy.head": [[230, "polars-dataframe-groupby-groupby-head"]], "polars.Expr.arccos": [[260, "polars-expr-arccos"]], "polars.dataframe.groupby.GroupBy.all": [[226, "polars-dataframe-groupby-groupby-all"]], "polars.Expr.arccosh": [[261, "polars-expr-arccosh"]], "polars.Expr.arr.arg_max": [[271, "polars-expr-arr-arg-max"]], "polars.DataFrame.with_row_count": [[223, "polars-dataframe-with-row-count"]], "polars.Expr.arctan": [[264, "polars-expr-arctan"]], "polars.DataFrame.update": [[217, "polars-dataframe-update"]], "polars.DataFrame.to_init_repr": [[207, "polars-dataframe-to-init-repr"]], "polars.dataframe.groupby.GroupBy.__iter__": [[224, "polars-dataframe-groupby-groupby-iter"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[5, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[6, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[7, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[8, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[9, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[10, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[11, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[12, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[13, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[14, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[15, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[16, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[17, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[22, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[23, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[24, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[25, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[26, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[27, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[28, "polars.DataFrame.write_database"]], "write_excel() (polars.dataframe method)": [[29, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[30, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[31, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[32, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[33, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[34, "polars.DataType"]], "__init__() (polars.datatype method)": [[34, "polars.DataType.__init__"]], "date (class in polars)": [[35, "polars.Date"]], "__init__() (polars.date method)": [[35, "polars.Date.__init__"]], "datetime (class in polars)": [[36, "polars.Datetime"]], "__init__() (polars.datetime method)": [[36, "polars.Datetime.__init__"]], "decimal (class in polars)": [[37, "polars.Decimal"]], "__init__() (polars.decimal method)": [[37, "polars.Decimal.__init__"]], "duration (class in polars)": [[38, "polars.Duration"]], "__init__() (polars.duration method)": [[38, "polars.Duration.__init__"]], "float32 (class in polars)": [[39, "polars.Float32"]], "__init__() (polars.float32 method)": [[39, "polars.Float32.__init__"]], "float64 (class in polars)": [[40, "polars.Float64"]], "__init__() (polars.float64 method)": [[40, "polars.Float64.__init__"]], "int16 (class in polars)": [[41, "polars.Int16"]], "__init__() (polars.int16 method)": [[41, "polars.Int16.__init__"]], "int32 (class in polars)": [[42, "polars.Int32"]], "__init__() (polars.int32 method)": [[42, "polars.Int32.__init__"]], "int64 (class in polars)": [[43, "polars.Int64"]], "__init__() (polars.int64 method)": [[43, "polars.Int64.__init__"]], "int8 (class in polars)": [[44, "polars.Int8"]], "__init__() (polars.int8 method)": [[44, "polars.Int8.__init__"]], "list (class in polars)": [[45, "polars.List"]], "__init__() (polars.list method)": [[45, "polars.List.__init__"]], "null (class in polars)": [[46, "polars.Null"]], "__init__() (polars.null method)": [[46, "polars.Null.__init__"]], "object (class in polars)": [[47, "polars.Object"]], "__init__() (polars.object method)": [[47, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[48, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[49, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[50, "polars.SQLContext.register"]], "stringcache (class in polars)": [[51, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[51, "polars.StringCache.__init__"]], "struct (class in polars)": [[52, "polars.Struct"]], "__init__() (polars.struct method)": [[52, "polars.Struct.__init__"]], "time (class in polars)": [[53, "polars.Time"]], "__init__() (polars.time method)": [[53, "polars.Time.__init__"]], "uint16 (class in polars)": [[54, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[54, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[55, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[55, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[56, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[56, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[57, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[57, "polars.UInt8.__init__"]], "unknown (class in polars)": [[58, "polars.Unknown"]], "__init__() (polars.unknown method)": [[58, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[59, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[59, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[60, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[61, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[62, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[63, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[64, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[65, "polars.arg_where"]], "build_info() (in module polars)": [[66, "polars.build_info"]], "collect_all() (in module polars)": [[67, "polars.collect_all"]], "concat() (in module polars)": [[68, "polars.concat"]], "cut() (in module polars)": [[69, "polars.cut"]], "date_range() (in module polars)": [[70, "polars.date_range"]], "arrowerror": [[71, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[72, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[73, "polars.exceptions.ComputeError"]], "duplicateerror": [[74, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[75, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[76, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[77, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[78, "polars.exceptions.PolarsPanicError"]], "rowserror": [[79, "polars.exceptions.RowsError"]], "schemaerror": [[80, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[81, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[82, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[83, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[84, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[85, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[86, "polars.from_dataframe"]], "from_dict() (in module polars)": [[87, "polars.from_dict"]], "from_dicts() (in module polars)": [[88, "polars.from_dicts"]], "from_numpy() (in module polars)": [[89, "polars.from_numpy"]], "from_pandas() (in module polars)": [[90, "polars.from_pandas"]], "from_records() (in module polars)": [[91, "polars.from_records"]], "from_repr() (in module polars)": [[92, "polars.from_repr"]], "get_dummies() (in module polars)": [[93, "polars.get_dummies"]], "get_index_type() (in module polars)": [[94, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[95, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[96, "polars.ones"]], "read_avro() (in module polars)": [[97, "polars.read_avro"]], "read_csv() (in module polars)": [[98, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[99, "polars.read_csv_batched"]], "read_database() (in module polars)": [[100, "polars.read_database"]], "read_delta() (in module polars)": [[101, "polars.read_delta"]], "read_excel() (in module polars)": [[102, "polars.read_excel"]], "read_ipc() (in module polars)": [[103, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[104, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[105, "polars.read_json"]], "read_ndjson() (in module polars)": [[106, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[107, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[108, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[109, "polars.scan_csv"]], "scan_delta() (in module polars)": [[110, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[111, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[112, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[113, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[114, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[115, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[116, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[117, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[118, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[118, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[119, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[120, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[121, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[122, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[123, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[124, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[127, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[128, "polars.DataFrame.apply"]], "clear() (polars.dataframe method)": [[129, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[130, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[131, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[132, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[133, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[134, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[135, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[136, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[137, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[138, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[139, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[140, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[141, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[142, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[143, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[144, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[145, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[146, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[147, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[148, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[149, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[150, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[151, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[152, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[153, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[154, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[155, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[156, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[157, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[158, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[159, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[160, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[161, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[162, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[163, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[164, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[165, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[166, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[167, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[168, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[169, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[170, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[171, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[172, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[173, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[174, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[175, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[176, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[177, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[178, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[179, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[180, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[181, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[182, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[183, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[184, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[185, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[186, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[187, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[188, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[189, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[190, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[191, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[192, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[193, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[194, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[195, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[196, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[197, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[198, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[199, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[200, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[201, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[202, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[203, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[204, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[205, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[206, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[207, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[208, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[209, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[210, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[211, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[212, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[213, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[214, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[215, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[216, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[217, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[218, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[219, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[220, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[221, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[222, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[223, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[224, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[225, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[226, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[227, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[228, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[229, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[230, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[231, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[232, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[251, "polars.Expr.abs"]], "add() (polars.expr method)": [[252, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[253, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[254, "polars.Expr.alias"]], "all() (polars.expr method)": [[255, "polars.Expr.all"]], "and_() (polars.expr method)": [[256, "polars.Expr.and_"]], "any() (polars.expr method)": [[257, "polars.Expr.any"]], "append() (polars.expr method)": [[258, "polars.Expr.append"]], "apply() (polars.expr method)": [[259, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[260, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[261, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[262, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[263, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[264, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[265, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[266, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[267, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[268, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[269, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[270, "polars.Expr.arg_unique"]], "arg_max() (polars.expr.arr method)": [[271, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[272, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[273, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[274, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[275, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[276, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[277, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[278, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[279, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[280, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[281, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[282, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[283, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[284, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[285, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[286, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[287, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[288, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[289, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[290, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[291, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[292, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[293, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[294, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[295, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[296, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[297, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[298, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[299, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[300, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[301, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[302, "polars.Expr.bin.starts_with"]], "cast() (polars.expr method)": [[303, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[304, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[305, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[306, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[307, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[308, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[309, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[310, "polars.Expr.cosh"]], "count() (polars.expr method)": [[311, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[312, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[313, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[314, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[315, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[316, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[317, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[318, "polars.Expr.diff"]], "dot() (polars.expr method)": [[319, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[320, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[321, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[322, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[323, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[324, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[325, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[326, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[327, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[328, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[329, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[330, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[331, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[332, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[333, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[334, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[335, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[336, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[337, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[338, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[339, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[340, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[341, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[342, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[343, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[344, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[345, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[346, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[347, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[348, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[349, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[350, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[351, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[352, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[353, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[354, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[355, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[356, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[357, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[358, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[359, "polars.Expr.eq"]], "ewm_mean() (polars.expr method)": [[360, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[361, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[362, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[363, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[364, "polars.Expr.exp"]], "explode() (polars.expr method)": [[365, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[366, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[367, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[368, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[369, "polars.Expr.filter"]], "first() (polars.expr method)": [[370, "polars.Expr.first"]], "flatten() (polars.expr method)": [[371, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[372, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[373, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[374, "polars.Expr.forward_fill"]], "ge() (polars.expr method)": [[375, "polars.Expr.ge"]], "gt() (polars.expr method)": [[376, "polars.Expr.gt"]], "hash() (polars.expr method)": [[377, "polars.Expr.hash"]], "head() (polars.expr method)": [[378, "polars.Expr.head"]], "inspect() (polars.expr method)": [[379, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[380, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[381, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[382, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[383, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[384, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[385, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[386, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[387, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[388, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[389, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[390, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[391, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[392, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[393, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[394, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[395, "polars.Expr.last"]], "le() (polars.expr method)": [[396, "polars.Expr.le"]], "len() (polars.expr method)": [[397, "polars.Expr.len"]], "limit() (polars.expr method)": [[398, "polars.Expr.limit"]], "list() (polars.expr method)": [[399, "polars.Expr.list"]], "log() (polars.expr method)": [[400, "polars.Expr.log"]], "log10() (polars.expr method)": [[401, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[402, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[403, "polars.Expr.lt"]], "map() (polars.expr method)": [[404, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[405, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[406, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[407, "polars.Expr.max"]], "mean() (polars.expr method)": [[408, "polars.Expr.mean"]], "median() (polars.expr method)": [[409, "polars.Expr.median"]], "has_multiple_outputs() (polars.expr.meta method)": [[410, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[411, "polars.Expr.meta.is_regex_projection"]], "output_name() (polars.expr.meta method)": [[412, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[413, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[414, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[415, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[416, "polars.Expr.min"]], "mod() (polars.expr method)": [[417, "polars.Expr.mod"]], "mode() (polars.expr method)": [[418, "polars.Expr.mode"]], "mul() (polars.expr method)": [[419, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[420, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[421, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[422, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[423, "polars.Expr.ne"]], "null_count() (polars.expr method)": [[424, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[425, "polars.Expr.or_"]], "over() (polars.expr method)": [[426, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[427, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[428, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[429, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[430, "polars.Expr.prefix"]], "product() (polars.expr method)": [[431, "polars.Expr.product"]], "quantile() (polars.expr method)": [[432, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[433, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[434, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[435, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[436, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[437, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[438, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[439, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[440, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[441, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[442, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[443, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[444, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[445, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[446, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[447, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[448, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[449, "polars.Expr.round"]], "sample() (polars.expr method)": [[450, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[451, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[452, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[453, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[454, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[455, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[456, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[457, "polars.Expr.sign"]], "sin() (polars.expr method)": [[458, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[459, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[460, "polars.Expr.skew"]], "slice() (polars.expr method)": [[461, "polars.Expr.slice"]], "sort() (polars.expr method)": [[462, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[463, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[464, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[465, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[466, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[467, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[468, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[469, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[470, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[471, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[472, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[473, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[474, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[475, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[476, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[477, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[478, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[479, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[480, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[481, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[482, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[483, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[484, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[485, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[486, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[487, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[488, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[489, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[490, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[491, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[492, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[493, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[494, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[495, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[496, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[497, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[498, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[499, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[500, "polars.Expr.sum"]], "tail() (polars.expr method)": [[501, "polars.Expr.tail"]], "take() (polars.expr method)": [[502, "polars.Expr.take"]], "take_every() (polars.expr method)": [[503, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[504, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[505, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[506, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[507, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[508, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[509, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[510, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[511, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[512, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[513, "polars.Expr.var"]], "where() (polars.expr method)": [[514, "polars.Expr.where"]], "xor() (polars.expr method)": [[515, "polars.Expr.xor"]], "all() (in module polars)": [[516, "polars.all"]], "any() (in module polars)": [[517, "polars.any"]], "apply() (in module polars)": [[518, "polars.apply"]], "arange() (in module polars)": [[519, "polars.arange"]], "arg_sort_by() (in module polars)": [[520, "polars.arg_sort_by"]], "avg() (in module polars)": [[521, "polars.avg"]], "coalesce() (in module polars)": [[522, "polars.coalesce"]], "col() (in module polars)": [[523, "polars.col"]], "concat_list() (in module polars)": [[524, "polars.concat_list"]], "concat_str() (in module polars)": [[525, "polars.concat_str"]], "corr() (in module polars)": [[526, "polars.corr"]], "count() (in module polars)": [[527, "polars.count"]], "cov() (in module polars)": [[528, "polars.cov"]], "cumfold() (in module polars)": [[529, "polars.cumfold"]], "cumreduce() (in module polars)": [[530, "polars.cumreduce"]], "cumsum() (in module polars)": [[531, "polars.cumsum"]], "date() (in module polars)": [[532, "polars.date"]], "datetime() (in module polars)": [[533, "polars.datetime"]], "duration() (in module polars)": [[534, "polars.duration"]], "element() (in module polars)": [[535, "polars.element"]], "exclude() (in module polars)": [[536, "polars.exclude"]], "first() (in module polars)": [[537, "polars.first"]], "fold() (in module polars)": [[538, "polars.fold"]], "format() (in module polars)": [[539, "polars.format"]], "from_epoch() (in module polars)": [[540, "polars.from_epoch"]], "groups() (in module polars)": [[541, "polars.groups"]], "head() (in module polars)": [[542, "polars.head"]], "list() (in module polars)": [[543, "polars.list"]], "lit() (in module polars)": [[544, "polars.lit"]], "map() (in module polars)": [[545, "polars.map"]], "max() (in module polars)": [[546, "polars.max"]], "mean() (in module polars)": [[547, "polars.mean"]], "median() (in module polars)": [[548, "polars.median"]], "min() (in module polars)": [[549, "polars.min"]], "n_unique() (in module polars)": [[550, "polars.n_unique"]], "pearson_corr() (in module polars)": [[551, "polars.pearson_corr"]], "quantile() (in module polars)": [[552, "polars.quantile"]], "reduce() (in module polars)": [[553, "polars.reduce"]], "repeat() (in module polars)": [[554, "polars.repeat"]], "select() (in module polars)": [[555, "polars.select"]], "spearman_rank_corr() (in module polars)": [[556, "polars.spearman_rank_corr"]], "std() (in module polars)": [[557, "polars.std"]], "struct() (in module polars)": [[558, "polars.struct"]], "sum() (in module polars)": [[559, "polars.sum"]], "tail() (in module polars)": [[560, "polars.tail"]], "var() (in module polars)": [[561, "polars.var"]], "when() (in module polars)": [[562, "polars.when"]], "cache() (polars.lazyframe method)": [[583, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[584, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[585, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[586, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[587, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[588, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[589, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[590, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[591, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[592, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[593, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[594, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[595, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[596, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[597, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[598, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[599, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[600, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[601, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[602, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[603, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[604, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[605, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[606, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[607, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[608, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[609, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[610, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[611, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[612, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[613, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[614, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[615, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[616, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[617, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[618, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[619, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[620, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[621, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[622, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[623, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[624, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[625, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[626, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[627, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[628, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[629, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[630, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[631, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[632, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[633, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[634, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[635, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[636, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[637, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[638, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[639, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[640, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[641, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[642, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[643, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[644, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[645, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[646, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[647, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[648, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[649, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[650, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[651, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[652, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[653, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[654, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[655, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[656, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[657, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[658, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[659, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[660, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[668, "polars.Series.abs"]], "alias() (polars.series method)": [[669, "polars.Series.alias"]], "all() (polars.series method)": [[670, "polars.Series.all"]], "any() (polars.series method)": [[671, "polars.Series.any"]], "append() (polars.series method)": [[672, "polars.Series.append"]], "apply() (polars.series method)": [[673, "polars.Series.apply"]], "arccos() (polars.series method)": [[674, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[675, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[676, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[677, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[678, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[679, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[680, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[681, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[682, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[683, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[684, "polars.Series.arg_unique"]], "arr (polars.series attribute)": [[685, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[686, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[687, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[688, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[689, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[690, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[691, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[692, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[693, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[694, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[695, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[696, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[697, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[698, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[699, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[700, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[701, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[702, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[703, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[704, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[705, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[706, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[707, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[708, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[709, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[710, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[711, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[712, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[713, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[714, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[715, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[716, "polars.Series.bin.starts_with"]], "cast() (polars.series method)": [[717, "polars.Series.cast"]], "cat (polars.series attribute)": [[718, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[719, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[720, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[721, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[722, "polars.Series.clear"]], "clip() (polars.series method)": [[723, "polars.Series.clip"]], "clip_max() (polars.series method)": [[724, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[725, "polars.Series.clip_min"]], "clone() (polars.series method)": [[726, "polars.Series.clone"]], "cos() (polars.series method)": [[727, "polars.Series.cos"]], "cosh() (polars.series method)": [[728, "polars.Series.cosh"]], "cummax() (polars.series method)": [[729, "polars.Series.cummax"]], "cummin() (polars.series method)": [[730, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[731, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[732, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[733, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[734, "polars.Series.cut"]], "describe() (polars.series method)": [[735, "polars.Series.describe"]], "diff() (polars.series method)": [[736, "polars.Series.diff"]], "dot() (polars.series method)": [[737, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[738, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[739, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[740, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[741, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[742, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[743, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[744, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[745, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[746, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[747, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[748, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[749, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[750, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[751, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[752, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[753, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[754, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[755, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[756, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[757, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[758, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[759, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[760, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[761, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[762, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[763, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[764, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[765, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[766, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[767, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[768, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[769, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[770, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[771, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[772, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[773, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[774, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[775, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[776, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[777, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[778, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[779, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[780, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[781, "polars.Series.dtype"]], "entropy() (polars.series method)": [[782, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[783, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[784, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[785, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[786, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[787, "polars.Series.exp"]], "explode() (polars.series method)": [[788, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[789, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[790, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[791, "polars.Series.fill_null"]], "filter() (polars.series method)": [[792, "polars.Series.filter"]], "flags (polars.series attribute)": [[793, "polars.Series.flags"]], "floor() (polars.series method)": [[794, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[795, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[796, "polars.Series.has_validity"]], "hash() (polars.series method)": [[797, "polars.Series.hash"]], "head() (polars.series method)": [[798, "polars.Series.head"]], "hist() (polars.series method)": [[799, "polars.Series.hist"]], "inner_dtype (polars.series attribute)": [[800, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[801, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[802, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[803, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[804, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[805, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[806, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[807, "polars.Series.is_first"]], "is_float() (polars.series method)": [[808, "polars.Series.is_float"]], "is_in() (polars.series method)": [[809, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[810, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[811, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[812, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[813, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[814, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[815, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[816, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[817, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[818, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[819, "polars.Series.is_utf8"]], "item() (polars.series method)": [[820, "polars.Series.item"]], "kurtosis() (polars.series method)": [[821, "polars.Series.kurtosis"]], "len() (polars.series method)": [[822, "polars.Series.len"]], "limit() (polars.series method)": [[823, "polars.Series.limit"]], "log() (polars.series method)": [[824, "polars.Series.log"]], "log10() (polars.series method)": [[825, "polars.Series.log10"]], "lower_bound() (polars.series method)": [[826, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[827, "polars.Series.map_dict"]], "max() (polars.series method)": [[828, "polars.Series.max"]], "mean() (polars.series method)": [[829, "polars.Series.mean"]], "median() (polars.series method)": [[830, "polars.Series.median"]], "min() (polars.series method)": [[831, "polars.Series.min"]], "mode() (polars.series method)": [[832, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[833, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[834, "polars.Series.n_unique"]], "name (polars.series attribute)": [[835, "polars.Series.name"]], "nan_max() (polars.series method)": [[836, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[837, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[838, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[839, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[840, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[841, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[842, "polars.Series.peak_min"]], "product() (polars.series method)": [[843, "polars.Series.product"]], "qcut() (polars.series method)": [[844, "polars.Series.qcut"]], "quantile() (polars.series method)": [[845, "polars.Series.quantile"]], "rank() (polars.series method)": [[846, "polars.Series.rank"]], "rechunk() (polars.series method)": [[847, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[848, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[849, "polars.Series.rename"]], "reshape() (polars.series method)": [[850, "polars.Series.reshape"]], "reverse() (polars.series method)": [[851, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[852, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[853, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[854, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[855, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[856, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[857, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[858, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[859, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[860, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[861, "polars.Series.rolling_var"]], "round() (polars.series method)": [[862, "polars.Series.round"]], "sample() (polars.series method)": [[863, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[864, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[865, "polars.Series.series_equal"]], "set() (polars.series method)": [[866, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[867, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[868, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[869, "polars.Series.shape"]], "shift() (polars.series method)": [[870, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[871, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[872, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[873, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[874, "polars.Series.shuffle"]], "sign() (polars.series method)": [[875, "polars.Series.sign"]], "sin() (polars.series method)": [[876, "polars.Series.sin"]], "sinh() (polars.series method)": [[877, "polars.Series.sinh"]], "skew() (polars.series method)": [[878, "polars.Series.skew"]], "slice() (polars.series method)": [[879, "polars.Series.slice"]], "sort() (polars.series method)": [[880, "polars.Series.sort"]], "sqrt() (polars.series method)": [[881, "polars.Series.sqrt"]], "std() (polars.series method)": [[882, "polars.Series.std"]], "str (polars.series attribute)": [[883, "polars.Series.str"]], "concat() (polars.series.str method)": [[884, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[885, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[886, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[887, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[888, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[889, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[890, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[891, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[892, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[893, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[894, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[895, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[896, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[897, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[898, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[899, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[900, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[901, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[902, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[903, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[904, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[905, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[906, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[907, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[908, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[909, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[910, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[911, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[912, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[913, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[914, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[915, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[916, "polars.Series.struct.rename_fields"]], "unnest() (polars.series.struct method)": [[917, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[918, "polars.Series.sum"]], "tail() (polars.series method)": [[919, "polars.Series.tail"]], "take() (polars.series method)": [[920, "polars.Series.take"]], "take_every() (polars.series method)": [[921, "polars.Series.take_every"]], "tan() (polars.series method)": [[922, "polars.Series.tan"]], "tanh() (polars.series method)": [[923, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[924, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[925, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[926, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[927, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[928, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[929, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[930, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[931, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[932, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[933, "polars.Series.top_k"]], "unique() (polars.series method)": [[934, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[935, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[936, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[937, "polars.Series.value_counts"]], "var() (polars.series method)": [[938, "polars.Series.var"]], "view() (polars.series method)": [[939, "polars.Series.view"]], "zip_with() (polars.series method)": [[940, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[955, "polars.SQLContext"]]}})