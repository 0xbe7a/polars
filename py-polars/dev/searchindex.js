Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_dummies", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_dummies", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.any", "polars.apply", "polars.approx_unique", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 87, 97, 115, 127, 130, 131, 232, 250, 264, 585, 666, 691, 975], "refer": [0, 29, 99, 100, 103, 136, 250, 359, 416, 445, 504, 505, 506, 508, 585, 794, 870, 934, 935, 936, 938, 975], "input": [0, 60, 89, 99, 100, 103, 131, 132, 143, 154, 182, 196, 203, 217, 227, 230, 250, 257, 264, 372, 391, 410, 425, 438, 475, 530, 531, 532, 533, 536, 538, 539, 540, 541, 547, 552, 553, 561, 562, 565, 574, 575, 585, 596, 599, 609, 616, 641, 649, 654, 660, 664, 682, 691, 824, 848, 849, 851, 975], "output": [0, 25, 27, 29, 30, 31, 32, 70, 103, 131, 155, 156, 167, 177, 184, 193, 196, 223, 227, 250, 259, 264, 414, 415, 424, 527, 533, 542, 561, 572, 585, 596, 617, 618, 627, 631, 632, 641, 660, 663, 666, 682, 691, 964, 975], "seri": [0, 1, 22, 61, 62, 63, 64, 65, 68, 69, 70, 86, 88, 91, 93, 97, 118, 122, 127, 131, 139, 147, 149, 151, 152, 157, 160, 161, 163, 165, 173, 174, 178, 189, 190, 205, 209, 212, 215, 216, 231, 250, 263, 264, 266, 267, 268, 269, 270, 271, 274, 275, 277, 278, 279, 284, 287, 288, 295, 296, 299, 300, 301, 304, 311, 312, 316, 317, 329, 331, 335, 338, 342, 344, 346, 351, 355, 356, 358, 362, 365, 374, 375, 381, 389, 391, 393, 394, 395, 396, 397, 399, 400, 401, 412, 414, 441, 445, 446, 447, 448, 449, 451, 463, 464, 467, 470, 471, 478, 493, 498, 504, 505, 506, 508, 511, 517, 518, 519, 520, 526, 531, 532, 533, 534, 535, 537, 543, 545, 546, 547, 553, 554, 556, 558, 560, 561, 562, 563, 564, 565, 566, 569, 570, 571, 573, 574, 575, 576, 577, 585, 596, 613, 665, 682, 969, 971, 974, 976, 979, 980, 981, 983], "datafram": [0, 1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 49, 51, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 112, 113, 114, 117, 119, 120, 248, 249, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 297, 298, 301, 302, 303, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 357, 358, 359, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 554, 555, 556, 558, 561, 562, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 585, 596, 603, 605, 609, 610, 614, 617, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 635, 636, 639, 646, 647, 648, 649, 650, 651, 655, 656, 657, 658, 660, 661, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 690, 691, 710, 728, 738, 753, 754, 790, 820, 868, 915, 918, 930, 931, 944, 953, 954, 964, 975, 983], "lazyfram": [0, 1, 48, 50, 60, 61, 62, 63, 64, 67, 68, 110, 111, 112, 113, 114, 115, 117, 122, 171, 183, 250, 301, 378, 585, 596, 681, 982, 983], "express": [0, 65, 67, 70, 119, 122, 124, 131, 132, 143, 145, 147, 154, 180, 184, 192, 196, 203, 217, 227, 230, 232, 250, 257, 259, 260, 261, 263, 264, 275, 281, 283, 301, 313, 314, 315, 318, 324, 326, 330, 348, 349, 352, 368, 372, 375, 378, 382, 384, 385, 389, 391, 395, 398, 403, 406, 407, 412, 413, 414, 415, 416, 420, 421, 422, 423, 424, 425, 429, 431, 435, 437, 438, 440, 441, 442, 443, 448, 462, 463, 464, 466, 468, 473, 475, 479, 487, 488, 513, 514, 517, 523, 524, 526, 529, 530, 531, 532, 535, 536, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 560, 561, 562, 565, 567, 569, 570, 571, 572, 574, 575, 578, 584, 596, 599, 603, 608, 609, 610, 613, 616, 635, 641, 644, 645, 646, 647, 649, 654, 660, 661, 664, 666, 682, 691, 708, 710, 742, 743, 744, 752, 761, 783, 784, 787, 810, 824, 888, 895, 909, 917, 918, 975], "extend": [0, 89, 250, 375, 585, 596, 690, 810, 975], "function": [0, 29, 61, 62, 63, 64, 69, 87, 93, 99, 100, 103, 110, 120, 131, 136, 142, 149, 176, 183, 184, 214, 218, 221, 222, 232, 250, 260, 264, 301, 324, 356, 369, 370, 371, 414, 415, 438, 440, 451, 452, 453, 454, 455, 456, 458, 459, 460, 472, 521, 531, 532, 533, 545, 546, 547, 553, 554, 556, 561, 562, 565, 569, 575, 585, 596, 627, 631, 634, 657, 666, 682, 691, 728, 752, 791, 804, 805, 806, 807, 820, 868, 876, 890, 891, 897, 902, 958, 975, 983], "data": [0, 1, 5, 15, 18, 28, 29, 30, 34, 51, 60, 61, 63, 68, 71, 76, 77, 81, 83, 86, 87, 88, 89, 90, 91, 92, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 117, 118, 120, 121, 122, 124, 130, 131, 133, 134, 144, 153, 154, 155, 167, 168, 169, 171, 182, 183, 187, 192, 193, 201, 208, 213, 214, 227, 229, 248, 250, 261, 264, 302, 310, 329, 357, 365, 368, 384, 385, 390, 397, 399, 406, 413, 435, 437, 445, 461, 462, 472, 504, 505, 506, 508, 521, 523, 524, 530, 539, 560, 572, 585, 596, 601, 602, 610, 616, 617, 634, 646, 647, 660, 682, 690, 691, 729, 736, 741, 745, 758, 760, 800, 820, 870, 886, 887, 897, 902, 934, 935, 936, 938, 956, 957, 958, 959, 961, 966, 974, 975], "type": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 67, 70, 76, 86, 88, 89, 90, 91, 92, 93, 97, 99, 100, 102, 103, 110, 111, 116, 117, 118, 121, 122, 127, 131, 149, 153, 155, 156, 157, 168, 208, 213, 214, 216, 219, 250, 264, 288, 301, 310, 311, 313, 314, 315, 331, 335, 338, 342, 344, 346, 351, 355, 358, 372, 386, 393, 395, 396, 416, 448, 499, 500, 501, 504, 521, 533, 539, 548, 549, 550, 552, 553, 560, 585, 596, 603, 608, 610, 617, 618, 635, 645, 646, 647, 655, 682, 715, 728, 736, 738, 742, 743, 744, 762, 766, 769, 776, 778, 781, 786, 790, 793, 818, 897, 929, 930, 931, 934, 956, 957, 959, 967, 975], "config": [0, 60, 196, 227, 250, 550, 596, 641, 660, 682], "except": [0, 158, 170, 172, 206, 250, 552, 596, 623, 682, 819, 846, 946, 957, 966, 975], "test": [0, 103, 596, 619, 626, 682], "util": [0, 93, 556, 596, 610, 682], "sql": [0, 28, 48, 101, 169, 250, 596], "These": [1, 29, 128, 250, 362, 584, 797], "allow": [1, 29, 51, 76, 87, 110, 112, 113, 114, 115, 122, 124, 130, 167, 170, 171, 192, 193, 194, 214, 219, 229, 250, 352, 447, 462, 504, 505, 506, 585, 622, 623, 627, 631, 646, 647, 655, 661, 682, 787, 872, 887, 889, 934, 935, 936, 958, 975, 983], "you": [1, 12, 29, 33, 60, 86, 88, 89, 90, 92, 97, 99, 100, 103, 104, 108, 110, 117, 127, 128, 131, 140, 144, 155, 156, 167, 170, 180, 192, 193, 210, 213, 218, 232, 250, 264, 283, 313, 314, 315, 348, 349, 355, 378, 391, 414, 416, 447, 452, 453, 454, 455, 456, 458, 459, 460, 489, 492, 504, 506, 535, 545, 554, 585, 603, 606, 617, 618, 619, 623, 626, 645, 647, 666, 682, 690, 691, 710, 742, 743, 744, 783, 784, 790, 824, 872, 919, 922, 934, 936, 957, 966, 975, 983], "regist": [1, 61, 62, 63, 64, 123, 125], "custom": [1, 29, 61, 62, 63, 64, 123, 124, 125, 131, 232, 250, 264, 301, 414, 451, 533, 561, 585, 627, 666, 682, 691, 728, 876, 975, 983], "dedic": [1, 87, 167, 193, 250], "namespac": [1, 249, 584, 596, 681], "underli": [1, 72, 79, 86, 88, 89, 90, 92, 108, 119, 122, 124, 144, 167, 168, 193, 208, 250, 305, 329, 330, 334, 337, 339, 340, 341, 343, 345, 347, 350, 353, 354, 355, 357, 363, 364, 365, 366, 447, 461, 479, 481, 585, 682, 690, 731, 760, 761, 765, 768, 770, 771, 775, 777, 780, 782, 785, 788, 789, 790, 792, 798, 799, 800, 801, 872, 886, 897, 909, 911, 952, 957, 975], "polar": [1, 250, 584, 585, 590, 596, 682, 975, 982], "class": [1, 2, 3, 4, 14, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 91, 119, 120, 213, 214, 250, 585, 590, 596, 682, 956, 957, 975, 982], "without": [1, 5, 69, 93, 102, 105, 109, 111, 115, 221, 222, 250, 264, 324, 356, 452, 453, 454, 455, 456, 458, 459, 460, 571, 585, 657, 682, 752, 758, 791, 820, 868, 975], "requir": [1, 29, 33, 91, 117, 118, 136, 192, 214, 250, 302, 369, 370, 371, 467, 504, 505, 506, 524, 585, 647, 682, 729, 805, 806, 807, 896, 934, 935, 936, 957, 958, 961, 975], "subclass": [1, 250], "mixin": 1, "expr": [1, 60, 61, 62, 63, 64, 65, 68, 70, 143, 145, 147, 169, 170, 180, 184, 192, 196, 227, 250, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 585, 586, 587, 590, 591, 592, 593, 609, 611, 613, 622, 623, 636, 641, 644, 660, 682, 708, 710, 752, 761, 811, 895, 909, 913, 932, 947, 975], "ar": [1, 5, 10, 14, 17, 25, 29, 33, 51, 70, 71, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 115, 117, 118, 120, 122, 128, 130, 131, 132, 136, 140, 142, 145, 149, 154, 155, 156, 167, 170, 171, 176, 177, 182, 192, 193, 196, 197, 203, 209, 214, 217, 222, 223, 227, 230, 250, 260, 301, 320, 322, 323, 327, 328, 356, 362, 367, 369, 370, 371, 391, 393, 395, 396, 397, 399, 400, 401, 404, 416, 438, 445, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 469, 472, 474, 475, 489, 492, 493, 515, 531, 532, 535, 536, 538, 540, 541, 542, 547, 562, 565, 572, 574, 575, 578, 579, 581, 584, 585, 586, 587, 590, 591, 592, 593, 596, 599, 606, 611, 616, 617, 618, 619, 623, 626, 627, 631, 632, 635, 638, 641, 642, 646, 647, 649, 654, 657, 660, 661, 664, 682, 688, 690, 728, 750, 751, 791, 797, 803, 804, 805, 806, 807, 817, 824, 828, 831, 832, 834, 835, 836, 837, 844, 870, 874, 876, 882, 899, 902, 919, 922, 923, 945, 957, 958, 966, 969, 971, 975, 976, 979, 980, 981, 983], "all": [1, 7, 14, 17, 22, 25, 29, 34, 67, 68, 70, 86, 89, 91, 92, 94, 99, 100, 102, 103, 104, 108, 110, 112, 113, 119, 120, 124, 137, 140, 146, 158, 163, 165, 167, 168, 171, 172, 176, 179, 180, 187, 192, 193, 202, 206, 211, 219, 221, 223, 250, 261, 262, 263, 283, 288, 298, 301, 303, 318, 324, 328, 372, 383, 386, 388, 390, 393, 396, 400, 401, 403, 407, 414, 415, 430, 436, 442, 445, 450, 467, 473, 475, 480, 486, 488, 491, 494, 495, 497, 503, 514, 527, 539, 547, 552, 554, 569, 574, 575, 578, 585, 590, 596, 603, 606, 608, 610, 612, 627, 631, 635, 645, 648, 655, 661, 682, 710, 715, 725, 728, 752, 754, 758, 819, 826, 841, 846, 870, 903, 910, 916, 918, 921, 924, 925, 927, 933, 946, 975, 983], "support": [1, 29, 33, 68, 86, 87, 88, 89, 90, 91, 92, 93, 101, 102, 103, 111, 119, 124, 128, 130, 167, 168, 193, 202, 203, 210, 214, 250, 296, 438, 473, 475, 498, 539, 585, 590, 648, 649, 682, 723, 903, 928, 958, 975], "target": [1, 29, 66, 250, 362, 485, 504, 505, 506, 915, 934, 935, 936], "thi": [1, 5, 7, 12, 25, 27, 29, 31, 33, 37, 50, 51, 60, 67, 68, 69, 71, 86, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 126, 127, 128, 130, 131, 136, 140, 141, 142, 144, 149, 154, 155, 156, 157, 161, 163, 165, 166, 167, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 185, 186, 187, 192, 193, 194, 196, 200, 202, 204, 205, 208, 210, 213, 214, 218, 219, 221, 222, 223, 224, 225, 227, 228, 232, 249, 250, 260, 263, 264, 265, 274, 283, 284, 288, 297, 301, 302, 309, 311, 318, 324, 329, 340, 348, 349, 352, 355, 356, 365, 374, 389, 390, 391, 395, 407, 411, 412, 414, 420, 421, 422, 423, 424, 425, 433, 434, 438, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 462, 464, 466, 467, 468, 473, 474, 475, 490, 491, 496, 497, 503, 504, 506, 510, 522, 524, 525, 526, 527, 531, 532, 534, 535, 540, 543, 545, 547, 553, 554, 556, 562, 565, 571, 575, 585, 596, 597, 600, 603, 606, 608, 610, 616, 617, 618, 620, 623, 627, 631, 632, 635, 638, 641, 644, 645, 646, 647, 648, 655, 657, 660, 661, 662, 663, 666, 681, 682, 690, 691, 700, 710, 711, 715, 724, 729, 735, 738, 752, 758, 760, 761, 771, 783, 784, 787, 790, 791, 800, 804, 809, 816, 817, 820, 825, 830, 831, 833, 838, 840, 842, 843, 845, 850, 852, 853, 854, 855, 857, 858, 860, 861, 863, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 880, 883, 884, 885, 887, 890, 891, 892, 895, 896, 897, 898, 903, 904, 906, 920, 921, 926, 927, 933, 934, 936, 940, 941, 944, 945, 952, 954, 956, 957, 958, 960, 961, 963, 965, 966, 975, 983], "featur": [1, 33, 37, 51, 66, 250], "i": [1, 5, 12, 14, 27, 29, 30, 31, 32, 37, 51, 60, 65, 66, 67, 68, 69, 70, 73, 75, 76, 78, 82, 84, 86, 87, 88, 89, 90, 91, 92, 96, 99, 100, 101, 102, 104, 108, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 124, 126, 130, 131, 140, 142, 150, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 170, 171, 172, 174, 176, 177, 180, 182, 183, 184, 192, 193, 194, 202, 203, 204, 205, 206, 208, 214, 218, 219, 221, 222, 223, 224, 232, 249, 250, 257, 260, 262, 263, 264, 265, 275, 283, 286, 296, 300, 301, 324, 330, 339, 352, 356, 362, 369, 370, 371, 374, 386, 389, 391, 404, 411, 414, 416, 420, 423, 425, 438, 445, 447, 449, 452, 453, 454, 455, 456, 458, 459, 460, 462, 463, 464, 468, 469, 472, 473, 474, 475, 477, 479, 480, 485, 486, 488, 490, 491, 493, 496, 497, 498, 501, 503, 504, 505, 506, 508, 510, 527, 528, 531, 532, 534, 535, 539, 540, 542, 543, 545, 546, 547, 554, 560, 562, 565, 567, 571, 572, 573, 575, 577, 578, 585, 603, 606, 608, 610, 616, 617, 618, 621, 623, 625, 627, 631, 632, 635, 645, 646, 647, 648, 649, 650, 655, 657, 658, 663, 666, 682, 689, 690, 691, 710, 713, 723, 727, 752, 761, 770, 787, 791, 797, 804, 805, 806, 807, 809, 817, 818, 819, 820, 823, 825, 827, 833, 838, 839, 840, 842, 843, 844, 846, 868, 870, 872, 874, 887, 888, 889, 890, 891, 892, 898, 899, 902, 903, 906, 909, 910, 915, 916, 918, 920, 921, 923, 926, 927, 928, 931, 933, 934, 935, 936, 938, 940, 946, 952, 957, 958, 964, 965, 966, 975, 983], "primarili": 1, "intend": 1, "us": [1, 9, 11, 12, 17, 22, 23, 27, 28, 29, 33, 51, 60, 69, 70, 87, 89, 90, 92, 94, 95, 97, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 123, 124, 126, 127, 131, 138, 140, 145, 146, 149, 154, 155, 156, 163, 165, 167, 168, 170, 174, 176, 179, 180, 183, 184, 192, 194, 196, 203, 204, 205, 211, 212, 214, 218, 219, 221, 222, 223, 224, 227, 230, 232, 250, 258, 264, 265, 275, 283, 301, 305, 306, 311, 324, 327, 328, 355, 359, 365, 367, 369, 370, 371, 377, 378, 390, 391, 404, 414, 416, 419, 438, 445, 447, 449, 452, 453, 454, 455, 456, 458, 459, 460, 462, 464, 467, 468, 472, 474, 475, 477, 481, 482, 483, 489, 490, 496, 498, 500, 502, 504, 505, 506, 508, 528, 531, 532, 533, 534, 535, 539, 541, 542, 545, 547, 554, 556, 560, 562, 565, 567, 570, 571, 572, 573, 574, 575, 577, 584, 585, 596, 603, 605, 606, 611, 612, 616, 617, 618, 619, 623, 625, 626, 631, 641, 647, 649, 650, 655, 657, 658, 660, 664, 666, 682, 691, 710, 728, 731, 732, 738, 752, 790, 794, 800, 803, 805, 806, 807, 811, 812, 817, 820, 824, 844, 851, 870, 872, 874, 887, 890, 891, 892, 896, 898, 902, 906, 911, 912, 919, 920, 926, 928, 930, 934, 935, 936, 938, 947, 953, 955, 956, 957, 958, 965, 966, 975, 983], "librari": [1, 72, 79, 414, 585, 983], "author": 1, "domain": 1, "specif": [1, 25, 29, 86, 88, 90, 92, 99, 101, 102, 111, 121, 122, 167, 250, 359, 451, 504, 505, 506, 508, 585, 682, 794, 876, 934, 935, 936, 938, 975, 983], "capabl": [1, 29, 250], "which": [1, 17, 26, 27, 29, 30, 31, 32, 33, 60, 61, 62, 63, 64, 89, 99, 100, 101, 102, 103, 110, 111, 117, 123, 125, 132, 140, 144, 155, 156, 217, 219, 250, 260, 301, 375, 391, 393, 396, 397, 399, 400, 401, 425, 452, 453, 454, 455, 456, 458, 459, 460, 493, 578, 585, 599, 606, 608, 617, 618, 646, 647, 654, 655, 663, 682, 690, 810, 824, 828, 832, 834, 835, 836, 837, 890, 923, 975, 983], "mai": [1, 33, 37, 68, 69, 86, 88, 89, 90, 92, 99, 102, 104, 111, 112, 115, 131, 142, 144, 170, 199, 200, 214, 221, 222, 250, 264, 295, 300, 301, 324, 329, 340, 356, 424, 452, 453, 454, 455, 456, 458, 459, 460, 465, 466, 504, 506, 545, 546, 554, 569, 585, 623, 627, 643, 644, 647, 657, 662, 666, 682, 690, 691, 722, 727, 752, 760, 771, 791, 804, 820, 868, 894, 895, 934, 936, 975, 983], "exist": [1, 28, 29, 102, 111, 122, 227, 250, 330, 362, 660, 682, 761], "belong": [1, 155, 250, 617, 682], "core": [1, 214, 250, 983], "cannot": [1, 87, 99, 100, 103, 104, 117, 126, 131, 194, 232, 250, 305, 416, 462, 481, 500, 512, 585, 645, 666, 682, 691, 731, 887, 911, 930, 975], "overrid": [1, 29, 86, 88, 89, 90, 91, 92, 99, 119, 120, 124, 126, 250, 416, 585, 682, 851, 975], "str": [1, 6, 8, 13, 14, 17, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 48, 49, 50, 51, 60, 61, 62, 63, 64, 66, 69, 70, 71, 86, 88, 89, 90, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 122, 123, 124, 125, 132, 135, 137, 138, 139, 140, 141, 142, 143, 147, 148, 149, 151, 153, 154, 155, 156, 158, 160, 163, 165, 166, 167, 169, 170, 173, 174, 175, 176, 177, 178, 180, 182, 184, 186, 188, 189, 190, 191, 192, 193, 194, 197, 199, 200, 202, 203, 204, 205, 206, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 257, 258, 259, 264, 279, 280, 281, 286, 287, 288, 296, 299, 301, 326, 331, 352, 355, 356, 359, 362, 372, 376, 378, 380, 389, 391, 398, 415, 416, 424, 426, 438, 440, 442, 448, 450, 452, 453, 454, 455, 456, 458, 459, 460, 466, 467, 474, 475, 511, 512, 514, 517, 529, 530, 531, 533, 534, 537, 539, 541, 542, 543, 544, 545, 546, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 566, 567, 568, 569, 570, 572, 573, 574, 576, 577, 585, 591, 599, 603, 604, 605, 606, 608, 609, 610, 613, 615, 616, 617, 618, 620, 622, 623, 631, 632, 635, 637, 638, 639, 642, 644, 645, 646, 647, 648, 649, 654, 655, 656, 657, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 687, 707, 708, 715, 728, 736, 753, 754, 762, 787, 790, 791, 794, 797, 812, 851, 860, 861, 868, 873, 890, 891, 941, 943, 953, 954, 955, 975, 979, 983], "dt": [1, 60, 70, 156, 250, 550, 593, 618, 682, 981], "attempt": [1, 213, 250], "do": [1, 29, 60, 67, 110, 144, 170, 208, 218, 221, 250, 283, 324, 491, 497, 503, 585, 603, 608, 623, 627, 635, 645, 646, 647, 682, 690, 710, 752, 921, 927, 933, 957, 966, 975], "so": [1, 51, 101, 110, 126, 153, 155, 156, 184, 250, 275, 286, 391, 491, 497, 503, 585, 617, 618, 682, 713, 921, 927, 933], "rais": [1, 13, 17, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 117, 118, 192, 250, 300, 305, 355, 424, 479, 481, 493, 504, 505, 506, 508, 560, 727, 731, 790, 909, 911, 923, 934, 935, 936, 938, 957, 966, 975], "an": [1, 5, 25, 28, 29, 37, 61, 63, 64, 65, 67, 70, 72, 76, 77, 79, 86, 99, 100, 101, 102, 103, 105, 108, 110, 112, 120, 122, 124, 131, 133, 134, 142, 145, 147, 149, 155, 156, 167, 168, 170, 180, 184, 190, 192, 208, 213, 221, 227, 232, 250, 259, 260, 264, 281, 283, 286, 300, 301, 305, 310, 313, 314, 315, 319, 320, 321, 322, 323, 324, 330, 355, 365, 375, 378, 403, 414, 415, 425, 443, 451, 452, 453, 454, 455, 456, 458, 459, 460, 479, 481, 486, 504, 505, 506, 508, 517, 523, 531, 532, 535, 539, 547, 551, 556, 560, 562, 565, 569, 570, 571, 574, 575, 578, 585, 596, 601, 602, 603, 608, 610, 613, 617, 618, 623, 627, 635, 645, 660, 661, 666, 682, 691, 708, 710, 713, 727, 731, 736, 741, 742, 743, 744, 745, 748, 749, 750, 751, 752, 761, 790, 800, 804, 810, 833, 876, 877, 878, 879, 880, 881, 883, 884, 885, 890, 891, 909, 911, 916, 934, 935, 936, 938, 957, 966, 975], "attributeerror": 1, "howev": [1, 89, 142, 250, 804, 975], "can": [1, 12, 29, 60, 70, 77, 89, 99, 100, 103, 104, 108, 110, 112, 114, 115, 120, 121, 122, 124, 126, 128, 131, 132, 141, 149, 155, 156, 163, 165, 180, 184, 196, 203, 217, 218, 221, 227, 232, 250, 264, 283, 301, 320, 323, 324, 348, 349, 352, 355, 362, 375, 390, 391, 424, 430, 447, 452, 453, 454, 455, 456, 458, 459, 460, 464, 467, 469, 472, 475, 488, 491, 497, 503, 504, 527, 535, 536, 539, 554, 556, 578, 584, 585, 599, 603, 608, 617, 618, 641, 649, 654, 660, 662, 666, 682, 691, 710, 728, 752, 783, 784, 787, 790, 797, 810, 824, 856, 872, 890, 891, 892, 896, 899, 902, 918, 921, 927, 933, 934, 975], "other": [1, 17, 29, 70, 99, 100, 103, 110, 117, 118, 140, 144, 150, 169, 170, 176, 177, 192, 196, 222, 227, 248, 250, 257, 261, 263, 275, 279, 313, 314, 315, 326, 368, 382, 384, 385, 391, 395, 406, 413, 416, 420, 423, 429, 431, 435, 437, 475, 513, 521, 523, 530, 531, 532, 538, 540, 541, 547, 562, 565, 574, 575, 585, 596, 606, 622, 623, 631, 632, 641, 657, 660, 661, 682, 690, 706, 742, 743, 744, 756, 831, 889, 959, 967, 974, 975], "onli": [1, 17, 25, 29, 51, 60, 66, 68, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 122, 124, 128, 131, 140, 155, 156, 167, 170, 174, 193, 205, 210, 212, 223, 250, 258, 264, 275, 312, 313, 314, 315, 352, 372, 381, 447, 525, 570, 585, 603, 606, 617, 618, 619, 623, 626, 682, 739, 742, 743, 744, 787, 815, 833, 872, 952, 955, 975, 983], "gener": [1, 94, 101, 119, 120, 121, 122, 124, 136, 184, 194, 211, 218, 250, 301, 462, 468, 585, 682, 728, 887, 898, 953, 975, 983], "userwarn": 1, "pl": [1, 7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 124, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 585, 597, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 687, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 709, 710, 711, 714, 715, 717, 722, 723, 724, 726, 728, 735, 736, 738, 739, 740, 741, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 807, 810, 811, 812, 813, 815, 818, 819, 820, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 850, 851, 852, 853, 854, 855, 856, 857, 858, 864, 865, 866, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 894, 898, 899, 900, 901, 903, 904, 905, 906, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 938, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 975, 983], "register_expr_namespac": [1, 61, 63, 64], "greet": 1, "def": [1, 61, 62, 63, 64, 120, 121, 122, 124, 183, 218, 250, 257, 440, 530, 561, 585, 634, 682, 983], "__init__": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 119], "self": [1, 61, 62, 63, 64, 67, 131, 132, 133, 134, 136, 137, 138, 140, 143, 144, 145, 146, 147, 154, 155, 156, 158, 160, 161, 162, 169, 170, 172, 173, 174, 175, 176, 177, 178, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 211, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 250, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 303, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 585, 599, 600, 601, 602, 603, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 682, 690, 691, 736, 745, 813, 821, 850, 851, 862, 865, 866, 871, 890, 891, 892, 904, 963, 967, 975], "_expr": [1, 62], "hello": [1, 491, 497, 503, 531, 715, 921, 927, 933], "return": [1, 25, 27, 29, 30, 31, 32, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 78, 80, 85, 86, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 121, 127, 131, 132, 133, 136, 139, 140, 141, 142, 143, 145, 146, 149, 153, 154, 155, 156, 158, 160, 166, 167, 168, 169, 171, 172, 179, 180, 182, 183, 184, 192, 193, 194, 206, 207, 214, 217, 218, 219, 223, 227, 229, 232, 235, 239, 244, 250, 260, 262, 266, 267, 268, 269, 270, 271, 274, 275, 277, 278, 280, 284, 286, 287, 288, 299, 300, 304, 306, 309, 316, 317, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 361, 362, 363, 364, 366, 374, 387, 391, 393, 394, 395, 396, 397, 399, 400, 401, 408, 412, 416, 425, 430, 440, 448, 449, 462, 463, 469, 470, 471, 478, 480, 482, 484, 485, 486, 488, 489, 490, 492, 493, 496, 498, 499, 500, 501, 510, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 530, 531, 532, 533, 535, 536, 539, 548, 549, 550, 556, 558, 560, 561, 570, 571, 574, 576, 578, 585, 599, 601, 603, 606, 607, 608, 610, 617, 618, 619, 625, 626, 627, 634, 635, 645, 646, 647, 652, 653, 654, 655, 660, 663, 669, 673, 678, 682, 687, 688, 689, 691, 698, 699, 701, 702, 704, 705, 707, 711, 713, 714, 715, 726, 727, 730, 732, 735, 741, 753, 754, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 804, 809, 817, 819, 820, 826, 828, 829, 831, 832, 834, 835, 836, 837, 841, 843, 846, 850, 851, 856, 868, 874, 875, 887, 888, 889, 891, 899, 908, 909, 910, 912, 914, 915, 916, 918, 919, 920, 922, 923, 926, 928, 929, 930, 931, 940, 946, 948, 960, 962, 963, 967, 975, 983], "lit": [1, 97, 127, 391, 403, 545, 554, 578, 585, 812, 975], "alia": [1, 60, 62, 64, 155, 156, 172, 220, 227, 250, 257, 261, 264, 281, 283, 309, 313, 314, 315, 319, 320, 321, 322, 323, 325, 329, 330, 331, 334, 335, 336, 338, 340, 341, 342, 344, 346, 351, 352, 353, 355, 356, 357, 358, 359, 361, 362, 364, 365, 368, 378, 380, 382, 384, 385, 389, 391, 394, 395, 403, 406, 407, 408, 413, 416, 427, 429, 431, 435, 437, 439, 441, 447, 463, 479, 480, 483, 486, 489, 492, 498, 500, 501, 502, 511, 512, 513, 521, 522, 523, 529, 530, 531, 532, 533, 537, 538, 540, 541, 545, 546, 547, 550, 551, 554, 555, 561, 562, 565, 569, 570, 574, 575, 578, 585, 617, 618, 620, 626, 656, 660, 682, 710, 760, 762, 767, 787, 790, 796, 800, 846, 930, 931, 975], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 491, 497, 503, 715, 921, 927, 933], "select": [1, 28, 60, 61, 62, 63, 65, 98, 99, 100, 101, 102, 104, 108, 110, 115, 121, 131, 166, 170, 180, 183, 192, 202, 215, 220, 223, 250, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 297, 298, 301, 302, 303, 309, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 375, 379, 381, 383, 386, 388, 389, 390, 392, 393, 395, 396, 398, 402, 403, 404, 405, 407, 409, 410, 411, 412, 414, 415, 417, 418, 419, 428, 430, 432, 433, 434, 436, 437, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 485, 486, 487, 488, 490, 491, 493, 496, 497, 499, 500, 501, 503, 504, 507, 509, 511, 512, 514, 515, 518, 519, 520, 522, 524, 525, 526, 527, 528, 531, 532, 533, 534, 535, 536, 537, 539, 540, 542, 543, 544, 545, 546, 547, 550, 552, 553, 554, 555, 556, 558, 562, 563, 564, 565, 566, 567, 569, 572, 573, 574, 575, 576, 577, 585, 604, 620, 623, 634, 648, 656, 661, 663, 682, 710, 728, 790, 890, 891, 903, 915, 918, 934, 947, 975], "shape": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 83, 86, 88, 89, 90, 91, 92, 93, 94, 97, 110, 115, 122, 124, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 151, 152, 154, 155, 156, 157, 158, 160, 161, 162, 163, 165, 166, 169, 170, 173, 174, 175, 176, 178, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 194, 196, 199, 200, 202, 203, 204, 205, 206, 207, 209, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 554, 555, 556, 558, 561, 562, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 585, 599, 601, 603, 605, 606, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 641, 643, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 690, 691, 692, 693, 694, 695, 696, 697, 700, 701, 702, 709, 710, 711, 714, 715, 717, 722, 723, 724, 726, 728, 735, 736, 738, 739, 741, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 806, 807, 810, 811, 812, 813, 815, 818, 819, 820, 823, 824, 826, 828, 831, 832, 834, 835, 836, 837, 841, 843, 850, 851, 856, 864, 865, 866, 868, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 890, 891, 894, 898, 899, 900, 901, 903, 904, 905, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 938, 944, 946, 947, 948, 949, 950, 953, 954, 955, 959, 960, 961, 962, 963, 964, 967, 975], "3": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 101, 103, 110, 115, 116, 117, 118, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 257, 258, 259, 260, 264, 274, 275, 276, 280, 281, 282, 283, 284, 285, 286, 287, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 309, 310, 311, 312, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 339, 345, 347, 353, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 415, 416, 429, 430, 431, 435, 436, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 474, 475, 476, 479, 482, 483, 485, 487, 489, 492, 498, 499, 500, 501, 502, 505, 508, 511, 512, 513, 514, 516, 517, 518, 522, 525, 526, 527, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 551, 552, 553, 554, 555, 558, 559, 560, 561, 562, 563, 564, 565, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 585, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 687, 690, 691, 692, 694, 695, 696, 698, 699, 700, 701, 702, 709, 710, 711, 714, 717, 722, 723, 724, 726, 728, 735, 736, 738, 739, 740, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 761, 762, 765, 766, 767, 768, 770, 772, 773, 774, 776, 778, 779, 780, 782, 786, 788, 790, 791, 792, 796, 797, 799, 800, 804, 806, 807, 810, 811, 812, 813, 815, 818, 819, 820, 823, 824, 826, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 844, 845, 850, 851, 852, 853, 854, 855, 856, 857, 858, 864, 865, 866, 868, 869, 870, 873, 874, 875, 876, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 894, 898, 900, 901, 902, 903, 904, 906, 912, 913, 915, 917, 919, 922, 928, 932, 935, 938, 944, 945, 946, 947, 948, 949, 950, 952, 953, 956, 957, 958, 960, 961, 962, 963, 964, 965, 967, 975, 983], "1": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 103, 104, 110, 111, 115, 116, 117, 118, 119, 122, 124, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 483, 484, 485, 486, 487, 488, 490, 491, 493, 494, 495, 496, 497, 499, 500, 501, 502, 503, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 585, 599, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 687, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 709, 710, 711, 713, 714, 717, 722, 723, 724, 726, 728, 735, 736, 738, 739, 740, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 805, 806, 807, 810, 811, 812, 813, 815, 818, 819, 820, 823, 824, 826, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 843, 845, 850, 852, 853, 854, 855, 856, 857, 858, 864, 865, 866, 868, 869, 870, 873, 874, 875, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 915, 917, 918, 924, 930, 931, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 975, 983], "2": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 71, 86, 88, 89, 90, 91, 92, 93, 94, 101, 110, 115, 116, 117, 118, 121, 122, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, 167, 169, 171, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 256, 257, 258, 259, 261, 262, 263, 264, 265, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 330, 331, 335, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 354, 355, 356, 357, 358, 359, 362, 365, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 472, 473, 474, 475, 476, 478, 480, 483, 486, 487, 488, 489, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 503, 504, 506, 507, 509, 511, 512, 513, 514, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 585, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 687, 690, 691, 693, 697, 698, 699, 700, 701, 702, 709, 710, 711, 714, 715, 717, 722, 723, 724, 726, 728, 735, 738, 739, 740, 741, 745, 746, 749, 750, 751, 752, 753, 754, 755, 756, 761, 763, 764, 768, 773, 774, 780, 782, 783, 784, 789, 790, 791, 792, 795, 797, 799, 801, 803, 804, 805, 806, 807, 810, 811, 812, 813, 815, 818, 819, 820, 823, 824, 826, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 845, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 864, 865, 866, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 894, 898, 900, 902, 903, 904, 905, 906, 908, 910, 916, 917, 918, 921, 922, 923, 924, 925, 927, 930, 931, 933, 934, 936, 944, 945, 946, 947, 948, 949, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 967, 975, 983], "column_0": [1, 131, 218, 250], "register_dataframe_namespac": [1, 62, 63, 64], "split": [1, 61, 168, 250, 500, 501, 930, 931], "splitfram": [1, 61], "df": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 61, 62, 65, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 110, 120, 122, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 297, 298, 301, 302, 303, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 554, 555, 556, 558, 561, 562, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 585, 618, 656, 657, 663, 666, 669, 678, 682, 710, 728, 738, 790, 915, 918, 925, 930, 931, 954, 975, 983], "_df": [1, 61], "by_alternate_row": 1, "list": [1, 29, 36, 60, 61, 63, 67, 69, 86, 88, 89, 90, 92, 93, 96, 98, 99, 100, 101, 102, 104, 108, 110, 111, 120, 121, 122, 124, 135, 138, 141, 142, 143, 147, 152, 154, 155, 160, 167, 179, 182, 192, 193, 196, 203, 209, 210, 218, 219, 220, 221, 227, 230, 231, 250, 258, 279, 282, 283, 284, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 374, 380, 388, 414, 425, 426, 438, 448, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 466, 474, 475, 486, 499, 511, 512, 517, 536, 539, 540, 547, 551, 560, 574, 575, 585, 604, 605, 607, 609, 613, 616, 617, 631, 641, 649, 655, 656, 660, 661, 664, 665, 682, 703, 706, 709, 710, 711, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 740, 753, 804, 809, 813, 816, 820, 821, 831, 868, 874, 876, 877, 878, 879, 880, 881, 883, 884, 885, 888, 916, 929, 947, 956, 975, 983], "with_row_count": [1, 250, 416, 585, 682, 891, 975], "name": [1, 15, 19, 21, 28, 29, 31, 50, 61, 62, 63, 64, 69, 70, 75, 86, 88, 89, 90, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 112, 113, 114, 118, 119, 120, 122, 123, 124, 125, 131, 132, 135, 138, 139, 140, 143, 148, 151, 153, 154, 166, 167, 169, 170, 176, 182, 184, 188, 192, 193, 195, 196, 203, 209, 211, 216, 217, 218, 219, 220, 221, 222, 227, 228, 229, 230, 250, 259, 264, 301, 356, 362, 372, 391, 403, 415, 424, 426, 438, 442, 475, 511, 512, 514, 531, 532, 534, 536, 538, 539, 540, 541, 542, 544, 547, 552, 558, 559, 562, 565, 567, 568, 570, 572, 574, 575, 576, 585, 599, 604, 605, 606, 609, 616, 622, 623, 631, 638, 640, 641, 649, 654, 655, 656, 657, 660, 662, 663, 664, 682, 687, 728, 741, 753, 791, 797, 868, 873, 941, 943, 953, 954, 958, 975, 983], "n": [1, 11, 14, 22, 32, 36, 38, 61, 62, 63, 64, 70, 96, 97, 99, 100, 110, 127, 131, 133, 144, 155, 158, 167, 168, 172, 193, 194, 204, 206, 207, 210, 212, 224, 235, 244, 250, 282, 287, 299, 309, 324, 325, 329, 330, 336, 361, 365, 375, 387, 408, 439, 448, 462, 472, 477, 494, 500, 501, 506, 516, 518, 522, 523, 528, 530, 542, 556, 558, 567, 570, 572, 573, 576, 577, 585, 601, 603, 617, 619, 626, 650, 652, 653, 658, 669, 678, 682, 690, 709, 714, 726, 735, 741, 752, 755, 760, 761, 767, 796, 800, 810, 819, 846, 864, 887, 902, 906, 924, 930, 931, 936, 946, 948, 955, 960, 965, 975, 983], "filter": [1, 61, 102, 110, 111, 115, 140, 163, 164, 165, 232, 250, 483, 502, 529, 535, 554, 585, 606, 610, 620, 666, 682, 890, 975], "col": [1, 27, 29, 60, 61, 62, 63, 65, 90, 92, 110, 120, 122, 131, 143, 147, 154, 155, 156, 164, 166, 180, 183, 192, 196, 203, 220, 227, 230, 250, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 297, 298, 301, 302, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 378, 379, 380, 381, 382, 384, 385, 389, 390, 391, 392, 394, 395, 397, 398, 399, 402, 403, 404, 405, 406, 409, 410, 411, 412, 413, 416, 417, 418, 419, 428, 429, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 507, 509, 510, 511, 512, 513, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 538, 540, 541, 545, 546, 547, 550, 553, 554, 555, 556, 557, 562, 565, 568, 569, 575, 578, 585, 609, 613, 616, 617, 618, 620, 634, 641, 649, 656, 660, 661, 664, 682, 710, 728, 738, 787, 790, 874, 890, 891, 915, 918, 934, 975, 983], "0": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 33, 60, 61, 62, 64, 65, 69, 70, 94, 99, 100, 101, 103, 104, 108, 110, 112, 113, 114, 115, 116, 119, 120, 121, 122, 124, 127, 131, 133, 134, 136, 137, 138, 141, 145, 146, 149, 150, 152, 153, 154, 155, 157, 161, 166, 167, 168, 169, 171, 173, 174, 175, 178, 179, 180, 181, 184, 185, 186, 190, 194, 195, 196, 200, 202, 203, 204, 205, 211, 212, 214, 215, 218, 221, 223, 224, 227, 228, 230, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 250, 256, 258, 261, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 281, 283, 286, 292, 301, 310, 312, 314, 315, 316, 317, 319, 324, 327, 328, 337, 341, 342, 344, 345, 351, 357, 358, 368, 369, 370, 371, 373, 375, 376, 377, 381, 382, 384, 385, 386, 390, 393, 396, 397, 399, 400, 401, 403, 404, 406, 409, 410, 411, 413, 414, 416, 417, 418, 419, 428, 429, 431, 433, 434, 435, 436, 437, 439, 440, 441, 444, 445, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 467, 469, 470, 471, 472, 476, 477, 485, 504, 510, 513, 515, 519, 520, 521, 523, 528, 535, 536, 537, 538, 540, 542, 544, 545, 551, 554, 559, 563, 564, 567, 568, 569, 572, 577, 578, 585, 601, 602, 605, 607, 611, 612, 616, 617, 622, 625, 630, 635, 636, 640, 641, 644, 645, 647, 649, 650, 658, 660, 661, 662, 664, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 682, 692, 693, 694, 695, 696, 697, 698, 700, 702, 710, 713, 736, 739, 741, 746, 747, 752, 753, 754, 756, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 785, 786, 792, 793, 803, 805, 806, 807, 811, 815, 818, 820, 828, 830, 832, 834, 835, 836, 837, 843, 844, 850, 853, 854, 864, 868, 869, 870, 876, 878, 879, 881, 882, 883, 885, 886, 887, 899, 900, 901, 905, 906, 908, 915, 918, 934, 940, 949, 950, 953, 958, 959, 963, 965, 966, 975, 983], "drop": [1, 89, 131, 139, 140, 219, 227, 250, 282, 325, 327, 328, 504, 585, 606, 655, 660, 682, 709, 755, 757, 758, 934, 975], "aaa": [1, 29, 250, 511, 512], "bbb": [1, 29, 250, 511, 512], "ccc": [1, 29, 250, 511, 512], "ddd": [1, 29, 250, 511, 512], "eee": [1, 29, 250], "fff": 1, "column": [1, 14, 15, 18, 19, 21, 29, 31, 51, 60, 61, 68, 69, 70, 73, 75, 86, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110, 111, 112, 113, 114, 117, 122, 130, 131, 132, 138, 139, 140, 141, 143, 148, 151, 153, 154, 155, 156, 160, 161, 166, 167, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 192, 193, 195, 196, 197, 203, 204, 205, 209, 211, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 230, 250, 260, 262, 264, 274, 279, 284, 297, 300, 301, 330, 334, 337, 339, 340, 341, 343, 345, 347, 350, 353, 354, 357, 363, 364, 366, 372, 374, 378, 380, 391, 403, 416, 422, 424, 426, 438, 442, 446, 448, 449, 452, 453, 454, 455, 456, 458, 459, 460, 467, 474, 475, 484, 500, 501, 504, 505, 506, 508, 514, 529, 531, 532, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 553, 554, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 585, 599, 605, 606, 607, 609, 616, 617, 618, 622, 623, 627, 628, 629, 630, 631, 633, 634, 636, 638, 640, 641, 642, 649, 650, 651, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 682, 688, 689, 706, 711, 724, 727, 753, 763, 764, 765, 768, 770, 771, 775, 777, 780, 782, 785, 788, 789, 792, 795, 798, 799, 801, 809, 868, 874, 896, 914, 930, 931, 934, 935, 936, 938, 944, 953, 954, 975, 983], "txt": [1, 110], "utf8": [1, 9, 17, 51, 71, 89, 93, 99, 100, 110, 119, 121, 124, 141, 142, 143, 149, 195, 213, 250, 288, 374, 416, 478, 482, 485, 486, 488, 489, 498, 499, 500, 501, 504, 505, 506, 508, 539, 541, 585, 607, 609, 640, 682, 715, 794, 809, 842, 908, 912, 915, 916, 918, 919, 928, 929, 930, 931, 934, 935, 936, 938, 975], "register_lazyframe_namespac": [1, 61, 62, 64], "dtypeoper": [1, 63], "ldf": [1, 63, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678], "_ldf": [1, 63], "upcast_integer_typ": [1, 63], "with_column": [1, 63, 156, 183, 250, 257, 264, 275, 283, 310, 311, 313, 314, 315, 320, 323, 325, 355, 368, 382, 384, 385, 386, 390, 391, 394, 397, 399, 400, 401, 403, 406, 413, 416, 429, 431, 435, 438, 439, 440, 441, 483, 489, 492, 494, 495, 498, 500, 501, 502, 510, 513, 521, 523, 530, 533, 535, 538, 541, 547, 551, 561, 575, 578, 585, 618, 634, 682, 710, 738, 790], "tp": [1, 63], "cast": [1, 62, 63, 71, 86, 149, 155, 156, 183, 214, 227, 250, 263, 311, 322, 323, 329, 416, 437, 440, 447, 487, 488, 510, 515, 521, 541, 585, 617, 618, 634, 660, 682, 738, 750, 751, 760, 872, 917, 918, 945, 954, 959, 975], "int64": [1, 29, 31, 62, 63, 93, 97, 99, 127, 141, 149, 155, 156, 183, 195, 208, 214, 250, 322, 323, 335, 338, 342, 344, 346, 351, 358, 372, 440, 447, 487, 515, 521, 535, 539, 552, 560, 574, 585, 607, 617, 618, 634, 640, 663, 682, 750, 751, 766, 769, 776, 778, 781, 786, 793, 872, 889, 945, 957, 958, 959, 975], "int8": [1, 63, 149, 250, 322, 323, 515, 585, 750, 751, 755, 851, 875, 945, 963, 975], "int16": [1, 63, 322, 323, 515, 585, 750, 751, 851, 945, 955, 975], "int32": [1, 63, 86, 89, 93, 121, 122, 155, 156, 168, 250, 310, 340, 366, 521, 585, 617, 618, 682, 771, 801, 850, 959, 975], "b": [1, 26, 27, 30, 33, 51, 63, 68, 71, 86, 88, 89, 90, 91, 92, 93, 94, 103, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 160, 161, 163, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 257, 259, 263, 264, 276, 279, 283, 288, 290, 303, 310, 311, 318, 326, 327, 328, 372, 376, 377, 378, 380, 383, 386, 388, 390, 391, 393, 396, 397, 398, 399, 400, 401, 403, 407, 415, 430, 436, 438, 440, 442, 450, 467, 473, 475, 484, 487, 494, 514, 525, 527, 529, 531, 532, 533, 534, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 551, 552, 553, 554, 555, 558, 561, 562, 563, 564, 565, 566, 567, 569, 572, 573, 574, 575, 576, 577, 585, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 619, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 690, 710, 738, 754, 756, 803, 804, 812, 824, 831, 842, 873, 889, 914, 917, 924, 944, 958, 962, 975], "4": [1, 14, 22, 26, 27, 29, 30, 33, 51, 60, 61, 62, 63, 64, 65, 68, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 110, 116, 117, 118, 124, 131, 132, 133, 134, 137, 140, 143, 144, 145, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 174, 176, 179, 180, 182, 183, 184, 185, 189, 193, 198, 203, 206, 207, 208, 209, 210, 211, 216, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 256, 257, 258, 261, 263, 264, 276, 281, 282, 283, 284, 287, 295, 296, 299, 303, 309, 310, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 330, 334, 338, 345, 346, 347, 353, 354, 356, 357, 358, 362, 363, 364, 366, 368, 373, 376, 377, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 400, 401, 403, 406, 407, 408, 410, 413, 415, 416, 429, 431, 435, 437, 438, 441, 442, 444, 445, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 463, 465, 466, 469, 473, 474, 475, 476, 479, 489, 490, 492, 493, 496, 498, 500, 501, 504, 511, 512, 513, 514, 516, 517, 518, 521, 522, 523, 530, 533, 534, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 551, 553, 554, 558, 560, 561, 562, 563, 564, 565, 566, 567, 572, 573, 574, 575, 576, 577, 578, 585, 599, 601, 602, 603, 606, 608, 609, 610, 611, 612, 614, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 690, 693, 700, 709, 710, 711, 714, 722, 723, 726, 735, 739, 740, 742, 752, 754, 756, 768, 769, 775, 777, 780, 781, 782, 783, 784, 785, 789, 791, 792, 793, 794, 797, 798, 799, 811, 812, 819, 820, 823, 824, 826, 831, 834, 835, 836, 837, 841, 851, 857, 864, 865, 866, 868, 870, 874, 879, 881, 882, 883, 884, 885, 887, 889, 899, 903, 904, 909, 919, 920, 922, 923, 926, 928, 930, 931, 934, 944, 946, 947, 948, 955, 958, 959, 960, 967, 975, 983], "c": [1, 26, 27, 30, 33, 51, 61, 63, 71, 89, 91, 93, 103, 110, 120, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 147, 148, 149, 150, 152, 153, 154, 155, 158, 160, 161, 168, 169, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 188, 190, 191, 192, 194, 195, 196, 199, 200, 202, 203, 204, 205, 206, 208, 212, 213, 214, 215, 217, 218, 221, 222, 224, 225, 227, 230, 233, 234, 235, 236, 237, 238, 240, 243, 244, 250, 257, 264, 279, 288, 290, 391, 403, 438, 440, 467, 500, 504, 525, 527, 531, 532, 534, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 553, 554, 555, 558, 561, 562, 563, 564, 565, 566, 567, 572, 573, 575, 576, 577, 585, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 613, 616, 617, 622, 625, 631, 635, 638, 639, 640, 641, 645, 648, 649, 654, 657, 660, 661, 664, 667, 668, 669, 670, 671, 672, 674, 677, 678, 682, 754, 824, 842, 930, 934, 962, 975], "5": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 30, 33, 60, 61, 63, 64, 65, 68, 69, 86, 89, 90, 91, 92, 93, 96, 97, 100, 116, 122, 127, 131, 133, 134, 137, 143, 144, 145, 146, 149, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 164, 166, 167, 170, 171, 172, 174, 176, 179, 180, 182, 184, 185, 186, 189, 193, 198, 203, 206, 207, 208, 209, 210, 216, 221, 223, 226, 227, 228, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 257, 258, 261, 281, 283, 284, 287, 292, 298, 299, 309, 310, 311, 312, 313, 314, 315, 324, 325, 326, 330, 331, 335, 355, 357, 358, 359, 363, 371, 372, 375, 381, 382, 384, 385, 387, 388, 391, 394, 397, 399, 400, 401, 403, 406, 408, 429, 431, 437, 438, 439, 442, 444, 445, 449, 450, 451, 452, 453, 455, 459, 461, 463, 469, 475, 480, 488, 489, 492, 493, 510, 513, 514, 516, 518, 522, 523, 533, 534, 537, 538, 540, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 554, 558, 560, 561, 562, 563, 564, 565, 566, 567, 569, 572, 573, 575, 576, 577, 585, 601, 602, 603, 608, 609, 610, 611, 612, 614, 616, 617, 618, 619, 621, 623, 624, 625, 626, 629, 630, 631, 635, 643, 644, 645, 648, 649, 650, 651, 652, 653, 659, 660, 662, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 690, 693, 697, 700, 710, 711, 714, 717, 726, 735, 738, 740, 742, 748, 752, 753, 754, 755, 756, 761, 762, 763, 764, 765, 766, 790, 792, 793, 795, 798, 799, 807, 810, 819, 820, 823, 824, 850, 851, 857, 864, 865, 866, 868, 869, 870, 874, 876, 877, 878, 880, 881, 884, 887, 889, 899, 905, 910, 918, 919, 923, 946, 960, 963, 967, 975, 983], "6": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 86, 89, 90, 91, 92, 94, 131, 135, 138, 139, 140, 141, 143, 144, 147, 148, 150, 151, 152, 153, 155, 156, 158, 160, 161, 162, 164, 166, 167, 169, 173, 174, 175, 176, 178, 181, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 199, 200, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 220, 221, 222, 223, 224, 225, 227, 228, 235, 243, 244, 250, 257, 261, 264, 284, 303, 310, 322, 323, 326, 330, 352, 354, 357, 367, 376, 377, 383, 387, 388, 390, 408, 437, 443, 445, 446, 449, 452, 453, 454, 455, 456, 458, 459, 460, 463, 475, 480, 484, 489, 492, 493, 513, 516, 518, 530, 531, 533, 545, 546, 547, 551, 554, 561, 575, 585, 603, 604, 605, 606, 607, 608, 609, 610, 613, 614, 617, 618, 619, 621, 622, 624, 626, 627, 631, 635, 638, 640, 641, 643, 644, 645, 648, 649, 652, 653, 656, 657, 659, 660, 662, 663, 669, 677, 678, 682, 690, 711, 740, 746, 750, 751, 756, 787, 799, 820, 857, 870, 874, 879, 881, 882, 883, 885, 889, 910, 914, 919, 923, 945, 975, 983], "7": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 70, 116, 135, 136, 137, 138, 139, 141, 143, 147, 148, 150, 155, 156, 158, 160, 162, 169, 173, 174, 175, 178, 181, 184, 186, 188, 190, 192, 194, 195, 196, 199, 200, 202, 204, 205, 206, 207, 212, 213, 214, 215, 221, 222, 223, 224, 225, 250, 257, 261, 323, 330, 334, 353, 355, 356, 362, 364, 366, 373, 387, 390, 408, 416, 437, 449, 453, 459, 475, 516, 518, 533, 545, 546, 554, 561, 575, 585, 604, 605, 607, 609, 613, 617, 618, 619, 621, 622, 626, 636, 638, 640, 641, 652, 653, 657, 663, 682, 697, 761, 765, 771, 790, 791, 797, 799, 843, 851, 874, 884, 975, 983], "float32": [1, 27, 63, 149, 212, 250, 560, 682, 827, 850, 975], "lazi": [1, 63, 68, 70, 97, 110, 122, 127, 170, 183, 250, 264, 301, 535, 556, 585, 596, 622, 623, 661, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 682, 983], "i16": [1, 63, 467, 585, 851, 955, 975, 983], "i32": [1, 63, 86, 89, 93, 121, 122, 196, 250, 310, 340, 366, 467, 493, 578, 585, 641, 682, 771, 801, 850, 923, 975, 983], "f32": [1, 63, 140, 212, 250, 283, 445, 467, 551, 585, 606, 682, 710, 850, 870, 975], "i64": [1, 14, 18, 61, 62, 63, 64, 68, 86, 88, 89, 90, 91, 92, 93, 97, 110, 127, 131, 132, 133, 134, 135, 138, 140, 141, 143, 144, 146, 147, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 165, 169, 170, 173, 176, 178, 182, 183, 184, 185, 188, 189, 190, 191, 194, 196, 199, 200, 202, 203, 205, 206, 207, 209, 215, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 240, 243, 244, 250, 257, 259, 263, 264, 282, 283, 284, 285, 286, 287, 289, 291, 293, 294, 295, 296, 297, 298, 299, 302, 303, 309, 311, 313, 314, 315, 320, 321, 322, 323, 325, 326, 335, 336, 338, 342, 344, 346, 351, 358, 361, 372, 375, 377, 378, 379, 380, 382, 383, 387, 388, 389, 390, 391, 394, 397, 399, 400, 401, 403, 405, 408, 412, 414, 415, 429, 430, 431, 438, 439, 440, 441, 442, 443, 446, 447, 449, 450, 462, 464, 465, 467, 468, 469, 473, 474, 475, 494, 495, 511, 512, 513, 514, 515, 516, 517, 518, 522, 523, 524, 526, 529, 531, 533, 538, 539, 541, 545, 546, 547, 550, 551, 552, 553, 554, 558, 560, 561, 562, 565, 569, 571, 575, 576, 578, 585, 599, 601, 603, 605, 606, 609, 610, 612, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 626, 627, 628, 631, 633, 634, 635, 638, 639, 641, 643, 644, 648, 649, 651, 652, 653, 654, 655, 656, 657, 660, 662, 664, 665, 666, 668, 669, 670, 671, 674, 677, 678, 682, 690, 691, 709, 710, 711, 714, 722, 723, 724, 726, 735, 738, 742, 745, 748, 749, 750, 751, 754, 766, 767, 769, 776, 778, 781, 786, 793, 796, 810, 812, 813, 819, 823, 831, 856, 873, 874, 877, 880, 884, 887, 890, 891, 894, 898, 899, 903, 904, 944, 946, 947, 948, 954, 960, 961, 964, 967, 975, 983], "register_series_namespac": [1, 61, 62, 63], "math": [1, 64, 746, 900, 949, 975], "mathshortcut": [1, 64], "": [1, 27, 29, 64, 69, 86, 93, 94, 99, 100, 111, 124, 132, 138, 140, 142, 143, 154, 155, 161, 169, 170, 182, 184, 189, 190, 196, 203, 207, 211, 217, 219, 220, 221, 250, 287, 288, 295, 296, 299, 336, 359, 372, 404, 425, 430, 433, 434, 438, 439, 447, 451, 475, 489, 490, 492, 496, 498, 499, 501, 504, 505, 506, 508, 510, 511, 512, 531, 532, 536, 539, 542, 547, 552, 555, 556, 562, 565, 567, 574, 575, 585, 599, 605, 606, 609, 616, 617, 623, 641, 649, 654, 655, 656, 666, 682, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 709, 711, 714, 715, 717, 722, 723, 724, 726, 735, 736, 739, 740, 741, 742, 745, 746, 747, 748, 749, 750, 751, 752, 755, 756, 761, 767, 783, 784, 791, 797, 804, 806, 807, 810, 811, 812, 813, 815, 818, 819, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 864, 865, 866, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 894, 898, 899, 900, 901, 903, 904, 906, 909, 910, 912, 913, 914, 916, 917, 919, 920, 921, 922, 923, 924, 926, 927, 928, 931, 932, 933, 934, 935, 936, 938, 940, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 975], "_": [1, 60, 64, 94, 184, 211, 250, 500, 930, 953, 975], "squar": [1, 64, 232, 404, 476, 585, 666, 844, 905, 975], "cube": [1, 64, 441, 585], "s2": [1, 118, 149, 250, 690, 740, 756, 831, 843, 857, 889, 958, 967, 975], "renam": [1, 89, 99, 100, 196, 227, 230, 250, 259, 415, 427, 512, 571, 574, 585, 641, 660, 664, 682, 851, 943, 954, 975], "n2": 1, "in_plac": [1, 160, 201, 225, 250, 871, 873, 897, 904, 975], "true": [1, 5, 9, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 65, 67, 68, 70, 71, 86, 87, 91, 93, 96, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 128, 130, 132, 133, 134, 137, 146, 149, 150, 152, 153, 154, 155, 161, 163, 164, 165, 167, 170, 171, 174, 179, 180, 182, 184, 185, 192, 193, 194, 196, 203, 209, 214, 217, 218, 219, 220, 221, 223, 227, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 250, 258, 260, 261, 262, 263, 264, 275, 280, 297, 300, 305, 310, 319, 320, 321, 322, 323, 329, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 384, 385, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 413, 435, 437, 447, 457, 462, 467, 472, 474, 475, 479, 481, 483, 487, 488, 493, 499, 500, 502, 504, 505, 506, 508, 511, 512, 517, 524, 527, 530, 531, 532, 533, 535, 536, 542, 543, 554, 570, 572, 574, 578, 585, 599, 601, 602, 603, 608, 610, 612, 616, 617, 622, 623, 625, 627, 631, 635, 641, 645, 646, 647, 649, 654, 655, 656, 660, 665, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 682, 688, 689, 690, 691, 701, 724, 727, 731, 736, 740, 741, 760, 762, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 803, 805, 806, 807, 813, 817, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 844, 857, 865, 866, 872, 882, 889, 902, 904, 909, 911, 913, 917, 918, 923, 929, 930, 932, 934, 935, 936, 938, 957, 958, 966, 967, 975, 983], "s3": [1, 102, 111, 115, 975], "n3": 1, "8": [1, 26, 27, 30, 31, 32, 33, 44, 57, 59, 60, 61, 63, 64, 68, 69, 94, 116, 120, 122, 131, 135, 136, 137, 138, 139, 140, 141, 143, 147, 148, 150, 153, 158, 160, 169, 173, 174, 175, 178, 186, 188, 190, 192, 194, 195, 196, 199, 200, 202, 204, 205, 206, 207, 212, 213, 214, 215, 221, 222, 224, 225, 227, 250, 261, 263, 276, 282, 283, 318, 320, 323, 324, 327, 328, 330, 390, 407, 431, 437, 441, 442, 449, 450, 453, 454, 456, 458, 460, 467, 473, 475, 490, 496, 504, 514, 518, 530, 534, 537, 542, 543, 544, 546, 547, 551, 553, 558, 561, 562, 563, 564, 565, 566, 567, 572, 573, 575, 576, 577, 585, 604, 605, 606, 607, 609, 613, 619, 622, 626, 627, 635, 638, 640, 641, 652, 653, 657, 660, 663, 682, 709, 710, 752, 771, 820, 843, 864, 868, 874, 876, 879, 881, 882, 883, 885, 920, 926, 934, 975, 983], "9": [1, 26, 27, 30, 33, 60, 68, 131, 136, 137, 149, 156, 158, 162, 196, 206, 221, 222, 225, 227, 243, 250, 257, 261, 263, 276, 282, 294, 297, 318, 320, 323, 327, 328, 330, 334, 353, 363, 364, 390, 395, 403, 407, 437, 449, 451, 453, 459, 469, 473, 518, 533, 540, 545, 546, 585, 618, 619, 621, 626, 641, 652, 657, 660, 677, 682, 709, 724, 754, 765, 775, 777, 785, 791, 792, 797, 798, 831, 843, 874, 876, 884, 886, 899, 975], "27": [1, 64, 243, 323, 340, 354, 366, 585, 677, 975, 983], "16": [1, 29, 41, 54, 62, 69, 94, 155, 156, 227, 250, 320, 323, 390, 431, 441, 453, 493, 504, 533, 545, 550, 551, 554, 567, 572, 585, 617, 618, 645, 660, 682, 791, 797, 864, 900, 923, 934, 949, 975], "64": [1, 33, 40, 43, 56, 62, 64, 250, 431, 441, 585, 647, 682, 864, 975], "25": [1, 29, 64, 70, 93, 122, 137, 155, 156, 170, 223, 227, 250, 325, 340, 356, 362, 366, 523, 556, 585, 617, 618, 623, 629, 658, 660, 682, 754, 755, 791, 797, 803, 820, 864, 868, 975], "125": [1, 29, 64, 250, 257, 585, 864, 975], "arg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 183, 214, 250, 440, 536, 555, 585, 634, 682, 691, 957, 958, 975], "ani": [2, 3, 4, 7, 27, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 66, 86, 87, 88, 89, 90, 91, 92, 99, 100, 102, 103, 104, 108, 110, 111, 112, 114, 119, 121, 122, 124, 128, 131, 136, 140, 144, 146, 147, 149, 166, 167, 168, 182, 183, 192, 193, 209, 210, 213, 214, 219, 221, 250, 257, 261, 264, 279, 283, 310, 357, 368, 377, 382, 384, 385, 395, 406, 413, 414, 416, 427, 429, 431, 435, 437, 440, 449, 451, 463, 466, 493, 504, 505, 506, 508, 513, 517, 523, 530, 531, 533, 542, 553, 560, 572, 578, 585, 606, 612, 634, 655, 682, 690, 691, 706, 710, 756, 792, 812, 831, 843, 851, 874, 876, 888, 891, 923, 934, 935, 936, 938, 947, 956, 957, 958, 975, 983], "kwarg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 136, 183, 214, 250, 440, 585, 634, 682, 958, 975], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 585, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 975, 982], "method": [2, 3, 4, 7, 26, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 87, 99, 100, 103, 119, 128, 140, 154, 162, 167, 180, 186, 192, 193, 219, 227, 242, 250, 257, 260, 261, 368, 375, 382, 384, 385, 390, 406, 413, 429, 431, 435, 437, 441, 444, 445, 452, 453, 454, 455, 456, 458, 459, 460, 513, 523, 525, 530, 542, 567, 568, 572, 579, 581, 585, 586, 587, 590, 591, 592, 593, 596, 606, 621, 636, 655, 660, 676, 682, 691, 810, 823, 869, 870, 881, 959, 969, 971, 975, 976, 979, 980, 981], "attribut": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 119, 250, 579, 581, 586, 587, 591, 592, 593, 682, 969, 971, 976, 979, 980, 981], "A": [4, 27, 29, 48, 67, 70, 93, 99, 100, 101, 108, 110, 126, 149, 155, 170, 184, 193, 209, 221, 222, 223, 227, 250, 256, 301, 330, 335, 338, 342, 344, 346, 351, 358, 368, 375, 384, 385, 393, 396, 397, 399, 406, 413, 414, 415, 425, 435, 442, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 479, 480, 485, 486, 488, 494, 495, 510, 514, 540, 551, 555, 585, 617, 623, 638, 657, 660, 682, 728, 761, 766, 769, 776, 778, 781, 786, 793, 810, 876, 877, 878, 880, 883, 884, 885, 909, 910, 915, 916, 918, 924, 925, 940, 975], "encod": [4, 59, 99, 100, 110, 305, 481, 731, 911], "set": [4, 5, 6, 7, 8, 9, 11, 13, 14, 17, 22, 23, 25, 27, 29, 30, 31, 32, 61, 65, 70, 87, 89, 92, 94, 99, 100, 103, 104, 108, 110, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 135, 140, 154, 157, 167, 170, 176, 194, 196, 202, 211, 218, 219, 221, 227, 250, 264, 296, 300, 301, 365, 386, 395, 416, 451, 452, 453, 454, 455, 456, 458, 459, 460, 462, 468, 472, 473, 491, 497, 498, 503, 504, 505, 506, 508, 535, 570, 574, 578, 585, 604, 606, 608, 616, 622, 623, 627, 631, 641, 646, 647, 648, 655, 660, 663, 666, 682, 690, 691, 723, 727, 728, 800, 818, 831, 851, 876, 877, 878, 879, 880, 881, 883, 884, 885, 887, 891, 898, 902, 903, 921, 927, 928, 933, 934, 935, 936, 938, 957, 975, 983], "string": [4, 6, 8, 11, 12, 13, 17, 27, 29, 31, 32, 36, 51, 59, 70, 71, 93, 99, 100, 110, 119, 120, 121, 124, 132, 149, 153, 154, 155, 156, 170, 196, 203, 212, 217, 221, 223, 227, 230, 250, 257, 288, 307, 311, 352, 356, 362, 374, 380, 391, 416, 438, 452, 453, 454, 455, 456, 458, 459, 460, 475, 478, 479, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 510, 531, 532, 536, 538, 540, 541, 547, 555, 562, 565, 574, 575, 585, 599, 608, 615, 616, 617, 618, 623, 641, 649, 654, 660, 663, 664, 682, 715, 733, 738, 787, 791, 797, 809, 824, 907, 908, 909, 913, 914, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 955, 975, 983], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 615, 637, 682], "activ": [5, 9, 15, 16, 18, 19, 20, 21, 24, 283, 710], "bool": [5, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 60, 65, 67, 68, 71, 86, 87, 91, 93, 99, 100, 104, 108, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 130, 132, 133, 134, 146, 147, 149, 150, 152, 153, 154, 155, 160, 161, 163, 164, 165, 170, 182, 184, 194, 197, 201, 203, 209, 214, 217, 218, 219, 220, 223, 225, 227, 234, 236, 237, 240, 250, 260, 261, 262, 263, 264, 274, 280, 281, 283, 297, 300, 302, 305, 310, 319, 320, 321, 322, 323, 324, 339, 355, 357, 367, 368, 369, 370, 371, 384, 385, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 413, 414, 420, 421, 422, 423, 435, 437, 445, 447, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 464, 466, 467, 472, 474, 475, 479, 481, 483, 493, 494, 495, 499, 500, 502, 504, 505, 506, 508, 512, 524, 527, 530, 531, 532, 533, 535, 536, 542, 545, 560, 570, 572, 574, 585, 599, 601, 603, 608, 610, 612, 613, 616, 617, 622, 623, 627, 631, 635, 642, 645, 646, 647, 649, 654, 655, 656, 660, 668, 670, 671, 674, 682, 688, 689, 690, 691, 700, 707, 708, 710, 724, 727, 729, 731, 736, 741, 748, 749, 750, 751, 752, 753, 770, 790, 792, 803, 805, 806, 807, 813, 817, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 865, 866, 868, 870, 871, 872, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 891, 892, 897, 902, 904, 909, 911, 913, 923, 924, 925, 929, 930, 932, 934, 935, 936, 938, 956, 957, 958, 961, 964, 966, 975], "decim": [5, 27, 29, 250, 461, 585, 886, 975], "temporari": 5, "remov": [5, 7, 138, 222, 250, 264, 372, 491, 497, 503, 504, 552, 559, 567, 572, 585, 605, 657, 682, 921, 927, 933, 934], "later": 5, "onc": [5, 99, 100, 103, 126, 130, 131, 194, 230, 250, 264, 462, 585, 600, 664, 682, 691, 887, 975], "stabil": 5, "happen": 5, "being": [5, 69, 99, 100, 110, 115, 221, 222, 250, 264, 324, 356, 452, 453, 454, 455, 456, 458, 459, 460, 551, 585, 657, 682, 752, 791, 820, 868, 975, 983], "consid": [5, 69, 99, 100, 110, 115, 131, 140, 150, 176, 219, 221, 222, 250, 264, 313, 314, 315, 324, 356, 452, 453, 454, 455, 456, 458, 459, 460, 545, 554, 585, 606, 619, 626, 631, 655, 657, 682, 691, 742, 743, 744, 752, 791, 820, 833, 868, 889, 890, 891, 975], "break": [5, 69, 115, 221, 222, 250, 264, 324, 356, 452, 453, 454, 455, 456, 458, 459, 460, 585, 657, 682, 752, 791, 820, 868, 975], "chang": [5, 25, 60, 69, 99, 100, 115, 221, 222, 223, 250, 264, 324, 325, 356, 439, 452, 453, 454, 455, 456, 458, 459, 460, 585, 657, 682, 752, 791, 820, 864, 868, 897, 975], "current": [5, 8, 25, 87, 93, 101, 130, 133, 134, 250, 301, 356, 439, 585, 596, 601, 602, 682, 741, 745, 791, 864, 975], "alpha": [5, 67, 264, 369, 370, 371, 585, 603, 608, 610, 635, 645, 682, 805, 806, 807, 975], "state": [5, 7, 67, 79, 545, 596, 603, 608, 610, 635, 645, 682], "cfg": [6, 7, 8, 14, 128], "previous": 6, "save": [6, 355, 596, 790], "share": [6, 51, 142, 250, 804, 975], "option": [6, 7, 8, 25, 29, 37, 60, 70, 99, 102, 103, 104, 108, 111, 112, 114, 116, 119, 120, 121, 122, 123, 124, 125, 166, 170, 176, 209, 218, 250, 404, 451, 452, 453, 454, 455, 456, 458, 459, 460, 472, 498, 560, 574, 578, 585, 596, 622, 623, 631, 682, 840, 844, 876, 877, 878, 879, 880, 881, 883, 884, 885, 902, 928, 954, 975], "paramet": [6, 10, 11, 12, 13, 14, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 38, 45, 48, 50, 52, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 130, 131, 132, 133, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 166, 167, 168, 169, 170, 172, 174, 176, 177, 179, 180, 182, 183, 184, 186, 188, 189, 190, 192, 193, 194, 196, 197, 199, 200, 202, 203, 204, 205, 206, 209, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 230, 232, 235, 242, 244, 250, 257, 259, 261, 263, 264, 274, 279, 280, 281, 282, 283, 286, 287, 288, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 336, 352, 355, 356, 357, 359, 361, 362, 365, 367, 368, 369, 370, 371, 372, 375, 377, 378, 382, 383, 384, 385, 386, 387, 390, 391, 395, 404, 406, 408, 409, 413, 414, 415, 416, 429, 431, 435, 437, 438, 439, 440, 441, 444, 445, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 516, 517, 522, 523, 524, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 552, 554, 555, 556, 558, 559, 560, 561, 562, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 585, 599, 601, 603, 605, 606, 608, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 622, 623, 626, 627, 631, 632, 634, 635, 636, 637, 638, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 666, 669, 676, 678, 682, 687, 690, 691, 700, 706, 707, 708, 709, 710, 713, 714, 715, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 741, 742, 743, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 761, 762, 767, 787, 790, 791, 792, 794, 796, 797, 800, 803, 804, 805, 806, 807, 810, 811, 812, 813, 818, 819, 820, 823, 824, 833, 839, 840, 844, 846, 851, 864, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 898, 902, 903, 904, 906, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 938, 940, 941, 943, 946, 947, 953, 954, 955, 956, 957, 958, 960, 961, 964, 965, 966, 967, 975], "json": [6, 8, 31, 32, 106, 107, 113, 250, 487, 488, 596, 615, 637, 663, 682, 917, 918], "produc": [6, 121, 122, 124, 281, 424, 561, 627, 682, 708], "reset": [7, 128], "default": [7, 12, 25, 26, 27, 29, 30, 31, 32, 33, 65, 70, 86, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 103, 108, 110, 119, 120, 121, 122, 123, 124, 127, 140, 142, 154, 156, 157, 167, 170, 176, 182, 184, 192, 193, 194, 204, 211, 219, 221, 224, 228, 250, 296, 300, 301, 311, 355, 367, 369, 370, 371, 386, 409, 416, 433, 434, 439, 445, 462, 468, 477, 485, 491, 493, 497, 498, 503, 504, 505, 506, 508, 528, 535, 542, 556, 560, 567, 570, 572, 573, 574, 577, 585, 606, 608, 616, 618, 623, 631, 647, 650, 655, 658, 663, 682, 723, 727, 728, 738, 790, 803, 804, 805, 806, 807, 818, 851, 860, 861, 864, 870, 887, 898, 906, 915, 921, 923, 927, 928, 933, 934, 935, 936, 938, 965, 975, 983], "note": [7, 17, 29, 37, 60, 70, 86, 87, 88, 90, 92, 93, 97, 99, 101, 102, 108, 110, 111, 120, 122, 124, 126, 127, 128, 130, 131, 136, 145, 155, 156, 166, 167, 169, 170, 180, 183, 192, 193, 210, 213, 218, 222, 223, 227, 250, 264, 283, 300, 322, 323, 327, 328, 348, 349, 352, 356, 362, 391, 397, 399, 452, 453, 454, 455, 456, 458, 459, 460, 472, 489, 491, 492, 497, 503, 504, 515, 523, 545, 554, 569, 578, 585, 603, 610, 611, 617, 618, 619, 623, 626, 638, 645, 657, 660, 682, 691, 710, 727, 750, 751, 783, 784, 787, 797, 890, 891, 897, 902, 919, 921, 922, 927, 933, 934, 945, 975], "oper": [7, 29, 51, 68, 76, 77, 86, 88, 89, 90, 91, 92, 99, 108, 131, 144, 149, 154, 161, 171, 177, 180, 182, 183, 187, 208, 213, 214, 218, 221, 229, 230, 250, 257, 258, 261, 301, 319, 320, 321, 322, 323, 324, 368, 382, 384, 385, 403, 406, 413, 427, 429, 431, 435, 437, 441, 447, 513, 523, 530, 531, 532, 540, 541, 551, 585, 610, 616, 619, 622, 626, 631, 632, 664, 682, 690, 748, 749, 750, 751, 752, 872, 952, 956, 957, 958, 966, 975], "from": [7, 27, 29, 60, 68, 70, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 137, 138, 142, 144, 153, 155, 156, 167, 168, 170, 171, 176, 188, 192, 194, 196, 218, 219, 221, 223, 250, 319, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 372, 390, 404, 433, 434, 439, 462, 475, 485, 487, 493, 504, 505, 506, 508, 525, 527, 538, 548, 549, 550, 572, 573, 584, 585, 605, 610, 615, 617, 618, 623, 631, 637, 638, 641, 655, 661, 682, 690, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 840, 844, 860, 861, 862, 864, 887, 915, 917, 923, 934, 935, 936, 938, 964, 967, 975, 983], "environ": [7, 25, 123, 126], "local": [7, 102, 111, 124, 355, 763, 764, 790, 795, 865, 866, 975], "non": [7, 29, 37, 60, 91, 168, 176, 196, 222, 227, 250, 391, 439, 451, 452, 453, 454, 455, 456, 458, 459, 460, 480, 486, 531, 532, 538, 540, 541, 547, 562, 565, 574, 575, 585, 631, 641, 657, 660, 682, 728, 824, 864, 876, 877, 878, 879, 880, 881, 883, 884, 885, 910, 916, 957, 975], "env": [7, 125], "back": [7, 60, 144, 214, 250, 438, 585, 690, 958, 975], "valu": [7, 10, 11, 14, 25, 27, 29, 31, 45, 46, 51, 58, 60, 68, 69, 71, 89, 91, 99, 100, 101, 110, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 137, 140, 144, 145, 146, 150, 153, 155, 156, 157, 158, 162, 166, 167, 172, 173, 174, 175, 176, 178, 180, 182, 184, 185, 186, 188, 192, 193, 194, 199, 200, 203, 204, 205, 206, 209, 210, 214, 217, 221, 222, 223, 224, 233, 234, 236, 237, 238, 240, 241, 250, 256, 257, 258, 260, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 281, 282, 285, 286, 287, 289, 291, 292, 293, 295, 298, 299, 301, 302, 303, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 323, 324, 325, 327, 328, 330, 334, 347, 353, 363, 368, 369, 370, 371, 373, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 396, 397, 399, 400, 401, 402, 405, 406, 407, 410, 412, 413, 414, 416, 417, 418, 419, 428, 429, 430, 431, 432, 433, 434, 435, 436, 439, 441, 444, 445, 448, 451, 452, 453, 454, 455, 456, 458, 459, 460, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 494, 495, 498, 500, 501, 502, 510, 513, 515, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 530, 532, 534, 538, 541, 543, 545, 546, 547, 553, 554, 560, 562, 563, 564, 565, 566, 569, 570, 575, 578, 585, 599, 606, 611, 612, 617, 618, 620, 621, 628, 629, 630, 631, 633, 636, 638, 643, 644, 649, 650, 651, 654, 657, 658, 663, 667, 668, 670, 671, 672, 674, 675, 682, 686, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 704, 705, 708, 709, 712, 713, 714, 716, 718, 719, 720, 722, 726, 729, 731, 732, 733, 734, 738, 739, 742, 743, 744, 746, 747, 752, 753, 754, 755, 757, 758, 761, 765, 782, 788, 798, 804, 805, 806, 807, 810, 811, 812, 815, 817, 818, 819, 820, 821, 823, 824, 826, 828, 829, 831, 832, 834, 835, 836, 837, 841, 846, 851, 852, 853, 855, 856, 858, 860, 861, 862, 863, 864, 867, 868, 869, 870, 876, 877, 878, 879, 880, 881, 883, 884, 885, 887, 888, 889, 890, 891, 894, 895, 899, 900, 901, 902, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 922, 924, 925, 928, 930, 931, 932, 940, 945, 946, 947, 948, 949, 950, 958, 959, 962, 964, 966, 967, 975, 983], "exampl": [7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 100, 101, 102, 103, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 552, 553, 554, 555, 556, 558, 560, 561, 562, 563, 564, 565, 566, 567, 569, 571, 572, 573, 574, 575, 576, 577, 578, 585, 596, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 687, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 709, 710, 711, 714, 715, 717, 722, 723, 724, 726, 728, 735, 736, 738, 739, 740, 741, 742, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 810, 811, 812, 813, 815, 818, 819, 820, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 850, 851, 852, 853, 854, 855, 856, 857, 858, 864, 865, 866, 868, 869, 870, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 890, 891, 892, 894, 898, 899, 900, 901, 903, 904, 906, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 938, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 975], "ascii": [9, 17, 490, 492, 496, 510, 920, 922, 926, 940], "charact": [9, 11, 17, 23, 27, 99, 100, 110, 250, 352, 484, 489, 490, 491, 496, 497, 499, 500, 503, 510, 635, 682, 787, 914, 919, 920, 921, 926, 927, 929, 930, 933, 940], "displai": [9, 10, 11, 14, 16, 20, 22, 29, 250], "tabl": [9, 13, 14, 16, 17, 18, 19, 20, 22, 23, 28, 29, 50, 86, 93, 99, 100, 102, 110, 111, 184, 208, 214, 221, 222, 250, 657, 682, 958, 975], "outlin": 9, "fals": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 29, 31, 33, 60, 65, 67, 70, 87, 91, 93, 99, 100, 103, 104, 108, 110, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 130, 132, 133, 134, 137, 149, 150, 152, 153, 154, 155, 160, 161, 163, 164, 165, 167, 170, 171, 174, 179, 180, 182, 184, 185, 192, 193, 194, 197, 201, 203, 209, 214, 217, 218, 219, 223, 225, 227, 233, 234, 236, 237, 238, 240, 243, 250, 260, 261, 262, 264, 274, 280, 283, 297, 300, 302, 319, 320, 321, 322, 323, 324, 339, 355, 357, 367, 368, 369, 370, 371, 384, 385, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 413, 414, 435, 437, 445, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 464, 467, 472, 474, 475, 479, 483, 487, 493, 494, 495, 499, 500, 502, 504, 505, 506, 524, 527, 530, 531, 532, 535, 536, 542, 545, 560, 570, 572, 574, 578, 585, 599, 601, 602, 603, 608, 610, 616, 617, 622, 623, 625, 627, 635, 642, 645, 646, 647, 649, 654, 655, 660, 667, 668, 670, 671, 672, 674, 677, 682, 690, 700, 710, 724, 727, 729, 736, 740, 741, 748, 749, 750, 751, 752, 753, 770, 790, 792, 803, 805, 806, 807, 813, 824, 825, 826, 828, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 844, 857, 865, 866, 868, 870, 871, 873, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 889, 892, 897, 902, 904, 909, 913, 917, 923, 924, 925, 929, 930, 932, 934, 935, 936, 956, 957, 958, 961, 964, 966, 967, 975], "revert": 9, "abc": [9, 15, 16, 18, 19, 20, 21, 22, 257, 494, 585, 924], "xyz": [9, 15, 16, 18, 19, 20, 21, 22, 257, 480, 486, 585, 910, 916, 954, 975], "f64": [9, 13, 15, 16, 18, 19, 20, 21, 22, 60, 62, 64, 69, 89, 115, 122, 133, 134, 136, 137, 138, 141, 145, 146, 149, 152, 153, 154, 161, 169, 170, 174, 175, 184, 185, 186, 202, 203, 204, 224, 227, 230, 234, 236, 237, 238, 239, 240, 242, 243, 250, 256, 266, 267, 268, 269, 270, 271, 292, 310, 312, 316, 317, 324, 327, 328, 357, 367, 368, 369, 370, 371, 372, 373, 381, 382, 384, 385, 390, 397, 399, 400, 401, 403, 404, 406, 409, 410, 411, 413, 417, 418, 419, 428, 431, 433, 434, 435, 439, 441, 444, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 470, 471, 472, 476, 477, 519, 520, 523, 528, 537, 538, 540, 542, 544, 552, 563, 564, 567, 572, 573, 577, 585, 601, 605, 611, 612, 616, 622, 623, 629, 630, 636, 649, 650, 658, 660, 661, 664, 668, 670, 671, 672, 673, 674, 676, 677, 682, 692, 693, 694, 695, 696, 697, 739, 746, 747, 752, 753, 754, 792, 806, 807, 811, 815, 820, 864, 868, 876, 878, 879, 881, 882, 883, 885, 886, 900, 901, 905, 949, 950, 963, 975, 983], "fmt": [10, 389, 555, 585, 620, 682], "floatfmt": 10, "mix": [10, 504, 506, 754, 934, 936, 975], "control": [10, 29, 120, 250, 608, 682], "how": [10, 29, 51, 68, 71, 89, 92, 101, 140, 169, 221, 222, 250, 281, 282, 311, 325, 390, 438, 448, 578, 585, 606, 622, 657, 682, 708, 709, 738, 755, 975], "float": [10, 29, 39, 40, 69, 115, 117, 118, 119, 122, 124, 137, 142, 145, 170, 186, 194, 200, 242, 250, 280, 281, 312, 313, 314, 315, 327, 328, 357, 367, 368, 369, 370, 371, 376, 381, 384, 385, 390, 393, 396, 397, 399, 400, 401, 406, 409, 413, 417, 428, 433, 434, 435, 441, 444, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 466, 523, 537, 563, 564, 568, 570, 573, 575, 577, 585, 611, 623, 636, 644, 645, 676, 682, 707, 708, 736, 739, 742, 743, 744, 753, 754, 756, 792, 803, 804, 805, 806, 807, 811, 815, 820, 830, 844, 847, 853, 854, 860, 861, 867, 868, 869, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 890, 891, 902, 906, 945, 965, 975, 983], "point": [10, 29, 39, 40, 122, 124, 145, 155, 171, 250, 312, 327, 328, 357, 376, 381, 397, 399, 461, 462, 585, 611, 617, 627, 638, 682, 739, 792, 811, 815, 830, 886, 887, 975], "full": [10, 36, 66, 99, 100, 102, 110, 111, 504, 505, 506, 508, 627, 682, 934, 935, 936, 938], "format": [10, 13, 17, 27, 29, 98, 99, 100, 110, 115, 143, 153, 167, 176, 193, 210, 248, 250, 356, 359, 493, 504, 505, 506, 508, 532, 609, 615, 631, 663, 682, 794, 923, 934, 935, 936, 938, 974], "number": [10, 11, 12, 14, 22, 23, 27, 29, 33, 60, 80, 86, 88, 90, 92, 96, 97, 99, 100, 103, 110, 113, 120, 122, 123, 125, 126, 127, 132, 133, 142, 143, 145, 146, 158, 167, 168, 171, 172, 179, 180, 194, 199, 200, 204, 206, 217, 221, 224, 233, 235, 244, 250, 275, 282, 287, 295, 299, 301, 303, 309, 318, 324, 325, 337, 340, 345, 347, 357, 363, 364, 366, 369, 370, 371, 375, 377, 383, 387, 397, 399, 407, 408, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 465, 466, 468, 477, 489, 492, 494, 500, 501, 516, 522, 528, 542, 543, 558, 567, 572, 573, 576, 577, 585, 599, 601, 609, 610, 611, 612, 619, 626, 635, 643, 644, 647, 650, 652, 654, 658, 667, 669, 678, 682, 709, 714, 722, 726, 728, 735, 741, 752, 755, 768, 771, 780, 782, 792, 798, 799, 801, 804, 805, 806, 807, 810, 812, 819, 830, 846, 857, 858, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 894, 895, 898, 906, 919, 922, 924, 930, 931, 946, 960, 965, 975, 983], "int": [11, 12, 14, 22, 23, 27, 29, 33, 37, 62, 89, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 133, 142, 145, 146, 148, 157, 158, 159, 161, 166, 167, 168, 170, 172, 173, 174, 178, 179, 180, 190, 192, 194, 198, 199, 200, 202, 204, 205, 206, 207, 212, 215, 217, 221, 224, 226, 228, 235, 244, 250, 257, 280, 281, 282, 286, 287, 295, 296, 299, 300, 301, 303, 309, 313, 314, 315, 324, 325, 369, 370, 371, 375, 376, 377, 383, 386, 387, 408, 437, 439, 441, 445, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 468, 473, 477, 485, 490, 493, 494, 496, 498, 500, 501, 510, 516, 517, 518, 522, 528, 530, 535, 542, 543, 548, 549, 550, 556, 558, 564, 566, 567, 570, 572, 573, 574, 575, 576, 577, 585, 599, 601, 610, 611, 612, 619, 623, 626, 635, 643, 644, 647, 648, 650, 652, 653, 654, 658, 659, 662, 669, 678, 682, 698, 699, 707, 708, 709, 713, 714, 722, 723, 726, 727, 728, 735, 736, 740, 741, 742, 743, 744, 752, 755, 804, 805, 806, 807, 810, 811, 812, 818, 819, 820, 843, 845, 846, 853, 857, 858, 860, 861, 862, 863, 864, 867, 870, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 894, 895, 898, 903, 906, 915, 920, 923, 924, 926, 928, 930, 931, 940, 945, 946, 947, 948, 955, 960, 965, 975, 983], "size": [12, 33, 99, 100, 120, 121, 122, 124, 126, 142, 155, 221, 250, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 535, 585, 617, 647, 682, 804, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 975, 983], "overwrit": [12, 28, 86, 88, 89, 90, 92, 99, 100, 110, 130, 250, 610, 682], "chunk": [12, 33, 96, 99, 100, 108, 110, 112, 113, 114, 122, 124, 144, 168, 179, 250, 263, 446, 585, 647, 682, 690, 740, 816, 857, 871, 952, 975], "stream": [12, 30, 67, 154, 219, 250, 603, 608, 610, 616, 627, 631, 635, 645, 646, 647, 655, 682], "engin": [12, 28, 101, 126, 131, 154, 219, 232, 250, 616, 627, 631, 655, 666, 682, 691, 975], "By": [12, 99, 100, 103, 110, 170, 204, 224, 250, 477, 493, 528, 542, 560, 567, 572, 573, 577, 585, 623, 650, 658, 682, 906, 923, 957, 965, 975], "determin": [12, 29, 58, 60, 68, 89, 92, 99, 100, 103, 108, 110, 114, 131, 149, 155, 156, 167, 168, 218, 223, 250, 301, 311, 339, 355, 416, 424, 448, 452, 453, 454, 455, 456, 458, 459, 460, 472, 585, 617, 618, 682, 728, 738, 770, 790, 820, 851, 902, 975], "schema": [12, 51, 61, 62, 63, 68, 71, 81, 82, 84, 86, 88, 89, 90, 92, 93, 99, 100, 105, 109, 110, 113, 120, 122, 131, 133, 134, 141, 142, 177, 180, 250, 301, 424, 530, 574, 585, 601, 602, 607, 627, 632, 663, 666, 682, 745, 975], "thread": [12, 27, 96, 99, 100, 101, 126, 250, 264, 283, 585, 710], "pool": [12, 126], "For": [12, 29, 101, 102, 103, 111, 144, 156, 169, 170, 232, 250, 301, 310, 369, 370, 371, 425, 447, 472, 545, 554, 555, 585, 618, 623, 666, 682, 690, 805, 806, 807, 872, 902, 957, 975], "some": [12, 25, 29, 89, 99, 100, 110, 140, 250, 606, 682, 831, 975, 983], "dataset": [12, 99, 100, 110, 115, 404, 585, 596, 627, 682, 844, 975], "esp": 12, "when": [12, 14, 16, 20, 29, 33, 51, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 94, 99, 100, 101, 104, 108, 110, 111, 112, 113, 122, 124, 131, 132, 141, 142, 144, 146, 149, 155, 183, 192, 196, 203, 211, 217, 219, 250, 313, 314, 315, 355, 369, 370, 371, 377, 414, 416, 425, 474, 475, 491, 497, 503, 504, 536, 545, 554, 585, 599, 612, 617, 627, 641, 647, 649, 654, 655, 682, 690, 742, 743, 744, 790, 804, 805, 806, 807, 812, 851, 890, 891, 921, 927, 933, 934, 953, 975], "have": [12, 25, 29, 60, 71, 87, 99, 100, 103, 122, 124, 144, 167, 187, 193, 210, 250, 324, 369, 370, 371, 425, 445, 504, 506, 585, 631, 645, 662, 682, 690, 752, 805, 806, 807, 817, 870, 934, 936, 975, 983], "larg": [12, 155, 156, 170, 223, 250, 352, 356, 362, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 623, 682, 787, 791, 797], "element": [12, 22, 97, 121, 124, 127, 132, 166, 184, 192, 204, 217, 224, 250, 264, 266, 267, 268, 269, 270, 271, 281, 283, 284, 309, 316, 317, 319, 320, 321, 322, 323, 324, 373, 386, 395, 410, 411, 439, 445, 448, 463, 469, 470, 471, 476, 477, 500, 501, 519, 520, 522, 528, 542, 567, 572, 573, 577, 585, 599, 650, 654, 658, 682, 691, 692, 693, 694, 695, 696, 697, 708, 710, 711, 735, 741, 746, 747, 748, 749, 750, 751, 752, 808, 813, 819, 831, 843, 846, 848, 849, 864, 870, 888, 899, 900, 901, 905, 906, 930, 931, 946, 949, 950, 955, 960, 961, 965, 975], "too": [12, 155, 156, 170, 223, 250, 352, 356, 362, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 623, 682, 787, 791, 797], "optimist": 12, "lead": [12, 93, 115, 250, 464, 491, 503, 510, 517, 527, 542, 572, 585, 627, 666, 682, 892, 921, 933, 940, 975], "out": [12, 93, 116, 156, 250, 286, 300, 305, 393, 396, 479, 481, 578, 585, 618, 646, 647, 682, 713, 727, 731, 909, 911], "memori": [12, 33, 68, 86, 87, 90, 91, 92, 99, 100, 104, 108, 110, 112, 113, 114, 130, 131, 144, 201, 232, 250, 446, 467, 585, 647, 666, 682, 690, 691, 871, 896, 897, 975], "error": [12, 72, 99, 100, 110, 155, 156, 170, 192, 223, 250, 288, 300, 305, 310, 352, 356, 362, 403, 452, 453, 454, 455, 456, 458, 459, 460, 479, 481, 487, 488, 504, 505, 506, 508, 585, 617, 618, 623, 666, 682, 715, 727, 731, 736, 787, 791, 797, 909, 911, 917, 918, 934, 935, 936, 938, 975], "row": [12, 17, 22, 27, 29, 31, 33, 60, 61, 63, 78, 80, 85, 89, 90, 92, 93, 99, 100, 103, 104, 108, 110, 112, 113, 114, 117, 120, 122, 131, 132, 133, 140, 144, 147, 149, 153, 155, 157, 158, 163, 165, 166, 167, 168, 170, 171, 172, 176, 180, 194, 202, 206, 207, 210, 212, 217, 219, 221, 222, 228, 232, 235, 244, 250, 264, 275, 284, 374, 387, 408, 439, 449, 473, 475, 484, 516, 536, 545, 546, 554, 558, 562, 565, 569, 576, 578, 585, 599, 601, 603, 606, 610, 613, 614, 617, 619, 623, 624, 626, 627, 631, 647, 648, 652, 653, 654, 655, 657, 662, 666, 669, 678, 682, 690, 711, 809, 819, 843, 864, 874, 903, 914, 946, 975, 983], "per": [12, 27, 29, 120, 122, 132, 153, 180, 181, 203, 217, 239, 241, 242, 250, 264, 283, 286, 300, 475, 536, 585, 599, 649, 654, 673, 675, 676, 682, 710, 713, 727], "everi": [12, 99, 100, 110, 155, 207, 210, 223, 250, 277, 278, 282, 284, 286, 287, 296, 299, 319, 320, 321, 322, 323, 324, 356, 362, 374, 484, 518, 545, 546, 585, 610, 617, 653, 682, 704, 705, 709, 711, 713, 714, 723, 726, 748, 749, 750, 751, 752, 791, 797, 809, 914, 948, 975], "process": [12, 27, 126, 250, 646, 647, 682], "liter": [13, 17, 65, 70, 103, 123, 124, 125, 153, 167, 173, 174, 178, 179, 182, 192, 193, 196, 205, 209, 222, 227, 250, 260, 262, 304, 330, 368, 375, 382, 384, 385, 391, 403, 406, 413, 429, 431, 435, 441, 446, 479, 494, 495, 513, 523, 531, 532, 535, 538, 540, 541, 547, 548, 549, 560, 562, 565, 570, 574, 575, 585, 612, 641, 657, 660, 682, 688, 689, 730, 761, 810, 824, 890, 891, 909, 924, 925, 975], "left": [13, 70, 117, 118, 155, 156, 169, 170, 222, 250, 369, 370, 371, 390, 391, 452, 453, 454, 455, 456, 458, 459, 460, 463, 490, 510, 521, 538, 545, 546, 554, 569, 578, 585, 617, 618, 622, 623, 657, 682, 805, 806, 807, 824, 888, 920, 940, 959, 975], "center": [13, 29, 250, 369, 370, 371, 451, 452, 453, 454, 455, 456, 458, 459, 460, 585, 805, 806, 807, 876, 877, 878, 879, 880, 881, 883, 884, 885, 975], "right": [13, 15, 29, 70, 99, 100, 117, 118, 155, 156, 169, 170, 250, 369, 370, 371, 391, 452, 453, 454, 455, 456, 458, 459, 460, 463, 472, 496, 538, 585, 617, 618, 622, 623, 682, 805, 806, 807, 824, 888, 902, 926, 975], "cell": 13, "align": [13, 29, 60, 250, 510, 940], "keyerror": [13, 17], "recognis": [13, 17, 119], "column_abc": 13, "column_xyz": 13, "visibl": [14, 142, 250, 804, 975], "eg": [14, 22, 29, 250, 356, 504, 506, 523, 585, 934, 936], "low": [14, 126], "rang": [14, 29, 69, 70, 101, 137, 142, 155, 168, 250, 334, 347, 353, 354, 356, 362, 363, 390, 535, 540, 548, 549, 585, 617, 682, 753, 754, 765, 782, 788, 789, 791, 797, 798, 804, 864, 868, 975], "100": [14, 29, 89, 92, 99, 100, 110, 113, 250, 510, 535, 682, 877, 878, 880, 975, 983], "print": [14, 16, 22, 100, 116, 141, 153, 154, 168, 171, 212, 229, 250, 389, 550, 585, 620, 682, 831, 876, 955, 975, 983], "98": [14, 161, 250, 309, 474, 517, 522, 585], "99": [14, 29, 145, 146, 161, 164, 250, 258, 309, 375, 377, 474, 517, 522, 585, 611, 612, 682, 803, 810, 975], "tbl_col": 14, "10": [14, 26, 27, 29, 30, 33, 60, 68, 69, 70, 93, 101, 110, 122, 124, 134, 144, 152, 155, 156, 158, 160, 161, 162, 179, 183, 185, 189, 190, 196, 206, 227, 230, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 250, 263, 272, 273, 274, 276, 282, 287, 295, 296, 299, 313, 318, 320, 323, 325, 327, 328, 330, 348, 349, 355, 356, 362, 365, 386, 387, 390, 395, 403, 407, 408, 410, 439, 453, 473, 510, 516, 530, 538, 545, 551, 554, 556, 558, 560, 561, 567, 572, 576, 585, 603, 617, 618, 619, 621, 626, 634, 635, 641, 647, 651, 652, 660, 664, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 682, 691, 709, 714, 722, 723, 726, 742, 753, 755, 761, 790, 797, 800, 803, 819, 831, 846, 848, 864, 890, 891, 946, 975, 983], "95": [14, 258, 585], "96": [14, 258, 585], "97": [14, 161, 250, 258, 585], "move": [15, 369, 370, 371, 452, 453, 455, 459, 585, 805, 806, 807, 877, 878, 880, 884, 975], "inlin": 15, "parenthes": 15, "below": [16, 29, 102, 111, 140, 250, 390, 578, 585, 606, 682], "ascii_ful": 17, "ascii_full_condens": 17, "ascii_no_bord": 17, "ascii_borders_onli": 17, "ascii_borders_only_condens": 17, "ascii_horizontal_onli": 17, "ascii_markdown": 17, "utf8_ful": [17, 60, 93], "utf8_full_condens": [17, 93], "utf8_no_bord": 17, "utf8_borders_onli": 17, "utf8_horizontal_onli": 17, "noth": [17, 480, 485, 486, 488, 910, 915, 916, 918], "none": [17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 46, 50, 60, 69, 70, 71, 86, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 131, 133, 137, 140, 145, 146, 153, 155, 156, 157, 162, 166, 169, 170, 171, 174, 176, 180, 181, 184, 192, 194, 196, 200, 202, 203, 209, 211, 214, 218, 219, 220, 221, 222, 223, 227, 230, 250, 259, 263, 264, 276, 286, 296, 301, 303, 313, 314, 315, 318, 320, 323, 327, 328, 355, 356, 362, 369, 370, 371, 372, 375, 376, 377, 383, 386, 390, 391, 397, 398, 399, 400, 401, 407, 414, 416, 436, 439, 445, 446, 451, 452, 453, 454, 455, 456, 458, 459, 460, 462, 466, 467, 468, 469, 473, 474, 478, 479, 482, 483, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 521, 531, 533, 535, 538, 541, 543, 549, 550, 552, 553, 560, 561, 562, 565, 570, 571, 573, 574, 577, 578, 585, 601, 602, 606, 611, 612, 617, 618, 621, 622, 623, 625, 627, 631, 641, 644, 645, 646, 647, 648, 649, 655, 656, 657, 660, 661, 663, 664, 666, 682, 691, 698, 699, 713, 723, 728, 741, 742, 753, 754, 756, 772, 773, 774, 779, 790, 791, 797, 802, 803, 805, 806, 807, 810, 811, 812, 814, 817, 818, 820, 822, 823, 824, 833, 836, 837, 840, 843, 844, 851, 852, 853, 854, 855, 859, 868, 869, 870, 876, 877, 878, 879, 880, 881, 883, 884, 885, 887, 891, 893, 895, 898, 899, 902, 903, 906, 908, 909, 912, 913, 917, 918, 919, 920, 921, 922, 923, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 938, 951, 954, 955, 958, 959, 965, 966, 975], "rounded_corn": 17, "style": [17, 29, 184, 250], "border": 17, "line": [17, 29, 99, 100, 103, 110, 153, 163, 165, 250], "includ": [17, 25, 27, 29, 66, 102, 111, 122, 132, 137, 142, 155, 217, 218, 221, 250, 357, 391, 499, 500, 545, 585, 599, 617, 654, 682, 754, 792, 804, 824, 929, 930, 966, 975], "divid": [17, 356, 362, 369, 370, 371, 404, 585, 791, 797, 805, 806, 807, 844, 975], "same": [17, 29, 51, 60, 67, 71, 104, 110, 120, 131, 138, 154, 203, 219, 227, 230, 232, 250, 256, 263, 362, 374, 420, 423, 438, 451, 452, 453, 454, 455, 456, 458, 459, 460, 475, 512, 539, 585, 605, 616, 627, 649, 655, 660, 664, 666, 682, 686, 690, 691, 761, 809, 876, 877, 878, 879, 880, 881, 883, 884, 885, 967, 975], "dens": [17, 153, 250, 445, 585, 870, 975], "space": 17, "horizont": [17, 68, 149, 160, 221, 250, 531, 532, 540, 541, 545, 546, 547, 551, 554, 562, 565, 569, 575], "markdown": 17, "compat": [17, 29, 33, 101, 250, 479, 480, 485, 486, 494, 495, 647, 682], "No": 17, "appli": [17, 27, 29, 68, 110, 119, 122, 124, 149, 183, 250, 334, 337, 339, 340, 341, 343, 345, 347, 350, 353, 354, 357, 363, 364, 366, 370, 371, 414, 440, 451, 452, 453, 455, 459, 504, 505, 506, 508, 530, 535, 545, 546, 554, 561, 569, 585, 619, 626, 627, 634, 682, 763, 764, 765, 768, 770, 771, 775, 777, 780, 782, 785, 788, 789, 792, 795, 798, 799, 801, 806, 807, 876, 877, 878, 880, 884, 934, 935, 936, 938, 975], "round": [17, 29, 62, 93, 250, 312, 381, 519, 585, 739, 815, 975], "corner": [17, 93], "op": [17, 124, 250, 448, 585, 682, 975], "The": [17, 28, 29, 33, 45, 52, 60, 66, 86, 88, 89, 90, 92, 96, 99, 101, 108, 110, 126, 131, 139, 141, 153, 154, 155, 156, 157, 162, 167, 170, 177, 182, 192, 193, 196, 220, 223, 227, 230, 232, 250, 300, 301, 303, 304, 305, 306, 334, 347, 352, 353, 356, 362, 363, 372, 375, 383, 386, 414, 438, 445, 448, 451, 452, 453, 454, 455, 456, 458, 459, 460, 469, 472, 478, 481, 482, 487, 489, 490, 491, 496, 497, 503, 504, 510, 539, 552, 556, 571, 574, 578, 579, 581, 585, 586, 587, 591, 592, 593, 617, 618, 619, 621, 623, 626, 627, 632, 635, 641, 647, 656, 660, 664, 666, 682, 691, 727, 730, 731, 732, 741, 765, 782, 787, 788, 791, 797, 798, 810, 818, 823, 870, 876, 877, 878, 879, 880, 881, 883, 884, 885, 899, 902, 908, 911, 912, 917, 919, 920, 921, 926, 927, 933, 934, 940, 969, 971, 975, 976, 979, 980, 981, 983], "one": [17, 28, 29, 60, 78, 86, 88, 89, 90, 91, 92, 123, 124, 125, 128, 146, 147, 153, 154, 155, 156, 167, 176, 184, 192, 193, 197, 216, 231, 250, 258, 377, 403, 411, 451, 474, 517, 575, 578, 585, 612, 613, 616, 617, 618, 631, 642, 661, 665, 682, 690, 812, 840, 849, 876, 941, 975], "more": [17, 29, 31, 33, 60, 85, 86, 87, 88, 89, 90, 91, 92, 102, 108, 111, 122, 124, 128, 131, 136, 137, 167, 171, 176, 180, 192, 193, 194, 219, 232, 250, 261, 264, 302, 313, 314, 315, 403, 404, 411, 414, 437, 462, 472, 524, 575, 578, 585, 631, 647, 655, 666, 682, 691, 729, 742, 743, 744, 754, 840, 844, 887, 902, 961, 975, 983], "semigraph": 17, "box": [17, 131, 250], "draw": [17, 22, 23, 121, 983], "found": [17, 27, 73, 82, 84, 89, 93, 141, 222, 250, 463, 488, 504, 506, 585, 657, 682, 888, 918, 934, 936, 975], "unicod": 17, "block": [17, 154, 219, 250, 616, 638, 655, 662, 682, 890, 891, 975], "http": [17, 29, 87, 101, 130, 136, 250, 485, 915], "en": [17, 29, 250], "wikipedia": 17, "org": [17, 87, 101, 130, 136, 250], "wiki": 17, "drawing_charact": 17, "box_draw": 17, "hide": [18, 19, 20, 21, 29, 250], "etc": [18, 29, 99, 102, 104, 108, 111, 112, 114, 250, 535, 890, 891, 975], "inform": [20, 66, 102, 111, 136, 250, 313, 314, 315, 404, 472, 585, 635, 682, 742, 743, 744, 844, 902, 975], "separ": [21, 27, 94, 96, 99, 100, 110, 182, 184, 211, 218, 220, 250, 264, 284, 288, 484, 541, 545, 546, 585, 656, 682, 711, 715, 914, 944, 953, 975], "between": [21, 68, 119, 120, 122, 124, 186, 242, 250, 288, 310, 326, 391, 439, 444, 456, 478, 542, 544, 567, 568, 572, 585, 636, 676, 682, 715, 736, 756, 824, 864, 869, 881, 908, 975], "set_tbl_column_data_type_inlin": 21, "max": [22, 29, 33, 126, 137, 146, 154, 155, 156, 184, 250, 313, 314, 320, 377, 438, 445, 452, 464, 501, 585, 612, 616, 617, 618, 647, 682, 728, 742, 743, 748, 754, 812, 870, 877, 892, 931, 975], "both": [22, 27, 51, 70, 101, 155, 156, 169, 170, 177, 192, 250, 263, 391, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 622, 623, 632, 682, 824, 833, 975], "tbl_row": 22, "width": [23, 29, 99, 100, 250, 490, 496, 510, 682, 920, 926, 940], "char": [23, 51, 71, 492, 922], "enabl": [24, 71, 196, 227, 250, 464, 585, 641, 660, 682, 892, 975], "addit": [24, 29, 89, 102, 111, 120, 138, 143, 154, 182, 196, 197, 203, 220, 227, 230, 250, 257, 372, 375, 438, 475, 531, 532, 536, 538, 539, 540, 541, 547, 552, 562, 565, 571, 574, 575, 585, 605, 609, 616, 641, 642, 649, 656, 660, 664, 682, 810, 975], "verbos": [24, 128], "debug": [24, 603, 610, 627, 682, 983], "log": [24, 62, 309, 367, 411, 431, 441, 522, 585, 735, 803, 960, 975], "if_set": 25, "env_onli": 25, "dict": [25, 29, 33, 61, 63, 66, 86, 88, 89, 90, 91, 92, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 114, 122, 167, 182, 188, 192, 193, 195, 209, 210, 250, 416, 585, 638, 640, 682, 851, 975], "show": [25, 29, 140, 153, 171, 181, 250, 606, 635, 645, 682], "variabl": [25, 94, 123, 126, 176, 211, 250, 631, 682, 953, 975], "restrict": [25, 501, 931], "dictionari": [25, 29, 86, 88, 89, 90, 92, 99, 100, 105, 109, 110, 167, 182, 192, 193, 209, 210, 250, 416, 585, 682, 754, 851, 975], "those": [25, 29, 99, 250, 445, 585, 870, 975], "been": [25, 29, 69, 94, 250, 445, 585, 870, 975], "set_fmt_float": 25, "directli": [25, 122, 124, 128, 369, 370, 371, 585, 682, 805, 806, 807, 975, 983], "via": [25, 99, 100, 103, 110, 112, 113, 114, 167, 193, 250, 264, 585], "set_stat": 25, "all_stat": 25, "file": [26, 27, 30, 31, 32, 33, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 144, 250, 610, 637, 646, 647, 663, 682, 690, 975], "binaryio": [26, 30, 98, 99, 103, 104, 105, 108, 109, 250], "bytesio": [26, 27, 29, 30, 33, 98, 99, 100, 103, 104, 108, 250], "path": [26, 27, 29, 30, 31, 32, 33, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 250, 464, 488, 585, 637, 646, 647, 663, 682, 892, 918, 975], "compress": [26, 30, 33, 250, 646, 647, 682], "avrocompress": [26, 250], "uncompress": [26, 30, 33, 104, 112, 250, 647, 682], "write": [26, 27, 28, 29, 30, 31, 33, 100, 104, 250, 313, 314, 315, 585, 625, 645, 647, 663, 682, 742, 743, 744, 975], "apach": [26, 33, 98, 101, 250], "avro": [26, 98, 250, 596], "should": [26, 27, 29, 30, 31, 32, 33, 86, 88, 90, 92, 94, 97, 102, 110, 119, 120, 124, 127, 130, 131, 138, 155, 156, 167, 170, 192, 193, 210, 211, 220, 223, 232, 250, 258, 264, 283, 311, 324, 352, 356, 362, 365, 372, 397, 399, 451, 452, 453, 454, 455, 456, 458, 459, 460, 463, 472, 539, 552, 559, 560, 578, 585, 605, 617, 618, 622, 623, 627, 645, 646, 647, 656, 663, 666, 682, 691, 710, 738, 752, 787, 791, 797, 800, 876, 877, 878, 879, 880, 881, 883, 884, 885, 888, 902, 975], "written": [26, 27, 29, 30, 31, 32, 33, 250, 646, 647, 663, 682], "snappi": [26, 33, 250, 647, 682], "deflat": [26, 250], "import": [26, 27, 29, 30, 33, 36, 60, 70, 86, 90, 91, 110, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 137, 153, 155, 168, 170, 214, 221, 223, 250, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 550, 617, 623, 627, 682, 746, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 828, 832, 834, 835, 840, 876, 900, 949, 975, 983], "pathlib": [26, 27, 30, 33, 110, 250], "foo": [26, 27, 30, 31, 32, 33, 94, 131, 135, 136, 138, 139, 140, 141, 144, 147, 148, 149, 150, 151, 152, 157, 158, 159, 160, 161, 162, 164, 169, 173, 174, 175, 178, 181, 184, 186, 188, 189, 190, 192, 194, 195, 196, 198, 199, 200, 202, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 218, 219, 220, 224, 225, 226, 229, 250, 259, 280, 285, 286, 289, 290, 313, 314, 315, 352, 387, 389, 408, 449, 465, 466, 478, 480, 482, 484, 486, 491, 497, 499, 501, 503, 507, 509, 516, 518, 531, 534, 535, 537, 539, 542, 543, 544, 553, 557, 558, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 576, 577, 578, 585, 604, 605, 606, 607, 613, 620, 621, 622, 638, 640, 641, 655, 656, 659, 661, 663, 682, 715, 742, 787, 874, 910, 912, 914, 916, 931, 975], "bar": [26, 27, 30, 31, 32, 33, 94, 131, 135, 136, 138, 139, 140, 141, 144, 147, 148, 149, 150, 151, 152, 158, 160, 161, 162, 164, 169, 173, 174, 175, 178, 181, 184, 186, 188, 189, 190, 192, 194, 195, 196, 199, 200, 202, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 219, 220, 224, 225, 229, 250, 259, 290, 389, 472, 482, 484, 499, 501, 531, 534, 537, 539, 542, 543, 544, 553, 558, 562, 563, 564, 565, 566, 567, 571, 572, 573, 576, 577, 578, 585, 604, 605, 606, 607, 613, 620, 621, 622, 638, 640, 641, 655, 656, 659, 663, 682, 715, 902, 912, 914, 931, 975], "ham": [26, 27, 30, 33, 94, 135, 136, 138, 139, 140, 141, 147, 148, 150, 157, 158, 160, 169, 173, 174, 175, 178, 181, 186, 188, 190, 192, 194, 195, 196, 199, 200, 202, 204, 205, 206, 211, 212, 213, 214, 215, 219, 224, 225, 250, 539, 604, 605, 606, 607, 613, 622, 638, 640, 641, 655, 661, 682], "d": [26, 27, 30, 33, 51, 68, 71, 89, 115, 137, 153, 157, 158, 161, 169, 206, 208, 221, 225, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 250, 257, 336, 359, 391, 440, 467, 480, 486, 500, 504, 505, 506, 538, 556, 585, 622, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 682, 767, 794, 824, 910, 916, 930, 934, 935, 936, 975], "e": [26, 27, 30, 33, 51, 71, 87, 99, 100, 103, 104, 108, 112, 114, 137, 153, 155, 156, 158, 170, 206, 208, 221, 223, 250, 257, 264, 352, 356, 362, 367, 372, 391, 409, 416, 452, 453, 454, 455, 456, 458, 459, 460, 467, 472, 552, 578, 585, 617, 618, 623, 625, 638, 682, 787, 791, 797, 803, 824, 889, 902, 957, 975], "dirpath": [26, 27, 30, 33, 110, 250], "new_fil": [26, 27, 30, 33, 250], "has_head": [27, 29, 99, 100, 103, 110, 250], "quot": [27, 99, 100, 110, 250], "batch_siz": [27, 99, 100, 113, 250], "1024": [27, 33, 99, 100, 113, 250, 647, 682], "datetime_format": [27, 250], "date_format": [27, 250, 359], "time_format": [27, 250], "float_precis": [27, 29, 250], "null_valu": [27, 99, 100, 110, 250], "comma": [27, 250], "csv": [27, 99, 100, 103, 110, 250, 596, 646, 647, 682], "result": [27, 31, 32, 60, 90, 92, 101, 102, 110, 112, 114, 115, 124, 144, 155, 156, 180, 200, 214, 223, 230, 250, 369, 370, 371, 375, 404, 438, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 464, 466, 499, 500, 506, 523, 535, 545, 546, 561, 585, 600, 617, 618, 627, 635, 644, 646, 647, 663, 664, 682, 690, 805, 806, 807, 844, 874, 876, 877, 878, 879, 880, 881, 883, 884, 885, 892, 895, 929, 930, 936, 957, 975, 983], "If": [27, 29, 30, 31, 32, 33, 51, 65, 66, 69, 70, 86, 87, 88, 89, 90, 91, 92, 94, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 123, 130, 131, 132, 140, 144, 153, 155, 156, 158, 166, 167, 170, 172, 176, 180, 193, 194, 202, 206, 210, 211, 213, 217, 218, 219, 221, 222, 250, 264, 296, 301, 313, 314, 315, 330, 348, 349, 355, 378, 404, 414, 416, 445, 447, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 468, 472, 473, 487, 489, 491, 492, 497, 498, 499, 500, 501, 503, 504, 505, 506, 508, 531, 532, 533, 535, 542, 543, 545, 547, 554, 560, 562, 565, 570, 572, 574, 575, 578, 585, 599, 606, 608, 617, 618, 622, 623, 627, 631, 638, 647, 648, 654, 655, 657, 663, 666, 682, 690, 691, 723, 742, 743, 744, 753, 761, 783, 784, 790, 817, 819, 820, 843, 844, 846, 868, 870, 872, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 892, 898, 902, 903, 917, 919, 921, 922, 927, 928, 929, 930, 931, 933, 934, 935, 936, 938, 946, 952, 957, 966, 975], "instead": [27, 31, 32, 65, 70, 97, 99, 108, 122, 127, 131, 155, 156, 167, 170, 180, 182, 192, 193, 196, 214, 223, 227, 250, 274, 352, 356, 362, 452, 453, 454, 455, 456, 458, 459, 460, 489, 491, 497, 503, 535, 562, 565, 570, 574, 585, 611, 617, 618, 623, 641, 660, 663, 682, 700, 787, 791, 797, 890, 891, 919, 921, 927, 933, 958, 975], "whether": [27, 70, 90, 92, 124, 197, 250, 339, 355, 357, 421, 422, 464, 585, 627, 642, 682, 770, 790, 792], "header": [27, 29, 33, 93, 99, 100, 103, 110, 141, 184, 218, 250, 647, 682], "field": [27, 52, 82, 84, 89, 220, 250, 301, 416, 487, 500, 501, 512, 545, 546, 561, 574, 585, 656, 682, 728, 930, 931, 943, 944], "symbol": [27, 250], "byte": [27, 99, 100, 103, 104, 105, 108, 109, 110, 142, 250, 304, 307, 308, 489, 492, 647, 682, 730, 733, 734, 804, 919, 922, 975], "specifi": [27, 29, 60, 70, 73, 82, 84, 103, 122, 132, 138, 142, 143, 146, 154, 182, 192, 196, 197, 203, 217, 220, 227, 230, 250, 369, 370, 371, 372, 377, 416, 438, 448, 475, 490, 496, 531, 532, 536, 538, 539, 540, 541, 547, 552, 562, 565, 571, 574, 575, 585, 599, 605, 609, 612, 616, 641, 642, 649, 654, 656, 660, 664, 682, 804, 805, 806, 807, 812, 920, 926, 975], "defin": [27, 29, 36, 70, 119, 120, 122, 131, 155, 156, 180, 183, 232, 250, 264, 300, 391, 440, 452, 453, 454, 455, 456, 458, 459, 460, 533, 560, 574, 585, 617, 618, 634, 666, 682, 691, 727, 824, 975], "chrono": [27, 250, 359, 504, 505, 506, 508, 794, 934, 935, 936, 938], "rust": [27, 33, 79, 104, 108, 131, 232, 250, 666, 691, 975], "crate": [27, 250, 479, 480, 485, 486, 494, 495, 504, 505, 506, 508, 934, 935, 936, 938], "fraction": [27, 117, 118, 194, 250, 357, 439, 462, 504, 506, 585, 792, 864, 887, 934, 936, 975], "second": [27, 70, 121, 155, 156, 170, 223, 250, 352, 356, 362, 452, 453, 454, 455, 456, 458, 459, 460, 504, 506, 549, 550, 578, 585, 617, 618, 623, 682, 787, 791, 797, 934, 936, 983], "precis": [27, 29, 37, 167, 193, 210, 250, 329, 760], "infer": [27, 86, 88, 89, 90, 91, 92, 99, 100, 103, 110, 113, 131, 250, 449, 487, 504, 505, 506, 508, 585, 682, 874, 917, 934, 935, 936, 938, 975], "maximum": [27, 99, 100, 110, 120, 121, 122, 124, 173, 250, 277, 417, 433, 445, 562, 585, 628, 682, 704, 742, 772, 852, 860, 865, 870, 975], "timeunit": [27, 36, 38, 70, 250, 329, 330, 361, 365, 506, 760, 761, 796, 800, 936], "frame": [27, 28, 29, 60, 89, 117, 122, 131, 133, 167, 168, 177, 180, 183, 192, 193, 214, 221, 250, 601, 632, 634, 682, 741, 975, 983], "datetim": [27, 29, 60, 70, 93, 122, 137, 153, 155, 156, 168, 170, 223, 250, 280, 281, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 452, 453, 454, 455, 456, 458, 459, 460, 504, 506, 521, 550, 556, 560, 585, 617, 618, 623, 682, 707, 708, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 840, 860, 861, 891, 934, 936, 959, 975], "place": [27, 132, 139, 160, 161, 189, 199, 200, 203, 217, 225, 250, 274, 288, 295, 465, 466, 474, 585, 599, 643, 644, 649, 654, 682, 700, 715, 722, 871, 873, 894, 895, 904, 975], "float64": [27, 29, 89, 97, 99, 122, 127, 141, 142, 149, 195, 214, 227, 250, 266, 267, 268, 269, 270, 271, 310, 316, 317, 357, 372, 397, 399, 470, 471, 519, 520, 539, 552, 585, 607, 640, 660, 682, 792, 958, 963, 975], "datatyp": [27, 31, 45, 58, 86, 88, 89, 90, 92, 95, 97, 103, 105, 109, 124, 127, 141, 143, 149, 195, 250, 284, 310, 372, 467, 484, 521, 539, 552, 560, 585, 596, 609, 640, 663, 682, 691, 711, 736, 754, 833, 838, 840, 842, 896, 914, 959, 975], "repres": [27, 46, 58, 70, 86, 88, 90, 91, 92, 204, 224, 250, 397, 399, 477, 528, 531, 539, 542, 552, 560, 567, 572, 573, 577, 585, 650, 658, 682, 891, 906, 965, 975], "null": [27, 60, 68, 89, 99, 100, 110, 115, 130, 132, 133, 137, 140, 146, 149, 150, 162, 169, 174, 175, 181, 184, 186, 199, 200, 203, 204, 205, 209, 214, 217, 220, 222, 224, 227, 250, 259, 263, 264, 274, 282, 285, 286, 289, 295, 300, 301, 303, 305, 313, 314, 315, 318, 320, 323, 325, 327, 328, 335, 338, 342, 344, 346, 351, 358, 369, 370, 371, 372, 375, 376, 377, 378, 383, 390, 397, 398, 399, 400, 401, 407, 416, 436, 439, 446, 451, 452, 453, 454, 455, 456, 458, 459, 460, 465, 466, 467, 469, 474, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 492, 493, 496, 498, 500, 501, 502, 510, 511, 512, 521, 529, 531, 538, 540, 541, 552, 560, 574, 578, 585, 599, 601, 606, 612, 621, 622, 643, 644, 649, 654, 656, 657, 660, 661, 663, 682, 691, 700, 709, 722, 727, 728, 731, 741, 742, 755, 758, 766, 769, 776, 778, 781, 786, 793, 805, 806, 807, 810, 812, 817, 836, 837, 863, 864, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 894, 895, 899, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 922, 923, 926, 928, 930, 931, 932, 955, 957, 958, 959, 966, 975, 983], "empti": [27, 77, 89, 99, 100, 103, 110, 133, 134, 164, 176, 250, 560, 571, 601, 602, 631, 682, 741, 745, 827, 975], "table_nam": [28, 29, 250], "connection_uri": [28, 101, 250], "if_exist": [28, 250], "dbwritemod": [28, 250], "fail": [28, 87, 102, 104, 111, 130, 219, 250, 275, 301, 504, 505, 506, 508, 585, 655, 682, 691, 934, 935, 936, 938, 975], "dbwriteengin": [28, 250], "sqlalchemi": [28, 250], "databas": [28, 101, 250, 596], "append": [28, 122, 144, 169, 170, 250, 446, 578, 585, 622, 623, 682, 975], "creat": [28, 29, 69, 70, 86, 90, 92, 111, 120, 121, 122, 123, 124, 125, 133, 134, 155, 156, 181, 184, 223, 227, 250, 330, 356, 362, 446, 498, 527, 535, 540, 548, 549, 550, 585, 601, 602, 608, 617, 618, 660, 682, 741, 745, 753, 758, 761, 791, 797, 862, 868, 871, 928, 957, 975, 983], "connect": [28, 99, 101, 104, 108, 112, 114, 115, 250, 597], "uri": [28, 101, 102, 111, 250], "postgresql": [28, 101, 250, 438, 585], "usernam": [28, 99, 101, 104, 108, 112, 114, 250], "password": [28, 99, 101, 104, 108, 112, 114, 250], "server": [28, 101, 250], "port": [28, 99, 101, 104, 108, 112, 114, 250], "replac": [28, 99, 100, 110, 145, 146, 190, 218, 227, 250, 330, 355, 416, 495, 585, 611, 660, 682, 761, 790, 851, 890, 891, 925, 975], "insert": [28, 99, 100, 104, 108, 110, 112, 113, 114, 161, 189, 218, 220, 250, 463, 478, 510, 585, 656, 682, 888, 908, 940, 975], "mode": [28, 250, 570, 585, 682, 975], "new": [28, 29, 97, 110, 127, 128, 131, 140, 160, 161, 180, 181, 188, 189, 207, 220, 221, 227, 250, 259, 330, 374, 390, 415, 494, 495, 500, 501, 511, 512, 518, 585, 596, 606, 638, 653, 656, 660, 666, 682, 687, 758, 761, 809, 862, 873, 924, 925, 930, 931, 941, 943, 948, 954, 967, 975], "alreadi": [28, 250, 283, 324, 585, 710, 752, 975], "adbc": [28, 101, 250], "workbook": [29, 250], "worksheet": [29, 250], "posit": [29, 138, 143, 154, 182, 196, 197, 203, 220, 227, 230, 250, 369, 370, 371, 372, 438, 475, 493, 531, 532, 536, 538, 539, 540, 541, 547, 552, 562, 565, 571, 574, 575, 585, 605, 609, 616, 641, 642, 649, 656, 660, 664, 682, 805, 806, 807, 923, 975], "tupl": [29, 101, 131, 167, 192, 193, 198, 229, 250, 449, 585, 635, 645, 682, 874, 975], "a1": [29, 61, 63, 250], "table_styl": [29, 250], "column_format": [29, 250], "dtype_format": [29, 250], "oneormoredatatyp": [29, 120, 250, 840, 975], "conditional_format": [29, 250], "conditionalformatdict": [29, 250], "column_tot": [29, 250], "columntotalsdefinit": [29, 250], "column_width": [29, 250], "row_tot": [29, 250], "rowtotalsdefinit": [29, 250], "row_height": [29, 250], "sparklin": [29, 250], "sequenc": [29, 52, 60, 67, 86, 88, 89, 90, 92, 94, 96, 99, 100, 110, 120, 121, 122, 132, 137, 138, 140, 143, 144, 169, 170, 176, 180, 183, 184, 203, 211, 217, 218, 219, 220, 221, 222, 223, 250, 395, 414, 440, 475, 512, 533, 536, 545, 546, 554, 556, 561, 569, 585, 599, 605, 606, 609, 622, 623, 634, 649, 654, 655, 656, 657, 682, 690, 754, 756, 891, 943, 975], "formula": [29, 250, 367, 585, 803, 975], "autofilt": [29, 250], "autofit": [29, 250], "hidden_column": [29, 250], "hide_gridlin": [29, 250], "sheet_zoom": [29, 250], "excel": [29, 103, 250, 596], "object": [29, 30, 33, 70, 87, 88, 93, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 120, 122, 124, 130, 154, 155, 156, 171, 214, 250, 560, 596, 602, 617, 618, 620, 625, 637, 682, 703, 737, 759, 907, 952, 975], "open": [29, 99, 100, 103, 104, 108, 112, 114, 250], "xlsxwriter": [29, 116, 250], "ha": [29, 60, 69, 94, 110, 130, 223, 250, 264, 309, 324, 403, 425, 522, 533, 585, 666, 735, 741, 752, 754, 817, 830, 960, 975], "close": [29, 70, 155, 156, 250, 391, 411, 452, 453, 454, 455, 456, 458, 459, 460, 472, 585, 617, 618, 682, 824, 902, 975], "xlsx": [29, 103, 250], "work": [29, 37, 100, 103, 156, 189, 250, 264, 283, 302, 312, 313, 314, 315, 372, 381, 438, 492, 524, 585, 618, 682, 710, 729, 739, 742, 743, 744, 815, 922, 961, 975], "directori": [29, 108, 250], "sheet1": [29, 250], "valid": [29, 104, 108, 124, 128, 142, 250, 324, 479, 488, 585, 752, 804, 817, 909, 910, 915, 916, 918, 924, 925, 975], "notat": [29, 250], "integ": [29, 41, 42, 43, 44, 54, 55, 56, 57, 120, 122, 123, 125, 155, 156, 250, 312, 357, 381, 382, 447, 452, 453, 454, 455, 456, 457, 458, 459, 460, 493, 530, 535, 556, 585, 617, 618, 682, 698, 699, 739, 792, 815, 833, 872, 882, 891, 923, 975, 983], "medium": [29, 250], "kei": [29, 60, 66, 155, 170, 177, 182, 184, 188, 191, 250, 617, 623, 632, 638, 639, 682], "contain": [29, 60, 66, 88, 91, 93, 102, 111, 117, 121, 132, 140, 168, 180, 184, 217, 250, 264, 395, 416, 480, 483, 485, 486, 488, 501, 502, 585, 599, 606, 635, 654, 682, 851, 857, 910, 913, 915, 916, 918, 931, 932, 952, 975], "follow": [29, 66, 99, 100, 102, 110, 111, 131, 155, 156, 170, 183, 223, 250, 264, 352, 356, 362, 440, 445, 452, 453, 454, 455, 456, 458, 459, 460, 512, 523, 533, 578, 579, 581, 585, 586, 587, 591, 592, 593, 617, 618, 623, 634, 682, 787, 791, 797, 870, 890, 891, 969, 971, 975, 976, 979, 980, 981, 983], "first_column": [29, 250], "last_column": [29, 250], "banded_column": [29, 250], "banded_row": [29, 250], "sheet": [29, 103, 250], "chart": [29, 250, 635, 682], "subsequ": [29, 187, 214, 250, 608, 682], "colnam": [29, 110, 122, 141, 250, 415, 585, 607, 682], "given": [29, 48, 50, 60, 69, 70, 86, 88, 89, 90, 92, 97, 99, 100, 110, 119, 120, 122, 123, 124, 125, 127, 131, 132, 142, 143, 166, 182, 183, 192, 199, 200, 203, 217, 222, 250, 264, 280, 295, 331, 361, 367, 391, 409, 438, 440, 445, 448, 449, 452, 453, 455, 458, 459, 460, 463, 465, 466, 486, 504, 506, 512, 552, 585, 599, 609, 627, 634, 643, 644, 649, 654, 657, 666, 682, 691, 707, 722, 753, 762, 796, 803, 804, 820, 824, 843, 847, 850, 862, 868, 870, 874, 877, 878, 880, 883, 884, 885, 888, 894, 895, 916, 934, 936, 963, 967, 975, 983], "here": [29, 86, 88, 89, 90, 92, 101, 102, 111, 120, 122, 124, 250, 488, 682, 918], "dd": [29, 250], "mm": [29, 250], "yyyi": [29, 250], "00": [29, 70, 122, 155, 170, 223, 250, 329, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 504, 506, 508, 550, 617, 623, 682, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 934, 936, 938], "dtype": [29, 63, 71, 86, 88, 90, 92, 93, 97, 99, 100, 110, 119, 120, 121, 122, 124, 127, 130, 155, 156, 170, 212, 214, 250, 264, 266, 267, 268, 269, 270, 271, 274, 277, 278, 279, 288, 300, 310, 313, 314, 315, 316, 317, 322, 323, 335, 338, 342, 344, 346, 351, 358, 365, 372, 374, 412, 414, 416, 447, 448, 452, 453, 454, 455, 456, 458, 459, 460, 467, 470, 471, 478, 487, 498, 504, 515, 517, 519, 520, 521, 526, 527, 533, 535, 543, 552, 556, 560, 561, 574, 585, 617, 618, 623, 682, 704, 705, 706, 715, 727, 736, 741, 742, 743, 744, 750, 751, 754, 755, 766, 769, 776, 778, 781, 786, 793, 800, 804, 809, 827, 833, 840, 850, 851, 875, 889, 896, 908, 917, 928, 934, 945, 955, 957, 958, 959, 963, 975, 983], "overridden": [29, 86, 88, 90, 92, 126, 250, 682], "basi": [29, 122, 250], "param": [29, 86, 88, 89, 90, 92, 99, 100, 110, 121, 122, 124, 192, 250, 682], "It": [29, 70, 131, 177, 183, 232, 250, 264, 301, 424, 585, 627, 632, 666, 682, 890, 891, 975], "also": [29, 70, 89, 110, 120, 121, 122, 123, 124, 141, 154, 155, 156, 177, 180, 196, 203, 227, 250, 320, 323, 355, 390, 391, 445, 452, 453, 454, 455, 456, 458, 459, 460, 475, 545, 546, 554, 556, 569, 578, 584, 585, 590, 616, 617, 618, 632, 641, 649, 660, 661, 682, 790, 824, 870, 975], "group": [29, 33, 100, 154, 155, 156, 168, 180, 182, 184, 221, 223, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 258, 264, 283, 380, 438, 474, 475, 485, 517, 533, 585, 616, 617, 618, 647, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682, 710, 915], "float_dtyp": [29, 250], "simplifi": [29, 67, 250, 603, 608, 610, 635, 645, 646, 647, 682], "uniform": [29, 250], "condit": [29, 65, 140, 147, 192, 250, 483, 502, 554, 578, 606, 613, 682], "suppli": [29, 86, 88, 89, 90, 92, 192, 250, 682], "typenam": [29, 250], "3_color_scal": [29, 250], "data_bar": [29, 250], "make": [29, 52, 68, 86, 91, 99, 100, 101, 104, 108, 112, 114, 155, 156, 177, 180, 187, 223, 250, 370, 371, 416, 448, 500, 510, 585, 617, 618, 632, 682, 806, 807, 820, 851, 930, 940, 975, 983], "icon": [29, 250], "multipl": [29, 67, 68, 99, 100, 110, 112, 113, 114, 120, 124, 132, 138, 142, 144, 147, 154, 155, 160, 168, 182, 184, 196, 197, 203, 217, 227, 230, 250, 300, 421, 425, 430, 431, 438, 449, 452, 453, 454, 455, 456, 458, 459, 460, 475, 531, 532, 536, 539, 545, 546, 547, 554, 561, 562, 565, 569, 575, 578, 585, 599, 605, 613, 616, 617, 641, 642, 649, 654, 660, 664, 682, 690, 727, 804, 856, 874, 975], "singl": [29, 60, 68, 99, 100, 101, 108, 110, 120, 138, 139, 140, 144, 151, 166, 182, 192, 203, 250, 264, 281, 300, 352, 378, 414, 446, 449, 475, 478, 529, 531, 532, 533, 536, 539, 540, 541, 547, 561, 562, 565, 570, 575, 585, 605, 606, 649, 682, 690, 708, 727, 787, 871, 874, 908, 952, 975], "across": [29, 250, 531, 532, 547, 562, 565, 575], "effect": [29, 130, 149, 250, 264, 585, 662, 682], "heatmap": [29, 250], "min": [29, 33, 137, 146, 155, 156, 184, 250, 313, 315, 321, 377, 438, 445, 455, 571, 585, 612, 617, 618, 647, 682, 742, 744, 749, 754, 812, 870, 880, 975, 983], "entir": [29, 250], "final": [29, 60, 114, 250, 369, 370, 371, 585, 610, 682, 805, 806, 807, 975], "made": [29, 250, 957, 975], "up": [29, 52, 101, 167, 170, 193, 210, 250, 264, 312, 510, 585, 622, 623, 627, 682, 739, 940, 975], "abov": [29, 250, 362, 578], "order": [29, 60, 89, 117, 131, 132, 154, 155, 156, 182, 183, 184, 194, 197, 203, 217, 219, 223, 250, 264, 274, 297, 302, 311, 445, 462, 463, 464, 474, 475, 512, 524, 525, 536, 585, 599, 616, 617, 618, 631, 642, 646, 647, 649, 654, 655, 682, 691, 700, 724, 729, 738, 753, 839, 868, 870, 875, 887, 888, 892, 904, 943, 961, 962, 975], "than": [29, 70, 85, 90, 92, 99, 100, 110, 115, 122, 124, 131, 153, 154, 167, 170, 182, 192, 193, 194, 221, 232, 250, 264, 384, 385, 403, 406, 413, 462, 472, 490, 496, 501, 510, 542, 572, 575, 585, 616, 623, 646, 647, 666, 682, 691, 887, 902, 920, 926, 931, 940, 975, 983], "add": [29, 50, 100, 131, 144, 155, 227, 228, 250, 442, 514, 550, 554, 578, 585, 617, 622, 660, 661, 662, 682, 690, 975], "total": [29, 142, 250, 804, 975], "export": [29, 167, 168, 193, 210, 250], "numer": [29, 170, 250, 257, 313, 314, 315, 382, 391, 411, 429, 431, 441, 448, 467, 513, 523, 585, 596, 623, 682, 742, 743, 744, 754, 824, 838, 889, 896, 975, 983], "associ": [29, 60, 121, 250], "sum": [29, 60, 142, 149, 154, 156, 166, 184, 230, 250, 264, 301, 322, 323, 367, 378, 452, 453, 455, 458, 459, 460, 529, 531, 545, 547, 554, 569, 585, 603, 608, 610, 616, 618, 635, 645, 664, 682, 750, 751, 803, 804, 877, 878, 880, 883, 884, 885, 975], "pass": [29, 33, 60, 70, 88, 103, 110, 120, 122, 124, 132, 136, 138, 154, 155, 156, 158, 172, 182, 183, 196, 203, 206, 217, 223, 227, 230, 250, 264, 336, 355, 375, 389, 438, 440, 475, 491, 497, 503, 531, 532, 536, 539, 547, 556, 562, 565, 574, 575, 585, 599, 605, 616, 617, 618, 620, 627, 634, 641, 645, 649, 654, 660, 664, 682, 691, 767, 790, 810, 819, 846, 921, 927, 933, 946, 975], "must": [29, 69, 87, 88, 102, 111, 137, 143, 155, 156, 170, 177, 192, 250, 301, 414, 452, 453, 454, 455, 456, 458, 459, 460, 585, 609, 617, 618, 623, 627, 632, 682, 753, 754, 868, 975], "funcnam": [29, 250], "averag": [29, 250, 369, 370, 371, 445, 585, 805, 806, 807, 870, 975], "count_num": [29, 250], "count": [29, 99, 100, 104, 108, 110, 112, 113, 114, 137, 155, 156, 170, 180, 181, 184, 218, 222, 223, 228, 232, 241, 250, 265, 281, 319, 352, 407, 432, 436, 452, 453, 454, 455, 456, 458, 459, 460, 480, 525, 527, 534, 566, 585, 617, 618, 623, 657, 662, 666, 675, 682, 708, 754, 787, 820, 858, 863, 910, 962, 964, 975], "std_dev": [29, 250], "var": [29, 125, 250, 585, 682, 975], "pixel": [29, 250], "unit": [29, 36, 38, 70, 122, 124, 142, 250, 329, 330, 336, 361, 365, 412, 425, 504, 506, 526, 556, 585, 635, 682, 760, 761, 767, 796, 800, 804, 850, 934, 936, 963, 975, 983], "hand": [29, 99, 100, 110, 250], "side": [29, 155, 156, 250, 391, 452, 453, 454, 455, 456, 458, 459, 460, 463, 585, 617, 618, 682, 824, 888, 975], "call": [29, 100, 122, 124, 128, 131, 154, 155, 156, 171, 249, 250, 264, 320, 323, 562, 565, 585, 597, 616, 617, 618, 681, 682, 691, 975], "ad": [29, 89, 130, 155, 218, 227, 250, 263, 375, 545, 546, 585, 617, 660, 682, 810, 975], "end": [29, 70, 99, 100, 108, 110, 155, 250, 296, 307, 352, 356, 357, 372, 391, 479, 483, 498, 502, 535, 539, 552, 578, 585, 617, 619, 626, 635, 682, 723, 733, 787, 791, 824, 913, 928, 932, 975], "wise": [29, 60, 149, 250, 266, 267, 268, 269, 270, 271, 316, 317, 373, 410, 469, 470, 471, 519, 520, 545, 546, 554, 562, 565, 569, 585, 692, 693, 694, 695, 696, 697, 746, 747, 808, 848, 849, 899, 900, 901, 949, 950, 975], "match": [29, 68, 80, 86, 88, 89, 90, 92, 117, 118, 146, 170, 192, 250, 422, 479, 480, 483, 486, 487, 488, 494, 495, 502, 504, 505, 506, 539, 612, 623, 682, 833, 840, 909, 910, 913, 916, 917, 918, 924, 925, 932, 934, 935, 936, 975], "particip": [29, 250], "distinct": [29, 124, 182, 250, 302, 445, 550, 585, 729, 870, 975, 983], "referenc": [29, 250, 512], "differ": [29, 99, 115, 117, 144, 155, 156, 167, 193, 210, 218, 250, 282, 325, 334, 352, 353, 355, 363, 416, 433, 434, 504, 525, 553, 556, 585, 608, 617, 618, 682, 690, 691, 709, 755, 765, 787, 788, 790, 798, 860, 861, 889, 934, 975], "row_index": [29, 250], "height": [29, 140, 250], "provid": [29, 99, 100, 101, 102, 110, 111, 122, 124, 166, 250, 301, 305, 306, 481, 482, 485, 487, 488, 556, 596, 646, 647, 682, 731, 732, 820, 843, 911, 912, 915, 917, 918, 975, 983], "intersect": [29, 250], "bodi": [29, 250], "start": [29, 70, 98, 99, 100, 104, 108, 110, 112, 113, 114, 126, 154, 155, 171, 202, 223, 228, 250, 296, 308, 334, 336, 337, 339, 340, 345, 347, 353, 354, 356, 357, 361, 362, 363, 364, 366, 372, 391, 473, 479, 483, 498, 502, 535, 539, 545, 552, 554, 578, 585, 616, 617, 635, 648, 662, 682, 723, 734, 760, 762, 765, 767, 768, 770, 775, 777, 780, 782, 785, 788, 789, 791, 792, 794, 796, 797, 798, 799, 800, 801, 824, 903, 913, 928, 932, 975, 983], "zero": [29, 86, 87, 98, 99, 100, 104, 108, 121, 130, 133, 146, 167, 192, 208, 214, 250, 376, 377, 411, 463, 472, 510, 523, 585, 601, 612, 682, 728, 741, 812, 902, 940, 952, 957, 958, 975], "unless": [29, 60, 88, 214, 250, 682, 958, 966, 975], "marker": [29, 250], "compliant": [29, 250], "case": [29, 60, 86, 88, 89, 90, 92, 114, 126, 131, 144, 155, 156, 167, 250, 414, 424, 425, 585, 617, 618, 682, 690, 975], "three": [29, 216, 250, 463, 585], "avail": [29, 96, 102, 111, 120, 128, 249, 250, 445, 579, 581, 584, 585, 586, 587, 590, 591, 592, 593, 596, 597, 610, 681, 682, 870, 969, 971, 975, 976, 979, 980, 981], "insert_befor": [29, 250], "insert_aft": [29, 250], "respect": [29, 250], "direct": [29, 101, 108, 114, 221, 250], "far": [29, 250], "thei": [29, 89, 110, 117, 128, 171, 250, 451, 585, 876, 975], "strongli": [29, 126, 131, 192, 232, 250, 264, 585, 666, 691, 975], "advis": [29, 171, 250, 301], "structur": [29, 77, 81, 83, 144, 183, 250, 440, 585, 634, 682, 690, 975], "your": [29, 99, 100, 117, 118, 131, 167, 196, 227, 230, 250, 264, 585, 603, 619, 626, 627, 641, 660, 664, 682, 691, 975, 983], "wherev": [29, 131, 232, 250, 264, 585, 666, 691, 975], "possibl": [29, 99, 131, 154, 167, 193, 219, 232, 250, 264, 412, 424, 501, 526, 585, 616, 655, 666, 682, 691, 931, 975], "simpl": [29, 124, 180, 250], "colx": [29, 250, 983], "coli": [29, 250, 983], "after": [29, 89, 98, 99, 100, 104, 108, 110, 112, 113, 114, 144, 220, 249, 250, 372, 416, 445, 510, 585, 656, 682, 690, 851, 870, 940, 975], "befor": [29, 99, 110, 126, 128, 144, 155, 170, 220, 250, 322, 323, 324, 416, 439, 451, 452, 453, 454, 455, 456, 458, 459, 460, 510, 515, 585, 617, 620, 623, 656, 682, 690, 750, 751, 752, 851, 864, 876, 877, 878, 879, 880, 881, 883, 884, 885, 940, 945, 975], "most": [29, 86, 99, 100, 110, 250, 425, 430, 439, 501, 527, 585, 856, 864, 931, 964, 975], "mandatori": [29, 250], "return_dtyp": [29, 131, 250, 264, 414, 416, 533, 561, 585, 691, 851, 975], "latter": [29, 144, 250, 690, 975], "appropri": [29, 250, 445, 585, 870, 975], "pure": [29, 250], "actual": [29, 89, 103, 122, 124, 250, 897, 975], "indic": [29, 65, 94, 98, 99, 100, 104, 108, 110, 119, 120, 124, 155, 156, 170, 197, 211, 223, 250, 275, 300, 352, 356, 362, 393, 396, 397, 399, 400, 401, 420, 423, 452, 453, 454, 455, 456, 458, 459, 460, 463, 469, 517, 536, 585, 617, 618, 623, 642, 682, 727, 787, 791, 797, 828, 832, 834, 835, 836, 837, 888, 899, 947, 953, 975, 983], "calcul": [29, 60, 155, 204, 224, 250, 282, 325, 369, 370, 371, 404, 412, 457, 472, 477, 526, 528, 531, 533, 542, 567, 572, 573, 577, 585, 617, 650, 658, 682, 709, 755, 805, 806, 807, 844, 882, 902, 906, 965, 975], "individu": [29, 122, 156, 250, 264, 486, 585, 618, 647, 682, 740, 916, 975], "gridlin": [29, 250], "zoom": [29, 250], "level": [29, 33, 110, 112, 113, 114, 122, 131, 149, 180, 250, 378, 585, 619, 626, 647, 682], "definit": [29, 120, 250, 404, 585, 844, 975], "take": [29, 122, 128, 149, 177, 183, 207, 250, 352, 475, 518, 551, 553, 585, 632, 653, 682, 787, 948, 967, 975], "care": [29, 250, 264, 464, 585, 892, 975], "rel": [29, 102, 111, 117, 118, 250, 352, 369, 370, 371, 585, 787, 805, 806, 807, 975], "see": [29, 101, 102, 103, 111, 117, 118, 122, 124, 136, 169, 183, 250, 313, 314, 315, 377, 390, 404, 414, 472, 569, 585, 742, 743, 744, 844, 902, 975, 983], "readthedoc": [29, 250], "io": [29, 250], "working_with_conditional_format": [29, 250], "html": [29, 87, 101, 130, 136, 250], "similarli": [29, 89, 250], "well": [29, 99, 100, 110, 143, 184, 250, 391, 585, 609, 682, 824, 975], "adjac": [29, 250], "two": [29, 88, 90, 92, 101, 149, 176, 177, 184, 216, 231, 232, 250, 258, 326, 330, 474, 517, 542, 544, 567, 572, 585, 631, 632, 665, 666, 682, 756, 761, 975], "help": [29, 250, 610, 682], "where": [29, 65, 101, 121, 140, 144, 167, 176, 193, 204, 224, 250, 275, 364, 367, 463, 472, 475, 477, 528, 542, 567, 572, 573, 577, 578, 585, 631, 650, 658, 682, 690, 701, 799, 803, 888, 902, 906, 965, 967, 975], "appear": [29, 89, 117, 250, 525, 585, 962, 975], "working_with_sparklin": [29, 250], "inject": [29, 60, 250], "locat": [29, 144, 190, 215, 220, 250, 463, 585, 656, 682, 690, 888, 891, 947, 975], "syntax": [29, 131, 180, 250, 645, 682, 975], "ensur": [29, 71, 121, 122, 124, 154, 182, 192, 250, 391, 527, 585, 616, 627, 682, 957, 964, 975], "correctli": [29, 250], "microsoft": [29, 116, 250], "com": [29, 101, 250, 369, 370, 371, 485, 585, 805, 806, 807, 915, 975], "u": [29, 36, 38, 70, 93, 167, 193, 210, 250, 329, 330, 336, 361, 365, 504, 506, 556, 760, 761, 767, 796, 800, 934, 936], "offic": [29, 250], "f5ed2452": [29, 250], "2337": [29, 250], "4f71": [29, 250], "bed3": [29, 250], "c8ae6d2b276": [29, 250], "instanti": [29, 196, 227, 250, 641, 660, 682], "basic": [29, 250, 983], "random": [29, 120, 122, 124, 157, 194, 250, 386, 445, 462, 468, 585, 818, 870, 887, 898, 975], "date": [29, 36, 60, 70, 99, 100, 101, 110, 115, 122, 137, 153, 155, 156, 168, 170, 223, 250, 280, 281, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 452, 453, 454, 455, 456, 458, 459, 460, 504, 505, 521, 556, 560, 585, 617, 618, 623, 682, 707, 708, 760, 761, 762, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 840, 860, 861, 891, 934, 935, 959, 975], "dtm": [29, 250, 330, 761], "2023": [29, 93, 116, 168, 250, 330, 560, 761], "num": [29, 216, 250, 391, 394, 510, 585, 824, 975], "500": [29, 167, 222, 250, 610, 657, 682, 775, 777, 785, 792, 877, 878, 880, 975], "val": [29, 191, 250, 311, 521, 578, 585, 639, 682, 738], "10_000": [29, 250], "20_000": [29, 250], "30_000": [29, 250], "increas": [29, 99, 108, 250, 324, 585, 752, 975], "b4": [29, 250], "light": [29, 250], "twice": [29, 103, 250], "each": [29, 60, 100, 113, 117, 118, 120, 131, 153, 154, 155, 156, 168, 170, 182, 214, 220, 223, 229, 230, 232, 233, 235, 244, 250, 264, 287, 299, 352, 356, 362, 411, 445, 475, 486, 500, 501, 533, 536, 541, 574, 585, 617, 618, 623, 635, 656, 664, 666, 667, 669, 678, 682, 714, 726, 740, 787, 791, 797, 870, 916, 930, 931, 944, 975, 983], "titl": [29, 250], "explicit": [29, 110, 120, 250, 535, 569], "integr": [29, 250, 983], "multi_fram": [29, 250], "wb": [29, 250], "coordin": [29, 250], "advanc": [29, 250, 983], "len": [29, 69, 120, 122, 168, 250, 319, 449, 490, 496, 510, 585, 753, 868, 874, 920, 926, 940, 975], "min_color": [29, 250], "76933c": [29, 250], "mid_color": [29, 250], "c4d79b": [29, 250], "max_color": [29, 250], "ebf1d": [29, 250], "data_bar_2010": [29, 250], "bar_color": [29, 250], "9bbb59": [29, 250], "bar_negative_color_sam": [29, 250], "bar_negative_border_color_sam": [29, 250], "000": [29, 250, 983], "white": [29, 250], "w": [29, 250, 485, 915], "get_worksheet_by_nam": [29, 250], "fmt_titl": [29, 250], "add_format": [29, 250], "font_color": [29, 250], "4f6228": [29, 250], "font_siz": [29, 250], "12": [29, 60, 69, 70, 93, 121, 122, 155, 156, 170, 223, 250, 322, 330, 337, 340, 347, 348, 349, 354, 356, 362, 366, 439, 467, 546, 548, 549, 561, 585, 617, 618, 619, 623, 626, 645, 652, 682, 691, 753, 761, 782, 791, 797, 886, 975, 983], "ital": [29, 250], "bold": [29, 250], "customis": [29, 250], "trend": [29, 250], "win_loss": [29, 250], "subtl": [29, 250], "tone": [29, 250], "hidden": [29, 250], "id": [29, 232, 250, 494, 495, 525, 527, 585, 666, 962, 975, 983], "q1": [29, 250], "55": [29, 62, 250], "20": [29, 122, 144, 160, 161, 183, 185, 189, 190, 250, 272, 273, 274, 325, 356, 362, 386, 390, 556, 560, 585, 634, 682, 755, 797, 975], "35": [29, 116, 250, 325, 585, 755, 975], "q2": [29, 250], "30": [29, 69, 144, 155, 160, 183, 189, 190, 209, 227, 250, 272, 273, 274, 325, 330, 335, 340, 348, 354, 355, 356, 362, 366, 386, 467, 560, 585, 617, 634, 660, 682, 753, 755, 761, 766, 783, 790, 791, 797, 975, 983], "15": [29, 116, 121, 131, 155, 156, 161, 250, 324, 325, 349, 356, 362, 546, 585, 617, 618, 682, 752, 755, 791, 797, 975], "60": [29, 144, 250, 357, 358, 504, 788, 792, 793, 934], "q3": [29, 250], "50": [29, 144, 250, 313, 314, 315, 356, 362, 585, 742, 797, 975], "40": [29, 144, 183, 250, 356, 362, 386, 585, 634, 682, 771, 797], "80": [29, 250], "q4": [29, 250], "75": [29, 137, 250, 261, 437, 585, 754, 820, 868, 975, 983], "account": [29, 93, 250, 352, 369, 370, 371, 585, 787, 805, 806, 807, 975], "flavour": [29, 250], "integer_dtyp": [29, 196, 250, 641, 682], "0_": [29, 250], "just": [29, 101, 110, 176, 250, 631, 682], "unifi": [29, 250], "multi": [29, 99, 100, 250, 372, 562, 565, 585], "2_color_scal": [29, 250], "95b3d7": [29, 250], "ffffff": [29, 250], "base": [29, 34, 140, 147, 155, 156, 250, 367, 369, 370, 371, 409, 410, 493, 585, 606, 613, 617, 618, 682, 803, 805, 806, 807, 820, 847, 848, 868, 923, 967, 975, 983], "standardis": [29, 250], "z": [29, 93, 120, 122, 142, 163, 165, 169, 176, 250, 257, 261, 279, 311, 386, 437, 448, 504, 506, 585, 622, 631, 648, 682, 738, 812, 934, 936, 975], "score": [29, 250], "conjunct": [29, 103, 250], "a123": [29, 250], "b345": [29, 250], "c567": [29, 250], "d789": [29, 250], "e101": [29, 250], "45": [29, 156, 250, 330, 356, 362, 480, 486, 560, 618, 682, 761, 791, 797, 910, 916, 983], "85": [29, 250, 983], "font": [29, 250], "consola": [29, 250], "standard": [29, 116, 204, 250, 340, 370, 458, 472, 477, 488, 573, 585, 650, 682, 771, 806, 902, 906, 918, 975, 983], "stdev": [29, 250], "ipccompress": [30, 250], "arrow": [30, 72, 86, 101, 104, 112, 208, 250, 646, 682, 952, 957, 975], "ipc": [30, 104, 105, 112, 115, 250, 596], "binari": [30, 250, 304, 306, 307, 308, 532, 730, 732, 733, 734], "feather": [30, 104, 112, 250, 596], "lz4": [30, 33, 250, 646, 647, 682], "zstd": [30, 33, 250, 646, 647, 682], "pretti": [31, 250], "row_ori": [31, 250], "iobas": [31, 32, 106, 107, 250, 637, 663, 682], "serial": [31, 32, 250], "represent": [31, 32, 212, 250, 311, 334, 337, 340, 341, 343, 345, 347, 350, 353, 354, 357, 363, 364, 366, 521, 585, 608, 625, 682, 738, 765, 768, 770, 771, 775, 777, 780, 782, 785, 788, 789, 792, 798, 799, 801, 955, 959, 975], "orient": [31, 61, 63, 90, 92, 250, 682], "slower": [31, 90, 92, 131, 154, 182, 223, 232, 250, 616, 666, 682, 691, 975], "common": [31, 250, 590], "write_ndjson": [31, 250], "newlin": [32, 107, 113, 250], "delimit": [32, 94, 99, 100, 107, 110, 113, 184, 211, 250, 478, 908, 953, 975], "parquetcompress": [33, 250], "compression_level": [33, 250, 647, 682], "statist": [33, 99, 100, 108, 114, 137, 250, 370, 371, 404, 452, 453, 454, 455, 456, 457, 458, 459, 460, 472, 585, 647, 682, 754, 806, 807, 844, 882, 902, 975], "row_group_s": [33, 250, 647, 682], "use_pyarrow": [33, 99, 104, 108, 250, 647, 682, 956, 957, 975], "pyarrow_opt": [33, 102, 108, 111, 250], "parquet": [33, 108, 109, 114, 250, 596, 647, 682], "gzip": [33, 250, 647, 682], "lzo": [33, 250, 647, 682], "brotli": [33, 250, 647, 682], "choos": [33, 250, 646, 647, 682], "good": [33, 167, 250, 646, 647, 682], "perform": [33, 77, 87, 99, 100, 104, 108, 110, 112, 113, 114, 130, 131, 155, 156, 170, 187, 232, 250, 264, 438, 585, 617, 618, 623, 646, 647, 662, 666, 682, 691, 975], "fast": [33, 123, 125, 250, 375, 464, 585, 646, 647, 682, 810, 892, 975, 983], "decompress": [33, 250, 646, 647, 682], "backward": [33, 146, 170, 250, 303, 349, 377, 585, 612, 623, 647, 682, 784, 812, 975], "guarante": [33, 87, 99, 100, 219, 250, 610, 647, 655, 682], "deal": [33, 167, 250, 355, 445, 504, 585, 647, 682, 790, 870, 934, 975], "older": [33, 250, 647, 682], "reader": [33, 96, 99, 100, 104, 108, 250, 597, 647, 682], "higher": [33, 186, 242, 250, 444, 456, 568, 585, 636, 647, 676, 682, 869, 881, 975], "mean": [33, 99, 100, 104, 108, 110, 137, 146, 154, 184, 230, 250, 374, 377, 453, 472, 485, 537, 585, 612, 616, 627, 647, 664, 682, 754, 809, 812, 817, 878, 902, 915, 975], "smaller": [33, 142, 250, 610, 647, 682, 804, 975], "disk": [33, 104, 250, 645, 646, 647, 682], "11": [33, 116, 122, 156, 250, 327, 328, 340, 348, 349, 352, 356, 362, 390, 439, 459, 473, 510, 530, 539, 575, 585, 603, 618, 619, 626, 635, 647, 652, 682, 691, 787, 791, 797, 876, 975], "22": [33, 121, 250, 356, 362, 365, 504, 539, 647, 682, 791, 797, 800, 934, 983], "extra": [33, 99, 102, 103, 104, 108, 111, 112, 114, 144, 250, 647, 682, 690, 975], "comput": [33, 67, 68, 74, 142, 154, 170, 214, 219, 230, 242, 250, 256, 266, 267, 268, 269, 270, 271, 291, 292, 293, 316, 317, 319, 320, 321, 322, 323, 326, 367, 373, 404, 409, 410, 411, 430, 438, 439, 443, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 469, 470, 471, 472, 476, 519, 520, 531, 532, 536, 542, 544, 547, 551, 562, 565, 567, 572, 575, 585, 616, 620, 622, 623, 647, 655, 661, 664, 676, 682, 686, 692, 693, 694, 695, 696, 697, 718, 719, 720, 746, 747, 748, 749, 750, 751, 756, 803, 804, 808, 844, 847, 848, 849, 856, 864, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 899, 900, 901, 902, 905, 949, 950, 958, 975], "reduc": [33, 99, 100, 108, 110, 112, 113, 114, 237, 238, 240, 243, 250, 467, 554, 585, 647, 671, 672, 674, 677, 682, 853, 867, 896, 945, 975], "pressur": [33, 108, 113, 114, 250, 467, 585, 647, 682, 896, 975], "improv": [33, 104, 112, 250, 647, 682], "speed": [33, 250, 264, 585, 647, 682], "minimum": [33, 120, 121, 122, 124, 149, 178, 250, 369, 370, 371, 428, 434, 445, 565, 585, 633, 647, 682, 742, 779, 805, 806, 807, 861, 866, 870, 975, 983], "implement": [33, 87, 130, 131, 232, 250, 264, 585, 666, 691, 890, 891, 975], "v": [33, 69, 142, 250, 463, 585, 753, 888, 975], "At": [33, 250], "moment": [33, 136, 250, 404, 472, 585, 844, 902, 975], "argument": [33, 99, 102, 108, 111, 136, 138, 143, 154, 155, 156, 174, 182, 183, 184, 196, 197, 203, 205, 214, 220, 223, 227, 230, 250, 356, 362, 372, 391, 438, 440, 452, 453, 454, 455, 456, 458, 459, 460, 475, 491, 497, 503, 504, 531, 532, 536, 538, 539, 540, 541, 547, 552, 562, 565, 571, 574, 575, 585, 605, 609, 616, 617, 618, 634, 641, 642, 649, 656, 660, 664, 682, 791, 797, 824, 921, 927, 933, 934, 958, 975], "pyarrow": [33, 86, 91, 99, 102, 104, 108, 111, 115, 116, 168, 208, 213, 214, 250, 597, 952, 956, 957, 958, 975], "write_t": [33, 250], "calendar": [35, 36, 155, 156, 170, 223, 250, 340, 352, 356, 362, 366, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 623, 682, 771, 787, 791, 797, 801], "time": [36, 38, 66, 67, 70, 110, 144, 155, 156, 170, 223, 250, 279, 280, 281, 301, 309, 329, 330, 331, 336, 352, 355, 361, 365, 504, 506, 508, 521, 522, 540, 541, 550, 556, 570, 585, 603, 617, 618, 623, 635, 682, 690, 706, 708, 735, 760, 761, 762, 767, 787, 790, 796, 800, 934, 936, 938, 959, 960, 975, 983], "time_unit": [36, 38, 70, 93, 329, 330, 336, 361, 365, 506, 556, 760, 761, 767, 796, 800, 936], "time_zon": [36, 70, 93, 331, 355, 506, 762, 790, 936], "timezon": [36, 70], "m": [36, 38, 70, 329, 330, 336, 359, 361, 365, 504, 505, 506, 508, 556, 760, 761, 767, 794, 796, 800, 934, 935, 936, 938], "zone": [36, 70, 331, 355, 504, 506, 762, 790, 934, 936], "zoneinfo": 36, "run": [36, 67, 123, 125, 131, 154, 171, 184, 219, 232, 250, 264, 283, 324, 571, 585, 603, 608, 610, 616, 627, 631, 635, 645, 646, 647, 655, 666, 682, 691, 710, 752, 975, 982, 983], "available_timezon": 36, "128": [37, 62, 864, 975], "bit": [37, 39, 40, 41, 42, 43, 44, 54, 55, 56, 57, 447, 479, 585, 872, 909, 975], "neg": [37, 155, 158, 172, 199, 200, 202, 206, 250, 295, 296, 465, 466, 473, 498, 585, 617, 643, 644, 648, 662, 682, 722, 723, 819, 846, 894, 895, 903, 928, 946, 975], "scale": [37, 142, 250, 804, 975], "experiment": [37, 69, 115, 196, 221, 222, 227, 250, 324, 356, 452, 453, 454, 455, 456, 458, 459, 460, 585, 641, 657, 660, 682, 752, 791, 820, 868, 975], "progress": 37, "expect": [37, 78, 80, 85, 264, 533, 560, 585, 625, 627, 682, 868, 975], "delta": [38, 102, 111, 204, 224, 250, 477, 528, 542, 567, 572, 573, 577, 585, 596, 650, 658, 682, 906, 965, 975], "32": [39, 42, 55, 62, 156, 166, 250, 431, 467, 585, 618, 682, 756, 788, 864, 881, 975], "sign": [41, 42, 43, 44, 352, 447, 510, 585, 787, 833, 872, 940, 975], "inner": [45, 51, 71, 121, 169, 222, 250, 288, 326, 585, 622, 657, 663, 682, 715, 756, 975], "polarsdatatyp": [45, 97, 99, 100, 105, 109, 110, 119, 120, 121, 122, 124, 127, 131, 141, 250, 264, 310, 372, 414, 416, 487, 533, 535, 539, 552, 560, 561, 585, 607, 682, 691, 736, 851, 917, 975], "pythondatatyp": 45, "nest": [45, 51, 93, 142, 250, 596, 804, 975, 983], "arrai": [45, 86, 90, 99, 100, 108, 142, 208, 213, 214, 250, 279, 290, 291, 292, 293, 294, 297, 298, 306, 313, 314, 315, 319, 320, 321, 322, 323, 410, 452, 453, 455, 458, 459, 460, 464, 480, 482, 485, 486, 488, 551, 585, 682, 706, 717, 718, 719, 720, 721, 724, 725, 732, 742, 743, 744, 748, 749, 750, 751, 756, 804, 848, 849, 877, 878, 880, 883, 884, 885, 892, 897, 910, 912, 915, 916, 918, 952, 957, 958, 966, 975], "within": [45, 117, 118, 155, 156, 170, 223, 250, 475, 585, 617, 618, 623, 682], "wrap": [47, 93, 391, 585], "arbitrari": [47, 122], "python": [47, 70, 99, 100, 116, 131, 167, 193, 210, 232, 250, 264, 330, 414, 533, 578, 585, 590, 666, 691, 761, 772, 773, 774, 779, 956, 975], "queri": [48, 67, 101, 104, 110, 112, 113, 114, 144, 171, 183, 250, 301, 416, 488, 585, 603, 608, 610, 619, 626, 635, 645, 662, 666, 682, 690, 918, 975, 982], "pars": [48, 99, 100, 103, 110, 112, 113, 132, 154, 196, 203, 217, 227, 230, 250, 391, 438, 475, 487, 493, 504, 506, 531, 532, 536, 538, 540, 541, 547, 556, 562, 565, 574, 575, 585, 599, 616, 641, 649, 654, 660, 664, 682, 824, 917, 923, 934, 936, 975], "transform": [48, 131, 250, 414, 507, 509, 585], "lf": [50, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 682, 983], "under": [50, 61, 62, 63, 64, 579, 581, 586, 587, 591, 592, 593, 969, 971, 976, 979, 980, 981], "context": [51, 126, 180, 250, 258, 264, 283, 378, 424, 474, 475, 527, 533, 543, 553, 556, 571, 584, 585, 596, 661, 682, 710], "manag": [51, 596], "categor": [51, 71, 94, 169, 211, 212, 250, 311, 416, 521, 585, 737, 738, 959, 975], "temporarili": [51, 126, 155, 156, 250, 617, 618, 682], "cach": [51, 67, 71, 104, 110, 112, 114, 416, 452, 453, 454, 455, 456, 458, 459, 460, 504, 505, 506, 508, 585, 603, 608, 610, 635, 645, 682, 934, 935, 936, 938], "categori": [51, 69, 71, 311, 738, 753, 820, 868, 975], "until": [51, 171, 250], "finish": [51, 74, 144, 250, 690, 975], "global": [51, 71, 122, 416, 585], "invalid": [51, 99, 100, 110, 487, 488, 493, 523, 585, 917, 918, 923], "outermost": 51, "exit": [51, 128], "df1": [51, 60, 68, 71, 117, 144, 150, 214, 225, 250], "color": [51, 71, 232, 666], "red": [51, 71, 232, 666], "green": [51, 71, 232, 666], "blue": [51, 71], "orang": [51, 71, 135, 233, 234, 236, 237, 238, 240, 242, 243, 250, 667, 668, 670, 671, 672, 674, 676, 677], "uint8": [51, 71, 119, 121, 212, 250, 322, 323, 416, 515, 530, 585, 750, 751, 945, 975, 983], "df2": [51, 60, 68, 71, 117, 144, 150, 214, 225, 250], "yellow": [51, 71], "black": [51, 71, 131, 250], "join": [51, 60, 67, 71, 170, 222, 250, 390, 438, 585, 603, 608, 610, 623, 635, 645, 657, 661, 682], "succe": [51, 99, 100, 110], "df_join": [51, 71], "cat": [51, 69, 71, 212, 250, 479, 507, 509, 521, 541, 581, 585, 753, 820, 868, 909, 971, 975], "u8": [51, 71, 94, 211, 212, 250, 416, 530, 585, 953, 975, 983], "schemadict": [52, 86, 88, 89, 90, 91, 92, 110, 195, 250, 574, 627, 640, 666, 682], "composit": [52, 121, 983], "dai": [53, 70, 155, 156, 168, 170, 223, 250, 336, 340, 347, 348, 349, 352, 353, 354, 356, 361, 362, 363, 364, 366, 452, 453, 454, 455, 456, 458, 459, 460, 548, 549, 550, 585, 617, 618, 623, 682, 783, 784, 787, 788, 791, 797, 799], "unsign": [54, 55, 56, 57, 447, 585, 833, 872, 975], "could": [58, 74, 140, 155, 250, 310, 545, 554, 585, 606, 617, 682, 736, 975], "static": [58, 666], "utf": 59, "descend": [60, 132, 197, 203, 217, 250, 274, 297, 445, 464, 474, 475, 536, 585, 599, 642, 649, 654, 682, 700, 724, 839, 870, 892, 904, 975], "uniqu": [60, 119, 120, 121, 124, 165, 180, 241, 250, 265, 276, 394, 402, 432, 504, 505, 506, 508, 525, 527, 534, 566, 585, 675, 682, 702, 754, 829, 841, 858, 934, 935, 936, 938, 962, 964, 975], "fill": [60, 68, 97, 127, 145, 146, 200, 221, 250, 303, 320, 323, 376, 377, 383, 390, 452, 453, 455, 458, 459, 460, 466, 490, 496, 510, 555, 585, 611, 612, 644, 661, 682, 811, 812, 862, 877, 878, 880, 883, 884, 885, 895, 920, 926, 940, 975], "sort": [60, 61, 117, 121, 132, 155, 156, 170, 177, 183, 184, 197, 217, 223, 235, 244, 250, 274, 311, 378, 464, 475, 527, 529, 536, 585, 599, 608, 617, 618, 623, 632, 634, 635, 642, 645, 654, 669, 678, 682, 700, 738, 839, 892, 961, 964, 975, 983], "origin": [60, 99, 100, 219, 250, 355, 403, 416, 438, 447, 480, 485, 486, 488, 490, 496, 510, 585, 655, 682, 753, 790, 851, 868, 910, 915, 916, 918, 920, 926, 940, 975], "doe": [60, 80, 86, 88, 89, 90, 92, 93, 99, 100, 102, 103, 110, 111, 115, 117, 118, 144, 168, 192, 193, 219, 227, 250, 362, 365, 416, 525, 553, 585, 610, 627, 655, 660, 682, 690, 800, 817, 851, 897, 966, 975], "receiv": [60, 110, 131, 183, 250, 440, 585, 634, 682, 983], "now": [60, 156, 250, 504, 618, 682, 934], "whose": [60, 170, 184, 250, 372, 552, 585, 623, 682], "post": 60, "constrain": 60, "newli": 60, "boolean": [60, 65, 132, 147, 149, 203, 217, 250, 260, 261, 262, 280, 304, 339, 378, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 437, 475, 487, 529, 530, 536, 574, 585, 599, 613, 649, 654, 682, 688, 689, 701, 707, 730, 770, 813, 824, 825, 826, 828, 829, 831, 832, 834, 835, 836, 837, 841, 865, 866, 890, 909, 967, 975], "2022": [60, 70, 137, 153, 155, 156, 170, 223, 250, 330, 352, 356, 362, 452, 453, 454, 455, 456, 458, 459, 460, 504, 550, 556, 585, 617, 618, 623, 682, 761, 771, 787, 791, 797, 934], "x": [60, 93, 99, 100, 101, 110, 120, 122, 142, 160, 163, 165, 169, 176, 184, 250, 257, 261, 264, 279, 288, 368, 382, 384, 385, 386, 406, 411, 413, 414, 429, 431, 435, 437, 441, 448, 469, 472, 500, 513, 521, 523, 530, 533, 545, 546, 554, 560, 561, 569, 585, 622, 627, 631, 648, 682, 687, 691, 812, 842, 899, 902, 930, 959, 975], "y": [60, 93, 120, 122, 142, 163, 165, 169, 176, 184, 250, 257, 261, 279, 288, 359, 368, 384, 385, 406, 413, 435, 437, 448, 504, 505, 506, 523, 530, 560, 585, 622, 631, 648, 682, 687, 794, 934, 935, 936, 975], "df3": [60, 250], "set_tbl_format": 60, "09": [60, 122, 156, 250, 330, 340, 348, 349, 618, 682, 765], "01": [60, 70, 122, 137, 153, 155, 156, 223, 250, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 504, 505, 506, 508, 550, 617, 618, 682, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 934, 935, 936, 938], "02": [60, 70, 153, 155, 156, 170, 223, 250, 329, 330, 336, 337, 338, 345, 346, 347, 348, 349, 352, 355, 356, 357, 358, 361, 362, 363, 365, 452, 453, 454, 455, 456, 458, 459, 460, 461, 504, 505, 506, 508, 550, 585, 617, 618, 623, 682, 760, 761, 763, 764, 767, 768, 769, 772, 773, 774, 775, 777, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 934, 935, 936, 938], "03": [60, 70, 93, 155, 156, 223, 250, 329, 330, 331, 335, 336, 338, 346, 347, 348, 349, 355, 356, 357, 358, 359, 361, 362, 363, 365, 505, 508, 617, 618, 682, 760, 761, 762, 765, 766, 767, 768, 769, 772, 773, 774, 775, 777, 779, 781, 782, 783, 784, 785, 788, 789, 790, 791, 792, 793, 794, 796, 798, 799, 800, 935, 938], "af1": 60, "af2": 60, "af3": 60, "keep": [60, 99, 100, 110, 219, 222, 223, 250, 403, 416, 538, 585, 655, 657, 682, 753, 851, 868, 975], "easili": [60, 196, 227, 230, 250, 539, 574, 641, 660, 664, 682], "dot": [60, 585, 645, 682, 975], "product": [60, 136, 250, 322, 326, 533, 585, 750, 756, 975], "fill_nul": [60, 145, 250, 585, 611, 661, 682, 975], "167": 60, "47": 60, "callabl": [61, 62, 63, 64, 110, 131, 149, 183, 232, 250, 264, 301, 414, 415, 440, 451, 533, 545, 546, 554, 561, 569, 585, 627, 634, 666, 682, 691, 728, 876, 975], "decor": [61, 62, 63, 64, 122, 124, 131, 250, 264, 585, 691, 975], "access": [61, 62, 63, 64, 167, 192, 193, 250, 416, 585, 661, 682, 983], "by_first_letter_of_column_nam": 61, "f": [61, 100, 137, 153, 168, 208, 218, 221, 250, 257, 264, 301, 467, 484, 504, 506, 533, 540, 561, 585, 728, 914, 934, 936], "fromkei": [61, 63], "by_first_letter_of_column_valu": 61, "starts_with": [61, 479, 483, 913], "slice": [61, 67, 142, 158, 168, 206, 250, 287, 299, 451, 452, 453, 454, 455, 456, 458, 459, 460, 585, 603, 608, 610, 627, 635, 645, 646, 647, 682, 714, 726, 804, 819, 876, 877, 878, 879, 880, 881, 883, 884, 885, 946, 975], "to_seri": [61, 65, 151, 250, 301, 504, 728, 934], "xx": [61, 63, 121, 124], "xy": [61, 63], "yy": [61, 63, 121, 124], "yz": [61, 63], "a2": [61, 63], "b1": [61, 63], "b2": [61, 63], "pow_n": 62, "powersofn": 62, "next": [62, 303, 445, 585, 870, 975], "p": [62, 183, 250, 440, 574, 585, 634, 682], "ceil": [62, 585, 975], "previou": [62, 128, 439, 512, 585, 864, 975], "floor": [62, 585, 975], "nearest": [62, 170, 186, 242, 250, 312, 381, 444, 456, 568, 585, 623, 636, 676, 682, 739, 815, 823, 869, 881, 975], "24": [62, 116, 131, 142, 156, 250, 322, 324, 338, 431, 585, 618, 682, 752, 769, 843, 975], "001": [62, 341, 342, 344, 351, 550, 776, 778, 786], "next_pow2": 62, "prev_pow2": 62, "nearest_pow2": 62, "split_by_column_dtyp": 63, "collect": [63, 67, 110, 111, 115, 122, 124, 171, 208, 250, 264, 395, 535, 540, 556, 574, 585, 599, 605, 606, 609, 610, 611, 612, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 633, 634, 636, 638, 639, 641, 643, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 660, 661, 662, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 682, 831, 975, 983], "31": [64, 70, 122, 330, 334, 335, 347, 348, 352, 363, 504, 548, 549, 556, 560, 761, 765, 766, 783, 787, 934, 983], "42": [64, 156, 157, 250, 618, 682, 818, 975], "961": 64, "1764": 64, "4160": 64, "eager": [65, 70, 155, 221, 250, 329, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 535, 556, 570, 574, 584, 596, 617, 682, 760, 762, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801], "evalu": [65, 70, 145, 147, 170, 250, 261, 275, 324, 389, 391, 395, 416, 437, 531, 532, 535, 551, 570, 574, 578, 585, 613, 620, 622, 623, 682, 701, 752, 967, 975], "immedi": [65, 70, 445, 535, 570, 574, 585, 870, 975], "arg_tru": [65, 585, 975], "u32": [65, 155, 181, 228, 233, 241, 243, 250, 258, 265, 272, 273, 274, 275, 276, 277, 278, 281, 290, 318, 319, 334, 337, 341, 345, 347, 353, 354, 357, 363, 364, 407, 416, 432, 436, 445, 463, 480, 489, 492, 521, 525, 534, 536, 543, 566, 585, 617, 662, 667, 675, 677, 682, 700, 701, 702, 717, 736, 765, 768, 775, 777, 780, 782, 785, 788, 789, 792, 798, 799, 820, 870, 910, 919, 922, 959, 962, 964, 975], "build": [66, 87, 983], "wa": 66, "compil": [66, 277, 278, 704, 705], "gate": 66, "info": [66, 102, 111, 116, 339, 770], "otherwis": [66, 121, 126, 177, 196, 250, 305, 313, 314, 315, 355, 369, 370, 371, 447, 479, 481, 531, 532, 547, 562, 565, 575, 578, 585, 632, 641, 682, 691, 731, 742, 743, 744, 790, 805, 806, 807, 872, 890, 891, 909, 911, 975], "version": [66, 69, 70, 94, 102, 111, 116, 348, 349, 504, 559, 567, 569, 572, 783, 784, 934], "depend": [66, 116, 264, 277, 278, 424, 445, 533, 553, 556, 585, 704, 705, 870, 975, 983], "host": [66, 99, 104, 108, 112, 114], "git": 66, "lazy_fram": 67, "type_coercion": [67, 603, 608, 610, 635, 645, 646, 647, 682], "predicate_pushdown": [67, 603, 608, 610, 627, 635, 645, 646, 647, 682], "projection_pushdown": [67, 603, 608, 610, 627, 635, 645, 646, 647, 682], "simplify_express": [67, 603, 608, 610, 635, 645, 646, 647, 682], "no_optim": [67, 603, 610, 627, 635, 646, 647, 682], "slice_pushdown": [67, 603, 608, 610, 627, 635, 645, 646, 647, 682], "common_subplan_elimin": [67, 603, 608, 610, 635, 645, 682], "graph": [67, 171, 250, 620, 661, 682], "parallel": [67, 68, 96, 101, 108, 114, 155, 170, 171, 183, 250, 283, 324, 585, 596, 617, 622, 623, 682, 710, 752, 975], "threadpool": [67, 126], "coercion": [67, 448, 585, 603, 608, 610, 635, 645, 646, 647, 682], "optim": [67, 108, 110, 112, 113, 114, 167, 171, 183, 187, 193, 219, 250, 603, 608, 610, 627, 635, 645, 646, 647, 655, 662, 682], "predic": [67, 110, 112, 113, 114, 115, 147, 166, 192, 250, 378, 529, 554, 585, 603, 608, 610, 613, 627, 635, 638, 645, 646, 647, 662, 682, 813, 890, 891, 975], "pushdown": [67, 603, 608, 610, 627, 635, 638, 645, 646, 647, 662, 682, 890, 891, 975], "project": [67, 110, 112, 113, 114, 264, 474, 475, 585, 603, 608, 610, 627, 635, 638, 645, 646, 647, 663, 682], "turn": [67, 99, 100, 110, 527, 585, 603, 608, 610, 627, 635, 646, 647, 682], "off": [67, 99, 100, 110, 527, 585, 603, 608, 610, 627, 635, 646, 647, 682], "Will": [67, 218, 250, 603, 608, 610, 635, 645, 682, 975], "try": [67, 81, 83, 99, 100, 103, 104, 108, 110, 112, 114, 603, 608, 610, 635, 645, 682], "branch": [67, 603, 608, 610, 635, 645, 682], "subplan": [67, 603, 608, 610, 635, 645, 682], "occur": [67, 281, 430, 445, 585, 603, 608, 610, 635, 645, 682, 708, 856, 870, 975], "union": [67, 68, 603, 608, 610, 635, 645, 682], "part": [67, 86, 122, 500, 501, 603, 608, 610, 635, 645, 661, 682, 765, 768, 775, 777, 780, 782, 785, 792, 801, 930, 931], "fashion": [67, 169, 250, 603, 608, 610, 635, 645, 682], "item": [68, 100, 192, 194, 250, 280, 286, 288, 374, 462, 501, 585, 707, 713, 715, 809, 887, 931, 975], "iter": [68, 123, 125, 132, 154, 155, 156, 167, 168, 182, 192, 193, 196, 197, 203, 217, 218, 227, 229, 230, 250, 324, 372, 438, 475, 531, 532, 536, 538, 539, 540, 541, 547, 552, 562, 565, 571, 574, 575, 578, 585, 599, 616, 617, 618, 641, 642, 649, 654, 660, 664, 682, 752, 975, 983], "concatmethod": 68, "vertic": [68, 144, 221, 225, 250, 478, 908], "rechunk": [68, 86, 91, 99, 100, 104, 108, 110, 112, 113, 114, 144, 250, 585, 690, 740, 857, 975], "aggreg": [68, 99, 100, 108, 149, 155, 156, 173, 174, 175, 178, 180, 184, 185, 186, 204, 205, 221, 224, 230, 231, 234, 236, 250, 258, 378, 388, 414, 438, 451, 452, 453, 454, 455, 456, 458, 459, 460, 527, 531, 532, 545, 546, 547, 554, 559, 562, 565, 569, 575, 585, 617, 618, 627, 628, 629, 630, 633, 636, 650, 651, 658, 664, 665, 668, 670, 682, 821, 876, 877, 878, 880, 883, 884, 885, 975], "concaten": [68, 149, 183, 250, 440, 540, 541, 585, 634, 682, 740, 857, 975], "diagon": [68, 218, 250], "strategi": [68, 99, 119, 120, 121, 122, 124, 146, 155, 169, 170, 179, 250, 264, 301, 377, 585, 612, 617, 622, 623, 682, 728, 812, 975], "vstack": [68, 144, 250], "find": [68, 148, 250, 463, 585, 888, 975], "miss": [68, 99, 100, 110, 145, 250, 303, 369, 370, 371, 383, 390, 397, 399, 572, 585, 611, 682, 805, 806, 807, 966, 975], "stack": [68, 160, 225, 250], "length": [68, 69, 97, 110, 120, 127, 155, 156, 202, 250, 296, 324, 356, 362, 425, 451, 452, 453, 454, 455, 456, 458, 459, 460, 473, 490, 492, 496, 498, 510, 535, 585, 617, 618, 635, 648, 682, 723, 728, 740, 752, 753, 761, 791, 797, 845, 862, 868, 876, 877, 878, 879, 880, 881, 883, 884, 885, 903, 920, 922, 926, 928, 940, 975], "don": [68, 131, 219, 221, 250, 264, 283, 324, 533, 585, 655, 682, 691, 710, 752, 889, 966, 975], "t": [68, 103, 110, 131, 183, 219, 221, 250, 264, 283, 324, 355, 367, 369, 370, 371, 440, 491, 497, 503, 504, 506, 533, 578, 585, 634, 655, 682, 691, 710, 752, 790, 803, 805, 806, 807, 889, 921, 927, 933, 934, 936, 966, 975], "sure": [68, 86, 91, 99, 100, 101, 104, 108, 187, 250, 535], "contigu": [68, 86, 91, 99, 100, 104, 108, 110, 112, 113, 114, 187, 250], "relev": 68, "execut": [68, 171, 250, 283, 600, 627, 635, 682, 710], "df_h1": 68, "l1": 68, "l2": 68, "df_h2": 68, "r1": 68, "r2": 68, "r3": 68, "df_d1": 68, "df_d2": 68, "bin": [69, 493, 530, 579, 585, 753, 820, 868, 923, 969, 975], "label": [69, 451, 452, 453, 454, 455, 456, 458, 459, 460, 585, 635, 682, 753, 868, 876, 877, 878, 879, 880, 881, 883, 884, 885, 975], "break_point_label": [69, 753, 868, 975], "break_point": [69, 753, 820, 868, 975], "category_label": [69, 753, 868, 975], "discret": [69, 282, 325, 367, 585, 709, 753, 755, 803, 820, 868, 975], "deprec": [69, 70, 94, 504, 559, 567, 572, 682, 934], "sinc": [69, 70, 94, 102, 111, 336, 504, 556, 559, 567, 572, 767, 934], "assign": [69, 120, 155, 250, 445, 500, 501, 585, 617, 682, 753, 851, 868, 870, 930, 931, 975], "breakpoint": [69, 753, 868, 975], "inf": [69, 122, 124, 271, 393, 396, 523, 585, 697, 753, 820, 828, 832, 850, 864, 868, 963, 975], "interv": [70, 155, 156, 223, 250, 339, 356, 357, 362, 391, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 682, 765, 767, 768, 770, 775, 777, 780, 782, 785, 788, 789, 791, 792, 794, 796, 797, 798, 799, 801, 824, 975], "timedelta": [70, 155, 156, 223, 250, 334, 336, 337, 340, 345, 347, 352, 353, 354, 356, 357, 359, 361, 362, 363, 364, 366, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 682, 772, 774, 779, 787, 791, 797, 860, 861, 975], "1d": [70, 155, 156, 170, 223, 250, 329, 338, 346, 352, 356, 362, 365, 452, 453, 454, 455, 456, 458, 459, 460, 560, 585, 617, 618, 623, 682, 760, 767, 769, 772, 773, 774, 779, 781, 787, 791, 794, 796, 797, 799, 800], "_nodefault": [70, 184, 250, 504, 934], "no_default": [70, 184, 250, 504, 934], "closedinterv": [70, 155, 156, 250, 391, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 682, 824, 975], "lower": [70, 110, 155, 186, 242, 250, 313, 315, 391, 412, 444, 447, 456, 535, 568, 585, 610, 617, 636, 676, 682, 744, 824, 850, 869, 872, 881, 963, 975], "bound": [70, 99, 100, 142, 155, 250, 286, 300, 313, 314, 315, 391, 412, 526, 535, 585, 617, 682, 713, 727, 743, 744, 804, 824, 850, 963, 975], "upper": [70, 99, 100, 142, 155, 250, 313, 314, 391, 526, 535, 585, 617, 682, 743, 804, 824, 850, 963, 975], "period": [70, 155, 156, 199, 200, 250, 295, 356, 362, 369, 370, 371, 439, 465, 466, 585, 617, 618, 643, 644, 682, 722, 791, 797, 805, 806, 807, 864, 894, 895, 975], "like": [70, 87, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 163, 165, 169, 250, 283, 427, 445, 575, 585, 610, 637, 682, 710, 870, 975], "durat": [70, 170, 223, 250, 335, 338, 342, 344, 346, 351, 358, 365, 521, 585, 623, 682, 766, 769, 776, 778, 781, 786, 793, 800, 959, 975], "3d12h4m25": [70, 155, 156, 170, 223, 250, 356, 362, 617, 618, 623, 682, 791, 797], "hour": [70, 155, 156, 170, 223, 250, 352, 356, 362, 452, 453, 454, 455, 456, 458, 459, 460, 549, 550, 585, 617, 618, 623, 682, 787, 791, 797], "minut": [70, 155, 156, 170, 223, 250, 352, 356, 362, 452, 453, 454, 455, 456, 458, 459, 460, 549, 550, 585, 617, 618, 623, 682, 787, 791, 797], "17": [70, 116, 122, 230, 461, 504, 556, 559, 585, 664, 746, 791, 934, 975, 983], "tempor": [70, 155, 156, 167, 193, 210, 250, 391, 452, 453, 454, 455, 456, 458, 459, 460, 585, 596, 617, 618, 682, 824, 840, 975], "window": [70, 155, 156, 250, 324, 356, 362, 369, 370, 371, 438, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 540, 585, 617, 618, 682, 752, 791, 797, 805, 806, 807, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 975], "granular": 70, "finer": 70, "permut": 70, "1mo": [70, 155, 156, 170, 223, 250, 331, 335, 348, 349, 352, 355, 356, 359, 362, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 623, 682, 762, 766, 782, 783, 784, 787, 788, 789, 790, 791, 797, 798], "dtrang": 70, "1985": 70, "04": [70, 115, 155, 223, 250, 330, 331, 334, 335, 338, 345, 346, 347, 348, 349, 353, 355, 356, 357, 358, 359, 363, 364, 365, 504, 550, 617, 682, 762, 766, 769, 775, 777, 780, 781, 782, 783, 784, 785, 789, 790, 792, 793, 794, 798, 799, 800, 934], "05": [70, 115, 117, 118, 122, 170, 223, 250, 330, 331, 335, 355, 357, 359, 623, 682, 761, 762, 763, 764, 765, 766, 790, 791, 795, 797, 799], "07": [70, 330, 334, 353, 355, 356, 362, 364, 504, 556, 761, 765, 790, 799, 934], "08": [70, 117, 118, 122, 156, 250, 330, 356, 504, 550, 618, 682, 791, 797, 934], "america": 70, "new_york": 70, "\u03bc": [70, 93, 122, 155, 156, 170, 223, 250, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 504, 506, 550, 556, 617, 618, 623, 682, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 934, 936], "est": 70, "combin": [70, 81, 83, 155, 156, 157, 170, 223, 250, 261, 275, 352, 362, 437, 491, 497, 503, 585, 617, 618, 623, 645, 682, 787, 797, 921, 927, 933], "month_end": 70, "get": [70, 95, 105, 109, 126, 132, 135, 141, 151, 152, 155, 156, 158, 159, 163, 165, 166, 172, 179, 192, 195, 198, 202, 206, 217, 226, 235, 244, 250, 258, 272, 273, 274, 276, 285, 289, 290, 302, 319, 320, 321, 322, 323, 336, 352, 379, 387, 392, 394, 402, 405, 408, 417, 418, 419, 424, 426, 428, 433, 434, 444, 473, 477, 489, 492, 515, 516, 524, 528, 553, 558, 562, 563, 564, 565, 573, 576, 577, 585, 599, 604, 607, 614, 617, 618, 619, 624, 626, 640, 648, 652, 654, 659, 669, 678, 682, 698, 699, 700, 701, 702, 712, 716, 717, 729, 740, 748, 749, 750, 751, 767, 787, 816, 819, 824, 826, 829, 841, 846, 852, 854, 855, 857, 860, 861, 865, 866, 869, 903, 906, 919, 922, 946, 952, 953, 961, 965, 966, 975], "last": [70, 132, 158, 170, 172, 184, 203, 206, 217, 219, 244, 250, 274, 286, 299, 324, 334, 348, 353, 362, 363, 474, 501, 516, 576, 585, 599, 623, 649, 652, 654, 655, 678, 682, 700, 713, 726, 752, 765, 783, 788, 798, 819, 846, 931, 946, 975], "month": [70, 155, 156, 170, 223, 250, 334, 348, 349, 352, 356, 362, 452, 453, 454, 455, 456, 458, 459, 460, 548, 549, 585, 617, 618, 623, 682, 765, 783, 784, 787, 791, 797], "28": [70, 155, 156, 170, 209, 223, 250, 257, 352, 355, 356, 362, 365, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 623, 682, 787, 790, 791, 797, 800, 983], "disabl": [71, 167, 250], "equal": [71, 99, 100, 110, 117, 118, 150, 155, 170, 177, 250, 368, 384, 406, 451, 452, 453, 454, 455, 456, 458, 459, 460, 489, 490, 496, 510, 535, 585, 617, 623, 632, 682, 876, 877, 878, 879, 880, 881, 883, 884, 885, 889, 919, 920, 926, 940, 975, 983], "encount": [72, 155, 250, 433, 434, 487, 488, 542, 545, 554, 572, 585, 617, 682, 860, 861, 917, 918, 975], "duplic": [75, 163, 169, 170, 219, 250, 392, 585, 622, 623, 655, 682, 826, 975], "certain": [76, 102, 111, 161, 223, 250, 539, 603, 635, 646, 647, 682, 975], "least": [78, 122, 439, 527, 585, 864, 964, 975], "unexpect": [79, 250], "caus": [79, 87, 99, 100, 110, 130, 144, 250, 690, 975], "panic": 79, "mismatch": 81, "incompat": 83, "pa": [86, 115], "chunkedarrai": [86, 179, 250, 756, 975], "recordbatch": [86, 168, 250], "schemadefinit": [86, 88, 89, 90, 92, 250, 682], "schema_overrid": [86, 88, 89, 90, 91, 92, 168, 250, 682], "copi": [86, 87, 130, 133, 134, 168, 208, 214, 227, 250, 375, 510, 585, 601, 602, 660, 682, 687, 741, 745, 758, 810, 940, 952, 957, 958, 975], "closest": 86, "pair": [86, 88, 89, 90, 92, 121, 188, 250, 638, 682, 983], "declar": [86, 88, 89, 90, 92, 250, 682], "sever": [86, 88, 89, 90, 92, 250, 682, 983], "wai": [86, 88, 89, 90, 92, 138, 154, 168, 183, 203, 230, 250, 438, 440, 475, 539, 585, 605, 616, 634, 649, 664, 682], "As": [86, 88, 89, 90, 92, 103, 250, 570, 682], "auto": [86, 88, 89, 90, 92, 108, 114, 218, 250, 504, 682, 934, 983], "automat": [86, 88, 89, 90, 92, 93, 99, 100, 101, 110, 122, 124, 126, 196, 227, 250, 416, 491, 497, 503, 504, 585, 641, 660, 682, 851, 921, 927, 933, 934, 975], "equival": [86, 88, 89, 90, 92, 102, 166, 180, 250, 257, 261, 368, 382, 384, 385, 406, 413, 429, 431, 435, 437, 441, 492, 513, 523, 530, 585, 682, 843, 922, 937, 939, 975], "form": [86, 88, 89, 90, 92, 167, 193, 221, 250, 439, 585, 682, 864, 975], "them": [86, 88, 89, 90, 92, 110, 144, 155, 156, 170, 177, 223, 250, 288, 391, 433, 434, 540, 585, 617, 618, 623, 632, 682, 690, 715, 860, 861, 975], "dimens": [86, 88, 90, 92, 250, 449, 585, 682, 874, 975], "construct": [86, 88, 89, 90, 91, 92, 250, 416, 585, 615, 637, 682, 975], "allow_copi": [87, 130], "interchang": [87, 130], "protocol": [87, 101, 130], "__dataframe__": 87, "convers": [87, 130, 168, 214, 250, 504, 505, 506, 508, 596, 934, 935, 936, 938, 956, 957, 958, 975], "detail": [87, 101, 117, 118, 130, 250, 682, 983], "latest": [87, 102, 111, 130, 383, 425, 585], "index": [87, 91, 95, 101, 116, 130, 148, 155, 156, 161, 166, 170, 184, 190, 192, 202, 215, 223, 228, 250, 258, 272, 273, 274, 276, 277, 278, 286, 296, 300, 352, 452, 453, 454, 455, 456, 458, 459, 460, 463, 473, 485, 498, 517, 585, 617, 618, 623, 648, 662, 682, 698, 699, 700, 701, 702, 704, 705, 713, 723, 727, 787, 843, 862, 888, 891, 903, 915, 928, 947, 975], "throw": [87, 310, 487, 488, 585, 736, 917, 918, 975], "runtimeerror": 87, "from_panda": [87, 103], "from_arrow": 87, "effici": [87, 168, 250], "map": [88, 89, 99, 100, 104, 105, 108, 109, 110, 112, 131, 141, 167, 188, 192, 193, 209, 250, 356, 362, 415, 416, 527, 533, 585, 607, 638, 682, 791, 797, 851, 975], "clone": [88, 89, 90, 91, 92, 133, 213, 214, 250, 601, 682, 741, 956, 957, 958, 966, 975], "dimension": [88, 90, 92, 250, 682, 975], "infer_schema_length": [89, 92, 99, 100, 103, 110, 113, 250, 682], "NOT": [89, 117, 118, 423], "typic": [89, 131, 250, 691, 975], "clearer": 89, "load": [89, 91, 102, 111, 123, 125, 250, 596, 619, 626, 682, 983], "want": [89, 131, 144, 180, 250, 264, 313, 314, 315, 378, 414, 416, 452, 453, 454, 455, 456, 458, 459, 460, 545, 554, 585, 603, 619, 626, 682, 690, 691, 742, 743, 744, 957, 975], "_partial_": [89, 250, 682], "omit": [89, 93, 120, 122, 124, 128, 180, 250], "mani": [89, 92, 101, 144, 250, 690, 975], "scan": [89, 92, 99, 100, 108, 110, 111, 112, 113, 114, 115, 610, 619, 626, 682], "slow": [89, 92, 99, 100, 110, 264, 324, 585, 752, 975], "partial": 89, "present": [89, 117, 122, 395, 585, 966, 975], "np": [90, 147, 250, 517, 585, 682, 828, 832, 834, 835, 876, 947, 975], "ndarrai": [90, 147, 213, 250, 517, 585, 682, 756, 888, 891, 947, 957, 975], "numpi": [90, 116, 136, 213, 214, 250, 433, 434, 585, 682, 828, 832, 834, 835, 860, 861, 876, 957, 958, 966, 975], "columnar": [90, 92, 167, 193, 250], "interpret": [90, 92, 99, 100, 110, 250, 682], "yield": [90, 92, 99, 100, 110, 142, 144, 218, 250, 682, 690, 804, 975], "conclus": [90, 92, 250, 682], "nan_to_nul": [91, 250, 682, 975], "include_index": 91, "datetimeindex": [91, 756, 975], "panda": [91, 103, 116, 214, 250, 348, 349, 521, 585, 682, 783, 784, 958, 959, 975], "instal": [91, 99, 100, 101, 104, 108, 116, 136, 213, 214, 250, 645, 682, 958, 975], "nan": [91, 117, 118, 122, 130, 145, 214, 250, 327, 328, 368, 376, 384, 385, 390, 397, 399, 400, 401, 406, 413, 417, 428, 433, 434, 435, 523, 542, 572, 585, 611, 682, 693, 697, 757, 811, 834, 835, 860, 861, 876, 958, 975, 983], "convert": [91, 94, 102, 103, 111, 130, 209, 210, 211, 212, 213, 216, 250, 301, 331, 493, 504, 505, 506, 508, 682, 728, 762, 923, 934, 935, 936, 938, 944, 955, 956, 957, 958, 966, 975], "pd": [91, 103, 521, 585, 959, 975], "pd_df": 91, "pd_seri": 91, "tbl": [93, 96, 100], "reconstruct": 93, "repr": [93, 122, 124], "need": [93, 99, 100, 103, 117, 118, 155, 156, 201, 213, 250, 301, 416, 467, 489, 585, 617, 618, 682, 896, 919, 975], "trim": 93, "whitespac": [93, 491, 497, 503, 921, 927, 933], "prompt": 93, "extract": [93, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 353, 354, 357, 358, 363, 364, 366, 440, 486, 487, 488, 585, 763, 764, 765, 766, 768, 769, 771, 775, 776, 777, 778, 780, 781, 782, 785, 786, 788, 789, 792, 793, 795, 798, 799, 801, 916, 917, 918], "to_init_repr": [93, 250, 975], "handl": [93, 99, 100, 110, 115, 282, 325, 510, 585, 709, 755, 940, 975], "truncat": [93, 155, 250, 352, 617, 635, 682, 787], "identifi": [93, 176, 182, 219, 250, 631, 655, 682], "compound": 93, "struct": [93, 180, 196, 216, 220, 227, 250, 301, 416, 487, 500, 501, 527, 545, 546, 547, 561, 585, 641, 656, 660, 682, 728, 917, 930, 931], "source_ac": 93, "source_cha": 93, "ident": [93, 133, 134, 250, 601, 602, 682, 741, 745, 975], "timestamp": [93, 355, 556, 790], "tor_id": 93, "nnel_id": 93, "asia": [93, 763, 764, 795], "tokyo": 93, "123456780": 93, "9876543210": 93, "56": [93, 519, 585], "59": [93, 121, 330, 345, 357, 549, 761, 780, 792], "663053": 93, "jst": 93, "803065983": 93, "2055938745": 93, "38": [93, 122], "18": [93, 156, 250, 323, 356, 362, 365, 390, 403, 585, 618, 635, 682, 800], "050545": 93, "source_actor_id": 93, "source_channel_id": 93, "sr": [93, 687, 975], "dummi": [94, 211, 250, 953, 975], "to_dummi": [94, 250, 975], "foo_1": [94, 211, 250], "foo_2": [94, 211, 250], "bar_3": [94, 211, 250], "bar_4": [94, 211, 250], "ham_a": [94, 211, 250], "ham_b": [94, 211, 250], "datatypeclass": 95, "uint32": [95, 116, 142, 250, 274, 277, 278, 290, 334, 337, 341, 343, 345, 347, 350, 353, 354, 357, 363, 364, 448, 480, 489, 492, 517, 521, 585, 701, 704, 705, 717, 736, 765, 768, 775, 777, 780, 782, 785, 788, 789, 792, 798, 799, 804, 833, 889, 910, 959, 975], "regular": [95, 167, 192, 193, 223, 250, 372, 539, 552, 562, 565, 575, 585], "uint64": [95, 157, 250, 277, 278, 386, 447, 585, 704, 705, 818, 872, 975], "bigidx": 95, "read": [96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 144, 250, 414, 578, 585, 610, 615, 637, 682, 690, 975], "batch": [96, 100, 113, 627, 682], "over": [96, 99, 100, 102, 110, 122, 131, 144, 167, 168, 192, 193, 218, 229, 232, 250, 264, 324, 377, 390, 414, 415, 451, 452, 453, 454, 455, 456, 458, 459, 460, 533, 545, 546, 554, 561, 569, 585, 666, 690, 691, 752, 876, 877, 878, 880, 884, 975], "fetch": [96, 110, 171, 250, 601, 603, 619, 626, 682], "ideal": 96, "read_csv_batch": [96, 597], "tpch": [96, 100], "tables_scale_100": [96, 100], "lineitem": [96, 100, 101], "try_parse_d": [96, 99, 100, 110], "In": [97, 102, 111, 114, 122, 124, 127, 131, 142, 144, 155, 156, 180, 250, 264, 585, 617, 618, 682, 690, 804, 871, 975], "probabl": [97, 127, 367, 585, 803, 975], "n_row": [98, 99, 100, 104, 108, 110, 112, 113, 114, 168, 250, 610, 682], "accept": [98, 99, 100, 102, 104, 108, 132, 143, 154, 196, 203, 217, 227, 230, 250, 257, 372, 391, 438, 475, 530, 531, 532, 536, 538, 539, 540, 541, 547, 552, 562, 565, 574, 575, 585, 599, 609, 616, 641, 649, 654, 660, 664, 682, 824, 975], "stop": [98, 99, 100, 104, 108, 110, 112, 113, 114, 334, 336, 337, 339, 340, 345, 347, 353, 354, 356, 357, 361, 362, 363, 364, 366, 760, 762, 765, 767, 768, 770, 775, 777, 780, 782, 785, 788, 789, 791, 792, 794, 796, 797, 798, 799, 800, 801], "textio": 99, "new_column": [99, 100, 103, 110, 189, 250], "comment_char": [99, 100, 110], "quote_char": [99, 100, 110], "skip_row": [99, 100, 110], "missing_utf8_is_empty_str": [99, 100, 110], "ignore_error": [99, 100, 110], "n_thread": [99, 100], "8192": 99, "csvencod": [99, 100, 110], "low_memori": [99, 100, 108, 110, 113, 114], "storage_opt": [99, 102, 104, 108, 111, 112, 114], "skip_rows_after_head": [99, 100, 110], "row_count_nam": [99, 100, 104, 108, 110, 112, 113, 114], "row_count_offset": [99, 100, 104, 108, 110, 112, 113, 114], "sample_s": [99, 100], "eol_char": [99, 100, 110], "we": [99, 100, 103, 110, 170, 250, 283, 493, 560, 578, 623, 627, 682, 691, 710, 820, 868, 923, 975], "handler": [99, 100, 103], "g": [99, 100, 102, 103, 104, 108, 111, 112, 114, 155, 156, 170, 221, 223, 250, 257, 264, 352, 356, 362, 372, 452, 453, 454, 455, 456, 458, 459, 460, 467, 552, 585, 617, 618, 623, 638, 682, 787, 791, 797, 889, 957, 975], "builtin": [99, 100, 103], "stringio": [99, 100], "fsspec": [99, 100, 104, 108, 111, 112, 114, 116], "remot": [99, 100, 104, 108], "first": [99, 100, 103, 110, 113, 121, 131, 153, 155, 158, 170, 172, 179, 183, 184, 206, 212, 218, 219, 223, 235, 250, 274, 276, 283, 286, 287, 324, 349, 352, 356, 387, 394, 408, 416, 440, 463, 475, 485, 487, 488, 494, 495, 538, 545, 554, 558, 578, 585, 603, 617, 619, 623, 626, 634, 655, 661, 669, 682, 700, 710, 713, 714, 728, 752, 754, 784, 787, 791, 819, 829, 846, 851, 888, 915, 917, 918, 924, 925, 946, 955, 975, 983], "autogener": [99, 100, 110], "column_x": [99, 100, 110], "enumer": [99, 100, 110, 168, 250], "shorter": [99, 100], "remain": [99, 100, 110, 142, 250, 500, 501, 627, 682, 804, 930, 931, 975], "comment": [99, 100, 110], "instanc": [99, 100, 110, 122, 124, 128, 144, 149, 250, 301, 310, 425, 452, 453, 454, 455, 456, 458, 459, 460, 545, 554, 585, 627, 662, 682, 690, 736, 975], "special": [99, 100, 110, 691, 975], "escap": [99, 100, 110], "dure": [99, 100, 110, 128, 144, 250, 690, 975], "would": [99, 100, 110, 274, 286, 424, 445, 536, 585, 700, 713, 870, 957, 975], "prefer": [99, 100, 102, 110, 125, 131, 144, 167, 192, 193, 232, 250, 264, 451, 585, 666, 682, 690, 691, 876, 975, 983], "treat": [99, 100, 110, 479, 494, 495, 909, 924, 925], "10000": [99, 168, 250, 510], "check": [99, 100, 110, 117, 118, 150, 164, 166, 250, 260, 262, 280, 304, 307, 308, 391, 395, 479, 483, 502, 585, 627, 682, 688, 689, 707, 730, 733, 734, 825, 827, 830, 831, 833, 838, 839, 840, 842, 843, 889, 909, 913, 932, 975], "might": [99, 100, 110, 126, 264, 525, 585, 958, 975], "issu": [99, 100, 103, 110, 322, 323, 515, 585, 750, 751, 945, 975], "iso8601": [99, 100, 110], "alwai": [99, 121, 131, 232, 250, 424, 504, 578, 627, 666, 682, 691, 934, 975, 983], "physic": [99, 100, 170, 250, 311, 521, 585, 600, 622, 623, 682, 738, 959, 975], "cpu": [99, 100], "system": [99, 100], "wrongli": 99, "done": [99, 100, 110, 115, 153, 170, 250, 263, 265, 310, 490, 496, 534, 585, 623, 682, 736, 920, 926, 975], "buffer": [99, 100, 142, 167, 250, 804, 975], "modifi": [99, 100, 110, 126, 128, 160, 167, 225, 250, 275, 355, 365, 585, 790, 800, 873, 937, 939, 975], "lossi": [99, 100, 110], "decod": [99, 100], "usag": [99, 100, 110, 122, 124, 201, 250, 897, 975], "expens": [99, 100, 108, 110, 113, 114, 123, 125, 131, 167, 192, 193, 218, 219, 250, 264, 585, 655, 682, 690, 691, 975, 983], "nativ": [99, 104, 108, 120, 131, 167, 193, 210, 232, 250, 264, 585, 590, 666, 691, 975, 983], "parser": 99, "even": 99, "regard": [99, 542, 572], "sens": [99, 104, 108, 112, 114, 155, 156, 177, 223, 250, 617, 618, 632, 682], "particular": [99, 104, 108, 112, 114, 142, 250, 804, 975], "storag": [99, 102, 104, 108, 111, 112, 114], "skip": [99, 100, 103, 108, 110, 114, 221, 250, 691, 975], "offset": [99, 100, 104, 108, 110, 112, 113, 114, 155, 156, 202, 223, 228, 250, 296, 348, 349, 352, 356, 362, 473, 498, 504, 506, 585, 617, 618, 648, 662, 682, 723, 783, 784, 787, 791, 797, 903, 928, 934, 936, 975], "row_count": [99, 100, 104, 108, 110, 112, 113, 114], "sampl": [99, 100, 232, 250, 472, 585, 666, 902, 975], "estim": [99, 100, 142, 250, 265, 370, 371, 404, 534, 585, 682, 804, 806, 807, 844, 975], "alloc": [99, 100, 142, 187, 250, 804, 975], "scan_csv": [99, 100, 646, 647, 682], "lazili": [99, 100, 110, 111, 112, 113, 114, 416, 585], "glob": [99, 100, 110, 112, 113, 114], "pattern": [99, 100, 110, 112, 113, 114, 167, 250, 422, 479, 480, 485, 486, 494, 495, 890, 891, 909, 910, 915, 916, 924, 925, 975], "store": [99, 108, 144, 167, 193, 250, 690, 975], "continu": [99, 108, 472, 585, 902, 975], "benchmark": [99, 108], "50000": 100, "batchedcsvread": [100, 596], "upon": 100, "creation": 100, "gather": 100, "next_batch": 100, "big": 100, "interest": 100, "seen_group": 100, "big_fil": 100, "while": [100, 102, 103, 111, 122, 124, 167, 176, 218, 250, 631, 682], "df_current_batch": 100, "concat": [100, 740, 857, 975], "partition_df": 100, "partition_bi": [100, 168, 250], "as_dict": [100, 182, 250], "fh": 100, "write_csv": [100, 110, 250], "els": [100, 578], "partition_on": 101, "partition_rang": 101, "partition_num": 101, "dbreadengin": 101, "connectorx": [101, 116], "raw": 101, "partit": [101, 102, 108, 111, 115, 168, 182, 250], "backend": [101, 102, 111], "transfer": 101, "document": [101, 103, 359, 488, 504, 505, 506, 508, 794, 918, 934, 935, 936, 938], "redshift": 101, "mysql": 101, "mariadb": 101, "clickhous": 101, "oracl": 101, "bigqueri": 101, "pleas": 101, "doc": [101, 136, 250], "github": 101, "sfu": 101, "db": 101, "connector": 101, "destin": 101, "sqlite": 101, "develop": [101, 122, 124], "flight_sql": 101, "further": [101, 958, 975], "wide": [101, 153, 176, 221, 250, 631, 682], "adopt": 101, "significantli": [101, 983], "better": [101, 131, 232, 250, 264, 527, 585, 666, 890, 891, 975], "driver": 101, "cpp": 101, "partition_col": 101, "explicitli": [101, 120, 122, 128, 416, 574, 585], "delta_table_opt": [102, 111], "lake": [102, 111, 596], "root": [102, 111, 403, 415, 426, 442, 476, 514, 584, 585, 905, 975], "filesystem": [102, 111], "absolut": [102, 111, 117, 118, 256, 369, 370, 371, 585, 686, 805, 806, 807, 975], "gc": [102, 111], "azur": [102, 111], "deltalak": [102, 111, 116], "cloud": [102, 111, 115], "configur": [102, 111], "authent": [102, 111], "keyword": [102, 108, 111, 136, 183, 192, 196, 227, 230, 250, 440, 571, 574, 585, 634, 641, 660, 664, 682, 975], "table_path": [102, 111], "avoid": 102, "year": [102, 111, 155, 156, 170, 223, 250, 339, 340, 352, 353, 356, 362, 363, 452, 453, 454, 455, 456, 458, 459, 460, 548, 549, 585, 617, 618, 623, 682, 770, 771, 787, 788, 791, 797, 798], "2021": [102, 111, 137, 153, 155, 223, 250, 504, 560, 617, 682, 763, 764, 771, 795, 840, 934, 975], "aw": [102, 111], "bucket": [102, 111, 356, 362, 791, 797, 820, 975], "aws_access_key_id": [102, 111], "the_aws_access_key_id": [102, 111], "aws_secret_access_kei": [102, 111], "the_aws_secret_access_kei": [102, 111], "googl": [102, 111], "service_account": [102, 111], "service_account_json_absolute_path": [102, 111], "az": [102, 111], "adl": [102, 111], "abf": [102, 111], "azure_storage_account_nam": [102, 111], "azure_storage_account_kei": [102, 111], "without_fil": [102, 111], "track": [102, 111, 131, 250], "sheet_id": 103, "sheet_nam": 103, "xlsx2csv_option": 103, "read_csv_opt": 103, "noreturn": 103, "xlsx2csv": [103, 116], "read_csv": [103, 110], "neither": [103, 194, 250], "nor": [103, 194, 250], "skip_empty_lin": 103, "my": [103, 115], "datasheet": 103, "correct": [103, 370, 371, 404, 457, 472, 585, 627, 682, 806, 807, 844, 882, 902, 975], "look": [103, 301, 304, 730], "fix": [103, 120, 122, 365, 452, 453, 454, 455, 456, 458, 459, 460, 585, 800], "whole": [103, 474, 475, 485, 585, 682, 915], "With": [103, 131, 166, 250, 264, 585, 691, 843, 975], "1000": [103, 142, 212, 250, 341, 342, 510, 776, 955, 975, 983], "spreadsheet": [103, 184, 250], "xl": 103, "xlsm": 103, "xlsb": 103, "odf": 103, "od": [103, 503, 933], "odt": 103, "memory_map": [104, 108, 112], "v2": [104, 112], "greatli": [104, 112], "repeat": [104, 112, 446, 448, 585], "o": [104, 112, 309, 324, 484, 522, 585, 735, 752, 914, 960, 975], "page": [104, 108, 112, 114, 250, 585, 596, 647, 682, 975], "give": [104, 108, 112, 113, 114, 176, 219, 250, 336, 404, 448, 523, 585, 596, 631, 655, 682, 767, 844, 975], "That": [104, 627, 682], "filenam": 104, "my_fil": 104, "write_ipc": [104, 250], "read_ndjson": 106, "parallelstrategi": [108, 114], "use_statist": [108, 114], "awar": [108, 167, 193, 210, 250, 504, 506, 934, 936], "stabl": [108, 136, 194, 250, 411, 585, 631, 682], "row_group": [108, 114], "read_tabl": 108, "with_column_nam": 110, "push": [110, 112, 113, 114, 115], "down": [110, 112, 113, 114, 115, 381, 585, 815, 975], "therebi": [110, 112, 113, 114], "potenti": [110, 112, 113, 114], "overhead": [110, 112, 113, 114], "realloc": [110, 112, 113, 144, 250, 690, 975], "headerless": 110, "unlik": 110, "fewer": 110, "my_long_fil": 110, "doesn": [110, 367, 585, 803, 966, 975], "thing": [110, 553], "less": [110, 170, 250, 406, 413, 490, 496, 501, 510, 585, 623, 682, 920, 926, 931, 940, 983], "limit": [110, 146, 250, 303, 313, 314, 315, 377, 383, 585, 612, 619, 647, 682, 742, 743, 744, 812, 975], "breezah": 110, "languag": [110, 155, 156, 170, 223, 250, 352, 356, 362, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 623, 682, 787, 791, 797], "hard": [110, 627, 682], "mydf": 110, "lambda": [110, 131, 149, 183, 232, 250, 264, 301, 369, 370, 371, 414, 415, 451, 533, 545, 546, 554, 561, 569, 585, 627, 634, 666, 682, 691, 728, 805, 806, 807, 975], "simpli": [110, 545, 554], "idx": [110, 155, 168, 250, 301, 617, 682, 728, 891, 975], "uint16": [110, 322, 323, 515, 585, 750, 751, 945, 975], "u16": [110, 122, 983], "aws_region": 111, "eu": 111, "central": [111, 404, 472, 585, 844, 902, 975], "allow_pyarrow_filt": 115, "comparison": 115, "dset": 115, "folder": 115, "1970": 115, "stdout": [116, 153, 250], "platform": 116, "linux": 116, "90": 116, "wsl2": 116, "x86_64": 116, "glibc2": 116, "main": 116, "apr": 116, "14": [116, 122, 131, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 250, 340, 390, 585, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 791], "44": [116, 326, 585], "51": 116, "gcc": 116, "matplotlib": [116, 635, 645, 682], "check_dtyp": [117, 118], "check_exact": [117, 118], "rtol": [117, 118], "1e": [117, 118], "atol": [117, 118], "nans_compare_equ": [117, 118], "check_column_ord": 117, "check_row_ord": 117, "assertionerror": [117, 118], "compar": [117, 118, 150, 250, 368, 384, 385, 406, 413, 435, 532, 585, 889, 975], "exactli": [117, 118, 121, 122, 124, 500, 501, 897, 930, 931, 975], "toler": [117, 118, 170, 250, 623, 682], "inexact": [117, 118], "assert": [117, 118, 120, 122, 124, 156, 250, 596, 618, 682, 817, 975], "irrespect": 117, "unsort": 117, "check_nam": 118, "s1": [118, 149, 250, 843, 958, 967, 975], "searchstrategi": [119, 121, 122, 124], "null_prob": [119, 122, 124], "percentag": [119, 122, 124, 439, 585, 864, 975], "chanc": [119, 122, 124, 983], "independ": [119, 120, 122, 124], "flag": [119, 464, 585, 608, 627, 682, 892, 975], "hypothesi": [119, 120, 121, 122, 123, 124, 983], "sampled_from": [119, 983], "unique_small_int": 119, "ccy": [119, 983], "gbp": [119, 983], "eur": [119, 137, 153, 250, 983], "jpy": [119, 983], "min_col": [120, 122], "max_col": [120, 122], "suitabl": [120, 131, 250, 264, 463, 585, 691, 888, 975, 983], "standalon": [120, 122], "itself": [120, 625, 682], "mincol": 120, "exact": [120, 122, 124, 201, 250, 504, 505, 506, 523, 585, 934, 935, 936], "especi": 120, "test_unique_xyz": 120, "assert_someth": 120, "punctuat": 120, "test_special_char_colname_init": 120, "inner_dtyp": [121, 124], "select_from": [121, 124], "min_siz": [121, 122, 124, 983], "max_siz": [121, 122, 124, 983], "anoth": [121, 154, 250, 300, 324, 329, 420, 423, 585, 616, 661, 682, 727, 752, 760, 889, 975], "randomli": 121, "innermost": 121, "ignor": [121, 122, 124, 174, 205, 250, 282, 325, 355, 369, 370, 371, 433, 434, 585, 709, 755, 790, 805, 806, 807, 860, 861, 975], "unset": [121, 355, 790], "2x": 121, "lst": 121, "11330": 121, "24030": 121, "116": 121, "zz": [121, 124], "small": [121, 171, 250, 356, 610, 682, 983], "uint8_pair": [121, 983], "uint": [121, 983], "zip": [121, 983], "131": 121, "176": 121, "149": [121, 983], "include_col": 122, "allow_infin": [122, 124], "allowed_dtyp": [122, 124, 983], "excluded_dtyp": [122, 124], "describ": [122, 153, 250, 975], "desir": 122, "n_chunk": [122, 124, 250, 975], "randomis": 122, "onto": 122, "either": [122, 156, 166, 171, 174, 182, 192, 205, 250, 504, 531, 536, 574, 618, 625, 682, 934], "pct": 122, "preced": 122, "disallow": [122, 124], "exclud": [122, 124, 320, 323, 391, 539, 572, 585, 824, 840, 975], "deploi": [122, 124], "characterist": [122, 124], "concret": [122, 124], "test_repr": 122, "isinst": [122, 124, 250], "0x11f561580": 122, "known": [122, 666], "0565": 122, "34715": 122, "5844": 122, "33": [122, 456, 461, 539, 585, 881, 975], "076854": 122, "3382": 122, "48662": 122, "7540": 122, "29": [122, 155, 156, 170, 223, 250, 348, 352, 356, 362, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 623, 682, 783, 787, 791, 797], "836271": 122, "4063": 122, "06": [122, 223, 250, 330, 340, 354, 355, 366, 790, 791, 799], "39092": 122, "1889": 122, "13": [122, 133, 134, 145, 146, 152, 156, 161, 171, 179, 227, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 250, 451, 453, 540, 545, 554, 577, 585, 601, 602, 611, 612, 618, 625, 660, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 682, 691, 791, 797, 798, 975], "41": [122, 983], "874455": 122, "15836": 122, "1755e": 122, "575050513": 122, "profil": [123, 125, 682], "balanc": [123, 125, 983], "set_environ": 123, "polars_hypothesis_profil": [123, 125], "1500": 123, "constructor": 124, "max_data_s": 124, "normal": [124, 155, 250, 367, 404, 472, 585, 617, 682, 803, 844, 902, 975], "test_repr_is_valid_str": 124, "experi": 124, "create_list_strategi": [124, 983], "polars_max_thread": 126, "behind": 126, "lock": 126, "reason": 126, "pyspark": 126, "udf": [126, 131, 183, 232, 250, 264, 440, 533, 585, 634, 666, 682, 691, 975], "similar": [126, 149, 170, 250, 438, 578, 585, 623, 682], "recommend": [126, 167, 183, 250], "scope": 128, "lifetim": 128, "initi": [128, 545, 554, 578], "whatev": 128, "were": 128, "enter": 128, "advantag": [128, 183, 250], "initialis": [128, 682], "set_": 128, "set_verbos": 128, "do_various_th": 128, "restor": 128, "init": 128, "prefix": [128, 308, 502, 510, 585, 734, 932, 940], "breviti": 128, "nan_as_nul": 130, "_pyarrowdatafram": 130, "nullabl": 130, "extens": [130, 214, 250, 958, 975], "propag": [130, 174, 205, 250, 433, 434, 585, 860, 861, 975], "inference_s": [131, 250], "256": [131, 250, 864, 975], "user": [131, 183, 232, 250, 264, 440, 464, 533, 585, 634, 666, 682, 691, 892, 975], "logic": [131, 232, 250, 261, 437, 521, 530, 585, 615, 622, 637, 663, 666, 682, 691, 959, 975], "almost": [131, 232, 250, 666, 691, 975], "_significantly_": [131, 232, 250, 666, 691, 975], "intens": [131, 232, 250, 666, 691, 975], "becaus": [131, 142, 155, 171, 221, 232, 250, 283, 617, 666, 682, 691, 710, 804, 975], "forc": [131, 170, 232, 250, 622, 623, 666, 682, 691, 975], "materi": [131, 232, 250, 635, 666, 682, 691, 975], "parallelis": [131, 232, 250, 666, 691, 975], "optimis": [131, 232, 250, 666, 682, 691, 890, 891, 975], "achiev": [131, 232, 250, 264, 585, 666, 691, 975], "best": [131, 232, 250, 264, 585, 666, 691, 975], "tri": [131, 250], "arbitrarili": [131, 250], "rearrang": [131, 250], "preserv": [131, 214, 250, 469, 585, 899, 958, 975], "lru_cach": [131, 250, 264, 585, 691, 975], "magnitud": [131, 250, 264, 585, 691, 975], "speedup": [131, 167, 250, 264, 585, 691, 975], "column_1": [131, 218, 250], "scalar": [131, 166, 192, 250, 463, 533, 560, 585, 843, 888, 975], "k": [132, 217, 250, 309, 311, 404, 522, 585, 599, 654, 682, 735, 738, 844, 960, 975], "intoexpr": [132, 154, 155, 156, 196, 203, 217, 227, 230, 250, 391, 438, 475, 531, 532, 536, 538, 540, 541, 545, 547, 554, 562, 565, 571, 574, 575, 578, 585, 599, 616, 617, 618, 641, 649, 654, 660, 664, 682, 824, 975], "nulls_last": [132, 203, 217, 250, 274, 474, 585, 599, 649, 654, 682, 700, 975], "smallest": [132, 217, 250, 309, 585, 599, 654, 682, 735, 975], "largest": [132, 155, 156, 170, 217, 223, 250, 352, 356, 362, 452, 453, 454, 455, 456, 458, 459, 460, 522, 585, 599, 617, 618, 623, 654, 682, 787, 791, 797, 960, 975], "top": [132, 217, 250, 599, 654, 682], "top_k": [132, 250, 309, 585, 599, 682, 735, 975], "cheap": [133, 134, 250, 601, 602, 682, 690, 741, 745, 975], "deepcopi": [133, 134, 250, 601, 602, 682, 741, 745, 975], "clear": [134, 250, 602, 682, 745, 975], "properti": [135, 141, 159, 195, 198, 226, 250, 604, 607, 640, 659, 682, 983], "appl": [135, 160, 169, 188, 190, 209, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 250, 442, 450, 483, 502, 514, 585, 622, 638, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 682, 913, 932], "banana": [135, 209, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 250, 442, 450, 514, 585, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677], "pearson": [136, 250, 404, 472, 542, 567, 585, 844, 902, 975], "correl": [136, 250, 542, 567, 572], "coeffici": [136, 250, 472, 585, 902, 975], "corrcoef": [136, 250], "percentil": [137, 250, 754, 975], "summari": [137, 250, 754, 975], "One": [137, 180, 184, 250, 261, 437, 585, 754, 975], "glimps": [137, 158, 250], "usd": [137, 153, 250, 983], "2020": [137, 153, 156, 250, 331, 335, 338, 341, 342, 344, 346, 351, 355, 358, 359, 504, 505, 506, 618, 682, 762, 766, 769, 776, 778, 781, 786, 790, 793, 934, 935, 936], "null_count": [137, 140, 250, 324, 585, 752, 754, 975], "266667": [137, 250], "666667": [137, 174, 224, 238, 250, 369, 585, 658, 672, 682], "std": [137, 250, 451, 585, 682, 754, 883, 975], "101514": [137, 250], "707107": [137, 250, 370, 585, 806, 975], "57735": [137, 250], "median": [137, 184, 250, 454, 585, 661, 682, 754, 879, 975], "more_column": [138, 143, 197, 220, 250, 372, 552, 585, 605, 609, 642, 656, 682], "Or": [138, 154, 155, 156, 170, 203, 223, 230, 250, 438, 475, 539, 578, 585, 605, 616, 617, 618, 623, 649, 664, 682], "subset": [140, 180, 219, 250, 606, 655, 682], "snippet": [140, 250, 606, 682], "is_nul": [140, 250, 585, 606, 682, 975], "sizeunit": [142, 250, 804, 975], "heap": [142, 250, 804, 975], "its": [142, 250, 330, 356, 362, 475, 585, 761, 791, 797, 804, 975], "bitmap": [142, 250, 804, 975], "therefor": [142, 250, 301, 578, 804, 975], "structarrai": [142, 250, 804, 975], "constant": [142, 156, 250, 375, 585, 618, 682, 804, 810, 975], "unchang": [142, 250, 521, 585, 627, 666, 682, 804, 959, 975], "capac": [142, 201, 250, 804, 897, 975], "ffi": [142, 250, 804, 975], "kb": [142, 250, 804, 975], "mb": [142, 250, 804, 975], "gb": [142, 250, 804, 975], "tb": [142, 250, 804, 975], "revers": [142, 250, 319, 320, 321, 322, 323, 415, 442, 514, 585, 682, 748, 749, 750, 751, 975], "1_000_000": [142, 250, 804, 975], "25888898": [142, 250], "689577102661133": [142, 250], "long": [143, 176, 221, 250, 609, 631, 682], "letter": [143, 235, 244, 250, 372, 552, 585, 609, 669, 678, 682], "thu": [144, 250, 542, 572, 690, 975], "faster": [144, 221, 250, 264, 451, 492, 525, 585, 646, 647, 682, 690, 691, 876, 922, 975], "onlin": [144, 250, 690, 975], "rerun": [144, 250, 690, 975], "fill_valu": [145, 200, 221, 250, 466, 585, 644, 682, 895, 975], "Not": [145, 250, 397, 399, 416, 585, 611, 682], "To": [145, 250, 327, 328, 352, 377, 575, 585, 611, 682, 787], "fillnullstrategi": [146, 250, 377, 585, 612, 682, 812, 975], "matches_supertyp": [146, 250, 612, 682], "forward": [146, 170, 250, 348, 377, 383, 585, 612, 623, 682, 783, 812, 975], "consecut": [146, 250, 303, 377, 383, 478, 585, 612, 682, 812, 908, 975], "supertyp": [146, 250, 263, 585, 612, 682], "fill_nan": [146, 250, 585, 682, 975], "OR": [147, 250, 532, 613, 682], "reduct": [149, 250], "supercast": [149, 250], "parent": [149, 250], "rule": [149, 250, 359, 794], "arithmet": [149, 250], "zip_with": [149, 250, 975], "foo11": [149, 250], "bar22": [149, 250], "null_equ": [150, 250, 889, 975], "retriev": [151, 250, 277, 278, 511, 704, 705, 941], "return_as_str": [153, 250], "preview": [153, 250], "nice": [153, 250], "few": [153, 250], "rather": [153, 170, 250, 510, 623, 682, 940], "head": [153, 172, 206, 250, 263, 408, 585, 626, 682, 846, 946, 975], "tail": [153, 158, 250, 263, 472, 585, 682, 819, 902, 975], "more_bi": [154, 182, 203, 250, 475, 585, 616, 649, 682], "maintain_ord": [154, 182, 184, 219, 223, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 250, 258, 264, 302, 517, 524, 543, 585, 603, 608, 610, 616, 635, 645, 646, 647, 655, 665, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 682, 729, 753, 868, 961, 975], "consist": [154, 182, 250, 504, 616, 682, 934], "agg": [154, 155, 156, 250, 258, 264, 378, 380, 474, 475, 517, 529, 543, 585, 603, 608, 610, 616, 617, 618, 635, 645, 682], "index_column": [155, 156, 250, 617, 618, 682], "include_boundari": [155, 250, 617, 682], "start_bi": [155, 250, 617, 682], "startbi": [155, 250, 617, 682], "dynamicgroupbi": [155, 250], "groupbi": [155, 156, 180, 250, 258, 264, 283, 324, 378, 380, 438, 474, 475, 517, 529, 533, 543, 585, 603, 608, 610, 617, 618, 635, 645, 682, 710, 752, 975], "member": [155, 250, 617, 682, 831, 975], "seen": [155, 250, 303, 383, 585, 617, 682], "roll": [155, 156, 250, 348, 349, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 540, 585, 617, 618, 682, 783, 784, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 975], "slot": [155, 250, 282, 324, 325, 585, 617, 682, 709, 752, 755, 975], "1n": [155, 156, 170, 223, 250, 352, 356, 362, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 623, 682, 787, 791, 797], "nanosecond": [155, 156, 170, 223, 250, 352, 356, 357, 362, 452, 453, 454, 455, 456, 458, 459, 460, 550, 585, 617, 618, 623, 682, 787, 791, 792, 797], "1u": [155, 156, 170, 223, 250, 352, 356, 362, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 623, 682, 787, 791, 797], "microsecond": [155, 156, 170, 223, 250, 352, 356, 357, 362, 452, 453, 454, 455, 456, 458, 459, 460, 549, 550, 585, 617, 618, 623, 635, 682, 787, 791, 797], "1m": [155, 156, 170, 223, 250, 341, 342, 344, 351, 352, 356, 358, 362, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 623, 682, 776, 778, 786, 787, 791, 793, 797], "millisecond": [155, 156, 170, 223, 250, 352, 356, 362, 452, 453, 454, 455, 456, 458, 459, 460, 550, 585, 617, 618, 623, 682, 787, 791, 797], "1h": [155, 156, 170, 223, 250, 352, 356, 362, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 623, 682, 768, 787, 791, 797], "1w": [155, 156, 170, 223, 250, 352, 356, 362, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 623, 682, 787, 791, 797], "week": [155, 156, 170, 223, 250, 352, 356, 362, 364, 452, 453, 454, 455, 456, 458, 459, 460, 550, 585, 617, 618, 623, 682, 787, 791, 797, 799], "1y": [155, 156, 170, 223, 250, 339, 352, 356, 362, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 623, 682, 770, 787, 791, 797, 801], "1i": [155, 156, 170, 223, 250, 352, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 623, 682, 787], "suffix": [155, 156, 169, 170, 196, 223, 227, 230, 250, 307, 352, 356, 362, 397, 399, 400, 401, 438, 450, 452, 453, 454, 455, 456, 458, 459, 460, 483, 585, 617, 618, 622, 623, 641, 660, 661, 664, 682, 733, 787, 791, 797, 913], "_satur": [155, 156, 170, 223, 250, 352, 356, 362, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 623, 682, 787, 791, 797], "satur": [155, 156, 170, 223, 250, 352, 356, 362, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 618, 623, 682, 787, 791, 797], "10i": [155, 156, 250, 617, 618, 682], "ascend": [155, 156, 250, 617, 618, 682], "often": [155, 156, 250, 281, 448, 585, 617, 618, 682, 708], "dynam": [155, 250, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 682], "matter": [155, 156, 167, 193, 210, 250, 617, 618, 682], "_lower_bound": [155, 250, 617, 682], "_upper_bound": [155, 250, 617, 682], "impact": [155, 250, 617, 682], "harder": [155, 250, 617, 682], "inclus": [155, 156, 250, 391, 452, 453, 454, 455, 456, 458, 459, 460, 499, 500, 585, 617, 618, 682, 824, 929, 930, 975], "datapoint": [155, 250, 617, 682], "mondai": [155, 250, 364, 617, 682, 799], "date_rang": [155, 223, 250, 329, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 617, 682, 760, 762, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801], "30m": [155, 250, 356, 362, 617, 682, 791, 797], "time_min": [155, 250, 617, 682], "time_max": [155, 250, 617, 682], "23": [155, 156, 250, 330, 337, 356, 549, 617, 618, 682, 761, 768, 983], "boundari": [155, 250, 313, 314, 315, 585, 617, 682, 742, 743, 744, 820, 975], "time_count": [155, 250, 617, 682], "_lower_boundari": [155, 250, 617, 682], "_upper_boundari": [155, 250, 617, 682], "lower_bound": [155, 250, 313, 315, 391, 585, 617, 682, 742, 744, 824, 963, 975], "upper_bound": [155, 250, 301, 313, 314, 391, 585, 617, 682, 742, 743, 824, 850, 975], "time_agg_list": [155, 250, 617, 682], "arang": [155, 221, 232, 250, 617, 666, 682], "2i": [155, 250, 617, 682], "3i": [155, 250, 617, 682], "a_agg_list": [155, 250, 617, 682], "rollinggroupbi": [156, 250], "dynamic_groupbi": [156, 250, 618, 682], "groupby_dynam": [156, 250, 618, 682], "48": [156, 250, 618, 682], "19": [156, 170, 250, 356, 618, 623, 682, 791, 797], "43": [156, 250, 323, 585, 618, 682], "strptime": [156, 250, 355, 618, 682, 790], "set_sort": [156, 170, 223, 250, 585, 618, 623, 682, 975], "2d": [156, 213, 250, 560, 618, 682, 765], "sum_a": [156, 250, 618, 682], "min_a": [156, 250, 618, 682], "max_a": [156, 250, 618, 682], "to_list": [156, 250, 301, 618, 682, 728, 975], "seed": [157, 194, 250, 386, 445, 462, 468, 585, 818, 870, 887, 898, 975], "seed_1": [157, 250, 386, 585, 818, 975], "seed_2": [157, 250, 386, 585, 818, 975], "seed_3": [157, 250, 386, 585, 818, 975], "hash": [157, 250, 585, 975], "u64": [157, 250, 386, 447, 585, 635, 682, 818, 975], "10783150408545073287": [157, 250], "1438741209321515184": [157, 250], "10047419486152048166": [157, 250], "2047317070637311557": [157, 250], "ab": [158, 172, 206, 227, 250, 511, 512, 585, 660, 682, 819, 846, 946, 975], "grown": [160, 250], "baz": [161, 162, 184, 220, 250, 499, 501, 621, 656, 682, 931], "intermedi": [162, 250, 621, 682, 823, 975, 983], "linear": [162, 186, 242, 250, 279, 390, 419, 444, 456, 540, 541, 568, 585, 621, 636, 676, 682, 706, 823, 869, 881, 975], "mask": [163, 165, 250, 280, 304, 305, 392, 394, 402, 479, 481, 585, 707, 730, 731, 813, 824, 826, 829, 841, 865, 866, 890, 909, 911, 967, 975], "visual": [163, 165, 250], "buffer_s": [167, 250], "intern": [167, 250], "veri": [167, 218, 250, 264, 585, 602, 682, 745, 975], "fit": [167, 201, 221, 250, 467, 585, 896, 897, 975], "signific": [167, 250, 264, 585], "4x": [167, 250], "materialis": [167, 168, 192, 193, 250], "iter_row": [168, 192, 193, 250], "17_500": [168, 250], "klmnoopqrstuvwxyz": [168, 250], "__name__": [168, 250], "7500": [168, 250], "15_000": [168, 250], "record_batch": [168, 250], "to_arrow": [168, 250, 975], "to_batch": [168, 250], "date32": [168, 250], "large_str": [168, 208, 214, 250], "15000": [168, 250], "2500": [168, 250], "joinstrategi": [169, 250, 622, 682], "left_on": [169, 170, 250, 622, 623, 682], "right_on": [169, 170, 250, 622, 623, 682], "_right": [169, 170, 250, 622, 623, 682], "outer": [169, 250, 622, 682], "semi": [169, 250, 622, 682], "anti": [169, 250, 622, 682, 890, 891, 975], "cross": [169, 250, 622, 682], "join_asof": [169, 250, 622, 682], "stringcach": [169, 250, 596], "other_df": [169, 250], "by_left": [170, 250, 623, 682], "by_right": [170, 250, 623, 682], "asofjoinstrategi": [170, 250, 623, 682], "allow_parallel": [170, 250, 622, 623, 682], "force_parallel": [170, 250, 622, 623, 682], "asof": [170, 250, 623, 682], "asof_join": [170, 250], "search": [170, 250, 623, 682], "greater": [170, 250, 384, 385, 472, 501, 585, 623, 682, 902, 931, 975], "distanc": [170, 250, 623, 682, 820, 975], "plan": [170, 171, 250, 600, 608, 615, 622, 623, 637, 645, 663, 682], "gdp": [170, 250, 623, 682], "2016": [170, 250, 623, 682], "2017": [170, 250, 623, 682], "2018": [170, 250, 355, 623, 682, 790], "2019": [170, 250, 623, 682], "record": [170, 250, 623, 682], "jan": [170, 250, 623, 682], "1st": [170, 250, 623, 682], "4164": [170, 250, 623, 682], "4411": [170, 250, 623, 682], "4566": [170, 250, 623, 682], "4696": [170, 250, 623, 682], "popul": [170, 250, 623, 682], "12th": [170, 250, 623, 682], "82": [170, 250, 623, 682], "66": [170, 250, 530, 585, 623, 682, 881, 975], "83": [170, 250, 623, 682], "52": [170, 227, 250, 461, 585, 623, 660, 682], "request": [171, 250], "describe_plan": [171, 250, 682], "unoptim": [171, 250, 682], "describe_optimized_plan": [171, 250, 682], "show_graph": [171, 250, 682], "un": [171, 250], "graphviz": [171, 250, 645, 682], "axi": [173, 174, 176, 178, 205, 250, 631, 682], "null_strategi": [174, 205, 250], "nullstrategi": [174, 205, 250], "spam": [174, 250], "id_var": [176, 250, 631, 682], "value_var": [176, 250, 631, 682], "variable_nam": [176, 250, 631, 682], "value_nam": [176, 250, 631, 682], "unpivot": [176, 250, 631, 682], "leav": [176, 250, 631, 682], "massag": [176, 250, 631, 682], "measur": [176, 250, 631, 682], "merg": [177, 250, 632, 682], "caller": [177, 250, 301, 627, 632, 666, 682], "respons": [177, 250, 632, 682], "what": [180, 250, 957, 966, 975], "pack": [180, 250], "expr_unique_subset": [180, 250], "df_nuniqu": [180, 250], "df_agg_nuniqu": [180, 250], "offer": [183, 250, 440, 585, 634, 682], "fulli": [183, 194, 250], "cast_str_to_int": [183, 250, 634, 682], "col_nam": [183, 250, 634, 682], "tdf": [183, 250, 634, 682], "aggregate_funct": [184, 250], "pivotagg": [184, 250], "nodefault": [184, 250, 504, 934], "sort_column": [184, 250], "predefin": [184, 250], "predict": [184, 187, 223, 250], "transpos": [184, 250], "discoveri": [184, 250], "col1": [184, 221, 250, 682, 983], "col2": [184, 221, 250, 682, 983], "col3": [184, 250, 983], "tanh": [184, 250, 585, 975], "998347": [184, 250], "964028": [184, 250], "999954": [184, 250], "interpol": [186, 242, 250, 377, 419, 444, 456, 568, 585, 636, 676, 682, 869, 881, 975], "rollinginterpolationmethod": [186, 242, 250, 444, 456, 568, 585, 636, 676, 682, 869, 881, 975], "midpoint": [186, 242, 250, 444, 456, 568, 585, 636, 676, 682, 869, 881, 975], "old": [188, 250, 638, 682], "by_pred": [192, 250], "accord": [192, 250, 416, 585, 771], "never": [192, 250], "mutual": [192, 250], "exclus": [192, 250, 530, 585], "addition": [192, 250], "clariti": [192, 250], "anyth": [192, 250], "toomanyrowsreturnederror": [192, 250, 596], "norowsreturnederror": [192, 250, 596], "inherit": [192, 250], "rowserror": [192, 250, 596], "with_replac": [194, 250, 462, 585, 887, 975], "shuffl": [194, 232, 250, 462, 585, 666, 887, 975], "modul": [194, 250, 462, 468, 584, 585, 887, 898, 975], "more_expr": [196, 227, 250, 438, 531, 532, 536, 538, 540, 541, 547, 562, 565, 571, 574, 575, 585, 641, 660, 682], "named_expr": [196, 227, 250, 571, 574, 641, 660, 682], "threshold": [196, 250, 641, 682], "set_auto_structifi": [196, 227, 250, 641, 660, 682], "auto_structifi": [196, 227, 250, 641, 660, 682], "is_odd": [196, 250, 641, 682], "_is_odd": [196, 250, 641, 682], "shift_and_fil": [199, 250, 585, 682, 975], "shift": [200, 250, 282, 325, 439, 466, 540, 585, 644, 682, 709, 755, 864, 895, 975], "shrink": [201, 250, 467, 585, 896, 897, 975], "hold": [201, 250], "ddof": [204, 224, 250, 477, 528, 542, 567, 572, 573, 577, 585, 650, 658, 682, 906, 965, 975], "deviat": [204, 250, 370, 458, 477, 573, 585, 650, 682, 806, 906, 975], "degre": [204, 224, 250, 477, 528, 542, 567, 572, 573, 577, 585, 650, 658, 682, 906, 965, 975], "freedom": [204, 224, 250, 477, 528, 542, 567, 572, 573, 577, 585, 650, 658, 682, 906, 965, 975], "divisor": [204, 224, 250, 477, 528, 542, 567, 572, 573, 577, 585, 650, 658, 682, 906, 965, 975], "816497": [204, 250], "21": [205, 250, 556], "16a": [205, 250], "27b": [205, 250], "38c": [205, 250], "nth": [207, 250, 501, 518, 585, 653, 682, 931, 948, 975], "mostli": [208, 250, 378, 585], "categoricaltyp": [208, 250], "as_seri": [209, 250], "fruit": [209, 250, 442, 450, 483, 502, 514, 585, 913, 932], "car": [209, 250, 442, 450, 514, 585], "beetl": [209, 250, 442, 450, 514, 585], "audi": [209, 250, 442, 450, 514, 585], "300": [209, 250, 877, 878, 880, 975], "instantiat": [212, 250, 955, 975], "from_repr": [212, 250, 955, 975], "df_from_str_repr": [212, 250], "eval": [212, 250, 551, 955, 975], "re": [213, 250, 348, 349, 783, 784], "ll": [213, 250], "numpy_arrai": [213, 250], "use_pyarrow_extension_arrai": [214, 250, 958, 975], "trigger": [214, 250, 958, 975], "sent": [214, 250, 957, 958, 975], "pandas_df1": [214, 250], "pandas_df2": [214, 250], "pandas_df2_pa": [214, 250], "na": [214, 250, 958, 975], "get_column": [215, 250, 575], "four": [216, 250], "five": [216, 250, 983], "bottom_k": [217, 250, 522, 585, 654, 682, 960, 975], "include_head": [218, 250], "header_nam": [218, 250], "column_nam": [218, 250], "perhap": [218, 250], "column_2": [218, 250], "name_gener": [218, 250, 301, 728], "base_nam": [218, 250], "my_column_": [218, 250], "my_column_0": [218, 250], "my_column_1": [218, 250], "my_column_2": [218, 250], "uniquekeepstrategi": [219, 250, 655, 682], "kept": [219, 250, 655, 682], "decompos": [220, 250, 656, 682], "t_a": [220, 250, 656, 682], "t_b": [220, 250, 656, 682], "t_c": [220, 250, 656, 682], "t_d": [220, 250, 656, 682], "womp": [220, 250, 656, 682], "t_": [220, 250, 656, 682], "t_struct": [220, 250, 656, 682], "step": [221, 250, 535], "unstackdirect": [221, 250], "much": [221, 250, 300, 324, 585, 727, 752, 975], "pivot": [221, 250], "phase": [221, 250], "subject": [221, 250], "ascii_uppercas": [221, 250], "h": [221, 250, 257, 359, 467, 504, 506, 508, 585, 934, 936, 938], "col1_0": [221, 250], "col1_1": [221, 250], "col1_2": [221, 250], "col2_0": [221, 250], "col2_1": [221, 250], "col2_2": [221, 250], "syntact": [222, 250, 552, 553, 557, 568, 571, 657, 682, 905, 975], "sugar": [222, 250, 552, 553, 557, 568, 571, 657, 682, 905, 975], "coalesc": [222, 250, 504, 657, 682, 934], "400": [222, 250, 657, 682, 877, 878, 880, 975], "600": [222, 250, 657, 682], "700": [222, 250, 657, 682], "new_df": [222, 250, 657, 682], "time_column": [223, 250], "frequenc": [223, 250], "forward_fil": [223, 250, 320, 323, 585], "varianc": [224, 250, 371, 404, 460, 528, 577, 585, 658, 682, 807, 844, 885, 965, 975], "grow": [225, 250], "is_not": [227, 250, 585, 660, 682], "not_c": [227, 250, 660, 682], "diff": [227, 250, 335, 338, 342, 344, 346, 351, 358, 585, 660, 682, 766, 769, 776, 778, 781, 786, 793, 975], "_diff": [227, 250, 660, 682], "row_nr": [228, 250, 416, 585, 662, 682, 891, 975], "more_agg": [230, 664], "named_agg": [230, 664], "_sum": [230, 664], "_mean_squar": [230, 664], "b_sum": [230, 664], "c_mean_squar": [230, 664], "sub": [232, 585], "triangl": [232, 666], "group_df": [232, 666], "nr": [235, 244, 669, 678], "maxim": [237, 272, 585, 671, 698, 975], "833333": [238, 672], "minim": [240, 273, 278, 467, 475, 585, 674, 699, 705, 855, 896, 975], "overview": [250, 585, 596, 682, 975, 983], "public": [250, 585, 596, 682, 975], "frameinittyp": [250, 682], "variou": [250, 585, 682, 975], "entri": [250, 682], "prevent": [250, 322, 323, 403, 515, 585, 682, 750, 751, 945, 975], "come": [250, 348, 349, 404, 585, 597, 681, 682, 783, 784, 844, 975], "behavior": [250, 264, 300, 533, 585, 727], "mydatafram": 250, "notic": [250, 682, 975], "df4": 250, "df5": 250, "df6": 250, "corr": [250, 567, 572], "drop_in_plac": 250, "drop_nul": [250, 327, 585, 682, 975], "estimated_s": [250, 975], "explod": [250, 380, 449, 585, 682, 874, 975], "find_idx_by_nam": 250, "fold": [250, 425, 538, 545, 546, 569], "frame_equ": [250, 356, 362], "groupby_rol": [250, 452, 453, 454, 455, 456, 458, 459, 460, 585, 617, 682], "hash_row": 250, "hstack": 250, "insert_at_idx": 250, "is_dupl": [250, 585, 975], "is_empti": [250, 975], "is_uniqu": [250, 585, 975], "iter_slic": 250, "melt": [250, 682], "merge_sort": [250, 682], "n_uniqu": [250, 585, 975], "pipe": [250, 585, 682], "quantil": [250, 456, 585, 682, 868, 881, 975], "replace_at_idx": 250, "shrink_to_fit": [250, 975], "take_everi": [250, 585, 682, 975], "to_dict": 250, "to_numpi": [250, 414, 585, 975], "to_panda": [250, 975], "to_struct": 250, "unnest": [250, 500, 501, 512, 682, 930, 931], "unstack": 250, "updat": [250, 682], "upsampl": 250, "write_avro": 250, "write_databas": 250, "write_excel": 250, "write_json": [250, 637, 682], "write_parquet": 250, "cumprod": [257, 585, 975], "ghi": [257, 585], "94": [258, 585], "confus": [260, 397, 399, 585], "tt": [260, 585], "tf": [260, 262, 585], "ff": [260, 262, 585], "upcast": [263, 585], "skip_nul": [264, 585, 691, 975], "pass_nam": [264, 585], "applystrategi": [264, 585], "thread_loc": [264, 585], "unknown": [264, 416, 560, 585], "stage": [264, 585], "code": [264, 464, 585, 625, 682, 892, 975], "amount": [264, 585], "releas": [264, 585, 983], "gil": [264, 585], "discourag": [264, 585], "loop": [264, 585], "a_times_2": [264, 585], "approx": [265, 534, 585, 682], "hyperloglog": [265, 534, 585, 682], "algorithm": [265, 534, 585, 682], "cardin": [265, 534, 585, 682], "invers": [266, 267, 268, 269, 270, 271, 585, 692, 693, 694, 695, 696, 697, 975], "cosin": [266, 267, 316, 317, 414, 585, 692, 693, 746, 747, 975], "570796": [266, 268, 585, 692, 694, 975], "hyperbol": [267, 269, 271, 317, 471, 520, 585, 693, 695, 697, 747, 901, 950, 975], "sine": [268, 269, 414, 470, 471, 585, 694, 695, 900, 901, 975], "881374": [269, 585, 695, 975], "tangent": [270, 271, 519, 520, 585, 696, 697, 949, 950, 975], "785398": [270, 585, 696, 975], "arg_wher": [275, 585], "sublist": [277, 278, 280, 282, 285, 286, 287, 288, 289, 296, 299, 300, 704, 705, 707, 709, 712, 713, 714, 715, 716, 723, 726, 727, 728, 831, 975], "membership": [280, 707], "listcol": 281, "number_of_two": 281, "null_behavior": [282, 325, 585, 709, 755, 975], "nullbehavior": [282, 325, 585, 709, 755, 975], "th": [282, 325, 472, 585, 709, 755, 902, 975], "against": [283, 682, 710, 982, 983], "blindli": [283, 710], "worth": [283, 710], "enough": [283, 472, 585, 710, 902, 975], "concat_list": [283, 551, 710], "rank": [283, 542, 551, 572, 585, 710, 975], "exprnamespac": 284, "reshap": [284, 585, 711, 975], "flat": [284, 449, 585, 711, 874, 975], "taken": [296, 498, 517, 585, 723, 928], "null_on_oob": [300, 727], "cheaper": [300, 727], "n_field_strategi": [301, 728], "tostructstrategi": [301, 728], "first_non_nul": [301, 728], "max_width": [301, 728], "field_0": [301, 728], "field_1": [301, 728], "field_n": [301, 728], "know": [301, 492, 922, 957, 966, 975], "incorrectli": 301, "downstream": [301, 464, 585, 892, 975], "col_name_": [301, 728], "col_name_0": [301, 728], "col_name_1": [301, 728], "col_name_2": [301, 728], "maintain": [302, 463, 524, 585, 646, 647, 682, 729, 888, 961, 975], "substr": [304, 307, 308, 479, 483, 494, 495, 499, 500, 501, 502, 730, 733, 734, 909, 913, 924, 925, 929, 930, 931, 932], "transferencod": [305, 306, 481, 482, 731, 732, 911, 912], "strict": [305, 310, 479, 481, 493, 504, 505, 506, 508, 585, 731, 736, 889, 909, 911, 923, 934, 935, 936, 938, 975], "hex": [305, 306, 481, 482, 493, 731, 732, 911, 912, 923], "base64": [305, 306, 481, 482, 731, 732, 911, 912], "complex": [309, 324, 522, 585, 735, 752, 960, 975], "frac": [309, 369, 370, 371, 472, 522, 585, 735, 805, 806, 807, 902, 960, 975], "due": [310, 355, 585, 736, 790, 975], "overflow": [310, 322, 323, 493, 515, 585, 736, 750, 751, 923, 945, 975], "categoricalord": [311, 738], "lexic": [311, 738], "foo_clip": [313, 314, 315, 585], "clip": [314, 315, 585, 743, 744, 975], "543081": [317, 585, 747, 975], "cumul": [319, 320, 321, 322, 323, 545, 546, 547, 585, 748, 749, 750, 751, 975], "a_revers": [319, 320, 321, 322, 323, 415, 450, 514, 585], "value_cummax": [320, 585], "value_cummax_all_fil": [320, 585], "value_cumsum": [323, 585], "value_cumsum_all_fil": [323, 585], "min_period": [324, 369, 370, 371, 451, 452, 453, 454, 455, 456, 458, 459, 460, 585, 752, 805, 806, 807, 876, 877, 878, 879, 880, 881, 883, 884, 885, 975], "slide": [324, 585, 752, 975], "realli": [324, 585, 752, 975], "visit": [324, 585, 752, 975], "drop_nan": [328, 585, 975], "lose": [329, 760], "2001": [329, 334, 336, 337, 339, 340, 345, 347, 352, 353, 354, 356, 357, 361, 362, 363, 364, 365, 366, 504, 760, 765, 767, 768, 770, 772, 773, 774, 775, 777, 779, 780, 782, 785, 787, 788, 789, 791, 792, 794, 796, 797, 798, 799, 800, 801, 934], "time_unit_m": [329, 760], "time_unit_n": [329, 760], "naiv": [330, 761], "compon": [330, 357, 504, 506, 550, 761, 792, 934, 936], "resolv": 330, "tm": 330, "456000": [330, 761], "101000": 330, "456": [330, 761, 954, 975], "101": [330, 493, 923, 983], "d1": 330, "d2": 330, "d3": 330, "utc": [331, 355, 504, 506, 762, 790, 934, 936], "europ": [331, 355, 762, 790], "london": [331, 355, 762, 790], "gmt": [331, 355, 762, 790], "bst": [331, 355, 762, 790], "weekdai": [334, 353], "day_of_month": [334, 353, 364], "ordinal_dai": [334, 364], "day_of_year": [334, 353, 364], "days_diff": 335, "epochtimeunit": [336, 556, 767], "unix": [336, 556, 767], "epoch_n": [336, 767], "epoch_": [336, 767], "978307200000000": [336, 361, 767, 796], "978307200": [336, 767], "978393600000000": [336, 361, 767, 796], "978393600": [336, 767], "978480000000000": [336, 361, 767, 796], "978480000": [336, 767], "hours_diff": 338, "leap": [339, 352, 770, 787], "2000": [339, 341, 348, 349, 352, 770, 783, 784, 787], "2002": [339, 340, 352, 354, 366, 770, 787, 801], "iso": [340, 363, 364, 771, 798, 799], "correspond": [340, 445, 585, 771, 870, 975], "2006": [340, 352, 787], "180": [340, 354, 366], "2004": [340, 352, 787], "2005": [340, 352, 787], "1_001": [341, 342, 344, 351], "002": [341, 342, 344, 351, 550, 776, 778, 786], "003": [341, 342, 344, 351], "3000": 341, "997": [341, 342, 344, 351], "997000": 341, "998": [341, 342, 344, 351], "998000": 341, "999": [341, 342, 344, 351, 983], "999000": 341, "microseconds_diff": 342, "milliseconds_diff": 344, "minutes_diff": 346, "1440": [346, 781], "think": [348, 349, 783, 784], "vectoris": [348, 349, 783, 784], "tseri": [348, 349, 783, 784], "monthend": [348, 783], "rollforward": [348, 783], "monthbegin": [349, 784], "rollback": [349, 784], "nanoseconds_diff": 351, "1000000": [351, 510, 786], "minu": [352, 787], "dictat": [352, 787], "date_plus_1i": [352, 787], "1y2mo": [352, 787], "date_min": 352, "1998": [352, 787], "1999": [352, 787], "2003": [352, 556, 787], "ordin": [353, 445, 585, 788, 870, 975], "366": [353, 788], "use_earliest": [355, 790], "convert_time_zon": [355, 790], "ambigu": [355, 790], "sai": [355, 790], "daylight": [355, 790], "earliest": [355, 790], "london_timezon": [355, 790], "amsterdam": [355, 790], "london_to_amsterdam": [355, 790], "cet": [355, 790], "cest": [355, 790], "dst": [355, 790], "ts_local": [355, 790], "brussel": [355, 790], "half": [356, 369, 370, 371, 585, 791, 805, 806, 807, 975], "225": [356, 362], "to_fram": [356, 362, 504, 890, 891, 930, 931, 934, 975], "10m": [356, 362, 791, 797], "milli": [357, 792], "micro": [357, 792], "456789": 357, "654321": 357, "111110": 357, "765431": 357, "sec": [357, 983], "11111": 357, "seconds_diff": 358, "timestamp_n": [361, 796], "timestamp_m": 361, "978307200000": 361, "978393600000": 361, "978480000000": 361, "1mo_satur": 362, "53": [363, 798], "sundai": [364, 799], "incorrect": [365, 464, 585, 666, 800, 892, 975], "time_unit_u": [365, 800], "32971": [365, 800], "32974": [365, 800], "32976": [365, 800], "718281828459045": [367, 409, 585, 803, 847, 975], "pk": [367, 585, 803, 975], "459148": [367, 585], "754888": [367, 585], "span": [369, 370, 371, 585, 805, 806, 807, 975], "half_lif": [369, 370, 371, 585, 805, 806, 807, 975], "adjust": [369, 370, 371, 472, 585, 805, 806, 807, 902, 975], "ignore_nul": [369, 370, 371, 585, 805, 806, 807, 966, 975], "exponenti": [369, 370, 371, 373, 441, 585, 805, 806, 807, 808, 975], "weight": [369, 370, 371, 451, 452, 453, 454, 455, 456, 458, 459, 460, 472, 585, 805, 806, 807, 876, 877, 878, 879, 880, 881, 883, 884, 885, 902, 975], "decai": [369, 370, 371, 585, 805, 806, 807, 975], "term": [369, 370, 371, 489, 492, 585, 805, 806, 807, 919, 922, 975], "mass": [369, 370, 371, 585, 805, 806, 807, 975], "gamma": [369, 370, 371, 585, 805, 806, 807, 975], "foral": [369, 370, 371, 585, 805, 806, 807, 975], "geq": [369, 370, 371, 585, 805, 806, 807, 975], "theta": [369, 370, 371, 585, 805, 806, 807, 975], "life": [369, 370, 371, 585, 805, 806, 807, 975], "exp": [369, 370, 371, 585, 805, 806, 807, 975], "ln": [369, 370, 371, 585, 805, 806, 807, 975], "smooth": [369, 370, 371, 585, 805, 806, 807, 975], "factor": [369, 370, 371, 521, 585, 805, 806, 807, 959, 975], "leq": [369, 370, 371, 585, 805, 806, 807, 975], "begin": [369, 370, 371, 485, 585, 805, 806, 807, 915, 975], "imbal": [369, 370, 371, 585, 805, 806, 807, 975], "ew": [369, 370, 371, 585, 805, 806, 807, 975], "w_i": [369, 370, 371, 585, 805, 806, 807, 975], "recurs": [369, 370, 371, 585, 805, 806, 807, 975], "y_0": [369, 370, 371, 585, 805, 806, 807, 975], "x_0": [369, 370, 371, 585, 805, 806, 807, 975], "y_t": [369, 370, 371, 585, 805, 806, 807, 975], "y_": [369, 370, 371, 585, 805, 806, 807, 975], "x_t": [369, 370, 371, 585, 805, 806, 807, 975], "observ": [369, 370, 371, 585, 805, 806, 807, 975], "x_2": [369, 370, 371, 585, 805, 806, 807, 975], "428571": [369, 585], "bia": [370, 371, 404, 457, 472, 585, 806, 807, 844, 882, 902, 975], "unbias": [370, 371, 585, 806, 807, 975], "963624": [370, 585, 806, 975], "928571": [371, 585, 807, 975], "wildcard": [372, 539, 545, 546, 554, 569, 585], "regex": [372, 422, 479, 480, 483, 485, 486, 494, 495, 502, 552, 575, 585, 909, 910, 913, 915, 916, 924, 925, 932], "aa": [372, 552, 585], "ba": [372, 552, 585], "cc": [372, 552, 585], "718282": [373, 585], "389056": [373, 585], "54": [373, 585, 983], "59815": [373, 585], "expand": [374, 421, 422, 448, 585, 809, 975], "exprlistnamespac": [374, 380, 449, 585], "exprstringnamespac": [374, 585], "pythonliter": [375, 562, 565, 585, 810, 852, 855, 975], "extrem": [375, 585, 810, 975], "group_col": [378, 529, 585], "g1": [378, 529, 585], "g2": [378, 529, 585], "lt": [378, 529, 585, 975], "gte": [378, 529, 585], "divis": [382, 523, 585], "truediv": [382, 585], "9774092659964970114": [386, 585], "13614470193936745724": [386, 585], "1101441246220388612": [386, 585], "11638928888656214026": [386, 585], "13382926553367784577": [386, 585], "cumsum": [389, 513, 585, 620, 682, 843, 975], "interpolationmethod": [390, 585, 823, 975], "regrid": [390, 585], "grid": [390, 585], "df_original_grid": [390, 585], "grid_point": [390, 585], "df_new_grid": [390, 585], "conflat": [391, 585], "finit": [393, 523, 542, 572, 585, 828, 975], "primit": [395, 585, 957, 975], "optional_memb": [395, 585, 831, 975], "infinit": [396, 523, 585, 832, 975], "_isnan": [397, 585], "b_isnan": [397, 585], "negat": [398, 585], "_is_not_nan": [399, 585], "b_is_not_nan": [399, 585], "_not_nul": [400, 585], "a_not_nul": [400, 585], "b_not_nul": [400, 585], "_isnul": [401, 585], "a_isnul": [401, 585], "b_isnul": [401, 585], "undo": [403, 427, 585], "duplicateerror": [403, 585, 596], "occurr": [403, 585, 820, 975], "333333": [403, 460, 585, 864, 885, 975], "fisher": [404, 472, 585, 844, 902, 975], "fourth": [404, 585, 844, 975], "subtract": [404, 513, 585, 844, 975], "distribut": [404, 472, 585, 844, 902, 975], "elimin": [404, 585, 844, 975], "bias": [404, 472, 585, 844, 902, 975], "scipi": [404, 472, 585, 844, 902, 975], "stat": [404, 472, 585, 844, 902, 975], "153061": [404, 585], "logarithm": [409, 410, 411, 585, 847, 848, 849, 975], "584963": [409, 585], "30103": [410, 585], "60206": [410, 585], "natur": [411, 585, 849, 975], "plu": [411, 585, 849, 975], "693147": [411, 585], "098612": [411, 585], "386294": [411, 585], "lowest": [412, 585], "9223372036854775808": [412, 585], "agg_list": [414, 585], "elementwis": [414, 451, 452, 453, 454, 455, 456, 458, 459, 460, 585, 876, 877, 878, 879, 880, 881, 883, 884, 885, 975], "third": [414, 585], "parti": [414, 585], "book": [414, 585], "argmax": [414, 585], "_revers": [415, 450, 514, 585], "b_revers": [415, 450, 514, 585], "remap": [416, 585, 851, 975], "lookup": [416, 585, 851, 975], "country_code_dict": [416, 585], "ca": [416, 585], "canada": [416, 585], "de": [416, 585], "germani": [416, 585], "fr": [416, 585], "franc": [416, 585], "country_cod": [416, 585], "rest": [416, 585], "exprmetanamespac": [420, 423], "computeerror": [424, 493, 596, 923], "keep_nam": [427, 585], "modulu": [429, 585], "xlog2": [431, 441, 585], "poison": [433, 434, 585, 860, 861, 975], "nanmax": [433, 434, 585, 860, 861, 975], "wherea": [433, 434, 585, 619, 626, 682, 860, 861, 975], "inequ": [435, 585], "outcom": [438, 585], "_max": [438, 585], "c_max": [438, 585], "_min": [438, 585], "c_min": [438, 585], "recent": [439, 585, 864, 975], "percent": [439, 585, 864, 975], "090909": [439, 585], "extract_numb": [440, 585], "r": [440, 480, 484, 485, 486, 494, 585, 910, 914, 915, 916, 924], "expon": [441, 585, 975], "512": [441, 585, 864, 975], "reverse_": [442, 585], "reverse_a": [442, 585], "reverse_fruit": [442, 585], "reverse_b": [442, 585], "reverse_car": [442, 585], "rankmethod": [445, 585, 870, 975], "ti": [445, 585, 870, 975], "competit": [445, 585, 870, 975], "highest": [445, 526, 542, 572, 585, 682, 870, 975], "64bit": [447, 585, 872, 975], "safe": [447, 504, 585, 872, 934, 957, 975], "coerc": [448, 585], "fruits_revers": [450, 514, 585], "cars_revers": [450, 514, 585], "window_s": [451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 585, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 975], "rolling_min": [451, 585, 876, 975], "rolling_max": [451, 585, 876, 975], "rolling_mean": [451, 585, 876, 975], "rolling_sum": [451, 585, 876, 975], "multipli": [451, 452, 453, 454, 455, 456, 458, 459, 460, 585, 876, 877, 878, 879, 880, 881, 883, 884, 885, 975], "358899": [451, 585], "041452": [451, 585], "567764": [451, 585], "travers": [452, 453, 455, 458, 459, 460, 585, 877, 878, 880, 883, 884, 885, 975], "vector": [452, 453, 455, 458, 459, 460, 585, 877, 878, 880, 883, 884, 885, 975], "5h": [452, 453, 454, 455, 456, 458, 459, 460, 585], "skew": [457, 585, 882, 975], "527525": [458, 585, 883, 975], "digit": [461, 510, 585, 886, 910, 940, 975, 983], "searchsortedsid": [463, 585, 888, 975], "leftmost": [463, 585, 888, 975], "rightmost": [463, 585, 888, 975], "six": [463, 585], "extrema": [467, 585, 896, 975], "112": [467, 585, 983], "129": [467, 585], "i8": [467, 585, 755, 875, 963, 975], "8589934592": [467, 585], "1073741824": [467, 585], "content": [468, 527, 585, 898, 975], "175201": [471, 585, 901, 975], "about": [472, 585, 902, 975, 983], "unimod": [472, 585, 902, 975], "skewtest": [472, 585, 902, 975], "speak": [472, 585, 902, 975], "g_1": [472, 585, 902, 975], "m_3": [472, 585, 902, 975], "m_2": [472, 585, 902, 975], "m_i": [472, 585, 902, 975], "sum_": [472, 585, 902, 975], "texttt": [472, 585, 902, 975], "k_3": [472, 585, 902, 975], "k_2": [472, 585, 902, 975], "sqrt": [472, 585, 902, 975], "343622": [472, 585], "value1": [475, 585], "value2": [475, 585], "attain": [475, 585], "414214": [476, 585, 905, 975], "ends_with": [479, 502, 932], "crab": [479, 909], "dog": [479, 507, 509, 541, 909], "rab": [479, 909], "success": [480, 486, 910, 916], "overlap": [480, 486, 910, 916], "captur": [480, 485, 486, 910, 915, 916], "123": [480, 486, 495, 910, 916, 925, 954, 975], "bla": [480, 486, 910, 916], "asd": [480, 486, 910, 916], "678": [480, 486, 910, 916], "910t": [480, 486, 910, 916], "count_digit": 480, "666f6f": [482, 912], "626172": [482, 912], "mango": [483, 502, 913, 932], "go": [483, 913], "has_suffix": 483, "group_index": [485, 915], "vote": [485, 915], "ballon_dor": [485, 915], "candid": [485, 915], "messi": [485, 915], "ref": [485, 915], "candidat": [485, 915], "jorginho": [485, 915], "ronaldo": [485, 915], "extracted_nr": 486, "910": [486, 916], "json_path_match": [487, 917], "jsonpath": [487, 488, 917, 918], "json_path": [488, 918], "regardless": [488, 918], "json_val": [488, 918], "n_char": [489, 919], "caf\u00e9": [489, 492, 919, 922], "345": [489, 492, 919, 922], "\u6771\u4eac": [489, 492, 919, 922], "nchar": [489, 492], "fill_char": [490, 496, 920, 926], "justifi": [490, 496, 920, 926], "pad": [490, 496, 510, 920, 926, 940], "cow": [490, 496, 920, 926], "monkei": [490, 496, 920, 926], "hippopotamu": [490, 496, 920, 926], "strip": [491, 497, 921, 927], "tworld": [491, 503, 921, 933], "wod": [491, 497, 921, 927], "rld": [491, 921], "text": [492, 494, 495, 922, 983], "radix": [493, 923], "parseerror": [493, 923], "becom": [493, 923], "silent": [493, 923], "110": [493, 923], "010": [493, 923], "fa1e": [493, 923], "ff00": [493, 923], "cafe": [493, 923], "64030": [493, 923], "65280": [493, 923], "51966": [493, 923], "replace_al": [494, 924], "123abc": [494, 924], "abc456": [494, 924], "abcabc": [495, 925], "123a123": [495, 925], "bc": [495, 575, 925], "trail": [497, 503, 927, 933], "worl": [497, 503, 927, 933], "subslic": [498, 928], "pear": [498, 928], "papaya": [498, 928], "dragonfruit": [498, 928], "s_slice": 498, "ear": [498, 928], "aya": [498, 928], "uit": [498, 928], "ya": [498, 928], "onf": [498, 928], "a_1": [500, 930, 953, 975], "d_4": [500, 930], "rename_field": [500, 501, 930, 931], "first_part": [500, 501, 930, 931], "second_part": [500, 501, 930, 931], "remaind": [501, 931], "app": [502, 932], "has_prefix": 502, "polarstemporaltyp": [504, 934], "tz_awar": [504, 934], "anywher": [504, 505, 506, 934, 935, 936], "toggl": [504, 934], "futur": [504, 934], "3f": [504, 506, 934, 936], "00z": [504, 506, 934, 936], "sun": [504, 934], "jul": [504, 934], "34": [504, 934], "_tz_awar": 506, "lowercas": [507, 937], "variant": [507, 509], "uppercas": [509, 939], "100000": 510, "0010": 510, "0001": 510, "00000": 510, "00001": 510, "cd": [511, 512], "struct_col": [511, 512], "www": 512, "xxx": 512, "yyi": 512, "zzz": 512, "obvious": 512, "structfieldnotfounderror": [512, 596], "761594": [520, 585, 950, 975], "replic": [521, 585, 959, 975], "vals_phys": [521, 585], "floordiv": [523, 585], "behaviour": [523, 585], "ieee": [523, 585], "754": [523, 585], "mathemat": [523, 551, 585], "undefin": [523, 585], "On": [523, 585], "operand": [523, 585], "infin": [523, 585], "value_count": [525, 585, 975], "9223372036854775807": [526, 585], "multithread": [527, 585], "binary_str": [530, 585], "zfill": [530, 585], "250": [530, 585, 878, 975, 983], "bin_x": [530, 585], "bin_i": [530, 585], "xor_xi": [530, 585], "bin_xor_xi": [530, 585], "00001010": [530, 585], "00000001": [530, 585], "00001011": [530, 585], "00001000": [530, 585], "00000010": [530, 585], "11111010": [530, 585], "00000011": [530, 585], "249": [530, 585], "11111001": [530, 585], "01000010": [530, 585], "00000100": [530, 585], "70": [530, 585], "01000110": [530, 585], "bitwis": [531, 532], "AND": 531, "returns_scalar": 533, "product_a": 533, "49": 533, "Be": 535, "more_nam": 539, "hamburg": 539, "lag": 540, "mimic": 540, "a_lag_": 540, "a_rol": 540, "plai": 541, "swim": 541, "walk": 541, "full_sent": 541, "correlationmethod": 542, "propagate_nan": [542, 572], "spearman": [542, 572], "larger": [542, 572, 646, 647, 682], "544705": [542, 567], "covari": 544, "acc": [545, 546, 554, 569], "include_init": 545, "accumul": [545, 546, 554, 569], "fn": [545, 546, 554, 569], "new_valu": [545, 546, 554, 569], "cumreduc": 545, "999999": 549, "tbl_width_char": 550, "120": 550, "add_week": 550, "add_dai": 550, "add_second": 550, "add_milli": 550, "add_hour": 550, "arr": [551, 586, 957, 975, 976], "a_b_doubl": 551, "f_string": 555, "placehold": 555, "hello_": 555, "_world": 555, "foo_": 555, "_bar_": 555, "foo_a_bar_1": 555, "foo_b_bar_2": 555, "foo_c_bar_3": 555, "epoch": 556, "timestep": 556, "1666683077": 556, "1666683099": 556, "39": 556, "12345": [556, 739, 815, 886, 975], "12346": 556, "agg_group": [557, 585], "favor": [559, 567, 572], "implod": [559, 585, 975], "allow_object": 560, "valueexcept": 560, "foo_bar": 560, "test_func": 561, "605551": 573, "605551275463989": 573, "my_struct": 574, "q": 574, "selector": 575, "statement": 578, "chain": 578, "isn": 578, "thens": 578, "elif": 578, "pick": 578, "sometim": 584, "and_": 585, "approx_uniqu": [585, 682], "arcco": [585, 975], "arccosh": [585, 975], "arcsin": [585, 975], "arcsinh": [585, 975], "arctan": [585, 975], "arctanh": [585, 975], "arg_max": [585, 975], "arg_min": [585, 975], "arg_sort": [585, 975], "arg_uniqu": [585, 975], "backward_fil": 585, "clip_max": [585, 975], "clip_min": [585, 975], "co": [585, 975], "cosh": [585, 975], "cumcount": 585, "cummax": [585, 975], "cummin": [585, 975], "cumulative_ev": [585, 975], "entropi": [585, 975], "eq": [585, 975], "ewm_mean": [585, 975], "ewm_std": [585, 975], "ewm_var": [585, 975], "extend_const": [585, 975], "flatten": 585, "ge": [585, 975], "gt": [585, 975], "inspect": [585, 682], "is_between": [585, 975], "is_finit": [585, 975], "is_first": [585, 975], "is_in": [585, 975], "is_infinit": [585, 975], "is_nan": [585, 975], "is_not_nan": [585, 975], "is_not_nul": [585, 975], "kurtosi": [585, 975], "le": [585, 975], "log10": [585, 975], "log1p": [585, 975], "map_alia": 585, "map_dict": [585, 975], "mod": 585, "mul": 585, "nan_max": [585, 975], "nan_min": [585, 975], "ne": [585, 975], "or_": 585, "pct_chang": [585, 975], "pow": [585, 975], "reinterpret": [585, 975], "repeat_bi": 585, "rolling_appli": [585, 975], "rolling_median": [585, 975], "rolling_quantil": [585, 975], "rolling_skew": [585, 975], "rolling_std": [585, 975], "rolling_var": [585, 975], "search_sort": [585, 975], "shrink_dtyp": [585, 975], "sin": [585, 975], "sinh": [585, 975], "sort_bi": 585, "tan": [585, 975], "to_phys": [585, 975], "unique_count": [585, 975], "xor": 585, "expos": 596, "registr": 596, "miscellan": 596, "arrowerror": 596, "columnnotfounderror": 596, "invalidoperationerror": 596, "nodataerror": 596, "polarspanicerror": 596, "schemaerror": 596, "schemafieldnotfounderror": 596, "shapeerror": 596, "parametr": 596, "build_info": 596, "get_index_typ": 596, "show_vers": 596, "threadpool_s": 596, "sqlcontext": [596, 982], "hit": [600, 682], "node": [600, 620, 627, 631, 635, 638, 682], "huge": [603, 682], "saver": [603, 682], "purpos": [610, 682], "influenc": [610, 627, 682], "read_json": [615, 663, 682], "lazygroupbi": [616, 617, 618, 682], "other_lf": [622, 682], "validate_output_schema": [627, 682], "streamabl": [627, 631, 682], "past": [627, 682], "assum": [627, 666, 682], "paramount": [627, 682], "bug": [627, 666, 682], "elig": [627, 682], "invari": [627, 682], "upheld": [627, 682], "prune": [627, 682], "show_plot": [635, 682], "truncate_nod": [635, 682], "figsiz": [635, 645, 682], "gantt": [635, 682], "plot": [635, 645, 682], "groupby_partit": [635, 682], "470": [635, 682], "475": [635, 682], "1964": [635, 682], "from_json": [637, 682], "swap": [638, 682], "output_path": [645, 682], "raw_output": [645, 682], "figur": [645, 682], "persist": [646, 647, 682], "ram": [646, 647, 682], "slightli": [646, 647, 682], "my_larger_than_ram_fil": [646, 647, 682], "data_pagesize_limit": [647, 682], "290994": [650, 682], "118034": [650, 682], "433013": [650, 682], "1875": [658, 682], "extern": [661, 682], "lf_other": [661, 682], "afoo": [661, 682], "cfoo": [661, 682], "train_lf": [661, 682], "feature_0": [661, 682], "feature_1": [661, 682], "test_lf": [661, 682], "_train": [661, 682], "feature_0_train": [661, 682], "dataframescan": [663, 682], "output_schema": [663, 682], "lf2": 682, "lf3": 682, "lf4": 682, "lf5": 682, "lf6": 682, "explain": 682, "sink_ipc": 682, "sink_parquet": 682, "with_context": 682, "new_aliased_sr": [687, 975], "append_chunk": [690, 975], "super": [690, 975], "141593": [692, 975], "292432": [693, 975], "549306": [697, 975], "listnamespac": [703, 809, 874, 975], "catnamespac": 737, "56789": [739, 815, 886, 975], "901234": [739, 815, 886, 975], "pi": [746, 900, 949, 975], "1232e": [746, 975], "quick": [754, 975, 983], "series_num": [754, 975], "581139": [754, 975], "series_str": [754, 975], "datetimenamespac": 759, "ser": [763, 764, 795], "replace_time_zon": [763, 764, 795], "kathmandu": [763, 764, 795], "0545": [763, 764, 795], "500m": [775, 777, 785, 792], "500000": 775, "2m": 780, "500000000": 785, "date_minus_1y_2mon": 787, "165": [791, 797], "series_equ": [791, 797, 975], "timestamp_u": 796, "978307200000000000": 796, "978393600000000000": 796, "978480000000000000": 796, "005": [803, 975], "06293300616044681": [803, 975], "65": [803, 975], "8568409950394724": [803, 975], "4000000": [804, 975], "814697265625": [804, 975], "stringnamespac": [809, 907, 975], "bitmask": [817, 975], "swiftli": [817, 975], "10734580197236529959": [818, 975], "3022416320763508302": [818, 975], "13756996518000038261": [818, 975], "bin_count": [820, 975], "a_count": [820, 975], "fall": [824, 975], "2147483648": [850, 975], "iso3166": [851, 975], "tur": [851, 975], "jpn": [851, 975], "nld": [851, 975], "country_lookup": [851, 975], "japan": [851, 975], "t\u00fcrkiy": [851, 975], "netherland": [851, 975], "unrecognis": [851, 975], "unspecifi": [851, 975], "country_nam": [851, 975], "166667": [864, 975], "142857": [864, 975], "peak": [865, 866, 975], "quanil": [868, 975], "nanstd": [876, 975], "858612": [876, 975], "200": [877, 878, 880, 975], "150": [878, 975], "350": [878, 975], "450": [878, 975], "381802": [882, 975], "dev": [883, 975], "57": [886, 975, 983], "frequent": [890, 891, 975], "mutat": [891, 975], "2246e": [900, 949, 975], "6331e16": [949, 975], "lib": [952, 975], "int64arrai": [952, 975], "a_2": [953, 975], "a_3": [953, 975], "s_from_str_repr": [955, 975], "zero_copy_onli": [957, 975], "writabl": [957, 975], "complet": [957, 975], "view": [957, 975], "presenc": [957, 975], "immut": [957, 975], "127": [963, 975], "seriesview": [966, 975], "arraylik": 975, "dtype_if_empti": 975, "position": 975, "scenario": 975, "through": 975, "chunk_length": 975, "cut": 975, "get_chunk": 975, "has_valid": 975, "hist": 975, "is_boolean": 975, "is_float": 975, "is_integ": 975, "is_numer": [975, 983], "is_sort": 975, "is_tempor": 975, "is_utf8": 975, "new_from_index": 975, "peak_max": 975, "peak_min": 975, "power": 975, "qcut": 975, "set_at_idx": 975, "guid": 983, "easi": 983, "approxim": 983, "own": 983, "machin": 983, "xdist": 983, "vari": 983, "hardwar": 983, "setup": 983, "numeric_dtyp": 983, "null_probabililti": 983, "test_numer": 983, "col0": 983, "col4": 983, "29096": 983, "485": 983, "2147483647": 983, "8257e14": 983, "7508": 983, "37338": 983, "7264": 983, "321": 983, "16996": 983, "121": 983, "361": 983, "63204": 983, "1443e235": 983, "conform": 983, "ascii_lett": 983, "id_char": 983, "alphabet": 983, "price": 983, "min_valu": 983, "max_valu": 983, "test_price_calcul": 983, "a101": 983, "8nin": 983, "qhoo": 983, "714": 983, "544": 983, "i0e0": 983, "0000": 983, "colz": 983, "test_miscellan": 983, "143": 983, "235": 983, "87": 983, "186": 983, "174": 983, "179": 983, "213": 983, "221": 983, "86": 983, "255": 983}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [34, 0, 1, "", "DataType"], [35, 0, 1, "", "Date"], [36, 0, 1, "", "Datetime"], [37, 0, 1, "", "Decimal"], [38, 0, 1, "", "Duration"], [39, 0, 1, "", "Float32"], [40, 0, 1, "", "Float64"], [41, 0, 1, "", "Int16"], [42, 0, 1, "", "Int32"], [43, 0, 1, "", "Int64"], [44, 0, 1, "", "Int8"], [45, 0, 1, "", "List"], [46, 0, 1, "", "Null"], [47, 0, 1, "", "Object"], [982, 0, 1, "", "SQLContext"], [51, 0, 1, "", "StringCache"], [52, 0, 1, "", "Struct"], [53, 0, 1, "", "Time"], [54, 0, 1, "", "UInt16"], [55, 0, 1, "", "UInt32"], [56, 0, 1, "", "UInt64"], [57, 0, 1, "", "UInt8"], [58, 0, 1, "", "Unknown"], [59, 0, 1, "", "Utf8"], [60, 4, 1, "", "align_frames"], [531, 4, 1, "", "all"], [532, 4, 1, "", "any"], [533, 4, 1, "", "apply"], [534, 4, 1, "", "approx_unique"], [535, 4, 1, "", "arange"], [536, 4, 1, "", "arg_sort_by"], [65, 4, 1, "", "arg_where"], [537, 4, 1, "", "avg"], [66, 4, 1, "", "build_info"], [538, 4, 1, "", "coalesce"], [539, 4, 1, "", "col"], [67, 4, 1, "", "collect_all"], [68, 4, 1, "", "concat"], [540, 4, 1, "", "concat_list"], [541, 4, 1, "", "concat_str"], [542, 4, 1, "", "corr"], [543, 4, 1, "", "count"], [544, 4, 1, "", "cov"], [545, 4, 1, "", "cumfold"], [546, 4, 1, "", "cumreduce"], [547, 4, 1, "", "cumsum"], [69, 4, 1, "", "cut"], [548, 4, 1, "", "date"], [70, 4, 1, "", "date_range"], [549, 4, 1, "", "datetime"], [550, 4, 1, "", "duration"], [551, 4, 1, "", "element"], [71, 4, 1, "", "enable_string_cache"], [552, 4, 1, "", "exclude"], [553, 4, 1, "", "first"], [554, 4, 1, "", "fold"], [555, 4, 1, "", "format"], [86, 4, 1, "", "from_arrow"], [87, 4, 1, "", "from_dataframe"], [88, 4, 1, "", "from_dict"], [89, 4, 1, "", "from_dicts"], [556, 4, 1, "", "from_epoch"], [90, 4, 1, "", "from_numpy"], [91, 4, 1, "", "from_pandas"], [92, 4, 1, "", "from_records"], [93, 4, 1, "", "from_repr"], [94, 4, 1, "", "get_dummies"], [95, 4, 1, "", "get_index_type"], [557, 4, 1, "", "groups"], [558, 4, 1, "", "head"], [559, 4, 1, "", "list"], [560, 4, 1, "", "lit"], [561, 4, 1, "", "map"], [562, 4, 1, "", "max"], [563, 4, 1, "", "mean"], [564, 4, 1, "", "median"], [565, 4, 1, "", "min"], [566, 4, 1, "", "n_unique"], [97, 4, 1, "", "ones"], [567, 4, 1, "", "pearson_corr"], [568, 4, 1, "", "quantile"], [98, 4, 1, "", "read_avro"], [99, 4, 1, "", "read_csv"], [100, 4, 1, "", "read_csv_batched"], [101, 4, 1, "", "read_database"], [102, 4, 1, "", "read_delta"], [103, 4, 1, "", "read_excel"], [104, 4, 1, "", "read_ipc"], [105, 4, 1, "", "read_ipc_schema"], [106, 4, 1, "", "read_json"], [107, 4, 1, "", "read_ndjson"], [108, 4, 1, "", "read_parquet"], [109, 4, 1, "", "read_parquet_schema"], [569, 4, 1, "", "reduce"], [570, 4, 1, "", "repeat"], [110, 4, 1, "", "scan_csv"], [111, 4, 1, "", "scan_delta"], [112, 4, 1, "", "scan_ipc"], [113, 4, 1, "", "scan_ndjson"], [114, 4, 1, "", "scan_parquet"], [115, 4, 1, "", "scan_pyarrow_dataset"], [571, 4, 1, "", "select"], [116, 4, 1, "", "show_versions"], [572, 4, 1, "", "spearman_rank_corr"], [573, 4, 1, "", "std"], [574, 4, 1, "", "struct"], [575, 4, 1, "", "sum"], [576, 4, 1, "", "tail"], [126, 4, 1, "", "threadpool_size"], [577, 4, 1, "", "var"], [578, 4, 1, "", "when"], [127, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "activate_decimals"], [6, 1, 1, "", "load"], [7, 1, 1, "", "restore_defaults"], [8, 1, 1, "", "save"], [9, 1, 1, "", "set_ascii_tables"], [10, 1, 1, "", "set_fmt_float"], [11, 1, 1, "", "set_fmt_str_lengths"], [12, 1, 1, "", "set_streaming_chunk_size"], [13, 1, 1, "", "set_tbl_cell_alignment"], [14, 1, 1, "", "set_tbl_cols"], [15, 1, 1, "", "set_tbl_column_data_type_inline"], [16, 1, 1, "", "set_tbl_dataframe_shape_below"], [17, 1, 1, "", "set_tbl_formatting"], [18, 1, 1, "", "set_tbl_hide_column_data_types"], [19, 1, 1, "", "set_tbl_hide_column_names"], [20, 1, 1, "", "set_tbl_hide_dataframe_shape"], [21, 1, 1, "", "set_tbl_hide_dtype_separator"], [22, 1, 1, "", "set_tbl_rows"], [23, 1, 1, "", "set_tbl_width_chars"], [24, 1, 1, "", "set_verbose"], [25, 1, 1, "", "state"]], "polars.DataFrame": [[130, 1, 1, "", "__dataframe__"], [131, 1, 1, "", "apply"], [132, 1, 1, "", "bottom_k"], [133, 1, 1, "", "clear"], [134, 1, 1, "", "clone"], [135, 2, 1, "", "columns"], [136, 1, 1, "", "corr"], [137, 1, 1, "", "describe"], [138, 1, 1, "", "drop"], [139, 1, 1, "", "drop_in_place"], [140, 1, 1, "", "drop_nulls"], [141, 2, 1, "", "dtypes"], [142, 1, 1, "", "estimated_size"], [143, 1, 1, "", "explode"], [144, 1, 1, "", "extend"], [145, 1, 1, "", "fill_nan"], [146, 1, 1, "", "fill_null"], [147, 1, 1, "", "filter"], [148, 1, 1, "", "find_idx_by_name"], [149, 1, 1, "", "fold"], [150, 1, 1, "", "frame_equal"], [151, 1, 1, "", "get_column"], [152, 1, 1, "", "get_columns"], [153, 1, 1, "", "glimpse"], [154, 1, 1, "", "groupby"], [155, 1, 1, "", "groupby_dynamic"], [156, 1, 1, "", "groupby_rolling"], [157, 1, 1, "", "hash_rows"], [158, 1, 1, "", "head"], [159, 2, 1, "", "height"], [160, 1, 1, "", "hstack"], [161, 1, 1, "", "insert_at_idx"], [162, 1, 1, "", "interpolate"], [163, 1, 1, "", "is_duplicated"], [164, 1, 1, "", "is_empty"], [165, 1, 1, "", "is_unique"], [166, 1, 1, "", "item"], [167, 1, 1, "", "iter_rows"], [168, 1, 1, "", "iter_slices"], [169, 1, 1, "", "join"], [170, 1, 1, "", "join_asof"], [171, 1, 1, "", "lazy"], [172, 1, 1, "", "limit"], [173, 1, 1, "", "max"], [174, 1, 1, "", "mean"], [175, 1, 1, "", "median"], [176, 1, 1, "", "melt"], [177, 1, 1, "", "merge_sorted"], [178, 1, 1, "", "min"], [179, 1, 1, "", "n_chunks"], [180, 1, 1, "", "n_unique"], [181, 1, 1, "", "null_count"], [182, 1, 1, "", "partition_by"], [183, 1, 1, "", "pipe"], [184, 1, 1, "", "pivot"], [185, 1, 1, "", "product"], [186, 1, 1, "", "quantile"], [187, 1, 1, "", "rechunk"], [188, 1, 1, "", "rename"], [189, 1, 1, "", "replace"], [190, 1, 1, "", "replace_at_idx"], [191, 1, 1, "", "reverse"], [192, 1, 1, "", "row"], [193, 1, 1, "", "rows"], [194, 1, 1, "", "sample"], [195, 2, 1, "", "schema"], [196, 1, 1, "", "select"], [197, 1, 1, "", "set_sorted"], [198, 2, 1, "", "shape"], [199, 1, 1, "", "shift"], [200, 1, 1, "", "shift_and_fill"], [201, 1, 1, "", "shrink_to_fit"], [202, 1, 1, "", "slice"], [203, 1, 1, "", "sort"], [204, 1, 1, "", "std"], [205, 1, 1, "", "sum"], [206, 1, 1, "", "tail"], [207, 1, 1, "", "take_every"], [208, 1, 1, "", "to_arrow"], [209, 1, 1, "", "to_dict"], [210, 1, 1, "", "to_dicts"], [211, 1, 1, "", "to_dummies"], [212, 1, 1, "", "to_init_repr"], [213, 1, 1, "", "to_numpy"], [214, 1, 1, "", "to_pandas"], [215, 1, 1, "", "to_series"], [216, 1, 1, "", "to_struct"], [217, 1, 1, "", "top_k"], [218, 1, 1, "", "transpose"], [219, 1, 1, "", "unique"], [220, 1, 1, "", "unnest"], [221, 1, 1, "", "unstack"], [222, 1, 1, "", "update"], [223, 1, 1, "", "upsample"], [224, 1, 1, "", "var"], [225, 1, 1, "", "vstack"], [226, 2, 1, "", "width"], [227, 1, 1, "", "with_columns"], [228, 1, 1, "", "with_row_count"], [26, 1, 1, "", "write_avro"], [27, 1, 1, "", "write_csv"], [28, 1, 1, "", "write_database"], [29, 1, 1, "", "write_excel"], [30, 1, 1, "", "write_ipc"], [31, 1, 1, "", "write_json"], [32, 1, 1, "", "write_ndjson"], [33, 1, 1, "", "write_parquet"]], "polars.DataType": [[34, 1, 1, "", "__init__"]], "polars.Date": [[35, 1, 1, "", "__init__"]], "polars.Datetime": [[36, 1, 1, "", "__init__"]], "polars.Decimal": [[37, 1, 1, "", "__init__"]], "polars.Duration": [[38, 1, 1, "", "__init__"]], "polars.Expr": [[256, 1, 1, "", "abs"], [257, 1, 1, "", "add"], [258, 1, 1, "", "agg_groups"], [259, 1, 1, "", "alias"], [260, 1, 1, "", "all"], [261, 1, 1, "", "and_"], [262, 1, 1, "", "any"], [263, 1, 1, "", "append"], [264, 1, 1, "", "apply"], [265, 1, 1, "", "approx_unique"], [266, 1, 1, "", "arccos"], [267, 1, 1, "", "arccosh"], [268, 1, 1, "", "arcsin"], [269, 1, 1, "", "arcsinh"], [270, 1, 1, "", "arctan"], [271, 1, 1, "", "arctanh"], [272, 1, 1, "", "arg_max"], [273, 1, 1, "", "arg_min"], [274, 1, 1, "", "arg_sort"], [275, 1, 1, "", "arg_true"], [276, 1, 1, "", "arg_unique"], [303, 1, 1, "", "backward_fill"], [309, 1, 1, "", "bottom_k"], [310, 1, 1, "", "cast"], [312, 1, 1, "", "ceil"], [313, 1, 1, "", "clip"], [314, 1, 1, "", "clip_max"], [315, 1, 1, "", "clip_min"], [316, 1, 1, "", "cos"], [317, 1, 1, "", "cosh"], [318, 1, 1, "", "count"], [319, 1, 1, "", "cumcount"], [320, 1, 1, "", "cummax"], [321, 1, 1, "", "cummin"], [322, 1, 1, "", "cumprod"], [323, 1, 1, "", "cumsum"], [324, 1, 1, "", "cumulative_eval"], [325, 1, 1, "", "diff"], [326, 1, 1, "", "dot"], [327, 1, 1, "", "drop_nans"], [328, 1, 1, "", "drop_nulls"], [367, 1, 1, "", "entropy"], [368, 1, 1, "", "eq"], [369, 1, 1, "", "ewm_mean"], [370, 1, 1, "", "ewm_std"], [371, 1, 1, "", "ewm_var"], [372, 1, 1, "", "exclude"], [373, 1, 1, "", "exp"], [374, 1, 1, "", "explode"], [375, 1, 1, "", "extend_constant"], [376, 1, 1, "", "fill_nan"], [377, 1, 1, "", "fill_null"], [378, 1, 1, "", "filter"], [379, 1, 1, "", "first"], [380, 1, 1, "", "flatten"], [381, 1, 1, "", "floor"], [382, 1, 1, "", "floordiv"], [383, 1, 1, "", "forward_fill"], [384, 1, 1, "", "ge"], [385, 1, 1, "", "gt"], [386, 1, 1, "", "hash"], [387, 1, 1, "", "head"], [388, 1, 1, "", "implode"], [389, 1, 1, "", "inspect"], [390, 1, 1, "", "interpolate"], [391, 1, 1, "", "is_between"], [392, 1, 1, "", "is_duplicated"], [393, 1, 1, "", "is_finite"], [394, 1, 1, "", "is_first"], [395, 1, 1, "", "is_in"], [396, 1, 1, "", "is_infinite"], [397, 1, 1, "", "is_nan"], [398, 1, 1, "", "is_not"], [399, 1, 1, "", "is_not_nan"], [400, 1, 1, "", "is_not_null"], [401, 1, 1, "", "is_null"], [402, 1, 1, "", "is_unique"], [403, 1, 1, "", "keep_name"], [404, 1, 1, "", "kurtosis"], [405, 1, 1, "", "last"], [406, 1, 1, "", "le"], [407, 1, 1, "", "len"], [408, 1, 1, "", "limit"], [409, 1, 1, "", "log"], [410, 1, 1, "", "log10"], [411, 1, 1, "", "log1p"], [412, 1, 1, "", "lower_bound"], [413, 1, 1, "", "lt"], [414, 1, 1, "", "map"], [415, 1, 1, "", "map_alias"], [416, 1, 1, "", "map_dict"], [417, 1, 1, "", "max"], [418, 1, 1, "", "mean"], [419, 1, 1, "", "median"], [428, 1, 1, "", "min"], [429, 1, 1, "", "mod"], [430, 1, 1, "", "mode"], [431, 1, 1, "", "mul"], [432, 1, 1, "", "n_unique"], [433, 1, 1, "", "nan_max"], [434, 1, 1, "", "nan_min"], [435, 1, 1, "", "ne"], [436, 1, 1, "", "null_count"], [437, 1, 1, "", "or_"], [438, 1, 1, "", "over"], [439, 1, 1, "", "pct_change"], [440, 1, 1, "", "pipe"], [441, 1, 1, "", "pow"], [442, 1, 1, "", "prefix"], [443, 1, 1, "", "product"], [444, 1, 1, "", "quantile"], [445, 1, 1, "", "rank"], [446, 1, 1, "", "rechunk"], [447, 1, 1, "", "reinterpret"], [448, 1, 1, "", "repeat_by"], [449, 1, 1, "", "reshape"], [450, 1, 1, "", "reverse"], [451, 1, 1, "", "rolling_apply"], [452, 1, 1, "", "rolling_max"], [453, 1, 1, "", "rolling_mean"], [454, 1, 1, "", "rolling_median"], [455, 1, 1, "", "rolling_min"], [456, 1, 1, "", "rolling_quantile"], [457, 1, 1, "", "rolling_skew"], [458, 1, 1, "", "rolling_std"], [459, 1, 1, "", "rolling_sum"], [460, 1, 1, "", "rolling_var"], [461, 1, 1, "", "round"], [462, 1, 1, "", "sample"], [463, 1, 1, "", "search_sorted"], [464, 1, 1, "", "set_sorted"], [465, 1, 1, "", "shift"], [466, 1, 1, "", "shift_and_fill"], [467, 1, 1, "", "shrink_dtype"], [468, 1, 1, "", "shuffle"], [469, 1, 1, "", "sign"], [470, 1, 1, "", "sin"], [471, 1, 1, "", "sinh"], [472, 1, 1, "", "skew"], [473, 1, 1, "", "slice"], [474, 1, 1, "", "sort"], [475, 1, 1, "", "sort_by"], [476, 1, 1, "", "sqrt"], [477, 1, 1, "", "std"], [513, 1, 1, "", "sub"], [514, 1, 1, "", "suffix"], [515, 1, 1, "", "sum"], [516, 1, 1, "", "tail"], [517, 1, 1, "", "take"], [518, 1, 1, "", "take_every"], [519, 1, 1, "", "tan"], [520, 1, 1, "", "tanh"], [521, 1, 1, "", "to_physical"], [522, 1, 1, "", "top_k"], [523, 1, 1, "", "truediv"], [524, 1, 1, "", "unique"], [525, 1, 1, "", "unique_counts"], [526, 1, 1, "", "upper_bound"], [527, 1, 1, "", "value_counts"], [528, 1, 1, "", "var"], [529, 1, 1, "", "where"], [530, 1, 1, "", "xor"]], "polars.Expr.arr": [[277, 1, 1, "", "arg_max"], [278, 1, 1, "", "arg_min"], [279, 1, 1, "", "concat"], [280, 1, 1, "", "contains"], [281, 1, 1, "", "count_match"], [282, 1, 1, "", "diff"], [283, 1, 1, "", "eval"], [284, 1, 1, "", "explode"], [285, 1, 1, "", "first"], [286, 1, 1, "", "get"], [287, 1, 1, "", "head"], [288, 1, 1, "", "join"], [289, 1, 1, "", "last"], [290, 1, 1, "", "lengths"], [291, 1, 1, "", "max"], [292, 1, 1, "", "mean"], [293, 1, 1, "", "min"], [294, 1, 1, "", "reverse"], [295, 1, 1, "", "shift"], [296, 1, 1, "", "slice"], [297, 1, 1, "", "sort"], [298, 1, 1, "", "sum"], [299, 1, 1, "", "tail"], [300, 1, 1, "", "take"], [301, 1, 1, "", "to_struct"], [302, 1, 1, "", "unique"]], "polars.Expr.bin": [[304, 1, 1, "", "contains"], [305, 1, 1, "", "decode"], [306, 1, 1, "", "encode"], [307, 1, 1, "", "ends_with"], [308, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[311, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[329, 1, 1, "", "cast_time_unit"], [330, 1, 1, "", "combine"], [331, 1, 1, "", "convert_time_zone"], [332, 1, 1, "", "date"], [333, 1, 1, "", "datetime"], [334, 1, 1, "", "day"], [335, 1, 1, "", "days"], [336, 1, 1, "", "epoch"], [337, 1, 1, "", "hour"], [338, 1, 1, "", "hours"], [339, 1, 1, "", "is_leap_year"], [340, 1, 1, "", "iso_year"], [341, 1, 1, "", "microsecond"], [342, 1, 1, "", "microseconds"], [343, 1, 1, "", "millisecond"], [344, 1, 1, "", "milliseconds"], [345, 1, 1, "", "minute"], [346, 1, 1, "", "minutes"], [347, 1, 1, "", "month"], [348, 1, 1, "", "month_end"], [349, 1, 1, "", "month_start"], [350, 1, 1, "", "nanosecond"], [351, 1, 1, "", "nanoseconds"], [352, 1, 1, "", "offset_by"], [353, 1, 1, "", "ordinal_day"], [354, 1, 1, "", "quarter"], [355, 1, 1, "", "replace_time_zone"], [356, 1, 1, "", "round"], [357, 1, 1, "", "second"], [358, 1, 1, "", "seconds"], [359, 1, 1, "", "strftime"], [360, 1, 1, "", "time"], [361, 1, 1, "", "timestamp"], [362, 1, 1, "", "truncate"], [363, 1, 1, "", "week"], [364, 1, 1, "", "weekday"], [365, 1, 1, "", "with_time_unit"], [366, 1, 1, "", "year"]], "polars.Expr.meta": [[420, 1, 1, "", "eq"], [421, 1, 1, "", "has_multiple_outputs"], [422, 1, 1, "", "is_regex_projection"], [423, 1, 1, "", "ne"], [424, 1, 1, "", "output_name"], [425, 1, 1, "", "pop"], [426, 1, 1, "", "root_names"], [427, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[478, 1, 1, "", "concat"], [479, 1, 1, "", "contains"], [480, 1, 1, "", "count_match"], [481, 1, 1, "", "decode"], [482, 1, 1, "", "encode"], [483, 1, 1, "", "ends_with"], [484, 1, 1, "", "explode"], [485, 1, 1, "", "extract"], [486, 1, 1, "", "extract_all"], [487, 1, 1, "", "json_extract"], [488, 1, 1, "", "json_path_match"], [489, 1, 1, "", "lengths"], [490, 1, 1, "", "ljust"], [491, 1, 1, "", "lstrip"], [492, 1, 1, "", "n_chars"], [493, 1, 1, "", "parse_int"], [494, 1, 1, "", "replace"], [495, 1, 1, "", "replace_all"], [496, 1, 1, "", "rjust"], [497, 1, 1, "", "rstrip"], [498, 1, 1, "", "slice"], [499, 1, 1, "", "split"], [500, 1, 1, "", "split_exact"], [501, 1, 1, "", "splitn"], [502, 1, 1, "", "starts_with"], [503, 1, 1, "", "strip"], [504, 1, 1, "", "strptime"], [505, 1, 1, "", "to_date"], [506, 1, 1, "", "to_datetime"], [507, 1, 1, "", "to_lowercase"], [508, 1, 1, "", "to_time"], [509, 1, 1, "", "to_uppercase"], [510, 1, 1, "", "zfill"]], "polars.Expr.struct": [[511, 1, 1, "", "field"], [512, 1, 1, "", "rename_fields"]], "polars.Float32": [[39, 1, 1, "", "__init__"]], "polars.Float64": [[40, 1, 1, "", "__init__"]], "polars.Int16": [[41, 1, 1, "", "__init__"]], "polars.Int32": [[42, 1, 1, "", "__init__"]], "polars.Int64": [[43, 1, 1, "", "__init__"]], "polars.Int8": [[44, 1, 1, "", "__init__"]], "polars.LazyFrame": [[599, 1, 1, "", "bottom_k"], [600, 1, 1, "", "cache"], [601, 1, 1, "", "clear"], [602, 1, 1, "", "clone"], [603, 1, 1, "", "collect"], [604, 2, 1, "", "columns"], [605, 1, 1, "", "drop"], [606, 1, 1, "", "drop_nulls"], [607, 2, 1, "", "dtypes"], [608, 1, 1, "", "explain"], [609, 1, 1, "", "explode"], [610, 1, 1, "", "fetch"], [611, 1, 1, "", "fill_nan"], [612, 1, 1, "", "fill_null"], [613, 1, 1, "", "filter"], [614, 1, 1, "", "first"], [615, 1, 1, "", "from_json"], [616, 1, 1, "", "groupby"], [617, 1, 1, "", "groupby_dynamic"], [618, 1, 1, "", "groupby_rolling"], [619, 1, 1, "", "head"], [620, 1, 1, "", "inspect"], [621, 1, 1, "", "interpolate"], [622, 1, 1, "", "join"], [623, 1, 1, "", "join_asof"], [624, 1, 1, "", "last"], [625, 1, 1, "", "lazy"], [626, 1, 1, "", "limit"], [627, 1, 1, "", "map"], [628, 1, 1, "", "max"], [629, 1, 1, "", "mean"], [630, 1, 1, "", "median"], [631, 1, 1, "", "melt"], [632, 1, 1, "", "merge_sorted"], [633, 1, 1, "", "min"], [634, 1, 1, "", "pipe"], [635, 1, 1, "", "profile"], [636, 1, 1, "", "quantile"], [637, 1, 1, "", "read_json"], [638, 1, 1, "", "rename"], [639, 1, 1, "", "reverse"], [640, 2, 1, "", "schema"], [641, 1, 1, "", "select"], [642, 1, 1, "", "set_sorted"], [643, 1, 1, "", "shift"], [644, 1, 1, "", "shift_and_fill"], [645, 1, 1, "", "show_graph"], [646, 1, 1, "", "sink_ipc"], [647, 1, 1, "", "sink_parquet"], [648, 1, 1, "", "slice"], [649, 1, 1, "", "sort"], [650, 1, 1, "", "std"], [651, 1, 1, "", "sum"], [652, 1, 1, "", "tail"], [653, 1, 1, "", "take_every"], [654, 1, 1, "", "top_k"], [655, 1, 1, "", "unique"], [656, 1, 1, "", "unnest"], [657, 1, 1, "", "update"], [658, 1, 1, "", "var"], [659, 2, 1, "", "width"], [660, 1, 1, "", "with_columns"], [661, 1, 1, "", "with_context"], [662, 1, 1, "", "with_row_count"], [663, 1, 1, "", "write_json"]], "polars.List": [[45, 1, 1, "", "__init__"]], "polars.Null": [[46, 1, 1, "", "__init__"]], "polars.Object": [[47, 1, 1, "", "__init__"]], "polars.SQLContext": [[48, 1, 1, "", "execute"], [49, 1, 1, "", "query"], [50, 1, 1, "", "register"]], "polars.Series": [[686, 1, 1, "", "abs"], [687, 1, 1, "", "alias"], [688, 1, 1, "", "all"], [689, 1, 1, "", "any"], [690, 1, 1, "", "append"], [691, 1, 1, "", "apply"], [692, 1, 1, "", "arccos"], [693, 1, 1, "", "arccosh"], [694, 1, 1, "", "arcsin"], [695, 1, 1, "", "arcsinh"], [696, 1, 1, "", "arctan"], [697, 1, 1, "", "arctanh"], [698, 1, 1, "", "arg_max"], [699, 1, 1, "", "arg_min"], [700, 1, 1, "", "arg_sort"], [701, 1, 1, "", "arg_true"], [702, 1, 1, "", "arg_unique"], [703, 3, 1, "", "arr"], [735, 1, 1, "", "bottom_k"], [736, 1, 1, "", "cast"], [737, 3, 1, "", "cat"], [739, 1, 1, "", "ceil"], [740, 1, 1, "", "chunk_lengths"], [741, 1, 1, "", "clear"], [742, 1, 1, "", "clip"], [743, 1, 1, "", "clip_max"], [744, 1, 1, "", "clip_min"], [745, 1, 1, "", "clone"], [746, 1, 1, "", "cos"], [747, 1, 1, "", "cosh"], [748, 1, 1, "", "cummax"], [749, 1, 1, "", "cummin"], [750, 1, 1, "", "cumprod"], [751, 1, 1, "", "cumsum"], [752, 1, 1, "", "cumulative_eval"], [753, 1, 1, "", "cut"], [754, 1, 1, "", "describe"], [755, 1, 1, "", "diff"], [756, 1, 1, "", "dot"], [757, 1, 1, "", "drop_nans"], [758, 1, 1, "", "drop_nulls"], [759, 3, 1, "", "dt"], [802, 3, 1, "", "dtype"], [803, 1, 1, "", "entropy"], [804, 1, 1, "", "estimated_size"], [805, 1, 1, "", "ewm_mean"], [806, 1, 1, "", "ewm_std"], [807, 1, 1, "", "ewm_var"], [808, 1, 1, "", "exp"], [809, 1, 1, "", "explode"], [810, 1, 1, "", "extend_constant"], [811, 1, 1, "", "fill_nan"], [812, 1, 1, "", "fill_null"], [813, 1, 1, "", "filter"], [814, 3, 1, "", "flags"], [815, 1, 1, "", "floor"], [816, 1, 1, "", "get_chunks"], [817, 1, 1, "", "has_validity"], [818, 1, 1, "", "hash"], [819, 1, 1, "", "head"], [820, 1, 1, "", "hist"], [821, 1, 1, "", "implode"], [822, 3, 1, "", "inner_dtype"], [823, 1, 1, "", "interpolate"], [824, 1, 1, "", "is_between"], [825, 1, 1, "", "is_boolean"], [826, 1, 1, "", "is_duplicated"], [827, 1, 1, "", "is_empty"], [828, 1, 1, "", "is_finite"], [829, 1, 1, "", "is_first"], [830, 1, 1, "", "is_float"], [831, 1, 1, "", "is_in"], [832, 1, 1, "", "is_infinite"], [833, 1, 1, "", "is_integer"], [834, 1, 1, "", "is_nan"], [835, 1, 1, "", "is_not_nan"], [836, 1, 1, "", "is_not_null"], [837, 1, 1, "", "is_null"], [838, 1, 1, "", "is_numeric"], [839, 1, 1, "", "is_sorted"], [840, 1, 1, "", "is_temporal"], [841, 1, 1, "", "is_unique"], [842, 1, 1, "", "is_utf8"], [843, 1, 1, "", "item"], [844, 1, 1, "", "kurtosis"], [845, 1, 1, "", "len"], [846, 1, 1, "", "limit"], [847, 1, 1, "", "log"], [848, 1, 1, "", "log10"], [849, 1, 1, "", "log1p"], [850, 1, 1, "", "lower_bound"], [851, 1, 1, "", "map_dict"], [852, 1, 1, "", "max"], [853, 1, 1, "", "mean"], [854, 1, 1, "", "median"], [855, 1, 1, "", "min"], [856, 1, 1, "", "mode"], [857, 1, 1, "", "n_chunks"], [858, 1, 1, "", "n_unique"], [859, 3, 1, "", "name"], [860, 1, 1, "", "nan_max"], [861, 1, 1, "", "nan_min"], [862, 1, 1, "", "new_from_index"], [863, 1, 1, "", "null_count"], [864, 1, 1, "", "pct_change"], [865, 1, 1, "", "peak_max"], [866, 1, 1, "", "peak_min"], [867, 1, 1, "", "product"], [868, 1, 1, "", "qcut"], [869, 1, 1, "", "quantile"], [870, 1, 1, "", "rank"], [871, 1, 1, "", "rechunk"], [872, 1, 1, "", "reinterpret"], [873, 1, 1, "", "rename"], [874, 1, 1, "", "reshape"], [875, 1, 1, "", "reverse"], [876, 1, 1, "", "rolling_apply"], [877, 1, 1, "", "rolling_max"], [878, 1, 1, "", "rolling_mean"], [879, 1, 1, "", "rolling_median"], [880, 1, 1, "", "rolling_min"], [881, 1, 1, "", "rolling_quantile"], [882, 1, 1, "", "rolling_skew"], [883, 1, 1, "", "rolling_std"], [884, 1, 1, "", "rolling_sum"], [885, 1, 1, "", "rolling_var"], [886, 1, 1, "", "round"], [887, 1, 1, "", "sample"], [888, 1, 1, "", "search_sorted"], [889, 1, 1, "", "series_equal"], [890, 1, 1, "", "set"], [891, 1, 1, "", "set_at_idx"], [892, 1, 1, "", "set_sorted"], [893, 3, 1, "", "shape"], [894, 1, 1, "", "shift"], [895, 1, 1, "", "shift_and_fill"], [896, 1, 1, "", "shrink_dtype"], [897, 1, 1, "", "shrink_to_fit"], [898, 1, 1, "", "shuffle"], [899, 1, 1, "", "sign"], [900, 1, 1, "", "sin"], [901, 1, 1, "", "sinh"], [902, 1, 1, "", "skew"], [903, 1, 1, "", "slice"], [904, 1, 1, "", "sort"], [905, 1, 1, "", "sqrt"], [906, 1, 1, "", "std"], [907, 3, 1, "", "str"], [945, 1, 1, "", "sum"], [946, 1, 1, "", "tail"], [947, 1, 1, "", "take"], [948, 1, 1, "", "take_every"], [949, 1, 1, "", "tan"], [950, 1, 1, "", "tanh"], [951, 3, 1, "", "time_unit"], [952, 1, 1, "", "to_arrow"], [953, 1, 1, "", "to_dummies"], [954, 1, 1, "", "to_frame"], [955, 1, 1, "", "to_init_repr"], [956, 1, 1, "", "to_list"], [957, 1, 1, "", "to_numpy"], [958, 1, 1, "", "to_pandas"], [959, 1, 1, "", "to_physical"], [960, 1, 1, "", "top_k"], [961, 1, 1, "", "unique"], [962, 1, 1, "", "unique_counts"], [963, 1, 1, "", "upper_bound"], [964, 1, 1, "", "value_counts"], [965, 1, 1, "", "var"], [966, 1, 1, "", "view"], [967, 1, 1, "", "zip_with"]], "polars.Series.arr": [[704, 1, 1, "", "arg_max"], [705, 1, 1, "", "arg_min"], [706, 1, 1, "", "concat"], [707, 1, 1, "", "contains"], [708, 1, 1, "", "count_match"], [709, 1, 1, "", "diff"], [710, 1, 1, "", "eval"], [711, 1, 1, "", "explode"], [712, 1, 1, "", "first"], [713, 1, 1, "", "get"], [714, 1, 1, "", "head"], [715, 1, 1, "", "join"], [716, 1, 1, "", "last"], [717, 1, 1, "", "lengths"], [718, 1, 1, "", "max"], [719, 1, 1, "", "mean"], [720, 1, 1, "", "min"], [721, 1, 1, "", "reverse"], [722, 1, 1, "", "shift"], [723, 1, 1, "", "slice"], [724, 1, 1, "", "sort"], [725, 1, 1, "", "sum"], [726, 1, 1, "", "tail"], [727, 1, 1, "", "take"], [728, 1, 1, "", "to_struct"], [729, 1, 1, "", "unique"]], "polars.Series.bin": [[730, 1, 1, "", "contains"], [731, 1, 1, "", "decode"], [732, 1, 1, "", "encode"], [733, 1, 1, "", "ends_with"], [734, 1, 1, "", "starts_with"]], "polars.Series.cat": [[738, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[760, 1, 1, "", "cast_time_unit"], [761, 1, 1, "", "combine"], [762, 1, 1, "", "convert_time_zone"], [763, 1, 1, "", "date"], [764, 1, 1, "", "datetime"], [765, 1, 1, "", "day"], [766, 1, 1, "", "days"], [767, 1, 1, "", "epoch"], [768, 1, 1, "", "hour"], [769, 1, 1, "", "hours"], [770, 1, 1, "", "is_leap_year"], [771, 1, 1, "", "iso_year"], [772, 1, 1, "", "max"], [773, 1, 1, "", "mean"], [774, 1, 1, "", "median"], [775, 1, 1, "", "microsecond"], [776, 1, 1, "", "microseconds"], [777, 1, 1, "", "millisecond"], [778, 1, 1, "", "milliseconds"], [779, 1, 1, "", "min"], [780, 1, 1, "", "minute"], [781, 1, 1, "", "minutes"], [782, 1, 1, "", "month"], [783, 1, 1, "", "month_end"], [784, 1, 1, "", "month_start"], [785, 1, 1, "", "nanosecond"], [786, 1, 1, "", "nanoseconds"], [787, 1, 1, "", "offset_by"], [788, 1, 1, "", "ordinal_day"], [789, 1, 1, "", "quarter"], [790, 1, 1, "", "replace_time_zone"], [791, 1, 1, "", "round"], [792, 1, 1, "", "second"], [793, 1, 1, "", "seconds"], [794, 1, 1, "", "strftime"], [795, 1, 1, "", "time"], [796, 1, 1, "", "timestamp"], [797, 1, 1, "", "truncate"], [798, 1, 1, "", "week"], [799, 1, 1, "", "weekday"], [800, 1, 1, "", "with_time_unit"], [801, 1, 1, "", "year"]], "polars.Series.str": [[908, 1, 1, "", "concat"], [909, 1, 1, "", "contains"], [910, 1, 1, "", "count_match"], [911, 1, 1, "", "decode"], [912, 1, 1, "", "encode"], [913, 1, 1, "", "ends_with"], [914, 1, 1, "", "explode"], [915, 1, 1, "", "extract"], [916, 1, 1, "", "extract_all"], [917, 1, 1, "", "json_extract"], [918, 1, 1, "", "json_path_match"], [919, 1, 1, "", "lengths"], [920, 1, 1, "", "ljust"], [921, 1, 1, "", "lstrip"], [922, 1, 1, "", "n_chars"], [923, 1, 1, "", "parse_int"], [924, 1, 1, "", "replace"], [925, 1, 1, "", "replace_all"], [926, 1, 1, "", "rjust"], [927, 1, 1, "", "rstrip"], [928, 1, 1, "", "slice"], [929, 1, 1, "", "split"], [930, 1, 1, "", "split_exact"], [931, 1, 1, "", "splitn"], [932, 1, 1, "", "starts_with"], [933, 1, 1, "", "strip"], [934, 1, 1, "", "strptime"], [935, 1, 1, "", "to_date"], [936, 1, 1, "", "to_datetime"], [937, 1, 1, "", "to_lowercase"], [938, 1, 1, "", "to_time"], [939, 1, 1, "", "to_uppercase"], [940, 1, 1, "", "zfill"]], "polars.Series.struct": [[941, 1, 1, "", "field"], [942, 3, 1, "", "fields"], [943, 1, 1, "", "rename_fields"], [944, 1, 1, "", "unnest"]], "polars.StringCache": [[51, 1, 1, "", "__init__"]], "polars.Struct": [[52, 1, 1, "", "__init__"]], "polars.Time": [[53, 1, 1, "", "__init__"]], "polars.UInt16": [[54, 1, 1, "", "__init__"]], "polars.UInt32": [[55, 1, 1, "", "__init__"]], "polars.UInt64": [[56, 1, 1, "", "__init__"]], "polars.UInt8": [[57, 1, 1, "", "__init__"]], "polars.Unknown": [[58, 1, 1, "", "__init__"]], "polars.Utf8": [[59, 1, 1, "", "__init__"]], "polars.api": [[61, 4, 1, "", "register_dataframe_namespace"], [62, 4, 1, "", "register_expr_namespace"], [63, 4, 1, "", "register_lazyframe_namespace"], [64, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[229, 1, 1, "", "__iter__"], [230, 1, 1, "", "agg"], [231, 1, 1, "", "all"], [232, 1, 1, "", "apply"], [233, 1, 1, "", "count"], [234, 1, 1, "", "first"], [235, 1, 1, "", "head"], [236, 1, 1, "", "last"], [237, 1, 1, "", "max"], [238, 1, 1, "", "mean"], [239, 1, 1, "", "median"], [240, 1, 1, "", "min"], [241, 1, 1, "", "n_unique"], [242, 1, 1, "", "quantile"], [243, 1, 1, "", "sum"], [244, 1, 1, "", "tail"]], "polars.exceptions": [[72, 5, 1, "", "ArrowError"], [73, 5, 1, "", "ColumnNotFoundError"], [74, 5, 1, "", "ComputeError"], [75, 5, 1, "", "DuplicateError"], [76, 5, 1, "", "InvalidOperationError"], [77, 5, 1, "", "NoDataError"], [78, 5, 1, "", "NoRowsReturnedError"], [79, 5, 1, "", "PolarsPanicError"], [80, 5, 1, "", "RowsError"], [81, 5, 1, "", "SchemaError"], [82, 5, 1, "", "SchemaFieldNotFoundError"], [83, 5, 1, "", "ShapeError"], [84, 5, 1, "", "StructFieldNotFoundError"], [85, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[96, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[664, 1, 1, "", "agg"], [665, 1, 1, "", "all"], [666, 1, 1, "", "apply"], [667, 1, 1, "", "count"], [668, 1, 1, "", "first"], [669, 1, 1, "", "head"], [670, 1, 1, "", "last"], [671, 1, 1, "", "max"], [672, 1, 1, "", "mean"], [673, 1, 1, "", "median"], [674, 1, 1, "", "min"], [675, 1, 1, "", "n_unique"], [676, 1, 1, "", "quantile"], [677, 1, 1, "", "sum"], [678, 1, 1, "", "tail"]], "polars.testing": [[117, 4, 1, "", "assert_frame_equal"], [118, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[119, 0, 1, "", "column"], [120, 4, 1, "", "columns"], [121, 4, 1, "", "create_list_strategy"], [122, 4, 1, "", "dataframes"], [123, 4, 1, "", "load_profile"], [124, 4, 1, "", "series"], [125, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[119, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 144], "api": [1, 61, 62, 63, 64, 596], "provid": 1, "new": 1, "function": [1, 584, 595], "avail": 1, "registr": 1, "exampl": [1, 983], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 983], "binari": [2, 579, 590, 969], "boolean": [3, 580, 970], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 128], "activate_decim": 5, "load": [6, 128], "restore_default": 7, "save": [8, 128], "set_ascii_t": 9, "set_fmt_float": 10, "set_fmt_str_length": 11, "set_streaming_chunk_s": 12, "set_tbl_cell_align": 13, "set_tbl_col": 14, "set_tbl_column_data_type_inlin": 15, "set_tbl_dataframe_shape_below": 16, "set_tbl_format": 17, "set_tbl_hide_column_data_typ": 18, "set_tbl_hide_column_nam": 19, "set_tbl_hide_dataframe_shap": 20, "set_tbl_hide_dtype_separ": 21, "set_tbl_row": 22, "set_tbl_width_char": 23, "set_verbos": 24, "state": [25, 128], "datafram": [26, 27, 28, 29, 30, 31, 32, 33, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250], "write_avro": 26, "write_csv": 27, "write_databas": 28, "write_excel": 29, "write_ipc": 30, "write_json": [31, 663], "write_ndjson": 32, "write_parquet": 33, "datatyp": 34, "date": [35, 332, 548, 763], "datetim": [36, 333, 549, 764], "decim": 37, "durat": [38, 550], "float32": 39, "float64": 40, "int16": 41, "int32": 42, "int64": 43, "int8": 44, "list": [45, 559, 586, 976], "null": 46, "object": 47, "sqlcontext": [48, 49, 50], "execut": 48, "queri": 49, "regist": 50, "stringcach": [51, 595], "struct": [52, 511, 512, 574, 592, 941, 942, 943, 944, 980], "time": [53, 360, 795], "uint16": 54, "uint32": 55, "uint64": 56, "uint8": 57, "unknown": 58, "utf8": 59, "align_fram": 60, "register_dataframe_namespac": 61, "register_expr_namespac": 62, "register_lazyframe_namespac": 63, "register_series_namespac": 64, "arg_wher": 65, "build_info": 66, "collect_al": 67, "concat": [68, 279, 478, 706, 908], "cut": [69, 753], "date_rang": 70, "enable_string_cach": 71, "except": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 254], "arrowerror": 72, "columnnotfounderror": 73, "computeerror": 74, "duplicateerror": 75, "invalidoperationerror": 76, "nodataerror": 77, "norowsreturnederror": 78, "polarspanicerror": 79, "rowserror": 80, "schemaerror": 81, "schemafieldnotfounderror": 82, "shapeerror": 83, "structfieldnotfounderror": 84, "toomanyrowsreturnederror": 85, "from_arrow": 86, "from_datafram": 87, "from_dict": [88, 89], "from_numpi": 90, "from_panda": 91, "from_record": 92, "from_repr": 93, "get_dummi": 94, "get_index_typ": 95, "io": 96, "csv": [96, 597], "batched_read": 96, "batchedcsvread": [96, 597], "next_batch": 96, "ones": 97, "read_avro": 98, "read_csv": 99, "read_csv_batch": 100, "read_databas": 101, "read_delta": 102, "read_excel": 103, "read_ipc": 104, "read_ipc_schema": 105, "read_json": [106, 637], "read_ndjson": 107, "read_parquet": 108, "read_parquet_schema": 109, "scan_csv": 110, "scan_delta": 111, "scan_ipc": 112, "scan_ndjson": 113, "scan_parquet": 114, "scan_pyarrow_dataset": 115, "show_vers": 116, "test": [117, 118, 119, 120, 121, 122, 123, 124, 125, 983], "assert_frame_equ": 117, "assert_series_equ": 118, "parametr": [119, 120, 121, 122, 123, 124, 125, 983], "column": [119, 120, 135, 582, 604], "create_list_strategi": 121, "load_profil": 123, "seri": [124, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 975], "set_profil": 125, "threadpool_s": 126, "zero": 127, "option": 128, "current": 128, "us": 128, "context": 128, "manag": 128, "aggreg": [129, 255, 598, 685], "__dataframe__": 130, "appli": [131, 232, 264, 533, 666, 691], "bottom_k": [132, 309, 599, 735], "clear": [133, 601, 741], "clone": [134, 602, 745], "corr": [136, 542], "describ": [137, 754], "drop": [138, 605], "drop_in_plac": 139, "drop_nul": [140, 328, 606, 758], "dtype": [141, 607, 802], "estimated_s": [142, 804], "explod": [143, 284, 374, 484, 609, 711, 809, 914], "fill_nan": [145, 376, 611, 811], "fill_nul": [146, 377, 612, 812], "filter": [147, 378, 613, 813], "find_idx_by_nam": 148, "fold": [149, 554], "frame_equ": 150, "get_column": [151, 152], "glimps": 153, "groupbi": [154, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 249, 616, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681], "groupby_dynam": [155, 617], "groupby_rol": [156, 618], "hash_row": 157, "head": [158, 235, 287, 387, 558, 619, 669, 714, 819], "height": 159, "hstack": 160, "insert_at_idx": 161, "interpol": [162, 390, 621, 823], "is_dupl": [163, 392, 826], "is_empti": [164, 827], "is_uniqu": [165, 402, 841], "item": [166, 843], "iter_row": 167, "iter_slic": 168, "join": [169, 288, 622, 715], "join_asof": [170, 623], "lazi": [171, 595, 625], "limit": [172, 408, 626, 846], "max": [173, 237, 291, 417, 562, 628, 671, 718, 772, 852], "mean": [174, 238, 292, 418, 563, 629, 672, 719, 773, 853], "median": [175, 239, 419, 564, 630, 673, 774, 854], "melt": [176, 631], "merge_sort": [177, 632], "min": [178, 240, 293, 428, 565, 633, 674, 720, 779, 855], "n_chunk": [179, 857], "n_uniqu": [180, 241, 432, 566, 675, 858], "null_count": [181, 436, 863], "partition_bi": 182, "pipe": [183, 440, 634], "pivot": 184, "product": [185, 443, 867], "quantil": [186, 242, 444, 568, 636, 676, 869], "rechunk": [187, 446, 871], "renam": [188, 638, 873], "replac": [189, 494, 924], "replace_at_idx": 190, "revers": [191, 294, 450, 639, 721, 875], "row": [192, 193], "sampl": [194, 462, 887], "schema": [195, 640], "select": [196, 252, 571, 589, 641, 684, 978], "set_sort": [197, 464, 642, 892], "shape": [198, 893], "shift": [199, 295, 465, 643, 722, 894], "shift_and_fil": [200, 466, 644, 895], "shrink_to_fit": [201, 897], "slice": [202, 296, 473, 498, 648, 723, 903, 928], "sort": [203, 297, 474, 649, 724, 904], "std": [204, 477, 573, 650, 906], "sum": [205, 243, 298, 515, 575, 651, 677, 725, 945], "tail": [206, 244, 299, 516, 576, 652, 678, 726, 946], "take_everi": [207, 518, 653, 948], "to_arrow": [208, 952], "to_dict": [209, 210], "to_dummi": [211, 953], "to_init_repr": [212, 955], "to_numpi": [213, 957], "to_panda": [214, 958], "to_seri": 215, "to_struct": [216, 301, 728], "top_k": [217, 522, 654, 960], "transpos": 218, "uniqu": [219, 302, 524, 655, 729, 961], "unnest": [220, 656, 944], "unstack": 221, "updat": [222, 657], "upsampl": 223, "var": [224, 528, 577, 658, 965], "vstack": 225, "width": [226, 659], "with_column": [227, 660], "with_row_count": [228, 662], "__iter__": 229, "agg": [230, 664], "all": [231, 260, 531, 665, 688], "count": [233, 318, 543, 667], "first": [234, 285, 379, 553, 614, 668, 712], "last": [236, 289, 405, 624, 670, 716], "attribut": [245, 679, 968], "comput": [246, 583, 972], "descript": [247, 680, 973], "export": [248, 974], "miscellan": [251, 588, 595, 683, 977], "manipul": [252, 589, 684, 978], "data": 253, "type": 253, "numer": [253, 590], "tempor": [253, 593, 981], "nest": 253, "other": 253, "expr": [256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530], "ab": [256, 686], "add": 257, "agg_group": 258, "alia": [259, 687], "and_": 261, "ani": [262, 532, 689], "append": [263, 690], "approx_uniqu": [265, 534], "arcco": [266, 692], "arccosh": [267, 693], "arcsin": [268, 694], "arcsinh": [269, 695], "arctan": [270, 696], "arctanh": [271, 697], "arg_max": [272, 277, 698, 704], "arg_min": [273, 278, 699, 705], "arg_sort": [274, 700], "arg_tru": [275, 701], "arg_uniqu": [276, 702], "arr": [277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729], "contain": [280, 304, 479, 707, 730, 909], "count_match": [281, 480, 708, 910], "diff": [282, 325, 709, 755], "eval": [283, 710], "get": [286, 713], "length": [290, 489, 717, 919], "take": [300, 517, 727, 947], "backward_fil": 303, "bin": [304, 305, 306, 307, 308, 730, 731, 732, 733, 734], "decod": [305, 481, 731, 911], "encod": [306, 482, 732, 912], "ends_with": [307, 483, 733, 913], "starts_with": [308, 502, 734, 932], "cast": [310, 736], "cat": [311, 737, 738], "set_ord": [311, 738], "ceil": [312, 739], "clip": [313, 742], "clip_max": [314, 743], "clip_min": [315, 744], "co": [316, 746], "cosh": [317, 747], "cumcount": 319, "cummax": [320, 748], "cummin": [321, 749], "cumprod": [322, 750], "cumsum": [323, 547, 751], "cumulative_ev": [324, 752], "dot": [326, 756], "drop_nan": [327, 757], "dt": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801], "cast_time_unit": [329, 760], "combin": [330, 761], "convert_time_zon": [331, 762], "dai": [334, 335, 765, 766], "epoch": [336, 767], "hour": [337, 338, 768, 769], "is_leap_year": [339, 770], "iso_year": [340, 771], "microsecond": [341, 342, 775, 776], "millisecond": [343, 344, 777, 778], "minut": [345, 346, 780, 781], "month": [347, 782], "month_end": [348, 783], "month_start": [349, 784], "nanosecond": [350, 351, 785, 786], "offset_bi": [352, 787], "ordinal_dai": [353, 788], "quarter": [354, 789], "replace_time_zon": [355, 790], "round": [356, 461, 791, 886], "second": [357, 358, 792, 793], "strftime": [359, 794], "timestamp": [361, 796], "truncat": [362, 797], "week": [363, 798], "weekdai": [364, 799], "with_time_unit": [365, 800], "year": [366, 801], "entropi": [367, 803], "eq": [368, 420], "ewm_mean": [369, 805], "ewm_std": [370, 806], "ewm_var": [371, 807], "exclud": [372, 552], "exp": [373, 808], "extend_const": [375, 810], "flatten": 380, "floor": [381, 815], "floordiv": 382, "forward_fil": 383, "ge": 384, "gt": 385, "hash": [386, 818], "implod": [388, 821], "inspect": [389, 620], "is_between": [391, 824], "is_finit": [393, 828], "is_first": [394, 829], "is_in": [395, 831], "is_infinit": [396, 832], "is_nan": [397, 834], "is_not": 398, "is_not_nan": [399, 835], "is_not_nul": [400, 836], "is_nul": [401, 837], "keep_nam": 403, "kurtosi": [404, 844], "le": 406, "len": [407, 845], "log": [409, 847], "log10": [410, 848], "log1p": [411, 849], "lower_bound": [412, 850], "lt": 413, "map": [414, 561, 627], "map_alia": 415, "map_dict": [416, 851], "meta": [420, 421, 422, 423, 424, 425, 426, 427, 587], "has_multiple_output": 421, "is_regex_project": 422, "ne": [423, 435], "output_nam": 424, "pop": 425, "root_nam": 426, "undo_alias": 427, "mod": 429, "mode": [430, 856], "mul": 431, "nan_max": [433, 860], "nan_min": [434, 861], "or_": 437, "over": 438, "pct_chang": [439, 864], "pow": 441, "prefix": 442, "rank": [445, 870], "reinterpret": [447, 872], "repeat_bi": 448, "reshap": [449, 874], "rolling_appli": [451, 876], "rolling_max": [452, 877], "rolling_mean": [453, 878], "rolling_median": [454, 879], "rolling_min": [455, 880], "rolling_quantil": [456, 881], "rolling_skew": [457, 882], "rolling_std": [458, 883], "rolling_sum": [459, 884], "rolling_var": [460, 885], "search_sort": [463, 888], "shrink_dtyp": [467, 896], "shuffl": [468, 898], "sign": [469, 899], "sin": [470, 900], "sinh": [471, 901], "skew": [472, 902], "sort_bi": 475, "sqrt": [476, 905], "str": [478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940], "extract": [485, 915], "extract_al": [486, 916], "json_extract": [487, 917], "json_path_match": [488, 918], "ljust": [490, 920], "lstrip": [491, 921], "n_char": [492, 922], "parse_int": [493, 923], "replace_al": [495, 925], "rjust": [496, 926], "rstrip": [497, 927], "split": [499, 929], "split_exact": [500, 930], "splitn": [501, 931], "strip": [503, 933], "strptime": [504, 934], "to_dat": [505, 935], "to_datetim": [506, 936], "to_lowercas": [507, 937], "to_tim": [508, 938], "to_uppercas": [509, 939], "zfill": [510, 940], "field": [511, 941, 942], "rename_field": [512, 943], "sub": 513, "suffix": 514, "tan": [519, 949], "tanh": [520, 950], "to_phys": [521, 959], "truediv": 523, "unique_count": [525, 962], "upper_bound": [526, 963], "value_count": [527, 964], "where": 529, "xor": 530, "arang": 535, "arg_sort_bi": 536, "avg": 537, "coalesc": 538, "col": 539, "concat_list": 540, "concat_str": 541, "cov": 544, "cumfold": 545, "cumreduc": 546, "element": 551, "format": 555, "from_epoch": 556, "group": 557, "lit": 560, "pearson_corr": 567, "reduc": 569, "repeat": 570, "spearman_rank_corr": 572, "when": 578, "categori": [581, 971], "name": [582, 859], "express": 585, "oper": 590, "conjunct": 590, "comparison": 590, "string": [591, 979], "window": 594, "convers": 595, "eager": 595, "parallel": 595, "refer": 596, "input": 597, "output": 597, "feather": 597, "ipc": 597, "parquet": 597, "databas": 597, "json": 597, "avro": 597, "excel": 597, "delta": 597, "lake": 597, "dataset": 597, "lazyfram": [599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 682], "cach": 600, "collect": 603, "explain": 608, "fetch": 610, "from_json": 615, "profil": [635, 983], "show_graph": 645, "sink_ipc": 646, "sink_parquet": 647, "with_context": 661, "lazygroupbi": [664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678], "read": 683, "write": 683, "logic": 683, "plan": 683, "chunk_length": 740, "flag": 814, "get_chunk": 816, "has_valid": 817, "hist": 820, "inner_dtyp": 822, "is_boolean": 825, "is_float": 830, "is_integ": 833, "is_numer": 838, "is_sort": 839, "is_tempor": 840, "is_utf8": 842, "new_from_index": 862, "peak_max": 865, "peak_min": 866, "qcut": 868, "series_equ": 889, "set": 890, "set_at_idx": 891, "time_unit": 951, "to_fram": 954, "to_list": 956, "view": 966, "zip_with": 967, "sql": 982, "method": 982, "assert": 983, "primit": 983, "strategi": 983, "helper": 983, "util": 984}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.exceptions.DuplicateError": [[75, "polars-exceptions-duplicateerror"]], "polars.from_records": [[92, "polars-from-records"]], "polars.exceptions.InvalidOperationError": [[76, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.TooManyRowsReturnedError": [[85, "polars-exceptions-toomanyrowsreturnederror"]], "polars.exceptions.ColumnNotFoundError": [[73, "polars-exceptions-columnnotfounderror"]], "polars.read_database": [[101, "polars-read-database"]], "polars.get_index_type": [[95, "polars-get-index-type"]], "polars.from_dataframe": [[87, "polars-from-dataframe"]], "polars.from_dict": [[88, "polars-from-dict"]], "polars.DataFrame.columns": [[135, "polars-dataframe-columns"]], "polars.DataFrame.clear": [[133, "polars-dataframe-clear"]], "polars.exceptions.ShapeError": [[83, "polars-exceptions-shapeerror"]], "polars.read_csv_batched": [[100, "polars-read-csv-batched"]], "polars.read_parquet_schema": [[109, "polars-read-parquet-schema"]], "polars.testing.parametric.create_list_strategy": [[121, "polars-testing-parametric-create-list-strategy"]], "polars.DataFrame.corr": [[136, "polars-dataframe-corr"]], "polars.exceptions.RowsError": [[80, "polars-exceptions-rowserror"]], "polars.testing.assert_frame_equal": [[117, "polars-testing-assert-frame-equal"]], "Aggregation": [[129, "aggregation"], [685, "aggregation"], [598, "aggregation"], [255, "aggregation"]], "polars.show_versions": [[116, "polars-show-versions"]], "polars.DataFrame.clone": [[134, "polars-dataframe-clone"]], "polars.exceptions.ArrowError": [[72, "polars-exceptions-arrowerror"]], "polars.read_ipc_schema": [[105, "polars-read-ipc-schema"]], "polars.zeros": [[127, "polars-zeros"]], "polars.DataFrame.drop_in_place": [[139, "polars-dataframe-drop-in-place"]], "polars.exceptions.PolarsPanicError": [[79, "polars-exceptions-polarspanicerror"]], "polars.read_csv": [[99, "polars-read-csv"]], "polars.scan_delta": [[111, "polars-scan-delta"]], "polars.scan_ndjson": [[113, "polars-scan-ndjson"]], "polars.exceptions.SchemaError": [[81, "polars-exceptions-schemaerror"]], "polars.from_repr": [[93, "polars-from-repr"]], "polars.date_range": [[70, "polars-date-range"]], "polars.from_numpy": [[90, "polars-from-numpy"]], "polars.scan_parquet": [[114, "polars-scan-parquet"]], "polars.scan_ipc": [[112, "polars-scan-ipc"]], "polars.read_parquet": [[108, "polars-read-parquet"]], "polars.from_pandas": [[91, "polars-from-pandas"]], "polars.read_ipc": [[104, "polars-read-ipc"]], "polars.testing.parametric.dataframes": [[122, "polars-testing-parametric-dataframes"]], "polars.DataFrame.drop": [[138, "polars-dataframe-drop"]], "polars.exceptions.ComputeError": [[74, "polars-exceptions-computeerror"]], "polars.testing.assert_series_equal": [[118, "polars-testing-assert-series-equal"]], "polars.DataFrame.apply": [[131, "polars-dataframe-apply"]], "Config": [[128, "config"]], "Config options": [[128, "config-options"]], "Config load, save, and current state": [[128, "config-load-save-and-current-state"]], "Use as a context manager": [[128, "use-as-a-context-manager"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[96, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.read_delta": [[102, "polars-read-delta"]], "polars.exceptions.NoRowsReturnedError": [[78, "polars-exceptions-norowsreturnederror"]], "polars.ones": [[97, "polars-ones"]], "polars.from_dicts": [[89, "polars-from-dicts"]], "polars.exceptions.NoDataError": [[77, "polars-exceptions-nodataerror"]], "polars.read_excel": [[103, "polars-read-excel"]], "polars.read_avro": [[98, "polars-read-avro"]], "polars.read_ndjson": [[107, "polars-read-ndjson"]], "polars.testing.parametric.column": [[119, "polars-testing-parametric-column"]], "polars.scan_csv": [[110, "polars-scan-csv"]], "polars.testing.parametric.columns": [[120, "polars-testing-parametric-columns"]], "polars.testing.parametric.series": [[124, "polars-testing-parametric-series"]], "polars.DataFrame.__dataframe__": [[130, "polars-dataframe-dataframe"]], "polars.enable_string_cache": [[71, "polars-enable-string-cache"]], "polars.exceptions.StructFieldNotFoundError": [[84, "polars-exceptions-structfieldnotfounderror"]], "polars.testing.parametric.load_profile": [[123, "polars-testing-parametric-load-profile"]], "polars.get_dummies": [[94, "polars-get-dummies"]], "polars.read_json": [[106, "polars-read-json"]], "polars.testing.parametric.set_profile": [[125, "polars-testing-parametric-set-profile"]], "polars.scan_pyarrow_dataset": [[115, "polars-scan-pyarrow-dataset"]], "polars.DataFrame.bottom_k": [[132, "polars-dataframe-bottom-k"]], "polars.threadpool_size": [[126, "polars-threadpool-size"]], "polars.exceptions.SchemaFieldNotFoundError": [[82, "polars-exceptions-schemafieldnotfounderror"]], "polars.from_arrow": [[86, "polars-from-arrow"]], "polars.DataFrame.describe": [[137, "polars-dataframe-describe"]], "polars.Float64": [[40, "polars-float64"]], "polars.concat": [[68, "polars-concat"]], "polars.api.register_dataframe_namespace": [[61, "polars-api-register-dataframe-namespace"]], "polars.UInt32": [[55, "polars-uint32"]], "polars.Duration": [[38, "polars-duration"]], "polars.Config.set_tbl_rows": [[22, "polars-config-set-tbl-rows"]], "polars.UInt16": [[54, "polars-uint16"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Int64": [[43, "polars-int64"]], "polars.Config.restore_defaults": [[7, "polars-config-restore-defaults"]], "polars.DataFrame.write_json": [[31, "polars-dataframe-write-json"]], "polars.SQLContext.register": [[50, "polars-sqlcontext-register"]], "polars.Config.set_tbl_cell_alignment": [[13, "polars-config-set-tbl-cell-alignment"]], "polars.Datetime": [[36, "polars-datetime"]], "polars.DataFrame.write_excel": [[29, "polars-dataframe-write-excel"]], "polars.StringCache": [[51, "polars-stringcache"]], "polars.Config.set_tbl_hide_dtype_separator": [[21, "polars-config-set-tbl-hide-dtype-separator"]], "polars.SQLContext.query": [[49, "polars-sqlcontext-query"]], "polars.collect_all": [[67, "polars-collect-all"]], "polars.Int16": [[41, "polars-int16"]], "polars.Config.save": [[8, "polars-config-save"]], "polars.DataFrame.write_ipc": [[30, "polars-dataframe-write-ipc"]], "polars.Config.set_tbl_width_chars": [[23, "polars-config-set-tbl-width-chars"]], "polars.DataType": [[34, "polars-datatype"]], "polars.Config.set_tbl_hide_dataframe_shape": [[20, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.DataFrame.write_ndjson": [[32, "polars-dataframe-write-ndjson"]], "polars.Int32": [[42, "polars-int32"]], "polars.Int8": [[44, "polars-int8"]], "polars.Utf8": [[59, "polars-utf8"]], "polars.Date": [[35, "polars-date"]], "polars.Binary": [[2, "polars-binary"]], "polars.Unknown": [[58, "polars-unknown"]], "polars.arg_where": [[65, "polars-arg-where"]], "polars.Decimal": [[37, "polars-decimal"]], "polars.Config.set_fmt_float": [[10, "polars-config-set-fmt-float"]], "polars.Config.set_fmt_str_lengths": [[11, "polars-config-set-fmt-str-lengths"]], "polars.cut": [[69, "polars-cut"]], "polars.api.register_expr_namespace": [[62, "polars-api-register-expr-namespace"]], "polars.Config.load": [[6, "polars-config-load"]], "polars.UInt8": [[57, "polars-uint8"]], "polars.Config.set_tbl_hide_column_data_types": [[18, "polars-config-set-tbl-hide-column-data-types"]], "polars.DataFrame.write_avro": [[26, "polars-dataframe-write-avro"]], "polars.DataFrame.write_parquet": [[33, "polars-dataframe-write-parquet"]], "polars.api.register_lazyframe_namespace": [[63, "polars-api-register-lazyframe-namespace"]], "polars.api.register_series_namespace": [[64, "polars-api-register-series-namespace"]], "polars.Config.activate_decimals": [[5, "polars-config-activate-decimals"]], "polars.Object": [[47, "polars-object"]], "polars.build_info": [[66, "polars-build-info"]], "polars.UInt64": [[56, "polars-uint64"]], "polars.Time": [[53, "polars-time"]], "polars.Config.state": [[25, "polars-config-state"]], "polars.List": [[45, "polars-list"]], "polars.DataFrame.write_database": [[28, "polars-dataframe-write-database"]], "polars.Config.set_tbl_formatting": [[17, "polars-config-set-tbl-formatting"]], "polars.Config.set_ascii_tables": [[9, "polars-config-set-ascii-tables"]], "polars.Config.set_tbl_column_data_type_inline": [[15, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_hide_column_names": [[19, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_verbose": [[24, "polars-config-set-verbose"]], "polars.Config.set_streaming_chunk_size": [[12, "polars-config-set-streaming-chunk-size"]], "polars.DataFrame.write_csv": [[27, "polars-dataframe-write-csv"]], "polars.Categorical": [[4, "polars-categorical"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [983, "examples"]], "polars.Config.set_tbl_cols": [[14, "polars-config-set-tbl-cols"]], "polars.Null": [[46, "polars-null"]], "polars.SQLContext.execute": [[48, "polars-sqlcontext-execute"]], "polars.Float32": [[39, "polars-float32"]], "polars.Struct": [[52, "polars-struct"]], "polars.align_frames": [[60, "polars-align-frames"]], "polars.Config.set_tbl_dataframe_shape_below": [[16, "polars-config-set-tbl-dataframe-shape-below"]], "Utils": [[984, "utils"]], "Testing": [[983, "testing"]], "Asserts": [[983, "asserts"]], "Parametric testing": [[983, "parametric-testing"]], "Polars primitives": [[983, "polars-primitives"]], "Strategy helpers": [[983, "strategy-helpers"]], "Profiles": [[983, "profiles"]], "Struct": [[980, "struct"], [592, "struct"]], "Temporal": [[981, "temporal"], [593, "temporal"], [253, "temporal"]], "SQL": [[982, "sql"]], "Methods": [[982, "methods"]], "polars.Series.is_temporal": [[840, "polars-series-is-temporal"]], "polars.Series.rolling_max": [[877, "polars-series-rolling-max"]], "polars.Series.qcut": [[868, "polars-series-qcut"]], "polars.Series.peak_max": [[865, "polars-series-peak-max"]], "polars.Series.rolling_var": [[885, "polars-series-rolling-var"]], "polars.Series.nan_max": [[860, "polars-series-nan-max"]], "polars.Series.n_unique": [[858, "polars-series-n-unique"]], "polars.Series.round": [[886, "polars-series-round"]], "polars.Series.rolling_apply": [[876, "polars-series-rolling-apply"]], "polars.Series.set_sorted": [[892, "polars-series-set-sorted"]], "polars.Series.len": [[845, "polars-series-len"]], "polars.Series.reverse": [[875, "polars-series-reverse"]], "polars.Series.name": [[859, "polars-series-name"]], "polars.Series.shrink_to_fit": [[897, "polars-series-shrink-to-fit"]], "polars.Series.std": [[906, "polars-series-std"]], "polars.Series.new_from_index": [[862, "polars-series-new-from-index"]], "polars.Series.rename": [[873, "polars-series-rename"]], "polars.Series.mean": [[853, "polars-series-mean"]], "polars.Series.nan_min": [[861, "polars-series-nan-min"]], "polars.Series.n_chunks": [[857, "polars-series-n-chunks"]], "polars.Series.set_at_idx": [[891, "polars-series-set-at-idx"]], "polars.Series.min": [[855, "polars-series-min"]], "polars.Series.rolling_sum": [[884, "polars-series-rolling-sum"]], "polars.Series.rolling_std": [[883, "polars-series-rolling-std"]], "polars.Series.null_count": [[863, "polars-series-null-count"]], "polars.Series.series_equal": [[889, "polars-series-series-equal"]], "polars.Series.max": [[852, "polars-series-max"]], "polars.Series.search_sorted": [[888, "polars-series-search-sorted"]], "polars.Series.sin": [[900, "polars-series-sin"]], "polars.Series.sort": [[904, "polars-series-sort"]], "polars.Series.rolling_skew": [[882, "polars-series-rolling-skew"]], "polars.Series.rechunk": [[871, "polars-series-rechunk"]], "polars.Series.sample": [[887, "polars-series-sample"]], "polars.Series.log1p": [[849, "polars-series-log1p"]], "polars.Series.mode": [[856, "polars-series-mode"]], "polars.Series.lower_bound": [[850, "polars-series-lower-bound"]], "polars.Series.reinterpret": [[872, "polars-series-reinterpret"]], "polars.Series.reshape": [[874, "polars-series-reshape"]], "polars.Series.shift_and_fill": [[895, "polars-series-shift-and-fill"]], "polars.Series.is_unique": [[841, "polars-series-is-unique"]], "polars.Series.str.contains": [[909, "polars-series-str-contains"]], "polars.Series.quantile": [[869, "polars-series-quantile"]], "polars.Series.shrink_dtype": [[896, "polars-series-shrink-dtype"]], "polars.Series.rolling_median": [[879, "polars-series-rolling-median"]], "polars.Series.str.concat": [[908, "polars-series-str-concat"]], "polars.Series.skew": [[902, "polars-series-skew"]], "polars.Series.rolling_min": [[880, "polars-series-rolling-min"]], "polars.Series.rolling_mean": [[878, "polars-series-rolling-mean"]], "polars.Series.log10": [[848, "polars-series-log10"]], "polars.Series.shift": [[894, "polars-series-shift"]], "polars.Series.shuffle": [[898, "polars-series-shuffle"]], "polars.Series.slice": [[903, "polars-series-slice"]], "polars.Series.pct_change": [[864, "polars-series-pct-change"]], "polars.Series.kurtosis": [[844, "polars-series-kurtosis"]], "polars.Series.product": [[867, "polars-series-product"]], "polars.Series.rank": [[870, "polars-series-rank"]], "polars.Series.rolling_quantile": [[881, "polars-series-rolling-quantile"]], "polars.Series.set": [[890, "polars-series-set"]], "polars.Series.sign": [[899, "polars-series-sign"]], "polars.Series.sinh": [[901, "polars-series-sinh"]], "polars.Series.map_dict": [[851, "polars-series-map-dict"]], "polars.Series.sqrt": [[905, "polars-series-sqrt"]], "polars.Series.is_utf8": [[842, "polars-series-is-utf8"]], "polars.Series.limit": [[846, "polars-series-limit"]], "polars.Series.log": [[847, "polars-series-log"]], "polars.Series.shape": [[893, "polars-series-shape"]], "polars.Series.peak_min": [[866, "polars-series-peak-min"]], "polars.Series.str": [[907, "polars-series-str"]], "polars.Series.item": [[843, "polars-series-item"]], "polars.Series.median": [[854, "polars-series-median"]], "polars.Series.dt.mean": [[773, "polars-series-dt-mean"]], "polars.Series.dt.median": [[774, "polars-series-dt-median"]], "polars.Series.exp": [[808, "polars-series-exp"]], "polars.Series.flags": [[814, "polars-series-flags"]], "polars.Series.floor": [[815, "polars-series-floor"]], "polars.Series.has_validity": [[817, "polars-series-has-validity"]], "polars.Series.dt.milliseconds": [[778, "polars-series-dt-milliseconds"]], "polars.Series.inner_dtype": [[822, "polars-series-inner-dtype"]], "polars.Series.is_empty": [[827, "polars-series-is-empty"]], "polars.Series.explode": [[809, "polars-series-explode"]], "polars.Series.is_between": [[824, "polars-series-is-between"]], "polars.Series.dt.ordinal_day": [[788, "polars-series-dt-ordinal-day"]], "polars.Series.dt.minutes": [[781, "polars-series-dt-minutes"]], "polars.Series.dt.iso_year": [[771, "polars-series-dt-iso-year"]], "polars.Series.dt.truncate": [[797, "polars-series-dt-truncate"]], "polars.Series.dt.with_time_unit": [[800, "polars-series-dt-with-time-unit"]], "polars.Series.is_finite": [[828, "polars-series-is-finite"]], "polars.Series.dt.year": [[801, "polars-series-dt-year"]], "polars.Series.entropy": [[803, "polars-series-entropy"]], "polars.Series.fill_nan": [[811, "polars-series-fill-nan"]], "polars.Series.dtype": [[802, "polars-series-dtype"]], "polars.Series.fill_null": [[812, "polars-series-fill-null"]], "polars.Series.dt.millisecond": [[777, "polars-series-dt-millisecond"]], "polars.Series.dt.week": [[798, "polars-series-dt-week"]], "polars.Series.dt.is_leap_year": [[770, "polars-series-dt-is-leap-year"]], "polars.Series.dt.month": [[782, "polars-series-dt-month"]], "polars.Series.get_chunks": [[816, "polars-series-get-chunks"]], "polars.Series.implode": [[821, "polars-series-implode"]], "polars.Series.dt.time": [[795, "polars-series-dt-time"]], "polars.Series.head": [[819, "polars-series-head"]], "polars.Series.is_integer": [[833, "polars-series-is-integer"]], "polars.Series.ewm_var": [[807, "polars-series-ewm-var"]], "polars.Series.is_not_nan": [[835, "polars-series-is-not-nan"]], "polars.Series.is_boolean": [[825, "polars-series-is-boolean"]], "polars.Series.dt.month_end": [[783, "polars-series-dt-month-end"]], "polars.Series.extend_constant": [[810, "polars-series-extend-constant"]], "polars.Series.is_in": [[831, "polars-series-is-in"]], "polars.Series.dt.offset_by": [[787, "polars-series-dt-offset-by"]], "polars.Series.is_first": [[829, "polars-series-is-first"]], "polars.Series.interpolate": [[823, "polars-series-interpolate"]], "polars.Series.is_duplicated": [[826, "polars-series-is-duplicated"]], "polars.Series.dt.timestamp": [[796, "polars-series-dt-timestamp"]], "polars.Series.hash": [[818, "polars-series-hash"]], "polars.Series.dt.microsecond": [[775, "polars-series-dt-microsecond"]], "polars.Series.ewm_std": [[806, "polars-series-ewm-std"]], "polars.Series.dt.nanosecond": [[785, "polars-series-dt-nanosecond"]], "polars.Series.dt.quarter": [[789, "polars-series-dt-quarter"]], "polars.Series.is_null": [[837, "polars-series-is-null"]], "polars.Series.dt.month_start": [[784, "polars-series-dt-month-start"]], "polars.Series.dt.strftime": [[794, "polars-series-dt-strftime"]], "polars.Series.dt.microseconds": [[776, "polars-series-dt-microseconds"]], "polars.Series.dt.second": [[792, "polars-series-dt-second"]], "polars.Series.is_infinite": [[832, "polars-series-is-infinite"]], "polars.Series.dt.max": [[772, "polars-series-dt-max"]], "polars.Series.dt.min": [[779, "polars-series-dt-min"]], "polars.Series.hist": [[820, "polars-series-hist"]], "polars.Series.is_not_null": [[836, "polars-series-is-not-null"]], "polars.Series.dt.replace_time_zone": [[790, "polars-series-dt-replace-time-zone"]], "polars.Series.is_nan": [[834, "polars-series-is-nan"]], "polars.Series.ewm_mean": [[805, "polars-series-ewm-mean"]], "polars.Series.dt.weekday": [[799, "polars-series-dt-weekday"]], "polars.Series.is_numeric": [[838, "polars-series-is-numeric"]], "polars.Series.dt.round": [[791, "polars-series-dt-round"]], "polars.Series.estimated_size": [[804, "polars-series-estimated-size"]], "polars.Series.is_sorted": [[839, "polars-series-is-sorted"]], "polars.Series.is_float": [[830, "polars-series-is-float"]], "polars.Series.dt.seconds": [[793, "polars-series-dt-seconds"]], "polars.Series.filter": [[813, "polars-series-filter"]], "polars.Series.dt.nanoseconds": [[786, "polars-series-dt-nanoseconds"]], "polars.Series.dt.minute": [[780, "polars-series-dt-minute"]], "polars.Series.arg_unique": [[702, "polars-series-arg-unique"]], "polars.Series.arr.take": [[727, "polars-series-arr-take"]], "polars.Series.cumprod": [[750, "polars-series-cumprod"]], "polars.Series.arr": [[703, "polars-series-arr"]], "polars.Series.arr.eval": [[710, "polars-series-arr-eval"]], "polars.Series.arr.count_match": [[708, "polars-series-arr-count-match"]], "polars.Series.dt.days": [[766, "polars-series-dt-days"]], "polars.Series.dt.datetime": [[764, "polars-series-dt-datetime"]], "polars.Series.arr.head": [[714, "polars-series-arr-head"]], "polars.Series.bin.starts_with": [[734, "polars-series-bin-starts-with"]], "polars.Series.cos": [[746, "polars-series-cos"]], "polars.Series.arr.arg_max": [[704, "polars-series-arr-arg-max"]], "polars.Series.arr.tail": [[726, "polars-series-arr-tail"]], "polars.Series.arr.diff": [[709, "polars-series-arr-diff"]], "polars.Series.cummax": [[748, "polars-series-cummax"]], "polars.Series.cumulative_eval": [[752, "polars-series-cumulative-eval"]], "polars.Series.drop_nans": [[757, "polars-series-drop-nans"]], "polars.Series.arr.sum": [[725, "polars-series-arr-sum"]], "polars.Series.dt.cast_time_unit": [[760, "polars-series-dt-cast-time-unit"]], "polars.Series.arg_true": [[701, "polars-series-arg-true"]], "polars.Series.cosh": [[747, "polars-series-cosh"]], "polars.Series.cast": [[736, "polars-series-cast"]], "polars.Series.arr.join": [[715, "polars-series-arr-join"]], "polars.Series.chunk_lengths": [[740, "polars-series-chunk-lengths"]], "polars.Series.cat": [[737, "polars-series-cat"]], "polars.Series.drop_nulls": [[758, "polars-series-drop-nulls"]], "polars.Series.arr.concat": [[706, "polars-series-arr-concat"]], "polars.Series.cummin": [[749, "polars-series-cummin"]], "polars.Series.dt.day": [[765, "polars-series-dt-day"]], "polars.Series.arr.get": [[713, "polars-series-arr-get"]], "polars.Series.arr.min": [[720, "polars-series-arr-min"]], "polars.Series.arg_sort": [[700, "polars-series-arg-sort"]], "polars.Series.arr.sort": [[724, "polars-series-arr-sort"]], "polars.Series.arr.unique": [[729, "polars-series-arr-unique"]], "polars.Series.arr.lengths": [[717, "polars-series-arr-lengths"]], "polars.Series.arr.max": [[718, "polars-series-arr-max"]], "polars.Series.cat.set_ordering": [[738, "polars-series-cat-set-ordering"]], "polars.Series.clone": [[745, "polars-series-clone"]], "polars.Series.dt.combine": [[761, "polars-series-dt-combine"]], "polars.Series.dt": [[759, "polars-series-dt"]], "polars.Series.dt.hour": [[768, "polars-series-dt-hour"]], "polars.Series.clip_min": [[744, "polars-series-clip-min"]], "polars.Series.dt.date": [[763, "polars-series-dt-date"]], "polars.Series.arr.contains": [[707, "polars-series-arr-contains"]], "polars.Series.clip": [[742, "polars-series-clip"]], "polars.Series.arr.shift": [[722, "polars-series-arr-shift"]], "polars.Series.cumsum": [[751, "polars-series-cumsum"]], "polars.Series.dot": [[756, "polars-series-dot"]], "polars.Series.arr.to_struct": [[728, "polars-series-arr-to-struct"]], "polars.Series.arr.explode": [[711, "polars-series-arr-explode"]], "polars.Series.arr.last": [[716, "polars-series-arr-last"]], "polars.Series.arr.mean": [[719, "polars-series-arr-mean"]], "polars.Series.arr.reverse": [[721, "polars-series-arr-reverse"]], "polars.Series.bin.decode": [[731, "polars-series-bin-decode"]], "polars.Series.bin.encode": [[732, "polars-series-bin-encode"]], "polars.Series.ceil": [[739, "polars-series-ceil"]], "polars.Series.arr.arg_min": [[705, "polars-series-arr-arg-min"]], "polars.Series.dt.convert_time_zone": [[762, "polars-series-dt-convert-time-zone"]], "polars.Series.bin.contains": [[730, "polars-series-bin-contains"]], "polars.Series.clip_max": [[743, "polars-series-clip-max"]], "polars.Series.dt.hours": [[769, "polars-series-dt-hours"]], "polars.Series.bin.ends_with": [[733, "polars-series-bin-ends-with"]], "polars.Series.cut": [[753, "polars-series-cut"]], "polars.Series.describe": [[754, "polars-series-describe"]], "polars.Series.dt.epoch": [[767, "polars-series-dt-epoch"]], "polars.Series.diff": [[755, "polars-series-diff"]], "polars.Series.bottom_k": [[735, "polars-series-bottom-k"]], "polars.Series.clear": [[741, "polars-series-clear"]], "polars.Series.arr.first": [[712, "polars-series-arr-first"]], "polars.Series.arr.slice": [[723, "polars-series-arr-slice"]], "polars.Series.tan": [[949, "polars-series-tan"]], "polars.Series.str.extract": [[915, "polars-series-str-extract"]], "Categories": [[971, "categories"], [581, "categories"]], "polars.Series.to_init_repr": [[955, "polars-series-to-init-repr"]], "polars.Series.tanh": [[950, "polars-series-tanh"]], "polars.Series.str.n_chars": [[922, "polars-series-str-n-chars"]], "polars.Series.struct.rename_fields": [[943, "polars-series-struct-rename-fields"]], "polars.Series.str.count_match": [[910, "polars-series-str-count-match"]], "polars.Series.to_numpy": [[957, "polars-series-to-numpy"]], "Manipulation/selection": [[978, "manipulation-selection"], [684, "manipulation-selection"], [589, "manipulation-selection"], [252, "manipulation-selection"]], "polars.Series.str.split": [[929, "polars-series-str-split"]], "polars.Series.str.extract_all": [[916, "polars-series-str-extract-all"]], "polars.Series.upper_bound": [[963, "polars-series-upper-bound"]], "polars.Series.take_every": [[948, "polars-series-take-every"]], "polars.Series.str.strip": [[933, "polars-series-str-strip"]], "polars.Series.var": [[965, "polars-series-var"]], "polars.Series.to_arrow": [[952, "polars-series-to-arrow"]], "polars.Series.str.decode": [[911, "polars-series-str-decode"]], "polars.Series.str.lstrip": [[921, "polars-series-str-lstrip"]], "polars.Series.str.replace_all": [[925, "polars-series-str-replace-all"]], "polars.Series.str.split_exact": [[930, "polars-series-str-split-exact"]], "Binary": [[969, "binary"], [590, "binary"], [579, "binary"]], "polars.Series.str.ends_with": [[913, "polars-series-str-ends-with"]], "polars.Series.str.ljust": [[920, "polars-series-str-ljust"]], "polars.Series.str.to_datetime": [[936, "polars-series-str-to-datetime"]], "Export": [[974, "export"], [248, "export"]], "polars.Series.str.json_path_match": [[918, "polars-series-str-json-path-match"]], "String": [[979, "string"], [591, "string"]], "polars.Series.sum": [[945, "polars-series-sum"]], "polars.Series.to_list": [[956, "polars-series-to-list"]], "polars.Series.top_k": [[960, "polars-series-top-k"]], "polars.Series.tail": [[946, "polars-series-tail"]], "polars.Series.str.rjust": [[926, "polars-series-str-rjust"]], "polars.Series.unique_counts": [[962, "polars-series-unique-counts"]], "polars.Series.str.slice": [[928, "polars-series-str-slice"]], "Series": [[975, "series"]], "polars.Series.str.json_extract": [[917, "polars-series-str-json-extract"]], "Attributes": [[968, "attributes"], [679, "attributes"], [245, "attributes"]], "polars.Series.str.to_lowercase": [[937, "polars-series-str-to-lowercase"]], "polars.Series.struct.fields": [[942, "polars-series-struct-fields"]], "polars.Series.take": [[947, "polars-series-take"]], "polars.Series.time_unit": [[951, "polars-series-time-unit"]], "polars.Series.str.encode": [[912, "polars-series-str-encode"]], "polars.Series.unique": [[961, "polars-series-unique"]], "polars.Series.to_dummies": [[953, "polars-series-to-dummies"]], "polars.Series.str.starts_with": [[932, "polars-series-str-starts-with"]], "polars.Series.view": [[966, "polars-series-view"]], "polars.Series.str.rstrip": [[927, "polars-series-str-rstrip"]], "polars.Series.str.splitn": [[931, "polars-series-str-splitn"]], "Computation": [[972, "computation"], [583, "computation"], [246, "computation"]], "Descriptive": [[973, "descriptive"], [680, "descriptive"], [247, "descriptive"]], "polars.Series.str.zfill": [[940, "polars-series-str-zfill"]], "List": [[976, "list"], [586, "list"]], "polars.Series.str.to_uppercase": [[939, "polars-series-str-to-uppercase"]], "polars.Series.struct.field": [[941, "polars-series-struct-field"]], "polars.Series.to_pandas": [[958, "polars-series-to-pandas"]], "polars.Series.str.lengths": [[919, "polars-series-str-lengths"]], "polars.Series.str.replace": [[924, "polars-series-str-replace"]], "polars.Series.zip_with": [[967, "polars-series-zip-with"]], "polars.Series.str.parse_int": [[923, "polars-series-str-parse-int"]], "polars.Series.str.to_date": [[935, "polars-series-str-to-date"]], "polars.Series.str.explode": [[914, "polars-series-str-explode"]], "polars.Series.to_frame": [[954, "polars-series-to-frame"]], "Miscellaneous": [[977, "miscellaneous"], [683, "miscellaneous"], [588, "miscellaneous"], [595, "miscellaneous"], [251, "miscellaneous"]], "Boolean": [[970, "boolean"], [580, "boolean"]], "polars.Series.value_counts": [[964, "polars-series-value-counts"]], "polars.Series.str.strptime": [[934, "polars-series-str-strptime"]], "polars.Series.str.to_time": [[938, "polars-series-str-to-time"]], "polars.Series.struct.unnest": [[944, "polars-series-struct-unnest"]], "polars.Series.to_physical": [[959, "polars-series-to-physical"]], "polars.LazyFrame.read_json": [[637, "polars-lazyframe-read-json"]], "polars.LazyFrame.merge_sorted": [[632, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.width": [[659, "polars-lazyframe-width"]], "polars.Series.arccosh": [[693, "polars-series-arccosh"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[671, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.Series.abs": [[686, "polars-series-abs"]], "polars.LazyFrame.profile": [[635, "polars-lazyframe-profile"]], "polars.LazyFrame.sum": [[651, "polars-lazyframe-sum"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[667, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.LazyFrame.with_columns": [[660, "polars-lazyframe-with-columns"]], "polars.Series.any": [[689, "polars-series-any"]], "polars.LazyFrame.pipe": [[634, "polars-lazyframe-pipe"]], "polars.LazyFrame.show_graph": [[645, "polars-lazyframe-show-graph"]], "polars.LazyFrame.sort": [[649, "polars-lazyframe-sort"]], "polars.LazyFrame.update": [[657, "polars-lazyframe-update"]], "LazyFrame": [[682, "lazyframe"]], "polars.Series.arctan": [[696, "polars-series-arctan"]], "polars.LazyFrame.slice": [[648, "polars-lazyframe-slice"]], "polars.LazyFrame.sink_parquet": [[647, "polars-lazyframe-sink-parquet"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[668, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[674, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[672, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[675, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[678, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[676, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.Series.all": [[688, "polars-series-all"]], "polars.Series.arcsin": [[694, "polars-series-arcsin"]], "polars.Series.arg_min": [[699, "polars-series-arg-min"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[677, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.LazyFrame.with_row_count": [[662, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.median": [[630, "polars-lazyframe-median"]], "polars.LazyFrame.select": [[641, "polars-lazyframe-select"]], "polars.LazyFrame.sink_ipc": [[646, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.top_k": [[654, "polars-lazyframe-top-k"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[670, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[673, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.LazyFrame.std": [[650, "polars-lazyframe-std"]], "polars.Series.arccos": [[692, "polars-series-arccos"]], "polars.LazyFrame.quantile": [[636, "polars-lazyframe-quantile"]], "polars.LazyFrame.reverse": [[639, "polars-lazyframe-reverse"]], "polars.Series.arcsinh": [[695, "polars-series-arcsinh"]], "polars.LazyFrame.shift_and_fill": [[644, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.min": [[633, "polars-lazyframe-min"]], "polars.LazyFrame.unique": [[655, "polars-lazyframe-unique"]], "polars.Series.apply": [[691, "polars-series-apply"]], "polars.LazyFrame.melt": [[631, "polars-lazyframe-melt"]], "Read/write logical plan": [[683, "read-write-logical-plan"]], "polars.LazyFrame.tail": [[652, "polars-lazyframe-tail"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[666, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.LazyFrame.unnest": [[656, "polars-lazyframe-unnest"]], "polars.Series.alias": [[687, "polars-series-alias"]], "polars.LazyFrame.schema": [[640, "polars-lazyframe-schema"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[665, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[669, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.Series.arg_max": [[698, "polars-series-arg-max"]], "polars.Series.arctanh": [[697, "polars-series-arctanh"]], "polars.LazyFrame.shift": [[643, "polars-lazyframe-shift"]], "polars.LazyFrame.rename": [[638, "polars-lazyframe-rename"]], "polars.LazyFrame.var": [[658, "polars-lazyframe-var"]], "polars.LazyFrame.with_context": [[661, "polars-lazyframe-with-context"]], "polars.LazyFrame.set_sorted": [[642, "polars-lazyframe-set-sorted"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[664, "polars-lazyframe-groupby-lazygroupby-agg"]], "GroupBy": [[681, "groupby"], [249, "groupby"]], "polars.Series.append": [[690, "polars-series-append"]], "polars.LazyFrame.write_json": [[663, "polars-lazyframe-write-json"]], "polars.LazyFrame.take_every": [[653, "polars-lazyframe-take-every"]], "polars.Expr.str.to_time": [[508, "polars-expr-str-to-time"]], "polars.Expr.take_every": [[518, "polars-expr-take-every"]], "polars.Expr.unique_counts": [[525, "polars-expr-unique-counts"]], "polars.Expr.xor": [[530, "polars-expr-xor"]], "polars.arg_sort_by": [[536, "polars-arg-sort-by"]], "polars.concat_list": [[540, "polars-concat-list"]], "polars.Expr.upper_bound": [[526, "polars-expr-upper-bound"]], "polars.corr": [[542, "polars-corr"]], "polars.Expr.str.to_datetime": [[506, "polars-expr-str-to-datetime"]], "polars.Expr.suffix": [[514, "polars-expr-suffix"]], "polars.Expr.str.to_lowercase": [[507, "polars-expr-str-to-lowercase"]], "polars.Expr.truediv": [[523, "polars-expr-truediv"]], "polars.avg": [[537, "polars-avg"]], "polars.datetime": [[549, "polars-datetime"]], "polars.Expr.str.rstrip": [[497, "polars-expr-str-rstrip"]], "polars.Expr.str.to_uppercase": [[509, "polars-expr-str-to-uppercase"]], "polars.duration": [[550, "polars-duration"]], "polars.Expr.unique": [[524, "polars-expr-unique"]], "polars.Expr.tail": [[516, "polars-expr-tail"]], "polars.Expr.str.rjust": [[496, "polars-expr-str-rjust"]], "polars.element": [[551, "polars-element"]], "polars.format": [[555, "polars-format"]], "polars.Expr.str.ljust": [[490, "polars-expr-str-ljust"]], "polars.Expr.str.to_date": [[505, "polars-expr-str-to-date"]], "polars.Expr.tan": [[519, "polars-expr-tan"]], "polars.Expr.str.split": [[499, "polars-expr-str-split"]], "polars.Expr.top_k": [[522, "polars-expr-top-k"]], "polars.any": [[532, "polars-any"]], "polars.approx_unique": [[534, "polars-approx-unique"]], "polars.Expr.where": [[529, "polars-expr-where"]], "polars.groups": [[557, "polars-groups"]], "polars.Expr.tanh": [[520, "polars-expr-tanh"]], "polars.Expr.var": [[528, "polars-expr-var"]], "polars.from_epoch": [[556, "polars-from-epoch"]], "polars.Expr.str.strip": [[503, "polars-expr-str-strip"]], "polars.concat_str": [[541, "polars-concat-str"]], "polars.Expr.struct.rename_fields": [[512, "polars-expr-struct-rename-fields"]], "polars.head": [[558, "polars-head"]], "polars.Expr.str.n_chars": [[492, "polars-expr-str-n-chars"]], "polars.Expr.str.replace_all": [[495, "polars-expr-str-replace-all"]], "polars.first": [[553, "polars-first"]], "polars.Expr.str.starts_with": [[502, "polars-expr-str-starts-with"]], "polars.Expr.value_counts": [[527, "polars-expr-value-counts"]], "polars.col": [[539, "polars-col"]], "polars.fold": [[554, "polars-fold"]], "polars.Expr.str.zfill": [[510, "polars-expr-str-zfill"]], "polars.list": [[559, "polars-list"]], "polars.cumsum": [[547, "polars-cumsum"]], "polars.coalesce": [[538, "polars-coalesce"]], "polars.Expr.take": [[517, "polars-expr-take"]], "polars.Expr.sub": [[513, "polars-expr-sub"]], "polars.cov": [[544, "polars-cov"]], "polars.cumfold": [[545, "polars-cumfold"]], "polars.Expr.str.splitn": [[501, "polars-expr-str-splitn"]], "polars.count": [[543, "polars-count"]], "polars.Expr.str.parse_int": [[493, "polars-expr-str-parse-int"]], "polars.Expr.str.strptime": [[504, "polars-expr-str-strptime"]], "polars.Expr.sum": [[515, "polars-expr-sum"]], "polars.Expr.str.split_exact": [[500, "polars-expr-str-split-exact"]], "polars.all": [[531, "polars-all"]], "polars.Expr.str.lstrip": [[491, "polars-expr-str-lstrip"]], "polars.Expr.str.replace": [[494, "polars-expr-str-replace"]], "polars.apply": [[533, "polars-apply"]], "polars.arange": [[535, "polars-arange"]], "polars.Expr.to_physical": [[521, "polars-expr-to-physical"]], "polars.exclude": [[552, "polars-exclude"]], "polars.Expr.str.slice": [[498, "polars-expr-str-slice"]], "polars.cumreduce": [[546, "polars-cumreduce"]], "polars.date": [[548, "polars-date"]], "polars.Expr.struct.field": [[511, "polars-expr-struct-field"]], "polars.Expr.meta.is_regex_projection": [[422, "polars-expr-meta-is-regex-projection"]], "polars.Expr.rechunk": [[446, "polars-expr-rechunk"]], "polars.Expr.prefix": [[442, "polars-expr-prefix"]], "polars.Expr.rolling_mean": [[453, "polars-expr-rolling-mean"]], "polars.Expr.rolling_quantile": [[456, "polars-expr-rolling-quantile"]], "polars.Expr.over": [[438, "polars-expr-over"]], "polars.Expr.meta.undo_aliases": [[427, "polars-expr-meta-undo-aliases"]], "polars.Expr.str.decode": [[481, "polars-expr-str-decode"]], "polars.Expr.rolling_var": [[460, "polars-expr-rolling-var"]], "polars.Expr.skew": [[472, "polars-expr-skew"]], "polars.Expr.repeat_by": [[448, "polars-expr-repeat-by"]], "polars.Expr.str.ends_with": [[483, "polars-expr-str-ends-with"]], "polars.Expr.min": [[428, "polars-expr-min"]], "polars.Expr.or_": [[437, "polars-expr-or"]], "polars.Expr.meta.root_names": [[426, "polars-expr-meta-root-names"]], "polars.Expr.str.concat": [[478, "polars-expr-str-concat"]], "polars.Expr.sign": [[469, "polars-expr-sign"]], "polars.Expr.mul": [[431, "polars-expr-mul"]], "polars.Expr.shrink_dtype": [[467, "polars-expr-shrink-dtype"]], "polars.Expr.str.encode": [[482, "polars-expr-str-encode"]], "polars.Expr.rolling_min": [[455, "polars-expr-rolling-min"]], "polars.Expr.meta.pop": [[425, "polars-expr-meta-pop"]], "polars.Expr.rank": [[445, "polars-expr-rank"]], "polars.Expr.str.lengths": [[489, "polars-expr-str-lengths"]], "polars.Expr.mode": [[430, "polars-expr-mode"]], "polars.Expr.sort_by": [[475, "polars-expr-sort-by"]], "polars.Expr.std": [[477, "polars-expr-std"]], "polars.Expr.ne": [[435, "polars-expr-ne"]], "polars.Expr.reinterpret": [[447, "polars-expr-reinterpret"]], "polars.Expr.rolling_median": [[454, "polars-expr-rolling-median"]], "polars.Expr.null_count": [[436, "polars-expr-null-count"]], "polars.Expr.rolling_sum": [[459, "polars-expr-rolling-sum"]], "polars.Expr.str.extract_all": [[486, "polars-expr-str-extract-all"]], "polars.Expr.rolling_apply": [[451, "polars-expr-rolling-apply"]], "polars.Expr.meta.ne": [[423, "polars-expr-meta-ne"]], "polars.Expr.reverse": [[450, "polars-expr-reverse"]], "polars.Expr.shuffle": [[468, "polars-expr-shuffle"]], "polars.Expr.quantile": [[444, "polars-expr-quantile"]], "polars.Expr.meta.has_multiple_outputs": [[421, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.str.explode": [[484, "polars-expr-str-explode"]], "polars.Expr.rolling_skew": [[457, "polars-expr-rolling-skew"]], "polars.Expr.rolling_max": [[452, "polars-expr-rolling-max"]], "polars.Expr.str.count_match": [[480, "polars-expr-str-count-match"]], "polars.Expr.pow": [[441, "polars-expr-pow"]], "polars.Expr.product": [[443, "polars-expr-product"]], "polars.Expr.meta.output_name": [[424, "polars-expr-meta-output-name"]], "polars.Expr.nan_max": [[433, "polars-expr-nan-max"]], "polars.Expr.sort": [[474, "polars-expr-sort"]], "polars.Expr.str.contains": [[479, "polars-expr-str-contains"]], "polars.Expr.rolling_std": [[458, "polars-expr-rolling-std"]], "polars.Expr.sin": [[470, "polars-expr-sin"]], "polars.Expr.str.json_extract": [[487, "polars-expr-str-json-extract"]], "polars.Expr.mod": [[429, "polars-expr-mod"]], "polars.Expr.n_unique": [[432, "polars-expr-n-unique"]], "polars.Expr.nan_min": [[434, "polars-expr-nan-min"]], "polars.Expr.pct_change": [[439, "polars-expr-pct-change"]], "polars.Expr.sqrt": [[476, "polars-expr-sqrt"]], "polars.Expr.pipe": [[440, "polars-expr-pipe"]], "polars.Expr.shift_and_fill": [[466, "polars-expr-shift-and-fill"]], "polars.Expr.sinh": [[471, "polars-expr-sinh"]], "polars.Expr.slice": [[473, "polars-expr-slice"]], "polars.Expr.str.extract": [[485, "polars-expr-str-extract"]], "polars.Expr.round": [[461, "polars-expr-round"]], "polars.Expr.search_sorted": [[463, "polars-expr-search-sorted"]], "polars.Expr.shift": [[465, "polars-expr-shift"]], "polars.Expr.reshape": [[449, "polars-expr-reshape"]], "polars.Expr.sample": [[462, "polars-expr-sample"]], "polars.Expr.set_sorted": [[464, "polars-expr-set-sorted"]], "polars.Expr.str.json_path_match": [[488, "polars-expr-str-json-path-match"]], "polars.Expr.meta.eq": [[420, "polars-expr-meta-eq"]], "polars.Expr.dt.year": [[366, "polars-expr-dt-year"]], "polars.Expr.median": [[419, "polars-expr-median"]], "polars.Expr.inspect": [[389, "polars-expr-inspect"]], "polars.Expr.mean": [[418, "polars-expr-mean"]], "polars.Expr.dt.nanosecond": [[350, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.second": [[357, "polars-expr-dt-second"]], "polars.Expr.dt.time": [[360, "polars-expr-dt-time"]], "polars.Expr.ewm_std": [[370, "polars-expr-ewm-std"]], "polars.Expr.log": [[409, "polars-expr-log"]], "polars.Expr.kurtosis": [[404, "polars-expr-kurtosis"]], "polars.Expr.dt.with_time_unit": [[365, "polars-expr-dt-with-time-unit"]], "polars.Expr.entropy": [[367, "polars-expr-entropy"]], "polars.Expr.gt": [[385, "polars-expr-gt"]], "polars.Expr.hash": [[386, "polars-expr-hash"]], "polars.Expr.interpolate": [[390, "polars-expr-interpolate"]], "polars.Expr.is_first": [[394, "polars-expr-is-first"]], "polars.Expr.dt.nanoseconds": [[351, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.quarter": [[354, "polars-expr-dt-quarter"]], "polars.Expr.filter": [[378, "polars-expr-filter"]], "polars.Expr.max": [[417, "polars-expr-max"]], "polars.Expr.keep_name": [[403, "polars-expr-keep-name"]], "polars.Expr.exp": [[373, "polars-expr-exp"]], "polars.Expr.forward_fill": [[383, "polars-expr-forward-fill"]], "polars.Expr.ewm_var": [[371, "polars-expr-ewm-var"]], "polars.Expr.is_not": [[398, "polars-expr-is-not"]], "polars.Expr.is_in": [[395, "polars-expr-is-in"]], "polars.Expr.len": [[407, "polars-expr-len"]], "polars.Expr.ge": [[384, "polars-expr-ge"]], "polars.Expr.eq": [[368, "polars-expr-eq"]], "polars.Expr.le": [[406, "polars-expr-le"]], "polars.Expr.is_nan": [[397, "polars-expr-is-nan"]], "polars.Expr.is_between": [[391, "polars-expr-is-between"]], "polars.Expr.exclude": [[372, "polars-expr-exclude"]], "polars.Expr.is_null": [[401, "polars-expr-is-null"]], "polars.Expr.explode": [[374, "polars-expr-explode"]], "polars.Expr.dt.timestamp": [[361, "polars-expr-dt-timestamp"]], "polars.Expr.dt.seconds": [[358, "polars-expr-dt-seconds"]], "polars.Expr.first": [[379, "polars-expr-first"]], "polars.Expr.is_not_nan": [[399, "polars-expr-is-not-nan"]], "polars.Expr.lower_bound": [[412, "polars-expr-lower-bound"]], "polars.Expr.dt.ordinal_day": [[353, "polars-expr-dt-ordinal-day"]], "polars.Expr.log1p": [[411, "polars-expr-log1p"]], "polars.Expr.lt": [[413, "polars-expr-lt"]], "polars.Expr.dt.replace_time_zone": [[355, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.truncate": [[362, "polars-expr-dt-truncate"]], "polars.Expr.is_duplicated": [[392, "polars-expr-is-duplicated"]], "polars.Expr.fill_null": [[377, "polars-expr-fill-null"]], "polars.Expr.floor": [[381, "polars-expr-floor"]], "polars.Expr.ewm_mean": [[369, "polars-expr-ewm-mean"]], "polars.Expr.fill_nan": [[376, "polars-expr-fill-nan"]], "polars.Expr.dt.strftime": [[359, "polars-expr-dt-strftime"]], "polars.Expr.is_finite": [[393, "polars-expr-is-finite"]], "polars.Expr.is_unique": [[402, "polars-expr-is-unique"]], "polars.Expr.log10": [[410, "polars-expr-log10"]], "polars.Expr.flatten": [[380, "polars-expr-flatten"]], "polars.Expr.limit": [[408, "polars-expr-limit"]], "polars.Expr.floordiv": [[382, "polars-expr-floordiv"]], "polars.Expr.implode": [[388, "polars-expr-implode"]], "polars.Expr.dt.round": [[356, "polars-expr-dt-round"]], "polars.Expr.map_dict": [[416, "polars-expr-map-dict"]], "polars.Expr.dt.offset_by": [[352, "polars-expr-dt-offset-by"]], "polars.Expr.dt.weekday": [[364, "polars-expr-dt-weekday"]], "polars.Expr.is_infinite": [[396, "polars-expr-is-infinite"]], "polars.Expr.extend_constant": [[375, "polars-expr-extend-constant"]], "polars.Expr.last": [[405, "polars-expr-last"]], "polars.Expr.map": [[414, "polars-expr-map"]], "polars.Expr.map_alias": [[415, "polars-expr-map-alias"]], "polars.Expr.dt.week": [[363, "polars-expr-dt-week"]], "polars.Expr.is_not_null": [[400, "polars-expr-is-not-null"]], "polars.Expr.head": [[387, "polars-expr-head"]], "polars.Expr.cumsum": [[323, "polars-expr-cumsum"]], "polars.Expr.cumulative_eval": [[324, "polars-expr-cumulative-eval"]], "polars.Expr.arr.tail": [[299, "polars-expr-arr-tail"]], "polars.Expr.arr.sum": [[298, "polars-expr-arr-sum"]], "polars.Expr.dt.is_leap_year": [[339, "polars-expr-dt-is-leap-year"]], "polars.Expr.arr.explode": [[284, "polars-expr-arr-explode"]], "polars.Expr.ceil": [[312, "polars-expr-ceil"]], "polars.Expr.bin.starts_with": [[308, "polars-expr-bin-starts-with"]], "polars.Expr.dt.month_end": [[348, "polars-expr-dt-month-end"]], "polars.Expr.arr.mean": [[292, "polars-expr-arr-mean"]], "polars.Expr.arr.first": [[285, "polars-expr-arr-first"]], "polars.Expr.arr.get": [[286, "polars-expr-arr-get"]], "polars.Expr.dt.combine": [[330, "polars-expr-dt-combine"]], "polars.Expr.cummin": [[321, "polars-expr-cummin"]], "polars.Expr.arr.unique": [[302, "polars-expr-arr-unique"]], "polars.Expr.arr.eval": [[283, "polars-expr-arr-eval"]], "polars.Expr.cumprod": [[322, "polars-expr-cumprod"]], "polars.Expr.arr.max": [[291, "polars-expr-arr-max"]], "polars.Expr.cos": [[316, "polars-expr-cos"]], "polars.Expr.dt.microseconds": [[342, "polars-expr-dt-microseconds"]], "polars.Expr.arr.last": [[289, "polars-expr-arr-last"]], "polars.Expr.count": [[318, "polars-expr-count"]], "polars.Expr.drop_nulls": [[328, "polars-expr-drop-nulls"]], "polars.Expr.arr.diff": [[282, "polars-expr-arr-diff"]], "polars.Expr.dt.convert_time_zone": [[331, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.minutes": [[346, "polars-expr-dt-minutes"]], "polars.Expr.arr.slice": [[296, "polars-expr-arr-slice"]], "polars.Expr.arr.min": [[293, "polars-expr-arr-min"]], "polars.Expr.cat.set_ordering": [[311, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.epoch": [[336, "polars-expr-dt-epoch"]], "polars.Expr.clip_min": [[315, "polars-expr-clip-min"]], "polars.Expr.dt.day": [[334, "polars-expr-dt-day"]], "polars.Expr.dt.microsecond": [[341, "polars-expr-dt-microsecond"]], "polars.Expr.cast": [[310, "polars-expr-cast"]], "polars.Expr.clip": [[313, "polars-expr-clip"]], "polars.Expr.cumcount": [[319, "polars-expr-cumcount"]], "polars.Expr.arr.to_struct": [[301, "polars-expr-arr-to-struct"]], "polars.Expr.dt.month_start": [[349, "polars-expr-dt-month-start"]], "polars.Expr.bottom_k": [[309, "polars-expr-bottom-k"]], "polars.Expr.arr.contains": [[280, "polars-expr-arr-contains"]], "polars.Expr.arr.lengths": [[290, "polars-expr-arr-lengths"]], "polars.Expr.dt.iso_year": [[340, "polars-expr-dt-iso-year"]], "polars.Expr.dt.cast_time_unit": [[329, "polars-expr-dt-cast-time-unit"]], "polars.Expr.arr.reverse": [[294, "polars-expr-arr-reverse"]], "polars.Expr.arr.shift": [[295, "polars-expr-arr-shift"]], "polars.Expr.arr.take": [[300, "polars-expr-arr-take"]], "polars.Expr.dt.millisecond": [[343, "polars-expr-dt-millisecond"]], "polars.Expr.dt.days": [[335, "polars-expr-dt-days"]], "polars.Expr.cosh": [[317, "polars-expr-cosh"]], "polars.Expr.bin.encode": [[306, "polars-expr-bin-encode"]], "polars.Expr.dot": [[326, "polars-expr-dot"]], "polars.Expr.backward_fill": [[303, "polars-expr-backward-fill"]], "polars.Expr.clip_max": [[314, "polars-expr-clip-max"]], "polars.Expr.dt.minute": [[345, "polars-expr-dt-minute"]], "polars.Expr.dt.month": [[347, "polars-expr-dt-month"]], "polars.Expr.dt.date": [[332, "polars-expr-dt-date"]], "polars.Expr.arr.head": [[287, "polars-expr-arr-head"]], "polars.Expr.arr.count_match": [[281, "polars-expr-arr-count-match"]], "polars.Expr.dt.milliseconds": [[344, "polars-expr-dt-milliseconds"]], "polars.Expr.drop_nans": [[327, "polars-expr-drop-nans"]], "polars.Expr.dt.hour": [[337, "polars-expr-dt-hour"]], "polars.Expr.diff": [[325, "polars-expr-diff"]], "polars.Expr.arr.sort": [[297, "polars-expr-arr-sort"]], "polars.Expr.bin.decode": [[305, "polars-expr-bin-decode"]], "polars.Expr.bin.ends_with": [[307, "polars-expr-bin-ends-with"]], "polars.Expr.arr.join": [[288, "polars-expr-arr-join"]], "polars.Expr.dt.datetime": [[333, "polars-expr-dt-datetime"]], "polars.Expr.cummax": [[320, "polars-expr-cummax"]], "polars.Expr.dt.hours": [[338, "polars-expr-dt-hours"]], "polars.Expr.bin.contains": [[304, "polars-expr-bin-contains"]], "polars.select": [[571, "polars-select"]], "Meta": [[587, "meta"]], "polars.LazyFrame.join": [[622, "polars-lazyframe-join"]], "Window": [[594, "window"]], "polars.min": [[565, "polars-min"]], "polars.LazyFrame.interpolate": [[621, "polars-lazyframe-interpolate"]], "Functions": [[595, "functions"], [584, "functions"]], "Conversion": [[595, "conversion"]], "Eager/Lazy functions": [[595, "eager-lazy-functions"]], "Parallelization": [[595, "parallelization"]], "StringCache": [[595, "stringcache"]], "polars.LazyFrame.explode": [[609, "polars-lazyframe-explode"]], "polars.median": [[564, "polars-median"]], "polars.LazyFrame.join_asof": [[623, "polars-lazyframe-join-asof"]], "polars.LazyFrame.groupby_rolling": [[618, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.explain": [[608, "polars-lazyframe-explain"]], "polars.LazyFrame.head": [[619, "polars-lazyframe-head"]], "polars.LazyFrame.groupby_dynamic": [[617, "polars-lazyframe-groupby-dynamic"]], "polars.pearson_corr": [[567, "polars-pearson-corr"]], "polars.tail": [[576, "polars-tail"]], "Input/output": [[597, "input-output"]], "CSV": [[597, "csv"]], "Feather/ IPC": [[597, "feather-ipc"]], "Parquet": [[597, "parquet"]], "Database": [[597, "database"]], "JSON": [[597, "json"]], "AVRO": [[597, "avro"]], "Excel": [[597, "excel"]], "Delta Lake": [[597, "delta-lake"]], "Datasets": [[597, "datasets"]], "BatchedCsvReader": [[597, "batchedcsvreader"]], "polars.LazyFrame.drop": [[605, "polars-lazyframe-drop"]], "polars.max": [[562, "polars-max"]], "polars.LazyFrame.last": [[624, "polars-lazyframe-last"]], "polars.LazyFrame.lazy": [[625, "polars-lazyframe-lazy"]], "polars.LazyFrame.dtypes": [[607, "polars-lazyframe-dtypes"]], "polars.LazyFrame.mean": [[629, "polars-lazyframe-mean"]], "polars.LazyFrame.map": [[627, "polars-lazyframe-map"]], "polars.spearman_rank_corr": [[572, "polars-spearman-rank-corr"]], "Expressions": [[585, "expressions"]], "polars.LazyFrame.clear": [[601, "polars-lazyframe-clear"]], "polars.LazyFrame.groupby": [[616, "polars-lazyframe-groupby"]], "polars.LazyFrame.inspect": [[620, "polars-lazyframe-inspect"]], "polars.struct": [[574, "polars-struct"]], "Columns / names": [[582, "columns-names"]], "polars.reduce": [[569, "polars-reduce"]], "polars.LazyFrame.cache": [[600, "polars-lazyframe-cache"]], "Operators": [[590, "operators"]], "Conjunction": [[590, "conjunction"]], "Comparison": [[590, "comparison"]], "Numeric": [[590, "numeric"], [253, "numeric"]], "polars.var": [[577, "polars-var"]], "polars.LazyFrame.limit": [[626, "polars-lazyframe-limit"]], "polars.std": [[573, "polars-std"]], "polars.lit": [[560, "polars-lit"]], "polars.LazyFrame.fill_nan": [[611, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.columns": [[604, "polars-lazyframe-columns"]], "API reference": [[596, "api-reference"]], "polars.quantile": [[568, "polars-quantile"]], "polars.mean": [[563, "polars-mean"]], "polars.LazyFrame.bottom_k": [[599, "polars-lazyframe-bottom-k"]], "polars.when": [[578, "polars-when"]], "polars.LazyFrame.fill_null": [[612, "polars-lazyframe-fill-null"]], "polars.LazyFrame.max": [[628, "polars-lazyframe-max"]], "polars.sum": [[575, "polars-sum"]], "polars.LazyFrame.collect": [[603, "polars-lazyframe-collect"]], "polars.n_unique": [[566, "polars-n-unique"]], "polars.LazyFrame.from_json": [[615, "polars-lazyframe-from-json"]], "polars.map": [[561, "polars-map"]], "polars.repeat": [[570, "polars-repeat"]], "polars.LazyFrame.first": [[614, "polars-lazyframe-first"]], "polars.LazyFrame.clone": [[602, "polars-lazyframe-clone"]], "polars.LazyFrame.filter": [[613, "polars-lazyframe-filter"]], "polars.LazyFrame.drop_nulls": [[606, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.fetch": [[610, "polars-lazyframe-fetch"]], "polars.DataFrame.sort": [[203, "polars-dataframe-sort"]], "polars.DataFrame.extend": [[144, "polars-dataframe-extend"]], "polars.DataFrame.product": [[185, "polars-dataframe-product"]], "polars.DataFrame.sum": [[205, "polars-dataframe-sum"]], "polars.DataFrame.limit": [[172, "polars-dataframe-limit"]], "polars.DataFrame.filter": [[147, "polars-dataframe-filter"]], "polars.DataFrame.drop_nulls": [[140, "polars-dataframe-drop-nulls"]], "polars.DataFrame.n_chunks": [[179, "polars-dataframe-n-chunks"]], "polars.DataFrame.to_dict": [[209, "polars-dataframe-to-dict"]], "polars.DataFrame.explode": [[143, "polars-dataframe-explode"]], "polars.DataFrame.lazy": [[171, "polars-dataframe-lazy"]], "polars.DataFrame.melt": [[176, "polars-dataframe-melt"]], "polars.DataFrame.item": [[166, "polars-dataframe-item"]], "polars.DataFrame.get_columns": [[152, "polars-dataframe-get-columns"]], "polars.DataFrame.min": [[178, "polars-dataframe-min"]], "polars.DataFrame.fold": [[149, "polars-dataframe-fold"]], "polars.DataFrame.rename": [[188, "polars-dataframe-rename"]], "polars.DataFrame.select": [[196, "polars-dataframe-select"]], "polars.DataFrame.shift": [[199, "polars-dataframe-shift"]], "polars.DataFrame.groupby_dynamic": [[155, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.fill_nan": [[145, "polars-dataframe-fill-nan"]], "polars.DataFrame.max": [[173, "polars-dataframe-max"]], "polars.DataFrame.estimated_size": [[142, "polars-dataframe-estimated-size"]], "polars.DataFrame.hash_rows": [[157, "polars-dataframe-hash-rows"]], "polars.DataFrame.is_empty": [[164, "polars-dataframe-is-empty"]], "polars.DataFrame.shift_and_fill": [[200, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.groupby": [[154, "polars-dataframe-groupby"]], "polars.DataFrame.quantile": [[186, "polars-dataframe-quantile"]], "polars.DataFrame.height": [[159, "polars-dataframe-height"]], "polars.DataFrame.glimpse": [[153, "polars-dataframe-glimpse"]], "polars.DataFrame.replace": [[189, "polars-dataframe-replace"]], "polars.DataFrame.fill_null": [[146, "polars-dataframe-fill-null"]], "polars.DataFrame.row": [[192, "polars-dataframe-row"]], "polars.DataFrame.set_sorted": [[197, "polars-dataframe-set-sorted"]], "polars.DataFrame.head": [[158, "polars-dataframe-head"]], "polars.DataFrame.shrink_to_fit": [[201, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.hstack": [[160, "polars-dataframe-hstack"]], "polars.DataFrame.insert_at_idx": [[161, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.frame_equal": [[150, "polars-dataframe-frame-equal"]], "polars.DataFrame.iter_slices": [[168, "polars-dataframe-iter-slices"]], "polars.DataFrame.rechunk": [[187, "polars-dataframe-rechunk"]], "polars.DataFrame.merge_sorted": [[177, "polars-dataframe-merge-sorted"]], "polars.DataFrame.get_column": [[151, "polars-dataframe-get-column"]], "polars.DataFrame.is_unique": [[165, "polars-dataframe-is-unique"]], "polars.DataFrame.mean": [[174, "polars-dataframe-mean"]], "polars.DataFrame.partition_by": [[182, "polars-dataframe-partition-by"]], "polars.DataFrame.rows": [[193, "polars-dataframe-rows"]], "polars.DataFrame.shape": [[198, "polars-dataframe-shape"]], "polars.DataFrame.schema": [[195, "polars-dataframe-schema"]], "polars.DataFrame.null_count": [[181, "polars-dataframe-null-count"]], "polars.DataFrame.pipe": [[183, "polars-dataframe-pipe"]], "polars.DataFrame.reverse": [[191, "polars-dataframe-reverse"]], "polars.DataFrame.find_idx_by_name": [[148, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.take_every": [[207, "polars-dataframe-take-every"]], "polars.DataFrame.is_duplicated": [[163, "polars-dataframe-is-duplicated"]], "polars.DataFrame.slice": [[202, "polars-dataframe-slice"]], "polars.DataFrame.to_arrow": [[208, "polars-dataframe-to-arrow"]], "polars.DataFrame.std": [[204, "polars-dataframe-std"]], "polars.DataFrame.join_asof": [[170, "polars-dataframe-join-asof"]], "polars.DataFrame.pivot": [[184, "polars-dataframe-pivot"]], "polars.DataFrame.sample": [[194, "polars-dataframe-sample"]], "polars.DataFrame.n_unique": [[180, "polars-dataframe-n-unique"]], "polars.DataFrame.groupby_rolling": [[156, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.iter_rows": [[167, "polars-dataframe-iter-rows"]], "polars.DataFrame.tail": [[206, "polars-dataframe-tail"]], "polars.DataFrame.dtypes": [[141, "polars-dataframe-dtypes"]], "polars.DataFrame.median": [[175, "polars-dataframe-median"]], "polars.DataFrame.interpolate": [[162, "polars-dataframe-interpolate"]], "polars.DataFrame.replace_at_idx": [[190, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.join": [[169, "polars-dataframe-join"]], "polars.DataFrame.to_init_repr": [[212, "polars-dataframe-to-init-repr"]], "polars.dataframe.groupby.GroupBy.apply": [[232, "polars-dataframe-groupby-groupby-apply"]], "Exceptions": [[254, "exceptions"]], "polars.dataframe.groupby.GroupBy.head": [[235, "polars-dataframe-groupby-groupby-head"]], "polars.dataframe.groupby.GroupBy.mean": [[238, "polars-dataframe-groupby-groupby-mean"]], "polars.Expr.add": [[257, "polars-expr-add"]], "polars.Expr.apply": [[264, "polars-expr-apply"]], "polars.Expr.agg_groups": [[258, "polars-expr-agg-groups"]], "polars.DataFrame.vstack": [[225, "polars-dataframe-vstack"]], "polars.Expr.arr.arg_min": [[278, "polars-expr-arr-arg-min"]], "polars.DataFrame.unnest": [[220, "polars-dataframe-unnest"]], "polars.DataFrame.with_columns": [[227, "polars-dataframe-with-columns"]], "polars.DataFrame.with_row_count": [[228, "polars-dataframe-with-row-count"]], "polars.DataFrame.to_numpy": [[213, "polars-dataframe-to-numpy"]], "polars.Expr.abs": [[256, "polars-expr-abs"]], "polars.DataFrame.to_dummies": [[211, "polars-dataframe-to-dummies"]], "polars.DataFrame.var": [[224, "polars-dataframe-var"]], "polars.dataframe.groupby.GroupBy.__iter__": [[229, "polars-dataframe-groupby-groupby-iter"]], "polars.DataFrame.update": [[222, "polars-dataframe-update"]], "polars.Expr.alias": [[259, "polars-expr-alias"]], "polars.DataFrame.top_k": [[217, "polars-dataframe-top-k"]], "polars.Expr.arctan": [[270, "polars-expr-arctan"]], "polars.dataframe.groupby.GroupBy.all": [[231, "polars-dataframe-groupby-groupby-all"]], "polars.Expr.arccos": [[266, "polars-expr-arccos"]], "polars.DataFrame.to_pandas": [[214, "polars-dataframe-to-pandas"]], "polars.DataFrame.upsample": [[223, "polars-dataframe-upsample"]], "Data types": [[253, "data-types"]], "Nested": [[253, "nested"]], "Other": [[253, "other"]], "polars.dataframe.groupby.GroupBy.median": [[239, "polars-dataframe-groupby-groupby-median"]], "polars.dataframe.groupby.GroupBy.first": [[234, "polars-dataframe-groupby-groupby-first"]], "polars.Expr.all": [[260, "polars-expr-all"]], "polars.Expr.arcsin": [[268, "polars-expr-arcsin"]], "polars.Expr.arg_min": [[273, "polars-expr-arg-min"]], "polars.Expr.arr.concat": [[279, "polars-expr-arr-concat"]], "polars.dataframe.groupby.GroupBy.last": [[236, "polars-dataframe-groupby-groupby-last"]], "polars.Expr.append": [[263, "polars-expr-append"]], "polars.Expr.arccosh": [[267, "polars-expr-arccosh"]], "polars.Expr.arr.arg_max": [[277, "polars-expr-arr-arg-max"]], "polars.dataframe.groupby.GroupBy.sum": [[243, "polars-dataframe-groupby-groupby-sum"]], "polars.Expr.and_": [[261, "polars-expr-and"]], "polars.DataFrame.unstack": [[221, "polars-dataframe-unstack"]], "polars.dataframe.groupby.GroupBy.min": [[240, "polars-dataframe-groupby-groupby-min"]], "DataFrame": [[250, "dataframe"]], "polars.DataFrame.to_series": [[215, "polars-dataframe-to-series"]], "polars.Expr.arg_sort": [[274, "polars-expr-arg-sort"]], "polars.DataFrame.width": [[226, "polars-dataframe-width"]], "polars.Expr.arg_true": [[275, "polars-expr-arg-true"]], "polars.DataFrame.transpose": [[218, "polars-dataframe-transpose"]], "polars.DataFrame.to_struct": [[216, "polars-dataframe-to-struct"]], "polars.dataframe.groupby.GroupBy.quantile": [[242, "polars-dataframe-groupby-groupby-quantile"]], "polars.dataframe.groupby.GroupBy.tail": [[244, "polars-dataframe-groupby-groupby-tail"]], "polars.Expr.any": [[262, "polars-expr-any"]], "polars.Expr.approx_unique": [[265, "polars-expr-approx-unique"]], "polars.Expr.arg_max": [[272, "polars-expr-arg-max"]], "polars.Expr.arcsinh": [[269, "polars-expr-arcsinh"]], "polars.dataframe.groupby.GroupBy.n_unique": [[241, "polars-dataframe-groupby-groupby-n-unique"]], "polars.DataFrame.unique": [[219, "polars-dataframe-unique"]], "polars.dataframe.groupby.GroupBy.agg": [[230, "polars-dataframe-groupby-groupby-agg"]], "polars.dataframe.groupby.GroupBy.count": [[233, "polars-dataframe-groupby-groupby-count"]], "polars.DataFrame.to_dicts": [[210, "polars-dataframe-to-dicts"]], "polars.dataframe.groupby.GroupBy.max": [[237, "polars-dataframe-groupby-groupby-max"]], "polars.Expr.arg_unique": [[276, "polars-expr-arg-unique"]], "polars.Expr.arctanh": [[271, "polars-expr-arctanh"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[5, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[6, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[7, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[8, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[9, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[10, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[11, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[12, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[13, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[14, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[15, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[16, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[17, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[22, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[23, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[24, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[25, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[26, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[27, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[28, "polars.DataFrame.write_database"]], "write_excel() (polars.dataframe method)": [[29, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[30, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[31, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[32, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[33, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[34, "polars.DataType"]], "__init__() (polars.datatype method)": [[34, "polars.DataType.__init__"]], "date (class in polars)": [[35, "polars.Date"]], "__init__() (polars.date method)": [[35, "polars.Date.__init__"]], "datetime (class in polars)": [[36, "polars.Datetime"]], "__init__() (polars.datetime method)": [[36, "polars.Datetime.__init__"]], "decimal (class in polars)": [[37, "polars.Decimal"]], "__init__() (polars.decimal method)": [[37, "polars.Decimal.__init__"]], "duration (class in polars)": [[38, "polars.Duration"]], "__init__() (polars.duration method)": [[38, "polars.Duration.__init__"]], "float32 (class in polars)": [[39, "polars.Float32"]], "__init__() (polars.float32 method)": [[39, "polars.Float32.__init__"]], "float64 (class in polars)": [[40, "polars.Float64"]], "__init__() (polars.float64 method)": [[40, "polars.Float64.__init__"]], "int16 (class in polars)": [[41, "polars.Int16"]], "__init__() (polars.int16 method)": [[41, "polars.Int16.__init__"]], "int32 (class in polars)": [[42, "polars.Int32"]], "__init__() (polars.int32 method)": [[42, "polars.Int32.__init__"]], "int64 (class in polars)": [[43, "polars.Int64"]], "__init__() (polars.int64 method)": [[43, "polars.Int64.__init__"]], "int8 (class in polars)": [[44, "polars.Int8"]], "__init__() (polars.int8 method)": [[44, "polars.Int8.__init__"]], "list (class in polars)": [[45, "polars.List"]], "__init__() (polars.list method)": [[45, "polars.List.__init__"]], "null (class in polars)": [[46, "polars.Null"]], "__init__() (polars.null method)": [[46, "polars.Null.__init__"]], "object (class in polars)": [[47, "polars.Object"]], "__init__() (polars.object method)": [[47, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[48, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[49, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[50, "polars.SQLContext.register"]], "stringcache (class in polars)": [[51, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[51, "polars.StringCache.__init__"]], "struct (class in polars)": [[52, "polars.Struct"]], "__init__() (polars.struct method)": [[52, "polars.Struct.__init__"]], "time (class in polars)": [[53, "polars.Time"]], "__init__() (polars.time method)": [[53, "polars.Time.__init__"]], "uint16 (class in polars)": [[54, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[54, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[55, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[55, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[56, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[56, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[57, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[57, "polars.UInt8.__init__"]], "unknown (class in polars)": [[58, "polars.Unknown"]], "__init__() (polars.unknown method)": [[58, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[59, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[59, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[60, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[61, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[62, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[63, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[64, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[65, "polars.arg_where"]], "build_info() (in module polars)": [[66, "polars.build_info"]], "collect_all() (in module polars)": [[67, "polars.collect_all"]], "concat() (in module polars)": [[68, "polars.concat"]], "cut() (in module polars)": [[69, "polars.cut"]], "date_range() (in module polars)": [[70, "polars.date_range"]], "enable_string_cache() (in module polars)": [[71, "polars.enable_string_cache"]], "arrowerror": [[72, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[73, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[74, "polars.exceptions.ComputeError"]], "duplicateerror": [[75, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[76, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[77, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[78, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[79, "polars.exceptions.PolarsPanicError"]], "rowserror": [[80, "polars.exceptions.RowsError"]], "schemaerror": [[81, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[82, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[83, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[84, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[85, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[86, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[87, "polars.from_dataframe"]], "from_dict() (in module polars)": [[88, "polars.from_dict"]], "from_dicts() (in module polars)": [[89, "polars.from_dicts"]], "from_numpy() (in module polars)": [[90, "polars.from_numpy"]], "from_pandas() (in module polars)": [[91, "polars.from_pandas"]], "from_records() (in module polars)": [[92, "polars.from_records"]], "from_repr() (in module polars)": [[93, "polars.from_repr"]], "get_dummies() (in module polars)": [[94, "polars.get_dummies"]], "get_index_type() (in module polars)": [[95, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[96, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[97, "polars.ones"]], "read_avro() (in module polars)": [[98, "polars.read_avro"]], "read_csv() (in module polars)": [[99, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[100, "polars.read_csv_batched"]], "read_database() (in module polars)": [[101, "polars.read_database"]], "read_delta() (in module polars)": [[102, "polars.read_delta"]], "read_excel() (in module polars)": [[103, "polars.read_excel"]], "read_ipc() (in module polars)": [[104, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[105, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[106, "polars.read_json"]], "read_ndjson() (in module polars)": [[107, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[108, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[109, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[110, "polars.scan_csv"]], "scan_delta() (in module polars)": [[111, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[112, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[113, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[114, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[115, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[116, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[117, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[118, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[119, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[119, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[120, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[121, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[122, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[123, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[124, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[125, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[126, "polars.threadpool_size"]], "zeros() (in module polars)": [[127, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[130, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[131, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[132, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[133, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[134, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[135, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[136, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[137, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[138, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[139, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[140, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[141, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[142, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[143, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[144, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[145, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[146, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[147, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[148, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[149, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[150, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[151, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[152, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[153, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[154, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[155, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[156, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[157, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[158, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[159, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[160, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[161, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[162, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[163, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[164, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[165, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[166, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[167, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[168, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[169, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[170, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[171, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[172, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[173, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[174, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[175, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[176, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[177, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[178, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[179, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[180, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[181, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[182, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[183, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[184, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[185, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[186, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[187, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[188, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[189, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[190, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[191, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[192, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[193, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[194, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[195, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[196, "polars.DataFrame.select"]], "set_sorted() (polars.dataframe method)": [[197, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[198, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[199, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[200, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[201, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[202, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[203, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[204, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[205, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[206, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[207, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[208, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[209, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[210, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[211, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[212, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[213, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[214, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[215, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[216, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[217, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[218, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[219, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[220, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[221, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[222, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[223, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[224, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[225, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[226, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[227, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[228, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[229, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[230, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[231, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[232, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[241, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[242, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[243, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[244, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[256, "polars.Expr.abs"]], "add() (polars.expr method)": [[257, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[258, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[259, "polars.Expr.alias"]], "all() (polars.expr method)": [[260, "polars.Expr.all"]], "and_() (polars.expr method)": [[261, "polars.Expr.and_"]], "any() (polars.expr method)": [[262, "polars.Expr.any"]], "append() (polars.expr method)": [[263, "polars.Expr.append"]], "apply() (polars.expr method)": [[264, "polars.Expr.apply"]], "approx_unique() (polars.expr method)": [[265, "polars.Expr.approx_unique"]], "arccos() (polars.expr method)": [[266, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[267, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[268, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[269, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[270, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[271, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[272, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[273, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[274, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[275, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[276, "polars.Expr.arg_unique"]], "arg_max() (polars.expr.arr method)": [[277, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[278, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[279, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[280, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[281, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[282, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[283, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[284, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[285, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[286, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[287, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[288, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[289, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[290, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[291, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[292, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[293, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[294, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[295, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[296, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[297, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[298, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[299, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[300, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[301, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[302, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[303, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[304, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[305, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[306, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[307, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[308, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[309, "polars.Expr.bottom_k"]], "cast() (polars.expr method)": [[310, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[311, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[312, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[313, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[314, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[315, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[316, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[317, "polars.Expr.cosh"]], "count() (polars.expr method)": [[318, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[319, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[320, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[321, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[322, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[323, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[324, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[325, "polars.Expr.diff"]], "dot() (polars.expr method)": [[326, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[327, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[328, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[329, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[330, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[331, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[332, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[333, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[334, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[335, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[336, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[337, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[338, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[339, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[340, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[341, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[342, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[343, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[344, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[345, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[346, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[347, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[348, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[349, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[350, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[351, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[352, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[353, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[354, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[355, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[356, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[357, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[358, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[359, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[360, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[361, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[362, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[363, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[364, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[365, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[366, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[367, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[368, "polars.Expr.eq"]], "ewm_mean() (polars.expr method)": [[369, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[370, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[371, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[372, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[373, "polars.Expr.exp"]], "explode() (polars.expr method)": [[374, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[375, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[376, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[377, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[378, "polars.Expr.filter"]], "first() (polars.expr method)": [[379, "polars.Expr.first"]], "flatten() (polars.expr method)": [[380, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[381, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[382, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[383, "polars.Expr.forward_fill"]], "ge() (polars.expr method)": [[384, "polars.Expr.ge"]], "gt() (polars.expr method)": [[385, "polars.Expr.gt"]], "hash() (polars.expr method)": [[386, "polars.Expr.hash"]], "head() (polars.expr method)": [[387, "polars.Expr.head"]], "implode() (polars.expr method)": [[388, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[389, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[390, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[391, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[392, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[393, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[394, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[395, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[396, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[397, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[398, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[399, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[400, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[401, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[402, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[403, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[404, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[405, "polars.Expr.last"]], "le() (polars.expr method)": [[406, "polars.Expr.le"]], "len() (polars.expr method)": [[407, "polars.Expr.len"]], "limit() (polars.expr method)": [[408, "polars.Expr.limit"]], "log() (polars.expr method)": [[409, "polars.Expr.log"]], "log10() (polars.expr method)": [[410, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[411, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[412, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[413, "polars.Expr.lt"]], "map() (polars.expr method)": [[414, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[415, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[416, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[417, "polars.Expr.max"]], "mean() (polars.expr method)": [[418, "polars.Expr.mean"]], "median() (polars.expr method)": [[419, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[420, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[421, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[422, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[423, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[424, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[425, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[426, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[427, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[428, "polars.Expr.min"]], "mod() (polars.expr method)": [[429, "polars.Expr.mod"]], "mode() (polars.expr method)": [[430, "polars.Expr.mode"]], "mul() (polars.expr method)": [[431, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[432, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[433, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[434, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[435, "polars.Expr.ne"]], "null_count() (polars.expr method)": [[436, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[437, "polars.Expr.or_"]], "over() (polars.expr method)": [[438, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[439, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[440, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[441, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[442, "polars.Expr.prefix"]], "product() (polars.expr method)": [[443, "polars.Expr.product"]], "quantile() (polars.expr method)": [[444, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[445, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[446, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[447, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[448, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[449, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[450, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[451, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[452, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[453, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[454, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[455, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[456, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[457, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[458, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[459, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[460, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[461, "polars.Expr.round"]], "sample() (polars.expr method)": [[462, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[463, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[464, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[465, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[466, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[467, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[468, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[469, "polars.Expr.sign"]], "sin() (polars.expr method)": [[470, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[471, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[472, "polars.Expr.skew"]], "slice() (polars.expr method)": [[473, "polars.Expr.slice"]], "sort() (polars.expr method)": [[474, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[475, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[476, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[477, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[478, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[479, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[480, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[481, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[482, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[483, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[484, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[485, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[486, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[487, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[488, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[489, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[490, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[491, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[492, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[493, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[494, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[495, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[496, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[497, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[498, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[499, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[500, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[501, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[502, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[503, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[504, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[505, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[506, "polars.Expr.str.to_datetime"]], "to_lowercase() (polars.expr.str method)": [[507, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[508, "polars.Expr.str.to_time"]], "to_uppercase() (polars.expr.str method)": [[509, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[510, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[511, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[512, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[513, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[514, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[515, "polars.Expr.sum"]], "tail() (polars.expr method)": [[516, "polars.Expr.tail"]], "take() (polars.expr method)": [[517, "polars.Expr.take"]], "take_every() (polars.expr method)": [[518, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[519, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[520, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[521, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[522, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[523, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[524, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[525, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[526, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[527, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[528, "polars.Expr.var"]], "where() (polars.expr method)": [[529, "polars.Expr.where"]], "xor() (polars.expr method)": [[530, "polars.Expr.xor"]], "all() (in module polars)": [[531, "polars.all"]], "any() (in module polars)": [[532, "polars.any"]], "apply() (in module polars)": [[533, "polars.apply"]], "approx_unique() (in module polars)": [[534, "polars.approx_unique"]], "arange() (in module polars)": [[535, "polars.arange"]], "arg_sort_by() (in module polars)": [[536, "polars.arg_sort_by"]], "avg() (in module polars)": [[537, "polars.avg"]], "coalesce() (in module polars)": [[538, "polars.coalesce"]], "col() (in module polars)": [[539, "polars.col"]], "concat_list() (in module polars)": [[540, "polars.concat_list"]], "concat_str() (in module polars)": [[541, "polars.concat_str"]], "corr() (in module polars)": [[542, "polars.corr"]], "count() (in module polars)": [[543, "polars.count"]], "cov() (in module polars)": [[544, "polars.cov"]], "cumfold() (in module polars)": [[545, "polars.cumfold"]], "cumreduce() (in module polars)": [[546, "polars.cumreduce"]], "cumsum() (in module polars)": [[547, "polars.cumsum"]], "date() (in module polars)": [[548, "polars.date"]], "datetime() (in module polars)": [[549, "polars.datetime"]], "duration() (in module polars)": [[550, "polars.duration"]], "element() (in module polars)": [[551, "polars.element"]], "exclude() (in module polars)": [[552, "polars.exclude"]], "first() (in module polars)": [[553, "polars.first"]], "fold() (in module polars)": [[554, "polars.fold"]], "format() (in module polars)": [[555, "polars.format"]], "from_epoch() (in module polars)": [[556, "polars.from_epoch"]], "groups() (in module polars)": [[557, "polars.groups"]], "head() (in module polars)": [[558, "polars.head"]], "list() (in module polars)": [[559, "polars.list"]], "lit() (in module polars)": [[560, "polars.lit"]], "map() (in module polars)": [[561, "polars.map"]], "max() (in module polars)": [[562, "polars.max"]], "mean() (in module polars)": [[563, "polars.mean"]], "median() (in module polars)": [[564, "polars.median"]], "min() (in module polars)": [[565, "polars.min"]], "n_unique() (in module polars)": [[566, "polars.n_unique"]], "pearson_corr() (in module polars)": [[567, "polars.pearson_corr"]], "quantile() (in module polars)": [[568, "polars.quantile"]], "reduce() (in module polars)": [[569, "polars.reduce"]], "repeat() (in module polars)": [[570, "polars.repeat"]], "select() (in module polars)": [[571, "polars.select"]], "spearman_rank_corr() (in module polars)": [[572, "polars.spearman_rank_corr"]], "std() (in module polars)": [[573, "polars.std"]], "struct() (in module polars)": [[574, "polars.struct"]], "sum() (in module polars)": [[575, "polars.sum"]], "tail() (in module polars)": [[576, "polars.tail"]], "var() (in module polars)": [[577, "polars.var"]], "when() (in module polars)": [[578, "polars.when"]], "bottom_k() (polars.lazyframe method)": [[599, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[600, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[601, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[602, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[603, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[604, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[605, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[606, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[607, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[608, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[609, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[610, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[611, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[612, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[613, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[614, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[615, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[616, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[617, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[618, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[619, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[620, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[621, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[622, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[623, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[624, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[625, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[626, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[627, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[628, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[629, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[630, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[631, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[632, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[633, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[634, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[635, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[636, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[637, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[638, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[639, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[640, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[641, "polars.LazyFrame.select"]], "set_sorted() (polars.lazyframe method)": [[642, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[643, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[644, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[645, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[646, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[647, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[648, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[649, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[650, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[651, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[652, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[653, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[654, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[655, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[656, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[657, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[658, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[659, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[660, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[661, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[662, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[663, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[664, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[665, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[666, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[667, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[668, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[669, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[670, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[671, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[672, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[673, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[674, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[675, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[676, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[677, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[678, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[686, "polars.Series.abs"]], "alias() (polars.series method)": [[687, "polars.Series.alias"]], "all() (polars.series method)": [[688, "polars.Series.all"]], "any() (polars.series method)": [[689, "polars.Series.any"]], "append() (polars.series method)": [[690, "polars.Series.append"]], "apply() (polars.series method)": [[691, "polars.Series.apply"]], "arccos() (polars.series method)": [[692, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[693, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[694, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[695, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[696, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[697, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[698, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[699, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[700, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[701, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[702, "polars.Series.arg_unique"]], "arr (polars.series attribute)": [[703, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[704, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[705, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[706, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[707, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[708, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[709, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[710, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[711, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[712, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[713, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[714, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[715, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[716, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[717, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[718, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[719, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[720, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[721, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[722, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[723, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[724, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[725, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[726, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[727, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[728, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[729, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[730, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[731, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[732, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[733, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[734, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[735, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[736, "polars.Series.cast"]], "cat (polars.series attribute)": [[737, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[738, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[739, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[740, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[741, "polars.Series.clear"]], "clip() (polars.series method)": [[742, "polars.Series.clip"]], "clip_max() (polars.series method)": [[743, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[744, "polars.Series.clip_min"]], "clone() (polars.series method)": [[745, "polars.Series.clone"]], "cos() (polars.series method)": [[746, "polars.Series.cos"]], "cosh() (polars.series method)": [[747, "polars.Series.cosh"]], "cummax() (polars.series method)": [[748, "polars.Series.cummax"]], "cummin() (polars.series method)": [[749, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[750, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[751, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[752, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[753, "polars.Series.cut"]], "describe() (polars.series method)": [[754, "polars.Series.describe"]], "diff() (polars.series method)": [[755, "polars.Series.diff"]], "dot() (polars.series method)": [[756, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[757, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[758, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[759, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[760, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[761, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[762, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[763, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[764, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[765, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[766, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[767, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[768, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[769, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[770, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[771, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[772, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[773, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[774, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[775, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[776, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[777, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[778, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[779, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[780, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[781, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[782, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[783, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[784, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[785, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[786, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[787, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[788, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[789, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[790, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[791, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[792, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[793, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[794, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[795, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[796, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[797, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[798, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[799, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[800, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[801, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[802, "polars.Series.dtype"]], "entropy() (polars.series method)": [[803, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[804, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[805, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[806, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[807, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[808, "polars.Series.exp"]], "explode() (polars.series method)": [[809, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[810, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[811, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[812, "polars.Series.fill_null"]], "filter() (polars.series method)": [[813, "polars.Series.filter"]], "flags (polars.series attribute)": [[814, "polars.Series.flags"]], "floor() (polars.series method)": [[815, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[816, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[817, "polars.Series.has_validity"]], "hash() (polars.series method)": [[818, "polars.Series.hash"]], "head() (polars.series method)": [[819, "polars.Series.head"]], "hist() (polars.series method)": [[820, "polars.Series.hist"]], "implode() (polars.series method)": [[821, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[822, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[823, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[824, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[825, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[826, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[827, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[828, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[829, "polars.Series.is_first"]], "is_float() (polars.series method)": [[830, "polars.Series.is_float"]], "is_in() (polars.series method)": [[831, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[832, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[833, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[834, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[835, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[836, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[837, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[838, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[839, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[840, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[841, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[842, "polars.Series.is_utf8"]], "item() (polars.series method)": [[843, "polars.Series.item"]], "kurtosis() (polars.series method)": [[844, "polars.Series.kurtosis"]], "len() (polars.series method)": [[845, "polars.Series.len"]], "limit() (polars.series method)": [[846, "polars.Series.limit"]], "log() (polars.series method)": [[847, "polars.Series.log"]], "log10() (polars.series method)": [[848, "polars.Series.log10"]], "log1p() (polars.series method)": [[849, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[850, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[851, "polars.Series.map_dict"]], "max() (polars.series method)": [[852, "polars.Series.max"]], "mean() (polars.series method)": [[853, "polars.Series.mean"]], "median() (polars.series method)": [[854, "polars.Series.median"]], "min() (polars.series method)": [[855, "polars.Series.min"]], "mode() (polars.series method)": [[856, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[857, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[858, "polars.Series.n_unique"]], "name (polars.series attribute)": [[859, "polars.Series.name"]], "nan_max() (polars.series method)": [[860, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[861, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[862, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[863, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[864, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[865, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[866, "polars.Series.peak_min"]], "product() (polars.series method)": [[867, "polars.Series.product"]], "qcut() (polars.series method)": [[868, "polars.Series.qcut"]], "quantile() (polars.series method)": [[869, "polars.Series.quantile"]], "rank() (polars.series method)": [[870, "polars.Series.rank"]], "rechunk() (polars.series method)": [[871, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[872, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[873, "polars.Series.rename"]], "reshape() (polars.series method)": [[874, "polars.Series.reshape"]], "reverse() (polars.series method)": [[875, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[876, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[877, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[878, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[879, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[880, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[881, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[882, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[883, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[884, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[885, "polars.Series.rolling_var"]], "round() (polars.series method)": [[886, "polars.Series.round"]], "sample() (polars.series method)": [[887, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[888, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[889, "polars.Series.series_equal"]], "set() (polars.series method)": [[890, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[891, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[892, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[893, "polars.Series.shape"]], "shift() (polars.series method)": [[894, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[895, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[896, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[897, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[898, "polars.Series.shuffle"]], "sign() (polars.series method)": [[899, "polars.Series.sign"]], "sin() (polars.series method)": [[900, "polars.Series.sin"]], "sinh() (polars.series method)": [[901, "polars.Series.sinh"]], "skew() (polars.series method)": [[902, "polars.Series.skew"]], "slice() (polars.series method)": [[903, "polars.Series.slice"]], "sort() (polars.series method)": [[904, "polars.Series.sort"]], "sqrt() (polars.series method)": [[905, "polars.Series.sqrt"]], "std() (polars.series method)": [[906, "polars.Series.std"]], "str (polars.series attribute)": [[907, "polars.Series.str"]], "concat() (polars.series.str method)": [[908, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[909, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[910, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[911, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[912, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[913, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[914, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[915, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[916, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[917, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[918, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[919, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[920, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[921, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[922, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[923, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[924, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[925, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[926, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[927, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[928, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[929, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[930, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[931, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[932, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[933, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[934, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[935, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[936, "polars.Series.str.to_datetime"]], "to_lowercase() (polars.series.str method)": [[937, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[938, "polars.Series.str.to_time"]], "to_uppercase() (polars.series.str method)": [[939, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[940, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[941, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[942, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[943, "polars.Series.struct.rename_fields"]], "unnest() (polars.series.struct method)": [[944, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[945, "polars.Series.sum"]], "tail() (polars.series method)": [[946, "polars.Series.tail"]], "take() (polars.series method)": [[947, "polars.Series.take"]], "take_every() (polars.series method)": [[948, "polars.Series.take_every"]], "tan() (polars.series method)": [[949, "polars.Series.tan"]], "tanh() (polars.series method)": [[950, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[951, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[952, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[953, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[954, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[955, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[956, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[957, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[958, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[959, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[960, "polars.Series.top_k"]], "unique() (polars.series method)": [[961, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[962, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[963, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[964, "polars.Series.value_counts"]], "var() (polars.series method)": [[965, "polars.Series.var"]], "view() (polars.series method)": [[966, "polars.Series.view"]], "zip_with() (polars.series method)": [[967, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[982, "polars.SQLContext"]]}})