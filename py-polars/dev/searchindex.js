Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.date_range", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.time_range", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.date_range.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.time_range.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.date_range", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.time_range", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.any", "polars.apply", "polars.approx_unique", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.time", "polars.var", "polars.when", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 91, 118, 134, 135, 236, 254, 268, 592, 674, 699, 985], "refer": [0, 31, 102, 103, 106, 140, 254, 364, 367, 422, 451, 491, 510, 511, 512, 514, 592, 802, 805, 879, 943, 944, 945, 947, 985], "input": [0, 65, 93, 102, 103, 106, 135, 136, 147, 158, 186, 200, 207, 221, 231, 234, 254, 261, 268, 378, 397, 416, 431, 444, 481, 536, 537, 538, 539, 542, 544, 545, 546, 547, 553, 558, 559, 567, 568, 571, 580, 581, 592, 603, 606, 616, 623, 649, 657, 662, 668, 672, 690, 699, 833, 857, 858, 860, 985], "output": [0, 26, 28, 31, 32, 33, 34, 74, 106, 130, 135, 159, 160, 171, 181, 188, 197, 200, 227, 231, 254, 263, 268, 420, 421, 430, 533, 539, 548, 567, 592, 603, 624, 625, 634, 638, 639, 649, 668, 671, 674, 690, 699, 974, 985], "seri": [0, 1, 23, 66, 67, 68, 69, 70, 73, 74, 90, 92, 95, 97, 100, 121, 125, 130, 131, 135, 143, 151, 153, 155, 156, 161, 164, 165, 167, 169, 177, 178, 182, 193, 194, 209, 213, 216, 219, 220, 235, 254, 267, 268, 270, 271, 272, 273, 274, 275, 278, 279, 281, 282, 283, 288, 291, 292, 299, 300, 303, 304, 305, 308, 316, 317, 321, 322, 334, 336, 340, 343, 347, 349, 351, 356, 360, 361, 363, 368, 371, 380, 381, 387, 395, 397, 399, 400, 401, 402, 403, 405, 406, 407, 418, 420, 447, 451, 452, 453, 454, 455, 457, 469, 470, 473, 476, 477, 484, 499, 504, 510, 511, 512, 514, 517, 523, 524, 525, 526, 532, 537, 538, 539, 540, 541, 543, 549, 551, 552, 553, 559, 560, 562, 564, 566, 567, 568, 569, 570, 571, 572, 574, 575, 578, 579, 580, 581, 582, 584, 592, 603, 620, 673, 690, 979, 981, 984, 986, 989, 990, 991, 993], "datafram": [0, 1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 72, 73, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 117, 120, 122, 123, 130, 252, 253, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 301, 302, 305, 306, 307, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 362, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 564, 567, 568, 569, 570, 571, 572, 574, 578, 579, 580, 581, 582, 584, 585, 592, 603, 610, 612, 616, 617, 621, 624, 629, 630, 631, 632, 634, 638, 639, 643, 647, 654, 655, 656, 657, 663, 664, 665, 668, 669, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 698, 699, 718, 746, 761, 762, 798, 829, 877, 927, 939, 940, 954, 963, 964, 974, 985, 992, 993], "lazyfram": [0, 1, 50, 51, 53, 55, 65, 66, 67, 68, 69, 72, 73, 113, 114, 115, 116, 117, 118, 120, 125, 130, 175, 187, 254, 305, 384, 592, 603, 689, 992, 993], "express": [0, 70, 72, 74, 100, 122, 125, 127, 130, 131, 135, 136, 147, 149, 151, 158, 184, 188, 196, 200, 207, 221, 231, 234, 236, 254, 261, 263, 264, 265, 267, 268, 279, 285, 287, 305, 314, 318, 319, 320, 323, 329, 331, 335, 353, 354, 357, 364, 374, 378, 381, 384, 388, 390, 391, 395, 397, 401, 404, 409, 412, 413, 418, 419, 420, 421, 422, 426, 427, 428, 429, 430, 431, 435, 437, 441, 443, 444, 446, 447, 448, 449, 454, 468, 469, 470, 472, 474, 479, 481, 485, 486, 491, 492, 493, 494, 500, 501, 519, 520, 523, 529, 530, 532, 535, 536, 537, 538, 541, 542, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 566, 567, 568, 571, 574, 575, 576, 577, 578, 580, 581, 583, 585, 591, 603, 606, 610, 615, 616, 617, 620, 623, 643, 649, 652, 653, 654, 655, 657, 662, 668, 669, 672, 674, 690, 699, 716, 718, 750, 751, 752, 760, 769, 791, 792, 795, 819, 833, 897, 904, 918, 919, 924, 925, 926, 927, 933, 934, 985], "extend": [0, 93, 254, 381, 592, 603, 698, 819, 985], "function": [0, 31, 65, 66, 67, 68, 69, 91, 97, 102, 103, 106, 113, 123, 135, 140, 146, 153, 180, 187, 188, 218, 222, 225, 226, 236, 254, 264, 268, 305, 329, 361, 375, 376, 377, 420, 421, 444, 446, 457, 458, 459, 460, 461, 462, 464, 465, 466, 478, 527, 537, 538, 539, 551, 552, 553, 559, 560, 562, 567, 568, 571, 574, 581, 592, 603, 634, 638, 642, 665, 674, 690, 699, 736, 760, 799, 813, 814, 815, 816, 829, 877, 885, 899, 900, 906, 911, 968, 985, 993], "data": [0, 1, 6, 16, 19, 29, 30, 31, 32, 36, 50, 56, 65, 66, 68, 73, 75, 80, 81, 85, 87, 90, 91, 92, 93, 94, 95, 96, 100, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 120, 121, 123, 124, 125, 127, 131, 134, 135, 137, 138, 148, 157, 158, 159, 171, 172, 173, 175, 186, 187, 191, 196, 197, 205, 212, 217, 218, 231, 233, 252, 254, 265, 268, 306, 315, 334, 362, 371, 374, 390, 391, 396, 403, 405, 412, 419, 441, 443, 451, 467, 468, 478, 491, 492, 510, 511, 512, 514, 527, 529, 530, 536, 545, 566, 575, 592, 603, 608, 609, 617, 623, 624, 642, 654, 655, 668, 690, 698, 699, 737, 744, 749, 753, 766, 768, 809, 829, 879, 895, 896, 906, 911, 943, 944, 945, 947, 966, 967, 968, 969, 971, 976, 984, 985, 992], "type": [0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 74, 80, 90, 92, 93, 94, 95, 96, 100, 102, 103, 105, 106, 113, 114, 119, 120, 121, 124, 125, 130, 131, 135, 153, 157, 159, 160, 161, 172, 212, 218, 220, 223, 254, 268, 292, 305, 315, 316, 318, 319, 320, 336, 340, 343, 347, 349, 351, 356, 360, 363, 378, 392, 399, 401, 402, 422, 454, 505, 506, 507, 510, 527, 539, 545, 554, 555, 556, 558, 559, 566, 575, 583, 592, 603, 610, 615, 617, 624, 625, 643, 653, 654, 655, 663, 690, 723, 736, 744, 746, 750, 751, 752, 770, 774, 777, 784, 786, 789, 794, 798, 801, 827, 906, 938, 939, 940, 943, 966, 967, 969, 977, 985, 992], "config": [0, 65, 200, 231, 254, 556, 603, 649, 668, 690], "except": [0, 162, 174, 176, 210, 254, 558, 603, 630, 690, 828, 855, 956, 967, 976, 985], "test": [0, 106, 603, 626, 633, 690], "util": [0, 97, 562, 603, 617, 690], "sql": [0, 29, 50, 54, 104, 173, 254, 603], "These": [1, 31, 132, 254, 368, 591, 806], "allow": [1, 30, 31, 56, 80, 91, 113, 115, 116, 117, 118, 125, 127, 134, 171, 174, 175, 196, 197, 198, 218, 223, 233, 254, 357, 364, 367, 453, 468, 510, 511, 512, 592, 629, 630, 634, 638, 654, 655, 663, 669, 690, 795, 802, 805, 881, 896, 898, 943, 944, 945, 968, 985, 993], "you": [1, 13, 31, 35, 55, 65, 73, 90, 92, 93, 94, 96, 100, 102, 103, 106, 107, 111, 113, 120, 131, 132, 135, 144, 148, 159, 160, 171, 174, 184, 196, 197, 214, 217, 222, 236, 254, 268, 287, 305, 318, 319, 320, 353, 354, 360, 364, 367, 384, 397, 420, 422, 453, 458, 459, 460, 461, 462, 464, 465, 466, 495, 498, 510, 512, 541, 551, 560, 575, 592, 610, 613, 624, 625, 626, 630, 633, 653, 655, 674, 690, 698, 699, 718, 750, 751, 752, 791, 792, 798, 802, 805, 833, 881, 928, 931, 943, 945, 967, 976, 985, 993], "regist": [1, 50, 52, 53, 54, 55, 66, 67, 68, 69, 126, 128, 992], "custom": [1, 31, 66, 67, 68, 69, 126, 127, 128, 135, 236, 254, 268, 305, 364, 367, 420, 457, 539, 567, 592, 634, 674, 690, 699, 736, 802, 805, 885, 985, 993], "dedic": [1, 91, 171, 197, 254], "namespac": [1, 253, 591, 603, 689], "underli": [1, 76, 83, 90, 92, 93, 94, 96, 111, 122, 125, 127, 148, 171, 172, 197, 212, 254, 309, 334, 335, 339, 342, 344, 345, 346, 348, 350, 352, 355, 358, 359, 360, 362, 369, 370, 371, 372, 453, 467, 485, 487, 592, 690, 698, 739, 768, 769, 773, 776, 778, 779, 783, 785, 788, 790, 793, 796, 797, 798, 800, 807, 808, 809, 810, 881, 895, 906, 918, 920, 962, 967, 985], "polar": [1, 254, 591, 592, 597, 603, 690, 985, 992], "class": [1, 2, 3, 4, 5, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 95, 122, 123, 218, 254, 592, 597, 603, 690, 966, 967, 985, 992], "without": [1, 6, 97, 105, 108, 112, 114, 118, 225, 226, 254, 268, 329, 361, 458, 459, 460, 461, 462, 464, 465, 466, 578, 592, 665, 690, 760, 766, 799, 829, 877, 985], "requir": [1, 30, 31, 35, 65, 95, 120, 121, 140, 196, 218, 254, 306, 375, 376, 377, 473, 510, 511, 512, 530, 575, 592, 655, 690, 737, 814, 815, 816, 905, 943, 944, 945, 967, 968, 971, 985], "subclass": [1, 254], "mixin": 1, "expr": [1, 65, 66, 67, 68, 69, 70, 74, 100, 130, 131, 147, 149, 151, 173, 174, 184, 188, 196, 200, 231, 254, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 592, 593, 594, 597, 598, 599, 600, 616, 618, 620, 629, 630, 644, 649, 652, 668, 690, 716, 718, 760, 769, 820, 904, 918, 922, 941, 957, 985], "ar": [1, 6, 11, 15, 18, 26, 30, 31, 55, 56, 65, 74, 75, 82, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 118, 120, 121, 123, 125, 132, 134, 135, 136, 140, 144, 146, 149, 153, 158, 159, 160, 171, 174, 175, 180, 181, 186, 196, 197, 200, 201, 207, 213, 218, 221, 226, 227, 231, 234, 254, 264, 305, 325, 327, 328, 332, 333, 361, 368, 373, 375, 376, 377, 397, 399, 401, 402, 403, 405, 406, 407, 410, 422, 444, 451, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 475, 478, 480, 481, 495, 498, 499, 510, 512, 521, 537, 538, 541, 542, 544, 546, 547, 548, 553, 568, 571, 580, 581, 585, 586, 588, 591, 592, 593, 594, 597, 598, 599, 600, 603, 606, 613, 618, 623, 624, 625, 626, 630, 633, 634, 638, 639, 643, 646, 649, 650, 654, 655, 657, 662, 665, 668, 669, 672, 690, 696, 698, 736, 758, 759, 799, 806, 812, 813, 814, 815, 816, 826, 833, 837, 840, 841, 843, 844, 845, 846, 853, 879, 883, 885, 891, 908, 911, 928, 931, 932, 943, 945, 955, 967, 968, 976, 979, 981, 985, 986, 989, 990, 991, 993], "all": [1, 8, 15, 18, 23, 26, 31, 36, 52, 65, 72, 74, 90, 93, 95, 96, 102, 103, 105, 106, 107, 111, 113, 115, 116, 122, 123, 127, 141, 144, 150, 162, 167, 169, 171, 172, 175, 176, 180, 183, 184, 191, 196, 197, 206, 210, 215, 223, 225, 227, 254, 265, 266, 267, 287, 292, 302, 305, 307, 323, 329, 333, 378, 389, 392, 394, 396, 399, 402, 406, 407, 409, 413, 420, 421, 436, 442, 448, 451, 456, 473, 479, 481, 486, 492, 494, 497, 500, 501, 503, 509, 520, 533, 545, 553, 558, 560, 565, 574, 580, 581, 585, 592, 597, 603, 610, 613, 615, 617, 619, 634, 638, 643, 653, 656, 663, 669, 690, 718, 723, 733, 736, 760, 762, 766, 828, 835, 850, 855, 879, 912, 919, 925, 927, 930, 933, 934, 936, 942, 956, 985, 992, 993], "support": [1, 30, 31, 35, 73, 90, 91, 92, 93, 94, 95, 96, 97, 104, 105, 106, 114, 122, 127, 132, 134, 171, 172, 197, 206, 207, 214, 218, 254, 300, 444, 479, 481, 504, 545, 592, 597, 656, 657, 690, 731, 912, 937, 968, 985, 992], "target": [1, 30, 31, 71, 254, 368, 491, 510, 511, 512, 924, 943, 944, 945], "thi": [1, 6, 8, 12, 13, 26, 28, 30, 31, 33, 35, 39, 50, 51, 55, 56, 65, 72, 73, 75, 90, 92, 93, 94, 95, 96, 97, 99, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 132, 134, 135, 140, 144, 145, 146, 148, 153, 158, 159, 160, 161, 165, 167, 169, 170, 171, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 186, 189, 190, 191, 196, 197, 198, 200, 204, 206, 208, 209, 212, 214, 217, 218, 222, 223, 225, 226, 227, 228, 229, 231, 232, 236, 237, 253, 254, 264, 267, 268, 269, 278, 287, 288, 292, 301, 305, 306, 313, 314, 316, 323, 329, 334, 345, 353, 354, 357, 360, 361, 364, 367, 371, 380, 395, 396, 397, 401, 413, 417, 418, 420, 426, 427, 428, 429, 430, 431, 439, 440, 444, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 468, 470, 472, 473, 474, 479, 480, 481, 491, 496, 497, 502, 503, 509, 510, 512, 516, 528, 530, 531, 532, 533, 537, 538, 540, 541, 546, 549, 551, 553, 559, 560, 562, 568, 571, 575, 578, 581, 592, 603, 604, 607, 610, 613, 615, 617, 623, 624, 625, 627, 630, 634, 638, 639, 643, 646, 649, 652, 653, 654, 655, 656, 663, 665, 668, 669, 670, 671, 674, 675, 689, 690, 698, 699, 708, 718, 719, 723, 732, 737, 743, 746, 760, 766, 768, 769, 779, 791, 792, 795, 798, 799, 802, 805, 809, 813, 818, 825, 826, 829, 834, 839, 840, 842, 847, 849, 851, 852, 854, 859, 861, 862, 863, 864, 866, 867, 869, 870, 872, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 889, 892, 893, 894, 896, 899, 900, 901, 904, 905, 906, 907, 912, 913, 915, 924, 929, 930, 935, 936, 942, 943, 945, 949, 950, 954, 955, 962, 964, 966, 967, 968, 970, 971, 973, 975, 976, 985, 992, 993], "featur": [1, 35, 39, 56, 71, 254], "i": [1, 6, 12, 13, 15, 28, 30, 31, 32, 33, 34, 39, 50, 55, 56, 65, 70, 71, 72, 73, 74, 77, 79, 80, 82, 86, 88, 90, 91, 92, 93, 94, 95, 96, 99, 102, 103, 104, 105, 107, 111, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 127, 129, 130, 134, 135, 144, 146, 154, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 172, 174, 175, 176, 178, 180, 181, 184, 186, 187, 188, 196, 197, 198, 206, 207, 208, 209, 210, 212, 218, 222, 223, 225, 226, 227, 228, 236, 237, 253, 254, 261, 264, 266, 267, 268, 269, 279, 287, 290, 300, 304, 305, 314, 323, 329, 335, 344, 357, 361, 364, 368, 375, 376, 377, 380, 392, 395, 397, 410, 417, 420, 422, 426, 429, 431, 444, 451, 453, 455, 458, 459, 460, 461, 462, 464, 465, 466, 468, 469, 470, 474, 475, 478, 479, 480, 481, 483, 485, 486, 491, 492, 494, 496, 497, 499, 500, 502, 503, 504, 507, 509, 510, 511, 512, 514, 516, 533, 534, 537, 538, 540, 541, 545, 546, 548, 549, 551, 552, 553, 560, 566, 568, 571, 575, 576, 577, 578, 579, 581, 584, 585, 592, 610, 613, 615, 617, 623, 624, 625, 628, 630, 632, 634, 638, 639, 643, 653, 654, 655, 656, 657, 658, 663, 665, 666, 671, 674, 675, 690, 697, 698, 699, 718, 721, 731, 735, 736, 760, 769, 778, 795, 799, 802, 806, 813, 814, 815, 816, 818, 826, 827, 828, 829, 832, 834, 836, 842, 847, 848, 849, 851, 852, 853, 855, 877, 879, 881, 883, 896, 897, 898, 899, 900, 901, 907, 908, 911, 912, 915, 918, 919, 924, 925, 927, 929, 930, 932, 933, 935, 936, 937, 940, 942, 943, 944, 945, 947, 949, 956, 962, 967, 968, 974, 975, 976, 985, 992, 993], "primarili": 1, "intend": 1, "us": [1, 10, 12, 13, 18, 23, 24, 28, 29, 31, 35, 50, 51, 52, 53, 55, 56, 65, 73, 74, 91, 93, 94, 96, 98, 100, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 126, 127, 129, 130, 131, 135, 142, 144, 149, 150, 153, 158, 159, 160, 167, 169, 171, 172, 174, 178, 180, 183, 184, 187, 188, 196, 198, 200, 207, 208, 209, 215, 216, 218, 222, 223, 225, 226, 227, 228, 231, 234, 236, 254, 262, 268, 269, 279, 287, 305, 309, 310, 314, 316, 329, 332, 333, 360, 364, 367, 371, 373, 375, 376, 377, 383, 384, 396, 397, 410, 420, 422, 425, 444, 451, 453, 455, 458, 459, 460, 461, 462, 464, 465, 466, 468, 470, 473, 474, 478, 480, 481, 483, 485, 487, 488, 489, 491, 492, 495, 496, 500, 502, 504, 506, 508, 510, 511, 512, 514, 534, 537, 538, 539, 540, 541, 545, 547, 548, 551, 553, 560, 562, 566, 568, 571, 575, 576, 577, 578, 579, 580, 581, 584, 591, 592, 603, 610, 612, 613, 618, 619, 623, 624, 625, 626, 630, 632, 633, 638, 649, 655, 657, 658, 663, 665, 666, 668, 672, 674, 690, 699, 718, 736, 739, 740, 746, 760, 798, 802, 805, 809, 812, 814, 815, 816, 820, 821, 826, 829, 833, 853, 860, 879, 881, 883, 896, 899, 900, 901, 905, 907, 911, 915, 918, 920, 921, 924, 925, 928, 929, 933, 935, 937, 939, 943, 944, 945, 947, 957, 963, 965, 966, 967, 968, 975, 976, 985, 992, 993], "librari": [1, 76, 83, 420, 592, 993], "author": 1, "domain": [1, 492, 925], "specif": [1, 26, 30, 31, 90, 92, 94, 96, 102, 104, 105, 114, 124, 125, 171, 254, 364, 367, 457, 510, 511, 512, 514, 592, 690, 802, 805, 885, 943, 944, 945, 947, 985, 993], "capabl": [1, 31, 254], "which": [1, 18, 27, 28, 31, 32, 33, 34, 35, 65, 66, 67, 68, 69, 93, 102, 103, 104, 105, 106, 113, 114, 120, 126, 128, 136, 144, 148, 159, 160, 217, 221, 223, 254, 264, 305, 364, 381, 397, 399, 402, 403, 405, 406, 407, 431, 458, 459, 460, 461, 462, 464, 465, 466, 499, 585, 592, 606, 613, 615, 624, 625, 654, 655, 662, 663, 671, 690, 698, 736, 802, 819, 833, 837, 841, 843, 844, 845, 846, 899, 932, 985, 993], "mai": [1, 30, 39, 73, 90, 92, 93, 94, 96, 102, 105, 107, 114, 115, 118, 135, 146, 148, 174, 203, 204, 218, 225, 226, 254, 268, 299, 304, 305, 329, 334, 345, 361, 430, 458, 459, 460, 461, 462, 464, 465, 466, 471, 472, 510, 512, 551, 552, 560, 574, 592, 630, 634, 651, 652, 655, 665, 670, 674, 690, 698, 699, 730, 735, 760, 768, 779, 799, 813, 829, 877, 903, 904, 943, 945, 985, 993], "exist": [1, 29, 30, 31, 65, 105, 114, 125, 231, 254, 335, 368, 668, 690, 769], "belong": [1, 159, 254, 624, 690], "core": [1, 218, 254, 993], "cannot": [1, 91, 102, 103, 106, 107, 120, 129, 135, 198, 236, 254, 309, 422, 468, 487, 506, 518, 592, 653, 674, 690, 699, 739, 896, 920, 939, 985], "overrid": [1, 31, 90, 92, 93, 94, 95, 96, 102, 122, 123, 127, 129, 254, 422, 592, 690, 860, 985], "str": [1, 7, 9, 12, 14, 15, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 71, 74, 75, 90, 92, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 123, 125, 126, 127, 128, 130, 136, 139, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 155, 157, 158, 159, 160, 162, 164, 167, 169, 170, 171, 173, 174, 177, 178, 179, 180, 181, 182, 184, 186, 188, 190, 192, 193, 194, 195, 196, 197, 198, 201, 203, 204, 206, 207, 208, 209, 210, 213, 214, 215, 216, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 261, 262, 263, 268, 283, 284, 285, 290, 291, 292, 300, 303, 305, 331, 336, 357, 360, 361, 364, 367, 368, 378, 382, 384, 386, 395, 397, 404, 421, 422, 430, 432, 444, 446, 448, 454, 456, 458, 459, 460, 461, 462, 464, 465, 466, 472, 473, 480, 481, 517, 518, 520, 523, 535, 536, 537, 539, 540, 543, 545, 547, 548, 549, 550, 551, 552, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 567, 569, 570, 572, 573, 574, 575, 576, 577, 579, 580, 582, 583, 584, 592, 598, 606, 610, 611, 612, 613, 615, 616, 617, 620, 622, 623, 624, 625, 627, 629, 630, 638, 639, 643, 645, 646, 647, 650, 652, 653, 654, 655, 656, 657, 662, 663, 664, 665, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 695, 715, 716, 723, 736, 744, 761, 762, 770, 795, 798, 799, 802, 805, 806, 821, 860, 869, 870, 877, 882, 899, 900, 950, 952, 963, 964, 965, 985, 989, 992, 993], "dt": [1, 65, 74, 160, 254, 556, 600, 625, 690, 991], "attempt": [1, 217, 254], "do": [1, 31, 65, 72, 73, 100, 113, 131, 148, 174, 212, 222, 225, 254, 287, 329, 497, 503, 509, 575, 592, 610, 615, 630, 634, 643, 653, 654, 655, 690, 698, 718, 760, 930, 936, 942, 967, 976, 985], "so": [1, 56, 104, 113, 129, 157, 159, 160, 188, 254, 279, 290, 305, 314, 397, 497, 503, 509, 592, 624, 625, 690, 721, 930, 936, 942], "rais": [1, 14, 18, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 120, 121, 196, 254, 304, 309, 360, 430, 485, 487, 499, 510, 511, 512, 514, 566, 735, 739, 798, 918, 920, 932, 943, 944, 945, 947, 967, 976, 985], "an": [1, 6, 26, 29, 30, 31, 39, 66, 68, 69, 70, 72, 74, 76, 80, 81, 83, 90, 100, 102, 103, 104, 105, 106, 108, 111, 113, 115, 123, 125, 127, 130, 131, 135, 137, 138, 146, 149, 151, 153, 159, 160, 171, 172, 174, 184, 188, 194, 196, 212, 217, 225, 231, 236, 254, 263, 264, 268, 285, 287, 290, 304, 305, 309, 315, 318, 319, 320, 324, 325, 326, 327, 328, 329, 335, 360, 364, 371, 381, 384, 409, 420, 421, 431, 449, 457, 458, 459, 460, 461, 462, 464, 465, 466, 485, 487, 492, 510, 511, 512, 514, 523, 529, 537, 538, 541, 545, 553, 557, 562, 566, 568, 571, 574, 575, 578, 580, 581, 585, 592, 603, 608, 609, 610, 615, 617, 620, 624, 625, 630, 634, 643, 653, 668, 669, 674, 690, 699, 716, 718, 721, 735, 739, 744, 749, 750, 751, 752, 753, 756, 757, 758, 759, 760, 769, 798, 802, 809, 813, 819, 842, 885, 886, 887, 888, 889, 890, 892, 893, 894, 899, 900, 918, 920, 925, 943, 944, 945, 947, 967, 976, 985, 992], "attributeerror": 1, "howev": [1, 93, 146, 254, 813, 985], "can": [1, 13, 31, 55, 65, 74, 81, 93, 102, 103, 106, 107, 111, 113, 115, 117, 118, 123, 124, 125, 127, 129, 130, 132, 135, 136, 145, 153, 159, 160, 167, 169, 184, 188, 200, 207, 217, 221, 222, 225, 231, 236, 254, 268, 287, 305, 314, 325, 328, 329, 353, 354, 357, 360, 368, 381, 396, 397, 430, 436, 453, 458, 459, 460, 461, 462, 464, 465, 466, 470, 473, 475, 478, 481, 494, 497, 503, 509, 510, 512, 533, 541, 542, 545, 560, 562, 585, 591, 592, 606, 610, 615, 624, 625, 649, 657, 662, 668, 670, 674, 690, 699, 718, 736, 760, 791, 792, 795, 798, 806, 819, 833, 865, 881, 899, 900, 901, 905, 908, 911, 927, 930, 936, 942, 943, 945, 985, 992], "other": [1, 18, 31, 55, 74, 102, 103, 106, 113, 120, 121, 144, 148, 154, 173, 174, 180, 181, 196, 200, 226, 231, 252, 254, 261, 265, 267, 279, 283, 318, 319, 320, 331, 374, 388, 390, 391, 397, 401, 412, 419, 422, 426, 429, 435, 437, 441, 443, 481, 519, 527, 529, 536, 537, 538, 544, 546, 547, 553, 568, 571, 580, 581, 592, 603, 613, 629, 630, 638, 639, 649, 665, 668, 669, 690, 698, 714, 750, 751, 752, 764, 840, 898, 969, 977, 984, 985], "onli": [1, 18, 26, 31, 50, 52, 56, 65, 71, 73, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 125, 127, 132, 135, 144, 159, 160, 171, 174, 178, 197, 209, 214, 216, 227, 254, 262, 268, 279, 314, 317, 318, 319, 320, 357, 378, 387, 453, 531, 592, 610, 613, 624, 625, 626, 630, 633, 690, 747, 750, 751, 752, 795, 824, 842, 881, 962, 965, 985, 992, 993], "gener": [1, 104, 122, 123, 124, 125, 127, 130, 140, 188, 198, 215, 222, 254, 468, 474, 575, 592, 690, 896, 907, 963, 985, 993], "userwarn": 1, "pl": [1, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 99, 100, 102, 103, 104, 105, 106, 107, 113, 114, 118, 119, 120, 121, 122, 123, 124, 125, 127, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 578, 579, 580, 581, 582, 583, 584, 585, 592, 604, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 695, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 717, 718, 719, 722, 723, 725, 730, 731, 732, 734, 736, 743, 744, 746, 747, 748, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 816, 819, 820, 821, 822, 824, 827, 828, 829, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 854, 859, 860, 861, 862, 863, 864, 865, 866, 867, 873, 874, 875, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 903, 907, 908, 909, 910, 912, 913, 914, 915, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 947, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 985, 992, 993], "register_expr_namespac": [1, 66, 68, 69], "greet": 1, "def": [1, 66, 67, 68, 69, 123, 124, 125, 127, 187, 222, 254, 261, 446, 492, 536, 567, 592, 642, 690, 925, 993], "__init__": [1, 2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 122, 992], "self": [1, 51, 52, 53, 55, 66, 67, 68, 69, 72, 135, 136, 137, 138, 140, 141, 142, 144, 147, 148, 149, 150, 151, 158, 159, 160, 162, 164, 165, 166, 173, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 215, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 307, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 592, 606, 607, 608, 609, 610, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 690, 698, 699, 744, 753, 822, 830, 859, 860, 871, 874, 875, 880, 899, 900, 901, 913, 973, 977, 985], "_expr": [1, 67], "hello": [1, 18, 51, 54, 497, 503, 509, 537, 723, 930, 936, 942], "return": [1, 26, 28, 31, 32, 33, 34, 50, 54, 65, 66, 67, 68, 69, 70, 71, 72, 74, 82, 84, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 112, 113, 114, 124, 130, 131, 135, 136, 137, 140, 143, 144, 145, 146, 147, 149, 150, 153, 157, 158, 159, 160, 162, 164, 170, 171, 172, 173, 175, 176, 183, 184, 186, 187, 188, 196, 197, 198, 210, 211, 217, 218, 221, 222, 223, 227, 231, 233, 236, 239, 243, 248, 254, 264, 266, 270, 271, 272, 273, 274, 275, 278, 279, 281, 282, 284, 288, 290, 291, 292, 303, 304, 308, 310, 313, 321, 322, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 366, 368, 369, 370, 372, 380, 393, 397, 399, 400, 401, 402, 403, 405, 406, 407, 414, 418, 422, 431, 436, 446, 454, 455, 468, 469, 475, 476, 477, 484, 486, 488, 490, 491, 492, 494, 495, 496, 498, 499, 502, 504, 505, 506, 507, 516, 522, 523, 524, 525, 526, 528, 529, 531, 532, 533, 536, 537, 538, 539, 541, 542, 545, 554, 555, 556, 562, 564, 566, 567, 575, 578, 580, 582, 583, 585, 592, 606, 608, 610, 613, 614, 615, 617, 624, 625, 626, 632, 633, 634, 642, 643, 653, 654, 655, 660, 661, 662, 663, 668, 671, 677, 681, 686, 690, 695, 696, 697, 699, 706, 707, 709, 710, 712, 713, 715, 719, 721, 722, 723, 734, 735, 738, 740, 743, 749, 761, 762, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 803, 804, 806, 807, 808, 810, 813, 818, 826, 828, 829, 835, 837, 838, 840, 841, 843, 844, 845, 846, 850, 852, 855, 859, 860, 865, 877, 883, 884, 896, 897, 898, 900, 908, 917, 918, 919, 921, 923, 924, 925, 927, 928, 929, 931, 932, 935, 937, 938, 939, 940, 949, 956, 958, 970, 972, 973, 977, 985, 992, 993], "lit": [1, 100, 131, 397, 409, 551, 560, 575, 585, 592, 821, 985], "alia": [1, 12, 65, 67, 69, 159, 160, 176, 224, 231, 254, 261, 265, 268, 285, 287, 313, 318, 319, 320, 324, 325, 326, 327, 328, 330, 334, 335, 336, 339, 340, 341, 343, 345, 346, 347, 349, 351, 356, 357, 358, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 374, 384, 386, 388, 390, 391, 395, 397, 400, 401, 409, 412, 413, 414, 419, 421, 422, 433, 435, 437, 441, 443, 445, 447, 448, 451, 453, 469, 485, 486, 489, 491, 492, 495, 498, 504, 506, 507, 508, 517, 518, 519, 520, 527, 528, 529, 535, 536, 537, 538, 539, 543, 544, 546, 547, 551, 552, 553, 556, 557, 560, 561, 567, 568, 571, 574, 575, 580, 581, 585, 592, 624, 625, 627, 633, 664, 668, 690, 718, 768, 770, 775, 795, 798, 802, 804, 809, 855, 860, 924, 925, 939, 940, 985], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 18, 51, 54, 497, 503, 509, 723, 930, 936, 942], "select": [1, 29, 50, 51, 52, 65, 66, 67, 68, 70, 101, 102, 103, 104, 105, 107, 111, 113, 118, 124, 135, 170, 174, 184, 187, 196, 206, 219, 224, 227, 254, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 301, 302, 305, 306, 307, 313, 317, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 366, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 381, 385, 387, 389, 392, 394, 395, 396, 398, 399, 401, 402, 404, 408, 409, 410, 411, 413, 415, 416, 417, 418, 420, 421, 423, 424, 425, 434, 436, 438, 439, 440, 442, 443, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 490, 491, 492, 493, 494, 496, 497, 499, 502, 503, 505, 506, 507, 509, 510, 513, 515, 517, 518, 520, 521, 524, 525, 526, 528, 530, 531, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 551, 552, 553, 556, 558, 559, 560, 561, 562, 564, 568, 569, 570, 571, 572, 574, 575, 579, 580, 581, 582, 584, 592, 611, 627, 630, 642, 656, 664, 669, 671, 690, 718, 798, 899, 900, 912, 927, 943, 957, 985, 992], "shape": [1, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 50, 51, 52, 54, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 87, 90, 92, 93, 94, 95, 96, 97, 100, 113, 118, 125, 127, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 155, 156, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 170, 173, 174, 177, 178, 179, 180, 182, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 198, 200, 203, 204, 206, 207, 208, 209, 210, 211, 213, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 564, 567, 568, 569, 570, 571, 572, 574, 575, 578, 579, 580, 581, 582, 584, 585, 592, 606, 608, 610, 612, 613, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 649, 651, 652, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 698, 699, 700, 701, 702, 703, 704, 705, 708, 709, 710, 717, 718, 719, 722, 723, 725, 730, 731, 732, 734, 736, 743, 744, 746, 747, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 815, 816, 819, 820, 821, 822, 824, 827, 828, 829, 832, 833, 835, 837, 840, 841, 843, 844, 845, 846, 850, 852, 859, 860, 865, 873, 874, 875, 877, 879, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 899, 900, 903, 907, 908, 909, 910, 912, 913, 914, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 947, 954, 956, 957, 958, 959, 960, 963, 964, 965, 969, 970, 971, 972, 973, 974, 977, 985, 992], "3": [1, 10, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 50, 52, 53, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 100, 104, 106, 113, 118, 119, 120, 121, 124, 125, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 261, 262, 263, 264, 268, 278, 279, 280, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 307, 313, 315, 316, 317, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 344, 350, 352, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 435, 436, 437, 441, 442, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 478, 480, 481, 482, 485, 488, 489, 491, 492, 493, 495, 498, 500, 504, 505, 506, 507, 508, 511, 514, 517, 518, 519, 520, 522, 523, 524, 528, 531, 532, 533, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 557, 558, 559, 560, 561, 564, 566, 567, 568, 569, 570, 571, 574, 575, 578, 579, 580, 581, 582, 584, 585, 592, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 695, 698, 699, 700, 702, 703, 704, 706, 707, 708, 709, 710, 717, 718, 719, 722, 725, 730, 731, 732, 734, 736, 743, 744, 746, 747, 748, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 768, 769, 770, 773, 774, 775, 776, 778, 780, 781, 782, 784, 786, 787, 788, 790, 794, 796, 798, 799, 800, 802, 804, 805, 806, 808, 809, 813, 815, 816, 819, 820, 821, 822, 824, 827, 828, 829, 832, 833, 835, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 853, 854, 859, 860, 861, 862, 863, 864, 865, 866, 867, 873, 874, 875, 877, 878, 879, 882, 883, 884, 885, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 903, 907, 909, 910, 911, 912, 913, 915, 921, 922, 924, 925, 926, 928, 931, 933, 937, 941, 944, 947, 954, 955, 956, 957, 958, 959, 960, 962, 963, 966, 967, 968, 970, 971, 972, 973, 974, 975, 977, 985, 992, 993], "1": [1, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 100, 102, 103, 104, 105, 106, 107, 113, 114, 118, 119, 120, 121, 122, 125, 127, 130, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 313, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 584, 585, 592, 606, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 695, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 717, 718, 719, 721, 722, 725, 730, 731, 732, 734, 736, 743, 744, 746, 747, 748, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 816, 819, 820, 821, 822, 824, 827, 828, 829, 832, 833, 835, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 852, 854, 859, 861, 862, 863, 864, 865, 866, 867, 873, 874, 875, 877, 878, 879, 882, 883, 884, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 924, 926, 927, 933, 939, 940, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 985, 992, 993], "2": [1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 50, 52, 53, 55, 56, 65, 66, 67, 68, 69, 70, 73, 75, 90, 92, 93, 94, 95, 96, 97, 104, 113, 118, 119, 120, 121, 124, 125, 127, 130, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 175, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 265, 266, 267, 268, 269, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 313, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 330, 331, 335, 336, 340, 342, 343, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 359, 360, 361, 362, 363, 364, 367, 368, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 478, 479, 480, 481, 482, 484, 486, 489, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 503, 504, 506, 507, 508, 509, 510, 512, 513, 515, 517, 518, 519, 520, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567, 568, 569, 570, 571, 572, 574, 578, 579, 580, 581, 582, 584, 585, 592, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 629, 631, 632, 633, 634, 635, 636, 637, 638, 640, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 695, 698, 699, 701, 705, 706, 707, 708, 709, 710, 717, 718, 719, 722, 723, 725, 730, 731, 732, 734, 736, 743, 746, 747, 748, 749, 753, 754, 757, 758, 759, 760, 761, 762, 763, 764, 769, 771, 772, 776, 781, 782, 788, 790, 791, 792, 797, 798, 799, 800, 803, 806, 808, 810, 812, 813, 814, 815, 816, 819, 820, 821, 822, 824, 827, 828, 829, 832, 833, 835, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 854, 856, 859, 860, 861, 862, 863, 864, 865, 866, 867, 873, 874, 875, 877, 878, 879, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 903, 907, 909, 911, 912, 913, 914, 915, 917, 919, 924, 925, 926, 927, 930, 931, 932, 933, 934, 936, 939, 940, 942, 943, 945, 954, 955, 956, 957, 958, 959, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975, 977, 985, 992, 993], "column_0": [1, 135, 222, 254], "register_dataframe_namespac": [1, 67, 68, 69], "split": [1, 66, 172, 254, 506, 507, 939, 940], "splitfram": [1, 66], "df": [1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 50, 51, 66, 67, 70, 90, 91, 92, 93, 94, 95, 96, 97, 103, 113, 123, 125, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 301, 302, 305, 306, 307, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 564, 567, 568, 569, 570, 571, 572, 574, 578, 579, 580, 581, 582, 584, 585, 592, 625, 664, 665, 671, 674, 677, 686, 690, 718, 746, 798, 927, 934, 939, 940, 964, 985, 993], "_df": [1, 66], "by_alternate_row": 1, "list": [1, 2, 30, 31, 38, 50, 54, 65, 66, 68, 72, 90, 92, 93, 94, 96, 97, 99, 101, 102, 103, 104, 105, 107, 111, 113, 114, 123, 124, 125, 127, 130, 139, 142, 145, 146, 147, 151, 156, 158, 159, 164, 171, 183, 186, 196, 197, 200, 207, 213, 214, 222, 223, 224, 225, 231, 234, 235, 254, 262, 283, 286, 287, 288, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 380, 386, 394, 420, 431, 432, 444, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 472, 480, 481, 492, 505, 517, 518, 523, 527, 542, 545, 546, 553, 557, 565, 566, 580, 581, 592, 611, 612, 614, 616, 620, 623, 624, 638, 649, 657, 663, 664, 668, 669, 672, 673, 690, 711, 714, 717, 718, 719, 721, 722, 723, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 748, 761, 813, 818, 822, 825, 829, 830, 840, 877, 883, 885, 886, 887, 888, 889, 890, 892, 893, 894, 897, 925, 938, 957, 966, 969, 985, 993], "with_row_count": [1, 254, 422, 592, 690, 900, 985], "name": [1, 16, 20, 22, 29, 31, 33, 51, 52, 53, 54, 55, 66, 67, 68, 69, 73, 74, 79, 90, 92, 93, 94, 95, 96, 101, 102, 103, 105, 106, 107, 108, 111, 112, 113, 115, 116, 117, 121, 122, 123, 125, 126, 127, 128, 130, 135, 136, 139, 142, 143, 144, 147, 152, 155, 157, 158, 170, 171, 173, 174, 180, 186, 188, 192, 196, 197, 199, 200, 207, 213, 215, 217, 220, 221, 222, 223, 224, 225, 226, 231, 232, 233, 234, 254, 263, 268, 305, 361, 368, 378, 397, 409, 421, 430, 432, 444, 448, 481, 492, 517, 518, 520, 537, 538, 540, 542, 544, 545, 546, 547, 548, 550, 553, 558, 564, 565, 568, 571, 573, 575, 576, 577, 580, 581, 582, 592, 606, 611, 612, 613, 616, 623, 629, 630, 638, 646, 648, 649, 657, 662, 663, 664, 665, 668, 670, 671, 672, 690, 695, 736, 749, 761, 799, 806, 877, 882, 924, 925, 933, 950, 952, 963, 964, 968, 985, 992, 993], "n": [1, 12, 15, 23, 34, 38, 40, 52, 53, 66, 67, 68, 69, 74, 99, 100, 102, 103, 113, 131, 135, 137, 148, 159, 162, 171, 172, 176, 197, 198, 208, 210, 211, 214, 216, 228, 239, 248, 254, 286, 291, 303, 305, 313, 329, 330, 334, 335, 341, 366, 371, 381, 393, 414, 445, 446, 454, 468, 478, 483, 500, 506, 507, 512, 522, 524, 528, 529, 534, 536, 548, 562, 564, 575, 576, 577, 579, 582, 584, 592, 608, 610, 624, 626, 633, 658, 660, 661, 666, 677, 686, 690, 698, 717, 722, 734, 736, 743, 749, 760, 763, 768, 769, 775, 804, 809, 819, 828, 855, 873, 896, 911, 915, 933, 939, 940, 945, 956, 958, 965, 970, 975, 985, 992, 993], "filter": [1, 66, 105, 113, 114, 118, 144, 167, 168, 169, 236, 254, 489, 508, 535, 541, 560, 592, 613, 617, 627, 674, 690, 899, 985], "col": [1, 12, 28, 31, 65, 66, 67, 68, 70, 94, 96, 113, 123, 125, 135, 147, 151, 158, 159, 160, 168, 170, 184, 187, 196, 200, 207, 224, 231, 234, 254, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 301, 302, 305, 306, 313, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 381, 384, 385, 386, 387, 388, 390, 391, 395, 396, 397, 398, 400, 401, 403, 404, 405, 408, 409, 410, 411, 412, 415, 416, 417, 418, 419, 422, 423, 424, 425, 434, 435, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513, 515, 516, 517, 518, 519, 521, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 544, 546, 547, 551, 552, 553, 556, 559, 560, 561, 562, 563, 568, 571, 573, 574, 581, 585, 592, 616, 620, 623, 624, 625, 627, 642, 649, 657, 664, 668, 669, 672, 690, 718, 746, 795, 798, 883, 899, 900, 927, 943, 985, 993], "0": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 35, 50, 55, 65, 66, 67, 69, 70, 74, 100, 102, 103, 104, 106, 107, 111, 113, 115, 116, 117, 118, 119, 122, 123, 124, 125, 127, 130, 131, 135, 137, 138, 140, 141, 142, 145, 149, 150, 153, 154, 156, 157, 158, 159, 161, 165, 170, 171, 172, 173, 175, 177, 178, 179, 182, 183, 184, 185, 188, 189, 190, 194, 198, 199, 200, 204, 206, 207, 208, 209, 215, 216, 217, 218, 219, 222, 225, 227, 228, 231, 232, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 260, 262, 265, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 285, 287, 290, 296, 305, 315, 317, 319, 320, 321, 322, 324, 329, 332, 333, 342, 346, 347, 349, 350, 356, 362, 363, 374, 375, 376, 377, 379, 381, 382, 383, 387, 388, 390, 391, 392, 396, 399, 402, 403, 405, 406, 407, 409, 410, 412, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 434, 435, 437, 439, 440, 441, 442, 443, 445, 446, 447, 450, 451, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 473, 475, 476, 477, 478, 482, 483, 491, 492, 510, 512, 516, 519, 521, 525, 526, 527, 529, 534, 541, 542, 543, 544, 546, 548, 550, 551, 555, 557, 560, 569, 570, 573, 574, 575, 583, 584, 585, 592, 608, 609, 612, 614, 618, 619, 623, 624, 629, 632, 637, 641, 643, 644, 648, 649, 652, 653, 655, 657, 658, 666, 668, 669, 670, 672, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 690, 700, 701, 702, 703, 704, 705, 706, 708, 710, 718, 721, 736, 744, 747, 749, 754, 755, 760, 761, 762, 764, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 794, 800, 801, 812, 814, 815, 816, 820, 824, 827, 829, 837, 839, 841, 843, 844, 845, 846, 852, 853, 859, 862, 863, 873, 877, 878, 879, 885, 887, 888, 890, 891, 892, 894, 895, 896, 908, 909, 910, 914, 915, 917, 924, 925, 927, 943, 945, 949, 959, 960, 963, 968, 969, 973, 975, 976, 985, 993], "drop": [1, 93, 135, 143, 144, 223, 231, 254, 286, 330, 332, 333, 592, 613, 663, 668, 690, 717, 763, 765, 766, 985], "aaa": [1, 31, 254, 485, 517, 518, 918], "bbb": [1, 31, 254, 517, 518], "ccc": [1, 31, 254, 517, 518], "ddd": [1, 31, 254, 517, 518], "eee": [1, 31, 254], "fff": 1, "column": [1, 15, 16, 19, 20, 22, 31, 33, 56, 65, 66, 73, 74, 77, 79, 90, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 120, 125, 130, 131, 134, 135, 136, 142, 143, 144, 145, 147, 152, 155, 157, 158, 159, 160, 164, 165, 170, 171, 173, 174, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 199, 200, 201, 207, 208, 209, 213, 215, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 231, 232, 234, 254, 264, 266, 268, 278, 283, 288, 301, 304, 305, 335, 339, 342, 344, 345, 346, 348, 350, 352, 355, 358, 359, 362, 364, 367, 369, 370, 372, 378, 380, 384, 386, 397, 409, 422, 428, 430, 432, 444, 448, 452, 454, 455, 458, 459, 460, 461, 462, 464, 465, 466, 473, 480, 481, 490, 506, 507, 510, 511, 512, 514, 520, 535, 537, 538, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 560, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 592, 606, 612, 613, 614, 616, 623, 624, 625, 629, 630, 634, 635, 636, 637, 638, 640, 641, 642, 644, 646, 648, 649, 650, 657, 658, 659, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 690, 696, 697, 714, 719, 732, 735, 761, 771, 772, 773, 776, 778, 779, 783, 785, 788, 790, 793, 796, 797, 800, 802, 803, 805, 807, 808, 810, 818, 877, 883, 905, 923, 939, 940, 943, 944, 945, 947, 954, 963, 964, 985, 993], "txt": [1, 12, 113], "utf8": [1, 10, 18, 56, 75, 93, 97, 102, 103, 113, 122, 124, 127, 145, 146, 147, 153, 199, 217, 254, 292, 364, 367, 380, 422, 484, 488, 491, 492, 494, 495, 504, 505, 506, 507, 510, 511, 512, 514, 545, 547, 592, 614, 616, 648, 690, 723, 802, 805, 818, 851, 917, 921, 924, 925, 927, 928, 937, 938, 939, 940, 943, 944, 945, 947, 985], "register_lazyframe_namespac": [1, 66, 67, 69], "dtypeoper": [1, 68], "ldf": [1, 68, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686], "_ldf": [1, 68], "upcast_integer_typ": [1, 68], "with_column": [1, 12, 68, 130, 160, 187, 254, 261, 268, 279, 287, 315, 316, 318, 319, 320, 325, 328, 330, 360, 364, 367, 374, 388, 390, 391, 392, 396, 397, 400, 403, 405, 406, 407, 409, 412, 419, 421, 422, 435, 437, 441, 444, 445, 446, 447, 451, 485, 489, 492, 495, 498, 500, 501, 504, 506, 507, 508, 516, 519, 527, 529, 536, 539, 541, 544, 547, 553, 557, 567, 581, 585, 592, 625, 642, 690, 718, 746, 798], "tp": [1, 68], "cast": [1, 67, 68, 75, 90, 153, 159, 160, 187, 218, 231, 254, 267, 316, 327, 328, 334, 364, 367, 422, 443, 446, 453, 493, 494, 516, 521, 527, 547, 592, 624, 625, 642, 668, 690, 746, 758, 759, 768, 802, 805, 881, 926, 927, 955, 964, 969, 985], "int64": [1, 31, 33, 67, 68, 97, 102, 145, 153, 159, 160, 187, 199, 212, 218, 254, 327, 328, 340, 343, 347, 349, 351, 356, 363, 378, 446, 453, 493, 521, 527, 541, 545, 558, 566, 575, 580, 592, 614, 624, 625, 642, 648, 671, 690, 758, 759, 774, 777, 784, 786, 789, 794, 801, 881, 898, 955, 967, 968, 969, 985], "int8": [1, 68, 100, 131, 153, 254, 327, 328, 521, 575, 592, 758, 759, 763, 860, 884, 955, 973, 985], "int16": [1, 68, 327, 328, 521, 592, 758, 759, 860, 955, 965, 985], "int32": [1, 68, 90, 93, 97, 124, 125, 159, 160, 172, 254, 315, 345, 372, 527, 575, 592, 624, 625, 690, 779, 810, 859, 969, 985], "b": [1, 27, 28, 30, 32, 35, 52, 53, 55, 56, 68, 73, 75, 90, 92, 93, 94, 95, 96, 97, 106, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 164, 165, 167, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 200, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 261, 263, 267, 268, 280, 283, 287, 292, 294, 307, 315, 316, 323, 331, 332, 333, 378, 382, 383, 384, 386, 389, 392, 394, 396, 397, 399, 402, 403, 404, 405, 406, 407, 409, 413, 421, 436, 442, 444, 446, 448, 451, 456, 473, 479, 481, 490, 493, 500, 520, 531, 533, 535, 537, 538, 539, 540, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 557, 558, 559, 560, 561, 564, 567, 568, 569, 570, 571, 572, 574, 576, 577, 579, 580, 581, 582, 584, 592, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 626, 629, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 698, 718, 746, 762, 764, 812, 813, 821, 833, 840, 851, 882, 898, 923, 926, 933, 954, 968, 972, 985, 992], "4": [1, 15, 23, 27, 28, 30, 31, 32, 35, 50, 52, 53, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 113, 119, 120, 121, 127, 130, 135, 136, 137, 138, 141, 144, 147, 148, 149, 150, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 178, 180, 183, 184, 186, 187, 188, 189, 193, 197, 202, 207, 210, 211, 212, 213, 214, 215, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 265, 267, 268, 280, 285, 286, 287, 288, 291, 299, 300, 303, 307, 313, 315, 317, 318, 319, 320, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 335, 339, 343, 350, 351, 352, 358, 359, 361, 362, 363, 364, 367, 368, 369, 370, 372, 374, 379, 382, 383, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 406, 407, 409, 412, 413, 414, 416, 419, 421, 422, 435, 437, 441, 443, 444, 446, 447, 448, 450, 451, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 469, 471, 472, 475, 479, 480, 481, 482, 485, 495, 496, 498, 499, 500, 502, 504, 506, 507, 510, 517, 518, 519, 520, 522, 523, 524, 527, 528, 529, 536, 539, 540, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 557, 559, 560, 564, 566, 567, 568, 569, 570, 571, 572, 579, 580, 581, 582, 584, 585, 592, 606, 608, 609, 610, 613, 615, 616, 617, 618, 619, 621, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 642, 643, 644, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 698, 701, 708, 717, 718, 719, 722, 730, 731, 734, 743, 747, 748, 750, 760, 762, 764, 776, 777, 783, 785, 788, 789, 790, 791, 792, 793, 797, 799, 800, 801, 802, 805, 806, 807, 808, 820, 821, 828, 829, 832, 833, 835, 840, 843, 844, 845, 846, 850, 860, 866, 873, 874, 875, 877, 879, 883, 888, 890, 891, 892, 893, 894, 896, 898, 908, 912, 913, 918, 928, 929, 931, 932, 935, 937, 939, 940, 943, 954, 956, 957, 958, 965, 968, 969, 970, 977, 985, 993], "c": [1, 27, 28, 30, 32, 35, 52, 53, 55, 56, 66, 68, 73, 75, 93, 95, 97, 106, 113, 123, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 151, 152, 153, 154, 156, 157, 158, 159, 162, 164, 165, 172, 173, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 192, 194, 195, 196, 198, 199, 200, 203, 204, 206, 207, 208, 209, 210, 212, 216, 217, 218, 219, 221, 222, 225, 226, 228, 229, 231, 234, 237, 238, 239, 240, 241, 242, 244, 247, 248, 254, 261, 268, 283, 292, 294, 397, 409, 444, 446, 473, 506, 510, 531, 533, 537, 538, 540, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 559, 560, 561, 564, 567, 568, 569, 570, 571, 572, 579, 581, 582, 584, 592, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 620, 623, 624, 629, 632, 638, 641, 643, 646, 647, 648, 649, 653, 656, 657, 662, 665, 668, 669, 672, 675, 676, 677, 678, 679, 680, 682, 685, 686, 690, 762, 833, 851, 939, 943, 972, 985], "5": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 32, 35, 53, 55, 65, 66, 68, 69, 70, 73, 90, 93, 94, 95, 96, 97, 99, 103, 119, 125, 135, 137, 138, 141, 147, 148, 149, 150, 153, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 168, 170, 171, 174, 175, 176, 178, 180, 183, 184, 186, 188, 189, 190, 193, 197, 202, 207, 210, 211, 212, 213, 214, 217, 220, 225, 227, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 261, 262, 265, 285, 287, 288, 291, 296, 302, 303, 313, 315, 316, 317, 318, 319, 320, 329, 330, 331, 335, 336, 340, 360, 362, 363, 364, 367, 369, 377, 378, 381, 387, 388, 390, 391, 393, 394, 397, 400, 403, 405, 406, 407, 409, 412, 414, 435, 437, 443, 444, 445, 446, 448, 450, 451, 455, 456, 457, 458, 459, 461, 465, 467, 469, 475, 481, 486, 494, 495, 498, 499, 516, 519, 520, 522, 524, 528, 529, 539, 540, 543, 544, 546, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 564, 566, 567, 568, 569, 570, 571, 572, 574, 579, 581, 582, 584, 592, 608, 609, 610, 615, 616, 617, 618, 619, 621, 623, 624, 625, 626, 628, 630, 631, 632, 633, 636, 637, 638, 643, 651, 652, 653, 656, 657, 658, 659, 660, 661, 667, 668, 670, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 698, 701, 705, 708, 718, 719, 722, 725, 734, 743, 746, 748, 750, 756, 760, 761, 762, 763, 764, 769, 770, 771, 772, 773, 774, 798, 800, 801, 802, 803, 805, 807, 808, 816, 819, 828, 829, 832, 833, 859, 860, 866, 873, 874, 875, 877, 878, 879, 883, 885, 886, 887, 889, 890, 893, 896, 898, 908, 914, 919, 927, 928, 932, 956, 970, 973, 977, 985, 993], "6": [1, 27, 28, 30, 31, 32, 33, 34, 35, 53, 55, 66, 68, 73, 90, 93, 94, 95, 96, 135, 139, 142, 143, 144, 145, 147, 148, 151, 152, 154, 155, 156, 157, 159, 160, 162, 164, 165, 166, 168, 170, 171, 173, 177, 178, 179, 180, 182, 185, 188, 189, 190, 192, 193, 194, 196, 197, 198, 199, 200, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 224, 225, 226, 227, 228, 229, 231, 232, 239, 247, 248, 254, 261, 265, 268, 288, 307, 315, 327, 328, 331, 335, 357, 359, 362, 373, 382, 383, 389, 393, 394, 396, 414, 443, 449, 451, 452, 455, 458, 459, 460, 461, 462, 464, 465, 466, 469, 481, 486, 490, 495, 498, 499, 519, 522, 524, 536, 537, 539, 551, 552, 553, 557, 560, 567, 581, 592, 610, 611, 612, 613, 614, 615, 616, 617, 620, 621, 624, 625, 626, 628, 629, 631, 633, 634, 638, 641, 643, 646, 648, 649, 651, 652, 653, 656, 657, 660, 661, 664, 665, 667, 668, 670, 671, 677, 685, 686, 690, 698, 719, 748, 754, 758, 759, 764, 795, 808, 829, 866, 879, 883, 888, 890, 891, 892, 894, 898, 919, 923, 928, 932, 955, 985, 992, 993], "7": [1, 27, 28, 30, 31, 32, 33, 34, 35, 55, 66, 68, 73, 74, 119, 139, 140, 141, 142, 143, 145, 147, 151, 152, 154, 159, 160, 162, 164, 166, 173, 177, 178, 179, 182, 185, 188, 190, 192, 194, 196, 198, 199, 200, 203, 204, 206, 208, 209, 210, 211, 216, 217, 218, 219, 225, 226, 227, 228, 229, 254, 261, 265, 328, 335, 339, 358, 360, 361, 368, 370, 372, 379, 393, 396, 414, 422, 443, 451, 455, 459, 465, 481, 522, 524, 539, 551, 552, 560, 567, 581, 592, 611, 612, 614, 616, 620, 624, 625, 626, 628, 629, 633, 641, 644, 646, 648, 649, 660, 661, 665, 671, 690, 705, 769, 773, 779, 798, 799, 806, 808, 852, 860, 883, 893, 985, 993], "float32": [1, 28, 68, 153, 216, 217, 254, 566, 690, 836, 859, 985], "lazi": [1, 50, 51, 52, 53, 55, 68, 73, 74, 100, 113, 125, 131, 174, 187, 254, 268, 541, 562, 575, 592, 603, 629, 630, 669, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 690, 992, 993], "i16": [1, 68, 473, 592, 860, 965, 985, 993], "i32": [1, 68, 90, 93, 97, 124, 125, 200, 254, 315, 345, 372, 473, 499, 585, 592, 649, 690, 779, 810, 859, 932, 985, 993], "f32": [1, 68, 144, 216, 254, 287, 451, 473, 557, 592, 613, 690, 718, 859, 879, 985], "i64": [1, 15, 19, 50, 52, 66, 67, 68, 69, 73, 90, 92, 93, 94, 95, 96, 97, 113, 135, 136, 137, 138, 139, 142, 144, 145, 147, 148, 150, 151, 155, 156, 157, 158, 159, 160, 162, 164, 165, 166, 167, 169, 173, 174, 177, 180, 182, 186, 187, 188, 189, 192, 193, 194, 195, 198, 200, 203, 204, 206, 207, 209, 210, 211, 213, 219, 221, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 244, 247, 248, 254, 261, 263, 267, 268, 286, 287, 288, 289, 290, 291, 293, 295, 297, 298, 299, 300, 301, 302, 303, 306, 307, 313, 316, 318, 319, 320, 325, 326, 327, 328, 330, 331, 340, 341, 343, 347, 349, 351, 356, 363, 366, 378, 381, 383, 384, 385, 386, 388, 389, 393, 394, 395, 396, 397, 400, 403, 405, 406, 407, 409, 411, 414, 418, 420, 421, 435, 436, 437, 444, 445, 446, 447, 448, 449, 451, 452, 453, 455, 456, 468, 470, 471, 473, 474, 475, 479, 480, 481, 500, 501, 517, 518, 519, 520, 521, 522, 523, 524, 528, 529, 530, 532, 535, 537, 539, 544, 545, 547, 551, 552, 553, 556, 557, 558, 559, 560, 564, 566, 567, 568, 571, 574, 578, 581, 582, 585, 592, 606, 608, 610, 612, 613, 616, 617, 619, 620, 621, 623, 624, 625, 626, 628, 629, 630, 631, 633, 634, 635, 638, 640, 642, 643, 646, 647, 649, 651, 652, 656, 657, 659, 660, 661, 662, 663, 664, 665, 668, 670, 672, 673, 674, 676, 677, 678, 679, 682, 685, 686, 690, 698, 699, 717, 718, 719, 722, 730, 731, 732, 734, 736, 743, 746, 750, 753, 756, 757, 758, 759, 762, 774, 775, 777, 784, 786, 789, 794, 801, 804, 819, 821, 822, 828, 832, 840, 865, 882, 883, 886, 889, 893, 896, 899, 900, 903, 907, 908, 912, 913, 954, 956, 957, 958, 964, 970, 971, 974, 977, 985, 992, 993], "register_series_namespac": [1, 66, 67, 68], "math": [1, 69, 754, 909, 959, 985], "mathshortcut": [1, 69], "": [1, 28, 31, 50, 53, 69, 90, 97, 102, 103, 114, 127, 136, 142, 144, 146, 147, 158, 159, 165, 173, 174, 186, 188, 193, 194, 200, 207, 211, 215, 221, 223, 224, 225, 254, 291, 292, 299, 300, 303, 341, 364, 367, 378, 410, 431, 436, 439, 440, 444, 445, 453, 457, 481, 485, 491, 492, 495, 496, 498, 500, 502, 504, 505, 507, 510, 511, 512, 514, 516, 517, 518, 537, 538, 542, 545, 548, 553, 558, 561, 562, 568, 571, 580, 581, 592, 606, 612, 613, 616, 623, 624, 630, 649, 657, 662, 663, 664, 674, 690, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 717, 719, 722, 723, 725, 730, 731, 732, 734, 743, 744, 747, 748, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 763, 764, 769, 775, 791, 792, 799, 802, 805, 806, 813, 815, 816, 819, 820, 821, 822, 824, 827, 828, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 873, 874, 875, 878, 879, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 903, 907, 908, 909, 910, 912, 913, 915, 918, 919, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 935, 936, 937, 940, 941, 942, 943, 944, 945, 947, 949, 952, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 985], "_": [1, 65, 69, 188, 215, 254, 492, 506, 925, 939, 963, 985], "squar": [1, 69, 236, 410, 482, 592, 674, 853, 914, 985], "cube": [1, 69, 447, 592], "s2": [1, 121, 153, 254, 698, 736, 748, 764, 840, 852, 866, 898, 968, 977, 985], "renam": [1, 93, 102, 103, 200, 231, 234, 254, 263, 421, 433, 518, 578, 580, 592, 649, 668, 672, 690, 952, 964, 985], "n2": [1, 305], "in_plac": [1, 164, 205, 229, 254, 880, 882, 906, 913, 985], "true": [1, 6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 50, 52, 54, 70, 72, 73, 74, 75, 90, 91, 95, 97, 99, 100, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 130, 131, 132, 134, 136, 137, 138, 141, 150, 153, 154, 156, 157, 158, 159, 165, 167, 168, 169, 171, 174, 175, 178, 183, 184, 186, 188, 189, 196, 197, 198, 200, 207, 213, 217, 218, 221, 222, 223, 224, 225, 227, 231, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 262, 264, 265, 266, 267, 268, 279, 284, 301, 304, 305, 309, 315, 324, 325, 326, 327, 328, 334, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 390, 391, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 419, 441, 443, 453, 463, 468, 473, 478, 480, 481, 485, 487, 489, 493, 494, 499, 505, 506, 508, 510, 511, 512, 514, 517, 518, 523, 530, 533, 536, 537, 538, 539, 541, 542, 548, 549, 560, 575, 580, 585, 592, 606, 608, 609, 610, 615, 617, 619, 623, 624, 629, 630, 632, 634, 638, 643, 649, 653, 654, 655, 657, 662, 663, 664, 668, 673, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 690, 696, 697, 698, 699, 709, 732, 735, 739, 744, 748, 749, 768, 770, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 806, 807, 808, 809, 810, 812, 814, 815, 816, 822, 826, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 853, 866, 874, 875, 881, 891, 898, 911, 913, 918, 920, 922, 926, 927, 932, 938, 939, 941, 943, 944, 945, 947, 967, 968, 976, 977, 985, 992, 993], "s3": [1, 30, 105, 114, 118, 254, 736, 985], "n3": 1, "8": [1, 27, 28, 30, 32, 33, 34, 35, 46, 50, 55, 62, 64, 65, 66, 68, 69, 73, 119, 123, 125, 135, 139, 140, 141, 142, 143, 144, 145, 147, 151, 152, 154, 157, 162, 164, 173, 177, 178, 179, 182, 190, 192, 194, 196, 198, 199, 200, 203, 204, 206, 208, 209, 210, 211, 216, 217, 218, 219, 225, 226, 228, 229, 231, 254, 265, 267, 280, 286, 287, 323, 325, 328, 329, 332, 333, 335, 396, 413, 437, 443, 447, 448, 455, 456, 459, 460, 462, 464, 466, 473, 479, 481, 496, 502, 510, 520, 524, 536, 540, 543, 548, 549, 550, 552, 553, 557, 559, 564, 567, 568, 569, 570, 571, 572, 579, 581, 582, 584, 592, 611, 612, 613, 614, 616, 620, 626, 629, 633, 634, 643, 646, 648, 649, 660, 661, 665, 668, 671, 690, 717, 718, 760, 779, 829, 852, 873, 877, 883, 885, 888, 890, 891, 892, 894, 929, 935, 943, 985, 993], "9": [1, 27, 28, 30, 32, 35, 50, 55, 65, 73, 135, 140, 141, 153, 160, 162, 166, 200, 210, 225, 226, 229, 231, 247, 254, 261, 265, 267, 280, 286, 298, 301, 323, 325, 328, 332, 333, 335, 339, 358, 369, 370, 396, 401, 409, 413, 443, 455, 457, 459, 465, 475, 479, 492, 524, 539, 546, 551, 552, 592, 625, 626, 628, 633, 649, 660, 665, 668, 685, 690, 717, 732, 762, 773, 783, 785, 793, 799, 800, 806, 807, 840, 852, 883, 885, 893, 895, 908, 925, 985], "27": [1, 69, 247, 328, 345, 359, 372, 592, 685, 985, 993], "16": [1, 31, 43, 59, 67, 159, 160, 231, 254, 325, 328, 396, 437, 447, 459, 499, 539, 551, 556, 557, 560, 592, 624, 625, 653, 668, 690, 799, 806, 873, 909, 932, 959, 985], "64": [1, 42, 45, 61, 67, 69, 437, 447, 592, 655, 690, 873, 985], "25": [1, 31, 69, 74, 97, 125, 130, 141, 159, 160, 174, 227, 231, 254, 330, 345, 361, 368, 372, 529, 562, 592, 624, 625, 630, 636, 666, 668, 690, 762, 763, 799, 806, 812, 829, 873, 877, 985], "125": [1, 31, 69, 254, 261, 592, 873, 985], "arg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 187, 218, 254, 446, 542, 561, 592, 642, 690, 699, 967, 968, 985], "ani": [2, 3, 4, 5, 8, 28, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 71, 90, 91, 92, 93, 94, 95, 96, 102, 103, 105, 106, 107, 111, 113, 114, 115, 117, 122, 124, 125, 127, 132, 135, 140, 144, 148, 150, 151, 153, 170, 171, 172, 186, 187, 196, 197, 213, 214, 217, 218, 223, 225, 254, 261, 265, 268, 283, 287, 315, 362, 374, 383, 388, 390, 391, 401, 412, 419, 420, 422, 433, 435, 437, 441, 443, 446, 455, 457, 469, 472, 499, 510, 511, 512, 514, 519, 523, 529, 536, 537, 539, 548, 559, 566, 585, 592, 613, 619, 642, 663, 690, 698, 699, 714, 718, 764, 800, 821, 840, 852, 860, 883, 885, 897, 900, 932, 943, 944, 945, 947, 957, 966, 967, 968, 985, 992, 993], "kwarg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 140, 187, 218, 254, 446, 592, 642, 690, 968, 985, 992], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 592, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 985, 992], "width": [2, 24, 31, 102, 103, 254, 496, 502, 516, 690, 929, 935, 949], "int": [2, 12, 13, 15, 23, 24, 28, 31, 35, 39, 52, 55, 67, 93, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 123, 124, 125, 126, 127, 128, 129, 131, 135, 136, 137, 146, 149, 150, 152, 161, 162, 163, 165, 170, 171, 172, 174, 176, 177, 178, 182, 183, 184, 194, 196, 198, 202, 203, 204, 206, 208, 209, 210, 211, 216, 219, 221, 225, 228, 230, 232, 239, 248, 254, 261, 284, 285, 286, 290, 291, 299, 300, 303, 304, 305, 307, 313, 318, 319, 320, 329, 330, 375, 376, 377, 381, 382, 383, 389, 392, 393, 414, 443, 445, 446, 447, 451, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 479, 483, 491, 496, 499, 500, 502, 504, 506, 507, 516, 522, 523, 524, 528, 534, 536, 541, 548, 549, 554, 555, 556, 562, 564, 570, 572, 575, 576, 577, 579, 580, 581, 582, 583, 584, 592, 606, 608, 617, 618, 619, 626, 630, 633, 643, 651, 652, 655, 656, 658, 660, 661, 662, 666, 667, 670, 677, 686, 690, 706, 707, 715, 716, 717, 721, 722, 730, 731, 734, 735, 736, 743, 744, 748, 749, 750, 751, 752, 760, 763, 813, 814, 815, 816, 819, 820, 821, 827, 828, 829, 852, 854, 855, 862, 866, 867, 869, 870, 871, 872, 873, 876, 879, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 903, 904, 907, 912, 915, 924, 929, 932, 933, 935, 937, 939, 940, 949, 955, 956, 957, 958, 965, 970, 975, 985, 992, 993], "inner": [2, 47, 56, 75, 124, 173, 226, 254, 292, 331, 527, 592, 629, 665, 671, 690, 723, 764, 969, 985], "polarsdatatyp": [2, 47, 100, 102, 103, 108, 112, 113, 122, 123, 124, 125, 127, 131, 135, 145, 254, 268, 315, 378, 420, 422, 493, 539, 541, 545, 558, 566, 567, 575, 592, 614, 690, 699, 744, 860, 926, 985], "pythondatatyp": [2, 47], "null": [2, 28, 30, 52, 65, 73, 93, 102, 103, 113, 118, 134, 136, 137, 141, 144, 150, 153, 154, 166, 173, 178, 179, 185, 188, 190, 203, 204, 207, 208, 209, 213, 218, 221, 224, 226, 228, 231, 237, 254, 263, 267, 268, 278, 286, 289, 290, 293, 299, 304, 305, 307, 309, 318, 319, 320, 323, 325, 328, 330, 332, 333, 340, 343, 347, 349, 351, 356, 363, 375, 376, 377, 378, 381, 382, 383, 384, 389, 396, 403, 404, 405, 406, 407, 413, 422, 442, 445, 452, 457, 458, 459, 460, 461, 462, 464, 465, 466, 471, 472, 473, 475, 480, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 498, 499, 502, 504, 506, 507, 508, 516, 517, 518, 527, 535, 537, 544, 546, 547, 549, 558, 566, 576, 577, 580, 585, 592, 606, 608, 613, 619, 628, 629, 641, 651, 652, 657, 662, 664, 665, 668, 669, 671, 675, 690, 699, 708, 717, 730, 735, 736, 739, 749, 750, 763, 766, 774, 777, 784, 786, 789, 794, 801, 814, 815, 816, 819, 821, 826, 845, 846, 872, 873, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 898, 903, 904, 908, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 929, 931, 932, 935, 937, 939, 940, 941, 965, 967, 968, 969, 976, 985, 992, 993], "nest": [2, 47, 56, 97, 146, 254, 603, 813, 985, 992, 993], "paramet": [2, 7, 11, 12, 13, 14, 15, 18, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 47, 50, 51, 52, 53, 55, 57, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 134, 135, 136, 137, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 164, 165, 170, 171, 172, 173, 174, 176, 178, 180, 181, 183, 184, 186, 187, 188, 190, 192, 193, 194, 196, 197, 198, 200, 201, 203, 204, 206, 207, 208, 209, 210, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 236, 239, 246, 248, 254, 261, 263, 265, 267, 268, 278, 283, 284, 285, 286, 287, 290, 291, 292, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 318, 319, 320, 324, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 341, 357, 360, 361, 362, 364, 366, 367, 368, 371, 373, 374, 375, 376, 377, 378, 381, 383, 384, 388, 389, 390, 391, 392, 393, 396, 397, 401, 410, 412, 414, 415, 419, 420, 421, 422, 435, 437, 441, 443, 444, 445, 446, 447, 448, 450, 451, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 519, 520, 522, 523, 528, 529, 530, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 560, 561, 562, 564, 565, 566, 567, 568, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 592, 606, 608, 610, 612, 613, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 629, 630, 633, 634, 638, 639, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 674, 677, 684, 686, 690, 695, 698, 699, 708, 714, 715, 716, 717, 718, 721, 722, 723, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 749, 750, 751, 752, 756, 757, 758, 759, 760, 761, 762, 763, 764, 768, 769, 770, 775, 795, 798, 799, 800, 802, 804, 805, 806, 809, 812, 813, 814, 815, 816, 819, 820, 821, 822, 827, 828, 829, 832, 833, 842, 848, 849, 853, 855, 860, 873, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 907, 911, 912, 913, 915, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 949, 950, 952, 956, 957, 963, 964, 965, 966, 967, 968, 970, 971, 974, 975, 976, 977, 985, 992], "The": [2, 18, 29, 31, 35, 47, 50, 54, 57, 65, 71, 90, 92, 93, 94, 96, 99, 102, 104, 111, 113, 129, 135, 143, 145, 157, 158, 159, 160, 161, 166, 171, 174, 181, 186, 196, 197, 200, 224, 227, 231, 234, 236, 254, 304, 307, 308, 309, 310, 339, 352, 357, 358, 361, 364, 368, 369, 378, 381, 389, 392, 420, 444, 451, 454, 457, 458, 459, 460, 461, 462, 464, 465, 466, 475, 478, 484, 487, 488, 493, 495, 496, 497, 502, 503, 509, 510, 516, 545, 558, 562, 576, 577, 578, 580, 585, 586, 588, 592, 593, 594, 598, 599, 600, 624, 625, 626, 628, 630, 633, 634, 639, 643, 649, 655, 664, 668, 672, 674, 690, 699, 735, 738, 739, 740, 749, 773, 790, 795, 796, 799, 802, 806, 807, 819, 827, 832, 879, 885, 886, 887, 888, 889, 890, 892, 893, 894, 908, 911, 917, 920, 921, 926, 928, 929, 930, 935, 936, 942, 943, 949, 979, 981, 985, 986, 989, 990, 991, 993], "datatyp": [2, 28, 33, 47, 63, 90, 92, 93, 94, 96, 98, 106, 108, 112, 127, 145, 147, 153, 199, 254, 288, 315, 378, 473, 490, 527, 545, 558, 566, 592, 603, 616, 648, 671, 690, 699, 719, 744, 762, 842, 847, 849, 851, 905, 923, 969, 985], "valu": [2, 8, 11, 12, 15, 26, 28, 31, 33, 47, 48, 50, 54, 56, 63, 65, 73, 75, 93, 95, 102, 103, 104, 113, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 134, 135, 136, 141, 144, 148, 149, 150, 154, 157, 159, 160, 161, 162, 166, 170, 171, 176, 177, 178, 179, 180, 182, 184, 186, 188, 189, 190, 192, 196, 197, 198, 203, 204, 207, 208, 209, 210, 213, 214, 218, 221, 225, 226, 227, 228, 237, 238, 240, 241, 242, 244, 245, 254, 260, 261, 262, 264, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 285, 286, 289, 290, 291, 293, 295, 296, 297, 299, 302, 303, 306, 307, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 328, 329, 330, 332, 333, 335, 339, 352, 358, 369, 374, 375, 376, 377, 379, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 402, 403, 405, 406, 407, 408, 411, 412, 413, 416, 418, 419, 420, 422, 423, 424, 425, 434, 435, 436, 437, 438, 439, 440, 441, 442, 445, 446, 447, 450, 451, 454, 457, 458, 459, 460, 461, 462, 464, 465, 466, 468, 469, 470, 471, 472, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 500, 501, 504, 506, 507, 508, 516, 519, 521, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 536, 538, 540, 544, 547, 549, 551, 552, 553, 559, 560, 565, 566, 568, 569, 570, 571, 572, 574, 575, 576, 577, 581, 585, 592, 606, 613, 618, 619, 624, 625, 627, 628, 635, 636, 637, 638, 640, 641, 644, 646, 651, 652, 657, 658, 659, 662, 665, 666, 671, 675, 676, 678, 679, 680, 682, 683, 690, 694, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 712, 713, 716, 717, 720, 721, 722, 724, 726, 727, 728, 730, 734, 737, 739, 740, 741, 742, 746, 747, 750, 751, 752, 754, 755, 760, 761, 762, 763, 765, 766, 769, 773, 790, 796, 807, 813, 814, 815, 816, 819, 820, 821, 824, 826, 827, 828, 829, 830, 832, 833, 835, 837, 838, 840, 841, 843, 844, 845, 846, 850, 855, 860, 861, 862, 864, 865, 867, 869, 870, 871, 872, 873, 876, 877, 878, 879, 885, 886, 887, 888, 889, 890, 892, 893, 894, 896, 897, 898, 899, 900, 903, 904, 908, 909, 910, 911, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 928, 931, 933, 934, 937, 939, 940, 941, 949, 955, 956, 957, 958, 959, 960, 968, 969, 972, 974, 976, 977, 985, 993], "within": [2, 47, 120, 121, 159, 160, 174, 227, 254, 451, 481, 592, 624, 625, 630, 690, 992], "fix": [2, 106, 123, 125, 371, 458, 459, 460, 461, 462, 464, 465, 466, 592, 809], "size": [2, 13, 35, 102, 103, 123, 124, 125, 127, 129, 146, 159, 225, 254, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 541, 576, 577, 592, 624, 655, 690, 813, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 985, 993], "length": [2, 12, 73, 100, 113, 123, 131, 159, 160, 206, 254, 300, 305, 329, 361, 368, 431, 457, 458, 459, 460, 461, 462, 464, 465, 466, 479, 496, 498, 502, 504, 516, 541, 575, 576, 577, 592, 624, 625, 643, 656, 690, 731, 736, 748, 760, 761, 769, 799, 806, 854, 871, 877, 885, 886, 887, 888, 889, 890, 892, 893, 894, 912, 929, 931, 935, 937, 949, 985], "method": [2, 3, 4, 5, 8, 27, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 73, 91, 102, 103, 106, 122, 132, 144, 158, 166, 171, 184, 190, 196, 197, 223, 231, 246, 254, 261, 264, 265, 364, 367, 374, 381, 388, 390, 391, 396, 412, 419, 435, 437, 441, 443, 447, 450, 451, 458, 459, 460, 461, 462, 464, 465, 466, 519, 529, 531, 536, 548, 573, 575, 586, 588, 592, 593, 594, 597, 598, 599, 600, 603, 613, 628, 644, 663, 668, 684, 690, 699, 802, 805, 819, 832, 878, 879, 890, 969, 979, 981, 985, 986, 989, 990, 991], "attribut": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 122, 254, 586, 588, 593, 594, 598, 599, 600, 690, 979, 981, 986, 989, 990, 991], "A": [5, 28, 31, 50, 53, 72, 74, 97, 102, 103, 104, 111, 113, 129, 130, 153, 159, 174, 188, 197, 213, 225, 226, 227, 231, 254, 260, 305, 335, 340, 343, 347, 349, 351, 356, 363, 374, 381, 390, 391, 399, 402, 403, 405, 412, 419, 420, 421, 431, 441, 448, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 485, 486, 491, 492, 494, 500, 501, 516, 520, 546, 557, 561, 592, 624, 630, 646, 665, 668, 690, 769, 774, 777, 784, 786, 789, 794, 801, 819, 885, 886, 887, 889, 892, 893, 894, 918, 919, 924, 925, 927, 933, 934, 949, 985, 992], "encod": [5, 64, 102, 103, 113, 309, 487, 739, 920], "set": [5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 23, 24, 26, 28, 30, 31, 32, 33, 34, 65, 66, 70, 74, 91, 93, 96, 100, 102, 103, 106, 107, 111, 113, 115, 116, 117, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 139, 144, 158, 161, 171, 174, 180, 198, 200, 206, 215, 222, 223, 225, 231, 254, 268, 300, 304, 305, 371, 392, 401, 422, 446, 457, 458, 459, 460, 461, 462, 464, 465, 466, 468, 474, 478, 479, 497, 503, 504, 509, 510, 511, 512, 514, 541, 575, 576, 577, 580, 585, 592, 611, 613, 615, 623, 629, 630, 634, 638, 649, 654, 655, 656, 663, 668, 671, 674, 690, 698, 699, 731, 735, 736, 809, 827, 840, 860, 885, 886, 887, 888, 889, 890, 892, 893, 894, 896, 900, 907, 911, 912, 930, 936, 937, 942, 943, 944, 945, 947, 967, 985, 993], "string": [5, 7, 9, 12, 13, 14, 18, 28, 31, 33, 34, 38, 50, 56, 64, 74, 75, 97, 102, 103, 113, 122, 123, 124, 127, 130, 136, 153, 157, 158, 159, 160, 174, 200, 207, 216, 221, 225, 227, 231, 234, 254, 261, 292, 311, 316, 357, 361, 364, 367, 368, 380, 386, 397, 422, 444, 446, 458, 459, 460, 461, 462, 464, 465, 466, 481, 484, 485, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 516, 537, 538, 542, 544, 546, 547, 553, 561, 568, 571, 580, 581, 592, 606, 615, 622, 623, 624, 625, 630, 649, 657, 662, 668, 671, 672, 690, 723, 741, 746, 795, 799, 802, 805, 806, 818, 833, 916, 917, 918, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 948, 949, 965, 985, 993], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 622, 645, 690], "activ": [6, 10, 16, 17, 19, 20, 21, 22, 25, 287, 492, 718, 925], "bool": [6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 35, 65, 70, 72, 73, 75, 90, 91, 95, 97, 100, 102, 103, 107, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 134, 136, 137, 138, 150, 151, 153, 154, 156, 157, 158, 159, 164, 165, 167, 168, 169, 174, 186, 188, 198, 201, 205, 207, 213, 217, 218, 221, 222, 223, 224, 227, 229, 231, 238, 240, 241, 244, 254, 264, 265, 266, 267, 268, 278, 284, 285, 287, 301, 304, 306, 309, 315, 324, 325, 326, 327, 328, 329, 344, 360, 362, 373, 374, 375, 376, 377, 390, 391, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 419, 420, 426, 427, 428, 429, 441, 443, 451, 453, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 472, 473, 478, 480, 481, 485, 487, 489, 499, 500, 501, 505, 506, 508, 510, 511, 512, 514, 518, 530, 533, 536, 537, 538, 539, 541, 542, 548, 551, 566, 575, 580, 592, 606, 608, 610, 615, 617, 619, 620, 623, 624, 629, 630, 634, 638, 643, 650, 653, 654, 655, 657, 662, 663, 664, 668, 676, 678, 679, 682, 690, 696, 697, 698, 699, 708, 715, 716, 718, 732, 735, 737, 739, 744, 749, 756, 757, 758, 759, 760, 761, 778, 798, 800, 812, 814, 815, 816, 822, 826, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 874, 875, 877, 879, 880, 881, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 898, 900, 901, 906, 911, 913, 918, 920, 922, 932, 933, 934, 938, 939, 941, 943, 944, 945, 947, 966, 967, 968, 971, 974, 976, 985, 992], "decim": [6, 28, 31, 254, 467, 592, 895, 985], "temporari": 6, "remov": [6, 8, 142, 226, 254, 268, 378, 421, 497, 503, 509, 510, 512, 558, 592, 612, 665, 690, 930, 936, 942, 943, 945], "later": 6, "onc": [6, 53, 102, 103, 106, 129, 134, 135, 198, 234, 254, 268, 314, 468, 592, 607, 672, 690, 699, 896, 985], "stabil": 6, "happen": 6, "being": [6, 102, 103, 113, 118, 225, 226, 254, 268, 329, 361, 458, 459, 460, 461, 462, 464, 465, 466, 557, 592, 665, 690, 760, 799, 829, 877, 985, 993], "consid": [6, 102, 103, 113, 118, 135, 144, 154, 180, 223, 225, 226, 254, 268, 318, 319, 320, 329, 361, 458, 459, 460, 461, 462, 464, 465, 466, 551, 560, 592, 613, 626, 633, 638, 663, 665, 690, 699, 750, 751, 752, 760, 799, 829, 842, 877, 898, 899, 900, 985], "break": [6, 118, 225, 226, 254, 268, 329, 361, 458, 459, 460, 461, 462, 464, 465, 466, 592, 665, 690, 760, 799, 829, 877, 985], "chang": [6, 26, 65, 102, 103, 118, 225, 226, 227, 254, 268, 329, 330, 361, 445, 458, 459, 460, 461, 462, 464, 465, 466, 592, 665, 690, 760, 799, 829, 873, 877, 906, 985], "current": [6, 9, 26, 52, 91, 97, 104, 134, 137, 138, 254, 305, 361, 445, 592, 603, 608, 609, 690, 749, 753, 799, 873, 985, 992], "alpha": [6, 72, 268, 375, 376, 377, 592, 610, 615, 617, 643, 653, 690, 814, 815, 816, 985], "state": [6, 8, 72, 83, 551, 603, 610, 615, 617, 643, 653, 690], "cfg": [7, 8, 9, 15, 132], "previous": 7, "save": [7, 360, 603, 798], "share": [7, 56, 146, 254, 813, 985], "option": [7, 8, 9, 26, 30, 31, 39, 65, 74, 102, 105, 106, 107, 111, 114, 115, 117, 119, 122, 123, 124, 125, 126, 127, 128, 170, 174, 180, 213, 217, 222, 254, 410, 457, 458, 459, 460, 461, 462, 464, 465, 466, 478, 504, 566, 580, 585, 592, 603, 629, 630, 638, 690, 849, 853, 885, 886, 887, 888, 889, 890, 892, 893, 894, 911, 937, 964, 985], "json": [7, 9, 33, 34, 109, 110, 116, 254, 493, 494, 603, 622, 645, 671, 690, 926, 927], "produc": [7, 124, 125, 127, 285, 430, 567, 634, 690, 716], "reset": [8, 132], "default": [8, 13, 26, 27, 28, 30, 31, 32, 33, 34, 35, 65, 70, 73, 74, 90, 92, 93, 94, 95, 96, 97, 100, 102, 103, 106, 111, 113, 122, 123, 124, 125, 126, 127, 130, 131, 144, 146, 158, 160, 161, 171, 174, 180, 186, 188, 196, 197, 198, 208, 215, 223, 225, 228, 232, 254, 300, 304, 305, 316, 360, 373, 375, 376, 377, 392, 415, 422, 439, 440, 445, 451, 468, 474, 483, 491, 497, 499, 503, 504, 509, 510, 511, 512, 514, 534, 541, 548, 562, 566, 575, 579, 580, 584, 592, 613, 615, 623, 625, 630, 638, 655, 658, 663, 666, 671, 690, 731, 735, 736, 746, 798, 812, 813, 814, 815, 816, 827, 860, 869, 870, 873, 879, 896, 907, 915, 918, 924, 930, 932, 936, 937, 942, 943, 944, 945, 947, 975, 985, 993], "note": [8, 18, 30, 31, 39, 50, 54, 55, 65, 74, 90, 91, 92, 94, 96, 97, 100, 102, 104, 105, 111, 113, 114, 123, 125, 127, 129, 131, 132, 134, 135, 140, 149, 159, 160, 170, 171, 173, 174, 184, 187, 196, 197, 214, 217, 222, 226, 227, 231, 254, 268, 287, 304, 327, 328, 332, 333, 353, 354, 357, 361, 368, 397, 403, 405, 458, 459, 460, 461, 462, 464, 465, 466, 478, 485, 491, 492, 495, 497, 498, 500, 503, 509, 510, 521, 529, 551, 560, 574, 575, 585, 592, 610, 617, 618, 624, 625, 626, 630, 633, 646, 653, 665, 668, 690, 699, 718, 735, 758, 759, 791, 792, 795, 806, 899, 900, 906, 911, 918, 924, 925, 928, 930, 931, 933, 936, 942, 943, 955, 985, 992], "oper": [8, 31, 56, 73, 80, 81, 90, 92, 93, 94, 95, 96, 102, 111, 135, 148, 153, 158, 165, 175, 181, 184, 186, 187, 191, 212, 217, 218, 222, 225, 233, 234, 254, 261, 262, 265, 305, 324, 325, 326, 327, 328, 329, 374, 388, 390, 391, 409, 412, 419, 433, 435, 437, 441, 443, 447, 453, 519, 529, 536, 537, 538, 546, 547, 557, 592, 617, 623, 626, 629, 633, 638, 639, 672, 690, 698, 756, 757, 758, 759, 760, 881, 962, 966, 967, 968, 976, 985], "from": [8, 28, 31, 50, 51, 52, 65, 73, 74, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 141, 142, 146, 148, 157, 159, 160, 171, 172, 174, 175, 180, 192, 196, 198, 200, 222, 223, 225, 227, 254, 305, 324, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 378, 396, 410, 439, 440, 445, 446, 468, 481, 491, 492, 493, 499, 510, 511, 512, 514, 531, 533, 544, 554, 555, 556, 575, 579, 583, 591, 592, 612, 617, 622, 624, 625, 630, 638, 645, 646, 649, 663, 669, 690, 698, 736, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 849, 853, 869, 870, 871, 873, 896, 924, 925, 926, 932, 943, 944, 945, 947, 974, 977, 985, 992, 993], "environ": [8, 26, 126, 129], "local": [8, 30, 105, 114, 127, 254, 360, 771, 772, 798, 803, 874, 875, 985], "non": [8, 31, 39, 65, 95, 172, 180, 200, 226, 231, 254, 305, 397, 445, 457, 458, 459, 460, 461, 462, 464, 465, 466, 486, 492, 537, 538, 544, 546, 547, 553, 568, 571, 576, 577, 580, 581, 592, 638, 649, 665, 668, 690, 736, 833, 873, 885, 886, 887, 888, 889, 890, 892, 893, 894, 919, 925, 967, 985], "env": [8, 128], "back": [8, 65, 148, 218, 254, 444, 592, 698, 968, 985], "exampl": [8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 99, 100, 103, 104, 105, 106, 113, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 559, 560, 561, 562, 564, 566, 567, 568, 569, 570, 571, 572, 574, 575, 578, 579, 580, 581, 582, 584, 585, 592, 603, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 695, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 717, 718, 719, 722, 723, 725, 730, 731, 732, 734, 736, 743, 744, 746, 747, 748, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 819, 820, 821, 822, 824, 827, 828, 829, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 854, 859, 860, 861, 862, 863, 864, 865, 866, 867, 873, 874, 875, 877, 878, 879, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 899, 900, 901, 903, 907, 908, 909, 910, 912, 913, 915, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 947, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 985, 992], "ascii": [10, 18, 496, 498, 502, 516, 929, 931, 935, 949], "charact": [10, 12, 18, 24, 28, 102, 103, 113, 254, 357, 490, 492, 495, 496, 497, 502, 503, 505, 506, 509, 516, 643, 690, 795, 923, 925, 928, 929, 930, 935, 936, 938, 939, 942, 949], "displai": [10, 11, 12, 15, 17, 21, 23, 31, 254], "tabl": [10, 14, 15, 17, 18, 19, 20, 21, 23, 24, 29, 30, 31, 51, 52, 53, 55, 90, 97, 102, 103, 105, 113, 114, 188, 212, 218, 225, 226, 254, 665, 690, 968, 985, 992], "outlin": 10, "fals": [10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 33, 35, 50, 65, 70, 72, 74, 91, 95, 97, 100, 102, 103, 106, 107, 111, 113, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 134, 136, 137, 138, 141, 153, 154, 156, 157, 158, 159, 164, 165, 167, 168, 169, 171, 174, 175, 178, 183, 184, 186, 188, 189, 196, 197, 198, 201, 205, 207, 213, 217, 218, 221, 222, 223, 227, 229, 231, 237, 238, 240, 241, 242, 244, 247, 254, 264, 265, 266, 268, 278, 284, 287, 301, 304, 306, 324, 325, 326, 327, 328, 329, 344, 360, 362, 373, 374, 375, 376, 377, 390, 391, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 419, 420, 441, 443, 451, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 473, 478, 480, 481, 485, 489, 493, 499, 500, 501, 505, 506, 508, 510, 511, 512, 530, 533, 536, 537, 538, 541, 542, 548, 551, 566, 575, 580, 585, 592, 606, 608, 609, 610, 615, 617, 623, 624, 629, 630, 632, 634, 643, 650, 653, 654, 655, 657, 662, 663, 668, 675, 676, 678, 679, 680, 682, 685, 690, 698, 708, 718, 732, 735, 737, 744, 748, 749, 756, 757, 758, 759, 760, 761, 778, 798, 800, 812, 814, 815, 816, 822, 833, 834, 835, 837, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 853, 866, 874, 875, 877, 879, 880, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 898, 901, 906, 911, 913, 918, 922, 926, 932, 933, 934, 938, 939, 941, 943, 944, 945, 966, 967, 968, 971, 974, 976, 977, 985, 992], "revert": 10, "abc": [10, 16, 17, 18, 19, 20, 21, 22, 23, 261, 492, 500, 592, 925, 933], "xyz": [10, 16, 17, 18, 19, 20, 21, 22, 23, 261, 486, 492, 592, 919, 925, 964, 985], "f64": [10, 14, 16, 17, 19, 20, 21, 22, 23, 50, 65, 67, 69, 93, 118, 125, 137, 138, 140, 141, 142, 145, 149, 150, 153, 156, 157, 158, 165, 173, 174, 178, 179, 188, 189, 190, 206, 207, 208, 228, 231, 234, 238, 240, 241, 242, 243, 244, 246, 247, 254, 260, 270, 271, 272, 273, 274, 275, 296, 315, 317, 321, 322, 329, 332, 333, 362, 373, 374, 375, 376, 377, 378, 379, 387, 388, 390, 391, 396, 403, 405, 406, 407, 409, 410, 412, 415, 416, 417, 419, 423, 424, 425, 434, 437, 439, 440, 441, 445, 447, 450, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 476, 477, 478, 482, 483, 525, 526, 529, 534, 543, 544, 546, 548, 550, 558, 569, 570, 579, 584, 592, 608, 612, 618, 619, 623, 629, 630, 636, 637, 644, 657, 658, 666, 668, 669, 672, 676, 678, 679, 680, 681, 682, 684, 685, 690, 700, 701, 702, 703, 704, 705, 747, 754, 755, 760, 761, 762, 800, 815, 816, 820, 824, 829, 873, 877, 885, 887, 888, 890, 891, 892, 894, 895, 909, 910, 914, 959, 960, 973, 985, 993], "fmt": [11, 395, 561, 592, 627, 690], "floatfmt": 11, "mix": [11, 510, 512, 762, 943, 945, 985], "control": [11, 31, 55, 73, 123, 254, 615, 690], "how": [11, 30, 31, 56, 65, 73, 75, 93, 96, 104, 144, 173, 225, 226, 254, 285, 286, 316, 330, 396, 444, 454, 585, 592, 613, 629, 665, 690, 716, 717, 746, 763, 985], "float": [11, 31, 41, 42, 118, 120, 121, 122, 125, 127, 141, 146, 149, 174, 190, 198, 204, 246, 254, 284, 285, 317, 318, 319, 320, 332, 333, 362, 373, 374, 375, 376, 377, 382, 387, 390, 391, 396, 399, 402, 403, 405, 406, 407, 412, 415, 419, 423, 434, 439, 440, 441, 447, 450, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 472, 529, 543, 569, 570, 573, 575, 579, 581, 584, 592, 618, 630, 644, 652, 653, 684, 690, 715, 716, 744, 747, 750, 751, 752, 761, 762, 764, 800, 812, 813, 814, 815, 816, 820, 824, 829, 839, 853, 856, 862, 863, 869, 870, 876, 877, 878, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 899, 900, 911, 915, 955, 975, 985, 993], "point": [11, 31, 41, 42, 125, 127, 149, 159, 175, 254, 317, 332, 333, 362, 382, 387, 403, 405, 467, 468, 592, 618, 624, 634, 646, 690, 747, 800, 820, 824, 839, 895, 896, 985], "full": [11, 38, 65, 71, 73, 102, 103, 105, 113, 114, 510, 511, 512, 514, 634, 690, 943, 944, 945, 947], "format": [11, 14, 18, 28, 31, 101, 102, 103, 113, 118, 147, 157, 171, 180, 197, 214, 252, 254, 361, 364, 367, 499, 510, 511, 512, 514, 538, 616, 622, 638, 671, 690, 802, 805, 932, 943, 944, 945, 947, 984], "number": [11, 12, 13, 15, 23, 24, 28, 31, 35, 65, 84, 90, 92, 94, 96, 99, 102, 103, 106, 113, 116, 123, 125, 126, 128, 129, 136, 137, 146, 147, 149, 150, 162, 171, 172, 175, 176, 183, 184, 198, 203, 204, 208, 210, 221, 225, 228, 237, 239, 248, 254, 279, 286, 291, 299, 303, 305, 307, 313, 323, 329, 330, 342, 345, 350, 352, 362, 369, 370, 372, 375, 376, 377, 381, 383, 389, 393, 403, 405, 413, 414, 446, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 471, 472, 474, 483, 495, 498, 500, 506, 507, 522, 528, 534, 548, 549, 564, 576, 577, 579, 582, 584, 592, 606, 608, 616, 617, 618, 619, 626, 633, 643, 651, 652, 655, 658, 660, 662, 666, 675, 677, 686, 690, 717, 722, 730, 734, 736, 743, 749, 760, 763, 776, 779, 788, 790, 800, 807, 808, 810, 813, 814, 815, 816, 819, 821, 828, 839, 855, 866, 867, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 903, 904, 907, 915, 928, 931, 933, 939, 940, 956, 970, 975, 985, 993], "plai": [12, 547], "sam": 12, "As": [12, 90, 92, 93, 94, 96, 106, 254, 690], "time": [12, 30, 38, 40, 50, 55, 71, 72, 74, 113, 130, 148, 159, 160, 174, 227, 254, 283, 284, 285, 305, 313, 334, 335, 336, 341, 357, 360, 364, 366, 367, 371, 510, 512, 514, 527, 528, 546, 547, 556, 562, 592, 610, 624, 625, 630, 643, 690, 698, 714, 716, 743, 768, 769, 770, 775, 795, 798, 802, 804, 805, 809, 943, 945, 947, 969, 970, 985, 993], "goe": 12, "By": [12, 13, 65, 102, 103, 106, 113, 174, 208, 228, 254, 483, 499, 534, 548, 566, 579, 584, 592, 630, 658, 666, 690, 915, 932, 967, 975, 985], "begin": [12, 375, 376, 377, 491, 592, 814, 815, 816, 924, 985], "beauti": 12, "friendship": 12, "len": [12, 31, 123, 125, 172, 254, 324, 455, 496, 502, 516, 592, 761, 877, 883, 929, 935, 949, 985], "u32": [12, 50, 70, 159, 185, 232, 237, 245, 247, 254, 262, 269, 276, 277, 278, 279, 280, 281, 282, 285, 294, 323, 324, 339, 342, 346, 350, 352, 358, 359, 362, 369, 370, 413, 422, 438, 442, 451, 469, 486, 495, 498, 527, 531, 540, 542, 549, 572, 592, 624, 641, 670, 675, 683, 685, 690, 708, 709, 710, 725, 744, 773, 776, 783, 785, 788, 790, 793, 796, 797, 800, 807, 808, 829, 879, 919, 928, 931, 969, 972, 974, 985], "37": 12, "beaut": 12, "48": [12, 160, 254, 625, 690], "fmt_str_length": 12, "50": [12, 31, 148, 254, 318, 319, 320, 361, 368, 592, 750, 806, 985], "print": [12, 15, 17, 18, 23, 103, 119, 145, 157, 158, 172, 175, 216, 233, 254, 395, 556, 592, 627, 690, 840, 885, 965, 985, 993], "overwrit": [13, 29, 30, 90, 92, 93, 94, 96, 102, 103, 113, 134, 254, 617, 690], "chunk": [13, 99, 102, 103, 111, 113, 115, 116, 117, 125, 127, 148, 172, 183, 254, 267, 452, 592, 655, 690, 698, 748, 825, 866, 880, 962, 985], "stream": [13, 32, 72, 158, 223, 254, 610, 615, 617, 623, 634, 638, 643, 653, 654, 655, 663, 690], "engin": [13, 29, 104, 129, 135, 158, 223, 236, 254, 623, 634, 638, 663, 674, 690, 699, 985], "determin": [13, 31, 63, 65, 73, 93, 96, 100, 102, 103, 106, 111, 113, 117, 131, 135, 153, 159, 160, 171, 172, 222, 227, 254, 305, 316, 344, 360, 422, 430, 454, 458, 459, 460, 461, 462, 464, 465, 466, 478, 575, 592, 624, 625, 690, 736, 746, 778, 798, 829, 860, 911, 985], "schema": [13, 30, 50, 56, 66, 67, 68, 73, 75, 85, 86, 88, 90, 92, 93, 94, 96, 97, 102, 103, 108, 112, 113, 116, 123, 125, 135, 137, 138, 145, 146, 181, 184, 217, 254, 305, 430, 536, 580, 592, 608, 609, 614, 634, 639, 671, 674, 690, 753, 985], "thread": [13, 28, 99, 102, 103, 104, 129, 254, 268, 287, 592, 718], "pool": [13, 129], "For": [13, 30, 31, 104, 105, 106, 114, 148, 160, 173, 174, 236, 254, 305, 315, 375, 376, 377, 431, 453, 478, 485, 491, 492, 500, 551, 560, 561, 592, 625, 630, 674, 690, 698, 814, 815, 816, 881, 911, 918, 924, 925, 933, 967, 985], "some": [13, 26, 30, 31, 93, 102, 103, 113, 144, 254, 613, 690, 840, 985, 993], "dataset": [13, 102, 103, 113, 118, 410, 592, 603, 634, 690, 853, 985], "esp": 13, "when": [13, 15, 17, 21, 31, 35, 55, 56, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 102, 103, 104, 107, 111, 113, 114, 115, 116, 125, 127, 135, 136, 145, 146, 148, 150, 153, 159, 187, 196, 200, 207, 215, 221, 223, 254, 305, 318, 319, 320, 360, 375, 376, 377, 383, 420, 422, 431, 446, 480, 481, 497, 503, 509, 510, 542, 551, 560, 592, 606, 619, 624, 634, 649, 655, 657, 662, 663, 690, 698, 750, 751, 752, 798, 813, 814, 815, 816, 821, 860, 899, 900, 930, 936, 942, 943, 963, 985], "have": [13, 26, 31, 65, 75, 91, 102, 103, 106, 125, 127, 148, 171, 191, 197, 214, 254, 314, 329, 375, 376, 377, 431, 451, 510, 512, 592, 638, 653, 670, 690, 698, 760, 814, 815, 816, 826, 879, 943, 945, 985, 993], "larg": [13, 65, 159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 630, 690, 795, 799, 806], "element": [13, 23, 124, 127, 136, 170, 188, 196, 208, 221, 228, 254, 268, 270, 271, 272, 273, 274, 275, 285, 287, 288, 313, 321, 322, 324, 325, 326, 327, 328, 329, 379, 392, 401, 416, 417, 445, 451, 454, 469, 475, 476, 477, 482, 483, 506, 507, 525, 526, 528, 534, 548, 576, 577, 579, 584, 592, 606, 658, 662, 666, 690, 699, 700, 701, 702, 703, 704, 705, 716, 718, 719, 743, 749, 754, 755, 756, 757, 758, 759, 760, 817, 822, 828, 840, 852, 855, 857, 858, 873, 879, 897, 908, 909, 910, 914, 915, 939, 940, 956, 959, 960, 965, 970, 971, 975, 985], "too": [13, 159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 630, 690, 795, 799, 806], "optimist": 13, "lead": [13, 97, 118, 254, 470, 497, 509, 516, 523, 533, 548, 592, 634, 674, 690, 901, 930, 942, 949, 985], "out": [13, 97, 119, 160, 254, 290, 304, 309, 399, 402, 485, 487, 585, 592, 625, 654, 655, 690, 721, 735, 739, 918, 920], "memori": [13, 73, 90, 91, 94, 95, 96, 102, 103, 107, 111, 113, 115, 116, 117, 134, 135, 148, 205, 236, 254, 452, 473, 592, 655, 674, 690, 698, 699, 880, 905, 906, 985], "error": [13, 30, 76, 102, 103, 113, 159, 160, 174, 196, 227, 254, 292, 304, 309, 315, 357, 361, 368, 409, 458, 459, 460, 461, 462, 464, 465, 466, 485, 487, 491, 493, 494, 510, 511, 512, 514, 592, 624, 625, 630, 674, 690, 723, 735, 739, 744, 795, 799, 806, 918, 920, 924, 926, 927, 943, 944, 945, 947, 985], "row": [13, 18, 23, 28, 31, 33, 35, 65, 66, 68, 73, 82, 84, 89, 93, 94, 96, 97, 102, 103, 106, 107, 111, 113, 115, 116, 117, 120, 123, 125, 135, 136, 137, 144, 148, 151, 153, 157, 159, 161, 162, 167, 169, 170, 171, 172, 174, 175, 176, 180, 184, 198, 206, 210, 211, 214, 216, 221, 223, 225, 226, 232, 236, 239, 248, 254, 268, 279, 288, 305, 380, 393, 414, 445, 455, 479, 481, 490, 522, 542, 551, 552, 560, 564, 568, 571, 574, 582, 585, 592, 606, 608, 610, 613, 617, 620, 621, 624, 626, 630, 631, 633, 634, 638, 655, 656, 660, 661, 662, 663, 665, 670, 674, 677, 686, 690, 698, 719, 818, 828, 852, 873, 883, 912, 923, 956, 985, 993], "per": [13, 28, 31, 123, 125, 136, 157, 184, 185, 207, 221, 243, 245, 246, 254, 268, 287, 290, 304, 314, 481, 542, 592, 606, 657, 662, 681, 683, 684, 690, 718, 721, 735], "everi": [13, 102, 103, 113, 159, 211, 214, 227, 254, 281, 282, 286, 288, 290, 291, 300, 303, 324, 325, 326, 327, 328, 329, 361, 368, 380, 490, 524, 551, 552, 592, 617, 624, 661, 690, 712, 713, 717, 719, 721, 722, 731, 734, 756, 757, 758, 759, 760, 799, 806, 818, 923, 958, 985], "process": [13, 28, 129, 254, 654, 655, 690], "liter": [14, 18, 30, 50, 70, 74, 100, 106, 126, 127, 128, 131, 157, 171, 177, 178, 182, 183, 186, 196, 197, 200, 209, 213, 226, 231, 254, 264, 266, 308, 335, 374, 381, 388, 390, 391, 397, 409, 412, 419, 435, 437, 441, 447, 485, 500, 501, 519, 529, 537, 538, 541, 544, 546, 547, 553, 554, 555, 566, 568, 571, 575, 580, 581, 583, 592, 619, 649, 665, 668, 690, 696, 697, 738, 769, 819, 833, 899, 900, 918, 933, 934, 985, 992], "left": [14, 52, 65, 74, 120, 121, 130, 159, 160, 173, 174, 226, 254, 375, 376, 377, 396, 397, 458, 459, 460, 461, 462, 464, 465, 466, 469, 496, 516, 527, 544, 551, 552, 560, 574, 585, 592, 624, 625, 629, 630, 665, 690, 814, 815, 816, 833, 897, 929, 949, 969, 985], "center": [14, 31, 254, 375, 376, 377, 457, 458, 459, 460, 461, 462, 464, 465, 466, 592, 814, 815, 816, 885, 886, 887, 888, 889, 890, 892, 893, 894, 985], "right": [14, 16, 31, 74, 102, 103, 120, 121, 130, 159, 160, 173, 174, 254, 375, 376, 377, 397, 458, 459, 460, 461, 462, 464, 465, 466, 469, 478, 502, 544, 592, 624, 625, 629, 630, 690, 814, 815, 816, 833, 897, 911, 935, 985], "cell": 14, "align": [14, 31, 65, 73, 254, 516, 949], "keyerror": [14, 18], "recognis": [14, 18, 122], "column_abc": 14, "column_xyz": 14, "visibl": [15, 146, 254, 813, 985], "eg": [15, 23, 31, 254, 361, 510, 512, 529, 592, 943, 945], "low": [15, 129], "rang": [15, 31, 74, 104, 130, 141, 146, 159, 172, 254, 339, 352, 358, 359, 361, 368, 369, 396, 541, 546, 554, 555, 583, 592, 624, 690, 761, 762, 773, 790, 796, 797, 799, 806, 807, 813, 873, 877, 985], "100": [15, 31, 93, 96, 102, 103, 113, 116, 254, 516, 541, 690, 886, 887, 889, 985, 993], "98": [15, 165, 254, 313, 480, 523, 528, 592], "99": [15, 31, 149, 150, 165, 168, 254, 262, 313, 381, 383, 480, 523, 528, 592, 618, 619, 690, 812, 819, 985], "tbl_col": 15, "10": [15, 27, 28, 30, 31, 32, 35, 50, 65, 73, 74, 97, 104, 113, 125, 127, 130, 138, 148, 156, 159, 160, 162, 164, 165, 166, 183, 187, 189, 193, 194, 200, 210, 231, 234, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 267, 276, 277, 278, 280, 286, 291, 299, 300, 303, 318, 323, 325, 328, 330, 332, 333, 335, 353, 354, 360, 361, 368, 371, 392, 393, 396, 401, 409, 413, 414, 416, 445, 446, 459, 479, 516, 522, 536, 544, 551, 557, 560, 562, 564, 566, 567, 582, 592, 610, 624, 625, 626, 628, 633, 642, 643, 649, 655, 659, 660, 668, 672, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 690, 699, 717, 722, 730, 731, 734, 750, 761, 763, 769, 798, 806, 809, 812, 828, 840, 855, 857, 873, 899, 900, 956, 985, 993], "95": [15, 262, 592], "96": [15, 262, 592], "97": [15, 165, 254, 262, 592], "move": [16, 375, 376, 377, 458, 459, 461, 465, 592, 814, 815, 816, 886, 887, 889, 893, 985], "inlin": [16, 485, 491, 492, 500, 918, 924, 925, 933], "parenthes": 16, "below": [17, 31, 105, 114, 144, 254, 396, 585, 592, 613, 690], "ascii_ful": 18, "ascii_full_condens": 18, "ascii_no_bord": 18, "ascii_borders_onli": 18, "ascii_borders_only_condens": 18, "ascii_horizontal_onli": 18, "ascii_markdown": 18, "utf8_ful": [18, 65, 97], "utf8_full_condens": [18, 97], "utf8_no_bord": 18, "utf8_borders_onli": 18, "utf8_horizontal_onli": 18, "noth": [18, 486, 491, 494, 919, 924, 927], "none": [18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 48, 50, 52, 53, 55, 65, 74, 75, 90, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 135, 137, 141, 144, 149, 150, 157, 159, 160, 161, 166, 170, 173, 174, 175, 178, 180, 184, 185, 188, 196, 198, 200, 204, 206, 207, 213, 215, 218, 222, 223, 224, 225, 226, 227, 231, 234, 254, 263, 267, 268, 280, 290, 300, 305, 307, 318, 319, 320, 323, 325, 328, 332, 333, 360, 361, 368, 375, 376, 377, 378, 381, 382, 383, 389, 392, 396, 397, 403, 404, 405, 406, 407, 413, 420, 422, 442, 445, 451, 452, 457, 458, 459, 460, 461, 462, 464, 465, 466, 468, 472, 473, 474, 475, 479, 480, 484, 485, 488, 489, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 514, 516, 517, 518, 527, 537, 539, 541, 544, 547, 549, 555, 556, 558, 559, 566, 567, 568, 571, 575, 576, 577, 578, 579, 580, 583, 584, 585, 592, 608, 609, 613, 618, 619, 624, 625, 628, 629, 630, 632, 634, 638, 641, 649, 652, 653, 654, 655, 656, 657, 663, 664, 665, 668, 669, 671, 672, 674, 690, 699, 706, 707, 721, 731, 736, 749, 750, 761, 762, 764, 780, 781, 782, 787, 798, 799, 806, 811, 812, 814, 815, 816, 819, 820, 821, 823, 826, 827, 829, 831, 832, 833, 842, 845, 846, 849, 852, 853, 860, 861, 862, 863, 864, 868, 877, 878, 879, 882, 885, 886, 887, 888, 889, 890, 892, 893, 894, 896, 900, 902, 904, 907, 908, 911, 912, 915, 917, 918, 921, 922, 926, 927, 928, 929, 930, 931, 932, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 947, 961, 964, 965, 968, 969, 975, 976, 985, 992], "rounded_corn": 18, "style": [18, 31, 188, 254], "border": 18, "line": [18, 31, 102, 103, 106, 113, 157, 167, 169, 254, 491, 924], "includ": [18, 26, 28, 30, 31, 71, 105, 114, 125, 136, 141, 146, 159, 221, 222, 225, 254, 362, 397, 505, 506, 551, 592, 606, 624, 662, 690, 762, 800, 813, 833, 938, 939, 976, 985], "divid": [18, 361, 368, 375, 376, 377, 410, 592, 799, 806, 814, 815, 816, 853, 985], "same": [18, 30, 31, 54, 56, 65, 72, 73, 75, 107, 113, 123, 135, 142, 158, 207, 223, 231, 234, 236, 254, 260, 267, 368, 380, 426, 429, 444, 457, 458, 459, 460, 461, 462, 464, 465, 466, 481, 518, 545, 592, 612, 623, 634, 657, 663, 668, 672, 674, 690, 694, 698, 699, 769, 818, 885, 886, 887, 888, 889, 890, 892, 893, 894, 977, 985], "dens": [18, 157, 254, 451, 592, 879, 985], "space": 18, "horizont": [18, 73, 153, 164, 225, 254, 537, 538, 546, 547, 551, 552, 553, 557, 560, 568, 571, 574, 581], "markdown": 18, "compat": [18, 31, 35, 104, 254, 485, 486, 491, 492, 500, 501, 655, 690, 918, 919, 924, 925, 933, 934], "No": 18, "appli": [18, 28, 31, 50, 73, 113, 122, 125, 127, 153, 187, 254, 339, 342, 344, 345, 346, 348, 350, 352, 355, 358, 359, 362, 369, 370, 372, 376, 377, 420, 446, 457, 458, 459, 461, 465, 500, 510, 511, 512, 514, 536, 541, 551, 552, 560, 567, 574, 592, 626, 633, 634, 642, 690, 771, 772, 773, 776, 778, 779, 783, 785, 788, 790, 793, 796, 797, 800, 803, 807, 808, 810, 815, 816, 885, 886, 887, 889, 893, 933, 943, 944, 945, 947, 985], "round": [18, 31, 67, 97, 254, 317, 387, 525, 592, 747, 824, 985], "corner": [18, 97], "op": [18, 127, 254, 454, 510, 512, 592, 690, 943, 945, 985], "one": [18, 29, 31, 55, 65, 82, 90, 92, 93, 94, 95, 96, 126, 127, 128, 132, 150, 151, 157, 158, 159, 160, 171, 180, 188, 196, 197, 201, 220, 235, 254, 262, 305, 383, 409, 417, 457, 480, 492, 523, 581, 585, 592, 619, 620, 623, 624, 625, 638, 650, 669, 673, 690, 698, 736, 821, 849, 858, 885, 925, 950, 985], "more": [18, 31, 33, 35, 55, 65, 73, 89, 90, 91, 92, 93, 94, 95, 96, 105, 111, 114, 125, 127, 132, 135, 140, 141, 171, 175, 180, 184, 196, 197, 198, 223, 236, 254, 265, 268, 306, 318, 319, 320, 409, 410, 417, 420, 443, 468, 478, 492, 530, 581, 585, 592, 638, 655, 663, 674, 690, 699, 737, 750, 751, 752, 762, 849, 853, 896, 911, 925, 971, 985, 993], "semigraph": 18, "box": [18, 135, 254], "draw": [18, 23, 24, 124, 993], "found": [18, 28, 52, 77, 86, 88, 93, 97, 145, 226, 254, 469, 494, 510, 512, 592, 665, 690, 897, 927, 943, 945, 985, 992], "unicod": 18, "block": [18, 158, 223, 254, 623, 646, 663, 670, 690, 899, 900, 985], "http": [18, 31, 91, 104, 134, 140, 254, 491, 924], "en": [18, 31, 254], "wikipedia": 18, "org": [18, 91, 104, 134, 140, 254], "wiki": 18, "drawing_charact": 18, "box_draw": 18, "mno": 18, "tbl_format": 18, "tbl_hide_column_data_typ": 18, "tbl_hide_dataframe_shap": 18, "hide": [19, 20, 21, 22, 31, 254], "etc": [19, 30, 31, 102, 105, 107, 111, 114, 115, 117, 254, 541, 899, 900, 985], "inform": [21, 71, 105, 114, 140, 254, 318, 319, 320, 410, 478, 485, 491, 492, 500, 592, 643, 690, 750, 751, 752, 853, 911, 918, 924, 925, 933, 985], "separ": [22, 28, 99, 102, 103, 113, 186, 188, 215, 222, 224, 254, 268, 288, 292, 490, 547, 551, 552, 592, 664, 690, 719, 723, 923, 954, 963, 985], "between": [22, 73, 122, 123, 125, 127, 190, 246, 254, 292, 315, 331, 397, 445, 450, 462, 484, 548, 550, 573, 576, 577, 592, 644, 684, 690, 723, 744, 764, 833, 873, 878, 890, 917, 985], "set_tbl_column_data_type_inlin": 22, "max": [23, 31, 35, 50, 129, 141, 150, 158, 159, 160, 188, 254, 305, 318, 319, 325, 383, 444, 451, 458, 470, 507, 592, 619, 623, 624, 625, 655, 690, 736, 750, 751, 756, 762, 821, 879, 886, 901, 940, 985], "both": [23, 28, 56, 74, 104, 130, 159, 160, 173, 174, 181, 196, 254, 267, 397, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 629, 630, 639, 690, 833, 842, 985], "tbl_row": 23, "char": [24, 56, 75, 492, 498, 925, 931], "enabl": [25, 75, 200, 231, 254, 470, 592, 649, 668, 690, 901, 985], "addit": [25, 30, 31, 93, 105, 114, 123, 142, 147, 158, 186, 200, 201, 207, 224, 231, 234, 254, 261, 378, 381, 444, 481, 485, 491, 492, 500, 537, 538, 542, 544, 545, 546, 547, 553, 558, 568, 571, 578, 580, 581, 592, 612, 616, 623, 649, 650, 657, 664, 668, 672, 690, 819, 918, 924, 925, 933, 985], "verbos": [25, 132, 492, 925], "debug": [25, 610, 617, 634, 690, 993], "log": [25, 67, 313, 373, 417, 437, 447, 528, 592, 743, 812, 970, 985], "if_set": 26, "env_onli": 26, "dict": [26, 30, 31, 35, 53, 66, 68, 71, 90, 92, 93, 94, 95, 96, 102, 103, 105, 106, 107, 108, 111, 112, 113, 114, 115, 117, 125, 171, 186, 192, 196, 197, 199, 213, 214, 254, 422, 592, 646, 648, 690, 860, 985], "show": [26, 31, 54, 144, 157, 175, 185, 254, 613, 643, 653, 690], "variabl": [26, 52, 126, 129, 180, 215, 254, 638, 690, 963, 985, 992], "restrict": [26, 507, 940], "dictionari": [26, 31, 90, 92, 93, 94, 96, 102, 103, 108, 112, 113, 171, 186, 196, 197, 213, 214, 254, 422, 592, 690, 762, 860, 985], "those": [26, 31, 102, 254, 451, 491, 592, 879, 924, 985], "been": [26, 31, 254, 451, 592, 879, 985], "set_fmt_float": 26, "directli": [26, 52, 125, 127, 132, 375, 376, 377, 575, 592, 690, 814, 815, 816, 985, 993], "via": [26, 102, 103, 106, 113, 115, 116, 117, 171, 197, 254, 268, 592], "set_stat": 26, "all_stat": 26, "file": [27, 28, 32, 33, 34, 35, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 148, 254, 617, 645, 654, 655, 671, 690, 698, 985], "binaryio": [27, 32, 101, 102, 106, 107, 108, 111, 112, 254], "bytesio": [27, 28, 31, 32, 35, 101, 102, 103, 106, 107, 111, 254], "path": [27, 28, 30, 31, 32, 33, 34, 35, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 254, 470, 494, 592, 645, 654, 655, 671, 690, 901, 927, 985], "compress": [27, 32, 35, 254, 654, 655, 690], "avrocompress": [27, 254], "uncompress": [27, 32, 35, 107, 115, 254, 655, 690], "write": [27, 28, 29, 30, 31, 32, 33, 35, 103, 107, 254, 318, 319, 320, 592, 632, 653, 655, 671, 690, 750, 751, 752, 985], "apach": [27, 35, 101, 104, 254], "avro": [27, 101, 254, 603], "should": [27, 28, 31, 32, 33, 34, 35, 73, 90, 92, 94, 96, 105, 113, 122, 123, 127, 134, 135, 142, 159, 160, 171, 174, 196, 197, 214, 215, 224, 227, 236, 254, 262, 268, 287, 316, 329, 357, 361, 368, 371, 378, 403, 405, 457, 458, 459, 460, 461, 462, 464, 465, 466, 469, 478, 545, 558, 565, 566, 576, 577, 585, 592, 612, 624, 625, 629, 630, 634, 653, 654, 655, 664, 671, 674, 690, 699, 718, 746, 760, 795, 799, 806, 809, 885, 886, 887, 888, 889, 890, 892, 893, 894, 897, 911, 985], "written": [27, 28, 31, 32, 33, 34, 35, 254, 654, 655, 671, 690], "snappi": [27, 35, 254, 655, 690], "deflat": [27, 254], "import": [27, 28, 31, 32, 35, 38, 65, 74, 90, 94, 95, 113, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 141, 157, 159, 172, 174, 217, 218, 225, 227, 254, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 556, 624, 630, 634, 690, 754, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 837, 841, 843, 844, 849, 885, 909, 959, 985, 993], "pathlib": [27, 28, 32, 35, 113, 254], "foo": [27, 28, 30, 32, 33, 34, 35, 54, 135, 139, 140, 142, 143, 144, 145, 148, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 168, 173, 177, 178, 179, 182, 185, 188, 190, 192, 193, 194, 196, 198, 199, 200, 202, 203, 204, 206, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 222, 223, 224, 228, 229, 230, 233, 254, 263, 284, 289, 290, 293, 294, 318, 319, 320, 357, 393, 395, 414, 455, 471, 472, 484, 486, 488, 490, 492, 497, 503, 505, 507, 509, 513, 515, 522, 524, 537, 540, 541, 543, 545, 548, 549, 550, 559, 563, 564, 568, 569, 570, 571, 572, 573, 578, 579, 582, 584, 585, 592, 611, 612, 613, 614, 620, 627, 628, 629, 641, 646, 648, 649, 663, 664, 667, 669, 671, 690, 723, 750, 795, 883, 919, 921, 923, 925, 940, 985], "bar": [27, 28, 30, 32, 33, 34, 35, 54, 135, 139, 140, 142, 143, 144, 145, 148, 151, 152, 153, 154, 155, 156, 162, 164, 165, 166, 168, 173, 177, 178, 179, 182, 185, 188, 190, 192, 193, 194, 196, 198, 199, 200, 203, 204, 206, 208, 209, 210, 212, 214, 215, 216, 217, 218, 219, 223, 224, 228, 229, 233, 254, 263, 294, 395, 478, 488, 490, 505, 507, 537, 540, 543, 545, 548, 549, 550, 559, 564, 568, 569, 570, 571, 572, 578, 579, 582, 584, 585, 592, 611, 612, 613, 614, 620, 627, 628, 629, 641, 646, 648, 649, 663, 664, 667, 671, 690, 723, 911, 921, 923, 940, 985], "ham": [27, 28, 30, 32, 35, 139, 140, 142, 143, 144, 145, 151, 152, 154, 161, 162, 164, 173, 177, 178, 179, 182, 185, 190, 192, 194, 196, 198, 199, 200, 203, 204, 206, 208, 209, 210, 215, 216, 217, 218, 219, 223, 228, 229, 254, 545, 611, 612, 613, 614, 620, 629, 641, 646, 648, 649, 663, 669, 690], "d": [27, 28, 30, 32, 35, 56, 75, 93, 118, 141, 157, 161, 162, 165, 173, 210, 212, 225, 229, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 261, 341, 364, 367, 397, 446, 473, 486, 492, 506, 510, 511, 512, 544, 562, 592, 629, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 690, 775, 802, 805, 833, 919, 925, 939, 943, 944, 945, 985], "e": [27, 28, 30, 32, 35, 56, 75, 91, 102, 103, 106, 107, 111, 115, 117, 141, 157, 159, 160, 162, 174, 210, 212, 225, 227, 254, 261, 268, 357, 361, 368, 373, 378, 397, 415, 422, 458, 459, 460, 461, 462, 464, 465, 466, 473, 478, 558, 585, 592, 624, 625, 630, 632, 646, 690, 795, 799, 806, 812, 833, 898, 911, 967, 985], "dirpath": [27, 28, 32, 35, 113, 254], "new_fil": [27, 28, 32, 35, 254], "has_head": [28, 31, 102, 103, 106, 113, 254], "quot": [28, 102, 103, 113, 254], "batch_siz": [28, 102, 103, 116, 254], "1024": [28, 102, 103, 116, 254, 655, 690], "datetime_format": [28, 254], "date_format": [28, 254], "time_format": [28, 254], "float_precis": [28, 31, 254], "null_valu": [28, 102, 103, 113, 254], "comma": [28, 254], "csv": [28, 102, 103, 106, 113, 254, 603, 654, 655, 690], "result": [28, 33, 34, 65, 73, 94, 96, 100, 104, 105, 113, 115, 117, 118, 127, 131, 148, 159, 160, 184, 204, 218, 227, 234, 254, 305, 364, 367, 375, 376, 377, 381, 410, 444, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 470, 472, 505, 506, 512, 529, 541, 551, 552, 567, 575, 576, 577, 592, 607, 624, 625, 634, 643, 652, 654, 655, 671, 672, 690, 698, 802, 805, 814, 815, 816, 853, 883, 885, 886, 887, 888, 889, 890, 892, 893, 894, 901, 904, 938, 939, 945, 967, 985, 992, 993], "If": [28, 30, 31, 32, 33, 34, 50, 56, 70, 71, 73, 74, 90, 91, 92, 93, 94, 95, 96, 100, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 126, 130, 131, 134, 135, 136, 144, 148, 157, 159, 160, 162, 170, 171, 174, 176, 180, 184, 197, 198, 206, 210, 214, 215, 217, 221, 222, 223, 225, 226, 254, 268, 300, 305, 318, 319, 320, 335, 353, 354, 360, 384, 410, 420, 422, 451, 453, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 469, 474, 478, 479, 493, 495, 497, 498, 503, 504, 505, 506, 507, 509, 510, 511, 512, 514, 537, 538, 539, 541, 548, 549, 551, 553, 560, 566, 568, 571, 575, 576, 577, 580, 581, 585, 592, 606, 613, 615, 624, 625, 629, 630, 634, 638, 646, 655, 656, 662, 663, 665, 671, 674, 690, 698, 699, 731, 736, 750, 751, 752, 761, 769, 791, 792, 798, 826, 828, 829, 852, 853, 855, 877, 879, 881, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 901, 907, 911, 912, 926, 928, 930, 931, 936, 937, 938, 939, 940, 942, 943, 944, 945, 947, 956, 962, 967, 976, 985, 992], "instead": [28, 33, 34, 50, 54, 65, 70, 73, 74, 100, 102, 111, 125, 130, 131, 135, 159, 160, 171, 174, 184, 186, 196, 197, 200, 218, 227, 231, 254, 278, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 495, 497, 503, 509, 541, 568, 571, 575, 580, 592, 618, 624, 625, 630, 649, 668, 671, 690, 708, 795, 799, 806, 899, 900, 928, 930, 936, 942, 968, 985, 992], "whether": [28, 74, 94, 96, 127, 130, 201, 254, 344, 360, 362, 427, 428, 470, 592, 634, 650, 690, 778, 798, 800, 992], "header": [28, 31, 35, 97, 102, 103, 106, 113, 145, 188, 222, 254, 655, 690], "field": [28, 57, 86, 88, 93, 217, 224, 254, 305, 422, 492, 493, 506, 507, 518, 551, 552, 567, 580, 592, 664, 690, 736, 939, 940, 952, 954], "symbol": [28, 254], "byte": [28, 102, 103, 106, 107, 108, 111, 112, 113, 146, 254, 308, 311, 312, 495, 498, 655, 690, 738, 741, 742, 813, 928, 931, 985], "specifi": [28, 31, 65, 74, 77, 86, 88, 106, 125, 136, 142, 146, 147, 150, 158, 186, 196, 200, 201, 207, 221, 224, 231, 234, 254, 375, 376, 377, 378, 383, 422, 444, 454, 481, 496, 502, 537, 538, 542, 544, 545, 546, 547, 553, 558, 568, 571, 578, 580, 581, 592, 606, 612, 616, 619, 623, 649, 650, 657, 662, 664, 668, 672, 690, 813, 814, 815, 816, 821, 929, 935, 985], "defin": [28, 31, 38, 74, 122, 123, 125, 130, 135, 159, 160, 184, 187, 236, 254, 268, 304, 397, 446, 458, 459, 460, 461, 462, 464, 465, 466, 539, 566, 580, 592, 624, 625, 642, 674, 690, 699, 735, 833, 985], "chrono": [28, 254, 364, 367, 510, 511, 512, 514, 802, 805, 943, 944, 945, 947], "rust": [28, 35, 83, 107, 111, 135, 236, 254, 674, 699, 985], "crate": [28, 254, 485, 486, 491, 492, 500, 501, 510, 511, 512, 514, 918, 919, 924, 925, 933, 934, 943, 944, 945, 947], "fraction": [28, 120, 121, 198, 254, 362, 445, 468, 510, 512, 592, 800, 873, 896, 943, 945, 985], "second": [28, 74, 124, 130, 159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 510, 512, 555, 556, 583, 585, 592, 624, 625, 630, 690, 795, 799, 806, 943, 945, 993], "precis": [28, 31, 39, 171, 197, 214, 254, 334, 768], "infer": [28, 90, 92, 93, 94, 95, 96, 102, 103, 106, 113, 116, 135, 254, 455, 493, 510, 511, 512, 514, 575, 592, 690, 883, 926, 943, 944, 945, 947, 985], "maximum": [28, 102, 103, 113, 123, 124, 125, 127, 177, 254, 281, 423, 439, 451, 568, 592, 635, 690, 712, 750, 780, 861, 869, 874, 879, 985], "timeunit": [28, 38, 40, 74, 254, 334, 335, 366, 371, 512, 768, 769, 804, 809, 945], "frame": [28, 29, 31, 50, 51, 52, 53, 54, 55, 65, 73, 93, 120, 125, 135, 137, 171, 172, 181, 184, 187, 196, 197, 218, 225, 254, 608, 639, 642, 690, 749, 985, 992, 993], "datetim": [28, 31, 65, 74, 97, 125, 130, 141, 157, 159, 160, 172, 174, 227, 254, 284, 285, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 458, 459, 460, 461, 462, 464, 465, 466, 510, 512, 527, 556, 562, 566, 592, 624, 625, 630, 690, 715, 716, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 849, 869, 870, 900, 943, 945, 969, 985], "place": [28, 136, 143, 164, 165, 193, 203, 204, 207, 221, 229, 254, 278, 292, 299, 471, 472, 480, 592, 606, 651, 652, 657, 662, 690, 708, 723, 730, 880, 882, 903, 904, 913, 985], "float64": [28, 31, 93, 100, 102, 125, 131, 145, 146, 153, 199, 218, 231, 254, 270, 271, 272, 273, 274, 275, 315, 321, 322, 362, 378, 403, 405, 476, 477, 525, 526, 545, 558, 575, 592, 614, 648, 668, 690, 800, 968, 973, 985], "repres": [28, 48, 63, 74, 90, 92, 94, 95, 96, 130, 208, 228, 254, 403, 405, 483, 534, 537, 545, 548, 558, 566, 576, 577, 579, 584, 592, 658, 666, 690, 900, 915, 975, 985], "empti": [28, 81, 93, 102, 103, 106, 113, 137, 138, 168, 180, 254, 566, 578, 608, 609, 638, 690, 749, 753, 836, 985], "table_nam": [29, 31, 254], "connection_uri": [29, 104, 254], "if_exist": [29, 254], "dbwritemod": [29, 254], "fail": [29, 30, 91, 105, 107, 114, 134, 223, 254, 279, 305, 510, 511, 512, 514, 592, 663, 690, 699, 943, 944, 945, 947, 985], "dbwriteengin": [29, 254], "sqlalchemi": [29, 254], "databas": [29, 104, 254, 603], "append": [29, 30, 125, 148, 173, 174, 254, 452, 585, 592, 629, 630, 690, 985], "creat": [29, 31, 74, 90, 94, 96, 114, 123, 124, 125, 126, 127, 128, 130, 137, 138, 159, 160, 185, 188, 227, 231, 254, 305, 335, 361, 368, 452, 504, 533, 541, 546, 554, 555, 556, 583, 592, 608, 609, 615, 624, 625, 668, 690, 749, 753, 761, 766, 769, 799, 806, 871, 877, 880, 937, 967, 985, 992, 993], "connect": [29, 102, 104, 107, 111, 115, 117, 118, 254, 604], "uri": [29, 30, 104, 105, 114, 254], "postgresql": [29, 104, 254, 444, 592], "usernam": [29, 102, 104, 107, 111, 115, 117, 254], "password": [29, 102, 104, 107, 111, 115, 117, 254], "server": [29, 104, 254], "port": [29, 102, 104, 107, 111, 115, 117, 254], "replac": [29, 30, 102, 103, 113, 149, 150, 194, 222, 231, 254, 335, 360, 422, 501, 592, 618, 668, 690, 769, 798, 860, 899, 900, 934, 985], "insert": [29, 102, 103, 107, 111, 113, 115, 116, 117, 165, 193, 222, 224, 254, 469, 484, 516, 592, 664, 690, 897, 917, 949, 985], "mode": [29, 30, 50, 100, 131, 254, 492, 575, 592, 690, 925, 985, 992], "new": [29, 30, 31, 113, 132, 135, 144, 164, 165, 184, 185, 192, 193, 211, 224, 225, 231, 254, 263, 335, 380, 396, 421, 500, 501, 506, 507, 517, 518, 524, 592, 603, 613, 646, 661, 664, 668, 674, 690, 695, 766, 769, 818, 871, 882, 933, 934, 939, 940, 950, 952, 958, 964, 977, 985, 992], "alreadi": [29, 30, 254, 287, 329, 592, 718, 760, 985], "adbc": [29, 104, 254], "deltalak": [30, 105, 114, 119, 254], "deltat": [30, 254], "ignor": [30, 124, 125, 127, 178, 209, 254, 286, 330, 360, 375, 376, 377, 439, 440, 592, 717, 763, 798, 814, 815, 816, 869, 870, 985], "overwrite_schema": [30, 254], "storage_opt": [30, 102, 105, 107, 111, 114, 115, 117, 254], "delta_write_opt": [30, 254], "delta": [30, 40, 105, 114, 208, 228, 254, 483, 534, 548, 576, 577, 579, 584, 592, 603, 658, 666, 690, 915, 975, 985], "like": [30, 74, 91, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 130, 167, 169, 173, 254, 287, 433, 451, 491, 581, 592, 617, 645, 690, 718, 879, 924, 985], "categor": [30, 56, 75, 173, 215, 216, 254, 316, 422, 527, 592, 745, 746, 969, 985], "protocol": [30, 91, 104, 134, 254], "object": [30, 31, 32, 35, 55, 73, 74, 91, 92, 97, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 123, 125, 127, 130, 134, 158, 159, 160, 175, 217, 218, 254, 566, 603, 609, 624, 625, 627, 632, 645, 690, 711, 745, 767, 916, 962, 985, 992], "handl": [30, 73, 97, 102, 103, 113, 118, 254, 286, 330, 516, 592, 717, 763, 949, 985], "throw": [30, 91, 254, 315, 493, 494, 592, 744, 926, 927, 985], "add": [30, 31, 103, 135, 148, 159, 231, 232, 254, 448, 520, 556, 560, 585, 592, 624, 629, 668, 669, 670, 690, 698, 985], "anyth": [30, 196, 254, 492, 925], "updat": [30, 254, 690], "extra": [30, 35, 102, 105, 106, 107, 111, 114, 115, 117, 148, 254, 655, 690, 698, 985], "storag": [30, 102, 105, 107, 111, 114, 115, 117, 254], "backend": [30, 104, 105, 114, 254], "cloud": [30, 105, 114, 118, 254], "configur": [30, 105, 114, 254], "authent": [30, 105, 114, 254], "see": [30, 31, 104, 105, 106, 114, 120, 121, 125, 127, 140, 173, 187, 254, 318, 319, 320, 383, 396, 410, 420, 478, 485, 491, 492, 500, 574, 592, 750, 751, 752, 853, 911, 918, 924, 925, 933, 985, 993], "here": [30, 31, 90, 92, 93, 94, 96, 104, 105, 114, 123, 125, 127, 254, 494, 690, 927], "gc": [30, 105, 114, 254], "azur": [30, 105, 114, 254], "keyword": [30, 53, 105, 111, 114, 140, 187, 196, 200, 231, 234, 254, 446, 578, 580, 592, 642, 649, 668, 672, 690, 985], "argument": [30, 35, 102, 105, 111, 114, 140, 142, 147, 158, 159, 160, 178, 186, 187, 188, 200, 201, 207, 209, 218, 224, 227, 231, 234, 254, 361, 368, 378, 397, 444, 446, 458, 459, 460, 461, 462, 464, 465, 466, 481, 497, 503, 509, 537, 538, 542, 544, 545, 546, 547, 553, 558, 568, 571, 575, 578, 580, 581, 592, 612, 616, 623, 624, 625, 642, 649, 650, 657, 664, 668, 672, 690, 799, 806, 833, 930, 936, 942, 968, 985], "while": [30, 103, 105, 106, 114, 125, 127, 171, 180, 222, 254, 638, 690], "lake": [30, 105, 114, 254, 603], "instanti": [30, 31, 200, 231, 254, 649, 668, 690], "basic": [30, 31, 254, 993], "filesystem": [30, 105, 114, 254], "table_path": [30, 105, 114, 254], "doe": [30, 65, 73, 84, 90, 92, 93, 94, 96, 97, 102, 103, 105, 106, 113, 114, 118, 120, 121, 148, 172, 196, 197, 223, 231, 254, 305, 368, 371, 422, 531, 559, 592, 617, 634, 663, 668, 690, 698, 809, 826, 860, 906, 976, 985], "match": [30, 31, 73, 84, 90, 92, 93, 94, 96, 120, 121, 150, 174, 196, 254, 428, 485, 486, 489, 491, 492, 493, 494, 500, 501, 508, 510, 511, 512, 545, 619, 630, 690, 842, 849, 918, 919, 922, 924, 925, 926, 927, 933, 934, 941, 943, 944, 945, 985], "version": [30, 71, 74, 105, 114, 119, 254, 353, 354, 510, 512, 574, 575, 791, 792, 943, 945], "old": [30, 192, 254, 646, 690], "existing_table_path": [30, 254], "store": [30, 102, 111, 148, 171, 197, 254, 698, 985], "bucket": [30, 105, 114, 254, 361, 368, 799, 806, 829, 985], "prefix": [30, 132, 254, 263, 312, 421, 508, 516, 520, 592, 742, 941, 949], "aws_region": [30, 114, 254], "the_aws_region": [30, 254], "aws_access_key_id": [30, 105, 114, 254], "the_aws_access_key_id": [30, 105, 114, 254], "aws_secret_access_kei": [30, 105, 114, 254], "the_aws_secret_access_kei": [30, 105, 114, 254], "workbook": [31, 254], "worksheet": [31, 254], "posit": [31, 142, 147, 158, 186, 200, 201, 207, 224, 231, 234, 254, 375, 376, 377, 378, 444, 481, 499, 537, 538, 542, 544, 545, 546, 547, 553, 558, 568, 571, 578, 580, 581, 592, 612, 616, 623, 649, 650, 657, 664, 668, 672, 690, 814, 815, 816, 932, 985], "tupl": [31, 104, 135, 171, 196, 197, 202, 233, 254, 455, 592, 643, 653, 690, 883, 985], "a1": [31, 66, 68, 254], "table_styl": [31, 254], "column_format": [31, 254], "dtype_format": [31, 254], "oneormoredatatyp": [31, 123, 254, 849, 985], "conditional_format": [31, 254], "conditionalformatdict": [31, 254], "column_tot": [31, 254], "columntotalsdefinit": [31, 254], "column_width": [31, 254], "row_tot": [31, 254], "rowtotalsdefinit": [31, 254], "row_height": [31, 254], "sparklin": [31, 254], "sequenc": [31, 57, 65, 72, 90, 92, 93, 94, 96, 99, 102, 103, 113, 123, 124, 125, 136, 141, 147, 148, 173, 174, 180, 184, 187, 188, 207, 215, 221, 223, 224, 225, 226, 227, 254, 305, 401, 420, 446, 481, 518, 539, 542, 551, 552, 560, 562, 567, 574, 592, 606, 616, 629, 630, 642, 657, 662, 663, 664, 665, 690, 698, 736, 762, 764, 900, 952, 985], "formula": [31, 254, 373, 592, 812, 985], "autofilt": [31, 254], "autofit": [31, 254], "hidden_column": [31, 254], "hide_gridlin": [31, 254], "sheet_zoom": [31, 254], "excel": [31, 106, 254, 603], "open": [31, 102, 103, 106, 107, 111, 115, 117, 254], "xlsxwriter": [31, 119, 254], "ha": [31, 65, 113, 134, 227, 254, 268, 313, 329, 409, 431, 528, 539, 592, 674, 743, 749, 760, 762, 826, 839, 970, 985], "close": [31, 74, 130, 159, 160, 254, 397, 417, 458, 459, 460, 461, 462, 464, 465, 466, 478, 592, 624, 625, 690, 833, 911, 985], "xlsx": [31, 106, 254], "work": [31, 39, 103, 106, 160, 193, 254, 268, 287, 306, 317, 318, 319, 320, 378, 387, 444, 498, 530, 592, 625, 690, 718, 737, 747, 750, 751, 752, 824, 931, 971, 985], "directori": [31, 111, 254], "sheet1": [31, 254], "valid": [31, 50, 107, 111, 127, 132, 146, 254, 329, 485, 486, 491, 492, 494, 500, 501, 592, 760, 813, 826, 918, 919, 924, 925, 927, 933, 934, 985], "notat": [31, 254], "integ": [31, 43, 44, 45, 46, 59, 60, 61, 62, 123, 125, 126, 128, 159, 160, 254, 317, 362, 387, 388, 453, 458, 459, 460, 461, 462, 463, 464, 465, 466, 499, 536, 541, 562, 575, 592, 624, 625, 690, 706, 707, 747, 800, 824, 842, 881, 891, 900, 932, 985, 992, 993], "medium": [31, 254], "kei": [31, 65, 71, 73, 159, 174, 181, 186, 188, 192, 195, 254, 580, 624, 630, 639, 646, 647, 690], "contain": [31, 65, 71, 92, 95, 97, 105, 114, 120, 124, 136, 144, 172, 184, 188, 221, 254, 268, 401, 422, 486, 489, 491, 492, 494, 507, 508, 592, 606, 613, 643, 662, 690, 860, 866, 919, 922, 924, 925, 927, 940, 941, 962, 985], "follow": [31, 71, 102, 103, 105, 113, 114, 135, 159, 160, 174, 187, 227, 254, 268, 357, 361, 368, 446, 451, 458, 459, 460, 461, 462, 464, 465, 466, 518, 529, 539, 585, 586, 588, 592, 593, 594, 598, 599, 600, 624, 625, 630, 642, 690, 795, 799, 806, 879, 899, 900, 979, 981, 985, 986, 989, 990, 991, 993], "first_column": [31, 254], "last_column": [31, 254], "banded_column": [31, 254], "banded_row": [31, 254], "sheet": [31, 106, 254], "chart": [31, 254, 643, 690], "subsequ": [31, 55, 191, 218, 254, 305, 615, 690], "colnam": [31, 113, 125, 145, 254, 614, 690], "given": [31, 50, 51, 65, 74, 90, 92, 93, 94, 96, 102, 103, 113, 122, 123, 125, 126, 127, 128, 130, 135, 136, 146, 147, 170, 186, 187, 196, 203, 204, 207, 221, 226, 254, 268, 284, 299, 305, 336, 364, 366, 367, 373, 397, 415, 444, 446, 451, 454, 455, 458, 459, 461, 464, 465, 466, 469, 471, 472, 492, 510, 512, 518, 558, 575, 592, 606, 616, 634, 642, 651, 652, 657, 662, 665, 674, 690, 699, 715, 730, 736, 761, 770, 802, 804, 805, 812, 813, 829, 833, 852, 856, 859, 871, 877, 879, 883, 886, 887, 889, 892, 893, 894, 897, 903, 904, 925, 943, 945, 973, 977, 985, 992, 993], "dd": [31, 254], "mm": [31, 254], "yyyi": [31, 254], "00": [31, 74, 125, 130, 159, 174, 227, 254, 334, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 510, 512, 514, 556, 624, 630, 690, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 807, 808, 809, 810, 943, 945, 947], "dtype": [31, 68, 75, 90, 92, 94, 96, 97, 100, 102, 103, 113, 122, 123, 124, 125, 127, 131, 134, 159, 160, 174, 216, 217, 218, 254, 268, 270, 271, 272, 273, 274, 275, 278, 281, 282, 283, 292, 304, 315, 318, 319, 320, 321, 322, 327, 328, 340, 343, 347, 349, 351, 356, 363, 371, 378, 380, 418, 420, 422, 453, 454, 458, 459, 460, 461, 462, 464, 465, 466, 473, 476, 477, 484, 493, 504, 510, 521, 523, 525, 526, 527, 532, 533, 539, 541, 549, 558, 562, 566, 567, 575, 580, 592, 624, 625, 630, 690, 712, 713, 714, 723, 735, 744, 749, 750, 751, 752, 758, 759, 762, 763, 774, 777, 784, 786, 789, 794, 801, 809, 813, 818, 836, 842, 849, 859, 860, 884, 898, 905, 917, 926, 937, 943, 955, 965, 967, 968, 969, 973, 985, 993], "overridden": [31, 90, 92, 94, 96, 129, 254, 690], "basi": [31, 125, 254], "param": [31, 90, 92, 93, 94, 96, 102, 103, 113, 124, 125, 127, 196, 254, 690], "It": [31, 135, 181, 187, 236, 254, 268, 314, 430, 592, 634, 639, 674, 690, 899, 900, 985], "also": [31, 55, 74, 93, 113, 123, 124, 125, 126, 127, 145, 158, 159, 160, 181, 184, 200, 207, 231, 254, 325, 328, 360, 396, 397, 451, 458, 459, 460, 461, 462, 464, 465, 466, 481, 551, 552, 560, 562, 574, 585, 591, 592, 597, 623, 624, 625, 639, 649, 657, 668, 669, 690, 798, 833, 879, 985], "group": [31, 35, 50, 103, 158, 159, 160, 172, 184, 186, 188, 225, 227, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254, 262, 268, 287, 386, 444, 451, 480, 481, 485, 491, 492, 500, 523, 539, 592, 623, 624, 625, 655, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 718, 918, 924, 925, 933], "float_dtyp": [31, 254], "simplifi": [31, 72, 254, 610, 615, 617, 643, 653, 654, 655, 690], "uniform": [31, 254], "condit": [31, 70, 144, 151, 196, 254, 489, 508, 560, 585, 613, 620, 690], "suppli": [31, 90, 92, 93, 94, 96, 196, 254, 446, 592, 690], "typenam": [31, 254], "3_color_scal": [31, 254], "data_bar": [31, 254], "make": [31, 57, 73, 90, 95, 102, 103, 104, 107, 111, 115, 117, 159, 160, 181, 184, 191, 227, 254, 376, 377, 422, 454, 506, 516, 592, 624, 625, 639, 690, 815, 816, 829, 860, 939, 949, 985, 993], "icon": [31, 254], "multipl": [31, 53, 72, 73, 102, 103, 113, 115, 116, 117, 123, 127, 136, 142, 146, 148, 151, 158, 159, 164, 172, 186, 188, 200, 201, 207, 221, 231, 234, 254, 304, 427, 431, 436, 437, 444, 455, 458, 459, 460, 461, 462, 464, 465, 466, 481, 537, 538, 542, 545, 551, 552, 553, 560, 567, 568, 571, 574, 581, 585, 592, 606, 612, 620, 623, 624, 649, 650, 657, 662, 668, 672, 690, 698, 735, 813, 865, 883, 985], "singl": [31, 51, 65, 73, 102, 103, 104, 111, 113, 123, 142, 143, 144, 148, 155, 170, 186, 196, 207, 254, 268, 285, 304, 357, 384, 420, 452, 455, 481, 484, 535, 537, 538, 539, 542, 545, 546, 547, 553, 567, 568, 571, 581, 592, 612, 613, 657, 690, 698, 716, 735, 795, 880, 883, 917, 962, 985], "across": [31, 65, 254, 537, 538, 553, 568, 571, 581], "effect": [31, 134, 153, 254, 268, 592, 670, 690], "heatmap": [31, 254], "min": [31, 35, 130, 141, 150, 159, 160, 188, 254, 318, 320, 326, 383, 444, 451, 461, 578, 592, 619, 624, 625, 655, 690, 750, 752, 757, 762, 821, 879, 889, 985, 993], "entir": [31, 254], "final": [31, 65, 117, 254, 375, 376, 377, 592, 617, 690, 814, 815, 816, 985], "made": [31, 130, 254, 967, 985], "up": [31, 57, 104, 171, 174, 197, 214, 254, 268, 317, 516, 592, 629, 630, 634, 690, 747, 949, 985], "abov": [31, 254, 368, 585], "order": [31, 50, 52, 65, 93, 120, 135, 136, 158, 159, 160, 186, 187, 188, 198, 201, 207, 221, 223, 227, 254, 268, 278, 301, 306, 316, 451, 468, 469, 470, 480, 481, 518, 530, 531, 542, 592, 606, 623, 624, 625, 638, 650, 654, 655, 657, 662, 663, 690, 699, 708, 732, 737, 746, 761, 848, 877, 879, 884, 896, 897, 901, 913, 952, 971, 972, 985], "than": [31, 74, 89, 94, 96, 102, 103, 113, 118, 125, 127, 135, 157, 158, 171, 174, 186, 196, 197, 198, 225, 236, 254, 268, 390, 391, 409, 412, 419, 468, 478, 496, 502, 507, 516, 548, 581, 592, 623, 630, 654, 655, 674, 690, 699, 896, 911, 929, 935, 940, 949, 985, 993], "total": [31, 146, 254, 813, 985], "export": [31, 171, 172, 197, 214, 217, 254], "numer": [31, 174, 254, 261, 318, 319, 320, 388, 397, 417, 435, 437, 447, 454, 473, 519, 529, 592, 603, 630, 690, 750, 751, 752, 762, 833, 847, 898, 905, 985, 993], "associ": [31, 51, 53, 65, 124, 254], "sum": [31, 50, 65, 146, 153, 158, 160, 170, 188, 234, 254, 268, 305, 327, 328, 373, 384, 458, 459, 461, 464, 465, 466, 535, 537, 551, 553, 560, 574, 592, 610, 615, 617, 623, 625, 641, 643, 653, 672, 690, 758, 759, 812, 813, 886, 887, 889, 892, 893, 894, 985], "pass": [31, 35, 53, 65, 74, 92, 106, 113, 123, 125, 127, 136, 140, 142, 158, 159, 160, 162, 176, 186, 187, 200, 207, 210, 221, 227, 231, 234, 254, 268, 341, 360, 381, 395, 444, 446, 481, 497, 503, 509, 537, 538, 542, 545, 553, 562, 568, 571, 580, 581, 592, 606, 612, 623, 624, 625, 627, 634, 642, 649, 653, 657, 662, 668, 672, 690, 699, 775, 798, 819, 828, 855, 930, 936, 942, 956, 985], "must": [31, 91, 92, 105, 114, 141, 147, 159, 160, 174, 181, 196, 254, 305, 420, 458, 459, 460, 461, 462, 464, 465, 466, 592, 616, 624, 625, 630, 634, 639, 690, 761, 762, 877, 985], "funcnam": [31, 254], "averag": [31, 254, 375, 376, 377, 451, 592, 814, 815, 816, 879, 985], "count_num": [31, 254], "count": [31, 50, 102, 103, 107, 111, 113, 115, 116, 117, 141, 159, 160, 174, 184, 185, 188, 222, 226, 227, 232, 236, 245, 254, 269, 285, 324, 357, 413, 438, 442, 458, 459, 460, 461, 462, 464, 465, 466, 486, 531, 533, 540, 572, 592, 624, 625, 630, 641, 665, 670, 674, 683, 690, 716, 762, 795, 829, 867, 872, 919, 972, 974, 985], "std_dev": [31, 254], "var": [31, 128, 254, 592, 690, 985], "pixel": [31, 254], "unit": [31, 38, 40, 74, 125, 127, 146, 254, 334, 335, 341, 366, 371, 418, 431, 510, 512, 532, 562, 592, 643, 690, 768, 769, 775, 804, 809, 813, 859, 943, 945, 973, 985, 993], "hand": [31, 102, 103, 113, 254], "side": [31, 159, 160, 254, 397, 458, 459, 460, 461, 462, 464, 465, 466, 469, 592, 624, 625, 690, 833, 897, 985], "call": [31, 54, 103, 125, 127, 132, 135, 158, 159, 160, 175, 253, 254, 268, 325, 328, 568, 571, 592, 604, 623, 624, 625, 689, 690, 699, 985], "ad": [31, 93, 134, 159, 222, 231, 254, 267, 381, 551, 552, 592, 624, 668, 690, 819, 985], "end": [31, 74, 102, 103, 111, 113, 130, 159, 254, 300, 311, 357, 361, 362, 378, 397, 485, 489, 492, 504, 508, 541, 545, 558, 585, 592, 624, 626, 633, 643, 690, 731, 741, 795, 799, 833, 922, 925, 937, 941, 985], "wise": [31, 65, 153, 254, 270, 271, 272, 273, 274, 275, 321, 322, 379, 416, 475, 476, 477, 525, 526, 551, 552, 560, 568, 571, 574, 592, 700, 701, 702, 703, 704, 705, 754, 755, 817, 857, 858, 908, 909, 910, 959, 960, 985], "particip": [31, 254], "distinct": [31, 127, 186, 254, 306, 451, 556, 592, 737, 879, 985, 993], "referenc": [31, 254, 518], "differ": [31, 102, 118, 120, 148, 159, 160, 171, 197, 214, 222, 254, 286, 330, 339, 357, 358, 360, 369, 422, 439, 440, 510, 531, 559, 562, 592, 615, 624, 625, 690, 698, 699, 717, 763, 773, 795, 796, 798, 807, 869, 870, 898, 943, 985], "row_index": [31, 254], "height": [31, 144, 254], "provid": [31, 53, 102, 103, 104, 105, 113, 114, 125, 127, 170, 254, 305, 309, 310, 487, 488, 491, 493, 494, 562, 580, 603, 654, 655, 690, 739, 740, 829, 852, 920, 921, 924, 926, 927, 985, 992, 993], "intersect": [31, 254], "bodi": [31, 254], "start": [31, 74, 101, 102, 103, 107, 111, 113, 115, 116, 117, 129, 130, 158, 159, 175, 206, 227, 232, 254, 300, 312, 339, 341, 342, 344, 345, 350, 352, 358, 359, 361, 362, 366, 368, 369, 370, 372, 378, 397, 479, 485, 489, 492, 504, 508, 541, 545, 551, 558, 560, 585, 592, 623, 624, 643, 656, 670, 690, 731, 742, 768, 770, 773, 775, 776, 778, 783, 785, 788, 790, 793, 796, 797, 799, 800, 804, 806, 807, 808, 809, 810, 833, 912, 922, 925, 937, 941, 985, 993], "zero": [31, 90, 91, 101, 102, 103, 107, 111, 124, 134, 137, 150, 171, 196, 212, 217, 218, 254, 305, 382, 383, 417, 469, 478, 516, 529, 592, 608, 619, 690, 736, 749, 821, 911, 949, 962, 967, 968, 985], "unless": [31, 65, 92, 218, 254, 575, 690, 968, 976, 985], "marker": [31, 254], "compliant": [31, 254], "case": [31, 65, 90, 92, 93, 94, 96, 117, 129, 135, 148, 159, 160, 171, 254, 420, 421, 430, 431, 485, 492, 500, 592, 624, 625, 690, 698, 918, 925, 933, 985], "three": [31, 220, 254, 305, 469, 592, 736], "avail": [31, 99, 105, 114, 123, 132, 253, 254, 451, 586, 588, 591, 592, 593, 594, 597, 598, 599, 600, 603, 604, 617, 689, 690, 879, 979, 981, 985, 986, 989, 990, 991], "insert_befor": [31, 254], "insert_aft": [31, 254], "respect": [31, 254], "direct": [31, 104, 111, 117, 225, 254], "far": [31, 254], "thei": [31, 93, 113, 120, 132, 175, 254, 457, 592, 885, 985], "strongli": [31, 129, 135, 196, 236, 254, 268, 592, 674, 699, 985], "advis": [31, 175, 254, 314, 592], "structur": [31, 81, 85, 87, 148, 187, 217, 254, 446, 592, 642, 690, 698, 985], "your": [31, 65, 102, 103, 120, 121, 135, 171, 200, 231, 234, 254, 268, 314, 592, 610, 626, 633, 634, 649, 668, 672, 690, 699, 985, 993], "wherev": [31, 135, 236, 254, 268, 592, 674, 699, 985], "possibl": [31, 102, 135, 158, 171, 197, 223, 236, 254, 268, 418, 430, 507, 532, 592, 623, 663, 674, 690, 699, 940, 985], "simpl": [31, 127, 184, 254], "colx": [31, 55, 254, 993], "coli": [31, 254, 993], "after": [31, 55, 73, 93, 101, 102, 103, 107, 111, 113, 115, 116, 117, 148, 224, 253, 254, 378, 422, 451, 516, 592, 664, 690, 698, 860, 879, 949, 985], "befor": [31, 102, 113, 129, 132, 148, 159, 174, 224, 254, 327, 328, 329, 422, 445, 457, 458, 459, 460, 461, 462, 464, 465, 466, 516, 521, 576, 577, 592, 624, 627, 630, 664, 690, 698, 758, 759, 760, 860, 873, 885, 886, 887, 888, 889, 890, 892, 893, 894, 949, 955, 985], "most": [31, 52, 90, 102, 103, 113, 254, 431, 436, 445, 507, 533, 592, 865, 873, 940, 974, 985, 992], "mandatori": [31, 254], "return_dtyp": [31, 135, 254, 268, 420, 422, 539, 567, 592, 699, 860, 985], "latter": [31, 148, 254, 698, 985], "appropri": [31, 254, 451, 592, 879, 985], "pure": [31, 254], "actual": [31, 93, 106, 125, 127, 254, 314, 592, 906, 985], "indic": [31, 70, 101, 102, 103, 107, 111, 113, 122, 123, 127, 159, 160, 174, 201, 215, 227, 254, 279, 304, 357, 361, 368, 399, 402, 403, 405, 406, 407, 426, 429, 458, 459, 460, 461, 462, 464, 465, 466, 469, 475, 523, 542, 592, 624, 625, 630, 650, 690, 735, 795, 799, 806, 837, 841, 843, 844, 845, 846, 897, 908, 957, 963, 985, 993], "calcul": [31, 65, 159, 208, 228, 254, 286, 330, 375, 376, 377, 410, 418, 463, 478, 483, 532, 534, 537, 539, 548, 576, 577, 579, 584, 592, 624, 658, 666, 690, 717, 763, 814, 815, 816, 853, 891, 911, 915, 975, 985], "individu": [31, 125, 160, 217, 254, 268, 492, 592, 625, 655, 690, 748, 925, 985], "gridlin": [31, 254], "zoom": [31, 254], "level": [31, 35, 113, 115, 116, 117, 125, 135, 153, 184, 254, 384, 592, 626, 633, 655, 690], "definit": [31, 123, 254, 410, 592, 853, 985], "take": [31, 125, 132, 153, 181, 187, 211, 254, 357, 481, 524, 557, 559, 592, 639, 661, 690, 795, 958, 977, 985], "care": [31, 254, 268, 470, 592, 901, 985], "rel": [31, 105, 114, 120, 121, 254, 357, 375, 376, 377, 592, 795, 814, 815, 816, 985], "readthedoc": [31, 254], "io": [31, 254], "working_with_conditional_format": [31, 254], "html": [31, 91, 104, 134, 140, 254], "similarli": [31, 93, 254], "well": [31, 102, 103, 113, 147, 188, 254, 397, 592, 616, 690, 833, 985], "adjac": [31, 254], "two": [31, 55, 92, 94, 96, 104, 130, 153, 180, 181, 188, 220, 235, 236, 254, 262, 305, 331, 335, 480, 523, 548, 550, 576, 577, 592, 638, 639, 673, 674, 690, 736, 764, 769, 985], "help": [31, 254, 617, 690], "where": [31, 50, 65, 70, 104, 124, 144, 148, 171, 180, 197, 208, 228, 254, 279, 370, 373, 469, 478, 481, 483, 534, 548, 576, 577, 579, 584, 585, 592, 638, 658, 666, 690, 698, 709, 808, 812, 897, 911, 915, 975, 977, 985, 992], "appear": [31, 93, 120, 254, 531, 592, 972, 985], "working_with_sparklin": [31, 254], "inject": [31, 65, 254], "locat": [31, 148, 194, 219, 224, 254, 469, 592, 664, 690, 698, 897, 900, 957, 985], "syntax": [31, 135, 184, 254, 485, 491, 492, 500, 653, 690, 918, 924, 925, 933, 985], "ensur": [31, 75, 124, 125, 127, 158, 186, 196, 254, 397, 533, 592, 623, 634, 690, 967, 974, 985], "correctli": [31, 254], "microsoft": [31, 119, 254], "com": [31, 104, 254, 375, 376, 377, 491, 492, 592, 814, 815, 816, 924, 925, 985], "u": [31, 38, 40, 53, 74, 97, 171, 197, 214, 254, 334, 335, 341, 366, 371, 510, 512, 562, 768, 769, 775, 804, 809, 943, 945], "offic": [31, 254], "f5ed2452": [31, 254], "2337": [31, 254], "4f71": [31, 254], "bed3": [31, 254], "c8ae6d2b276": [31, 254], "random": [31, 123, 125, 127, 161, 198, 254, 392, 451, 468, 474, 592, 827, 879, 896, 907, 985], "date": [31, 38, 65, 74, 102, 103, 104, 113, 118, 125, 141, 157, 159, 160, 172, 174, 227, 254, 284, 285, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 458, 459, 460, 461, 462, 464, 465, 466, 510, 511, 527, 562, 566, 583, 592, 624, 625, 630, 690, 715, 716, 768, 769, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 849, 869, 870, 900, 943, 944, 969, 985], "dtm": [31, 254, 335, 769], "2023": [31, 97, 119, 172, 254, 335, 566, 769], "num": [31, 220, 254, 397, 400, 516, 592, 833, 985], "500": [31, 171, 226, 254, 617, 665, 690, 783, 785, 793, 800, 886, 887, 889, 985], "val": [31, 195, 254, 316, 446, 527, 585, 592, 647, 690, 746], "10_000": [31, 254], "20_000": [31, 254], "30_000": [31, 254], "increas": [31, 65, 102, 111, 254, 329, 592, 760, 985], "b4": [31, 254], "light": [31, 254], "twice": [31, 106, 254], "each": [31, 65, 103, 116, 120, 121, 123, 135, 157, 158, 159, 160, 172, 174, 186, 218, 224, 227, 233, 234, 236, 237, 239, 248, 254, 268, 291, 303, 357, 361, 368, 417, 451, 481, 492, 506, 507, 539, 542, 547, 580, 592, 624, 625, 630, 643, 664, 672, 674, 675, 677, 686, 690, 722, 734, 748, 795, 799, 806, 879, 925, 939, 940, 954, 985, 993], "titl": [31, 50, 254], "explicit": [31, 113, 123, 254, 541, 574], "integr": [31, 254, 993], "multi_fram": [31, 254], "wb": [31, 254], "coordin": [31, 254], "advanc": [31, 254, 305, 736, 993], "min_color": [31, 254], "76933c": [31, 254], "mid_color": [31, 254], "c4d79b": [31, 254], "max_color": [31, 254], "ebf1d": [31, 254], "data_bar_2010": [31, 254], "bar_color": [31, 254], "9bbb59": [31, 254], "bar_negative_color_sam": [31, 254], "bar_negative_border_color_sam": [31, 254], "000": [31, 254, 993], "white": [31, 254], "w": [31, 52, 53, 254, 491, 924], "get_worksheet_by_nam": [31, 254], "fmt_titl": [31, 254], "add_format": [31, 254], "font_color": [31, 254], "4f6228": [31, 254], "font_siz": [31, 254], "12": [31, 65, 74, 97, 124, 125, 130, 159, 160, 174, 227, 254, 327, 335, 342, 345, 352, 353, 354, 359, 361, 368, 372, 445, 473, 552, 554, 555, 567, 592, 624, 625, 626, 630, 633, 653, 660, 690, 699, 761, 769, 790, 799, 806, 895, 985, 993], "ital": [31, 254], "bold": [31, 254], "customis": [31, 254], "trend": [31, 254], "win_loss": [31, 254], "subtl": [31, 254], "tone": [31, 254], "hidden": [31, 254], "id": [31, 73, 236, 254, 500, 501, 531, 533, 592, 674, 972, 985, 993], "q1": [31, 254], "55": [31, 67, 254], "20": [31, 125, 130, 148, 164, 165, 187, 189, 193, 194, 254, 276, 277, 278, 330, 361, 368, 392, 396, 446, 562, 566, 592, 642, 690, 763, 806, 985], "35": [31, 119, 254, 330, 592, 763, 985], "q2": [31, 254], "30": [31, 130, 148, 159, 164, 187, 193, 194, 213, 231, 254, 276, 277, 278, 330, 335, 340, 345, 353, 359, 360, 361, 368, 372, 392, 473, 566, 592, 624, 642, 668, 690, 761, 763, 769, 774, 791, 798, 799, 806, 985, 993], "15": [31, 119, 124, 130, 135, 159, 160, 165, 254, 329, 330, 354, 361, 368, 446, 552, 575, 592, 624, 625, 690, 760, 763, 799, 806, 985], "60": [31, 148, 254, 362, 363, 510, 796, 800, 801, 943], "q3": [31, 254], "40": [31, 148, 187, 254, 361, 368, 392, 592, 642, 690, 779, 806], "80": [31, 254], "q4": [31, 254], "75": [31, 141, 254, 265, 443, 592, 762, 829, 877, 985, 993], "account": [31, 97, 254, 357, 375, 376, 377, 592, 795, 814, 815, 816, 985], "flavour": [31, 254], "integer_dtyp": [31, 200, 254, 649, 690], "0_": [31, 254], "just": [31, 104, 113, 180, 254, 638, 690], "unifi": [31, 254], "multi": [31, 102, 103, 254, 378, 491, 568, 571, 592, 924], "2_color_scal": [31, 254], "95b3d7": [31, 254], "ffffff": [31, 254], "base": [31, 36, 144, 151, 159, 160, 254, 373, 375, 376, 377, 415, 416, 499, 592, 613, 620, 624, 625, 690, 812, 814, 815, 816, 829, 856, 857, 877, 932, 977, 985, 993], "standardis": [31, 254], "z": [31, 52, 73, 97, 123, 125, 146, 167, 169, 173, 180, 254, 261, 265, 283, 316, 392, 443, 454, 492, 510, 512, 575, 592, 629, 638, 656, 690, 746, 821, 925, 943, 945, 985, 992], "score": [31, 254], "conjunct": [31, 106, 254], "a123": [31, 254], "b345": [31, 254], "c567": [31, 254], "d789": [31, 254], "e101": [31, 254], "45": [31, 130, 160, 254, 335, 361, 368, 486, 492, 566, 625, 690, 769, 799, 806, 919, 925, 993], "85": [31, 254, 993], "font": [31, 254], "consola": [31, 254], "standard": [31, 119, 208, 217, 254, 345, 376, 464, 478, 483, 494, 579, 592, 658, 690, 779, 815, 911, 915, 927, 985, 993], "stdev": [31, 254], "ipccompress": [32, 254], "arrow": [32, 76, 90, 104, 107, 115, 212, 254, 654, 690, 962, 967, 985], "ipc": [32, 107, 108, 115, 118, 254, 603], "binari": [32, 254, 308, 310, 311, 312, 538, 738, 740, 741, 742], "feather": [32, 107, 115, 254, 603], "lz4": [32, 35, 254, 654, 655, 690], "zstd": [32, 35, 254, 654, 655, 690], "pretti": [33, 254], "row_ori": [33, 254], "iobas": [33, 34, 109, 110, 254, 645, 671, 690], "serial": [33, 34, 254], "represent": [33, 34, 216, 254, 316, 339, 342, 345, 346, 348, 350, 352, 355, 358, 359, 362, 369, 370, 372, 527, 592, 615, 632, 690, 746, 773, 776, 778, 779, 783, 785, 788, 790, 793, 796, 797, 800, 807, 808, 810, 965, 969, 985], "orient": [33, 66, 68, 94, 96, 254, 690], "slower": [33, 94, 96, 135, 158, 186, 227, 236, 254, 623, 674, 690, 699, 985], "common": [33, 65, 73, 254, 597], "write_ndjson": [33, 254], "newlin": [34, 110, 116, 254], "delimit": [34, 102, 103, 110, 113, 116, 188, 215, 254, 484, 917, 963, 985], "parquetcompress": [35, 254], "compression_level": [35, 254, 655, 690], "statist": [35, 102, 103, 111, 117, 141, 254, 376, 377, 410, 458, 459, 460, 461, 462, 463, 464, 465, 466, 478, 592, 655, 690, 762, 815, 816, 853, 891, 911, 985], "row_group_s": [35, 254, 655, 690], "use_pyarrow": [35, 102, 107, 111, 254, 655, 690, 966, 967, 985], "pyarrow_opt": [35, 105, 111, 114, 254], "parquet": [35, 111, 112, 117, 254, 603, 655, 690], "gzip": [35, 254, 655, 690], "lzo": [35, 254, 655, 690], "brotli": [35, 254, 655, 690], "choos": [35, 254, 654, 655, 690], "good": [35, 171, 254, 654, 655, 690], "perform": [35, 65, 81, 91, 102, 103, 107, 111, 113, 115, 116, 117, 134, 135, 159, 160, 174, 191, 236, 254, 268, 314, 444, 592, 624, 625, 630, 654, 655, 670, 674, 690, 699, 985], "fast": [35, 126, 128, 254, 381, 470, 592, 654, 655, 690, 819, 901, 985, 993], "decompress": [35, 254, 654, 655, 690], "backward": [35, 150, 174, 254, 307, 354, 383, 592, 619, 630, 655, 690, 792, 821, 985], "guarante": [35, 91, 102, 103, 223, 254, 617, 655, 663, 690], "deal": [35, 171, 254, 360, 451, 510, 592, 655, 690, 798, 879, 943, 985], "older": [35, 254, 655, 690], "reader": [35, 99, 102, 103, 107, 111, 254, 604, 655, 690], "higher": [35, 190, 246, 254, 450, 462, 573, 592, 644, 655, 684, 690, 878, 890, 985], "mean": [35, 102, 103, 107, 111, 113, 141, 150, 158, 188, 234, 254, 380, 383, 459, 478, 491, 543, 592, 619, 623, 634, 655, 672, 690, 762, 818, 821, 826, 887, 911, 924, 985], "smaller": [35, 146, 254, 617, 655, 690, 813, 985], "disk": [35, 107, 254, 653, 654, 655, 690], "11": [35, 119, 125, 160, 254, 332, 333, 345, 353, 354, 357, 361, 368, 396, 445, 451, 465, 479, 516, 536, 545, 581, 592, 610, 625, 626, 633, 643, 655, 660, 690, 699, 795, 799, 806, 885, 985], "22": [35, 124, 254, 361, 368, 371, 510, 545, 655, 690, 799, 806, 809, 943, 993], "comput": [35, 72, 73, 78, 146, 158, 174, 218, 223, 234, 246, 254, 260, 270, 271, 272, 273, 274, 275, 295, 296, 297, 321, 322, 324, 325, 326, 327, 328, 331, 373, 379, 410, 415, 416, 417, 436, 444, 445, 449, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 475, 476, 477, 478, 482, 525, 526, 537, 538, 542, 548, 550, 553, 557, 568, 571, 576, 577, 581, 592, 623, 627, 629, 630, 655, 663, 669, 672, 684, 690, 694, 700, 701, 702, 703, 704, 705, 726, 727, 728, 754, 755, 756, 757, 758, 759, 764, 812, 813, 817, 853, 856, 857, 858, 865, 873, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 908, 909, 910, 911, 914, 959, 960, 968, 985], "512": [35, 254, 447, 592, 873, 985], "implement": [35, 91, 134, 135, 236, 254, 268, 592, 674, 699, 899, 900, 985], "v": [35, 52, 53, 146, 254, 469, 592, 761, 897, 985], "At": [35, 254], "moment": [35, 140, 254, 410, 478, 592, 853, 911, 985], "pyarrow": [35, 90, 95, 102, 105, 107, 111, 114, 118, 119, 172, 212, 217, 218, 254, 604, 962, 966, 967, 968, 985], "write_t": [35, 254], "calendar": [37, 38, 159, 160, 174, 227, 254, 345, 357, 361, 368, 372, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 630, 690, 779, 795, 799, 806, 810], "time_unit": [38, 40, 74, 97, 334, 335, 341, 366, 371, 510, 512, 562, 768, 769, 775, 804, 809, 943, 945], "time_zon": [38, 74, 97, 336, 360, 512, 770, 798, 945], "timezon": [38, 74], "m": [38, 40, 53, 74, 334, 335, 341, 364, 366, 367, 371, 491, 510, 511, 512, 514, 562, 768, 769, 775, 802, 804, 805, 809, 924, 943, 944, 945, 947], "zone": [38, 74, 336, 360, 510, 512, 770, 798, 943, 945], "zoneinfo": 38, "run": [38, 72, 126, 128, 135, 158, 175, 188, 223, 236, 254, 268, 287, 329, 578, 592, 610, 615, 617, 623, 634, 638, 643, 653, 654, 655, 663, 674, 690, 699, 718, 760, 985, 992, 993], "available_timezon": 38, "128": [39, 67, 873, 985], "bit": [39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 453, 485, 592, 881, 918, 985], "neg": [39, 159, 162, 176, 203, 204, 206, 210, 254, 299, 300, 446, 471, 472, 479, 504, 592, 624, 651, 652, 656, 670, 690, 730, 731, 828, 855, 903, 904, 912, 937, 956, 985], "scale": [39, 146, 254, 446, 592, 813, 985], "experiment": [39, 118, 200, 225, 226, 231, 254, 329, 361, 458, 459, 460, 461, 462, 464, 465, 466, 592, 649, 665, 668, 690, 760, 799, 829, 877, 985], "progress": 39, "expect": [39, 82, 84, 89, 268, 539, 566, 592, 632, 634, 690, 877, 985], "32": [41, 44, 60, 67, 160, 170, 254, 437, 473, 592, 625, 690, 764, 796, 873, 890, 985], "sign": [43, 44, 45, 46, 357, 453, 516, 592, 795, 842, 881, 949, 985], "arrai": [47, 90, 94, 102, 103, 111, 146, 212, 217, 218, 254, 283, 294, 295, 296, 297, 298, 301, 302, 310, 318, 319, 320, 324, 325, 326, 327, 328, 416, 458, 459, 461, 464, 465, 466, 470, 486, 488, 491, 494, 557, 592, 690, 714, 725, 726, 727, 728, 729, 732, 733, 740, 750, 751, 752, 756, 757, 758, 759, 764, 813, 857, 858, 886, 887, 889, 892, 893, 894, 901, 906, 919, 921, 924, 927, 962, 967, 968, 976, 985], "wrap": [49, 97, 397, 592], "arbitrari": [49, 125], "python": [49, 74, 102, 103, 119, 130, 135, 171, 197, 214, 236, 254, 268, 335, 420, 539, 585, 592, 597, 674, 699, 769, 780, 781, 782, 787, 966, 985], "queri": [50, 52, 72, 104, 107, 113, 115, 116, 117, 148, 175, 187, 254, 422, 494, 592, 610, 615, 617, 626, 633, 643, 653, 670, 674, 690, 698, 927, 985, 992], "eager": [50, 51, 52, 53, 54, 55, 70, 74, 100, 130, 131, 159, 225, 254, 334, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 366, 368, 369, 370, 371, 372, 541, 562, 575, 580, 591, 603, 624, 690, 768, 770, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 806, 807, 808, 809, 810, 992], "pars": [50, 102, 103, 106, 113, 115, 116, 136, 158, 200, 207, 221, 231, 234, 254, 397, 444, 481, 493, 499, 510, 512, 537, 538, 542, 544, 546, 547, 553, 562, 568, 571, 580, 581, 592, 606, 623, 649, 657, 662, 668, 672, 690, 833, 926, 932, 943, 945, 985], "against": [50, 287, 690, 718, 992, 993], "eagerli": [50, 305], "unset": [50, 124, 305, 360, 798], "init": [50, 132], "eager_execut": [50, 992], "itself": [50, 123, 632, 690, 992], "alwai": [50, 102, 124, 135, 236, 254, 430, 510, 585, 634, 674, 690, 699, 943, 985, 992, 993], "impact": [50, 159, 254, 624, 690, 992], "declar": [50, 90, 92, 93, 94, 96, 254, 690], "godfath": 50, "1972": 50, "6_000_000": 50, "134_821_952": 50, "dark": 50, "knight": 50, "2008": 50, "185_000_000": 50, "533_316_061": 50, "schindler": 50, "1993": 50, "22_000_000": 50, "96_067_179": 50, "pulp": 50, "fiction": 50, "1994": 50, "8_000_000": 50, "107_930_000": 50, "shawshank": 50, "redempt": 50, "25_000_000": 50, "28_341_469": 50, "release_year": 50, "budget": 50, "gross": 50, "imdb_scor": 50, "ctx": [50, 51, 52, 53, 54, 55], "film": 50, "1990": 50, "BY": [50, 52], "desc": [50, 52], "AS": [50, 992], "decad": 50, "total_gross": 50, "n_film": 50, "2000": [50, 344, 346, 353, 354, 357, 778, 791, 792, 795], "533316061": 50, "232338648": 50, "1970": [50, 118], "134821952": 50, "register_glob": [51, 53, 992], "register_mani": [51, 52, 55], "frame_data": [51, 54], "execut": [51, 52, 54, 73, 175, 254, 287, 314, 592, 607, 634, 643, 690, 718, 992], "collect": [51, 52, 55, 68, 72, 113, 114, 118, 125, 127, 130, 142, 144, 175, 212, 254, 268, 401, 541, 546, 562, 580, 592, 606, 612, 613, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 641, 642, 644, 646, 647, 649, 651, 652, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 668, 669, 670, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 690, 840, 985, 992, 993], "global": [52, 56, 75, 125, 422, 592, 992], "scope": [52, 55, 132, 992], "automat": [52, 55, 90, 92, 93, 94, 96, 97, 102, 103, 104, 113, 125, 127, 129, 200, 231, 254, 422, 497, 503, 509, 592, 649, 668, 690, 860, 930, 936, 942, 985, 992], "map": [52, 53, 92, 93, 102, 103, 107, 108, 111, 112, 113, 115, 135, 145, 171, 192, 196, 197, 213, 254, 361, 368, 421, 422, 533, 539, 592, 614, 646, 690, 799, 806, 860, 985, 992], "recent": [52, 445, 592, 873, 985, 992], "df1": [52, 54, 55, 56, 65, 73, 75, 120, 148, 154, 218, 229, 254], "x": [52, 53, 65, 73, 97, 102, 103, 104, 113, 123, 125, 146, 164, 167, 169, 173, 180, 188, 254, 261, 265, 268, 283, 292, 374, 388, 390, 391, 392, 412, 417, 419, 420, 435, 437, 441, 443, 447, 454, 475, 478, 506, 519, 527, 529, 536, 539, 551, 552, 560, 566, 567, 574, 592, 629, 634, 638, 656, 690, 695, 699, 821, 851, 908, 911, 939, 969, 985, 992], "df2": [52, 54, 55, 56, 65, 73, 75, 120, 148, 154, 218, 229, 254], "t": [52, 53, 73, 106, 113, 135, 187, 223, 225, 254, 268, 287, 329, 360, 373, 375, 376, 377, 446, 491, 497, 503, 509, 510, 512, 539, 585, 592, 642, 663, 690, 699, 718, 760, 798, 812, 814, 815, 816, 898, 924, 930, 936, 942, 943, 945, 976, 985], "join": [52, 56, 65, 72, 73, 75, 174, 226, 254, 396, 444, 592, 610, 615, 617, 630, 643, 653, 665, 669, 690], "named_fram": [53, 992], "lf1": [53, 55], "o": [53, 107, 115, 313, 329, 490, 528, 592, 743, 760, 923, 970, 985], "lf2": [53, 55, 690], "p": [53, 67, 187, 254, 446, 580, 592, 642, 690], "q": [53, 580], "r": [53, 446, 486, 490, 491, 492, 500, 592, 919, 923, 924, 925, 933], "lf3": [53, 690], "lf4": [53, 690], "either": [53, 125, 160, 170, 175, 178, 186, 196, 209, 254, 510, 537, 542, 580, 625, 632, 690, 943], "tbl1": [53, 55], "tbl2": [53, 55], "tbl3": 53, "tbl4": 53, "statement": [54, 585], "hello_world": 54, "baz": [54, 165, 166, 188, 224, 254, 505, 507, 628, 664, 690, 940], "hello_data": 54, "foo_bar": [54, 566], "registr": [55, 603], "lifetim": [55, 132], "context": [55, 56, 129, 130, 184, 237, 254, 262, 268, 287, 314, 323, 384, 430, 480, 481, 533, 539, 549, 559, 562, 575, 578, 591, 592, 603, 669, 675, 690, 718, 992], "manag": [55, 56, 603, 992], "often": [55, 159, 160, 254, 285, 454, 592, 624, 625, 690, 716], "want": [55, 93, 100, 131, 135, 148, 184, 254, 268, 318, 319, 320, 384, 420, 422, 458, 459, 460, 461, 462, 464, 465, 466, 551, 560, 575, 592, 610, 626, 633, 690, 698, 699, 750, 751, 752, 967, 985], "df0": 55, "exit": [55, 56, 132, 992], "construct": [55, 90, 92, 93, 94, 95, 96, 100, 131, 254, 422, 575, 592, 622, 645, 690, 985], "persist": [55, 654, 655, 690], "through": [55, 985], "tbl0": 55, "remain": [55, 102, 103, 113, 146, 254, 506, 507, 634, 690, 813, 939, 940, 985], "text": [55, 498, 500, 501, 931, 993], "misc": 55, "testing1234": 55, "test1": 55, "test2": 55, "test3": 55, "temporarili": [56, 129, 159, 160, 254, 624, 625, 690], "cach": [56, 72, 75, 107, 113, 115, 117, 422, 458, 459, 460, 461, 462, 464, 465, 466, 510, 511, 512, 514, 592, 610, 615, 617, 643, 653, 690, 943, 944, 945, 947], "categori": [56, 75, 316, 746, 761, 829, 877, 985], "until": [56, 175, 254, 314, 592], "finish": [56, 78, 148, 254, 698, 985], "invalid": [56, 102, 103, 113, 493, 494, 499, 529, 592, 926, 927, 932], "outermost": 56, "color": [56, 75, 236, 674], "red": [56, 75, 236, 674], "green": [56, 75, 236, 674], "blue": [56, 75], "orang": [56, 75, 139, 237, 238, 240, 241, 242, 244, 246, 247, 254, 675, 676, 678, 679, 680, 682, 684, 685], "uint8": [56, 75, 122, 124, 216, 217, 254, 327, 328, 422, 521, 536, 592, 758, 759, 955, 985, 993], "yellow": [56, 75], "black": [56, 75, 135, 254], "succe": [56, 102, 103, 113], "df_join": [56, 75], "cat": [56, 75, 216, 254, 485, 513, 515, 527, 547, 588, 592, 761, 829, 877, 918, 981, 985], "u8": [56, 75, 215, 216, 254, 422, 536, 592, 963, 985, 993], "schemadict": [57, 90, 92, 93, 94, 95, 96, 113, 199, 254, 580, 634, 648, 674, 690], "composit": [57, 124, 993], "dai": [58, 74, 159, 160, 172, 174, 227, 254, 341, 345, 352, 353, 354, 357, 358, 359, 361, 366, 368, 369, 370, 372, 458, 459, 460, 461, 462, 464, 465, 466, 554, 555, 556, 592, 624, 625, 630, 690, 791, 792, 795, 796, 799, 806, 808], "unsign": [59, 60, 61, 62, 453, 592, 842, 881, 985], "could": [63, 78, 144, 159, 254, 315, 551, 560, 592, 613, 624, 690, 744, 985], "static": [63, 674], "utf": 64, "frametyp": [65, 992], "joinstrategi": [65, 173, 254, 629, 690], "outer": [65, 73, 173, 254, 629, 690], "descend": [65, 136, 201, 207, 221, 254, 278, 301, 451, 470, 480, 481, 542, 592, 606, 650, 657, 662, 690, 708, 732, 848, 879, 901, 913, 985], "fill": [65, 73, 100, 131, 149, 150, 204, 225, 254, 307, 325, 328, 382, 383, 389, 396, 458, 459, 461, 464, 465, 466, 472, 496, 502, 516, 561, 575, 592, 618, 619, 652, 669, 690, 820, 821, 871, 886, 887, 889, 892, 893, 894, 904, 929, 935, 949, 985], "sort": [65, 66, 120, 124, 136, 159, 160, 174, 181, 187, 188, 201, 221, 227, 239, 248, 254, 278, 316, 384, 470, 481, 533, 535, 542, 592, 606, 615, 624, 625, 630, 639, 642, 643, 650, 653, 662, 677, 686, 690, 708, 746, 848, 901, 971, 974, 985, 993], "origin": [65, 102, 103, 223, 254, 360, 409, 422, 444, 453, 486, 491, 492, 494, 496, 502, 516, 592, 663, 690, 761, 798, 860, 877, 919, 924, 925, 927, 929, 935, 949, 985], "In": [65, 105, 114, 117, 125, 127, 135, 146, 148, 159, 160, 184, 254, 268, 592, 624, 625, 690, 698, 813, 880, 985], "duplic": [65, 79, 167, 173, 174, 223, 254, 398, 592, 629, 630, 663, 690, 835, 985], "behaviour": [65, 73, 485, 491, 492, 500, 529, 592, 918, 924, 925, 933], "strategi": [65, 73, 102, 122, 123, 124, 125, 127, 150, 159, 173, 174, 183, 254, 268, 305, 383, 592, 619, 624, 629, 630, 690, 736, 821, 985], "suitabl": [65, 73, 123, 135, 254, 268, 469, 592, 699, 897, 985, 993], "get": [65, 74, 98, 108, 112, 129, 136, 139, 145, 155, 156, 159, 160, 162, 163, 167, 169, 170, 176, 183, 196, 199, 202, 206, 210, 221, 230, 239, 248, 254, 262, 276, 277, 278, 280, 289, 293, 294, 306, 324, 325, 326, 327, 328, 341, 357, 385, 393, 398, 400, 408, 411, 414, 423, 424, 425, 430, 432, 434, 439, 440, 450, 479, 483, 495, 498, 521, 522, 530, 534, 559, 564, 568, 569, 570, 571, 579, 582, 584, 592, 606, 611, 614, 621, 624, 625, 626, 631, 633, 648, 656, 660, 662, 667, 677, 686, 690, 706, 707, 708, 709, 710, 720, 724, 725, 737, 748, 756, 757, 758, 759, 775, 795, 825, 828, 833, 835, 838, 850, 855, 861, 863, 864, 866, 869, 870, 874, 875, 878, 912, 915, 928, 931, 956, 962, 963, 971, 975, 976, 985], "speedup": [65, 135, 171, 254, 268, 592, 699, 985], "receiv": [65, 113, 135, 187, 254, 446, 592, 642, 690, 993], "now": [65, 160, 254, 510, 512, 625, 690, 943, 945], "One": [65, 141, 184, 188, 254, 265, 443, 592, 762, 985], "whose": [65, 174, 188, 254, 378, 558, 592, 630, 690], "uniqu": [65, 122, 123, 124, 127, 169, 184, 245, 254, 269, 280, 400, 408, 438, 510, 511, 512, 514, 531, 533, 540, 572, 592, 683, 690, 710, 762, 838, 850, 867, 943, 944, 945, 947, 972, 974, 985], "post": 65, "constrain": 65, "newli": 65, "boolean": [65, 70, 136, 151, 153, 207, 221, 254, 264, 265, 266, 284, 308, 344, 384, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 443, 481, 493, 535, 536, 542, 580, 592, 606, 620, 657, 662, 690, 696, 697, 709, 715, 738, 778, 822, 833, 834, 835, 837, 838, 840, 841, 843, 844, 845, 846, 850, 874, 875, 899, 918, 977, 985], "know": [65, 305, 498, 931, 967, 976, 985], "first": [65, 102, 103, 106, 113, 116, 124, 135, 157, 159, 162, 174, 176, 183, 187, 188, 210, 216, 222, 223, 227, 239, 254, 278, 280, 287, 290, 291, 305, 329, 354, 357, 361, 393, 400, 414, 422, 446, 469, 481, 491, 493, 494, 500, 501, 544, 551, 560, 564, 585, 592, 610, 624, 626, 630, 633, 642, 663, 669, 677, 690, 708, 718, 721, 722, 736, 760, 762, 792, 795, 799, 828, 838, 855, 860, 897, 924, 926, 927, 933, 934, 956, 965, 985, 993], "2022": [65, 74, 141, 157, 159, 160, 174, 227, 254, 335, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 510, 556, 562, 592, 624, 625, 630, 690, 769, 779, 795, 799, 806, 943], "y": [65, 73, 97, 123, 125, 146, 167, 169, 173, 180, 188, 254, 261, 265, 283, 292, 364, 367, 374, 390, 391, 412, 419, 441, 443, 454, 510, 511, 512, 529, 536, 566, 592, 629, 638, 656, 690, 695, 802, 805, 943, 944, 945, 985], "df3": [65, 254], "set_tbl_format": 65, "09": [65, 125, 160, 254, 335, 345, 353, 354, 625, 690, 773], "01": [65, 74, 125, 130, 141, 157, 159, 160, 227, 254, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 510, 511, 512, 514, 556, 624, 625, 690, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 943, 944, 945, 947], "02": [65, 74, 130, 157, 159, 160, 174, 227, 254, 334, 335, 341, 342, 343, 350, 351, 352, 353, 354, 357, 360, 361, 362, 363, 366, 368, 369, 371, 458, 459, 460, 461, 462, 464, 465, 466, 467, 510, 511, 512, 514, 556, 592, 624, 625, 630, 690, 736, 768, 769, 771, 772, 775, 776, 777, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 807, 808, 809, 943, 944, 945, 947], "03": [65, 74, 97, 159, 160, 227, 254, 334, 335, 336, 340, 341, 343, 351, 352, 353, 354, 360, 361, 362, 363, 364, 366, 367, 368, 369, 371, 511, 514, 624, 625, 690, 768, 769, 770, 773, 774, 775, 776, 777, 780, 781, 782, 783, 785, 787, 789, 790, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 804, 805, 807, 808, 809, 944, 947], "af1": 65, "af2": 65, "af3": 65, "keep": [65, 102, 103, 113, 223, 226, 227, 254, 409, 422, 544, 592, 663, 665, 690, 761, 860, 877, 985], "easili": [65, 200, 231, 234, 254, 545, 580, 649, 668, 672, 690], "dot": [65, 592, 653, 690, 985], "product": [65, 140, 254, 327, 331, 539, 592, 758, 764, 985], "fill_nul": [65, 149, 254, 592, 618, 669, 690, 985], "167": 65, "47": 65, "callabl": [66, 67, 68, 69, 113, 135, 153, 187, 236, 254, 268, 305, 420, 421, 446, 457, 539, 551, 552, 560, 567, 574, 592, 634, 642, 674, 690, 699, 736, 885, 985], "decor": [66, 67, 68, 69, 125, 127, 135, 254, 268, 592, 699, 985], "under": [66, 67, 68, 69, 586, 588, 593, 594, 598, 599, 600, 979, 981, 986, 989, 990, 991], "access": [66, 67, 68, 69, 171, 196, 197, 254, 422, 592, 669, 690, 993], "by_first_letter_of_column_nam": 66, "f": [66, 103, 141, 157, 172, 212, 222, 225, 254, 261, 268, 305, 473, 490, 510, 512, 539, 546, 567, 592, 736, 923, 943, 945], "fromkei": [66, 68], "by_first_letter_of_column_valu": 66, "starts_with": [66, 485, 489, 922], "slice": [66, 72, 146, 162, 172, 210, 254, 291, 303, 457, 458, 459, 460, 461, 462, 464, 465, 466, 592, 610, 615, 617, 634, 643, 653, 654, 655, 690, 722, 734, 813, 828, 885, 886, 887, 888, 889, 890, 892, 893, 894, 956, 985], "to_seri": [66, 70, 155, 254, 510, 575, 943], "xx": [66, 68, 124, 127], "xy": [66, 68], "yy": [66, 68, 124, 127], "yz": [66, 68], "a2": [66, 68], "b1": [66, 68], "b2": [66, 68], "pow_n": 67, "powersofn": 67, "next": [67, 307, 451, 592, 879, 985], "ceil": [67, 592, 985], "previou": [67, 132, 445, 518, 592, 873, 985], "floor": [67, 592, 985], "nearest": [67, 174, 190, 246, 254, 317, 387, 450, 462, 573, 592, 630, 644, 684, 690, 747, 824, 832, 878, 890, 985], "24": [67, 119, 135, 146, 160, 254, 327, 329, 343, 437, 592, 625, 690, 760, 777, 852, 985], "001": [67, 346, 347, 349, 356, 556, 784, 786, 794], "next_pow2": 67, "prev_pow2": 67, "nearest_pow2": 67, "split_by_column_dtyp": 68, "collect_al": 68, "31": [69, 74, 125, 335, 339, 340, 352, 353, 357, 369, 510, 554, 555, 562, 566, 769, 773, 774, 791, 795, 943, 993], "42": [69, 160, 161, 254, 625, 690, 827, 985], "961": 69, "1764": 69, "4160": 69, "evalu": [70, 74, 100, 130, 131, 149, 151, 174, 254, 265, 279, 305, 329, 395, 397, 401, 422, 443, 537, 538, 541, 557, 575, 580, 585, 592, 620, 627, 629, 630, 690, 709, 760, 977, 985], "immedi": [70, 74, 100, 130, 131, 451, 541, 575, 580, 592, 879, 985], "arg_tru": [70, 592, 985], "build": [71, 91, 993], "wa": 71, "compil": [71, 281, 282, 712, 713], "gate": 71, "info": [71, 105, 114, 119, 344, 778], "otherwis": [71, 124, 129, 181, 200, 254, 305, 309, 318, 319, 320, 360, 375, 376, 377, 446, 453, 485, 487, 537, 538, 553, 568, 571, 581, 585, 592, 639, 649, 690, 699, 736, 739, 750, 751, 752, 798, 814, 815, 816, 881, 899, 900, 918, 920, 985], "depend": [71, 119, 268, 281, 282, 430, 451, 539, 559, 562, 592, 712, 713, 879, 985, 993], "host": [71, 102, 107, 111, 115, 117], "git": 71, "lazy_fram": 72, "type_coercion": [72, 610, 615, 617, 643, 653, 654, 655, 690], "predicate_pushdown": [72, 610, 615, 617, 634, 643, 653, 654, 655, 690], "projection_pushdown": [72, 610, 615, 617, 634, 643, 653, 654, 655, 690], "simplify_express": [72, 610, 615, 617, 643, 653, 654, 655, 690], "no_optim": [72, 610, 617, 634, 643, 654, 655, 690], "slice_pushdown": [72, 610, 615, 617, 634, 643, 653, 654, 655, 690], "common_subplan_elimin": [72, 610, 615, 617, 643, 653, 690], "graph": [72, 175, 254, 627, 669, 690], "parallel": [72, 73, 99, 104, 111, 117, 159, 174, 175, 187, 254, 287, 329, 592, 603, 624, 629, 630, 690, 718, 760, 985], "threadpool": [72, 129], "coercion": [72, 454, 592, 610, 615, 617, 643, 653, 654, 655, 690], "optim": [72, 111, 113, 115, 116, 117, 171, 175, 187, 191, 197, 223, 254, 610, 615, 617, 634, 643, 653, 654, 655, 663, 670, 690], "predic": [72, 113, 115, 116, 117, 118, 151, 170, 196, 254, 384, 535, 560, 592, 610, 615, 617, 620, 634, 643, 646, 653, 654, 655, 670, 690, 822, 899, 900, 985], "pushdown": [72, 610, 615, 617, 634, 643, 646, 653, 654, 655, 670, 690, 899, 900, 985], "project": [72, 113, 115, 116, 117, 268, 480, 481, 592, 610, 615, 617, 634, 643, 646, 653, 654, 655, 671, 690], "turn": [72, 102, 103, 113, 533, 592, 610, 615, 617, 634, 643, 654, 655, 690], "off": [72, 102, 103, 113, 533, 592, 610, 615, 617, 634, 643, 654, 655, 690], "Will": [72, 222, 254, 610, 615, 617, 643, 653, 690, 985], "try": [72, 85, 87, 102, 103, 106, 107, 111, 113, 115, 117, 610, 615, 617, 643, 653, 690], "branch": [72, 610, 615, 617, 643, 653, 690], "subplan": [72, 610, 615, 617, 643, 653, 690], "occur": [72, 285, 436, 451, 592, 610, 615, 617, 643, 653, 690, 716, 865, 879, 985], "union": [72, 73, 610, 615, 617, 643, 653, 690], "part": [72, 90, 125, 492, 506, 507, 610, 615, 617, 643, 653, 669, 690, 773, 776, 783, 785, 788, 790, 793, 800, 810, 925, 939, 940], "fashion": [72, 173, 254, 610, 615, 617, 643, 653, 690], "item": [73, 103, 196, 198, 254, 284, 290, 292, 380, 468, 507, 592, 715, 721, 723, 818, 896, 940, 985], "iter": [73, 126, 128, 136, 158, 159, 160, 171, 172, 186, 196, 197, 200, 201, 207, 221, 222, 231, 233, 234, 254, 329, 378, 444, 481, 537, 538, 542, 544, 545, 546, 547, 553, 558, 568, 571, 578, 580, 581, 585, 592, 606, 623, 624, 625, 649, 650, 657, 662, 668, 672, 690, 760, 985, 993], "polarstyp": 73, "concatmethod": 73, "vertic": [73, 148, 225, 229, 254, 484, 917], "rechunk": [73, 90, 95, 102, 103, 107, 111, 113, 115, 116, 117, 148, 254, 592, 698, 748, 866, 985], "combin": [73, 74, 85, 87, 159, 160, 161, 174, 227, 254, 265, 279, 357, 368, 443, 497, 503, 509, 592, 624, 625, 630, 653, 690, 795, 806, 930, 936, 942], "concaten": [73, 153, 187, 254, 446, 546, 547, 592, 642, 690, 748, 866, 985], "diagon": [73, 222, 254], "vstack": [73, 148, 254], "find": [73, 152, 254, 469, 592, 897, 985], "miss": [73, 102, 103, 113, 149, 254, 307, 375, 376, 377, 389, 396, 403, 405, 592, 618, 690, 814, 815, 816, 976, 985], "stack": [73, 164, 229, 254], "don": [73, 135, 223, 225, 254, 268, 287, 329, 539, 592, 663, 690, 699, 718, 760, 898, 976, 985], "auto": [73, 90, 92, 93, 94, 96, 111, 117, 222, 254, 690, 993], "logic": [73, 135, 236, 254, 265, 443, 527, 536, 592, 622, 629, 645, 671, 674, 690, 699, 969, 985], "align_fram": 73, "pattern": [73, 102, 103, 113, 115, 116, 117, 171, 254, 428, 485, 486, 491, 492, 500, 501, 899, 900, 918, 919, 924, 925, 933, 934, 985], "collis": 73, "need": [73, 97, 100, 102, 103, 106, 120, 121, 131, 159, 160, 205, 217, 254, 305, 422, 473, 495, 575, 592, 624, 625, 690, 905, 928, 985], "sure": [73, 90, 95, 102, 103, 104, 107, 111, 191, 254, 541], "contigu": [73, 90, 95, 102, 103, 107, 111, 113, 115, 116, 117, 191, 254], "relev": 73, "df_h1": 73, "l1": 73, "l2": 73, "df_h2": 73, "r1": 73, "r2": 73, "r3": 73, "df_d1": 73, "df_d2": 73, "df_a1": 73, "df_a2": 73, "df_a3": 73, "interv": [74, 130, 159, 160, 227, 254, 344, 361, 362, 368, 397, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 690, 773, 775, 776, 778, 783, 785, 788, 790, 793, 796, 797, 799, 800, 804, 806, 807, 808, 810, 833, 985], "timedelta": [74, 130, 159, 160, 227, 254, 339, 341, 342, 345, 350, 352, 357, 358, 359, 361, 362, 366, 368, 369, 370, 372, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 690, 780, 782, 787, 795, 799, 806, 869, 870, 985], "1d": [74, 159, 160, 174, 227, 254, 334, 343, 351, 357, 361, 368, 371, 458, 459, 460, 461, 462, 464, 465, 466, 566, 592, 624, 625, 630, 690, 768, 775, 777, 780, 781, 782, 787, 789, 795, 799, 804, 806, 808, 809], "_nodefault": [74, 188, 254], "no_default": [74, 188, 254], "closedinterv": [74, 130, 159, 160, 254, 397, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 690, 833, 985], "lower": [74, 113, 130, 159, 190, 246, 254, 318, 320, 397, 418, 421, 450, 453, 462, 541, 573, 592, 617, 624, 644, 684, 690, 752, 833, 859, 878, 881, 890, 973, 985], "bound": [74, 102, 103, 130, 146, 159, 254, 290, 304, 305, 318, 319, 320, 397, 418, 532, 541, 592, 624, 690, 721, 735, 751, 752, 813, 833, 859, 973, 985], "upper": [74, 102, 103, 130, 146, 159, 254, 305, 318, 319, 397, 532, 541, 592, 624, 690, 751, 813, 833, 859, 973, 985], "period": [74, 130, 159, 160, 203, 204, 254, 299, 361, 368, 375, 376, 377, 445, 471, 472, 592, 624, 625, 651, 652, 690, 730, 799, 806, 814, 815, 816, 873, 903, 904, 985], "durat": [74, 130, 174, 227, 254, 340, 343, 347, 349, 351, 356, 363, 371, 527, 592, 630, 690, 774, 777, 784, 786, 789, 794, 801, 809, 969, 985], "3d12h4m25": [74, 159, 160, 174, 227, 254, 361, 368, 624, 625, 630, 690, 799, 806], "hour": [74, 130, 159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 555, 556, 583, 592, 624, 625, 630, 690, 795, 799, 806], "minut": [74, 130, 159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 555, 556, 583, 592, 624, 625, 630, 690, 795, 799, 806], "deprec": [74, 510, 512, 575, 943, 945], "sinc": [74, 105, 114, 341, 510, 512, 562, 575, 775, 943, 945], "17": [74, 119, 125, 130, 234, 467, 562, 575, 592, 672, 754, 799, 985, 993], "tempor": [74, 130, 159, 160, 171, 197, 214, 254, 397, 458, 459, 460, 461, 462, 464, 465, 466, 592, 603, 624, 625, 690, 833, 849, 985], "window": [74, 130, 159, 160, 254, 329, 361, 368, 375, 376, 377, 444, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 546, 576, 577, 592, 624, 625, 690, 760, 799, 806, 814, 815, 816, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 985], "granular": 74, "finer": 74, "permut": 74, "1mo": [74, 159, 160, 174, 227, 254, 336, 340, 353, 354, 357, 360, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 630, 690, 770, 774, 790, 791, 792, 795, 796, 797, 798, 799, 806, 807], "dtrang": 74, "1985": 74, "04": [74, 118, 159, 227, 254, 335, 336, 339, 340, 343, 350, 351, 352, 353, 354, 358, 360, 361, 362, 363, 364, 367, 369, 370, 371, 510, 556, 624, 690, 770, 774, 777, 783, 785, 788, 789, 790, 791, 792, 793, 797, 798, 800, 801, 802, 805, 807, 808, 809, 943], "05": [74, 118, 120, 121, 125, 174, 227, 254, 335, 336, 340, 360, 362, 364, 367, 630, 690, 769, 770, 771, 772, 773, 774, 798, 799, 802, 803, 805, 806, 808], "07": [74, 130, 335, 339, 358, 360, 361, 368, 370, 510, 562, 769, 773, 798, 808, 943], "08": [74, 120, 121, 125, 130, 160, 254, 335, 361, 510, 556, 625, 690, 799, 806, 943], "america": 74, "new_york": 74, "\u03bc": [74, 97, 125, 159, 160, 174, 227, 254, 334, 335, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 510, 512, 556, 562, 624, 625, 630, 690, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 807, 808, 809, 810, 943, 945], "est": 74, "month_end": 74, "last": [74, 136, 162, 174, 176, 188, 207, 210, 221, 223, 248, 254, 278, 290, 303, 329, 339, 353, 358, 368, 369, 480, 507, 522, 582, 592, 606, 630, 657, 660, 662, 663, 686, 690, 708, 721, 734, 760, 773, 791, 796, 807, 828, 855, 940, 956, 985], "month": [74, 159, 160, 174, 227, 254, 339, 353, 354, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 554, 555, 592, 624, 625, 630, 690, 773, 791, 792, 795, 799, 806], "28": [74, 159, 160, 174, 213, 227, 254, 261, 357, 360, 361, 368, 371, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 630, 690, 795, 798, 799, 806, 809, 993], "disabl": [75, 171, 254], "equal": [75, 102, 103, 113, 120, 121, 154, 159, 174, 181, 254, 305, 374, 390, 412, 457, 458, 459, 460, 461, 462, 464, 465, 466, 495, 496, 502, 516, 541, 576, 577, 592, 624, 630, 639, 690, 736, 885, 886, 887, 888, 889, 890, 892, 893, 894, 898, 928, 929, 935, 949, 985, 993], "encount": [76, 159, 254, 439, 440, 493, 494, 548, 551, 560, 592, 624, 690, 869, 870, 926, 927, 985], "certain": [80, 105, 114, 165, 227, 254, 545, 610, 643, 654, 655, 690, 985], "least": [82, 125, 445, 533, 592, 873, 974, 985], "unexpect": [83, 254], "caus": [83, 91, 102, 103, 113, 134, 148, 254, 698, 985], "panic": 83, "mismatch": 85, "incompat": 87, "pa": [90, 118], "chunkedarrai": [90, 183, 254, 764, 985], "recordbatch": [90, 172, 254], "schemadefinit": [90, 92, 93, 94, 96, 254, 690], "schema_overrid": [90, 92, 93, 94, 95, 96, 172, 217, 254, 690], "copi": [90, 91, 134, 137, 138, 172, 212, 217, 218, 231, 254, 381, 516, 592, 608, 609, 668, 690, 695, 749, 753, 766, 819, 949, 962, 967, 968, 985], "closest": 90, "pair": [90, 92, 93, 94, 96, 124, 192, 254, 646, 690, 993], "sever": [90, 92, 93, 94, 96, 254, 690, 993], "wai": [90, 92, 93, 94, 96, 142, 158, 172, 187, 207, 234, 254, 444, 446, 481, 491, 545, 592, 612, 623, 642, 657, 672, 690, 924], "equival": [90, 92, 93, 94, 96, 105, 170, 184, 254, 261, 265, 374, 388, 390, 391, 412, 419, 435, 437, 441, 443, 447, 498, 519, 529, 536, 592, 690, 852, 931, 946, 948, 985], "form": [90, 92, 93, 94, 96, 171, 197, 225, 254, 445, 592, 690, 873, 985], "them": [90, 92, 93, 94, 96, 113, 148, 159, 160, 174, 181, 227, 254, 292, 397, 439, 440, 546, 592, 624, 625, 630, 639, 690, 698, 723, 869, 870, 985], "dimens": [90, 92, 94, 96, 254, 455, 592, 690, 883, 985], "allow_copi": [91, 134], "interchang": [91, 134], "__dataframe__": 91, "convers": [91, 134, 172, 218, 254, 510, 511, 512, 514, 603, 943, 944, 945, 947, 966, 967, 968, 985], "detail": [91, 104, 120, 121, 134, 254, 690, 993], "latest": [91, 105, 114, 134, 389, 431, 592], "index": [91, 95, 98, 104, 119, 134, 152, 159, 160, 165, 170, 174, 188, 194, 196, 206, 219, 227, 232, 254, 262, 276, 277, 278, 280, 281, 282, 290, 300, 304, 305, 357, 458, 459, 460, 461, 462, 464, 465, 466, 469, 479, 491, 504, 523, 592, 624, 625, 630, 656, 670, 690, 706, 707, 708, 709, 710, 712, 713, 721, 731, 735, 736, 795, 852, 871, 897, 900, 912, 924, 937, 957, 985], "runtimeerror": 91, "from_panda": [91, 106], "from_arrow": 91, "effici": [91, 172, 254], "clone": [92, 93, 94, 95, 96, 137, 217, 218, 254, 608, 690, 749, 966, 967, 968, 976, 985], "dimension": [92, 94, 96, 254, 690, 985], "infer_schema_length": [93, 96, 102, 103, 106, 113, 116, 254, 690], "NOT": [93, 120, 121, 429, 992], "typic": [93, 135, 254, 699, 985], "clearer": 93, "load": [93, 95, 105, 114, 126, 128, 254, 603, 626, 633, 690, 993], "_partial_": [93, 254, 690], "omit": [93, 97, 123, 125, 127, 130, 132, 184, 254], "mani": [93, 96, 104, 148, 254, 698, 985], "scan": [93, 96, 102, 103, 111, 113, 114, 115, 116, 117, 118, 617, 626, 633, 690], "slow": [93, 96, 102, 103, 113, 268, 329, 592, 760, 985], "partial": 93, "present": [93, 120, 125, 401, 592, 976, 985], "np": [94, 151, 217, 254, 523, 592, 690, 837, 841, 843, 844, 885, 957, 985], "ndarrai": [94, 151, 217, 254, 523, 592, 690, 764, 897, 900, 957, 967, 985], "numpi": [94, 119, 140, 217, 218, 254, 439, 440, 592, 690, 837, 841, 843, 844, 869, 870, 885, 967, 968, 976, 985], "columnar": [94, 96, 171, 197, 254], "interpret": [94, 96, 102, 103, 113, 254, 690], "yield": [94, 96, 102, 103, 113, 146, 148, 222, 254, 690, 698, 813, 985], "conclus": [94, 96, 254, 690], "nan_to_nul": [95, 254, 690, 985], "include_index": 95, "datetimeindex": [95, 764, 985], "panda": [95, 106, 119, 218, 254, 353, 354, 527, 592, 690, 791, 792, 968, 969, 985], "instal": [95, 102, 103, 104, 107, 111, 119, 140, 217, 218, 254, 653, 690, 968, 985], "nan": [95, 120, 121, 125, 134, 149, 218, 254, 332, 333, 374, 382, 390, 391, 396, 403, 405, 406, 407, 412, 419, 423, 434, 439, 440, 441, 529, 548, 592, 618, 690, 701, 705, 765, 820, 843, 844, 869, 870, 885, 968, 985, 993], "convert": [95, 105, 106, 114, 134, 213, 214, 215, 216, 217, 220, 254, 305, 336, 364, 367, 421, 499, 510, 511, 512, 514, 592, 690, 736, 770, 802, 805, 932, 943, 944, 945, 947, 954, 965, 966, 967, 968, 976, 985], "pd": [95, 106, 527, 592, 969, 985], "pd_df": 95, "pd_seri": 95, "tbl": [97, 99, 103], "reconstruct": 97, "repr": [97, 125, 127], "trim": 97, "whitespac": [97, 497, 503, 509, 930, 936, 942], "prompt": 97, "extract": [97, 339, 340, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 355, 356, 358, 359, 362, 363, 369, 370, 372, 446, 492, 493, 494, 592, 771, 772, 773, 774, 776, 777, 779, 783, 784, 785, 786, 788, 789, 790, 793, 794, 796, 797, 800, 801, 803, 807, 808, 810, 925, 926, 927], "to_init_repr": [97, 254, 985], "truncat": [97, 159, 254, 357, 624, 643, 690, 795], "identifi": [97, 180, 186, 223, 254, 638, 663, 690], "compound": 97, "struct": [97, 184, 200, 220, 224, 231, 254, 305, 422, 493, 506, 507, 533, 551, 552, 553, 567, 592, 649, 664, 668, 690, 736, 926, 939, 940], "neither": [97, 106, 198, 254, 305, 736], "source_ac": 97, "source_cha": 97, "ident": [97, 137, 138, 254, 364, 608, 609, 690, 749, 753, 802, 985], "timestamp": [97, 360, 562, 798], "tor_id": 97, "nnel_id": 97, "asia": [97, 771, 772, 803], "tokyo": 97, "123456780": 97, "9876543210": 97, "56": [97, 130, 525, 592], "59": [97, 124, 130, 335, 350, 362, 555, 583, 769, 788, 800], "663053": 97, "jst": 97, "803065983": 97, "2055938745": 97, "38": [97, 125], "18": [97, 130, 160, 254, 328, 361, 368, 371, 396, 409, 510, 512, 592, 625, 643, 690, 809, 943, 945], "050545": 97, "source_actor_id": 97, "source_channel_id": 97, "sr": [97, 695, 985], "to_list": [97, 160, 254, 625, 690, 918, 985], "datatypeclass": 98, "uint32": [98, 119, 146, 254, 278, 281, 282, 294, 339, 342, 346, 348, 350, 352, 355, 358, 359, 362, 369, 370, 454, 486, 495, 498, 523, 527, 592, 709, 712, 713, 725, 744, 773, 776, 783, 785, 788, 790, 793, 796, 797, 800, 807, 808, 813, 842, 898, 919, 969, 985], "regular": [98, 171, 196, 197, 227, 254, 378, 485, 486, 491, 492, 500, 501, 545, 558, 568, 571, 581, 592, 918, 919, 924, 925, 933, 934], "uint64": [98, 161, 254, 281, 282, 392, 453, 592, 712, 713, 827, 881, 985], "bigidx": 98, "read": [99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 148, 254, 420, 585, 592, 617, 622, 645, 690, 698, 985], "batch": [99, 103, 116, 634, 690], "over": [99, 102, 103, 105, 113, 125, 135, 148, 171, 172, 196, 197, 222, 233, 236, 254, 268, 329, 383, 396, 420, 421, 451, 457, 458, 459, 460, 461, 462, 464, 465, 466, 539, 551, 552, 560, 567, 574, 592, 674, 698, 699, 760, 885, 886, 887, 889, 893, 985], "fetch": [99, 113, 175, 254, 608, 610, 626, 633, 690], "ideal": 99, "read_csv_batch": [99, 604], "tpch": [99, 103], "tables_scale_100": [99, 103], "lineitem": [99, 103, 104], "try_parse_d": [99, 102, 103, 113], "syntact": [100, 131, 226, 254, 558, 559, 563, 573, 578, 665, 690, 914, 985], "sugar": [100, 131, 226, 254, 558, 559, 563, 573, 578, 665, 690, 914, 985], "repeat": [100, 107, 115, 131, 452, 454, 592], "pre": [100, 131, 305, 575], "i8": [100, 131, 473, 575, 592, 763, 884, 973, 985], "n_row": [101, 102, 103, 107, 111, 113, 115, 116, 117, 172, 254, 617, 690], "accept": [101, 102, 103, 105, 107, 111, 136, 147, 158, 200, 207, 221, 231, 234, 254, 261, 378, 397, 444, 481, 536, 537, 538, 542, 544, 545, 546, 547, 553, 558, 568, 571, 580, 581, 592, 606, 616, 623, 649, 657, 662, 668, 672, 690, 833, 985], "stop": [101, 102, 103, 107, 111, 113, 115, 116, 117, 130, 339, 341, 342, 344, 345, 350, 352, 358, 359, 361, 362, 366, 368, 369, 370, 372, 768, 770, 773, 775, 776, 778, 783, 785, 788, 790, 793, 796, 797, 799, 800, 804, 806, 807, 808, 809, 810], "textio": 102, "new_column": [102, 103, 106, 113, 193, 254], "comment_char": [102, 103, 113], "quote_char": [102, 103, 113], "skip_row": [102, 103, 113], "missing_utf8_is_empty_str": [102, 103, 113], "ignore_error": [102, 103, 113], "n_thread": [102, 103], "8192": 102, "csvencod": [102, 103, 113], "low_memori": [102, 103, 111, 113, 116, 117], "skip_rows_after_head": [102, 103, 113], "row_count_nam": [102, 103, 107, 111, 113, 115, 116, 117], "row_count_offset": [102, 103, 107, 111, 113, 115, 116, 117], "sample_s": [102, 103], "eol_char": [102, 103, 113], "we": [102, 103, 106, 113, 174, 254, 287, 499, 566, 585, 630, 634, 690, 699, 718, 829, 877, 932, 985], "handler": [102, 103, 106], "g": [102, 103, 105, 106, 107, 111, 114, 115, 117, 159, 160, 174, 225, 227, 254, 261, 268, 357, 361, 368, 378, 458, 459, 460, 461, 462, 464, 465, 466, 473, 558, 592, 624, 625, 630, 646, 690, 795, 799, 806, 898, 967, 985], "builtin": [102, 103, 106], "stringio": [102, 103], "fsspec": [102, 103, 107, 111, 114, 115, 117, 119], "remot": [102, 103, 107, 111], "autogener": [102, 103, 113], "column_x": [102, 103, 113], "enumer": [102, 103, 113, 172, 254], "shorter": [102, 103], "comment": [102, 103, 113], "instanc": [102, 103, 113, 125, 127, 132, 148, 153, 254, 315, 431, 458, 459, 460, 461, 462, 464, 465, 466, 551, 560, 592, 634, 670, 690, 698, 744, 985], "special": [102, 103, 113, 492, 699, 925, 985], "escap": [102, 103, 113], "dure": [102, 103, 113, 132, 148, 254, 698, 985], "would": [102, 103, 113, 278, 290, 430, 451, 542, 592, 708, 721, 879, 967, 985], "prefer": [102, 103, 105, 113, 128, 135, 148, 171, 196, 197, 236, 254, 268, 457, 592, 674, 690, 698, 699, 885, 985, 993], "treat": [102, 103, 113, 485, 500, 501, 918, 933, 934], "10000": [102, 172, 254, 516], "check": [102, 103, 113, 120, 121, 154, 168, 170, 254, 264, 266, 284, 308, 311, 312, 397, 401, 485, 489, 508, 592, 634, 690, 696, 697, 715, 738, 741, 742, 834, 836, 839, 840, 842, 847, 848, 849, 851, 852, 898, 918, 922, 941, 985], "might": [102, 103, 113, 129, 268, 531, 592, 968, 985], "issu": [102, 103, 106, 113, 327, 328, 521, 592, 758, 759, 955, 985], "iso8601": [102, 103, 113], "physic": [102, 103, 174, 254, 316, 527, 592, 607, 629, 630, 690, 746, 969, 985], "cpu": [102, 103], "system": [102, 103], "wrongli": 102, "done": [102, 103, 113, 118, 157, 174, 254, 267, 269, 315, 496, 502, 540, 592, 630, 690, 744, 929, 935, 985], "buffer": [102, 103, 146, 171, 254, 813, 985], "modifi": [102, 103, 113, 129, 132, 164, 171, 229, 254, 279, 360, 371, 485, 491, 492, 500, 592, 798, 809, 882, 918, 924, 925, 933, 946, 948, 985], "lossi": [102, 103, 113], "decod": [102, 103], "reduc": [102, 103, 111, 113, 115, 116, 117, 241, 242, 244, 247, 473, 560, 592, 655, 679, 680, 682, 685, 690, 862, 876, 905, 955, 985], "usag": [102, 103, 113, 125, 127, 205, 254, 906, 985], "expens": [102, 103, 111, 113, 116, 117, 126, 128, 135, 171, 196, 197, 222, 223, 254, 268, 592, 663, 690, 698, 699, 985, 993], "aggreg": [102, 103, 111, 153, 159, 160, 177, 178, 179, 182, 184, 188, 189, 190, 208, 209, 225, 228, 234, 235, 238, 240, 254, 262, 384, 394, 420, 444, 457, 458, 459, 460, 461, 462, 464, 465, 466, 533, 537, 538, 551, 552, 553, 560, 565, 568, 571, 574, 581, 592, 624, 625, 634, 635, 636, 637, 640, 641, 644, 658, 659, 666, 672, 673, 676, 678, 690, 830, 885, 886, 887, 889, 892, 893, 894, 985], "nativ": [102, 107, 111, 123, 135, 171, 197, 214, 236, 254, 268, 592, 597, 674, 699, 985, 993], "parser": 102, "even": [102, 446, 592], "regard": [102, 548], "sens": [102, 107, 111, 115, 117, 159, 160, 181, 227, 254, 624, 625, 639, 690], "particular": [102, 107, 111, 115, 117, 146, 254, 813, 985], "skip": [102, 103, 106, 111, 113, 117, 225, 254, 699, 985], "offset": [102, 103, 107, 111, 113, 115, 116, 117, 159, 160, 206, 227, 232, 254, 300, 353, 354, 357, 361, 368, 479, 504, 510, 512, 592, 624, 625, 656, 670, 690, 731, 791, 792, 795, 799, 806, 912, 937, 943, 945, 985], "row_count": [102, 103, 107, 111, 113, 115, 116, 117], "sampl": [102, 103, 236, 254, 478, 592, 674, 911, 985], "estim": [102, 103, 146, 254, 269, 376, 377, 410, 540, 592, 690, 813, 815, 816, 853, 985], "alloc": [102, 103, 146, 191, 254, 813, 985], "scan_csv": [102, 103, 654, 655, 690], "lazili": [102, 103, 113, 114, 115, 116, 117, 422, 592], "glob": [102, 103, 113, 115, 116, 117], "continu": [102, 111, 478, 592, 911, 985], "benchmark": [102, 111, 314, 592], "50000": 103, "batchedcsvread": [103, 603], "upon": 103, "creation": 103, "gather": 103, "next_batch": 103, "big": 103, "interest": 103, "seen_group": 103, "big_fil": 103, "df_current_batch": 103, "concat": [103, 748, 866, 985], "partition_df": 103, "partition_bi": [103, 172, 254], "as_dict": [103, 186, 254], "fh": 103, "write_csv": [103, 113, 254], "els": [103, 585], "partition_on": 104, "partition_rang": 104, "partition_num": 104, "dbreadengin": 104, "connectorx": [104, 119], "raw": 104, "partit": [104, 105, 111, 114, 118, 172, 186, 254], "transfer": 104, "document": [104, 106, 364, 367, 494, 510, 511, 512, 514, 802, 805, 927, 943, 944, 945, 947], "redshift": 104, "mysql": 104, "mariadb": 104, "clickhous": 104, "oracl": 104, "bigqueri": 104, "pleas": 104, "doc": [104, 140, 254], "github": 104, "sfu": 104, "db": 104, "connector": 104, "destin": 104, "sqlite": 104, "develop": [104, 125, 127], "flight_sql": 104, "further": [104, 968, 985], "wide": [104, 157, 180, 225, 254, 638, 690], "adopt": 104, "significantli": [104, 993], "better": [104, 135, 217, 236, 254, 268, 533, 592, 674, 899, 900, 985], "driver": 104, "cpp": 104, "partition_col": 104, "explicitli": [104, 123, 125, 132, 422, 580, 592], "delta_table_opt": [105, 114], "root": [105, 114, 409, 421, 432, 448, 482, 520, 591, 592, 914, 985], "absolut": [105, 114, 120, 121, 260, 375, 376, 377, 592, 694, 814, 815, 816, 985], "avoid": 105, "year": [105, 114, 159, 160, 174, 227, 254, 344, 345, 357, 358, 361, 368, 369, 458, 459, 460, 461, 462, 464, 465, 466, 554, 555, 592, 624, 625, 630, 690, 778, 779, 795, 796, 799, 806, 807], "2021": [105, 114, 141, 157, 159, 227, 254, 510, 566, 624, 690, 771, 772, 779, 803, 849, 943, 985], "aw": [105, 114], "googl": [105, 114], "service_account": [105, 114], "service_account_json_absolute_path": [105, 114], "az": [105, 114], "adl": [105, 114], "abf": [105, 114], "azure_storage_account_nam": [105, 114], "azure_storage_account_kei": [105, 114], "without_fil": [105, 114], "track": [105, 114, 135, 254, 305, 992], "sheet_id": 106, "sheet_nam": 106, "xlsx2csv_option": 106, "read_csv_opt": 106, "noreturn": [106, 575], "xlsx2csv": [106, 119], "read_csv": [106, 113], "nor": [106, 198, 254], "skip_empty_lin": 106, "my": [106, 118], "datasheet": 106, "correct": [106, 376, 377, 410, 463, 478, 592, 634, 690, 815, 816, 853, 891, 911, 985], "look": [106, 305, 308, 738], "whole": [106, 480, 481, 491, 592, 690, 924], "With": [106, 135, 170, 254, 268, 592, 699, 852, 985], "1000": [106, 146, 216, 254, 346, 347, 516, 784, 965, 985, 993], "spreadsheet": [106, 188, 254], "xl": 106, "xlsm": 106, "xlsb": 106, "odf": 106, "od": [106, 509, 942], "odt": 106, "memory_map": [107, 111, 115], "v2": [107, 115], "greatli": [107, 115], "improv": [107, 115, 655, 690], "page": [107, 111, 115, 117, 254, 592, 603, 655, 690, 985], "give": [107, 111, 115, 116, 117, 180, 223, 254, 341, 410, 454, 529, 592, 603, 638, 663, 690, 775, 853, 985], "That": [107, 634, 690], "filenam": 107, "my_fil": 107, "write_ipc": [107, 254], "read_ndjson": 109, "parallelstrategi": [111, 117], "use_statist": [111, 117], "awar": [111, 171, 197, 214, 254, 510, 512, 943, 945], "stabl": [111, 140, 198, 254, 417, 592, 638, 690], "row_group": [111, 117], "pressur": [111, 116, 117, 473, 592, 655, 690, 905, 985], "read_tabl": 111, "with_column_nam": 113, "push": [113, 115, 116, 117, 118], "down": [113, 115, 116, 117, 118, 387, 592, 824, 985], "therebi": [113, 115, 116, 117], "potenti": [113, 115, 116, 117], "overhead": [113, 115, 116, 117], "realloc": [113, 115, 116, 148, 254, 698, 985], "headerless": 113, "unlik": 113, "fewer": 113, "my_long_fil": 113, "doesn": [113, 373, 592, 812, 976, 985], "thing": [113, 559], "less": [113, 174, 254, 412, 419, 496, 502, 507, 516, 592, 630, 690, 929, 935, 940, 949, 993], "limit": [113, 150, 254, 307, 318, 319, 320, 383, 389, 592, 619, 626, 655, 690, 750, 751, 752, 821, 985], "breezah": 113, "languag": [113, 159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 630, 690, 795, 799, 806], "hard": [113, 634, 690], "mydf": 113, "lambda": [113, 135, 153, 187, 236, 254, 268, 305, 375, 376, 377, 420, 421, 457, 539, 551, 552, 560, 567, 574, 592, 634, 642, 674, 690, 699, 736, 814, 815, 816, 985], "simpli": [113, 551, 560], "idx": [113, 159, 172, 254, 305, 624, 690, 736, 900, 985], "uint16": [113, 327, 328, 521, 592, 758, 759, 955, 985], "u16": [113, 125, 993], "eu": 114, "central": [114, 410, 478, 592, 853, 911, 985], "allow_pyarrow_filt": 118, "comparison": 118, "dset": 118, "folder": 118, "stdout": [119, 157, 254], "platform": 119, "linux": 119, "90": 119, "wsl2": 119, "x86_64": 119, "glibc2": 119, "main": 119, "apr": 119, "14": [119, 125, 130, 135, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 345, 396, 451, 592, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 799], "44": [119, 331, 592], "51": 119, "gcc": 119, "matplotlib": [119, 643, 653, 690], "check_dtyp": [120, 121], "check_exact": [120, 121], "rtol": [120, 121], "1e": [120, 121], "atol": [120, 121], "nans_compare_equ": [120, 121], "check_column_ord": 120, "check_row_ord": 120, "assertionerror": [120, 121], "compar": [120, 121, 154, 254, 374, 390, 391, 412, 419, 441, 538, 592, 898, 985], "exactli": [120, 121, 124, 125, 127, 506, 507, 906, 939, 940, 985], "toler": [120, 121, 174, 254, 630, 690], "inexact": [120, 121], "assert": [120, 121, 123, 125, 127, 160, 254, 603, 625, 690, 826, 985], "irrespect": 120, "unsort": 120, "check_nam": 121, "s1": [121, 153, 254, 736, 852, 968, 977, 985], "searchstrategi": [122, 124, 125, 127], "null_prob": [122, 125, 127], "percentag": [122, 125, 127, 445, 592, 873, 985], "chanc": [122, 125, 127, 993], "independ": [122, 123, 125, 127], "flag": [122, 470, 485, 491, 492, 500, 592, 615, 634, 690, 901, 918, 924, 925, 933, 985], "hypothesi": [122, 123, 124, 125, 126, 127, 993], "sampled_from": [122, 993], "unique_small_int": 122, "ccy": [122, 993], "gbp": [122, 993], "eur": [122, 141, 157, 254, 993], "jpy": [122, 993], "min_col": [123, 125], "max_col": [123, 125], "standalon": [123, 125], "mincol": 123, "assign": [123, 159, 254, 305, 451, 506, 507, 592, 624, 690, 736, 761, 860, 877, 879, 939, 940, 985], "exact": [123, 125, 127, 205, 254, 510, 511, 512, 529, 592, 943, 944, 945], "minimum": [123, 124, 125, 127, 153, 182, 254, 375, 376, 377, 434, 440, 451, 571, 592, 640, 655, 690, 750, 787, 814, 815, 816, 870, 875, 879, 985, 993], "especi": 123, "test_unique_xyz": 123, "assert_someth": 123, "punctuat": 123, "test_special_char_colname_init": 123, "inner_dtyp": [124, 127], "select_from": [124, 127], "min_siz": [124, 125, 127, 993], "max_siz": [124, 125, 127, 993], "anoth": [124, 158, 254, 304, 329, 334, 426, 429, 592, 623, 669, 690, 735, 760, 768, 898, 985], "randomli": 124, "innermost": 124, "2x": 124, "lst": 124, "11330": 124, "24030": 124, "116": 124, "zz": [124, 127], "small": [124, 175, 254, 361, 617, 690, 993], "uint8_pair": [124, 993], "uint": [124, 993], "zip": [124, 993], "131": 124, "176": 124, "149": [124, 993], "include_col": 125, "allow_infin": [125, 127], "allowed_dtyp": [125, 127, 993], "excluded_dtyp": [125, 127], "describ": [125, 157, 254, 985], "desir": [125, 305, 736], "n_chunk": [125, 127, 254, 985], "randomis": 125, "onto": 125, "pct": 125, "preced": 125, "disallow": [125, 127], "inf": [125, 127, 275, 399, 402, 529, 592, 705, 761, 829, 837, 841, 859, 873, 877, 973, 985], "exclud": [125, 127, 325, 328, 397, 545, 592, 833, 849, 985], "deploi": [125, 127], "characterist": [125, 127], "concret": [125, 127], "test_repr": 125, "isinst": [125, 127, 254], "0x11f561580": 125, "known": [125, 305, 674, 736], "0565": 125, "34715": 125, "5844": 125, "33": [125, 462, 467, 545, 592, 890, 985], "076854": 125, "3382": 125, "48662": 125, "7540": 125, "29": [125, 130, 159, 160, 174, 227, 254, 353, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 630, 690, 791, 795, 799, 806], "836271": 125, "4063": 125, "06": [125, 130, 227, 254, 335, 345, 359, 360, 372, 798, 799, 808], "39092": 125, "1889": 125, "13": [125, 130, 137, 138, 149, 150, 156, 160, 165, 175, 183, 231, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 457, 459, 546, 551, 560, 584, 592, 608, 609, 618, 619, 625, 632, 668, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 690, 699, 799, 806, 807, 985], "41": [125, 993], "874455": 125, "15836": 125, "1755e": 125, "575050513": 125, "profil": [126, 128, 690], "balanc": [126, 128, 993], "set_environ": 126, "polars_hypothesis_profil": [126, 128], "1500": 126, "constructor": 127, "max_data_s": 127, "normal": [127, 159, 254, 373, 410, 478, 592, 624, 690, 812, 853, 911, 985], "test_repr_is_valid_str": 127, "experi": 127, "create_list_strategi": [127, 993], "polars_max_thread": 129, "behind": 129, "lock": 129, "reason": 129, "pyspark": 129, "udf": [129, 135, 187, 236, 254, 268, 446, 539, 592, 642, 674, 690, 699, 985], "similar": [129, 153, 174, 254, 364, 367, 444, 585, 592, 630, 690, 802, 805], "recommend": [129, 171, 187, 254], "1h": [130, 159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 630, 690, 776, 795, 799, 806], "23": [130, 159, 160, 254, 335, 342, 361, 555, 583, 624, 625, 690, 769, 776, 993], "999999": [130, 555, 583], "1h30m25": 130, "tm": [130, 335], "third": [130, 420, 592], "lf": [130, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 626, 627, 628, 629, 631, 632, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 690, 992, 993], "6h": 130, "5h59m": 130, "1h29m": 130, "58": 130, "57": [130, 895, 985, 993], "19": [130, 160, 174, 254, 361, 625, 630, 690, 799, 806], "initi": [132, 551, 560, 585], "whatev": 132, "were": 132, "enter": 132, "advantag": [132, 187, 254], "initialis": [132, 690, 992], "set_": 132, "set_verbos": 132, "do_various_th": 132, "restor": 132, "breviti": 132, "nan_as_nul": 134, "_pyarrowdatafram": 134, "nullabl": 134, "extens": [134, 218, 254, 968, 985], "propag": [134, 178, 209, 254, 439, 440, 592, 869, 870, 985], "inference_s": [135, 254], "256": [135, 254, 873, 985], "user": [135, 187, 236, 254, 268, 446, 470, 539, 592, 642, 674, 690, 699, 901, 985], "almost": [135, 236, 254, 674, 699, 985], "_significantly_": [135, 236, 254, 674, 699, 985], "intens": [135, 236, 254, 674, 699, 985], "becaus": [135, 146, 159, 175, 225, 236, 254, 287, 624, 674, 690, 699, 718, 813, 985], "forc": [135, 174, 236, 254, 629, 630, 674, 690, 699, 985], "materi": [135, 236, 254, 643, 674, 690, 699, 985], "parallelis": [135, 236, 254, 674, 699, 985], "optimis": [135, 236, 254, 674, 690, 699, 899, 900, 985], "achiev": [135, 236, 254, 268, 592, 674, 699, 985], "best": [135, 236, 254, 268, 592, 674, 699, 985], "tri": [135, 254], "arbitrarili": [135, 254], "rearrang": [135, 254], "transform": [135, 254, 420, 513, 515, 592], "preserv": [135, 217, 218, 254, 475, 592, 908, 968, 985], "lru_cach": [135, 254, 268, 592, 699, 985], "magnitud": [135, 254, 268, 592, 699, 985], "column_1": [135, 222, 254], "scalar": [135, 170, 196, 254, 469, 539, 566, 592, 852, 897, 985], "k": [136, 221, 254, 313, 316, 410, 528, 592, 606, 662, 690, 743, 746, 853, 970, 985], "intoexpr": [136, 158, 159, 160, 200, 207, 221, 231, 234, 254, 397, 444, 481, 537, 538, 542, 544, 546, 547, 551, 553, 560, 568, 571, 578, 580, 581, 585, 592, 606, 623, 624, 625, 649, 657, 662, 668, 672, 690, 833, 985], "nulls_last": [136, 207, 221, 254, 278, 480, 592, 606, 657, 662, 690, 708, 985], "smallest": [136, 221, 254, 313, 592, 606, 662, 690, 743, 985], "largest": [136, 159, 160, 174, 221, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 528, 592, 606, 624, 625, 630, 662, 690, 795, 799, 806, 970, 985], "top": [136, 221, 254, 606, 662, 690], "top_k": [136, 254, 313, 592, 606, 690, 743, 985], "cheap": [137, 138, 254, 608, 609, 690, 698, 749, 753, 985], "deepcopi": [137, 138, 254, 608, 609, 690, 749, 753, 985], "clear": [138, 254, 609, 690, 753, 985], "properti": [139, 145, 163, 199, 202, 230, 254, 611, 614, 648, 667, 690, 993], "appl": [139, 164, 173, 192, 194, 213, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 448, 456, 489, 508, 520, 592, 629, 646, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 690, 922, 941], "banana": [139, 213, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 448, 456, 520, 592, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685], "pearson": [140, 254, 410, 478, 548, 592, 853, 911, 985], "correl": [140, 254, 548, 576], "coeffici": [140, 254, 478, 592, 911, 985], "corrcoef": [140, 254], "percentil": [141, 254, 762, 985], "summari": [141, 254, 762, 985], "glimps": [141, 162, 254], "usd": [141, 157, 254, 993], "2020": [141, 157, 160, 254, 336, 340, 343, 346, 347, 349, 351, 356, 360, 363, 364, 367, 510, 511, 512, 625, 690, 770, 774, 777, 784, 786, 789, 794, 798, 801, 802, 805, 943, 944, 945], "null_count": [141, 144, 254, 329, 592, 690, 760, 762, 985], "266667": [141, 254], "666667": [141, 178, 228, 242, 254, 375, 592, 666, 680, 690], "std": [141, 254, 457, 592, 690, 762, 892, 985], "101514": [141, 254], "707107": [141, 254, 376, 592, 815, 985], "57735": [141, 254], "median": [141, 188, 254, 460, 592, 669, 690, 762, 888, 985], "more_column": [142, 147, 201, 224, 254, 378, 558, 592, 612, 616, 650, 664, 690], "Or": [142, 158, 159, 160, 174, 207, 227, 234, 254, 444, 481, 545, 585, 592, 612, 623, 624, 625, 630, 657, 672, 690], "subset": [144, 184, 223, 254, 613, 663, 690], "snippet": [144, 254, 613, 690], "is_nul": [144, 254, 592, 613, 690, 985], "sizeunit": [146, 254, 813, 985], "heap": [146, 254, 813, 985], "its": [146, 254, 335, 361, 368, 481, 592, 769, 799, 806, 813, 985], "bitmap": [146, 254, 813, 985], "therefor": [146, 254, 585, 813, 985], "structarrai": [146, 254, 813, 985], "constant": [146, 160, 254, 381, 592, 625, 690, 813, 819, 985], "unchang": [146, 254, 527, 592, 634, 674, 690, 813, 969, 985], "capac": [146, 205, 254, 813, 906, 985], "ffi": [146, 254, 813, 985], "kb": [146, 254, 813, 985], "mb": [146, 254, 813, 985], "gb": [146, 254, 813, 985], "tb": [146, 254, 813, 985], "revers": [146, 254, 324, 325, 326, 327, 328, 421, 448, 520, 592, 690, 756, 757, 758, 759, 985], "1_000_000": [146, 254, 813, 985], "25888898": [146, 254], "689577102661133": [146, 254], "long": [147, 180, 225, 254, 616, 638, 690], "letter": [147, 239, 248, 254, 378, 492, 558, 592, 616, 677, 686, 690, 925], "thu": [148, 254, 548, 698, 985], "faster": [148, 225, 254, 268, 457, 498, 531, 592, 654, 655, 690, 698, 699, 885, 931, 985], "onlin": [148, 254, 698, 985], "rerun": [148, 254, 698, 985], "fill_valu": [149, 204, 225, 254, 472, 592, 652, 690, 904, 985], "Not": [149, 254, 403, 405, 422, 592, 618, 690], "To": [149, 254, 332, 333, 357, 383, 485, 491, 492, 500, 581, 592, 618, 690, 795, 918, 924, 925, 933], "fillnullstrategi": [150, 254, 383, 592, 619, 690, 821, 985], "matches_supertyp": [150, 254, 619, 690], "forward": [150, 174, 254, 353, 383, 389, 592, 619, 630, 690, 791, 821, 985], "consecut": [150, 254, 307, 383, 389, 484, 592, 619, 690, 821, 917, 985], "supertyp": [150, 254, 267, 592, 619, 690], "fill_nan": [150, 254, 592, 690, 985], "OR": [151, 254, 538, 620, 690], "reduct": [153, 254], "supercast": [153, 254], "parent": [153, 254], "rule": [153, 254], "arithmet": [153, 254], "zip_with": [153, 254, 985], "foo11": [153, 254], "bar22": [153, 254], "null_equ": [154, 254, 898, 985], "retriev": [155, 254, 281, 282, 517, 712, 713, 950], "return_as_str": [157, 254], "preview": [157, 254], "nice": [157, 254], "few": [157, 254], "rather": [157, 174, 254, 516, 630, 690, 949], "head": [157, 176, 210, 254, 267, 414, 592, 633, 690, 855, 956, 985], "tail": [157, 162, 254, 267, 478, 592, 690, 828, 911, 985], "more_bi": [158, 186, 207, 254, 481, 592, 623, 657, 690], "maintain_ord": [158, 186, 188, 223, 227, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 254, 262, 268, 306, 523, 530, 549, 592, 610, 615, 617, 623, 643, 653, 654, 655, 663, 673, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 690, 737, 761, 877, 971, 985], "consist": [158, 186, 254, 510, 623, 690, 943], "agg": [158, 159, 160, 254, 262, 268, 384, 386, 480, 481, 523, 535, 549, 592, 610, 615, 617, 623, 624, 625, 643, 653, 690], "index_column": [159, 160, 254, 624, 625, 690], "include_boundari": [159, 254, 624, 690], "start_bi": [159, 254, 624, 690], "startbi": [159, 254, 624, 690], "dynamicgroupbi": [159, 254], "groupbi": [159, 160, 184, 254, 262, 268, 287, 329, 384, 386, 444, 480, 481, 523, 535, 539, 549, 592, 610, 615, 617, 624, 625, 643, 653, 690, 718, 760, 985], "member": [159, 254, 624, 690, 840, 985], "seen": [159, 254, 307, 389, 592, 624, 690], "roll": [159, 160, 254, 353, 354, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 546, 576, 577, 592, 624, 625, 690, 791, 792, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 985], "slot": [159, 254, 286, 329, 330, 592, 624, 690, 717, 760, 763, 985], "1n": [159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 630, 690, 795, 799, 806], "nanosecond": [159, 160, 174, 227, 254, 357, 361, 362, 368, 458, 459, 460, 461, 462, 464, 465, 466, 556, 592, 624, 625, 630, 690, 795, 799, 800, 806], "1u": [159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 630, 690, 795, 799, 806], "microsecond": [159, 160, 174, 227, 254, 357, 361, 362, 368, 458, 459, 460, 461, 462, 464, 465, 466, 555, 556, 583, 592, 624, 625, 630, 643, 690, 795, 799, 806], "1m": [159, 160, 174, 227, 254, 346, 347, 349, 356, 357, 361, 363, 368, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 630, 690, 784, 786, 794, 795, 799, 801, 806], "millisecond": [159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 556, 592, 624, 625, 630, 690, 795, 799, 806], "1w": [159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 630, 690, 795, 799, 806], "week": [159, 160, 174, 227, 254, 357, 361, 368, 370, 458, 459, 460, 461, 462, 464, 465, 466, 556, 592, 624, 625, 630, 690, 795, 799, 806, 808], "1y": [159, 160, 174, 227, 254, 344, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 630, 690, 778, 795, 799, 806, 810], "1i": [159, 160, 174, 227, 254, 357, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 630, 690, 795], "suffix": [159, 160, 173, 174, 200, 227, 231, 234, 254, 263, 311, 357, 361, 368, 403, 405, 406, 407, 421, 444, 448, 456, 458, 459, 460, 461, 462, 464, 465, 466, 489, 592, 624, 625, 629, 630, 649, 668, 669, 672, 690, 741, 795, 799, 806, 922], "_satur": [159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 630, 690, 795, 799, 806], "satur": [159, 160, 174, 227, 254, 357, 361, 368, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 625, 630, 690, 795, 799, 806], "10i": [159, 160, 254, 624, 625, 690], "ascend": [159, 160, 254, 624, 625, 690], "dynam": [159, 254, 305, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 690, 736], "matter": [159, 160, 171, 197, 214, 254, 624, 625, 690], "_lower_bound": [159, 254, 624, 690], "_upper_bound": [159, 254, 624, 690], "harder": [159, 254, 624, 690], "inclus": [159, 160, 254, 397, 458, 459, 460, 461, 462, 464, 465, 466, 505, 506, 592, 624, 625, 690, 833, 938, 939, 985], "datapoint": [159, 254, 624, 690], "mondai": [159, 254, 370, 624, 690, 808], "tuesdai": [159, 254, 624, 690], "wednesdai": [159, 254, 624, 690], "thursdai": [159, 254, 624, 690], "fridai": [159, 254, 624, 690], "saturdai": [159, 254, 624, 690], "sundai": [159, 254, 370, 624, 690, 808], "date_rang": [159, 227, 254, 334, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 366, 368, 369, 370, 371, 372, 624, 690, 768, 770, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 806, 807, 808, 809, 810], "30m": [159, 254, 361, 368, 624, 690, 799, 806], "time_min": [159, 254, 624, 690], "time_max": [159, 254, 624, 690], "boundari": [159, 254, 318, 319, 320, 592, 624, 690, 750, 751, 752, 829, 985], "time_count": [159, 254, 624, 690], "_lower_boundari": [159, 254, 624, 690], "_upper_boundari": [159, 254, 624, 690], "lower_bound": [159, 254, 318, 320, 397, 592, 624, 690, 750, 752, 833, 973, 985], "upper_bound": [159, 254, 305, 318, 319, 397, 592, 624, 690, 750, 751, 833, 859, 985], "time_agg_list": [159, 254, 624, 690], "arang": [159, 225, 236, 254, 624, 674, 690], "2i": [159, 254, 624, 690], "3i": [159, 254, 624, 690], "a_agg_list": [159, 254, 624, 690], "rollinggroupbi": [160, 254], "dynamic_groupbi": [160, 254, 625, 690], "groupby_dynam": [160, 254, 625, 690], "43": [160, 254, 328, 592, 625, 690], "strptime": [160, 254, 360, 625, 690, 798], "set_sort": [160, 174, 227, 254, 592, 625, 630, 690, 985], "2d": [160, 217, 254, 566, 625, 690, 773], "sum_a": [160, 254, 625, 690], "min_a": [160, 254, 625, 690], "max_a": [160, 254, 625, 690], "seed": [161, 198, 254, 392, 451, 468, 474, 592, 827, 879, 896, 907, 985], "seed_1": [161, 254, 392, 592, 827, 985], "seed_2": [161, 254, 392, 592, 827, 985], "seed_3": [161, 254, 392, 592, 827, 985], "hash": [161, 254, 592, 985], "u64": [161, 254, 392, 453, 592, 643, 690, 827, 985], "10783150408545073287": [161, 254], "1438741209321515184": [161, 254], "10047419486152048166": [161, 254], "2047317070637311557": [161, 254], "ab": [162, 176, 210, 231, 254, 517, 518, 592, 668, 690, 828, 855, 956, 985], "grown": [164, 254], "intermedi": [166, 254, 628, 690, 832, 985, 993], "linear": [166, 190, 246, 254, 283, 396, 425, 450, 462, 546, 547, 573, 592, 628, 644, 684, 690, 714, 832, 878, 890, 985], "mask": [167, 169, 254, 284, 308, 309, 398, 400, 408, 485, 487, 592, 715, 738, 739, 822, 833, 835, 838, 850, 874, 875, 899, 918, 920, 977, 985], "visual": [167, 169, 254], "buffer_s": [171, 254], "intern": [171, 254], "veri": [171, 222, 254, 268, 592, 609, 690, 753, 985], "fit": [171, 205, 225, 254, 473, 575, 592, 905, 906, 985], "signific": [171, 254, 268, 592], "4x": [171, 254], "materialis": [171, 172, 196, 197, 254], "iter_row": [172, 196, 197, 254], "17_500": [172, 254], "klmnoopqrstuvwxyz": [172, 254], "__name__": [172, 254], "7500": [172, 254], "15_000": [172, 254], "record_batch": [172, 254], "to_arrow": [172, 254, 985], "to_batch": [172, 254], "date32": [172, 254], "large_str": [172, 212, 218, 254], "15000": [172, 254], "2500": [172, 254], "left_on": [173, 174, 254, 629, 630, 690], "right_on": [173, 174, 254, 629, 630, 690], "_right": [173, 174, 254, 629, 630, 690], "semi": [173, 254, 629, 690], "anti": [173, 254, 629, 690, 899, 900, 985], "cross": [173, 254, 629, 690], "join_asof": [173, 254, 629, 690], "stringcach": [173, 254, 603], "other_df": [173, 254], "by_left": [174, 254, 630, 690], "by_right": [174, 254, 630, 690], "asofjoinstrategi": [174, 254, 630, 690], "allow_parallel": [174, 254, 629, 630, 690], "force_parallel": [174, 254, 629, 630, 690], "asof": [174, 254, 630, 690], "asof_join": [174, 254], "search": [174, 254, 630, 690], "greater": [174, 254, 390, 391, 478, 507, 592, 630, 690, 911, 940, 985], "distanc": [174, 254, 630, 690, 829, 985], "plan": [174, 175, 254, 607, 615, 622, 629, 630, 645, 653, 671, 690], "gdp": [174, 254, 630, 690], "2016": [174, 254, 630, 690], "2017": [174, 254, 630, 690], "2018": [174, 254, 360, 630, 690, 798], "2019": [174, 254, 630, 690], "record": [174, 217, 254, 630, 690], "jan": [174, 254, 630, 690], "1st": [174, 254, 630, 690], "4164": [174, 254, 630, 690], "4411": [174, 254, 630, 690], "4566": [174, 254, 630, 690], "4696": [174, 254, 630, 690], "popul": [174, 254, 630, 690], "12th": [174, 254, 630, 690], "82": [174, 254, 630, 690], "66": [174, 254, 536, 592, 630, 690, 890, 985], "83": [174, 254, 630, 690], "52": [174, 231, 254, 467, 592, 630, 668, 690], "request": [175, 254], "describe_plan": [175, 254], "unoptim": [175, 254], "describe_optimized_plan": [175, 254], "show_graph": [175, 254, 690], "un": [175, 254], "graphviz": [175, 254, 653, 690], "axi": [177, 178, 180, 182, 209, 254, 638, 690], "null_strategi": [178, 209, 254], "nullstrategi": [178, 209, 254], "spam": [178, 254, 492, 925], "id_var": [180, 254, 638, 690], "value_var": [180, 254, 638, 690], "variable_nam": [180, 254, 638, 690], "value_nam": [180, 254, 638, 690], "unpivot": [180, 254, 638, 690], "leav": [180, 254, 305, 638, 690], "massag": [180, 254, 638, 690], "measur": [180, 254, 638, 690], "merg": [181, 254, 639, 690], "caller": [181, 254, 305, 634, 639, 674, 690], "respons": [181, 254, 639, 690], "what": [184, 254, 967, 976, 985], "pack": [184, 254], "expr_unique_subset": [184, 254], "df_nuniqu": [184, 254], "df_agg_nuniqu": [184, 254], "offer": [187, 254, 446, 592, 642, 690], "fulli": [187, 198, 254], "cast_str_to_int": [187, 254, 642, 690], "col_nam": [187, 254, 421, 592, 642, 690], "tdf": [187, 254, 642, 690], "aggregate_funct": [188, 254], "pivotagg": [188, 254], "nodefault": [188, 254], "sort_column": [188, 254], "predefin": [188, 254], "predict": [188, 191, 227, 254], "transpos": [188, 254], "discoveri": [188, 254], "col1": [188, 225, 254, 690, 993], "col2": [188, 225, 254, 690, 993], "col3": [188, 254, 993], "tanh": [188, 254, 592, 985], "998347": [188, 254], "964028": [188, 254], "999954": [188, 254], "interpol": [190, 246, 254, 383, 425, 450, 462, 573, 592, 644, 684, 690, 878, 890, 985], "rollinginterpolationmethod": [190, 246, 254, 450, 462, 573, 592, 644, 684, 690, 878, 890, 985], "midpoint": [190, 246, 254, 450, 462, 573, 592, 644, 684, 690, 878, 890, 985], "by_pred": [196, 254], "accord": [196, 254, 422, 592, 779], "never": [196, 254], "mutual": [196, 254], "exclus": [196, 254, 536, 592], "addition": [196, 254], "clariti": [196, 254], "toomanyrowsreturnederror": [196, 254, 603], "norowsreturnederror": [196, 254, 603], "inherit": [196, 254], "rowserror": [196, 254, 603], "with_replac": [198, 254, 468, 592, 896, 985], "shuffl": [198, 236, 254, 468, 592, 674, 896, 985], "modul": [198, 254, 468, 474, 591, 592, 896, 907, 985], "more_expr": [200, 231, 254, 444, 537, 538, 542, 544, 546, 547, 553, 568, 571, 578, 580, 581, 592, 649, 668, 690], "named_expr": [200, 231, 254, 578, 580, 649, 668, 690], "threshold": [200, 254, 649, 690], "set_auto_structifi": [200, 231, 254, 649, 668, 690], "auto_structifi": [200, 231, 254, 649, 668, 690], "is_odd": [200, 254, 649, 690], "_is_odd": [200, 254, 649, 690], "shift_and_fil": [203, 254, 592, 690, 985], "shift": [204, 254, 286, 330, 445, 472, 546, 592, 652, 690, 717, 763, 873, 904, 985], "shrink": [205, 254, 473, 592, 905, 906, 985], "hold": [205, 254], "ddof": [208, 228, 254, 483, 534, 548, 576, 577, 579, 584, 592, 658, 666, 690, 915, 975, 985], "deviat": [208, 254, 376, 464, 483, 579, 592, 658, 690, 815, 915, 985], "degre": [208, 228, 254, 483, 534, 548, 576, 577, 579, 584, 592, 658, 666, 690, 915, 975, 985], "freedom": [208, 228, 254, 483, 534, 548, 576, 577, 579, 584, 592, 658, 666, 690, 915, 975, 985], "divisor": [208, 228, 254, 483, 534, 548, 576, 577, 579, 584, 592, 658, 666, 690, 915, 975, 985], "816497": [208, 254], "21": [209, 254, 562], "16a": [209, 254], "27b": [209, 254], "38c": [209, 254], "nth": [211, 254, 507, 524, 592, 661, 690, 940, 958, 985], "mostli": [212, 254, 384, 592], "categoricaltyp": [212, 254], "as_seri": [213, 254], "fruit": [213, 254, 448, 456, 489, 508, 520, 592, 922, 941], "car": [213, 254, 448, 456, 520, 592], "beetl": [213, 254, 448, 456, 520, 592], "audi": [213, 254, 448, 456, 520, 592], "300": [213, 254, 886, 887, 889, 985], "dummi": [215, 254, 963, 985], "foo_1": [215, 254], "foo_2": [215, 254], "bar_3": [215, 254], "bar_4": [215, 254], "ham_a": [215, 254], "ham_b": [215, 254], "instantiat": [216, 254, 965, 985], "from_repr": [216, 254, 965, 985], "df_from_str_repr": [216, 254], "eval": [216, 254, 557, 965, 985], "correspond": [217, 254, 345, 451, 592, 779, 879, 985], "re": [217, 254, 353, 354, 791, 792, 992], "ll": [217, 254], "u1": [217, 254], "f4": [217, 254], "view": [217, 254, 967, 985], "recarrai": [217, 254], "rec": [217, 254], "use_pyarrow_extension_arrai": [218, 254, 968, 985], "trigger": [218, 254, 968, 985], "sent": [218, 254, 967, 968, 985], "pandas_df1": [218, 254], "pandas_df2": [218, 254], "pandas_df2_pa": [218, 254], "na": [218, 254, 968, 985], "get_column": [219, 254, 581], "four": [220, 254], "five": [220, 254, 993], "bottom_k": [221, 254, 528, 592, 662, 690, 970, 985], "include_head": [222, 254], "header_nam": [222, 254], "column_nam": [222, 254], "perhap": [222, 254], "column_2": [222, 254], "name_gener": [222, 254], "base_nam": [222, 254], "my_column_": [222, 254], "my_column_0": [222, 254], "my_column_1": [222, 254], "my_column_2": [222, 254], "uniquekeepstrategi": [223, 254, 663, 690], "kept": [223, 254, 663, 690], "decompos": [224, 254, 664, 690], "t_a": [224, 254, 664, 690], "t_b": [224, 254, 664, 690], "t_c": [224, 254, 664, 690], "t_d": [224, 254, 664, 690], "womp": [224, 254, 664, 690], "t_": [224, 254, 664, 690], "t_struct": [224, 254, 664, 690], "step": [225, 254, 541], "unstackdirect": [225, 254], "much": [225, 254, 304, 329, 592, 735, 760, 985], "pivot": [225, 254], "phase": [225, 254], "subject": [225, 254], "ascii_uppercas": [225, 254], "h": [225, 254, 261, 364, 367, 473, 510, 512, 514, 592, 943, 945, 947], "col1_0": [225, 254], "col1_1": [225, 254], "col1_2": [225, 254], "col2_0": [225, 254], "col2_1": [225, 254], "col2_2": [225, 254], "coalesc": [226, 254, 510, 665, 690, 943], "400": [226, 254, 665, 690, 886, 887, 889, 985], "600": [226, 254, 665, 690], "700": [226, 254, 665, 690], "new_df": [226, 254, 665, 690], "time_column": [227, 254], "frequenc": [227, 254], "forward_fil": [227, 254, 325, 328, 592], "varianc": [228, 254, 377, 410, 466, 534, 584, 592, 666, 690, 816, 853, 894, 975, 985], "grow": [229, 254], "is_not": [231, 254, 592, 668, 690], "not_c": [231, 254, 668, 690], "diff": [231, 254, 340, 343, 347, 349, 351, 356, 363, 592, 668, 690, 774, 777, 784, 786, 789, 794, 801, 985], "_diff": [231, 254, 668, 690], "row_nr": [232, 254, 422, 592, 670, 690, 900, 985], "more_agg": [234, 672], "named_agg": [234, 672], "_sum": [234, 672], "_mean_squar": [234, 672], "b_sum": [234, 672], "c_mean_squar": [234, 672], "sub": [236, 592], "triangl": [236, 674], "group_df": [236, 674], "deem": [237, 323, 549, 592, 675], "nr": [239, 248, 677, 686], "maxim": [241, 276, 592, 679, 706, 985], "833333": [242, 680], "minim": [244, 277, 282, 473, 481, 592, 682, 707, 713, 864, 905, 985], "overview": [254, 592, 603, 690, 985, 993], "public": [254, 592, 603, 690, 985], "frameinittyp": [254, 690], "variou": [254, 592, 690, 985], "entri": [254, 690, 992], "prevent": [254, 327, 328, 409, 521, 592, 690, 758, 759, 955, 985], "come": [254, 353, 354, 410, 592, 604, 689, 690, 791, 792, 853, 985], "behavior": [254, 268, 304, 539, 592, 735], "mydatafram": 254, "notic": [254, 690, 985], "df4": 254, "df5": 254, "df6": 254, "corr": 254, "drop_in_plac": 254, "drop_nul": [254, 332, 592, 690, 985], "estimated_s": [254, 985], "explod": [254, 386, 455, 592, 690, 883, 985], "find_idx_by_nam": 254, "fold": [254, 431, 544, 551, 552, 574], "frame_equ": [254, 361, 368], "groupby_rol": [254, 458, 459, 460, 461, 462, 464, 465, 466, 592, 624, 690], "hash_row": 254, "hstack": 254, "insert_at_idx": 254, "is_dupl": [254, 592, 985], "is_empti": [254, 985], "is_uniqu": [254, 592, 985], "iter_slic": 254, "melt": [254, 690], "merge_sort": [254, 690], "n_uniqu": [254, 592, 985], "pipe": [254, 592, 690], "quantil": [254, 462, 592, 690, 877, 890, 985], "replace_at_idx": 254, "shrink_to_fit": [254, 985], "take_everi": [254, 592, 690, 985], "to_dict": 254, "to_dummi": [254, 985], "to_numpi": [254, 420, 592, 985], "to_panda": [254, 985], "to_struct": [254, 492], "unnest": [254, 492, 506, 507, 518, 690, 736, 939, 940], "unstack": 254, "upsampl": 254, "write_avro": 254, "write_databas": 254, "write_delta": 254, "write_excel": 254, "write_json": [254, 645, 690], "write_parquet": 254, "cumprod": [261, 592, 985], "ghi": [261, 492, 592, 925], "94": [262, 592], "map_alia": [263, 448, 520, 592], "confus": [264, 403, 405, 592], "tt": [264, 592], "tf": [264, 266, 592], "ff": [264, 266, 592], "upcast": [267, 592], "skip_nul": [268, 592, 699, 985], "pass_nam": [268, 592], "applystrategi": [268, 592], "thread_loc": [268, 592], "unknown": [268, 422, 491, 566, 592, 924], "stage": [268, 592], "speed": [268, 592, 655, 690], "code": [268, 470, 592, 632, 690, 901, 985], "amount": [268, 592], "releas": [268, 592, 993], "gil": [268, 592], "discourag": [268, 592], "loop": [268, 592], "a_times_2": [268, 592], "approx": [269, 540, 592, 690], "hyperloglog": [269, 540, 592, 690], "algorithm": [269, 540, 592, 690], "cardin": [269, 540, 592, 690], "invers": [270, 271, 272, 273, 274, 275, 592, 700, 701, 702, 703, 704, 705, 985], "cosin": [270, 271, 321, 322, 420, 592, 700, 701, 754, 755, 985], "570796": [270, 272, 592, 700, 702, 985], "hyperbol": [271, 273, 275, 322, 477, 526, 592, 701, 703, 705, 755, 910, 960, 985], "sine": [272, 273, 420, 476, 477, 592, 702, 703, 909, 910, 985], "881374": [273, 592, 703, 985], "tangent": [274, 275, 525, 526, 592, 704, 705, 959, 960, 985], "785398": [274, 592, 704, 985], "arg_wher": [279, 592], "sublist": [281, 282, 284, 286, 289, 290, 291, 292, 293, 300, 303, 304, 305, 712, 713, 715, 717, 720, 721, 722, 723, 724, 731, 734, 735, 736, 840, 985], "membership": [284, 715], "listcol": 285, "number_of_two": 285, "null_behavior": [286, 330, 592, 717, 763, 985], "nullbehavior": [286, 330, 592, 717, 763, 985], "th": [286, 330, 478, 592, 717, 763, 911, 985], "discret": [286, 330, 373, 592, 717, 761, 763, 812, 829, 877, 985], "blindli": [287, 718], "worth": [287, 718], "enough": [287, 478, 592, 718, 911, 985], "concat_list": [287, 557, 718], "rank": [287, 548, 557, 592, 718, 985], "exprnamespac": 288, "reshap": [288, 592, 719, 985], "flat": [288, 455, 592, 719, 883, 985], "taken": [300, 504, 523, 592, 731, 937], "null_on_oob": [304, 735], "cheaper": [304, 735], "n_field_strategi": [305, 736], "tostructstrategi": [305, 736], "first_non_nul": [305, 736], "max_width": [305, 736], "field_0": [305, 736], "field_1": [305, 736], "field_n": [305, 736], "incorrectli": 305, "n0": 305, "n1": 305, "maintain": [306, 469, 530, 592, 654, 655, 690, 737, 897, 971, 985], "substr": [308, 311, 312, 485, 489, 500, 501, 505, 506, 507, 508, 738, 741, 742, 918, 922, 933, 934, 938, 939, 940, 941], "transferencod": [309, 310, 487, 488, 739, 740, 920, 921], "strict": [309, 315, 485, 487, 499, 510, 511, 512, 514, 592, 739, 744, 898, 918, 920, 932, 943, 944, 945, 947, 985], "hex": [309, 310, 487, 488, 499, 739, 740, 920, 921, 932], "base64": [309, 310, 487, 488, 739, 740, 920, 921], "complex": [313, 329, 528, 592, 743, 760, 970, 985], "frac": [313, 375, 376, 377, 478, 528, 592, 743, 814, 815, 816, 911, 970, 985], "hurt": [314, 592], "lot": [314, 592], "content": [314, 474, 533, 592, 907, 985], "problem": [314, 592], "due": [315, 360, 592, 744, 798, 985], "overflow": [315, 327, 328, 499, 521, 592, 744, 758, 759, 932, 955, 985], "categoricalord": [316, 746], "lexic": [316, 746], "foo_clip": [318, 319, 320, 592], "clip": [319, 320, 592, 751, 752, 985], "543081": [322, 592, 755, 985], "cumul": [324, 325, 326, 327, 328, 551, 552, 553, 592, 756, 757, 758, 759, 985], "a_revers": [324, 325, 326, 327, 328, 421, 456, 520, 592], "value_cummax": [325, 592], "value_cummax_all_fil": [325, 592], "value_cumsum": [328, 592], "value_cumsum_all_fil": [328, 592], "min_period": [329, 375, 376, 377, 457, 458, 459, 460, 461, 462, 464, 465, 466, 576, 577, 592, 760, 814, 815, 816, 885, 886, 887, 888, 889, 890, 892, 893, 894, 985], "slide": [329, 592, 760, 985], "realli": [329, 592, 760, 985], "visit": [329, 592, 760, 985], "drop_nan": [333, 592, 985], "lose": [334, 768], "2001": [334, 339, 341, 342, 344, 345, 350, 352, 357, 358, 359, 361, 362, 366, 368, 369, 370, 371, 372, 510, 768, 773, 775, 776, 778, 780, 781, 782, 783, 785, 787, 788, 790, 793, 795, 796, 797, 799, 800, 804, 806, 807, 808, 809, 810, 943], "time_unit_m": [334, 768], "time_unit_n": [334, 768], "naiv": [335, 510, 512, 769, 943, 945], "compon": [335, 362, 510, 512, 556, 769, 800, 943, 945], "resolv": 335, "456000": [335, 769], "101000": 335, "456": [335, 769, 964, 985], "101": [335, 499, 932, 993], "d1": 335, "d2": 335, "d3": 335, "utc": [336, 360, 510, 512, 770, 798, 943, 945], "europ": [336, 360, 770, 798], "london": [336, 360, 770, 798], "gmt": [336, 360, 770, 798], "bst": [336, 360, 770, 798], "weekdai": [339, 358], "day_of_month": [339, 358, 370], "ordinal_dai": [339, 370], "day_of_year": [339, 358, 370], "days_diff": 340, "epochtimeunit": [341, 562, 775], "unix": [341, 562, 775], "epoch_n": [341, 775], "epoch_": [341, 775], "978307200000000": [341, 366, 775, 804], "978307200": [341, 775], "978393600000000": [341, 366, 775, 804], "978393600": [341, 775], "978480000000000": [341, 366, 775, 804], "978480000": [341, 775], "hours_diff": 343, "leap": [344, 357, 778, 795], "2002": [344, 345, 357, 359, 372, 778, 795, 810], "iso": [345, 369, 370, 779, 807, 808], "2006": [345, 357, 795], "180": [345, 359, 372], "2004": [345, 357, 795], "2005": [345, 357, 795], "1_001": [346, 347, 349, 356], "002": [346, 347, 349, 356, 556, 784, 786, 794], "003": [346, 347, 349, 356], "3000": 346, "997": [346, 347, 349, 356], "997000": 346, "998": [346, 347, 349, 356], "998000": 346, "999": [346, 347, 349, 356, 993], "999000": 346, "microseconds_diff": 347, "milliseconds_diff": 349, "minutes_diff": 351, "1440": [351, 789], "think": [353, 354, 791, 792], "vectoris": [353, 354, 791, 792], "tseri": [353, 354, 791, 792], "monthend": [353, 791], "rollforward": [353, 791], "monthbegin": [354, 792], "rollback": [354, 792], "nanoseconds_diff": 356, "1000000": [356, 516, 794], "minu": [357, 795], "dictat": [357, 795], "date_plus_1i": [357, 795], "1y2mo": [357, 795], "date_min": 357, "1998": [357, 795], "1999": [357, 795], "2003": [357, 562, 795], "ordin": [358, 451, 592, 796, 879, 985], "366": [358, 796], "use_earliest": [360, 798], "convert_time_zon": [360, 798], "ambigu": [360, 798], "sai": [360, 798], "daylight": [360, 798], "earliest": [360, 798], "london_timezon": [360, 798], "amsterdam": [360, 798], "london_to_amsterdam": [360, 798], "cet": [360, 798], "cest": [360, 798], "dst": [360, 798], "ts_local": [360, 798], "brussel": [360, 798], "half": [361, 375, 376, 377, 592, 799, 814, 815, 816, 985], "225": [361, 368], "to_fram": [361, 368, 510, 899, 900, 939, 940, 943, 985], "10m": [361, 368, 799, 806], "milli": [362, 800], "micro": [362, 800], "456789": 362, "654321": 362, "111110": 362, "765431": 362, "sec": [362, 993], "11111": 362, "seconds_diff": 363, "to_str": [364, 802], "datetime_str": [364, 367], "timestamp_n": [366, 804], "timestamp_m": 366, "978307200000": 366, "978393600000": 366, "978480000000": 366, "strftime": [367, 805], "1mo_satur": 368, "53": [369, 807], "incorrect": [371, 470, 592, 674, 809, 901, 985], "time_unit_u": [371, 809], "32971": [371, 809], "32974": [371, 809], "32976": [371, 809], "718281828459045": [373, 415, 592, 812, 856, 985], "pk": [373, 592, 812, 985], "probabl": [373, 592, 812, 985], "459148": [373, 592], "754888": [373, 592], "span": [375, 376, 377, 592, 814, 815, 816, 985], "half_lif": [375, 376, 377, 592, 814, 815, 816, 985], "adjust": [375, 376, 377, 478, 592, 814, 815, 816, 911, 985], "ignore_nul": [375, 376, 377, 592, 814, 815, 816, 976, 985], "exponenti": [375, 376, 377, 379, 447, 592, 814, 815, 816, 817, 985], "weight": [375, 376, 377, 457, 458, 459, 460, 461, 462, 464, 465, 466, 478, 592, 814, 815, 816, 885, 886, 887, 888, 889, 890, 892, 893, 894, 911, 985], "decai": [375, 376, 377, 592, 814, 815, 816, 985], "term": [375, 376, 377, 495, 498, 592, 814, 815, 816, 928, 931, 985], "mass": [375, 376, 377, 592, 814, 815, 816, 985], "gamma": [375, 376, 377, 592, 814, 815, 816, 985], "foral": [375, 376, 377, 592, 814, 815, 816, 985], "geq": [375, 376, 377, 592, 814, 815, 816, 985], "theta": [375, 376, 377, 592, 814, 815, 816, 985], "life": [375, 376, 377, 592, 814, 815, 816, 985], "exp": [375, 376, 377, 592, 814, 815, 816, 985], "ln": [375, 376, 377, 592, 814, 815, 816, 985], "smooth": [375, 376, 377, 592, 814, 815, 816, 985], "factor": [375, 376, 377, 527, 592, 814, 815, 816, 969, 985], "leq": [375, 376, 377, 592, 814, 815, 816, 985], "imbal": [375, 376, 377, 592, 814, 815, 816, 985], "ew": [375, 376, 377, 592, 814, 815, 816, 985], "w_i": [375, 376, 377, 592, 814, 815, 816, 985], "recurs": [375, 376, 377, 592, 814, 815, 816, 985], "y_0": [375, 376, 377, 592, 814, 815, 816, 985], "x_0": [375, 376, 377, 592, 814, 815, 816, 985], "y_t": [375, 376, 377, 592, 814, 815, 816, 985], "y_": [375, 376, 377, 592, 814, 815, 816, 985], "x_t": [375, 376, 377, 592, 814, 815, 816, 985], "observ": [375, 376, 377, 592, 814, 815, 816, 985], "x_2": [375, 376, 377, 592, 814, 815, 816, 985], "428571": [375, 592], "bia": [376, 377, 410, 463, 478, 592, 815, 816, 853, 891, 911, 985], "unbias": [376, 377, 592, 815, 816, 985], "963624": [376, 592, 815, 985], "928571": [377, 592, 816, 985], "wildcard": [378, 545, 551, 552, 560, 574, 592], "regex": [378, 428, 485, 486, 489, 491, 492, 500, 501, 508, 558, 581, 592, 918, 919, 922, 924, 925, 933, 934, 941], "aa": [378, 485, 558, 592, 918], "ba": [378, 558, 592], "cc": [378, 558, 592], "718282": [379, 592], "389056": [379, 592], "54": [379, 592, 993], "59815": [379, 592], "expand": [380, 427, 428, 454, 592, 818, 985], "exprlistnamespac": [380, 386, 455, 592], "exprstringnamespac": [380, 592], "pythonliter": [381, 568, 571, 575, 592, 819, 861, 864, 985], "extrem": [381, 592, 819, 985], "group_col": [384, 535, 592], "g1": [384, 535, 592], "g2": [384, 535, 592], "lt": [384, 535, 592, 985], "gte": [384, 535, 592], "divis": [388, 529, 592], "truediv": [388, 592], "9774092659964970114": [392, 592], "13614470193936745724": [392, 592], "1101441246220388612": [392, 592], "11638928888656214026": [392, 592], "13382926553367784577": [392, 592], "cumsum": [395, 519, 592, 627, 690, 852, 985], "interpolationmethod": [396, 592, 832, 985], "regrid": [396, 592], "grid": [396, 592], "df_original_grid": [396, 592], "grid_point": [396, 592], "df_new_grid": [396, 592], "conflat": [397, 592], "finit": [399, 529, 548, 592, 837, 985], "primit": [401, 592, 967, 985], "optional_memb": [401, 592, 840, 985], "infinit": [402, 529, 592, 841, 985], "_isnan": [403, 592], "b_isnan": [403, 592], "negat": [404, 592], "_is_not_nan": [405, 592], "b_is_not_nan": [405, 592], "_not_nul": [406, 592], "a_not_nul": [406, 592], "b_not_nul": [406, 592], "_isnul": [407, 592], "a_isnul": [407, 592], "b_isnul": [407, 592], "undo": [409, 433, 592], "duplicateerror": [409, 592, 603], "occurr": [409, 592, 829, 985], "333333": [409, 466, 592, 873, 894, 985], "fisher": [410, 478, 592, 853, 911, 985], "fourth": [410, 592, 853, 985], "subtract": [410, 519, 592, 853, 985], "distribut": [410, 478, 592, 853, 911, 985], "elimin": [410, 592, 853, 985], "bias": [410, 478, 592, 853, 911, 985], "scipi": [410, 478, 592, 853, 911, 985], "stat": [410, 478, 592, 853, 911, 985], "153061": [410, 592], "logarithm": [415, 416, 417, 592, 856, 857, 858, 985], "584963": [415, 592], "30103": [416, 592], "60206": [416, 592], "natur": [417, 592, 858, 985], "plu": [417, 592, 858, 985], "693147": [417, 592], "098612": [417, 592], "386294": [417, 592], "lowest": [418, 592], "9223372036854775808": [418, 592], "agg_list": [420, 592], "elementwis": [420, 457, 458, 459, 460, 461, 462, 464, 465, 466, 592, 885, 886, 887, 888, 889, 890, 892, 893, 894, 985], "parti": [420, 592], "book": [420, 592], "map_dict": [420, 592, 985], "argmax": [420, 592], "_revers": [421, 456, 520, 592], "rsplit": [421, 592], "b_revers": [421, 456, 520, 592], "remap": [422, 592, 860, 985], "lookup": [422, 592, 860, 985], "country_code_dict": [422, 592], "ca": [422, 592], "canada": [422, 592], "de": [422, 592], "germani": [422, 592], "fr": [422, 592], "franc": [422, 592], "country_cod": [422, 592], "rest": [422, 592], "exprmetanamespac": [426, 429], "computeerror": [430, 499, 603, 932], "keep_nam": [433, 592], "modulu": [435, 592], "xlog2": [437, 447, 592], "poison": [439, 440, 592, 869, 870, 985], "nanmax": [439, 440, 592, 869, 870, 985], "wherea": [439, 440, 592, 626, 633, 690, 869, 870, 985], "inequ": [441, 592], "outcom": [444, 592], "_max": [444, 592], "c_max": [444, 592], "_min": [444, 592], "c_min": [444, 592], "percent": [445, 592, 873, 985], "090909": [445, 592], "extract_numb": [446, 592], "digit": [446, 467, 492, 516, 592, 895, 919, 925, 949, 985, 993], "scale_negative_even": [446, 592], "expon": [447, 592, 985], "reverse_": [448, 592], "reverse_a": [448, 592], "reverse_fruit": [448, 592], "reverse_b": [448, 592], "reverse_car": [448, 592], "rankmethod": [451, 592, 879, 985], "ti": [451, 592, 879, 985], "competit": [451, 592, 879, 985], "highest": [451, 532, 548, 592, 690, 879, 985], "64bit": [453, 592, 881, 985], "safe": [453, 510, 512, 592, 881, 943, 945, 967, 985], "coerc": [454, 592], "fruits_revers": [456, 520, 592], "cars_revers": [456, 520, 592], "window_s": [457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 576, 577, 592, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 985], "rolling_min": [457, 592, 885, 985], "rolling_max": [457, 592, 885, 985], "rolling_mean": [457, 592, 885, 985], "rolling_sum": [457, 592, 885, 985], "multipli": [457, 458, 459, 460, 461, 462, 464, 465, 466, 592, 885, 886, 887, 888, 889, 890, 892, 893, 894, 985], "label": [457, 458, 459, 460, 461, 462, 464, 465, 466, 592, 643, 690, 761, 877, 885, 886, 887, 888, 889, 890, 892, 893, 894, 985], "358899": [457, 592], "041452": [457, 592], "567764": [457, 592], "travers": [458, 459, 461, 464, 465, 466, 592, 886, 887, 889, 892, 893, 894, 985], "vector": [458, 459, 461, 464, 465, 466, 592, 886, 887, 889, 892, 893, 894, 985], "5h": [458, 459, 460, 461, 462, 464, 465, 466, 592], "skew": [463, 592, 891, 985], "527525": [464, 592, 892, 985], "searchsortedsid": [469, 592, 897, 985], "leftmost": [469, 592, 897, 985], "rightmost": [469, 592, 897, 985], "six": [469, 592], "downstream": [470, 592, 901, 985], "extrema": [473, 592, 905, 985], "112": [473, 592, 993], "129": [473, 592], "8589934592": [473, 592], "1073741824": [473, 592], "175201": [477, 592, 910, 985], "about": [478, 485, 491, 492, 500, 592, 911, 918, 924, 925, 933, 985, 993], "unimod": [478, 592, 911, 985], "skewtest": [478, 592, 911, 985], "speak": [478, 592, 911, 985], "g_1": [478, 592, 911, 985], "m_3": [478, 592, 911, 985], "m_2": [478, 592, 911, 985], "m_i": [478, 592, 911, 985], "sum_": [478, 592, 911, 985], "texttt": [478, 592, 911, 985], "k_3": [478, 592, 911, 985], "k_2": [478, 592, 911, 985], "sqrt": [478, 592, 911, 985], "343622": [478, 592], "value1": [481, 592], "value2": [481, 592], "attain": [481, 592], "414214": [482, 592, 914, 985], "ends_with": [485, 508, 941], "sensit": [485, 492, 500, 918, 925, 933], "ilmsuxu": [485, 491, 492, 500, 918, 924, 925, 933], "default_match": 485, "insensitive_match": 485, "section": [485, 491, 492, 500, 918, 924, 925, 933], "crab": [485, 918], "dog": [485, 513, 515, 547, 918], "rab": [485, 918], "success": [486, 492, 919, 925], "overlap": [486, 492, 919, 925], "captur": [486, 491, 492, 919, 924, 925], "123": [486, 492, 501, 919, 925, 934, 964, 985], "bla": [486, 492, 919, 925], "asd": [486, 492, 919, 925], "678": [486, 492, 919, 925], "910t": [486, 492, 919, 925], "count_digit": 486, "666f6f": [488, 921], "626172": [488, 921], "mango": [489, 508, 922, 941], "go": [489, 922], "has_suffix": 489, "group_index": [491, 924], "nthose": [491, 924], "nodd": [491, 924], "nthe": [491, 924], "url": [491, 924], "vote": [491, 924], "ballon_dor": [491, 924], "404": [491, 924], "ref": [491, 924], "candid": [491, 924], "messi": [491, 924], "ronaldo": [491, 924], "did": [492, 925], "email": [492, 925], "real": [492, 925], "some_account": [492, 925], "somewher": [492, 925], "net": [492, 925], "jkl": [492, 925], "uvw": [492, 925], "co": [492, 592, 925, 985], "uk": [492, 925], "address": 492, "xi": [492, 925], "insensit": [492, 500, 918, 925, 933], "quantifi": [492, 925], "arr": [492, 557, 593, 967, 985, 986], "email_part": [492, 925], "extracted_nr": 492, "910": [492, 925], "json_path_match": [493, 926], "jsonpath": [493, 494, 926, 927], "json_path": [494, 927], "regardless": [494, 927], "json_val": [494, 927], "n_char": [495, 928], "caf\u00e9": [495, 498, 928, 931], "345": [495, 498, 928, 931], "\u6771\u4eac": [495, 498, 928, 931], "nchar": [495, 498], "fill_char": [496, 502, 929, 935], "justifi": [496, 502, 929, 935], "pad": [496, 502, 516, 929, 935, 949], "cow": [496, 502, 929, 935], "monkei": [496, 502, 929, 935], "hippopotamu": [496, 502, 929, 935], "strip": [497, 503, 930, 936], "tworld": [497, 509, 930, 942], "wod": [497, 503, 930, 936], "rld": [497, 930], "radix": [499, 932], "parseerror": [499, 932], "becom": [499, 932], "silent": [499, 932], "bin": [499, 536, 586, 592, 761, 829, 877, 932, 979, 985], "110": [499, 932], "010": [499, 932], "fa1e": [499, 932], "ff00": [499, 932], "cafe": [499, 932], "64030": [499, 932], "65280": [499, 932], "51966": [499, 932], "replace_al": [500, 933], "citi": 500, "philadelphia": 500, "season": 500, "spring": 500, "summer": 500, "autumn": 500, "winter": 500, "weather": [500, 933], "raini": [500, 933], "sunni": [500, 933], "cloudi": 500, "snowi": 500, "foggi": [500, 933], "123abc": [500, 933], "abc456": [500, 933], "abcabc": [501, 934], "123a123": [501, 934], "bc": [501, 581, 934], "trail": [503, 509, 936, 942], "worl": [503, 509, 936, 942], "subslic": [504, 937], "pear": [504, 937], "papaya": [504, 937], "dragonfruit": [504, 937], "s_slice": 504, "ear": [504, 937], "aya": [504, 937], "uit": [504, 937], "ya": [504, 937], "onf": [504, 937], "a_1": [506, 939, 963, 985], "d_4": [506, 939], "rename_field": [506, 507, 939, 940], "first_part": [506, 507, 939, 940], "second_part": [506, 507, 939, 940], "remaind": [507, 940], "app": [508, 941], "has_prefix": 508, "polarstemporaltyp": [510, 943], "anywher": [510, 511, 512, 943, 944, 945], "3f": [510, 512, 943, 945], "00z": [510, 512, 943, 945], "sun": [510, 943], "jul": [510, 943], "34": [510, 943], "lowercas": [513, 946], "variant": [513, 515], "uppercas": [515, 948], "100000": 516, "0010": 516, "0001": 516, "00000": 516, "00001": 516, "cd": [517, 518], "struct_col": [517, 518], "www": 518, "xxx": 518, "yyi": 518, "zzz": 518, "obvious": 518, "structfieldnotfounderror": [518, 603], "761594": [526, 592, 960, 985], "replic": [527, 592, 969, 985], "vals_phys": [527, 592], "floordiv": [529, 592], "ieee": [529, 592], "754": [529, 592], "mathemat": [529, 557, 592], "undefin": [529, 592], "On": [529, 592], "operand": [529, 592], "infin": [529, 592], "value_count": [531, 592, 985], "9223372036854775807": [532, 592], "multithread": [533, 592], "binary_str": [536, 592], "zfill": [536, 592], "250": [536, 592, 887, 985, 993], "bin_x": [536, 592], "bin_i": [536, 592], "xor_xi": [536, 592], "bin_xor_xi": [536, 592], "00001010": [536, 592], "00000001": [536, 592], "00001011": [536, 592], "00001000": [536, 592], "00000010": [536, 592], "11111010": [536, 592], "00000011": [536, 592], "249": [536, 592], "11111001": [536, 592], "01000010": [536, 592], "00000100": [536, 592], "70": [536, 592], "01000110": [536, 592], "bitwis": [537, 538], "AND": 537, "returns_scalar": 539, "product_a": 539, "49": 539, "Be": 541, "more_nam": 545, "hamburg": 545, "lag": 546, "mimic": 546, "a_lag_": 546, "a_rol": 546, "swim": 547, "walk": 547, "full_sent": 547, "correlationmethod": 548, "propagate_nan": 548, "spearman": 548, "larger": [548, 654, 655, 690], "544705": 548, "covari": [550, 577], "acc": [551, 552, 560, 574], "include_init": 551, "accumul": [551, 552, 560, 574], "fn": [551, 552, 560, 574], "new_valu": [551, 552, 560, 574], "cumreduc": 551, "tbl_width_char": 556, "120": 556, "add_week": 556, "add_dai": 556, "add_second": 556, "add_milli": 556, "add_hour": 556, "a_b_doubl": 557, "f_string": 561, "placehold": 561, "hello_": 561, "_world": 561, "foo_": 561, "_bar_": 561, "foo_a_bar_1": 561, "foo_b_bar_2": 561, "foo_c_bar_3": 561, "epoch": 562, "timestep": 562, "1666683077": 562, "1666683099": 562, "39": 562, "12345": [562, 747, 824, 895, 985], "12346": 562, "agg_group": [563, 592], "allow_object": 566, "valueexcept": 566, "test_func": 567, "605551": 579, "605551275463989": 579, "my_struct": 580, "selector": 581, "chain": 585, "isn": 585, "thens": 585, "elif": 585, "pick": 585, "sometim": 591, "and_": 592, "approx_uniqu": [592, 690], "arcco": [592, 985], "arccosh": [592, 985], "arcsin": [592, 985], "arcsinh": [592, 985], "arctan": [592, 985], "arctanh": [592, 985], "arg_max": [592, 985], "arg_min": [592, 985], "arg_sort": [592, 985], "arg_uniqu": [592, 985], "backward_fil": 592, "clip_max": [592, 985], "clip_min": [592, 985], "cosh": [592, 985], "cumcount": 592, "cummax": [592, 985], "cummin": [592, 985], "cumulative_ev": [592, 985], "entropi": [592, 985], "eq": [592, 985], "ewm_mean": [592, 985], "ewm_std": [592, 985], "ewm_var": [592, 985], "extend_const": [592, 985], "flatten": 592, "ge": [592, 985], "gt": [592, 985], "implod": [592, 985], "inspect": [592, 690], "is_between": [592, 985], "is_finit": [592, 985], "is_first": [592, 985], "is_in": [592, 985], "is_infinit": [592, 985], "is_nan": [592, 985], "is_not_nan": [592, 985], "is_not_nul": [592, 985], "kurtosi": [592, 985], "le": [592, 985], "log10": [592, 985], "log1p": [592, 985], "mod": 592, "mul": 592, "nan_max": [592, 985], "nan_min": [592, 985], "ne": [592, 985], "or_": 592, "pct_chang": [592, 985], "pow": [592, 985], "reinterpret": [592, 985], "repeat_bi": 592, "rolling_appli": [592, 985], "rolling_median": [592, 985], "rolling_quantil": [592, 985], "rolling_skew": [592, 985], "rolling_std": [592, 985], "rolling_var": [592, 985], "search_sort": [592, 985], "shrink_dtyp": [592, 985], "sin": [592, 985], "sinh": [592, 985], "sort_bi": 592, "tan": [592, 985], "to_phys": [592, 985], "unique_count": [592, 985], "xor": 592, "expos": 603, "miscellan": 603, "arrowerror": 603, "columnnotfounderror": 603, "invalidoperationerror": 603, "nodataerror": 603, "polarspanicerror": 603, "schemaerror": 603, "schemafieldnotfounderror": 603, "shapeerror": 603, "parametr": 603, "build_info": 603, "get_index_typ": 603, "show_vers": 603, "threadpool_s": 603, "sqlcontext": [603, 992], "hit": [607, 690], "node": [607, 627, 634, 638, 643, 646, 690], "huge": [610, 690], "saver": [610, 690], "purpos": [617, 690], "influenc": [617, 634, 690], "read_json": [622, 671, 690], "lazygroupbi": [623, 624, 625, 690], "other_lf": [629, 690], "validate_output_schema": [634, 690], "streamabl": [634, 638, 690], "past": [634, 690], "assum": [634, 674, 690], "paramount": [634, 690], "bug": [634, 674, 690], "elig": [634, 690], "invari": [634, 690], "upheld": [634, 690], "prune": [634, 690], "show_plot": [643, 690], "truncate_nod": [643, 690], "figsiz": [643, 653, 690], "gantt": [643, 690], "plot": [643, 653, 690], "groupby_partit": [643, 690], "470": [643, 690], "475": [643, 690], "1964": [643, 690], "from_json": [645, 690], "swap": [646, 690], "output_path": [653, 690], "raw_output": [653, 690], "figur": [653, 690], "ram": [654, 655, 690], "slightli": [654, 655, 690], "my_larger_than_ram_fil": [654, 655, 690], "data_pagesize_limit": [655, 690], "290994": [658, 690], "118034": [658, 690], "433013": [658, 690], "1875": [666, 690], "extern": [669, 690], "lf_other": [669, 690], "afoo": [669, 690], "cfoo": [669, 690], "train_lf": [669, 690], "feature_0": [669, 690], "feature_1": [669, 690], "test_lf": [669, 690], "_train": [669, 690], "feature_0_train": [669, 690], "dataframescan": [671, 690], "output_schema": [671, 690], "lf5": 690, "lf6": 690, "explain": 690, "sink_ipc": 690, "sink_parquet": 690, "with_context": 690, "new_aliased_sr": [695, 985], "append_chunk": [698, 985], "super": [698, 985], "141593": [700, 985], "292432": [701, 985], "549306": [705, 985], "listnamespac": [711, 818, 883, 985], "field_2": 736, "n00": 736, "n01": 736, "n02": 736, "catnamespac": 745, "56789": [747, 824, 895, 985], "901234": [747, 824, 895, 985], "pi": [754, 909, 959, 985], "1232e": [754, 985], "break_point_label": [761, 877, 985], "break_point": [761, 829, 877, 985], "category_label": [761, 877, 985], "breakpoint": [761, 877, 985], "quick": [762, 985, 993], "series_num": [762, 985], "581139": [762, 985], "series_str": [762, 985], "datetimenamespac": 767, "ser": [771, 772, 803], "replace_time_zon": [771, 772, 803], "kathmandu": [771, 772, 803], "0545": [771, 772, 803], "500m": [783, 785, 793, 800], "500000": 783, "2m": 788, "500000000": 793, "date_minus_1y_2mon": 795, "165": [799, 806], "series_equ": [799, 806, 985], "timestamp_u": 804, "978307200000000000": 804, "978393600000000000": 804, "978480000000000000": 804, "005": [812, 985], "06293300616044681": [812, 985], "65": [812, 985], "8568409950394724": [812, 985], "4000000": [813, 985], "814697265625": [813, 985], "stringnamespac": [818, 916, 985], "bitmask": [826, 985], "swiftli": [826, 985], "10734580197236529959": [827, 985], "3022416320763508302": [827, 985], "13756996518000038261": [827, 985], "bin_count": [829, 985], "a_count": [829, 985], "fall": [833, 985], "2147483648": [859, 985], "iso3166": [860, 985], "tur": [860, 985], "jpn": [860, 985], "nld": [860, 985], "country_lookup": [860, 985], "japan": [860, 985], "t\u00fcrkiy": [860, 985], "netherland": [860, 985], "unrecognis": [860, 985], "unspecifi": [860, 985], "country_nam": [860, 985], "166667": [873, 985], "142857": [873, 985], "peak": [874, 875, 985], "quanil": [877, 985], "nanstd": [885, 985], "858612": [885, 985], "200": [886, 887, 889, 985], "150": [887, 985], "350": [887, 985], "450": [887, 985], "381802": [891, 985], "dev": [892, 985], "frequent": [899, 900, 985], "mutat": [900, 985], "2246e": [909, 959, 985], "6331e16": [959, 985], "lib": [962, 985], "int64arrai": [962, 985], "a_2": [963, 985], "a_3": [963, 985], "s_from_str_repr": [965, 985], "zero_copy_onli": [967, 985], "writabl": [967, 985], "complet": [967, 985], "presenc": [967, 985], "immut": [967, 985], "127": [973, 985], "seriesview": [976, 985], "arraylik": 985, "dtype_if_empti": 985, "position": 985, "scenario": 985, "chunk_length": 985, "cut": 985, "get_chunk": 985, "has_valid": 985, "hist": 985, "is_boolean": 985, "is_float": 985, "is_integ": 985, "is_numer": [985, 993], "is_sort": 985, "is_tempor": 985, "is_utf8": 985, "new_from_index": 985, "peak_max": 985, "peak_min": 985, "power": 985, "qcut": 985, "set_at_idx": 985, "two_a": 992, "__enter__": 992, "__exit__": 992, "exc_typ": 992, "baseexcept": 992, "exc_val": 992, "exc_tb": 992, "tracebacktyp": 992, "unregist": 992, "guid": 993, "easi": 993, "approxim": 993, "own": 993, "machin": 993, "xdist": 993, "vari": 993, "hardwar": 993, "setup": 993, "numeric_dtyp": 993, "null_probabililti": 993, "test_numer": 993, "col0": 993, "col4": 993, "29096": 993, "485": 993, "2147483647": 993, "8257e14": 993, "7508": 993, "37338": 993, "7264": 993, "321": 993, "16996": 993, "121": 993, "361": 993, "63204": 993, "1443e235": 993, "conform": 993, "ascii_lett": 993, "id_char": 993, "alphabet": 993, "price": 993, "min_valu": 993, "max_valu": 993, "test_price_calcul": 993, "a101": 993, "8nin": 993, "qhoo": 993, "714": 993, "544": 993, "i0e0": 993, "0000": 993, "colz": 993, "test_miscellan": 993, "143": 993, "235": 993, "87": 993, "186": 993, "174": 993, "179": 993, "213": 993, "221": 993, "86": 993, "255": 993}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [36, 0, 1, "", "DataType"], [37, 0, 1, "", "Date"], [38, 0, 1, "", "Datetime"], [39, 0, 1, "", "Decimal"], [40, 0, 1, "", "Duration"], [41, 0, 1, "", "Float32"], [42, 0, 1, "", "Float64"], [43, 0, 1, "", "Int16"], [44, 0, 1, "", "Int32"], [45, 0, 1, "", "Int64"], [46, 0, 1, "", "Int8"], [47, 0, 1, "", "List"], [48, 0, 1, "", "Null"], [49, 0, 1, "", "Object"], [992, 0, 1, "", "SQLContext"], [56, 0, 1, "", "StringCache"], [57, 0, 1, "", "Struct"], [58, 0, 1, "", "Time"], [59, 0, 1, "", "UInt16"], [60, 0, 1, "", "UInt32"], [61, 0, 1, "", "UInt64"], [62, 0, 1, "", "UInt8"], [63, 0, 1, "", "Unknown"], [64, 0, 1, "", "Utf8"], [65, 4, 1, "", "align_frames"], [537, 4, 1, "", "all"], [538, 4, 1, "", "any"], [539, 4, 1, "", "apply"], [540, 4, 1, "", "approx_unique"], [541, 4, 1, "", "arange"], [542, 4, 1, "", "arg_sort_by"], [70, 4, 1, "", "arg_where"], [543, 4, 1, "", "avg"], [71, 4, 1, "", "build_info"], [544, 4, 1, "", "coalesce"], [545, 4, 1, "", "col"], [72, 4, 1, "", "collect_all"], [73, 4, 1, "", "concat"], [546, 4, 1, "", "concat_list"], [547, 4, 1, "", "concat_str"], [548, 4, 1, "", "corr"], [549, 4, 1, "", "count"], [550, 4, 1, "", "cov"], [551, 4, 1, "", "cumfold"], [552, 4, 1, "", "cumreduce"], [553, 4, 1, "", "cumsum"], [554, 4, 1, "", "date"], [74, 4, 1, "", "date_range"], [555, 4, 1, "", "datetime"], [556, 4, 1, "", "duration"], [557, 4, 1, "", "element"], [75, 4, 1, "", "enable_string_cache"], [558, 4, 1, "", "exclude"], [559, 4, 1, "", "first"], [560, 4, 1, "", "fold"], [561, 4, 1, "", "format"], [90, 4, 1, "", "from_arrow"], [91, 4, 1, "", "from_dataframe"], [92, 4, 1, "", "from_dict"], [93, 4, 1, "", "from_dicts"], [562, 4, 1, "", "from_epoch"], [94, 4, 1, "", "from_numpy"], [95, 4, 1, "", "from_pandas"], [96, 4, 1, "", "from_records"], [97, 4, 1, "", "from_repr"], [98, 4, 1, "", "get_index_type"], [563, 4, 1, "", "groups"], [564, 4, 1, "", "head"], [565, 4, 1, "", "implode"], [566, 4, 1, "", "lit"], [567, 4, 1, "", "map"], [568, 4, 1, "", "max"], [569, 4, 1, "", "mean"], [570, 4, 1, "", "median"], [571, 4, 1, "", "min"], [572, 4, 1, "", "n_unique"], [100, 4, 1, "", "ones"], [573, 4, 1, "", "quantile"], [101, 4, 1, "", "read_avro"], [102, 4, 1, "", "read_csv"], [103, 4, 1, "", "read_csv_batched"], [104, 4, 1, "", "read_database"], [105, 4, 1, "", "read_delta"], [106, 4, 1, "", "read_excel"], [107, 4, 1, "", "read_ipc"], [108, 4, 1, "", "read_ipc_schema"], [109, 4, 1, "", "read_json"], [110, 4, 1, "", "read_ndjson"], [111, 4, 1, "", "read_parquet"], [112, 4, 1, "", "read_parquet_schema"], [574, 4, 1, "", "reduce"], [575, 4, 1, "", "repeat"], [576, 4, 1, "", "rolling_corr"], [577, 4, 1, "", "rolling_cov"], [113, 4, 1, "", "scan_csv"], [114, 4, 1, "", "scan_delta"], [115, 4, 1, "", "scan_ipc"], [116, 4, 1, "", "scan_ndjson"], [117, 4, 1, "", "scan_parquet"], [118, 4, 1, "", "scan_pyarrow_dataset"], [578, 4, 1, "", "select"], [119, 4, 1, "", "show_versions"], [579, 4, 1, "", "std"], [580, 4, 1, "", "struct"], [581, 4, 1, "", "sum"], [582, 4, 1, "", "tail"], [129, 4, 1, "", "threadpool_size"], [583, 4, 1, "", "time"], [130, 4, 1, "", "time_range"], [584, 4, 1, "", "var"], [585, 4, 1, "", "when"], [131, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "restore_defaults"], [9, 1, 1, "", "save"], [10, 1, 1, "", "set_ascii_tables"], [11, 1, 1, "", "set_fmt_float"], [12, 1, 1, "", "set_fmt_str_lengths"], [13, 1, 1, "", "set_streaming_chunk_size"], [14, 1, 1, "", "set_tbl_cell_alignment"], [15, 1, 1, "", "set_tbl_cols"], [16, 1, 1, "", "set_tbl_column_data_type_inline"], [17, 1, 1, "", "set_tbl_dataframe_shape_below"], [18, 1, 1, "", "set_tbl_formatting"], [19, 1, 1, "", "set_tbl_hide_column_data_types"], [20, 1, 1, "", "set_tbl_hide_column_names"], [21, 1, 1, "", "set_tbl_hide_dataframe_shape"], [22, 1, 1, "", "set_tbl_hide_dtype_separator"], [23, 1, 1, "", "set_tbl_rows"], [24, 1, 1, "", "set_tbl_width_chars"], [25, 1, 1, "", "set_verbose"], [26, 1, 1, "", "state"]], "polars.DataFrame": [[134, 1, 1, "", "__dataframe__"], [135, 1, 1, "", "apply"], [136, 1, 1, "", "bottom_k"], [137, 1, 1, "", "clear"], [138, 1, 1, "", "clone"], [139, 2, 1, "", "columns"], [140, 1, 1, "", "corr"], [141, 1, 1, "", "describe"], [142, 1, 1, "", "drop"], [143, 1, 1, "", "drop_in_place"], [144, 1, 1, "", "drop_nulls"], [145, 2, 1, "", "dtypes"], [146, 1, 1, "", "estimated_size"], [147, 1, 1, "", "explode"], [148, 1, 1, "", "extend"], [149, 1, 1, "", "fill_nan"], [150, 1, 1, "", "fill_null"], [151, 1, 1, "", "filter"], [152, 1, 1, "", "find_idx_by_name"], [153, 1, 1, "", "fold"], [154, 1, 1, "", "frame_equal"], [155, 1, 1, "", "get_column"], [156, 1, 1, "", "get_columns"], [157, 1, 1, "", "glimpse"], [158, 1, 1, "", "groupby"], [159, 1, 1, "", "groupby_dynamic"], [160, 1, 1, "", "groupby_rolling"], [161, 1, 1, "", "hash_rows"], [162, 1, 1, "", "head"], [163, 2, 1, "", "height"], [164, 1, 1, "", "hstack"], [165, 1, 1, "", "insert_at_idx"], [166, 1, 1, "", "interpolate"], [167, 1, 1, "", "is_duplicated"], [168, 1, 1, "", "is_empty"], [169, 1, 1, "", "is_unique"], [170, 1, 1, "", "item"], [171, 1, 1, "", "iter_rows"], [172, 1, 1, "", "iter_slices"], [173, 1, 1, "", "join"], [174, 1, 1, "", "join_asof"], [175, 1, 1, "", "lazy"], [176, 1, 1, "", "limit"], [177, 1, 1, "", "max"], [178, 1, 1, "", "mean"], [179, 1, 1, "", "median"], [180, 1, 1, "", "melt"], [181, 1, 1, "", "merge_sorted"], [182, 1, 1, "", "min"], [183, 1, 1, "", "n_chunks"], [184, 1, 1, "", "n_unique"], [185, 1, 1, "", "null_count"], [186, 1, 1, "", "partition_by"], [187, 1, 1, "", "pipe"], [188, 1, 1, "", "pivot"], [189, 1, 1, "", "product"], [190, 1, 1, "", "quantile"], [191, 1, 1, "", "rechunk"], [192, 1, 1, "", "rename"], [193, 1, 1, "", "replace"], [194, 1, 1, "", "replace_at_idx"], [195, 1, 1, "", "reverse"], [196, 1, 1, "", "row"], [197, 1, 1, "", "rows"], [198, 1, 1, "", "sample"], [199, 2, 1, "", "schema"], [200, 1, 1, "", "select"], [201, 1, 1, "", "set_sorted"], [202, 2, 1, "", "shape"], [203, 1, 1, "", "shift"], [204, 1, 1, "", "shift_and_fill"], [205, 1, 1, "", "shrink_to_fit"], [206, 1, 1, "", "slice"], [207, 1, 1, "", "sort"], [208, 1, 1, "", "std"], [209, 1, 1, "", "sum"], [210, 1, 1, "", "tail"], [211, 1, 1, "", "take_every"], [212, 1, 1, "", "to_arrow"], [213, 1, 1, "", "to_dict"], [214, 1, 1, "", "to_dicts"], [215, 1, 1, "", "to_dummies"], [216, 1, 1, "", "to_init_repr"], [217, 1, 1, "", "to_numpy"], [218, 1, 1, "", "to_pandas"], [219, 1, 1, "", "to_series"], [220, 1, 1, "", "to_struct"], [221, 1, 1, "", "top_k"], [222, 1, 1, "", "transpose"], [223, 1, 1, "", "unique"], [224, 1, 1, "", "unnest"], [225, 1, 1, "", "unstack"], [226, 1, 1, "", "update"], [227, 1, 1, "", "upsample"], [228, 1, 1, "", "var"], [229, 1, 1, "", "vstack"], [230, 2, 1, "", "width"], [231, 1, 1, "", "with_columns"], [232, 1, 1, "", "with_row_count"], [27, 1, 1, "", "write_avro"], [28, 1, 1, "", "write_csv"], [29, 1, 1, "", "write_database"], [30, 1, 1, "", "write_delta"], [31, 1, 1, "", "write_excel"], [32, 1, 1, "", "write_ipc"], [33, 1, 1, "", "write_json"], [34, 1, 1, "", "write_ndjson"], [35, 1, 1, "", "write_parquet"]], "polars.DataType": [[36, 1, 1, "", "__init__"]], "polars.Date": [[37, 1, 1, "", "__init__"]], "polars.Datetime": [[38, 1, 1, "", "__init__"]], "polars.Decimal": [[39, 1, 1, "", "__init__"]], "polars.Duration": [[40, 1, 1, "", "__init__"]], "polars.Expr": [[260, 1, 1, "", "abs"], [261, 1, 1, "", "add"], [262, 1, 1, "", "agg_groups"], [263, 1, 1, "", "alias"], [264, 1, 1, "", "all"], [265, 1, 1, "", "and_"], [266, 1, 1, "", "any"], [267, 1, 1, "", "append"], [268, 1, 1, "", "apply"], [269, 1, 1, "", "approx_unique"], [270, 1, 1, "", "arccos"], [271, 1, 1, "", "arccosh"], [272, 1, 1, "", "arcsin"], [273, 1, 1, "", "arcsinh"], [274, 1, 1, "", "arctan"], [275, 1, 1, "", "arctanh"], [276, 1, 1, "", "arg_max"], [277, 1, 1, "", "arg_min"], [278, 1, 1, "", "arg_sort"], [279, 1, 1, "", "arg_true"], [280, 1, 1, "", "arg_unique"], [307, 1, 1, "", "backward_fill"], [313, 1, 1, "", "bottom_k"], [314, 1, 1, "", "cache"], [315, 1, 1, "", "cast"], [317, 1, 1, "", "ceil"], [318, 1, 1, "", "clip"], [319, 1, 1, "", "clip_max"], [320, 1, 1, "", "clip_min"], [321, 1, 1, "", "cos"], [322, 1, 1, "", "cosh"], [323, 1, 1, "", "count"], [324, 1, 1, "", "cumcount"], [325, 1, 1, "", "cummax"], [326, 1, 1, "", "cummin"], [327, 1, 1, "", "cumprod"], [328, 1, 1, "", "cumsum"], [329, 1, 1, "", "cumulative_eval"], [330, 1, 1, "", "diff"], [331, 1, 1, "", "dot"], [332, 1, 1, "", "drop_nans"], [333, 1, 1, "", "drop_nulls"], [373, 1, 1, "", "entropy"], [374, 1, 1, "", "eq"], [375, 1, 1, "", "ewm_mean"], [376, 1, 1, "", "ewm_std"], [377, 1, 1, "", "ewm_var"], [378, 1, 1, "", "exclude"], [379, 1, 1, "", "exp"], [380, 1, 1, "", "explode"], [381, 1, 1, "", "extend_constant"], [382, 1, 1, "", "fill_nan"], [383, 1, 1, "", "fill_null"], [384, 1, 1, "", "filter"], [385, 1, 1, "", "first"], [386, 1, 1, "", "flatten"], [387, 1, 1, "", "floor"], [388, 1, 1, "", "floordiv"], [389, 1, 1, "", "forward_fill"], [390, 1, 1, "", "ge"], [391, 1, 1, "", "gt"], [392, 1, 1, "", "hash"], [393, 1, 1, "", "head"], [394, 1, 1, "", "implode"], [395, 1, 1, "", "inspect"], [396, 1, 1, "", "interpolate"], [397, 1, 1, "", "is_between"], [398, 1, 1, "", "is_duplicated"], [399, 1, 1, "", "is_finite"], [400, 1, 1, "", "is_first"], [401, 1, 1, "", "is_in"], [402, 1, 1, "", "is_infinite"], [403, 1, 1, "", "is_nan"], [404, 1, 1, "", "is_not"], [405, 1, 1, "", "is_not_nan"], [406, 1, 1, "", "is_not_null"], [407, 1, 1, "", "is_null"], [408, 1, 1, "", "is_unique"], [409, 1, 1, "", "keep_name"], [410, 1, 1, "", "kurtosis"], [411, 1, 1, "", "last"], [412, 1, 1, "", "le"], [413, 1, 1, "", "len"], [414, 1, 1, "", "limit"], [415, 1, 1, "", "log"], [416, 1, 1, "", "log10"], [417, 1, 1, "", "log1p"], [418, 1, 1, "", "lower_bound"], [419, 1, 1, "", "lt"], [420, 1, 1, "", "map"], [421, 1, 1, "", "map_alias"], [422, 1, 1, "", "map_dict"], [423, 1, 1, "", "max"], [424, 1, 1, "", "mean"], [425, 1, 1, "", "median"], [434, 1, 1, "", "min"], [435, 1, 1, "", "mod"], [436, 1, 1, "", "mode"], [437, 1, 1, "", "mul"], [438, 1, 1, "", "n_unique"], [439, 1, 1, "", "nan_max"], [440, 1, 1, "", "nan_min"], [441, 1, 1, "", "ne"], [442, 1, 1, "", "null_count"], [443, 1, 1, "", "or_"], [444, 1, 1, "", "over"], [445, 1, 1, "", "pct_change"], [446, 1, 1, "", "pipe"], [447, 1, 1, "", "pow"], [448, 1, 1, "", "prefix"], [449, 1, 1, "", "product"], [450, 1, 1, "", "quantile"], [451, 1, 1, "", "rank"], [452, 1, 1, "", "rechunk"], [453, 1, 1, "", "reinterpret"], [454, 1, 1, "", "repeat_by"], [455, 1, 1, "", "reshape"], [456, 1, 1, "", "reverse"], [457, 1, 1, "", "rolling_apply"], [458, 1, 1, "", "rolling_max"], [459, 1, 1, "", "rolling_mean"], [460, 1, 1, "", "rolling_median"], [461, 1, 1, "", "rolling_min"], [462, 1, 1, "", "rolling_quantile"], [463, 1, 1, "", "rolling_skew"], [464, 1, 1, "", "rolling_std"], [465, 1, 1, "", "rolling_sum"], [466, 1, 1, "", "rolling_var"], [467, 1, 1, "", "round"], [468, 1, 1, "", "sample"], [469, 1, 1, "", "search_sorted"], [470, 1, 1, "", "set_sorted"], [471, 1, 1, "", "shift"], [472, 1, 1, "", "shift_and_fill"], [473, 1, 1, "", "shrink_dtype"], [474, 1, 1, "", "shuffle"], [475, 1, 1, "", "sign"], [476, 1, 1, "", "sin"], [477, 1, 1, "", "sinh"], [478, 1, 1, "", "skew"], [479, 1, 1, "", "slice"], [480, 1, 1, "", "sort"], [481, 1, 1, "", "sort_by"], [482, 1, 1, "", "sqrt"], [483, 1, 1, "", "std"], [519, 1, 1, "", "sub"], [520, 1, 1, "", "suffix"], [521, 1, 1, "", "sum"], [522, 1, 1, "", "tail"], [523, 1, 1, "", "take"], [524, 1, 1, "", "take_every"], [525, 1, 1, "", "tan"], [526, 1, 1, "", "tanh"], [527, 1, 1, "", "to_physical"], [528, 1, 1, "", "top_k"], [529, 1, 1, "", "truediv"], [530, 1, 1, "", "unique"], [531, 1, 1, "", "unique_counts"], [532, 1, 1, "", "upper_bound"], [533, 1, 1, "", "value_counts"], [534, 1, 1, "", "var"], [535, 1, 1, "", "where"], [536, 1, 1, "", "xor"]], "polars.Expr.arr": [[281, 1, 1, "", "arg_max"], [282, 1, 1, "", "arg_min"], [283, 1, 1, "", "concat"], [284, 1, 1, "", "contains"], [285, 1, 1, "", "count_match"], [286, 1, 1, "", "diff"], [287, 1, 1, "", "eval"], [288, 1, 1, "", "explode"], [289, 1, 1, "", "first"], [290, 1, 1, "", "get"], [291, 1, 1, "", "head"], [292, 1, 1, "", "join"], [293, 1, 1, "", "last"], [294, 1, 1, "", "lengths"], [295, 1, 1, "", "max"], [296, 1, 1, "", "mean"], [297, 1, 1, "", "min"], [298, 1, 1, "", "reverse"], [299, 1, 1, "", "shift"], [300, 1, 1, "", "slice"], [301, 1, 1, "", "sort"], [302, 1, 1, "", "sum"], [303, 1, 1, "", "tail"], [304, 1, 1, "", "take"], [305, 1, 1, "", "to_struct"], [306, 1, 1, "", "unique"]], "polars.Expr.bin": [[308, 1, 1, "", "contains"], [309, 1, 1, "", "decode"], [310, 1, 1, "", "encode"], [311, 1, 1, "", "ends_with"], [312, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[316, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[334, 1, 1, "", "cast_time_unit"], [335, 1, 1, "", "combine"], [336, 1, 1, "", "convert_time_zone"], [337, 1, 1, "", "date"], [338, 1, 1, "", "datetime"], [339, 1, 1, "", "day"], [340, 1, 1, "", "days"], [341, 1, 1, "", "epoch"], [342, 1, 1, "", "hour"], [343, 1, 1, "", "hours"], [344, 1, 1, "", "is_leap_year"], [345, 1, 1, "", "iso_year"], [346, 1, 1, "", "microsecond"], [347, 1, 1, "", "microseconds"], [348, 1, 1, "", "millisecond"], [349, 1, 1, "", "milliseconds"], [350, 1, 1, "", "minute"], [351, 1, 1, "", "minutes"], [352, 1, 1, "", "month"], [353, 1, 1, "", "month_end"], [354, 1, 1, "", "month_start"], [355, 1, 1, "", "nanosecond"], [356, 1, 1, "", "nanoseconds"], [357, 1, 1, "", "offset_by"], [358, 1, 1, "", "ordinal_day"], [359, 1, 1, "", "quarter"], [360, 1, 1, "", "replace_time_zone"], [361, 1, 1, "", "round"], [362, 1, 1, "", "second"], [363, 1, 1, "", "seconds"], [364, 1, 1, "", "strftime"], [365, 1, 1, "", "time"], [366, 1, 1, "", "timestamp"], [367, 1, 1, "", "to_string"], [368, 1, 1, "", "truncate"], [369, 1, 1, "", "week"], [370, 1, 1, "", "weekday"], [371, 1, 1, "", "with_time_unit"], [372, 1, 1, "", "year"]], "polars.Expr.meta": [[426, 1, 1, "", "eq"], [427, 1, 1, "", "has_multiple_outputs"], [428, 1, 1, "", "is_regex_projection"], [429, 1, 1, "", "ne"], [430, 1, 1, "", "output_name"], [431, 1, 1, "", "pop"], [432, 1, 1, "", "root_names"], [433, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[484, 1, 1, "", "concat"], [485, 1, 1, "", "contains"], [486, 1, 1, "", "count_match"], [487, 1, 1, "", "decode"], [488, 1, 1, "", "encode"], [489, 1, 1, "", "ends_with"], [490, 1, 1, "", "explode"], [491, 1, 1, "", "extract"], [492, 1, 1, "", "extract_all"], [493, 1, 1, "", "json_extract"], [494, 1, 1, "", "json_path_match"], [495, 1, 1, "", "lengths"], [496, 1, 1, "", "ljust"], [497, 1, 1, "", "lstrip"], [498, 1, 1, "", "n_chars"], [499, 1, 1, "", "parse_int"], [500, 1, 1, "", "replace"], [501, 1, 1, "", "replace_all"], [502, 1, 1, "", "rjust"], [503, 1, 1, "", "rstrip"], [504, 1, 1, "", "slice"], [505, 1, 1, "", "split"], [506, 1, 1, "", "split_exact"], [507, 1, 1, "", "splitn"], [508, 1, 1, "", "starts_with"], [509, 1, 1, "", "strip"], [510, 1, 1, "", "strptime"], [511, 1, 1, "", "to_date"], [512, 1, 1, "", "to_datetime"], [513, 1, 1, "", "to_lowercase"], [514, 1, 1, "", "to_time"], [515, 1, 1, "", "to_uppercase"], [516, 1, 1, "", "zfill"]], "polars.Expr.struct": [[517, 1, 1, "", "field"], [518, 1, 1, "", "rename_fields"]], "polars.Float32": [[41, 1, 1, "", "__init__"]], "polars.Float64": [[42, 1, 1, "", "__init__"]], "polars.Int16": [[43, 1, 1, "", "__init__"]], "polars.Int32": [[44, 1, 1, "", "__init__"]], "polars.Int64": [[45, 1, 1, "", "__init__"]], "polars.Int8": [[46, 1, 1, "", "__init__"]], "polars.LazyFrame": [[606, 1, 1, "", "bottom_k"], [607, 1, 1, "", "cache"], [608, 1, 1, "", "clear"], [609, 1, 1, "", "clone"], [610, 1, 1, "", "collect"], [611, 2, 1, "", "columns"], [612, 1, 1, "", "drop"], [613, 1, 1, "", "drop_nulls"], [614, 2, 1, "", "dtypes"], [615, 1, 1, "", "explain"], [616, 1, 1, "", "explode"], [617, 1, 1, "", "fetch"], [618, 1, 1, "", "fill_nan"], [619, 1, 1, "", "fill_null"], [620, 1, 1, "", "filter"], [621, 1, 1, "", "first"], [622, 1, 1, "", "from_json"], [623, 1, 1, "", "groupby"], [624, 1, 1, "", "groupby_dynamic"], [625, 1, 1, "", "groupby_rolling"], [626, 1, 1, "", "head"], [627, 1, 1, "", "inspect"], [628, 1, 1, "", "interpolate"], [629, 1, 1, "", "join"], [630, 1, 1, "", "join_asof"], [631, 1, 1, "", "last"], [632, 1, 1, "", "lazy"], [633, 1, 1, "", "limit"], [634, 1, 1, "", "map"], [635, 1, 1, "", "max"], [636, 1, 1, "", "mean"], [637, 1, 1, "", "median"], [638, 1, 1, "", "melt"], [639, 1, 1, "", "merge_sorted"], [640, 1, 1, "", "min"], [641, 1, 1, "", "null_count"], [642, 1, 1, "", "pipe"], [643, 1, 1, "", "profile"], [644, 1, 1, "", "quantile"], [645, 1, 1, "", "read_json"], [646, 1, 1, "", "rename"], [647, 1, 1, "", "reverse"], [648, 2, 1, "", "schema"], [649, 1, 1, "", "select"], [650, 1, 1, "", "set_sorted"], [651, 1, 1, "", "shift"], [652, 1, 1, "", "shift_and_fill"], [653, 1, 1, "", "show_graph"], [654, 1, 1, "", "sink_ipc"], [655, 1, 1, "", "sink_parquet"], [656, 1, 1, "", "slice"], [657, 1, 1, "", "sort"], [658, 1, 1, "", "std"], [659, 1, 1, "", "sum"], [660, 1, 1, "", "tail"], [661, 1, 1, "", "take_every"], [662, 1, 1, "", "top_k"], [663, 1, 1, "", "unique"], [664, 1, 1, "", "unnest"], [665, 1, 1, "", "update"], [666, 1, 1, "", "var"], [667, 2, 1, "", "width"], [668, 1, 1, "", "with_columns"], [669, 1, 1, "", "with_context"], [670, 1, 1, "", "with_row_count"], [671, 1, 1, "", "write_json"]], "polars.List": [[47, 1, 1, "", "__init__"]], "polars.Null": [[48, 1, 1, "", "__init__"]], "polars.Object": [[49, 1, 1, "", "__init__"]], "polars.SQLContext": [[992, 1, 1, "", "__enter__"], [992, 1, 1, "", "__exit__"], [992, 1, 1, "", "__init__"], [50, 1, 1, "", "execute"], [51, 1, 1, "", "register"], [52, 1, 1, "", "register_globals"], [53, 1, 1, "", "register_many"], [54, 1, 1, "", "tables"], [55, 1, 1, "", "unregister"]], "polars.Series": [[694, 1, 1, "", "abs"], [695, 1, 1, "", "alias"], [696, 1, 1, "", "all"], [697, 1, 1, "", "any"], [698, 1, 1, "", "append"], [699, 1, 1, "", "apply"], [700, 1, 1, "", "arccos"], [701, 1, 1, "", "arccosh"], [702, 1, 1, "", "arcsin"], [703, 1, 1, "", "arcsinh"], [704, 1, 1, "", "arctan"], [705, 1, 1, "", "arctanh"], [706, 1, 1, "", "arg_max"], [707, 1, 1, "", "arg_min"], [708, 1, 1, "", "arg_sort"], [709, 1, 1, "", "arg_true"], [710, 1, 1, "", "arg_unique"], [711, 3, 1, "", "arr"], [743, 1, 1, "", "bottom_k"], [744, 1, 1, "", "cast"], [745, 3, 1, "", "cat"], [747, 1, 1, "", "ceil"], [748, 1, 1, "", "chunk_lengths"], [749, 1, 1, "", "clear"], [750, 1, 1, "", "clip"], [751, 1, 1, "", "clip_max"], [752, 1, 1, "", "clip_min"], [753, 1, 1, "", "clone"], [754, 1, 1, "", "cos"], [755, 1, 1, "", "cosh"], [756, 1, 1, "", "cummax"], [757, 1, 1, "", "cummin"], [758, 1, 1, "", "cumprod"], [759, 1, 1, "", "cumsum"], [760, 1, 1, "", "cumulative_eval"], [761, 1, 1, "", "cut"], [762, 1, 1, "", "describe"], [763, 1, 1, "", "diff"], [764, 1, 1, "", "dot"], [765, 1, 1, "", "drop_nans"], [766, 1, 1, "", "drop_nulls"], [767, 3, 1, "", "dt"], [811, 3, 1, "", "dtype"], [812, 1, 1, "", "entropy"], [813, 1, 1, "", "estimated_size"], [814, 1, 1, "", "ewm_mean"], [815, 1, 1, "", "ewm_std"], [816, 1, 1, "", "ewm_var"], [817, 1, 1, "", "exp"], [818, 1, 1, "", "explode"], [819, 1, 1, "", "extend_constant"], [820, 1, 1, "", "fill_nan"], [821, 1, 1, "", "fill_null"], [822, 1, 1, "", "filter"], [823, 3, 1, "", "flags"], [824, 1, 1, "", "floor"], [825, 1, 1, "", "get_chunks"], [826, 1, 1, "", "has_validity"], [827, 1, 1, "", "hash"], [828, 1, 1, "", "head"], [829, 1, 1, "", "hist"], [830, 1, 1, "", "implode"], [831, 3, 1, "", "inner_dtype"], [832, 1, 1, "", "interpolate"], [833, 1, 1, "", "is_between"], [834, 1, 1, "", "is_boolean"], [835, 1, 1, "", "is_duplicated"], [836, 1, 1, "", "is_empty"], [837, 1, 1, "", "is_finite"], [838, 1, 1, "", "is_first"], [839, 1, 1, "", "is_float"], [840, 1, 1, "", "is_in"], [841, 1, 1, "", "is_infinite"], [842, 1, 1, "", "is_integer"], [843, 1, 1, "", "is_nan"], [844, 1, 1, "", "is_not_nan"], [845, 1, 1, "", "is_not_null"], [846, 1, 1, "", "is_null"], [847, 1, 1, "", "is_numeric"], [848, 1, 1, "", "is_sorted"], [849, 1, 1, "", "is_temporal"], [850, 1, 1, "", "is_unique"], [851, 1, 1, "", "is_utf8"], [852, 1, 1, "", "item"], [853, 1, 1, "", "kurtosis"], [854, 1, 1, "", "len"], [855, 1, 1, "", "limit"], [856, 1, 1, "", "log"], [857, 1, 1, "", "log10"], [858, 1, 1, "", "log1p"], [859, 1, 1, "", "lower_bound"], [860, 1, 1, "", "map_dict"], [861, 1, 1, "", "max"], [862, 1, 1, "", "mean"], [863, 1, 1, "", "median"], [864, 1, 1, "", "min"], [865, 1, 1, "", "mode"], [866, 1, 1, "", "n_chunks"], [867, 1, 1, "", "n_unique"], [868, 3, 1, "", "name"], [869, 1, 1, "", "nan_max"], [870, 1, 1, "", "nan_min"], [871, 1, 1, "", "new_from_index"], [872, 1, 1, "", "null_count"], [873, 1, 1, "", "pct_change"], [874, 1, 1, "", "peak_max"], [875, 1, 1, "", "peak_min"], [876, 1, 1, "", "product"], [877, 1, 1, "", "qcut"], [878, 1, 1, "", "quantile"], [879, 1, 1, "", "rank"], [880, 1, 1, "", "rechunk"], [881, 1, 1, "", "reinterpret"], [882, 1, 1, "", "rename"], [883, 1, 1, "", "reshape"], [884, 1, 1, "", "reverse"], [885, 1, 1, "", "rolling_apply"], [886, 1, 1, "", "rolling_max"], [887, 1, 1, "", "rolling_mean"], [888, 1, 1, "", "rolling_median"], [889, 1, 1, "", "rolling_min"], [890, 1, 1, "", "rolling_quantile"], [891, 1, 1, "", "rolling_skew"], [892, 1, 1, "", "rolling_std"], [893, 1, 1, "", "rolling_sum"], [894, 1, 1, "", "rolling_var"], [895, 1, 1, "", "round"], [896, 1, 1, "", "sample"], [897, 1, 1, "", "search_sorted"], [898, 1, 1, "", "series_equal"], [899, 1, 1, "", "set"], [900, 1, 1, "", "set_at_idx"], [901, 1, 1, "", "set_sorted"], [902, 3, 1, "", "shape"], [903, 1, 1, "", "shift"], [904, 1, 1, "", "shift_and_fill"], [905, 1, 1, "", "shrink_dtype"], [906, 1, 1, "", "shrink_to_fit"], [907, 1, 1, "", "shuffle"], [908, 1, 1, "", "sign"], [909, 1, 1, "", "sin"], [910, 1, 1, "", "sinh"], [911, 1, 1, "", "skew"], [912, 1, 1, "", "slice"], [913, 1, 1, "", "sort"], [914, 1, 1, "", "sqrt"], [915, 1, 1, "", "std"], [916, 3, 1, "", "str"], [955, 1, 1, "", "sum"], [956, 1, 1, "", "tail"], [957, 1, 1, "", "take"], [958, 1, 1, "", "take_every"], [959, 1, 1, "", "tan"], [960, 1, 1, "", "tanh"], [961, 3, 1, "", "time_unit"], [962, 1, 1, "", "to_arrow"], [963, 1, 1, "", "to_dummies"], [964, 1, 1, "", "to_frame"], [965, 1, 1, "", "to_init_repr"], [966, 1, 1, "", "to_list"], [967, 1, 1, "", "to_numpy"], [968, 1, 1, "", "to_pandas"], [969, 1, 1, "", "to_physical"], [970, 1, 1, "", "top_k"], [971, 1, 1, "", "unique"], [972, 1, 1, "", "unique_counts"], [973, 1, 1, "", "upper_bound"], [974, 1, 1, "", "value_counts"], [975, 1, 1, "", "var"], [976, 1, 1, "", "view"], [977, 1, 1, "", "zip_with"]], "polars.Series.arr": [[712, 1, 1, "", "arg_max"], [713, 1, 1, "", "arg_min"], [714, 1, 1, "", "concat"], [715, 1, 1, "", "contains"], [716, 1, 1, "", "count_match"], [717, 1, 1, "", "diff"], [718, 1, 1, "", "eval"], [719, 1, 1, "", "explode"], [720, 1, 1, "", "first"], [721, 1, 1, "", "get"], [722, 1, 1, "", "head"], [723, 1, 1, "", "join"], [724, 1, 1, "", "last"], [725, 1, 1, "", "lengths"], [726, 1, 1, "", "max"], [727, 1, 1, "", "mean"], [728, 1, 1, "", "min"], [729, 1, 1, "", "reverse"], [730, 1, 1, "", "shift"], [731, 1, 1, "", "slice"], [732, 1, 1, "", "sort"], [733, 1, 1, "", "sum"], [734, 1, 1, "", "tail"], [735, 1, 1, "", "take"], [736, 1, 1, "", "to_struct"], [737, 1, 1, "", "unique"]], "polars.Series.bin": [[738, 1, 1, "", "contains"], [739, 1, 1, "", "decode"], [740, 1, 1, "", "encode"], [741, 1, 1, "", "ends_with"], [742, 1, 1, "", "starts_with"]], "polars.Series.cat": [[746, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[768, 1, 1, "", "cast_time_unit"], [769, 1, 1, "", "combine"], [770, 1, 1, "", "convert_time_zone"], [771, 1, 1, "", "date"], [772, 1, 1, "", "datetime"], [773, 1, 1, "", "day"], [774, 1, 1, "", "days"], [775, 1, 1, "", "epoch"], [776, 1, 1, "", "hour"], [777, 1, 1, "", "hours"], [778, 1, 1, "", "is_leap_year"], [779, 1, 1, "", "iso_year"], [780, 1, 1, "", "max"], [781, 1, 1, "", "mean"], [782, 1, 1, "", "median"], [783, 1, 1, "", "microsecond"], [784, 1, 1, "", "microseconds"], [785, 1, 1, "", "millisecond"], [786, 1, 1, "", "milliseconds"], [787, 1, 1, "", "min"], [788, 1, 1, "", "minute"], [789, 1, 1, "", "minutes"], [790, 1, 1, "", "month"], [791, 1, 1, "", "month_end"], [792, 1, 1, "", "month_start"], [793, 1, 1, "", "nanosecond"], [794, 1, 1, "", "nanoseconds"], [795, 1, 1, "", "offset_by"], [796, 1, 1, "", "ordinal_day"], [797, 1, 1, "", "quarter"], [798, 1, 1, "", "replace_time_zone"], [799, 1, 1, "", "round"], [800, 1, 1, "", "second"], [801, 1, 1, "", "seconds"], [802, 1, 1, "", "strftime"], [803, 1, 1, "", "time"], [804, 1, 1, "", "timestamp"], [805, 1, 1, "", "to_string"], [806, 1, 1, "", "truncate"], [807, 1, 1, "", "week"], [808, 1, 1, "", "weekday"], [809, 1, 1, "", "with_time_unit"], [810, 1, 1, "", "year"]], "polars.Series.str": [[917, 1, 1, "", "concat"], [918, 1, 1, "", "contains"], [919, 1, 1, "", "count_match"], [920, 1, 1, "", "decode"], [921, 1, 1, "", "encode"], [922, 1, 1, "", "ends_with"], [923, 1, 1, "", "explode"], [924, 1, 1, "", "extract"], [925, 1, 1, "", "extract_all"], [926, 1, 1, "", "json_extract"], [927, 1, 1, "", "json_path_match"], [928, 1, 1, "", "lengths"], [929, 1, 1, "", "ljust"], [930, 1, 1, "", "lstrip"], [931, 1, 1, "", "n_chars"], [932, 1, 1, "", "parse_int"], [933, 1, 1, "", "replace"], [934, 1, 1, "", "replace_all"], [935, 1, 1, "", "rjust"], [936, 1, 1, "", "rstrip"], [937, 1, 1, "", "slice"], [938, 1, 1, "", "split"], [939, 1, 1, "", "split_exact"], [940, 1, 1, "", "splitn"], [941, 1, 1, "", "starts_with"], [942, 1, 1, "", "strip"], [943, 1, 1, "", "strptime"], [944, 1, 1, "", "to_date"], [945, 1, 1, "", "to_datetime"], [946, 1, 1, "", "to_lowercase"], [947, 1, 1, "", "to_time"], [948, 1, 1, "", "to_uppercase"], [949, 1, 1, "", "zfill"]], "polars.Series.struct": [[950, 1, 1, "", "field"], [951, 3, 1, "", "fields"], [952, 1, 1, "", "rename_fields"], [953, 3, 1, "", "schema"], [954, 1, 1, "", "unnest"]], "polars.StringCache": [[56, 1, 1, "", "__init__"]], "polars.Struct": [[57, 1, 1, "", "__init__"]], "polars.Time": [[58, 1, 1, "", "__init__"]], "polars.UInt16": [[59, 1, 1, "", "__init__"]], "polars.UInt32": [[60, 1, 1, "", "__init__"]], "polars.UInt64": [[61, 1, 1, "", "__init__"]], "polars.UInt8": [[62, 1, 1, "", "__init__"]], "polars.Unknown": [[63, 1, 1, "", "__init__"]], "polars.Utf8": [[64, 1, 1, "", "__init__"]], "polars.api": [[66, 4, 1, "", "register_dataframe_namespace"], [67, 4, 1, "", "register_expr_namespace"], [68, 4, 1, "", "register_lazyframe_namespace"], [69, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[233, 1, 1, "", "__iter__"], [234, 1, 1, "", "agg"], [235, 1, 1, "", "all"], [236, 1, 1, "", "apply"], [237, 1, 1, "", "count"], [238, 1, 1, "", "first"], [239, 1, 1, "", "head"], [240, 1, 1, "", "last"], [241, 1, 1, "", "max"], [242, 1, 1, "", "mean"], [243, 1, 1, "", "median"], [244, 1, 1, "", "min"], [245, 1, 1, "", "n_unique"], [246, 1, 1, "", "quantile"], [247, 1, 1, "", "sum"], [248, 1, 1, "", "tail"]], "polars.exceptions": [[76, 5, 1, "", "ArrowError"], [77, 5, 1, "", "ColumnNotFoundError"], [78, 5, 1, "", "ComputeError"], [79, 5, 1, "", "DuplicateError"], [80, 5, 1, "", "InvalidOperationError"], [81, 5, 1, "", "NoDataError"], [82, 5, 1, "", "NoRowsReturnedError"], [83, 5, 1, "", "PolarsPanicError"], [84, 5, 1, "", "RowsError"], [85, 5, 1, "", "SchemaError"], [86, 5, 1, "", "SchemaFieldNotFoundError"], [87, 5, 1, "", "ShapeError"], [88, 5, 1, "", "StructFieldNotFoundError"], [89, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[99, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[672, 1, 1, "", "agg"], [673, 1, 1, "", "all"], [674, 1, 1, "", "apply"], [675, 1, 1, "", "count"], [676, 1, 1, "", "first"], [677, 1, 1, "", "head"], [678, 1, 1, "", "last"], [679, 1, 1, "", "max"], [680, 1, 1, "", "mean"], [681, 1, 1, "", "median"], [682, 1, 1, "", "min"], [683, 1, 1, "", "n_unique"], [684, 1, 1, "", "quantile"], [685, 1, 1, "", "sum"], [686, 1, 1, "", "tail"]], "polars.testing": [[120, 4, 1, "", "assert_frame_equal"], [121, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[122, 0, 1, "", "column"], [123, 4, 1, "", "columns"], [124, 4, 1, "", "create_list_strategy"], [125, 4, 1, "", "dataframes"], [126, 4, 1, "", "load_profile"], [127, 4, 1, "", "series"], [128, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[122, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 148], "api": [1, 66, 67, 68, 69, 603], "provid": 1, "new": 1, "function": [1, 591, 602], "avail": 1, "registr": 1, "exampl": [1, 993], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 993], "arrai": 2, "binari": [3, 586, 597, 979], "boolean": [4, 587, 980], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 132], "activate_decim": 6, "load": [7, 132], "restore_default": 8, "save": [9, 132], "set_ascii_t": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_streaming_chunk_s": 13, "set_tbl_cell_align": 14, "set_tbl_col": 15, "set_tbl_column_data_type_inlin": 16, "set_tbl_dataframe_shape_below": 17, "set_tbl_format": 18, "set_tbl_hide_column_data_typ": 19, "set_tbl_hide_column_nam": 20, "set_tbl_hide_dataframe_shap": 21, "set_tbl_hide_dtype_separ": 22, "set_tbl_row": 23, "set_tbl_width_char": 24, "set_verbos": 25, "state": [26, 132], "datafram": [27, 28, 29, 30, 31, 32, 33, 34, 35, 125, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 254], "write_avro": 27, "write_csv": 28, "write_databas": 29, "write_delta": 30, "write_excel": 31, "write_ipc": 32, "write_json": [33, 671], "write_ndjson": 34, "write_parquet": 35, "datatyp": 36, "date": [37, 337, 554, 771], "datetim": [38, 338, 555, 772], "decim": 39, "durat": [40, 556], "float32": 41, "float64": 42, "int16": 43, "int32": 44, "int64": 45, "int8": 46, "list": [47, 593, 986], "null": 48, "object": 49, "sqlcontext": [50, 51, 52, 53, 54, 55], "execut": 50, "regist": 51, "register_glob": 52, "register_mani": 53, "tabl": 54, "unregist": 55, "stringcach": [56, 602], "struct": [57, 517, 518, 580, 599, 950, 951, 952, 953, 954, 990], "time": [58, 365, 583, 803], "uint16": 59, "uint32": 60, "uint64": 61, "uint8": 62, "unknown": 63, "utf8": 64, "align_fram": 65, "register_dataframe_namespac": 66, "register_expr_namespac": 67, "register_lazyframe_namespac": 68, "register_series_namespac": 69, "arg_wher": 70, "build_info": 71, "collect_al": 72, "concat": [73, 283, 484, 714, 917], "date_rang": 74, "enable_string_cach": 75, "except": [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 258], "arrowerror": 76, "columnnotfounderror": 77, "computeerror": 78, "duplicateerror": 79, "invalidoperationerror": 80, "nodataerror": 81, "norowsreturnederror": 82, "polarspanicerror": 83, "rowserror": 84, "schemaerror": 85, "schemafieldnotfounderror": 86, "shapeerror": 87, "structfieldnotfounderror": 88, "toomanyrowsreturnederror": 89, "from_arrow": 90, "from_datafram": 91, "from_dict": [92, 93], "from_numpi": 94, "from_panda": 95, "from_record": 96, "from_repr": 97, "get_index_typ": 98, "io": 99, "csv": [99, 604], "batched_read": 99, "batchedcsvread": [99, 604], "next_batch": 99, "ones": 100, "read_avro": 101, "read_csv": 102, "read_csv_batch": 103, "read_databas": 104, "read_delta": 105, "read_excel": 106, "read_ipc": 107, "read_ipc_schema": 108, "read_json": [109, 645], "read_ndjson": 110, "read_parquet": 111, "read_parquet_schema": 112, "scan_csv": 113, "scan_delta": 114, "scan_ipc": 115, "scan_ndjson": 116, "scan_parquet": 117, "scan_pyarrow_dataset": 118, "show_vers": 119, "test": [120, 121, 122, 123, 124, 125, 126, 127, 128, 993], "assert_frame_equ": 120, "assert_series_equ": 121, "parametr": [122, 123, 124, 125, 126, 127, 128, 993], "column": [122, 123, 139, 589, 611], "create_list_strategi": 124, "load_profil": 126, "seri": [127, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 985], "set_profil": 128, "threadpool_s": 129, "time_rang": 130, "zero": 131, "option": 132, "current": 132, "us": 132, "context": 132, "manag": 132, "aggreg": [133, 259, 605, 693], "__dataframe__": 134, "appli": [135, 236, 268, 539, 674, 699], "bottom_k": [136, 313, 606, 743], "clear": [137, 608, 749], "clone": [138, 609, 753], "corr": [140, 548], "describ": [141, 762], "drop": [142, 612], "drop_in_plac": 143, "drop_nul": [144, 333, 613, 766], "dtype": [145, 614, 811], "estimated_s": [146, 813], "explod": [147, 288, 380, 490, 616, 719, 818, 923], "fill_nan": [149, 382, 618, 820], "fill_nul": [150, 383, 619, 821], "filter": [151, 384, 620, 822], "find_idx_by_nam": 152, "fold": [153, 560], "frame_equ": 154, "get_column": [155, 156], "glimps": 157, "groupbi": [158, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 253, 623, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 689], "groupby_dynam": [159, 624], "groupby_rol": [160, 625], "hash_row": 161, "head": [162, 239, 291, 393, 564, 626, 677, 722, 828], "height": 163, "hstack": 164, "insert_at_idx": 165, "interpol": [166, 396, 628, 832], "is_dupl": [167, 398, 835], "is_empti": [168, 836], "is_uniqu": [169, 408, 850], "item": [170, 852], "iter_row": 171, "iter_slic": 172, "join": [173, 292, 629, 723], "join_asof": [174, 630], "lazi": [175, 602, 632], "limit": [176, 414, 633, 855], "max": [177, 241, 295, 423, 568, 635, 679, 726, 780, 861], "mean": [178, 242, 296, 424, 569, 636, 680, 727, 781, 862], "median": [179, 243, 425, 570, 637, 681, 782, 863], "melt": [180, 638], "merge_sort": [181, 639], "min": [182, 244, 297, 434, 571, 640, 682, 728, 787, 864], "n_chunk": [183, 866], "n_uniqu": [184, 245, 438, 572, 683, 867], "null_count": [185, 442, 641, 872], "partition_bi": 186, "pipe": [187, 446, 642], "pivot": 188, "product": [189, 449, 876], "quantil": [190, 246, 450, 573, 644, 684, 878], "rechunk": [191, 452, 880], "renam": [192, 646, 882], "replac": [193, 500, 933], "replace_at_idx": 194, "revers": [195, 298, 456, 647, 729, 884], "row": [196, 197], "sampl": [198, 468, 896], "schema": [199, 648, 953], "select": [200, 256, 578, 596, 649, 692, 988], "set_sort": [201, 470, 650, 901], "shape": [202, 902], "shift": [203, 299, 471, 651, 730, 903], "shift_and_fil": [204, 472, 652, 904], "shrink_to_fit": [205, 906], "slice": [206, 300, 479, 504, 656, 731, 912, 937], "sort": [207, 301, 480, 657, 732, 913], "std": [208, 483, 579, 658, 915], "sum": [209, 247, 302, 521, 581, 659, 685, 733, 955], "tail": [210, 248, 303, 522, 582, 660, 686, 734, 956], "take_everi": [211, 524, 661, 958], "to_arrow": [212, 962], "to_dict": [213, 214], "to_dummi": [215, 963], "to_init_repr": [216, 965], "to_numpi": [217, 967], "to_panda": [218, 968], "to_seri": 219, "to_struct": [220, 305, 736], "top_k": [221, 528, 662, 970], "transpos": 222, "uniqu": [223, 306, 530, 663, 737, 971], "unnest": [224, 664, 954], "unstack": 225, "updat": [226, 665], "upsampl": 227, "var": [228, 534, 584, 666, 975], "vstack": 229, "width": [230, 667], "with_column": [231, 668], "with_row_count": [232, 670], "__iter__": 233, "agg": [234, 672], "all": [235, 264, 537, 673, 696], "count": [237, 323, 549, 675], "first": [238, 289, 385, 559, 621, 676, 720], "last": [240, 293, 411, 631, 678, 724], "attribut": [249, 687, 978], "comput": [250, 590, 982], "descript": [251, 688, 983], "export": [252, 984], "miscellan": [255, 595, 602, 691, 987], "manipul": [256, 596, 692, 988], "data": 257, "type": 257, "numer": [257, 597], "tempor": [257, 600, 991], "nest": 257, "other": 257, "expr": [260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536], "ab": [260, 694], "add": 261, "agg_group": 262, "alia": [263, 695], "and_": 265, "ani": [266, 538, 697], "append": [267, 698], "approx_uniqu": [269, 540], "arcco": [270, 700], "arccosh": [271, 701], "arcsin": [272, 702], "arcsinh": [273, 703], "arctan": [274, 704], "arctanh": [275, 705], "arg_max": [276, 281, 706, 712], "arg_min": [277, 282, 707, 713], "arg_sort": [278, 708], "arg_tru": [279, 709], "arg_uniqu": [280, 710], "arr": [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737], "contain": [284, 308, 485, 715, 738, 918], "count_match": [285, 486, 716, 919], "diff": [286, 330, 717, 763], "eval": [287, 718], "get": [290, 721], "length": [294, 495, 725, 928], "take": [304, 523, 735, 957], "backward_fil": 307, "bin": [308, 309, 310, 311, 312, 738, 739, 740, 741, 742], "decod": [309, 487, 739, 920], "encod": [310, 488, 740, 921], "ends_with": [311, 489, 741, 922], "starts_with": [312, 508, 742, 941], "cach": [314, 607], "cast": [315, 744], "cat": [316, 745, 746], "set_ord": [316, 746], "ceil": [317, 747], "clip": [318, 750], "clip_max": [319, 751], "clip_min": [320, 752], "co": [321, 754], "cosh": [322, 755], "cumcount": 324, "cummax": [325, 756], "cummin": [326, 757], "cumprod": [327, 758], "cumsum": [328, 553, 759], "cumulative_ev": [329, 760], "dot": [331, 764], "drop_nan": [332, 765], "dt": [334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810], "cast_time_unit": [334, 768], "combin": [335, 769], "convert_time_zon": [336, 770], "dai": [339, 340, 773, 774], "epoch": [341, 775], "hour": [342, 343, 776, 777], "is_leap_year": [344, 778], "iso_year": [345, 779], "microsecond": [346, 347, 783, 784], "millisecond": [348, 349, 785, 786], "minut": [350, 351, 788, 789], "month": [352, 790], "month_end": [353, 791], "month_start": [354, 792], "nanosecond": [355, 356, 793, 794], "offset_bi": [357, 795], "ordinal_dai": [358, 796], "quarter": [359, 797], "replace_time_zon": [360, 798], "round": [361, 467, 799, 895], "second": [362, 363, 800, 801], "strftime": [364, 802], "timestamp": [366, 804], "to_str": [367, 805], "truncat": [368, 806], "week": [369, 807], "weekdai": [370, 808], "with_time_unit": [371, 809], "year": [372, 810], "entropi": [373, 812], "eq": [374, 426], "ewm_mean": [375, 814], "ewm_std": [376, 815], "ewm_var": [377, 816], "exclud": [378, 558], "exp": [379, 817], "extend_const": [381, 819], "flatten": 386, "floor": [387, 824], "floordiv": 388, "forward_fil": 389, "ge": 390, "gt": 391, "hash": [392, 827], "implod": [394, 565, 830], "inspect": [395, 627], "is_between": [397, 833], "is_finit": [399, 837], "is_first": [400, 838], "is_in": [401, 840], "is_infinit": [402, 841], "is_nan": [403, 843], "is_not": 404, "is_not_nan": [405, 844], "is_not_nul": [406, 845], "is_nul": [407, 846], "keep_nam": 409, "kurtosi": [410, 853], "le": 412, "len": [413, 854], "log": [415, 856], "log10": [416, 857], "log1p": [417, 858], "lower_bound": [418, 859], "lt": 419, "map": [420, 567, 634], "map_alia": 421, "map_dict": [422, 860], "meta": [426, 427, 428, 429, 430, 431, 432, 433, 594], "has_multiple_output": 427, "is_regex_project": 428, "ne": [429, 441], "output_nam": 430, "pop": 431, "root_nam": 432, "undo_alias": 433, "mod": 435, "mode": [436, 865], "mul": 437, "nan_max": [439, 869], "nan_min": [440, 870], "or_": 443, "over": 444, "pct_chang": [445, 873], "pow": 447, "prefix": 448, "rank": [451, 879], "reinterpret": [453, 881], "repeat_bi": 454, "reshap": [455, 883], "rolling_appli": [457, 885], "rolling_max": [458, 886], "rolling_mean": [459, 887], "rolling_median": [460, 888], "rolling_min": [461, 889], "rolling_quantil": [462, 890], "rolling_skew": [463, 891], "rolling_std": [464, 892], "rolling_sum": [465, 893], "rolling_var": [466, 894], "search_sort": [469, 897], "shrink_dtyp": [473, 905], "shuffl": [474, 907], "sign": [475, 908], "sin": [476, 909], "sinh": [477, 910], "skew": [478, 911], "sort_bi": 481, "sqrt": [482, 914], "str": [484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949], "extract": [491, 924], "extract_al": [492, 925], "json_extract": [493, 926], "json_path_match": [494, 927], "ljust": [496, 929], "lstrip": [497, 930], "n_char": [498, 931], "parse_int": [499, 932], "replace_al": [501, 934], "rjust": [502, 935], "rstrip": [503, 936], "split": [505, 938], "split_exact": [506, 939], "splitn": [507, 940], "strip": [509, 942], "strptime": [510, 943], "to_dat": [511, 944], "to_datetim": [512, 945], "to_lowercas": [513, 946], "to_tim": [514, 947], "to_uppercas": [515, 948], "zfill": [516, 949], "field": [517, 950, 951], "rename_field": [518, 952], "sub": 519, "suffix": 520, "tan": [525, 959], "tanh": [526, 960], "to_phys": [527, 969], "truediv": 529, "unique_count": [531, 972], "upper_bound": [532, 973], "value_count": [533, 974], "where": 535, "xor": 536, "arang": 541, "arg_sort_bi": 542, "avg": 543, "coalesc": 544, "col": 545, "concat_list": 546, "concat_str": 547, "cov": 550, "cumfold": 551, "cumreduc": 552, "element": 557, "format": 561, "from_epoch": 562, "group": 563, "lit": 566, "reduc": 574, "repeat": 575, "rolling_corr": 576, "rolling_cov": 577, "when": 585, "categori": [588, 981], "name": [589, 868], "express": 592, "oper": 597, "conjunct": 597, "comparison": 597, "string": [598, 989], "window": 601, "convers": 602, "eager": 602, "parallel": 602, "refer": 603, "input": 604, "output": 604, "feather": 604, "ipc": 604, "parquet": 604, "databas": 604, "json": 604, "avro": 604, "excel": 604, "delta": 604, "lake": 604, "dataset": 604, "lazyfram": [606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690], "collect": 610, "explain": 615, "fetch": 617, "from_json": 622, "profil": [643, 993], "show_graph": 653, "sink_ipc": 654, "sink_parquet": 655, "with_context": 669, "lazygroupbi": [672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686], "read": 691, "write": 691, "logic": 691, "plan": 691, "chunk_length": 748, "cut": 761, "flag": 823, "get_chunk": 825, "has_valid": 826, "hist": 829, "inner_dtyp": 831, "is_boolean": 834, "is_float": 839, "is_integ": 842, "is_numer": 847, "is_sort": 848, "is_tempor": 849, "is_utf8": 851, "new_from_index": 871, "peak_max": 874, "peak_min": 875, "qcut": 877, "series_equ": 898, "set": 899, "set_at_idx": 900, "time_unit": 961, "to_fram": 964, "to_list": 966, "view": 976, "zip_with": 977, "sql": 992, "method": 992, "assert": 993, "primit": 993, "strategi": 993, "helper": 993, "util": 994}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.read_json": [[109, "polars-read-json"]], "polars.exceptions.ShapeError": [[87, "polars-exceptions-shapeerror"]], "polars.DataFrame.__dataframe__": [[134, "polars-dataframe-dataframe"]], "polars.read_csv": [[102, "polars-read-csv"]], "polars.read_csv_batched": [[103, "polars-read-csv-batched"]], "polars.arg_where": [[70, "polars-arg-where"]], "polars.scan_csv": [[113, "polars-scan-csv"]], "polars.from_dicts": [[93, "polars-from-dicts"]], "polars.read_database": [[104, "polars-read-database"]], "Config": [[132, "config"]], "Config options": [[132, "config-options"]], "Config load, save, and current state": [[132, "config-load-save-and-current-state"]], "Use as a context manager": [[132, "use-as-a-context-manager"]], "polars.DataFrame.clear": [[137, "polars-dataframe-clear"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[99, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.scan_ipc": [[115, "polars-scan-ipc"]], "polars.testing.parametric.create_list_strategy": [[124, "polars-testing-parametric-create-list-strategy"]], "polars.from_dict": [[92, "polars-from-dict"]], "polars.read_ndjson": [[110, "polars-read-ndjson"]], "polars.show_versions": [[119, "polars-show-versions"]], "polars.scan_pyarrow_dataset": [[118, "polars-scan-pyarrow-dataset"]], "polars.exceptions.NoRowsReturnedError": [[82, "polars-exceptions-norowsreturnederror"]], "polars.exceptions.NoDataError": [[81, "polars-exceptions-nodataerror"]], "polars.read_delta": [[105, "polars-read-delta"]], "polars.scan_ndjson": [[116, "polars-scan-ndjson"]], "polars.exceptions.DuplicateError": [[79, "polars-exceptions-duplicateerror"]], "polars.testing.parametric.series": [[127, "polars-testing-parametric-series"]], "polars.DataFrame.bottom_k": [[136, "polars-dataframe-bottom-k"]], "polars.testing.parametric.column": [[122, "polars-testing-parametric-column"]], "Aggregation": [[133, "aggregation"], [693, "aggregation"], [605, "aggregation"], [259, "aggregation"]], "polars.enable_string_cache": [[75, "polars-enable-string-cache"]], "polars.from_pandas": [[95, "polars-from-pandas"]], "polars.testing.parametric.columns": [[123, "polars-testing-parametric-columns"]], "polars.DataFrame.clone": [[138, "polars-dataframe-clone"]], "polars.ones": [[100, "polars-ones"]], "polars.exceptions.ColumnNotFoundError": [[77, "polars-exceptions-columnnotfounderror"]], "polars.read_ipc_schema": [[108, "polars-read-ipc-schema"]], "polars.time_range": [[130, "polars-time-range"]], "polars.read_avro": [[101, "polars-read-avro"]], "polars.exceptions.SchemaError": [[85, "polars-exceptions-schemaerror"]], "polars.exceptions.StructFieldNotFoundError": [[88, "polars-exceptions-structfieldnotfounderror"]], "polars.exceptions.RowsError": [[84, "polars-exceptions-rowserror"]], "polars.scan_delta": [[114, "polars-scan-delta"]], "polars.exceptions.ArrowError": [[76, "polars-exceptions-arrowerror"]], "polars.testing.assert_series_equal": [[121, "polars-testing-assert-series-equal"]], "polars.read_ipc": [[107, "polars-read-ipc"]], "polars.from_records": [[96, "polars-from-records"]], "polars.exceptions.TooManyRowsReturnedError": [[89, "polars-exceptions-toomanyrowsreturnederror"]], "polars.threadpool_size": [[129, "polars-threadpool-size"]], "polars.from_arrow": [[90, "polars-from-arrow"]], "polars.from_dataframe": [[91, "polars-from-dataframe"]], "polars.DataFrame.apply": [[135, "polars-dataframe-apply"]], "polars.scan_parquet": [[117, "polars-scan-parquet"]], "polars.exceptions.InvalidOperationError": [[80, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.ComputeError": [[78, "polars-exceptions-computeerror"]], "polars.testing.parametric.dataframes": [[125, "polars-testing-parametric-dataframes"]], "polars.concat": [[73, "polars-concat"]], "polars.zeros": [[131, "polars-zeros"]], "polars.read_excel": [[106, "polars-read-excel"]], "polars.exceptions.SchemaFieldNotFoundError": [[86, "polars-exceptions-schemafieldnotfounderror"]], "polars.collect_all": [[72, "polars-collect-all"]], "polars.build_info": [[71, "polars-build-info"]], "polars.from_numpy": [[94, "polars-from-numpy"]], "polars.get_index_type": [[98, "polars-get-index-type"]], "polars.date_range": [[74, "polars-date-range"]], "polars.testing.assert_frame_equal": [[120, "polars-testing-assert-frame-equal"]], "polars.from_repr": [[97, "polars-from-repr"]], "polars.testing.parametric.set_profile": [[128, "polars-testing-parametric-set-profile"]], "polars.DataFrame.columns": [[139, "polars-dataframe-columns"]], "polars.read_parquet_schema": [[112, "polars-read-parquet-schema"]], "polars.testing.parametric.load_profile": [[126, "polars-testing-parametric-load-profile"]], "polars.read_parquet": [[111, "polars-read-parquet"]], "polars.exceptions.PolarsPanicError": [[83, "polars-exceptions-polarspanicerror"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.Config.restore_defaults": [[8, "polars-config-restore-defaults"]], "polars.Config.set_tbl_cell_alignment": [[14, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_hide_column_names": [[20, "polars-config-set-tbl-hide-column-names"]], "polars.Datetime": [[38, "polars-datetime"]], "polars.DataFrame.write_ndjson": [[34, "polars-dataframe-write-ndjson"]], "polars.DataType": [[36, "polars-datatype"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.DataFrame.write_database": [[29, "polars-dataframe-write-database"]], "polars.SQLContext.tables": [[54, "polars-sqlcontext-tables"]], "polars.Float64": [[42, "polars-float64"]], "polars.Struct": [[57, "polars-struct"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Config.set_ascii_tables": [[10, "polars-config-set-ascii-tables"]], "polars.Date": [[37, "polars-date"]], "polars.DataFrame.write_excel": [[31, "polars-dataframe-write-excel"]], "polars.api.register_expr_namespace": [[67, "polars-api-register-expr-namespace"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [993, "examples"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Config.save": [[9, "polars-config-save"]], "polars.Float32": [[41, "polars-float32"]], "polars.SQLContext.register_many": [[53, "polars-sqlcontext-register-many"]], "polars.align_frames": [[65, "polars-align-frames"]], "polars.SQLContext.register_globals": [[52, "polars-sqlcontext-register-globals"]], "polars.Time": [[58, "polars-time"]], "polars.Config.set_streaming_chunk_size": [[13, "polars-config-set-streaming-chunk-size"]], "polars.Array": [[2, "polars-array"]], "polars.SQLContext.register": [[51, "polars-sqlcontext-register"]], "polars.DataFrame.write_ipc": [[32, "polars-dataframe-write-ipc"]], "polars.api.register_lazyframe_namespace": [[68, "polars-api-register-lazyframe-namespace"]], "polars.Config.set_tbl_hide_column_data_types": [[19, "polars-config-set-tbl-hide-column-data-types"]], "polars.SQLContext.unregister": [[55, "polars-sqlcontext-unregister"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.Object": [[49, "polars-object"]], "polars.Config.state": [[26, "polars-config-state"]], "polars.Config.set_verbose": [[25, "polars-config-set-verbose"]], "polars.Config.set_tbl_column_data_type_inline": [[16, "polars-config-set-tbl-column-data-type-inline"]], "polars.api.register_series_namespace": [[69, "polars-api-register-series-namespace"]], "polars.Config.set_tbl_width_chars": [[24, "polars-config-set-tbl-width-chars"]], "polars.List": [[47, "polars-list"]], "polars.DataFrame.write_json": [[33, "polars-dataframe-write-json"]], "polars.Config.set_tbl_hide_dataframe_shape": [[21, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_hide_dtype_separator": [[22, "polars-config-set-tbl-hide-dtype-separator"]], "polars.DataFrame.write_delta": [[30, "polars-dataframe-write-delta"]], "polars.Config.set_tbl_rows": [[23, "polars-config-set-tbl-rows"]], "polars.DataFrame.write_csv": [[28, "polars-dataframe-write-csv"]], "polars.Duration": [[40, "polars-duration"]], "polars.Null": [[48, "polars-null"]], "polars.Unknown": [[63, "polars-unknown"]], "polars.Binary": [[3, "polars-binary"]], "polars.DataFrame.write_avro": [[27, "polars-dataframe-write-avro"]], "polars.Utf8": [[64, "polars-utf8"]], "polars.StringCache": [[56, "polars-stringcache"]], "polars.UInt64": [[61, "polars-uint64"]], "polars.Config.set_tbl_formatting": [[18, "polars-config-set-tbl-formatting"]], "polars.Decimal": [[39, "polars-decimal"]], "polars.Int64": [[45, "polars-int64"]], "polars.Config.set_tbl_dataframe_shape_below": [[17, "polars-config-set-tbl-dataframe-shape-below"]], "polars.DataFrame.write_parquet": [[35, "polars-dataframe-write-parquet"]], "polars.Int8": [[46, "polars-int8"]], "polars.UInt32": [[60, "polars-uint32"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.UInt16": [[59, "polars-uint16"]], "polars.SQLContext.execute": [[50, "polars-sqlcontext-execute"]], "polars.Int32": [[44, "polars-int32"]], "polars.Int16": [[43, "polars-int16"]], "polars.UInt8": [[62, "polars-uint8"]], "polars.Config.set_tbl_cols": [[15, "polars-config-set-tbl-cols"]], "polars.api.register_dataframe_namespace": [[66, "polars-api-register-dataframe-namespace"]], "polars.Series.std": [[915, "polars-series-std"]], "polars.Series.str.concat": [[917, "polars-series-str-concat"]], "polars.Series.str.to_date": [[944, "polars-series-str-to-date"]], "polars.Series.struct.unnest": [[954, "polars-series-struct-unnest"]], "polars.Series.slice": [[912, "polars-series-slice"]], "polars.Series.str.strptime": [[943, "polars-series-str-strptime"]], "polars.Series.struct.rename_fields": [[952, "polars-series-struct-rename-fields"]], "polars.Series.var": [[975, "polars-series-var"]], "polars.Series.upper_bound": [[973, "polars-series-upper-bound"]], "polars.Series.str.starts_with": [[941, "polars-series-str-starts-with"]], "polars.Series.str.n_chars": [[931, "polars-series-str-n-chars"]], "polars.Series.str.splitn": [[940, "polars-series-str-splitn"]], "polars.Series.str.explode": [[923, "polars-series-str-explode"]], "polars.Series.to_dummies": [[963, "polars-series-to-dummies"]], "polars.Series.str.split": [[938, "polars-series-str-split"]], "polars.Series.sqrt": [[914, "polars-series-sqrt"]], "polars.Series.to_arrow": [[962, "polars-series-to-arrow"]], "polars.Series.str.replace": [[933, "polars-series-str-replace"]], "polars.Series.str.ljust": [[929, "polars-series-str-ljust"]], "polars.Series.to_pandas": [[968, "polars-series-to-pandas"]], "polars.Series.value_counts": [[974, "polars-series-value-counts"]], "Attributes": [[978, "attributes"], [687, "attributes"], [249, "attributes"]], "polars.Series.str.lengths": [[928, "polars-series-str-lengths"]], "polars.Series.unique_counts": [[972, "polars-series-unique-counts"]], "polars.Series.str.strip": [[942, "polars-series-str-strip"]], "polars.Series.take_every": [[958, "polars-series-take-every"]], "polars.Series.to_frame": [[964, "polars-series-to-frame"]], "polars.Series.struct.field": [[950, "polars-series-struct-field"]], "polars.Series.time_unit": [[961, "polars-series-time-unit"]], "polars.Series.str.count_match": [[919, "polars-series-str-count-match"]], "polars.Series.str.slice": [[937, "polars-series-str-slice"]], "polars.Series.str.to_uppercase": [[948, "polars-series-str-to-uppercase"]], "polars.Series.str.extract": [[924, "polars-series-str-extract"]], "polars.Series.unique": [[971, "polars-series-unique"]], "polars.Series.str.to_lowercase": [[946, "polars-series-str-to-lowercase"]], "polars.Series.to_init_repr": [[965, "polars-series-to-init-repr"]], "polars.Series.str.contains": [[918, "polars-series-str-contains"]], "polars.Series.str.split_exact": [[939, "polars-series-str-split-exact"]], "polars.Series.str.rjust": [[935, "polars-series-str-rjust"]], "polars.Series.str.decode": [[920, "polars-series-str-decode"]], "polars.Series.str.to_time": [[947, "polars-series-str-to-time"]], "polars.Series.str.encode": [[921, "polars-series-str-encode"]], "polars.Series.str": [[916, "polars-series-str"]], "polars.Series.tail": [[956, "polars-series-tail"]], "polars.Series.top_k": [[970, "polars-series-top-k"]], "polars.Series.take": [[957, "polars-series-take"]], "polars.Series.sinh": [[910, "polars-series-sinh"]], "polars.Series.struct.schema": [[953, "polars-series-struct-schema"]], "polars.Series.str.ends_with": [[922, "polars-series-str-ends-with"]], "polars.Series.str.zfill": [[949, "polars-series-str-zfill"]], "polars.Series.str.json_extract": [[926, "polars-series-str-json-extract"]], "polars.Series.str.parse_int": [[932, "polars-series-str-parse-int"]], "polars.Series.str.json_path_match": [[927, "polars-series-str-json-path-match"]], "polars.Series.str.to_datetime": [[945, "polars-series-str-to-datetime"]], "polars.Series.tanh": [[960, "polars-series-tanh"]], "polars.Series.tan": [[959, "polars-series-tan"]], "polars.Series.to_list": [[966, "polars-series-to-list"]], "polars.Series.to_numpy": [[967, "polars-series-to-numpy"]], "polars.Series.struct.fields": [[951, "polars-series-struct-fields"]], "polars.Series.skew": [[911, "polars-series-skew"]], "polars.Series.to_physical": [[969, "polars-series-to-physical"]], "polars.Series.sort": [[913, "polars-series-sort"]], "polars.Series.sum": [[955, "polars-series-sum"]], "polars.Series.str.lstrip": [[930, "polars-series-str-lstrip"]], "polars.Series.str.extract_all": [[925, "polars-series-str-extract-all"]], "polars.Series.str.replace_all": [[934, "polars-series-str-replace-all"]], "polars.Series.str.rstrip": [[936, "polars-series-str-rstrip"]], "polars.Series.zip_with": [[977, "polars-series-zip-with"]], "polars.Series.view": [[976, "polars-series-view"]], "Binary": [[979, "binary"], [597, "binary"], [586, "binary"]], "polars.Series.sign": [[908, "polars-series-sign"]], "polars.Series.is_sorted": [[848, "polars-series-is-sorted"]], "polars.Series.n_unique": [[867, "polars-series-n-unique"]], "polars.Series.rolling_median": [[888, "polars-series-rolling-median"]], "polars.Series.is_utf8": [[851, "polars-series-is-utf8"]], "polars.Series.log": [[856, "polars-series-log"]], "polars.Series.len": [[854, "polars-series-len"]], "polars.Series.nan_max": [[869, "polars-series-nan-max"]], "polars.Series.nan_min": [[870, "polars-series-nan-min"]], "polars.Series.rolling_mean": [[887, "polars-series-rolling-mean"]], "polars.Series.rank": [[879, "polars-series-rank"]], "polars.Series.set": [[899, "polars-series-set"]], "polars.Series.shuffle": [[907, "polars-series-shuffle"]], "polars.Series.qcut": [[877, "polars-series-qcut"]], "polars.Series.is_not_null": [[845, "polars-series-is-not-null"]], "polars.Series.limit": [[855, "polars-series-limit"]], "polars.Series.peak_min": [[875, "polars-series-peak-min"]], "polars.Series.shrink_dtype": [[905, "polars-series-shrink-dtype"]], "polars.Series.mode": [[865, "polars-series-mode"]], "polars.Series.shift": [[903, "polars-series-shift"]], "polars.Series.lower_bound": [[859, "polars-series-lower-bound"]], "polars.Series.shrink_to_fit": [[906, "polars-series-shrink-to-fit"]], "polars.Series.is_infinite": [[841, "polars-series-is-infinite"]], "polars.Series.log1p": [[858, "polars-series-log1p"]], "polars.Series.search_sorted": [[897, "polars-series-search-sorted"]], "polars.Series.rolling_skew": [[891, "polars-series-rolling-skew"]], "polars.Series.name": [[868, "polars-series-name"]], "polars.Series.median": [[863, "polars-series-median"]], "polars.Series.min": [[864, "polars-series-min"]], "polars.Series.log10": [[857, "polars-series-log10"]], "polars.Series.new_from_index": [[871, "polars-series-new-from-index"]], "polars.Series.reverse": [[884, "polars-series-reverse"]], "polars.Series.rolling_max": [[886, "polars-series-rolling-max"]], "polars.Series.is_temporal": [[849, "polars-series-is-temporal"]], "polars.Series.rolling_apply": [[885, "polars-series-rolling-apply"]], "polars.Series.pct_change": [[873, "polars-series-pct-change"]], "polars.Series.peak_max": [[874, "polars-series-peak-max"]], "polars.Series.quantile": [[878, "polars-series-quantile"]], "polars.Series.reshape": [[883, "polars-series-reshape"]], "polars.Series.rolling_std": [[892, "polars-series-rolling-std"]], "polars.Series.is_in": [[840, "polars-series-is-in"]], "polars.Series.is_null": [[846, "polars-series-is-null"]], "polars.Series.series_equal": [[898, "polars-series-series-equal"]], "polars.Series.max": [[861, "polars-series-max"]], "polars.Series.shape": [[902, "polars-series-shape"]], "polars.Series.sin": [[909, "polars-series-sin"]], "polars.Series.rechunk": [[880, "polars-series-rechunk"]], "polars.Series.mean": [[862, "polars-series-mean"]], "polars.Series.map_dict": [[860, "polars-series-map-dict"]], "polars.Series.n_chunks": [[866, "polars-series-n-chunks"]], "polars.Series.is_integer": [[842, "polars-series-is-integer"]], "polars.Series.rename": [[882, "polars-series-rename"]], "polars.Series.sample": [[896, "polars-series-sample"]], "polars.Series.kurtosis": [[853, "polars-series-kurtosis"]], "polars.Series.set_at_idx": [[900, "polars-series-set-at-idx"]], "polars.Series.product": [[876, "polars-series-product"]], "polars.Series.is_unique": [[850, "polars-series-is-unique"]], "polars.Series.reinterpret": [[881, "polars-series-reinterpret"]], "polars.Series.is_nan": [[843, "polars-series-is-nan"]], "polars.Series.is_not_nan": [[844, "polars-series-is-not-nan"]], "polars.Series.round": [[895, "polars-series-round"]], "polars.Series.item": [[852, "polars-series-item"]], "polars.Series.rolling_sum": [[893, "polars-series-rolling-sum"]], "polars.Series.is_numeric": [[847, "polars-series-is-numeric"]], "polars.Series.set_sorted": [[901, "polars-series-set-sorted"]], "polars.Series.shift_and_fill": [[904, "polars-series-shift-and-fill"]], "polars.Series.rolling_var": [[894, "polars-series-rolling-var"]], "polars.Series.rolling_min": [[889, "polars-series-rolling-min"]], "polars.Series.null_count": [[872, "polars-series-null-count"]], "polars.Series.rolling_quantile": [[890, "polars-series-rolling-quantile"]], "polars.Series.dt.quarter": [[797, "polars-series-dt-quarter"]], "polars.Series.dt.minute": [[788, "polars-series-dt-minute"]], "polars.Series.dt.iso_year": [[779, "polars-series-dt-iso-year"]], "polars.Series.dt.second": [[800, "polars-series-dt-second"]], "polars.Series.is_between": [[833, "polars-series-is-between"]], "polars.Series.dt.min": [[787, "polars-series-dt-min"]], "polars.Series.dtype": [[811, "polars-series-dtype"]], "polars.Series.dt.strftime": [[802, "polars-series-dt-strftime"]], "polars.Series.ewm_var": [[816, "polars-series-ewm-var"]], "polars.Series.dt.max": [[780, "polars-series-dt-max"]], "polars.Series.dt.replace_time_zone": [[798, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.seconds": [[801, "polars-series-dt-seconds"]], "polars.Series.dt.milliseconds": [[786, "polars-series-dt-milliseconds"]], "polars.Series.dt.round": [[799, "polars-series-dt-round"]], "polars.Series.dt.weekday": [[808, "polars-series-dt-weekday"]], "polars.Series.hash": [[827, "polars-series-hash"]], "polars.Series.head": [[828, "polars-series-head"]], "polars.Series.exp": [[817, "polars-series-exp"]], "polars.Series.inner_dtype": [[831, "polars-series-inner-dtype"]], "polars.Series.extend_constant": [[819, "polars-series-extend-constant"]], "polars.Series.dt.millisecond": [[785, "polars-series-dt-millisecond"]], "polars.Series.ewm_mean": [[814, "polars-series-ewm-mean"]], "polars.Series.dt.datetime": [[772, "polars-series-dt-datetime"]], "polars.Series.dt.nanosecond": [[793, "polars-series-dt-nanosecond"]], "polars.Series.fill_nan": [[820, "polars-series-fill-nan"]], "polars.Series.hist": [[829, "polars-series-hist"]], "polars.Series.dt.hours": [[777, "polars-series-dt-hours"]], "polars.Series.dt.epoch": [[775, "polars-series-dt-epoch"]], "polars.Series.dt.month_start": [[792, "polars-series-dt-month-start"]], "polars.Series.dt.offset_by": [[795, "polars-series-dt-offset-by"]], "polars.Series.get_chunks": [[825, "polars-series-get-chunks"]], "polars.Series.interpolate": [[832, "polars-series-interpolate"]], "polars.Series.dt.time": [[803, "polars-series-dt-time"]], "polars.Series.fill_null": [[821, "polars-series-fill-null"]], "polars.Series.dt.convert_time_zone": [[770, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.microseconds": [[784, "polars-series-dt-microseconds"]], "polars.Series.explode": [[818, "polars-series-explode"]], "polars.Series.dt.ordinal_day": [[796, "polars-series-dt-ordinal-day"]], "polars.Series.dt.month": [[790, "polars-series-dt-month"]], "polars.Series.dt.is_leap_year": [[778, "polars-series-dt-is-leap-year"]], "polars.Series.ewm_std": [[815, "polars-series-ewm-std"]], "polars.Series.dt.nanoseconds": [[794, "polars-series-dt-nanoseconds"]], "polars.Series.flags": [[823, "polars-series-flags"]], "polars.Series.dt.mean": [[781, "polars-series-dt-mean"]], "polars.Series.floor": [[824, "polars-series-floor"]], "polars.Series.dt.month_end": [[791, "polars-series-dt-month-end"]], "polars.Series.is_duplicated": [[835, "polars-series-is-duplicated"]], "polars.Series.dt.median": [[782, "polars-series-dt-median"]], "polars.Series.dt.days": [[774, "polars-series-dt-days"]], "polars.Series.dt.truncate": [[806, "polars-series-dt-truncate"]], "polars.Series.dt.to_string": [[805, "polars-series-dt-to-string"]], "polars.Series.is_float": [[839, "polars-series-is-float"]], "polars.Series.dt.hour": [[776, "polars-series-dt-hour"]], "polars.Series.dt.with_time_unit": [[809, "polars-series-dt-with-time-unit"]], "polars.Series.is_finite": [[837, "polars-series-is-finite"]], "polars.Series.dt.timestamp": [[804, "polars-series-dt-timestamp"]], "polars.Series.entropy": [[812, "polars-series-entropy"]], "polars.Series.dt.year": [[810, "polars-series-dt-year"]], "polars.Series.dt.week": [[807, "polars-series-dt-week"]], "polars.Series.estimated_size": [[813, "polars-series-estimated-size"]], "polars.Series.dt.date": [[771, "polars-series-dt-date"]], "polars.Series.filter": [[822, "polars-series-filter"]], "polars.Series.has_validity": [[826, "polars-series-has-validity"]], "polars.Series.dt.microsecond": [[783, "polars-series-dt-microsecond"]], "polars.Series.implode": [[830, "polars-series-implode"]], "polars.Series.is_boolean": [[834, "polars-series-is-boolean"]], "polars.Series.is_first": [[838, "polars-series-is-first"]], "polars.Series.is_empty": [[836, "polars-series-is-empty"]], "polars.Series.dt.day": [[773, "polars-series-dt-day"]], "polars.Series.dt.minutes": [[789, "polars-series-dt-minutes"]], "polars.Series.arg_max": [[706, "polars-series-arg-max"]], "polars.Series.arg_sort": [[708, "polars-series-arg-sort"]], "polars.Series.arr.take": [[735, "polars-series-arr-take"]], "polars.Series.arccosh": [[701, "polars-series-arccosh"]], "polars.Series.arccos": [[700, "polars-series-arccos"]], "polars.Series.arr.diff": [[717, "polars-series-arr-diff"]], "polars.Series.bottom_k": [[743, "polars-series-bottom-k"]], "polars.Series.arr.concat": [[714, "polars-series-arr-concat"]], "polars.Series.arr.arg_max": [[712, "polars-series-arr-arg-max"]], "polars.Series.cosh": [[755, "polars-series-cosh"]], "polars.Series.arr.join": [[723, "polars-series-arr-join"]], "polars.Series.arr.slice": [[731, "polars-series-arr-slice"]], "polars.Series.clip_max": [[751, "polars-series-clip-max"]], "polars.Series.cumprod": [[758, "polars-series-cumprod"]], "polars.Series.arctanh": [[705, "polars-series-arctanh"]], "polars.Series.arcsinh": [[703, "polars-series-arcsinh"]], "polars.Series.arr.reverse": [[729, "polars-series-arr-reverse"]], "polars.Series.arr.head": [[722, "polars-series-arr-head"]], "polars.Series.arr.sum": [[733, "polars-series-arr-sum"]], "polars.Series.arr.tail": [[734, "polars-series-arr-tail"]], "polars.Series.clip_min": [[752, "polars-series-clip-min"]], "polars.Series.cos": [[754, "polars-series-cos"]], "polars.Series.bin.encode": [[740, "polars-series-bin-encode"]], "polars.Series.arr.get": [[721, "polars-series-arr-get"]], "polars.Series.arr.contains": [[715, "polars-series-arr-contains"]], "polars.Series.cummin": [[757, "polars-series-cummin"]], "polars.Series.dt": [[767, "polars-series-dt"]], "polars.Series.clip": [[750, "polars-series-clip"]], "polars.Series.cummax": [[756, "polars-series-cummax"]], "polars.Series.drop_nans": [[765, "polars-series-drop-nans"]], "polars.Series.bin.ends_with": [[741, "polars-series-bin-ends-with"]], "polars.Series.cat.set_ordering": [[746, "polars-series-cat-set-ordering"]], "polars.Series.cumulative_eval": [[760, "polars-series-cumulative-eval"]], "polars.Series.arr.min": [[728, "polars-series-arr-min"]], "polars.Series.arr.shift": [[730, "polars-series-arr-shift"]], "polars.Series.describe": [[762, "polars-series-describe"]], "polars.Series.dt.combine": [[769, "polars-series-dt-combine"]], "polars.Series.arg_unique": [[710, "polars-series-arg-unique"]], "polars.Series.bin.decode": [[739, "polars-series-bin-decode"]], "polars.Series.bin.contains": [[738, "polars-series-bin-contains"]], "polars.Series.arr.lengths": [[725, "polars-series-arr-lengths"]], "polars.Series.cast": [[744, "polars-series-cast"]], "polars.Series.arr.sort": [[732, "polars-series-arr-sort"]], "polars.Series.diff": [[763, "polars-series-diff"]], "polars.Series.clone": [[753, "polars-series-clone"]], "polars.Series.arcsin": [[702, "polars-series-arcsin"]], "polars.Series.dot": [[764, "polars-series-dot"]], "polars.Series.arr.to_struct": [[736, "polars-series-arr-to-struct"]], "polars.Series.arr.unique": [[737, "polars-series-arr-unique"]], "polars.Series.arg_min": [[707, "polars-series-arg-min"]], "polars.Series.arr.explode": [[719, "polars-series-arr-explode"]], "polars.Series.chunk_lengths": [[748, "polars-series-chunk-lengths"]], "polars.Series.clear": [[749, "polars-series-clear"]], "polars.Series.arr.first": [[720, "polars-series-arr-first"]], "polars.Series.arr.arg_min": [[713, "polars-series-arr-arg-min"]], "polars.Series.arg_true": [[709, "polars-series-arg-true"]], "polars.Series.ceil": [[747, "polars-series-ceil"]], "polars.Series.arr": [[711, "polars-series-arr"]], "polars.Series.cat": [[745, "polars-series-cat"]], "polars.Series.arr.mean": [[727, "polars-series-arr-mean"]], "polars.Series.cumsum": [[759, "polars-series-cumsum"]], "polars.Series.arr.count_match": [[716, "polars-series-arr-count-match"]], "polars.Series.dt.cast_time_unit": [[768, "polars-series-dt-cast-time-unit"]], "polars.Series.drop_nulls": [[766, "polars-series-drop-nulls"]], "polars.Series.arctan": [[704, "polars-series-arctan"]], "polars.Series.bin.starts_with": [[742, "polars-series-bin-starts-with"]], "polars.Series.arr.last": [[724, "polars-series-arr-last"]], "polars.Series.arr.max": [[726, "polars-series-arr-max"]], "polars.Series.cut": [[761, "polars-series-cut"]], "polars.Series.arr.eval": [[718, "polars-series-arr-eval"]], "Temporal": [[991, "temporal"], [600, "temporal"], [257, "temporal"]], "Descriptive": [[983, "descriptive"], [688, "descriptive"], [251, "descriptive"]], "Categories": [[981, "categories"], [588, "categories"]], "Miscellaneous": [[987, "miscellaneous"], [691, "miscellaneous"], [595, "miscellaneous"], [602, "miscellaneous"], [255, "miscellaneous"]], "SQL": [[992, "sql"]], "Methods": [[992, "methods"]], "Utils": [[994, "utils"]], "Manipulation/selection": [[988, "manipulation-selection"], [692, "manipulation-selection"], [596, "manipulation-selection"], [256, "manipulation-selection"]], "List": [[986, "list"], [593, "list"]], "Boolean": [[980, "boolean"], [587, "boolean"]], "Export": [[984, "export"], [252, "export"]], "Testing": [[993, "testing"]], "Asserts": [[993, "asserts"]], "Parametric testing": [[993, "parametric-testing"]], "Polars primitives": [[993, "polars-primitives"]], "Strategy helpers": [[993, "strategy-helpers"]], "Profiles": [[993, "profiles"]], "String": [[989, "string"], [598, "string"]], "Series": [[985, "series"]], "Struct": [[990, "struct"], [599, "struct"]], "Computation": [[982, "computation"], [590, "computation"], [250, "computation"]], "polars.LazyFrame.std": [[658, "polars-lazyframe-std"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[675, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.LazyFrame.with_context": [[669, "polars-lazyframe-with-context"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[672, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.LazyFrame.with_columns": [[668, "polars-lazyframe-with-columns"]], "polars.LazyFrame.map": [[634, "polars-lazyframe-map"]], "polars.LazyFrame.sort": [[657, "polars-lazyframe-sort"]], "polars.LazyFrame.tail": [[660, "polars-lazyframe-tail"]], "polars.LazyFrame.last": [[631, "polars-lazyframe-last"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[684, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.LazyFrame.lazy": [[632, "polars-lazyframe-lazy"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[685, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[674, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.LazyFrame.null_count": [[641, "polars-lazyframe-null-count"]], "polars.LazyFrame.profile": [[643, "polars-lazyframe-profile"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[673, "polars-lazyframe-groupby-lazygroupby-all"]], "Read/write logical plan": [[691, "read-write-logical-plan"]], "polars.LazyFrame.write_json": [[671, "polars-lazyframe-write-json"]], "polars.Series.abs": [[694, "polars-series-abs"]], "polars.LazyFrame.select": [[649, "polars-lazyframe-select"]], "polars.LazyFrame.show_graph": [[653, "polars-lazyframe-show-graph"]], "polars.LazyFrame.sum": [[659, "polars-lazyframe-sum"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[686, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.apply": [[699, "polars-series-apply"]], "polars.LazyFrame.var": [[666, "polars-lazyframe-var"]], "polars.LazyFrame.pipe": [[642, "polars-lazyframe-pipe"]], "polars.LazyFrame.merge_sorted": [[639, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.take_every": [[661, "polars-lazyframe-take-every"]], "polars.LazyFrame.rename": [[646, "polars-lazyframe-rename"]], "polars.LazyFrame.unnest": [[664, "polars-lazyframe-unnest"]], "polars.Series.alias": [[695, "polars-series-alias"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[683, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.LazyFrame.schema": [[648, "polars-lazyframe-schema"]], "polars.LazyFrame.min": [[640, "polars-lazyframe-min"]], "polars.Series.append": [[698, "polars-series-append"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[678, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.Series.any": [[697, "polars-series-any"]], "polars.Series.all": [[696, "polars-series-all"]], "polars.LazyFrame.limit": [[633, "polars-lazyframe-limit"]], "polars.LazyFrame.update": [[665, "polars-lazyframe-update"]], "polars.LazyFrame.with_row_count": [[670, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.read_json": [[645, "polars-lazyframe-read-json"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[677, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[679, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[681, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.LazyFrame.width": [[667, "polars-lazyframe-width"]], "polars.LazyFrame.median": [[637, "polars-lazyframe-median"]], "polars.LazyFrame.max": [[635, "polars-lazyframe-max"]], "polars.LazyFrame.set_sorted": [[650, "polars-lazyframe-set-sorted"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[680, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.LazyFrame.sink_parquet": [[655, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.quantile": [[644, "polars-lazyframe-quantile"]], "polars.LazyFrame.reverse": [[647, "polars-lazyframe-reverse"]], "polars.LazyFrame.shift_and_fill": [[652, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.mean": [[636, "polars-lazyframe-mean"]], "GroupBy": [[689, "groupby"], [253, "groupby"]], "polars.LazyFrame.slice": [[656, "polars-lazyframe-slice"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[676, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.LazyFrame.shift": [[651, "polars-lazyframe-shift"]], "polars.LazyFrame.sink_ipc": [[654, "polars-lazyframe-sink-ipc"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[682, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.LazyFrame.unique": [[663, "polars-lazyframe-unique"]], "LazyFrame": [[690, "lazyframe"]], "polars.LazyFrame.join_asof": [[630, "polars-lazyframe-join-asof"]], "polars.LazyFrame.melt": [[638, "polars-lazyframe-melt"]], "polars.LazyFrame.top_k": [[662, "polars-lazyframe-top-k"]], "polars.first": [[559, "polars-first"]], "polars.coalesce": [[544, "polars-coalesce"]], "polars.duration": [[556, "polars-duration"]], "polars.Expr.take": [[523, "polars-expr-take"]], "polars.Expr.str.to_datetime": [[512, "polars-expr-str-to-datetime"]], "polars.Expr.truediv": [[529, "polars-expr-truediv"]], "polars.cov": [[550, "polars-cov"]], "polars.Expr.str.extract": [[491, "polars-expr-str-extract"]], "polars.count": [[549, "polars-count"]], "polars.Expr.str.split_exact": [[506, "polars-expr-str-split-exact"]], "polars.Expr.str.extract_all": [[492, "polars-expr-str-extract-all"]], "polars.Expr.struct.rename_fields": [[518, "polars-expr-struct-rename-fields"]], "polars.Expr.str.split": [[505, "polars-expr-str-split"]], "polars.Expr.suffix": [[520, "polars-expr-suffix"]], "polars.Expr.to_physical": [[527, "polars-expr-to-physical"]], "polars.Expr.top_k": [[528, "polars-expr-top-k"]], "polars.Expr.str.lengths": [[495, "polars-expr-str-lengths"]], "polars.Expr.str.ljust": [[496, "polars-expr-str-ljust"]], "polars.Expr.unique": [[530, "polars-expr-unique"]], "polars.Expr.var": [[534, "polars-expr-var"]], "polars.Expr.str.replace": [[500, "polars-expr-str-replace"]], "polars.concat_str": [[547, "polars-concat-str"]], "polars.concat_list": [[546, "polars-concat-list"]], "polars.date": [[554, "polars-date"]], "polars.Expr.unique_counts": [[531, "polars-expr-unique-counts"]], "polars.corr": [[548, "polars-corr"]], "polars.cumfold": [[551, "polars-cumfold"]], "polars.Expr.str.json_path_match": [[494, "polars-expr-str-json-path-match"]], "polars.Expr.str.to_uppercase": [[515, "polars-expr-str-to-uppercase"]], "polars.Expr.str.slice": [[504, "polars-expr-str-slice"]], "polars.arg_sort_by": [[542, "polars-arg-sort-by"]], "polars.apply": [[539, "polars-apply"]], "polars.Expr.struct.field": [[517, "polars-expr-struct-field"]], "polars.avg": [[543, "polars-avg"]], "polars.Expr.str.rjust": [[502, "polars-expr-str-rjust"]], "polars.Expr.str.to_time": [[514, "polars-expr-str-to-time"]], "polars.all": [[537, "polars-all"]], "polars.Expr.str.parse_int": [[499, "polars-expr-str-parse-int"]], "polars.Expr.sum": [[521, "polars-expr-sum"]], "polars.cumreduce": [[552, "polars-cumreduce"]], "polars.Expr.str.replace_all": [[501, "polars-expr-str-replace-all"]], "polars.cumsum": [[553, "polars-cumsum"]], "polars.exclude": [[558, "polars-exclude"]], "polars.Expr.value_counts": [[533, "polars-expr-value-counts"]], "polars.datetime": [[555, "polars-datetime"]], "polars.Expr.str.n_chars": [[498, "polars-expr-str-n-chars"]], "polars.Expr.xor": [[536, "polars-expr-xor"]], "polars.Expr.str.rstrip": [[503, "polars-expr-str-rstrip"]], "polars.Expr.str.explode": [[490, "polars-expr-str-explode"]], "polars.arange": [[541, "polars-arange"]], "polars.any": [[538, "polars-any"]], "polars.element": [[557, "polars-element"]], "polars.Expr.str.lstrip": [[497, "polars-expr-str-lstrip"]], "polars.Expr.tan": [[525, "polars-expr-tan"]], "polars.Expr.str.to_date": [[511, "polars-expr-str-to-date"]], "polars.Expr.tanh": [[526, "polars-expr-tanh"]], "polars.Expr.where": [[535, "polars-expr-where"]], "polars.Expr.upper_bound": [[532, "polars-expr-upper-bound"]], "polars.Expr.str.strip": [[509, "polars-expr-str-strip"]], "polars.Expr.str.json_extract": [[493, "polars-expr-str-json-extract"]], "polars.Expr.str.zfill": [[516, "polars-expr-str-zfill"]], "polars.Expr.sub": [[519, "polars-expr-sub"]], "polars.Expr.take_every": [[524, "polars-expr-take-every"]], "polars.Expr.str.to_lowercase": [[513, "polars-expr-str-to-lowercase"]], "polars.Expr.tail": [[522, "polars-expr-tail"]], "polars.Expr.str.starts_with": [[508, "polars-expr-str-starts-with"]], "polars.approx_unique": [[540, "polars-approx-unique"]], "polars.Expr.str.splitn": [[507, "polars-expr-str-splitn"]], "polars.col": [[545, "polars-col"]], "polars.Expr.str.strptime": [[510, "polars-expr-str-strptime"]], "polars.Expr.repeat_by": [[454, "polars-expr-repeat-by"]], "polars.Expr.rolling_mean": [[459, "polars-expr-rolling-mean"]], "polars.Expr.str.count_match": [[486, "polars-expr-str-count-match"]], "polars.Expr.rechunk": [[452, "polars-expr-rechunk"]], "polars.Expr.shrink_dtype": [[473, "polars-expr-shrink-dtype"]], "polars.Expr.sqrt": [[482, "polars-expr-sqrt"]], "polars.Expr.map_alias": [[421, "polars-expr-map-alias"]], "polars.Expr.str.concat": [[484, "polars-expr-str-concat"]], "polars.Expr.nan_max": [[439, "polars-expr-nan-max"]], "polars.Expr.sort": [[480, "polars-expr-sort"]], "polars.Expr.pct_change": [[445, "polars-expr-pct-change"]], "polars.Expr.mode": [[436, "polars-expr-mode"]], "polars.Expr.round": [[467, "polars-expr-round"]], "polars.Expr.sort_by": [[481, "polars-expr-sort-by"]], "polars.Expr.rolling_max": [[458, "polars-expr-rolling-max"]], "polars.Expr.rolling_min": [[461, "polars-expr-rolling-min"]], "polars.Expr.map_dict": [[422, "polars-expr-map-dict"]], "polars.Expr.mul": [[437, "polars-expr-mul"]], "polars.Expr.set_sorted": [[470, "polars-expr-set-sorted"]], "polars.Expr.search_sorted": [[469, "polars-expr-search-sorted"]], "polars.Expr.map": [[420, "polars-expr-map"]], "polars.Expr.mean": [[424, "polars-expr-mean"]], "polars.Expr.rolling_std": [[464, "polars-expr-rolling-std"]], "polars.Expr.shift_and_fill": [[472, "polars-expr-shift-and-fill"]], "polars.Expr.median": [[425, "polars-expr-median"]], "polars.Expr.nan_min": [[440, "polars-expr-nan-min"]], "polars.Expr.meta.root_names": [[432, "polars-expr-meta-root-names"]], "polars.Expr.std": [[483, "polars-expr-std"]], "polars.Expr.meta.is_regex_projection": [[428, "polars-expr-meta-is-regex-projection"]], "polars.Expr.sinh": [[477, "polars-expr-sinh"]], "polars.Expr.prefix": [[448, "polars-expr-prefix"]], "polars.Expr.meta.ne": [[429, "polars-expr-meta-ne"]], "polars.Expr.over": [[444, "polars-expr-over"]], "polars.Expr.sample": [[468, "polars-expr-sample"]], "polars.Expr.shift": [[471, "polars-expr-shift"]], "polars.Expr.sign": [[475, "polars-expr-sign"]], "polars.Expr.pow": [[447, "polars-expr-pow"]], "polars.Expr.reverse": [[456, "polars-expr-reverse"]], "polars.Expr.rolling_median": [[460, "polars-expr-rolling-median"]], "polars.Expr.n_unique": [[438, "polars-expr-n-unique"]], "polars.Expr.null_count": [[442, "polars-expr-null-count"]], "polars.Expr.rank": [[451, "polars-expr-rank"]], "polars.Expr.meta.eq": [[426, "polars-expr-meta-eq"]], "polars.Expr.reinterpret": [[453, "polars-expr-reinterpret"]], "polars.Expr.rolling_skew": [[463, "polars-expr-rolling-skew"]], "polars.Expr.skew": [[478, "polars-expr-skew"]], "polars.Expr.min": [[434, "polars-expr-min"]], "polars.Expr.pipe": [[446, "polars-expr-pipe"]], "polars.Expr.rolling_sum": [[465, "polars-expr-rolling-sum"]], "polars.Expr.slice": [[479, "polars-expr-slice"]], "polars.Expr.rolling_var": [[466, "polars-expr-rolling-var"]], "polars.Expr.reshape": [[455, "polars-expr-reshape"]], "polars.Expr.sin": [[476, "polars-expr-sin"]], "polars.Expr.str.contains": [[485, "polars-expr-str-contains"]], "polars.Expr.str.ends_with": [[489, "polars-expr-str-ends-with"]], "polars.Expr.str.decode": [[487, "polars-expr-str-decode"]], "polars.Expr.meta.pop": [[431, "polars-expr-meta-pop"]], "polars.Expr.max": [[423, "polars-expr-max"]], "polars.Expr.ne": [[441, "polars-expr-ne"]], "polars.Expr.rolling_quantile": [[462, "polars-expr-rolling-quantile"]], "polars.Expr.str.encode": [[488, "polars-expr-str-encode"]], "polars.Expr.meta.output_name": [[430, "polars-expr-meta-output-name"]], "polars.Expr.product": [[449, "polars-expr-product"]], "polars.Expr.shuffle": [[474, "polars-expr-shuffle"]], "polars.Expr.rolling_apply": [[457, "polars-expr-rolling-apply"]], "polars.Expr.meta.undo_aliases": [[433, "polars-expr-meta-undo-aliases"]], "polars.Expr.meta.has_multiple_outputs": [[427, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.mod": [[435, "polars-expr-mod"]], "polars.Expr.or_": [[443, "polars-expr-or"]], "polars.Expr.quantile": [[450, "polars-expr-quantile"]], "polars.Expr.filter": [[384, "polars-expr-filter"]], "polars.Expr.inspect": [[395, "polars-expr-inspect"]], "polars.Expr.ewm_std": [[376, "polars-expr-ewm-std"]], "polars.Expr.le": [[412, "polars-expr-le"]], "polars.Expr.dt.nanoseconds": [[356, "polars-expr-dt-nanoseconds"]], "polars.Expr.first": [[385, "polars-expr-first"]], "polars.Expr.fill_null": [[383, "polars-expr-fill-null"]], "polars.Expr.explode": [[380, "polars-expr-explode"]], "polars.Expr.dt.ordinal_day": [[358, "polars-expr-dt-ordinal-day"]], "polars.Expr.is_not_null": [[406, "polars-expr-is-not-null"]], "polars.Expr.dt.replace_time_zone": [[360, "polars-expr-dt-replace-time-zone"]], "polars.Expr.last": [[411, "polars-expr-last"]], "polars.Expr.dt.with_time_unit": [[371, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.timestamp": [[366, "polars-expr-dt-timestamp"]], "polars.Expr.dt.time": [[365, "polars-expr-dt-time"]], "polars.Expr.lower_bound": [[418, "polars-expr-lower-bound"]], "polars.Expr.dt.to_string": [[367, "polars-expr-dt-to-string"]], "polars.Expr.hash": [[392, "polars-expr-hash"]], "polars.Expr.dt.truncate": [[368, "polars-expr-dt-truncate"]], "polars.Expr.dt.second": [[362, "polars-expr-dt-second"]], "polars.Expr.dt.year": [[372, "polars-expr-dt-year"]], "polars.Expr.is_duplicated": [[398, "polars-expr-is-duplicated"]], "polars.Expr.dt.quarter": [[359, "polars-expr-dt-quarter"]], "polars.Expr.dt.round": [[361, "polars-expr-dt-round"]], "polars.Expr.entropy": [[373, "polars-expr-entropy"]], "polars.Expr.dt.weekday": [[370, "polars-expr-dt-weekday"]], "polars.Expr.is_in": [[401, "polars-expr-is-in"]], "polars.Expr.limit": [[414, "polars-expr-limit"]], "polars.Expr.log1p": [[417, "polars-expr-log1p"]], "polars.Expr.lt": [[419, "polars-expr-lt"]], "polars.Expr.dt.month_end": [[353, "polars-expr-dt-month-end"]], "polars.Expr.dt.month": [[352, "polars-expr-dt-month"]], "polars.Expr.log10": [[416, "polars-expr-log10"]], "polars.Expr.is_not_nan": [[405, "polars-expr-is-not-nan"]], "polars.Expr.dt.offset_by": [[357, "polars-expr-dt-offset-by"]], "polars.Expr.is_between": [[397, "polars-expr-is-between"]], "polars.Expr.is_null": [[407, "polars-expr-is-null"]], "polars.Expr.is_infinite": [[402, "polars-expr-is-infinite"]], "polars.Expr.floordiv": [[388, "polars-expr-floordiv"]], "polars.Expr.log": [[415, "polars-expr-log"]], "polars.Expr.len": [[413, "polars-expr-len"]], "polars.Expr.dt.strftime": [[364, "polars-expr-dt-strftime"]], "polars.Expr.keep_name": [[409, "polars-expr-keep-name"]], "polars.Expr.implode": [[394, "polars-expr-implode"]], "polars.Expr.is_finite": [[399, "polars-expr-is-finite"]], "polars.Expr.kurtosis": [[410, "polars-expr-kurtosis"]], "polars.Expr.is_first": [[400, "polars-expr-is-first"]], "polars.Expr.flatten": [[386, "polars-expr-flatten"]], "polars.Expr.dt.minutes": [[351, "polars-expr-dt-minutes"]], "polars.Expr.forward_fill": [[389, "polars-expr-forward-fill"]], "polars.Expr.fill_nan": [[382, "polars-expr-fill-nan"]], "polars.Expr.is_nan": [[403, "polars-expr-is-nan"]], "polars.Expr.dt.minute": [[350, "polars-expr-dt-minute"]], "polars.Expr.floor": [[387, "polars-expr-floor"]], "polars.Expr.extend_constant": [[381, "polars-expr-extend-constant"]], "polars.Expr.interpolate": [[396, "polars-expr-interpolate"]], "polars.Expr.ge": [[390, "polars-expr-ge"]], "polars.Expr.head": [[393, "polars-expr-head"]], "polars.Expr.dt.week": [[369, "polars-expr-dt-week"]], "polars.Expr.exclude": [[378, "polars-expr-exclude"]], "polars.Expr.gt": [[391, "polars-expr-gt"]], "polars.Expr.dt.month_start": [[354, "polars-expr-dt-month-start"]], "polars.Expr.eq": [[374, "polars-expr-eq"]], "polars.Expr.is_unique": [[408, "polars-expr-is-unique"]], "polars.Expr.dt.seconds": [[363, "polars-expr-dt-seconds"]], "polars.Expr.dt.nanosecond": [[355, "polars-expr-dt-nanosecond"]], "polars.Expr.ewm_mean": [[375, "polars-expr-ewm-mean"]], "polars.Expr.is_not": [[404, "polars-expr-is-not"]], "polars.Expr.ewm_var": [[377, "polars-expr-ewm-var"]], "polars.Expr.exp": [[379, "polars-expr-exp"]], "polars.LazyFrame.cache": [[607, "polars-lazyframe-cache"]], "API reference": [[603, "api-reference"]], "polars.repeat": [[575, "polars-repeat"]], "polars.LazyFrame.fetch": [[617, "polars-lazyframe-fetch"]], "polars.LazyFrame.groupby": [[623, "polars-lazyframe-groupby"]], "Expressions": [[592, "expressions"]], "polars.LazyFrame.fill_null": [[619, "polars-lazyframe-fill-null"]], "polars.LazyFrame.inspect": [[627, "polars-lazyframe-inspect"]], "polars.lit": [[566, "polars-lit"]], "polars.LazyFrame.join": [[629, "polars-lazyframe-join"]], "polars.sum": [[581, "polars-sum"]], "polars.var": [[584, "polars-var"]], "polars.when": [[585, "polars-when"]], "Input/output": [[604, "input-output"]], "CSV": [[604, "csv"]], "Feather/ IPC": [[604, "feather-ipc"]], "Parquet": [[604, "parquet"]], "Database": [[604, "database"]], "JSON": [[604, "json"]], "AVRO": [[604, "avro"]], "Excel": [[604, "excel"]], "Delta Lake": [[604, "delta-lake"]], "Datasets": [[604, "datasets"]], "BatchedCsvReader": [[604, "batchedcsvreader"]], "polars.LazyFrame.clone": [[609, "polars-lazyframe-clone"]], "polars.implode": [[565, "polars-implode"]], "polars.median": [[570, "polars-median"]], "polars.LazyFrame.interpolate": [[628, "polars-lazyframe-interpolate"]], "polars.time": [[583, "polars-time"]], "polars.format": [[561, "polars-format"]], "Functions": [[591, "functions"], [602, "functions"]], "polars.mean": [[569, "polars-mean"]], "polars.min": [[571, "polars-min"]], "polars.LazyFrame.drop_nulls": [[613, "polars-lazyframe-drop-nulls"]], "polars.groups": [[563, "polars-groups"]], "polars.rolling_corr": [[576, "polars-rolling-corr"]], "polars.LazyFrame.head": [[626, "polars-lazyframe-head"]], "polars.fold": [[560, "polars-fold"]], "polars.LazyFrame.explain": [[615, "polars-lazyframe-explain"]], "polars.select": [[578, "polars-select"]], "polars.quantile": [[573, "polars-quantile"]], "polars.LazyFrame.dtypes": [[614, "polars-lazyframe-dtypes"]], "polars.head": [[564, "polars-head"]], "polars.LazyFrame.explode": [[616, "polars-lazyframe-explode"]], "polars.max": [[568, "polars-max"]], "polars.reduce": [[574, "polars-reduce"]], "polars.LazyFrame.fill_nan": [[618, "polars-lazyframe-fill-nan"]], "Meta": [[594, "meta"]], "polars.std": [[579, "polars-std"]], "Operators": [[597, "operators"]], "Conjunction": [[597, "conjunction"]], "Comparison": [[597, "comparison"]], "Numeric": [[597, "numeric"], [257, "numeric"]], "Window": [[601, "window"]], "polars.LazyFrame.drop": [[612, "polars-lazyframe-drop"]], "polars.LazyFrame.filter": [[620, "polars-lazyframe-filter"]], "polars.LazyFrame.from_json": [[622, "polars-lazyframe-from-json"]], "polars.from_epoch": [[562, "polars-from-epoch"]], "polars.n_unique": [[572, "polars-n-unique"]], "polars.struct": [[580, "polars-struct"]], "polars.map": [[567, "polars-map"]], "Columns / names": [[589, "columns-names"]], "Conversion": [[602, "conversion"]], "Eager/Lazy functions": [[602, "eager-lazy-functions"]], "Parallelization": [[602, "parallelization"]], "StringCache": [[602, "stringcache"]], "polars.LazyFrame.bottom_k": [[606, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.columns": [[611, "polars-lazyframe-columns"]], "polars.LazyFrame.groupby_dynamic": [[624, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.first": [[621, "polars-lazyframe-first"]], "polars.LazyFrame.clear": [[608, "polars-lazyframe-clear"]], "polars.LazyFrame.collect": [[610, "polars-lazyframe-collect"]], "polars.rolling_cov": [[577, "polars-rolling-cov"]], "polars.tail": [[582, "polars-tail"]], "polars.LazyFrame.groupby_rolling": [[625, "polars-lazyframe-groupby-rolling"]], "polars.Expr.bottom_k": [[313, "polars-expr-bottom-k"]], "polars.Expr.cast": [[315, "polars-expr-cast"]], "polars.Expr.cumsum": [[328, "polars-expr-cumsum"]], "polars.Expr.dt.hours": [[343, "polars-expr-dt-hours"]], "polars.Expr.dt.microseconds": [[347, "polars-expr-dt-microseconds"]], "polars.Expr.arr.unique": [[306, "polars-expr-arr-unique"]], "polars.Expr.clip": [[318, "polars-expr-clip"]], "polars.Expr.dt.cast_time_unit": [[334, "polars-expr-dt-cast-time-unit"]], "polars.Expr.arr.sum": [[302, "polars-expr-arr-sum"]], "polars.Expr.dt.days": [[340, "polars-expr-dt-days"]], "polars.Expr.dt.milliseconds": [[349, "polars-expr-dt-milliseconds"]], "polars.Expr.arr.head": [[291, "polars-expr-arr-head"]], "polars.Expr.arr.tail": [[303, "polars-expr-arr-tail"]], "polars.Expr.count": [[323, "polars-expr-count"]], "polars.Expr.arr.sort": [[301, "polars-expr-arr-sort"]], "polars.Expr.cummax": [[325, "polars-expr-cummax"]], "polars.Expr.dt.microsecond": [[346, "polars-expr-dt-microsecond"]], "polars.Expr.arr.get": [[290, "polars-expr-arr-get"]], "polars.Expr.arr.take": [[304, "polars-expr-arr-take"]], "polars.Expr.dt.is_leap_year": [[344, "polars-expr-dt-is-leap-year"]], "polars.Expr.arr.arg_min": [[282, "polars-expr-arr-arg-min"]], "polars.Expr.arr.contains": [[284, "polars-expr-arr-contains"]], "polars.Expr.dot": [[331, "polars-expr-dot"]], "polars.Expr.arr.last": [[293, "polars-expr-arr-last"]], "polars.Expr.bin.ends_with": [[311, "polars-expr-bin-ends-with"]], "polars.Expr.clip_max": [[319, "polars-expr-clip-max"]], "polars.Expr.bin.contains": [[308, "polars-expr-bin-contains"]], "polars.Expr.arg_unique": [[280, "polars-expr-arg-unique"]], "polars.Expr.arr.concat": [[283, "polars-expr-arr-concat"]], "polars.Expr.arr.explode": [[288, "polars-expr-arr-explode"]], "polars.Expr.cumcount": [[324, "polars-expr-cumcount"]], "polars.Expr.bin.decode": [[309, "polars-expr-bin-decode"]], "polars.Expr.bin.starts_with": [[312, "polars-expr-bin-starts-with"]], "polars.Expr.cache": [[314, "polars-expr-cache"]], "polars.Expr.drop_nulls": [[333, "polars-expr-drop-nulls"]], "polars.Expr.arr.diff": [[286, "polars-expr-arr-diff"]], "polars.Expr.arr.min": [[297, "polars-expr-arr-min"]], "polars.Expr.cos": [[321, "polars-expr-cos"]], "polars.Expr.arr.max": [[295, "polars-expr-arr-max"]], "polars.Expr.cummin": [[326, "polars-expr-cummin"]], "polars.Expr.dt.datetime": [[338, "polars-expr-dt-datetime"]], "polars.Expr.backward_fill": [[307, "polars-expr-backward-fill"]], "polars.Expr.arr.lengths": [[294, "polars-expr-arr-lengths"]], "polars.Expr.clip_min": [[320, "polars-expr-clip-min"]], "polars.Expr.dt.date": [[337, "polars-expr-dt-date"]], "polars.Expr.arr.join": [[292, "polars-expr-arr-join"]], "polars.Expr.arr.first": [[289, "polars-expr-arr-first"]], "polars.Expr.cumprod": [[327, "polars-expr-cumprod"]], "polars.Expr.cat.set_ordering": [[316, "polars-expr-cat-set-ordering"]], "polars.Expr.arr.reverse": [[298, "polars-expr-arr-reverse"]], "polars.Expr.arr.to_struct": [[305, "polars-expr-arr-to-struct"]], "polars.Expr.cosh": [[322, "polars-expr-cosh"]], "polars.Expr.arr.shift": [[299, "polars-expr-arr-shift"]], "polars.Expr.cumulative_eval": [[329, "polars-expr-cumulative-eval"]], "polars.Expr.dt.hour": [[342, "polars-expr-dt-hour"]], "polars.Expr.arr.count_match": [[285, "polars-expr-arr-count-match"]], "polars.Expr.dt.convert_time_zone": [[336, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.combine": [[335, "polars-expr-dt-combine"]], "polars.Expr.dt.epoch": [[341, "polars-expr-dt-epoch"]], "polars.Expr.bin.encode": [[310, "polars-expr-bin-encode"]], "polars.Expr.dt.day": [[339, "polars-expr-dt-day"]], "polars.Expr.diff": [[330, "polars-expr-diff"]], "polars.Expr.arr.slice": [[300, "polars-expr-arr-slice"]], "polars.Expr.arr.mean": [[296, "polars-expr-arr-mean"]], "polars.Expr.dt.millisecond": [[348, "polars-expr-dt-millisecond"]], "polars.Expr.arr.arg_max": [[281, "polars-expr-arr-arg-max"]], "polars.Expr.arr.eval": [[287, "polars-expr-arr-eval"]], "polars.Expr.drop_nans": [[332, "polars-expr-drop-nans"]], "polars.Expr.dt.iso_year": [[345, "polars-expr-dt-iso-year"]], "polars.Expr.ceil": [[317, "polars-expr-ceil"]], "polars.DataFrame.insert_at_idx": [[165, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.hstack": [[164, "polars-dataframe-hstack"]], "polars.DataFrame.rename": [[192, "polars-dataframe-rename"]], "polars.DataFrame.iter_slices": [[172, "polars-dataframe-iter-slices"]], "polars.DataFrame.median": [[179, "polars-dataframe-median"]], "polars.DataFrame.pivot": [[188, "polars-dataframe-pivot"]], "polars.DataFrame.n_unique": [[184, "polars-dataframe-n-unique"]], "polars.DataFrame.pipe": [[187, "polars-dataframe-pipe"]], "polars.DataFrame.shift_and_fill": [[204, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.fold": [[153, "polars-dataframe-fold"]], "polars.DataFrame.fill_nan": [[149, "polars-dataframe-fill-nan"]], "polars.DataFrame.describe": [[141, "polars-dataframe-describe"]], "polars.DataFrame.limit": [[176, "polars-dataframe-limit"]], "polars.DataFrame.max": [[177, "polars-dataframe-max"]], "polars.DataFrame.explode": [[147, "polars-dataframe-explode"]], "polars.DataFrame.groupby": [[158, "polars-dataframe-groupby"]], "polars.DataFrame.is_duplicated": [[167, "polars-dataframe-is-duplicated"]], "polars.DataFrame.extend": [[148, "polars-dataframe-extend"]], "polars.DataFrame.merge_sorted": [[181, "polars-dataframe-merge-sorted"]], "polars.DataFrame.dtypes": [[145, "polars-dataframe-dtypes"]], "polars.DataFrame.schema": [[199, "polars-dataframe-schema"]], "polars.DataFrame.get_column": [[155, "polars-dataframe-get-column"]], "polars.DataFrame.groupby_dynamic": [[159, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.join": [[173, "polars-dataframe-join"]], "polars.DataFrame.drop_in_place": [[143, "polars-dataframe-drop-in-place"]], "polars.DataFrame.product": [[189, "polars-dataframe-product"]], "polars.DataFrame.quantile": [[190, "polars-dataframe-quantile"]], "polars.DataFrame.partition_by": [[186, "polars-dataframe-partition-by"]], "polars.DataFrame.replace": [[193, "polars-dataframe-replace"]], "polars.DataFrame.set_sorted": [[201, "polars-dataframe-set-sorted"]], "polars.DataFrame.shape": [[202, "polars-dataframe-shape"]], "polars.DataFrame.slice": [[206, "polars-dataframe-slice"]], "polars.DataFrame.head": [[162, "polars-dataframe-head"]], "polars.DataFrame.sum": [[209, "polars-dataframe-sum"]], "polars.DataFrame.height": [[163, "polars-dataframe-height"]], "polars.DataFrame.n_chunks": [[183, "polars-dataframe-n-chunks"]], "polars.DataFrame.estimated_size": [[146, "polars-dataframe-estimated-size"]], "polars.DataFrame.is_unique": [[169, "polars-dataframe-is-unique"]], "polars.DataFrame.groupby_rolling": [[160, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.row": [[196, "polars-dataframe-row"]], "polars.DataFrame.lazy": [[175, "polars-dataframe-lazy"]], "polars.DataFrame.shift": [[203, "polars-dataframe-shift"]], "polars.DataFrame.glimpse": [[157, "polars-dataframe-glimpse"]], "polars.DataFrame.sort": [[207, "polars-dataframe-sort"]], "polars.DataFrame.replace_at_idx": [[194, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.hash_rows": [[161, "polars-dataframe-hash-rows"]], "polars.DataFrame.reverse": [[195, "polars-dataframe-reverse"]], "polars.DataFrame.mean": [[178, "polars-dataframe-mean"]], "polars.DataFrame.rows": [[197, "polars-dataframe-rows"]], "polars.DataFrame.std": [[208, "polars-dataframe-std"]], "polars.DataFrame.find_idx_by_name": [[152, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.item": [[170, "polars-dataframe-item"]], "polars.DataFrame.drop": [[142, "polars-dataframe-drop"]], "polars.DataFrame.fill_null": [[150, "polars-dataframe-fill-null"]], "polars.DataFrame.drop_nulls": [[144, "polars-dataframe-drop-nulls"]], "polars.DataFrame.get_columns": [[156, "polars-dataframe-get-columns"]], "polars.DataFrame.melt": [[180, "polars-dataframe-melt"]], "polars.DataFrame.null_count": [[185, "polars-dataframe-null-count"]], "polars.DataFrame.sample": [[198, "polars-dataframe-sample"]], "polars.DataFrame.join_asof": [[174, "polars-dataframe-join-asof"]], "polars.DataFrame.min": [[182, "polars-dataframe-min"]], "polars.DataFrame.select": [[200, "polars-dataframe-select"]], "polars.DataFrame.corr": [[140, "polars-dataframe-corr"]], "polars.DataFrame.frame_equal": [[154, "polars-dataframe-frame-equal"]], "polars.DataFrame.interpolate": [[166, "polars-dataframe-interpolate"]], "polars.DataFrame.iter_rows": [[171, "polars-dataframe-iter-rows"]], "polars.DataFrame.shrink_to_fit": [[205, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.filter": [[151, "polars-dataframe-filter"]], "polars.DataFrame.rechunk": [[191, "polars-dataframe-rechunk"]], "polars.DataFrame.is_empty": [[168, "polars-dataframe-is-empty"]], "polars.dataframe.groupby.GroupBy.n_unique": [[245, "polars-dataframe-groupby-groupby-n-unique"]], "polars.DataFrame.to_numpy": [[217, "polars-dataframe-to-numpy"]], "polars.dataframe.groupby.GroupBy.min": [[244, "polars-dataframe-groupby-groupby-min"]], "polars.dataframe.groupby.GroupBy.apply": [[236, "polars-dataframe-groupby-groupby-apply"]], "polars.DataFrame.width": [[230, "polars-dataframe-width"]], "polars.Expr.add": [[261, "polars-expr-add"]], "polars.Expr.and_": [[265, "polars-expr-and"]], "polars.Expr.arg_max": [[276, "polars-expr-arg-max"]], "polars.DataFrame.upsample": [[227, "polars-dataframe-upsample"]], "polars.DataFrame.transpose": [[222, "polars-dataframe-transpose"]], "polars.Expr.arg_min": [[277, "polars-expr-arg-min"]], "polars.DataFrame.top_k": [[221, "polars-dataframe-top-k"]], "polars.Expr.arg_sort": [[278, "polars-expr-arg-sort"]], "polars.DataFrame.to_dict": [[213, "polars-dataframe-to-dict"]], "polars.Expr.arctan": [[274, "polars-expr-arctan"]], "polars.DataFrame.to_dummies": [[215, "polars-dataframe-to-dummies"]], "polars.dataframe.groupby.GroupBy.__iter__": [[233, "polars-dataframe-groupby-groupby-iter"]], "polars.DataFrame.unstack": [[225, "polars-dataframe-unstack"]], "polars.dataframe.groupby.GroupBy.sum": [[247, "polars-dataframe-groupby-groupby-sum"]], "polars.Expr.arg_true": [[279, "polars-expr-arg-true"]], "polars.DataFrame.to_arrow": [[212, "polars-dataframe-to-arrow"]], "polars.dataframe.groupby.GroupBy.max": [[241, "polars-dataframe-groupby-groupby-max"]], "polars.Expr.arccos": [[270, "polars-expr-arccos"]], "polars.dataframe.groupby.GroupBy.quantile": [[246, "polars-dataframe-groupby-groupby-quantile"]], "polars.Expr.abs": [[260, "polars-expr-abs"]], "polars.DataFrame.to_init_repr": [[216, "polars-dataframe-to-init-repr"]], "polars.DataFrame.var": [[228, "polars-dataframe-var"]], "polars.Expr.apply": [[268, "polars-expr-apply"]], "polars.dataframe.groupby.GroupBy.agg": [[234, "polars-dataframe-groupby-groupby-agg"]], "Exceptions": [[258, "exceptions"]], "polars.Expr.arccosh": [[271, "polars-expr-arccosh"]], "polars.DataFrame.to_pandas": [[218, "polars-dataframe-to-pandas"]], "polars.Expr.alias": [[263, "polars-expr-alias"]], "polars.dataframe.groupby.GroupBy.median": [[243, "polars-dataframe-groupby-groupby-median"]], "polars.DataFrame.update": [[226, "polars-dataframe-update"]], "polars.DataFrame.with_row_count": [[232, "polars-dataframe-with-row-count"]], "polars.dataframe.groupby.GroupBy.last": [[240, "polars-dataframe-groupby-groupby-last"]], "polars.Expr.agg_groups": [[262, "polars-expr-agg-groups"]], "polars.Expr.all": [[264, "polars-expr-all"]], "polars.Expr.any": [[266, "polars-expr-any"]], "polars.dataframe.groupby.GroupBy.all": [[235, "polars-dataframe-groupby-groupby-all"]], "polars.DataFrame.tail": [[210, "polars-dataframe-tail"]], "polars.Expr.approx_unique": [[269, "polars-expr-approx-unique"]], "polars.DataFrame.to_series": [[219, "polars-dataframe-to-series"]], "polars.DataFrame.take_every": [[211, "polars-dataframe-take-every"]], "polars.dataframe.groupby.GroupBy.head": [[239, "polars-dataframe-groupby-groupby-head"]], "polars.DataFrame.to_dicts": [[214, "polars-dataframe-to-dicts"]], "polars.dataframe.groupby.GroupBy.mean": [[242, "polars-dataframe-groupby-groupby-mean"]], "polars.Expr.arcsinh": [[273, "polars-expr-arcsinh"]], "polars.dataframe.groupby.GroupBy.tail": [[248, "polars-dataframe-groupby-groupby-tail"]], "polars.dataframe.groupby.GroupBy.count": [[237, "polars-dataframe-groupby-groupby-count"]], "polars.dataframe.groupby.GroupBy.first": [[238, "polars-dataframe-groupby-groupby-first"]], "polars.Expr.append": [[267, "polars-expr-append"]], "DataFrame": [[254, "dataframe"]], "polars.Expr.arctanh": [[275, "polars-expr-arctanh"]], "Data types": [[257, "data-types"]], "Nested": [[257, "nested"]], "Other": [[257, "other"]], "polars.DataFrame.with_columns": [[231, "polars-dataframe-with-columns"]], "polars.DataFrame.to_struct": [[220, "polars-dataframe-to-struct"]], "polars.DataFrame.unique": [[223, "polars-dataframe-unique"]], "polars.DataFrame.unnest": [[224, "polars-dataframe-unnest"]], "polars.Expr.arcsin": [[272, "polars-expr-arcsin"]], "polars.DataFrame.vstack": [[229, "polars-dataframe-vstack"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[8, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[9, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[10, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[13, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[14, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[15, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[16, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[17, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[18, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[23, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[24, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[25, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[26, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[27, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[28, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[29, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[30, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[31, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[32, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[33, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[34, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[35, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[36, "polars.DataType"]], "__init__() (polars.datatype method)": [[36, "polars.DataType.__init__"]], "date (class in polars)": [[37, "polars.Date"]], "__init__() (polars.date method)": [[37, "polars.Date.__init__"]], "datetime (class in polars)": [[38, "polars.Datetime"]], "__init__() (polars.datetime method)": [[38, "polars.Datetime.__init__"]], "decimal (class in polars)": [[39, "polars.Decimal"]], "__init__() (polars.decimal method)": [[39, "polars.Decimal.__init__"]], "duration (class in polars)": [[40, "polars.Duration"]], "__init__() (polars.duration method)": [[40, "polars.Duration.__init__"]], "float32 (class in polars)": [[41, "polars.Float32"]], "__init__() (polars.float32 method)": [[41, "polars.Float32.__init__"]], "float64 (class in polars)": [[42, "polars.Float64"]], "__init__() (polars.float64 method)": [[42, "polars.Float64.__init__"]], "int16 (class in polars)": [[43, "polars.Int16"]], "__init__() (polars.int16 method)": [[43, "polars.Int16.__init__"]], "int32 (class in polars)": [[44, "polars.Int32"]], "__init__() (polars.int32 method)": [[44, "polars.Int32.__init__"]], "int64 (class in polars)": [[45, "polars.Int64"]], "__init__() (polars.int64 method)": [[45, "polars.Int64.__init__"]], "int8 (class in polars)": [[46, "polars.Int8"]], "__init__() (polars.int8 method)": [[46, "polars.Int8.__init__"]], "list (class in polars)": [[47, "polars.List"]], "__init__() (polars.list method)": [[47, "polars.List.__init__"]], "null (class in polars)": [[48, "polars.Null"]], "__init__() (polars.null method)": [[48, "polars.Null.__init__"]], "object (class in polars)": [[49, "polars.Object"]], "__init__() (polars.object method)": [[49, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[50, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[51, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[52, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[53, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[54, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[55, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[56, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[56, "polars.StringCache.__init__"]], "struct (class in polars)": [[57, "polars.Struct"]], "__init__() (polars.struct method)": [[57, "polars.Struct.__init__"]], "time (class in polars)": [[58, "polars.Time"]], "__init__() (polars.time method)": [[58, "polars.Time.__init__"]], "uint16 (class in polars)": [[59, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[59, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[60, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[60, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[61, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[61, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[62, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[62, "polars.UInt8.__init__"]], "unknown (class in polars)": [[63, "polars.Unknown"]], "__init__() (polars.unknown method)": [[63, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[64, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[64, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[65, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[66, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[67, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[68, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[69, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[70, "polars.arg_where"]], "build_info() (in module polars)": [[71, "polars.build_info"]], "collect_all() (in module polars)": [[72, "polars.collect_all"]], "concat() (in module polars)": [[73, "polars.concat"]], "date_range() (in module polars)": [[74, "polars.date_range"]], "enable_string_cache() (in module polars)": [[75, "polars.enable_string_cache"]], "arrowerror": [[76, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[77, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[78, "polars.exceptions.ComputeError"]], "duplicateerror": [[79, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[80, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[81, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[82, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[83, "polars.exceptions.PolarsPanicError"]], "rowserror": [[84, "polars.exceptions.RowsError"]], "schemaerror": [[85, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[86, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[87, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[88, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[89, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[90, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[91, "polars.from_dataframe"]], "from_dict() (in module polars)": [[92, "polars.from_dict"]], "from_dicts() (in module polars)": [[93, "polars.from_dicts"]], "from_numpy() (in module polars)": [[94, "polars.from_numpy"]], "from_pandas() (in module polars)": [[95, "polars.from_pandas"]], "from_records() (in module polars)": [[96, "polars.from_records"]], "from_repr() (in module polars)": [[97, "polars.from_repr"]], "get_index_type() (in module polars)": [[98, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[99, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[100, "polars.ones"]], "read_avro() (in module polars)": [[101, "polars.read_avro"]], "read_csv() (in module polars)": [[102, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[103, "polars.read_csv_batched"]], "read_database() (in module polars)": [[104, "polars.read_database"]], "read_delta() (in module polars)": [[105, "polars.read_delta"]], "read_excel() (in module polars)": [[106, "polars.read_excel"]], "read_ipc() (in module polars)": [[107, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[108, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[109, "polars.read_json"]], "read_ndjson() (in module polars)": [[110, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[111, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[112, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[113, "polars.scan_csv"]], "scan_delta() (in module polars)": [[114, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[115, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[116, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[117, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[118, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[119, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[120, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[121, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[122, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[122, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[123, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[124, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[125, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[126, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[127, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[128, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[129, "polars.threadpool_size"]], "time_range() (in module polars)": [[130, "polars.time_range"]], "zeros() (in module polars)": [[131, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[134, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[135, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[136, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[137, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[138, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[139, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[140, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[141, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[142, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[143, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[144, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[145, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[146, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[147, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[148, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[149, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[150, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[151, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[152, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[153, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[154, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[155, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[156, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[157, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[158, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[159, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[160, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[161, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[162, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[163, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[164, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[165, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[166, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[167, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[168, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[169, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[170, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[171, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[172, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[173, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[174, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[175, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[176, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[177, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[178, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[179, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[180, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[181, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[182, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[183, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[184, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[185, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[186, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[187, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[188, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[189, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[190, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[191, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[192, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[193, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[194, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[195, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[196, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[197, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[198, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[199, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[200, "polars.DataFrame.select"]], "set_sorted() (polars.dataframe method)": [[201, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[202, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[203, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[204, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[205, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[206, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[207, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[208, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[209, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[210, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[211, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[212, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[213, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[214, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[215, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[216, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[217, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[218, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[219, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[220, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[221, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[222, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[223, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[224, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[225, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[226, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[227, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[228, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[229, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[230, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[231, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[232, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[241, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[242, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[243, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[244, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[245, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[246, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[247, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[248, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[260, "polars.Expr.abs"]], "add() (polars.expr method)": [[261, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[262, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[263, "polars.Expr.alias"]], "all() (polars.expr method)": [[264, "polars.Expr.all"]], "and_() (polars.expr method)": [[265, "polars.Expr.and_"]], "any() (polars.expr method)": [[266, "polars.Expr.any"]], "append() (polars.expr method)": [[267, "polars.Expr.append"]], "apply() (polars.expr method)": [[268, "polars.Expr.apply"]], "approx_unique() (polars.expr method)": [[269, "polars.Expr.approx_unique"]], "arccos() (polars.expr method)": [[270, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[271, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[272, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[273, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[274, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[275, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[276, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[277, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[278, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[279, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[280, "polars.Expr.arg_unique"]], "arg_max() (polars.expr.arr method)": [[281, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[282, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[283, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[284, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[285, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[286, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[287, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[288, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[289, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[290, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[291, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[292, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[293, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[294, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[295, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[296, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[297, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[298, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[299, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[300, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[301, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[302, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[303, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[304, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[305, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[306, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[307, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[308, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[309, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[310, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[311, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[312, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[313, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[314, "polars.Expr.cache"]], "cast() (polars.expr method)": [[315, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[316, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[317, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[318, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[319, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[320, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[321, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[322, "polars.Expr.cosh"]], "count() (polars.expr method)": [[323, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[324, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[325, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[326, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[327, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[328, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[329, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[330, "polars.Expr.diff"]], "dot() (polars.expr method)": [[331, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[332, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[333, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[334, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[335, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[336, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[337, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[338, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[339, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[340, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[341, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[342, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[343, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[344, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[345, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[346, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[347, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[348, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[349, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[350, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[351, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[352, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[353, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[354, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[355, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[356, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[357, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[358, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[359, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[360, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[361, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[362, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[363, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[364, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[365, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[366, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[367, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[368, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[369, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[370, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[371, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[372, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[373, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[374, "polars.Expr.eq"]], "ewm_mean() (polars.expr method)": [[375, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[376, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[377, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[378, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[379, "polars.Expr.exp"]], "explode() (polars.expr method)": [[380, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[381, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[382, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[383, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[384, "polars.Expr.filter"]], "first() (polars.expr method)": [[385, "polars.Expr.first"]], "flatten() (polars.expr method)": [[386, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[387, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[388, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[389, "polars.Expr.forward_fill"]], "ge() (polars.expr method)": [[390, "polars.Expr.ge"]], "gt() (polars.expr method)": [[391, "polars.Expr.gt"]], "hash() (polars.expr method)": [[392, "polars.Expr.hash"]], "head() (polars.expr method)": [[393, "polars.Expr.head"]], "implode() (polars.expr method)": [[394, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[395, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[396, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[397, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[398, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[399, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[400, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[401, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[402, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[403, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[404, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[405, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[406, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[407, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[408, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[409, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[410, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[411, "polars.Expr.last"]], "le() (polars.expr method)": [[412, "polars.Expr.le"]], "len() (polars.expr method)": [[413, "polars.Expr.len"]], "limit() (polars.expr method)": [[414, "polars.Expr.limit"]], "log() (polars.expr method)": [[415, "polars.Expr.log"]], "log10() (polars.expr method)": [[416, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[417, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[418, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[419, "polars.Expr.lt"]], "map() (polars.expr method)": [[420, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[421, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[422, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[423, "polars.Expr.max"]], "mean() (polars.expr method)": [[424, "polars.Expr.mean"]], "median() (polars.expr method)": [[425, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[426, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[427, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[428, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[429, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[430, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[431, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[432, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[433, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[434, "polars.Expr.min"]], "mod() (polars.expr method)": [[435, "polars.Expr.mod"]], "mode() (polars.expr method)": [[436, "polars.Expr.mode"]], "mul() (polars.expr method)": [[437, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[438, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[439, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[440, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[441, "polars.Expr.ne"]], "null_count() (polars.expr method)": [[442, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[443, "polars.Expr.or_"]], "over() (polars.expr method)": [[444, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[445, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[446, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[447, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[448, "polars.Expr.prefix"]], "product() (polars.expr method)": [[449, "polars.Expr.product"]], "quantile() (polars.expr method)": [[450, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[451, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[452, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[453, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[454, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[455, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[456, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[457, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[458, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[459, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[460, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[461, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[462, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[463, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[464, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[465, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[466, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[467, "polars.Expr.round"]], "sample() (polars.expr method)": [[468, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[469, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[470, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[471, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[472, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[473, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[474, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[475, "polars.Expr.sign"]], "sin() (polars.expr method)": [[476, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[477, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[478, "polars.Expr.skew"]], "slice() (polars.expr method)": [[479, "polars.Expr.slice"]], "sort() (polars.expr method)": [[480, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[481, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[482, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[483, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[484, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[485, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[486, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[487, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[488, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[489, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[490, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[491, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[492, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[493, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[494, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[495, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[496, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[497, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[498, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[499, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[500, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[501, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[502, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[503, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[504, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[505, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[506, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[507, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[508, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[509, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[510, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[511, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[512, "polars.Expr.str.to_datetime"]], "to_lowercase() (polars.expr.str method)": [[513, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[514, "polars.Expr.str.to_time"]], "to_uppercase() (polars.expr.str method)": [[515, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[516, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[517, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[518, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[519, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[520, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[521, "polars.Expr.sum"]], "tail() (polars.expr method)": [[522, "polars.Expr.tail"]], "take() (polars.expr method)": [[523, "polars.Expr.take"]], "take_every() (polars.expr method)": [[524, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[525, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[526, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[527, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[528, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[529, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[530, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[531, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[532, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[533, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[534, "polars.Expr.var"]], "where() (polars.expr method)": [[535, "polars.Expr.where"]], "xor() (polars.expr method)": [[536, "polars.Expr.xor"]], "all() (in module polars)": [[537, "polars.all"]], "any() (in module polars)": [[538, "polars.any"]], "apply() (in module polars)": [[539, "polars.apply"]], "approx_unique() (in module polars)": [[540, "polars.approx_unique"]], "arange() (in module polars)": [[541, "polars.arange"]], "arg_sort_by() (in module polars)": [[542, "polars.arg_sort_by"]], "avg() (in module polars)": [[543, "polars.avg"]], "coalesce() (in module polars)": [[544, "polars.coalesce"]], "col() (in module polars)": [[545, "polars.col"]], "concat_list() (in module polars)": [[546, "polars.concat_list"]], "concat_str() (in module polars)": [[547, "polars.concat_str"]], "corr() (in module polars)": [[548, "polars.corr"]], "count() (in module polars)": [[549, "polars.count"]], "cov() (in module polars)": [[550, "polars.cov"]], "cumfold() (in module polars)": [[551, "polars.cumfold"]], "cumreduce() (in module polars)": [[552, "polars.cumreduce"]], "cumsum() (in module polars)": [[553, "polars.cumsum"]], "date() (in module polars)": [[554, "polars.date"]], "datetime() (in module polars)": [[555, "polars.datetime"]], "duration() (in module polars)": [[556, "polars.duration"]], "element() (in module polars)": [[557, "polars.element"]], "exclude() (in module polars)": [[558, "polars.exclude"]], "first() (in module polars)": [[559, "polars.first"]], "fold() (in module polars)": [[560, "polars.fold"]], "format() (in module polars)": [[561, "polars.format"]], "from_epoch() (in module polars)": [[562, "polars.from_epoch"]], "groups() (in module polars)": [[563, "polars.groups"]], "head() (in module polars)": [[564, "polars.head"]], "implode() (in module polars)": [[565, "polars.implode"]], "lit() (in module polars)": [[566, "polars.lit"]], "map() (in module polars)": [[567, "polars.map"]], "max() (in module polars)": [[568, "polars.max"]], "mean() (in module polars)": [[569, "polars.mean"]], "median() (in module polars)": [[570, "polars.median"]], "min() (in module polars)": [[571, "polars.min"]], "n_unique() (in module polars)": [[572, "polars.n_unique"]], "quantile() (in module polars)": [[573, "polars.quantile"]], "reduce() (in module polars)": [[574, "polars.reduce"]], "repeat() (in module polars)": [[575, "polars.repeat"]], "rolling_corr() (in module polars)": [[576, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[577, "polars.rolling_cov"]], "select() (in module polars)": [[578, "polars.select"]], "std() (in module polars)": [[579, "polars.std"]], "struct() (in module polars)": [[580, "polars.struct"]], "sum() (in module polars)": [[581, "polars.sum"]], "tail() (in module polars)": [[582, "polars.tail"]], "time() (in module polars)": [[583, "polars.time"]], "var() (in module polars)": [[584, "polars.var"]], "when() (in module polars)": [[585, "polars.when"]], "bottom_k() (polars.lazyframe method)": [[606, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[607, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[608, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[609, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[610, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[611, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[612, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[613, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[614, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[615, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[616, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[617, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[618, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[619, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[620, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[621, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[622, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[623, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[624, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[625, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[626, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[627, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[628, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[629, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[630, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[631, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[632, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[633, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[634, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[635, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[636, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[637, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[638, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[639, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[640, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[641, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[642, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[643, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[644, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[645, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[646, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[647, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[648, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[649, "polars.LazyFrame.select"]], "set_sorted() (polars.lazyframe method)": [[650, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[651, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[652, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[653, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[654, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[655, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[656, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[657, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[658, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[659, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[660, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[661, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[662, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[663, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[664, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[665, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[666, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[667, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[668, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[669, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[670, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[671, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[672, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[673, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[674, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[675, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[676, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[677, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[678, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[679, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[680, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[681, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[682, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[683, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[684, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[685, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[686, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[694, "polars.Series.abs"]], "alias() (polars.series method)": [[695, "polars.Series.alias"]], "all() (polars.series method)": [[696, "polars.Series.all"]], "any() (polars.series method)": [[697, "polars.Series.any"]], "append() (polars.series method)": [[698, "polars.Series.append"]], "apply() (polars.series method)": [[699, "polars.Series.apply"]], "arccos() (polars.series method)": [[700, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[701, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[702, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[703, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[704, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[705, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[706, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[707, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[708, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[709, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[710, "polars.Series.arg_unique"]], "arr (polars.series attribute)": [[711, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[712, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[713, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[714, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[715, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[716, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[717, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[718, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[719, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[720, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[721, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[722, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[723, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[724, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[725, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[726, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[727, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[728, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[729, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[730, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[731, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[732, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[733, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[734, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[735, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[736, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[737, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[738, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[739, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[740, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[741, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[742, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[743, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[744, "polars.Series.cast"]], "cat (polars.series attribute)": [[745, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[746, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[747, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[748, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[749, "polars.Series.clear"]], "clip() (polars.series method)": [[750, "polars.Series.clip"]], "clip_max() (polars.series method)": [[751, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[752, "polars.Series.clip_min"]], "clone() (polars.series method)": [[753, "polars.Series.clone"]], "cos() (polars.series method)": [[754, "polars.Series.cos"]], "cosh() (polars.series method)": [[755, "polars.Series.cosh"]], "cummax() (polars.series method)": [[756, "polars.Series.cummax"]], "cummin() (polars.series method)": [[757, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[758, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[759, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[760, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[761, "polars.Series.cut"]], "describe() (polars.series method)": [[762, "polars.Series.describe"]], "diff() (polars.series method)": [[763, "polars.Series.diff"]], "dot() (polars.series method)": [[764, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[765, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[766, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[767, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[768, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[769, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[770, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[771, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[772, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[773, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[774, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[775, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[776, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[777, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[778, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[779, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[780, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[781, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[782, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[783, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[784, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[785, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[786, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[787, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[788, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[789, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[790, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[791, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[792, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[793, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[794, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[795, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[796, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[797, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[798, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[799, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[800, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[801, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[802, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[803, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[804, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[805, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[806, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[807, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[808, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[809, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[810, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[811, "polars.Series.dtype"]], "entropy() (polars.series method)": [[812, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[813, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[814, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[815, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[816, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[817, "polars.Series.exp"]], "explode() (polars.series method)": [[818, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[819, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[820, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[821, "polars.Series.fill_null"]], "filter() (polars.series method)": [[822, "polars.Series.filter"]], "flags (polars.series attribute)": [[823, "polars.Series.flags"]], "floor() (polars.series method)": [[824, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[825, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[826, "polars.Series.has_validity"]], "hash() (polars.series method)": [[827, "polars.Series.hash"]], "head() (polars.series method)": [[828, "polars.Series.head"]], "hist() (polars.series method)": [[829, "polars.Series.hist"]], "implode() (polars.series method)": [[830, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[831, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[832, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[833, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[834, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[835, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[836, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[837, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[838, "polars.Series.is_first"]], "is_float() (polars.series method)": [[839, "polars.Series.is_float"]], "is_in() (polars.series method)": [[840, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[841, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[842, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[843, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[844, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[845, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[846, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[847, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[848, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[849, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[850, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[851, "polars.Series.is_utf8"]], "item() (polars.series method)": [[852, "polars.Series.item"]], "kurtosis() (polars.series method)": [[853, "polars.Series.kurtosis"]], "len() (polars.series method)": [[854, "polars.Series.len"]], "limit() (polars.series method)": [[855, "polars.Series.limit"]], "log() (polars.series method)": [[856, "polars.Series.log"]], "log10() (polars.series method)": [[857, "polars.Series.log10"]], "log1p() (polars.series method)": [[858, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[859, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[860, "polars.Series.map_dict"]], "max() (polars.series method)": [[861, "polars.Series.max"]], "mean() (polars.series method)": [[862, "polars.Series.mean"]], "median() (polars.series method)": [[863, "polars.Series.median"]], "min() (polars.series method)": [[864, "polars.Series.min"]], "mode() (polars.series method)": [[865, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[866, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[867, "polars.Series.n_unique"]], "name (polars.series attribute)": [[868, "polars.Series.name"]], "nan_max() (polars.series method)": [[869, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[870, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[871, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[872, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[873, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[874, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[875, "polars.Series.peak_min"]], "product() (polars.series method)": [[876, "polars.Series.product"]], "qcut() (polars.series method)": [[877, "polars.Series.qcut"]], "quantile() (polars.series method)": [[878, "polars.Series.quantile"]], "rank() (polars.series method)": [[879, "polars.Series.rank"]], "rechunk() (polars.series method)": [[880, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[881, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[882, "polars.Series.rename"]], "reshape() (polars.series method)": [[883, "polars.Series.reshape"]], "reverse() (polars.series method)": [[884, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[885, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[886, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[887, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[888, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[889, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[890, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[891, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[892, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[893, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[894, "polars.Series.rolling_var"]], "round() (polars.series method)": [[895, "polars.Series.round"]], "sample() (polars.series method)": [[896, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[897, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[898, "polars.Series.series_equal"]], "set() (polars.series method)": [[899, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[900, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[901, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[902, "polars.Series.shape"]], "shift() (polars.series method)": [[903, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[904, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[905, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[906, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[907, "polars.Series.shuffle"]], "sign() (polars.series method)": [[908, "polars.Series.sign"]], "sin() (polars.series method)": [[909, "polars.Series.sin"]], "sinh() (polars.series method)": [[910, "polars.Series.sinh"]], "skew() (polars.series method)": [[911, "polars.Series.skew"]], "slice() (polars.series method)": [[912, "polars.Series.slice"]], "sort() (polars.series method)": [[913, "polars.Series.sort"]], "sqrt() (polars.series method)": [[914, "polars.Series.sqrt"]], "std() (polars.series method)": [[915, "polars.Series.std"]], "str (polars.series attribute)": [[916, "polars.Series.str"]], "concat() (polars.series.str method)": [[917, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[918, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[919, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[920, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[921, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[922, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[923, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[924, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[925, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[926, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[927, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[928, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[929, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[930, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[931, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[932, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[933, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[934, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[935, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[936, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[937, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[938, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[939, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[940, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[941, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[942, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[943, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[944, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[945, "polars.Series.str.to_datetime"]], "to_lowercase() (polars.series.str method)": [[946, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[947, "polars.Series.str.to_time"]], "to_uppercase() (polars.series.str method)": [[948, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[949, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[950, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[951, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[952, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[953, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[954, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[955, "polars.Series.sum"]], "tail() (polars.series method)": [[956, "polars.Series.tail"]], "take() (polars.series method)": [[957, "polars.Series.take"]], "take_every() (polars.series method)": [[958, "polars.Series.take_every"]], "tan() (polars.series method)": [[959, "polars.Series.tan"]], "tanh() (polars.series method)": [[960, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[961, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[962, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[963, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[964, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[965, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[966, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[967, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[968, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[969, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[970, "polars.Series.top_k"]], "unique() (polars.series method)": [[971, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[972, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[973, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[974, "polars.Series.value_counts"]], "var() (polars.series method)": [[975, "polars.Series.var"]], "view() (polars.series method)": [[976, "polars.Series.view"]], "zip_with() (polars.series method)": [[977, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[992, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[992, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[992, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[992, "polars.SQLContext.__init__"]]}})