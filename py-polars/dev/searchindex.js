Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_dummies", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_dummies", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.any", "polars.apply", "polars.approx_unique", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 87, 97, 115, 127, 130, 131, 231, 249, 263, 577, 657, 682, 961], "refer": [0, 29, 99, 100, 103, 136, 249, 356, 413, 440, 499, 577, 783, 859, 923, 961], "input": [0, 60, 89, 99, 100, 103, 131, 132, 143, 154, 182, 196, 202, 216, 226, 229, 249, 256, 263, 369, 388, 407, 420, 433, 470, 522, 525, 528, 530, 531, 532, 533, 544, 545, 553, 554, 557, 566, 577, 588, 591, 601, 608, 633, 640, 645, 651, 655, 673, 682, 813, 837, 838, 840, 961], "output": [0, 25, 27, 29, 30, 31, 32, 70, 103, 131, 155, 156, 167, 177, 184, 193, 196, 222, 226, 249, 258, 263, 411, 412, 419, 519, 525, 534, 553, 564, 577, 588, 609, 610, 619, 623, 624, 633, 651, 654, 657, 673, 682, 950, 961], "seri": [0, 1, 22, 61, 62, 63, 64, 65, 68, 69, 70, 86, 88, 91, 93, 97, 118, 119, 122, 127, 131, 139, 147, 149, 151, 152, 157, 160, 161, 163, 165, 173, 174, 178, 189, 190, 204, 208, 211, 214, 215, 230, 249, 262, 263, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 278, 283, 286, 287, 294, 295, 298, 299, 300, 303, 310, 311, 315, 316, 328, 330, 334, 337, 341, 343, 345, 348, 352, 353, 355, 359, 362, 371, 372, 378, 386, 388, 390, 391, 392, 393, 394, 396, 397, 398, 409, 411, 436, 440, 441, 442, 443, 444, 446, 458, 459, 462, 465, 466, 473, 488, 493, 499, 503, 509, 510, 511, 512, 518, 525, 526, 527, 529, 535, 537, 538, 539, 545, 546, 548, 550, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 565, 566, 567, 568, 569, 577, 588, 605, 651, 656, 673, 955, 957, 960, 962, 965, 966, 967, 969], "datafram": [0, 1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 49, 51, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 112, 113, 114, 117, 119, 120, 247, 248, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 296, 297, 300, 301, 302, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 354, 355, 356, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 569, 570, 577, 588, 595, 597, 601, 602, 605, 606, 609, 610, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 627, 628, 631, 633, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 681, 682, 701, 719, 729, 744, 745, 779, 809, 857, 904, 907, 919, 920, 930, 939, 940, 950, 961, 969], "lazyfram": [0, 1, 48, 50, 60, 61, 62, 63, 64, 67, 68, 110, 111, 112, 113, 114, 115, 117, 122, 171, 183, 249, 300, 375, 577, 588, 672, 968, 969], "express": [0, 65, 67, 70, 119, 122, 124, 131, 132, 143, 145, 147, 154, 180, 184, 192, 196, 202, 216, 226, 229, 231, 249, 256, 258, 259, 260, 262, 263, 274, 280, 282, 300, 312, 313, 314, 317, 323, 325, 329, 349, 365, 369, 372, 375, 379, 381, 382, 386, 388, 392, 395, 400, 403, 404, 409, 410, 411, 412, 413, 417, 418, 419, 420, 424, 426, 430, 432, 433, 435, 436, 437, 438, 443, 457, 458, 459, 461, 463, 468, 470, 474, 482, 483, 499, 505, 506, 509, 515, 516, 518, 521, 522, 527, 528, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 552, 553, 554, 557, 559, 561, 562, 563, 564, 566, 567, 570, 576, 588, 591, 595, 600, 601, 602, 605, 608, 627, 633, 635, 636, 637, 638, 640, 645, 651, 652, 655, 657, 673, 682, 699, 701, 733, 734, 735, 743, 752, 776, 799, 813, 877, 884, 898, 906, 907, 961], "extend": [0, 89, 249, 372, 577, 588, 681, 799, 961], "function": [0, 29, 61, 62, 63, 64, 69, 87, 93, 99, 100, 103, 110, 120, 131, 136, 142, 149, 176, 183, 184, 213, 217, 220, 221, 231, 249, 259, 263, 300, 323, 353, 366, 367, 368, 411, 412, 433, 435, 446, 447, 448, 449, 450, 451, 453, 454, 455, 467, 513, 523, 524, 525, 537, 538, 545, 546, 548, 553, 561, 577, 588, 619, 623, 626, 648, 657, 673, 682, 719, 743, 780, 793, 794, 795, 796, 809, 857, 865, 879, 880, 886, 891, 944, 961, 969], "data": [0, 1, 5, 15, 18, 28, 29, 30, 34, 51, 60, 61, 63, 68, 71, 76, 77, 81, 83, 86, 87, 88, 89, 90, 91, 92, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 117, 118, 120, 121, 122, 124, 130, 131, 133, 134, 144, 153, 154, 155, 167, 168, 169, 171, 182, 183, 187, 192, 193, 200, 207, 212, 213, 226, 228, 247, 249, 260, 263, 301, 309, 328, 354, 362, 365, 381, 382, 387, 394, 396, 403, 410, 430, 432, 440, 456, 457, 467, 499, 513, 515, 516, 522, 531, 552, 564, 577, 588, 593, 594, 602, 608, 609, 626, 637, 638, 651, 673, 681, 682, 720, 727, 732, 736, 749, 751, 789, 809, 859, 875, 876, 886, 891, 923, 942, 943, 944, 945, 947, 952, 960, 961], "type": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 67, 70, 76, 86, 88, 89, 90, 91, 92, 93, 97, 99, 100, 102, 103, 110, 111, 116, 117, 118, 121, 122, 127, 131, 149, 153, 155, 156, 157, 168, 207, 212, 213, 215, 218, 249, 263, 287, 300, 309, 310, 312, 313, 314, 330, 334, 337, 341, 343, 345, 348, 352, 355, 369, 383, 390, 392, 393, 413, 443, 494, 495, 496, 499, 513, 525, 531, 540, 541, 542, 544, 545, 552, 577, 588, 595, 600, 602, 609, 610, 627, 636, 637, 638, 646, 673, 706, 719, 727, 729, 733, 734, 735, 753, 757, 760, 767, 769, 772, 775, 779, 782, 807, 886, 918, 919, 920, 942, 943, 945, 953, 961], "config": [0, 60, 196, 226, 249, 542, 588, 633, 651, 673], "except": [0, 158, 170, 172, 205, 249, 544, 588, 615, 673, 808, 835, 932, 943, 952, 961], "test": [0, 103, 588, 611, 618, 673], "util": [0, 93, 548, 588, 602, 673], "sql": [0, 28, 48, 101, 169, 249, 588], "These": [1, 29, 128, 249, 359, 576, 786], "allow": [1, 29, 51, 76, 87, 110, 112, 113, 114, 115, 122, 124, 130, 167, 170, 171, 192, 193, 194, 213, 218, 228, 249, 349, 442, 457, 499, 577, 614, 615, 619, 623, 637, 638, 646, 652, 673, 776, 861, 876, 878, 923, 944, 961, 969], "you": [1, 12, 29, 33, 60, 86, 88, 89, 90, 92, 97, 99, 100, 103, 104, 108, 110, 117, 127, 128, 131, 140, 144, 167, 170, 180, 192, 193, 209, 212, 217, 231, 249, 263, 282, 312, 313, 314, 352, 375, 388, 411, 413, 442, 447, 448, 449, 450, 451, 453, 454, 455, 484, 487, 499, 527, 537, 546, 577, 595, 598, 611, 615, 618, 636, 638, 657, 673, 681, 682, 701, 733, 734, 735, 779, 813, 861, 908, 911, 923, 943, 952, 961, 969], "regist": [1, 61, 62, 63, 64, 123, 125], "custom": [1, 29, 61, 62, 63, 64, 123, 125, 131, 231, 249, 263, 300, 411, 446, 525, 553, 577, 619, 657, 673, 682, 719, 865, 961, 969], "dedic": [1, 87, 167, 193, 249], "namespac": [1, 248, 576, 588, 672], "underli": [1, 72, 79, 86, 88, 89, 90, 92, 108, 119, 122, 124, 144, 167, 168, 193, 207, 249, 304, 328, 329, 333, 336, 338, 339, 340, 342, 344, 346, 347, 350, 351, 352, 354, 360, 361, 362, 363, 442, 456, 474, 476, 577, 673, 681, 722, 751, 752, 756, 759, 761, 762, 766, 768, 771, 773, 774, 777, 778, 779, 781, 787, 788, 789, 790, 861, 875, 886, 898, 900, 938, 943, 961], "polar": [1, 249, 576, 577, 582, 588, 673, 961, 968], "class": [1, 2, 3, 4, 14, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 91, 119, 120, 212, 213, 249, 577, 582, 588, 673, 942, 943, 961, 968], "without": [1, 5, 69, 93, 102, 105, 109, 111, 115, 220, 221, 249, 263, 323, 353, 447, 448, 449, 450, 451, 453, 454, 455, 563, 577, 648, 673, 743, 749, 780, 809, 857, 961], "requir": [1, 29, 33, 91, 117, 118, 136, 192, 213, 249, 301, 366, 367, 368, 462, 499, 516, 577, 638, 673, 720, 794, 795, 796, 885, 923, 943, 944, 947, 961], "subclass": [1, 249], "mixin": 1, "expr": [1, 60, 61, 62, 63, 64, 65, 68, 70, 143, 145, 147, 169, 170, 180, 184, 192, 196, 226, 249, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 577, 578, 579, 582, 583, 584, 585, 601, 603, 605, 614, 615, 628, 633, 635, 651, 673, 699, 701, 743, 752, 800, 884, 898, 902, 921, 933, 961], "ar": [1, 5, 10, 14, 17, 25, 29, 33, 51, 70, 71, 78, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 115, 117, 118, 120, 122, 128, 130, 131, 132, 136, 140, 142, 145, 149, 154, 155, 156, 167, 170, 171, 176, 177, 182, 192, 193, 196, 202, 208, 213, 216, 221, 222, 226, 229, 249, 259, 300, 319, 321, 322, 326, 327, 353, 359, 364, 366, 367, 368, 388, 390, 392, 393, 394, 396, 397, 398, 401, 413, 433, 440, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 464, 467, 469, 470, 484, 487, 488, 507, 527, 528, 530, 532, 533, 534, 554, 557, 564, 566, 570, 571, 573, 576, 577, 578, 579, 582, 583, 584, 585, 588, 591, 598, 603, 608, 609, 610, 611, 615, 618, 619, 623, 624, 627, 630, 633, 637, 638, 640, 645, 648, 651, 652, 655, 673, 679, 681, 719, 741, 742, 780, 786, 792, 793, 794, 795, 796, 806, 813, 817, 820, 821, 823, 824, 825, 826, 833, 859, 863, 865, 871, 888, 891, 908, 911, 912, 931, 943, 944, 952, 955, 957, 961, 962, 965, 966, 967, 969], "all": [1, 7, 14, 17, 22, 25, 29, 34, 67, 68, 70, 86, 89, 91, 92, 94, 99, 100, 102, 103, 104, 108, 110, 112, 113, 119, 120, 124, 137, 140, 146, 158, 163, 165, 167, 168, 171, 172, 176, 179, 180, 187, 192, 193, 201, 205, 210, 218, 220, 222, 249, 260, 261, 262, 282, 287, 297, 300, 302, 317, 323, 327, 369, 380, 383, 385, 387, 390, 393, 397, 398, 400, 404, 411, 412, 425, 431, 437, 440, 445, 462, 468, 470, 475, 481, 483, 486, 489, 490, 492, 498, 506, 519, 531, 544, 546, 561, 566, 570, 577, 582, 588, 595, 598, 600, 602, 604, 619, 623, 627, 636, 639, 646, 652, 673, 701, 706, 716, 719, 743, 745, 749, 808, 815, 830, 835, 859, 892, 899, 905, 907, 910, 913, 914, 916, 922, 932, 961, 969], "support": [1, 29, 33, 68, 86, 87, 88, 89, 90, 91, 92, 93, 101, 102, 103, 111, 119, 124, 128, 130, 167, 168, 193, 201, 202, 209, 213, 249, 295, 433, 468, 470, 493, 531, 577, 582, 639, 640, 673, 714, 892, 917, 944, 961], "target": [1, 29, 66, 249, 480, 499, 904, 923], "thi": [1, 5, 7, 12, 25, 27, 29, 31, 33, 37, 50, 51, 60, 67, 68, 69, 71, 86, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 126, 127, 128, 130, 131, 136, 140, 141, 142, 144, 149, 154, 155, 156, 157, 161, 163, 165, 166, 167, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 185, 186, 187, 192, 193, 194, 196, 199, 201, 203, 204, 207, 209, 212, 213, 217, 218, 220, 221, 222, 223, 224, 226, 227, 231, 248, 249, 259, 262, 263, 264, 273, 282, 283, 287, 296, 300, 301, 308, 310, 317, 323, 328, 339, 349, 352, 353, 362, 371, 386, 387, 388, 392, 404, 408, 409, 411, 417, 418, 419, 420, 428, 429, 433, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 454, 455, 457, 459, 461, 462, 463, 468, 469, 470, 485, 486, 491, 492, 498, 499, 502, 514, 516, 517, 518, 519, 523, 524, 526, 527, 532, 535, 537, 539, 545, 546, 548, 563, 567, 577, 588, 589, 592, 595, 598, 600, 602, 608, 609, 610, 612, 615, 619, 623, 624, 627, 630, 633, 635, 636, 637, 638, 639, 646, 648, 651, 652, 653, 654, 657, 672, 673, 681, 682, 691, 701, 702, 706, 715, 720, 726, 729, 743, 749, 751, 752, 762, 776, 779, 780, 789, 793, 798, 805, 806, 809, 814, 819, 820, 822, 827, 829, 831, 832, 834, 839, 841, 842, 843, 844, 846, 847, 849, 850, 852, 856, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 869, 872, 873, 874, 876, 879, 880, 881, 884, 885, 886, 887, 892, 893, 895, 909, 910, 915, 916, 922, 923, 926, 927, 930, 931, 938, 940, 942, 943, 944, 946, 947, 949, 951, 952, 961, 969], "featur": [1, 33, 37, 51, 66, 249], "i": [1, 5, 12, 14, 27, 29, 30, 31, 32, 37, 51, 60, 65, 66, 67, 68, 69, 70, 73, 75, 76, 78, 82, 84, 86, 87, 88, 89, 90, 91, 92, 96, 99, 100, 101, 102, 104, 108, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 124, 126, 130, 131, 140, 142, 150, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 170, 171, 172, 174, 176, 177, 180, 182, 183, 184, 192, 193, 194, 201, 202, 203, 204, 205, 207, 213, 217, 218, 220, 221, 222, 223, 231, 248, 249, 256, 259, 261, 262, 263, 264, 274, 282, 285, 295, 299, 300, 323, 329, 338, 349, 353, 359, 366, 367, 368, 371, 383, 386, 388, 401, 408, 411, 413, 420, 433, 440, 442, 444, 447, 448, 449, 450, 451, 453, 454, 455, 457, 458, 459, 463, 464, 467, 468, 469, 470, 472, 474, 475, 480, 481, 483, 485, 486, 488, 491, 492, 493, 496, 498, 499, 502, 519, 520, 524, 526, 527, 531, 532, 534, 535, 537, 538, 539, 546, 552, 554, 557, 559, 563, 564, 565, 567, 569, 570, 577, 595, 598, 600, 602, 608, 609, 610, 613, 615, 617, 619, 623, 624, 627, 636, 637, 638, 639, 640, 641, 646, 648, 649, 654, 657, 673, 680, 681, 682, 701, 704, 714, 718, 743, 752, 761, 776, 780, 786, 793, 794, 795, 796, 798, 806, 807, 808, 809, 812, 814, 816, 822, 827, 828, 829, 831, 832, 833, 835, 857, 859, 861, 863, 876, 877, 878, 879, 880, 881, 887, 888, 891, 892, 895, 898, 899, 904, 905, 907, 909, 910, 912, 915, 916, 917, 920, 922, 923, 926, 932, 938, 943, 944, 950, 951, 952, 961, 969], "primarili": 1, "intend": 1, "us": [1, 9, 11, 12, 17, 22, 23, 27, 28, 29, 33, 51, 60, 69, 70, 87, 89, 90, 92, 94, 95, 97, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 123, 124, 126, 127, 131, 138, 140, 145, 146, 149, 154, 155, 156, 163, 165, 167, 168, 170, 174, 176, 179, 180, 183, 184, 192, 194, 196, 202, 203, 204, 210, 211, 213, 217, 218, 220, 221, 222, 223, 226, 229, 231, 249, 257, 263, 264, 274, 282, 300, 304, 305, 310, 323, 326, 327, 352, 356, 362, 364, 366, 367, 368, 374, 375, 387, 388, 401, 411, 413, 416, 433, 440, 442, 444, 447, 448, 449, 450, 451, 453, 454, 455, 457, 459, 462, 463, 467, 469, 470, 472, 476, 477, 478, 484, 485, 491, 493, 495, 497, 499, 520, 525, 526, 527, 531, 533, 534, 537, 539, 546, 548, 552, 554, 557, 559, 562, 563, 564, 565, 566, 567, 569, 576, 577, 588, 595, 597, 598, 603, 604, 608, 609, 610, 611, 615, 617, 618, 623, 633, 638, 640, 641, 646, 648, 649, 651, 655, 657, 673, 682, 701, 719, 722, 723, 729, 743, 779, 783, 789, 792, 794, 795, 796, 800, 801, 806, 809, 813, 833, 840, 859, 861, 863, 876, 879, 880, 881, 885, 887, 891, 895, 900, 901, 908, 909, 915, 917, 919, 923, 933, 939, 941, 942, 943, 944, 951, 952, 961, 969], "librari": [1, 72, 79, 411, 577, 969], "author": 1, "domain": 1, "specif": [1, 25, 29, 86, 88, 90, 92, 99, 101, 102, 111, 121, 122, 167, 249, 356, 446, 499, 577, 673, 783, 865, 923, 961, 969], "capabl": [1, 29, 249], "which": [1, 17, 26, 27, 29, 30, 31, 32, 33, 60, 61, 62, 63, 64, 89, 99, 100, 101, 102, 103, 110, 111, 117, 123, 125, 132, 140, 144, 155, 156, 216, 218, 249, 259, 300, 372, 388, 390, 393, 394, 396, 397, 398, 420, 447, 448, 449, 450, 451, 453, 454, 455, 488, 570, 577, 591, 598, 600, 609, 610, 637, 638, 645, 646, 654, 673, 681, 799, 813, 817, 821, 823, 824, 825, 826, 879, 912, 961, 969], "mai": [1, 33, 37, 68, 69, 86, 88, 89, 90, 92, 99, 102, 104, 111, 112, 115, 131, 142, 144, 170, 198, 199, 213, 220, 221, 249, 263, 294, 299, 300, 323, 328, 339, 353, 447, 448, 449, 450, 451, 453, 454, 455, 460, 461, 499, 537, 538, 546, 561, 577, 615, 619, 634, 635, 638, 648, 653, 657, 673, 681, 682, 713, 718, 743, 751, 762, 780, 793, 809, 857, 883, 884, 923, 961, 969], "exist": [1, 28, 29, 102, 111, 122, 226, 249, 329, 651, 673, 752], "belong": [1, 155, 249, 609, 673], "core": [1, 91, 213, 249, 969], "cannot": [1, 87, 99, 100, 103, 104, 117, 126, 131, 194, 231, 249, 304, 413, 457, 476, 495, 504, 577, 636, 657, 673, 682, 722, 876, 900, 919, 961], "overrid": [1, 29, 86, 88, 89, 90, 91, 92, 99, 119, 120, 124, 126, 249, 413, 577, 673, 840, 961], "str": [1, 6, 8, 13, 14, 17, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 48, 49, 50, 51, 60, 61, 62, 63, 64, 66, 69, 70, 71, 86, 88, 89, 90, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 122, 123, 124, 125, 132, 135, 137, 138, 139, 140, 141, 142, 143, 147, 148, 149, 151, 153, 154, 155, 156, 158, 160, 163, 165, 166, 167, 169, 170, 173, 174, 175, 176, 177, 178, 180, 182, 184, 186, 188, 189, 190, 191, 192, 193, 194, 198, 199, 201, 202, 203, 204, 205, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 256, 257, 258, 263, 278, 279, 280, 285, 286, 287, 295, 298, 300, 325, 330, 349, 352, 353, 356, 359, 369, 373, 375, 377, 386, 388, 395, 412, 413, 419, 421, 433, 435, 437, 443, 445, 447, 448, 449, 450, 451, 453, 454, 455, 461, 462, 469, 470, 503, 504, 506, 509, 521, 522, 523, 524, 525, 526, 529, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 553, 555, 556, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 577, 583, 591, 595, 596, 597, 598, 600, 601, 602, 605, 607, 608, 609, 610, 612, 614, 615, 623, 624, 627, 629, 630, 631, 635, 636, 637, 638, 639, 640, 645, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 678, 698, 699, 706, 719, 727, 744, 745, 753, 776, 779, 780, 783, 786, 801, 840, 849, 850, 857, 862, 879, 880, 927, 929, 939, 940, 941, 961, 965, 969], "dt": [1, 60, 70, 156, 249, 542, 585, 610, 673, 967], "attempt": [1, 212, 249], "do": [1, 29, 60, 67, 110, 144, 170, 207, 217, 220, 249, 282, 323, 486, 492, 498, 523, 577, 595, 600, 615, 619, 627, 636, 637, 638, 673, 681, 701, 743, 910, 916, 922, 943, 952, 961], "so": [1, 51, 101, 110, 126, 153, 155, 156, 184, 249, 274, 285, 388, 486, 492, 498, 577, 609, 610, 673, 704, 910, 916, 922], "rais": [1, 13, 17, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 117, 118, 192, 249, 299, 304, 352, 419, 474, 476, 488, 499, 552, 718, 722, 779, 898, 900, 912, 923, 943, 952, 961], "an": [1, 5, 25, 28, 29, 37, 61, 63, 64, 65, 67, 70, 72, 76, 77, 79, 86, 99, 100, 101, 102, 103, 105, 108, 110, 112, 120, 122, 124, 131, 133, 134, 142, 145, 147, 149, 155, 156, 167, 168, 170, 180, 184, 190, 192, 207, 212, 220, 226, 231, 249, 258, 259, 263, 280, 282, 285, 299, 300, 304, 309, 312, 313, 314, 318, 319, 320, 321, 322, 323, 329, 352, 362, 372, 375, 400, 411, 412, 420, 438, 446, 447, 448, 449, 450, 451, 453, 454, 455, 474, 476, 481, 499, 509, 515, 527, 531, 543, 548, 552, 561, 562, 563, 566, 570, 577, 588, 593, 594, 595, 600, 602, 605, 609, 610, 615, 619, 627, 636, 651, 652, 657, 673, 682, 699, 701, 704, 718, 722, 727, 732, 733, 734, 735, 736, 739, 740, 741, 742, 743, 752, 779, 789, 793, 799, 822, 865, 866, 867, 868, 869, 870, 872, 873, 874, 879, 880, 898, 900, 905, 923, 943, 952, 961], "attributeerror": 1, "howev": [1, 89, 142, 249, 793, 961], "can": [1, 12, 29, 60, 70, 77, 89, 99, 100, 103, 104, 108, 110, 112, 114, 115, 120, 121, 122, 124, 126, 128, 131, 132, 141, 149, 155, 163, 165, 180, 184, 196, 202, 216, 217, 220, 226, 231, 249, 263, 282, 300, 319, 322, 323, 349, 352, 359, 372, 387, 388, 425, 442, 447, 448, 449, 450, 451, 453, 454, 455, 459, 462, 464, 467, 470, 483, 486, 492, 498, 499, 519, 523, 527, 528, 531, 539, 546, 548, 567, 570, 576, 577, 591, 595, 600, 609, 633, 640, 645, 651, 653, 657, 673, 682, 701, 719, 743, 776, 779, 786, 799, 813, 845, 861, 879, 880, 881, 885, 888, 891, 907, 910, 916, 922, 923, 961], "other": [1, 17, 29, 70, 99, 100, 103, 110, 117, 118, 140, 144, 150, 169, 170, 176, 177, 192, 196, 221, 226, 247, 249, 256, 260, 262, 274, 278, 312, 313, 314, 325, 365, 379, 381, 382, 388, 392, 403, 410, 413, 424, 426, 430, 432, 470, 505, 513, 515, 522, 530, 532, 533, 554, 557, 566, 577, 588, 598, 614, 615, 623, 624, 633, 648, 651, 652, 673, 681, 697, 733, 734, 735, 747, 820, 878, 945, 953, 960, 961], "onli": [1, 17, 25, 29, 51, 60, 66, 68, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 122, 124, 128, 131, 140, 167, 170, 174, 193, 204, 209, 211, 249, 257, 263, 274, 311, 312, 313, 314, 349, 369, 378, 442, 517, 562, 577, 595, 598, 611, 615, 618, 673, 730, 733, 734, 735, 776, 804, 822, 861, 938, 941, 961, 969], "gener": [1, 94, 101, 119, 120, 121, 122, 124, 136, 184, 194, 210, 217, 249, 300, 457, 463, 577, 673, 719, 876, 887, 939, 961, 969], "userwarn": 1, "pl": [1, 7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 103, 104, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 124, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 577, 589, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 700, 701, 702, 705, 706, 708, 713, 714, 715, 717, 719, 726, 727, 729, 730, 731, 732, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 795, 796, 799, 800, 801, 802, 804, 807, 808, 809, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 834, 839, 840, 841, 842, 843, 844, 845, 846, 847, 853, 854, 855, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 887, 888, 889, 890, 892, 893, 894, 895, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 961, 969], "register_expr_namespac": [1, 61, 63, 64], "greet": 1, "def": [1, 61, 62, 63, 64, 120, 121, 122, 124, 183, 217, 249, 256, 435, 522, 553, 577, 626, 673, 969], "__init__": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 119], "self": [1, 61, 62, 63, 64, 67, 131, 132, 133, 134, 136, 137, 138, 140, 143, 144, 145, 146, 147, 154, 155, 156, 158, 160, 161, 162, 169, 170, 172, 173, 174, 175, 176, 177, 178, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 249, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 302, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 577, 591, 592, 593, 594, 595, 597, 598, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 628, 629, 630, 631, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 673, 681, 682, 727, 736, 802, 810, 839, 840, 851, 854, 855, 860, 879, 880, 881, 893, 949, 953, 961], "_expr": [1, 62], "hello": [1, 486, 492, 498, 523, 706, 910, 916, 922], "return": [1, 25, 27, 29, 30, 31, 32, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 78, 80, 85, 86, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 121, 127, 131, 132, 133, 136, 139, 140, 141, 142, 143, 145, 146, 149, 153, 154, 158, 160, 166, 167, 168, 169, 171, 172, 179, 180, 182, 183, 184, 192, 193, 194, 205, 206, 213, 216, 217, 218, 226, 228, 231, 234, 238, 243, 249, 259, 261, 265, 266, 267, 268, 269, 270, 273, 274, 276, 277, 279, 283, 285, 286, 287, 298, 299, 303, 305, 308, 315, 316, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 358, 359, 360, 361, 363, 371, 384, 388, 390, 391, 392, 393, 394, 396, 397, 398, 405, 409, 413, 420, 425, 435, 443, 444, 457, 458, 464, 465, 466, 473, 475, 477, 479, 480, 481, 483, 484, 485, 487, 488, 491, 493, 494, 495, 496, 502, 508, 509, 510, 511, 512, 514, 515, 517, 518, 519, 522, 524, 525, 527, 528, 531, 540, 541, 542, 548, 550, 552, 553, 562, 563, 566, 568, 570, 577, 591, 593, 595, 598, 599, 600, 602, 611, 617, 618, 619, 626, 627, 636, 637, 638, 643, 644, 645, 646, 651, 654, 660, 664, 669, 673, 678, 679, 680, 682, 689, 690, 692, 693, 695, 696, 698, 702, 704, 705, 706, 717, 718, 721, 723, 726, 732, 744, 745, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 793, 798, 806, 808, 809, 815, 817, 818, 820, 821, 823, 824, 825, 826, 830, 832, 835, 839, 840, 845, 857, 863, 864, 876, 877, 878, 880, 888, 897, 898, 899, 901, 903, 904, 905, 907, 908, 909, 911, 912, 915, 917, 918, 919, 920, 923, 926, 932, 934, 946, 948, 949, 953, 961, 969], "lit": [1, 97, 127, 388, 400, 537, 539, 546, 567, 570, 577, 801, 961], "alia": [1, 60, 62, 64, 155, 156, 172, 219, 226, 249, 256, 260, 263, 280, 282, 308, 312, 313, 314, 318, 319, 320, 321, 322, 324, 328, 329, 330, 333, 334, 335, 337, 339, 340, 341, 343, 345, 348, 349, 350, 352, 353, 354, 355, 356, 358, 359, 361, 362, 365, 375, 377, 379, 381, 382, 386, 388, 391, 392, 400, 403, 404, 405, 410, 413, 422, 424, 426, 430, 432, 434, 436, 442, 458, 474, 475, 478, 481, 484, 487, 493, 495, 496, 497, 503, 504, 505, 513, 514, 515, 521, 522, 525, 529, 530, 532, 533, 537, 538, 539, 542, 543, 546, 547, 553, 561, 562, 566, 567, 570, 577, 609, 610, 612, 618, 647, 651, 673, 701, 751, 753, 758, 776, 779, 785, 789, 835, 919, 920, 961], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 486, 492, 498, 706, 910, 916, 922], "select": [1, 28, 60, 61, 62, 63, 65, 98, 99, 100, 101, 102, 104, 108, 110, 115, 121, 131, 166, 170, 180, 183, 192, 201, 214, 219, 222, 249, 255, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 296, 297, 300, 301, 302, 308, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 372, 376, 378, 380, 383, 385, 386, 387, 389, 390, 392, 393, 395, 399, 400, 401, 402, 404, 406, 407, 408, 409, 411, 412, 414, 415, 416, 423, 425, 427, 428, 429, 431, 432, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 479, 480, 481, 482, 483, 485, 486, 488, 491, 492, 494, 495, 496, 498, 500, 501, 503, 504, 506, 507, 510, 511, 512, 514, 516, 517, 518, 519, 520, 523, 524, 525, 526, 527, 528, 529, 531, 532, 534, 535, 536, 537, 538, 539, 542, 544, 545, 546, 547, 548, 550, 554, 555, 556, 557, 558, 559, 561, 564, 565, 566, 567, 568, 569, 577, 596, 612, 615, 626, 639, 647, 652, 654, 673, 701, 719, 779, 879, 880, 892, 904, 907, 933, 961], "shape": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 83, 86, 88, 89, 90, 91, 92, 93, 94, 97, 110, 115, 122, 124, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 151, 152, 154, 155, 156, 157, 158, 160, 161, 162, 163, 165, 166, 169, 170, 173, 174, 175, 176, 178, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 194, 196, 198, 199, 201, 202, 203, 204, 205, 206, 208, 210, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 569, 570, 577, 591, 593, 595, 597, 598, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 633, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 681, 682, 683, 684, 685, 686, 687, 688, 691, 692, 693, 700, 701, 702, 705, 706, 708, 713, 714, 715, 717, 719, 726, 727, 729, 730, 732, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 796, 799, 800, 801, 802, 804, 807, 808, 809, 812, 813, 815, 817, 820, 821, 823, 824, 825, 826, 830, 832, 839, 840, 845, 853, 854, 855, 857, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 879, 880, 883, 887, 888, 889, 890, 892, 893, 894, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 930, 932, 933, 934, 935, 936, 939, 940, 941, 945, 946, 947, 948, 949, 950, 953, 961], "3": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 101, 103, 110, 115, 116, 117, 118, 121, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 256, 257, 258, 259, 263, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 302, 308, 309, 310, 311, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 338, 344, 346, 350, 351, 352, 353, 354, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 424, 425, 426, 430, 431, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 467, 469, 470, 471, 474, 477, 478, 480, 482, 484, 487, 493, 494, 495, 496, 497, 503, 504, 505, 506, 508, 509, 510, 514, 517, 518, 519, 521, 522, 523, 524, 525, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 543, 544, 545, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 559, 561, 563, 564, 565, 566, 567, 568, 569, 570, 577, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 678, 681, 682, 683, 685, 686, 687, 689, 690, 691, 692, 693, 700, 701, 702, 705, 708, 713, 714, 715, 717, 719, 726, 727, 729, 730, 731, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 751, 752, 753, 756, 757, 758, 759, 761, 763, 764, 765, 767, 769, 770, 771, 773, 775, 777, 779, 780, 781, 785, 786, 788, 789, 793, 795, 796, 799, 800, 801, 802, 804, 807, 808, 809, 812, 813, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 833, 834, 839, 840, 841, 842, 843, 844, 845, 846, 847, 853, 854, 855, 857, 858, 859, 862, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 887, 889, 890, 891, 892, 893, 895, 901, 902, 904, 906, 908, 911, 917, 921, 930, 931, 932, 933, 934, 935, 936, 938, 939, 942, 943, 944, 946, 947, 948, 949, 950, 951, 953, 961, 969], "1": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 103, 104, 110, 111, 115, 116, 117, 118, 119, 122, 124, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 577, 591, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 700, 701, 702, 704, 705, 708, 713, 714, 715, 717, 719, 726, 727, 729, 730, 731, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 794, 795, 796, 799, 800, 801, 802, 804, 807, 808, 809, 812, 813, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 832, 834, 839, 841, 842, 843, 844, 845, 846, 847, 853, 854, 855, 857, 858, 859, 862, 863, 864, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 904, 906, 907, 913, 919, 920, 923, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 961, 969], "2": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 71, 86, 88, 89, 90, 91, 92, 93, 94, 101, 110, 115, 116, 117, 118, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, 167, 169, 171, 173, 174, 175, 176, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 255, 256, 257, 258, 260, 261, 262, 263, 264, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 329, 330, 334, 336, 337, 339, 340, 341, 343, 344, 345, 346, 348, 349, 351, 352, 353, 354, 355, 356, 359, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 424, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 467, 468, 469, 470, 471, 473, 475, 478, 481, 482, 483, 484, 486, 487, 488, 489, 490, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 525, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 569, 570, 577, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 678, 681, 682, 684, 688, 689, 690, 691, 692, 693, 700, 701, 702, 705, 706, 708, 713, 714, 715, 717, 719, 726, 729, 730, 731, 732, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 752, 754, 755, 759, 764, 765, 771, 773, 778, 779, 780, 781, 784, 786, 788, 790, 792, 793, 794, 795, 796, 799, 800, 801, 802, 804, 807, 808, 809, 812, 813, 815, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 834, 836, 839, 840, 841, 842, 843, 844, 845, 846, 847, 853, 854, 855, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 887, 889, 891, 892, 893, 894, 895, 897, 899, 905, 906, 907, 910, 911, 912, 913, 914, 916, 919, 920, 922, 923, 930, 931, 932, 933, 934, 935, 938, 939, 940, 941, 942, 943, 944, 946, 947, 948, 949, 950, 951, 953, 961, 969], "column_0": [1, 131, 217, 249], "register_dataframe_namespac": [1, 62, 63, 64], "split": [1, 61, 168, 249, 495, 496, 919, 920], "splitfram": [1, 61], "df": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 61, 62, 65, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 110, 120, 122, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 296, 297, 300, 301, 302, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 550, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 569, 570, 577, 610, 647, 648, 654, 657, 660, 669, 673, 701, 719, 729, 779, 904, 907, 914, 919, 920, 940, 961, 969], "_df": [1, 61], "by_alternate_row": 1, "list": [1, 29, 36, 60, 61, 63, 67, 69, 86, 88, 89, 90, 92, 93, 96, 98, 99, 100, 101, 102, 104, 108, 110, 111, 120, 121, 122, 124, 135, 138, 141, 142, 143, 147, 152, 154, 155, 160, 167, 179, 182, 192, 193, 196, 202, 208, 209, 217, 218, 219, 220, 226, 229, 230, 249, 257, 278, 281, 282, 283, 286, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 371, 377, 385, 411, 420, 421, 433, 443, 444, 446, 447, 448, 449, 450, 451, 453, 454, 455, 461, 469, 470, 481, 494, 503, 504, 509, 528, 531, 532, 539, 543, 552, 554, 557, 566, 567, 577, 596, 597, 599, 601, 605, 608, 609, 623, 633, 640, 646, 647, 651, 652, 655, 656, 673, 694, 697, 700, 701, 702, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 731, 744, 793, 798, 802, 805, 809, 810, 820, 857, 863, 865, 866, 867, 868, 869, 870, 872, 873, 874, 877, 905, 918, 933, 942, 961, 969], "with_row_count": [1, 249, 413, 577, 673, 880, 961], "name": [1, 15, 19, 21, 28, 29, 31, 50, 61, 62, 63, 64, 69, 70, 75, 86, 88, 89, 90, 91, 92, 94, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 112, 113, 114, 118, 119, 120, 122, 123, 124, 125, 131, 132, 135, 138, 139, 140, 143, 148, 151, 153, 154, 166, 167, 169, 170, 176, 182, 184, 188, 192, 193, 195, 196, 202, 208, 210, 215, 216, 217, 218, 219, 220, 221, 226, 227, 228, 229, 249, 258, 263, 300, 353, 359, 369, 388, 400, 412, 419, 421, 433, 437, 470, 503, 504, 506, 526, 528, 530, 531, 532, 533, 534, 536, 539, 544, 550, 551, 554, 557, 559, 560, 562, 564, 566, 567, 568, 577, 591, 596, 597, 598, 601, 608, 614, 615, 623, 630, 632, 633, 640, 645, 646, 647, 648, 651, 653, 654, 655, 673, 678, 719, 732, 744, 780, 786, 857, 862, 927, 929, 939, 940, 944, 961, 969], "n": [1, 11, 14, 22, 32, 36, 38, 61, 62, 63, 64, 70, 96, 97, 99, 100, 110, 127, 131, 133, 144, 155, 158, 167, 168, 172, 193, 194, 203, 205, 206, 209, 211, 223, 234, 243, 249, 281, 286, 298, 308, 323, 324, 328, 329, 335, 358, 362, 372, 384, 405, 434, 443, 457, 467, 472, 489, 495, 496, 508, 510, 514, 515, 520, 522, 534, 548, 550, 559, 562, 564, 565, 568, 569, 577, 593, 595, 609, 611, 618, 641, 643, 644, 649, 660, 669, 673, 681, 700, 705, 717, 726, 732, 743, 746, 751, 752, 758, 785, 789, 799, 808, 835, 853, 876, 891, 895, 913, 919, 920, 932, 934, 941, 946, 951, 961, 969], "filter": [1, 61, 102, 110, 111, 115, 140, 163, 164, 165, 231, 249, 478, 497, 521, 527, 546, 577, 598, 602, 612, 657, 673, 879, 961], "col": [1, 27, 29, 60, 61, 62, 63, 65, 90, 92, 110, 120, 122, 131, 143, 147, 154, 155, 156, 164, 166, 180, 183, 192, 196, 202, 219, 226, 229, 249, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 296, 297, 300, 301, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 375, 376, 377, 378, 379, 381, 382, 386, 387, 388, 389, 391, 392, 394, 395, 396, 399, 400, 401, 402, 403, 406, 407, 408, 409, 410, 413, 414, 415, 416, 423, 424, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 527, 530, 532, 533, 537, 538, 539, 542, 545, 546, 547, 548, 549, 554, 557, 560, 561, 567, 570, 577, 601, 605, 608, 609, 610, 612, 626, 633, 640, 647, 651, 652, 655, 673, 701, 719, 729, 776, 779, 863, 879, 880, 904, 907, 923, 961, 969], "0": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 33, 60, 61, 62, 64, 65, 69, 94, 99, 100, 101, 103, 104, 108, 110, 112, 113, 114, 115, 116, 119, 120, 121, 122, 124, 127, 131, 133, 134, 136, 137, 138, 141, 145, 146, 149, 150, 152, 153, 154, 155, 157, 161, 166, 167, 168, 169, 171, 173, 174, 175, 178, 179, 180, 181, 184, 185, 186, 190, 194, 195, 196, 199, 201, 202, 203, 204, 210, 211, 213, 214, 217, 220, 222, 223, 226, 227, 229, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 249, 255, 257, 260, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 280, 282, 285, 291, 300, 309, 311, 313, 314, 315, 316, 318, 323, 326, 327, 336, 340, 341, 343, 344, 348, 354, 355, 365, 366, 367, 368, 370, 372, 373, 374, 378, 379, 381, 382, 383, 387, 390, 393, 394, 396, 397, 398, 400, 401, 403, 406, 407, 408, 410, 411, 413, 414, 415, 416, 423, 424, 426, 428, 429, 430, 431, 432, 434, 435, 436, 439, 440, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 462, 464, 465, 466, 467, 471, 472, 480, 499, 502, 505, 507, 511, 512, 513, 515, 520, 527, 528, 529, 530, 532, 534, 536, 537, 539, 543, 546, 551, 555, 556, 559, 560, 561, 564, 567, 569, 570, 577, 593, 594, 597, 599, 603, 604, 608, 609, 614, 617, 622, 627, 628, 632, 633, 635, 636, 638, 640, 641, 649, 651, 652, 653, 655, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 673, 683, 684, 685, 686, 687, 688, 689, 691, 693, 701, 704, 727, 730, 732, 737, 738, 743, 744, 745, 747, 759, 763, 764, 765, 766, 767, 768, 769, 770, 771, 774, 775, 781, 782, 792, 794, 795, 796, 800, 804, 807, 809, 817, 819, 821, 823, 824, 825, 826, 832, 833, 839, 842, 843, 853, 857, 858, 859, 865, 867, 868, 870, 871, 872, 874, 876, 888, 889, 890, 894, 895, 897, 904, 907, 923, 926, 935, 936, 939, 944, 945, 949, 951, 952, 961, 969], "drop": [1, 89, 131, 139, 140, 218, 226, 249, 281, 324, 326, 327, 499, 577, 598, 646, 651, 673, 700, 746, 748, 749, 923, 961], "aaa": [1, 29, 249, 503, 504], "bbb": [1, 29, 249, 503, 504], "ccc": [1, 29, 249, 503, 504], "ddd": [1, 29, 249, 503, 504], "eee": [1, 29, 249], "fff": 1, "column": [1, 14, 15, 18, 19, 21, 29, 31, 51, 60, 61, 68, 69, 70, 73, 75, 86, 88, 89, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110, 111, 112, 113, 114, 117, 122, 130, 131, 132, 138, 139, 140, 141, 143, 148, 151, 153, 154, 155, 156, 160, 161, 166, 167, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 192, 193, 195, 196, 202, 203, 204, 208, 210, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 229, 249, 259, 261, 263, 273, 278, 283, 296, 299, 300, 329, 333, 336, 338, 339, 340, 342, 344, 346, 347, 350, 351, 354, 360, 361, 363, 369, 371, 375, 377, 388, 400, 413, 418, 419, 421, 433, 437, 441, 443, 444, 447, 448, 449, 450, 451, 453, 454, 455, 462, 469, 470, 479, 495, 496, 499, 506, 521, 523, 524, 526, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 545, 546, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 577, 591, 597, 598, 599, 601, 608, 609, 610, 614, 615, 619, 620, 621, 622, 623, 625, 626, 628, 630, 632, 633, 640, 641, 642, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 673, 679, 680, 697, 702, 715, 718, 744, 754, 755, 756, 759, 761, 762, 766, 768, 771, 773, 774, 777, 778, 781, 784, 787, 788, 790, 798, 857, 863, 885, 903, 919, 920, 930, 939, 940, 961, 969], "txt": [1, 110], "utf8": [1, 9, 17, 51, 71, 89, 93, 99, 100, 110, 119, 121, 141, 142, 143, 149, 195, 212, 249, 287, 371, 413, 473, 477, 480, 481, 483, 484, 493, 494, 495, 496, 499, 531, 533, 577, 599, 601, 632, 673, 706, 783, 798, 831, 897, 901, 904, 905, 907, 908, 917, 918, 919, 920, 923, 961], "register_lazyframe_namespac": [1, 61, 62, 64], "dtypeoper": [1, 63], "ldf": [1, 63, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669], "_ldf": [1, 63], "upcast_integer_typ": [1, 63], "with_column": [1, 63, 156, 183, 249, 256, 263, 274, 282, 309, 310, 312, 313, 314, 319, 322, 324, 352, 365, 379, 381, 382, 383, 387, 388, 391, 394, 396, 397, 398, 400, 403, 410, 413, 424, 426, 430, 433, 434, 435, 436, 478, 484, 487, 489, 490, 493, 495, 496, 497, 499, 502, 505, 513, 515, 522, 525, 527, 530, 533, 539, 543, 553, 567, 570, 577, 610, 626, 673, 701, 729, 779, 923], "tp": [1, 63], "cast": [1, 62, 63, 71, 86, 149, 155, 156, 183, 213, 226, 249, 262, 310, 321, 322, 328, 413, 432, 435, 442, 482, 483, 502, 507, 513, 533, 577, 609, 610, 626, 651, 673, 729, 741, 742, 751, 861, 906, 907, 931, 940, 945, 961], "int64": [1, 29, 31, 62, 63, 93, 97, 99, 127, 141, 149, 155, 156, 183, 195, 207, 213, 249, 321, 322, 334, 337, 341, 343, 345, 348, 355, 369, 435, 442, 482, 507, 513, 527, 531, 544, 552, 566, 577, 599, 609, 610, 626, 632, 654, 673, 741, 742, 757, 760, 767, 769, 772, 775, 782, 861, 878, 931, 943, 944, 945, 961], "int8": [1, 63, 149, 249, 321, 322, 507, 577, 741, 742, 746, 840, 864, 931, 949, 961], "int16": [1, 63, 321, 322, 507, 577, 741, 742, 840, 931, 941, 961], "int32": [1, 63, 86, 89, 93, 121, 122, 124, 155, 156, 168, 249, 309, 339, 363, 513, 577, 609, 610, 673, 762, 790, 839, 945, 961], "b": [1, 26, 27, 30, 33, 51, 63, 68, 71, 86, 88, 89, 90, 91, 92, 93, 94, 103, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 160, 161, 163, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 256, 258, 262, 263, 275, 278, 282, 287, 289, 302, 309, 310, 317, 325, 326, 327, 369, 373, 374, 375, 377, 380, 383, 385, 387, 388, 390, 393, 394, 395, 396, 397, 398, 400, 404, 412, 425, 431, 433, 435, 437, 445, 462, 468, 470, 479, 482, 489, 506, 517, 519, 521, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 543, 544, 545, 546, 547, 550, 553, 554, 555, 556, 557, 558, 559, 561, 564, 565, 566, 567, 568, 569, 577, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 611, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 681, 701, 729, 745, 747, 792, 793, 801, 813, 820, 831, 862, 878, 903, 906, 913, 930, 944, 948, 961], "4": [1, 14, 22, 26, 27, 29, 30, 33, 51, 60, 61, 62, 63, 64, 65, 68, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 110, 117, 118, 124, 131, 132, 133, 134, 137, 140, 143, 144, 145, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 174, 176, 179, 180, 182, 183, 184, 185, 189, 193, 197, 202, 205, 206, 207, 208, 209, 210, 215, 216, 217, 219, 220, 221, 222, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 255, 256, 257, 260, 262, 263, 275, 280, 281, 282, 283, 286, 294, 295, 298, 302, 308, 309, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 329, 333, 337, 344, 345, 346, 350, 351, 353, 354, 355, 359, 360, 361, 363, 365, 370, 373, 374, 377, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 397, 398, 400, 403, 404, 405, 407, 410, 412, 413, 424, 426, 430, 432, 433, 436, 437, 439, 440, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 458, 460, 461, 464, 468, 469, 470, 471, 474, 484, 485, 487, 488, 491, 493, 495, 496, 499, 503, 504, 505, 506, 508, 509, 510, 513, 514, 515, 522, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 543, 545, 546, 550, 552, 553, 554, 555, 556, 557, 558, 559, 564, 565, 566, 567, 568, 569, 570, 577, 591, 593, 594, 595, 598, 600, 601, 602, 603, 604, 606, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 634, 635, 636, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 681, 684, 691, 700, 701, 702, 705, 713, 714, 717, 726, 730, 731, 733, 743, 745, 747, 759, 760, 766, 768, 771, 772, 773, 774, 778, 780, 781, 782, 783, 786, 787, 788, 800, 801, 808, 809, 812, 813, 815, 820, 823, 824, 825, 826, 830, 840, 846, 853, 854, 855, 857, 859, 863, 868, 870, 871, 872, 873, 874, 876, 878, 888, 892, 893, 898, 908, 909, 911, 912, 915, 917, 919, 920, 923, 930, 932, 933, 934, 941, 944, 945, 946, 953, 961, 969], "c": [1, 26, 27, 30, 33, 51, 61, 63, 71, 89, 91, 93, 103, 110, 120, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 147, 148, 149, 150, 152, 153, 154, 155, 158, 160, 161, 168, 169, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 188, 190, 191, 192, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 207, 211, 212, 213, 214, 216, 217, 220, 221, 223, 224, 226, 229, 232, 233, 234, 235, 236, 237, 239, 242, 243, 249, 256, 263, 278, 287, 289, 388, 400, 433, 435, 462, 495, 499, 517, 519, 523, 524, 526, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 545, 546, 547, 550, 553, 554, 555, 556, 557, 558, 559, 564, 565, 567, 568, 569, 577, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 608, 609, 614, 617, 623, 627, 630, 631, 632, 633, 636, 639, 640, 645, 648, 651, 652, 655, 658, 659, 660, 661, 662, 663, 665, 668, 669, 673, 745, 813, 831, 919, 923, 948, 961], "5": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 30, 33, 60, 61, 63, 64, 65, 68, 69, 86, 89, 90, 91, 92, 93, 96, 97, 100, 116, 122, 124, 127, 131, 133, 134, 137, 143, 144, 145, 146, 149, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 164, 166, 167, 170, 171, 172, 174, 176, 179, 180, 182, 184, 185, 186, 189, 193, 197, 202, 205, 206, 207, 208, 209, 215, 220, 222, 225, 226, 227, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 256, 257, 260, 280, 282, 283, 286, 291, 297, 298, 308, 309, 310, 311, 312, 313, 314, 323, 324, 325, 329, 330, 334, 352, 354, 355, 356, 360, 368, 369, 372, 378, 379, 381, 382, 384, 385, 388, 391, 394, 396, 397, 398, 400, 403, 405, 424, 426, 432, 433, 434, 437, 439, 440, 444, 445, 446, 447, 448, 450, 454, 456, 458, 464, 470, 475, 483, 484, 487, 488, 502, 505, 506, 508, 510, 514, 515, 525, 526, 529, 530, 532, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 550, 552, 553, 554, 555, 556, 557, 558, 559, 561, 564, 565, 567, 568, 569, 577, 593, 594, 595, 600, 601, 602, 603, 604, 606, 608, 609, 610, 611, 613, 615, 616, 617, 618, 621, 622, 623, 627, 634, 635, 636, 639, 640, 641, 642, 643, 644, 650, 651, 653, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 681, 684, 688, 691, 701, 702, 705, 708, 717, 726, 729, 731, 733, 739, 743, 744, 745, 746, 747, 752, 753, 754, 755, 756, 757, 779, 781, 782, 784, 787, 788, 796, 799, 808, 809, 812, 813, 839, 840, 846, 853, 854, 855, 857, 858, 859, 863, 865, 866, 867, 869, 870, 873, 876, 878, 888, 894, 899, 907, 908, 912, 932, 946, 949, 953, 961, 969], "6": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 86, 89, 90, 91, 92, 94, 131, 135, 138, 139, 140, 141, 143, 144, 147, 148, 150, 151, 152, 153, 155, 156, 158, 160, 161, 162, 164, 166, 167, 169, 173, 174, 175, 176, 178, 181, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 219, 220, 221, 222, 223, 224, 226, 227, 234, 242, 243, 249, 256, 260, 263, 283, 302, 309, 321, 322, 325, 329, 349, 351, 354, 364, 373, 374, 380, 384, 385, 387, 405, 432, 438, 440, 441, 444, 447, 448, 449, 450, 451, 453, 454, 455, 458, 470, 475, 479, 484, 487, 488, 505, 508, 510, 522, 523, 525, 537, 538, 539, 543, 546, 553, 567, 577, 595, 596, 597, 598, 599, 600, 601, 602, 605, 606, 609, 610, 611, 613, 614, 616, 618, 619, 623, 627, 630, 632, 633, 634, 635, 636, 639, 640, 643, 644, 647, 648, 650, 651, 653, 654, 660, 668, 669, 673, 681, 702, 731, 737, 741, 742, 747, 776, 788, 809, 846, 859, 863, 868, 870, 871, 872, 874, 878, 899, 903, 908, 912, 931, 961, 969], "7": [1, 26, 27, 29, 30, 31, 32, 33, 61, 63, 68, 70, 135, 136, 137, 138, 139, 141, 143, 147, 148, 150, 155, 156, 158, 160, 162, 169, 173, 174, 175, 178, 181, 184, 186, 188, 190, 192, 194, 195, 196, 198, 199, 201, 203, 204, 205, 206, 211, 212, 213, 214, 220, 221, 222, 223, 224, 249, 256, 260, 322, 329, 333, 350, 352, 353, 359, 361, 363, 370, 384, 387, 405, 413, 432, 444, 448, 454, 470, 508, 510, 525, 537, 538, 546, 553, 567, 577, 596, 597, 599, 601, 605, 609, 610, 611, 613, 614, 618, 628, 630, 632, 633, 643, 644, 648, 654, 673, 688, 752, 756, 762, 779, 780, 786, 788, 832, 840, 863, 873, 961, 969], "float32": [1, 27, 63, 149, 211, 249, 552, 673, 816, 839, 961], "lazi": [1, 63, 68, 70, 97, 110, 122, 127, 170, 183, 249, 263, 300, 527, 548, 577, 588, 614, 615, 652, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 673, 969], "i16": [1, 63, 462, 577, 840, 941, 961, 969], "i32": [1, 63, 86, 89, 93, 121, 122, 196, 249, 309, 339, 363, 462, 488, 570, 577, 633, 673, 762, 790, 839, 912, 961, 969], "f32": [1, 63, 140, 211, 249, 282, 440, 462, 543, 577, 598, 673, 701, 839, 859, 961], "i64": [1, 14, 18, 61, 62, 63, 64, 68, 86, 88, 89, 90, 91, 92, 93, 97, 110, 124, 127, 131, 132, 133, 134, 135, 138, 140, 141, 143, 144, 146, 147, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 165, 169, 170, 173, 176, 178, 182, 183, 184, 185, 188, 189, 190, 191, 194, 196, 198, 199, 201, 202, 204, 205, 206, 208, 214, 216, 217, 218, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 239, 242, 243, 249, 256, 258, 262, 263, 281, 282, 283, 284, 285, 286, 288, 290, 292, 293, 294, 295, 296, 297, 298, 301, 302, 308, 310, 312, 313, 314, 319, 320, 321, 322, 324, 325, 334, 335, 337, 341, 343, 345, 348, 355, 358, 369, 372, 374, 375, 376, 377, 379, 380, 384, 385, 386, 387, 388, 391, 394, 396, 397, 398, 400, 402, 405, 409, 411, 412, 424, 425, 426, 433, 434, 435, 436, 437, 438, 441, 442, 444, 445, 457, 459, 460, 462, 463, 464, 468, 469, 470, 489, 490, 503, 504, 505, 506, 507, 508, 509, 510, 514, 515, 516, 518, 521, 523, 525, 530, 531, 533, 537, 538, 539, 542, 543, 544, 545, 546, 550, 552, 553, 554, 557, 561, 563, 567, 568, 570, 577, 591, 593, 595, 597, 598, 601, 602, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 616, 618, 619, 620, 623, 625, 626, 627, 630, 631, 633, 634, 635, 639, 640, 642, 643, 644, 645, 646, 647, 648, 651, 653, 655, 656, 657, 659, 660, 661, 662, 665, 668, 669, 673, 681, 682, 700, 701, 702, 705, 713, 714, 715, 717, 726, 729, 733, 736, 739, 740, 741, 742, 745, 757, 758, 760, 767, 769, 772, 775, 782, 785, 799, 801, 802, 808, 812, 820, 845, 862, 863, 866, 869, 873, 876, 879, 880, 883, 887, 888, 892, 893, 930, 932, 933, 934, 940, 946, 947, 950, 953, 961, 969], "register_series_namespac": [1, 61, 62, 63], "math": [1, 64, 737, 889, 935, 961], "mathshortcut": [1, 64], "": [1, 27, 29, 64, 69, 86, 93, 94, 99, 100, 111, 124, 132, 138, 140, 142, 143, 154, 155, 161, 169, 170, 182, 184, 189, 190, 196, 202, 206, 210, 216, 218, 219, 220, 249, 286, 287, 294, 295, 298, 335, 356, 369, 401, 420, 425, 428, 429, 433, 434, 442, 446, 470, 484, 485, 487, 491, 493, 494, 496, 499, 502, 503, 504, 528, 531, 534, 539, 544, 547, 548, 554, 557, 559, 566, 567, 577, 591, 597, 598, 601, 608, 609, 615, 633, 640, 645, 646, 647, 657, 673, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 700, 702, 705, 706, 708, 713, 714, 715, 717, 726, 727, 730, 731, 732, 733, 736, 737, 738, 739, 740, 741, 742, 743, 746, 747, 752, 758, 780, 786, 793, 795, 796, 799, 800, 801, 802, 804, 807, 808, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 853, 854, 855, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 887, 888, 889, 890, 892, 893, 895, 898, 899, 901, 902, 903, 905, 906, 908, 909, 910, 911, 912, 913, 915, 916, 917, 920, 921, 922, 923, 926, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 961], "_": [1, 60, 64, 94, 184, 210, 249, 495, 919, 939, 961], "squar": [1, 64, 231, 401, 471, 577, 657, 833, 894, 961], "cube": [1, 64, 436, 577], "s2": [1, 118, 149, 249, 681, 731, 747, 820, 832, 846, 878, 944, 953, 961], "renam": [1, 89, 99, 100, 196, 226, 229, 249, 258, 412, 422, 504, 563, 566, 577, 633, 651, 655, 673, 840, 929, 940, 961], "n2": 1, "in_plac": [1, 160, 200, 224, 249, 860, 862, 886, 893, 961], "true": [1, 5, 9, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 65, 67, 68, 70, 71, 86, 87, 91, 93, 96, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 128, 130, 132, 133, 134, 137, 146, 149, 150, 152, 153, 154, 155, 161, 163, 164, 165, 167, 170, 171, 174, 179, 180, 182, 184, 185, 192, 193, 194, 196, 202, 208, 213, 216, 217, 218, 219, 220, 222, 226, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 249, 257, 259, 260, 261, 262, 263, 274, 279, 296, 299, 304, 309, 318, 319, 320, 321, 322, 338, 352, 353, 354, 359, 364, 365, 366, 367, 368, 381, 382, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 403, 410, 430, 432, 442, 452, 457, 462, 467, 469, 470, 474, 476, 478, 482, 483, 488, 494, 495, 497, 499, 503, 504, 509, 516, 519, 522, 524, 525, 527, 528, 534, 535, 546, 562, 564, 566, 570, 577, 591, 593, 594, 595, 600, 602, 604, 608, 609, 614, 615, 617, 619, 623, 627, 633, 636, 637, 638, 640, 645, 646, 647, 651, 656, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 673, 679, 680, 681, 682, 692, 715, 718, 722, 727, 731, 732, 761, 779, 780, 781, 786, 792, 794, 795, 796, 802, 806, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 833, 846, 854, 855, 861, 871, 878, 891, 893, 898, 900, 902, 906, 907, 912, 918, 919, 921, 923, 943, 944, 952, 953, 961, 969], "s3": [1, 102, 111, 115, 961], "n3": 1, "8": [1, 26, 27, 30, 31, 32, 33, 44, 57, 59, 60, 61, 63, 64, 68, 69, 94, 116, 120, 122, 131, 135, 136, 137, 138, 139, 140, 141, 143, 147, 148, 150, 153, 158, 160, 169, 173, 174, 175, 178, 186, 188, 190, 192, 194, 195, 196, 198, 199, 201, 203, 204, 205, 206, 211, 212, 213, 214, 220, 221, 223, 224, 226, 249, 260, 262, 275, 281, 282, 317, 319, 322, 323, 326, 327, 329, 387, 404, 426, 432, 436, 437, 444, 445, 448, 449, 451, 453, 455, 462, 468, 470, 485, 491, 499, 506, 510, 522, 526, 529, 534, 535, 536, 538, 539, 543, 545, 550, 553, 554, 555, 556, 557, 558, 559, 564, 565, 567, 568, 569, 577, 596, 597, 598, 599, 601, 605, 611, 614, 618, 619, 627, 630, 632, 633, 643, 644, 648, 651, 654, 673, 700, 701, 743, 762, 809, 832, 853, 857, 863, 865, 868, 870, 871, 872, 874, 909, 915, 923, 961, 969], "9": [1, 26, 27, 30, 33, 60, 68, 131, 136, 137, 149, 156, 158, 162, 196, 205, 220, 221, 224, 226, 242, 249, 256, 260, 262, 275, 281, 293, 296, 317, 319, 322, 326, 327, 329, 333, 350, 360, 361, 387, 392, 400, 404, 432, 444, 446, 448, 454, 464, 468, 510, 525, 532, 537, 538, 577, 610, 611, 613, 618, 633, 643, 648, 651, 668, 673, 700, 715, 745, 756, 766, 768, 774, 780, 781, 786, 787, 820, 832, 863, 865, 873, 875, 888, 961], "27": [1, 64, 242, 322, 339, 351, 363, 577, 668, 961, 969], "16": [1, 29, 41, 54, 62, 69, 94, 116, 155, 156, 226, 249, 319, 322, 387, 426, 436, 448, 488, 499, 525, 537, 542, 543, 546, 559, 564, 577, 609, 610, 636, 651, 673, 780, 786, 853, 889, 912, 923, 935, 961], "64": [1, 33, 40, 43, 56, 62, 64, 249, 426, 436, 577, 638, 673, 853, 961], "25": [1, 29, 64, 70, 93, 137, 155, 156, 170, 222, 226, 249, 324, 339, 353, 359, 363, 515, 548, 577, 609, 610, 615, 621, 649, 651, 673, 745, 746, 780, 786, 792, 809, 853, 857, 961], "125": [1, 29, 64, 249, 256, 577, 853, 961], "arg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 183, 213, 249, 435, 528, 547, 577, 626, 673, 682, 943, 944, 961], "ani": [2, 3, 4, 7, 27, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 55, 56, 57, 58, 59, 66, 86, 87, 88, 89, 90, 91, 92, 99, 100, 102, 103, 104, 108, 110, 111, 112, 114, 119, 121, 122, 124, 128, 131, 136, 140, 144, 146, 147, 149, 166, 167, 168, 182, 183, 192, 193, 208, 209, 212, 213, 218, 220, 249, 256, 260, 263, 278, 282, 309, 354, 365, 374, 379, 381, 382, 392, 403, 410, 411, 413, 422, 424, 426, 430, 432, 435, 444, 446, 458, 461, 488, 499, 505, 509, 515, 522, 525, 534, 545, 552, 564, 570, 577, 598, 604, 626, 646, 673, 681, 682, 697, 701, 747, 781, 801, 820, 832, 840, 863, 865, 877, 880, 912, 923, 933, 942, 943, 944, 961, 969], "kwarg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 136, 183, 213, 249, 435, 577, 626, 673, 944, 961], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 577, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 961, 968], "method": [2, 3, 4, 7, 26, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 87, 99, 100, 103, 119, 128, 140, 154, 162, 167, 180, 186, 192, 193, 218, 226, 241, 249, 256, 259, 260, 365, 372, 379, 381, 382, 387, 403, 410, 424, 426, 430, 432, 436, 439, 440, 447, 448, 449, 450, 451, 453, 454, 455, 505, 515, 517, 522, 534, 559, 560, 564, 571, 573, 577, 578, 579, 582, 583, 584, 585, 588, 598, 613, 628, 646, 651, 667, 673, 682, 799, 812, 858, 859, 870, 945, 955, 957, 961, 962, 965, 966, 967], "A": [4, 27, 29, 48, 67, 70, 93, 99, 100, 101, 108, 110, 126, 149, 155, 170, 184, 193, 208, 220, 221, 222, 226, 249, 255, 300, 329, 334, 337, 341, 343, 345, 348, 355, 365, 372, 381, 382, 390, 393, 394, 396, 403, 410, 411, 412, 420, 430, 437, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 474, 475, 480, 481, 483, 489, 490, 502, 506, 532, 543, 547, 577, 609, 615, 630, 648, 651, 673, 719, 752, 757, 760, 767, 769, 772, 775, 782, 799, 865, 866, 867, 869, 872, 873, 874, 898, 899, 904, 905, 907, 913, 914, 923, 926, 961], "encod": [4, 59, 99, 100, 110, 304, 476, 722, 900], "set": [4, 5, 6, 7, 8, 9, 11, 13, 14, 17, 22, 23, 25, 27, 29, 30, 31, 32, 61, 65, 70, 87, 89, 92, 94, 99, 100, 103, 104, 108, 110, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 135, 140, 154, 157, 167, 170, 176, 194, 196, 201, 210, 217, 218, 220, 226, 249, 263, 295, 299, 300, 362, 383, 392, 413, 446, 447, 448, 449, 450, 451, 453, 454, 455, 457, 463, 467, 468, 486, 492, 493, 498, 527, 562, 566, 570, 577, 596, 598, 600, 608, 614, 615, 619, 623, 633, 637, 638, 639, 646, 651, 654, 657, 673, 681, 682, 714, 718, 719, 789, 807, 820, 840, 865, 866, 867, 868, 869, 870, 872, 873, 874, 876, 880, 887, 891, 892, 910, 916, 917, 922, 943, 961, 969], "string": [4, 6, 8, 11, 12, 13, 17, 27, 29, 31, 32, 36, 51, 59, 70, 71, 93, 99, 100, 110, 119, 120, 121, 124, 132, 149, 153, 154, 155, 156, 170, 196, 202, 211, 216, 220, 222, 226, 229, 249, 256, 287, 306, 310, 349, 353, 359, 371, 377, 388, 413, 433, 447, 448, 449, 450, 451, 453, 454, 455, 470, 473, 474, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 528, 530, 532, 533, 547, 554, 557, 566, 577, 591, 600, 607, 608, 609, 610, 615, 633, 640, 645, 651, 654, 655, 673, 706, 724, 729, 776, 780, 786, 798, 813, 896, 897, 898, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 941, 961, 969], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 607, 629, 673], "activ": [5, 9, 15, 16, 18, 19, 20, 21, 24, 282, 701], "bool": [5, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 60, 65, 67, 68, 71, 86, 87, 91, 93, 99, 100, 104, 108, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 130, 132, 133, 134, 146, 147, 149, 150, 152, 153, 154, 155, 160, 161, 163, 164, 165, 170, 182, 184, 194, 200, 202, 208, 213, 216, 217, 218, 219, 222, 224, 226, 233, 235, 236, 239, 249, 259, 260, 261, 262, 263, 273, 279, 280, 282, 296, 299, 301, 304, 309, 318, 319, 320, 321, 322, 323, 338, 352, 354, 364, 365, 366, 367, 368, 381, 382, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 403, 410, 411, 417, 418, 430, 432, 440, 442, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 461, 462, 467, 469, 470, 474, 476, 478, 488, 489, 490, 494, 495, 497, 499, 504, 516, 519, 522, 524, 525, 527, 528, 534, 537, 552, 562, 564, 566, 577, 591, 593, 595, 600, 602, 604, 605, 608, 609, 614, 615, 619, 623, 627, 636, 637, 638, 640, 645, 646, 647, 651, 659, 661, 662, 665, 673, 679, 680, 681, 682, 691, 698, 699, 701, 715, 718, 720, 722, 727, 732, 739, 740, 741, 742, 743, 744, 761, 779, 781, 792, 794, 795, 796, 802, 806, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 854, 855, 857, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 878, 880, 881, 886, 891, 893, 898, 900, 902, 912, 913, 914, 918, 919, 921, 923, 942, 943, 944, 947, 950, 952, 961], "decim": [5, 27, 29, 249, 456, 577, 875, 961], "temporari": 5, "remov": [5, 7, 138, 221, 249, 263, 369, 486, 492, 498, 499, 544, 551, 559, 564, 577, 597, 648, 673, 910, 916, 922, 923], "later": 5, "onc": [5, 99, 100, 103, 126, 130, 131, 194, 229, 249, 263, 457, 577, 592, 655, 673, 682, 876, 961], "stabil": 5, "happen": 5, "being": [5, 69, 99, 100, 110, 115, 220, 221, 249, 263, 323, 353, 447, 448, 449, 450, 451, 453, 454, 455, 543, 577, 648, 673, 743, 780, 809, 857, 961, 969], "consid": [5, 69, 99, 100, 110, 115, 131, 140, 150, 176, 218, 220, 221, 249, 263, 312, 313, 314, 323, 353, 447, 448, 449, 450, 451, 453, 454, 455, 537, 546, 577, 598, 611, 618, 623, 646, 648, 673, 682, 733, 734, 735, 743, 780, 809, 822, 857, 878, 879, 880, 961], "break": [5, 69, 115, 220, 221, 249, 263, 323, 353, 447, 448, 449, 450, 451, 453, 454, 455, 577, 648, 673, 743, 780, 809, 857, 961], "chang": [5, 25, 60, 69, 99, 100, 115, 220, 221, 222, 249, 263, 323, 324, 353, 434, 447, 448, 449, 450, 451, 453, 454, 455, 577, 648, 673, 743, 780, 809, 853, 857, 886, 961], "current": [5, 8, 25, 87, 93, 101, 130, 133, 134, 249, 300, 353, 434, 577, 588, 593, 594, 673, 732, 736, 780, 853, 961], "alpha": [5, 67, 263, 366, 367, 368, 577, 595, 600, 602, 627, 636, 673, 794, 795, 796, 961], "state": [5, 7, 67, 79, 537, 588, 595, 600, 602, 627, 636, 673], "cfg": [6, 7, 8, 14, 128], "previous": 6, "save": [6, 352, 588, 779], "share": [6, 51, 142, 249, 793, 961], "option": [6, 7, 8, 25, 29, 37, 60, 70, 99, 102, 103, 104, 108, 111, 112, 114, 116, 119, 120, 121, 122, 123, 124, 125, 166, 170, 176, 208, 217, 249, 401, 446, 447, 448, 449, 450, 451, 453, 454, 455, 467, 493, 552, 566, 570, 577, 588, 614, 615, 623, 673, 829, 833, 865, 866, 867, 868, 869, 870, 872, 873, 874, 880, 891, 917, 940, 961], "paramet": [6, 10, 11, 12, 13, 14, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 38, 45, 48, 50, 52, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 130, 131, 132, 133, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 166, 167, 168, 169, 170, 172, 174, 176, 177, 179, 180, 182, 183, 184, 186, 188, 189, 190, 192, 193, 194, 196, 198, 199, 201, 202, 203, 204, 205, 208, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 231, 234, 241, 243, 249, 256, 258, 260, 262, 263, 273, 278, 279, 280, 281, 282, 285, 286, 287, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 335, 349, 352, 353, 354, 356, 358, 359, 362, 364, 365, 366, 367, 368, 369, 372, 374, 375, 379, 380, 381, 382, 383, 384, 387, 388, 392, 401, 403, 405, 406, 410, 411, 412, 413, 424, 426, 430, 432, 433, 434, 435, 436, 439, 440, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 502, 503, 504, 505, 508, 509, 514, 515, 516, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 546, 547, 548, 550, 551, 552, 553, 554, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 577, 591, 593, 595, 597, 598, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 611, 614, 615, 618, 619, 623, 624, 626, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 657, 660, 667, 669, 673, 678, 681, 682, 691, 697, 698, 699, 700, 701, 704, 705, 706, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 732, 733, 734, 735, 739, 740, 741, 742, 743, 744, 745, 746, 747, 751, 752, 753, 758, 776, 779, 780, 781, 783, 785, 786, 789, 792, 793, 794, 795, 796, 799, 800, 801, 802, 807, 808, 809, 812, 813, 822, 828, 829, 833, 835, 840, 853, 857, 858, 859, 860, 861, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 887, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 926, 927, 929, 932, 933, 939, 940, 941, 942, 943, 944, 946, 947, 950, 951, 952, 953, 961], "json": [6, 8, 31, 32, 106, 107, 113, 249, 482, 483, 588, 607, 629, 654, 673, 906, 907], "produc": [6, 121, 122, 124, 280, 419, 553, 619, 673, 699], "reset": [7, 128], "default": [7, 12, 25, 26, 27, 29, 30, 31, 32, 33, 65, 86, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 103, 108, 110, 119, 120, 121, 122, 123, 124, 127, 140, 142, 154, 156, 157, 167, 170, 176, 182, 184, 192, 193, 194, 203, 210, 218, 220, 223, 227, 249, 295, 299, 300, 310, 352, 364, 366, 367, 368, 383, 406, 413, 428, 429, 434, 440, 457, 463, 472, 480, 486, 488, 492, 493, 498, 499, 520, 527, 534, 548, 552, 559, 562, 564, 565, 566, 569, 577, 598, 600, 608, 610, 615, 623, 638, 641, 646, 649, 654, 673, 714, 718, 719, 729, 779, 792, 793, 794, 795, 796, 807, 840, 849, 850, 853, 859, 876, 887, 895, 904, 910, 912, 916, 917, 922, 951, 961, 969], "note": [7, 17, 29, 37, 60, 70, 86, 87, 88, 90, 92, 93, 97, 99, 101, 102, 108, 110, 111, 120, 122, 124, 126, 127, 128, 130, 131, 136, 145, 155, 156, 166, 167, 169, 170, 180, 183, 192, 193, 209, 212, 217, 221, 222, 226, 249, 263, 282, 299, 321, 322, 326, 327, 349, 353, 359, 388, 394, 396, 447, 448, 449, 450, 451, 453, 454, 455, 467, 484, 486, 487, 492, 498, 499, 507, 515, 537, 546, 561, 570, 577, 595, 602, 603, 609, 610, 611, 615, 618, 630, 636, 648, 651, 673, 682, 701, 718, 741, 742, 776, 786, 879, 880, 886, 891, 908, 910, 911, 916, 922, 931, 961], "oper": [7, 29, 51, 68, 76, 77, 86, 88, 89, 90, 91, 92, 99, 108, 131, 144, 149, 154, 161, 171, 177, 180, 182, 183, 187, 207, 212, 213, 217, 220, 228, 229, 249, 256, 257, 260, 300, 318, 319, 320, 321, 322, 323, 365, 379, 381, 382, 400, 403, 410, 422, 424, 426, 430, 432, 436, 442, 505, 515, 522, 523, 524, 532, 533, 543, 577, 602, 608, 611, 614, 618, 623, 624, 655, 673, 681, 739, 740, 741, 742, 743, 861, 938, 942, 943, 944, 952, 961], "from": [7, 27, 29, 60, 68, 70, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 137, 138, 142, 144, 153, 155, 156, 167, 168, 170, 171, 176, 188, 192, 194, 196, 217, 218, 220, 222, 249, 318, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 369, 387, 401, 428, 429, 434, 457, 470, 480, 482, 488, 499, 517, 519, 530, 540, 541, 542, 564, 565, 576, 577, 597, 602, 607, 609, 610, 615, 623, 629, 630, 633, 646, 652, 673, 681, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 793, 829, 833, 849, 850, 851, 853, 876, 904, 906, 912, 923, 950, 953, 961, 969], "environ": [7, 25, 123, 126], "local": [7, 102, 111, 352, 754, 755, 779, 784, 854, 855, 961], "non": [7, 29, 37, 60, 91, 168, 176, 196, 221, 226, 249, 388, 434, 446, 447, 448, 449, 450, 451, 453, 454, 455, 475, 481, 530, 532, 533, 554, 557, 566, 577, 623, 633, 648, 651, 673, 719, 813, 853, 865, 866, 867, 868, 869, 870, 872, 873, 874, 899, 905, 943, 961], "env": [7, 125], "back": [7, 60, 144, 213, 249, 433, 577, 681, 944, 961], "valu": [7, 10, 11, 14, 25, 27, 29, 31, 45, 46, 51, 58, 60, 68, 69, 71, 89, 91, 99, 100, 101, 110, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 137, 140, 144, 145, 146, 150, 153, 155, 156, 157, 158, 162, 166, 167, 172, 173, 174, 175, 176, 178, 180, 182, 184, 185, 186, 188, 192, 193, 194, 198, 199, 202, 203, 204, 205, 208, 209, 213, 216, 220, 221, 222, 223, 232, 233, 235, 236, 237, 239, 240, 249, 255, 256, 257, 259, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 280, 281, 284, 285, 286, 288, 290, 291, 292, 294, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 317, 319, 322, 323, 324, 326, 327, 329, 333, 346, 350, 360, 365, 366, 367, 368, 370, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 393, 394, 396, 397, 398, 399, 402, 403, 404, 407, 409, 410, 411, 413, 414, 415, 416, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 439, 440, 443, 446, 447, 448, 449, 450, 451, 453, 454, 455, 457, 458, 459, 460, 461, 464, 465, 466, 467, 469, 470, 471, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 489, 490, 493, 495, 496, 497, 502, 505, 507, 509, 510, 511, 512, 514, 515, 516, 517, 518, 519, 522, 524, 526, 530, 533, 535, 537, 538, 539, 545, 546, 552, 554, 555, 556, 557, 558, 561, 562, 567, 570, 577, 591, 598, 603, 604, 609, 610, 612, 613, 620, 621, 622, 623, 625, 628, 630, 634, 635, 640, 641, 642, 645, 648, 649, 654, 658, 659, 661, 662, 663, 665, 666, 673, 677, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 699, 700, 703, 704, 705, 707, 709, 710, 711, 713, 717, 720, 722, 723, 724, 725, 729, 730, 733, 734, 735, 737, 738, 743, 744, 745, 746, 748, 749, 752, 756, 773, 777, 787, 793, 794, 795, 796, 799, 800, 801, 804, 806, 807, 808, 809, 810, 812, 813, 815, 817, 818, 820, 821, 823, 824, 825, 826, 830, 835, 840, 841, 842, 844, 845, 847, 849, 850, 851, 852, 853, 856, 857, 858, 859, 865, 866, 867, 868, 869, 870, 872, 873, 874, 876, 877, 878, 879, 880, 883, 884, 888, 889, 890, 891, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 911, 913, 914, 917, 919, 920, 921, 926, 931, 932, 933, 934, 935, 936, 944, 945, 948, 950, 952, 953, 961, 969], "exampl": [7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 51, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 100, 101, 102, 103, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 542, 543, 544, 545, 546, 547, 548, 550, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 564, 565, 566, 567, 568, 569, 570, 577, 588, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 700, 701, 702, 705, 706, 708, 713, 714, 715, 717, 719, 726, 727, 729, 730, 731, 732, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 799, 800, 801, 802, 804, 807, 808, 809, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 834, 839, 840, 841, 842, 843, 844, 845, 846, 847, 853, 854, 855, 857, 858, 859, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 883, 887, 888, 889, 890, 892, 893, 895, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 919, 920, 921, 922, 923, 930, 931, 932, 933, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 961], "ascii": [9, 17, 485, 487, 491, 502, 909, 911, 915, 926], "charact": [9, 11, 17, 23, 27, 99, 100, 110, 249, 349, 479, 484, 485, 486, 491, 492, 494, 495, 498, 502, 627, 673, 776, 903, 908, 909, 910, 915, 916, 918, 919, 922, 926], "displai": [9, 10, 11, 14, 16, 20, 22, 29, 249], "tabl": [9, 13, 14, 16, 17, 18, 19, 20, 22, 23, 28, 29, 50, 86, 93, 99, 100, 102, 110, 111, 184, 207, 213, 220, 221, 249, 648, 673, 944, 961], "outlin": 9, "fals": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 29, 31, 33, 60, 65, 67, 70, 87, 91, 93, 99, 100, 103, 104, 108, 110, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 130, 132, 133, 134, 137, 149, 150, 152, 153, 154, 155, 160, 161, 163, 164, 165, 167, 170, 171, 174, 179, 180, 182, 184, 185, 192, 193, 194, 200, 202, 208, 213, 216, 217, 218, 222, 224, 226, 232, 233, 235, 236, 237, 239, 242, 249, 259, 260, 261, 263, 273, 279, 282, 296, 299, 301, 318, 319, 320, 321, 322, 323, 338, 352, 354, 364, 365, 366, 367, 368, 381, 382, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 403, 410, 411, 430, 432, 440, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 459, 462, 467, 469, 470, 474, 478, 482, 488, 489, 490, 494, 495, 497, 499, 516, 519, 522, 524, 527, 528, 534, 537, 552, 562, 564, 566, 570, 577, 591, 593, 594, 595, 600, 602, 608, 609, 614, 615, 617, 619, 627, 636, 637, 638, 640, 645, 646, 651, 658, 659, 661, 662, 663, 665, 668, 673, 681, 691, 701, 715, 718, 720, 727, 731, 732, 739, 740, 741, 742, 743, 744, 761, 779, 781, 792, 794, 795, 796, 802, 813, 814, 815, 817, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 833, 846, 854, 855, 857, 859, 860, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 878, 881, 886, 891, 893, 898, 902, 906, 912, 913, 914, 918, 919, 921, 923, 942, 943, 944, 947, 950, 952, 953, 961], "revert": 9, "abc": [9, 15, 16, 18, 19, 20, 21, 22, 256, 489, 577, 913], "xyz": [9, 15, 16, 18, 19, 20, 21, 22, 256, 475, 481, 577, 899, 905, 940, 961], "f64": [9, 13, 15, 16, 18, 19, 20, 21, 22, 60, 62, 64, 69, 89, 115, 122, 133, 134, 136, 137, 138, 141, 145, 146, 149, 152, 153, 154, 161, 169, 170, 174, 175, 184, 185, 186, 201, 202, 203, 223, 226, 229, 233, 235, 236, 237, 238, 239, 241, 242, 249, 255, 265, 266, 267, 268, 269, 270, 291, 309, 311, 315, 316, 323, 326, 327, 354, 364, 365, 366, 367, 368, 369, 370, 378, 379, 381, 382, 387, 394, 396, 397, 398, 400, 401, 403, 406, 407, 408, 410, 414, 415, 416, 423, 426, 428, 429, 430, 434, 436, 439, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 465, 466, 467, 471, 472, 511, 512, 515, 520, 529, 530, 532, 534, 536, 544, 555, 556, 559, 564, 565, 569, 577, 593, 597, 603, 604, 608, 614, 615, 621, 622, 628, 640, 641, 649, 651, 652, 655, 659, 661, 662, 663, 664, 665, 667, 668, 673, 683, 684, 685, 686, 687, 688, 730, 737, 738, 743, 744, 745, 781, 795, 796, 800, 804, 809, 853, 857, 865, 867, 868, 870, 871, 872, 874, 875, 889, 890, 894, 935, 936, 949, 961, 969], "fmt": [10, 386, 547, 577, 612, 673, 923], "floatfmt": 10, "mix": [10, 499, 745, 923, 961], "control": [10, 29, 120, 249, 600, 673], "how": [10, 29, 51, 68, 71, 89, 92, 101, 140, 169, 220, 221, 249, 280, 281, 310, 324, 387, 433, 443, 570, 577, 598, 614, 648, 673, 699, 700, 729, 746, 961], "float": [10, 29, 39, 40, 69, 115, 117, 118, 119, 122, 124, 137, 142, 145, 170, 186, 194, 199, 241, 249, 279, 280, 311, 312, 313, 314, 326, 327, 354, 364, 365, 366, 367, 368, 373, 378, 381, 382, 387, 390, 393, 394, 396, 397, 398, 403, 406, 410, 414, 423, 428, 429, 430, 436, 439, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 461, 515, 529, 539, 555, 556, 560, 562, 565, 567, 569, 577, 603, 615, 628, 635, 636, 667, 673, 698, 699, 727, 730, 733, 734, 735, 744, 745, 747, 781, 792, 793, 794, 795, 796, 800, 804, 809, 819, 833, 836, 842, 843, 849, 850, 856, 857, 858, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 879, 880, 891, 895, 931, 951, 961, 969], "point": [10, 29, 39, 40, 122, 124, 145, 155, 171, 249, 311, 326, 327, 354, 373, 378, 394, 396, 456, 457, 577, 603, 609, 619, 630, 673, 730, 781, 800, 804, 819, 875, 876, 961], "full": [10, 36, 66, 99, 100, 102, 110, 111, 619, 673], "format": [10, 13, 17, 27, 29, 98, 99, 100, 110, 115, 143, 153, 167, 176, 193, 209, 247, 249, 353, 356, 488, 499, 524, 601, 607, 623, 654, 673, 783, 912, 923, 960], "number": [10, 11, 12, 14, 22, 23, 27, 29, 33, 60, 80, 86, 88, 90, 92, 96, 97, 99, 100, 103, 110, 113, 120, 122, 123, 125, 126, 127, 132, 133, 142, 143, 145, 146, 158, 167, 168, 171, 172, 179, 180, 194, 198, 199, 203, 205, 216, 220, 223, 232, 234, 243, 249, 274, 281, 286, 294, 298, 300, 302, 308, 317, 323, 324, 336, 339, 344, 346, 354, 360, 361, 363, 366, 367, 368, 372, 374, 380, 384, 394, 396, 404, 405, 446, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 460, 461, 463, 472, 484, 487, 489, 495, 496, 508, 514, 520, 534, 535, 550, 559, 564, 565, 568, 569, 577, 591, 593, 601, 602, 603, 604, 611, 618, 627, 634, 635, 638, 641, 643, 645, 649, 658, 660, 669, 673, 700, 705, 713, 717, 719, 726, 732, 743, 746, 759, 762, 771, 773, 781, 787, 788, 790, 793, 794, 795, 796, 799, 801, 808, 819, 835, 846, 847, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 883, 884, 887, 895, 908, 911, 913, 919, 920, 932, 946, 951, 961, 969], "int": [11, 12, 14, 22, 23, 27, 29, 33, 37, 62, 89, 92, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 133, 142, 145, 146, 148, 157, 158, 159, 161, 166, 167, 168, 170, 172, 173, 174, 178, 179, 180, 190, 192, 194, 197, 198, 199, 201, 203, 204, 205, 206, 211, 214, 216, 220, 223, 225, 227, 234, 243, 249, 256, 279, 280, 281, 285, 286, 294, 295, 298, 299, 300, 302, 308, 312, 313, 314, 323, 324, 366, 367, 368, 372, 373, 374, 380, 383, 384, 405, 432, 434, 436, 440, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 463, 468, 472, 480, 485, 488, 489, 491, 493, 495, 496, 502, 508, 509, 510, 514, 520, 522, 527, 534, 535, 539, 540, 541, 542, 548, 550, 556, 558, 559, 562, 564, 565, 566, 567, 568, 569, 577, 591, 593, 602, 603, 604, 611, 615, 618, 627, 634, 635, 638, 639, 641, 643, 644, 645, 649, 650, 653, 660, 669, 673, 689, 690, 698, 699, 700, 704, 705, 713, 714, 717, 718, 719, 726, 727, 731, 732, 733, 734, 735, 743, 746, 793, 794, 795, 796, 799, 800, 801, 807, 808, 809, 832, 834, 835, 842, 846, 847, 849, 850, 851, 852, 853, 856, 859, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 880, 883, 884, 887, 892, 895, 904, 909, 912, 913, 915, 917, 919, 920, 926, 931, 932, 933, 934, 941, 946, 951, 961, 969], "size": [12, 33, 99, 100, 120, 121, 122, 124, 126, 142, 155, 220, 249, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 527, 577, 609, 638, 673, 793, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 961, 969], "overwrit": [12, 28, 86, 88, 89, 90, 92, 99, 100, 110, 130, 249, 602, 673], "chunk": [12, 33, 96, 99, 100, 108, 110, 112, 113, 114, 122, 124, 144, 168, 179, 249, 262, 441, 577, 638, 673, 681, 731, 805, 846, 860, 938, 961], "stream": [12, 30, 67, 154, 218, 249, 595, 600, 602, 608, 619, 623, 627, 636, 637, 638, 646, 673], "engin": [12, 28, 101, 126, 131, 154, 218, 231, 249, 608, 619, 623, 646, 657, 673, 682, 961], "By": [12, 99, 100, 103, 110, 170, 203, 223, 249, 472, 488, 520, 534, 552, 559, 564, 565, 569, 577, 615, 641, 649, 673, 895, 912, 943, 951, 961], "determin": [12, 29, 58, 60, 68, 89, 92, 99, 100, 103, 108, 110, 114, 131, 149, 155, 156, 167, 168, 217, 222, 249, 300, 310, 338, 352, 413, 419, 443, 447, 448, 449, 450, 451, 453, 454, 455, 467, 577, 609, 610, 673, 719, 729, 761, 779, 809, 840, 891, 961], "schema": [12, 51, 61, 62, 63, 68, 71, 81, 82, 84, 86, 88, 89, 90, 92, 93, 99, 100, 105, 109, 110, 113, 120, 122, 131, 133, 134, 141, 142, 177, 180, 249, 300, 419, 522, 566, 577, 593, 594, 599, 619, 624, 654, 657, 673, 736, 961], "thread": [12, 27, 96, 99, 100, 101, 126, 249, 263, 282, 577, 701], "pool": [12, 126], "For": [12, 29, 101, 102, 103, 111, 144, 156, 169, 170, 231, 249, 300, 309, 366, 367, 368, 420, 442, 467, 537, 546, 547, 577, 610, 615, 657, 673, 681, 794, 795, 796, 861, 891, 943, 961], "some": [12, 25, 29, 89, 99, 100, 110, 140, 249, 598, 673, 820, 961, 969], "dataset": [12, 99, 100, 110, 115, 401, 577, 588, 619, 673, 833, 961], "esp": 12, "when": [12, 14, 16, 20, 29, 33, 51, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 94, 99, 100, 101, 104, 108, 110, 111, 112, 113, 122, 124, 131, 132, 141, 142, 144, 146, 149, 155, 183, 192, 196, 202, 210, 216, 218, 249, 312, 313, 314, 352, 366, 367, 368, 374, 411, 413, 420, 469, 470, 486, 492, 498, 499, 528, 537, 546, 577, 591, 604, 609, 619, 633, 638, 640, 645, 646, 673, 681, 733, 734, 735, 779, 793, 794, 795, 796, 801, 840, 879, 880, 910, 916, 922, 939, 961], "have": [12, 25, 29, 60, 71, 87, 99, 100, 103, 122, 124, 144, 167, 187, 193, 209, 249, 323, 366, 367, 368, 420, 440, 499, 577, 623, 636, 653, 673, 681, 743, 794, 795, 796, 806, 859, 923, 961, 969], "larg": 12, "element": [12, 22, 97, 121, 124, 127, 132, 166, 184, 192, 203, 216, 223, 249, 263, 265, 266, 267, 268, 269, 270, 280, 282, 283, 308, 315, 316, 318, 319, 320, 321, 322, 323, 370, 383, 392, 407, 408, 434, 440, 443, 458, 464, 465, 466, 471, 472, 495, 496, 511, 512, 514, 520, 534, 559, 564, 565, 569, 577, 591, 641, 645, 649, 673, 682, 683, 684, 685, 686, 687, 688, 699, 701, 702, 726, 732, 737, 738, 739, 740, 741, 742, 743, 797, 802, 808, 820, 832, 835, 837, 838, 853, 859, 877, 888, 889, 890, 894, 895, 919, 920, 932, 935, 936, 941, 946, 947, 951, 961], "too": 12, "optimist": 12, "lead": [12, 93, 115, 249, 459, 486, 498, 502, 509, 519, 534, 564, 577, 619, 657, 673, 881, 910, 922, 926, 961], "out": [12, 93, 116, 156, 249, 285, 299, 304, 390, 393, 474, 476, 570, 577, 610, 637, 638, 673, 704, 718, 722, 898, 900], "memori": [12, 33, 68, 86, 87, 90, 91, 92, 99, 100, 104, 108, 110, 112, 113, 114, 130, 131, 144, 200, 231, 249, 441, 462, 577, 638, 657, 673, 681, 682, 860, 885, 886, 961], "error": [12, 72, 99, 100, 110, 192, 249, 287, 299, 304, 309, 400, 474, 476, 482, 483, 499, 577, 657, 706, 718, 722, 727, 898, 900, 906, 907, 923, 961], "row": [12, 17, 22, 27, 29, 31, 33, 60, 61, 63, 78, 80, 85, 89, 90, 92, 93, 99, 100, 103, 104, 108, 110, 112, 113, 114, 117, 120, 122, 131, 132, 133, 140, 144, 147, 149, 153, 155, 157, 158, 163, 165, 166, 167, 168, 170, 171, 172, 176, 180, 194, 201, 205, 206, 209, 211, 216, 218, 220, 221, 227, 231, 234, 243, 249, 263, 274, 283, 371, 384, 405, 434, 444, 468, 470, 479, 508, 528, 537, 538, 546, 550, 554, 557, 561, 568, 570, 577, 591, 593, 595, 598, 602, 605, 606, 609, 611, 615, 616, 618, 619, 623, 638, 639, 643, 644, 645, 646, 648, 653, 657, 660, 669, 673, 681, 702, 798, 808, 832, 853, 863, 892, 903, 932, 961, 969], "per": [12, 27, 29, 120, 122, 132, 153, 180, 181, 202, 216, 238, 240, 241, 249, 263, 282, 285, 299, 470, 528, 577, 591, 640, 645, 664, 666, 667, 673, 701, 704, 718], "everi": [12, 99, 100, 110, 155, 206, 209, 222, 249, 276, 277, 281, 283, 285, 286, 295, 298, 318, 319, 320, 321, 322, 323, 353, 359, 371, 479, 510, 537, 538, 577, 602, 609, 644, 673, 695, 696, 700, 702, 704, 705, 714, 717, 739, 740, 741, 742, 743, 780, 786, 798, 903, 934, 961], "process": [12, 27, 126, 249, 637, 638, 673], "liter": [13, 17, 65, 70, 103, 123, 124, 125, 153, 167, 173, 174, 178, 179, 182, 192, 193, 196, 204, 208, 221, 226, 249, 259, 261, 303, 329, 365, 372, 379, 381, 382, 388, 400, 403, 410, 424, 426, 430, 436, 441, 474, 489, 490, 505, 515, 527, 530, 532, 533, 540, 541, 552, 554, 557, 562, 566, 577, 604, 633, 648, 651, 673, 679, 680, 721, 752, 799, 813, 879, 880, 898, 913, 914, 961], "left": [13, 70, 117, 118, 155, 156, 169, 170, 221, 249, 366, 367, 368, 387, 388, 447, 448, 449, 450, 451, 453, 454, 455, 458, 485, 502, 513, 530, 537, 538, 546, 561, 570, 577, 609, 610, 614, 615, 648, 673, 794, 795, 796, 813, 877, 909, 926, 945, 961], "center": [13, 29, 249, 366, 367, 368, 446, 447, 448, 449, 450, 451, 453, 454, 455, 577, 794, 795, 796, 865, 866, 867, 868, 869, 870, 872, 873, 874, 961], "right": [13, 15, 29, 70, 99, 100, 117, 118, 155, 156, 169, 170, 249, 366, 367, 368, 388, 447, 448, 449, 450, 451, 453, 454, 455, 458, 467, 491, 530, 577, 609, 610, 614, 615, 673, 794, 795, 796, 813, 877, 891, 915, 961], "cell": 13, "align": [13, 29, 60, 249, 502, 926], "keyerror": [13, 17], "recognis": [13, 17, 119], "column_abc": 13, "column_xyz": 13, "visibl": [14, 142, 249, 793, 961], "eg": [14, 22, 29, 249, 353, 499, 515, 577], "low": [14, 126], "rang": [14, 29, 69, 70, 101, 137, 142, 155, 168, 249, 333, 346, 350, 351, 353, 359, 360, 387, 527, 532, 540, 541, 577, 609, 673, 744, 745, 756, 773, 777, 778, 780, 786, 787, 793, 853, 857, 961], "100": [14, 29, 89, 92, 99, 100, 110, 113, 249, 502, 527, 673, 866, 867, 869, 961, 969], "print": [14, 16, 22, 100, 116, 141, 153, 154, 168, 171, 211, 228, 249, 386, 542, 577, 612, 673, 820, 865, 941, 961, 969], "98": [14, 161, 249, 308, 469, 509, 514, 577], "99": [14, 29, 145, 146, 161, 164, 249, 257, 308, 372, 374, 469, 509, 514, 577, 603, 604, 673, 792, 799, 961], "tbl_col": 14, "10": [14, 26, 27, 29, 30, 33, 60, 68, 69, 70, 93, 101, 110, 122, 124, 134, 144, 152, 155, 156, 158, 160, 161, 162, 179, 183, 185, 189, 190, 196, 205, 226, 229, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 249, 262, 271, 272, 273, 275, 281, 286, 294, 295, 298, 312, 317, 319, 322, 324, 326, 327, 329, 352, 353, 359, 362, 383, 384, 387, 392, 400, 404, 405, 407, 434, 448, 468, 502, 508, 522, 530, 537, 543, 546, 548, 550, 552, 553, 559, 564, 568, 577, 595, 609, 610, 611, 613, 618, 626, 627, 633, 638, 642, 643, 651, 655, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 673, 682, 700, 705, 713, 714, 717, 733, 744, 746, 752, 779, 786, 789, 792, 808, 820, 835, 837, 853, 879, 880, 932, 961, 969], "95": [14, 257, 577], "96": [14, 257, 577], "97": [14, 161, 249, 257, 577], "move": [15, 366, 367, 368, 447, 448, 450, 454, 577, 794, 795, 796, 866, 867, 869, 873, 961], "inlin": 15, "parenthes": 15, "below": [16, 29, 102, 111, 140, 249, 387, 570, 577, 598, 673], "ascii_ful": 17, "ascii_full_condens": 17, "ascii_no_bord": 17, "ascii_borders_onli": 17, "ascii_borders_only_condens": 17, "ascii_horizontal_onli": 17, "ascii_markdown": 17, "utf8_ful": [17, 60, 93], "utf8_full_condens": [17, 93], "utf8_no_bord": 17, "utf8_borders_onli": 17, "utf8_horizontal_onli": 17, "noth": [17, 475, 480, 481, 483, 899, 904, 905, 907], "none": [17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 46, 50, 60, 69, 70, 71, 86, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 131, 133, 137, 140, 145, 146, 153, 155, 156, 157, 162, 166, 169, 170, 171, 174, 176, 180, 181, 184, 192, 194, 196, 199, 201, 202, 208, 210, 213, 217, 218, 219, 220, 221, 222, 226, 229, 249, 258, 262, 263, 275, 285, 295, 300, 302, 312, 313, 314, 317, 319, 322, 326, 327, 352, 353, 359, 366, 367, 368, 369, 372, 373, 374, 380, 383, 387, 388, 394, 395, 396, 397, 398, 404, 411, 413, 431, 434, 440, 441, 446, 447, 448, 449, 450, 451, 453, 454, 455, 457, 461, 462, 463, 464, 468, 469, 473, 474, 477, 478, 482, 483, 484, 485, 486, 487, 488, 491, 492, 493, 495, 496, 497, 498, 499, 502, 503, 504, 513, 523, 525, 527, 530, 533, 535, 541, 542, 544, 545, 552, 553, 554, 557, 562, 563, 565, 566, 569, 570, 577, 593, 594, 598, 603, 604, 609, 610, 613, 614, 615, 617, 619, 623, 633, 635, 636, 637, 638, 639, 640, 646, 647, 648, 651, 652, 654, 655, 657, 673, 682, 689, 690, 704, 714, 719, 732, 733, 744, 745, 747, 763, 764, 765, 770, 779, 780, 786, 791, 792, 794, 795, 796, 799, 800, 801, 803, 806, 807, 809, 811, 812, 813, 822, 825, 826, 829, 832, 833, 840, 841, 842, 843, 844, 848, 857, 858, 859, 865, 866, 867, 868, 869, 870, 872, 873, 874, 876, 882, 884, 887, 888, 891, 892, 895, 897, 898, 901, 902, 906, 907, 908, 909, 910, 911, 912, 915, 916, 917, 919, 920, 921, 922, 923, 937, 940, 941, 944, 945, 951, 952, 961], "rounded_corn": 17, "style": [17, 29, 184, 249], "border": 17, "line": [17, 29, 99, 100, 103, 110, 153, 163, 165, 249], "includ": [17, 25, 27, 29, 66, 102, 111, 122, 132, 137, 142, 155, 216, 217, 220, 249, 354, 388, 494, 495, 537, 577, 591, 609, 645, 673, 745, 781, 793, 813, 918, 919, 952, 961], "divid": [17, 353, 359, 366, 367, 368, 401, 577, 780, 786, 794, 795, 796, 833, 961], "same": [17, 29, 51, 60, 67, 71, 104, 110, 120, 131, 138, 154, 202, 218, 226, 229, 231, 249, 255, 262, 371, 433, 446, 447, 448, 449, 450, 451, 453, 454, 455, 470, 504, 531, 577, 597, 608, 619, 640, 646, 651, 655, 657, 673, 677, 681, 682, 752, 798, 865, 866, 867, 868, 869, 870, 872, 873, 874, 953, 961], "dens": [17, 153, 249, 440, 577, 859, 961], "space": 17, "horizont": [17, 68, 149, 160, 220, 249, 532, 533, 537, 538, 539, 543, 546, 554, 557, 561, 567], "markdown": 17, "compat": [17, 29, 33, 101, 249, 474, 475, 480, 481, 489, 490, 638, 673], "No": 17, "appli": [17, 27, 29, 68, 110, 119, 122, 124, 149, 183, 249, 333, 336, 338, 339, 340, 342, 344, 346, 347, 350, 351, 354, 360, 361, 363, 367, 368, 411, 435, 446, 447, 448, 450, 454, 499, 522, 523, 524, 527, 537, 538, 546, 553, 561, 577, 611, 618, 619, 626, 673, 754, 755, 756, 759, 761, 762, 766, 768, 771, 773, 774, 777, 778, 781, 784, 787, 788, 790, 795, 796, 865, 866, 867, 869, 873, 923, 961], "round": [17, 29, 62, 93, 249, 311, 378, 511, 577, 730, 804, 961], "corner": [17, 93], "op": [17, 124, 249, 443, 577, 673, 961], "The": [17, 28, 29, 33, 45, 52, 60, 66, 86, 88, 89, 90, 92, 96, 99, 101, 108, 110, 126, 131, 139, 141, 153, 154, 155, 156, 157, 162, 167, 170, 177, 182, 192, 193, 196, 219, 222, 226, 229, 231, 249, 299, 300, 302, 303, 304, 305, 333, 346, 349, 350, 353, 359, 360, 369, 372, 380, 383, 411, 433, 440, 443, 446, 447, 448, 449, 450, 451, 453, 454, 455, 464, 467, 473, 476, 477, 482, 484, 485, 486, 491, 492, 498, 502, 531, 544, 548, 563, 566, 570, 571, 573, 577, 578, 579, 583, 584, 585, 609, 610, 611, 613, 615, 618, 619, 624, 627, 633, 638, 647, 651, 655, 657, 673, 682, 718, 721, 722, 723, 732, 756, 773, 776, 777, 780, 786, 787, 799, 807, 812, 859, 865, 866, 867, 868, 869, 870, 872, 873, 874, 888, 891, 897, 900, 901, 906, 908, 909, 910, 915, 916, 922, 926, 955, 957, 961, 962, 965, 966, 967, 969], "one": [17, 28, 29, 60, 78, 86, 88, 89, 90, 91, 92, 123, 124, 125, 128, 146, 147, 153, 154, 155, 156, 167, 176, 184, 192, 193, 215, 230, 249, 257, 374, 400, 408, 446, 469, 509, 523, 554, 557, 567, 570, 577, 604, 605, 608, 609, 610, 623, 652, 656, 673, 681, 801, 829, 838, 865, 927, 961], "more": [17, 29, 31, 33, 60, 85, 86, 87, 88, 89, 90, 91, 92, 102, 108, 111, 122, 124, 128, 131, 136, 137, 167, 171, 176, 180, 192, 193, 194, 218, 231, 249, 260, 263, 301, 312, 313, 314, 400, 401, 408, 411, 432, 457, 467, 516, 554, 557, 567, 570, 577, 623, 638, 646, 657, 673, 682, 720, 733, 734, 735, 745, 829, 833, 876, 891, 947, 961, 969], "semigraph": 17, "box": [17, 131, 249], "draw": [17, 22, 23, 121, 969], "found": [17, 27, 73, 82, 84, 89, 93, 141, 221, 249, 458, 483, 499, 577, 648, 673, 877, 907, 961], "unicod": 17, "block": [17, 154, 218, 249, 608, 630, 646, 653, 673, 879, 880, 961], "http": [17, 29, 87, 101, 130, 136, 249, 480, 904], "en": [17, 29, 249], "wikipedia": 17, "org": [17, 87, 101, 130, 136, 249], "wiki": 17, "drawing_charact": 17, "box_draw": 17, "hide": [18, 19, 20, 21, 29, 249], "etc": [18, 29, 99, 102, 104, 108, 111, 112, 114, 249, 527, 879, 880, 961], "inform": [20, 66, 102, 111, 136, 249, 312, 313, 314, 401, 467, 577, 627, 673, 733, 734, 735, 833, 891, 961], "separ": [21, 27, 94, 96, 99, 100, 110, 182, 184, 210, 217, 219, 249, 263, 283, 287, 479, 533, 537, 538, 577, 647, 673, 702, 706, 903, 930, 939, 961], "between": [21, 68, 119, 120, 122, 124, 186, 241, 249, 287, 309, 325, 388, 434, 439, 451, 473, 534, 536, 559, 560, 564, 577, 628, 667, 673, 706, 727, 747, 813, 853, 858, 870, 897, 961], "set_tbl_column_data_type_inlin": 21, "max": [22, 29, 33, 126, 137, 146, 154, 155, 156, 184, 249, 312, 313, 319, 374, 433, 440, 447, 459, 496, 577, 604, 608, 609, 610, 638, 673, 719, 733, 734, 739, 745, 801, 859, 866, 881, 920, 961], "both": [22, 27, 51, 70, 101, 155, 156, 169, 170, 177, 192, 249, 262, 388, 447, 448, 449, 450, 451, 453, 454, 455, 577, 609, 610, 614, 615, 624, 673, 813, 822, 961], "tbl_row": 22, "width": [23, 29, 99, 100, 249, 485, 491, 502, 673, 909, 915, 926], "char": [23, 51, 71, 487, 911], "enabl": [24, 71, 196, 226, 249, 459, 577, 633, 651, 673, 881, 961], "addit": [24, 29, 89, 102, 111, 120, 138, 143, 154, 182, 196, 202, 219, 226, 229, 249, 256, 369, 372, 433, 470, 528, 530, 531, 532, 533, 544, 554, 557, 563, 566, 577, 597, 601, 608, 633, 640, 647, 651, 655, 673, 799, 961], "verbos": [24, 128], "debug": [24, 595, 602, 619, 673, 969], "log": [24, 62, 308, 364, 408, 426, 436, 514, 577, 726, 792, 946, 961], "if_set": 25, "env_onli": 25, "dict": [25, 29, 33, 61, 63, 66, 86, 88, 89, 90, 91, 92, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 114, 122, 167, 182, 188, 192, 193, 195, 208, 209, 249, 413, 577, 630, 632, 673, 840, 961], "show": [25, 29, 140, 153, 171, 181, 249, 598, 627, 636, 673], "variabl": [25, 94, 123, 126, 176, 210, 249, 623, 673, 939, 961], "restrict": [25, 496, 920], "dictionari": [25, 29, 86, 88, 89, 90, 92, 99, 100, 105, 109, 110, 167, 182, 192, 193, 208, 209, 249, 413, 577, 673, 745, 840, 961], "those": [25, 29, 99, 249, 440, 577, 859, 961], "been": [25, 29, 69, 94, 249, 440, 577, 859, 961], "set_fmt_float": 25, "directli": [25, 122, 124, 128, 366, 367, 368, 577, 673, 794, 795, 796, 961, 969], "via": [25, 99, 100, 103, 110, 112, 113, 114, 167, 193, 249, 263, 577], "set_stat": 25, "all_stat": 25, "file": [26, 27, 30, 31, 32, 33, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 144, 249, 602, 629, 637, 638, 654, 673, 681, 961], "binaryio": [26, 30, 98, 99, 103, 104, 105, 108, 109, 249], "bytesio": [26, 27, 29, 30, 33, 98, 99, 100, 103, 104, 108, 249], "path": [26, 27, 29, 30, 31, 32, 33, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 249, 459, 483, 577, 629, 637, 638, 654, 673, 881, 907, 961], "compress": [26, 30, 33, 249, 637, 638, 673], "avrocompress": [26, 249], "uncompress": [26, 30, 33, 104, 112, 249, 638, 673], "write": [26, 27, 28, 29, 30, 31, 33, 100, 104, 249, 312, 313, 314, 577, 617, 636, 638, 654, 673, 733, 734, 735, 961], "apach": [26, 33, 98, 101, 249], "avro": [26, 98, 249, 588], "should": [26, 27, 29, 30, 31, 32, 33, 86, 88, 90, 92, 94, 97, 102, 110, 119, 120, 124, 127, 130, 131, 138, 155, 167, 170, 192, 193, 209, 210, 219, 231, 249, 257, 263, 282, 310, 323, 362, 369, 394, 396, 446, 447, 448, 449, 450, 451, 453, 454, 455, 458, 467, 531, 544, 551, 552, 570, 577, 597, 609, 614, 615, 619, 636, 637, 638, 647, 654, 657, 673, 682, 701, 729, 743, 789, 865, 866, 867, 868, 869, 870, 872, 873, 874, 877, 891, 961], "written": [26, 27, 29, 30, 31, 32, 33, 249, 637, 638, 654, 673], "snappi": [26, 33, 249, 638, 673], "deflat": [26, 249], "import": [26, 27, 29, 30, 33, 36, 60, 70, 86, 90, 91, 110, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 137, 153, 155, 168, 170, 213, 220, 222, 249, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 542, 609, 615, 619, 673, 737, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 817, 821, 823, 824, 829, 865, 889, 935, 961, 969], "pathlib": [26, 27, 30, 33, 110, 249], "foo": [26, 27, 30, 31, 32, 33, 94, 131, 135, 136, 138, 139, 140, 141, 144, 147, 148, 149, 150, 151, 152, 157, 158, 159, 160, 161, 162, 164, 169, 173, 174, 175, 178, 181, 184, 186, 188, 189, 190, 192, 194, 195, 196, 197, 198, 199, 201, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 217, 218, 219, 223, 224, 225, 228, 249, 258, 279, 284, 285, 288, 289, 312, 313, 314, 349, 384, 386, 405, 444, 460, 461, 473, 475, 477, 479, 481, 486, 492, 494, 496, 498, 500, 501, 508, 510, 523, 526, 527, 529, 531, 534, 535, 536, 545, 549, 550, 554, 555, 556, 557, 558, 559, 560, 563, 564, 565, 568, 569, 570, 577, 596, 597, 598, 599, 605, 612, 613, 614, 630, 632, 633, 646, 647, 650, 652, 654, 673, 706, 733, 776, 863, 899, 901, 903, 905, 920, 961], "bar": [26, 27, 30, 31, 32, 33, 94, 131, 135, 136, 138, 139, 140, 141, 144, 147, 148, 149, 150, 151, 152, 158, 160, 161, 162, 164, 169, 173, 174, 175, 178, 181, 184, 186, 188, 189, 190, 192, 194, 195, 196, 198, 199, 201, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 218, 219, 223, 224, 228, 249, 258, 289, 386, 467, 477, 479, 494, 496, 523, 526, 529, 531, 534, 535, 536, 545, 550, 554, 555, 556, 557, 558, 559, 563, 564, 565, 568, 569, 570, 577, 596, 597, 598, 599, 605, 612, 613, 614, 630, 632, 633, 646, 647, 650, 654, 673, 706, 891, 901, 903, 920, 961], "ham": [26, 27, 30, 33, 94, 135, 136, 138, 139, 140, 141, 147, 148, 150, 157, 158, 160, 169, 173, 174, 175, 178, 181, 186, 188, 190, 192, 194, 195, 196, 198, 199, 201, 203, 204, 205, 210, 211, 212, 213, 214, 218, 223, 224, 249, 531, 596, 597, 598, 599, 605, 614, 630, 632, 633, 646, 652, 673], "d": [26, 27, 30, 33, 51, 68, 71, 89, 115, 137, 153, 157, 158, 161, 169, 205, 207, 220, 224, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 249, 256, 335, 356, 388, 435, 462, 475, 481, 495, 499, 530, 548, 577, 614, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 673, 758, 783, 813, 899, 905, 919, 923, 961], "e": [26, 27, 30, 33, 51, 71, 87, 99, 100, 103, 104, 108, 112, 114, 137, 153, 158, 205, 207, 220, 249, 256, 263, 364, 369, 388, 406, 413, 462, 467, 544, 570, 577, 617, 630, 673, 792, 813, 878, 891, 943, 961], "dirpath": [26, 27, 30, 33, 110, 249], "new_fil": [26, 27, 30, 33, 249], "has_head": [27, 29, 99, 100, 103, 110, 249], "quot": [27, 99, 100, 110, 249], "batch_siz": [27, 99, 100, 113, 249], "1024": [27, 33, 99, 100, 113, 249, 638, 673], "datetime_format": [27, 249], "date_format": [27, 249, 356], "time_format": [27, 249], "float_precis": [27, 29, 249], "null_valu": [27, 99, 100, 110, 249], "_io": [27, 30, 249], "comma": [27, 249], "csv": [27, 99, 100, 103, 110, 249, 588, 637, 638, 673], "result": [27, 31, 32, 60, 90, 92, 101, 102, 110, 112, 114, 115, 124, 144, 155, 180, 199, 213, 229, 249, 366, 367, 368, 372, 401, 433, 444, 446, 447, 448, 449, 450, 451, 453, 454, 455, 459, 461, 494, 495, 515, 527, 537, 538, 539, 553, 567, 577, 592, 609, 619, 627, 635, 637, 638, 654, 655, 673, 681, 794, 795, 796, 833, 863, 865, 866, 867, 868, 869, 870, 872, 873, 874, 881, 884, 918, 919, 943, 961, 969], "If": [27, 29, 30, 31, 32, 33, 51, 65, 66, 69, 70, 86, 87, 88, 89, 90, 91, 92, 94, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 123, 130, 131, 132, 140, 144, 153, 155, 156, 158, 166, 167, 170, 172, 176, 180, 193, 194, 201, 205, 209, 210, 212, 216, 217, 218, 220, 221, 249, 263, 295, 300, 312, 313, 314, 329, 352, 375, 401, 411, 413, 440, 442, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 463, 467, 468, 482, 484, 486, 487, 492, 493, 494, 495, 496, 498, 499, 523, 524, 525, 527, 534, 535, 537, 546, 552, 554, 557, 562, 564, 566, 570, 577, 591, 598, 600, 609, 610, 614, 615, 619, 623, 630, 638, 639, 645, 646, 648, 654, 657, 673, 681, 682, 714, 733, 734, 735, 744, 752, 779, 806, 808, 809, 832, 833, 835, 857, 859, 861, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 881, 887, 891, 892, 906, 908, 910, 911, 916, 917, 918, 919, 920, 922, 923, 932, 938, 943, 952, 961], "instead": [27, 31, 32, 65, 97, 99, 108, 122, 127, 131, 155, 167, 180, 182, 192, 193, 196, 213, 226, 249, 273, 484, 486, 492, 498, 527, 562, 566, 577, 603, 609, 633, 651, 654, 673, 691, 879, 880, 908, 910, 916, 922, 944, 961], "whether": [27, 70, 90, 92, 124, 249, 338, 352, 354, 417, 418, 459, 577, 619, 673, 761, 779, 781], "header": [27, 29, 33, 93, 99, 100, 103, 110, 141, 184, 217, 249, 638, 673], "field": [27, 52, 82, 84, 89, 219, 249, 300, 413, 482, 495, 496, 504, 537, 538, 553, 566, 577, 647, 673, 719, 919, 920, 929, 930], "symbol": [27, 249], "byte": [27, 99, 100, 103, 104, 105, 108, 109, 110, 142, 249, 303, 306, 307, 484, 487, 638, 673, 721, 724, 725, 793, 908, 911, 961], "specifi": [27, 29, 60, 70, 73, 82, 84, 103, 122, 132, 138, 142, 143, 146, 154, 182, 192, 196, 202, 216, 219, 226, 229, 249, 366, 367, 368, 369, 374, 413, 433, 443, 470, 485, 491, 528, 530, 531, 532, 533, 544, 554, 557, 563, 566, 577, 591, 597, 601, 604, 608, 633, 640, 645, 647, 651, 655, 673, 793, 794, 795, 796, 801, 909, 915, 961], "defin": [27, 29, 36, 70, 119, 120, 122, 131, 155, 156, 180, 183, 231, 249, 263, 299, 388, 435, 447, 448, 449, 450, 451, 453, 454, 455, 525, 552, 566, 577, 609, 610, 626, 657, 673, 682, 718, 813, 961], "chrono": [27, 249, 356, 499, 783, 923], "rust": [27, 33, 79, 104, 108, 131, 231, 249, 657, 682, 961], "crate": [27, 249, 474, 475, 480, 481, 489, 490], "fraction": [27, 117, 118, 194, 249, 354, 434, 457, 499, 577, 781, 853, 876, 961], "second": [27, 70, 121, 155, 156, 170, 222, 249, 349, 353, 359, 447, 448, 449, 450, 451, 453, 454, 455, 499, 541, 542, 570, 577, 609, 610, 615, 673, 776, 780, 786, 969], "precis": [27, 29, 37, 167, 193, 209, 249, 328, 499, 751], "infer": [27, 86, 88, 89, 90, 91, 92, 99, 100, 103, 110, 113, 131, 249, 444, 482, 499, 577, 673, 863, 906, 923, 961], "maximum": [27, 99, 100, 110, 120, 121, 122, 124, 173, 249, 276, 414, 428, 440, 554, 577, 620, 673, 695, 733, 763, 841, 849, 854, 859, 961], "timeunit": [27, 36, 38, 70, 249, 328, 329, 358, 362, 751, 752, 785, 789], "frame": [27, 28, 29, 60, 89, 117, 122, 131, 133, 167, 168, 177, 180, 183, 192, 193, 213, 220, 249, 593, 624, 626, 673, 732, 961, 969], "datetim": [27, 29, 60, 70, 91, 93, 137, 153, 155, 156, 168, 170, 222, 249, 279, 280, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 447, 448, 449, 450, 451, 453, 454, 455, 499, 513, 542, 548, 552, 577, 609, 610, 615, 673, 698, 699, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 829, 849, 850, 880, 923, 945, 961], "place": [27, 132, 139, 160, 161, 189, 198, 199, 202, 216, 224, 249, 273, 287, 294, 460, 461, 469, 577, 591, 634, 635, 640, 645, 673, 691, 706, 713, 860, 862, 883, 884, 893, 961], "float64": [27, 29, 89, 97, 99, 122, 127, 141, 142, 149, 195, 213, 226, 249, 265, 266, 267, 268, 269, 270, 309, 315, 316, 354, 369, 394, 396, 465, 466, 511, 512, 531, 544, 577, 599, 632, 651, 673, 781, 944, 949, 961], "datatyp": [27, 31, 45, 58, 86, 88, 89, 90, 92, 95, 97, 103, 105, 109, 124, 127, 141, 143, 149, 195, 249, 283, 309, 369, 462, 479, 513, 531, 544, 552, 577, 588, 601, 632, 654, 673, 682, 702, 727, 745, 822, 827, 829, 831, 885, 903, 945, 961], "repres": [27, 46, 58, 70, 86, 88, 90, 91, 92, 203, 223, 249, 394, 396, 472, 520, 531, 534, 544, 552, 559, 564, 565, 569, 577, 641, 649, 673, 880, 895, 951, 961], "null": [27, 60, 68, 89, 99, 100, 110, 115, 130, 132, 133, 137, 140, 146, 149, 150, 162, 169, 174, 175, 181, 184, 186, 198, 199, 202, 203, 204, 208, 213, 216, 219, 221, 223, 226, 249, 258, 262, 263, 273, 281, 284, 285, 288, 294, 299, 300, 302, 304, 312, 313, 314, 317, 319, 322, 324, 326, 327, 334, 337, 341, 343, 345, 348, 355, 366, 367, 368, 369, 372, 373, 374, 375, 380, 387, 394, 395, 396, 397, 398, 404, 413, 431, 434, 441, 446, 447, 448, 449, 450, 451, 453, 454, 455, 460, 461, 462, 464, 469, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 487, 488, 491, 493, 495, 496, 497, 502, 503, 504, 513, 521, 523, 530, 532, 533, 544, 552, 566, 570, 577, 591, 593, 598, 604, 613, 614, 634, 635, 640, 645, 647, 648, 651, 652, 654, 673, 682, 691, 700, 713, 718, 719, 722, 732, 733, 746, 749, 757, 760, 767, 769, 772, 775, 782, 794, 795, 796, 799, 801, 806, 825, 826, 852, 853, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 878, 883, 884, 888, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 911, 912, 915, 917, 919, 920, 921, 941, 943, 944, 945, 952, 961, 969], "empti": [27, 77, 89, 99, 100, 103, 110, 133, 134, 164, 176, 249, 552, 563, 593, 594, 623, 673, 732, 736, 816, 961], "table_nam": [28, 29, 249], "connection_uri": [28, 101, 249], "if_exist": [28, 249], "dbwritemod": [28, 249], "fail": [28, 87, 102, 104, 111, 130, 218, 249, 274, 300, 499, 577, 646, 673, 682, 923, 961], "dbwriteengin": [28, 249], "sqlalchemi": [28, 249], "databas": [28, 101, 249, 588], "append": [28, 122, 144, 169, 170, 249, 441, 570, 577, 614, 615, 673, 961], "creat": [28, 29, 69, 70, 86, 90, 92, 111, 120, 121, 122, 123, 124, 125, 133, 134, 155, 156, 181, 184, 222, 226, 249, 329, 353, 359, 441, 493, 519, 527, 532, 540, 541, 542, 577, 593, 594, 600, 609, 610, 651, 673, 732, 736, 744, 749, 752, 780, 786, 851, 857, 860, 917, 943, 961, 969], "connect": [28, 99, 101, 104, 108, 112, 114, 115, 249, 589], "uri": [28, 101, 102, 111, 249], "postgresql": [28, 101, 249, 433, 577], "usernam": [28, 99, 101, 104, 108, 112, 114, 249], "password": [28, 99, 101, 104, 108, 112, 114, 249], "server": [28, 101, 249], "port": [28, 99, 101, 104, 108, 112, 114, 249], "replac": [28, 99, 100, 110, 145, 146, 190, 217, 226, 249, 329, 352, 413, 490, 577, 603, 651, 673, 752, 779, 840, 879, 880, 914, 961], "insert": [28, 99, 100, 104, 108, 110, 112, 113, 114, 161, 189, 217, 219, 249, 458, 473, 502, 577, 647, 673, 877, 897, 926, 961], "mode": [28, 249, 562, 577, 673, 961], "new": [28, 29, 97, 110, 127, 128, 131, 140, 160, 161, 180, 181, 188, 189, 206, 219, 220, 226, 249, 258, 329, 371, 387, 412, 489, 490, 495, 496, 503, 504, 510, 577, 588, 598, 630, 644, 647, 651, 657, 673, 678, 749, 752, 798, 851, 862, 913, 914, 919, 920, 927, 929, 934, 940, 953, 961], "alreadi": [28, 249, 282, 323, 577, 701, 743, 961], "adbc": [28, 101, 249], "workbook": [29, 249], "worksheet": [29, 249], "posit": [29, 138, 143, 154, 182, 196, 202, 219, 226, 229, 249, 366, 367, 368, 369, 433, 470, 488, 528, 530, 531, 532, 533, 544, 554, 557, 563, 566, 577, 597, 601, 608, 633, 640, 647, 651, 655, 673, 794, 795, 796, 912, 961], "tupl": [29, 101, 131, 167, 192, 193, 197, 228, 249, 444, 577, 627, 636, 673, 863, 961], "a1": [29, 61, 63, 249], "table_styl": [29, 249], "column_format": [29, 249], "dtype_format": [29, 249], "oneormoredatatyp": [29, 120, 249, 829, 961], "conditional_format": [29, 249], "conditionalformatdict": [29, 249], "column_tot": [29, 249], "columntotalsdefinit": [29, 249], "column_width": [29, 249], "row_tot": [29, 249], "rowtotalsdefinit": [29, 249], "row_height": [29, 249], "sparklin": [29, 249], "sequenc": [29, 52, 60, 67, 86, 88, 89, 90, 92, 94, 96, 99, 100, 110, 120, 121, 122, 132, 137, 138, 140, 143, 144, 169, 170, 176, 180, 183, 184, 202, 210, 216, 217, 218, 219, 220, 221, 222, 249, 392, 411, 435, 470, 504, 523, 524, 525, 528, 537, 538, 539, 546, 548, 553, 561, 567, 577, 591, 597, 598, 601, 614, 615, 626, 640, 645, 646, 647, 648, 673, 681, 745, 747, 880, 929, 961], "formula": [29, 249, 364, 577, 792, 961], "autofilt": [29, 249], "autofit": [29, 249], "hidden_column": [29, 249], "hide_gridlin": [29, 249], "sheet_zoom": [29, 249], "excel": [29, 103, 249, 588], "object": [29, 30, 33, 70, 87, 88, 93, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 120, 122, 124, 130, 154, 171, 213, 249, 552, 588, 594, 612, 617, 629, 673, 694, 728, 750, 896, 938, 961], "open": [29, 99, 100, 103, 104, 108, 112, 114, 249], "xlsxwriter": [29, 116, 249], "ha": [29, 60, 69, 94, 110, 130, 222, 249, 263, 308, 323, 400, 420, 514, 525, 577, 657, 726, 732, 743, 745, 806, 819, 946, 961], "close": [29, 70, 155, 156, 249, 388, 408, 447, 448, 449, 450, 451, 453, 454, 455, 467, 577, 609, 610, 673, 813, 891, 961], "xlsx": [29, 103, 249], "work": [29, 37, 100, 103, 156, 189, 249, 263, 282, 301, 311, 312, 313, 314, 369, 378, 433, 487, 516, 577, 610, 673, 701, 720, 730, 733, 734, 735, 804, 911, 947, 961], "directori": [29, 108, 249], "sheet1": [29, 249], "valid": [29, 104, 108, 124, 128, 142, 249, 323, 474, 483, 577, 743, 793, 806, 898, 899, 904, 905, 907, 913, 914, 961], "notat": [29, 249], "integ": [29, 41, 42, 43, 44, 54, 55, 56, 57, 120, 122, 123, 125, 155, 156, 249, 311, 354, 378, 379, 442, 447, 448, 449, 450, 451, 452, 453, 454, 455, 488, 522, 527, 548, 577, 609, 610, 673, 689, 690, 730, 781, 804, 822, 861, 871, 880, 912, 961, 969], "medium": [29, 249], "kei": [29, 60, 66, 155, 170, 177, 182, 184, 188, 191, 249, 609, 615, 624, 630, 631, 673], "contain": [29, 60, 66, 88, 91, 93, 102, 111, 117, 121, 132, 140, 168, 180, 184, 216, 249, 263, 392, 413, 475, 478, 480, 481, 483, 496, 497, 577, 591, 598, 627, 645, 673, 840, 846, 899, 902, 904, 905, 907, 920, 921, 938, 961], "follow": [29, 66, 99, 100, 102, 110, 111, 131, 155, 156, 170, 183, 222, 249, 263, 349, 353, 359, 435, 440, 447, 448, 449, 450, 451, 453, 454, 455, 504, 515, 525, 570, 571, 573, 577, 578, 579, 583, 584, 585, 609, 610, 615, 626, 673, 776, 780, 786, 859, 879, 880, 955, 957, 961, 962, 965, 966, 967, 969], "first_column": [29, 249], "last_column": [29, 249], "banded_column": [29, 249], "banded_row": [29, 249], "sheet": [29, 103, 249], "chart": [29, 249, 627, 673], "subsequ": [29, 187, 213, 249, 600, 673], "colnam": [29, 110, 122, 141, 249, 412, 577, 599, 673], "given": [29, 48, 50, 60, 69, 70, 86, 88, 89, 90, 92, 97, 99, 100, 110, 119, 120, 122, 123, 124, 125, 127, 131, 132, 142, 143, 166, 182, 183, 192, 198, 199, 202, 216, 221, 249, 263, 279, 294, 330, 358, 364, 388, 406, 433, 435, 440, 443, 444, 447, 448, 450, 453, 454, 455, 458, 460, 461, 481, 499, 504, 523, 524, 544, 577, 591, 601, 619, 626, 634, 635, 640, 645, 648, 657, 673, 682, 698, 713, 744, 753, 785, 792, 793, 809, 813, 832, 836, 839, 851, 857, 859, 863, 866, 867, 869, 872, 873, 874, 877, 883, 884, 905, 923, 949, 953, 961, 969], "here": [29, 86, 88, 89, 90, 92, 101, 102, 111, 120, 122, 124, 249, 483, 673, 907], "dd": [29, 249], "mm": [29, 249], "yyyi": [29, 249], "00": [29, 70, 155, 170, 222, 249, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 499, 542, 609, 615, 673, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 923], "dtype": [29, 63, 71, 86, 88, 90, 92, 93, 97, 99, 100, 110, 119, 120, 121, 122, 124, 127, 130, 155, 156, 170, 211, 213, 249, 263, 265, 266, 267, 268, 269, 270, 273, 276, 277, 278, 287, 299, 309, 312, 313, 314, 315, 316, 321, 322, 334, 337, 341, 343, 345, 348, 355, 362, 369, 371, 409, 411, 413, 442, 443, 447, 448, 449, 450, 451, 453, 454, 455, 462, 465, 466, 473, 482, 493, 499, 507, 509, 511, 512, 513, 518, 519, 525, 527, 535, 544, 548, 552, 553, 566, 577, 609, 610, 615, 673, 695, 696, 697, 706, 718, 727, 732, 733, 734, 735, 741, 742, 745, 746, 757, 760, 767, 769, 772, 775, 782, 789, 793, 798, 816, 822, 829, 839, 840, 864, 878, 885, 897, 906, 917, 923, 931, 941, 943, 944, 945, 949, 961, 969], "overridden": [29, 86, 88, 90, 92, 126, 249, 673], "basi": [29, 122, 249], "param": [29, 86, 88, 89, 90, 92, 99, 100, 110, 121, 122, 124, 192, 249, 673], "It": [29, 70, 131, 177, 183, 231, 249, 263, 300, 419, 577, 619, 624, 657, 673, 879, 880, 961], "also": [29, 70, 89, 110, 121, 122, 123, 124, 141, 154, 155, 156, 177, 180, 196, 202, 226, 249, 319, 322, 352, 387, 388, 440, 447, 448, 449, 450, 451, 453, 454, 455, 470, 537, 538, 546, 548, 561, 570, 576, 577, 582, 608, 609, 610, 624, 633, 640, 651, 652, 673, 779, 813, 859, 961], "group": [29, 33, 100, 154, 155, 156, 168, 180, 182, 184, 220, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249, 257, 263, 282, 377, 433, 469, 470, 480, 509, 525, 577, 608, 609, 610, 638, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673, 701, 904], "float_dtyp": [29, 249], "simplifi": [29, 67, 249, 595, 600, 602, 627, 636, 637, 638, 673], "uniform": [29, 249], "condit": [29, 65, 140, 147, 192, 249, 478, 497, 546, 570, 598, 605, 673], "suppli": [29, 86, 88, 89, 90, 92, 192, 249, 673], "typenam": [29, 249], "3_color_scal": [29, 249], "data_bar": [29, 249], "make": [29, 52, 68, 86, 91, 99, 100, 101, 104, 108, 112, 114, 155, 156, 177, 180, 187, 222, 249, 367, 368, 413, 443, 495, 502, 577, 609, 610, 624, 673, 795, 796, 809, 840, 919, 926, 961, 969], "icon": [29, 249], "multipl": [29, 67, 68, 99, 100, 110, 112, 113, 114, 120, 124, 132, 138, 142, 144, 147, 154, 155, 160, 168, 182, 184, 196, 202, 216, 226, 229, 249, 299, 417, 420, 425, 426, 433, 444, 447, 448, 449, 450, 451, 453, 454, 455, 470, 528, 531, 537, 538, 546, 553, 554, 557, 561, 570, 577, 591, 597, 605, 608, 609, 633, 640, 645, 651, 655, 673, 681, 718, 793, 845, 863, 961], "singl": [29, 60, 68, 99, 100, 101, 108, 110, 120, 138, 139, 140, 144, 151, 166, 182, 192, 202, 249, 263, 280, 299, 349, 375, 411, 441, 444, 470, 473, 521, 525, 528, 531, 532, 533, 553, 554, 557, 562, 577, 597, 598, 640, 673, 681, 699, 718, 776, 860, 863, 897, 938, 961], "across": [29, 249, 539, 567], "effect": [29, 130, 149, 249, 263, 577, 653, 673], "heatmap": [29, 249], "min": [29, 33, 137, 146, 155, 156, 184, 249, 312, 314, 320, 374, 433, 440, 450, 563, 577, 604, 609, 610, 638, 673, 733, 735, 740, 745, 801, 859, 869, 961, 969], "entir": [29, 249], "final": [29, 60, 114, 249, 366, 367, 368, 577, 602, 673, 794, 795, 796, 961], "made": [29, 249, 943, 961], "up": [29, 52, 101, 167, 170, 193, 209, 249, 263, 311, 502, 577, 614, 615, 619, 673, 730, 926, 961], "abov": [29, 249, 570], "order": [29, 60, 89, 117, 131, 132, 154, 155, 156, 182, 183, 184, 194, 202, 216, 218, 222, 249, 263, 273, 296, 301, 310, 440, 457, 458, 459, 469, 470, 504, 516, 517, 528, 577, 591, 608, 609, 610, 623, 637, 638, 640, 645, 646, 673, 682, 691, 715, 720, 729, 744, 828, 857, 859, 864, 876, 877, 881, 893, 929, 947, 948, 961], "than": [29, 70, 85, 90, 92, 99, 100, 110, 115, 122, 124, 131, 153, 154, 167, 170, 182, 192, 193, 194, 220, 231, 249, 263, 381, 382, 400, 403, 410, 457, 467, 485, 491, 496, 502, 534, 554, 557, 564, 567, 577, 608, 615, 637, 638, 657, 673, 682, 876, 891, 909, 915, 920, 926, 961, 969], "add": [29, 50, 100, 131, 144, 155, 226, 227, 249, 437, 506, 542, 546, 570, 577, 609, 614, 651, 652, 653, 673, 681, 961], "total": [29, 142, 249, 793, 961], "export": [29, 167, 168, 193, 209, 249], "numer": [29, 170, 249, 256, 312, 313, 314, 379, 388, 408, 424, 426, 436, 443, 462, 505, 515, 577, 588, 615, 673, 733, 734, 735, 745, 813, 827, 878, 885, 961, 969], "associ": [29, 60, 121, 249], "sum": [29, 60, 142, 149, 154, 156, 166, 184, 229, 249, 263, 300, 321, 322, 364, 375, 447, 448, 450, 453, 454, 455, 521, 523, 537, 539, 546, 554, 557, 561, 577, 595, 600, 602, 608, 610, 627, 636, 655, 673, 741, 742, 792, 793, 866, 867, 869, 872, 873, 874, 961], "pass": [29, 33, 60, 70, 88, 103, 110, 120, 122, 124, 132, 136, 138, 154, 158, 172, 182, 183, 196, 202, 205, 216, 226, 229, 249, 263, 335, 352, 372, 386, 433, 435, 470, 486, 492, 498, 528, 531, 548, 554, 557, 566, 577, 591, 597, 608, 612, 619, 626, 633, 636, 640, 645, 651, 655, 673, 682, 758, 779, 799, 808, 835, 910, 916, 922, 932, 961], "must": [29, 69, 87, 88, 102, 111, 137, 143, 155, 156, 170, 177, 192, 249, 300, 411, 447, 448, 449, 450, 451, 453, 454, 455, 577, 601, 609, 610, 615, 619, 624, 673, 744, 745, 857, 961], "funcnam": [29, 249], "averag": [29, 249, 366, 367, 368, 440, 577, 794, 795, 796, 859, 961], "count_num": [29, 249], "count": [29, 99, 100, 104, 108, 110, 112, 113, 114, 137, 155, 156, 170, 180, 181, 184, 217, 221, 222, 227, 231, 240, 249, 264, 280, 318, 349, 404, 427, 431, 447, 448, 449, 450, 451, 453, 454, 455, 475, 517, 519, 526, 558, 577, 609, 610, 615, 648, 653, 657, 666, 673, 699, 745, 776, 809, 847, 852, 899, 948, 950, 961], "std_dev": [29, 249], "var": [29, 125, 249, 577, 673, 961], "pixel": [29, 249], "unit": [29, 36, 38, 70, 122, 124, 142, 249, 328, 329, 335, 358, 362, 409, 420, 518, 548, 577, 627, 673, 751, 752, 758, 785, 789, 793, 839, 949, 961, 969], "hand": [29, 99, 100, 110, 249], "side": [29, 155, 156, 249, 388, 447, 448, 449, 450, 451, 453, 454, 455, 458, 577, 609, 610, 673, 813, 877, 961], "call": [29, 100, 122, 124, 128, 131, 154, 171, 248, 249, 263, 319, 322, 577, 589, 608, 672, 673, 682, 961], "ad": [29, 89, 130, 155, 217, 226, 249, 262, 372, 537, 538, 577, 609, 651, 673, 799, 961], "end": [29, 70, 99, 100, 108, 110, 155, 249, 295, 306, 349, 353, 354, 369, 388, 474, 478, 493, 497, 527, 531, 544, 570, 577, 609, 611, 618, 627, 673, 714, 724, 776, 780, 813, 902, 917, 921, 961], "wise": [29, 60, 149, 249, 265, 266, 267, 268, 269, 270, 315, 316, 370, 407, 464, 465, 466, 511, 512, 537, 538, 546, 561, 577, 683, 684, 685, 686, 687, 688, 737, 738, 797, 837, 838, 888, 889, 890, 935, 936, 961], "match": [29, 68, 80, 86, 88, 89, 90, 92, 117, 118, 146, 170, 192, 249, 418, 474, 475, 478, 481, 482, 483, 489, 490, 497, 499, 531, 604, 615, 673, 822, 829, 898, 899, 902, 905, 906, 907, 913, 914, 921, 923, 961], "particip": [29, 249], "distinct": [29, 124, 182, 249, 301, 440, 542, 577, 720, 859, 961, 969], "referenc": [29, 249, 504], "differ": [29, 99, 115, 117, 144, 155, 156, 167, 193, 209, 217, 249, 281, 324, 333, 349, 350, 352, 360, 413, 428, 429, 499, 517, 545, 548, 577, 600, 609, 610, 673, 681, 682, 700, 746, 756, 776, 777, 779, 787, 849, 850, 878, 923, 961], "row_index": [29, 249], "height": [29, 140, 249], "provid": [29, 99, 100, 101, 102, 110, 111, 122, 124, 166, 249, 300, 304, 305, 476, 477, 480, 482, 483, 548, 588, 637, 638, 673, 722, 723, 809, 832, 900, 901, 904, 906, 907, 961, 969], "intersect": [29, 249], "bodi": [29, 249], "start": [29, 70, 98, 99, 100, 104, 108, 110, 112, 113, 114, 126, 154, 155, 171, 201, 222, 227, 249, 295, 307, 333, 335, 336, 338, 339, 344, 346, 350, 351, 353, 354, 358, 359, 360, 361, 363, 369, 388, 468, 474, 478, 493, 497, 527, 531, 537, 544, 546, 570, 577, 608, 609, 627, 639, 653, 673, 714, 725, 751, 753, 756, 758, 759, 761, 766, 768, 771, 773, 774, 777, 778, 780, 781, 783, 785, 786, 787, 788, 789, 790, 813, 892, 902, 917, 921, 961, 969], "zero": [29, 86, 87, 98, 99, 100, 104, 108, 121, 130, 133, 146, 167, 192, 207, 213, 249, 373, 374, 408, 458, 467, 502, 515, 577, 593, 604, 673, 719, 732, 801, 891, 926, 938, 943, 944, 961], "unless": [29, 60, 88, 213, 249, 673, 944, 952, 961], "marker": [29, 249], "compliant": [29, 249], "case": [29, 60, 86, 88, 89, 90, 92, 114, 126, 131, 144, 155, 156, 167, 249, 411, 419, 420, 577, 609, 610, 673, 681, 961], "three": [29, 215, 249, 458, 577], "avail": [29, 96, 102, 111, 120, 128, 248, 249, 440, 571, 573, 576, 577, 578, 579, 582, 583, 584, 585, 588, 589, 602, 672, 673, 859, 955, 957, 961, 962, 965, 966, 967], "insert_befor": [29, 249], "insert_aft": [29, 249], "respect": [29, 249], "direct": [29, 101, 108, 114, 220, 249], "far": [29, 249], "thei": [29, 89, 110, 117, 128, 171, 249, 446, 577, 865, 961], "strongli": [29, 126, 131, 192, 231, 249, 263, 577, 657, 682, 961], "advis": [29, 171, 249, 300], "structur": [29, 77, 81, 83, 144, 183, 249, 435, 577, 626, 673, 681, 961], "your": [29, 99, 100, 117, 118, 131, 167, 196, 226, 229, 249, 263, 577, 595, 611, 618, 619, 633, 651, 655, 673, 682, 961, 969], "wherev": [29, 131, 231, 249, 263, 577, 657, 682, 961], "possibl": [29, 99, 131, 154, 167, 193, 218, 231, 249, 263, 409, 419, 496, 518, 577, 608, 646, 657, 673, 682, 920, 961], "simpl": [29, 180, 249], "colx": [29, 249, 969], "coli": [29, 249, 969], "after": [29, 89, 98, 99, 100, 104, 108, 110, 112, 113, 114, 144, 219, 248, 249, 369, 413, 440, 502, 577, 647, 673, 681, 840, 859, 926, 961], "befor": [29, 99, 110, 126, 128, 144, 155, 170, 219, 249, 321, 322, 323, 413, 434, 446, 447, 448, 449, 450, 451, 453, 454, 455, 502, 507, 577, 609, 612, 615, 647, 673, 681, 741, 742, 743, 840, 853, 865, 866, 867, 868, 869, 870, 872, 873, 874, 926, 931, 961], "most": [29, 86, 99, 100, 110, 249, 420, 425, 434, 496, 519, 577, 845, 853, 920, 950, 961], "mandatori": [29, 249], "return_dtyp": [29, 131, 249, 263, 411, 413, 525, 553, 577, 682, 840, 961], "latter": [29, 144, 249, 681, 961], "appropri": [29, 249, 440, 577, 859, 961], "pure": [29, 249], "actual": [29, 89, 103, 122, 124, 249, 886, 961], "indic": [29, 65, 94, 98, 99, 100, 104, 108, 110, 119, 120, 124, 155, 156, 210, 249, 274, 299, 390, 393, 394, 396, 397, 398, 447, 448, 449, 450, 451, 453, 454, 455, 458, 464, 509, 528, 577, 609, 610, 673, 718, 817, 821, 823, 824, 825, 826, 877, 888, 933, 939, 961, 969], "calcul": [29, 60, 155, 203, 223, 249, 281, 324, 366, 367, 368, 401, 409, 452, 467, 472, 518, 520, 525, 534, 559, 564, 565, 569, 577, 609, 641, 649, 673, 700, 746, 794, 795, 796, 833, 871, 891, 895, 951, 961], "individu": [29, 122, 156, 249, 263, 481, 577, 610, 638, 673, 731, 905, 961], "gridlin": [29, 249], "zoom": [29, 249], "level": [29, 33, 110, 112, 113, 114, 122, 131, 149, 180, 249, 375, 577, 611, 618, 638, 673], "definit": [29, 249, 401, 577, 833, 961], "take": [29, 122, 128, 149, 177, 183, 206, 249, 349, 470, 510, 543, 545, 577, 624, 644, 673, 776, 934, 953, 961], "care": [29, 249, 263, 459, 577, 881, 961], "rel": [29, 102, 111, 117, 118, 249, 349, 366, 367, 368, 577, 776, 794, 795, 796, 961], "see": [29, 101, 102, 103, 111, 117, 118, 122, 124, 136, 169, 183, 249, 312, 313, 314, 374, 387, 401, 411, 467, 561, 577, 733, 734, 735, 833, 891, 961, 969], "readthedoc": [29, 249], "io": [29, 249], "working_with_conditional_format": [29, 249], "html": [29, 87, 101, 130, 136, 249], "similarli": [29, 89, 249], "well": [29, 99, 100, 110, 143, 184, 249, 388, 577, 601, 673, 813, 961], "adjac": [29, 249], "two": [29, 88, 90, 92, 101, 149, 176, 177, 184, 215, 230, 231, 249, 257, 325, 329, 469, 509, 523, 534, 536, 559, 564, 577, 623, 624, 656, 657, 673, 747, 752, 961], "help": [29, 249, 602, 673], "where": [29, 65, 101, 121, 140, 144, 167, 176, 193, 203, 223, 249, 274, 361, 364, 458, 467, 470, 472, 520, 534, 559, 564, 565, 569, 570, 577, 623, 641, 649, 673, 681, 692, 788, 792, 877, 891, 895, 951, 953, 961], "appear": [29, 89, 117, 249, 517, 577, 948, 961], "working_with_sparklin": [29, 249], "inject": [29, 60, 249], "locat": [29, 144, 190, 214, 219, 249, 458, 577, 647, 673, 681, 877, 880, 933, 961], "syntax": [29, 131, 180, 249, 636, 673, 961], "ensur": [29, 71, 121, 122, 124, 154, 182, 192, 249, 388, 519, 577, 608, 619, 673, 943, 950, 961], "correctli": [29, 249], "microsoft": [29, 249], "com": [29, 101, 249, 366, 367, 368, 480, 577, 794, 795, 796, 904, 961], "u": [29, 36, 38, 70, 93, 167, 193, 209, 249, 328, 329, 335, 358, 362, 499, 548, 751, 752, 758, 785, 789], "offic": [29, 249], "f5ed2452": [29, 249], "2337": [29, 249], "4f71": [29, 249], "bed3": [29, 249], "c8ae6d2b276": [29, 249], "instanti": [29, 196, 226, 249, 633, 651, 673], "basic": [29, 249, 969], "random": [29, 120, 122, 124, 157, 194, 249, 383, 440, 457, 463, 577, 807, 859, 876, 887, 961], "date": [29, 36, 60, 70, 99, 100, 101, 110, 115, 137, 153, 155, 156, 168, 170, 249, 279, 280, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 447, 448, 449, 450, 451, 453, 454, 455, 499, 513, 548, 552, 577, 609, 610, 615, 673, 698, 699, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 829, 849, 850, 880, 923, 945, 961], "dtm": [29, 249, 329, 752], "2023": [29, 93, 116, 168, 249, 329, 552, 752], "num": [29, 215, 249, 388, 391, 502, 577, 813, 961], "500": [29, 167, 221, 249, 602, 648, 673, 766, 768, 774, 781, 866, 867, 869, 961], "val": [29, 191, 249, 310, 513, 570, 577, 631, 673, 729], "10_000": [29, 249], "20_000": [29, 249], "30_000": [29, 249], "increas": [29, 99, 108, 249, 323, 577, 743, 961], "b4": [29, 249], "light": [29, 249], "twice": [29, 103, 249], "each": [29, 60, 100, 113, 117, 118, 120, 131, 153, 154, 168, 170, 182, 213, 219, 228, 229, 231, 232, 234, 243, 249, 263, 286, 298, 349, 353, 359, 408, 440, 470, 481, 495, 496, 525, 528, 533, 554, 557, 566, 577, 615, 627, 647, 655, 657, 658, 660, 669, 673, 705, 717, 731, 776, 780, 786, 859, 905, 919, 920, 930, 961, 969], "titl": [29, 249], "explicit": [29, 110, 120, 249, 527, 561], "integr": [29, 249, 969], "multi_fram": [29, 249], "wb": [29, 249], "coordin": [29, 249], "advanc": [29, 249, 969], "len": [29, 69, 120, 122, 168, 249, 318, 444, 485, 491, 502, 577, 744, 857, 863, 909, 915, 926, 961], "min_color": [29, 249], "76933c": [29, 249], "mid_color": [29, 249], "c4d79b": [29, 249], "max_color": [29, 249], "ebf1d": [29, 249], "data_bar_2010": [29, 249], "bar_color": [29, 249], "9bbb59": [29, 249], "bar_negative_color_sam": [29, 249], "bar_negative_border_color_sam": [29, 249], "000": [29, 249, 969], "white": [29, 249], "w": [29, 249, 480, 904], "get_worksheet_by_nam": [29, 249], "fmt_titl": [29, 249], "add_format": [29, 249], "font_color": [29, 249], "4f6228": [29, 249], "font_siz": [29, 249], "12": [29, 60, 69, 70, 93, 121, 155, 156, 170, 222, 249, 321, 329, 336, 339, 346, 351, 353, 359, 363, 434, 462, 538, 540, 541, 553, 577, 609, 610, 611, 615, 618, 636, 643, 673, 682, 744, 752, 773, 780, 786, 875, 961, 969], "ital": [29, 249], "bold": [29, 249], "customis": [29, 249], "trend": [29, 249], "win_loss": [29, 249], "subtl": [29, 249], "tone": [29, 249], "hidden": [29, 249], "id": [29, 231, 249, 489, 490, 517, 519, 577, 657, 948, 961, 969], "q1": [29, 249], "55": [29, 62, 116, 249], "20": [29, 144, 160, 161, 183, 185, 189, 190, 249, 271, 272, 273, 324, 353, 359, 383, 387, 548, 552, 577, 626, 673, 746, 786, 961], "35": [29, 124, 249, 324, 577, 746, 961], "q2": [29, 249], "30": [29, 69, 144, 155, 160, 183, 189, 190, 208, 226, 249, 271, 272, 273, 324, 329, 334, 339, 351, 352, 353, 359, 363, 383, 462, 552, 577, 609, 626, 651, 673, 744, 746, 752, 757, 779, 780, 786, 961, 969], "15": [29, 121, 131, 155, 156, 161, 249, 323, 324, 353, 359, 538, 577, 609, 610, 673, 743, 746, 780, 786, 961], "60": [29, 144, 249, 354, 355, 499, 777, 781, 782, 923], "q3": [29, 249], "50": [29, 144, 249, 312, 313, 314, 353, 359, 577, 733, 786, 961], "40": [29, 144, 183, 249, 353, 359, 383, 577, 626, 673, 762, 786], "80": [29, 249], "q4": [29, 249], "75": [29, 137, 249, 260, 432, 577, 745, 809, 857, 961, 969], "account": [29, 93, 249, 349, 366, 367, 368, 577, 776, 794, 795, 796, 961], "flavour": [29, 249], "integer_dtyp": [29, 196, 249, 633, 673], "0_": [29, 249], "just": [29, 101, 110, 176, 249, 623, 673], "unifi": [29, 249], "multi": [29, 99, 100, 249, 369, 577], "2_color_scal": [29, 249], "95b3d7": [29, 249], "ffffff": [29, 249], "base": [29, 34, 140, 147, 155, 156, 249, 364, 366, 367, 368, 406, 407, 488, 577, 598, 605, 609, 610, 673, 792, 794, 795, 796, 809, 836, 837, 857, 912, 953, 961, 969], "standardis": [29, 249], "z": [29, 93, 120, 122, 142, 163, 165, 169, 176, 249, 256, 260, 278, 310, 383, 432, 443, 499, 577, 614, 623, 639, 673, 729, 801, 923, 961], "score": [29, 249], "conjunct": [29, 103, 249], "a123": [29, 249], "b345": [29, 249], "c567": [29, 249], "d789": [29, 249], "e101": [29, 249], "45": [29, 156, 249, 329, 353, 359, 475, 481, 552, 610, 673, 752, 780, 786, 899, 905, 969], "85": [29, 249, 969], "font": [29, 249], "consola": [29, 249], "standard": [29, 203, 249, 339, 367, 453, 467, 472, 483, 565, 577, 641, 673, 762, 795, 891, 895, 907, 961, 969], "stdev": [29, 249], "ipccompress": [30, 249], "arrow": [30, 72, 86, 101, 104, 112, 207, 249, 637, 673, 938, 943, 961], "ipc": [30, 104, 105, 112, 115, 249, 588], "binari": [30, 249, 303, 305, 306, 307, 524, 721, 723, 724, 725], "feather": [30, 104, 112, 249, 588], "lz4": [30, 33, 249, 637, 638, 673], "zstd": [30, 33, 249, 637, 638, 673], "pretti": [31, 249], "row_ori": [31, 249], "iobas": [31, 32, 106, 107, 249, 629, 654, 673], "serial": [31, 32, 249], "represent": [31, 32, 211, 249, 310, 333, 336, 339, 340, 342, 344, 346, 347, 350, 351, 354, 360, 361, 363, 513, 577, 600, 617, 673, 729, 756, 759, 761, 762, 766, 768, 771, 773, 774, 777, 778, 781, 787, 788, 790, 941, 945, 961], "orient": [31, 61, 63, 90, 92, 249, 673], "slower": [31, 90, 92, 131, 154, 182, 222, 231, 249, 608, 657, 673, 682, 961], "common": [31, 249, 582], "write_ndjson": [31, 249], "newlin": [32, 107, 113, 249], "delimit": [32, 94, 99, 100, 107, 110, 113, 184, 210, 249, 473, 897, 939, 961], "parquetcompress": [33, 249], "compression_level": [33, 249, 638, 673], "statist": [33, 99, 100, 108, 114, 137, 249, 367, 368, 401, 447, 448, 449, 450, 451, 452, 453, 454, 455, 467, 577, 638, 673, 745, 795, 796, 833, 871, 891, 961], "row_group_s": [33, 249, 638, 673], "use_pyarrow": [33, 99, 104, 108, 249, 638, 673, 942, 943, 961], "pyarrow_opt": [33, 102, 108, 111, 249], "parquet": [33, 108, 109, 114, 249, 588, 638, 673], "gzip": [33, 249, 638, 673], "lzo": [33, 249, 638, 673], "brotli": [33, 249, 638, 673], "choos": [33, 249, 637, 638, 673], "good": [33, 167, 249, 637, 638, 673], "perform": [33, 77, 87, 99, 100, 104, 108, 110, 112, 113, 114, 130, 131, 155, 156, 170, 187, 231, 249, 263, 433, 577, 609, 610, 615, 637, 638, 653, 657, 673, 682, 961], "fast": [33, 123, 125, 249, 372, 459, 577, 637, 638, 673, 799, 881, 961, 969], "decompress": [33, 249, 637, 638, 673], "backward": [33, 146, 170, 249, 302, 374, 577, 604, 615, 638, 673, 801, 961], "guarante": [33, 87, 99, 100, 218, 249, 602, 638, 646, 673], "deal": [33, 167, 249, 352, 440, 499, 577, 638, 673, 779, 859, 923, 961], "older": [33, 249, 638, 673], "reader": [33, 96, 99, 100, 104, 108, 249, 589, 638, 673], "higher": [33, 186, 241, 249, 439, 451, 560, 577, 628, 638, 667, 673, 858, 870, 961], "mean": [33, 99, 100, 104, 108, 110, 137, 146, 154, 184, 229, 249, 371, 374, 448, 467, 480, 529, 577, 604, 608, 619, 638, 655, 673, 745, 798, 801, 806, 867, 891, 904, 961], "smaller": [33, 142, 249, 602, 638, 673, 793, 961], "disk": [33, 104, 249, 636, 637, 638, 673], "11": [33, 116, 156, 249, 326, 327, 339, 349, 353, 359, 387, 434, 454, 468, 502, 522, 531, 567, 577, 595, 610, 611, 618, 627, 638, 643, 673, 682, 776, 780, 786, 865, 961], "22": [33, 121, 249, 353, 359, 362, 499, 531, 638, 673, 780, 786, 789, 923, 969], "extra": [33, 99, 102, 103, 104, 108, 111, 112, 114, 144, 249, 638, 673, 681, 961], "comput": [33, 67, 68, 74, 142, 154, 170, 213, 218, 229, 241, 249, 255, 265, 266, 267, 268, 269, 270, 290, 291, 292, 315, 316, 318, 319, 320, 321, 322, 325, 364, 370, 401, 406, 407, 408, 425, 433, 434, 438, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 464, 465, 466, 467, 471, 511, 512, 528, 534, 536, 543, 559, 564, 577, 608, 612, 614, 615, 638, 646, 652, 655, 667, 673, 677, 683, 684, 685, 686, 687, 688, 709, 710, 711, 737, 738, 739, 740, 741, 742, 747, 792, 793, 797, 833, 836, 837, 838, 845, 853, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 888, 889, 890, 891, 894, 935, 936, 944, 961], "reduc": [33, 99, 100, 108, 110, 112, 113, 114, 236, 237, 239, 242, 249, 462, 546, 577, 638, 662, 663, 665, 668, 673, 842, 856, 885, 931, 961], "pressur": [33, 108, 113, 114, 249, 462, 577, 638, 673, 885, 961], "improv": [33, 104, 112, 249, 638, 673], "speed": [33, 249, 263, 577, 638, 673], "minimum": [33, 120, 121, 122, 124, 149, 178, 249, 366, 367, 368, 423, 429, 440, 557, 577, 625, 638, 673, 733, 770, 794, 795, 796, 850, 855, 859, 961, 969], "implement": [33, 87, 130, 131, 231, 249, 263, 577, 657, 682, 879, 880, 961], "v": [33, 69, 142, 249, 458, 577, 744, 877, 961], "At": [33, 249], "moment": [33, 136, 249, 401, 467, 577, 833, 891, 961], "argument": [33, 99, 102, 108, 111, 136, 138, 143, 154, 155, 156, 174, 182, 183, 184, 196, 202, 204, 213, 219, 222, 226, 229, 249, 353, 359, 369, 388, 433, 435, 447, 448, 449, 450, 451, 453, 454, 455, 470, 486, 492, 498, 499, 528, 530, 531, 532, 533, 544, 554, 557, 563, 566, 577, 597, 601, 608, 609, 610, 626, 633, 640, 647, 651, 655, 673, 780, 786, 813, 910, 916, 922, 923, 944, 961], "pyarrow": [33, 86, 91, 99, 102, 104, 108, 111, 115, 116, 168, 207, 212, 213, 249, 589, 938, 942, 943, 944, 961], "write_t": [33, 249], "calendar": [35, 36, 155, 156, 170, 222, 249, 339, 349, 353, 359, 363, 447, 448, 449, 450, 451, 453, 454, 455, 577, 609, 610, 615, 673, 762, 776, 780, 786, 790], "time": [36, 38, 66, 67, 70, 110, 144, 155, 156, 170, 222, 249, 278, 279, 280, 300, 308, 328, 329, 330, 335, 349, 352, 358, 362, 499, 513, 514, 532, 533, 542, 548, 562, 577, 595, 609, 610, 615, 627, 673, 681, 697, 699, 726, 751, 752, 753, 758, 776, 779, 785, 789, 923, 945, 946, 961, 969], "time_unit": [36, 38, 70, 93, 328, 329, 335, 358, 362, 548, 751, 752, 758, 785, 789], "time_zon": [36, 70, 93, 330, 352, 753, 779], "timezon": [36, 70, 499, 923], "m": [36, 38, 70, 328, 329, 335, 356, 358, 362, 499, 548, 751, 752, 758, 783, 785, 789, 923], "zone": [36, 70, 330, 352, 753, 779], "zoneinfo": 36, "run": [36, 67, 123, 125, 131, 154, 171, 184, 218, 231, 249, 263, 282, 323, 563, 577, 595, 600, 602, 608, 619, 623, 627, 636, 637, 638, 646, 657, 673, 682, 701, 743, 961, 968, 969], "available_timezon": 36, "attribut": [36, 37, 38, 45, 119, 249, 571, 573, 578, 579, 583, 584, 585, 673, 955, 957, 962, 965, 966, 967], "128": [37, 62, 853, 961], "bit": [37, 39, 40, 41, 42, 43, 44, 54, 55, 56, 57, 442, 474, 577, 861, 898, 961], "neg": [37, 155, 158, 172, 198, 199, 201, 205, 249, 294, 295, 460, 461, 468, 493, 577, 609, 634, 635, 639, 653, 673, 713, 714, 808, 835, 883, 884, 892, 917, 932, 961], "scale": [37, 142, 249, 793, 961], "experiment": [37, 69, 115, 196, 220, 221, 226, 249, 323, 353, 447, 448, 449, 450, 451, 453, 454, 455, 577, 633, 648, 651, 673, 743, 780, 809, 857, 961], "progress": 37, "expect": [37, 78, 80, 85, 263, 525, 552, 577, 617, 619, 673, 857, 961], "delta": [38, 102, 111, 203, 223, 249, 472, 520, 534, 559, 564, 565, 569, 577, 588, 641, 649, 673, 895, 951, 961], "32": [39, 42, 55, 62, 156, 166, 249, 426, 462, 577, 610, 673, 747, 777, 853, 870, 961], "sign": [41, 42, 43, 44, 349, 442, 502, 577, 776, 822, 861, 926, 961], "inner": [45, 51, 71, 121, 169, 221, 249, 287, 325, 577, 614, 648, 654, 673, 706, 747, 961], "polarsdatatyp": [45, 97, 99, 100, 105, 109, 110, 119, 120, 121, 122, 124, 127, 131, 141, 249, 263, 309, 369, 411, 413, 482, 525, 527, 531, 544, 552, 553, 577, 599, 673, 682, 727, 840, 906, 961], "pythondatatyp": 45, "nest": [45, 51, 93, 142, 249, 588, 793, 961, 969], "arrai": [45, 86, 90, 99, 100, 108, 142, 207, 212, 213, 249, 278, 289, 290, 291, 292, 293, 296, 297, 305, 312, 313, 314, 318, 319, 320, 321, 322, 407, 447, 448, 450, 453, 454, 455, 459, 475, 477, 480, 481, 483, 543, 577, 673, 697, 708, 709, 710, 711, 712, 715, 716, 723, 733, 734, 735, 739, 740, 741, 742, 747, 793, 837, 838, 866, 867, 869, 872, 873, 874, 881, 886, 899, 901, 904, 905, 907, 938, 943, 944, 952, 961], "within": [45, 117, 118, 170, 249, 470, 577, 615, 673], "wrap": [47, 93, 388, 577], "arbitrari": [47, 122], "python": [47, 70, 99, 100, 116, 131, 167, 193, 209, 231, 249, 263, 329, 411, 525, 570, 577, 582, 657, 682, 752, 763, 764, 765, 770, 942, 961], "queri": [48, 67, 101, 104, 110, 112, 113, 114, 144, 171, 183, 249, 300, 413, 483, 577, 595, 600, 602, 611, 618, 627, 636, 653, 657, 673, 681, 907, 961, 968], "pars": [48, 99, 100, 103, 110, 112, 113, 132, 154, 196, 202, 216, 226, 229, 249, 388, 433, 470, 482, 488, 499, 528, 530, 532, 533, 548, 554, 557, 566, 577, 591, 608, 633, 640, 645, 651, 655, 673, 813, 906, 912, 923, 961], "transform": [48, 131, 249, 411, 500, 501, 577], "lf": [50, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 654, 673, 969], "under": [50, 61, 62, 63, 64, 571, 573, 578, 579, 583, 584, 585, 955, 957, 962, 965, 966, 967], "context": [51, 126, 180, 249, 257, 263, 282, 375, 419, 469, 470, 519, 525, 535, 545, 548, 563, 576, 577, 588, 652, 673, 701], "manag": [51, 588], "categor": [51, 71, 94, 169, 210, 211, 249, 310, 413, 513, 577, 728, 729, 945, 961], "temporarili": [51, 126, 155, 156, 249, 609, 610, 673], "cach": [51, 67, 71, 104, 110, 112, 114, 413, 447, 448, 449, 450, 451, 453, 454, 455, 499, 577, 595, 600, 602, 627, 636, 673, 923], "categori": [51, 69, 71, 310, 729, 744, 809, 857, 961], "until": [51, 171, 249], "finish": [51, 74, 144, 249, 681, 961], "global": [51, 71, 122, 413, 577], "invalid": [51, 99, 100, 110, 482, 483, 488, 515, 577, 906, 907, 912], "outermost": 51, "exit": [51, 128], "df1": [51, 60, 68, 71, 117, 144, 150, 213, 224, 249], "color": [51, 71, 231, 657], "red": [51, 71, 231, 657], "green": [51, 71, 231, 657], "blue": [51, 71], "orang": [51, 71, 135, 232, 233, 235, 236, 237, 239, 241, 242, 249, 658, 659, 661, 662, 663, 665, 667, 668], "uint8": [51, 71, 119, 121, 211, 249, 321, 322, 413, 507, 522, 577, 741, 742, 931, 961, 969], "df2": [51, 60, 68, 71, 117, 144, 150, 213, 224, 249], "yellow": [51, 71], "black": [51, 71, 131, 249], "join": [51, 60, 67, 71, 170, 221, 249, 387, 433, 577, 595, 600, 602, 615, 627, 636, 648, 652, 673], "succe": [51, 99, 100, 110], "df_join": [51, 71], "cat": [51, 69, 71, 211, 249, 474, 500, 501, 513, 533, 573, 577, 744, 809, 857, 898, 957, 961], "u8": [51, 71, 94, 210, 211, 249, 413, 522, 577, 939, 961, 969], "schemadict": [52, 86, 88, 89, 90, 91, 92, 110, 195, 249, 566, 619, 632, 657, 673], "composit": [52, 121, 969], "dai": [53, 70, 155, 156, 168, 170, 222, 249, 335, 339, 346, 349, 350, 351, 353, 358, 359, 360, 361, 363, 447, 448, 449, 450, 451, 453, 454, 455, 540, 541, 542, 577, 609, 610, 615, 673, 776, 777, 780, 786, 788], "unsign": [54, 55, 56, 57, 442, 577, 822, 861, 961], "could": [58, 74, 140, 155, 249, 309, 537, 546, 577, 598, 609, 673, 727, 961], "static": [58, 657], "utf": 59, "descend": [60, 132, 202, 216, 249, 273, 296, 440, 459, 469, 470, 528, 577, 591, 640, 645, 673, 691, 715, 828, 859, 881, 893, 961], "union": [60, 67, 68, 123, 125, 182, 249, 595, 600, 602, 627, 636, 673, 747, 820, 880, 961], "uniqu": [60, 119, 120, 121, 124, 165, 180, 240, 249, 264, 275, 391, 399, 427, 499, 517, 519, 526, 558, 577, 666, 673, 693, 745, 818, 830, 847, 923, 948, 950, 961], "fill": [60, 68, 97, 127, 145, 146, 199, 220, 249, 302, 319, 322, 373, 374, 380, 387, 447, 448, 450, 453, 454, 455, 461, 485, 491, 502, 547, 577, 603, 604, 635, 652, 673, 800, 801, 851, 866, 867, 869, 872, 873, 874, 884, 909, 915, 926, 961], "sort": [60, 61, 117, 121, 132, 155, 156, 170, 177, 183, 184, 216, 222, 234, 243, 249, 273, 310, 375, 459, 470, 519, 521, 528, 577, 591, 600, 609, 610, 615, 624, 626, 627, 636, 645, 660, 669, 673, 691, 729, 828, 881, 947, 950, 961, 969], "origin": [60, 99, 100, 218, 249, 352, 400, 413, 433, 442, 475, 480, 481, 483, 485, 491, 502, 577, 646, 673, 744, 779, 840, 857, 899, 904, 905, 907, 909, 915, 926, 961], "doe": [60, 80, 86, 88, 89, 90, 92, 93, 99, 100, 102, 103, 110, 111, 115, 117, 118, 144, 168, 192, 193, 218, 226, 249, 362, 413, 517, 545, 577, 602, 619, 646, 651, 673, 681, 789, 806, 840, 886, 952, 961], "receiv": [60, 110, 131, 183, 249, 435, 577, 626, 673, 969], "now": [60, 156, 249, 499, 610, 673, 923], "whose": [60, 170, 184, 249, 369, 544, 577, 615, 673], "post": 60, "constrain": 60, "newli": 60, "boolean": [60, 65, 132, 147, 149, 202, 216, 249, 259, 260, 261, 279, 303, 338, 375, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 432, 470, 482, 521, 522, 528, 566, 577, 591, 605, 640, 645, 673, 679, 680, 692, 698, 721, 761, 802, 813, 814, 815, 817, 818, 820, 821, 823, 824, 825, 826, 830, 854, 855, 879, 898, 953, 961], "2022": [60, 70, 137, 153, 249, 329, 499, 542, 548, 752, 762, 923], "x": [60, 93, 99, 100, 101, 110, 120, 122, 142, 160, 163, 165, 169, 176, 184, 249, 256, 260, 263, 278, 287, 365, 379, 381, 382, 383, 403, 408, 410, 411, 424, 426, 430, 432, 436, 443, 464, 467, 495, 505, 513, 515, 522, 525, 537, 538, 539, 546, 552, 553, 561, 567, 577, 614, 619, 623, 639, 673, 678, 682, 801, 831, 888, 891, 919, 945, 961], "y": [60, 93, 120, 122, 142, 163, 165, 169, 176, 184, 249, 256, 260, 278, 287, 356, 365, 381, 382, 403, 410, 430, 432, 443, 499, 515, 522, 539, 552, 567, 577, 614, 623, 639, 673, 678, 783, 923, 961], "df3": [60, 249], "set_tbl_format": 60, "09": [60, 156, 249, 329, 339, 610, 673, 756], "01": [60, 70, 137, 153, 155, 156, 222, 249, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 499, 542, 609, 610, 673, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 923], "02": [60, 70, 116, 153, 155, 156, 222, 249, 328, 329, 335, 336, 337, 344, 345, 346, 352, 354, 355, 358, 360, 362, 456, 499, 542, 577, 609, 610, 673, 751, 752, 754, 755, 758, 759, 760, 763, 764, 765, 766, 768, 770, 771, 772, 773, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 923], "03": [60, 70, 93, 155, 156, 222, 249, 328, 329, 330, 334, 335, 337, 345, 346, 352, 353, 354, 355, 356, 358, 359, 360, 362, 609, 610, 673, 751, 752, 753, 756, 757, 758, 759, 760, 763, 764, 765, 766, 768, 770, 772, 773, 774, 777, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789], "af1": 60, "af2": 60, "af3": 60, "keep": [60, 99, 100, 110, 218, 221, 222, 249, 400, 413, 530, 577, 646, 648, 673, 744, 840, 857, 961], "easili": [60, 196, 226, 229, 249, 531, 566, 633, 651, 655, 673], "dot": [60, 577, 636, 673, 961], "product": [60, 136, 249, 321, 325, 525, 577, 741, 747, 961], "fill_nul": [60, 145, 249, 499, 577, 603, 652, 673, 923, 961], "167": 60, "47": 60, "callabl": [61, 62, 63, 64, 110, 131, 149, 183, 231, 249, 263, 300, 411, 412, 435, 446, 525, 537, 538, 546, 553, 561, 577, 619, 626, 657, 673, 682, 719, 865, 961], "decor": [61, 62, 63, 64, 122, 124, 131, 249, 263, 577, 682, 961], "access": [61, 62, 63, 64, 167, 192, 193, 249, 413, 577, 652, 673, 969], "by_first_letter_of_column_nam": 61, "f": [61, 100, 137, 153, 168, 207, 217, 220, 249, 256, 263, 300, 462, 479, 499, 525, 532, 553, 577, 719, 903, 923], "fromkei": [61, 63], "by_first_letter_of_column_valu": 61, "starts_with": [61, 474, 478, 902], "slice": [61, 67, 142, 158, 168, 205, 249, 286, 298, 446, 447, 448, 449, 450, 451, 453, 454, 455, 577, 595, 600, 602, 619, 627, 636, 637, 638, 673, 705, 717, 793, 808, 865, 866, 867, 868, 869, 870, 872, 873, 874, 932, 961], "to_seri": [61, 65, 151, 249, 300, 719], "xx": [61, 63, 121], "xy": [61, 63], "yy": [61, 63, 121], "yz": [61, 63], "a2": [61, 63], "b1": [61, 63], "b2": [61, 63], "pow_n": 62, "powersofn": 62, "next": [62, 302, 440, 577, 859, 961], "p": [62, 183, 249, 435, 566, 577, 626, 673], "ceil": [62, 577, 961], "previou": [62, 128, 434, 504, 577, 853, 961], "floor": [62, 577, 961], "nearest": [62, 170, 186, 241, 249, 311, 378, 439, 451, 560, 577, 615, 628, 667, 673, 730, 804, 812, 858, 870, 961], "24": [62, 116, 131, 142, 156, 249, 321, 323, 337, 426, 577, 610, 673, 743, 760, 832, 961], "001": [62, 340, 341, 343, 348, 542, 767, 769, 775], "next_pow2": 62, "prev_pow2": 62, "nearest_pow2": 62, "split_by_column_dtyp": 63, "collect": [63, 67, 110, 111, 115, 122, 124, 171, 207, 249, 263, 392, 527, 532, 548, 566, 577, 591, 597, 598, 601, 602, 603, 604, 605, 606, 608, 609, 611, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 625, 626, 628, 630, 631, 633, 634, 635, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 651, 652, 653, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 673, 820, 961, 969], "31": [64, 70, 329, 333, 334, 346, 349, 360, 499, 540, 541, 548, 552, 752, 756, 757, 776, 923, 969], "42": [64, 156, 157, 249, 610, 673, 807, 961], "961": 64, "1764": 64, "4160": 64, "eager": [65, 155, 220, 249, 527, 548, 562, 566, 576, 588, 609, 673], "evalu": [65, 145, 147, 170, 249, 260, 274, 323, 386, 388, 392, 413, 432, 524, 527, 543, 562, 566, 570, 577, 605, 612, 614, 615, 673, 692, 743, 953, 961], "immedi": [65, 440, 527, 562, 566, 577, 859, 961], "arg_tru": [65, 577, 961], "u32": [65, 155, 181, 227, 232, 240, 242, 249, 257, 264, 271, 272, 273, 274, 275, 276, 277, 280, 289, 317, 318, 333, 336, 340, 344, 346, 350, 351, 354, 360, 361, 404, 413, 427, 431, 440, 458, 475, 484, 487, 513, 517, 526, 528, 535, 558, 577, 609, 653, 658, 666, 668, 673, 691, 692, 693, 708, 727, 756, 759, 766, 768, 771, 773, 774, 777, 778, 781, 787, 788, 809, 859, 899, 908, 911, 945, 948, 950, 961], "build": [66, 87, 969], "wa": 66, "compil": [66, 276, 277, 695, 696], "gate": 66, "info": [66, 102, 111, 116, 338, 761], "otherwis": [66, 121, 126, 177, 196, 249, 304, 312, 313, 314, 352, 366, 367, 368, 442, 474, 476, 570, 577, 624, 633, 673, 682, 722, 733, 734, 735, 779, 794, 795, 796, 861, 879, 880, 898, 900, 961], "version": [66, 69, 94, 102, 111, 116, 499, 551, 559, 561, 564, 923], "depend": [66, 116, 263, 276, 277, 419, 440, 525, 545, 548, 577, 695, 696, 859, 961, 969], "host": [66, 99, 104, 108, 112, 114], "git": 66, "lazy_fram": 67, "type_coercion": [67, 595, 600, 602, 627, 636, 637, 638, 673], "predicate_pushdown": [67, 595, 600, 602, 619, 627, 636, 637, 638, 673], "projection_pushdown": [67, 595, 600, 602, 619, 627, 636, 637, 638, 673], "simplify_express": [67, 595, 600, 602, 627, 636, 637, 638, 673], "no_optim": [67, 595, 602, 619, 627, 637, 638, 673], "slice_pushdown": [67, 595, 600, 602, 619, 627, 636, 637, 638, 673], "common_subplan_elimin": [67, 595, 600, 602, 627, 636, 673], "graph": [67, 171, 249, 612, 652, 673], "parallel": [67, 68, 96, 101, 108, 114, 155, 170, 171, 183, 249, 282, 323, 577, 588, 609, 614, 615, 673, 701, 743, 961], "threadpool": [67, 126], "coercion": [67, 443, 577, 595, 600, 602, 627, 636, 637, 638, 673], "optim": [67, 108, 110, 112, 113, 114, 167, 171, 183, 187, 193, 218, 249, 595, 600, 602, 619, 627, 636, 637, 638, 646, 653, 673], "predic": [67, 110, 112, 113, 114, 115, 147, 166, 192, 249, 375, 521, 546, 577, 595, 600, 602, 605, 619, 627, 630, 636, 637, 638, 653, 673, 802, 879, 880, 961], "pushdown": [67, 595, 600, 602, 619, 627, 630, 636, 637, 638, 653, 673, 879, 880, 961], "project": [67, 110, 112, 113, 114, 263, 469, 470, 577, 595, 600, 602, 619, 627, 630, 636, 637, 638, 654, 673], "turn": [67, 99, 100, 110, 519, 577, 595, 600, 602, 619, 627, 637, 638, 673], "off": [67, 99, 100, 110, 519, 577, 595, 600, 602, 619, 627, 637, 638, 673], "Will": [67, 217, 249, 595, 600, 602, 627, 636, 673, 961], "try": [67, 81, 83, 99, 100, 103, 104, 108, 110, 112, 114, 595, 600, 602, 627, 636, 673], "branch": [67, 595, 600, 602, 627, 636, 673], "subplan": [67, 595, 600, 602, 627, 636, 673], "occur": [67, 280, 425, 440, 577, 595, 600, 602, 627, 636, 673, 699, 845, 859, 961], "part": [67, 86, 495, 496, 595, 600, 602, 627, 636, 652, 673, 756, 759, 766, 768, 771, 773, 774, 781, 790, 919, 920], "fashion": [67, 169, 249, 595, 600, 602, 627, 636, 673], "item": [68, 100, 192, 194, 249, 279, 285, 287, 371, 457, 496, 577, 698, 704, 706, 798, 876, 920, 961], "iter": [68, 123, 125, 132, 154, 155, 156, 167, 168, 182, 192, 193, 196, 202, 216, 217, 226, 228, 229, 249, 323, 369, 433, 470, 528, 530, 531, 532, 533, 544, 554, 557, 563, 566, 570, 577, 591, 608, 609, 610, 633, 640, 645, 651, 655, 673, 743, 961, 969], "concatmethod": 68, "vertic": [68, 144, 220, 224, 249, 473, 554, 557, 897], "rechunk": [68, 86, 91, 99, 100, 104, 108, 110, 112, 113, 114, 144, 249, 577, 681, 731, 846, 961], "aggreg": [68, 99, 100, 108, 149, 155, 173, 174, 175, 178, 180, 184, 185, 186, 203, 204, 220, 223, 229, 230, 233, 235, 249, 257, 375, 385, 411, 433, 446, 447, 448, 449, 450, 451, 453, 454, 455, 519, 537, 538, 539, 546, 551, 554, 557, 561, 567, 577, 609, 619, 620, 621, 622, 625, 628, 641, 642, 649, 655, 656, 659, 661, 673, 810, 865, 866, 867, 869, 872, 873, 874, 961], "concaten": [68, 149, 183, 249, 435, 532, 533, 577, 626, 673, 731, 846, 961], "diagon": [68, 217, 249], "strategi": [68, 99, 119, 120, 121, 122, 124, 146, 155, 169, 170, 179, 249, 263, 300, 374, 577, 604, 609, 614, 615, 673, 719, 801, 961], "vstack": [68, 144, 249], "find": [68, 148, 249, 458, 577, 877, 961], "miss": [68, 99, 100, 110, 145, 249, 302, 366, 367, 368, 380, 387, 394, 396, 564, 577, 603, 673, 794, 795, 796, 952, 961], "stack": [68, 160, 224, 249], "length": [68, 69, 97, 110, 120, 127, 155, 156, 201, 249, 295, 323, 353, 359, 420, 446, 447, 448, 449, 450, 451, 453, 454, 455, 468, 485, 487, 491, 493, 502, 527, 577, 609, 610, 627, 639, 673, 714, 719, 731, 743, 744, 752, 780, 786, 834, 851, 857, 865, 866, 867, 868, 869, 870, 872, 873, 874, 892, 909, 911, 915, 917, 926, 961], "don": [68, 131, 218, 220, 249, 263, 282, 323, 525, 577, 646, 673, 682, 701, 743, 878, 952, 961], "t": [68, 103, 110, 131, 183, 218, 220, 249, 263, 282, 323, 352, 364, 366, 367, 368, 435, 486, 492, 498, 499, 525, 570, 577, 626, 646, 673, 682, 701, 743, 779, 792, 794, 795, 796, 878, 910, 916, 922, 923, 952, 961], "sure": [68, 86, 91, 99, 100, 101, 104, 108, 187, 249, 527], "contigu": [68, 86, 91, 99, 100, 104, 108, 110, 112, 113, 114, 187, 249], "relev": 68, "execut": [68, 171, 249, 282, 592, 619, 627, 673, 701], "df_h1": 68, "l1": 68, "l2": 68, "df_h2": 68, "r1": 68, "r2": 68, "r3": 68, "df_d1": 68, "df_d2": 68, "bin": [69, 488, 522, 571, 577, 744, 809, 857, 912, 955, 961], "label": [69, 446, 447, 448, 449, 450, 451, 453, 454, 455, 577, 627, 673, 744, 857, 865, 866, 867, 868, 869, 870, 872, 873, 874, 961], "break_point_label": [69, 744, 857, 961], "break_point": [69, 744, 809, 857, 961], "category_label": [69, 744, 857, 961], "discret": [69, 281, 324, 364, 577, 700, 744, 746, 792, 809, 857, 961], "deprec": [69, 94, 499, 551, 559, 564, 673, 923], "sinc": [69, 94, 102, 111, 335, 499, 548, 551, 559, 564, 758, 923], "assign": [69, 120, 155, 249, 440, 495, 496, 577, 609, 673, 744, 840, 857, 859, 919, 920, 961], "breakpoint": [69, 744, 857, 961], "inf": [69, 122, 124, 270, 390, 393, 515, 577, 688, 744, 809, 817, 821, 839, 853, 857, 949, 961], "interv": [70, 155, 156, 222, 249, 338, 353, 354, 359, 388, 447, 448, 449, 450, 451, 453, 454, 455, 577, 609, 610, 673, 756, 758, 759, 761, 766, 768, 771, 773, 774, 777, 778, 780, 781, 783, 785, 786, 787, 788, 790, 813, 961], "timedelta": [70, 155, 156, 222, 249, 333, 335, 336, 339, 344, 346, 349, 350, 351, 353, 354, 356, 358, 359, 360, 361, 363, 447, 448, 449, 450, 451, 453, 454, 455, 577, 609, 610, 673, 763, 765, 770, 776, 780, 786, 849, 850, 961], "1d": [70, 155, 156, 170, 222, 249, 328, 337, 345, 349, 353, 359, 362, 447, 448, 449, 450, 451, 453, 454, 455, 552, 577, 609, 610, 615, 673, 751, 758, 760, 763, 764, 765, 770, 772, 776, 780, 783, 785, 786, 788, 789], "closedinterv": [70, 155, 156, 249, 388, 447, 448, 449, 450, 451, 453, 454, 455, 577, 609, 610, 673, 813, 961], "lower": [70, 110, 155, 186, 241, 249, 312, 314, 388, 409, 439, 442, 451, 527, 560, 577, 602, 609, 628, 667, 673, 735, 813, 839, 858, 861, 870, 949, 961], "bound": [70, 99, 100, 142, 155, 249, 285, 299, 312, 313, 314, 388, 409, 518, 527, 577, 609, 673, 704, 718, 734, 735, 793, 813, 839, 949, 961], "upper": [70, 99, 100, 142, 155, 249, 312, 313, 388, 518, 527, 577, 609, 673, 734, 793, 813, 839, 949, 961], "period": [70, 155, 156, 198, 199, 249, 294, 353, 359, 366, 367, 368, 434, 460, 461, 577, 609, 610, 634, 635, 673, 713, 780, 786, 794, 795, 796, 853, 883, 884, 961], "like": [70, 87, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 163, 165, 169, 249, 282, 422, 440, 554, 557, 567, 577, 602, 629, 673, 701, 859, 961], "durat": [70, 170, 222, 249, 334, 337, 341, 343, 345, 348, 355, 362, 513, 577, 615, 673, 757, 760, 767, 769, 772, 775, 782, 789, 945, 961], "3d12h4m25": [70, 155, 156, 170, 222, 249, 353, 359, 609, 610, 615, 673, 780, 786], "hour": [70, 155, 156, 170, 222, 249, 349, 353, 359, 447, 448, 449, 450, 451, 453, 454, 455, 541, 542, 577, 609, 610, 615, 673, 776, 780, 786], "minut": [70, 155, 156, 170, 222, 249, 349, 353, 359, 447, 448, 449, 450, 451, 453, 454, 455, 541, 542, 577, 609, 610, 615, 673, 776, 780, 786], "tempor": [70, 155, 156, 167, 193, 209, 249, 388, 447, 448, 449, 450, 451, 453, 454, 455, 577, 588, 609, 610, 673, 813, 829, 961], "window": [70, 155, 156, 249, 323, 353, 359, 366, 367, 368, 433, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 532, 577, 609, 610, 673, 743, 780, 786, 794, 795, 796, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 961], "granular": 70, "finer": 70, "permut": 70, "1mo": [70, 155, 156, 170, 222, 249, 330, 334, 349, 352, 353, 356, 359, 447, 448, 449, 450, 451, 453, 454, 455, 577, 609, 610, 615, 673, 753, 757, 773, 776, 777, 778, 779, 780, 786, 787], "dtrang": 70, "1985": 70, "04": [70, 115, 155, 222, 249, 329, 330, 333, 334, 337, 344, 345, 346, 350, 352, 353, 354, 355, 356, 360, 361, 362, 499, 542, 609, 673, 753, 757, 760, 766, 768, 771, 772, 773, 774, 778, 779, 781, 782, 783, 787, 788, 789, 923], "05": [70, 115, 117, 118, 170, 222, 249, 329, 330, 334, 352, 354, 356, 615, 673, 752, 753, 754, 755, 756, 757, 779, 780, 784, 786, 788], "07": [70, 329, 333, 350, 352, 353, 359, 361, 499, 548, 752, 756, 779, 788, 923], "08": [70, 117, 118, 156, 249, 329, 353, 499, 542, 610, 673, 780, 786, 923], "america": 70, "new_york": 70, "\u03bc": [70, 93, 155, 156, 170, 222, 249, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 499, 542, 548, 609, 610, 615, 673, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 923], "est": 70, "combin": [70, 81, 83, 155, 156, 157, 170, 222, 249, 260, 274, 349, 359, 432, 486, 492, 498, 577, 609, 610, 615, 636, 673, 776, 786, 910, 916, 922], "offset_bi": 70, "get": [70, 95, 105, 109, 126, 132, 135, 141, 151, 152, 155, 156, 158, 159, 163, 165, 166, 172, 179, 192, 195, 197, 201, 205, 216, 225, 234, 243, 249, 257, 271, 272, 273, 275, 284, 288, 289, 301, 318, 319, 320, 321, 322, 335, 349, 376, 384, 389, 391, 399, 402, 405, 414, 415, 416, 419, 421, 423, 428, 429, 439, 468, 472, 484, 487, 507, 508, 516, 520, 545, 550, 554, 555, 556, 557, 565, 568, 569, 577, 591, 596, 599, 606, 609, 610, 611, 616, 618, 632, 639, 643, 645, 650, 660, 669, 673, 689, 690, 691, 692, 693, 703, 707, 708, 720, 731, 739, 740, 741, 742, 758, 776, 805, 808, 813, 815, 818, 830, 835, 841, 843, 844, 846, 849, 850, 854, 855, 858, 892, 895, 908, 911, 932, 938, 939, 947, 951, 952, 961], "last": [70, 132, 158, 170, 172, 184, 202, 205, 216, 218, 243, 249, 273, 285, 298, 323, 333, 350, 360, 469, 496, 508, 568, 577, 591, 615, 640, 643, 645, 646, 669, 673, 691, 704, 717, 743, 756, 777, 787, 808, 835, 920, 932, 961], "month": [70, 155, 156, 170, 222, 249, 333, 349, 353, 359, 447, 448, 449, 450, 451, 453, 454, 455, 540, 541, 577, 609, 610, 615, 673, 756, 776, 780, 786], "28": [70, 208, 249, 256, 352, 362, 577, 779, 789, 969], "disabl": [71, 167, 249], "equal": [71, 99, 100, 110, 117, 118, 150, 155, 170, 177, 249, 365, 381, 403, 446, 447, 448, 449, 450, 451, 453, 454, 455, 484, 485, 491, 502, 527, 577, 609, 615, 624, 673, 865, 866, 867, 868, 869, 870, 872, 873, 874, 878, 908, 909, 915, 926, 961, 969], "encount": [72, 155, 249, 428, 429, 482, 483, 534, 537, 546, 564, 577, 609, 673, 849, 850, 906, 907, 961], "duplic": [75, 163, 169, 170, 218, 249, 389, 577, 614, 615, 646, 673, 815, 961], "certain": [76, 102, 111, 161, 222, 249, 531, 595, 627, 637, 638, 673, 961], "least": [78, 122, 434, 519, 577, 853, 950, 961], "unexpect": [79, 249], "caus": [79, 87, 99, 100, 110, 130, 144, 249, 681, 961], "panic": 79, "mismatch": 81, "incompat": 83, "pa": [86, 115], "chunkedarrai": [86, 179, 249, 747, 961], "recordbatch": [86, 168, 249], "schemadefinit": [86, 88, 89, 90, 92, 249, 673], "schema_overrid": [86, 88, 89, 90, 91, 92, 168, 249, 673], "copi": [86, 87, 130, 133, 134, 168, 207, 213, 226, 249, 372, 502, 577, 593, 594, 651, 673, 678, 732, 736, 749, 799, 926, 938, 943, 944, 961], "closest": 86, "pair": [86, 88, 89, 90, 92, 121, 188, 249, 630, 673, 969], "declar": [86, 88, 89, 90, 92, 249, 673], "sever": [86, 88, 89, 90, 92, 249, 673, 969], "wai": [86, 88, 89, 90, 92, 138, 154, 168, 183, 202, 229, 249, 433, 435, 470, 531, 577, 597, 608, 626, 640, 655, 673], "As": [86, 88, 89, 90, 92, 103, 249, 562, 673], "auto": [86, 88, 89, 90, 92, 108, 114, 217, 249, 499, 673, 923, 969], "automat": [86, 88, 89, 90, 92, 93, 99, 100, 101, 110, 122, 124, 126, 196, 226, 249, 413, 486, 492, 498, 499, 577, 633, 651, 673, 840, 910, 916, 922, 923, 961], "equival": [86, 88, 89, 90, 92, 102, 166, 180, 249, 256, 260, 365, 379, 381, 382, 403, 410, 424, 426, 430, 432, 436, 487, 505, 515, 522, 577, 673, 832, 911, 924, 925, 961], "form": [86, 88, 89, 90, 92, 167, 193, 220, 249, 434, 577, 673, 853, 961], "them": [86, 88, 89, 90, 92, 110, 144, 155, 156, 170, 177, 222, 249, 287, 388, 428, 429, 532, 577, 609, 610, 615, 624, 673, 681, 706, 849, 850, 961], "dimens": [86, 88, 90, 92, 249, 444, 577, 673, 863, 961], "construct": [86, 88, 89, 90, 91, 92, 249, 413, 577, 607, 629, 673, 961], "allow_copi": [87, 130], "interchang": [87, 130], "protocol": [87, 101, 130], "__dataframe__": 87, "convers": [87, 130, 168, 213, 249, 499, 588, 923, 942, 943, 944, 961], "detail": [87, 101, 117, 118, 130, 249, 673, 969], "latest": [87, 102, 111, 130, 380, 420, 577], "index": [87, 91, 95, 101, 116, 130, 148, 155, 156, 161, 166, 170, 184, 190, 192, 201, 214, 222, 227, 249, 257, 271, 272, 273, 275, 276, 277, 285, 295, 299, 349, 447, 448, 449, 450, 451, 453, 454, 455, 458, 468, 480, 493, 509, 577, 609, 610, 615, 639, 653, 673, 689, 690, 691, 692, 693, 695, 696, 704, 714, 718, 776, 832, 851, 877, 880, 892, 904, 917, 933, 961], "throw": [87, 309, 482, 483, 577, 727, 906, 907, 961], "runtimeerror": 87, "from_panda": [87, 103], "from_arrow": 87, "effici": [87, 168, 249], "map": [88, 89, 99, 100, 104, 105, 108, 109, 110, 112, 131, 141, 167, 188, 192, 193, 208, 249, 353, 359, 412, 413, 519, 525, 577, 599, 630, 673, 780, 786, 840, 961], "clone": [88, 89, 90, 91, 92, 133, 212, 213, 249, 593, 673, 732, 942, 943, 944, 952, 961], "dimension": [88, 90, 92, 249, 673, 961], "infer_schema_length": [89, 92, 99, 100, 103, 110, 113, 249, 673], "NOT": [89, 117, 118], "typic": [89, 131, 249, 682, 961], "clearer": 89, "load": [89, 91, 102, 111, 123, 125, 249, 588, 611, 618, 673, 969], "want": [89, 131, 144, 180, 249, 263, 312, 313, 314, 375, 411, 413, 447, 448, 449, 450, 451, 453, 454, 455, 537, 546, 577, 595, 611, 618, 673, 681, 682, 733, 734, 735, 943, 961], "_partial_": [89, 249, 673], "omit": [89, 93, 120, 122, 124, 128, 180, 249], "mani": [89, 92, 101, 144, 249, 681, 961], "scan": [89, 92, 99, 100, 108, 110, 111, 112, 113, 114, 115, 602, 611, 618, 673], "slow": [89, 92, 99, 100, 110, 263, 323, 577, 743, 961], "partial": 89, "present": [89, 117, 122, 392, 577, 952, 961], "np": [90, 147, 249, 509, 577, 673, 817, 821, 823, 824, 865, 933, 961], "ndarrai": [90, 147, 212, 249, 509, 577, 673, 747, 877, 880, 933, 943, 961], "numpi": [90, 116, 136, 212, 213, 249, 428, 429, 577, 673, 817, 821, 823, 824, 849, 850, 865, 877, 943, 944, 952, 961], "columnar": [90, 92, 167, 193, 249], "interpret": [90, 92, 99, 100, 110, 249, 673], "yield": [90, 92, 99, 100, 110, 142, 144, 217, 249, 673, 681, 793, 961], "conclus": [90, 92, 249, 673], "nan_to_nul": [91, 249, 673, 961], "include_index": 91, "panda": [91, 103, 116, 213, 249, 513, 577, 673, 944, 945, 961], "datetimeindex": [91, 747, 961], "instal": [91, 99, 100, 101, 104, 108, 116, 136, 212, 213, 249, 636, 673, 944, 961], "nan": [91, 117, 118, 122, 130, 145, 213, 249, 326, 327, 365, 373, 381, 382, 387, 394, 396, 397, 398, 403, 410, 414, 423, 428, 429, 430, 515, 534, 564, 577, 603, 673, 684, 688, 748, 800, 823, 824, 849, 850, 865, 944, 961, 969], "convert": [91, 94, 102, 103, 111, 130, 208, 209, 210, 211, 212, 215, 249, 300, 330, 488, 499, 673, 719, 753, 912, 923, 930, 941, 942, 943, 944, 952, 961], "pd": [91, 103, 513, 577, 945, 961], "pd_df": 91, "pd_seri": 91, "tbl": [93, 96, 100], "reconstruct": 93, "repr": [93, 122, 124], "need": [93, 99, 100, 103, 117, 118, 155, 156, 200, 212, 249, 300, 413, 462, 484, 577, 609, 610, 673, 885, 908, 961], "trim": 93, "whitespac": [93, 486, 492, 498, 910, 916, 922], "prompt": 93, "extract": [93, 333, 334, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 354, 355, 360, 361, 363, 435, 481, 482, 483, 577, 754, 755, 756, 757, 759, 760, 762, 766, 767, 768, 769, 771, 772, 773, 774, 775, 777, 778, 781, 782, 784, 787, 788, 790, 905, 906, 907], "to_init_repr": [93, 249, 961], "handl": [93, 99, 100, 110, 115, 281, 324, 502, 577, 700, 746, 926, 961], "truncat": [93, 155, 249, 349, 609, 627, 673, 776], "identifi": [93, 176, 182, 218, 249, 623, 646, 673], "compound": 93, "struct": [93, 180, 196, 215, 219, 226, 249, 300, 413, 482, 495, 496, 519, 537, 538, 539, 553, 577, 633, 647, 651, 673, 719, 906, 919, 920], "source_ac": 93, "source_cha": 93, "ident": [93, 133, 134, 249, 593, 594, 673, 732, 736, 961], "timestamp": [93, 352, 548, 779], "tor_id": 93, "nnel_id": 93, "asia": [93, 754, 755, 784], "tokyo": 93, "123456780": 93, "9876543210": 93, "56": [93, 511, 577], "59": [93, 116, 121, 329, 344, 354, 541, 752, 771, 781], "663053": 93, "jst": 93, "803065983": 93, "2055938745": 93, "38": [93, 122], "18": [93, 156, 249, 322, 353, 359, 362, 387, 400, 577, 610, 627, 673, 789], "050545": 93, "source_actor_id": 93, "source_channel_id": 93, "sr": [93, 678, 961], "dummi": [94, 210, 249, 939, 961], "to_dummi": [94, 249, 961], "foo_1": [94, 210, 249], "foo_2": [94, 210, 249], "bar_3": [94, 210, 249], "bar_4": [94, 210, 249], "ham_a": [94, 210, 249], "ham_b": [94, 210, 249], "datatypeclass": 95, "uint32": [95, 116, 142, 249, 273, 276, 277, 289, 333, 336, 340, 342, 344, 346, 347, 350, 351, 354, 360, 361, 443, 475, 484, 487, 509, 513, 577, 692, 695, 696, 708, 727, 756, 759, 766, 768, 771, 773, 774, 777, 778, 781, 787, 788, 793, 822, 878, 899, 945, 961], "regular": [95, 167, 192, 193, 222, 249, 369, 531, 544, 554, 557, 567, 577], "uint64": [95, 157, 249, 276, 277, 383, 442, 577, 695, 696, 807, 861, 961], "bigidx": 95, "read": [96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 144, 249, 411, 570, 577, 602, 607, 629, 673, 681, 961], "batch": [96, 100, 113, 619, 673], "over": [96, 99, 100, 102, 110, 122, 131, 144, 167, 168, 192, 193, 217, 228, 231, 249, 263, 323, 374, 387, 411, 412, 446, 447, 448, 449, 450, 451, 453, 454, 455, 525, 537, 538, 546, 553, 561, 577, 657, 681, 682, 743, 865, 866, 867, 869, 873, 961], "fetch": [96, 110, 171, 249, 593, 595, 611, 618, 673], "ideal": 96, "read_csv_batch": [96, 589], "tpch": [96, 100], "tables_scale_100": [96, 100], "lineitem": [96, 100, 101], "try_parse_d": [96, 99, 100, 110], "In": [97, 102, 111, 114, 122, 124, 127, 131, 142, 144, 155, 156, 180, 249, 263, 419, 577, 609, 610, 673, 681, 793, 860, 961], "probabl": [97, 127, 364, 577, 792, 961], "n_row": [98, 99, 100, 104, 108, 110, 112, 113, 114, 168, 249, 602, 673], "accept": [98, 99, 100, 102, 104, 108, 132, 143, 154, 196, 202, 216, 226, 229, 249, 256, 369, 388, 433, 470, 522, 528, 530, 531, 532, 533, 544, 554, 557, 566, 577, 591, 601, 608, 633, 640, 645, 651, 655, 673, 813, 961], "stop": [98, 99, 100, 104, 108, 110, 112, 113, 114, 333, 335, 336, 338, 339, 344, 346, 350, 351, 353, 354, 358, 359, 360, 361, 363, 751, 753, 756, 758, 759, 761, 766, 768, 771, 773, 774, 777, 778, 780, 781, 783, 785, 786, 787, 788, 789, 790], "textio": 99, "new_column": [99, 100, 103, 110, 189, 249], "comment_char": [99, 100, 110], "quote_char": [99, 100, 110], "skip_row": [99, 100, 110], "missing_utf8_is_empty_str": [99, 100, 110], "ignore_error": [99, 100, 110], "n_thread": [99, 100], "8192": 99, "csvencod": [99, 100, 110], "low_memori": [99, 100, 108, 110, 113, 114], "storage_opt": [99, 102, 104, 108, 111, 112, 114], "skip_rows_after_head": [99, 100, 110], "row_count_nam": [99, 100, 104, 108, 110, 112, 113, 114], "row_count_offset": [99, 100, 104, 108, 110, 112, 113, 114], "sample_s": [99, 100], "eol_char": [99, 100, 110], "we": [99, 100, 103, 110, 170, 249, 282, 488, 552, 570, 615, 619, 673, 682, 701, 809, 857, 912, 961], "handler": [99, 100, 103], "g": [99, 100, 102, 103, 104, 108, 111, 112, 114, 220, 249, 256, 263, 369, 462, 544, 577, 630, 673, 878, 943, 961], "builtin": [99, 100, 103], "stringio": [99, 100], "fsspec": [99, 100, 104, 108, 111, 112, 114, 116], "remot": [99, 100, 104, 108], "first": [99, 100, 103, 110, 113, 121, 131, 153, 155, 158, 170, 172, 179, 183, 184, 205, 211, 217, 218, 222, 234, 249, 273, 275, 282, 285, 286, 323, 349, 353, 384, 391, 405, 413, 435, 458, 470, 480, 482, 483, 489, 490, 530, 537, 546, 550, 570, 577, 595, 609, 611, 615, 618, 626, 646, 652, 660, 673, 691, 701, 704, 705, 719, 743, 745, 776, 780, 808, 818, 835, 840, 877, 904, 906, 907, 913, 914, 932, 941, 961, 969], "autogener": [99, 100, 110], "column_x": [99, 100, 110], "enumer": [99, 100, 110, 168, 249], "shorter": [99, 100], "remain": [99, 100, 110, 142, 249, 495, 496, 619, 673, 793, 919, 920, 961], "comment": [99, 100, 110], "instanc": [99, 100, 110, 122, 124, 128, 144, 149, 249, 300, 309, 420, 447, 448, 449, 450, 451, 453, 454, 455, 537, 546, 577, 619, 653, 673, 681, 727, 961], "special": [99, 100, 110, 682, 961], "escap": [99, 100, 110], "dure": [99, 100, 110, 128, 144, 249, 681, 961], "would": [99, 100, 110, 273, 285, 419, 440, 528, 577, 691, 704, 859, 943, 961], "prefer": [99, 100, 102, 110, 125, 131, 144, 167, 192, 193, 231, 249, 263, 446, 577, 657, 673, 681, 682, 865, 961, 969], "treat": [99, 100, 110, 474, 489, 490, 898, 913, 914], "10000": [99, 168, 249, 502], "check": [99, 100, 110, 117, 118, 150, 164, 166, 249, 259, 261, 279, 303, 306, 307, 388, 392, 474, 478, 497, 577, 619, 673, 679, 680, 698, 721, 724, 725, 814, 816, 819, 820, 822, 827, 828, 829, 831, 832, 878, 898, 902, 921, 961], "might": [99, 100, 110, 126, 263, 419, 517, 577, 944, 961], "issu": [99, 100, 103, 110, 321, 322, 507, 577, 741, 742, 931, 961], "iso8601": [99, 100, 110], "alwai": [99, 121, 131, 231, 249, 419, 570, 619, 657, 673, 682, 961, 969], "physic": [99, 100, 170, 249, 310, 513, 577, 592, 614, 615, 673, 729, 945, 961], "cpu": [99, 100], "system": [99, 100], "wrongli": 99, "done": [99, 100, 110, 115, 153, 170, 249, 262, 264, 309, 485, 491, 526, 577, 615, 673, 727, 909, 915, 961], "buffer": [99, 100, 142, 167, 249, 793, 961], "modifi": [99, 100, 110, 126, 128, 160, 167, 224, 249, 274, 352, 362, 577, 779, 789, 862, 924, 925, 961], "lossi": [99, 100, 110], "decod": [99, 100], "usag": [99, 100, 110, 122, 124, 200, 249, 886, 961], "expens": [99, 100, 108, 110, 113, 114, 123, 125, 131, 167, 192, 193, 217, 218, 249, 263, 577, 646, 673, 681, 682, 961, 969], "nativ": [99, 104, 108, 131, 167, 193, 209, 231, 249, 263, 577, 582, 657, 682, 961, 969], "parser": 99, "even": 99, "regard": [99, 534, 564], "sens": [99, 104, 108, 112, 114, 155, 156, 177, 222, 249, 609, 610, 624, 673], "particular": [99, 104, 108, 112, 114, 142, 249, 793, 961], "storag": [99, 102, 104, 108, 111, 112, 114], "skip": [99, 100, 103, 108, 110, 114, 220, 249, 682, 961], "offset": [99, 100, 104, 108, 110, 112, 113, 114, 155, 156, 201, 222, 227, 249, 295, 349, 353, 359, 468, 493, 499, 577, 609, 610, 639, 653, 673, 714, 776, 780, 786, 892, 917, 923, 961], "row_count": [99, 100, 104, 108, 110, 112, 113, 114], "sampl": [99, 100, 231, 249, 467, 577, 657, 891, 961], "estim": [99, 100, 142, 249, 264, 367, 368, 401, 526, 577, 673, 793, 795, 796, 833, 961], "alloc": [99, 100, 142, 187, 249, 793, 961], "scan_csv": [99, 100, 637, 638, 673], "lazili": [99, 100, 110, 111, 112, 113, 114, 413, 577], "glob": [99, 100, 110, 112, 113, 114], "pattern": [99, 100, 110, 112, 113, 114, 167, 249, 418, 474, 475, 480, 481, 489, 490, 879, 880, 898, 899, 904, 905, 913, 914, 961], "store": [99, 108, 144, 167, 193, 249, 681, 961], "continu": [99, 108, 467, 577, 891, 961], "benchmark": [99, 108], "50000": 100, "batchedcsvread": [100, 588], "upon": 100, "creation": 100, "gather": 100, "next_batch": 100, "big": 100, "interest": 100, "seen_group": 100, "big_fil": 100, "while": [100, 102, 103, 111, 122, 124, 167, 176, 217, 249, 623, 673], "df_current_batch": 100, "concat": [100, 731, 846, 961], "partition_df": 100, "partition_bi": [100, 168, 249], "as_dict": [100, 182, 249], "fh": 100, "write_csv": [100, 110, 249], "els": [100, 570], "partition_on": 101, "partition_rang": 101, "partition_num": 101, "dbreadengin": 101, "connectorx": [101, 116], "raw": 101, "partit": [101, 102, 108, 111, 115, 168, 182, 249], "backend": [101, 102, 111], "transfer": 101, "document": [101, 103, 356, 483, 499, 783, 907, 923], "redshift": 101, "mysql": 101, "mariadb": 101, "clickhous": 101, "oracl": 101, "bigqueri": 101, "pleas": 101, "doc": [101, 136, 249], "github": 101, "sfu": 101, "db": 101, "connector": 101, "destin": 101, "sqlite": 101, "develop": [101, 122, 124], "flight_sql": 101, "further": [101, 944, 961], "wide": [101, 153, 176, 220, 249, 623, 673], "adopt": 101, "significantli": [101, 969], "better": [101, 131, 231, 249, 263, 519, 577, 657, 879, 880, 961], "driver": 101, "cpp": 101, "partition_col": 101, "explicitli": [101, 120, 122, 128, 413, 566, 577], "delta_table_opt": [102, 111], "lake": [102, 111, 588], "root": [102, 111, 400, 412, 421, 437, 471, 506, 576, 577, 894, 961], "filesystem": [102, 111], "absolut": [102, 111, 117, 118, 255, 366, 367, 368, 577, 677, 794, 795, 796, 961], "gc": [102, 111], "azur": [102, 111], "deltalak": [102, 111, 116], "cloud": [102, 111, 115], "configur": [102, 111], "authent": [102, 111], "keyword": [102, 108, 111, 136, 183, 192, 196, 226, 229, 249, 435, 563, 566, 577, 626, 633, 651, 655, 673, 961], "table_path": [102, 111], "avoid": 102, "year": [102, 111, 155, 156, 170, 222, 249, 338, 339, 349, 350, 353, 359, 360, 447, 448, 449, 450, 451, 453, 454, 455, 540, 541, 577, 609, 610, 615, 673, 761, 762, 776, 777, 780, 786, 787], "2021": [102, 111, 137, 153, 155, 222, 249, 499, 552, 609, 673, 754, 755, 762, 784, 829, 923, 961], "aw": [102, 111], "bucket": [102, 111, 353, 359, 780, 786, 809, 961], "aws_access_key_id": [102, 111], "the_aws_access_key_id": [102, 111], "aws_secret_access_kei": [102, 111], "the_aws_secret_access_kei": [102, 111], "googl": [102, 111], "service_account": [102, 111], "service_account_json_absolute_path": [102, 111], "az": [102, 111], "adl": [102, 111], "abf": [102, 111], "azure_storage_account_nam": [102, 111], "azure_storage_account_kei": [102, 111], "without_fil": [102, 111], "track": [102, 111, 131, 249], "sheet_id": 103, "sheet_nam": 103, "xlsx2csv_option": 103, "read_csv_opt": 103, "noreturn": 103, "xlsx2csv": [103, 116], "read_csv": [103, 110], "neither": [103, 194, 249], "nor": [103, 194, 249], "skip_empty_lin": 103, "my": [103, 115], "datasheet": 103, "correct": [103, 367, 368, 401, 452, 467, 577, 619, 673, 795, 796, 833, 871, 891, 961], "look": [103, 300, 303, 721], "fix": [103, 120, 122, 362, 447, 448, 449, 450, 451, 453, 454, 455, 577, 789], "whole": [103, 469, 470, 480, 577, 673, 904], "With": [103, 131, 166, 249, 263, 577, 682, 832, 961], "1000": [103, 142, 211, 249, 340, 341, 502, 767, 941, 961, 969], "spreadsheet": [103, 184, 249], "xl": 103, "xlsm": 103, "xlsb": 103, "odf": 103, "od": [103, 498, 922], "odt": 103, "memory_map": [104, 108, 112], "v2": [104, 112], "greatli": [104, 112], "repeat": [104, 112, 441, 443, 577], "o": [104, 112, 308, 323, 479, 514, 577, 726, 743, 903, 946, 961], "page": [104, 108, 112, 114, 249, 577, 588, 638, 673, 961], "give": [104, 108, 112, 113, 114, 176, 218, 249, 335, 401, 443, 515, 577, 588, 623, 646, 673, 758, 833, 961], "That": [104, 619, 673], "filenam": 104, "my_fil": 104, "write_ipc": [104, 249], "read_ndjson": 106, "parallelstrategi": [108, 114], "use_statist": [108, 114], "awar": [108, 167, 193, 209, 249, 499, 923], "stabl": [108, 136, 194, 249, 408, 577, 623, 673], "row_group": [108, 114], "read_tabl": 108, "with_column_nam": 110, "push": [110, 112, 113, 114, 115], "down": [110, 112, 113, 114, 115, 378, 577, 804, 961], "therebi": [110, 112, 113, 114], "potenti": [110, 112, 113, 114], "overhead": [110, 112, 113, 114], "realloc": [110, 112, 113, 144, 249, 681, 961], "headerless": 110, "unlik": 110, "fewer": 110, "my_long_fil": 110, "doesn": [110, 364, 577, 792, 952, 961], "thing": [110, 523, 545], "less": [110, 170, 249, 403, 410, 485, 491, 496, 502, 577, 615, 673, 909, 915, 920, 926, 969], "limit": [110, 146, 249, 302, 312, 313, 314, 374, 380, 577, 604, 611, 638, 673, 733, 734, 735, 801, 961], "breezah": 110, "languag": [110, 155, 156, 170, 222, 249, 349, 353, 359, 447, 448, 449, 450, 451, 453, 454, 455, 577, 609, 610, 615, 673, 776, 780, 786], "hard": [110, 619, 673], "mydf": 110, "lambda": [110, 131, 149, 183, 231, 249, 263, 300, 366, 367, 368, 411, 412, 446, 525, 537, 538, 539, 546, 553, 561, 567, 577, 619, 626, 657, 673, 682, 719, 794, 795, 796, 961], "simpli": [110, 537, 546], "idx": [110, 155, 168, 249, 300, 609, 673, 719, 880, 961], "uint16": [110, 321, 322, 507, 577, 741, 742, 931, 961], "u16": [110, 969], "aws_region": 111, "eu": 111, "central": [111, 401, 467, 577, 833, 891, 961], "allow_pyarrow_filt": 115, "comparison": 115, "dset": 115, "folder": 115, "1970": 115, "stdout": [116, 153, 249], "13": [116, 133, 134, 145, 146, 152, 156, 161, 171, 179, 226, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 249, 446, 448, 532, 537, 546, 569, 577, 593, 594, 603, 604, 610, 617, 651, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 673, 682, 780, 786, 787, 961], "platform": 116, "maco": 116, "arm64": 116, "arm": 116, "64bit": [116, 442, 577, 861, 961], "main": 116, "feb": 116, "clang": 116, "14": [116, 131, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 249, 339, 387, 577, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 780], "1400": 116, "29": 116, "202": 116, "2_alpha": 116, "detect": 116, "matplotlib": [116, 627, 636, 673], "check_dtyp": [117, 118], "check_exact": [117, 118], "rtol": [117, 118], "1e": [117, 118], "atol": [117, 118], "nans_compare_equ": [117, 118], "check_column_ord": 117, "check_row_ord": 117, "assertionerror": [117, 118], "compar": [117, 118, 150, 249, 365, 381, 382, 403, 410, 430, 524, 577, 878, 961], "exactli": [117, 118, 121, 122, 124, 495, 496, 886, 919, 920, 961], "toler": [117, 118, 170, 249, 615, 673], "inexact": [117, 118], "assert": [117, 118, 120, 122, 124, 156, 249, 588, 610, 673, 806, 961], "irrespect": 117, "unsort": 117, "check_nam": 118, "s1": [118, 149, 249, 832, 944, 953, 961], "searchstrategi": [119, 122, 124], "null_prob": [119, 122, 124], "percentag": [119, 122, 124, 434, 577, 853, 961], "chanc": [119, 122, 124, 969], "independ": [119, 122, 124], "flag": [119, 459, 577, 600, 619, 673, 881, 961], "hypothesi": [119, 120, 121, 122, 123, 124, 969], "sampled_from": [119, 969], "unique_small_int": 119, "ccy": [119, 969], "gbp": [119, 969], "eur": [119, 137, 153, 249, 969], "jpy": [119, 969], "min_col": [120, 122], "max_col": [120, 122], "suitabl": [120, 131, 249, 263, 458, 577, 682, 877, 961, 969], "standalon": [120, 122], "itself": [120, 617, 673], "mincol": 120, "exact": [120, 122, 124, 200, 249, 499, 515, 577, 923], "especi": 120, "punctuat": 120, "test_special_char_colname_init": 120, "test_unique_xyz": 120, "assert_someth": 120, "inner_dtyp": 121, "select_from": 121, "min_siz": [121, 122, 124, 969], "max_siz": [121, 122, 124, 969], "anoth": [121, 154, 249, 299, 323, 328, 577, 608, 652, 673, 718, 743, 751, 878, 961], "randomli": 121, "innermost": 121, "ignor": [121, 122, 124, 174, 204, 249, 281, 324, 352, 366, 367, 368, 428, 429, 577, 700, 746, 779, 794, 795, 796, 849, 850, 961], "unset": [121, 352, 779], "2x": 121, "lst": 121, "11330": 121, "24030": 121, "116": 121, "zz": 121, "small": [121, 171, 249, 353, 602, 673, 969], "uint8_pair": [121, 969], "uint": [121, 969], "zip": [121, 969], "131": 121, "176": 121, "149": [121, 969], "include_col": 122, "allow_infin": [122, 124], "allowed_dtyp": [122, 124, 969], "excluded_dtyp": [122, 124], "describ": [122, 153, 249, 961], "desir": 122, "n_chunk": [122, 124, 249, 961], "randomis": 122, "onto": 122, "either": [122, 156, 166, 171, 174, 182, 192, 204, 249, 528, 566, 610, 617, 673], "pct": 122, "preced": 122, "disallow": [122, 124], "exclud": [122, 124, 319, 322, 388, 531, 564, 577, 813, 829, 961], "deploi": [122, 124], "characterist": [122, 124], "concret": [122, 124], "test_repr": [122, 124], "isinst": [122, 124, 249], "known": [122, 657], "df_strategi": 122, "15836": 122, "1755e": 122, "575050513": 122, "profil": [123, 125, 673], "balanc": [123, 125, 969], "set_environ": 123, "polars_hypothesis_profil": [123, 125], "1500": 123, "constructor": 124, "max_data_s": 124, "54666": 124, "6414": 124, "63290": 124, "polars_max_thread": 126, "behind": 126, "lock": 126, "reason": 126, "pyspark": 126, "udf": [126, 131, 183, 231, 249, 263, 435, 525, 577, 626, 657, 673, 682, 961], "similar": [126, 149, 170, 249, 433, 570, 577, 615, 673], "recommend": [126, 167, 183, 249], "scope": 128, "lifetim": 128, "initi": [128, 537, 546, 570], "whatev": 128, "were": 128, "enter": 128, "advantag": [128, 183, 249], "initialis": [128, 673], "set_": 128, "set_verbos": 128, "do_various_th": 128, "restor": 128, "init": 128, "prefix": [128, 307, 497, 502, 577, 725, 921, 926], "breviti": 128, "nan_as_nul": 130, "_pyarrowdatafram": 130, "nullabl": 130, "extens": [130, 213, 249, 944, 961], "propag": [130, 174, 204, 249, 428, 429, 577, 849, 850, 961], "inference_s": [131, 249], "256": [131, 249, 853, 961], "user": [131, 183, 231, 249, 263, 435, 459, 525, 577, 626, 657, 673, 682, 881, 961], "logic": [131, 231, 249, 260, 432, 513, 522, 577, 607, 614, 629, 654, 657, 673, 682, 945, 961], "almost": [131, 231, 249, 657, 682, 961], "_significantly_": [131, 231, 249, 657, 682, 961], "intens": [131, 231, 249, 657, 682, 961], "becaus": [131, 142, 155, 171, 220, 231, 249, 282, 609, 657, 673, 682, 701, 793, 961], "forc": [131, 170, 231, 249, 614, 615, 657, 673, 682, 961], "materi": [131, 231, 249, 627, 657, 673, 682, 961], "parallelis": [131, 231, 249, 657, 682, 961], "optimis": [131, 231, 249, 657, 673, 682, 879, 880, 961], "achiev": [131, 231, 249, 263, 577, 657, 682, 961], "best": [131, 231, 249, 263, 577, 657, 682, 961], "tri": [131, 249], "arbitrarili": [131, 249], "rearrang": [131, 249], "preserv": [131, 213, 249, 464, 577, 888, 944, 961], "lru_cach": [131, 249, 263, 577, 682, 961], "magnitud": [131, 249, 263, 577, 682, 961], "speedup": [131, 167, 249, 263, 577, 682, 961], "column_1": [131, 217, 249], "scalar": [131, 166, 192, 249, 458, 525, 552, 577, 832, 877, 961], "k": [132, 216, 249, 308, 310, 401, 514, 577, 591, 645, 673, 726, 729, 833, 946, 961], "intoexpr": [132, 154, 155, 156, 196, 202, 216, 226, 229, 249, 388, 433, 470, 528, 530, 532, 533, 537, 546, 554, 557, 563, 566, 570, 577, 591, 608, 609, 610, 633, 640, 645, 655, 673, 813, 961], "nulls_last": [132, 202, 216, 249, 273, 469, 577, 591, 640, 645, 673, 691, 961], "smallest": [132, 216, 249, 308, 577, 591, 645, 673, 726, 961], "largest": [132, 216, 249, 514, 577, 591, 645, 673, 946, 961], "top": [132, 216, 249, 591, 645, 673], "top_k": [132, 249, 308, 577, 591, 673, 726, 961], "cheap": [133, 134, 249, 593, 594, 673, 681, 732, 736, 961], "deepcopi": [133, 134, 249, 593, 594, 673, 732, 736, 961], "clear": [134, 249, 594, 673, 736, 961], "properti": [135, 141, 159, 195, 197, 225, 249, 596, 599, 632, 650, 673, 969], "appl": [135, 160, 169, 188, 190, 208, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 249, 437, 445, 478, 497, 506, 577, 614, 630, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 673, 902, 921], "banana": [135, 208, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 249, 437, 445, 506, 577, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668], "pearson": [136, 249, 401, 467, 534, 559, 577, 833, 891, 961], "correl": [136, 249, 534, 559, 564], "coeffici": [136, 249, 467, 577, 891, 961], "corrcoef": [136, 249], "percentil": [137, 249, 745, 961], "summari": [137, 249, 745, 961], "One": [137, 180, 184, 249, 260, 432, 577, 745, 961], "glimps": [137, 158, 249], "usd": [137, 153, 249, 969], "2020": [137, 153, 156, 249, 330, 334, 337, 340, 341, 343, 345, 348, 352, 355, 356, 499, 610, 673, 753, 757, 760, 767, 769, 772, 775, 779, 782, 923], "null_count": [137, 140, 249, 323, 577, 743, 745, 961], "266667": [137, 249], "666667": [137, 174, 223, 237, 249, 366, 577, 649, 663, 673], "std": [137, 249, 446, 577, 673, 745, 872, 961], "101514": [137, 249], "707107": [137, 249, 367, 577, 795, 961], "57735": [137, 249], "median": [137, 184, 249, 449, 577, 652, 673, 745, 868, 961], "more_column": [138, 143, 219, 249, 369, 544, 577, 597, 601, 647, 673], "Or": [138, 154, 155, 156, 170, 202, 222, 229, 249, 433, 470, 531, 570, 577, 597, 608, 609, 610, 615, 640, 655, 673], "subset": [140, 180, 218, 249, 598, 646, 673], "snippet": [140, 249, 598, 673], "is_nul": [140, 249, 577, 598, 673, 961], "sizeunit": [142, 249, 793, 961], "heap": [142, 249, 793, 961], "its": [142, 249, 329, 353, 359, 470, 577, 752, 780, 786, 793, 961], "bitmap": [142, 249, 793, 961], "therefor": [142, 249, 300, 570, 793, 961], "structarrai": [142, 249, 793, 961], "constant": [142, 156, 249, 372, 577, 610, 673, 793, 799, 961], "unchang": [142, 249, 513, 577, 619, 657, 673, 793, 945, 961], "capac": [142, 200, 249, 793, 886, 961], "ffi": [142, 249, 793, 961], "kb": [142, 249, 793, 961], "mb": [142, 249, 793, 961], "gb": [142, 249, 793, 961], "tb": [142, 249, 793, 961], "revers": [142, 249, 318, 319, 320, 321, 322, 412, 437, 506, 577, 673, 739, 740, 741, 742, 961], "1_000_000": [142, 249, 793, 961], "25888898": [142, 249], "689577102661133": [142, 249], "long": [143, 176, 220, 249, 601, 623, 673], "letter": [143, 234, 243, 249, 369, 544, 577, 601, 660, 669, 673], "thu": [144, 249, 534, 564, 681, 961], "faster": [144, 220, 249, 263, 446, 487, 517, 577, 637, 638, 673, 681, 682, 865, 911, 961], "onlin": [144, 249, 681, 961], "rerun": [144, 249, 681, 961], "fill_valu": [145, 199, 220, 249, 461, 577, 635, 673, 884, 961], "Not": [145, 249, 394, 396, 413, 577, 603, 673], "To": [145, 249, 326, 327, 349, 374, 554, 557, 567, 577, 603, 673, 776], "fillnullstrategi": [146, 249, 374, 577, 604, 673, 801, 961], "matches_supertyp": [146, 249, 604, 673], "forward": [146, 170, 249, 374, 380, 577, 604, 615, 673, 801, 961], "consecut": [146, 249, 302, 374, 380, 473, 577, 604, 673, 801, 897, 961], "supertyp": [146, 249, 262, 577, 604, 673], "fill_nan": [146, 249, 577, 673, 961], "OR": [147, 249, 524, 605, 673], "reduct": [149, 249], "supercast": [149, 249], "parent": [149, 249], "rule": [149, 249, 356, 783], "arithmet": [149, 249], "zip_with": [149, 249, 961], "foo11": [149, 249], "bar22": [149, 249], "null_equ": [150, 249, 878, 961], "retriev": [151, 249, 276, 277, 503, 695, 696, 927], "return_as_str": [153, 249], "preview": [153, 249], "nice": [153, 249], "few": [153, 249], "rather": [153, 170, 249, 502, 615, 673, 926], "head": [153, 172, 205, 249, 262, 405, 577, 618, 673, 835, 932, 961], "tail": [153, 158, 249, 262, 467, 577, 673, 808, 891, 961], "more_bi": [154, 182, 202, 249, 470, 577, 608, 640, 673], "maintain_ord": [154, 182, 184, 218, 222, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 249, 257, 263, 301, 509, 516, 535, 577, 595, 600, 602, 608, 627, 636, 637, 638, 646, 656, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 673, 720, 744, 857, 947, 961], "consist": [154, 182, 249, 499, 608, 673, 923], "agg": [154, 155, 156, 249, 257, 263, 375, 377, 469, 470, 509, 521, 535, 577, 595, 600, 602, 608, 609, 610, 627, 636, 673], "index_column": [155, 156, 249, 609, 610, 673], "include_boundari": [155, 249, 609, 673], "start_bi": [155, 249, 609, 673], "startbi": [155, 249, 609, 673], "dynamicgroupbi": [155, 249], "normal": [155, 249, 364, 401, 467, 577, 609, 673, 792, 833, 891, 961], "groupbi": [155, 156, 180, 249, 257, 263, 282, 323, 375, 377, 433, 469, 470, 509, 521, 525, 535, 577, 595, 600, 602, 609, 610, 627, 636, 673, 701, 743, 961], "member": [155, 249, 609, 673, 820, 961], "seen": [155, 249, 302, 380, 577, 609, 673], "roll": [155, 156, 249, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 532, 577, 609, 610, 673, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 961], "slot": [155, 249, 281, 323, 324, 577, 609, 673, 700, 743, 746, 961], "1n": [155, 156, 170, 222, 249, 349, 353, 359, 447, 448, 449, 450, 451, 453, 454, 455, 577, 609, 610, 615, 673, 776, 780, 786], "nanosecond": [155, 156, 170, 222, 249, 349, 353, 354, 359, 447, 448, 449, 450, 451, 453, 454, 455, 542, 577, 609, 610, 615, 673, 776, 780, 781, 786], "1u": [155, 156, 170, 222, 249, 349, 353, 359, 447, 448, 449, 450, 451, 453, 454, 455, 577, 609, 610, 615, 673, 776, 780, 786], "microsecond": [155, 156, 170, 222, 249, 349, 353, 354, 359, 447, 448, 449, 450, 451, 453, 454, 455, 541, 542, 577, 609, 610, 615, 627, 673, 776, 780, 786], "1m": [155, 156, 170, 222, 249, 340, 341, 343, 348, 349, 353, 355, 359, 447, 448, 449, 450, 451, 453, 454, 455, 577, 609, 610, 615, 673, 767, 769, 775, 776, 780, 782, 786], "millisecond": [155, 156, 170, 222, 249, 349, 353, 359, 447, 448, 449, 450, 451, 453, 454, 455, 542, 577, 609, 610, 615, 673, 776, 780, 786], "1h": [155, 156, 170, 222, 249, 349, 353, 359, 447, 448, 449, 450, 451, 453, 454, 455, 577, 609, 610, 615, 673, 759, 776, 780, 786], "1w": [155, 156, 170, 222, 249, 349, 353, 359, 447, 448, 449, 450, 451, 453, 454, 455, 577, 609, 610, 615, 673, 776, 780, 786], "week": [155, 156, 170, 222, 249, 349, 353, 359, 361, 447, 448, 449, 450, 451, 453, 454, 455, 542, 577, 609, 610, 615, 673, 776, 780, 786, 788], "1y": [155, 156, 170, 222, 249, 338, 349, 353, 359, 447, 448, 449, 450, 451, 453, 454, 455, 577, 609, 610, 615, 673, 761, 776, 780, 786, 790], "1i": [155, 156, 170, 222, 249, 349, 447, 448, 449, 450, 451, 453, 454, 455, 577, 609, 610, 615, 673, 776], "10i": [155, 156, 249, 609, 610, 673], "ascend": [155, 156, 249, 609, 610, 673], "often": [155, 156, 249, 280, 443, 577, 609, 610, 673, 699], "dynam": [155, 249, 447, 448, 449, 450, 451, 453, 454, 455, 577, 609, 673], "matter": [155, 156, 167, 193, 209, 249, 609, 610, 673], "_lower_bound": [155, 249, 609, 673], "_upper_bound": [155, 249, 609, 673], "impact": [155, 249, 609, 673], "harder": [155, 249, 609, 673], "inclus": [155, 156, 249, 388, 447, 448, 449, 450, 451, 453, 454, 455, 494, 495, 577, 609, 610, 673, 813, 918, 919, 961], "datapoint": [155, 249, 609, 673], "mondai": [155, 249, 361, 609, 673, 788], "date_rang": [155, 222, 249, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 609, 673, 751, 753, 756, 757, 758, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790], "30m": [155, 249, 353, 359, 609, 673, 780, 786], "time_min": [155, 249, 609, 673], "time_max": [155, 249, 609, 673], "23": [155, 156, 249, 329, 336, 353, 541, 609, 610, 673, 752, 759, 969], "boundari": [155, 249, 312, 313, 314, 577, 609, 673, 733, 734, 735, 809, 961], "time_count": [155, 249, 609, 673], "_lower_boundari": [155, 249, 609, 673], "_upper_boundari": [155, 249, 609, 673], "lower_bound": [155, 249, 312, 314, 388, 577, 609, 673, 733, 735, 813, 949, 961], "upper_bound": [155, 249, 300, 312, 313, 388, 577, 609, 673, 733, 734, 813, 839, 961], "time_agg_list": [155, 249, 609, 673], "arang": [155, 220, 231, 249, 609, 657, 673], "2i": [155, 249, 609, 673], "3i": [155, 249, 609, 673], "a_agg_list": [155, 249, 609, 673], "rollinggroupbi": [156, 249], "dynamic_groupbi": [156, 249, 610, 673], "groupby_dynam": [156, 249, 610, 673], "48": [156, 249, 610, 673], "19": [156, 170, 249, 353, 610, 615, 673, 780, 786], "43": [156, 249, 322, 577, 610, 673], "strptime": [156, 249, 352, 610, 673, 779], "2d": [156, 212, 249, 552, 610, 673, 756], "sum_a": [156, 249, 610, 673], "min_a": [156, 249, 610, 673], "max_a": [156, 249, 610, 673], "to_list": [156, 249, 300, 610, 673, 719, 961], "seed": [157, 194, 249, 383, 440, 457, 463, 577, 807, 859, 876, 887, 961], "seed_1": [157, 249, 383, 577, 807, 961], "seed_2": [157, 249, 383, 577, 807, 961], "seed_3": [157, 249, 383, 577, 807, 961], "hash": [157, 249, 577, 961], "u64": [157, 249, 383, 442, 577, 627, 673, 807, 961], "10783150408545073287": [157, 249], "1438741209321515184": [157, 249], "10047419486152048166": [157, 249], "2047317070637311557": [157, 249], "ab": [158, 172, 205, 226, 249, 503, 504, 554, 557, 577, 651, 673, 808, 835, 932, 961], "grown": [160, 249], "baz": [161, 162, 184, 219, 249, 494, 496, 613, 647, 673, 920], "intermedi": [162, 249, 613, 673, 812, 961, 969], "linear": [162, 186, 241, 249, 278, 387, 416, 439, 451, 532, 533, 560, 577, 613, 628, 667, 673, 697, 812, 858, 870, 961], "mask": [163, 165, 249, 279, 303, 304, 389, 391, 399, 474, 476, 577, 698, 721, 722, 802, 813, 815, 818, 830, 854, 855, 879, 898, 900, 953, 961], "visual": [163, 165, 249], "buffer_s": [167, 249], "intern": [167, 249], "veri": [167, 217, 249, 263, 577, 594, 673, 736, 961], "fit": [167, 200, 220, 249, 462, 577, 885, 886, 961], "signific": [167, 249, 263, 577], "4x": [167, 249], "materialis": [167, 168, 192, 193, 249], "iter_row": [168, 192, 193, 249], "17_500": [168, 249], "klmnoopqrstuvwxyz": [168, 249], "__name__": [168, 249], "7500": [168, 249], "15_000": [168, 249], "record_batch": [168, 249], "to_arrow": [168, 249, 961], "to_batch": [168, 249], "date32": [168, 249], "large_str": [168, 207, 213, 249], "15000": [168, 249], "2500": [168, 249], "joinstrategi": [169, 249, 614, 673], "left_on": [169, 170, 249, 614, 615, 673], "right_on": [169, 170, 249, 614, 615, 673], "suffix": [169, 170, 196, 226, 229, 249, 306, 394, 396, 397, 398, 433, 445, 478, 577, 614, 615, 633, 651, 652, 655, 673, 724, 902], "_right": [169, 170, 249, 614, 615, 673], "outer": [169, 249, 614, 673], "semi": [169, 249, 614, 673], "anti": [169, 249, 614, 673, 879, 880, 961], "cross": [169, 249, 614, 673], "join_asof": [169, 249, 614, 673], "stringcach": [169, 249, 588], "other_df": [169, 249], "by_left": [170, 249, 615, 673], "by_right": [170, 249, 615, 673], "asofjoinstrategi": [170, 249, 615, 673], "allow_parallel": [170, 249, 614, 615, 673], "force_parallel": [170, 249, 614, 615, 673], "asof": [170, 249, 615, 673], "asof_join": [170, 249], "search": [170, 249, 615, 673], "greater": [170, 249, 381, 382, 467, 496, 577, 615, 673, 891, 920, 961], "distanc": [170, 249, 615, 673, 809, 961], "plan": [170, 171, 249, 592, 600, 607, 614, 615, 629, 636, 654, 673], "gdp": [170, 249, 615, 673], "2016": [170, 249, 615, 673], "2017": [170, 249, 615, 673], "2018": [170, 249, 352, 615, 673, 779], "2019": [170, 249, 615, 673], "record": [170, 249, 615, 673], "jan": [170, 249, 615, 673], "1st": [170, 249, 615, 673], "4164": [170, 249, 615, 673], "4411": [170, 249, 615, 673], "4566": [170, 249, 615, 673], "4696": [170, 249, 615, 673], "popul": [170, 249, 615, 673], "12th": [170, 249, 615, 673], "82": [170, 249, 615, 673], "66": [170, 249, 522, 577, 615, 673, 870, 961], "83": [170, 249, 615, 673], "52": [170, 226, 249, 456, 577, 615, 651, 673], "request": [171, 249], "describe_plan": [171, 249, 673], "unoptim": [171, 249, 673], "describe_optimized_plan": [171, 249, 673], "show_graph": [171, 249, 673], "un": [171, 249], "graphviz": [171, 249, 636, 673], "axi": [173, 174, 176, 178, 204, 249, 623, 673], "null_strategi": [174, 204, 249], "nullstrategi": [174, 204, 249], "spam": [174, 249], "id_var": [176, 249, 623, 673], "value_var": [176, 249, 623, 673], "variable_nam": [176, 249, 623, 673], "value_nam": [176, 249, 623, 673], "unpivot": [176, 249, 623, 673], "leav": [176, 249, 623, 673], "massag": [176, 249, 623, 673], "measur": [176, 249, 623, 673], "merg": [177, 249, 624, 673], "caller": [177, 249, 300, 619, 624, 657, 673], "respons": [177, 249, 624, 673], "what": [180, 249, 943, 952, 961], "pack": [180, 249], "expr_unique_subset": [180, 249], "df_nuniqu": [180, 249], "df_agg_nuniqu": [180, 249], "offer": [183, 249, 435, 577, 626, 673], "fulli": [183, 194, 249], "cast_str_to_int": [183, 249, 626, 673], "col_nam": [183, 249, 626, 673], "tdf": [183, 249, 626, 673], "aggregate_funct": [184, 249], "pivotagg": [184, 249], "nodefault": [184, 249, 499, 923], "_nodefault": [184, 249, 499, 923], "no_default": [184, 249, 499, 923], "sort_column": [184, 249], "predefin": [184, 249], "predict": [184, 187, 222, 249], "transpos": [184, 249], "discoveri": [184, 249], "col1": [184, 220, 249, 673, 969], "col2": [184, 220, 249, 673, 969], "col3": [184, 249, 969], "tanh": [184, 249, 577, 961], "998347": [184, 249], "964028": [184, 249], "999954": [184, 249], "interpol": [186, 241, 249, 374, 416, 439, 451, 560, 577, 628, 667, 673, 858, 870, 961], "rollinginterpolationmethod": [186, 241, 249, 439, 451, 560, 577, 628, 667, 673, 858, 870, 961], "midpoint": [186, 241, 249, 439, 451, 560, 577, 628, 667, 673, 858, 870, 961], "old": [188, 249, 630, 673], "by_pred": [192, 249], "accord": [192, 249, 413, 577, 762], "never": [192, 249], "mutual": [192, 249], "exclus": [192, 249, 522, 577], "addition": [192, 249], "clariti": [192, 249], "anyth": [192, 249], "toomanyrowsreturnederror": [192, 249, 588], "norowsreturnederror": [192, 249, 588], "inherit": [192, 249], "rowserror": [192, 249, 588], "with_replac": [194, 249, 457, 577, 876, 961], "shuffl": [194, 231, 249, 457, 577, 657, 876, 961], "modul": [194, 249, 457, 463, 576, 577, 876, 887, 961], "more_expr": [196, 226, 249, 433, 528, 530, 532, 533, 554, 557, 563, 566, 577, 633, 651, 673], "named_expr": [196, 226, 249, 563, 566, 633, 651, 673], "threshold": [196, 249, 633, 673], "set_auto_structifi": [196, 226, 249, 633, 651, 673], "auto_structifi": [196, 226, 249, 633, 651, 673], "is_odd": [196, 249, 633, 673], "_is_odd": [196, 249, 633, 673], "shift_and_fil": [198, 249, 577, 673, 961], "shift": [199, 249, 281, 324, 434, 461, 532, 577, 635, 673, 700, 746, 853, 884, 961], "shrink": [200, 249, 462, 577, 885, 886, 961], "hold": [200, 249], "ddof": [203, 223, 249, 472, 520, 534, 559, 564, 565, 569, 577, 641, 649, 673, 895, 951, 961], "deviat": [203, 249, 367, 453, 472, 565, 577, 641, 673, 795, 895, 961], "degre": [203, 223, 249, 472, 520, 534, 559, 564, 565, 569, 577, 641, 649, 673, 895, 951, 961], "freedom": [203, 223, 249, 472, 520, 534, 559, 564, 565, 569, 577, 641, 649, 673, 895, 951, 961], "divisor": [203, 223, 249, 472, 520, 534, 559, 564, 565, 569, 577, 641, 649, 673, 895, 951, 961], "816497": [203, 249], "21": [204, 249, 548], "16a": [204, 249], "27b": [204, 249], "38c": [204, 249], "nth": [206, 249, 496, 510, 577, 644, 673, 920, 934, 961], "mostli": [207, 249, 375, 577], "categoricaltyp": [207, 249], "as_seri": [208, 249], "fruit": [208, 249, 437, 445, 478, 497, 506, 577, 902, 921], "car": [208, 249, 437, 445, 506, 577], "beetl": [208, 249, 437, 445, 506, 577], "audi": [208, 249, 437, 445, 506, 577], "300": [208, 249, 866, 867, 869, 961], "instantiat": [211, 249, 941, 961], "from_repr": [211, 249, 941, 961], "df_from_str_repr": [211, 249], "eval": [211, 249, 543, 941, 961], "re": [212, 249], "ll": [212, 249], "numpy_arrai": [212, 249], "use_pyarrow_extension_arrai": [213, 249, 944, 961], "trigger": [213, 249, 944, 961], "sent": [213, 249, 943, 944, 961], "pandas_df1": [213, 249], "pandas_df2": [213, 249], "pandas_df2_pa": [213, 249], "na": [213, 249, 944, 961], "get_column": [214, 249, 567], "four": [215, 249], "five": [215, 249, 969], "bottom_k": [216, 249, 514, 577, 645, 673, 946, 961], "include_head": [217, 249], "header_nam": [217, 249], "column_nam": [217, 249], "perhap": [217, 249], "column_2": [217, 249], "name_gener": [217, 249, 300, 719], "base_nam": [217, 249], "my_column_": [217, 249], "my_column_0": [217, 249], "my_column_1": [217, 249], "my_column_2": [217, 249], "uniquekeepstrategi": [218, 249, 646, 673], "kept": [218, 249, 646, 673], "decompos": [219, 249, 647, 673], "t_a": [219, 249, 647, 673], "t_b": [219, 249, 647, 673], "t_c": [219, 249, 647, 673], "t_d": [219, 249, 647, 673], "womp": [219, 249, 647, 673], "t_": [219, 249, 647, 673], "t_struct": [219, 249, 647, 673], "step": [220, 249, 527], "unstackdirect": [220, 249], "much": [220, 249, 299, 323, 577, 718, 743, 961], "pivot": [220, 249], "phase": [220, 249], "subject": [220, 249], "ascii_uppercas": [220, 249], "h": [220, 249, 256, 356, 462, 499, 577, 923], "col1_0": [220, 249], "col1_1": [220, 249], "col1_2": [220, 249], "col2_0": [220, 249], "col2_1": [220, 249], "col2_2": [220, 249], "syntact": [221, 249, 539, 544, 545, 549, 560, 563, 567, 648, 673, 894, 961], "sugar": [221, 249, 539, 544, 545, 549, 560, 563, 567, 648, 673, 894, 961], "coalesc": [221, 249, 648, 673], "400": [221, 249, 648, 673, 866, 867, 869, 961], "600": [221, 249, 648, 673], "700": [221, 249, 648, 673], "new_df": [221, 249, 648, 673], "time_column": [222, 249], "frequenc": [222, 249], "forward_fil": [222, 249, 319, 322, 577], "06": [222, 249, 329, 339, 351, 352, 363, 779, 780, 788], "varianc": [223, 249, 368, 401, 455, 520, 569, 577, 649, 673, 796, 833, 874, 951, 961], "grow": [224, 249], "is_not": [226, 249, 577, 651, 673], "not_c": [226, 249, 651, 673], "diff": [226, 249, 334, 337, 341, 343, 345, 348, 355, 577, 651, 673, 757, 760, 767, 769, 772, 775, 782, 961], "_diff": [226, 249, 651, 673], "row_nr": [227, 249, 413, 577, 653, 673, 880, 961], "more_agg": [229, 655], "named_agg": [229, 655], "_sum": [229, 655], "_mean_squar": [229, 655], "b_sum": [229, 655], "c_mean_squar": [229, 655], "17": [229, 456, 499, 548, 551, 577, 655, 737, 780, 923, 961, 969], "sub": [231, 577], "triangl": [231, 657], "group_df": [231, 657], "nr": [234, 243, 660, 669], "maxim": [236, 271, 577, 662, 689, 961], "833333": [237, 663], "minim": [239, 272, 277, 462, 470, 577, 665, 690, 696, 844, 885, 961], "overview": [249, 577, 588, 673, 961, 969], "public": [249, 577, 588, 673, 961], "frameinittyp": [249, 673], "variou": [249, 577, 673, 961], "entri": [249, 673], "prevent": [249, 321, 322, 400, 507, 577, 673, 741, 742, 931, 961], "come": [249, 401, 577, 589, 672, 673, 833, 961], "behavior": [249, 263, 299, 525, 577, 718], "mydatafram": 249, "notic": [249, 673, 961], "df4": 249, "df5": 249, "df6": 249, "corr": [249, 559, 564], "drop_in_plac": 249, "drop_nul": [249, 326, 577, 673, 961], "estimated_s": [249, 961], "explod": [249, 377, 444, 577, 673, 863, 961], "find_idx_by_nam": 249, "fold": [249, 420, 530, 537, 538, 561, 567], "frame_equ": [249, 353, 359], "groupby_rol": [249, 447, 448, 449, 450, 451, 453, 454, 455, 577, 609, 673], "hash_row": 249, "hstack": 249, "insert_at_idx": 249, "is_dupl": [249, 577, 961], "is_empti": [249, 961], "is_uniqu": [249, 577, 961], "iter_slic": 249, "melt": [249, 673], "merge_sort": [249, 673], "n_uniqu": [249, 577, 961], "pipe": [249, 577, 673], "quantil": [249, 451, 577, 673, 857, 870, 961], "replace_at_idx": 249, "shrink_to_fit": [249, 961], "take_everi": [249, 577, 673, 961], "to_dict": 249, "to_numpi": [249, 411, 577, 961], "to_panda": [249, 961], "to_struct": 249, "unnest": [249, 495, 496, 504, 673, 919, 920], "unstack": 249, "updat": [249, 673], "upsampl": 249, "write_avro": 249, "write_databas": 249, "write_excel": 249, "write_json": [249, 629, 673], "write_parquet": 249, "cumprod": [256, 577, 961], "ghi": [256, 577], "94": [257, 577], "confus": [259, 394, 396, 577], "tt": [259, 577], "tf": [259, 261, 577], "ff": [259, 261, 577], "upcast": [262, 577], "skip_nul": [263, 577, 682, 961], "pass_nam": [263, 577], "applystrategi": [263, 577], "thread_loc": [263, 577], "unknown": [263, 413, 552, 577], "stage": [263, 577], "code": [263, 459, 577, 617, 673, 881, 961], "amount": [263, 577], "releas": [263, 577, 969], "gil": [263, 577], "discourag": [263, 577], "loop": [263, 577], "a_times_2": [263, 577], "approx": [264, 526, 577, 673], "hyperloglog": [264, 526, 577, 673], "algorithm": [264, 526, 577, 673], "cardin": [264, 526, 577, 673], "invers": [265, 266, 267, 268, 269, 270, 577, 683, 684, 685, 686, 687, 688, 961], "cosin": [265, 266, 315, 316, 411, 577, 683, 684, 737, 738, 961], "570796": [265, 267, 577, 683, 685, 961], "hyperbol": [266, 268, 270, 316, 466, 512, 577, 684, 686, 688, 738, 890, 936, 961], "sine": [267, 268, 411, 465, 466, 577, 685, 686, 889, 890, 961], "881374": [268, 577, 686, 961], "tangent": [269, 270, 511, 512, 577, 687, 688, 935, 936, 961], "785398": [269, 577, 687, 961], "arg_wher": [274, 577], "sublist": [276, 277, 279, 281, 284, 285, 286, 287, 288, 295, 298, 299, 695, 696, 698, 700, 703, 704, 705, 706, 707, 714, 717, 718, 719, 820, 961], "membership": [279, 698], "listcol": 280, "number_of_two": 280, "null_behavior": [281, 324, 577, 700, 746, 961], "nullbehavior": [281, 324, 577, 700, 746, 961], "th": [281, 324, 467, 577, 700, 746, 891, 961], "against": [282, 673, 701, 968, 969], "blindli": [282, 701], "worth": [282, 701], "enough": [282, 467, 577, 701, 891, 961], "concat_list": [282, 543, 701], "rank": [282, 534, 543, 564, 577, 701, 961], "exprnamespac": 283, "reshap": [283, 577, 702, 961], "flat": [283, 444, 577, 702, 863, 961], "taken": [295, 493, 509, 577, 714, 917], "null_on_oob": [299, 718], "cheaper": [299, 718], "n_field_strategi": [300, 719], "tostructstrategi": [300, 719], "first_non_nul": [300, 719], "max_width": [300, 719], "field_0": [300, 719], "field_1": [300, 719], "field_n": [300, 719], "know": [300, 487, 911, 943, 952, 961], "incorrectli": 300, "downstream": [300, 459, 577, 881, 961], "col_name_": [300, 719], "col_name_0": [300, 719], "col_name_1": [300, 719], "col_name_2": [300, 719], "maintain": [301, 458, 516, 577, 637, 638, 673, 720, 877, 947, 961], "substr": [303, 306, 307, 474, 478, 489, 490, 494, 495, 496, 497, 721, 724, 725, 898, 902, 913, 914, 918, 919, 920, 921], "transferencod": [304, 305, 476, 477, 722, 723, 900, 901], "strict": [304, 309, 474, 476, 488, 499, 577, 722, 727, 878, 898, 900, 912, 923, 961], "hex": [304, 305, 476, 477, 488, 722, 723, 900, 901, 912], "base64": [304, 305, 476, 477, 722, 723, 900, 901], "complex": [308, 323, 514, 577, 726, 743, 946, 961], "frac": [308, 366, 367, 368, 467, 514, 577, 726, 794, 795, 796, 891, 946, 961], "due": [309, 352, 577, 727, 779, 961], "overflow": [309, 321, 322, 488, 507, 577, 727, 741, 742, 912, 931, 961], "categoricalord": [310, 729], "lexic": [310, 729], "foo_clip": [312, 313, 314, 577], "clip": [313, 314, 577, 734, 735, 961], "543081": [316, 577, 738, 961], "cumul": [318, 319, 320, 321, 322, 537, 538, 539, 577, 739, 740, 741, 742, 961], "a_revers": [318, 319, 320, 321, 322, 412, 445, 506, 577], "value_cummax": [319, 577], "value_cummax_all_fil": [319, 577], "value_cumsum": [322, 577], "value_cumsum_all_fil": [322, 577], "min_period": [323, 366, 367, 368, 446, 447, 448, 449, 450, 451, 453, 454, 455, 577, 743, 794, 795, 796, 865, 866, 867, 868, 869, 870, 872, 873, 874, 961], "slide": [323, 577, 743, 961], "realli": [323, 577, 743, 961], "visit": [323, 577, 743, 961], "44": [325, 577], "drop_nan": [327, 577, 961], "lose": [328, 751], "2001": [328, 333, 335, 336, 338, 339, 344, 346, 349, 350, 351, 353, 354, 358, 359, 360, 361, 362, 363, 499, 751, 756, 758, 759, 761, 763, 764, 765, 766, 768, 770, 771, 773, 774, 776, 777, 778, 780, 781, 783, 785, 786, 787, 788, 789, 790, 923], "time_unit_m": [328, 751], "time_unit_n": [328, 751], "naiv": [329, 752], "compon": [329, 354, 499, 542, 752, 781], "resolv": 329, "tm": 329, "456000": [329, 752], "101000": 329, "456": [329, 752, 940, 961], "101": [329, 488, 912, 969], "d1": 329, "d2": 329, "d3": 329, "utc": [330, 352, 499, 753, 779, 923], "europ": [330, 352, 753, 779], "london": [330, 352, 753, 779], "gmt": [330, 352, 753, 779], "bst": [330, 352, 753, 779], "weekdai": [333, 350], "day_of_month": [333, 350, 361], "ordinal_dai": [333, 361], "day_of_year": [333, 350, 361], "days_diff": 334, "epochtimeunit": [335, 548, 758], "unix": [335, 548, 758], "epoch_n": [335, 758], "epoch_": [335, 758], "978307200000000": [335, 358, 758, 785], "978307200": [335, 758], "978393600000000": [335, 358, 758, 785], "978393600": [335, 758], "978480000000000": [335, 358, 758, 785], "978480000": [335, 758], "hours_diff": 337, "leap": [338, 349, 761, 776], "2000": [338, 340, 349, 761, 776], "2002": [338, 339, 349, 351, 363, 761, 776, 790], "iso": [339, 360, 361, 762, 787, 788], "correspond": [339, 440, 577, 762, 859, 961], "2006": [339, 349, 776], "180": [339, 351, 363], "2004": [339, 349, 776], "2005": [339, 349, 776], "1_001": [340, 341, 343, 348], "002": [340, 341, 343, 348, 542, 767, 769, 775], "003": [340, 341, 343, 348], "3000": 340, "997": [340, 341, 343, 348], "997000": 340, "998": [340, 341, 343, 348], "998000": 340, "999": [340, 341, 343, 348, 969], "999000": 340, "microseconds_diff": 341, "milliseconds_diff": 343, "minutes_diff": 345, "1440": [345, 772], "nanoseconds_diff": 348, "1000000": [348, 502, 775], "minu": [349, 776], "dictat": [349, 776], "date_plus_1i": [349, 776], "1y2mo": [349, 776], "date_min": 349, "1998": [349, 776], "1999": [349, 776], "2003": [349, 548, 776], "ordin": [350, 440, 577, 777, 859, 961], "366": [350, 777], "use_earliest": [352, 779], "convert_time_zon": [352, 779], "ambigu": [352, 779], "sai": [352, 779], "daylight": [352, 779], "earliest": [352, 779], "london_timezon": [352, 779], "amsterdam": [352, 779], "london_to_amsterdam": [352, 779], "cet": [352, 779], "cest": [352, 779], "dst": [352, 779], "ts_local": [352, 779], "brussel": [352, 779], "half": [353, 366, 367, 368, 577, 780, 794, 795, 796, 961], "225": [353, 359], "to_fram": [353, 359, 499, 879, 880, 919, 920, 923, 961], "10m": [353, 359, 780, 786], "milli": [354, 781], "micro": [354, 781], "456789": 354, "654321": 354, "111110": 354, "765431": 354, "sec": [354, 969], "11111": 354, "seconds_diff": 355, "timestamp_n": [358, 785], "timestamp_m": 358, "978307200000": 358, "978393600000": 358, "978480000000": 358, "53": [360, 787], "sundai": [361, 788], "incorrect": [362, 459, 577, 657, 789, 881, 961], "time_unit_u": [362, 789], "32971": [362, 789], "32974": [362, 789], "32976": [362, 789], "718281828459045": [364, 406, 577, 792, 836, 961], "pk": [364, 577, 792, 961], "459148": [364, 577], "754888": [364, 577], "span": [366, 367, 368, 577, 794, 795, 796, 961], "half_lif": [366, 367, 368, 577, 794, 795, 796, 961], "adjust": [366, 367, 368, 467, 577, 794, 795, 796, 891, 961], "ignore_nul": [366, 367, 368, 577, 794, 795, 796, 952, 961], "exponenti": [366, 367, 368, 370, 436, 577, 794, 795, 796, 797, 961], "weight": [366, 367, 368, 446, 447, 448, 449, 450, 451, 453, 454, 455, 467, 577, 794, 795, 796, 865, 866, 867, 868, 869, 870, 872, 873, 874, 891, 961], "decai": [366, 367, 368, 577, 794, 795, 796, 961], "term": [366, 367, 368, 484, 487, 577, 794, 795, 796, 908, 911, 961], "mass": [366, 367, 368, 577, 794, 795, 796, 961], "gamma": [366, 367, 368, 577, 794, 795, 796, 961], "foral": [366, 367, 368, 577, 794, 795, 796, 961], "geq": [366, 367, 368, 577, 794, 795, 796, 961], "theta": [366, 367, 368, 577, 794, 795, 796, 961], "life": [366, 367, 368, 577, 794, 795, 796, 961], "exp": [366, 367, 368, 577, 794, 795, 796, 961], "ln": [366, 367, 368, 577, 794, 795, 796, 961], "smooth": [366, 367, 368, 577, 794, 795, 796, 961], "factor": [366, 367, 368, 513, 577, 794, 795, 796, 945, 961], "leq": [366, 367, 368, 577, 794, 795, 796, 961], "begin": [366, 367, 368, 480, 577, 794, 795, 796, 904, 961], "imbal": [366, 367, 368, 577, 794, 795, 796, 961], "ew": [366, 367, 368, 577, 794, 795, 796, 961], "w_i": [366, 367, 368, 577, 794, 795, 796, 961], "recurs": [366, 367, 368, 577, 794, 795, 796, 961], "y_0": [366, 367, 368, 577, 794, 795, 796, 961], "x_0": [366, 367, 368, 577, 794, 795, 796, 961], "y_t": [366, 367, 368, 577, 794, 795, 796, 961], "y_": [366, 367, 368, 577, 794, 795, 796, 961], "x_t": [366, 367, 368, 577, 794, 795, 796, 961], "observ": [366, 367, 368, 577, 794, 795, 796, 961], "x_2": [366, 367, 368, 577, 794, 795, 796, 961], "428571": [366, 577], "bia": [367, 368, 401, 452, 467, 577, 795, 796, 833, 871, 891, 961], "unbias": [367, 368, 577, 795, 796, 961], "963624": [367, 577, 795, 961], "928571": [368, 577, 796, 961], "wildcard": [369, 523, 531, 537, 538, 546, 561, 577], "regex": [369, 418, 474, 475, 478, 480, 481, 489, 490, 497, 544, 554, 557, 567, 577, 898, 899, 902, 904, 905, 913, 914, 921], "aa": [369, 544, 577], "ba": [369, 544, 577], "cc": [369, 544, 577], "718282": [370, 577], "389056": [370, 577], "54": [370, 577, 969], "59815": [370, 577], "expand": [371, 417, 418, 443, 577, 798, 961], "exprlistnamespac": [371, 377, 444, 577], "exprstringnamespac": [371, 577], "pythonliter": [372, 554, 557, 577, 651, 673, 799, 841, 844, 961], "extrem": [372, 577, 799, 961], "group_col": [375, 521, 577], "g1": [375, 521, 577], "g2": [375, 521, 577], "lt": [375, 521, 577, 961], "gte": [375, 521, 577], "divis": [379, 515, 577], "truediv": [379, 577], "9774092659964970114": [383, 577], "13614470193936745724": [383, 577], "1101441246220388612": [383, 577], "11638928888656214026": [383, 577], "13382926553367784577": [383, 577], "cumsum": [386, 505, 577, 612, 673, 832, 961], "interpolationmethod": [387, 577, 812, 961], "regrid": [387, 577], "grid": [387, 577], "df_original_grid": [387, 577], "grid_point": [387, 577], "df_new_grid": [387, 577], "conflat": [388, 577], "finit": [390, 515, 534, 564, 577, 817, 961], "primit": [392, 577, 943, 961], "optional_memb": [392, 577, 820, 961], "infinit": [393, 515, 577, 821, 961], "_isnan": [394, 577], "b_isnan": [394, 577], "negat": [395, 577], "_is_not_nan": [396, 577], "b_is_not_nan": [396, 577], "_not_nul": [397, 577], "a_not_nul": [397, 577], "b_not_nul": [397, 577], "_isnul": [398, 577], "a_isnul": [398, 577], "b_isnul": [398, 577], "undo": [400, 422, 577], "duplicateerror": [400, 577, 588], "occurr": [400, 577, 809, 961], "333333": [400, 455, 577, 853, 874, 961], "fisher": [401, 467, 577, 833, 891, 961], "fourth": [401, 577, 833, 961], "subtract": [401, 505, 577, 833, 961], "distribut": [401, 467, 577, 833, 891, 961], "elimin": [401, 577, 833, 961], "bias": [401, 467, 577, 833, 891, 961], "scipi": [401, 467, 577, 833, 891, 961], "stat": [401, 467, 577, 833, 891, 961], "153061": [401, 577], "logarithm": [406, 407, 408, 577, 836, 837, 838, 961], "584963": [406, 577], "30103": [407, 577], "60206": [407, 577], "natur": [408, 577, 838, 961], "plu": [408, 577, 838, 961], "693147": [408, 577], "098612": [408, 577], "386294": [408, 577], "lowest": [409, 577], "9223372036854775808": [409, 577], "agg_list": [411, 577], "elementwis": [411, 446, 447, 448, 449, 450, 451, 453, 454, 455, 523, 524, 577, 865, 866, 867, 868, 869, 870, 872, 873, 874, 961], "third": [411, 577], "parti": [411, 577], "book": [411, 577], "argmax": [411, 577], "_revers": [412, 445, 506, 577], "b_revers": [412, 445, 506, 577], "remap": [413, 577, 840, 961], "lookup": [413, 577, 840, 961], "country_code_dict": [413, 577], "ca": [413, 577], "canada": [413, 577], "de": [413, 577], "germani": [413, 577], "fr": [413, 577], "franc": [413, 577], "country_cod": [413, 577], "rest": [413, 577], "computeerror": [419, 488, 588, 912], "keep_nam": [422, 577], "modulu": [424, 577], "xlog2": [426, 436, 577], "poison": [428, 429, 577, 849, 850, 961], "nanmax": [428, 429, 577, 849, 850, 961], "wherea": [428, 429, 577, 611, 618, 673, 849, 850, 961], "inequ": [430, 577], "outcom": [433, 577], "_max": [433, 577], "c_max": [433, 577], "_min": [433, 577], "c_min": [433, 577], "recent": [434, 577, 853, 961], "percent": [434, 577, 853, 961], "090909": [434, 577], "extract_numb": [435, 577], "r": [435, 475, 479, 480, 481, 489, 577, 899, 903, 904, 905, 913], "expon": [436, 577, 961], "512": [436, 577, 853, 961], "reverse_": [437, 577], "reverse_a": [437, 577], "reverse_fruit": [437, 577], "reverse_b": [437, 577], "reverse_car": [437, 577], "rankmethod": [440, 577, 859, 961], "ti": [440, 577, 859, 961], "competit": [440, 577, 859, 961], "highest": [440, 518, 534, 564, 577, 673, 859, 961], "safe": [442, 499, 577, 861, 923, 943, 961], "coerc": [443, 577], "fruits_revers": [445, 506, 577], "cars_revers": [445, 506, 577], "window_s": [446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 577, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 961], "rolling_min": [446, 577, 865, 961], "rolling_max": [446, 577, 865, 961], "rolling_mean": [446, 577, 865, 961], "rolling_sum": [446, 577, 865, 961], "multipli": [446, 447, 448, 449, 450, 451, 453, 454, 455, 577, 865, 866, 867, 868, 869, 870, 872, 873, 874, 961], "358899": [446, 577], "041452": [446, 577], "567764": [446, 577], "travers": [447, 448, 450, 453, 454, 455, 577, 866, 867, 869, 872, 873, 874, 961], "vector": [447, 448, 450, 453, 454, 455, 577, 866, 867, 869, 872, 873, 874, 961], "5h": [447, 448, 449, 450, 451, 453, 454, 455, 577], "33": [451, 456, 531, 577, 870, 961], "skew": [452, 577, 871, 961], "527525": [453, 577, 872, 961], "digit": [456, 502, 577, 875, 899, 926, 961, 969], "searchsortedsid": [458, 577, 877, 961], "leftmost": [458, 577, 877, 961], "rightmost": [458, 577, 877, 961], "six": [458, 577], "extrema": [462, 577, 885, 961], "112": [462, 577, 969], "129": [462, 577], "i8": [462, 577, 746, 864, 949, 961], "8589934592": [462, 577], "1073741824": [462, 577], "content": [463, 519, 577, 887, 961], "175201": [466, 577, 890, 961], "about": [467, 577, 891, 961, 969], "unimod": [467, 577, 891, 961], "skewtest": [467, 577, 891, 961], "speak": [467, 577, 891, 961], "g_1": [467, 577, 891, 961], "m_3": [467, 577, 891, 961], "m_2": [467, 577, 891, 961], "m_i": [467, 577, 891, 961], "sum_": [467, 577, 891, 961], "texttt": [467, 577, 891, 961], "k_3": [467, 577, 891, 961], "k_2": [467, 577, 891, 961], "sqrt": [467, 577, 891, 961], "343622": [467, 577], "value1": [470, 577], "value2": [470, 577], "attain": [470, 577], "414214": [471, 577, 894, 961], "ends_with": [474, 497, 921], "crab": [474, 898], "dog": [474, 500, 501, 533, 898], "rab": [474, 898], "success": [475, 481, 899, 905], "overlap": [475, 481, 899, 905], "captur": [475, 480, 481, 899, 904, 905], "123": [475, 481, 490, 899, 905, 914, 940, 961], "bla": [475, 481, 899, 905], "asd": [475, 481, 899, 905], "678": [475, 481, 899, 905], "910t": [475, 481, 899, 905], "count_digit": 475, "666f6f": [477, 901], "626172": [477, 901], "mango": [478, 497, 902, 921], "go": [478, 902], "has_suffix": 478, "group_index": [480, 904], "vote": [480, 904], "ballon_dor": [480, 904], "candid": [480, 904], "messi": [480, 904], "ref": [480, 904], "candidat": [480, 904], "jorginho": [480, 904], "ronaldo": [480, 904], "extracted_nr": 481, "910": [481, 905], "json_path_match": [482, 906], "jsonpath": [482, 483, 906, 907], "json_path": [483, 907], "regardless": [483, 907], "json_val": [483, 907], "n_char": [484, 908], "caf\u00e9": [484, 487, 908, 911], "345": [484, 487, 908, 911], "\u6771\u4eac": [484, 487, 908, 911], "nchar": [484, 487], "fill_char": [485, 491, 909, 915], "justifi": [485, 491, 909, 915], "pad": [485, 491, 502, 909, 915, 926], "cow": [485, 491, 909, 915], "monkei": [485, 491, 909, 915], "hippopotamu": [485, 491, 909, 915], "strip": [486, 492, 910, 916], "tworld": [486, 498, 910, 922], "wod": [486, 492, 910, 916], "rld": [486, 910], "text": [487, 489, 490, 911, 969], "radix": [488, 912], "parseerror": [488, 912], "becom": [488, 912], "silent": [488, 912], "110": [488, 912], "010": [488, 912], "fa1e": [488, 912], "ff00": [488, 912], "cafe": [488, 912], "64030": [488, 912], "65280": [488, 912], "51966": [488, 912], "replace_al": [489, 913], "123abc": [489, 913], "abc456": [489, 913], "abcabc": [490, 914], "123a123": [490, 914], "bc": [490, 567, 914], "trail": [492, 498, 916, 922], "worl": [492, 498, 916, 922], "subslic": [493, 917], "pear": [493, 917], "papaya": [493, 917], "dragonfruit": [493, 917], "s_slice": 493, "ear": [493, 917], "aya": [493, 917], "uit": [493, 917], "ya": [493, 917], "onf": [493, 917], "a_1": [495, 919, 939, 961], "d_4": [495, 919], "rename_field": [495, 496, 919, 920], "first_part": [495, 496, 919, 920], "second_part": [495, 496, 919, 920], "remaind": [496, 920], "app": [497, 921], "has_prefix": 497, "polarstemporaltyp": [499, 923], "tz_awar": [499, 923], "strftime": [499, 923], "anywher": [499, 923], "toggl": [499, 923], "futur": [499, 923], "3f": 499, "00z": [499, 923], "sun": [499, 923], "jul": [499, 923], "34": [499, 923], "lowercas": [500, 924], "variant": [500, 501], "uppercas": [501, 925], "100000": 502, "0010": 502, "0001": 502, "00000": 502, "00001": 502, "cd": [503, 504], "struct_col": [503, 504], "www": 504, "xxx": 504, "yyi": 504, "zzz": 504, "obvious": 504, "structfieldnotfounderror": [504, 588], "761594": [512, 577, 936, 961], "replic": [513, 577, 945, 961], "vals_phys": [513, 577], "floordiv": [515, 577], "behaviour": [515, 577], "ieee": [515, 577], "754": [515, 577], "mathemat": [515, 543, 577], "undefin": [515, 577], "On": [515, 577], "operand": [515, 577], "infin": [515, 577], "value_count": [517, 577, 961], "9223372036854775807": [518, 577], "multithread": [519, 577], "binary_str": [522, 577], "zfill": [522, 577], "250": [522, 577, 867, 961, 969], "bin_x": [522, 577], "bin_i": [522, 577], "xor_xi": [522, 577], "bin_xor_xi": [522, 577], "00001010": [522, 577], "00000001": [522, 577], "00001011": [522, 577], "00001000": [522, 577], "00000010": [522, 577], "11111010": [522, 577], "00000011": [522, 577], "249": [522, 577], "11111001": [522, 577], "01000010": [522, 577], "00000100": [522, 577], "70": [522, 577], "01000110": [522, 577], "columnwis": [523, 524], "AND": 523, "bitwis": [523, 524], "returns_scalar": 525, "product_a": 525, "49": 525, "Be": 527, "more_nam": 531, "hamburg": 531, "lag": 532, "mimic": 532, "a_lag_": 532, "a_rol": 532, "plai": 533, "swim": 533, "walk": 533, "full_sent": 533, "correlationmethod": 534, "propagate_nan": [534, 564], "spearman": [534, 564], "larger": [534, 564, 637, 638, 673], "544705": [534, 559], "covari": 536, "acc": [537, 538, 546, 561], "include_init": 537, "accumul": [537, 538, 546, 561], "fn": [537, 538, 546, 561], "new_valu": [537, 538, 546, 561], "cumreduc": 537, "cumfold": 539, "999999": 541, "tbl_width_char": 542, "120": 542, "add_week": 542, "add_dai": 542, "add_second": 542, "add_milli": 542, "add_hour": 542, "arr": [543, 578, 943, 961, 962], "a_b_doubl": 543, "f_string": 547, "placehold": 547, "hello_": 547, "_world": 547, "foo_": 547, "_bar_": 547, "foo_a_bar_1": 547, "foo_b_bar_2": 547, "foo_c_bar_3": 547, "epoch": 548, "timestep": 548, "1666683077": 548, "1666683099": 548, "39": 548, "12345": [548, 730, 804, 875, 961], "12346": 548, "agg_group": [549, 577], "favor": [551, 559, 564], "implod": [551, 577, 961], "allow_object": 552, "valueexcept": 552, "foo_bar": 552, "test_func": 553, "selector": [554, 557, 567], "605551": 565, "605551275463989": 565, "my_struct": 566, "q": 566, "statement": 570, "chain": 570, "isn": 570, "thens": 570, "elif": 570, "pick": 570, "sometim": 576, "and_": 577, "approx_uniqu": [577, 673], "arcco": [577, 961], "arccosh": [577, 961], "arcsin": [577, 961], "arcsinh": [577, 961], "arctan": [577, 961], "arctanh": [577, 961], "arg_max": [577, 961], "arg_min": [577, 961], "arg_sort": [577, 961], "arg_uniqu": [577, 961], "backward_fil": 577, "clip_max": [577, 961], "clip_min": [577, 961], "co": [577, 961], "cosh": [577, 961], "cumcount": 577, "cummax": [577, 961], "cummin": [577, 961], "cumulative_ev": [577, 961], "entropi": [577, 961], "eq": [577, 961], "ewm_mean": [577, 961], "ewm_std": [577, 961], "ewm_var": [577, 961], "extend_const": [577, 961], "flatten": 577, "ge": [577, 961], "gt": [577, 961], "inspect": [577, 673], "is_between": [577, 961], "is_finit": [577, 961], "is_first": [577, 961], "is_in": [577, 961], "is_infinit": [577, 961], "is_nan": [577, 961], "is_not_nan": [577, 961], "is_not_nul": [577, 961], "kurtosi": [577, 961], "le": [577, 961], "log10": [577, 961], "log1p": [577, 961], "map_alia": 577, "map_dict": [577, 961], "mod": 577, "mul": 577, "nan_max": [577, 961], "nan_min": [577, 961], "ne": [577, 961], "or_": 577, "pct_chang": [577, 961], "pow": [577, 961], "reinterpret": [577, 961], "repeat_bi": 577, "rolling_appli": [577, 961], "rolling_median": [577, 961], "rolling_quantil": [577, 961], "rolling_skew": [577, 961], "rolling_std": [577, 961], "rolling_var": [577, 961], "search_sort": [577, 961], "set_sort": [577, 961], "shrink_dtyp": [577, 961], "sin": [577, 961], "sinh": [577, 961], "sort_bi": 577, "tan": [577, 961], "to_phys": [577, 961], "unique_count": [577, 961], "xor": 577, "expos": 588, "registr": 588, "miscellan": 588, "arrowerror": 588, "columnnotfounderror": 588, "invalidoperationerror": 588, "nodataerror": 588, "polarspanicerror": 588, "schemaerror": 588, "schemafieldnotfounderror": 588, "shapeerror": 588, "parametr": 588, "build_info": 588, "get_index_typ": 588, "show_vers": 588, "threadpool_s": 588, "sqlcontext": [588, 968], "hit": [592, 673], "node": [592, 612, 619, 623, 627, 630, 673], "huge": [595, 673], "saver": [595, 673], "purpos": [602, 673], "influenc": [602, 619, 673], "read_json": [607, 654, 673], "lazygroupbi": [608, 609, 610, 673], "other_lf": [614, 673], "validate_output_schema": [619, 673], "streamabl": [619, 623, 673], "past": [619, 673], "assum": [619, 657, 673], "paramount": [619, 673], "bug": [619, 657, 673], "elig": [619, 673], "invari": [619, 673], "upheld": [619, 673], "prune": [619, 673], "show_plot": [627, 673], "truncate_nod": [627, 673], "figsiz": [627, 636, 673], "gantt": [627, 673], "plot": [627, 636, 673], "groupby_partit": [627, 673], "470": [627, 673], "475": [627, 673], "1964": [627, 673], "from_json": [629, 673], "swap": [630, 673], "output_path": [636, 673], "raw_output": [636, 673], "figur": [636, 673], "persist": [637, 638, 673], "ram": [637, 638, 673], "slightli": [637, 638, 673], "my_larger_than_ram_fil": [637, 638, 673], "data_pagesize_limit": [638, 673], "290994": [641, 673], "118034": [641, 673], "433013": [641, 673], "1875": [649, 673], "polarsexprtyp": [651, 673], "extern": [652, 673], "lf_other": [652, 673], "afoo": [652, 673], "cfoo": [652, 673], "train_lf": [652, 673], "feature_0": [652, 673], "feature_1": [652, 673], "test_lf": [652, 673], "_train": [652, 673], "feature_0_train": [652, 673], "dataframescan": [654, 673], "output_schema": [654, 673], "lf2": 673, "lf3": 673, "lf4": 673, "lf5": 673, "lf6": 673, "explain": 673, "sink_ipc": 673, "sink_parquet": 673, "with_context": 673, "new_aliased_sr": [678, 961], "append_chunk": [681, 961], "super": [681, 961], "141593": [683, 961], "292432": [684, 961], "549306": [688, 961], "listnamespac": [694, 798, 863, 961], "catnamespac": 728, "56789": [730, 804, 875, 961], "901234": [730, 804, 875, 961], "pi": [737, 889, 935, 961], "1232e": [737, 961], "quick": [745, 961, 969], "series_num": [745, 961], "581139": [745, 961], "series_str": [745, 961], "datetimenamespac": 750, "ser": [754, 755, 784], "replace_time_zon": [754, 755, 784], "kathmandu": [754, 755, 784], "0545": [754, 755, 784], "500m": [766, 768, 774, 781], "500000": 766, "2m": 771, "500000000": 774, "date_minus_1y_2mon": 776, "165": [780, 786], "series_equ": [780, 786, 961], "timestamp_u": 785, "978307200000000000": 785, "978393600000000000": 785, "978480000000000000": 785, "005": [792, 961], "06293300616044681": [792, 961], "65": [792, 961], "8568409950394724": [792, 961], "4000000": [793, 961], "814697265625": [793, 961], "stringnamespac": [798, 896, 961], "bitmask": [806, 961], "swiftli": [806, 961], "10734580197236529959": [807, 961], "3022416320763508302": [807, 961], "13756996518000038261": [807, 961], "bin_count": [809, 961], "a_count": [809, 961], "fall": [813, 961], "2147483648": [839, 961], "iso3166": [840, 961], "tur": [840, 961], "jpn": [840, 961], "nld": [840, 961], "country_lookup": [840, 961], "japan": [840, 961], "t\u00fcrkiy": [840, 961], "netherland": [840, 961], "unrecognis": [840, 961], "unspecifi": [840, 961], "country_nam": [840, 961], "166667": [853, 961], "142857": [853, 961], "peak": [854, 855, 961], "quanil": [857, 961], "nanstd": [865, 961], "858612": [865, 961], "200": [866, 867, 869, 961], "150": [867, 961], "350": [867, 961], "450": [867, 961], "381802": [871, 961], "dev": [872, 961], "57": [875, 961, 969], "frequent": [879, 880, 961], "mutat": [880, 961], "2246e": [889, 935, 961], "6331e16": [935, 961], "lib": [938, 961], "int64arrai": [938, 961], "a_2": [939, 961], "a_3": [939, 961], "s_from_str_repr": [941, 961], "zero_copy_onli": [943, 961], "writabl": [943, 961], "complet": [943, 961], "view": [943, 961], "presenc": [943, 961], "immut": [943, 961], "127": [949, 961], "seriesview": [952, 961], "arraylik": 961, "dtype_if_empti": 961, "position": 961, "scenario": 961, "through": 961, "chunk_length": 961, "cut": 961, "get_chunk": 961, "has_valid": 961, "hist": 961, "is_boolean": 961, "is_float": 961, "is_integ": 961, "is_numer": [961, 969], "is_sort": 961, "is_tempor": 961, "is_utf8": 961, "new_from_index": 961, "peak_max": 961, "peak_min": 961, "power": 961, "qcut": 961, "set_at_idx": 961, "guid": 969, "easi": 969, "approxim": 969, "own": 969, "machin": 969, "xdist": 969, "vari": 969, "hardwar": 969, "setup": 969, "numeric_dtyp": 969, "null_probabililti": 969, "test_numer": 969, "col0": 969, "col4": 969, "29096": 969, "485": 969, "2147483647": 969, "8257e14": 969, "7508": 969, "37338": 969, "7264": 969, "321": 969, "16996": 969, "121": 969, "361": 969, "63204": 969, "1443e235": 969, "conform": 969, "ascii_lett": 969, "id_char": 969, "alphabet": 969, "price": 969, "min_valu": 969, "max_valu": 969, "test_price_calcul": 969, "a101": 969, "8nin": 969, "qhoo": 969, "714": 969, "544": 969, "i0e0": 969, "0000": 969, "create_list_strategi": 969, "colz": 969, "test_miscellan": 969, "143": 969, "235": 969, "41": 969, "87": 969, "186": 969, "174": 969, "179": 969, "213": 969, "221": 969, "86": 969, "255": 969}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [34, 0, 1, "", "DataType"], [35, 0, 1, "", "Date"], [36, 0, 1, "", "Datetime"], [37, 0, 1, "", "Decimal"], [38, 0, 1, "", "Duration"], [39, 0, 1, "", "Float32"], [40, 0, 1, "", "Float64"], [41, 0, 1, "", "Int16"], [42, 0, 1, "", "Int32"], [43, 0, 1, "", "Int64"], [44, 0, 1, "", "Int8"], [45, 0, 1, "", "List"], [46, 0, 1, "", "Null"], [47, 0, 1, "", "Object"], [968, 0, 1, "", "SQLContext"], [51, 0, 1, "", "StringCache"], [52, 0, 1, "", "Struct"], [53, 0, 1, "", "Time"], [54, 0, 1, "", "UInt16"], [55, 0, 1, "", "UInt32"], [56, 0, 1, "", "UInt64"], [57, 0, 1, "", "UInt8"], [58, 0, 1, "", "Unknown"], [59, 0, 1, "", "Utf8"], [60, 4, 1, "", "align_frames"], [523, 4, 1, "", "all"], [524, 4, 1, "", "any"], [525, 4, 1, "", "apply"], [526, 4, 1, "", "approx_unique"], [527, 4, 1, "", "arange"], [528, 4, 1, "", "arg_sort_by"], [65, 4, 1, "", "arg_where"], [529, 4, 1, "", "avg"], [66, 4, 1, "", "build_info"], [530, 4, 1, "", "coalesce"], [531, 4, 1, "", "col"], [67, 4, 1, "", "collect_all"], [68, 4, 1, "", "concat"], [532, 4, 1, "", "concat_list"], [533, 4, 1, "", "concat_str"], [534, 4, 1, "", "corr"], [535, 4, 1, "", "count"], [536, 4, 1, "", "cov"], [537, 4, 1, "", "cumfold"], [538, 4, 1, "", "cumreduce"], [539, 4, 1, "", "cumsum"], [69, 4, 1, "", "cut"], [540, 4, 1, "", "date"], [70, 4, 1, "", "date_range"], [541, 4, 1, "", "datetime"], [542, 4, 1, "", "duration"], [543, 4, 1, "", "element"], [71, 4, 1, "", "enable_string_cache"], [544, 4, 1, "", "exclude"], [545, 4, 1, "", "first"], [546, 4, 1, "", "fold"], [547, 4, 1, "", "format"], [86, 4, 1, "", "from_arrow"], [87, 4, 1, "", "from_dataframe"], [88, 4, 1, "", "from_dict"], [89, 4, 1, "", "from_dicts"], [548, 4, 1, "", "from_epoch"], [90, 4, 1, "", "from_numpy"], [91, 4, 1, "", "from_pandas"], [92, 4, 1, "", "from_records"], [93, 4, 1, "", "from_repr"], [94, 4, 1, "", "get_dummies"], [95, 4, 1, "", "get_index_type"], [549, 4, 1, "", "groups"], [550, 4, 1, "", "head"], [551, 4, 1, "", "list"], [552, 4, 1, "", "lit"], [553, 4, 1, "", "map"], [554, 4, 1, "", "max"], [555, 4, 1, "", "mean"], [556, 4, 1, "", "median"], [557, 4, 1, "", "min"], [558, 4, 1, "", "n_unique"], [97, 4, 1, "", "ones"], [559, 4, 1, "", "pearson_corr"], [560, 4, 1, "", "quantile"], [98, 4, 1, "", "read_avro"], [99, 4, 1, "", "read_csv"], [100, 4, 1, "", "read_csv_batched"], [101, 4, 1, "", "read_database"], [102, 4, 1, "", "read_delta"], [103, 4, 1, "", "read_excel"], [104, 4, 1, "", "read_ipc"], [105, 4, 1, "", "read_ipc_schema"], [106, 4, 1, "", "read_json"], [107, 4, 1, "", "read_ndjson"], [108, 4, 1, "", "read_parquet"], [109, 4, 1, "", "read_parquet_schema"], [561, 4, 1, "", "reduce"], [562, 4, 1, "", "repeat"], [110, 4, 1, "", "scan_csv"], [111, 4, 1, "", "scan_delta"], [112, 4, 1, "", "scan_ipc"], [113, 4, 1, "", "scan_ndjson"], [114, 4, 1, "", "scan_parquet"], [115, 4, 1, "", "scan_pyarrow_dataset"], [563, 4, 1, "", "select"], [116, 4, 1, "", "show_versions"], [564, 4, 1, "", "spearman_rank_corr"], [565, 4, 1, "", "std"], [566, 4, 1, "", "struct"], [567, 4, 1, "", "sum"], [568, 4, 1, "", "tail"], [126, 4, 1, "", "threadpool_size"], [569, 4, 1, "", "var"], [570, 4, 1, "", "when"], [127, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "activate_decimals"], [6, 1, 1, "", "load"], [7, 1, 1, "", "restore_defaults"], [8, 1, 1, "", "save"], [9, 1, 1, "", "set_ascii_tables"], [10, 1, 1, "", "set_fmt_float"], [11, 1, 1, "", "set_fmt_str_lengths"], [12, 1, 1, "", "set_streaming_chunk_size"], [13, 1, 1, "", "set_tbl_cell_alignment"], [14, 1, 1, "", "set_tbl_cols"], [15, 1, 1, "", "set_tbl_column_data_type_inline"], [16, 1, 1, "", "set_tbl_dataframe_shape_below"], [17, 1, 1, "", "set_tbl_formatting"], [18, 1, 1, "", "set_tbl_hide_column_data_types"], [19, 1, 1, "", "set_tbl_hide_column_names"], [20, 1, 1, "", "set_tbl_hide_dataframe_shape"], [21, 1, 1, "", "set_tbl_hide_dtype_separator"], [22, 1, 1, "", "set_tbl_rows"], [23, 1, 1, "", "set_tbl_width_chars"], [24, 1, 1, "", "set_verbose"], [25, 1, 1, "", "state"]], "polars.DataFrame": [[130, 1, 1, "", "__dataframe__"], [131, 1, 1, "", "apply"], [132, 1, 1, "", "bottom_k"], [133, 1, 1, "", "clear"], [134, 1, 1, "", "clone"], [135, 2, 1, "", "columns"], [136, 1, 1, "", "corr"], [137, 1, 1, "", "describe"], [138, 1, 1, "", "drop"], [139, 1, 1, "", "drop_in_place"], [140, 1, 1, "", "drop_nulls"], [141, 2, 1, "", "dtypes"], [142, 1, 1, "", "estimated_size"], [143, 1, 1, "", "explode"], [144, 1, 1, "", "extend"], [145, 1, 1, "", "fill_nan"], [146, 1, 1, "", "fill_null"], [147, 1, 1, "", "filter"], [148, 1, 1, "", "find_idx_by_name"], [149, 1, 1, "", "fold"], [150, 1, 1, "", "frame_equal"], [151, 1, 1, "", "get_column"], [152, 1, 1, "", "get_columns"], [153, 1, 1, "", "glimpse"], [154, 1, 1, "", "groupby"], [155, 1, 1, "", "groupby_dynamic"], [156, 1, 1, "", "groupby_rolling"], [157, 1, 1, "", "hash_rows"], [158, 1, 1, "", "head"], [159, 2, 1, "", "height"], [160, 1, 1, "", "hstack"], [161, 1, 1, "", "insert_at_idx"], [162, 1, 1, "", "interpolate"], [163, 1, 1, "", "is_duplicated"], [164, 1, 1, "", "is_empty"], [165, 1, 1, "", "is_unique"], [166, 1, 1, "", "item"], [167, 1, 1, "", "iter_rows"], [168, 1, 1, "", "iter_slices"], [169, 1, 1, "", "join"], [170, 1, 1, "", "join_asof"], [171, 1, 1, "", "lazy"], [172, 1, 1, "", "limit"], [173, 1, 1, "", "max"], [174, 1, 1, "", "mean"], [175, 1, 1, "", "median"], [176, 1, 1, "", "melt"], [177, 1, 1, "", "merge_sorted"], [178, 1, 1, "", "min"], [179, 1, 1, "", "n_chunks"], [180, 1, 1, "", "n_unique"], [181, 1, 1, "", "null_count"], [182, 1, 1, "", "partition_by"], [183, 1, 1, "", "pipe"], [184, 1, 1, "", "pivot"], [185, 1, 1, "", "product"], [186, 1, 1, "", "quantile"], [187, 1, 1, "", "rechunk"], [188, 1, 1, "", "rename"], [189, 1, 1, "", "replace"], [190, 1, 1, "", "replace_at_idx"], [191, 1, 1, "", "reverse"], [192, 1, 1, "", "row"], [193, 1, 1, "", "rows"], [194, 1, 1, "", "sample"], [195, 2, 1, "", "schema"], [196, 1, 1, "", "select"], [197, 2, 1, "", "shape"], [198, 1, 1, "", "shift"], [199, 1, 1, "", "shift_and_fill"], [200, 1, 1, "", "shrink_to_fit"], [201, 1, 1, "", "slice"], [202, 1, 1, "", "sort"], [203, 1, 1, "", "std"], [204, 1, 1, "", "sum"], [205, 1, 1, "", "tail"], [206, 1, 1, "", "take_every"], [207, 1, 1, "", "to_arrow"], [208, 1, 1, "", "to_dict"], [209, 1, 1, "", "to_dicts"], [210, 1, 1, "", "to_dummies"], [211, 1, 1, "", "to_init_repr"], [212, 1, 1, "", "to_numpy"], [213, 1, 1, "", "to_pandas"], [214, 1, 1, "", "to_series"], [215, 1, 1, "", "to_struct"], [216, 1, 1, "", "top_k"], [217, 1, 1, "", "transpose"], [218, 1, 1, "", "unique"], [219, 1, 1, "", "unnest"], [220, 1, 1, "", "unstack"], [221, 1, 1, "", "update"], [222, 1, 1, "", "upsample"], [223, 1, 1, "", "var"], [224, 1, 1, "", "vstack"], [225, 2, 1, "", "width"], [226, 1, 1, "", "with_columns"], [227, 1, 1, "", "with_row_count"], [26, 1, 1, "", "write_avro"], [27, 1, 1, "", "write_csv"], [28, 1, 1, "", "write_database"], [29, 1, 1, "", "write_excel"], [30, 1, 1, "", "write_ipc"], [31, 1, 1, "", "write_json"], [32, 1, 1, "", "write_ndjson"], [33, 1, 1, "", "write_parquet"]], "polars.DataType": [[34, 1, 1, "", "__init__"]], "polars.Date": [[35, 1, 1, "", "__init__"]], "polars.Datetime": [[36, 1, 1, "", "__init__"]], "polars.Decimal": [[37, 1, 1, "", "__init__"]], "polars.Duration": [[38, 1, 1, "", "__init__"]], "polars.Expr": [[255, 1, 1, "", "abs"], [256, 1, 1, "", "add"], [257, 1, 1, "", "agg_groups"], [258, 1, 1, "", "alias"], [259, 1, 1, "", "all"], [260, 1, 1, "", "and_"], [261, 1, 1, "", "any"], [262, 1, 1, "", "append"], [263, 1, 1, "", "apply"], [264, 1, 1, "", "approx_unique"], [265, 1, 1, "", "arccos"], [266, 1, 1, "", "arccosh"], [267, 1, 1, "", "arcsin"], [268, 1, 1, "", "arcsinh"], [269, 1, 1, "", "arctan"], [270, 1, 1, "", "arctanh"], [271, 1, 1, "", "arg_max"], [272, 1, 1, "", "arg_min"], [273, 1, 1, "", "arg_sort"], [274, 1, 1, "", "arg_true"], [275, 1, 1, "", "arg_unique"], [302, 1, 1, "", "backward_fill"], [308, 1, 1, "", "bottom_k"], [309, 1, 1, "", "cast"], [311, 1, 1, "", "ceil"], [312, 1, 1, "", "clip"], [313, 1, 1, "", "clip_max"], [314, 1, 1, "", "clip_min"], [315, 1, 1, "", "cos"], [316, 1, 1, "", "cosh"], [317, 1, 1, "", "count"], [318, 1, 1, "", "cumcount"], [319, 1, 1, "", "cummax"], [320, 1, 1, "", "cummin"], [321, 1, 1, "", "cumprod"], [322, 1, 1, "", "cumsum"], [323, 1, 1, "", "cumulative_eval"], [324, 1, 1, "", "diff"], [325, 1, 1, "", "dot"], [326, 1, 1, "", "drop_nans"], [327, 1, 1, "", "drop_nulls"], [364, 1, 1, "", "entropy"], [365, 1, 1, "", "eq"], [366, 1, 1, "", "ewm_mean"], [367, 1, 1, "", "ewm_std"], [368, 1, 1, "", "ewm_var"], [369, 1, 1, "", "exclude"], [370, 1, 1, "", "exp"], [371, 1, 1, "", "explode"], [372, 1, 1, "", "extend_constant"], [373, 1, 1, "", "fill_nan"], [374, 1, 1, "", "fill_null"], [375, 1, 1, "", "filter"], [376, 1, 1, "", "first"], [377, 1, 1, "", "flatten"], [378, 1, 1, "", "floor"], [379, 1, 1, "", "floordiv"], [380, 1, 1, "", "forward_fill"], [381, 1, 1, "", "ge"], [382, 1, 1, "", "gt"], [383, 1, 1, "", "hash"], [384, 1, 1, "", "head"], [385, 1, 1, "", "implode"], [386, 1, 1, "", "inspect"], [387, 1, 1, "", "interpolate"], [388, 1, 1, "", "is_between"], [389, 1, 1, "", "is_duplicated"], [390, 1, 1, "", "is_finite"], [391, 1, 1, "", "is_first"], [392, 1, 1, "", "is_in"], [393, 1, 1, "", "is_infinite"], [394, 1, 1, "", "is_nan"], [395, 1, 1, "", "is_not"], [396, 1, 1, "", "is_not_nan"], [397, 1, 1, "", "is_not_null"], [398, 1, 1, "", "is_null"], [399, 1, 1, "", "is_unique"], [400, 1, 1, "", "keep_name"], [401, 1, 1, "", "kurtosis"], [402, 1, 1, "", "last"], [403, 1, 1, "", "le"], [404, 1, 1, "", "len"], [405, 1, 1, "", "limit"], [406, 1, 1, "", "log"], [407, 1, 1, "", "log10"], [408, 1, 1, "", "log1p"], [409, 1, 1, "", "lower_bound"], [410, 1, 1, "", "lt"], [411, 1, 1, "", "map"], [412, 1, 1, "", "map_alias"], [413, 1, 1, "", "map_dict"], [414, 1, 1, "", "max"], [415, 1, 1, "", "mean"], [416, 1, 1, "", "median"], [423, 1, 1, "", "min"], [424, 1, 1, "", "mod"], [425, 1, 1, "", "mode"], [426, 1, 1, "", "mul"], [427, 1, 1, "", "n_unique"], [428, 1, 1, "", "nan_max"], [429, 1, 1, "", "nan_min"], [430, 1, 1, "", "ne"], [431, 1, 1, "", "null_count"], [432, 1, 1, "", "or_"], [433, 1, 1, "", "over"], [434, 1, 1, "", "pct_change"], [435, 1, 1, "", "pipe"], [436, 1, 1, "", "pow"], [437, 1, 1, "", "prefix"], [438, 1, 1, "", "product"], [439, 1, 1, "", "quantile"], [440, 1, 1, "", "rank"], [441, 1, 1, "", "rechunk"], [442, 1, 1, "", "reinterpret"], [443, 1, 1, "", "repeat_by"], [444, 1, 1, "", "reshape"], [445, 1, 1, "", "reverse"], [446, 1, 1, "", "rolling_apply"], [447, 1, 1, "", "rolling_max"], [448, 1, 1, "", "rolling_mean"], [449, 1, 1, "", "rolling_median"], [450, 1, 1, "", "rolling_min"], [451, 1, 1, "", "rolling_quantile"], [452, 1, 1, "", "rolling_skew"], [453, 1, 1, "", "rolling_std"], [454, 1, 1, "", "rolling_sum"], [455, 1, 1, "", "rolling_var"], [456, 1, 1, "", "round"], [457, 1, 1, "", "sample"], [458, 1, 1, "", "search_sorted"], [459, 1, 1, "", "set_sorted"], [460, 1, 1, "", "shift"], [461, 1, 1, "", "shift_and_fill"], [462, 1, 1, "", "shrink_dtype"], [463, 1, 1, "", "shuffle"], [464, 1, 1, "", "sign"], [465, 1, 1, "", "sin"], [466, 1, 1, "", "sinh"], [467, 1, 1, "", "skew"], [468, 1, 1, "", "slice"], [469, 1, 1, "", "sort"], [470, 1, 1, "", "sort_by"], [471, 1, 1, "", "sqrt"], [472, 1, 1, "", "std"], [505, 1, 1, "", "sub"], [506, 1, 1, "", "suffix"], [507, 1, 1, "", "sum"], [508, 1, 1, "", "tail"], [509, 1, 1, "", "take"], [510, 1, 1, "", "take_every"], [511, 1, 1, "", "tan"], [512, 1, 1, "", "tanh"], [513, 1, 1, "", "to_physical"], [514, 1, 1, "", "top_k"], [515, 1, 1, "", "truediv"], [516, 1, 1, "", "unique"], [517, 1, 1, "", "unique_counts"], [518, 1, 1, "", "upper_bound"], [519, 1, 1, "", "value_counts"], [520, 1, 1, "", "var"], [521, 1, 1, "", "where"], [522, 1, 1, "", "xor"]], "polars.Expr.arr": [[276, 1, 1, "", "arg_max"], [277, 1, 1, "", "arg_min"], [278, 1, 1, "", "concat"], [279, 1, 1, "", "contains"], [280, 1, 1, "", "count_match"], [281, 1, 1, "", "diff"], [282, 1, 1, "", "eval"], [283, 1, 1, "", "explode"], [284, 1, 1, "", "first"], [285, 1, 1, "", "get"], [286, 1, 1, "", "head"], [287, 1, 1, "", "join"], [288, 1, 1, "", "last"], [289, 1, 1, "", "lengths"], [290, 1, 1, "", "max"], [291, 1, 1, "", "mean"], [292, 1, 1, "", "min"], [293, 1, 1, "", "reverse"], [294, 1, 1, "", "shift"], [295, 1, 1, "", "slice"], [296, 1, 1, "", "sort"], [297, 1, 1, "", "sum"], [298, 1, 1, "", "tail"], [299, 1, 1, "", "take"], [300, 1, 1, "", "to_struct"], [301, 1, 1, "", "unique"]], "polars.Expr.bin": [[303, 1, 1, "", "contains"], [304, 1, 1, "", "decode"], [305, 1, 1, "", "encode"], [306, 1, 1, "", "ends_with"], [307, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[310, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[328, 1, 1, "", "cast_time_unit"], [329, 1, 1, "", "combine"], [330, 1, 1, "", "convert_time_zone"], [331, 1, 1, "", "date"], [332, 1, 1, "", "datetime"], [333, 1, 1, "", "day"], [334, 1, 1, "", "days"], [335, 1, 1, "", "epoch"], [336, 1, 1, "", "hour"], [337, 1, 1, "", "hours"], [338, 1, 1, "", "is_leap_year"], [339, 1, 1, "", "iso_year"], [340, 1, 1, "", "microsecond"], [341, 1, 1, "", "microseconds"], [342, 1, 1, "", "millisecond"], [343, 1, 1, "", "milliseconds"], [344, 1, 1, "", "minute"], [345, 1, 1, "", "minutes"], [346, 1, 1, "", "month"], [347, 1, 1, "", "nanosecond"], [348, 1, 1, "", "nanoseconds"], [349, 1, 1, "", "offset_by"], [350, 1, 1, "", "ordinal_day"], [351, 1, 1, "", "quarter"], [352, 1, 1, "", "replace_time_zone"], [353, 1, 1, "", "round"], [354, 1, 1, "", "second"], [355, 1, 1, "", "seconds"], [356, 1, 1, "", "strftime"], [357, 1, 1, "", "time"], [358, 1, 1, "", "timestamp"], [359, 1, 1, "", "truncate"], [360, 1, 1, "", "week"], [361, 1, 1, "", "weekday"], [362, 1, 1, "", "with_time_unit"], [363, 1, 1, "", "year"]], "polars.Expr.meta": [[417, 1, 1, "", "has_multiple_outputs"], [418, 1, 1, "", "is_regex_projection"], [419, 1, 1, "", "output_name"], [420, 1, 1, "", "pop"], [421, 1, 1, "", "root_names"], [422, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[473, 1, 1, "", "concat"], [474, 1, 1, "", "contains"], [475, 1, 1, "", "count_match"], [476, 1, 1, "", "decode"], [477, 1, 1, "", "encode"], [478, 1, 1, "", "ends_with"], [479, 1, 1, "", "explode"], [480, 1, 1, "", "extract"], [481, 1, 1, "", "extract_all"], [482, 1, 1, "", "json_extract"], [483, 1, 1, "", "json_path_match"], [484, 1, 1, "", "lengths"], [485, 1, 1, "", "ljust"], [486, 1, 1, "", "lstrip"], [487, 1, 1, "", "n_chars"], [488, 1, 1, "", "parse_int"], [489, 1, 1, "", "replace"], [490, 1, 1, "", "replace_all"], [491, 1, 1, "", "rjust"], [492, 1, 1, "", "rstrip"], [493, 1, 1, "", "slice"], [494, 1, 1, "", "split"], [495, 1, 1, "", "split_exact"], [496, 1, 1, "", "splitn"], [497, 1, 1, "", "starts_with"], [498, 1, 1, "", "strip"], [499, 1, 1, "", "strptime"], [500, 1, 1, "", "to_lowercase"], [501, 1, 1, "", "to_uppercase"], [502, 1, 1, "", "zfill"]], "polars.Expr.struct": [[503, 1, 1, "", "field"], [504, 1, 1, "", "rename_fields"]], "polars.Float32": [[39, 1, 1, "", "__init__"]], "polars.Float64": [[40, 1, 1, "", "__init__"]], "polars.Int16": [[41, 1, 1, "", "__init__"]], "polars.Int32": [[42, 1, 1, "", "__init__"]], "polars.Int64": [[43, 1, 1, "", "__init__"]], "polars.Int8": [[44, 1, 1, "", "__init__"]], "polars.LazyFrame": [[591, 1, 1, "", "bottom_k"], [592, 1, 1, "", "cache"], [593, 1, 1, "", "clear"], [594, 1, 1, "", "clone"], [595, 1, 1, "", "collect"], [596, 2, 1, "", "columns"], [597, 1, 1, "", "drop"], [598, 1, 1, "", "drop_nulls"], [599, 2, 1, "", "dtypes"], [600, 1, 1, "", "explain"], [601, 1, 1, "", "explode"], [602, 1, 1, "", "fetch"], [603, 1, 1, "", "fill_nan"], [604, 1, 1, "", "fill_null"], [605, 1, 1, "", "filter"], [606, 1, 1, "", "first"], [607, 1, 1, "", "from_json"], [608, 1, 1, "", "groupby"], [609, 1, 1, "", "groupby_dynamic"], [610, 1, 1, "", "groupby_rolling"], [611, 1, 1, "", "head"], [612, 1, 1, "", "inspect"], [613, 1, 1, "", "interpolate"], [614, 1, 1, "", "join"], [615, 1, 1, "", "join_asof"], [616, 1, 1, "", "last"], [617, 1, 1, "", "lazy"], [618, 1, 1, "", "limit"], [619, 1, 1, "", "map"], [620, 1, 1, "", "max"], [621, 1, 1, "", "mean"], [622, 1, 1, "", "median"], [623, 1, 1, "", "melt"], [624, 1, 1, "", "merge_sorted"], [625, 1, 1, "", "min"], [626, 1, 1, "", "pipe"], [627, 1, 1, "", "profile"], [628, 1, 1, "", "quantile"], [629, 1, 1, "", "read_json"], [630, 1, 1, "", "rename"], [631, 1, 1, "", "reverse"], [632, 2, 1, "", "schema"], [633, 1, 1, "", "select"], [634, 1, 1, "", "shift"], [635, 1, 1, "", "shift_and_fill"], [636, 1, 1, "", "show_graph"], [637, 1, 1, "", "sink_ipc"], [638, 1, 1, "", "sink_parquet"], [639, 1, 1, "", "slice"], [640, 1, 1, "", "sort"], [641, 1, 1, "", "std"], [642, 1, 1, "", "sum"], [643, 1, 1, "", "tail"], [644, 1, 1, "", "take_every"], [645, 1, 1, "", "top_k"], [646, 1, 1, "", "unique"], [647, 1, 1, "", "unnest"], [648, 1, 1, "", "update"], [649, 1, 1, "", "var"], [650, 2, 1, "", "width"], [651, 1, 1, "", "with_columns"], [652, 1, 1, "", "with_context"], [653, 1, 1, "", "with_row_count"], [654, 1, 1, "", "write_json"]], "polars.List": [[45, 1, 1, "", "__init__"]], "polars.Null": [[46, 1, 1, "", "__init__"]], "polars.Object": [[47, 1, 1, "", "__init__"]], "polars.SQLContext": [[48, 1, 1, "", "execute"], [49, 1, 1, "", "query"], [50, 1, 1, "", "register"]], "polars.Series": [[677, 1, 1, "", "abs"], [678, 1, 1, "", "alias"], [679, 1, 1, "", "all"], [680, 1, 1, "", "any"], [681, 1, 1, "", "append"], [682, 1, 1, "", "apply"], [683, 1, 1, "", "arccos"], [684, 1, 1, "", "arccosh"], [685, 1, 1, "", "arcsin"], [686, 1, 1, "", "arcsinh"], [687, 1, 1, "", "arctan"], [688, 1, 1, "", "arctanh"], [689, 1, 1, "", "arg_max"], [690, 1, 1, "", "arg_min"], [691, 1, 1, "", "arg_sort"], [692, 1, 1, "", "arg_true"], [693, 1, 1, "", "arg_unique"], [694, 3, 1, "", "arr"], [726, 1, 1, "", "bottom_k"], [727, 1, 1, "", "cast"], [728, 3, 1, "", "cat"], [730, 1, 1, "", "ceil"], [731, 1, 1, "", "chunk_lengths"], [732, 1, 1, "", "clear"], [733, 1, 1, "", "clip"], [734, 1, 1, "", "clip_max"], [735, 1, 1, "", "clip_min"], [736, 1, 1, "", "clone"], [737, 1, 1, "", "cos"], [738, 1, 1, "", "cosh"], [739, 1, 1, "", "cummax"], [740, 1, 1, "", "cummin"], [741, 1, 1, "", "cumprod"], [742, 1, 1, "", "cumsum"], [743, 1, 1, "", "cumulative_eval"], [744, 1, 1, "", "cut"], [745, 1, 1, "", "describe"], [746, 1, 1, "", "diff"], [747, 1, 1, "", "dot"], [748, 1, 1, "", "drop_nans"], [749, 1, 1, "", "drop_nulls"], [750, 3, 1, "", "dt"], [791, 3, 1, "", "dtype"], [792, 1, 1, "", "entropy"], [793, 1, 1, "", "estimated_size"], [794, 1, 1, "", "ewm_mean"], [795, 1, 1, "", "ewm_std"], [796, 1, 1, "", "ewm_var"], [797, 1, 1, "", "exp"], [798, 1, 1, "", "explode"], [799, 1, 1, "", "extend_constant"], [800, 1, 1, "", "fill_nan"], [801, 1, 1, "", "fill_null"], [802, 1, 1, "", "filter"], [803, 3, 1, "", "flags"], [804, 1, 1, "", "floor"], [805, 1, 1, "", "get_chunks"], [806, 1, 1, "", "has_validity"], [807, 1, 1, "", "hash"], [808, 1, 1, "", "head"], [809, 1, 1, "", "hist"], [810, 1, 1, "", "implode"], [811, 3, 1, "", "inner_dtype"], [812, 1, 1, "", "interpolate"], [813, 1, 1, "", "is_between"], [814, 1, 1, "", "is_boolean"], [815, 1, 1, "", "is_duplicated"], [816, 1, 1, "", "is_empty"], [817, 1, 1, "", "is_finite"], [818, 1, 1, "", "is_first"], [819, 1, 1, "", "is_float"], [820, 1, 1, "", "is_in"], [821, 1, 1, "", "is_infinite"], [822, 1, 1, "", "is_integer"], [823, 1, 1, "", "is_nan"], [824, 1, 1, "", "is_not_nan"], [825, 1, 1, "", "is_not_null"], [826, 1, 1, "", "is_null"], [827, 1, 1, "", "is_numeric"], [828, 1, 1, "", "is_sorted"], [829, 1, 1, "", "is_temporal"], [830, 1, 1, "", "is_unique"], [831, 1, 1, "", "is_utf8"], [832, 1, 1, "", "item"], [833, 1, 1, "", "kurtosis"], [834, 1, 1, "", "len"], [835, 1, 1, "", "limit"], [836, 1, 1, "", "log"], [837, 1, 1, "", "log10"], [838, 1, 1, "", "log1p"], [839, 1, 1, "", "lower_bound"], [840, 1, 1, "", "map_dict"], [841, 1, 1, "", "max"], [842, 1, 1, "", "mean"], [843, 1, 1, "", "median"], [844, 1, 1, "", "min"], [845, 1, 1, "", "mode"], [846, 1, 1, "", "n_chunks"], [847, 1, 1, "", "n_unique"], [848, 3, 1, "", "name"], [849, 1, 1, "", "nan_max"], [850, 1, 1, "", "nan_min"], [851, 1, 1, "", "new_from_index"], [852, 1, 1, "", "null_count"], [853, 1, 1, "", "pct_change"], [854, 1, 1, "", "peak_max"], [855, 1, 1, "", "peak_min"], [856, 1, 1, "", "product"], [857, 1, 1, "", "qcut"], [858, 1, 1, "", "quantile"], [859, 1, 1, "", "rank"], [860, 1, 1, "", "rechunk"], [861, 1, 1, "", "reinterpret"], [862, 1, 1, "", "rename"], [863, 1, 1, "", "reshape"], [864, 1, 1, "", "reverse"], [865, 1, 1, "", "rolling_apply"], [866, 1, 1, "", "rolling_max"], [867, 1, 1, "", "rolling_mean"], [868, 1, 1, "", "rolling_median"], [869, 1, 1, "", "rolling_min"], [870, 1, 1, "", "rolling_quantile"], [871, 1, 1, "", "rolling_skew"], [872, 1, 1, "", "rolling_std"], [873, 1, 1, "", "rolling_sum"], [874, 1, 1, "", "rolling_var"], [875, 1, 1, "", "round"], [876, 1, 1, "", "sample"], [877, 1, 1, "", "search_sorted"], [878, 1, 1, "", "series_equal"], [879, 1, 1, "", "set"], [880, 1, 1, "", "set_at_idx"], [881, 1, 1, "", "set_sorted"], [882, 3, 1, "", "shape"], [883, 1, 1, "", "shift"], [884, 1, 1, "", "shift_and_fill"], [885, 1, 1, "", "shrink_dtype"], [886, 1, 1, "", "shrink_to_fit"], [887, 1, 1, "", "shuffle"], [888, 1, 1, "", "sign"], [889, 1, 1, "", "sin"], [890, 1, 1, "", "sinh"], [891, 1, 1, "", "skew"], [892, 1, 1, "", "slice"], [893, 1, 1, "", "sort"], [894, 1, 1, "", "sqrt"], [895, 1, 1, "", "std"], [896, 3, 1, "", "str"], [931, 1, 1, "", "sum"], [932, 1, 1, "", "tail"], [933, 1, 1, "", "take"], [934, 1, 1, "", "take_every"], [935, 1, 1, "", "tan"], [936, 1, 1, "", "tanh"], [937, 3, 1, "", "time_unit"], [938, 1, 1, "", "to_arrow"], [939, 1, 1, "", "to_dummies"], [940, 1, 1, "", "to_frame"], [941, 1, 1, "", "to_init_repr"], [942, 1, 1, "", "to_list"], [943, 1, 1, "", "to_numpy"], [944, 1, 1, "", "to_pandas"], [945, 1, 1, "", "to_physical"], [946, 1, 1, "", "top_k"], [947, 1, 1, "", "unique"], [948, 1, 1, "", "unique_counts"], [949, 1, 1, "", "upper_bound"], [950, 1, 1, "", "value_counts"], [951, 1, 1, "", "var"], [952, 1, 1, "", "view"], [953, 1, 1, "", "zip_with"]], "polars.Series.arr": [[695, 1, 1, "", "arg_max"], [696, 1, 1, "", "arg_min"], [697, 1, 1, "", "concat"], [698, 1, 1, "", "contains"], [699, 1, 1, "", "count_match"], [700, 1, 1, "", "diff"], [701, 1, 1, "", "eval"], [702, 1, 1, "", "explode"], [703, 1, 1, "", "first"], [704, 1, 1, "", "get"], [705, 1, 1, "", "head"], [706, 1, 1, "", "join"], [707, 1, 1, "", "last"], [708, 1, 1, "", "lengths"], [709, 1, 1, "", "max"], [710, 1, 1, "", "mean"], [711, 1, 1, "", "min"], [712, 1, 1, "", "reverse"], [713, 1, 1, "", "shift"], [714, 1, 1, "", "slice"], [715, 1, 1, "", "sort"], [716, 1, 1, "", "sum"], [717, 1, 1, "", "tail"], [718, 1, 1, "", "take"], [719, 1, 1, "", "to_struct"], [720, 1, 1, "", "unique"]], "polars.Series.bin": [[721, 1, 1, "", "contains"], [722, 1, 1, "", "decode"], [723, 1, 1, "", "encode"], [724, 1, 1, "", "ends_with"], [725, 1, 1, "", "starts_with"]], "polars.Series.cat": [[729, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[751, 1, 1, "", "cast_time_unit"], [752, 1, 1, "", "combine"], [753, 1, 1, "", "convert_time_zone"], [754, 1, 1, "", "date"], [755, 1, 1, "", "datetime"], [756, 1, 1, "", "day"], [757, 1, 1, "", "days"], [758, 1, 1, "", "epoch"], [759, 1, 1, "", "hour"], [760, 1, 1, "", "hours"], [761, 1, 1, "", "is_leap_year"], [762, 1, 1, "", "iso_year"], [763, 1, 1, "", "max"], [764, 1, 1, "", "mean"], [765, 1, 1, "", "median"], [766, 1, 1, "", "microsecond"], [767, 1, 1, "", "microseconds"], [768, 1, 1, "", "millisecond"], [769, 1, 1, "", "milliseconds"], [770, 1, 1, "", "min"], [771, 1, 1, "", "minute"], [772, 1, 1, "", "minutes"], [773, 1, 1, "", "month"], [774, 1, 1, "", "nanosecond"], [775, 1, 1, "", "nanoseconds"], [776, 1, 1, "", "offset_by"], [777, 1, 1, "", "ordinal_day"], [778, 1, 1, "", "quarter"], [779, 1, 1, "", "replace_time_zone"], [780, 1, 1, "", "round"], [781, 1, 1, "", "second"], [782, 1, 1, "", "seconds"], [783, 1, 1, "", "strftime"], [784, 1, 1, "", "time"], [785, 1, 1, "", "timestamp"], [786, 1, 1, "", "truncate"], [787, 1, 1, "", "week"], [788, 1, 1, "", "weekday"], [789, 1, 1, "", "with_time_unit"], [790, 1, 1, "", "year"]], "polars.Series.str": [[897, 1, 1, "", "concat"], [898, 1, 1, "", "contains"], [899, 1, 1, "", "count_match"], [900, 1, 1, "", "decode"], [901, 1, 1, "", "encode"], [902, 1, 1, "", "ends_with"], [903, 1, 1, "", "explode"], [904, 1, 1, "", "extract"], [905, 1, 1, "", "extract_all"], [906, 1, 1, "", "json_extract"], [907, 1, 1, "", "json_path_match"], [908, 1, 1, "", "lengths"], [909, 1, 1, "", "ljust"], [910, 1, 1, "", "lstrip"], [911, 1, 1, "", "n_chars"], [912, 1, 1, "", "parse_int"], [913, 1, 1, "", "replace"], [914, 1, 1, "", "replace_all"], [915, 1, 1, "", "rjust"], [916, 1, 1, "", "rstrip"], [917, 1, 1, "", "slice"], [918, 1, 1, "", "split"], [919, 1, 1, "", "split_exact"], [920, 1, 1, "", "splitn"], [921, 1, 1, "", "starts_with"], [922, 1, 1, "", "strip"], [923, 1, 1, "", "strptime"], [924, 1, 1, "", "to_lowercase"], [925, 1, 1, "", "to_uppercase"], [926, 1, 1, "", "zfill"]], "polars.Series.struct": [[927, 1, 1, "", "field"], [928, 3, 1, "", "fields"], [929, 1, 1, "", "rename_fields"], [930, 1, 1, "", "unnest"]], "polars.StringCache": [[51, 1, 1, "", "__init__"]], "polars.Struct": [[52, 1, 1, "", "__init__"]], "polars.Time": [[53, 1, 1, "", "__init__"]], "polars.UInt16": [[54, 1, 1, "", "__init__"]], "polars.UInt32": [[55, 1, 1, "", "__init__"]], "polars.UInt64": [[56, 1, 1, "", "__init__"]], "polars.UInt8": [[57, 1, 1, "", "__init__"]], "polars.Unknown": [[58, 1, 1, "", "__init__"]], "polars.Utf8": [[59, 1, 1, "", "__init__"]], "polars.api": [[61, 4, 1, "", "register_dataframe_namespace"], [62, 4, 1, "", "register_expr_namespace"], [63, 4, 1, "", "register_lazyframe_namespace"], [64, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[228, 1, 1, "", "__iter__"], [229, 1, 1, "", "agg"], [230, 1, 1, "", "all"], [231, 1, 1, "", "apply"], [232, 1, 1, "", "count"], [233, 1, 1, "", "first"], [234, 1, 1, "", "head"], [235, 1, 1, "", "last"], [236, 1, 1, "", "max"], [237, 1, 1, "", "mean"], [238, 1, 1, "", "median"], [239, 1, 1, "", "min"], [240, 1, 1, "", "n_unique"], [241, 1, 1, "", "quantile"], [242, 1, 1, "", "sum"], [243, 1, 1, "", "tail"]], "polars.exceptions": [[72, 5, 1, "", "ArrowError"], [73, 5, 1, "", "ColumnNotFoundError"], [74, 5, 1, "", "ComputeError"], [75, 5, 1, "", "DuplicateError"], [76, 5, 1, "", "InvalidOperationError"], [77, 5, 1, "", "NoDataError"], [78, 5, 1, "", "NoRowsReturnedError"], [79, 5, 1, "", "PolarsPanicError"], [80, 5, 1, "", "RowsError"], [81, 5, 1, "", "SchemaError"], [82, 5, 1, "", "SchemaFieldNotFoundError"], [83, 5, 1, "", "ShapeError"], [84, 5, 1, "", "StructFieldNotFoundError"], [85, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[96, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[655, 1, 1, "", "agg"], [656, 1, 1, "", "all"], [657, 1, 1, "", "apply"], [658, 1, 1, "", "count"], [659, 1, 1, "", "first"], [660, 1, 1, "", "head"], [661, 1, 1, "", "last"], [662, 1, 1, "", "max"], [663, 1, 1, "", "mean"], [664, 1, 1, "", "median"], [665, 1, 1, "", "min"], [666, 1, 1, "", "n_unique"], [667, 1, 1, "", "quantile"], [668, 1, 1, "", "sum"], [669, 1, 1, "", "tail"]], "polars.testing": [[117, 4, 1, "", "assert_frame_equal"], [118, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[119, 0, 1, "", "column"], [120, 4, 1, "", "columns"], [121, 4, 1, "", "create_list_strategy"], [122, 4, 1, "", "dataframes"], [123, 4, 1, "", "load_profile"], [124, 4, 1, "", "series"], [125, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[119, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 144], "api": [1, 61, 62, 63, 64, 588], "provid": 1, "new": 1, "function": [1, 576, 587], "avail": 1, "registr": 1, "exampl": [1, 969], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 969], "binari": [2, 571, 582, 955], "boolean": [3, 572, 956], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 128], "activate_decim": 5, "load": [6, 128], "restore_default": 7, "save": [8, 128], "set_ascii_t": 9, "set_fmt_float": 10, "set_fmt_str_length": 11, "set_streaming_chunk_s": 12, "set_tbl_cell_align": 13, "set_tbl_col": 14, "set_tbl_column_data_type_inlin": 15, "set_tbl_dataframe_shape_below": 16, "set_tbl_format": 17, "set_tbl_hide_column_data_typ": 18, "set_tbl_hide_column_nam": 19, "set_tbl_hide_dataframe_shap": 20, "set_tbl_hide_dtype_separ": 21, "set_tbl_row": 22, "set_tbl_width_char": 23, "set_verbos": 24, "state": [25, 128], "datafram": [26, 27, 28, 29, 30, 31, 32, 33, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 249], "write_avro": 26, "write_csv": 27, "write_databas": 28, "write_excel": 29, "write_ipc": 30, "write_json": [31, 654], "write_ndjson": 32, "write_parquet": 33, "datatyp": 34, "date": [35, 331, 540, 754], "datetim": [36, 332, 541, 755], "decim": 37, "durat": [38, 542], "float32": 39, "float64": 40, "int16": 41, "int32": 42, "int64": 43, "int8": 44, "list": [45, 551, 578, 962], "null": 46, "object": 47, "sqlcontext": [48, 49, 50], "execut": 48, "queri": 49, "regist": 50, "stringcach": [51, 587], "struct": [52, 503, 504, 566, 584, 927, 928, 929, 930, 966], "time": [53, 357, 784], "uint16": 54, "uint32": 55, "uint64": 56, "uint8": 57, "unknown": 58, "utf8": 59, "align_fram": 60, "register_dataframe_namespac": 61, "register_expr_namespac": 62, "register_lazyframe_namespac": 63, "register_series_namespac": 64, "arg_wher": 65, "build_info": 66, "collect_al": 67, "concat": [68, 278, 473, 697, 897], "cut": [69, 744], "date_rang": 70, "enable_string_cach": 71, "except": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 253], "arrowerror": 72, "columnnotfounderror": 73, "computeerror": 74, "duplicateerror": 75, "invalidoperationerror": 76, "nodataerror": 77, "norowsreturnederror": 78, "polarspanicerror": 79, "rowserror": 80, "schemaerror": 81, "schemafieldnotfounderror": 82, "shapeerror": 83, "structfieldnotfounderror": 84, "toomanyrowsreturnederror": 85, "from_arrow": 86, "from_datafram": 87, "from_dict": [88, 89], "from_numpi": 90, "from_panda": 91, "from_record": 92, "from_repr": 93, "get_dummi": 94, "get_index_typ": 95, "io": 96, "csv": [96, 589], "batched_read": 96, "batchedcsvread": [96, 589], "next_batch": 96, "ones": 97, "read_avro": 98, "read_csv": 99, "read_csv_batch": 100, "read_databas": 101, "read_delta": 102, "read_excel": 103, "read_ipc": 104, "read_ipc_schema": 105, "read_json": [106, 629], "read_ndjson": 107, "read_parquet": 108, "read_parquet_schema": 109, "scan_csv": 110, "scan_delta": 111, "scan_ipc": 112, "scan_ndjson": 113, "scan_parquet": 114, "scan_pyarrow_dataset": 115, "show_vers": 116, "test": [117, 118, 119, 120, 121, 122, 123, 124, 125, 969], "assert_frame_equ": 117, "assert_series_equ": 118, "parametr": [119, 120, 121, 122, 123, 124, 125, 969], "column": [119, 120, 135, 574, 596], "create_list_strategi": 121, "load_profil": 123, "seri": [124, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 961], "set_profil": 125, "threadpool_s": 126, "zero": 127, "option": 128, "current": 128, "us": 128, "context": 128, "manag": 128, "aggreg": [129, 254, 590, 676], "__dataframe__": 130, "appli": [131, 231, 263, 525, 657, 682], "bottom_k": [132, 308, 591, 726], "clear": [133, 593, 732], "clone": [134, 594, 736], "corr": [136, 534], "describ": [137, 745], "drop": [138, 597], "drop_in_plac": 139, "drop_nul": [140, 327, 598, 749], "dtype": [141, 599, 791], "estimated_s": [142, 793], "explod": [143, 283, 371, 479, 601, 702, 798, 903], "fill_nan": [145, 373, 603, 800], "fill_nul": [146, 374, 604, 801], "filter": [147, 375, 605, 802], "find_idx_by_nam": 148, "fold": [149, 546], "frame_equ": 150, "get_column": [151, 152], "glimps": 153, "groupbi": [154, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 248, 608, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 672], "groupby_dynam": [155, 609], "groupby_rol": [156, 610], "hash_row": 157, "head": [158, 234, 286, 384, 550, 611, 660, 705, 808], "height": 159, "hstack": 160, "insert_at_idx": 161, "interpol": [162, 387, 613, 812], "is_dupl": [163, 389, 815], "is_empti": [164, 816], "is_uniqu": [165, 399, 830], "item": [166, 832], "iter_row": 167, "iter_slic": 168, "join": [169, 287, 614, 706], "join_asof": [170, 615], "lazi": [171, 587, 617], "limit": [172, 405, 618, 835], "max": [173, 236, 290, 414, 554, 620, 662, 709, 763, 841], "mean": [174, 237, 291, 415, 555, 621, 663, 710, 764, 842], "median": [175, 238, 416, 556, 622, 664, 765, 843], "melt": [176, 623], "merge_sort": [177, 624], "min": [178, 239, 292, 423, 557, 625, 665, 711, 770, 844], "n_chunk": [179, 846], "n_uniqu": [180, 240, 427, 558, 666, 847], "null_count": [181, 431, 852], "partition_bi": 182, "pipe": [183, 435, 626], "pivot": 184, "product": [185, 438, 856], "quantil": [186, 241, 439, 560, 628, 667, 858], "rechunk": [187, 441, 860], "renam": [188, 630, 862], "replac": [189, 489, 913], "replace_at_idx": 190, "revers": [191, 293, 445, 631, 712, 864], "row": [192, 193], "sampl": [194, 457, 876], "schema": [195, 632], "select": [196, 251, 563, 581, 633, 675, 964], "shape": [197, 882], "shift": [198, 294, 460, 634, 713, 883], "shift_and_fil": [199, 461, 635, 884], "shrink_to_fit": [200, 886], "slice": [201, 295, 468, 493, 639, 714, 892, 917], "sort": [202, 296, 469, 640, 715, 893], "std": [203, 472, 565, 641, 895], "sum": [204, 242, 297, 507, 567, 642, 668, 716, 931], "tail": [205, 243, 298, 508, 568, 643, 669, 717, 932], "take_everi": [206, 510, 644, 934], "to_arrow": [207, 938], "to_dict": [208, 209], "to_dummi": [210, 939], "to_init_repr": [211, 941], "to_numpi": [212, 943], "to_panda": [213, 944], "to_seri": 214, "to_struct": [215, 300, 719], "top_k": [216, 514, 645, 946], "transpos": 217, "uniqu": [218, 301, 516, 646, 720, 947], "unnest": [219, 647, 930], "unstack": 220, "updat": [221, 648], "upsampl": 222, "var": [223, 520, 569, 649, 951], "vstack": 224, "width": [225, 650], "with_column": [226, 651], "with_row_count": [227, 653], "__iter__": 228, "agg": [229, 655], "all": [230, 259, 523, 656, 679], "count": [232, 317, 535, 658], "first": [233, 284, 376, 545, 606, 659, 703], "last": [235, 288, 402, 616, 661, 707], "attribut": [244, 670, 954], "comput": [245, 575, 958], "descript": [246, 671, 959], "export": [247, 960], "miscellan": [250, 580, 587, 674, 963], "manipul": [251, 581, 675, 964], "data": 252, "type": 252, "numer": [252, 582], "tempor": [252, 585, 967], "nest": 252, "other": 252, "expr": [255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "ab": [255, 677], "add": 256, "agg_group": 257, "alia": [258, 678], "and_": 260, "ani": [261, 524, 680], "append": [262, 681], "approx_uniqu": [264, 526], "arcco": [265, 683], "arccosh": [266, 684], "arcsin": [267, 685], "arcsinh": [268, 686], "arctan": [269, 687], "arctanh": [270, 688], "arg_max": [271, 276, 689, 695], "arg_min": [272, 277, 690, 696], "arg_sort": [273, 691], "arg_tru": [274, 692], "arg_uniqu": [275, 693], "arr": [276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720], "contain": [279, 303, 474, 698, 721, 898], "count_match": [280, 475, 699, 899], "diff": [281, 324, 700, 746], "eval": [282, 701], "get": [285, 704], "length": [289, 484, 708, 908], "take": [299, 509, 718, 933], "backward_fil": 302, "bin": [303, 304, 305, 306, 307, 721, 722, 723, 724, 725], "decod": [304, 476, 722, 900], "encod": [305, 477, 723, 901], "ends_with": [306, 478, 724, 902], "starts_with": [307, 497, 725, 921], "cast": [309, 727], "cat": [310, 728, 729], "set_ord": [310, 729], "ceil": [311, 730], "clip": [312, 733], "clip_max": [313, 734], "clip_min": [314, 735], "co": [315, 737], "cosh": [316, 738], "cumcount": 318, "cummax": [319, 739], "cummin": [320, 740], "cumprod": [321, 741], "cumsum": [322, 539, 742], "cumulative_ev": [323, 743], "dot": [325, 747], "drop_nan": [326, 748], "dt": [328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790], "cast_time_unit": [328, 751], "combin": [329, 752], "convert_time_zon": [330, 753], "dai": [333, 334, 756, 757], "epoch": [335, 758], "hour": [336, 337, 759, 760], "is_leap_year": [338, 761], "iso_year": [339, 762], "microsecond": [340, 341, 766, 767], "millisecond": [342, 343, 768, 769], "minut": [344, 345, 771, 772], "month": [346, 773], "nanosecond": [347, 348, 774, 775], "offset_bi": [349, 776], "ordinal_dai": [350, 777], "quarter": [351, 778], "replace_time_zon": [352, 779], "round": [353, 456, 780, 875], "second": [354, 355, 781, 782], "strftime": [356, 783], "timestamp": [358, 785], "truncat": [359, 786], "week": [360, 787], "weekdai": [361, 788], "with_time_unit": [362, 789], "year": [363, 790], "entropi": [364, 792], "eq": 365, "ewm_mean": [366, 794], "ewm_std": [367, 795], "ewm_var": [368, 796], "exclud": [369, 544], "exp": [370, 797], "extend_const": [372, 799], "flatten": 377, "floor": [378, 804], "floordiv": 379, "forward_fil": 380, "ge": 381, "gt": 382, "hash": [383, 807], "implod": [385, 810], "inspect": [386, 612], "is_between": [388, 813], "is_finit": [390, 817], "is_first": [391, 818], "is_in": [392, 820], "is_infinit": [393, 821], "is_nan": [394, 823], "is_not": 395, "is_not_nan": [396, 824], "is_not_nul": [397, 825], "is_nul": [398, 826], "keep_nam": 400, "kurtosi": [401, 833], "le": 403, "len": [404, 834], "log": [406, 836], "log10": [407, 837], "log1p": [408, 838], "lower_bound": [409, 839], "lt": 410, "map": [411, 553, 619], "map_alia": 412, "map_dict": [413, 840], "meta": [417, 418, 419, 420, 421, 422, 579], "has_multiple_output": 417, "is_regex_project": 418, "output_nam": 419, "pop": 420, "root_nam": 421, "undo_alias": 422, "mod": 424, "mode": [425, 845], "mul": 426, "nan_max": [428, 849], "nan_min": [429, 850], "ne": 430, "or_": 432, "over": 433, "pct_chang": [434, 853], "pow": 436, "prefix": 437, "rank": [440, 859], "reinterpret": [442, 861], "repeat_bi": 443, "reshap": [444, 863], "rolling_appli": [446, 865], "rolling_max": [447, 866], "rolling_mean": [448, 867], "rolling_median": [449, 868], "rolling_min": [450, 869], "rolling_quantil": [451, 870], "rolling_skew": [452, 871], "rolling_std": [453, 872], "rolling_sum": [454, 873], "rolling_var": [455, 874], "search_sort": [458, 877], "set_sort": [459, 881], "shrink_dtyp": [462, 885], "shuffl": [463, 887], "sign": [464, 888], "sin": [465, 889], "sinh": [466, 890], "skew": [467, 891], "sort_bi": 470, "sqrt": [471, 894], "str": [473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926], "extract": [480, 904], "extract_al": [481, 905], "json_extract": [482, 906], "json_path_match": [483, 907], "ljust": [485, 909], "lstrip": [486, 910], "n_char": [487, 911], "parse_int": [488, 912], "replace_al": [490, 914], "rjust": [491, 915], "rstrip": [492, 916], "split": [494, 918], "split_exact": [495, 919], "splitn": [496, 920], "strip": [498, 922], "strptime": [499, 923], "to_lowercas": [500, 924], "to_uppercas": [501, 925], "zfill": [502, 926], "field": [503, 927, 928], "rename_field": [504, 929], "sub": 505, "suffix": 506, "tan": [511, 935], "tanh": [512, 936], "to_phys": [513, 945], "truediv": 515, "unique_count": [517, 948], "upper_bound": [518, 949], "value_count": [519, 950], "where": 521, "xor": 522, "arang": 527, "arg_sort_bi": 528, "avg": 529, "coalesc": 530, "col": 531, "concat_list": 532, "concat_str": 533, "cov": 536, "cumfold": 537, "cumreduc": 538, "element": 543, "format": 547, "from_epoch": 548, "group": 549, "lit": 552, "pearson_corr": 559, "reduc": 561, "repeat": 562, "spearman_rank_corr": 564, "when": 570, "categori": [573, 957], "name": [574, 848], "express": 577, "oper": 582, "conjunct": 582, "comparison": 582, "string": [583, 965], "window": 586, "convers": 587, "eager": 587, "parallel": 587, "refer": 588, "input": 589, "output": 589, "feather": 589, "ipc": 589, "parquet": 589, "databas": 589, "json": 589, "avro": 589, "excel": 589, "delta": 589, "lake": 589, "dataset": 589, "lazyfram": [591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 673], "cach": 592, "collect": 595, "explain": 600, "fetch": 602, "from_json": 607, "profil": [627, 969], "show_graph": 636, "sink_ipc": 637, "sink_parquet": 638, "with_context": 652, "lazygroupbi": [655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669], "read": 674, "write": 674, "logic": 674, "plan": 674, "chunk_length": 731, "flag": 803, "get_chunk": 805, "has_valid": 806, "hist": 809, "inner_dtyp": 811, "is_boolean": 814, "is_float": 819, "is_integ": 822, "is_numer": 827, "is_sort": 828, "is_tempor": 829, "is_utf8": 831, "new_from_index": 851, "peak_max": 854, "peak_min": 855, "qcut": 857, "series_equ": 878, "set": 879, "set_at_idx": 880, "time_unit": 937, "to_fram": 940, "to_list": 942, "view": 952, "zip_with": 953, "sql": 968, "method": 968, "assert": 969, "primit": 969, "strategi": 969, "helper": 969, "util": 970}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.DataFrame.write_excel": [[29, "polars-dataframe-write-excel"]], "polars.DataFrame.write_ipc": [[30, "polars-dataframe-write-ipc"]], "polars.Float64": [[40, "polars-float64"]], "polars.UInt64": [[56, "polars-uint64"]], "polars.api.register_series_namespace": [[64, "polars-api-register-series-namespace"]], "polars.UInt32": [[55, "polars-uint32"]], "polars.Config.activate_decimals": [[5, "polars-config-activate-decimals"]], "polars.StringCache": [[51, "polars-stringcache"]], "polars.DataFrame.write_avro": [[26, "polars-dataframe-write-avro"]], "polars.Int64": [[43, "polars-int64"]], "polars.Time": [[53, "polars-time"]], "polars.Config.set_tbl_hide_dtype_separator": [[21, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Struct": [[52, "polars-struct"]], "polars.Config.set_tbl_rows": [[22, "polars-config-set-tbl-rows"]], "polars.api.register_lazyframe_namespace": [[63, "polars-api-register-lazyframe-namespace"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.build_info": [[66, "polars-build-info"]], "polars.Config.set_tbl_hide_column_names": [[19, "polars-config-set-tbl-hide-column-names"]], "polars.concat": [[68, "polars-concat"]], "polars.Utf8": [[59, "polars-utf8"]], "polars.DataFrame.write_json": [[31, "polars-dataframe-write-json"]], "polars.api.register_expr_namespace": [[62, "polars-api-register-expr-namespace"]], "polars.Config.set_tbl_hide_column_data_types": [[18, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.save": [[8, "polars-config-save"]], "polars.Config.set_tbl_formatting": [[17, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_width_chars": [[23, "polars-config-set-tbl-width-chars"]], "polars.Decimal": [[37, "polars-decimal"]], "polars.Object": [[47, "polars-object"]], "polars.arg_where": [[65, "polars-arg-where"]], "polars.Config.set_ascii_tables": [[9, "polars-config-set-ascii-tables"]], "polars.Config.set_fmt_float": [[10, "polars-config-set-fmt-float"]], "polars.DataFrame.write_database": [[28, "polars-dataframe-write-database"]], "polars.Config.load": [[6, "polars-config-load"]], "polars.Config.set_tbl_column_data_type_inline": [[15, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_hide_dataframe_shape": [[20, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Int8": [[44, "polars-int8"]], "polars.Binary": [[2, "polars-binary"]], "polars.DataType": [[34, "polars-datatype"]], "polars.SQLContext.execute": [[48, "polars-sqlcontext-execute"]], "polars.Config.restore_defaults": [[7, "polars-config-restore-defaults"]], "polars.Datetime": [[36, "polars-datetime"]], "polars.Unknown": [[58, "polars-unknown"]], "polars.collect_all": [[67, "polars-collect-all"]], "polars.Config.set_tbl_cols": [[14, "polars-config-set-tbl-cols"]], "polars.Int32": [[42, "polars-int32"]], "polars.DataFrame.write_csv": [[27, "polars-dataframe-write-csv"]], "polars.Config.set_tbl_cell_alignment": [[13, "polars-config-set-tbl-cell-alignment"]], "polars.api.register_dataframe_namespace": [[61, "polars-api-register-dataframe-namespace"]], "polars.Null": [[46, "polars-null"]], "polars.UInt16": [[54, "polars-uint16"]], "polars.Int16": [[41, "polars-int16"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [969, "examples"]], "polars.Date": [[35, "polars-date"]], "polars.Config.set_streaming_chunk_size": [[12, "polars-config-set-streaming-chunk-size"]], "polars.align_frames": [[60, "polars-align-frames"]], "polars.Config.set_tbl_dataframe_shape_below": [[16, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_verbose": [[24, "polars-config-set-verbose"]], "polars.UInt8": [[57, "polars-uint8"]], "polars.List": [[45, "polars-list"]], "polars.DataFrame.write_ndjson": [[32, "polars-dataframe-write-ndjson"]], "polars.Float32": [[39, "polars-float32"]], "polars.Config.state": [[25, "polars-config-state"]], "polars.DataFrame.write_parquet": [[33, "polars-dataframe-write-parquet"]], "polars.SQLContext.query": [[49, "polars-sqlcontext-query"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Duration": [[38, "polars-duration"]], "polars.SQLContext.register": [[50, "polars-sqlcontext-register"]], "polars.Config.set_fmt_str_lengths": [[11, "polars-config-set-fmt-str-lengths"]], "polars.testing.assert_series_equal": [[118, "polars-testing-assert-series-equal"]], "polars.from_dicts": [[89, "polars-from-dicts"]], "polars.read_excel": [[103, "polars-read-excel"]], "polars.read_csv_batched": [[100, "polars-read-csv-batched"]], "polars.DataFrame.apply": [[131, "polars-dataframe-apply"]], "polars.DataFrame.bottom_k": [[132, "polars-dataframe-bottom-k"]], "polars.ones": [[97, "polars-ones"]], "polars.testing.assert_frame_equal": [[117, "polars-testing-assert-frame-equal"]], "polars.scan_csv": [[110, "polars-scan-csv"]], "polars.DataFrame.__dataframe__": [[130, "polars-dataframe-dataframe"]], "polars.DataFrame.clone": [[134, "polars-dataframe-clone"]], "polars.threadpool_size": [[126, "polars-threadpool-size"]], "polars.exceptions.ArrowError": [[72, "polars-exceptions-arrowerror"]], "polars.read_csv": [[99, "polars-read-csv"]], "polars.read_delta": [[102, "polars-read-delta"]], "polars.exceptions.ShapeError": [[83, "polars-exceptions-shapeerror"]], "polars.read_ipc_schema": [[105, "polars-read-ipc-schema"]], "polars.get_index_type": [[95, "polars-get-index-type"]], "polars.exceptions.ComputeError": [[74, "polars-exceptions-computeerror"]], "polars.exceptions.ColumnNotFoundError": [[73, "polars-exceptions-columnnotfounderror"]], "polars.get_dummies": [[94, "polars-get-dummies"]], "polars.from_pandas": [[91, "polars-from-pandas"]], "polars.exceptions.DuplicateError": [[75, "polars-exceptions-duplicateerror"]], "polars.testing.parametric.column": [[119, "polars-testing-parametric-column"]], "polars.exceptions.SchemaFieldNotFoundError": [[82, "polars-exceptions-schemafieldnotfounderror"]], "polars.read_parquet_schema": [[109, "polars-read-parquet-schema"]], "polars.from_numpy": [[90, "polars-from-numpy"]], "polars.read_parquet": [[108, "polars-read-parquet"]], "polars.scan_delta": [[111, "polars-scan-delta"]], "polars.scan_ipc": [[112, "polars-scan-ipc"]], "polars.scan_ndjson": [[113, "polars-scan-ndjson"]], "polars.from_records": [[92, "polars-from-records"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[96, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.DataFrame.columns": [[135, "polars-dataframe-columns"]], "polars.testing.parametric.series": [[124, "polars-testing-parametric-series"]], "polars.testing.parametric.columns": [[120, "polars-testing-parametric-columns"]], "polars.from_dict": [[88, "polars-from-dict"]], "polars.testing.parametric.set_profile": [[125, "polars-testing-parametric-set-profile"]], "polars.exceptions.InvalidOperationError": [[76, "polars-exceptions-invalidoperationerror"]], "polars.read_json": [[106, "polars-read-json"]], "polars.testing.parametric.create_list_strategy": [[121, "polars-testing-parametric-create-list-strategy"]], "polars.DataFrame.clear": [[133, "polars-dataframe-clear"]], "polars.exceptions.TooManyRowsReturnedError": [[85, "polars-exceptions-toomanyrowsreturnederror"]], "polars.date_range": [[70, "polars-date-range"]], "polars.from_dataframe": [[87, "polars-from-dataframe"]], "polars.exceptions.PolarsPanicError": [[79, "polars-exceptions-polarspanicerror"]], "polars.exceptions.SchemaError": [[81, "polars-exceptions-schemaerror"]], "polars.scan_parquet": [[114, "polars-scan-parquet"]], "Aggregation": [[129, "aggregation"], [676, "aggregation"], [590, "aggregation"], [254, "aggregation"]], "polars.enable_string_cache": [[71, "polars-enable-string-cache"]], "polars.exceptions.NoDataError": [[77, "polars-exceptions-nodataerror"]], "polars.read_ipc": [[104, "polars-read-ipc"]], "polars.cut": [[69, "polars-cut"]], "polars.read_ndjson": [[107, "polars-read-ndjson"]], "polars.show_versions": [[116, "polars-show-versions"]], "polars.DataFrame.corr": [[136, "polars-dataframe-corr"]], "polars.testing.parametric.load_profile": [[123, "polars-testing-parametric-load-profile"]], "Config": [[128, "config"]], "Config options": [[128, "config-options"]], "Config load, save, and current state": [[128, "config-load-save-and-current-state"]], "Use as a context manager": [[128, "use-as-a-context-manager"]], "polars.exceptions.StructFieldNotFoundError": [[84, "polars-exceptions-structfieldnotfounderror"]], "polars.scan_pyarrow_dataset": [[115, "polars-scan-pyarrow-dataset"]], "polars.exceptions.RowsError": [[80, "polars-exceptions-rowserror"]], "polars.testing.parametric.dataframes": [[122, "polars-testing-parametric-dataframes"]], "polars.zeros": [[127, "polars-zeros"]], "polars.DataFrame.describe": [[137, "polars-dataframe-describe"]], "polars.exceptions.NoRowsReturnedError": [[78, "polars-exceptions-norowsreturnederror"]], "polars.from_arrow": [[86, "polars-from-arrow"]], "polars.read_avro": [[98, "polars-read-avro"]], "polars.read_database": [[101, "polars-read-database"]], "polars.from_repr": [[93, "polars-from-repr"]], "Testing": [[969, "testing"]], "Asserts": [[969, "asserts"]], "Parametric testing": [[969, "parametric-testing"]], "Polars primitives": [[969, "polars-primitives"]], "Strategy helpers": [[969, "strategy-helpers"]], "Profiles": [[969, "profiles"]], "Struct": [[966, "struct"], [584, "struct"]], "Temporal": [[967, "temporal"], [585, "temporal"], [252, "temporal"]], "SQL": [[968, "sql"]], "Methods": [[968, "methods"]], "Utils": [[970, "utils"]], "polars.Series.name": [[848, "polars-series-name"]], "polars.Series.min": [[844, "polars-series-min"]], "polars.Series.is_unique": [[830, "polars-series-is-unique"]], "polars.Series.round": [[875, "polars-series-round"]], "polars.Series.log1p": [[838, "polars-series-log1p"]], "polars.Series.sign": [[888, "polars-series-sign"]], "polars.Series.nan_min": [[850, "polars-series-nan-min"]], "polars.Series.shrink_to_fit": [[886, "polars-series-shrink-to-fit"]], "polars.Series.quantile": [[858, "polars-series-quantile"]], "polars.Series.sample": [[876, "polars-series-sample"]], "polars.Series.mode": [[845, "polars-series-mode"]], "polars.Series.product": [[856, "polars-series-product"]], "polars.Series.set_at_idx": [[880, "polars-series-set-at-idx"]], "polars.Series.is_temporal": [[829, "polars-series-is-temporal"]], "polars.Series.pct_change": [[853, "polars-series-pct-change"]], "polars.Series.slice": [[892, "polars-series-slice"]], "polars.Series.sinh": [[890, "polars-series-sinh"]], "polars.Series.kurtosis": [[833, "polars-series-kurtosis"]], "polars.Series.len": [[834, "polars-series-len"]], "polars.Series.std": [[895, "polars-series-std"]], "polars.Series.max": [[841, "polars-series-max"]], "polars.Series.n_unique": [[847, "polars-series-n-unique"]], "polars.Series.reinterpret": [[861, "polars-series-reinterpret"]], "polars.Series.rolling_max": [[866, "polars-series-rolling-max"]], "polars.Series.map_dict": [[840, "polars-series-map-dict"]], "polars.Series.lower_bound": [[839, "polars-series-lower-bound"]], "polars.Series.is_utf8": [[831, "polars-series-is-utf8"]], "polars.Series.rename": [[862, "polars-series-rename"]], "polars.Series.rolling_std": [[872, "polars-series-rolling-std"]], "polars.Series.peak_max": [[854, "polars-series-peak-max"]], "polars.Series.rank": [[859, "polars-series-rank"]], "polars.Series.skew": [[891, "polars-series-skew"]], "polars.Series.rechunk": [[860, "polars-series-rechunk"]], "polars.Series.shape": [[882, "polars-series-shape"]], "polars.Series.item": [[832, "polars-series-item"]], "polars.Series.rolling_quantile": [[870, "polars-series-rolling-quantile"]], "polars.Series.str": [[896, "polars-series-str"]], "polars.Series.set": [[879, "polars-series-set"]], "polars.Series.series_equal": [[878, "polars-series-series-equal"]], "polars.Series.search_sorted": [[877, "polars-series-search-sorted"]], "polars.Series.sqrt": [[894, "polars-series-sqrt"]], "polars.Series.qcut": [[857, "polars-series-qcut"]], "polars.Series.rolling_var": [[874, "polars-series-rolling-var"]], "polars.Series.rolling_sum": [[873, "polars-series-rolling-sum"]], "polars.Series.mean": [[842, "polars-series-mean"]], "polars.Series.rolling_median": [[868, "polars-series-rolling-median"]], "polars.Series.peak_min": [[855, "polars-series-peak-min"]], "polars.Series.sin": [[889, "polars-series-sin"]], "polars.Series.sort": [[893, "polars-series-sort"]], "polars.Series.median": [[843, "polars-series-median"]], "polars.Series.limit": [[835, "polars-series-limit"]], "polars.Series.rolling_mean": [[867, "polars-series-rolling-mean"]], "polars.Series.log": [[836, "polars-series-log"]], "polars.Series.rolling_min": [[869, "polars-series-rolling-min"]], "polars.Series.nan_max": [[849, "polars-series-nan-max"]], "polars.Series.shuffle": [[887, "polars-series-shuffle"]], "polars.Series.set_sorted": [[881, "polars-series-set-sorted"]], "polars.Series.n_chunks": [[846, "polars-series-n-chunks"]], "polars.Series.new_from_index": [[851, "polars-series-new-from-index"]], "polars.Series.shift": [[883, "polars-series-shift"]], "polars.Series.null_count": [[852, "polars-series-null-count"]], "polars.Series.reshape": [[863, "polars-series-reshape"]], "polars.Series.reverse": [[864, "polars-series-reverse"]], "polars.Series.is_sorted": [[828, "polars-series-is-sorted"]], "polars.Series.log10": [[837, "polars-series-log10"]], "polars.Series.shrink_dtype": [[885, "polars-series-shrink-dtype"]], "polars.Series.rolling_skew": [[871, "polars-series-rolling-skew"]], "polars.Series.shift_and_fill": [[884, "polars-series-shift-and-fill"]], "polars.Series.rolling_apply": [[865, "polars-series-rolling-apply"]], "polars.Series.dt.second": [[781, "polars-series-dt-second"]], "polars.Series.dt.microsecond": [[766, "polars-series-dt-microsecond"]], "polars.Series.dt.offset_by": [[776, "polars-series-dt-offset-by"]], "polars.Series.is_empty": [[816, "polars-series-is-empty"]], "polars.Series.dt.nanoseconds": [[775, "polars-series-dt-nanoseconds"]], "polars.Series.exp": [[797, "polars-series-exp"]], "polars.Series.is_not_null": [[825, "polars-series-is-not-null"]], "polars.Series.entropy": [[792, "polars-series-entropy"]], "polars.Series.fill_null": [[801, "polars-series-fill-null"]], "polars.Series.dt.month": [[773, "polars-series-dt-month"]], "polars.Series.filter": [[802, "polars-series-filter"]], "polars.Series.dt.replace_time_zone": [[779, "polars-series-dt-replace-time-zone"]], "polars.Series.is_in": [[820, "polars-series-is-in"]], "polars.Series.dt.minute": [[771, "polars-series-dt-minute"]], "polars.Series.dt.year": [[790, "polars-series-dt-year"]], "polars.Series.hash": [[807, "polars-series-hash"]], "polars.Series.dt.median": [[765, "polars-series-dt-median"]], "polars.Series.inner_dtype": [[811, "polars-series-inner-dtype"]], "polars.Series.is_numeric": [[827, "polars-series-is-numeric"]], "polars.Series.explode": [[798, "polars-series-explode"]], "polars.Series.implode": [[810, "polars-series-implode"]], "polars.Series.head": [[808, "polars-series-head"]], "polars.Series.dt.timestamp": [[785, "polars-series-dt-timestamp"]], "polars.Series.dt.millisecond": [[768, "polars-series-dt-millisecond"]], "polars.Series.is_null": [[826, "polars-series-is-null"]], "polars.Series.dt.iso_year": [[762, "polars-series-dt-iso-year"]], "polars.Series.dt.hour": [[759, "polars-series-dt-hour"]], "polars.Series.estimated_size": [[793, "polars-series-estimated-size"]], "polars.Series.is_integer": [[822, "polars-series-is-integer"]], "polars.Series.has_validity": [[806, "polars-series-has-validity"]], "polars.Series.is_not_nan": [[824, "polars-series-is-not-nan"]], "polars.Series.dt.truncate": [[786, "polars-series-dt-truncate"]], "polars.Series.dt.microseconds": [[767, "polars-series-dt-microseconds"]], "polars.Series.dt.minutes": [[772, "polars-series-dt-minutes"]], "polars.Series.extend_constant": [[799, "polars-series-extend-constant"]], "polars.Series.dt.time": [[784, "polars-series-dt-time"]], "polars.Series.ewm_std": [[795, "polars-series-ewm-std"]], "polars.Series.dt.round": [[780, "polars-series-dt-round"]], "polars.Series.dt.seconds": [[782, "polars-series-dt-seconds"]], "polars.Series.dt.week": [[787, "polars-series-dt-week"]], "polars.Series.dt.weekday": [[788, "polars-series-dt-weekday"]], "polars.Series.dt.with_time_unit": [[789, "polars-series-dt-with-time-unit"]], "polars.Series.flags": [[803, "polars-series-flags"]], "polars.Series.dt.mean": [[764, "polars-series-dt-mean"]], "polars.Series.floor": [[804, "polars-series-floor"]], "polars.Series.interpolate": [[812, "polars-series-interpolate"]], "polars.Series.is_nan": [[823, "polars-series-is-nan"]], "polars.Series.dt.is_leap_year": [[761, "polars-series-dt-is-leap-year"]], "polars.Series.dt.ordinal_day": [[777, "polars-series-dt-ordinal-day"]], "polars.Series.dt.hours": [[760, "polars-series-dt-hours"]], "polars.Series.dt.quarter": [[778, "polars-series-dt-quarter"]], "polars.Series.is_float": [[819, "polars-series-is-float"]], "polars.Series.is_duplicated": [[815, "polars-series-is-duplicated"]], "polars.Series.is_between": [[813, "polars-series-is-between"]], "polars.Series.is_boolean": [[814, "polars-series-is-boolean"]], "polars.Series.dt.max": [[763, "polars-series-dt-max"]], "polars.Series.ewm_mean": [[794, "polars-series-ewm-mean"]], "polars.Series.dt.strftime": [[783, "polars-series-dt-strftime"]], "polars.Series.dt.milliseconds": [[769, "polars-series-dt-milliseconds"]], "polars.Series.is_first": [[818, "polars-series-is-first"]], "polars.Series.dtype": [[791, "polars-series-dtype"]], "polars.Series.get_chunks": [[805, "polars-series-get-chunks"]], "polars.Series.dt.nanosecond": [[774, "polars-series-dt-nanosecond"]], "polars.Series.hist": [[809, "polars-series-hist"]], "polars.Series.is_infinite": [[821, "polars-series-is-infinite"]], "polars.Series.is_finite": [[817, "polars-series-is-finite"]], "polars.Series.dt.min": [[770, "polars-series-dt-min"]], "polars.Series.ewm_var": [[796, "polars-series-ewm-var"]], "polars.Series.fill_nan": [[800, "polars-series-fill-nan"]], "polars.Series.clip_max": [[734, "polars-series-clip-max"]], "polars.Series.arr.unique": [[720, "polars-series-arr-unique"]], "polars.Series.cumprod": [[741, "polars-series-cumprod"]], "polars.Series.dt": [[750, "polars-series-dt"]], "polars.Series.cumulative_eval": [[743, "polars-series-cumulative-eval"]], "polars.Series.arr.take": [[718, "polars-series-arr-take"]], "polars.Series.arg_true": [[692, "polars-series-arg-true"]], "polars.Series.arr.lengths": [[708, "polars-series-arr-lengths"]], "polars.Series.bin.decode": [[722, "polars-series-bin-decode"]], "polars.Series.cut": [[744, "polars-series-cut"]], "polars.Series.diff": [[746, "polars-series-diff"]], "polars.Series.dt.combine": [[752, "polars-series-dt-combine"]], "polars.Series.cat": [[728, "polars-series-cat"]], "polars.Series.arr.count_match": [[699, "polars-series-arr-count-match"]], "polars.Series.bin.ends_with": [[724, "polars-series-bin-ends-with"]], "polars.Series.cast": [[727, "polars-series-cast"]], "polars.Series.arg_min": [[690, "polars-series-arg-min"]], "polars.Series.dt.convert_time_zone": [[753, "polars-series-dt-convert-time-zone"]], "polars.Series.bin.starts_with": [[725, "polars-series-bin-starts-with"]], "polars.Series.cummax": [[739, "polars-series-cummax"]], "polars.Series.arr.arg_max": [[695, "polars-series-arr-arg-max"]], "polars.Series.arr.last": [[707, "polars-series-arr-last"]], "polars.Series.arr.tail": [[717, "polars-series-arr-tail"]], "polars.Series.dt.day": [[756, "polars-series-dt-day"]], "polars.Series.clip": [[733, "polars-series-clip"]], "polars.Series.arr.concat": [[697, "polars-series-arr-concat"]], "polars.Series.cummin": [[740, "polars-series-cummin"]], "polars.Series.dt.epoch": [[758, "polars-series-dt-epoch"]], "polars.Series.bottom_k": [[726, "polars-series-bottom-k"]], "polars.Series.arr.min": [[711, "polars-series-arr-min"]], "polars.Series.arr.slice": [[714, "polars-series-arr-slice"]], "polars.Series.arg_sort": [[691, "polars-series-arg-sort"]], "polars.Series.ceil": [[730, "polars-series-ceil"]], "polars.Series.clear": [[732, "polars-series-clear"]], "polars.Series.chunk_lengths": [[731, "polars-series-chunk-lengths"]], "polars.Series.arr.explode": [[702, "polars-series-arr-explode"]], "polars.Series.arr.arg_min": [[696, "polars-series-arr-arg-min"]], "polars.Series.drop_nulls": [[749, "polars-series-drop-nulls"]], "polars.Series.arr.reverse": [[712, "polars-series-arr-reverse"]], "polars.Series.cat.set_ordering": [[729, "polars-series-cat-set-ordering"]], "polars.Series.arr.sum": [[716, "polars-series-arr-sum"]], "polars.Series.arr.first": [[703, "polars-series-arr-first"]], "polars.Series.arr.to_struct": [[719, "polars-series-arr-to-struct"]], "polars.Series.arr.contains": [[698, "polars-series-arr-contains"]], "polars.Series.dot": [[747, "polars-series-dot"]], "polars.Series.dt.datetime": [[755, "polars-series-dt-datetime"]], "polars.Series.arr.join": [[706, "polars-series-arr-join"]], "polars.Series.arr.diff": [[700, "polars-series-arr-diff"]], "polars.Series.arr.mean": [[710, "polars-series-arr-mean"]], "polars.Series.arg_unique": [[693, "polars-series-arg-unique"]], "polars.Series.arr.shift": [[713, "polars-series-arr-shift"]], "polars.Series.bin.encode": [[723, "polars-series-bin-encode"]], "polars.Series.arr.max": [[709, "polars-series-arr-max"]], "polars.Series.bin.contains": [[721, "polars-series-bin-contains"]], "polars.Series.arr": [[694, "polars-series-arr"]], "polars.Series.dt.date": [[754, "polars-series-dt-date"]], "polars.Series.dt.days": [[757, "polars-series-dt-days"]], "polars.Series.drop_nans": [[748, "polars-series-drop-nans"]], "polars.Series.arr.head": [[705, "polars-series-arr-head"]], "polars.Series.arr.eval": [[701, "polars-series-arr-eval"]], "polars.Series.arr.get": [[704, "polars-series-arr-get"]], "polars.Series.arr.sort": [[715, "polars-series-arr-sort"]], "polars.Series.cumsum": [[742, "polars-series-cumsum"]], "polars.Series.describe": [[745, "polars-series-describe"]], "polars.Series.clip_min": [[735, "polars-series-clip-min"]], "polars.Series.dt.cast_time_unit": [[751, "polars-series-dt-cast-time-unit"]], "polars.Series.cos": [[737, "polars-series-cos"]], "polars.Series.clone": [[736, "polars-series-clone"]], "polars.Series.cosh": [[738, "polars-series-cosh"]], "polars.Series.str.explode": [[903, "polars-series-str-explode"]], "polars.Series.str.decode": [[900, "polars-series-str-decode"]], "polars.Series.str.strip": [[922, "polars-series-str-strip"]], "polars.Series.str.parse_int": [[912, "polars-series-str-parse-int"]], "polars.Series.str.concat": [[897, "polars-series-str-concat"]], "polars.Series.time_unit": [[937, "polars-series-time-unit"]], "polars.Series.var": [[951, "polars-series-var"]], "Attributes": [[954, "attributes"], [670, "attributes"], [244, "attributes"]], "polars.Series.unique_counts": [[948, "polars-series-unique-counts"]], "polars.Series.take": [[933, "polars-series-take"]], "polars.Series.to_init_repr": [[941, "polars-series-to-init-repr"]], "polars.Series.unique": [[947, "polars-series-unique"]], "Computation": [[958, "computation"], [575, "computation"], [245, "computation"]], "polars.Series.str.splitn": [[920, "polars-series-str-splitn"]], "polars.Series.struct.unnest": [[930, "polars-series-struct-unnest"]], "polars.Series.view": [[952, "polars-series-view"]], "polars.Series.str.ends_with": [[902, "polars-series-str-ends-with"]], "Boolean": [[956, "boolean"], [572, "boolean"]], "Export": [[960, "export"], [247, "export"]], "polars.Series.str.rjust": [[915, "polars-series-str-rjust"]], "Descriptive": [[959, "descriptive"], [671, "descriptive"], [246, "descriptive"]], "polars.Series.str.json_path_match": [[907, "polars-series-str-json-path-match"]], "polars.Series.str.rstrip": [[916, "polars-series-str-rstrip"]], "polars.Series.tail": [[932, "polars-series-tail"]], "polars.Series.str.extract": [[904, "polars-series-str-extract"]], "polars.Series.str.ljust": [[909, "polars-series-str-ljust"]], "polars.Series.to_arrow": [[938, "polars-series-to-arrow"]], "polars.Series.tan": [[935, "polars-series-tan"]], "polars.Series.str.split_exact": [[919, "polars-series-str-split-exact"]], "Miscellaneous": [[963, "miscellaneous"], [674, "miscellaneous"], [580, "miscellaneous"], [587, "miscellaneous"], [250, "miscellaneous"]], "polars.Series.struct.field": [[927, "polars-series-struct-field"]], "polars.Series.take_every": [[934, "polars-series-take-every"]], "polars.Series.str.replace": [[913, "polars-series-str-replace"]], "polars.Series.str.contains": [[898, "polars-series-str-contains"]], "polars.Series.sum": [[931, "polars-series-sum"]], "polars.Series.str.extract_all": [[905, "polars-series-str-extract-all"]], "polars.Series.str.strptime": [[923, "polars-series-str-strptime"]], "polars.Series.str.starts_with": [[921, "polars-series-str-starts-with"]], "List": [[962, "list"], [578, "list"]], "polars.Series.upper_bound": [[949, "polars-series-upper-bound"]], "polars.Series.str.replace_all": [[914, "polars-series-str-replace-all"]], "polars.Series.str.split": [[918, "polars-series-str-split"]], "Binary": [[955, "binary"], [571, "binary"], [582, "binary"]], "polars.Series.to_numpy": [[943, "polars-series-to-numpy"]], "polars.Series.to_dummies": [[939, "polars-series-to-dummies"]], "polars.Series.str.zfill": [[926, "polars-series-str-zfill"]], "polars.Series.value_counts": [[950, "polars-series-value-counts"]], "Manipulation/selection": [[964, "manipulation-selection"], [675, "manipulation-selection"], [581, "manipulation-selection"], [251, "manipulation-selection"]], "polars.Series.struct.rename_fields": [[929, "polars-series-struct-rename-fields"]], "polars.Series.str.lengths": [[908, "polars-series-str-lengths"]], "polars.Series.struct.fields": [[928, "polars-series-struct-fields"]], "polars.Series.zip_with": [[953, "polars-series-zip-with"]], "polars.Series.str.lstrip": [[910, "polars-series-str-lstrip"]], "polars.Series.str.json_extract": [[906, "polars-series-str-json-extract"]], "polars.Series.str.n_chars": [[911, "polars-series-str-n-chars"]], "polars.Series.str.to_uppercase": [[925, "polars-series-str-to-uppercase"]], "Categories": [[957, "categories"], [573, "categories"]], "polars.Series.str.encode": [[901, "polars-series-str-encode"]], "polars.Series.str.count_match": [[899, "polars-series-str-count-match"]], "polars.Series.to_frame": [[940, "polars-series-to-frame"]], "polars.Series.to_physical": [[945, "polars-series-to-physical"]], "polars.Series.to_list": [[942, "polars-series-to-list"]], "polars.Series.str.slice": [[917, "polars-series-str-slice"]], "Series": [[961, "series"]], "polars.Series.top_k": [[946, "polars-series-top-k"]], "String": [[965, "string"], [583, "string"]], "polars.Series.str.to_lowercase": [[924, "polars-series-str-to-lowercase"]], "polars.Series.tanh": [[936, "polars-series-tanh"]], "polars.Series.to_pandas": [[944, "polars-series-to-pandas"]], "LazyFrame": [[673, "lazyframe"]], "polars.Series.all": [[679, "polars-series-all"]], "polars.LazyFrame.slice": [[639, "polars-lazyframe-slice"]], "polars.LazyFrame.mean": [[621, "polars-lazyframe-mean"]], "polars.LazyFrame.read_json": [[629, "polars-lazyframe-read-json"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[664, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.Series.arccosh": [[684, "polars-series-arccosh"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[658, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[666, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.Series.arcsin": [[685, "polars-series-arcsin"]], "polars.Series.arctanh": [[688, "polars-series-arctanh"]], "polars.LazyFrame.show_graph": [[636, "polars-lazyframe-show-graph"]], "polars.LazyFrame.profile": [[627, "polars-lazyframe-profile"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[655, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.Series.alias": [[678, "polars-series-alias"]], "polars.LazyFrame.var": [[649, "polars-lazyframe-var"]], "polars.Series.arccos": [[683, "polars-series-arccos"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[669, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.LazyFrame.sink_ipc": [[637, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.width": [[650, "polars-lazyframe-width"]], "polars.LazyFrame.sort": [[640, "polars-lazyframe-sort"]], "polars.Series.arctan": [[687, "polars-series-arctan"]], "polars.LazyFrame.shift": [[634, "polars-lazyframe-shift"]], "GroupBy": [[672, "groupby"], [248, "groupby"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[659, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.LazyFrame.unique": [[646, "polars-lazyframe-unique"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[662, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.LazyFrame.quantile": [[628, "polars-lazyframe-quantile"]], "polars.LazyFrame.merge_sorted": [[624, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.with_row_count": [[653, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.sum": [[642, "polars-lazyframe-sum"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[660, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.LazyFrame.select": [[633, "polars-lazyframe-select"]], "polars.LazyFrame.take_every": [[644, "polars-lazyframe-take-every"]], "polars.LazyFrame.with_context": [[652, "polars-lazyframe-with-context"]], "polars.Series.apply": [[682, "polars-series-apply"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[657, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.Series.append": [[681, "polars-series-append"]], "polars.LazyFrame.pipe": [[626, "polars-lazyframe-pipe"]], "polars.Series.any": [[680, "polars-series-any"]], "polars.LazyFrame.shift_and_fill": [[635, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.update": [[648, "polars-lazyframe-update"]], "polars.LazyFrame.with_columns": [[651, "polars-lazyframe-with-columns"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[663, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.Series.arg_max": [[689, "polars-series-arg-max"]], "polars.LazyFrame.reverse": [[631, "polars-lazyframe-reverse"]], "polars.LazyFrame.write_json": [[654, "polars-lazyframe-write-json"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[656, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.Series.arcsinh": [[686, "polars-series-arcsinh"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[661, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[668, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.LazyFrame.tail": [[643, "polars-lazyframe-tail"]], "Read/write logical plan": [[674, "read-write-logical-plan"]], "polars.LazyFrame.std": [[641, "polars-lazyframe-std"]], "polars.LazyFrame.sink_parquet": [[638, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.rename": [[630, "polars-lazyframe-rename"]], "polars.LazyFrame.median": [[622, "polars-lazyframe-median"]], "polars.LazyFrame.min": [[625, "polars-lazyframe-min"]], "polars.Series.abs": [[677, "polars-series-abs"]], "polars.LazyFrame.top_k": [[645, "polars-lazyframe-top-k"]], "polars.LazyFrame.schema": [[632, "polars-lazyframe-schema"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[667, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[665, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.LazyFrame.unnest": [[647, "polars-lazyframe-unnest"]], "polars.LazyFrame.melt": [[623, "polars-lazyframe-melt"]], "polars.Expr.value_counts": [[519, "polars-expr-value-counts"]], "polars.Expr.xor": [[522, "polars-expr-xor"]], "polars.Expr.unique": [[516, "polars-expr-unique"]], "polars.list": [[551, "polars-list"]], "polars.Expr.str.strptime": [[499, "polars-expr-str-strptime"]], "polars.count": [[535, "polars-count"]], "polars.Expr.suffix": [[506, "polars-expr-suffix"]], "polars.Expr.where": [[521, "polars-expr-where"]], "polars.Expr.str.parse_int": [[488, "polars-expr-str-parse-int"]], "polars.Expr.str.lstrip": [[486, "polars-expr-str-lstrip"]], "polars.Expr.str.to_uppercase": [[501, "polars-expr-str-to-uppercase"]], "polars.Expr.top_k": [[514, "polars-expr-top-k"]], "polars.Expr.tail": [[508, "polars-expr-tail"]], "polars.element": [[543, "polars-element"]], "polars.Expr.str.replace_all": [[490, "polars-expr-str-replace-all"]], "polars.Expr.str.n_chars": [[487, "polars-expr-str-n-chars"]], "polars.exclude": [[544, "polars-exclude"]], "polars.Expr.struct.rename_fields": [[504, "polars-expr-struct-rename-fields"]], "polars.head": [[550, "polars-head"]], "polars.Expr.str.json_path_match": [[483, "polars-expr-str-json-path-match"]], "polars.arange": [[527, "polars-arange"]], "polars.Expr.str.split": [[494, "polars-expr-str-split"]], "polars.Expr.take": [[509, "polars-expr-take"]], "polars.Expr.str.ljust": [[485, "polars-expr-str-ljust"]], "polars.Expr.tan": [[511, "polars-expr-tan"]], "polars.arg_sort_by": [[528, "polars-arg-sort-by"]], "polars.Expr.str.rstrip": [[492, "polars-expr-str-rstrip"]], "polars.cumfold": [[537, "polars-cumfold"]], "polars.Expr.upper_bound": [[518, "polars-expr-upper-bound"]], "polars.cov": [[536, "polars-cov"]], "polars.Expr.str.splitn": [[496, "polars-expr-str-splitn"]], "polars.Expr.str.split_exact": [[495, "polars-expr-str-split-exact"]], "polars.date": [[540, "polars-date"]], "polars.Expr.to_physical": [[513, "polars-expr-to-physical"]], "polars.Expr.str.lengths": [[484, "polars-expr-str-lengths"]], "polars.Expr.sum": [[507, "polars-expr-sum"]], "polars.coalesce": [[530, "polars-coalesce"]], "polars.from_epoch": [[548, "polars-from-epoch"]], "polars.Expr.struct.field": [[503, "polars-expr-struct-field"]], "polars.first": [[545, "polars-first"]], "polars.datetime": [[541, "polars-datetime"]], "polars.Expr.str.slice": [[493, "polars-expr-str-slice"]], "polars.Expr.truediv": [[515, "polars-expr-truediv"]], "polars.cumsum": [[539, "polars-cumsum"]], "polars.duration": [[542, "polars-duration"]], "polars.Expr.str.starts_with": [[497, "polars-expr-str-starts-with"]], "polars.Expr.str.zfill": [[502, "polars-expr-str-zfill"]], "polars.Expr.take_every": [[510, "polars-expr-take-every"]], "polars.Expr.unique_counts": [[517, "polars-expr-unique-counts"]], "polars.all": [[523, "polars-all"]], "polars.fold": [[546, "polars-fold"]], "polars.concat_str": [[533, "polars-concat-str"]], "polars.format": [[547, "polars-format"]], "polars.approx_unique": [[526, "polars-approx-unique"]], "polars.Expr.str.rjust": [[491, "polars-expr-str-rjust"]], "polars.Expr.sub": [[505, "polars-expr-sub"]], "polars.any": [[524, "polars-any"]], "polars.avg": [[529, "polars-avg"]], "polars.Expr.str.replace": [[489, "polars-expr-str-replace"]], "polars.Expr.var": [[520, "polars-expr-var"]], "polars.Expr.tanh": [[512, "polars-expr-tanh"]], "polars.groups": [[549, "polars-groups"]], "polars.cumreduce": [[538, "polars-cumreduce"]], "polars.Expr.str.strip": [[498, "polars-expr-str-strip"]], "polars.apply": [[525, "polars-apply"]], "polars.concat_list": [[532, "polars-concat-list"]], "polars.corr": [[534, "polars-corr"]], "polars.col": [[531, "polars-col"]], "polars.Expr.str.to_lowercase": [[500, "polars-expr-str-to-lowercase"]], "polars.Expr.meta.output_name": [[419, "polars-expr-meta-output-name"]], "polars.Expr.n_unique": [[427, "polars-expr-n-unique"]], "polars.Expr.meta.undo_aliases": [[422, "polars-expr-meta-undo-aliases"]], "polars.Expr.nan_min": [[429, "polars-expr-nan-min"]], "polars.Expr.pow": [[436, "polars-expr-pow"]], "polars.Expr.rank": [[440, "polars-expr-rank"]], "polars.Expr.rolling_quantile": [[451, "polars-expr-rolling-quantile"]], "polars.Expr.max": [[414, "polars-expr-max"]], "polars.Expr.meta.pop": [[420, "polars-expr-meta-pop"]], "polars.Expr.mod": [[424, "polars-expr-mod"]], "polars.Expr.pipe": [[435, "polars-expr-pipe"]], "polars.Expr.shrink_dtype": [[462, "polars-expr-shrink-dtype"]], "polars.Expr.rolling_skew": [[452, "polars-expr-rolling-skew"]], "polars.Expr.meta.root_names": [[421, "polars-expr-meta-root-names"]], "polars.Expr.sin": [[465, "polars-expr-sin"]], "polars.Expr.str.decode": [[476, "polars-expr-str-decode"]], "polars.Expr.str.contains": [[474, "polars-expr-str-contains"]], "polars.Expr.std": [[472, "polars-expr-std"]], "polars.Expr.over": [[433, "polars-expr-over"]], "polars.Expr.pct_change": [[434, "polars-expr-pct-change"]], "polars.Expr.rolling_max": [[447, "polars-expr-rolling-max"]], "polars.Expr.shuffle": [[463, "polars-expr-shuffle"]], "polars.Expr.sqrt": [[471, "polars-expr-sqrt"]], "polars.Expr.rolling_std": [[453, "polars-expr-rolling-std"]], "polars.Expr.rolling_apply": [[446, "polars-expr-rolling-apply"]], "polars.Expr.sinh": [[466, "polars-expr-sinh"]], "polars.Expr.str.encode": [[477, "polars-expr-str-encode"]], "polars.Expr.round": [[456, "polars-expr-round"]], "polars.Expr.median": [[416, "polars-expr-median"]], "polars.Expr.rolling_min": [[450, "polars-expr-rolling-min"]], "polars.Expr.or_": [[432, "polars-expr-or"]], "polars.Expr.meta.is_regex_projection": [[418, "polars-expr-meta-is-regex-projection"]], "polars.Expr.str.explode": [[479, "polars-expr-str-explode"]], "polars.Expr.str.concat": [[473, "polars-expr-str-concat"]], "polars.Expr.reinterpret": [[442, "polars-expr-reinterpret"]], "polars.Expr.sign": [[464, "polars-expr-sign"]], "polars.Expr.rolling_sum": [[454, "polars-expr-rolling-sum"]], "polars.Expr.meta.has_multiple_outputs": [[417, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.null_count": [[431, "polars-expr-null-count"]], "polars.Expr.reverse": [[445, "polars-expr-reverse"]], "polars.Expr.sample": [[457, "polars-expr-sample"]], "polars.Expr.nan_max": [[428, "polars-expr-nan-max"]], "polars.Expr.shift_and_fill": [[461, "polars-expr-shift-and-fill"]], "polars.Expr.quantile": [[439, "polars-expr-quantile"]], "polars.Expr.rolling_median": [[449, "polars-expr-rolling-median"]], "polars.Expr.min": [[423, "polars-expr-min"]], "polars.Expr.rechunk": [[441, "polars-expr-rechunk"]], "polars.Expr.prefix": [[437, "polars-expr-prefix"]], "polars.Expr.str.count_match": [[475, "polars-expr-str-count-match"]], "polars.Expr.str.json_extract": [[482, "polars-expr-str-json-extract"]], "polars.Expr.slice": [[468, "polars-expr-slice"]], "polars.Expr.str.extract_all": [[481, "polars-expr-str-extract-all"]], "polars.Expr.product": [[438, "polars-expr-product"]], "polars.Expr.sort": [[469, "polars-expr-sort"]], "polars.Expr.rolling_mean": [[448, "polars-expr-rolling-mean"]], "polars.Expr.rolling_var": [[455, "polars-expr-rolling-var"]], "polars.Expr.mode": [[425, "polars-expr-mode"]], "polars.Expr.ne": [[430, "polars-expr-ne"]], "polars.Expr.search_sorted": [[458, "polars-expr-search-sorted"]], "polars.Expr.mean": [[415, "polars-expr-mean"]], "polars.Expr.shift": [[460, "polars-expr-shift"]], "polars.Expr.str.ends_with": [[478, "polars-expr-str-ends-with"]], "polars.Expr.skew": [[467, "polars-expr-skew"]], "polars.Expr.str.extract": [[480, "polars-expr-str-extract"]], "polars.Expr.repeat_by": [[443, "polars-expr-repeat-by"]], "polars.Expr.mul": [[426, "polars-expr-mul"]], "polars.Expr.sort_by": [[470, "polars-expr-sort-by"]], "polars.Expr.reshape": [[444, "polars-expr-reshape"]], "polars.Expr.set_sorted": [[459, "polars-expr-set-sorted"]], "polars.Expr.dt.weekday": [[361, "polars-expr-dt-weekday"]], "polars.Expr.gt": [[382, "polars-expr-gt"]], "polars.Expr.is_infinite": [[393, "polars-expr-is-infinite"]], "polars.Expr.dt.minutes": [[345, "polars-expr-dt-minutes"]], "polars.Expr.interpolate": [[387, "polars-expr-interpolate"]], "polars.Expr.is_nan": [[394, "polars-expr-is-nan"]], "polars.Expr.keep_name": [[400, "polars-expr-keep-name"]], "polars.Expr.lower_bound": [[409, "polars-expr-lower-bound"]], "polars.Expr.dt.second": [[354, "polars-expr-dt-second"]], "polars.Expr.map": [[411, "polars-expr-map"]], "polars.Expr.fill_nan": [[373, "polars-expr-fill-nan"]], "polars.Expr.is_duplicated": [[389, "polars-expr-is-duplicated"]], "polars.Expr.floor": [[378, "polars-expr-floor"]], "polars.Expr.explode": [[371, "polars-expr-explode"]], "polars.Expr.le": [[403, "polars-expr-le"]], "polars.Expr.dt.ordinal_day": [[350, "polars-expr-dt-ordinal-day"]], "polars.Expr.is_between": [[388, "polars-expr-is-between"]], "polars.Expr.ewm_mean": [[366, "polars-expr-ewm-mean"]], "polars.Expr.ewm_var": [[368, "polars-expr-ewm-var"]], "polars.Expr.filter": [[375, "polars-expr-filter"]], "polars.Expr.first": [[376, "polars-expr-first"]], "polars.Expr.implode": [[385, "polars-expr-implode"]], "polars.Expr.limit": [[405, "polars-expr-limit"]], "polars.Expr.dt.with_time_unit": [[362, "polars-expr-dt-with-time-unit"]], "polars.Expr.ge": [[381, "polars-expr-ge"]], "polars.Expr.dt.timestamp": [[358, "polars-expr-dt-timestamp"]], "polars.Expr.forward_fill": [[380, "polars-expr-forward-fill"]], "polars.Expr.is_first": [[391, "polars-expr-is-first"]], "polars.Expr.last": [[402, "polars-expr-last"]], "polars.Expr.dt.truncate": [[359, "polars-expr-dt-truncate"]], "polars.Expr.flatten": [[377, "polars-expr-flatten"]], "polars.Expr.is_unique": [[399, "polars-expr-is-unique"]], "polars.Expr.kurtosis": [[401, "polars-expr-kurtosis"]], "polars.Expr.dt.nanosecond": [[347, "polars-expr-dt-nanosecond"]], "polars.Expr.log1p": [[408, "polars-expr-log1p"]], "polars.Expr.head": [[384, "polars-expr-head"]], "polars.Expr.hash": [[383, "polars-expr-hash"]], "polars.Expr.log10": [[407, "polars-expr-log10"]], "polars.Expr.is_finite": [[390, "polars-expr-is-finite"]], "polars.Expr.dt.week": [[360, "polars-expr-dt-week"]], "polars.Expr.is_not_null": [[397, "polars-expr-is-not-null"]], "polars.Expr.map_dict": [[413, "polars-expr-map-dict"]], "polars.Expr.exp": [[370, "polars-expr-exp"]], "polars.Expr.dt.offset_by": [[349, "polars-expr-dt-offset-by"]], "polars.Expr.extend_constant": [[372, "polars-expr-extend-constant"]], "polars.Expr.log": [[406, "polars-expr-log"]], "polars.Expr.dt.time": [[357, "polars-expr-dt-time"]], "polars.Expr.floordiv": [[379, "polars-expr-floordiv"]], "polars.Expr.len": [[404, "polars-expr-len"]], "polars.Expr.is_not_nan": [[396, "polars-expr-is-not-nan"]], "polars.Expr.dt.month": [[346, "polars-expr-dt-month"]], "polars.Expr.ewm_std": [[367, "polars-expr-ewm-std"]], "polars.Expr.dt.quarter": [[351, "polars-expr-dt-quarter"]], "polars.Expr.fill_null": [[374, "polars-expr-fill-null"]], "polars.Expr.eq": [[365, "polars-expr-eq"]], "polars.Expr.map_alias": [[412, "polars-expr-map-alias"]], "polars.Expr.is_in": [[392, "polars-expr-is-in"]], "polars.Expr.dt.replace_time_zone": [[352, "polars-expr-dt-replace-time-zone"]], "polars.Expr.is_null": [[398, "polars-expr-is-null"]], "polars.Expr.exclude": [[369, "polars-expr-exclude"]], "polars.Expr.lt": [[410, "polars-expr-lt"]], "polars.Expr.inspect": [[386, "polars-expr-inspect"]], "polars.Expr.is_not": [[395, "polars-expr-is-not"]], "polars.Expr.entropy": [[364, "polars-expr-entropy"]], "polars.Expr.dt.seconds": [[355, "polars-expr-dt-seconds"]], "polars.Expr.dt.year": [[363, "polars-expr-dt-year"]], "polars.Expr.dt.round": [[353, "polars-expr-dt-round"]], "polars.Expr.dt.strftime": [[356, "polars-expr-dt-strftime"]], "polars.Expr.dt.nanoseconds": [[348, "polars-expr-dt-nanoseconds"]], "polars.Expr.cosh": [[316, "polars-expr-cosh"]], "polars.Expr.bin.contains": [[303, "polars-expr-bin-contains"]], "polars.Expr.clip": [[312, "polars-expr-clip"]], "polars.Expr.dt.milliseconds": [[343, "polars-expr-dt-milliseconds"]], "polars.Expr.drop_nans": [[326, "polars-expr-drop-nans"]], "polars.Expr.arr.max": [[290, "polars-expr-arr-max"]], "polars.Expr.cumcount": [[318, "polars-expr-cumcount"]], "polars.Expr.arr.join": [[287, "polars-expr-arr-join"]], "polars.Expr.arr.get": [[285, "polars-expr-arr-get"]], "polars.Expr.cos": [[315, "polars-expr-cos"]], "polars.Expr.dt.iso_year": [[339, "polars-expr-dt-iso-year"]], "polars.Expr.dt.convert_time_zone": [[330, "polars-expr-dt-convert-time-zone"]], "polars.Expr.arr.sort": [[296, "polars-expr-arr-sort"]], "polars.Expr.cummin": [[320, "polars-expr-cummin"]], "polars.Expr.arr.tail": [[298, "polars-expr-arr-tail"]], "polars.Expr.clip_min": [[314, "polars-expr-clip-min"]], "polars.Expr.dt.is_leap_year": [[338, "polars-expr-dt-is-leap-year"]], "polars.Expr.arr.shift": [[294, "polars-expr-arr-shift"]], "polars.Expr.arr.first": [[284, "polars-expr-arr-first"]], "polars.Expr.cumprod": [[321, "polars-expr-cumprod"]], "polars.Expr.arr.arg_min": [[277, "polars-expr-arr-arg-min"]], "polars.Expr.clip_max": [[313, "polars-expr-clip-max"]], "polars.Expr.dt.microseconds": [[341, "polars-expr-dt-microseconds"]], "polars.Expr.backward_fill": [[302, "polars-expr-backward-fill"]], "polars.Expr.dt.hours": [[337, "polars-expr-dt-hours"]], "polars.Expr.arr.lengths": [[289, "polars-expr-arr-lengths"]], "polars.Expr.drop_nulls": [[327, "polars-expr-drop-nulls"]], "polars.Expr.arr.take": [[299, "polars-expr-arr-take"]], "polars.Expr.bin.encode": [[305, "polars-expr-bin-encode"]], "polars.Expr.arr.count_match": [[280, "polars-expr-arr-count-match"]], "polars.Expr.arr.explode": [[283, "polars-expr-arr-explode"]], "polars.Expr.cummax": [[319, "polars-expr-cummax"]], "polars.Expr.dt.days": [[334, "polars-expr-dt-days"]], "polars.Expr.arr.head": [[286, "polars-expr-arr-head"]], "polars.Expr.arr.sum": [[297, "polars-expr-arr-sum"]], "polars.Expr.dt.day": [[333, "polars-expr-dt-day"]], "polars.Expr.arr.unique": [[301, "polars-expr-arr-unique"]], "polars.Expr.arr.to_struct": [[300, "polars-expr-arr-to-struct"]], "polars.Expr.dt.combine": [[329, "polars-expr-dt-combine"]], "polars.Expr.cast": [[309, "polars-expr-cast"]], "polars.Expr.arr.contains": [[279, "polars-expr-arr-contains"]], "polars.Expr.arr.mean": [[291, "polars-expr-arr-mean"]], "polars.Expr.dt.cast_time_unit": [[328, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.epoch": [[335, "polars-expr-dt-epoch"]], "polars.Expr.arr.diff": [[281, "polars-expr-arr-diff"]], "polars.Expr.diff": [[324, "polars-expr-diff"]], "polars.Expr.arr.arg_max": [[276, "polars-expr-arr-arg-max"]], "polars.Expr.dt.minute": [[344, "polars-expr-dt-minute"]], "polars.Expr.bin.starts_with": [[307, "polars-expr-bin-starts-with"]], "polars.Expr.arr.eval": [[282, "polars-expr-arr-eval"]], "polars.Expr.arr.slice": [[295, "polars-expr-arr-slice"]], "polars.Expr.count": [[317, "polars-expr-count"]], "polars.Expr.cumulative_eval": [[323, "polars-expr-cumulative-eval"]], "polars.Expr.bottom_k": [[308, "polars-expr-bottom-k"]], "polars.Expr.bin.ends_with": [[306, "polars-expr-bin-ends-with"]], "polars.Expr.dot": [[325, "polars-expr-dot"]], "polars.Expr.dt.microsecond": [[340, "polars-expr-dt-microsecond"]], "polars.Expr.bin.decode": [[304, "polars-expr-bin-decode"]], "polars.Expr.arr.min": [[292, "polars-expr-arr-min"]], "polars.Expr.arr.last": [[288, "polars-expr-arr-last"]], "polars.Expr.arr.reverse": [[293, "polars-expr-arr-reverse"]], "polars.Expr.ceil": [[311, "polars-expr-ceil"]], "polars.Expr.dt.hour": [[336, "polars-expr-dt-hour"]], "polars.Expr.dt.datetime": [[332, "polars-expr-dt-datetime"]], "polars.Expr.arr.concat": [[278, "polars-expr-arr-concat"]], "polars.Expr.cumsum": [[322, "polars-expr-cumsum"]], "polars.Expr.dt.date": [[331, "polars-expr-dt-date"]], "polars.Expr.cat.set_ordering": [[310, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.millisecond": [[342, "polars-expr-dt-millisecond"]], "polars.LazyFrame.max": [[620, "polars-lazyframe-max"]], "polars.LazyFrame.groupby_rolling": [[610, "polars-lazyframe-groupby-rolling"]], "polars.min": [[557, "polars-min"]], "polars.when": [[570, "polars-when"]], "polars.LazyFrame.fill_null": [[604, "polars-lazyframe-fill-null"]], "polars.n_unique": [[558, "polars-n-unique"]], "polars.LazyFrame.dtypes": [[599, "polars-lazyframe-dtypes"]], "polars.LazyFrame.lazy": [[617, "polars-lazyframe-lazy"]], "polars.spearman_rank_corr": [[564, "polars-spearman-rank-corr"]], "polars.LazyFrame.groupby": [[608, "polars-lazyframe-groupby"]], "polars.LazyFrame.map": [[619, "polars-lazyframe-map"]], "polars.LazyFrame.drop_nulls": [[598, "polars-lazyframe-drop-nulls"]], "polars.repeat": [[562, "polars-repeat"]], "polars.LazyFrame.fill_nan": [[603, "polars-lazyframe-fill-nan"]], "Functions": [[576, "functions"], [587, "functions"]], "Expressions": [[577, "expressions"]], "polars.LazyFrame.drop": [[597, "polars-lazyframe-drop"]], "polars.LazyFrame.inspect": [[612, "polars-lazyframe-inspect"]], "polars.LazyFrame.interpolate": [[613, "polars-lazyframe-interpolate"]], "polars.LazyFrame.join_asof": [[615, "polars-lazyframe-join-asof"]], "polars.LazyFrame.explode": [[601, "polars-lazyframe-explode"]], "polars.select": [[563, "polars-select"]], "polars.LazyFrame.filter": [[605, "polars-lazyframe-filter"]], "polars.map": [[553, "polars-map"]], "API reference": [[588, "api-reference"]], "Columns / names": [[574, "columns-names"]], "polars.LazyFrame.columns": [[596, "polars-lazyframe-columns"]], "polars.median": [[556, "polars-median"]], "Window": [[586, "window"]], "polars.LazyFrame.clone": [[594, "polars-lazyframe-clone"]], "polars.mean": [[555, "polars-mean"]], "polars.LazyFrame.join": [[614, "polars-lazyframe-join"]], "polars.reduce": [[561, "polars-reduce"]], "Meta": [[579, "meta"]], "polars.quantile": [[560, "polars-quantile"]], "polars.max": [[554, "polars-max"]], "polars.lit": [[552, "polars-lit"]], "polars.LazyFrame.from_json": [[607, "polars-lazyframe-from-json"]], "polars.LazyFrame.groupby_dynamic": [[609, "polars-lazyframe-groupby-dynamic"]], "polars.tail": [[568, "polars-tail"]], "polars.pearson_corr": [[559, "polars-pearson-corr"]], "polars.sum": [[567, "polars-sum"]], "polars.LazyFrame.clear": [[593, "polars-lazyframe-clear"]], "polars.LazyFrame.collect": [[595, "polars-lazyframe-collect"]], "polars.var": [[569, "polars-var"]], "polars.LazyFrame.fetch": [[602, "polars-lazyframe-fetch"]], "polars.LazyFrame.last": [[616, "polars-lazyframe-last"]], "polars.std": [[565, "polars-std"]], "polars.LazyFrame.bottom_k": [[591, "polars-lazyframe-bottom-k"]], "polars.struct": [[566, "polars-struct"]], "polars.LazyFrame.first": [[606, "polars-lazyframe-first"]], "Conversion": [[587, "conversion"]], "Eager/Lazy functions": [[587, "eager-lazy-functions"]], "Parallelization": [[587, "parallelization"]], "StringCache": [[587, "stringcache"]], "Input/output": [[589, "input-output"]], "CSV": [[589, "csv"]], "Feather/ IPC": [[589, "feather-ipc"]], "Parquet": [[589, "parquet"]], "Database": [[589, "database"]], "JSON": [[589, "json"]], "AVRO": [[589, "avro"]], "Excel": [[589, "excel"]], "Delta Lake": [[589, "delta-lake"]], "Datasets": [[589, "datasets"]], "BatchedCsvReader": [[589, "batchedcsvreader"]], "polars.LazyFrame.cache": [[592, "polars-lazyframe-cache"]], "Operators": [[582, "operators"]], "Conjunction": [[582, "conjunction"]], "Comparison": [[582, "comparison"]], "Numeric": [[582, "numeric"], [252, "numeric"]], "polars.LazyFrame.head": [[611, "polars-lazyframe-head"]], "polars.LazyFrame.explain": [[600, "polars-lazyframe-explain"]], "polars.LazyFrame.limit": [[618, "polars-lazyframe-limit"]], "polars.DataFrame.item": [[166, "polars-dataframe-item"]], "polars.DataFrame.shape": [[197, "polars-dataframe-shape"]], "polars.DataFrame.hstack": [[160, "polars-dataframe-hstack"]], "polars.DataFrame.sum": [[204, "polars-dataframe-sum"]], "polars.DataFrame.replace": [[189, "polars-dataframe-replace"]], "polars.DataFrame.find_idx_by_name": [[148, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.min": [[178, "polars-dataframe-min"]], "polars.DataFrame.null_count": [[181, "polars-dataframe-null-count"]], "polars.DataFrame.n_unique": [[180, "polars-dataframe-n-unique"]], "polars.DataFrame.take_every": [[206, "polars-dataframe-take-every"]], "polars.DataFrame.frame_equal": [[150, "polars-dataframe-frame-equal"]], "polars.DataFrame.pivot": [[184, "polars-dataframe-pivot"]], "polars.DataFrame.schema": [[195, "polars-dataframe-schema"]], "polars.DataFrame.limit": [[172, "polars-dataframe-limit"]], "polars.DataFrame.shrink_to_fit": [[200, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.sort": [[202, "polars-dataframe-sort"]], "polars.DataFrame.std": [[203, "polars-dataframe-std"]], "polars.DataFrame.iter_rows": [[167, "polars-dataframe-iter-rows"]], "polars.DataFrame.groupby_rolling": [[156, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.explode": [[143, "polars-dataframe-explode"]], "polars.DataFrame.row": [[192, "polars-dataframe-row"]], "polars.DataFrame.groupby_dynamic": [[155, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.median": [[175, "polars-dataframe-median"]], "polars.DataFrame.estimated_size": [[142, "polars-dataframe-estimated-size"]], "polars.DataFrame.iter_slices": [[168, "polars-dataframe-iter-slices"]], "polars.DataFrame.tail": [[205, "polars-dataframe-tail"]], "polars.DataFrame.merge_sorted": [[177, "polars-dataframe-merge-sorted"]], "polars.DataFrame.partition_by": [[182, "polars-dataframe-partition-by"]], "polars.DataFrame.glimpse": [[153, "polars-dataframe-glimpse"]], "polars.DataFrame.dtypes": [[141, "polars-dataframe-dtypes"]], "polars.DataFrame.join": [[169, "polars-dataframe-join"]], "polars.DataFrame.lazy": [[171, "polars-dataframe-lazy"]], "polars.DataFrame.drop_nulls": [[140, "polars-dataframe-drop-nulls"]], "polars.DataFrame.rename": [[188, "polars-dataframe-rename"]], "polars.DataFrame.melt": [[176, "polars-dataframe-melt"]], "polars.DataFrame.fill_null": [[146, "polars-dataframe-fill-null"]], "polars.DataFrame.is_empty": [[164, "polars-dataframe-is-empty"]], "polars.DataFrame.slice": [[201, "polars-dataframe-slice"]], "polars.DataFrame.get_columns": [[152, "polars-dataframe-get-columns"]], "polars.DataFrame.is_duplicated": [[163, "polars-dataframe-is-duplicated"]], "polars.DataFrame.get_column": [[151, "polars-dataframe-get-column"]], "polars.DataFrame.fill_nan": [[145, "polars-dataframe-fill-nan"]], "polars.DataFrame.fold": [[149, "polars-dataframe-fold"]], "polars.DataFrame.groupby": [[154, "polars-dataframe-groupby"]], "polars.DataFrame.drop_in_place": [[139, "polars-dataframe-drop-in-place"]], "polars.DataFrame.max": [[173, "polars-dataframe-max"]], "polars.DataFrame.drop": [[138, "polars-dataframe-drop"]], "polars.DataFrame.join_asof": [[170, "polars-dataframe-join-asof"]], "polars.DataFrame.mean": [[174, "polars-dataframe-mean"]], "polars.DataFrame.n_chunks": [[179, "polars-dataframe-n-chunks"]], "polars.DataFrame.product": [[185, "polars-dataframe-product"]], "polars.DataFrame.replace_at_idx": [[190, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.interpolate": [[162, "polars-dataframe-interpolate"]], "polars.DataFrame.reverse": [[191, "polars-dataframe-reverse"]], "polars.DataFrame.rows": [[193, "polars-dataframe-rows"]], "polars.DataFrame.shift_and_fill": [[199, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.is_unique": [[165, "polars-dataframe-is-unique"]], "polars.DataFrame.head": [[158, "polars-dataframe-head"]], "polars.DataFrame.insert_at_idx": [[161, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.hash_rows": [[157, "polars-dataframe-hash-rows"]], "polars.DataFrame.extend": [[144, "polars-dataframe-extend"]], "polars.DataFrame.quantile": [[186, "polars-dataframe-quantile"]], "polars.DataFrame.select": [[196, "polars-dataframe-select"]], "polars.DataFrame.filter": [[147, "polars-dataframe-filter"]], "polars.DataFrame.shift": [[198, "polars-dataframe-shift"]], "polars.DataFrame.pipe": [[183, "polars-dataframe-pipe"]], "polars.DataFrame.rechunk": [[187, "polars-dataframe-rechunk"]], "polars.DataFrame.sample": [[194, "polars-dataframe-sample"]], "polars.DataFrame.height": [[159, "polars-dataframe-height"]], "polars.dataframe.groupby.GroupBy.count": [[232, "polars-dataframe-groupby-groupby-count"]], "polars.DataFrame.to_dummies": [[210, "polars-dataframe-to-dummies"]], "polars.DataFrame.upsample": [[222, "polars-dataframe-upsample"]], "polars.DataFrame.vstack": [[224, "polars-dataframe-vstack"]], "polars.Expr.arg_min": [[272, "polars-expr-arg-min"]], "Exceptions": [[253, "exceptions"]], "polars.DataFrame.unique": [[218, "polars-dataframe-unique"]], "polars.Expr.arctan": [[269, "polars-expr-arctan"]], "polars.dataframe.groupby.GroupBy.last": [[235, "polars-dataframe-groupby-groupby-last"]], "polars.Expr.agg_groups": [[257, "polars-expr-agg-groups"]], "polars.dataframe.groupby.GroupBy.median": [[238, "polars-dataframe-groupby-groupby-median"]], "polars.DataFrame.to_struct": [[215, "polars-dataframe-to-struct"]], "polars.Expr.arccosh": [[266, "polars-expr-arccosh"]], "polars.Expr.arcsin": [[267, "polars-expr-arcsin"]], "polars.Expr.arcsinh": [[268, "polars-expr-arcsinh"]], "polars.DataFrame.width": [[225, "polars-dataframe-width"]], "polars.Expr.abs": [[255, "polars-expr-abs"]], "Data types": [[252, "data-types"]], "Nested": [[252, "nested"]], "Other": [[252, "other"]], "polars.Expr.all": [[259, "polars-expr-all"]], "polars.dataframe.groupby.GroupBy.__iter__": [[228, "polars-dataframe-groupby-groupby-iter"]], "polars.DataFrame.to_dicts": [[209, "polars-dataframe-to-dicts"]], "polars.dataframe.groupby.GroupBy.n_unique": [[240, "polars-dataframe-groupby-groupby-n-unique"]], "polars.Expr.approx_unique": [[264, "polars-expr-approx-unique"]], "polars.Expr.alias": [[258, "polars-expr-alias"]], "polars.Expr.any": [[261, "polars-expr-any"]], "polars.dataframe.groupby.GroupBy.sum": [[242, "polars-dataframe-groupby-groupby-sum"]], "polars.DataFrame.unnest": [[219, "polars-dataframe-unnest"]], "polars.Expr.arctanh": [[270, "polars-expr-arctanh"]], "polars.DataFrame.transpose": [[217, "polars-dataframe-transpose"]], "polars.dataframe.groupby.GroupBy.quantile": [[241, "polars-dataframe-groupby-groupby-quantile"]], "polars.Expr.arg_unique": [[275, "polars-expr-arg-unique"]], "DataFrame": [[249, "dataframe"]], "polars.DataFrame.to_arrow": [[207, "polars-dataframe-to-arrow"]], "polars.dataframe.groupby.GroupBy.apply": [[231, "polars-dataframe-groupby-groupby-apply"]], "polars.DataFrame.with_columns": [[226, "polars-dataframe-with-columns"]], "polars.DataFrame.to_init_repr": [[211, "polars-dataframe-to-init-repr"]], "polars.dataframe.groupby.GroupBy.mean": [[237, "polars-dataframe-groupby-groupby-mean"]], "polars.dataframe.groupby.GroupBy.head": [[234, "polars-dataframe-groupby-groupby-head"]], "polars.DataFrame.to_pandas": [[213, "polars-dataframe-to-pandas"]], "polars.Expr.arg_sort": [[273, "polars-expr-arg-sort"]], "polars.dataframe.groupby.GroupBy.max": [[236, "polars-dataframe-groupby-groupby-max"]], "polars.Expr.arg_max": [[271, "polars-expr-arg-max"]], "polars.dataframe.groupby.GroupBy.tail": [[243, "polars-dataframe-groupby-groupby-tail"]], "polars.DataFrame.to_numpy": [[212, "polars-dataframe-to-numpy"]], "polars.Expr.and_": [[260, "polars-expr-and"]], "polars.Expr.append": [[262, "polars-expr-append"]], "polars.Expr.apply": [[263, "polars-expr-apply"]], "polars.dataframe.groupby.GroupBy.all": [[230, "polars-dataframe-groupby-groupby-all"]], "polars.Expr.arg_true": [[274, "polars-expr-arg-true"]], "polars.dataframe.groupby.GroupBy.min": [[239, "polars-dataframe-groupby-groupby-min"]], "polars.DataFrame.unstack": [[220, "polars-dataframe-unstack"]], "polars.DataFrame.with_row_count": [[227, "polars-dataframe-with-row-count"]], "polars.DataFrame.to_series": [[214, "polars-dataframe-to-series"]], "polars.dataframe.groupby.GroupBy.first": [[233, "polars-dataframe-groupby-groupby-first"]], "polars.DataFrame.top_k": [[216, "polars-dataframe-top-k"]], "polars.DataFrame.to_dict": [[208, "polars-dataframe-to-dict"]], "polars.Expr.arccos": [[265, "polars-expr-arccos"]], "polars.DataFrame.update": [[221, "polars-dataframe-update"]], "polars.dataframe.groupby.GroupBy.agg": [[229, "polars-dataframe-groupby-groupby-agg"]], "polars.DataFrame.var": [[223, "polars-dataframe-var"]], "polars.Expr.add": [[256, "polars-expr-add"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[5, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[6, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[7, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[8, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[9, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[10, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[11, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[12, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[13, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[14, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[15, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[16, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[17, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[22, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[23, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[24, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[25, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[26, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[27, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[28, "polars.DataFrame.write_database"]], "write_excel() (polars.dataframe method)": [[29, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[30, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[31, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[32, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[33, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[34, "polars.DataType"]], "__init__() (polars.datatype method)": [[34, "polars.DataType.__init__"]], "date (class in polars)": [[35, "polars.Date"]], "__init__() (polars.date method)": [[35, "polars.Date.__init__"]], "datetime (class in polars)": [[36, "polars.Datetime"]], "__init__() (polars.datetime method)": [[36, "polars.Datetime.__init__"]], "decimal (class in polars)": [[37, "polars.Decimal"]], "__init__() (polars.decimal method)": [[37, "polars.Decimal.__init__"]], "duration (class in polars)": [[38, "polars.Duration"]], "__init__() (polars.duration method)": [[38, "polars.Duration.__init__"]], "float32 (class in polars)": [[39, "polars.Float32"]], "__init__() (polars.float32 method)": [[39, "polars.Float32.__init__"]], "float64 (class in polars)": [[40, "polars.Float64"]], "__init__() (polars.float64 method)": [[40, "polars.Float64.__init__"]], "int16 (class in polars)": [[41, "polars.Int16"]], "__init__() (polars.int16 method)": [[41, "polars.Int16.__init__"]], "int32 (class in polars)": [[42, "polars.Int32"]], "__init__() (polars.int32 method)": [[42, "polars.Int32.__init__"]], "int64 (class in polars)": [[43, "polars.Int64"]], "__init__() (polars.int64 method)": [[43, "polars.Int64.__init__"]], "int8 (class in polars)": [[44, "polars.Int8"]], "__init__() (polars.int8 method)": [[44, "polars.Int8.__init__"]], "list (class in polars)": [[45, "polars.List"]], "__init__() (polars.list method)": [[45, "polars.List.__init__"]], "null (class in polars)": [[46, "polars.Null"]], "__init__() (polars.null method)": [[46, "polars.Null.__init__"]], "object (class in polars)": [[47, "polars.Object"]], "__init__() (polars.object method)": [[47, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[48, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[49, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[50, "polars.SQLContext.register"]], "stringcache (class in polars)": [[51, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[51, "polars.StringCache.__init__"]], "struct (class in polars)": [[52, "polars.Struct"]], "__init__() (polars.struct method)": [[52, "polars.Struct.__init__"]], "time (class in polars)": [[53, "polars.Time"]], "__init__() (polars.time method)": [[53, "polars.Time.__init__"]], "uint16 (class in polars)": [[54, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[54, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[55, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[55, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[56, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[56, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[57, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[57, "polars.UInt8.__init__"]], "unknown (class in polars)": [[58, "polars.Unknown"]], "__init__() (polars.unknown method)": [[58, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[59, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[59, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[60, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[61, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[62, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[63, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[64, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[65, "polars.arg_where"]], "build_info() (in module polars)": [[66, "polars.build_info"]], "collect_all() (in module polars)": [[67, "polars.collect_all"]], "concat() (in module polars)": [[68, "polars.concat"]], "cut() (in module polars)": [[69, "polars.cut"]], "date_range() (in module polars)": [[70, "polars.date_range"]], "enable_string_cache() (in module polars)": [[71, "polars.enable_string_cache"]], "arrowerror": [[72, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[73, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[74, "polars.exceptions.ComputeError"]], "duplicateerror": [[75, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[76, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[77, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[78, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[79, "polars.exceptions.PolarsPanicError"]], "rowserror": [[80, "polars.exceptions.RowsError"]], "schemaerror": [[81, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[82, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[83, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[84, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[85, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[86, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[87, "polars.from_dataframe"]], "from_dict() (in module polars)": [[88, "polars.from_dict"]], "from_dicts() (in module polars)": [[89, "polars.from_dicts"]], "from_numpy() (in module polars)": [[90, "polars.from_numpy"]], "from_pandas() (in module polars)": [[91, "polars.from_pandas"]], "from_records() (in module polars)": [[92, "polars.from_records"]], "from_repr() (in module polars)": [[93, "polars.from_repr"]], "get_dummies() (in module polars)": [[94, "polars.get_dummies"]], "get_index_type() (in module polars)": [[95, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[96, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[97, "polars.ones"]], "read_avro() (in module polars)": [[98, "polars.read_avro"]], "read_csv() (in module polars)": [[99, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[100, "polars.read_csv_batched"]], "read_database() (in module polars)": [[101, "polars.read_database"]], "read_delta() (in module polars)": [[102, "polars.read_delta"]], "read_excel() (in module polars)": [[103, "polars.read_excel"]], "read_ipc() (in module polars)": [[104, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[105, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[106, "polars.read_json"]], "read_ndjson() (in module polars)": [[107, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[108, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[109, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[110, "polars.scan_csv"]], "scan_delta() (in module polars)": [[111, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[112, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[113, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[114, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[115, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[116, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[117, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[118, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[119, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[119, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[120, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[121, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[122, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[123, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[124, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[125, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[126, "polars.threadpool_size"]], "zeros() (in module polars)": [[127, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[130, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[131, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[132, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[133, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[134, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[135, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[136, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[137, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[138, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[139, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[140, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[141, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[142, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[143, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[144, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[145, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[146, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[147, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[148, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[149, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[150, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[151, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[152, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[153, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[154, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[155, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[156, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[157, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[158, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[159, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[160, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[161, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[162, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[163, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[164, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[165, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[166, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[167, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[168, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[169, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[170, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[171, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[172, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[173, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[174, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[175, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[176, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[177, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[178, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[179, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[180, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[181, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[182, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[183, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[184, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[185, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[186, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[187, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[188, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[189, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[190, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[191, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[192, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[193, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[194, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[195, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[196, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[197, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[198, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[199, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[200, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[201, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[202, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[203, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[204, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[205, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[206, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[207, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[208, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[209, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[210, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[211, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[212, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[213, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[214, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[215, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[216, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[217, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[218, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[219, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[220, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[221, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[222, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[223, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[224, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[225, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[226, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[227, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[228, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[229, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[230, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[231, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[232, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[241, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[242, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[243, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[255, "polars.Expr.abs"]], "add() (polars.expr method)": [[256, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[257, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[258, "polars.Expr.alias"]], "all() (polars.expr method)": [[259, "polars.Expr.all"]], "and_() (polars.expr method)": [[260, "polars.Expr.and_"]], "any() (polars.expr method)": [[261, "polars.Expr.any"]], "append() (polars.expr method)": [[262, "polars.Expr.append"]], "apply() (polars.expr method)": [[263, "polars.Expr.apply"]], "approx_unique() (polars.expr method)": [[264, "polars.Expr.approx_unique"]], "arccos() (polars.expr method)": [[265, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[266, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[267, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[268, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[269, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[270, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[271, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[272, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[273, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[274, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[275, "polars.Expr.arg_unique"]], "arg_max() (polars.expr.arr method)": [[276, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[277, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[278, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[279, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[280, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[281, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[282, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[283, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[284, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[285, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[286, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[287, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[288, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[289, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[290, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[291, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[292, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[293, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[294, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[295, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[296, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[297, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[298, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[299, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[300, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[301, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[302, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[303, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[304, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[305, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[306, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[307, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[308, "polars.Expr.bottom_k"]], "cast() (polars.expr method)": [[309, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[310, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[311, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[312, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[313, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[314, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[315, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[316, "polars.Expr.cosh"]], "count() (polars.expr method)": [[317, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[318, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[319, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[320, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[321, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[322, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[323, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[324, "polars.Expr.diff"]], "dot() (polars.expr method)": [[325, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[326, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[327, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[328, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[329, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[330, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[331, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[332, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[333, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[334, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[335, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[336, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[337, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[338, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[339, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[340, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[341, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[342, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[343, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[344, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[345, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[346, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[347, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[348, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[349, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[350, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[351, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[352, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[353, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[354, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[355, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[356, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[357, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[358, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[359, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[360, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[361, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[362, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[363, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[364, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[365, "polars.Expr.eq"]], "ewm_mean() (polars.expr method)": [[366, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[367, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[368, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[369, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[370, "polars.Expr.exp"]], "explode() (polars.expr method)": [[371, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[372, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[373, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[374, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[375, "polars.Expr.filter"]], "first() (polars.expr method)": [[376, "polars.Expr.first"]], "flatten() (polars.expr method)": [[377, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[378, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[379, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[380, "polars.Expr.forward_fill"]], "ge() (polars.expr method)": [[381, "polars.Expr.ge"]], "gt() (polars.expr method)": [[382, "polars.Expr.gt"]], "hash() (polars.expr method)": [[383, "polars.Expr.hash"]], "head() (polars.expr method)": [[384, "polars.Expr.head"]], "implode() (polars.expr method)": [[385, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[386, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[387, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[388, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[389, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[390, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[391, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[392, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[393, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[394, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[395, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[396, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[397, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[398, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[399, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[400, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[401, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[402, "polars.Expr.last"]], "le() (polars.expr method)": [[403, "polars.Expr.le"]], "len() (polars.expr method)": [[404, "polars.Expr.len"]], "limit() (polars.expr method)": [[405, "polars.Expr.limit"]], "log() (polars.expr method)": [[406, "polars.Expr.log"]], "log10() (polars.expr method)": [[407, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[408, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[409, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[410, "polars.Expr.lt"]], "map() (polars.expr method)": [[411, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[412, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[413, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[414, "polars.Expr.max"]], "mean() (polars.expr method)": [[415, "polars.Expr.mean"]], "median() (polars.expr method)": [[416, "polars.Expr.median"]], "has_multiple_outputs() (polars.expr.meta method)": [[417, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[418, "polars.Expr.meta.is_regex_projection"]], "output_name() (polars.expr.meta method)": [[419, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[420, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[421, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[422, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[423, "polars.Expr.min"]], "mod() (polars.expr method)": [[424, "polars.Expr.mod"]], "mode() (polars.expr method)": [[425, "polars.Expr.mode"]], "mul() (polars.expr method)": [[426, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[427, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[428, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[429, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[430, "polars.Expr.ne"]], "null_count() (polars.expr method)": [[431, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[432, "polars.Expr.or_"]], "over() (polars.expr method)": [[433, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[434, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[435, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[436, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[437, "polars.Expr.prefix"]], "product() (polars.expr method)": [[438, "polars.Expr.product"]], "quantile() (polars.expr method)": [[439, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[440, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[441, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[442, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[443, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[444, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[445, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[446, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[447, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[448, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[449, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[450, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[451, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[452, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[453, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[454, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[455, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[456, "polars.Expr.round"]], "sample() (polars.expr method)": [[457, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[458, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[459, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[460, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[461, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[462, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[463, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[464, "polars.Expr.sign"]], "sin() (polars.expr method)": [[465, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[466, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[467, "polars.Expr.skew"]], "slice() (polars.expr method)": [[468, "polars.Expr.slice"]], "sort() (polars.expr method)": [[469, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[470, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[471, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[472, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[473, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[474, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[475, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[476, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[477, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[478, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[479, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[480, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[481, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[482, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[483, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[484, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[485, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[486, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[487, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[488, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[489, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[490, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[491, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[492, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[493, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[494, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[495, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[496, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[497, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[498, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[499, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[500, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[501, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[502, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[503, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[504, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[505, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[506, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[507, "polars.Expr.sum"]], "tail() (polars.expr method)": [[508, "polars.Expr.tail"]], "take() (polars.expr method)": [[509, "polars.Expr.take"]], "take_every() (polars.expr method)": [[510, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[511, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[512, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[513, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[514, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[515, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[516, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[517, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[518, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[519, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[520, "polars.Expr.var"]], "where() (polars.expr method)": [[521, "polars.Expr.where"]], "xor() (polars.expr method)": [[522, "polars.Expr.xor"]], "all() (in module polars)": [[523, "polars.all"]], "any() (in module polars)": [[524, "polars.any"]], "apply() (in module polars)": [[525, "polars.apply"]], "approx_unique() (in module polars)": [[526, "polars.approx_unique"]], "arange() (in module polars)": [[527, "polars.arange"]], "arg_sort_by() (in module polars)": [[528, "polars.arg_sort_by"]], "avg() (in module polars)": [[529, "polars.avg"]], "coalesce() (in module polars)": [[530, "polars.coalesce"]], "col() (in module polars)": [[531, "polars.col"]], "concat_list() (in module polars)": [[532, "polars.concat_list"]], "concat_str() (in module polars)": [[533, "polars.concat_str"]], "corr() (in module polars)": [[534, "polars.corr"]], "count() (in module polars)": [[535, "polars.count"]], "cov() (in module polars)": [[536, "polars.cov"]], "cumfold() (in module polars)": [[537, "polars.cumfold"]], "cumreduce() (in module polars)": [[538, "polars.cumreduce"]], "cumsum() (in module polars)": [[539, "polars.cumsum"]], "date() (in module polars)": [[540, "polars.date"]], "datetime() (in module polars)": [[541, "polars.datetime"]], "duration() (in module polars)": [[542, "polars.duration"]], "element() (in module polars)": [[543, "polars.element"]], "exclude() (in module polars)": [[544, "polars.exclude"]], "first() (in module polars)": [[545, "polars.first"]], "fold() (in module polars)": [[546, "polars.fold"]], "format() (in module polars)": [[547, "polars.format"]], "from_epoch() (in module polars)": [[548, "polars.from_epoch"]], "groups() (in module polars)": [[549, "polars.groups"]], "head() (in module polars)": [[550, "polars.head"]], "list() (in module polars)": [[551, "polars.list"]], "lit() (in module polars)": [[552, "polars.lit"]], "map() (in module polars)": [[553, "polars.map"]], "max() (in module polars)": [[554, "polars.max"]], "mean() (in module polars)": [[555, "polars.mean"]], "median() (in module polars)": [[556, "polars.median"]], "min() (in module polars)": [[557, "polars.min"]], "n_unique() (in module polars)": [[558, "polars.n_unique"]], "pearson_corr() (in module polars)": [[559, "polars.pearson_corr"]], "quantile() (in module polars)": [[560, "polars.quantile"]], "reduce() (in module polars)": [[561, "polars.reduce"]], "repeat() (in module polars)": [[562, "polars.repeat"]], "select() (in module polars)": [[563, "polars.select"]], "spearman_rank_corr() (in module polars)": [[564, "polars.spearman_rank_corr"]], "std() (in module polars)": [[565, "polars.std"]], "struct() (in module polars)": [[566, "polars.struct"]], "sum() (in module polars)": [[567, "polars.sum"]], "tail() (in module polars)": [[568, "polars.tail"]], "var() (in module polars)": [[569, "polars.var"]], "when() (in module polars)": [[570, "polars.when"]], "bottom_k() (polars.lazyframe method)": [[591, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[592, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[593, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[594, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[595, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[596, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[597, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[598, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[599, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[600, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[601, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[602, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[603, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[604, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[605, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[606, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[607, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[608, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[609, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[610, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[611, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[612, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[613, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[614, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[615, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[616, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[617, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[618, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[619, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[620, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[621, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[622, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[623, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[624, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[625, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[626, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[627, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[628, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[629, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[630, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[631, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[632, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[633, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[634, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[635, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[636, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[637, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[638, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[639, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[640, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[641, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[642, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[643, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[644, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[645, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[646, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[647, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[648, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[649, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[650, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[651, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[652, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[653, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[654, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[655, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[656, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[657, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[658, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[659, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[660, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[661, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[662, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[663, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[664, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[665, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[666, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[667, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[668, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[669, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[677, "polars.Series.abs"]], "alias() (polars.series method)": [[678, "polars.Series.alias"]], "all() (polars.series method)": [[679, "polars.Series.all"]], "any() (polars.series method)": [[680, "polars.Series.any"]], "append() (polars.series method)": [[681, "polars.Series.append"]], "apply() (polars.series method)": [[682, "polars.Series.apply"]], "arccos() (polars.series method)": [[683, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[684, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[685, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[686, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[687, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[688, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[689, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[690, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[691, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[692, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[693, "polars.Series.arg_unique"]], "arr (polars.series attribute)": [[694, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[695, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[696, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[697, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[698, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[699, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[700, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[701, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[702, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[703, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[704, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[705, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[706, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[707, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[708, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[709, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[710, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[711, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[712, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[713, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[714, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[715, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[716, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[717, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[718, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[719, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[720, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[721, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[722, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[723, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[724, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[725, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[726, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[727, "polars.Series.cast"]], "cat (polars.series attribute)": [[728, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[729, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[730, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[731, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[732, "polars.Series.clear"]], "clip() (polars.series method)": [[733, "polars.Series.clip"]], "clip_max() (polars.series method)": [[734, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[735, "polars.Series.clip_min"]], "clone() (polars.series method)": [[736, "polars.Series.clone"]], "cos() (polars.series method)": [[737, "polars.Series.cos"]], "cosh() (polars.series method)": [[738, "polars.Series.cosh"]], "cummax() (polars.series method)": [[739, "polars.Series.cummax"]], "cummin() (polars.series method)": [[740, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[741, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[742, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[743, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[744, "polars.Series.cut"]], "describe() (polars.series method)": [[745, "polars.Series.describe"]], "diff() (polars.series method)": [[746, "polars.Series.diff"]], "dot() (polars.series method)": [[747, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[748, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[749, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[750, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[751, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[752, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[753, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[754, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[755, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[756, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[757, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[758, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[759, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[760, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[761, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[762, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[763, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[764, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[765, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[766, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[767, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[768, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[769, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[770, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[771, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[772, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[773, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[774, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[775, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[776, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[777, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[778, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[779, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[780, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[781, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[782, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[783, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[784, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[785, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[786, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[787, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[788, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[789, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[790, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[791, "polars.Series.dtype"]], "entropy() (polars.series method)": [[792, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[793, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[794, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[795, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[796, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[797, "polars.Series.exp"]], "explode() (polars.series method)": [[798, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[799, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[800, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[801, "polars.Series.fill_null"]], "filter() (polars.series method)": [[802, "polars.Series.filter"]], "flags (polars.series attribute)": [[803, "polars.Series.flags"]], "floor() (polars.series method)": [[804, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[805, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[806, "polars.Series.has_validity"]], "hash() (polars.series method)": [[807, "polars.Series.hash"]], "head() (polars.series method)": [[808, "polars.Series.head"]], "hist() (polars.series method)": [[809, "polars.Series.hist"]], "implode() (polars.series method)": [[810, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[811, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[812, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[813, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[814, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[815, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[816, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[817, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[818, "polars.Series.is_first"]], "is_float() (polars.series method)": [[819, "polars.Series.is_float"]], "is_in() (polars.series method)": [[820, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[821, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[822, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[823, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[824, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[825, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[826, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[827, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[828, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[829, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[830, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[831, "polars.Series.is_utf8"]], "item() (polars.series method)": [[832, "polars.Series.item"]], "kurtosis() (polars.series method)": [[833, "polars.Series.kurtosis"]], "len() (polars.series method)": [[834, "polars.Series.len"]], "limit() (polars.series method)": [[835, "polars.Series.limit"]], "log() (polars.series method)": [[836, "polars.Series.log"]], "log10() (polars.series method)": [[837, "polars.Series.log10"]], "log1p() (polars.series method)": [[838, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[839, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[840, "polars.Series.map_dict"]], "max() (polars.series method)": [[841, "polars.Series.max"]], "mean() (polars.series method)": [[842, "polars.Series.mean"]], "median() (polars.series method)": [[843, "polars.Series.median"]], "min() (polars.series method)": [[844, "polars.Series.min"]], "mode() (polars.series method)": [[845, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[846, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[847, "polars.Series.n_unique"]], "name (polars.series attribute)": [[848, "polars.Series.name"]], "nan_max() (polars.series method)": [[849, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[850, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[851, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[852, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[853, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[854, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[855, "polars.Series.peak_min"]], "product() (polars.series method)": [[856, "polars.Series.product"]], "qcut() (polars.series method)": [[857, "polars.Series.qcut"]], "quantile() (polars.series method)": [[858, "polars.Series.quantile"]], "rank() (polars.series method)": [[859, "polars.Series.rank"]], "rechunk() (polars.series method)": [[860, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[861, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[862, "polars.Series.rename"]], "reshape() (polars.series method)": [[863, "polars.Series.reshape"]], "reverse() (polars.series method)": [[864, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[865, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[866, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[867, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[868, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[869, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[870, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[871, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[872, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[873, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[874, "polars.Series.rolling_var"]], "round() (polars.series method)": [[875, "polars.Series.round"]], "sample() (polars.series method)": [[876, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[877, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[878, "polars.Series.series_equal"]], "set() (polars.series method)": [[879, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[880, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[881, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[882, "polars.Series.shape"]], "shift() (polars.series method)": [[883, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[884, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[885, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[886, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[887, "polars.Series.shuffle"]], "sign() (polars.series method)": [[888, "polars.Series.sign"]], "sin() (polars.series method)": [[889, "polars.Series.sin"]], "sinh() (polars.series method)": [[890, "polars.Series.sinh"]], "skew() (polars.series method)": [[891, "polars.Series.skew"]], "slice() (polars.series method)": [[892, "polars.Series.slice"]], "sort() (polars.series method)": [[893, "polars.Series.sort"]], "sqrt() (polars.series method)": [[894, "polars.Series.sqrt"]], "std() (polars.series method)": [[895, "polars.Series.std"]], "str (polars.series attribute)": [[896, "polars.Series.str"]], "concat() (polars.series.str method)": [[897, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[898, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[899, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[900, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[901, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[902, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[903, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[904, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[905, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[906, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[907, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[908, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[909, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[910, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[911, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[912, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[913, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[914, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[915, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[916, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[917, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[918, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[919, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[920, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[921, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[922, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[923, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[924, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[925, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[926, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[927, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[928, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[929, "polars.Series.struct.rename_fields"]], "unnest() (polars.series.struct method)": [[930, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[931, "polars.Series.sum"]], "tail() (polars.series method)": [[932, "polars.Series.tail"]], "take() (polars.series method)": [[933, "polars.Series.take"]], "take_every() (polars.series method)": [[934, "polars.Series.take_every"]], "tan() (polars.series method)": [[935, "polars.Series.tan"]], "tanh() (polars.series method)": [[936, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[937, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[938, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[939, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[940, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[941, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[942, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[943, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[944, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[945, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[946, "polars.Series.top_k"]], "unique() (polars.series method)": [[947, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[948, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[949, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[950, "polars.Series.value_counts"]], "var() (polars.series method)": [[951, "polars.Series.var"]], "view() (polars.series method)": [[952, "polars.Series.view"]], "zip_with() (polars.series method)": [[953, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[968, "polars.SQLContext"]]}})