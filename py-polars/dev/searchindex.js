Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_dummies", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.SQLContext.register_many", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_dummies", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.any", "polars.apply", "polars.approx_unique", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 89, 99, 117, 129, 132, 133, 234, 252, 266, 591, 672, 697, 983], "refer": [0, 29, 101, 102, 105, 138, 252, 362, 365, 420, 449, 489, 508, 509, 510, 512, 591, 800, 803, 877, 941, 942, 943, 945, 983], "input": [0, 62, 91, 101, 102, 105, 133, 134, 145, 156, 184, 198, 205, 219, 229, 232, 252, 259, 266, 376, 395, 414, 429, 442, 479, 534, 535, 536, 537, 540, 542, 543, 544, 545, 551, 556, 557, 565, 566, 569, 580, 581, 591, 602, 605, 615, 622, 647, 655, 660, 666, 670, 688, 697, 831, 855, 856, 858, 983], "output": [0, 25, 27, 29, 30, 31, 32, 72, 105, 133, 157, 158, 169, 179, 186, 195, 198, 225, 229, 252, 261, 266, 418, 419, 428, 531, 537, 546, 565, 578, 591, 602, 623, 624, 633, 637, 638, 647, 666, 669, 672, 688, 697, 972, 983], "seri": [0, 1, 22, 63, 64, 65, 66, 67, 70, 71, 72, 88, 90, 93, 95, 99, 120, 124, 129, 133, 141, 149, 151, 153, 154, 159, 162, 163, 165, 167, 175, 176, 180, 191, 192, 207, 211, 214, 217, 218, 233, 252, 265, 266, 268, 269, 270, 271, 272, 273, 276, 277, 279, 280, 281, 286, 289, 290, 297, 298, 301, 302, 303, 306, 314, 315, 319, 320, 332, 334, 338, 341, 345, 347, 349, 354, 358, 359, 361, 366, 369, 378, 379, 385, 393, 395, 397, 398, 399, 400, 401, 403, 404, 405, 416, 418, 445, 449, 450, 451, 452, 453, 455, 467, 468, 471, 474, 475, 482, 497, 502, 508, 509, 510, 512, 515, 521, 522, 523, 524, 530, 535, 536, 537, 538, 539, 541, 547, 549, 550, 551, 557, 558, 560, 562, 564, 565, 566, 567, 568, 569, 570, 573, 574, 577, 579, 580, 581, 582, 583, 591, 602, 619, 671, 688, 977, 979, 982, 984, 987, 988, 989, 991], "datafram": [0, 1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 49, 53, 62, 63, 64, 65, 66, 67, 69, 70, 71, 73, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 114, 115, 116, 119, 121, 122, 250, 251, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 299, 300, 303, 304, 305, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 361, 362, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 562, 565, 566, 567, 568, 569, 570, 571, 573, 577, 578, 579, 580, 581, 582, 583, 584, 591, 602, 609, 611, 615, 616, 620, 623, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 641, 642, 645, 652, 653, 654, 655, 656, 657, 661, 662, 663, 664, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 696, 697, 716, 744, 759, 760, 796, 827, 875, 925, 937, 938, 952, 961, 962, 972, 983, 991], "lazyfram": [0, 1, 48, 50, 51, 62, 63, 64, 65, 66, 69, 70, 112, 113, 114, 115, 116, 117, 119, 124, 173, 185, 252, 303, 382, 591, 602, 687, 990, 991], "express": [0, 67, 69, 72, 121, 124, 126, 133, 134, 145, 147, 149, 156, 182, 186, 194, 198, 205, 219, 229, 232, 234, 252, 259, 261, 262, 263, 265, 266, 277, 283, 285, 303, 312, 316, 317, 318, 321, 327, 329, 333, 351, 352, 355, 362, 372, 376, 379, 382, 386, 388, 389, 393, 395, 399, 402, 407, 410, 411, 416, 417, 418, 419, 420, 424, 425, 426, 427, 428, 429, 433, 435, 439, 441, 442, 444, 445, 446, 447, 452, 466, 467, 468, 470, 472, 477, 479, 483, 484, 489, 490, 491, 492, 498, 499, 517, 518, 521, 527, 528, 530, 533, 534, 535, 536, 539, 540, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 564, 565, 566, 569, 571, 573, 574, 575, 576, 577, 578, 580, 581, 584, 590, 602, 605, 609, 614, 615, 616, 619, 622, 641, 647, 650, 651, 652, 653, 655, 660, 666, 667, 670, 672, 688, 697, 714, 716, 748, 749, 750, 758, 767, 789, 790, 793, 817, 831, 895, 902, 916, 917, 922, 923, 924, 925, 931, 932, 983], "extend": [0, 91, 252, 379, 591, 602, 696, 817, 983], "function": [0, 29, 63, 64, 65, 66, 71, 89, 95, 101, 102, 105, 112, 122, 133, 138, 144, 151, 178, 185, 186, 216, 220, 223, 224, 234, 252, 262, 266, 303, 327, 359, 373, 374, 375, 418, 419, 442, 444, 455, 456, 457, 458, 459, 460, 462, 463, 464, 476, 525, 535, 536, 537, 549, 550, 551, 557, 558, 560, 565, 566, 569, 573, 581, 591, 602, 633, 637, 640, 663, 672, 688, 697, 734, 758, 797, 811, 812, 813, 814, 827, 875, 883, 897, 898, 904, 909, 966, 983, 991], "data": [0, 1, 5, 15, 18, 28, 29, 30, 34, 53, 62, 63, 65, 70, 73, 78, 79, 83, 85, 88, 89, 90, 91, 92, 93, 94, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 119, 120, 122, 123, 124, 126, 132, 133, 135, 136, 146, 155, 156, 157, 169, 170, 171, 173, 184, 185, 189, 194, 195, 203, 210, 215, 216, 229, 231, 250, 252, 263, 266, 304, 313, 332, 360, 369, 372, 388, 389, 394, 401, 403, 410, 417, 439, 441, 449, 465, 466, 476, 489, 490, 508, 509, 510, 512, 525, 527, 528, 534, 543, 564, 578, 591, 602, 607, 608, 616, 622, 623, 640, 652, 653, 666, 688, 696, 697, 735, 742, 747, 751, 764, 766, 807, 827, 877, 893, 894, 904, 909, 941, 942, 943, 945, 964, 965, 966, 967, 969, 974, 982, 983], "type": [0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 69, 72, 78, 88, 90, 91, 92, 93, 94, 99, 101, 102, 104, 105, 112, 113, 118, 119, 120, 123, 124, 129, 133, 151, 155, 157, 158, 159, 170, 210, 216, 218, 221, 252, 266, 290, 303, 313, 314, 316, 317, 318, 334, 338, 341, 345, 347, 349, 354, 358, 361, 376, 390, 397, 399, 400, 420, 452, 503, 504, 505, 508, 525, 537, 543, 552, 553, 554, 556, 557, 564, 591, 602, 609, 614, 616, 623, 624, 641, 651, 652, 653, 661, 688, 721, 734, 742, 744, 748, 749, 750, 768, 772, 775, 782, 784, 787, 792, 796, 799, 825, 904, 936, 937, 938, 941, 964, 965, 967, 975, 983], "config": [0, 62, 198, 229, 252, 554, 602, 647, 666, 688], "except": [0, 160, 172, 174, 208, 252, 556, 602, 629, 688, 826, 853, 954, 965, 974, 983], "test": [0, 105, 602, 625, 632, 688], "util": [0, 95, 560, 602, 616, 688], "sql": [0, 28, 48, 49, 103, 171, 252, 602], "These": [1, 29, 130, 252, 366, 590, 804], "allow": [1, 29, 53, 78, 89, 112, 114, 115, 116, 117, 124, 126, 132, 169, 172, 173, 194, 195, 196, 216, 221, 231, 252, 355, 362, 365, 451, 466, 508, 509, 510, 591, 628, 629, 633, 637, 652, 653, 661, 667, 688, 793, 800, 803, 879, 894, 896, 941, 942, 943, 966, 983, 991], "you": [1, 12, 29, 33, 62, 88, 90, 91, 92, 94, 99, 101, 102, 105, 106, 110, 112, 119, 129, 130, 133, 142, 146, 157, 158, 169, 172, 182, 194, 195, 212, 215, 220, 234, 252, 266, 285, 303, 316, 317, 318, 351, 352, 358, 362, 365, 382, 395, 418, 420, 451, 456, 457, 458, 459, 460, 462, 463, 464, 493, 496, 508, 510, 539, 549, 558, 591, 609, 612, 623, 624, 625, 629, 632, 651, 653, 672, 688, 696, 697, 716, 748, 749, 750, 789, 790, 796, 800, 803, 831, 879, 926, 929, 941, 943, 965, 974, 983, 991], "regist": [1, 51, 63, 64, 65, 66, 125, 127], "custom": [1, 29, 63, 64, 65, 66, 125, 126, 127, 133, 234, 252, 266, 303, 362, 365, 418, 455, 537, 565, 591, 633, 672, 688, 697, 734, 800, 803, 883, 983, 991], "dedic": [1, 89, 169, 195, 252], "namespac": [1, 251, 590, 602, 687], "underli": [1, 74, 81, 88, 90, 91, 92, 94, 110, 121, 124, 126, 146, 169, 170, 195, 210, 252, 307, 332, 333, 337, 340, 342, 343, 344, 346, 348, 350, 353, 356, 357, 358, 360, 367, 368, 369, 370, 451, 465, 483, 485, 591, 688, 696, 737, 766, 767, 771, 774, 776, 777, 781, 783, 786, 788, 791, 794, 795, 796, 798, 805, 806, 807, 808, 879, 893, 904, 916, 918, 960, 965, 983], "polar": [1, 252, 590, 591, 596, 602, 688, 983, 990], "class": [1, 2, 3, 4, 14, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 93, 121, 122, 216, 252, 591, 596, 602, 688, 964, 965, 983, 990], "without": [1, 5, 71, 95, 104, 107, 111, 113, 117, 223, 224, 252, 266, 327, 359, 456, 457, 458, 459, 460, 462, 463, 464, 577, 591, 663, 688, 758, 764, 797, 827, 875, 983], "requir": [1, 29, 33, 93, 119, 120, 138, 194, 216, 252, 304, 373, 374, 375, 471, 508, 509, 510, 528, 591, 653, 688, 735, 812, 813, 814, 903, 941, 942, 943, 965, 966, 969, 983], "subclass": [1, 252], "mixin": 1, "expr": [1, 62, 63, 64, 65, 66, 67, 70, 72, 145, 147, 149, 171, 172, 182, 186, 194, 198, 229, 252, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 591, 592, 593, 596, 597, 598, 599, 615, 617, 619, 628, 629, 642, 647, 650, 666, 688, 714, 716, 758, 767, 818, 902, 916, 920, 939, 955, 983], "ar": [1, 5, 10, 14, 17, 25, 29, 53, 72, 73, 80, 87, 88, 89, 90, 91, 92, 93, 94, 95, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 117, 119, 120, 122, 124, 130, 132, 133, 134, 138, 142, 144, 147, 151, 156, 157, 158, 169, 172, 173, 178, 179, 184, 194, 195, 198, 199, 205, 211, 216, 219, 224, 225, 229, 232, 252, 262, 303, 323, 325, 326, 330, 331, 359, 366, 371, 373, 374, 375, 395, 397, 399, 400, 401, 403, 404, 405, 408, 420, 442, 449, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 473, 476, 478, 479, 493, 496, 497, 519, 535, 536, 539, 540, 542, 544, 545, 546, 551, 566, 569, 578, 580, 581, 584, 585, 587, 590, 591, 592, 593, 596, 597, 598, 599, 602, 605, 612, 617, 622, 623, 624, 625, 629, 632, 633, 637, 638, 641, 644, 647, 648, 652, 653, 655, 660, 663, 666, 667, 670, 688, 694, 696, 734, 756, 757, 797, 804, 810, 811, 812, 813, 814, 824, 831, 835, 838, 839, 841, 842, 843, 844, 851, 877, 881, 883, 889, 906, 909, 926, 929, 930, 953, 965, 966, 974, 977, 979, 983, 984, 987, 988, 989, 991], "all": [1, 7, 14, 17, 22, 25, 29, 34, 69, 70, 72, 88, 91, 93, 94, 96, 101, 102, 104, 105, 106, 110, 112, 114, 115, 121, 122, 126, 139, 142, 148, 160, 165, 167, 169, 170, 173, 174, 178, 181, 182, 189, 194, 195, 204, 208, 213, 221, 223, 225, 252, 263, 264, 265, 285, 290, 300, 303, 305, 321, 327, 331, 376, 387, 390, 392, 394, 397, 400, 404, 405, 407, 411, 418, 419, 434, 440, 446, 449, 454, 471, 477, 479, 484, 490, 492, 495, 498, 499, 501, 507, 518, 531, 543, 551, 556, 558, 573, 580, 581, 584, 591, 596, 602, 609, 612, 614, 616, 618, 633, 637, 641, 651, 654, 661, 667, 688, 716, 721, 731, 734, 758, 760, 764, 826, 833, 848, 853, 877, 910, 917, 923, 925, 928, 931, 932, 934, 940, 954, 983, 991], "support": [1, 29, 33, 70, 88, 89, 90, 91, 92, 93, 94, 95, 103, 104, 105, 113, 121, 126, 130, 132, 169, 170, 195, 204, 205, 212, 216, 252, 298, 442, 477, 479, 502, 543, 591, 596, 654, 655, 688, 729, 910, 935, 966, 983], "target": [1, 29, 68, 252, 366, 489, 508, 509, 510, 922, 941, 942, 943], "thi": [1, 5, 7, 12, 25, 27, 29, 31, 33, 37, 50, 51, 52, 53, 62, 69, 70, 71, 73, 88, 90, 91, 92, 93, 94, 95, 98, 99, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 126, 128, 129, 130, 132, 133, 138, 142, 143, 144, 146, 151, 156, 157, 158, 159, 163, 165, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 188, 189, 194, 195, 196, 198, 202, 204, 206, 207, 210, 212, 215, 216, 220, 221, 223, 224, 225, 226, 227, 229, 230, 234, 235, 251, 252, 262, 265, 266, 267, 276, 285, 286, 290, 299, 303, 304, 311, 312, 314, 321, 327, 332, 343, 351, 352, 355, 358, 359, 362, 365, 369, 378, 393, 394, 395, 399, 411, 415, 416, 418, 424, 425, 426, 427, 428, 429, 437, 438, 442, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 462, 463, 464, 466, 468, 470, 471, 472, 477, 478, 479, 489, 494, 495, 500, 501, 507, 508, 510, 514, 526, 528, 529, 530, 531, 535, 536, 538, 539, 544, 547, 549, 551, 557, 558, 560, 566, 569, 577, 581, 591, 602, 603, 606, 609, 612, 614, 616, 622, 623, 624, 626, 629, 633, 637, 638, 641, 644, 647, 650, 651, 652, 653, 654, 661, 663, 666, 667, 668, 669, 672, 673, 687, 688, 696, 697, 706, 716, 717, 721, 730, 735, 741, 744, 758, 764, 766, 767, 777, 789, 790, 793, 796, 797, 800, 803, 807, 811, 816, 823, 824, 827, 832, 837, 838, 840, 845, 847, 849, 850, 852, 857, 859, 860, 861, 862, 864, 865, 867, 868, 870, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 887, 890, 891, 892, 894, 897, 898, 899, 902, 903, 904, 905, 910, 911, 913, 922, 927, 928, 933, 934, 940, 941, 943, 947, 948, 952, 953, 960, 962, 964, 965, 966, 968, 969, 971, 973, 974, 983, 991], "featur": [1, 33, 37, 53, 68, 252], "i": [1, 5, 12, 14, 27, 29, 30, 31, 32, 37, 53, 62, 67, 68, 69, 70, 71, 72, 75, 77, 78, 80, 84, 86, 88, 89, 90, 91, 92, 93, 94, 98, 101, 102, 103, 104, 106, 110, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 126, 128, 132, 133, 142, 144, 152, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 170, 172, 173, 174, 176, 178, 179, 182, 184, 185, 186, 194, 195, 196, 204, 205, 206, 207, 208, 210, 216, 220, 221, 223, 224, 225, 226, 234, 235, 251, 252, 259, 262, 264, 265, 266, 267, 277, 285, 288, 298, 302, 303, 312, 321, 327, 333, 342, 355, 359, 362, 366, 373, 374, 375, 378, 390, 393, 395, 408, 415, 418, 420, 424, 427, 429, 442, 449, 451, 453, 456, 457, 458, 459, 460, 462, 463, 464, 466, 467, 468, 472, 473, 476, 477, 478, 479, 481, 483, 484, 489, 490, 492, 494, 495, 497, 498, 500, 501, 502, 505, 507, 508, 509, 510, 512, 514, 531, 532, 535, 536, 538, 539, 543, 544, 546, 547, 549, 550, 551, 558, 564, 566, 569, 571, 575, 576, 577, 578, 579, 581, 583, 584, 591, 609, 612, 614, 616, 622, 623, 624, 627, 629, 631, 633, 637, 638, 641, 651, 652, 653, 654, 655, 656, 661, 663, 664, 669, 672, 673, 688, 695, 696, 697, 716, 719, 729, 733, 734, 758, 767, 776, 793, 797, 800, 804, 811, 812, 813, 814, 816, 824, 825, 826, 827, 830, 832, 834, 840, 845, 846, 847, 849, 850, 851, 853, 875, 877, 879, 881, 894, 895, 896, 897, 898, 899, 905, 906, 909, 910, 913, 916, 917, 922, 923, 925, 927, 928, 930, 931, 933, 934, 935, 938, 940, 941, 942, 943, 945, 947, 954, 960, 965, 966, 972, 973, 974, 983, 991], "primarili": 1, "intend": 1, "us": [1, 9, 11, 12, 17, 22, 23, 27, 28, 29, 33, 53, 62, 71, 72, 89, 91, 92, 94, 96, 97, 99, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 125, 126, 128, 129, 133, 140, 142, 147, 148, 151, 156, 157, 158, 165, 167, 169, 170, 172, 176, 178, 181, 182, 185, 186, 194, 196, 198, 205, 206, 207, 213, 214, 216, 220, 221, 223, 224, 225, 226, 229, 232, 234, 252, 260, 266, 267, 277, 285, 303, 307, 308, 314, 327, 330, 331, 358, 362, 365, 369, 371, 373, 374, 375, 381, 382, 394, 395, 408, 418, 420, 423, 442, 449, 451, 453, 456, 457, 458, 459, 460, 462, 463, 464, 466, 468, 471, 472, 476, 478, 479, 481, 483, 485, 486, 487, 489, 490, 493, 494, 498, 500, 502, 504, 506, 508, 509, 510, 512, 532, 535, 536, 537, 538, 539, 543, 545, 546, 549, 551, 558, 560, 564, 566, 569, 571, 574, 575, 576, 577, 578, 579, 580, 581, 583, 590, 591, 602, 609, 611, 612, 617, 618, 622, 623, 624, 625, 629, 631, 632, 637, 647, 653, 655, 656, 661, 663, 664, 666, 670, 672, 688, 697, 716, 734, 737, 738, 744, 758, 796, 800, 803, 807, 810, 812, 813, 814, 818, 819, 824, 827, 831, 851, 858, 877, 879, 881, 894, 897, 898, 899, 903, 905, 909, 913, 916, 918, 919, 922, 923, 926, 927, 931, 933, 935, 937, 941, 942, 943, 945, 955, 961, 963, 964, 965, 966, 973, 974, 983, 991], "librari": [1, 74, 81, 418, 591, 991], "author": 1, "domain": [1, 490, 923], "specif": [1, 25, 29, 88, 90, 92, 94, 101, 103, 104, 113, 123, 124, 169, 252, 362, 365, 455, 508, 509, 510, 512, 591, 688, 800, 803, 883, 941, 942, 943, 945, 983, 991], "capabl": [1, 29, 252], "which": [1, 17, 26, 27, 29, 30, 31, 32, 33, 62, 63, 64, 65, 66, 91, 101, 102, 103, 104, 105, 112, 113, 119, 125, 127, 134, 142, 146, 157, 158, 215, 219, 221, 252, 262, 303, 362, 379, 395, 397, 400, 401, 403, 404, 405, 429, 456, 457, 458, 459, 460, 462, 463, 464, 497, 584, 591, 605, 612, 614, 623, 624, 652, 653, 660, 661, 669, 688, 696, 734, 800, 817, 831, 835, 839, 841, 842, 843, 844, 897, 930, 983, 991], "mai": [1, 37, 70, 71, 88, 90, 91, 92, 94, 101, 104, 106, 113, 114, 117, 133, 144, 146, 172, 201, 202, 216, 223, 224, 252, 266, 297, 302, 303, 327, 332, 343, 359, 428, 456, 457, 458, 459, 460, 462, 463, 464, 469, 470, 508, 510, 549, 550, 558, 573, 591, 629, 633, 649, 650, 653, 663, 668, 672, 688, 696, 697, 728, 733, 758, 766, 777, 797, 811, 827, 875, 901, 902, 941, 943, 983, 991], "exist": [1, 28, 29, 104, 113, 124, 229, 252, 333, 366, 666, 688, 767], "belong": [1, 157, 252, 623, 688], "core": [1, 216, 252, 991], "cannot": [1, 89, 101, 102, 105, 106, 119, 128, 133, 196, 234, 252, 307, 420, 466, 485, 504, 516, 591, 651, 672, 688, 697, 737, 894, 918, 937, 983], "overrid": [1, 29, 88, 90, 91, 92, 93, 94, 101, 121, 122, 126, 128, 252, 420, 591, 688, 858, 983], "str": [1, 6, 8, 13, 14, 17, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 48, 49, 50, 51, 52, 53, 62, 63, 64, 65, 66, 68, 71, 72, 73, 88, 90, 91, 92, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 121, 122, 124, 125, 126, 127, 134, 137, 139, 140, 141, 142, 143, 144, 145, 149, 150, 151, 153, 155, 156, 157, 158, 160, 162, 165, 167, 168, 169, 171, 172, 175, 176, 177, 178, 179, 180, 182, 184, 186, 188, 190, 191, 192, 193, 194, 195, 196, 199, 201, 202, 204, 205, 206, 207, 208, 211, 212, 213, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 259, 260, 261, 266, 281, 282, 283, 288, 289, 290, 298, 301, 303, 329, 334, 355, 358, 359, 362, 365, 366, 376, 380, 382, 384, 393, 395, 402, 419, 420, 428, 430, 442, 444, 446, 452, 454, 456, 457, 458, 459, 460, 462, 463, 464, 470, 471, 478, 479, 515, 516, 518, 521, 533, 534, 535, 537, 538, 541, 543, 545, 546, 547, 548, 549, 550, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 565, 567, 568, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 582, 583, 591, 597, 605, 609, 610, 611, 612, 614, 615, 616, 619, 621, 622, 623, 624, 626, 628, 629, 637, 638, 641, 643, 644, 645, 648, 650, 651, 652, 653, 654, 655, 660, 661, 662, 663, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 693, 713, 714, 721, 734, 742, 759, 760, 768, 793, 796, 797, 800, 803, 804, 819, 858, 867, 868, 875, 880, 897, 898, 948, 950, 961, 962, 963, 983, 987, 991], "dt": [1, 62, 72, 158, 252, 554, 599, 624, 688, 989], "attempt": [1, 215, 252], "do": [1, 29, 62, 69, 112, 146, 172, 210, 220, 223, 252, 285, 327, 495, 501, 507, 591, 609, 614, 629, 633, 641, 651, 652, 653, 688, 696, 716, 758, 928, 934, 940, 965, 974, 983], "so": [1, 53, 103, 112, 128, 155, 157, 158, 186, 252, 277, 288, 303, 312, 395, 495, 501, 507, 591, 623, 624, 688, 719, 928, 934, 940], "rais": [1, 13, 17, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 119, 120, 194, 252, 302, 307, 358, 428, 483, 485, 497, 508, 509, 510, 512, 564, 733, 737, 796, 916, 918, 930, 941, 942, 943, 945, 965, 974, 983], "an": [1, 5, 25, 28, 29, 37, 63, 65, 66, 67, 69, 72, 74, 78, 79, 81, 88, 101, 102, 103, 104, 105, 107, 110, 112, 114, 122, 124, 126, 133, 135, 136, 144, 147, 149, 151, 157, 158, 169, 170, 172, 182, 186, 192, 194, 210, 215, 223, 229, 234, 252, 261, 262, 266, 283, 285, 288, 302, 303, 307, 313, 316, 317, 318, 322, 323, 324, 325, 326, 327, 333, 358, 362, 369, 379, 382, 407, 418, 419, 429, 447, 455, 456, 457, 458, 459, 460, 462, 463, 464, 483, 485, 490, 508, 509, 510, 512, 521, 527, 535, 536, 539, 543, 551, 555, 560, 564, 566, 569, 573, 574, 577, 580, 581, 584, 591, 602, 607, 608, 609, 614, 616, 619, 623, 624, 629, 633, 641, 651, 666, 667, 672, 688, 697, 714, 716, 719, 733, 737, 742, 747, 748, 749, 750, 751, 754, 755, 756, 757, 758, 767, 796, 800, 807, 811, 817, 840, 883, 884, 885, 886, 887, 888, 890, 891, 892, 897, 898, 916, 918, 923, 941, 942, 943, 945, 965, 974, 983], "attributeerror": 1, "howev": [1, 91, 144, 252, 811, 983], "can": [1, 12, 29, 62, 72, 79, 91, 101, 102, 105, 106, 110, 112, 114, 116, 117, 122, 123, 124, 126, 128, 130, 133, 134, 143, 151, 157, 158, 165, 167, 182, 186, 198, 205, 215, 219, 220, 223, 229, 234, 252, 266, 285, 303, 323, 326, 327, 351, 352, 355, 358, 366, 379, 394, 395, 428, 434, 451, 456, 457, 458, 459, 460, 462, 463, 464, 468, 471, 473, 476, 479, 492, 495, 501, 507, 508, 531, 539, 540, 543, 558, 560, 584, 590, 591, 605, 609, 614, 623, 624, 647, 655, 660, 666, 668, 672, 688, 697, 716, 734, 758, 789, 790, 793, 796, 804, 817, 831, 863, 879, 897, 898, 899, 903, 906, 909, 925, 928, 934, 940, 941, 983], "other": [1, 17, 29, 72, 101, 102, 105, 112, 119, 120, 142, 146, 152, 171, 172, 178, 179, 194, 198, 224, 229, 250, 252, 259, 263, 265, 277, 281, 316, 317, 318, 329, 372, 386, 388, 389, 395, 399, 410, 417, 420, 424, 427, 433, 435, 439, 441, 479, 517, 525, 527, 534, 535, 536, 542, 544, 545, 551, 566, 569, 580, 581, 591, 602, 612, 628, 629, 637, 638, 647, 663, 666, 667, 688, 696, 712, 748, 749, 750, 762, 838, 896, 967, 975, 982, 983], "onli": [1, 17, 25, 29, 53, 62, 68, 70, 101, 102, 104, 105, 106, 110, 112, 113, 114, 115, 116, 124, 126, 130, 133, 142, 157, 158, 169, 172, 176, 195, 207, 212, 214, 225, 252, 260, 266, 277, 312, 315, 316, 317, 318, 355, 376, 385, 451, 529, 574, 591, 609, 612, 623, 624, 625, 629, 632, 688, 745, 748, 749, 750, 793, 822, 840, 879, 960, 963, 983, 991], "gener": [1, 96, 103, 121, 122, 123, 124, 126, 138, 186, 196, 213, 220, 252, 466, 472, 591, 688, 894, 905, 961, 983, 991], "userwarn": 1, "pl": [1, 7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 29, 30, 31, 32, 33, 53, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 126, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 577, 578, 579, 580, 581, 582, 583, 584, 591, 603, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 693, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 715, 716, 717, 720, 721, 723, 728, 729, 730, 732, 734, 741, 742, 744, 745, 746, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 814, 817, 818, 819, 820, 822, 825, 826, 827, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 852, 857, 858, 859, 860, 861, 862, 863, 864, 865, 871, 872, 873, 875, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 905, 906, 907, 908, 910, 911, 912, 913, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 945, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 983, 991], "register_expr_namespac": [1, 63, 65, 66], "greet": 1, "def": [1, 63, 64, 65, 66, 122, 123, 124, 126, 185, 220, 252, 259, 444, 490, 534, 565, 591, 640, 688, 923, 991], "__init__": [1, 2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 121], "self": [1, 50, 51, 52, 63, 64, 65, 66, 69, 133, 134, 135, 136, 138, 139, 140, 142, 145, 146, 147, 148, 149, 156, 157, 158, 160, 162, 163, 164, 171, 172, 174, 175, 176, 177, 178, 179, 180, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 196, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 305, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 591, 605, 606, 607, 608, 609, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 688, 696, 697, 742, 751, 820, 828, 857, 858, 869, 872, 873, 878, 897, 898, 899, 911, 971, 975, 983], "_expr": [1, 64], "hello": [1, 495, 501, 507, 535, 721, 928, 934, 940], "return": [1, 25, 27, 29, 30, 31, 32, 48, 49, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 80, 82, 87, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 123, 129, 133, 134, 135, 138, 141, 142, 143, 144, 145, 147, 148, 151, 155, 156, 157, 158, 160, 162, 168, 169, 170, 171, 173, 174, 181, 182, 184, 185, 186, 194, 195, 196, 208, 209, 215, 216, 219, 220, 221, 225, 229, 231, 234, 237, 241, 246, 252, 262, 264, 268, 269, 270, 271, 272, 273, 276, 277, 279, 280, 282, 286, 288, 289, 290, 301, 302, 306, 308, 311, 319, 320, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 364, 366, 367, 368, 370, 378, 391, 395, 397, 398, 399, 400, 401, 403, 404, 405, 412, 416, 420, 429, 434, 444, 452, 453, 466, 467, 473, 474, 475, 482, 484, 486, 488, 489, 490, 492, 493, 494, 496, 497, 500, 502, 503, 504, 505, 514, 520, 521, 522, 523, 524, 526, 527, 529, 530, 531, 534, 535, 536, 537, 539, 540, 543, 552, 553, 554, 560, 562, 564, 565, 574, 577, 580, 582, 584, 591, 605, 607, 609, 612, 613, 614, 616, 623, 624, 625, 631, 632, 633, 640, 641, 651, 652, 653, 658, 659, 660, 661, 666, 669, 675, 679, 684, 688, 693, 694, 695, 697, 704, 705, 707, 708, 710, 711, 713, 717, 719, 720, 721, 732, 733, 736, 738, 741, 747, 759, 760, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 801, 802, 804, 805, 806, 808, 811, 816, 824, 826, 827, 833, 835, 836, 838, 839, 841, 842, 843, 844, 848, 850, 853, 857, 858, 863, 875, 881, 882, 894, 895, 896, 898, 906, 915, 916, 917, 919, 921, 922, 923, 925, 926, 927, 929, 930, 933, 935, 936, 937, 938, 947, 954, 956, 968, 970, 971, 975, 983, 991], "lit": [1, 99, 129, 395, 407, 549, 558, 584, 591, 819, 983], "alia": [1, 62, 64, 66, 157, 158, 174, 222, 229, 252, 259, 263, 266, 283, 285, 311, 316, 317, 318, 322, 323, 324, 325, 326, 328, 332, 333, 334, 337, 338, 339, 341, 343, 344, 345, 347, 349, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 368, 369, 372, 382, 384, 386, 388, 389, 393, 395, 398, 399, 407, 410, 411, 412, 417, 419, 420, 431, 433, 435, 439, 441, 443, 445, 446, 451, 467, 483, 484, 487, 489, 490, 493, 496, 502, 504, 505, 506, 515, 516, 517, 518, 525, 526, 527, 533, 534, 535, 536, 537, 541, 542, 544, 545, 549, 550, 551, 554, 555, 558, 559, 565, 566, 569, 573, 574, 580, 581, 584, 591, 623, 624, 626, 632, 662, 666, 688, 716, 766, 768, 773, 793, 796, 800, 802, 807, 853, 922, 923, 937, 938, 983], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 495, 501, 507, 721, 928, 934, 940], "select": [1, 28, 62, 63, 64, 65, 67, 100, 101, 102, 103, 104, 106, 110, 112, 117, 123, 133, 168, 172, 182, 185, 194, 204, 217, 222, 225, 252, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 299, 300, 303, 304, 305, 311, 315, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 379, 383, 385, 387, 390, 392, 393, 394, 396, 397, 399, 400, 402, 406, 407, 408, 409, 411, 413, 414, 415, 416, 418, 419, 421, 422, 423, 432, 434, 436, 437, 438, 440, 441, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 488, 489, 490, 491, 492, 494, 495, 497, 500, 501, 503, 504, 505, 507, 508, 511, 513, 515, 516, 518, 519, 522, 523, 524, 526, 528, 529, 530, 531, 532, 535, 536, 537, 538, 539, 540, 541, 543, 544, 546, 547, 548, 549, 550, 551, 554, 556, 557, 558, 559, 560, 562, 566, 567, 568, 569, 570, 571, 573, 578, 579, 580, 581, 582, 583, 591, 610, 626, 629, 640, 654, 662, 667, 669, 688, 716, 796, 897, 898, 910, 925, 941, 955, 983], "shape": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 53, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 85, 88, 90, 91, 92, 93, 94, 95, 96, 99, 112, 117, 124, 126, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 153, 154, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 168, 171, 172, 175, 176, 177, 178, 180, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 196, 198, 201, 202, 204, 205, 206, 207, 208, 209, 211, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 562, 565, 566, 567, 568, 569, 570, 571, 573, 577, 578, 579, 580, 581, 582, 583, 584, 591, 605, 607, 609, 611, 612, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 644, 645, 647, 649, 650, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 696, 697, 698, 699, 700, 701, 702, 703, 706, 707, 708, 715, 716, 717, 720, 721, 723, 728, 729, 730, 732, 734, 741, 742, 744, 745, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 813, 814, 817, 818, 819, 820, 822, 825, 826, 827, 830, 831, 833, 835, 838, 839, 841, 842, 843, 844, 848, 850, 857, 858, 863, 871, 872, 873, 875, 877, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 897, 898, 901, 905, 906, 907, 908, 910, 911, 912, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 945, 952, 954, 955, 956, 957, 958, 961, 962, 963, 967, 968, 969, 970, 971, 972, 975, 983], "3": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 53, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 88, 90, 91, 92, 93, 94, 95, 96, 103, 105, 112, 117, 118, 119, 120, 123, 124, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 259, 260, 261, 262, 266, 276, 277, 278, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 305, 311, 313, 314, 315, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 342, 348, 350, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 433, 434, 435, 439, 440, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 476, 478, 479, 480, 483, 486, 487, 489, 490, 491, 493, 496, 498, 502, 503, 504, 505, 506, 509, 512, 515, 516, 517, 518, 520, 521, 522, 526, 529, 530, 531, 533, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 568, 569, 571, 573, 577, 578, 579, 580, 581, 582, 583, 584, 591, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 693, 696, 697, 698, 700, 701, 702, 704, 705, 706, 707, 708, 715, 716, 717, 720, 723, 728, 729, 730, 732, 734, 741, 742, 744, 745, 746, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 766, 767, 768, 771, 772, 773, 774, 776, 778, 779, 780, 782, 784, 785, 786, 788, 792, 794, 796, 797, 798, 800, 802, 803, 804, 806, 807, 811, 813, 814, 817, 818, 819, 820, 822, 825, 826, 827, 830, 831, 833, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 851, 852, 857, 858, 859, 860, 861, 862, 863, 864, 865, 871, 872, 873, 875, 876, 877, 880, 881, 882, 883, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 905, 907, 908, 909, 910, 911, 913, 919, 920, 922, 923, 924, 926, 929, 931, 935, 939, 942, 945, 952, 953, 954, 955, 956, 957, 958, 960, 961, 964, 965, 966, 968, 969, 970, 971, 972, 973, 975, 983, 991], "1": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 53, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 88, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 105, 106, 112, 113, 117, 118, 119, 120, 121, 124, 126, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 311, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 486, 487, 488, 489, 490, 491, 492, 494, 495, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 605, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 693, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 715, 716, 717, 719, 720, 723, 728, 729, 730, 732, 734, 741, 742, 744, 745, 746, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 812, 813, 814, 817, 818, 819, 820, 822, 825, 826, 827, 830, 831, 833, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 850, 852, 857, 859, 860, 861, 862, 863, 864, 865, 871, 872, 873, 875, 876, 877, 880, 881, 882, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 922, 924, 925, 931, 937, 938, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 983, 991], "2": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 53, 62, 63, 64, 65, 66, 67, 70, 71, 73, 88, 90, 91, 92, 93, 94, 95, 96, 103, 112, 117, 118, 119, 120, 123, 124, 126, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 173, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 258, 259, 260, 261, 263, 264, 265, 266, 267, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 311, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 328, 329, 333, 334, 338, 340, 341, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 357, 358, 359, 360, 361, 362, 365, 366, 369, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 433, 434, 435, 436, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 476, 477, 478, 479, 480, 482, 484, 487, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 501, 502, 504, 505, 506, 507, 508, 510, 511, 513, 515, 516, 517, 518, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 562, 564, 565, 566, 567, 568, 569, 570, 571, 573, 577, 578, 579, 580, 581, 582, 583, 584, 591, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 693, 696, 697, 699, 703, 704, 705, 706, 707, 708, 715, 716, 717, 720, 721, 723, 728, 729, 730, 732, 734, 741, 744, 745, 746, 747, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 767, 769, 770, 774, 779, 780, 786, 788, 789, 790, 795, 796, 797, 798, 801, 804, 806, 808, 810, 811, 812, 813, 814, 817, 818, 819, 820, 822, 825, 826, 827, 830, 831, 833, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 852, 854, 857, 858, 859, 860, 861, 862, 863, 864, 865, 871, 872, 873, 875, 876, 877, 880, 881, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 905, 907, 909, 910, 911, 912, 913, 915, 917, 922, 923, 924, 925, 928, 929, 930, 931, 932, 934, 937, 938, 940, 941, 943, 952, 953, 954, 955, 956, 957, 960, 961, 962, 963, 964, 965, 966, 968, 969, 970, 971, 972, 973, 975, 983, 991], "column_0": [1, 133, 220, 252], "register_dataframe_namespac": [1, 64, 65, 66], "split": [1, 63, 170, 252, 504, 505, 937, 938], "splitfram": [1, 63], "df": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 63, 64, 67, 88, 89, 90, 91, 92, 93, 94, 95, 96, 102, 112, 122, 124, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 299, 300, 303, 304, 305, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 562, 565, 566, 567, 568, 569, 570, 571, 573, 577, 578, 579, 580, 581, 582, 583, 584, 591, 624, 662, 663, 669, 672, 675, 684, 688, 716, 744, 796, 925, 932, 937, 938, 962, 983, 991], "_df": [1, 63], "by_alternate_row": 1, "list": [1, 29, 36, 62, 63, 65, 69, 71, 88, 90, 91, 92, 94, 95, 98, 100, 101, 102, 103, 104, 106, 110, 112, 113, 122, 123, 124, 126, 137, 140, 143, 144, 145, 149, 154, 156, 157, 162, 169, 181, 184, 194, 195, 198, 205, 211, 212, 220, 221, 222, 223, 229, 232, 233, 252, 260, 281, 284, 285, 286, 289, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 378, 384, 392, 418, 429, 430, 442, 452, 453, 455, 456, 457, 458, 459, 460, 462, 463, 464, 470, 478, 479, 490, 503, 515, 516, 521, 525, 540, 543, 544, 551, 555, 564, 580, 581, 591, 610, 611, 613, 615, 619, 622, 623, 637, 647, 655, 661, 662, 666, 667, 670, 671, 688, 709, 712, 715, 716, 717, 719, 720, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 746, 759, 811, 816, 820, 823, 827, 828, 838, 875, 881, 883, 884, 885, 886, 887, 888, 890, 891, 892, 895, 923, 936, 955, 964, 967, 983, 991], "with_row_count": [1, 252, 420, 591, 688, 898, 983], "name": [1, 15, 19, 21, 28, 29, 31, 50, 51, 52, 63, 64, 65, 66, 71, 72, 77, 88, 90, 91, 92, 93, 94, 96, 100, 101, 102, 104, 105, 106, 107, 110, 111, 112, 114, 115, 116, 120, 121, 122, 124, 125, 126, 127, 133, 134, 137, 140, 141, 142, 145, 150, 153, 155, 156, 168, 169, 171, 172, 178, 184, 186, 190, 194, 195, 197, 198, 205, 211, 213, 215, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 252, 261, 266, 303, 359, 366, 376, 395, 407, 419, 428, 430, 442, 446, 479, 490, 515, 516, 518, 535, 536, 538, 540, 542, 543, 544, 545, 546, 548, 551, 556, 562, 563, 566, 569, 571, 572, 574, 575, 576, 578, 580, 581, 582, 591, 605, 610, 611, 612, 615, 622, 628, 629, 637, 644, 646, 647, 655, 660, 661, 662, 663, 666, 668, 669, 670, 688, 693, 734, 747, 759, 797, 804, 875, 880, 922, 923, 931, 948, 950, 961, 962, 966, 983, 991], "n": [1, 11, 14, 22, 32, 36, 38, 63, 64, 65, 66, 72, 98, 99, 101, 102, 112, 129, 133, 135, 146, 157, 160, 169, 170, 174, 195, 196, 206, 208, 209, 212, 214, 226, 237, 246, 252, 284, 289, 301, 303, 311, 327, 328, 332, 333, 339, 364, 369, 379, 391, 412, 443, 444, 452, 466, 476, 481, 498, 504, 505, 510, 520, 522, 526, 527, 532, 534, 546, 560, 562, 571, 574, 575, 576, 578, 579, 582, 583, 591, 607, 609, 623, 625, 632, 656, 658, 659, 664, 675, 684, 688, 696, 715, 720, 732, 734, 741, 747, 758, 761, 766, 767, 773, 802, 807, 817, 826, 853, 871, 894, 909, 913, 931, 937, 938, 943, 954, 956, 963, 968, 973, 983, 991], "filter": [1, 63, 104, 112, 113, 117, 142, 165, 166, 167, 234, 252, 487, 506, 533, 539, 558, 591, 612, 616, 626, 672, 688, 897, 983], "col": [1, 27, 29, 62, 63, 64, 65, 67, 92, 94, 112, 122, 124, 133, 145, 149, 156, 157, 158, 166, 168, 182, 185, 194, 198, 205, 222, 229, 232, 252, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 299, 300, 303, 304, 311, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 379, 382, 383, 384, 385, 386, 388, 389, 393, 394, 395, 396, 398, 399, 401, 402, 403, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 420, 421, 422, 423, 432, 433, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 513, 514, 515, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 542, 544, 545, 549, 550, 551, 554, 557, 558, 559, 560, 561, 566, 569, 572, 573, 581, 584, 591, 615, 619, 622, 623, 624, 626, 640, 647, 655, 662, 666, 667, 670, 688, 716, 744, 793, 796, 881, 897, 898, 925, 941, 983, 991], "0": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 29, 33, 62, 63, 64, 66, 67, 71, 72, 96, 101, 102, 103, 105, 106, 110, 112, 114, 115, 116, 117, 118, 121, 122, 123, 124, 126, 129, 133, 135, 136, 138, 139, 140, 143, 147, 148, 151, 152, 154, 155, 156, 157, 159, 163, 168, 169, 170, 171, 173, 175, 176, 177, 180, 181, 182, 183, 186, 187, 188, 192, 196, 197, 198, 202, 204, 205, 206, 207, 213, 214, 215, 216, 217, 220, 223, 225, 226, 229, 230, 232, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 252, 258, 260, 263, 268, 269, 270, 271, 272, 273, 276, 277, 278, 279, 280, 283, 285, 288, 294, 303, 313, 315, 317, 318, 319, 320, 322, 327, 330, 331, 340, 344, 345, 347, 348, 354, 360, 361, 372, 373, 374, 375, 377, 379, 380, 381, 385, 386, 388, 389, 390, 394, 397, 400, 401, 403, 404, 405, 407, 408, 410, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 432, 433, 435, 437, 438, 439, 440, 441, 443, 444, 445, 448, 449, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 471, 473, 474, 475, 476, 480, 481, 489, 490, 508, 514, 517, 519, 523, 524, 525, 527, 532, 539, 540, 541, 542, 544, 546, 548, 549, 555, 558, 563, 567, 568, 571, 572, 573, 578, 583, 584, 591, 607, 608, 611, 613, 617, 618, 622, 623, 628, 631, 636, 641, 642, 646, 647, 650, 651, 653, 655, 656, 664, 666, 667, 668, 670, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 688, 698, 699, 700, 701, 702, 703, 704, 706, 708, 716, 719, 734, 742, 745, 747, 752, 753, 758, 759, 760, 762, 774, 778, 779, 780, 781, 782, 783, 784, 785, 786, 791, 792, 798, 799, 810, 812, 813, 814, 818, 822, 825, 827, 835, 837, 839, 841, 842, 843, 844, 850, 851, 857, 860, 861, 871, 875, 876, 877, 883, 885, 886, 888, 889, 890, 892, 893, 894, 906, 907, 908, 912, 913, 915, 922, 923, 925, 941, 947, 957, 958, 961, 966, 967, 971, 973, 974, 983, 991], "drop": [1, 91, 133, 141, 142, 221, 229, 252, 284, 328, 330, 331, 508, 591, 612, 661, 666, 688, 715, 761, 763, 764, 941, 983], "aaa": [1, 29, 252, 483, 515, 516, 916], "bbb": [1, 29, 252, 515, 516], "ccc": [1, 29, 252, 515, 516], "ddd": [1, 29, 252, 515, 516], "eee": [1, 29, 252], "fff": 1, "column": [1, 14, 15, 18, 19, 21, 29, 31, 53, 62, 63, 70, 71, 72, 75, 77, 88, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 119, 124, 132, 133, 134, 140, 141, 142, 143, 145, 150, 153, 155, 156, 157, 158, 162, 163, 168, 169, 171, 172, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 205, 206, 207, 211, 213, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 232, 252, 262, 264, 266, 276, 281, 286, 299, 302, 303, 333, 337, 340, 342, 343, 344, 346, 348, 350, 353, 356, 357, 360, 362, 365, 367, 368, 370, 376, 378, 382, 384, 395, 407, 420, 426, 428, 430, 442, 446, 450, 452, 453, 456, 457, 458, 459, 460, 462, 463, 464, 471, 478, 479, 488, 504, 505, 508, 509, 510, 512, 518, 533, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 578, 579, 580, 581, 582, 583, 584, 591, 605, 611, 612, 613, 615, 622, 623, 624, 628, 629, 633, 634, 635, 636, 637, 639, 640, 642, 644, 646, 647, 648, 655, 656, 657, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 688, 694, 695, 712, 717, 730, 733, 759, 769, 770, 771, 774, 776, 777, 781, 783, 786, 788, 791, 794, 795, 798, 800, 801, 803, 805, 806, 808, 816, 875, 881, 903, 921, 937, 938, 941, 942, 943, 945, 952, 961, 962, 983, 991], "txt": [1, 112], "utf8": [1, 9, 17, 53, 73, 91, 95, 101, 102, 112, 121, 123, 126, 143, 144, 145, 151, 197, 215, 252, 290, 362, 365, 378, 420, 482, 486, 489, 490, 492, 493, 502, 503, 504, 505, 508, 509, 510, 512, 543, 545, 591, 613, 615, 646, 688, 721, 800, 803, 816, 849, 915, 919, 922, 923, 925, 926, 935, 936, 937, 938, 941, 942, 943, 945, 983], "register_lazyframe_namespac": [1, 63, 64, 66], "dtypeoper": [1, 65], "ldf": [1, 65, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684], "_ldf": [1, 65], "upcast_integer_typ": [1, 65], "with_column": [1, 65, 158, 185, 252, 259, 266, 277, 285, 313, 314, 316, 317, 318, 323, 326, 328, 358, 362, 365, 372, 386, 388, 389, 390, 394, 395, 398, 401, 403, 404, 405, 407, 410, 417, 419, 420, 433, 435, 439, 442, 443, 444, 445, 483, 487, 490, 493, 496, 498, 499, 502, 504, 505, 506, 514, 517, 525, 527, 534, 537, 539, 542, 545, 551, 555, 565, 581, 584, 591, 624, 640, 688, 716, 744, 796], "tp": [1, 65], "cast": [1, 64, 65, 73, 88, 151, 157, 158, 185, 216, 229, 252, 265, 314, 325, 326, 332, 362, 365, 420, 441, 444, 451, 491, 492, 514, 519, 525, 545, 591, 623, 624, 640, 666, 688, 744, 756, 757, 766, 800, 803, 879, 924, 925, 953, 962, 967, 983], "int64": [1, 29, 31, 64, 65, 95, 99, 101, 129, 143, 151, 157, 158, 185, 197, 210, 216, 252, 325, 326, 338, 341, 345, 347, 349, 354, 361, 376, 444, 451, 491, 519, 525, 539, 543, 556, 564, 580, 591, 613, 623, 624, 640, 646, 669, 688, 756, 757, 772, 775, 782, 784, 787, 792, 799, 879, 896, 953, 965, 966, 967, 983], "int8": [1, 65, 151, 252, 325, 326, 519, 591, 756, 757, 761, 858, 882, 953, 971, 983], "int16": [1, 65, 325, 326, 519, 591, 756, 757, 858, 953, 963, 983], "int32": [1, 65, 88, 91, 95, 123, 124, 157, 158, 170, 252, 313, 343, 370, 525, 591, 623, 624, 688, 777, 808, 857, 967, 983], "b": [1, 26, 27, 30, 33, 53, 65, 70, 73, 88, 90, 91, 92, 93, 94, 95, 96, 105, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 162, 163, 165, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 259, 261, 265, 266, 278, 281, 285, 290, 292, 305, 313, 314, 321, 329, 330, 331, 376, 380, 381, 382, 384, 387, 390, 392, 394, 395, 397, 400, 401, 402, 403, 404, 405, 407, 411, 419, 434, 440, 442, 444, 446, 454, 471, 477, 479, 488, 491, 498, 518, 529, 531, 533, 535, 536, 537, 538, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 555, 556, 557, 558, 559, 562, 565, 566, 567, 568, 569, 570, 571, 573, 575, 576, 578, 579, 580, 581, 582, 583, 591, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 625, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 696, 716, 744, 760, 762, 810, 811, 819, 831, 838, 849, 880, 896, 921, 924, 931, 952, 966, 970, 983], "4": [1, 14, 22, 26, 27, 29, 30, 33, 53, 62, 63, 64, 65, 66, 67, 70, 72, 73, 88, 90, 91, 92, 93, 94, 95, 96, 112, 118, 119, 120, 126, 133, 134, 135, 136, 139, 142, 145, 146, 147, 148, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 176, 178, 181, 182, 184, 185, 186, 187, 191, 195, 200, 205, 208, 209, 210, 211, 212, 213, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 258, 259, 260, 263, 265, 266, 278, 283, 284, 285, 286, 289, 297, 298, 301, 305, 311, 313, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 333, 337, 341, 348, 349, 350, 356, 357, 359, 360, 361, 362, 365, 366, 367, 368, 370, 372, 377, 380, 381, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 404, 405, 407, 410, 411, 412, 414, 417, 419, 420, 433, 435, 439, 441, 442, 444, 445, 446, 448, 449, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 467, 469, 470, 473, 477, 478, 479, 480, 483, 493, 494, 496, 497, 498, 500, 502, 504, 505, 508, 515, 516, 517, 518, 520, 521, 522, 525, 526, 527, 534, 537, 538, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 555, 557, 558, 562, 564, 565, 566, 567, 568, 569, 570, 571, 578, 579, 580, 581, 582, 583, 584, 591, 605, 607, 608, 609, 612, 614, 615, 616, 617, 618, 620, 622, 623, 624, 625, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 649, 650, 651, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 665, 666, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 696, 699, 706, 715, 716, 717, 720, 728, 729, 732, 741, 745, 746, 748, 758, 760, 762, 774, 775, 781, 783, 786, 787, 788, 789, 790, 791, 795, 797, 798, 799, 800, 803, 804, 805, 806, 818, 819, 826, 827, 830, 831, 833, 838, 841, 842, 843, 844, 848, 858, 864, 871, 872, 873, 875, 877, 881, 886, 888, 889, 890, 891, 892, 894, 896, 906, 910, 911, 916, 926, 927, 929, 930, 933, 935, 937, 938, 941, 952, 954, 955, 956, 963, 966, 967, 968, 975, 983, 991], "c": [1, 26, 27, 30, 33, 53, 63, 65, 73, 91, 93, 95, 105, 112, 122, 134, 135, 136, 137, 139, 140, 141, 142, 143, 145, 149, 150, 151, 152, 154, 155, 156, 157, 160, 162, 163, 170, 171, 173, 175, 176, 177, 178, 180, 181, 182, 183, 184, 186, 187, 188, 190, 192, 193, 194, 196, 197, 198, 201, 202, 204, 205, 206, 207, 208, 210, 214, 215, 216, 217, 219, 220, 223, 224, 226, 227, 229, 232, 235, 236, 237, 238, 239, 240, 242, 245, 246, 252, 259, 266, 281, 290, 292, 395, 407, 442, 444, 471, 504, 508, 529, 531, 535, 536, 538, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 557, 558, 559, 562, 565, 566, 567, 568, 569, 570, 571, 578, 579, 581, 582, 583, 591, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 619, 622, 623, 628, 631, 637, 641, 644, 645, 646, 647, 651, 654, 655, 660, 663, 666, 667, 670, 673, 674, 675, 676, 677, 678, 680, 683, 684, 688, 760, 831, 849, 937, 941, 970, 983], "5": [1, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 26, 27, 30, 33, 62, 63, 65, 66, 67, 70, 71, 88, 91, 92, 93, 94, 95, 98, 99, 102, 118, 124, 129, 133, 135, 136, 139, 145, 146, 147, 148, 151, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 166, 168, 169, 172, 173, 174, 176, 178, 181, 182, 184, 186, 187, 188, 191, 195, 200, 205, 208, 209, 210, 211, 212, 215, 218, 223, 225, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 259, 260, 263, 283, 285, 286, 289, 294, 300, 301, 311, 313, 314, 315, 316, 317, 318, 327, 328, 329, 333, 334, 338, 358, 360, 361, 362, 365, 367, 375, 376, 379, 385, 386, 388, 389, 391, 392, 395, 398, 401, 403, 404, 405, 407, 410, 412, 433, 435, 441, 442, 443, 444, 446, 448, 449, 453, 454, 455, 456, 457, 459, 463, 465, 467, 473, 479, 484, 492, 493, 496, 497, 514, 517, 518, 520, 522, 526, 527, 537, 538, 541, 542, 544, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 562, 564, 565, 566, 567, 568, 569, 570, 571, 573, 578, 579, 581, 582, 583, 591, 607, 608, 609, 614, 615, 616, 617, 618, 620, 622, 623, 624, 625, 627, 629, 630, 631, 632, 635, 636, 637, 641, 649, 650, 651, 654, 655, 656, 657, 658, 659, 665, 666, 668, 670, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 696, 699, 703, 706, 716, 717, 720, 723, 732, 741, 744, 746, 748, 754, 758, 759, 760, 761, 762, 767, 768, 769, 770, 771, 772, 796, 798, 799, 800, 801, 803, 805, 806, 814, 817, 826, 827, 830, 831, 857, 858, 864, 871, 872, 873, 875, 876, 877, 881, 883, 884, 885, 887, 888, 891, 894, 896, 906, 912, 917, 925, 926, 930, 954, 968, 971, 975, 983, 991], "6": [1, 26, 27, 29, 30, 31, 32, 33, 63, 65, 70, 88, 91, 92, 93, 94, 96, 133, 137, 140, 141, 142, 143, 145, 146, 149, 150, 152, 153, 154, 155, 157, 158, 160, 162, 163, 164, 166, 168, 169, 171, 175, 176, 177, 178, 180, 183, 186, 187, 188, 190, 191, 192, 194, 195, 196, 197, 198, 201, 202, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 222, 223, 224, 225, 226, 227, 229, 230, 237, 245, 246, 252, 259, 263, 266, 286, 305, 313, 325, 326, 329, 333, 355, 357, 360, 371, 380, 381, 387, 391, 392, 394, 412, 441, 447, 449, 450, 453, 456, 457, 458, 459, 460, 462, 463, 464, 467, 479, 484, 488, 493, 496, 497, 517, 520, 522, 534, 535, 537, 549, 550, 551, 555, 558, 565, 581, 591, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 623, 624, 625, 627, 628, 630, 632, 633, 637, 641, 644, 646, 647, 649, 650, 651, 654, 655, 658, 659, 662, 663, 665, 666, 668, 669, 675, 683, 684, 688, 696, 717, 746, 752, 756, 757, 762, 793, 806, 827, 864, 877, 881, 886, 888, 889, 890, 892, 896, 917, 921, 926, 930, 953, 983, 991], "7": [1, 26, 27, 29, 30, 31, 32, 33, 63, 65, 70, 72, 118, 137, 138, 139, 140, 141, 143, 145, 149, 150, 152, 157, 158, 160, 162, 164, 171, 175, 176, 177, 180, 183, 186, 188, 190, 192, 194, 196, 197, 198, 201, 202, 204, 206, 207, 208, 209, 214, 215, 216, 217, 223, 224, 225, 226, 227, 252, 259, 263, 326, 333, 337, 356, 358, 359, 366, 368, 370, 377, 391, 394, 412, 420, 441, 453, 457, 463, 479, 520, 522, 537, 549, 550, 558, 565, 581, 591, 610, 611, 613, 615, 619, 623, 624, 625, 627, 628, 632, 642, 644, 646, 647, 658, 659, 663, 669, 688, 703, 767, 771, 777, 796, 797, 804, 806, 850, 858, 881, 891, 983, 991], "float32": [1, 27, 65, 151, 214, 215, 252, 564, 688, 834, 857, 983], "lazi": [1, 65, 70, 72, 99, 112, 124, 129, 172, 185, 252, 266, 539, 560, 591, 602, 628, 629, 667, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 688, 991], "i16": [1, 65, 471, 591, 858, 963, 983, 991], "i32": [1, 65, 88, 91, 95, 123, 124, 198, 252, 313, 343, 370, 471, 497, 584, 591, 647, 688, 777, 808, 857, 930, 983, 991], "f32": [1, 65, 142, 214, 252, 285, 449, 471, 555, 591, 612, 688, 716, 857, 877, 983], "i64": [1, 14, 18, 63, 64, 65, 66, 70, 88, 90, 91, 92, 93, 94, 95, 99, 112, 129, 133, 134, 135, 136, 137, 140, 142, 143, 145, 146, 148, 149, 153, 154, 155, 156, 157, 158, 160, 162, 163, 164, 165, 167, 171, 172, 175, 178, 180, 184, 185, 186, 187, 190, 191, 192, 193, 196, 198, 201, 202, 204, 205, 207, 208, 209, 211, 217, 219, 220, 221, 222, 223, 224, 225, 227, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 242, 245, 246, 252, 259, 261, 265, 266, 284, 285, 286, 287, 288, 289, 291, 293, 295, 296, 297, 298, 299, 300, 301, 304, 305, 311, 314, 316, 317, 318, 323, 324, 325, 326, 328, 329, 338, 339, 341, 345, 347, 349, 354, 361, 364, 376, 379, 381, 382, 383, 384, 386, 387, 391, 392, 393, 394, 395, 398, 401, 403, 404, 405, 407, 409, 412, 416, 418, 419, 433, 434, 435, 442, 443, 444, 445, 446, 447, 450, 451, 453, 454, 466, 468, 469, 471, 472, 473, 477, 478, 479, 498, 499, 515, 516, 517, 518, 519, 520, 521, 522, 526, 527, 528, 530, 533, 535, 537, 542, 543, 545, 549, 550, 551, 554, 555, 556, 557, 558, 562, 564, 565, 566, 569, 573, 577, 581, 582, 584, 591, 605, 607, 609, 611, 612, 615, 616, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 637, 639, 640, 641, 644, 645, 647, 649, 650, 654, 655, 657, 658, 659, 660, 661, 662, 663, 666, 668, 670, 671, 672, 674, 675, 676, 677, 680, 683, 684, 688, 696, 697, 715, 716, 717, 720, 728, 729, 730, 732, 734, 741, 744, 748, 751, 754, 755, 756, 757, 760, 772, 773, 775, 782, 784, 787, 792, 799, 802, 817, 819, 820, 826, 830, 838, 863, 880, 881, 884, 887, 891, 894, 897, 898, 901, 905, 906, 910, 911, 952, 954, 955, 956, 962, 968, 969, 972, 975, 983, 991], "register_series_namespac": [1, 63, 64, 65], "math": [1, 66, 752, 907, 957, 983], "mathshortcut": [1, 66], "": [1, 27, 29, 66, 71, 88, 95, 96, 101, 102, 113, 126, 134, 140, 142, 144, 145, 156, 157, 163, 171, 172, 184, 186, 191, 192, 198, 205, 209, 213, 219, 221, 222, 223, 252, 289, 290, 297, 298, 301, 339, 362, 365, 376, 408, 429, 434, 437, 438, 442, 443, 451, 455, 479, 483, 489, 490, 493, 494, 496, 498, 500, 502, 503, 505, 508, 509, 510, 512, 514, 515, 516, 535, 536, 540, 543, 546, 551, 556, 559, 560, 566, 569, 571, 580, 581, 591, 605, 611, 612, 615, 622, 623, 629, 647, 655, 660, 661, 662, 672, 688, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 715, 717, 720, 721, 723, 728, 729, 730, 732, 741, 742, 745, 746, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 761, 762, 767, 773, 789, 790, 797, 800, 803, 804, 811, 813, 814, 817, 818, 819, 820, 822, 825, 826, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 871, 872, 873, 876, 877, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 905, 906, 907, 908, 910, 911, 913, 916, 917, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 933, 934, 935, 938, 939, 940, 941, 942, 943, 945, 947, 950, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 967, 968, 969, 970, 971, 972, 973, 974, 983], "_": [1, 62, 66, 96, 186, 213, 252, 490, 504, 923, 937, 961, 983], "squar": [1, 66, 234, 408, 480, 591, 672, 851, 912, 983], "cube": [1, 66, 445, 591], "s2": [1, 120, 151, 252, 696, 734, 746, 762, 838, 850, 864, 896, 966, 975, 983], "renam": [1, 91, 101, 102, 198, 229, 232, 252, 261, 419, 431, 516, 577, 580, 591, 647, 666, 670, 688, 858, 950, 962, 983], "n2": [1, 303], "in_plac": [1, 162, 203, 227, 252, 878, 880, 904, 911, 983], "true": [1, 5, 9, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 67, 69, 70, 72, 73, 88, 89, 93, 95, 98, 101, 102, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 125, 126, 130, 132, 134, 135, 136, 139, 148, 151, 152, 154, 155, 156, 157, 163, 165, 166, 167, 169, 172, 173, 176, 181, 182, 184, 186, 187, 194, 195, 196, 198, 205, 211, 215, 216, 219, 220, 221, 222, 223, 225, 229, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 252, 260, 262, 263, 264, 265, 266, 277, 282, 299, 302, 303, 307, 313, 322, 323, 324, 325, 326, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 388, 389, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 410, 417, 439, 441, 451, 461, 466, 471, 476, 478, 479, 483, 485, 487, 491, 492, 497, 503, 504, 506, 508, 509, 510, 512, 515, 516, 521, 528, 531, 534, 535, 536, 537, 539, 540, 546, 547, 558, 574, 578, 580, 584, 591, 605, 607, 608, 609, 614, 616, 618, 622, 623, 628, 629, 631, 633, 637, 641, 647, 651, 652, 653, 655, 660, 661, 662, 666, 671, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 688, 694, 695, 696, 697, 707, 730, 733, 737, 742, 746, 747, 766, 768, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 804, 805, 806, 807, 808, 810, 812, 813, 814, 820, 824, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 851, 864, 872, 873, 879, 889, 896, 909, 911, 916, 918, 920, 924, 925, 930, 936, 937, 939, 941, 942, 943, 945, 965, 966, 974, 975, 983, 991], "s3": [1, 104, 113, 117, 734, 983], "n3": 1, "8": [1, 26, 27, 30, 31, 32, 33, 44, 59, 61, 62, 63, 65, 66, 70, 71, 96, 118, 122, 124, 133, 137, 138, 139, 140, 141, 142, 143, 145, 149, 150, 152, 155, 160, 162, 171, 175, 176, 177, 180, 188, 190, 192, 194, 196, 197, 198, 201, 202, 204, 206, 207, 208, 209, 214, 215, 216, 217, 223, 224, 226, 227, 229, 252, 263, 265, 278, 284, 285, 321, 323, 326, 327, 330, 331, 333, 394, 411, 435, 441, 445, 446, 453, 454, 457, 458, 460, 462, 464, 471, 477, 479, 494, 500, 508, 518, 522, 534, 538, 541, 546, 547, 548, 550, 551, 555, 557, 562, 565, 566, 567, 568, 569, 570, 571, 578, 579, 581, 582, 583, 591, 610, 611, 612, 613, 615, 619, 625, 628, 632, 633, 641, 644, 646, 647, 658, 659, 663, 666, 669, 688, 715, 716, 758, 777, 827, 850, 871, 875, 881, 883, 886, 888, 889, 890, 892, 927, 933, 941, 983, 991], "9": [1, 26, 27, 30, 33, 62, 70, 133, 138, 139, 151, 158, 160, 164, 198, 208, 223, 224, 227, 229, 245, 252, 259, 263, 265, 278, 284, 296, 299, 321, 323, 326, 330, 331, 333, 337, 356, 367, 368, 394, 399, 407, 411, 441, 453, 455, 457, 463, 473, 477, 490, 522, 537, 544, 549, 550, 591, 624, 625, 627, 632, 647, 658, 663, 666, 683, 688, 715, 730, 760, 771, 781, 783, 791, 797, 798, 804, 805, 838, 850, 881, 883, 891, 893, 906, 923, 983], "27": [1, 66, 245, 326, 343, 357, 370, 591, 683, 983, 991], "16": [1, 29, 41, 56, 64, 71, 96, 157, 158, 229, 252, 323, 326, 394, 435, 445, 457, 497, 508, 537, 549, 554, 555, 558, 571, 578, 591, 623, 624, 651, 666, 688, 797, 804, 871, 907, 930, 941, 957, 983], "64": [1, 40, 43, 58, 64, 66, 435, 445, 591, 653, 688, 871, 983], "25": [1, 29, 66, 72, 95, 124, 139, 157, 158, 172, 225, 229, 252, 328, 343, 359, 366, 370, 527, 560, 591, 623, 624, 629, 635, 664, 666, 688, 760, 761, 797, 804, 810, 827, 871, 875, 983], "125": [1, 29, 66, 252, 259, 591, 871, 983], "arg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 56, 57, 58, 59, 60, 61, 185, 216, 252, 444, 540, 559, 591, 640, 688, 697, 965, 966, 983], "ani": [2, 3, 4, 7, 27, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 56, 57, 58, 59, 60, 61, 68, 88, 89, 90, 91, 92, 93, 94, 101, 102, 104, 105, 106, 110, 112, 113, 114, 116, 121, 123, 124, 126, 130, 133, 138, 142, 146, 148, 149, 151, 168, 169, 170, 184, 185, 194, 195, 211, 212, 215, 216, 221, 223, 252, 259, 263, 266, 281, 285, 313, 360, 372, 381, 386, 388, 389, 399, 410, 417, 418, 420, 431, 433, 435, 439, 441, 444, 453, 455, 467, 470, 497, 508, 509, 510, 512, 517, 521, 527, 534, 535, 537, 546, 557, 564, 578, 584, 591, 612, 618, 640, 661, 688, 696, 697, 712, 716, 762, 798, 819, 838, 850, 858, 881, 883, 895, 898, 930, 941, 942, 943, 945, 955, 964, 965, 966, 983, 991], "kwarg": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 138, 185, 216, 252, 444, 591, 640, 688, 966, 983], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 591, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 950, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 983, 990], "method": [2, 3, 4, 7, 26, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 53, 54, 55, 56, 57, 58, 59, 60, 61, 89, 101, 102, 105, 121, 130, 142, 156, 164, 169, 182, 188, 194, 195, 221, 229, 244, 252, 259, 262, 263, 362, 365, 372, 379, 386, 388, 389, 394, 410, 417, 433, 435, 439, 441, 445, 448, 449, 456, 457, 458, 459, 460, 462, 463, 464, 517, 527, 529, 534, 546, 571, 572, 578, 585, 587, 591, 592, 593, 596, 597, 598, 599, 602, 612, 627, 642, 661, 666, 682, 688, 697, 800, 803, 817, 830, 876, 877, 888, 967, 977, 979, 983, 984, 987, 988, 989], "attribut": [2, 3, 4, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 54, 55, 56, 57, 58, 59, 60, 61, 121, 252, 585, 587, 592, 593, 597, 598, 599, 688, 977, 979, 984, 987, 988, 989], "A": [4, 27, 29, 48, 49, 51, 69, 72, 95, 101, 102, 103, 110, 112, 128, 151, 157, 172, 186, 195, 211, 223, 224, 225, 229, 252, 258, 303, 333, 338, 341, 345, 347, 349, 354, 361, 372, 379, 388, 389, 397, 400, 401, 403, 410, 417, 418, 419, 429, 439, 446, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 483, 484, 489, 490, 492, 498, 499, 514, 518, 544, 555, 559, 591, 623, 629, 644, 663, 666, 688, 767, 772, 775, 782, 784, 787, 792, 799, 817, 883, 884, 885, 887, 890, 891, 892, 916, 917, 922, 923, 925, 931, 932, 947, 983], "encod": [4, 61, 101, 102, 112, 307, 485, 737, 918], "set": [4, 5, 6, 7, 8, 9, 11, 13, 14, 17, 22, 23, 25, 27, 29, 30, 31, 32, 63, 67, 72, 89, 91, 94, 96, 101, 102, 105, 106, 110, 112, 114, 115, 116, 119, 120, 122, 123, 124, 125, 126, 127, 128, 130, 132, 137, 142, 156, 159, 169, 172, 178, 196, 198, 204, 213, 220, 221, 223, 229, 252, 266, 298, 302, 303, 369, 390, 399, 420, 444, 455, 456, 457, 458, 459, 460, 462, 463, 464, 466, 472, 476, 477, 495, 501, 502, 507, 508, 509, 510, 512, 539, 574, 575, 576, 580, 584, 591, 610, 612, 614, 622, 628, 629, 633, 637, 647, 652, 653, 654, 661, 666, 669, 672, 688, 696, 697, 729, 733, 734, 807, 825, 838, 858, 883, 884, 885, 886, 887, 888, 890, 891, 892, 894, 898, 905, 909, 910, 928, 934, 935, 940, 941, 942, 943, 945, 965, 983, 991], "string": [4, 6, 8, 11, 12, 13, 17, 27, 29, 31, 32, 36, 48, 49, 53, 61, 72, 73, 95, 101, 102, 112, 121, 122, 123, 126, 134, 151, 155, 156, 157, 158, 172, 198, 205, 214, 219, 223, 225, 229, 232, 252, 259, 290, 309, 314, 355, 359, 362, 365, 366, 378, 384, 395, 420, 442, 444, 456, 457, 458, 459, 460, 462, 463, 464, 479, 482, 483, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 514, 535, 536, 540, 542, 544, 545, 551, 559, 566, 569, 580, 581, 591, 605, 614, 621, 622, 623, 624, 629, 647, 655, 660, 666, 669, 670, 688, 721, 739, 744, 793, 797, 800, 803, 804, 816, 831, 914, 915, 916, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 946, 947, 963, 983, 991], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 621, 643, 688], "activ": [5, 9, 15, 16, 18, 19, 20, 21, 24, 285, 490, 716, 923], "bool": [5, 9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 31, 33, 62, 67, 69, 70, 73, 88, 89, 93, 95, 101, 102, 106, 110, 112, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 132, 134, 135, 136, 148, 149, 151, 152, 154, 155, 156, 157, 162, 163, 165, 166, 167, 172, 184, 186, 196, 199, 203, 205, 211, 215, 216, 219, 220, 221, 222, 225, 227, 229, 236, 238, 239, 242, 252, 262, 263, 264, 265, 266, 276, 282, 283, 285, 299, 302, 304, 307, 313, 322, 323, 324, 325, 326, 327, 342, 358, 360, 371, 372, 373, 374, 375, 388, 389, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 410, 417, 418, 424, 425, 426, 427, 439, 441, 449, 451, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 468, 470, 471, 476, 478, 479, 483, 485, 487, 497, 498, 499, 503, 504, 506, 508, 509, 510, 512, 516, 528, 531, 534, 535, 536, 537, 539, 540, 546, 549, 564, 574, 578, 580, 591, 605, 607, 609, 614, 616, 618, 619, 622, 623, 628, 629, 633, 637, 641, 648, 651, 652, 653, 655, 660, 661, 662, 666, 674, 676, 677, 680, 688, 694, 695, 696, 697, 706, 713, 714, 716, 730, 733, 735, 737, 742, 747, 754, 755, 756, 757, 758, 759, 776, 796, 798, 810, 812, 813, 814, 820, 824, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 872, 873, 875, 877, 878, 879, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 898, 899, 904, 909, 911, 916, 918, 920, 930, 931, 932, 936, 937, 939, 941, 942, 943, 945, 964, 965, 966, 969, 972, 974, 983], "decim": [5, 27, 29, 252, 465, 591, 893, 983], "temporari": 5, "remov": [5, 7, 140, 224, 252, 266, 376, 419, 495, 501, 507, 508, 556, 563, 571, 578, 591, 611, 663, 688, 928, 934, 940, 941], "later": 5, "onc": [5, 101, 102, 105, 128, 132, 133, 196, 232, 252, 266, 312, 466, 591, 606, 670, 688, 697, 894, 983], "stabil": 5, "happen": 5, "being": [5, 71, 101, 102, 112, 117, 223, 224, 252, 266, 327, 359, 456, 457, 458, 459, 460, 462, 463, 464, 555, 591, 663, 688, 758, 797, 827, 875, 983, 991], "consid": [5, 71, 101, 102, 112, 117, 133, 142, 152, 178, 221, 223, 224, 252, 266, 316, 317, 318, 327, 359, 456, 457, 458, 459, 460, 462, 463, 464, 549, 558, 591, 612, 625, 632, 637, 661, 663, 688, 697, 748, 749, 750, 758, 797, 827, 840, 875, 896, 897, 898, 983], "break": [5, 71, 117, 223, 224, 252, 266, 327, 359, 456, 457, 458, 459, 460, 462, 463, 464, 591, 663, 688, 758, 797, 827, 875, 983], "chang": [5, 25, 62, 71, 101, 102, 117, 223, 224, 225, 252, 266, 327, 328, 359, 443, 456, 457, 458, 459, 460, 462, 463, 464, 591, 663, 688, 758, 797, 827, 871, 875, 904, 983], "current": [5, 8, 25, 89, 95, 103, 132, 135, 136, 252, 303, 359, 443, 591, 602, 607, 608, 688, 747, 751, 797, 871, 983], "alpha": [5, 69, 266, 373, 374, 375, 591, 609, 614, 616, 641, 651, 688, 812, 813, 814, 983], "state": [5, 7, 69, 81, 549, 602, 609, 614, 616, 641, 651, 688], "cfg": [6, 7, 8, 14, 130], "previous": 6, "save": [6, 358, 602, 796], "share": [6, 53, 144, 252, 811, 983], "option": [6, 7, 8, 25, 29, 37, 62, 72, 101, 104, 105, 106, 110, 113, 114, 116, 118, 121, 122, 123, 124, 125, 126, 127, 168, 172, 178, 211, 215, 220, 252, 408, 455, 456, 457, 458, 459, 460, 462, 463, 464, 476, 502, 564, 580, 584, 591, 602, 628, 629, 637, 688, 847, 851, 883, 884, 885, 886, 887, 888, 890, 891, 892, 909, 935, 962, 983], "paramet": [6, 10, 11, 12, 13, 14, 17, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 38, 45, 48, 49, 50, 51, 52, 54, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 162, 163, 168, 169, 170, 171, 172, 174, 176, 178, 179, 181, 182, 184, 185, 186, 188, 190, 191, 192, 194, 195, 196, 198, 199, 201, 202, 204, 205, 206, 207, 208, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 234, 237, 244, 246, 252, 259, 261, 263, 265, 266, 276, 281, 282, 283, 284, 285, 288, 289, 290, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 316, 317, 318, 322, 323, 324, 325, 326, 327, 328, 329, 332, 333, 334, 339, 355, 358, 359, 360, 362, 364, 365, 366, 369, 371, 372, 373, 374, 375, 376, 379, 381, 382, 386, 387, 388, 389, 390, 391, 394, 395, 399, 408, 410, 412, 413, 417, 418, 419, 420, 433, 435, 439, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 514, 515, 516, 517, 518, 520, 521, 526, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 559, 560, 562, 563, 564, 565, 566, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 591, 605, 607, 609, 611, 612, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 628, 629, 632, 633, 637, 638, 640, 641, 642, 643, 644, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 672, 675, 682, 684, 688, 693, 696, 697, 706, 712, 713, 714, 715, 716, 719, 720, 721, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 747, 748, 749, 750, 754, 755, 756, 757, 758, 759, 760, 761, 762, 766, 767, 768, 773, 793, 796, 797, 798, 800, 802, 803, 804, 807, 810, 811, 812, 813, 814, 817, 818, 819, 820, 825, 826, 827, 830, 831, 840, 846, 847, 851, 853, 858, 871, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 901, 902, 905, 909, 910, 911, 913, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 947, 948, 950, 954, 955, 961, 962, 963, 964, 965, 966, 968, 969, 972, 973, 974, 975, 983], "json": [6, 8, 31, 32, 108, 109, 115, 252, 491, 492, 602, 621, 643, 669, 688, 924, 925], "produc": [6, 123, 124, 126, 283, 428, 565, 633, 688, 714], "reset": [7, 130], "default": [7, 12, 25, 26, 27, 29, 30, 31, 32, 33, 67, 72, 88, 90, 91, 92, 93, 94, 95, 96, 99, 101, 102, 105, 110, 112, 121, 122, 123, 124, 125, 126, 129, 142, 144, 156, 158, 159, 169, 172, 178, 184, 186, 194, 195, 196, 206, 213, 221, 223, 226, 230, 252, 298, 302, 303, 314, 358, 371, 373, 374, 375, 390, 413, 420, 437, 438, 443, 449, 466, 472, 481, 489, 495, 497, 501, 502, 507, 508, 509, 510, 512, 532, 539, 546, 560, 564, 571, 574, 578, 579, 580, 583, 591, 612, 614, 622, 624, 629, 637, 653, 656, 661, 664, 669, 688, 729, 733, 734, 744, 796, 810, 811, 812, 813, 814, 825, 858, 867, 868, 871, 877, 894, 905, 913, 916, 922, 928, 930, 934, 935, 940, 941, 942, 943, 945, 973, 983, 991], "note": [7, 17, 29, 37, 62, 72, 88, 89, 90, 92, 94, 95, 99, 101, 103, 104, 110, 112, 113, 122, 124, 126, 128, 129, 130, 132, 133, 138, 147, 157, 158, 168, 169, 171, 172, 182, 185, 194, 195, 212, 215, 220, 224, 225, 229, 252, 266, 285, 302, 325, 326, 330, 331, 351, 352, 355, 359, 366, 395, 401, 403, 456, 457, 458, 459, 460, 462, 463, 464, 476, 483, 489, 490, 493, 495, 496, 498, 501, 507, 508, 519, 527, 549, 558, 573, 584, 591, 609, 616, 617, 623, 624, 625, 629, 632, 644, 651, 663, 666, 688, 697, 716, 733, 756, 757, 789, 790, 793, 804, 897, 898, 904, 909, 916, 922, 923, 926, 928, 929, 931, 934, 940, 941, 953, 983], "oper": [7, 29, 53, 70, 78, 79, 88, 90, 91, 92, 93, 94, 101, 110, 133, 146, 151, 156, 163, 173, 179, 182, 184, 185, 189, 210, 215, 216, 220, 223, 231, 232, 252, 259, 260, 263, 303, 322, 323, 324, 325, 326, 327, 372, 386, 388, 389, 407, 410, 417, 431, 433, 435, 439, 441, 445, 451, 517, 527, 534, 535, 536, 544, 545, 555, 591, 616, 622, 625, 628, 632, 637, 638, 670, 688, 696, 754, 755, 756, 757, 758, 879, 960, 964, 965, 966, 974, 983], "from": [7, 27, 29, 52, 62, 70, 72, 88, 89, 90, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 139, 140, 144, 146, 155, 157, 158, 169, 170, 172, 173, 178, 190, 194, 196, 198, 220, 221, 223, 225, 252, 303, 322, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 376, 394, 408, 437, 438, 443, 444, 466, 479, 489, 490, 491, 497, 508, 509, 510, 512, 529, 531, 542, 552, 553, 554, 578, 579, 590, 591, 611, 616, 621, 623, 624, 629, 637, 643, 644, 647, 661, 667, 688, 696, 734, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 847, 851, 867, 868, 869, 871, 894, 922, 923, 924, 930, 941, 942, 943, 945, 972, 975, 983, 991], "environ": [7, 25, 125, 128], "local": [7, 104, 113, 126, 358, 769, 770, 796, 801, 872, 873, 983], "non": [7, 29, 37, 62, 93, 170, 178, 198, 224, 229, 252, 303, 395, 443, 455, 456, 457, 458, 459, 460, 462, 463, 464, 484, 490, 535, 536, 542, 544, 545, 551, 566, 569, 575, 576, 580, 581, 591, 637, 647, 663, 666, 688, 734, 831, 871, 883, 884, 885, 886, 887, 888, 890, 891, 892, 917, 923, 965, 983], "env": [7, 127], "back": [7, 62, 146, 216, 252, 442, 591, 696, 966, 983], "valu": [7, 10, 11, 14, 25, 27, 29, 31, 45, 46, 53, 60, 62, 70, 71, 73, 91, 93, 101, 102, 103, 112, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 134, 139, 142, 146, 147, 148, 152, 155, 157, 158, 159, 160, 164, 168, 169, 174, 175, 176, 177, 178, 180, 182, 184, 186, 187, 188, 190, 194, 195, 196, 201, 202, 205, 206, 207, 208, 211, 212, 216, 219, 223, 224, 225, 226, 235, 236, 238, 239, 240, 242, 243, 252, 258, 259, 260, 262, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 283, 284, 287, 288, 289, 291, 293, 294, 295, 297, 300, 301, 304, 305, 307, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 321, 323, 326, 327, 328, 330, 331, 333, 337, 350, 356, 367, 372, 373, 374, 375, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 400, 401, 403, 404, 405, 406, 409, 410, 411, 414, 416, 417, 418, 420, 421, 422, 423, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 444, 445, 448, 449, 452, 455, 456, 457, 458, 459, 460, 462, 463, 464, 466, 467, 468, 469, 470, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 498, 499, 502, 504, 505, 506, 514, 517, 519, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 534, 536, 538, 542, 545, 547, 549, 550, 551, 557, 558, 564, 566, 567, 568, 569, 570, 573, 574, 575, 576, 581, 584, 591, 605, 612, 617, 618, 623, 624, 626, 627, 634, 635, 636, 637, 639, 642, 644, 649, 650, 655, 656, 657, 660, 663, 664, 669, 673, 674, 676, 677, 678, 680, 681, 688, 692, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 710, 711, 714, 715, 718, 719, 720, 722, 724, 725, 726, 728, 732, 735, 737, 738, 739, 740, 744, 745, 748, 749, 750, 752, 753, 758, 759, 760, 761, 763, 764, 767, 771, 788, 794, 805, 811, 812, 813, 814, 817, 818, 819, 822, 824, 825, 826, 827, 828, 830, 831, 833, 835, 836, 838, 839, 841, 842, 843, 844, 848, 853, 858, 859, 860, 862, 863, 865, 867, 868, 869, 870, 871, 874, 875, 876, 877, 883, 884, 885, 886, 887, 888, 890, 891, 892, 894, 895, 896, 897, 898, 901, 902, 906, 907, 908, 909, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 929, 931, 932, 935, 937, 938, 939, 947, 953, 954, 955, 956, 957, 958, 966, 967, 970, 972, 974, 975, 983, 991], "exampl": [7, 8, 9, 13, 14, 15, 16, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 53, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 102, 103, 104, 105, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 562, 564, 565, 566, 567, 568, 569, 570, 571, 573, 577, 578, 579, 580, 581, 582, 583, 584, 591, 602, 605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 693, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 715, 716, 717, 720, 721, 723, 728, 729, 730, 732, 734, 741, 742, 744, 745, 746, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 817, 818, 819, 820, 822, 825, 826, 827, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 852, 857, 858, 859, 860, 861, 862, 863, 864, 865, 871, 872, 873, 875, 876, 877, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 896, 897, 898, 899, 901, 905, 906, 907, 908, 910, 911, 913, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 945, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 983], "ascii": [9, 17, 494, 496, 500, 514, 927, 929, 933, 947], "charact": [9, 11, 17, 23, 27, 101, 102, 112, 252, 355, 488, 490, 493, 494, 495, 500, 501, 503, 504, 507, 514, 641, 688, 793, 921, 923, 926, 927, 928, 933, 934, 936, 937, 940, 947], "displai": [9, 10, 11, 14, 16, 20, 22, 29, 252], "tabl": [9, 13, 14, 16, 17, 18, 19, 20, 22, 23, 28, 29, 50, 52, 88, 95, 101, 102, 104, 112, 113, 186, 210, 216, 223, 224, 252, 663, 688, 966, 983], "outlin": 9, "fals": [9, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 29, 31, 33, 62, 67, 69, 72, 89, 93, 95, 101, 102, 105, 106, 110, 112, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 132, 134, 135, 136, 139, 151, 152, 154, 155, 156, 157, 162, 163, 165, 166, 167, 169, 172, 173, 176, 181, 182, 184, 186, 187, 194, 195, 196, 199, 203, 205, 211, 215, 216, 219, 220, 221, 225, 227, 229, 235, 236, 238, 239, 240, 242, 245, 252, 262, 263, 264, 266, 276, 282, 285, 299, 302, 304, 322, 323, 324, 325, 326, 327, 342, 358, 360, 371, 372, 373, 374, 375, 388, 389, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 410, 417, 418, 439, 441, 449, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 468, 471, 476, 478, 479, 483, 487, 491, 497, 498, 499, 503, 504, 506, 508, 509, 510, 528, 531, 534, 535, 536, 539, 540, 546, 549, 564, 574, 578, 580, 584, 591, 605, 607, 608, 609, 614, 616, 622, 623, 628, 629, 631, 633, 641, 648, 651, 652, 653, 655, 660, 661, 666, 673, 674, 676, 677, 678, 680, 683, 688, 696, 706, 716, 730, 733, 735, 742, 746, 747, 754, 755, 756, 757, 758, 759, 776, 796, 798, 810, 812, 813, 814, 820, 831, 832, 833, 835, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 851, 864, 872, 873, 875, 877, 878, 880, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 896, 899, 904, 909, 911, 916, 920, 924, 930, 931, 932, 936, 937, 939, 941, 942, 943, 964, 965, 966, 969, 972, 974, 975, 983], "revert": 9, "abc": [9, 15, 16, 18, 19, 20, 21, 22, 259, 490, 498, 591, 923, 931], "xyz": [9, 15, 16, 18, 19, 20, 21, 22, 259, 484, 490, 591, 917, 923, 962, 983], "f64": [9, 13, 15, 16, 18, 19, 20, 21, 22, 62, 64, 66, 71, 91, 117, 124, 135, 136, 138, 139, 140, 143, 147, 148, 151, 154, 155, 156, 163, 171, 172, 176, 177, 186, 187, 188, 204, 205, 206, 226, 229, 232, 236, 238, 239, 240, 241, 242, 244, 245, 252, 258, 268, 269, 270, 271, 272, 273, 294, 313, 315, 319, 320, 327, 330, 331, 360, 371, 372, 373, 374, 375, 376, 377, 385, 386, 388, 389, 394, 401, 403, 404, 405, 407, 408, 410, 413, 414, 415, 417, 421, 422, 423, 432, 435, 437, 438, 439, 443, 445, 448, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 474, 475, 476, 480, 481, 523, 524, 527, 532, 541, 542, 544, 546, 548, 556, 567, 568, 571, 578, 579, 583, 591, 607, 611, 617, 618, 622, 628, 629, 635, 636, 642, 655, 656, 664, 666, 667, 670, 674, 676, 677, 678, 679, 680, 682, 683, 688, 698, 699, 700, 701, 702, 703, 745, 752, 753, 758, 759, 760, 798, 813, 814, 818, 822, 827, 871, 875, 883, 885, 886, 888, 889, 890, 892, 893, 907, 908, 912, 957, 958, 971, 983, 991], "fmt": [10, 393, 559, 591, 626, 688], "floatfmt": 10, "mix": [10, 508, 510, 760, 941, 943, 983], "control": [10, 29, 122, 252, 614, 688], "how": [10, 29, 53, 70, 73, 91, 94, 103, 142, 171, 223, 224, 252, 283, 284, 314, 328, 394, 442, 452, 584, 591, 612, 628, 663, 688, 714, 715, 744, 761, 983], "float": [10, 29, 39, 40, 71, 117, 119, 120, 121, 124, 126, 139, 144, 147, 172, 188, 196, 202, 244, 252, 282, 283, 315, 316, 317, 318, 330, 331, 360, 371, 372, 373, 374, 375, 380, 385, 388, 389, 394, 397, 400, 401, 403, 404, 405, 410, 413, 417, 421, 432, 437, 438, 439, 445, 448, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 470, 527, 541, 567, 568, 572, 574, 579, 581, 583, 591, 617, 629, 642, 650, 651, 682, 688, 713, 714, 742, 745, 748, 749, 750, 759, 760, 762, 798, 810, 811, 812, 813, 814, 818, 822, 827, 837, 851, 854, 860, 861, 867, 868, 874, 875, 876, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 897, 898, 909, 913, 953, 973, 983, 991], "point": [10, 29, 39, 40, 124, 126, 147, 157, 173, 252, 315, 330, 331, 360, 380, 385, 401, 403, 465, 466, 591, 617, 623, 633, 644, 688, 745, 798, 818, 822, 837, 893, 894, 983], "full": [10, 36, 68, 101, 102, 104, 112, 113, 508, 509, 510, 512, 633, 688, 941, 942, 943, 945], "format": [10, 13, 17, 27, 29, 100, 101, 102, 112, 117, 145, 155, 169, 178, 195, 212, 250, 252, 359, 362, 365, 497, 508, 509, 510, 512, 536, 615, 621, 637, 669, 688, 800, 803, 930, 941, 942, 943, 945, 982], "number": [10, 11, 12, 14, 22, 23, 27, 29, 33, 62, 82, 88, 90, 92, 94, 98, 99, 101, 102, 105, 112, 115, 122, 124, 125, 127, 128, 129, 134, 135, 144, 145, 147, 148, 160, 169, 170, 173, 174, 181, 182, 196, 201, 202, 206, 208, 219, 223, 226, 235, 237, 246, 252, 277, 284, 289, 297, 301, 303, 305, 311, 321, 327, 328, 340, 343, 348, 350, 360, 367, 368, 370, 373, 374, 375, 379, 381, 387, 391, 401, 403, 411, 412, 444, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 469, 470, 472, 481, 493, 496, 498, 504, 505, 520, 526, 532, 546, 547, 562, 571, 575, 576, 578, 579, 582, 583, 591, 605, 607, 615, 616, 617, 618, 625, 632, 641, 649, 650, 653, 656, 658, 660, 664, 673, 675, 684, 688, 715, 720, 728, 732, 734, 741, 747, 758, 761, 774, 777, 786, 788, 798, 805, 806, 808, 811, 812, 813, 814, 817, 819, 826, 837, 853, 864, 865, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 901, 902, 905, 913, 926, 929, 931, 937, 938, 954, 968, 973, 983, 991], "int": [11, 12, 14, 22, 23, 27, 29, 33, 37, 64, 91, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 122, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 144, 147, 148, 150, 159, 160, 161, 163, 168, 169, 170, 172, 174, 175, 176, 180, 181, 182, 192, 194, 196, 200, 201, 202, 204, 206, 207, 208, 209, 214, 217, 219, 223, 226, 228, 230, 237, 246, 252, 259, 282, 283, 284, 288, 289, 297, 298, 301, 302, 303, 305, 311, 316, 317, 318, 327, 328, 373, 374, 375, 379, 380, 381, 387, 390, 391, 412, 441, 443, 444, 445, 449, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 472, 477, 481, 489, 494, 497, 498, 500, 502, 504, 505, 514, 520, 521, 522, 526, 532, 534, 539, 546, 547, 552, 553, 554, 560, 562, 568, 570, 571, 574, 575, 576, 578, 579, 580, 581, 582, 583, 591, 605, 607, 616, 617, 618, 625, 629, 632, 641, 649, 650, 653, 654, 656, 658, 659, 660, 664, 665, 668, 675, 684, 688, 704, 705, 713, 714, 715, 719, 720, 728, 729, 732, 733, 734, 741, 742, 746, 747, 748, 749, 750, 758, 761, 811, 812, 813, 814, 817, 818, 819, 825, 826, 827, 850, 852, 853, 860, 864, 865, 867, 868, 869, 870, 871, 874, 877, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 901, 902, 905, 910, 913, 922, 927, 930, 931, 933, 935, 937, 938, 947, 953, 954, 955, 956, 963, 968, 973, 983, 991], "size": [12, 33, 101, 102, 122, 123, 124, 126, 128, 144, 157, 223, 252, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 539, 575, 576, 591, 623, 653, 688, 811, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 983, 991], "overwrit": [12, 28, 88, 90, 91, 92, 94, 101, 102, 112, 132, 252, 616, 688], "chunk": [12, 98, 101, 102, 110, 112, 114, 115, 116, 124, 126, 146, 170, 181, 252, 265, 450, 591, 653, 688, 696, 746, 823, 864, 878, 960, 983], "stream": [12, 30, 69, 156, 221, 252, 609, 614, 616, 622, 633, 637, 641, 651, 652, 653, 661, 688], "engin": [12, 28, 103, 128, 133, 156, 221, 234, 252, 622, 633, 637, 661, 672, 688, 697, 983], "By": [12, 101, 102, 105, 112, 172, 206, 226, 252, 481, 497, 532, 546, 564, 571, 578, 579, 583, 591, 629, 656, 664, 688, 913, 930, 965, 973, 983], "determin": [12, 29, 60, 62, 70, 91, 94, 101, 102, 105, 110, 112, 116, 133, 151, 157, 158, 169, 170, 220, 225, 252, 303, 314, 342, 358, 420, 428, 452, 456, 457, 458, 459, 460, 462, 463, 464, 476, 591, 623, 624, 688, 734, 744, 776, 796, 827, 858, 909, 983], "schema": [12, 53, 63, 64, 65, 70, 73, 83, 84, 86, 88, 90, 91, 92, 94, 95, 101, 102, 107, 111, 112, 115, 122, 124, 133, 135, 136, 143, 144, 179, 182, 215, 252, 303, 428, 534, 580, 591, 607, 608, 613, 633, 638, 669, 672, 688, 751, 983], "thread": [12, 27, 98, 101, 102, 103, 128, 252, 266, 285, 591, 716], "pool": [12, 128], "For": [12, 29, 103, 104, 105, 113, 146, 158, 171, 172, 234, 252, 303, 313, 373, 374, 375, 429, 451, 476, 483, 489, 490, 498, 549, 558, 559, 591, 624, 629, 672, 688, 696, 812, 813, 814, 879, 909, 916, 922, 923, 931, 965, 983], "some": [12, 25, 29, 91, 101, 102, 112, 142, 252, 612, 688, 838, 983, 991], "dataset": [12, 101, 102, 112, 117, 408, 591, 602, 633, 688, 851, 983], "esp": 12, "when": [12, 14, 16, 20, 29, 33, 53, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 96, 101, 102, 103, 106, 110, 112, 113, 114, 115, 124, 126, 133, 134, 143, 144, 146, 148, 151, 157, 185, 194, 198, 205, 213, 219, 221, 252, 303, 316, 317, 318, 358, 373, 374, 375, 381, 418, 420, 429, 444, 478, 479, 495, 501, 507, 508, 540, 549, 558, 591, 605, 618, 623, 633, 647, 653, 655, 660, 661, 688, 696, 748, 749, 750, 796, 811, 812, 813, 814, 819, 858, 897, 898, 928, 934, 940, 941, 961, 983], "have": [12, 25, 29, 62, 73, 89, 101, 102, 105, 124, 126, 146, 169, 189, 195, 212, 252, 327, 373, 374, 375, 429, 449, 508, 510, 591, 637, 651, 668, 688, 696, 758, 812, 813, 814, 824, 877, 941, 943, 983, 991], "larg": [12, 157, 158, 172, 225, 252, 355, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 624, 629, 688, 793, 797, 804], "element": [12, 22, 99, 123, 126, 129, 134, 168, 186, 194, 206, 219, 226, 252, 266, 268, 269, 270, 271, 272, 273, 283, 285, 286, 311, 319, 320, 322, 323, 324, 325, 326, 327, 377, 390, 399, 414, 415, 443, 449, 452, 467, 473, 474, 475, 480, 481, 504, 505, 523, 524, 526, 532, 546, 571, 575, 576, 578, 579, 583, 591, 605, 656, 660, 664, 688, 697, 698, 699, 700, 701, 702, 703, 714, 716, 717, 741, 747, 752, 753, 754, 755, 756, 757, 758, 815, 820, 826, 838, 850, 853, 855, 856, 871, 877, 895, 906, 907, 908, 912, 913, 937, 938, 954, 957, 958, 963, 968, 969, 973, 983], "too": [12, 157, 158, 172, 225, 252, 355, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 624, 629, 688, 793, 797, 804], "optimist": 12, "lead": [12, 95, 117, 252, 468, 495, 507, 514, 521, 531, 546, 578, 591, 633, 672, 688, 899, 928, 940, 947, 983], "out": [12, 95, 118, 158, 252, 288, 302, 307, 397, 400, 483, 485, 584, 591, 624, 652, 653, 688, 719, 733, 737, 916, 918], "memori": [12, 70, 88, 89, 92, 93, 94, 101, 102, 106, 110, 112, 114, 115, 116, 132, 133, 146, 203, 234, 252, 450, 471, 591, 653, 672, 688, 696, 697, 878, 903, 904, 983], "error": [12, 74, 101, 102, 112, 157, 158, 172, 194, 225, 252, 290, 302, 307, 313, 355, 359, 366, 407, 456, 457, 458, 459, 460, 462, 463, 464, 483, 485, 489, 491, 492, 508, 509, 510, 512, 591, 623, 624, 629, 672, 688, 721, 733, 737, 742, 793, 797, 804, 916, 918, 922, 924, 925, 941, 942, 943, 945, 983], "row": [12, 17, 22, 27, 29, 31, 33, 62, 63, 65, 80, 82, 87, 91, 92, 94, 95, 101, 102, 105, 106, 110, 112, 114, 115, 116, 119, 122, 124, 133, 134, 135, 142, 146, 149, 151, 155, 157, 159, 160, 165, 167, 168, 169, 170, 172, 173, 174, 178, 182, 196, 204, 208, 209, 212, 214, 219, 221, 223, 224, 230, 234, 237, 246, 252, 266, 277, 286, 303, 378, 391, 412, 443, 453, 477, 479, 488, 520, 540, 549, 550, 558, 562, 566, 569, 573, 582, 584, 591, 605, 607, 609, 612, 616, 619, 620, 623, 625, 629, 630, 632, 633, 637, 653, 654, 658, 659, 660, 661, 663, 668, 672, 675, 684, 688, 696, 717, 816, 826, 850, 871, 881, 910, 921, 954, 983, 991], "per": [12, 27, 29, 122, 124, 134, 155, 182, 183, 205, 219, 241, 243, 244, 252, 266, 285, 288, 302, 312, 479, 540, 591, 605, 655, 660, 679, 681, 682, 688, 716, 719, 733], "everi": [12, 101, 102, 112, 157, 209, 212, 225, 252, 279, 280, 284, 286, 288, 289, 298, 301, 322, 323, 324, 325, 326, 327, 359, 366, 378, 488, 522, 549, 550, 591, 616, 623, 659, 688, 710, 711, 715, 717, 719, 720, 729, 732, 754, 755, 756, 757, 758, 797, 804, 816, 921, 956, 983], "process": [12, 27, 128, 252, 652, 653, 688], "liter": [13, 17, 67, 72, 105, 125, 126, 127, 155, 169, 175, 176, 180, 181, 184, 194, 195, 198, 207, 211, 224, 229, 252, 262, 264, 306, 333, 372, 379, 386, 388, 389, 395, 407, 410, 417, 433, 435, 439, 445, 450, 483, 498, 499, 517, 527, 535, 536, 539, 542, 544, 545, 551, 552, 553, 564, 566, 569, 574, 580, 581, 591, 618, 647, 663, 666, 688, 694, 695, 736, 767, 817, 831, 897, 898, 916, 931, 932, 983], "left": [13, 72, 119, 120, 157, 158, 171, 172, 224, 252, 373, 374, 375, 394, 395, 456, 457, 458, 459, 460, 462, 463, 464, 467, 494, 514, 525, 542, 549, 550, 558, 573, 584, 591, 623, 624, 628, 629, 663, 688, 812, 813, 814, 831, 895, 927, 947, 967, 983], "center": [13, 29, 252, 373, 374, 375, 455, 456, 457, 458, 459, 460, 462, 463, 464, 591, 812, 813, 814, 883, 884, 885, 886, 887, 888, 890, 891, 892, 983], "right": [13, 15, 29, 72, 101, 102, 119, 120, 157, 158, 171, 172, 252, 373, 374, 375, 395, 456, 457, 458, 459, 460, 462, 463, 464, 467, 476, 500, 542, 591, 623, 624, 628, 629, 688, 812, 813, 814, 831, 895, 909, 933, 983], "cell": 13, "align": [13, 29, 62, 252, 514, 947], "keyerror": [13, 17], "recognis": [13, 17, 121], "column_abc": 13, "column_xyz": 13, "visibl": [14, 144, 252, 811, 983], "eg": [14, 22, 29, 252, 359, 508, 510, 527, 591, 941, 943], "low": [14, 128], "rang": [14, 29, 71, 72, 103, 139, 144, 157, 170, 252, 337, 350, 356, 357, 359, 366, 367, 394, 539, 544, 552, 553, 591, 623, 688, 759, 760, 771, 788, 794, 795, 797, 804, 805, 811, 871, 875, 983], "100": [14, 29, 91, 94, 101, 102, 112, 115, 252, 514, 539, 688, 884, 885, 887, 983, 991], "print": [14, 16, 22, 102, 118, 143, 155, 156, 170, 173, 214, 231, 252, 393, 554, 591, 626, 688, 838, 883, 963, 983, 991], "98": [14, 163, 252, 311, 478, 521, 526, 591], "99": [14, 29, 147, 148, 163, 166, 252, 260, 311, 379, 381, 478, 521, 526, 591, 617, 618, 688, 810, 817, 983], "tbl_col": 14, "10": [14, 26, 27, 29, 30, 33, 62, 70, 71, 72, 95, 103, 112, 124, 126, 136, 146, 154, 157, 158, 160, 162, 163, 164, 181, 185, 187, 191, 192, 198, 208, 229, 232, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 252, 265, 274, 275, 276, 278, 284, 289, 297, 298, 301, 316, 321, 323, 326, 328, 330, 331, 333, 351, 352, 358, 359, 366, 369, 390, 391, 394, 399, 407, 411, 412, 414, 443, 444, 457, 477, 514, 520, 534, 542, 549, 555, 558, 560, 562, 564, 565, 571, 578, 582, 591, 609, 623, 624, 625, 627, 632, 640, 641, 647, 653, 657, 658, 666, 670, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 688, 697, 715, 720, 728, 729, 732, 748, 759, 761, 767, 796, 804, 807, 810, 826, 838, 853, 855, 871, 897, 898, 954, 983, 991], "95": [14, 260, 591], "96": [14, 260, 591], "97": [14, 163, 252, 260, 591], "move": [15, 373, 374, 375, 456, 457, 459, 463, 591, 812, 813, 814, 884, 885, 887, 891, 983], "inlin": [15, 483, 489, 490, 498, 916, 922, 923, 931], "parenthes": 15, "below": [16, 29, 104, 113, 142, 252, 394, 584, 591, 612, 688], "ascii_ful": 17, "ascii_full_condens": 17, "ascii_no_bord": 17, "ascii_borders_onli": 17, "ascii_borders_only_condens": 17, "ascii_horizontal_onli": 17, "ascii_markdown": 17, "utf8_ful": [17, 62, 95], "utf8_full_condens": [17, 95], "utf8_no_bord": 17, "utf8_borders_onli": 17, "utf8_horizontal_onli": 17, "noth": [17, 484, 489, 492, 917, 922, 925], "none": [17, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 46, 51, 62, 71, 72, 73, 88, 90, 91, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 133, 135, 139, 142, 147, 148, 155, 157, 158, 159, 164, 168, 171, 172, 173, 176, 178, 182, 183, 186, 194, 196, 198, 202, 204, 205, 211, 213, 216, 220, 221, 222, 223, 224, 225, 229, 232, 252, 261, 265, 266, 278, 288, 298, 303, 305, 316, 317, 318, 321, 323, 326, 330, 331, 358, 359, 366, 373, 374, 375, 376, 379, 380, 381, 387, 390, 394, 395, 401, 402, 403, 404, 405, 411, 418, 420, 440, 443, 449, 450, 455, 456, 457, 458, 459, 460, 462, 463, 464, 466, 470, 471, 472, 473, 477, 478, 482, 483, 486, 487, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 512, 514, 515, 516, 525, 535, 537, 539, 542, 545, 547, 553, 554, 556, 557, 564, 565, 566, 569, 574, 575, 576, 577, 579, 580, 583, 584, 591, 607, 608, 612, 617, 618, 623, 624, 627, 628, 629, 631, 633, 637, 647, 650, 651, 652, 653, 654, 655, 661, 662, 663, 666, 667, 669, 670, 672, 688, 697, 704, 705, 719, 729, 734, 747, 748, 759, 760, 762, 778, 779, 780, 785, 796, 797, 804, 809, 810, 812, 813, 814, 817, 818, 819, 821, 824, 825, 827, 829, 830, 831, 840, 843, 844, 847, 850, 851, 858, 859, 860, 861, 862, 866, 875, 876, 877, 883, 884, 885, 886, 887, 888, 890, 891, 892, 894, 898, 900, 902, 905, 906, 909, 910, 913, 915, 916, 919, 920, 924, 925, 926, 927, 928, 929, 930, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 945, 959, 962, 963, 966, 967, 973, 974, 983], "rounded_corn": 17, "style": [17, 29, 186, 252], "border": 17, "line": [17, 29, 101, 102, 105, 112, 155, 165, 167, 252, 489, 922], "includ": [17, 25, 27, 29, 68, 104, 113, 124, 134, 139, 144, 157, 219, 220, 223, 252, 360, 395, 503, 504, 549, 591, 605, 623, 660, 688, 760, 798, 811, 831, 936, 937, 974, 983], "divid": [17, 359, 366, 373, 374, 375, 408, 591, 797, 804, 812, 813, 814, 851, 983], "same": [17, 29, 53, 62, 69, 73, 106, 112, 122, 133, 140, 156, 205, 221, 229, 232, 234, 252, 258, 265, 366, 378, 424, 427, 442, 455, 456, 457, 458, 459, 460, 462, 463, 464, 479, 516, 543, 591, 611, 622, 633, 655, 661, 666, 670, 672, 688, 692, 696, 697, 767, 816, 883, 884, 885, 886, 887, 888, 890, 891, 892, 975, 983], "dens": [17, 155, 252, 449, 591, 877, 983], "space": 17, "horizont": [17, 70, 151, 162, 223, 252, 535, 536, 544, 545, 549, 550, 551, 555, 558, 566, 569, 573, 581], "markdown": 17, "compat": [17, 29, 33, 103, 252, 483, 484, 489, 490, 498, 499, 653, 688, 916, 917, 922, 923, 931, 932], "No": 17, "appli": [17, 27, 29, 48, 70, 112, 121, 124, 126, 151, 185, 252, 337, 340, 342, 343, 344, 346, 348, 350, 353, 356, 357, 360, 367, 368, 370, 374, 375, 418, 444, 455, 456, 457, 459, 463, 498, 508, 509, 510, 512, 534, 539, 549, 550, 558, 565, 573, 591, 625, 632, 633, 640, 688, 769, 770, 771, 774, 776, 777, 781, 783, 786, 788, 791, 794, 795, 798, 801, 805, 806, 808, 813, 814, 883, 884, 885, 887, 891, 931, 941, 942, 943, 945, 983], "round": [17, 29, 64, 95, 252, 315, 385, 523, 591, 745, 822, 983], "corner": [17, 95], "op": [17, 126, 252, 452, 591, 688, 983], "The": [17, 28, 29, 33, 45, 54, 62, 68, 88, 90, 91, 92, 94, 98, 101, 103, 110, 112, 128, 133, 141, 143, 155, 156, 157, 158, 159, 164, 169, 172, 179, 184, 194, 195, 198, 222, 225, 229, 232, 234, 252, 302, 305, 306, 307, 308, 337, 350, 355, 356, 359, 362, 366, 367, 376, 379, 387, 390, 418, 442, 449, 452, 455, 456, 457, 458, 459, 460, 462, 463, 464, 473, 476, 482, 485, 486, 491, 493, 494, 495, 500, 501, 507, 508, 514, 543, 556, 560, 575, 576, 577, 580, 584, 585, 587, 591, 592, 593, 597, 598, 599, 623, 624, 625, 627, 629, 632, 633, 638, 641, 647, 653, 662, 666, 670, 672, 688, 697, 733, 736, 737, 738, 747, 771, 788, 793, 794, 797, 800, 804, 805, 817, 825, 830, 877, 883, 884, 885, 886, 887, 888, 890, 891, 892, 906, 909, 915, 918, 919, 924, 926, 927, 928, 933, 934, 940, 941, 947, 977, 979, 983, 984, 987, 988, 989, 991], "one": [17, 28, 29, 52, 62, 80, 88, 90, 91, 92, 93, 94, 125, 126, 127, 130, 148, 149, 155, 156, 157, 158, 169, 178, 186, 194, 195, 199, 218, 233, 252, 260, 303, 381, 407, 415, 455, 478, 490, 521, 581, 584, 591, 618, 619, 622, 623, 624, 637, 648, 667, 671, 688, 696, 734, 819, 847, 856, 883, 923, 948, 983], "more": [17, 29, 31, 33, 52, 62, 87, 88, 89, 90, 91, 92, 93, 94, 104, 110, 113, 124, 126, 130, 133, 138, 139, 169, 173, 178, 182, 194, 195, 196, 221, 234, 252, 263, 266, 304, 316, 317, 318, 407, 408, 415, 418, 441, 466, 476, 490, 528, 581, 584, 591, 637, 653, 661, 672, 688, 697, 735, 748, 749, 750, 760, 847, 851, 894, 909, 923, 969, 983, 991], "semigraph": 17, "box": [17, 133, 252], "draw": [17, 22, 23, 123, 991], "found": [17, 27, 75, 84, 86, 91, 95, 143, 224, 252, 467, 492, 508, 510, 591, 663, 688, 895, 925, 941, 943, 983], "unicod": 17, "block": [17, 156, 221, 252, 622, 644, 661, 668, 688, 897, 898, 983], "http": [17, 29, 89, 103, 132, 138, 252, 489, 922], "en": [17, 29, 252], "wikipedia": 17, "org": [17, 89, 103, 132, 138, 252], "wiki": 17, "drawing_charact": 17, "box_draw": 17, "hide": [18, 19, 20, 21, 29, 252], "etc": [18, 29, 101, 104, 106, 110, 113, 114, 116, 252, 539, 897, 898, 983], "inform": [20, 68, 104, 113, 138, 252, 316, 317, 318, 408, 476, 483, 489, 490, 498, 591, 641, 688, 748, 749, 750, 851, 909, 916, 922, 923, 931, 983], "separ": [21, 27, 96, 98, 101, 102, 112, 184, 186, 213, 220, 222, 252, 266, 286, 290, 488, 545, 549, 550, 591, 662, 688, 717, 721, 921, 952, 961, 983], "between": [21, 70, 121, 122, 124, 126, 188, 244, 252, 290, 313, 329, 395, 443, 448, 460, 482, 546, 548, 571, 572, 575, 576, 578, 591, 642, 682, 688, 721, 742, 762, 831, 871, 876, 888, 915, 983], "set_tbl_column_data_type_inlin": 21, "max": [22, 29, 33, 128, 139, 148, 156, 157, 158, 186, 252, 303, 316, 317, 323, 381, 442, 449, 456, 468, 505, 591, 618, 622, 623, 624, 653, 688, 734, 748, 749, 754, 760, 819, 877, 884, 899, 938, 983], "both": [22, 27, 53, 72, 103, 157, 158, 171, 172, 179, 194, 252, 265, 395, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 624, 628, 629, 638, 688, 831, 840, 983], "tbl_row": 22, "width": [23, 29, 101, 102, 252, 494, 500, 514, 688, 927, 933, 947], "char": [23, 53, 73, 490, 496, 923, 929], "enabl": [24, 73, 198, 229, 252, 468, 591, 647, 666, 688, 899, 983], "addit": [24, 29, 91, 104, 113, 122, 140, 145, 156, 184, 198, 199, 205, 222, 229, 232, 252, 259, 376, 379, 442, 479, 483, 489, 490, 498, 535, 536, 540, 542, 543, 544, 545, 551, 556, 566, 569, 577, 580, 581, 591, 611, 615, 622, 647, 648, 655, 662, 666, 670, 688, 817, 916, 922, 923, 931, 983], "verbos": [24, 130, 490, 923], "debug": [24, 609, 616, 633, 688, 991], "log": [24, 64, 311, 371, 415, 435, 445, 526, 591, 741, 810, 968, 983], "if_set": 25, "env_onli": 25, "dict": [25, 29, 33, 51, 63, 65, 68, 88, 90, 91, 92, 93, 94, 101, 102, 104, 105, 106, 107, 110, 111, 112, 113, 114, 116, 124, 169, 184, 190, 194, 195, 197, 211, 212, 252, 420, 591, 644, 646, 688, 858, 983], "show": [25, 29, 142, 155, 173, 183, 252, 612, 641, 651, 688], "variabl": [25, 96, 125, 128, 178, 213, 252, 637, 688, 961, 983], "restrict": [25, 505, 938], "dictionari": [25, 29, 88, 90, 91, 92, 94, 101, 102, 107, 111, 112, 169, 184, 194, 195, 211, 212, 252, 420, 591, 688, 760, 858, 983], "those": [25, 29, 101, 252, 449, 489, 591, 877, 922, 983], "been": [25, 29, 71, 96, 252, 449, 591, 877, 983], "set_fmt_float": 25, "directli": [25, 124, 126, 130, 373, 374, 375, 591, 688, 812, 813, 814, 983, 991], "via": [25, 101, 102, 105, 112, 114, 115, 116, 169, 195, 252, 266, 591], "set_stat": 25, "all_stat": 25, "file": [26, 27, 30, 31, 32, 33, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 146, 252, 616, 643, 652, 653, 669, 688, 696, 983], "binaryio": [26, 30, 100, 101, 105, 106, 107, 110, 111, 252], "bytesio": [26, 27, 29, 30, 33, 100, 101, 102, 105, 106, 110, 252], "path": [26, 27, 29, 30, 31, 32, 33, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 252, 468, 492, 591, 643, 652, 653, 669, 688, 899, 925, 983], "compress": [26, 30, 33, 252, 652, 653, 688], "avrocompress": [26, 252], "uncompress": [26, 30, 33, 106, 114, 252, 653, 688], "write": [26, 27, 28, 29, 30, 31, 33, 102, 106, 252, 316, 317, 318, 591, 631, 651, 653, 669, 688, 748, 749, 750, 983], "apach": [26, 33, 100, 103, 252], "avro": [26, 100, 252, 602], "should": [26, 27, 29, 30, 31, 32, 33, 88, 90, 92, 94, 96, 99, 104, 112, 121, 122, 126, 129, 132, 133, 140, 157, 158, 169, 172, 194, 195, 212, 213, 222, 225, 234, 252, 260, 266, 285, 314, 327, 355, 359, 366, 369, 376, 401, 403, 455, 456, 457, 458, 459, 460, 462, 463, 464, 467, 476, 543, 556, 563, 564, 575, 576, 584, 591, 611, 623, 624, 628, 629, 633, 651, 652, 653, 662, 669, 672, 688, 697, 716, 744, 758, 793, 797, 804, 807, 883, 884, 885, 886, 887, 888, 890, 891, 892, 895, 909, 983], "written": [26, 27, 29, 30, 31, 32, 33, 252, 652, 653, 669, 688], "snappi": [26, 33, 252, 653, 688], "deflat": [26, 252], "import": [26, 27, 29, 30, 33, 36, 62, 72, 88, 92, 93, 112, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 139, 155, 157, 170, 172, 215, 216, 223, 225, 252, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 554, 623, 629, 633, 688, 752, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 835, 839, 841, 842, 847, 883, 907, 957, 983, 991], "pathlib": [26, 27, 30, 33, 112, 252], "foo": [26, 27, 30, 31, 32, 33, 96, 133, 137, 138, 140, 141, 142, 143, 146, 149, 150, 151, 152, 153, 154, 159, 160, 161, 162, 163, 164, 166, 171, 175, 176, 177, 180, 183, 186, 188, 190, 191, 192, 194, 196, 197, 198, 200, 201, 202, 204, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 220, 221, 222, 226, 227, 228, 231, 252, 261, 282, 287, 288, 291, 292, 316, 317, 318, 355, 391, 393, 412, 453, 469, 470, 482, 484, 486, 488, 490, 495, 501, 503, 505, 507, 511, 513, 520, 522, 535, 538, 539, 541, 543, 546, 547, 548, 557, 561, 562, 566, 567, 568, 569, 570, 571, 572, 577, 578, 579, 582, 583, 584, 591, 610, 611, 612, 613, 619, 626, 627, 628, 644, 646, 647, 661, 662, 665, 667, 669, 688, 721, 748, 793, 881, 917, 919, 921, 923, 938, 983], "bar": [26, 27, 30, 31, 32, 33, 96, 133, 137, 138, 140, 141, 142, 143, 146, 149, 150, 151, 152, 153, 154, 160, 162, 163, 164, 166, 171, 175, 176, 177, 180, 183, 186, 188, 190, 191, 192, 194, 196, 197, 198, 201, 202, 204, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 221, 222, 226, 227, 231, 252, 261, 292, 393, 476, 486, 488, 503, 505, 535, 538, 541, 543, 546, 547, 548, 557, 562, 566, 567, 568, 569, 570, 571, 577, 578, 579, 582, 583, 584, 591, 610, 611, 612, 613, 619, 626, 627, 628, 644, 646, 647, 661, 662, 665, 669, 688, 721, 909, 919, 921, 938, 983], "ham": [26, 27, 30, 33, 96, 137, 138, 140, 141, 142, 143, 149, 150, 152, 159, 160, 162, 171, 175, 176, 177, 180, 183, 188, 190, 192, 194, 196, 197, 198, 201, 202, 204, 206, 207, 208, 213, 214, 215, 216, 217, 221, 226, 227, 252, 543, 610, 611, 612, 613, 619, 628, 644, 646, 647, 661, 667, 688], "d": [26, 27, 30, 33, 53, 70, 73, 91, 117, 139, 155, 159, 160, 163, 171, 208, 210, 223, 227, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 252, 259, 339, 362, 365, 395, 444, 471, 484, 490, 504, 508, 509, 510, 542, 560, 591, 628, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 688, 773, 800, 803, 831, 917, 923, 937, 941, 942, 943, 983], "e": [26, 27, 30, 33, 53, 73, 89, 101, 102, 105, 106, 110, 114, 116, 139, 155, 157, 158, 160, 172, 208, 210, 223, 225, 252, 259, 266, 355, 359, 366, 371, 376, 395, 413, 420, 456, 457, 458, 459, 460, 462, 463, 464, 471, 476, 556, 584, 591, 623, 624, 629, 631, 644, 688, 793, 797, 804, 810, 831, 896, 909, 965, 983], "dirpath": [26, 27, 30, 33, 112, 252], "new_fil": [26, 27, 30, 33, 252], "has_head": [27, 29, 101, 102, 105, 112, 252], "quot": [27, 101, 102, 112, 252], "batch_siz": [27, 101, 102, 115, 252], "1024": [27, 101, 102, 115, 252, 653, 688], "datetime_format": [27, 252], "date_format": [27, 252], "time_format": [27, 252], "float_precis": [27, 29, 252], "null_valu": [27, 101, 102, 112, 252], "comma": [27, 252], "csv": [27, 101, 102, 105, 112, 252, 602, 652, 653, 688], "result": [27, 31, 32, 62, 92, 94, 103, 104, 112, 114, 116, 117, 126, 146, 157, 158, 182, 202, 216, 225, 232, 252, 303, 362, 365, 373, 374, 375, 379, 408, 442, 453, 455, 456, 457, 458, 459, 460, 462, 463, 464, 468, 470, 503, 504, 510, 527, 539, 549, 550, 565, 575, 576, 591, 606, 623, 624, 633, 641, 650, 652, 653, 669, 670, 688, 696, 800, 803, 812, 813, 814, 851, 881, 883, 884, 885, 886, 887, 888, 890, 891, 892, 899, 902, 936, 937, 943, 965, 983, 991], "If": [27, 29, 30, 31, 32, 53, 67, 68, 71, 72, 88, 89, 90, 91, 92, 93, 94, 96, 101, 102, 104, 105, 106, 110, 112, 113, 114, 115, 116, 125, 132, 133, 134, 142, 146, 155, 157, 158, 160, 168, 169, 172, 174, 178, 182, 195, 196, 204, 208, 212, 213, 215, 219, 220, 221, 223, 224, 252, 266, 298, 303, 316, 317, 318, 333, 351, 352, 358, 382, 408, 418, 420, 449, 451, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 472, 476, 477, 491, 493, 495, 496, 501, 502, 503, 504, 505, 507, 508, 509, 510, 512, 535, 536, 537, 539, 546, 547, 549, 551, 558, 564, 566, 569, 574, 575, 576, 578, 580, 581, 584, 591, 605, 612, 614, 623, 624, 628, 629, 633, 637, 644, 653, 654, 660, 661, 663, 669, 672, 688, 696, 697, 729, 734, 748, 749, 750, 759, 767, 789, 790, 796, 824, 826, 827, 850, 851, 853, 875, 877, 879, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 899, 905, 909, 910, 924, 926, 928, 929, 934, 935, 936, 937, 938, 940, 941, 942, 943, 945, 954, 960, 965, 974, 983], "instead": [27, 31, 32, 67, 72, 99, 101, 110, 124, 129, 133, 157, 158, 169, 172, 182, 184, 194, 195, 198, 216, 225, 229, 252, 276, 355, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 493, 495, 501, 507, 539, 566, 569, 574, 580, 591, 617, 623, 624, 629, 647, 666, 669, 688, 706, 793, 797, 804, 897, 898, 926, 928, 934, 940, 966, 983], "whether": [27, 72, 92, 94, 126, 199, 252, 342, 358, 360, 425, 426, 468, 591, 633, 648, 688, 776, 796, 798], "header": [27, 29, 33, 95, 101, 102, 105, 112, 143, 186, 220, 252, 653, 688], "field": [27, 54, 84, 86, 91, 215, 222, 252, 303, 420, 490, 491, 504, 505, 516, 549, 550, 565, 580, 591, 662, 688, 734, 937, 938, 950, 952], "symbol": [27, 252], "byte": [27, 101, 102, 105, 106, 107, 110, 111, 112, 144, 252, 306, 309, 310, 493, 496, 653, 688, 736, 739, 740, 811, 926, 929, 983], "specifi": [27, 29, 62, 72, 75, 84, 86, 105, 124, 134, 140, 144, 145, 148, 156, 184, 194, 198, 199, 205, 219, 222, 229, 232, 252, 373, 374, 375, 376, 381, 420, 442, 452, 479, 494, 500, 535, 536, 540, 542, 543, 544, 545, 551, 556, 566, 569, 577, 580, 581, 591, 605, 611, 615, 618, 622, 647, 648, 655, 660, 662, 666, 670, 688, 811, 812, 813, 814, 819, 927, 933, 983], "defin": [27, 29, 36, 72, 121, 122, 124, 133, 157, 158, 182, 185, 234, 252, 266, 302, 395, 444, 456, 457, 458, 459, 460, 462, 463, 464, 537, 564, 580, 591, 623, 624, 640, 672, 688, 697, 733, 831, 983], "chrono": [27, 252, 362, 365, 508, 509, 510, 512, 800, 803, 941, 942, 943, 945], "rust": [27, 33, 81, 106, 110, 133, 234, 252, 672, 697, 983], "crate": [27, 252, 483, 484, 489, 490, 498, 499, 508, 509, 510, 512, 916, 917, 922, 923, 931, 932, 941, 942, 943, 945], "fraction": [27, 119, 120, 196, 252, 360, 443, 466, 508, 510, 591, 798, 871, 894, 941, 943, 983], "second": [27, 72, 123, 157, 158, 172, 225, 252, 355, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 508, 510, 553, 554, 584, 591, 623, 624, 629, 688, 793, 797, 804, 941, 943, 991], "precis": [27, 29, 37, 169, 195, 212, 252, 332, 766], "infer": [27, 88, 90, 91, 92, 93, 94, 101, 102, 105, 112, 115, 133, 252, 453, 491, 508, 509, 510, 512, 591, 688, 881, 924, 941, 942, 943, 945, 983], "maximum": [27, 101, 102, 112, 122, 123, 124, 126, 175, 252, 279, 421, 437, 449, 566, 591, 634, 688, 710, 748, 778, 859, 867, 872, 877, 983], "timeunit": [27, 36, 38, 72, 252, 332, 333, 364, 369, 510, 766, 767, 802, 807, 943], "frame": [27, 28, 29, 50, 51, 62, 91, 119, 124, 133, 135, 169, 170, 179, 182, 185, 194, 195, 216, 223, 252, 607, 638, 640, 688, 747, 983, 991], "datetim": [27, 29, 62, 72, 95, 124, 139, 155, 157, 158, 170, 172, 225, 252, 282, 283, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 456, 457, 458, 459, 460, 462, 463, 464, 508, 510, 525, 554, 560, 564, 574, 591, 623, 624, 629, 688, 713, 714, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 847, 867, 868, 898, 941, 943, 967, 983], "place": [27, 134, 141, 162, 163, 191, 201, 202, 205, 219, 227, 252, 276, 290, 297, 469, 470, 478, 591, 605, 649, 650, 655, 660, 688, 706, 721, 728, 878, 880, 901, 902, 911, 983], "float64": [27, 29, 91, 99, 101, 124, 129, 143, 144, 151, 197, 216, 229, 252, 268, 269, 270, 271, 272, 273, 313, 319, 320, 360, 376, 401, 403, 474, 475, 523, 524, 543, 556, 591, 613, 646, 666, 688, 798, 966, 971, 983], "datatyp": [27, 31, 45, 60, 88, 90, 91, 92, 94, 97, 99, 105, 107, 111, 126, 129, 143, 145, 151, 197, 252, 286, 313, 376, 471, 488, 525, 543, 556, 564, 591, 602, 615, 646, 669, 688, 697, 717, 742, 760, 840, 845, 847, 849, 903, 921, 967, 983], "repres": [27, 46, 60, 72, 88, 90, 92, 93, 94, 206, 226, 252, 401, 403, 481, 532, 535, 543, 546, 556, 564, 571, 575, 576, 578, 579, 583, 591, 656, 664, 688, 898, 913, 973, 983], "null": [27, 62, 70, 91, 101, 102, 112, 117, 132, 134, 135, 139, 142, 148, 151, 152, 164, 171, 176, 177, 183, 186, 188, 201, 202, 205, 206, 207, 211, 216, 219, 222, 224, 226, 229, 235, 252, 261, 265, 266, 276, 284, 287, 288, 291, 297, 302, 303, 305, 307, 316, 317, 318, 321, 323, 326, 328, 330, 331, 338, 341, 345, 347, 349, 354, 361, 373, 374, 375, 376, 379, 380, 381, 382, 387, 394, 401, 402, 403, 404, 405, 411, 420, 440, 443, 450, 455, 456, 457, 458, 459, 460, 462, 463, 464, 469, 470, 471, 473, 478, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 496, 497, 500, 502, 504, 505, 506, 514, 515, 516, 525, 533, 535, 542, 544, 545, 547, 556, 564, 575, 576, 580, 584, 591, 605, 607, 612, 618, 627, 628, 649, 650, 655, 660, 662, 663, 666, 667, 669, 673, 688, 697, 706, 715, 728, 733, 734, 737, 747, 748, 761, 764, 772, 775, 782, 784, 787, 792, 799, 812, 813, 814, 817, 819, 824, 843, 844, 870, 871, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 896, 901, 902, 906, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 927, 929, 930, 933, 935, 937, 938, 939, 963, 965, 966, 967, 974, 983, 991], "empti": [27, 79, 91, 101, 102, 105, 112, 135, 136, 166, 178, 252, 564, 577, 607, 608, 637, 688, 747, 751, 834, 983], "table_nam": [28, 29, 252], "connection_uri": [28, 103, 252], "if_exist": [28, 252], "dbwritemod": [28, 252], "fail": [28, 89, 104, 106, 113, 132, 221, 252, 277, 303, 508, 509, 510, 512, 591, 661, 688, 697, 941, 942, 943, 945, 983], "dbwriteengin": [28, 252], "sqlalchemi": [28, 252], "databas": [28, 103, 252, 602], "append": [28, 124, 146, 171, 172, 252, 450, 584, 591, 628, 629, 688, 983], "creat": [28, 29, 71, 72, 88, 92, 94, 113, 122, 123, 124, 125, 126, 127, 135, 136, 157, 158, 183, 186, 225, 229, 252, 303, 333, 359, 366, 450, 502, 531, 539, 544, 552, 553, 554, 591, 607, 608, 614, 623, 624, 666, 688, 747, 751, 759, 764, 767, 797, 804, 869, 875, 878, 935, 965, 983, 991], "connect": [28, 101, 103, 106, 110, 114, 116, 117, 252, 603], "uri": [28, 103, 104, 113, 252], "postgresql": [28, 103, 252, 442, 591], "usernam": [28, 101, 103, 106, 110, 114, 116, 252], "password": [28, 101, 103, 106, 110, 114, 116, 252], "server": [28, 103, 252], "port": [28, 101, 103, 106, 110, 114, 116, 252], "replac": [28, 101, 102, 112, 147, 148, 192, 220, 229, 252, 333, 358, 420, 499, 591, 617, 666, 688, 767, 796, 858, 897, 898, 932, 983], "insert": [28, 101, 102, 106, 110, 112, 114, 115, 116, 163, 191, 220, 222, 252, 467, 482, 514, 591, 662, 688, 895, 915, 947, 983], "mode": [28, 252, 490, 574, 591, 688, 923, 983], "new": [28, 29, 99, 112, 129, 130, 133, 142, 162, 163, 182, 183, 190, 191, 209, 222, 223, 229, 252, 261, 333, 378, 394, 419, 498, 499, 504, 505, 515, 516, 522, 591, 602, 612, 644, 659, 662, 666, 672, 688, 693, 764, 767, 816, 869, 880, 931, 932, 937, 938, 948, 950, 956, 962, 975, 983], "alreadi": [28, 252, 285, 327, 591, 716, 758, 983], "adbc": [28, 103, 252], "workbook": [29, 252], "worksheet": [29, 252], "posit": [29, 140, 145, 156, 184, 198, 199, 205, 222, 229, 232, 252, 373, 374, 375, 376, 442, 479, 497, 535, 536, 540, 542, 543, 544, 545, 551, 556, 566, 569, 577, 580, 581, 591, 611, 615, 622, 647, 648, 655, 662, 666, 670, 688, 812, 813, 814, 930, 983], "tupl": [29, 103, 133, 169, 194, 195, 200, 231, 252, 453, 591, 641, 651, 688, 881, 983], "a1": [29, 63, 65, 252], "table_styl": [29, 252], "column_format": [29, 252], "dtype_format": [29, 252], "oneormoredatatyp": [29, 122, 252, 847, 983], "conditional_format": [29, 252], "conditionalformatdict": [29, 252], "column_tot": [29, 252], "columntotalsdefinit": [29, 252], "column_width": [29, 252], "row_tot": [29, 252], "rowtotalsdefinit": [29, 252], "row_height": [29, 252], "sparklin": [29, 252], "sequenc": [29, 54, 62, 69, 88, 90, 91, 92, 94, 96, 98, 101, 102, 112, 122, 123, 124, 134, 139, 140, 142, 145, 146, 171, 172, 178, 182, 185, 186, 205, 213, 219, 220, 221, 222, 223, 224, 225, 252, 303, 399, 418, 444, 479, 516, 537, 540, 549, 550, 558, 560, 565, 573, 591, 605, 611, 612, 615, 628, 629, 640, 655, 660, 661, 662, 663, 688, 696, 734, 760, 762, 898, 950, 983], "formula": [29, 252, 371, 591, 810, 983], "autofilt": [29, 252], "autofit": [29, 252], "hidden_column": [29, 252], "hide_gridlin": [29, 252], "sheet_zoom": [29, 252], "excel": [29, 105, 252, 602], "object": [29, 30, 33, 51, 72, 89, 90, 95, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 122, 124, 126, 132, 156, 157, 158, 173, 215, 216, 252, 564, 602, 608, 623, 624, 626, 631, 643, 688, 709, 743, 765, 914, 960, 983], "open": [29, 101, 102, 105, 106, 110, 114, 116, 252], "xlsxwriter": [29, 118, 252], "ha": [29, 62, 71, 96, 112, 132, 225, 252, 266, 311, 327, 407, 429, 526, 537, 591, 672, 741, 747, 758, 760, 824, 837, 968, 983], "close": [29, 72, 157, 158, 252, 395, 415, 456, 457, 458, 459, 460, 462, 463, 464, 476, 591, 623, 624, 688, 831, 909, 983], "xlsx": [29, 105, 252], "work": [29, 37, 102, 105, 158, 191, 252, 266, 285, 304, 315, 316, 317, 318, 376, 385, 442, 496, 528, 591, 624, 688, 716, 735, 745, 748, 749, 750, 822, 929, 969, 983], "directori": [29, 110, 252], "sheet1": [29, 252], "valid": [29, 48, 49, 106, 110, 126, 130, 144, 252, 327, 483, 484, 489, 490, 492, 498, 499, 591, 758, 811, 824, 916, 917, 922, 923, 925, 931, 932, 983], "notat": [29, 252], "integ": [29, 41, 42, 43, 44, 56, 57, 58, 59, 122, 124, 125, 127, 157, 158, 252, 315, 360, 385, 386, 451, 456, 457, 458, 459, 460, 461, 462, 463, 464, 497, 534, 539, 560, 591, 623, 624, 688, 704, 705, 745, 798, 822, 840, 879, 889, 898, 930, 983, 991], "medium": [29, 252], "kei": [29, 62, 68, 157, 172, 179, 184, 186, 190, 193, 252, 623, 629, 638, 644, 645, 688], "contain": [29, 62, 68, 90, 93, 95, 104, 113, 119, 123, 134, 142, 170, 182, 186, 219, 252, 266, 399, 420, 484, 487, 489, 490, 492, 505, 506, 591, 605, 612, 641, 660, 688, 858, 864, 917, 920, 922, 923, 925, 938, 939, 960, 983], "follow": [29, 68, 101, 102, 104, 112, 113, 133, 157, 158, 172, 185, 225, 252, 266, 355, 359, 366, 444, 449, 456, 457, 458, 459, 460, 462, 463, 464, 516, 527, 537, 584, 585, 587, 591, 592, 593, 597, 598, 599, 623, 624, 629, 640, 688, 793, 797, 804, 877, 897, 898, 977, 979, 983, 984, 987, 988, 989, 991], "first_column": [29, 252], "last_column": [29, 252], "banded_column": [29, 252], "banded_row": [29, 252], "sheet": [29, 105, 252], "chart": [29, 252, 641, 688], "subsequ": [29, 189, 216, 252, 303, 614, 688], "colnam": [29, 112, 124, 143, 252, 613, 688], "given": [29, 48, 49, 50, 62, 71, 72, 88, 90, 91, 92, 94, 99, 101, 102, 112, 121, 122, 124, 125, 126, 127, 129, 133, 134, 144, 145, 168, 184, 185, 194, 201, 202, 205, 219, 224, 252, 266, 282, 297, 303, 334, 362, 364, 365, 371, 395, 413, 442, 444, 449, 452, 453, 456, 457, 459, 462, 463, 464, 467, 469, 470, 490, 508, 510, 516, 556, 591, 605, 615, 633, 640, 649, 650, 655, 660, 663, 672, 688, 697, 713, 728, 734, 759, 768, 800, 802, 803, 810, 811, 827, 831, 850, 854, 857, 869, 875, 877, 881, 884, 885, 887, 890, 891, 892, 895, 901, 902, 923, 941, 943, 971, 975, 983, 991], "here": [29, 88, 90, 91, 92, 94, 103, 104, 113, 122, 124, 126, 252, 492, 688, 925], "dd": [29, 252], "mm": [29, 252], "yyyi": [29, 252], "00": [29, 72, 124, 157, 172, 225, 252, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 508, 510, 512, 554, 623, 629, 688, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 804, 805, 806, 807, 808, 941, 943, 945], "dtype": [29, 65, 73, 88, 90, 92, 94, 95, 99, 101, 102, 112, 121, 122, 123, 124, 126, 129, 132, 157, 158, 172, 214, 215, 216, 252, 266, 268, 269, 270, 271, 272, 273, 276, 279, 280, 281, 290, 302, 313, 316, 317, 318, 319, 320, 325, 326, 338, 341, 345, 347, 349, 354, 361, 369, 376, 378, 416, 418, 420, 451, 452, 456, 457, 458, 459, 460, 462, 463, 464, 471, 474, 475, 482, 491, 502, 508, 519, 521, 523, 524, 525, 530, 531, 537, 539, 547, 556, 560, 564, 565, 580, 591, 623, 624, 629, 688, 710, 711, 712, 721, 733, 742, 747, 748, 749, 750, 756, 757, 760, 761, 772, 775, 782, 784, 787, 792, 799, 807, 811, 816, 834, 840, 847, 857, 858, 882, 896, 903, 915, 924, 935, 941, 953, 963, 965, 966, 967, 971, 983, 991], "overridden": [29, 88, 90, 92, 94, 128, 252, 688], "basi": [29, 124, 252], "param": [29, 88, 90, 91, 92, 94, 101, 102, 112, 123, 124, 126, 194, 252, 688], "It": [29, 72, 133, 179, 185, 234, 252, 266, 428, 591, 633, 638, 672, 688, 897, 898, 983], "also": [29, 72, 91, 112, 122, 123, 124, 125, 126, 143, 156, 157, 158, 179, 182, 198, 205, 229, 252, 323, 326, 358, 394, 395, 449, 456, 457, 458, 459, 460, 462, 463, 464, 479, 549, 550, 558, 560, 573, 584, 590, 591, 596, 622, 623, 624, 638, 647, 655, 666, 667, 688, 796, 831, 877, 983], "group": [29, 33, 102, 156, 157, 158, 170, 182, 184, 186, 223, 225, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 260, 266, 285, 384, 442, 478, 479, 483, 489, 490, 498, 521, 537, 591, 622, 623, 624, 653, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688, 716, 916, 922, 923, 931], "float_dtyp": [29, 252], "simplifi": [29, 69, 252, 609, 614, 616, 641, 651, 652, 653, 688], "uniform": [29, 252], "condit": [29, 67, 142, 149, 194, 252, 487, 506, 558, 584, 612, 619, 688], "suppli": [29, 88, 90, 91, 92, 94, 194, 252, 444, 591, 688], "typenam": [29, 252], "3_color_scal": [29, 252], "data_bar": [29, 252], "make": [29, 54, 70, 88, 93, 101, 102, 103, 106, 110, 114, 116, 157, 158, 179, 182, 189, 225, 252, 374, 375, 420, 452, 504, 514, 591, 623, 624, 638, 688, 813, 814, 827, 858, 937, 947, 983, 991], "icon": [29, 252], "multipl": [29, 51, 69, 70, 101, 102, 112, 114, 115, 116, 122, 126, 134, 140, 144, 146, 149, 156, 157, 162, 170, 184, 186, 198, 199, 205, 219, 229, 232, 252, 302, 425, 429, 434, 435, 442, 453, 456, 457, 458, 459, 460, 462, 463, 464, 479, 535, 536, 540, 543, 549, 550, 551, 558, 565, 566, 569, 573, 581, 584, 591, 605, 611, 619, 622, 623, 647, 648, 655, 660, 666, 670, 688, 696, 733, 811, 863, 881, 983], "singl": [29, 62, 70, 101, 102, 103, 110, 112, 122, 140, 141, 142, 146, 153, 168, 184, 194, 205, 252, 266, 283, 302, 355, 382, 418, 450, 453, 479, 482, 533, 535, 536, 537, 540, 543, 544, 545, 551, 565, 566, 569, 574, 581, 591, 611, 612, 655, 688, 696, 714, 733, 793, 878, 881, 915, 960, 983], "across": [29, 252, 535, 536, 551, 566, 569, 581], "effect": [29, 132, 151, 252, 266, 591, 668, 688], "heatmap": [29, 252], "min": [29, 33, 139, 148, 157, 158, 186, 252, 316, 318, 324, 381, 442, 449, 459, 577, 591, 618, 623, 624, 653, 688, 748, 750, 755, 760, 819, 877, 887, 983, 991], "entir": [29, 252], "final": [29, 62, 116, 252, 373, 374, 375, 591, 616, 688, 812, 813, 814, 983], "made": [29, 252, 965, 983], "up": [29, 54, 103, 169, 172, 195, 212, 252, 266, 315, 514, 591, 628, 629, 633, 688, 745, 947, 983], "abov": [29, 252, 366, 584], "order": [29, 62, 91, 119, 133, 134, 156, 157, 158, 184, 185, 186, 196, 199, 205, 219, 221, 225, 252, 266, 276, 299, 304, 314, 449, 466, 467, 468, 478, 479, 516, 528, 529, 540, 591, 605, 622, 623, 624, 637, 648, 652, 653, 655, 660, 661, 688, 697, 706, 730, 735, 744, 759, 846, 875, 877, 882, 894, 895, 899, 911, 950, 969, 970, 983], "than": [29, 72, 87, 92, 94, 101, 102, 112, 117, 124, 126, 133, 155, 156, 169, 172, 184, 194, 195, 196, 223, 234, 252, 266, 388, 389, 407, 410, 417, 466, 476, 494, 500, 505, 514, 546, 578, 581, 591, 622, 629, 652, 653, 672, 688, 697, 894, 909, 927, 933, 938, 947, 983, 991], "add": [29, 50, 102, 133, 146, 157, 229, 230, 252, 446, 518, 554, 558, 584, 591, 623, 628, 666, 667, 668, 688, 696, 983], "total": [29, 144, 252, 811, 983], "export": [29, 169, 170, 195, 212, 215, 252], "numer": [29, 172, 252, 259, 316, 317, 318, 386, 395, 415, 433, 435, 445, 452, 471, 517, 527, 591, 602, 629, 688, 748, 749, 750, 760, 831, 845, 896, 903, 983, 991], "associ": [29, 62, 123, 252], "sum": [29, 62, 144, 151, 156, 158, 168, 186, 232, 252, 266, 303, 325, 326, 371, 382, 456, 457, 459, 462, 463, 464, 533, 535, 549, 551, 558, 573, 591, 609, 614, 616, 622, 624, 641, 651, 670, 688, 756, 757, 810, 811, 884, 885, 887, 890, 891, 892, 983], "pass": [29, 33, 62, 72, 90, 105, 112, 122, 124, 126, 134, 138, 140, 156, 157, 158, 160, 174, 184, 185, 198, 205, 208, 219, 225, 229, 232, 252, 266, 339, 358, 379, 393, 442, 444, 479, 495, 501, 507, 535, 536, 540, 543, 551, 560, 566, 569, 580, 581, 591, 605, 611, 622, 623, 624, 626, 633, 640, 647, 651, 655, 660, 666, 670, 688, 697, 773, 796, 817, 826, 853, 928, 934, 940, 954, 983], "must": [29, 71, 89, 90, 104, 113, 139, 145, 157, 158, 172, 179, 194, 252, 303, 418, 456, 457, 458, 459, 460, 462, 463, 464, 591, 615, 623, 624, 629, 633, 638, 688, 759, 760, 875, 983], "funcnam": [29, 252], "averag": [29, 252, 373, 374, 375, 449, 591, 812, 813, 814, 877, 983], "count_num": [29, 252], "count": [29, 101, 102, 106, 110, 112, 114, 115, 116, 139, 157, 158, 172, 182, 183, 186, 220, 224, 225, 230, 234, 243, 252, 267, 283, 322, 355, 411, 436, 440, 456, 457, 458, 459, 460, 462, 463, 464, 484, 529, 531, 538, 570, 591, 623, 624, 629, 663, 668, 672, 681, 688, 714, 760, 793, 827, 865, 870, 917, 970, 972, 983], "std_dev": [29, 252], "var": [29, 127, 252, 591, 688, 983], "pixel": [29, 252], "unit": [29, 36, 38, 72, 124, 126, 144, 252, 332, 333, 339, 364, 369, 416, 429, 508, 510, 530, 560, 591, 641, 688, 766, 767, 773, 802, 807, 811, 857, 941, 943, 971, 983, 991], "hand": [29, 101, 102, 112, 252], "side": [29, 157, 158, 252, 395, 456, 457, 458, 459, 460, 462, 463, 464, 467, 591, 623, 624, 688, 831, 895, 983], "call": [29, 102, 124, 126, 130, 133, 156, 157, 158, 173, 251, 252, 266, 323, 326, 566, 569, 591, 603, 622, 623, 624, 687, 688, 697, 983], "ad": [29, 91, 132, 157, 220, 229, 252, 265, 379, 549, 550, 591, 623, 666, 688, 817, 983], "end": [29, 72, 101, 102, 110, 112, 157, 252, 298, 309, 355, 359, 360, 376, 395, 483, 487, 490, 502, 506, 539, 543, 556, 584, 591, 623, 625, 632, 641, 688, 729, 739, 793, 797, 831, 920, 923, 935, 939, 983], "wise": [29, 62, 151, 252, 268, 269, 270, 271, 272, 273, 319, 320, 377, 414, 473, 474, 475, 523, 524, 549, 550, 558, 566, 569, 573, 591, 698, 699, 700, 701, 702, 703, 752, 753, 815, 855, 856, 906, 907, 908, 957, 958, 983], "match": [29, 70, 82, 88, 90, 91, 92, 94, 119, 120, 148, 172, 194, 252, 426, 483, 484, 487, 489, 490, 491, 492, 498, 499, 506, 508, 509, 510, 543, 618, 629, 688, 840, 847, 916, 917, 920, 922, 923, 924, 925, 931, 932, 939, 941, 942, 943, 983], "particip": [29, 252], "distinct": [29, 126, 184, 252, 304, 449, 554, 591, 735, 877, 983, 991], "referenc": [29, 252, 516], "differ": [29, 101, 117, 119, 146, 157, 158, 169, 195, 212, 220, 252, 284, 328, 337, 355, 356, 358, 367, 420, 437, 438, 508, 529, 557, 560, 591, 614, 623, 624, 688, 696, 697, 715, 761, 771, 793, 794, 796, 805, 867, 868, 896, 941, 983], "row_index": [29, 252], "height": [29, 142, 252], "provid": [29, 51, 101, 102, 103, 104, 112, 113, 124, 126, 168, 252, 303, 307, 308, 485, 486, 489, 491, 492, 560, 602, 652, 653, 688, 737, 738, 827, 850, 918, 919, 922, 924, 925, 983, 991], "intersect": [29, 252], "bodi": [29, 252], "start": [29, 72, 100, 101, 102, 106, 110, 112, 114, 115, 116, 128, 156, 157, 173, 204, 225, 230, 252, 298, 310, 337, 339, 340, 342, 343, 348, 350, 356, 357, 359, 360, 364, 366, 367, 368, 370, 376, 395, 477, 483, 487, 490, 502, 506, 539, 543, 549, 556, 558, 584, 591, 622, 623, 641, 654, 668, 688, 729, 740, 766, 768, 771, 773, 774, 776, 781, 783, 786, 788, 791, 794, 795, 797, 798, 802, 804, 805, 806, 807, 808, 831, 910, 920, 923, 935, 939, 983, 991], "zero": [29, 88, 89, 100, 101, 102, 106, 110, 123, 132, 135, 148, 169, 194, 210, 215, 216, 252, 303, 380, 381, 415, 467, 476, 514, 527, 591, 607, 618, 688, 734, 747, 819, 909, 947, 960, 965, 966, 983], "unless": [29, 62, 90, 216, 252, 688, 966, 974, 983], "marker": [29, 252], "compliant": [29, 252], "case": [29, 62, 88, 90, 91, 92, 94, 116, 128, 133, 146, 157, 158, 169, 252, 418, 419, 428, 429, 483, 490, 498, 591, 623, 624, 688, 696, 916, 923, 931, 983], "three": [29, 218, 252, 303, 467, 591, 734], "avail": [29, 98, 104, 113, 122, 130, 251, 252, 449, 585, 587, 590, 591, 592, 593, 596, 597, 598, 599, 602, 603, 616, 687, 688, 877, 977, 979, 983, 984, 987, 988, 989], "insert_befor": [29, 252], "insert_aft": [29, 252], "respect": [29, 252], "direct": [29, 103, 110, 116, 223, 252], "far": [29, 252], "thei": [29, 91, 112, 119, 130, 173, 252, 455, 591, 883, 983], "strongli": [29, 128, 133, 194, 234, 252, 266, 591, 672, 697, 983], "advis": [29, 173, 252], "structur": [29, 79, 83, 85, 146, 185, 215, 252, 444, 591, 640, 688, 696, 983], "your": [29, 101, 102, 119, 120, 133, 169, 198, 229, 232, 252, 266, 591, 609, 625, 632, 633, 647, 666, 670, 688, 697, 983, 991], "wherev": [29, 133, 234, 252, 266, 591, 672, 697, 983], "possibl": [29, 101, 133, 156, 169, 195, 221, 234, 252, 266, 416, 428, 505, 530, 591, 622, 661, 672, 688, 697, 938, 983], "simpl": [29, 126, 182, 252], "colx": [29, 252, 991], "coli": [29, 252, 991], "after": [29, 91, 100, 101, 102, 106, 110, 112, 114, 115, 116, 146, 222, 251, 252, 376, 420, 449, 514, 591, 662, 688, 696, 858, 877, 947, 983], "befor": [29, 101, 112, 128, 130, 146, 157, 172, 222, 252, 325, 326, 327, 420, 443, 455, 456, 457, 458, 459, 460, 462, 463, 464, 514, 519, 575, 576, 591, 623, 626, 629, 662, 688, 696, 756, 757, 758, 858, 871, 883, 884, 885, 886, 887, 888, 890, 891, 892, 947, 953, 983], "most": [29, 88, 101, 102, 112, 252, 429, 434, 443, 505, 531, 591, 863, 871, 938, 972, 983], "mandatori": [29, 252], "return_dtyp": [29, 133, 252, 266, 418, 420, 537, 565, 591, 697, 858, 983], "latter": [29, 146, 252, 696, 983], "appropri": [29, 252, 449, 591, 877, 983], "pure": [29, 252], "actual": [29, 91, 105, 124, 126, 252, 904, 983], "indic": [29, 67, 96, 100, 101, 102, 106, 110, 112, 121, 122, 126, 157, 158, 172, 199, 213, 225, 252, 277, 302, 355, 359, 366, 397, 400, 401, 403, 404, 405, 424, 427, 456, 457, 458, 459, 460, 462, 463, 464, 467, 473, 521, 540, 591, 623, 624, 629, 648, 688, 733, 793, 797, 804, 835, 839, 841, 842, 843, 844, 895, 906, 955, 961, 983, 991], "calcul": [29, 62, 157, 206, 226, 252, 284, 328, 373, 374, 375, 408, 416, 461, 476, 481, 530, 532, 535, 537, 546, 571, 575, 576, 578, 579, 583, 591, 623, 656, 664, 688, 715, 761, 812, 813, 814, 851, 889, 909, 913, 973, 983], "individu": [29, 124, 158, 215, 252, 266, 490, 591, 624, 653, 688, 746, 923, 983], "gridlin": [29, 252], "zoom": [29, 252], "level": [29, 33, 112, 114, 115, 116, 124, 133, 151, 182, 252, 382, 591, 625, 632, 653, 688], "definit": [29, 122, 252, 408, 591, 851, 983], "take": [29, 124, 130, 151, 179, 185, 209, 252, 355, 479, 522, 555, 557, 591, 638, 659, 688, 793, 956, 975, 983], "care": [29, 252, 266, 468, 591, 899, 983], "rel": [29, 104, 113, 119, 120, 252, 355, 373, 374, 375, 591, 793, 812, 813, 814, 983], "see": [29, 103, 104, 105, 113, 119, 120, 124, 126, 138, 171, 185, 252, 316, 317, 318, 381, 394, 408, 418, 476, 483, 489, 490, 498, 573, 591, 748, 749, 750, 851, 909, 916, 922, 923, 931, 983, 991], "readthedoc": [29, 252], "io": [29, 252], "working_with_conditional_format": [29, 252], "html": [29, 89, 103, 132, 138, 252], "similarli": [29, 91, 252], "well": [29, 101, 102, 112, 145, 186, 252, 395, 591, 615, 688, 831, 983], "adjac": [29, 252], "two": [29, 90, 92, 94, 103, 151, 178, 179, 186, 218, 233, 234, 252, 260, 303, 329, 333, 478, 521, 546, 548, 571, 575, 576, 578, 591, 637, 638, 671, 672, 688, 734, 762, 767, 983], "help": [29, 252, 616, 688], "where": [29, 67, 103, 123, 142, 146, 169, 178, 195, 206, 226, 252, 277, 368, 371, 467, 476, 479, 481, 532, 546, 571, 575, 576, 578, 579, 583, 584, 591, 637, 656, 664, 688, 696, 707, 806, 810, 895, 909, 913, 973, 975, 983], "appear": [29, 91, 119, 252, 529, 591, 970, 983], "working_with_sparklin": [29, 252], "inject": [29, 62, 252], "locat": [29, 146, 192, 217, 222, 252, 467, 591, 662, 688, 696, 895, 898, 955, 983], "syntax": [29, 133, 182, 252, 483, 489, 490, 498, 651, 688, 916, 922, 923, 931, 983], "ensur": [29, 73, 123, 124, 126, 156, 184, 194, 252, 395, 531, 591, 622, 633, 688, 965, 972, 983], "correctli": [29, 252], "microsoft": [29, 118, 252], "com": [29, 103, 252, 373, 374, 375, 489, 490, 591, 812, 813, 814, 922, 923, 983], "u": [29, 36, 38, 72, 95, 169, 195, 212, 252, 332, 333, 339, 364, 369, 508, 510, 560, 766, 767, 773, 802, 807, 941, 943], "offic": [29, 252], "f5ed2452": [29, 252], "2337": [29, 252], "4f71": [29, 252], "bed3": [29, 252], "c8ae6d2b276": [29, 252], "instanti": [29, 198, 229, 252, 647, 666, 688], "basic": [29, 252, 991], "random": [29, 122, 124, 126, 159, 196, 252, 390, 449, 466, 472, 591, 825, 877, 894, 905, 983], "date": [29, 36, 62, 72, 101, 102, 103, 112, 117, 124, 139, 155, 157, 158, 170, 172, 225, 252, 282, 283, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 456, 457, 458, 459, 460, 462, 463, 464, 508, 509, 525, 560, 564, 574, 591, 623, 624, 629, 688, 713, 714, 766, 767, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 847, 867, 868, 898, 941, 942, 967, 983], "dtm": [29, 252, 333, 767], "2023": [29, 95, 118, 170, 252, 333, 564, 767], "num": [29, 218, 252, 395, 398, 514, 591, 831, 983], "500": [29, 169, 224, 252, 616, 663, 688, 781, 783, 791, 798, 884, 885, 887, 983], "val": [29, 193, 252, 314, 444, 525, 584, 591, 645, 688, 744], "10_000": [29, 252], "20_000": [29, 252], "30_000": [29, 252], "increas": [29, 101, 110, 252, 327, 591, 758, 983], "b4": [29, 252], "light": [29, 252], "twice": [29, 105, 252], "each": [29, 62, 102, 115, 119, 120, 122, 133, 155, 156, 157, 158, 170, 172, 184, 216, 222, 225, 231, 232, 234, 235, 237, 246, 252, 266, 289, 301, 355, 359, 366, 415, 449, 479, 490, 504, 505, 537, 540, 545, 580, 591, 623, 624, 629, 641, 662, 670, 672, 673, 675, 684, 688, 720, 732, 746, 793, 797, 804, 877, 923, 937, 938, 952, 983, 991], "titl": [29, 252], "explicit": [29, 112, 122, 252, 539, 573], "integr": [29, 252, 991], "multi_fram": [29, 252], "wb": [29, 252], "coordin": [29, 252], "advanc": [29, 252, 303, 734, 991], "len": [29, 71, 122, 124, 170, 252, 322, 453, 494, 500, 514, 591, 759, 875, 881, 927, 933, 947, 983], "min_color": [29, 252], "76933c": [29, 252], "mid_color": [29, 252], "c4d79b": [29, 252], "max_color": [29, 252], "ebf1d": [29, 252], "data_bar_2010": [29, 252], "bar_color": [29, 252], "9bbb59": [29, 252], "bar_negative_color_sam": [29, 252], "bar_negative_border_color_sam": [29, 252], "000": [29, 252, 991], "white": [29, 252], "w": [29, 252, 489, 922], "get_worksheet_by_nam": [29, 252], "fmt_titl": [29, 252], "add_format": [29, 252], "font_color": [29, 252], "4f6228": [29, 252], "font_siz": [29, 252], "12": [29, 62, 71, 72, 95, 123, 124, 157, 158, 172, 225, 252, 325, 333, 340, 343, 350, 351, 352, 357, 359, 366, 370, 443, 471, 550, 552, 553, 565, 591, 623, 624, 625, 629, 632, 651, 658, 688, 697, 759, 767, 788, 797, 804, 893, 983, 991], "ital": [29, 252], "bold": [29, 252], "customis": [29, 252], "trend": [29, 252], "win_loss": [29, 252], "subtl": [29, 252], "tone": [29, 252], "hidden": [29, 252], "id": [29, 234, 252, 498, 499, 529, 531, 591, 672, 970, 983, 991], "q1": [29, 252], "55": [29, 64, 252], "20": [29, 124, 146, 162, 163, 185, 187, 191, 192, 252, 274, 275, 276, 328, 359, 366, 390, 394, 444, 560, 564, 591, 640, 688, 761, 804, 983], "35": [29, 118, 252, 328, 591, 761, 983], "q2": [29, 252], "30": [29, 71, 146, 157, 162, 185, 191, 192, 211, 229, 252, 274, 275, 276, 328, 333, 338, 343, 351, 357, 358, 359, 366, 370, 390, 471, 564, 591, 623, 640, 666, 688, 759, 761, 767, 772, 789, 796, 797, 804, 983, 991], "15": [29, 118, 123, 133, 157, 158, 163, 252, 327, 328, 352, 359, 366, 444, 550, 591, 623, 624, 688, 758, 761, 797, 804, 983], "60": [29, 146, 252, 360, 361, 508, 794, 798, 799, 941], "q3": [29, 252], "50": [29, 146, 252, 316, 317, 318, 359, 366, 591, 748, 804, 983], "40": [29, 146, 185, 252, 359, 366, 390, 591, 640, 688, 777, 804], "80": [29, 252], "q4": [29, 252], "75": [29, 139, 252, 263, 441, 591, 760, 827, 875, 983, 991], "account": [29, 95, 252, 355, 373, 374, 375, 591, 793, 812, 813, 814, 983], "flavour": [29, 252], "integer_dtyp": [29, 198, 252, 647, 688], "0_": [29, 252], "just": [29, 103, 112, 178, 252, 637, 688], "unifi": [29, 252], "multi": [29, 101, 102, 252, 376, 489, 566, 569, 591, 922], "2_color_scal": [29, 252], "95b3d7": [29, 252], "ffffff": [29, 252], "base": [29, 34, 142, 149, 157, 158, 252, 371, 373, 374, 375, 413, 414, 497, 591, 612, 619, 623, 624, 688, 810, 812, 813, 814, 827, 854, 855, 875, 930, 975, 983, 991], "standardis": [29, 252], "z": [29, 95, 122, 124, 144, 165, 167, 171, 178, 252, 259, 263, 281, 314, 390, 441, 452, 490, 508, 510, 591, 628, 637, 654, 688, 744, 819, 923, 941, 943, 983], "score": [29, 252], "conjunct": [29, 105, 252], "a123": [29, 252], "b345": [29, 252], "c567": [29, 252], "d789": [29, 252], "e101": [29, 252], "45": [29, 158, 252, 333, 359, 366, 484, 490, 564, 624, 688, 767, 797, 804, 917, 923, 991], "85": [29, 252, 991], "font": [29, 252], "consola": [29, 252], "standard": [29, 118, 206, 215, 252, 343, 374, 462, 476, 481, 492, 579, 591, 656, 688, 777, 813, 909, 913, 925, 983, 991], "stdev": [29, 252], "ipccompress": [30, 252], "arrow": [30, 74, 88, 103, 106, 114, 210, 252, 652, 688, 960, 965, 983], "ipc": [30, 106, 107, 114, 117, 252, 602], "binari": [30, 252, 306, 308, 309, 310, 536, 736, 738, 739, 740], "feather": [30, 106, 114, 252, 602], "lz4": [30, 33, 252, 652, 653, 688], "zstd": [30, 33, 252, 652, 653, 688], "pretti": [31, 252], "row_ori": [31, 252], "iobas": [31, 32, 108, 109, 252, 643, 669, 688], "serial": [31, 32, 252], "represent": [31, 32, 214, 252, 314, 337, 340, 343, 344, 346, 348, 350, 353, 356, 357, 360, 367, 368, 370, 525, 591, 614, 631, 688, 744, 771, 774, 776, 777, 781, 783, 786, 788, 791, 794, 795, 798, 805, 806, 808, 963, 967, 983], "orient": [31, 63, 65, 92, 94, 252, 688], "slower": [31, 92, 94, 133, 156, 184, 225, 234, 252, 622, 672, 688, 697, 983], "common": [31, 252, 596], "write_ndjson": [31, 252], "newlin": [32, 109, 115, 252], "delimit": [32, 96, 101, 102, 109, 112, 115, 186, 213, 252, 482, 915, 961, 983], "parquetcompress": [33, 252], "compression_level": [33, 252, 653, 688], "statist": [33, 101, 102, 110, 116, 139, 252, 374, 375, 408, 456, 457, 458, 459, 460, 461, 462, 463, 464, 476, 591, 653, 688, 760, 813, 814, 851, 889, 909, 983], "row_group_s": [33, 252, 653, 688], "use_pyarrow": [33, 101, 106, 110, 252, 653, 688, 964, 965, 983], "pyarrow_opt": [33, 104, 110, 113, 252], "parquet": [33, 110, 111, 116, 252, 602, 653, 688], "gzip": [33, 252, 653, 688], "lzo": [33, 252, 653, 688], "brotli": [33, 252, 653, 688], "choos": [33, 252, 652, 653, 688], "good": [33, 169, 252, 652, 653, 688], "perform": [33, 79, 89, 101, 102, 106, 110, 112, 114, 115, 116, 132, 133, 157, 158, 172, 189, 234, 252, 266, 442, 591, 623, 624, 629, 652, 653, 668, 672, 688, 697, 983], "fast": [33, 125, 127, 252, 379, 468, 591, 652, 653, 688, 817, 899, 983, 991], "decompress": [33, 252, 652, 653, 688], "backward": [33, 148, 172, 252, 305, 352, 381, 591, 618, 629, 653, 688, 790, 819, 983], "guarante": [33, 89, 101, 102, 221, 252, 616, 653, 661, 688], "deal": [33, 169, 252, 358, 449, 508, 591, 653, 688, 796, 877, 941, 983], "older": [33, 252, 653, 688], "reader": [33, 98, 101, 102, 106, 110, 252, 603, 653, 688], "higher": [33, 188, 244, 252, 448, 460, 572, 591, 642, 653, 682, 688, 876, 888, 983], "mean": [33, 101, 102, 106, 110, 112, 139, 148, 156, 186, 232, 252, 378, 381, 457, 476, 489, 541, 591, 618, 622, 633, 653, 670, 688, 760, 816, 819, 824, 885, 909, 922, 983], "smaller": [33, 144, 252, 616, 653, 688, 811, 983], "disk": [33, 106, 252, 651, 652, 653, 688], "11": [33, 118, 124, 158, 252, 330, 331, 343, 351, 352, 355, 359, 366, 394, 443, 463, 477, 514, 534, 543, 581, 591, 609, 624, 625, 632, 641, 653, 658, 688, 697, 793, 797, 804, 883, 983], "22": [33, 123, 252, 359, 366, 369, 508, 543, 653, 688, 797, 804, 807, 941, 991], "extra": [33, 101, 104, 105, 106, 110, 113, 114, 116, 146, 252, 653, 688, 696, 983], "comput": [33, 69, 70, 76, 144, 156, 172, 216, 221, 232, 244, 252, 258, 268, 269, 270, 271, 272, 273, 293, 294, 295, 319, 320, 322, 323, 324, 325, 326, 329, 371, 377, 408, 413, 414, 415, 434, 442, 443, 447, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 473, 474, 475, 476, 480, 523, 524, 535, 536, 540, 546, 548, 551, 555, 566, 569, 571, 575, 576, 578, 581, 591, 622, 626, 628, 629, 653, 661, 667, 670, 682, 688, 692, 698, 699, 700, 701, 702, 703, 724, 725, 726, 752, 753, 754, 755, 756, 757, 762, 810, 811, 815, 851, 854, 855, 856, 863, 871, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 906, 907, 908, 909, 912, 957, 958, 966, 983], "512": [33, 252, 445, 591, 871, 983], "implement": [33, 89, 132, 133, 234, 252, 266, 591, 672, 697, 897, 898, 983], "v": [33, 71, 144, 252, 467, 591, 759, 895, 983], "At": [33, 252], "moment": [33, 138, 252, 408, 476, 591, 851, 909, 983], "argument": [33, 101, 104, 110, 113, 138, 140, 145, 156, 157, 158, 176, 184, 185, 186, 198, 199, 205, 207, 216, 222, 225, 229, 232, 252, 359, 366, 376, 395, 442, 444, 456, 457, 458, 459, 460, 462, 463, 464, 479, 495, 501, 507, 508, 535, 536, 540, 542, 543, 544, 545, 551, 556, 566, 569, 577, 580, 581, 591, 611, 615, 622, 623, 624, 640, 647, 648, 655, 662, 666, 670, 688, 797, 804, 831, 928, 934, 940, 941, 966, 983], "pyarrow": [33, 88, 93, 101, 104, 106, 110, 113, 117, 118, 170, 210, 215, 216, 252, 603, 960, 964, 965, 966, 983], "write_t": [33, 252], "calendar": [35, 36, 157, 158, 172, 225, 252, 343, 355, 359, 366, 370, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 624, 629, 688, 777, 793, 797, 804, 808], "time": [36, 38, 68, 69, 72, 112, 146, 157, 158, 172, 225, 252, 281, 282, 283, 303, 311, 332, 333, 334, 339, 355, 358, 362, 364, 365, 369, 508, 510, 512, 525, 526, 544, 545, 554, 560, 574, 591, 609, 623, 624, 629, 641, 688, 696, 712, 714, 741, 766, 767, 768, 773, 793, 796, 800, 802, 803, 807, 941, 943, 945, 967, 968, 983, 991], "time_unit": [36, 38, 72, 95, 332, 333, 339, 364, 369, 510, 560, 766, 767, 773, 802, 807, 943], "time_zon": [36, 72, 95, 334, 358, 510, 768, 796, 943], "timezon": [36, 72], "m": [36, 38, 72, 332, 333, 339, 362, 364, 365, 369, 489, 508, 509, 510, 512, 560, 766, 767, 773, 800, 802, 803, 807, 922, 941, 942, 943, 945], "zone": [36, 72, 334, 358, 508, 510, 768, 796, 941, 943], "zoneinfo": 36, "run": [36, 69, 125, 127, 133, 156, 173, 186, 221, 234, 252, 266, 285, 327, 577, 591, 609, 614, 616, 622, 633, 637, 641, 651, 652, 653, 661, 672, 688, 697, 716, 758, 983, 990, 991], "available_timezon": 36, "128": [37, 64, 871, 983], "bit": [37, 39, 40, 41, 42, 43, 44, 56, 57, 58, 59, 451, 483, 591, 879, 916, 983], "neg": [37, 157, 160, 174, 201, 202, 204, 208, 252, 297, 298, 444, 469, 470, 477, 502, 591, 623, 649, 650, 654, 668, 688, 728, 729, 826, 853, 901, 902, 910, 935, 954, 983], "scale": [37, 144, 252, 444, 591, 811, 983], "experiment": [37, 71, 117, 198, 223, 224, 229, 252, 327, 359, 456, 457, 458, 459, 460, 462, 463, 464, 591, 647, 663, 666, 688, 758, 797, 827, 875, 983], "progress": 37, "expect": [37, 80, 82, 87, 266, 537, 564, 591, 631, 633, 688, 875, 983], "delta": [38, 104, 113, 206, 226, 252, 481, 532, 546, 571, 575, 576, 578, 579, 583, 591, 602, 656, 664, 688, 913, 973, 983], "32": [39, 42, 57, 64, 158, 168, 252, 435, 471, 591, 624, 688, 762, 794, 871, 888, 983], "sign": [41, 42, 43, 44, 355, 451, 514, 591, 793, 840, 879, 947, 983], "inner": [45, 53, 73, 123, 171, 224, 252, 290, 329, 525, 591, 628, 663, 669, 688, 721, 762, 967, 983], "polarsdatatyp": [45, 99, 101, 102, 107, 111, 112, 121, 122, 123, 124, 126, 129, 133, 143, 252, 266, 313, 376, 418, 420, 491, 537, 539, 543, 556, 564, 565, 591, 613, 688, 697, 742, 858, 924, 983], "pythondatatyp": 45, "nest": [45, 53, 95, 144, 252, 602, 811, 983, 991], "arrai": [45, 88, 92, 101, 102, 110, 144, 210, 215, 216, 252, 281, 292, 293, 294, 295, 296, 299, 300, 308, 316, 317, 318, 322, 323, 324, 325, 326, 414, 456, 457, 459, 462, 463, 464, 468, 484, 486, 489, 492, 555, 591, 688, 712, 723, 724, 725, 726, 727, 730, 731, 738, 748, 749, 750, 754, 755, 756, 757, 762, 811, 855, 856, 884, 885, 887, 890, 891, 892, 899, 904, 917, 919, 922, 925, 960, 965, 966, 974, 983], "within": [45, 119, 120, 157, 158, 172, 225, 252, 479, 591, 623, 624, 629, 688], "wrap": [47, 95, 395, 591], "arbitrari": [47, 124], "python": [47, 72, 101, 102, 118, 133, 169, 195, 212, 234, 252, 266, 333, 418, 537, 584, 591, 596, 672, 697, 767, 778, 779, 780, 785, 964, 983], "queri": [48, 69, 103, 106, 112, 114, 115, 116, 146, 173, 185, 252, 420, 492, 591, 609, 614, 616, 625, 632, 641, 651, 668, 672, 688, 696, 925, 983, 990], "pars": [48, 49, 101, 102, 105, 112, 114, 115, 134, 156, 198, 205, 219, 229, 232, 252, 395, 442, 479, 491, 497, 508, 510, 535, 536, 540, 542, 544, 545, 551, 560, 566, 569, 580, 581, 591, 605, 622, 647, 655, 660, 666, 670, 688, 831, 924, 930, 941, 943, 983], "lazili": [48, 101, 102, 112, 113, 114, 115, 116, 420, 591], "execut": [49, 70, 173, 252, 285, 312, 591, 606, 633, 641, 688, 716], "eagerli": [49, 303], "under": [50, 63, 64, 65, 66, 585, 587, 592, 593, 597, 598, 599, 977, 979, 984, 987, 988, 989], "named_fram": 51, "map": [51, 90, 91, 101, 102, 106, 107, 110, 111, 112, 114, 133, 143, 169, 190, 194, 195, 211, 252, 359, 366, 419, 420, 531, 537, 591, 613, 644, 688, 797, 804, 858, 983], "collect": [52, 65, 69, 112, 113, 117, 124, 126, 173, 210, 252, 266, 399, 539, 544, 560, 580, 591, 605, 611, 612, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 639, 640, 642, 644, 645, 647, 649, 650, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 666, 667, 668, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 688, 838, 983, 991], "context": [53, 128, 182, 235, 252, 260, 266, 285, 312, 321, 382, 428, 478, 479, 531, 537, 547, 557, 560, 577, 590, 591, 602, 667, 673, 688, 716], "manag": [53, 602], "categor": [53, 73, 96, 171, 213, 214, 252, 314, 420, 525, 591, 743, 744, 967, 983], "temporarili": [53, 128, 157, 158, 252, 623, 624, 688], "cach": [53, 69, 73, 106, 112, 114, 116, 420, 456, 457, 458, 459, 460, 462, 463, 464, 508, 509, 510, 512, 591, 609, 614, 616, 641, 651, 688, 941, 942, 943, 945], "categori": [53, 71, 73, 314, 744, 759, 827, 875, 983], "until": [53, 173, 252], "finish": [53, 76, 146, 252, 696, 983], "global": [53, 73, 124, 420, 591], "invalid": [53, 101, 102, 112, 491, 492, 497, 527, 591, 924, 925, 930], "outermost": 53, "exit": [53, 130], "df1": [53, 62, 70, 73, 119, 146, 152, 216, 227, 252], "color": [53, 73, 234, 672], "red": [53, 73, 234, 672], "green": [53, 73, 234, 672], "blue": [53, 73], "orang": [53, 73, 137, 235, 236, 238, 239, 240, 242, 244, 245, 252, 673, 674, 676, 677, 678, 680, 682, 683], "uint8": [53, 73, 121, 123, 214, 215, 252, 325, 326, 420, 519, 534, 591, 756, 757, 953, 983, 991], "df2": [53, 62, 70, 73, 119, 146, 152, 216, 227, 252], "yellow": [53, 73], "black": [53, 73, 133, 252], "join": [53, 62, 69, 73, 172, 224, 252, 394, 442, 591, 609, 614, 616, 629, 641, 651, 663, 667, 688], "succe": [53, 101, 102, 112], "df_join": [53, 73], "cat": [53, 71, 73, 214, 252, 483, 511, 513, 525, 545, 587, 591, 759, 827, 875, 916, 979, 983], "u8": [53, 73, 96, 213, 214, 252, 420, 534, 591, 961, 983, 991], "schemadict": [54, 88, 90, 91, 92, 93, 94, 112, 197, 252, 580, 633, 646, 672, 688], "composit": [54, 123, 991], "dai": [55, 72, 157, 158, 170, 172, 225, 252, 339, 343, 350, 351, 352, 355, 356, 357, 359, 364, 366, 367, 368, 370, 456, 457, 458, 459, 460, 462, 463, 464, 552, 553, 554, 591, 623, 624, 629, 688, 789, 790, 793, 794, 797, 804, 806], "unsign": [56, 57, 58, 59, 451, 591, 840, 879, 983], "could": [60, 76, 142, 157, 252, 313, 549, 558, 591, 612, 623, 688, 742, 983], "static": [60, 672], "utf": 61, "descend": [62, 134, 199, 205, 219, 252, 276, 299, 449, 468, 478, 479, 540, 591, 605, 648, 655, 660, 688, 706, 730, 846, 877, 899, 911, 983], "uniqu": [62, 121, 122, 123, 126, 167, 182, 243, 252, 267, 278, 398, 406, 436, 508, 509, 510, 512, 529, 531, 538, 570, 591, 681, 688, 708, 760, 836, 848, 865, 941, 942, 943, 945, 970, 972, 983], "fill": [62, 70, 99, 129, 147, 148, 202, 223, 252, 305, 323, 326, 380, 381, 387, 394, 456, 457, 459, 462, 463, 464, 470, 494, 500, 514, 559, 591, 617, 618, 650, 667, 688, 818, 819, 869, 884, 885, 887, 890, 891, 892, 902, 927, 933, 947, 983], "sort": [62, 63, 119, 123, 134, 157, 158, 172, 179, 185, 186, 199, 219, 225, 237, 246, 252, 276, 314, 382, 468, 479, 531, 533, 540, 591, 605, 614, 623, 624, 629, 638, 640, 641, 648, 651, 660, 675, 684, 688, 706, 744, 846, 899, 969, 972, 983, 991], "origin": [62, 101, 102, 221, 252, 358, 407, 420, 442, 451, 484, 489, 490, 492, 494, 500, 514, 591, 661, 688, 759, 796, 858, 875, 917, 922, 923, 925, 927, 933, 947, 983], "doe": [62, 82, 88, 90, 91, 92, 94, 95, 101, 102, 104, 105, 112, 113, 117, 119, 120, 146, 170, 194, 195, 221, 229, 252, 303, 366, 369, 420, 529, 557, 591, 616, 633, 661, 666, 688, 696, 807, 824, 858, 904, 974, 983], "receiv": [62, 112, 133, 185, 252, 444, 591, 640, 688, 991], "now": [62, 158, 252, 508, 624, 688, 941], "whose": [62, 172, 186, 252, 376, 556, 591, 629, 688], "post": 62, "constrain": 62, "newli": 62, "boolean": [62, 67, 134, 149, 151, 205, 219, 252, 262, 263, 264, 282, 306, 342, 382, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 441, 479, 491, 533, 534, 540, 580, 591, 605, 619, 655, 660, 688, 694, 695, 707, 713, 736, 776, 820, 831, 832, 833, 835, 836, 838, 839, 841, 842, 843, 844, 848, 872, 873, 897, 916, 975, 983], "2022": [62, 72, 139, 155, 157, 158, 172, 225, 252, 333, 355, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 508, 554, 560, 591, 623, 624, 629, 688, 767, 777, 793, 797, 804, 941], "x": [62, 95, 101, 102, 103, 112, 122, 124, 144, 162, 165, 167, 171, 178, 186, 252, 259, 263, 266, 281, 290, 372, 386, 388, 389, 390, 410, 415, 417, 418, 433, 435, 439, 441, 445, 452, 473, 476, 504, 517, 525, 527, 534, 537, 549, 550, 558, 564, 565, 573, 591, 628, 633, 637, 654, 688, 693, 697, 819, 849, 906, 909, 937, 967, 983], "y": [62, 95, 122, 124, 144, 165, 167, 171, 178, 186, 252, 259, 263, 281, 290, 362, 365, 372, 388, 389, 410, 417, 439, 441, 452, 508, 509, 510, 527, 534, 564, 591, 628, 637, 654, 688, 693, 800, 803, 941, 942, 943, 983], "df3": [62, 252], "set_tbl_format": 62, "09": [62, 124, 158, 252, 333, 343, 351, 352, 624, 688, 771], "01": [62, 72, 124, 139, 155, 157, 158, 225, 252, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 508, 509, 510, 512, 554, 623, 624, 688, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 941, 942, 943, 945], "02": [62, 72, 155, 157, 158, 172, 225, 252, 332, 333, 339, 340, 341, 348, 349, 350, 351, 352, 355, 358, 359, 360, 361, 364, 366, 367, 369, 456, 457, 458, 459, 460, 462, 463, 464, 465, 508, 509, 510, 512, 554, 591, 623, 624, 629, 688, 734, 766, 767, 769, 770, 773, 774, 775, 778, 779, 780, 781, 783, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 801, 802, 804, 805, 806, 807, 941, 942, 943, 945], "03": [62, 72, 95, 157, 158, 225, 252, 332, 333, 334, 338, 339, 341, 349, 350, 351, 352, 358, 359, 360, 361, 362, 364, 365, 366, 367, 369, 509, 512, 623, 624, 688, 766, 767, 768, 771, 772, 773, 774, 775, 778, 779, 780, 781, 783, 785, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 806, 807, 942, 945], "af1": 62, "af2": 62, "af3": 62, "keep": [62, 101, 102, 112, 221, 224, 225, 252, 407, 420, 542, 591, 661, 663, 688, 759, 858, 875, 983], "easili": [62, 198, 229, 232, 252, 543, 580, 647, 666, 670, 688], "dot": [62, 591, 651, 688, 983], "product": [62, 138, 252, 325, 329, 537, 591, 756, 762, 983], "fill_nul": [62, 147, 252, 591, 617, 667, 688, 983], "167": 62, "47": 62, "callabl": [63, 64, 65, 66, 112, 133, 151, 185, 234, 252, 266, 303, 418, 419, 444, 455, 537, 549, 550, 558, 565, 573, 591, 633, 640, 672, 688, 697, 734, 883, 983], "decor": [63, 64, 65, 66, 124, 126, 133, 252, 266, 591, 697, 983], "access": [63, 64, 65, 66, 169, 194, 195, 252, 420, 591, 667, 688, 991], "by_first_letter_of_column_nam": 63, "f": [63, 102, 139, 155, 170, 210, 220, 223, 252, 259, 266, 303, 471, 488, 508, 510, 537, 544, 565, 591, 734, 921, 941, 943], "fromkei": [63, 65], "by_first_letter_of_column_valu": 63, "starts_with": [63, 483, 487, 920], "slice": [63, 69, 144, 160, 170, 208, 252, 289, 301, 455, 456, 457, 458, 459, 460, 462, 463, 464, 591, 609, 614, 616, 633, 641, 651, 652, 653, 688, 720, 732, 811, 826, 883, 884, 885, 886, 887, 888, 890, 891, 892, 954, 983], "to_seri": [63, 67, 153, 252, 508, 941], "xx": [63, 65, 123, 126], "xy": [63, 65], "yy": [63, 65, 123, 126], "yz": [63, 65], "a2": [63, 65], "b1": [63, 65], "b2": [63, 65], "pow_n": 64, "powersofn": 64, "next": [64, 305, 449, 591, 877, 983], "p": [64, 185, 252, 444, 580, 591, 640, 688], "ceil": [64, 591, 983], "previou": [64, 130, 443, 516, 591, 871, 983], "floor": [64, 591, 983], "nearest": [64, 172, 188, 244, 252, 315, 385, 448, 460, 572, 591, 629, 642, 682, 688, 745, 822, 830, 876, 888, 983], "24": [64, 118, 133, 144, 158, 252, 325, 327, 341, 435, 591, 624, 688, 758, 775, 850, 983], "001": [64, 344, 345, 347, 354, 554, 782, 784, 792], "next_pow2": 64, "prev_pow2": 64, "nearest_pow2": 64, "split_by_column_dtyp": 65, "31": [66, 72, 124, 333, 337, 338, 350, 351, 355, 367, 508, 552, 553, 560, 564, 767, 771, 772, 789, 793, 941, 991], "42": [66, 158, 159, 252, 624, 688, 825, 983], "961": 66, "1764": 66, "4160": 66, "eager": [67, 72, 157, 223, 252, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 366, 367, 368, 369, 370, 539, 560, 574, 580, 590, 602, 623, 688, 766, 768, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 804, 805, 806, 807, 808], "evalu": [67, 72, 147, 149, 172, 252, 263, 277, 303, 327, 393, 395, 399, 420, 441, 535, 536, 539, 555, 574, 580, 584, 591, 619, 626, 628, 629, 688, 707, 758, 975, 983], "immedi": [67, 72, 449, 539, 574, 580, 591, 877, 983], "arg_tru": [67, 591, 983], "u32": [67, 157, 183, 230, 235, 243, 245, 252, 260, 267, 274, 275, 276, 277, 278, 279, 280, 283, 292, 321, 322, 337, 340, 344, 348, 350, 356, 357, 360, 367, 368, 411, 420, 436, 440, 449, 467, 484, 493, 496, 525, 529, 538, 540, 547, 570, 591, 623, 668, 673, 681, 683, 688, 706, 707, 708, 723, 742, 771, 774, 781, 783, 786, 788, 791, 794, 795, 798, 805, 806, 827, 877, 917, 926, 929, 967, 970, 972, 983], "build": [68, 89, 991], "wa": 68, "compil": [68, 279, 280, 710, 711], "gate": 68, "info": [68, 104, 113, 118, 342, 776], "otherwis": [68, 123, 128, 179, 198, 252, 303, 307, 316, 317, 318, 358, 373, 374, 375, 444, 451, 483, 485, 535, 536, 551, 566, 569, 581, 584, 591, 638, 647, 688, 697, 734, 737, 748, 749, 750, 796, 812, 813, 814, 879, 897, 898, 916, 918, 983], "version": [68, 71, 72, 96, 104, 113, 118, 351, 352, 508, 563, 571, 573, 578, 789, 790, 941], "depend": [68, 118, 266, 279, 280, 428, 449, 537, 557, 560, 591, 710, 711, 877, 983, 991], "host": [68, 101, 106, 110, 114, 116], "git": 68, "lazy_fram": 69, "type_coercion": [69, 609, 614, 616, 641, 651, 652, 653, 688], "predicate_pushdown": [69, 609, 614, 616, 633, 641, 651, 652, 653, 688], "projection_pushdown": [69, 609, 614, 616, 633, 641, 651, 652, 653, 688], "simplify_express": [69, 609, 614, 616, 641, 651, 652, 653, 688], "no_optim": [69, 609, 616, 633, 641, 652, 653, 688], "slice_pushdown": [69, 609, 614, 616, 633, 641, 651, 652, 653, 688], "common_subplan_elimin": [69, 609, 614, 616, 641, 651, 688], "graph": [69, 173, 252, 626, 667, 688], "parallel": [69, 70, 98, 103, 110, 116, 157, 172, 173, 185, 252, 285, 327, 591, 602, 623, 628, 629, 688, 716, 758, 983], "threadpool": [69, 128], "coercion": [69, 452, 591, 609, 614, 616, 641, 651, 652, 653, 688], "optim": [69, 110, 112, 114, 115, 116, 169, 173, 185, 189, 195, 221, 252, 609, 614, 616, 633, 641, 651, 652, 653, 661, 668, 688], "predic": [69, 112, 114, 115, 116, 117, 149, 168, 194, 252, 382, 533, 558, 591, 609, 614, 616, 619, 633, 641, 644, 651, 652, 653, 668, 688, 820, 897, 898, 983], "pushdown": [69, 609, 614, 616, 633, 641, 644, 651, 652, 653, 668, 688, 897, 898, 983], "project": [69, 112, 114, 115, 116, 266, 478, 479, 591, 609, 614, 616, 633, 641, 644, 651, 652, 653, 669, 688], "turn": [69, 101, 102, 112, 531, 591, 609, 614, 616, 633, 641, 652, 653, 688], "off": [69, 101, 102, 112, 531, 591, 609, 614, 616, 633, 641, 652, 653, 688], "Will": [69, 220, 252, 609, 614, 616, 641, 651, 688, 983], "try": [69, 83, 85, 101, 102, 105, 106, 110, 112, 114, 116, 609, 614, 616, 641, 651, 688], "branch": [69, 609, 614, 616, 641, 651, 688], "subplan": [69, 609, 614, 616, 641, 651, 688], "occur": [69, 283, 434, 449, 591, 609, 614, 616, 641, 651, 688, 714, 863, 877, 983], "union": [69, 70, 609, 614, 616, 641, 651, 688], "part": [69, 88, 124, 490, 504, 505, 609, 614, 616, 641, 651, 667, 688, 771, 774, 781, 783, 786, 788, 791, 798, 808, 923, 937, 938], "fashion": [69, 171, 252, 609, 614, 616, 641, 651, 688], "item": [70, 102, 194, 196, 252, 282, 288, 290, 378, 466, 505, 591, 713, 719, 721, 816, 894, 938, 983], "iter": [70, 125, 127, 134, 156, 157, 158, 169, 170, 184, 194, 195, 198, 199, 205, 219, 220, 229, 231, 232, 252, 327, 376, 442, 479, 535, 536, 540, 542, 543, 544, 545, 551, 556, 566, 569, 577, 580, 581, 584, 591, 605, 622, 623, 624, 647, 648, 655, 660, 666, 670, 688, 758, 983, 991], "concatmethod": 70, "vertic": [70, 146, 223, 227, 252, 482, 915], "rechunk": [70, 88, 93, 101, 102, 106, 110, 112, 114, 115, 116, 146, 252, 591, 696, 746, 864, 983], "aggreg": [70, 101, 102, 110, 151, 157, 158, 175, 176, 177, 180, 182, 186, 187, 188, 206, 207, 223, 226, 232, 233, 236, 238, 252, 260, 382, 392, 418, 442, 455, 456, 457, 458, 459, 460, 462, 463, 464, 531, 535, 536, 549, 550, 551, 558, 563, 566, 569, 573, 581, 591, 623, 624, 633, 634, 635, 636, 639, 642, 656, 657, 664, 670, 671, 674, 676, 688, 828, 883, 884, 885, 887, 890, 891, 892, 983], "concaten": [70, 151, 185, 252, 444, 544, 545, 591, 640, 688, 746, 864, 983], "diagon": [70, 220, 252], "strategi": [70, 101, 121, 122, 123, 124, 126, 148, 157, 171, 172, 181, 252, 266, 303, 381, 591, 618, 623, 628, 629, 688, 734, 819, 983], "vstack": [70, 146, 252], "find": [70, 150, 252, 467, 591, 895, 983], "miss": [70, 101, 102, 112, 147, 252, 305, 373, 374, 375, 387, 394, 401, 403, 578, 591, 617, 688, 812, 813, 814, 974, 983], "stack": [70, 162, 227, 252], "length": [70, 71, 99, 112, 122, 129, 157, 158, 204, 252, 298, 303, 327, 359, 366, 429, 455, 456, 457, 458, 459, 460, 462, 463, 464, 477, 494, 496, 500, 502, 514, 539, 575, 576, 591, 623, 624, 641, 654, 688, 729, 734, 746, 758, 759, 767, 797, 804, 852, 869, 875, 883, 884, 885, 886, 887, 888, 890, 891, 892, 910, 927, 929, 933, 935, 947, 983], "don": [70, 133, 221, 223, 252, 266, 285, 327, 537, 591, 661, 688, 697, 716, 758, 896, 974, 983], "t": [70, 105, 112, 133, 185, 221, 223, 252, 266, 285, 327, 358, 371, 373, 374, 375, 444, 489, 495, 501, 507, 508, 510, 537, 584, 591, 640, 661, 688, 697, 716, 758, 796, 810, 812, 813, 814, 896, 922, 928, 934, 940, 941, 943, 974, 983], "sure": [70, 88, 93, 101, 102, 103, 106, 110, 189, 252, 539], "contigu": [70, 88, 93, 101, 102, 106, 110, 112, 114, 115, 116, 189, 252], "relev": 70, "df_h1": 70, "l1": 70, "l2": 70, "df_h2": 70, "r1": 70, "r2": 70, "r3": 70, "df_d1": 70, "df_d2": 70, "bin": [71, 497, 534, 585, 591, 759, 827, 875, 930, 977, 983], "label": [71, 455, 456, 457, 458, 459, 460, 462, 463, 464, 591, 641, 688, 759, 875, 883, 884, 885, 886, 887, 888, 890, 891, 892, 983], "break_point_label": [71, 759, 875, 983], "break_point": [71, 759, 827, 875, 983], "category_label": [71, 759, 875, 983], "discret": [71, 284, 328, 371, 591, 715, 759, 761, 810, 827, 875, 983], "deprec": [71, 72, 96, 508, 563, 571, 578, 688, 941], "sinc": [71, 72, 96, 104, 113, 339, 508, 560, 563, 571, 578, 773, 941], "assign": [71, 122, 157, 252, 303, 449, 504, 505, 591, 623, 688, 734, 759, 858, 875, 877, 937, 938, 983], "breakpoint": [71, 759, 875, 983], "inf": [71, 124, 126, 273, 397, 400, 527, 591, 703, 759, 827, 835, 839, 857, 871, 875, 971, 983], "interv": [72, 157, 158, 225, 252, 342, 359, 360, 366, 395, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 624, 688, 771, 773, 774, 776, 781, 783, 786, 788, 791, 794, 795, 797, 798, 802, 804, 805, 806, 808, 831, 983], "timedelta": [72, 157, 158, 225, 252, 337, 339, 340, 343, 348, 350, 355, 356, 357, 359, 360, 364, 366, 367, 368, 370, 456, 457, 458, 459, 460, 462, 463, 464, 574, 591, 623, 624, 688, 778, 780, 785, 793, 797, 804, 867, 868, 983], "1d": [72, 157, 158, 172, 225, 252, 332, 341, 349, 355, 359, 366, 369, 456, 457, 458, 459, 460, 462, 463, 464, 564, 591, 623, 624, 629, 688, 766, 773, 775, 778, 779, 780, 785, 787, 793, 797, 802, 804, 806, 807], "_nodefault": [72, 186, 252, 508, 941], "no_default": [72, 186, 252, 508, 941], "closedinterv": [72, 157, 158, 252, 395, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 624, 688, 831, 983], "lower": [72, 112, 157, 188, 244, 252, 316, 318, 395, 416, 419, 448, 451, 460, 539, 572, 591, 616, 623, 642, 682, 688, 750, 831, 857, 876, 879, 888, 971, 983], "bound": [72, 101, 102, 144, 157, 252, 288, 302, 303, 316, 317, 318, 395, 416, 530, 539, 591, 623, 688, 719, 733, 749, 750, 811, 831, 857, 971, 983], "upper": [72, 101, 102, 144, 157, 252, 303, 316, 317, 395, 530, 539, 591, 623, 688, 749, 811, 831, 857, 971, 983], "period": [72, 157, 158, 201, 202, 252, 297, 359, 366, 373, 374, 375, 443, 469, 470, 591, 623, 624, 649, 650, 688, 728, 797, 804, 812, 813, 814, 871, 901, 902, 983], "like": [72, 89, 100, 101, 102, 105, 106, 107, 108, 109, 110, 111, 112, 165, 167, 171, 252, 285, 431, 449, 489, 581, 591, 616, 643, 688, 716, 877, 922, 983], "durat": [72, 172, 225, 252, 338, 341, 345, 347, 349, 354, 361, 369, 525, 591, 629, 688, 772, 775, 782, 784, 787, 792, 799, 807, 967, 983], "3d12h4m25": [72, 157, 158, 172, 225, 252, 359, 366, 623, 624, 629, 688, 797, 804], "hour": [72, 157, 158, 172, 225, 252, 355, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 553, 554, 591, 623, 624, 629, 688, 793, 797, 804], "minut": [72, 157, 158, 172, 225, 252, 355, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 553, 554, 591, 623, 624, 629, 688, 793, 797, 804], "17": [72, 118, 124, 232, 465, 508, 560, 563, 591, 670, 752, 797, 941, 983, 991], "tempor": [72, 157, 158, 169, 195, 212, 252, 395, 456, 457, 458, 459, 460, 462, 463, 464, 591, 602, 623, 624, 688, 831, 847, 983], "window": [72, 157, 158, 252, 327, 359, 366, 373, 374, 375, 442, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 544, 575, 576, 591, 623, 624, 688, 758, 797, 804, 812, 813, 814, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 983], "granular": 72, "finer": 72, "permut": 72, "1mo": [72, 157, 158, 172, 225, 252, 334, 338, 351, 352, 355, 358, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 624, 629, 688, 768, 772, 788, 789, 790, 793, 794, 795, 796, 797, 804, 805], "dtrang": 72, "1985": 72, "04": [72, 117, 157, 225, 252, 333, 334, 337, 338, 341, 348, 349, 350, 351, 352, 356, 358, 359, 360, 361, 362, 365, 367, 368, 369, 508, 554, 623, 688, 768, 772, 775, 781, 783, 786, 787, 788, 789, 790, 791, 795, 796, 798, 799, 800, 803, 805, 806, 807, 941], "05": [72, 117, 119, 120, 124, 172, 225, 252, 333, 334, 338, 358, 360, 362, 365, 629, 688, 767, 768, 769, 770, 771, 772, 796, 797, 800, 801, 803, 804, 806], "07": [72, 333, 337, 356, 358, 359, 366, 368, 508, 560, 767, 771, 796, 806, 941], "08": [72, 119, 120, 124, 158, 252, 333, 359, 508, 554, 624, 688, 797, 804, 941], "america": 72, "new_york": 72, "\u03bc": [72, 95, 124, 157, 158, 172, 225, 252, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 508, 510, 554, 560, 623, 624, 629, 688, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 804, 805, 806, 807, 808, 941, 943], "est": 72, "combin": [72, 83, 85, 157, 158, 159, 172, 225, 252, 263, 277, 355, 366, 441, 495, 501, 507, 591, 623, 624, 629, 651, 688, 793, 804, 928, 934, 940], "month_end": 72, "get": [72, 97, 107, 111, 128, 134, 137, 143, 153, 154, 157, 158, 160, 161, 165, 167, 168, 174, 181, 194, 197, 200, 204, 208, 219, 228, 237, 246, 252, 260, 274, 275, 276, 278, 287, 291, 292, 304, 322, 323, 324, 325, 326, 339, 355, 383, 391, 396, 398, 406, 409, 412, 421, 422, 423, 428, 430, 432, 437, 438, 448, 477, 481, 493, 496, 519, 520, 528, 532, 557, 562, 566, 567, 568, 569, 579, 582, 583, 591, 605, 610, 613, 620, 623, 624, 625, 630, 632, 646, 654, 658, 660, 665, 675, 684, 688, 704, 705, 706, 707, 708, 718, 722, 723, 735, 746, 754, 755, 756, 757, 773, 793, 823, 826, 831, 833, 836, 848, 853, 859, 861, 862, 864, 867, 868, 872, 873, 876, 910, 913, 926, 929, 954, 960, 961, 969, 973, 974, 983], "last": [72, 134, 160, 172, 174, 186, 205, 208, 219, 221, 246, 252, 276, 288, 301, 327, 337, 351, 356, 366, 367, 478, 505, 520, 582, 591, 605, 629, 655, 658, 660, 661, 684, 688, 706, 719, 732, 758, 771, 789, 794, 805, 826, 853, 938, 954, 983], "month": [72, 157, 158, 172, 225, 252, 337, 351, 352, 355, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 552, 553, 591, 623, 624, 629, 688, 771, 789, 790, 793, 797, 804], "28": [72, 157, 158, 172, 211, 225, 252, 259, 355, 358, 359, 366, 369, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 624, 629, 688, 793, 796, 797, 804, 807, 991], "disabl": [73, 169, 252], "equal": [73, 101, 102, 112, 119, 120, 152, 157, 172, 179, 252, 303, 372, 388, 410, 455, 456, 457, 458, 459, 460, 462, 463, 464, 493, 494, 500, 514, 539, 575, 576, 591, 623, 629, 638, 688, 734, 883, 884, 885, 886, 887, 888, 890, 891, 892, 896, 926, 927, 933, 947, 983, 991], "encount": [74, 157, 252, 437, 438, 491, 492, 546, 549, 558, 578, 591, 623, 688, 867, 868, 924, 925, 983], "duplic": [77, 165, 171, 172, 221, 252, 396, 591, 628, 629, 661, 688, 833, 983], "certain": [78, 104, 113, 163, 225, 252, 543, 609, 641, 652, 653, 688, 983], "least": [80, 124, 443, 531, 591, 871, 972, 983], "unexpect": [81, 252], "caus": [81, 89, 101, 102, 112, 132, 146, 252, 696, 983], "panic": 81, "mismatch": 83, "incompat": 85, "pa": [88, 117], "chunkedarrai": [88, 181, 252, 762, 983], "recordbatch": [88, 170, 252], "schemadefinit": [88, 90, 91, 92, 94, 252, 688], "schema_overrid": [88, 90, 91, 92, 93, 94, 170, 215, 252, 688], "copi": [88, 89, 132, 135, 136, 170, 210, 215, 216, 229, 252, 379, 514, 591, 607, 608, 666, 688, 693, 747, 751, 764, 817, 947, 960, 965, 966, 983], "closest": 88, "pair": [88, 90, 91, 92, 94, 123, 190, 252, 644, 688, 991], "declar": [88, 90, 91, 92, 94, 252, 688], "sever": [88, 90, 91, 92, 94, 252, 688, 991], "wai": [88, 90, 91, 92, 94, 140, 156, 170, 185, 205, 232, 252, 442, 444, 479, 489, 543, 591, 611, 622, 640, 655, 670, 688, 922], "As": [88, 90, 91, 92, 94, 105, 252, 574, 688], "auto": [88, 90, 91, 92, 94, 110, 116, 220, 252, 508, 688, 941, 991], "automat": [88, 90, 91, 92, 94, 95, 101, 102, 103, 112, 124, 126, 128, 198, 229, 252, 420, 495, 501, 507, 508, 591, 647, 666, 688, 858, 928, 934, 940, 941, 983], "equival": [88, 90, 91, 92, 94, 104, 168, 182, 252, 259, 263, 372, 386, 388, 389, 410, 417, 433, 435, 439, 441, 445, 496, 517, 527, 534, 591, 688, 850, 929, 944, 946, 983], "form": [88, 90, 91, 92, 94, 169, 195, 223, 252, 443, 591, 688, 871, 983], "them": [88, 90, 91, 92, 94, 112, 146, 157, 158, 172, 179, 225, 252, 290, 395, 437, 438, 544, 591, 623, 624, 629, 638, 688, 696, 721, 867, 868, 983], "dimens": [88, 90, 92, 94, 252, 453, 591, 688, 881, 983], "construct": [88, 90, 91, 92, 93, 94, 252, 420, 591, 621, 643, 688, 983], "allow_copi": [89, 132], "interchang": [89, 132], "protocol": [89, 103, 132], "__dataframe__": 89, "convers": [89, 132, 170, 216, 252, 508, 509, 510, 512, 602, 941, 942, 943, 945, 964, 965, 966, 983], "detail": [89, 103, 119, 120, 132, 252, 688, 991], "latest": [89, 104, 113, 132, 387, 429, 591], "index": [89, 93, 97, 103, 118, 132, 150, 157, 158, 163, 168, 172, 186, 192, 194, 204, 217, 225, 230, 252, 260, 274, 275, 276, 278, 279, 280, 288, 298, 302, 303, 355, 456, 457, 458, 459, 460, 462, 463, 464, 467, 477, 489, 502, 521, 591, 623, 624, 629, 654, 668, 688, 704, 705, 706, 707, 708, 710, 711, 719, 729, 733, 734, 793, 850, 869, 895, 898, 910, 922, 935, 955, 983], "throw": [89, 313, 491, 492, 591, 742, 924, 925, 983], "runtimeerror": 89, "from_panda": [89, 105], "from_arrow": 89, "effici": [89, 170, 252], "clone": [90, 91, 92, 93, 94, 135, 215, 216, 252, 607, 688, 747, 964, 965, 966, 974, 983], "dimension": [90, 92, 94, 252, 688, 983], "infer_schema_length": [91, 94, 101, 102, 105, 112, 115, 252, 688], "NOT": [91, 119, 120, 427], "typic": [91, 133, 252, 697, 983], "clearer": 91, "load": [91, 93, 104, 113, 125, 127, 252, 602, 625, 632, 688, 991], "want": [91, 133, 146, 182, 252, 266, 316, 317, 318, 382, 418, 420, 456, 457, 458, 459, 460, 462, 463, 464, 549, 558, 591, 609, 625, 632, 688, 696, 697, 748, 749, 750, 965, 983], "_partial_": [91, 252, 688], "omit": [91, 95, 122, 124, 126, 130, 182, 252], "mani": [91, 94, 103, 146, 252, 696, 983], "scan": [91, 94, 101, 102, 110, 112, 113, 114, 115, 116, 117, 616, 625, 632, 688], "slow": [91, 94, 101, 102, 112, 266, 327, 591, 758, 983], "partial": 91, "present": [91, 119, 124, 399, 591, 974, 983], "np": [92, 149, 215, 252, 521, 591, 688, 835, 839, 841, 842, 883, 955, 983], "ndarrai": [92, 149, 215, 252, 521, 591, 688, 762, 895, 898, 955, 965, 983], "numpi": [92, 118, 138, 215, 216, 252, 437, 438, 591, 688, 835, 839, 841, 842, 867, 868, 883, 965, 966, 974, 983], "columnar": [92, 94, 169, 195, 252], "interpret": [92, 94, 101, 102, 112, 252, 688], "yield": [92, 94, 101, 102, 112, 144, 146, 220, 252, 688, 696, 811, 983], "conclus": [92, 94, 252, 688], "nan_to_nul": [93, 252, 688, 983], "include_index": 93, "datetimeindex": [93, 762, 983], "panda": [93, 105, 118, 216, 252, 351, 352, 525, 591, 688, 789, 790, 966, 967, 983], "instal": [93, 101, 102, 103, 106, 110, 118, 138, 215, 216, 252, 651, 688, 966, 983], "nan": [93, 119, 120, 124, 132, 147, 216, 252, 330, 331, 372, 380, 388, 389, 394, 401, 403, 404, 405, 410, 417, 421, 432, 437, 438, 439, 527, 546, 578, 591, 617, 688, 699, 703, 763, 818, 841, 842, 867, 868, 883, 966, 983, 991], "convert": [93, 96, 104, 105, 113, 132, 211, 212, 213, 214, 215, 218, 252, 303, 334, 362, 365, 419, 497, 508, 509, 510, 512, 591, 688, 734, 768, 800, 803, 930, 941, 942, 943, 945, 952, 963, 964, 965, 966, 974, 983], "pd": [93, 105, 525, 591, 967, 983], "pd_df": 93, "pd_seri": 93, "tbl": [95, 98, 102], "reconstruct": 95, "repr": [95, 124, 126], "need": [95, 101, 102, 105, 119, 120, 157, 158, 203, 215, 252, 303, 420, 471, 493, 591, 623, 624, 688, 903, 926, 983], "trim": 95, "whitespac": [95, 495, 501, 507, 928, 934, 940], "prompt": 95, "extract": [95, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 353, 354, 356, 357, 360, 361, 367, 368, 370, 444, 490, 491, 492, 591, 769, 770, 771, 772, 774, 775, 777, 781, 782, 783, 784, 786, 787, 788, 791, 792, 794, 795, 798, 799, 801, 805, 806, 808, 923, 924, 925], "to_init_repr": [95, 252, 983], "handl": [95, 101, 102, 112, 117, 284, 328, 514, 591, 715, 761, 947, 983], "truncat": [95, 157, 252, 355, 623, 641, 688, 793], "identifi": [95, 178, 184, 221, 252, 637, 661, 688], "compound": 95, "struct": [95, 182, 198, 218, 222, 229, 252, 303, 420, 491, 504, 505, 531, 549, 550, 551, 565, 591, 647, 662, 666, 688, 734, 924, 937, 938], "neither": [95, 105, 196, 252, 303, 734], "source_ac": 95, "source_cha": 95, "ident": [95, 135, 136, 252, 362, 607, 608, 688, 747, 751, 800, 983], "timestamp": [95, 358, 560, 796], "tor_id": 95, "nnel_id": 95, "asia": [95, 769, 770, 801], "tokyo": 95, "123456780": 95, "9876543210": 95, "56": [95, 523, 591], "59": [95, 123, 333, 348, 360, 553, 767, 786, 798], "663053": 95, "jst": 95, "803065983": 95, "2055938745": 95, "38": [95, 124], "18": [95, 158, 252, 326, 359, 366, 369, 394, 407, 591, 624, 641, 688, 807], "050545": 95, "source_actor_id": 95, "source_channel_id": 95, "sr": [95, 693, 983], "to_list": [95, 158, 252, 624, 688, 916, 983], "dummi": [96, 213, 252, 961, 983], "to_dummi": [96, 252, 983], "foo_1": [96, 213, 252], "foo_2": [96, 213, 252], "bar_3": [96, 213, 252], "bar_4": [96, 213, 252], "ham_a": [96, 213, 252], "ham_b": [96, 213, 252], "datatypeclass": 97, "uint32": [97, 118, 144, 252, 276, 279, 280, 292, 337, 340, 344, 346, 348, 350, 353, 356, 357, 360, 367, 368, 452, 484, 493, 496, 521, 525, 591, 707, 710, 711, 723, 742, 771, 774, 781, 783, 786, 788, 791, 794, 795, 798, 805, 806, 811, 840, 896, 917, 967, 983], "regular": [97, 169, 194, 195, 225, 252, 376, 483, 484, 489, 490, 498, 499, 543, 556, 566, 569, 581, 591, 916, 917, 922, 923, 931, 932], "uint64": [97, 159, 252, 279, 280, 390, 451, 591, 710, 711, 825, 879, 983], "bigidx": 97, "read": [98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 146, 252, 418, 584, 591, 616, 621, 643, 688, 696, 983], "batch": [98, 102, 115, 633, 688], "over": [98, 101, 102, 104, 112, 124, 133, 146, 169, 170, 194, 195, 220, 231, 234, 252, 266, 327, 381, 394, 418, 419, 455, 456, 457, 458, 459, 460, 462, 463, 464, 537, 549, 550, 558, 565, 573, 591, 672, 696, 697, 758, 883, 884, 885, 887, 891, 983], "fetch": [98, 112, 173, 252, 607, 609, 625, 632, 688], "ideal": 98, "read_csv_batch": [98, 603], "tpch": [98, 102], "tables_scale_100": [98, 102], "lineitem": [98, 102, 103], "try_parse_d": [98, 101, 102, 112], "In": [99, 104, 113, 116, 124, 126, 129, 133, 144, 146, 157, 158, 182, 252, 266, 591, 623, 624, 688, 696, 811, 878, 983], "probabl": [99, 129, 371, 591, 810, 983], "n_row": [100, 101, 102, 106, 110, 112, 114, 115, 116, 170, 252, 616, 688], "accept": [100, 101, 102, 104, 106, 110, 134, 145, 156, 198, 205, 219, 229, 232, 252, 259, 376, 395, 442, 479, 534, 535, 536, 540, 542, 543, 544, 545, 551, 556, 566, 569, 580, 581, 591, 605, 615, 622, 647, 655, 660, 666, 670, 688, 831, 983], "stop": [100, 101, 102, 106, 110, 112, 114, 115, 116, 337, 339, 340, 342, 343, 348, 350, 356, 357, 359, 360, 364, 366, 367, 368, 370, 766, 768, 771, 773, 774, 776, 781, 783, 786, 788, 791, 794, 795, 797, 798, 802, 804, 805, 806, 807, 808], "textio": 101, "new_column": [101, 102, 105, 112, 191, 252], "comment_char": [101, 102, 112], "quote_char": [101, 102, 112], "skip_row": [101, 102, 112], "missing_utf8_is_empty_str": [101, 102, 112], "ignore_error": [101, 102, 112], "n_thread": [101, 102], "8192": 101, "csvencod": [101, 102, 112], "low_memori": [101, 102, 110, 112, 115, 116], "storage_opt": [101, 104, 106, 110, 113, 114, 116], "skip_rows_after_head": [101, 102, 112], "row_count_nam": [101, 102, 106, 110, 112, 114, 115, 116], "row_count_offset": [101, 102, 106, 110, 112, 114, 115, 116], "sample_s": [101, 102], "eol_char": [101, 102, 112], "we": [101, 102, 105, 112, 172, 252, 285, 497, 564, 584, 629, 633, 688, 697, 716, 827, 875, 930, 983], "handler": [101, 102, 105], "g": [101, 102, 104, 105, 106, 110, 113, 114, 116, 157, 158, 172, 223, 225, 252, 259, 266, 355, 359, 366, 376, 456, 457, 458, 459, 460, 462, 463, 464, 471, 556, 591, 623, 624, 629, 644, 688, 793, 797, 804, 896, 965, 983], "builtin": [101, 102, 105], "stringio": [101, 102], "fsspec": [101, 102, 106, 110, 113, 114, 116, 118], "remot": [101, 102, 106, 110], "first": [101, 102, 105, 112, 115, 123, 133, 155, 157, 160, 172, 174, 181, 185, 186, 208, 214, 220, 221, 225, 237, 252, 276, 278, 285, 288, 289, 303, 327, 352, 355, 359, 391, 398, 412, 420, 444, 467, 479, 489, 491, 492, 498, 499, 542, 549, 558, 562, 584, 591, 609, 623, 625, 629, 632, 640, 661, 667, 675, 688, 706, 716, 719, 720, 734, 758, 760, 790, 793, 797, 826, 836, 853, 858, 895, 922, 924, 925, 931, 932, 954, 963, 983, 991], "autogener": [101, 102, 112], "column_x": [101, 102, 112], "enumer": [101, 102, 112, 170, 252], "shorter": [101, 102], "remain": [101, 102, 112, 144, 252, 504, 505, 633, 688, 811, 937, 938, 983], "comment": [101, 102, 112], "instanc": [101, 102, 112, 124, 126, 130, 146, 151, 252, 313, 429, 456, 457, 458, 459, 460, 462, 463, 464, 549, 558, 591, 633, 668, 688, 696, 742, 983], "special": [101, 102, 112, 490, 697, 923, 983], "escap": [101, 102, 112], "dure": [101, 102, 112, 130, 146, 252, 696, 983], "would": [101, 102, 112, 276, 288, 428, 449, 540, 591, 706, 719, 877, 965, 983], "prefer": [101, 102, 104, 112, 127, 133, 146, 169, 194, 195, 234, 252, 266, 455, 591, 672, 688, 696, 697, 883, 983, 991], "treat": [101, 102, 112, 483, 498, 499, 916, 931, 932], "10000": [101, 170, 252, 514], "check": [101, 102, 112, 119, 120, 152, 166, 168, 252, 262, 264, 282, 306, 309, 310, 395, 399, 483, 487, 506, 591, 633, 688, 694, 695, 713, 736, 739, 740, 832, 834, 837, 838, 840, 845, 846, 847, 849, 850, 896, 916, 920, 939, 983], "might": [101, 102, 112, 128, 266, 529, 591, 966, 983], "issu": [101, 102, 105, 112, 325, 326, 519, 591, 756, 757, 953, 983], "iso8601": [101, 102, 112], "alwai": [101, 123, 133, 234, 252, 428, 508, 584, 633, 672, 688, 697, 941, 983, 991], "physic": [101, 102, 172, 252, 314, 525, 591, 606, 628, 629, 688, 744, 967, 983], "cpu": [101, 102], "system": [101, 102], "wrongli": 101, "done": [101, 102, 112, 117, 155, 172, 252, 265, 267, 313, 494, 500, 538, 591, 629, 688, 742, 927, 933, 983], "buffer": [101, 102, 144, 169, 252, 811, 983], "modifi": [101, 102, 112, 128, 130, 162, 169, 227, 252, 277, 358, 369, 483, 489, 490, 498, 591, 796, 807, 880, 916, 922, 923, 931, 944, 946, 983], "lossi": [101, 102, 112], "decod": [101, 102], "reduc": [101, 102, 110, 112, 114, 115, 116, 239, 240, 242, 245, 471, 558, 591, 653, 677, 678, 680, 683, 688, 860, 874, 903, 953, 983], "usag": [101, 102, 112, 124, 126, 203, 252, 904, 983], "expens": [101, 102, 110, 112, 115, 116, 125, 127, 133, 169, 194, 195, 220, 221, 252, 266, 591, 661, 688, 696, 697, 983, 991], "nativ": [101, 106, 110, 122, 133, 169, 195, 212, 234, 252, 266, 591, 596, 672, 697, 983, 991], "parser": 101, "even": [101, 444, 591], "regard": [101, 546, 578], "sens": [101, 106, 110, 114, 116, 157, 158, 179, 225, 252, 623, 624, 638, 688], "particular": [101, 106, 110, 114, 116, 144, 252, 811, 983], "storag": [101, 104, 106, 110, 113, 114, 116], "skip": [101, 102, 105, 110, 112, 116, 223, 252, 697, 983], "offset": [101, 102, 106, 110, 112, 114, 115, 116, 157, 158, 204, 225, 230, 252, 298, 351, 352, 355, 359, 366, 477, 502, 508, 510, 591, 623, 624, 654, 668, 688, 729, 789, 790, 793, 797, 804, 910, 935, 941, 943, 983], "row_count": [101, 102, 106, 110, 112, 114, 115, 116], "sampl": [101, 102, 234, 252, 476, 591, 672, 909, 983], "estim": [101, 102, 144, 252, 267, 374, 375, 408, 538, 591, 688, 811, 813, 814, 851, 983], "alloc": [101, 102, 144, 189, 252, 811, 983], "scan_csv": [101, 102, 652, 653, 688], "glob": [101, 102, 112, 114, 115, 116], "pattern": [101, 102, 112, 114, 115, 116, 169, 252, 426, 483, 484, 489, 490, 498, 499, 897, 898, 916, 917, 922, 923, 931, 932, 983], "store": [101, 110, 146, 169, 195, 252, 696, 983], "continu": [101, 110, 476, 591, 909, 983], "benchmark": [101, 110], "50000": 102, "batchedcsvread": [102, 602], "upon": 102, "creation": 102, "gather": 102, "next_batch": 102, "big": 102, "interest": 102, "seen_group": 102, "big_fil": 102, "while": [102, 104, 105, 113, 124, 126, 169, 178, 220, 252, 637, 688], "df_current_batch": 102, "concat": [102, 746, 864, 983], "partition_df": 102, "partition_bi": [102, 170, 252], "as_dict": [102, 184, 252], "fh": 102, "write_csv": [102, 112, 252], "els": [102, 584], "partition_on": 103, "partition_rang": 103, "partition_num": 103, "dbreadengin": 103, "connectorx": [103, 118], "raw": 103, "partit": [103, 104, 110, 113, 117, 170, 184, 252], "backend": [103, 104, 113], "transfer": 103, "document": [103, 105, 362, 365, 492, 508, 509, 510, 512, 800, 803, 925, 941, 942, 943, 945], "redshift": 103, "mysql": 103, "mariadb": 103, "clickhous": 103, "oracl": 103, "bigqueri": 103, "pleas": 103, "doc": [103, 138, 252], "github": 103, "sfu": 103, "db": 103, "connector": 103, "destin": 103, "sqlite": 103, "develop": [103, 124, 126], "flight_sql": 103, "further": [103, 966, 983], "wide": [103, 155, 178, 223, 252, 637, 688], "adopt": 103, "significantli": [103, 991], "better": [103, 133, 215, 234, 252, 266, 531, 591, 672, 897, 898, 983], "driver": 103, "cpp": 103, "partition_col": 103, "explicitli": [103, 122, 124, 130, 420, 580, 591], "delta_table_opt": [104, 113], "lake": [104, 113, 602], "root": [104, 113, 407, 419, 430, 446, 480, 518, 590, 591, 912, 983], "filesystem": [104, 113], "absolut": [104, 113, 119, 120, 258, 373, 374, 375, 591, 692, 812, 813, 814, 983], "gc": [104, 113], "azur": [104, 113], "deltalak": [104, 113, 118], "cloud": [104, 113, 117], "configur": [104, 113], "authent": [104, 113], "keyword": [104, 110, 113, 138, 185, 194, 198, 229, 232, 252, 444, 577, 580, 591, 640, 647, 666, 670, 688, 983], "table_path": [104, 113], "avoid": 104, "year": [104, 113, 157, 158, 172, 225, 252, 342, 343, 355, 356, 359, 366, 367, 456, 457, 458, 459, 460, 462, 463, 464, 552, 553, 591, 623, 624, 629, 688, 776, 777, 793, 794, 797, 804, 805], "2021": [104, 113, 139, 155, 157, 225, 252, 508, 564, 623, 688, 769, 770, 777, 801, 847, 941, 983], "aw": [104, 113], "bucket": [104, 113, 359, 366, 797, 804, 827, 983], "aws_access_key_id": [104, 113], "the_aws_access_key_id": [104, 113], "aws_secret_access_kei": [104, 113], "the_aws_secret_access_kei": [104, 113], "googl": [104, 113], "service_account": [104, 113], "service_account_json_absolute_path": [104, 113], "az": [104, 113], "adl": [104, 113], "abf": [104, 113], "azure_storage_account_nam": [104, 113], "azure_storage_account_kei": [104, 113], "without_fil": [104, 113], "track": [104, 113, 133, 252, 303], "sheet_id": 105, "sheet_nam": 105, "xlsx2csv_option": 105, "read_csv_opt": 105, "noreturn": 105, "xlsx2csv": [105, 118], "read_csv": [105, 112], "nor": [105, 196, 252], "skip_empty_lin": 105, "my": [105, 117], "datasheet": 105, "correct": [105, 374, 375, 408, 461, 476, 591, 633, 688, 813, 814, 851, 889, 909, 983], "look": [105, 303, 306, 736], "fix": [105, 122, 124, 369, 456, 457, 458, 459, 460, 462, 463, 464, 591, 807], "whole": [105, 478, 479, 489, 591, 688, 922], "With": [105, 133, 168, 252, 266, 591, 697, 850, 983], "1000": [105, 144, 214, 252, 344, 345, 514, 782, 963, 983, 991], "spreadsheet": [105, 186, 252], "xl": 105, "xlsm": 105, "xlsb": 105, "odf": 105, "od": [105, 507, 940], "odt": 105, "memory_map": [106, 110, 114], "v2": [106, 114], "greatli": [106, 114], "improv": [106, 114, 653, 688], "repeat": [106, 114, 450, 452, 591], "o": [106, 114, 311, 327, 488, 526, 591, 741, 758, 921, 968, 983], "page": [106, 110, 114, 116, 252, 591, 602, 653, 688, 983], "give": [106, 110, 114, 115, 116, 178, 221, 252, 339, 408, 452, 527, 591, 602, 637, 661, 688, 773, 851, 983], "That": [106, 633, 688], "filenam": 106, "my_fil": 106, "write_ipc": [106, 252], "read_ndjson": 108, "parallelstrategi": [110, 116], "use_statist": [110, 116], "awar": [110, 169, 195, 212, 252, 508, 510, 941, 943], "stabl": [110, 138, 196, 252, 415, 591, 637, 688], "row_group": [110, 116], "pressur": [110, 115, 116, 471, 591, 653, 688, 903, 983], "read_tabl": 110, "with_column_nam": 112, "push": [112, 114, 115, 116, 117], "down": [112, 114, 115, 116, 117, 385, 591, 822, 983], "therebi": [112, 114, 115, 116], "potenti": [112, 114, 115, 116], "overhead": [112, 114, 115, 116], "realloc": [112, 114, 115, 146, 252, 696, 983], "headerless": 112, "unlik": 112, "fewer": 112, "my_long_fil": 112, "doesn": [112, 371, 591, 810, 974, 983], "thing": [112, 557], "less": [112, 172, 252, 410, 417, 494, 500, 505, 514, 591, 629, 688, 927, 933, 938, 947, 991], "limit": [112, 148, 252, 305, 316, 317, 318, 381, 387, 591, 618, 625, 653, 688, 748, 749, 750, 819, 983], "breezah": 112, "languag": [112, 157, 158, 172, 225, 252, 355, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 624, 629, 688, 793, 797, 804], "hard": [112, 633, 688], "mydf": 112, "lambda": [112, 133, 151, 185, 234, 252, 266, 303, 373, 374, 375, 418, 419, 455, 537, 549, 550, 558, 565, 573, 591, 633, 640, 672, 688, 697, 734, 812, 813, 814, 983], "simpli": [112, 549, 558], "idx": [112, 157, 170, 252, 303, 623, 688, 734, 898, 983], "uint16": [112, 325, 326, 519, 591, 756, 757, 953, 983], "u16": [112, 124, 991], "aws_region": 113, "eu": 113, "central": [113, 408, 476, 591, 851, 909, 983], "allow_pyarrow_filt": 117, "comparison": 117, "dset": 117, "folder": 117, "1970": 117, "stdout": [118, 155, 252], "platform": 118, "linux": 118, "90": 118, "wsl2": 118, "x86_64": 118, "glibc2": 118, "main": 118, "apr": 118, "14": [118, 124, 133, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 252, 343, 394, 591, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 797], "44": [118, 329, 591], "51": 118, "gcc": 118, "matplotlib": [118, 641, 651, 688], "check_dtyp": [119, 120], "check_exact": [119, 120], "rtol": [119, 120], "1e": [119, 120], "atol": [119, 120], "nans_compare_equ": [119, 120], "check_column_ord": 119, "check_row_ord": 119, "assertionerror": [119, 120], "compar": [119, 120, 152, 252, 372, 388, 389, 410, 417, 439, 536, 591, 896, 983], "exactli": [119, 120, 123, 124, 126, 504, 505, 904, 937, 938, 983], "toler": [119, 120, 172, 252, 629, 688], "inexact": [119, 120], "assert": [119, 120, 122, 124, 126, 158, 252, 602, 624, 688, 824, 983], "irrespect": 119, "unsort": 119, "check_nam": 120, "s1": [120, 151, 252, 734, 850, 966, 975, 983], "searchstrategi": [121, 123, 124, 126], "null_prob": [121, 124, 126], "percentag": [121, 124, 126, 443, 591, 871, 983], "chanc": [121, 124, 126, 991], "independ": [121, 122, 124, 126], "flag": [121, 468, 483, 489, 490, 498, 591, 614, 633, 688, 899, 916, 922, 923, 931, 983], "hypothesi": [121, 122, 123, 124, 125, 126, 991], "sampled_from": [121, 991], "unique_small_int": 121, "ccy": [121, 991], "gbp": [121, 991], "eur": [121, 139, 155, 252, 991], "jpy": [121, 991], "min_col": [122, 124], "max_col": [122, 124], "suitabl": [122, 133, 252, 266, 467, 591, 697, 895, 983, 991], "standalon": [122, 124], "itself": [122, 631, 688], "mincol": 122, "exact": [122, 124, 126, 203, 252, 508, 509, 510, 527, 591, 941, 942, 943], "minimum": [122, 123, 124, 126, 151, 180, 252, 373, 374, 375, 432, 438, 449, 569, 591, 639, 653, 688, 748, 785, 812, 813, 814, 868, 873, 877, 983, 991], "especi": 122, "test_unique_xyz": 122, "assert_someth": 122, "punctuat": 122, "test_special_char_colname_init": 122, "inner_dtyp": [123, 126], "select_from": [123, 126], "min_siz": [123, 124, 126, 991], "max_siz": [123, 124, 126, 991], "anoth": [123, 156, 252, 302, 327, 332, 424, 427, 591, 622, 667, 688, 733, 758, 766, 896, 983], "randomli": 123, "innermost": 123, "ignor": [123, 124, 126, 176, 207, 252, 284, 328, 358, 373, 374, 375, 437, 438, 591, 715, 761, 796, 812, 813, 814, 867, 868, 983], "unset": [123, 303, 358, 796], "2x": 123, "lst": 123, "11330": 123, "24030": 123, "116": 123, "zz": [123, 126], "small": [123, 173, 252, 359, 616, 688, 991], "uint8_pair": [123, 991], "uint": [123, 991], "zip": [123, 991], "131": 123, "176": 123, "149": [123, 991], "include_col": 124, "allow_infin": [124, 126], "allowed_dtyp": [124, 126, 991], "excluded_dtyp": [124, 126], "describ": [124, 155, 252, 983], "desir": [124, 303, 734], "n_chunk": [124, 126, 252, 983], "randomis": 124, "onto": 124, "either": [124, 158, 168, 173, 176, 184, 194, 207, 252, 508, 535, 540, 580, 624, 631, 688, 941], "pct": 124, "preced": 124, "disallow": [124, 126], "exclud": [124, 126, 323, 326, 395, 543, 578, 591, 831, 847, 983], "deploi": [124, 126], "characterist": [124, 126], "concret": [124, 126], "test_repr": 124, "isinst": [124, 126, 252], "0x11f561580": 124, "known": [124, 303, 672, 734], "0565": 124, "34715": 124, "5844": 124, "33": [124, 460, 465, 543, 591, 888, 983], "076854": 124, "3382": 124, "48662": 124, "7540": 124, "29": [124, 157, 158, 172, 225, 252, 351, 355, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 624, 629, 688, 789, 793, 797, 804], "836271": 124, "4063": 124, "06": [124, 225, 252, 333, 343, 357, 358, 370, 796, 797, 806], "39092": 124, "1889": 124, "13": [124, 135, 136, 147, 148, 154, 158, 163, 173, 181, 229, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 252, 455, 457, 544, 549, 558, 583, 591, 607, 608, 617, 618, 624, 631, 666, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 688, 697, 797, 804, 805, 983], "41": [124, 991], "874455": 124, "15836": 124, "1755e": 124, "575050513": 124, "profil": [125, 127, 688], "balanc": [125, 127, 991], "set_environ": 125, "polars_hypothesis_profil": [125, 127], "1500": 125, "constructor": 126, "max_data_s": 126, "normal": [126, 157, 252, 371, 408, 476, 591, 623, 688, 810, 851, 909, 983], "test_repr_is_valid_str": 126, "experi": 126, "create_list_strategi": [126, 991], "polars_max_thread": 128, "behind": 128, "lock": 128, "reason": 128, "pyspark": 128, "udf": [128, 133, 185, 234, 252, 266, 444, 537, 591, 640, 672, 688, 697, 983], "similar": [128, 151, 172, 252, 362, 365, 442, 584, 591, 629, 688, 800, 803], "recommend": [128, 169, 185, 252], "scope": 130, "lifetim": 130, "initi": [130, 549, 558, 584], "whatev": 130, "were": 130, "enter": 130, "advantag": [130, 185, 252], "initialis": [130, 688], "set_": 130, "set_verbos": 130, "do_various_th": 130, "restor": 130, "init": 130, "prefix": [130, 261, 310, 419, 506, 514, 518, 591, 740, 939, 947], "breviti": 130, "nan_as_nul": 132, "_pyarrowdatafram": 132, "nullabl": 132, "extens": [132, 216, 252, 966, 983], "propag": [132, 176, 207, 252, 437, 438, 591, 867, 868, 983], "inference_s": [133, 252], "256": [133, 252, 871, 983], "user": [133, 185, 234, 252, 266, 444, 468, 537, 591, 640, 672, 688, 697, 899, 983], "logic": [133, 234, 252, 263, 441, 525, 534, 591, 621, 628, 643, 669, 672, 688, 697, 967, 983], "almost": [133, 234, 252, 672, 697, 983], "_significantly_": [133, 234, 252, 672, 697, 983], "intens": [133, 234, 252, 672, 697, 983], "becaus": [133, 144, 157, 173, 223, 234, 252, 285, 623, 672, 688, 697, 716, 811, 983], "forc": [133, 172, 234, 252, 628, 629, 672, 688, 697, 983], "materi": [133, 234, 252, 641, 672, 688, 697, 983], "parallelis": [133, 234, 252, 672, 697, 983], "optimis": [133, 234, 252, 672, 688, 697, 897, 898, 983], "achiev": [133, 234, 252, 266, 591, 672, 697, 983], "best": [133, 234, 252, 266, 591, 672, 697, 983], "tri": [133, 252], "arbitrarili": [133, 252], "rearrang": [133, 252], "transform": [133, 252, 418, 511, 513, 591], "preserv": [133, 215, 216, 252, 473, 591, 906, 966, 983], "lru_cach": [133, 252, 266, 591, 697, 983], "magnitud": [133, 252, 266, 591, 697, 983], "speedup": [133, 169, 252, 266, 591, 697, 983], "column_1": [133, 220, 252], "scalar": [133, 168, 194, 252, 467, 537, 564, 591, 850, 895, 983], "k": [134, 219, 252, 311, 314, 408, 526, 591, 605, 660, 688, 741, 744, 851, 968, 983], "intoexpr": [134, 156, 157, 158, 198, 205, 219, 229, 232, 252, 395, 442, 479, 535, 536, 540, 542, 544, 545, 549, 551, 558, 566, 569, 577, 580, 581, 584, 591, 605, 622, 623, 624, 647, 655, 660, 666, 670, 688, 831, 983], "nulls_last": [134, 205, 219, 252, 276, 478, 591, 605, 655, 660, 688, 706, 983], "smallest": [134, 219, 252, 311, 591, 605, 660, 688, 741, 983], "largest": [134, 157, 158, 172, 219, 225, 252, 355, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 526, 591, 605, 623, 624, 629, 660, 688, 793, 797, 804, 968, 983], "top": [134, 219, 252, 605, 660, 688], "top_k": [134, 252, 311, 591, 605, 688, 741, 983], "cheap": [135, 136, 252, 607, 608, 688, 696, 747, 751, 983], "deepcopi": [135, 136, 252, 607, 608, 688, 747, 751, 983], "clear": [136, 252, 608, 688, 751, 983], "properti": [137, 143, 161, 197, 200, 228, 252, 610, 613, 646, 665, 688, 991], "appl": [137, 162, 171, 190, 192, 211, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 252, 446, 454, 487, 506, 518, 591, 628, 644, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 688, 920, 939], "banana": [137, 211, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 252, 446, 454, 518, 591, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683], "pearson": [138, 252, 408, 476, 546, 571, 591, 851, 909, 983], "correl": [138, 252, 546, 571, 575, 578], "coeffici": [138, 252, 476, 591, 909, 983], "corrcoef": [138, 252], "percentil": [139, 252, 760, 983], "summari": [139, 252, 760, 983], "One": [139, 182, 186, 252, 263, 441, 591, 760, 983], "glimps": [139, 160, 252], "usd": [139, 155, 252, 991], "2020": [139, 155, 158, 252, 334, 338, 341, 344, 345, 347, 349, 354, 358, 361, 362, 365, 508, 509, 510, 624, 688, 768, 772, 775, 782, 784, 787, 792, 796, 799, 800, 803, 941, 942, 943], "null_count": [139, 142, 252, 327, 591, 758, 760, 983], "266667": [139, 252], "666667": [139, 176, 226, 240, 252, 373, 591, 664, 678, 688], "std": [139, 252, 455, 591, 688, 760, 890, 983], "101514": [139, 252], "707107": [139, 252, 374, 591, 813, 983], "57735": [139, 252], "median": [139, 186, 252, 458, 591, 667, 688, 760, 886, 983], "more_column": [140, 145, 199, 222, 252, 376, 556, 591, 611, 615, 648, 662, 688], "Or": [140, 156, 157, 158, 172, 205, 225, 232, 252, 442, 479, 543, 584, 591, 611, 622, 623, 624, 629, 655, 670, 688], "subset": [142, 182, 221, 252, 612, 661, 688], "snippet": [142, 252, 612, 688], "is_nul": [142, 252, 591, 612, 688, 983], "sizeunit": [144, 252, 811, 983], "heap": [144, 252, 811, 983], "its": [144, 252, 333, 359, 366, 479, 591, 767, 797, 804, 811, 983], "bitmap": [144, 252, 811, 983], "therefor": [144, 252, 584, 811, 983], "structarrai": [144, 252, 811, 983], "constant": [144, 158, 252, 379, 591, 624, 688, 811, 817, 983], "unchang": [144, 252, 525, 591, 633, 672, 688, 811, 967, 983], "capac": [144, 203, 252, 811, 904, 983], "ffi": [144, 252, 811, 983], "kb": [144, 252, 811, 983], "mb": [144, 252, 811, 983], "gb": [144, 252, 811, 983], "tb": [144, 252, 811, 983], "revers": [144, 252, 322, 323, 324, 325, 326, 419, 446, 518, 591, 688, 754, 755, 756, 757, 983], "1_000_000": [144, 252, 811, 983], "25888898": [144, 252], "689577102661133": [144, 252], "long": [145, 178, 223, 252, 615, 637, 688], "letter": [145, 237, 246, 252, 376, 490, 556, 591, 615, 675, 684, 688, 923], "thu": [146, 252, 546, 578, 696, 983], "faster": [146, 223, 252, 266, 455, 496, 529, 591, 652, 653, 688, 696, 697, 883, 929, 983], "onlin": [146, 252, 696, 983], "rerun": [146, 252, 696, 983], "fill_valu": [147, 202, 223, 252, 470, 591, 650, 688, 902, 983], "Not": [147, 252, 401, 403, 420, 591, 617, 688], "To": [147, 252, 330, 331, 355, 381, 483, 489, 490, 498, 581, 591, 617, 688, 793, 916, 922, 923, 931], "fillnullstrategi": [148, 252, 381, 591, 618, 688, 819, 983], "matches_supertyp": [148, 252, 618, 688], "forward": [148, 172, 252, 351, 381, 387, 591, 618, 629, 688, 789, 819, 983], "consecut": [148, 252, 305, 381, 387, 482, 591, 618, 688, 819, 915, 983], "supertyp": [148, 252, 265, 591, 618, 688], "fill_nan": [148, 252, 591, 688, 983], "OR": [149, 252, 536, 619, 688], "reduct": [151, 252], "supercast": [151, 252], "parent": [151, 252], "rule": [151, 252], "arithmet": [151, 252], "zip_with": [151, 252, 983], "foo11": [151, 252], "bar22": [151, 252], "null_equ": [152, 252, 896, 983], "retriev": [153, 252, 279, 280, 515, 710, 711, 948], "return_as_str": [155, 252], "preview": [155, 252], "nice": [155, 252], "few": [155, 252], "rather": [155, 172, 252, 514, 629, 688, 947], "head": [155, 174, 208, 252, 265, 412, 591, 632, 688, 853, 954, 983], "tail": [155, 160, 252, 265, 476, 591, 688, 826, 909, 983], "more_bi": [156, 184, 205, 252, 479, 591, 622, 655, 688], "maintain_ord": [156, 184, 186, 221, 225, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 252, 260, 266, 304, 521, 528, 547, 591, 609, 614, 616, 622, 641, 651, 652, 653, 661, 671, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 688, 735, 759, 875, 969, 983], "consist": [156, 184, 252, 508, 622, 688, 941], "agg": [156, 157, 158, 252, 260, 266, 382, 384, 478, 479, 521, 533, 547, 591, 609, 614, 616, 622, 623, 624, 641, 651, 688], "index_column": [157, 158, 252, 623, 624, 688], "include_boundari": [157, 252, 623, 688], "start_bi": [157, 252, 623, 688], "startbi": [157, 252, 623, 688], "dynamicgroupbi": [157, 252], "groupbi": [157, 158, 182, 252, 260, 266, 285, 327, 382, 384, 442, 478, 479, 521, 533, 537, 547, 591, 609, 614, 616, 623, 624, 641, 651, 688, 716, 758, 983], "member": [157, 252, 623, 688, 838, 983], "seen": [157, 252, 305, 387, 591, 623, 688], "roll": [157, 158, 252, 351, 352, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 544, 575, 576, 591, 623, 624, 688, 789, 790, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 983], "slot": [157, 252, 284, 327, 328, 591, 623, 688, 715, 758, 761, 983], "1n": [157, 158, 172, 225, 252, 355, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 624, 629, 688, 793, 797, 804], "nanosecond": [157, 158, 172, 225, 252, 355, 359, 360, 366, 456, 457, 458, 459, 460, 462, 463, 464, 554, 591, 623, 624, 629, 688, 793, 797, 798, 804], "1u": [157, 158, 172, 225, 252, 355, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 624, 629, 688, 793, 797, 804], "microsecond": [157, 158, 172, 225, 252, 355, 359, 360, 366, 456, 457, 458, 459, 460, 462, 463, 464, 553, 554, 591, 623, 624, 629, 641, 688, 793, 797, 804], "1m": [157, 158, 172, 225, 252, 344, 345, 347, 354, 355, 359, 361, 366, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 624, 629, 688, 782, 784, 792, 793, 797, 799, 804], "millisecond": [157, 158, 172, 225, 252, 355, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 554, 591, 623, 624, 629, 688, 793, 797, 804], "1h": [157, 158, 172, 225, 252, 355, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 624, 629, 688, 774, 793, 797, 804], "1w": [157, 158, 172, 225, 252, 355, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 624, 629, 688, 793, 797, 804], "week": [157, 158, 172, 225, 252, 355, 359, 366, 368, 456, 457, 458, 459, 460, 462, 463, 464, 554, 591, 623, 624, 629, 688, 793, 797, 804, 806], "1y": [157, 158, 172, 225, 252, 342, 355, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 624, 629, 688, 776, 793, 797, 804, 808], "1i": [157, 158, 172, 225, 252, 355, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 624, 629, 688, 793], "suffix": [157, 158, 171, 172, 198, 225, 229, 232, 252, 261, 309, 355, 359, 366, 401, 403, 404, 405, 419, 442, 446, 454, 456, 457, 458, 459, 460, 462, 463, 464, 487, 591, 623, 624, 628, 629, 647, 666, 667, 670, 688, 739, 793, 797, 804, 920], "_satur": [157, 158, 172, 225, 252, 355, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 624, 629, 688, 793, 797, 804], "satur": [157, 158, 172, 225, 252, 355, 359, 366, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 624, 629, 688, 793, 797, 804], "10i": [157, 158, 252, 623, 624, 688], "ascend": [157, 158, 252, 623, 624, 688], "often": [157, 158, 252, 283, 452, 591, 623, 624, 688, 714], "dynam": [157, 252, 303, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 688, 734], "matter": [157, 158, 169, 195, 212, 252, 623, 624, 688], "_lower_bound": [157, 252, 623, 688], "_upper_bound": [157, 252, 623, 688], "impact": [157, 252, 623, 688], "harder": [157, 252, 623, 688], "inclus": [157, 158, 252, 395, 456, 457, 458, 459, 460, 462, 463, 464, 503, 504, 591, 623, 624, 688, 831, 936, 937, 983], "datapoint": [157, 252, 623, 688], "mondai": [157, 252, 368, 623, 688, 806], "tuesdai": [157, 252, 623, 688], "wednesdai": [157, 252, 623, 688], "thursdai": [157, 252, 623, 688], "fridai": [157, 252, 623, 688], "saturdai": [157, 252, 623, 688], "sundai": [157, 252, 368, 623, 688, 806], "date_rang": [157, 225, 252, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 364, 366, 367, 368, 369, 370, 623, 688, 766, 768, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 804, 805, 806, 807, 808], "30m": [157, 252, 359, 366, 623, 688, 797, 804], "time_min": [157, 252, 623, 688], "time_max": [157, 252, 623, 688], "23": [157, 158, 252, 333, 340, 359, 553, 623, 624, 688, 767, 774, 991], "boundari": [157, 252, 316, 317, 318, 591, 623, 688, 748, 749, 750, 827, 983], "time_count": [157, 252, 623, 688], "_lower_boundari": [157, 252, 623, 688], "_upper_boundari": [157, 252, 623, 688], "lower_bound": [157, 252, 316, 318, 395, 591, 623, 688, 748, 750, 831, 971, 983], "upper_bound": [157, 252, 303, 316, 317, 395, 591, 623, 688, 748, 749, 831, 857, 983], "time_agg_list": [157, 252, 623, 688], "arang": [157, 223, 234, 252, 623, 672, 688], "2i": [157, 252, 623, 688], "3i": [157, 252, 623, 688], "a_agg_list": [157, 252, 623, 688], "rollinggroupbi": [158, 252], "dynamic_groupbi": [158, 252, 624, 688], "groupby_dynam": [158, 252, 624, 688], "48": [158, 252, 624, 688], "19": [158, 172, 252, 359, 624, 629, 688, 797, 804], "43": [158, 252, 326, 591, 624, 688], "strptime": [158, 252, 358, 624, 688, 796], "set_sort": [158, 172, 225, 252, 591, 624, 629, 688, 983], "2d": [158, 215, 252, 564, 624, 688, 771], "sum_a": [158, 252, 624, 688], "min_a": [158, 252, 624, 688], "max_a": [158, 252, 624, 688], "seed": [159, 196, 252, 390, 449, 466, 472, 591, 825, 877, 894, 905, 983], "seed_1": [159, 252, 390, 591, 825, 983], "seed_2": [159, 252, 390, 591, 825, 983], "seed_3": [159, 252, 390, 591, 825, 983], "hash": [159, 252, 591, 983], "u64": [159, 252, 390, 451, 591, 641, 688, 825, 983], "10783150408545073287": [159, 252], "1438741209321515184": [159, 252], "10047419486152048166": [159, 252], "2047317070637311557": [159, 252], "ab": [160, 174, 208, 229, 252, 515, 516, 591, 666, 688, 826, 853, 954, 983], "grown": [162, 252], "baz": [163, 164, 186, 222, 252, 503, 505, 627, 662, 688, 938], "intermedi": [164, 252, 627, 688, 830, 983, 991], "linear": [164, 188, 244, 252, 281, 394, 423, 448, 460, 544, 545, 572, 591, 627, 642, 682, 688, 712, 830, 876, 888, 983], "mask": [165, 167, 252, 282, 306, 307, 396, 398, 406, 483, 485, 591, 713, 736, 737, 820, 831, 833, 836, 848, 872, 873, 897, 916, 918, 975, 983], "visual": [165, 167, 252], "buffer_s": [169, 252], "intern": [169, 252], "veri": [169, 220, 252, 266, 591, 608, 688, 751, 983], "fit": [169, 203, 223, 252, 471, 591, 903, 904, 983], "signific": [169, 252, 266, 591], "4x": [169, 252], "materialis": [169, 170, 194, 195, 252], "iter_row": [170, 194, 195, 252], "17_500": [170, 252], "klmnoopqrstuvwxyz": [170, 252], "__name__": [170, 252], "7500": [170, 252], "15_000": [170, 252], "record_batch": [170, 252], "to_arrow": [170, 252, 983], "to_batch": [170, 252], "date32": [170, 252], "large_str": [170, 210, 216, 252], "15000": [170, 252], "2500": [170, 252], "joinstrategi": [171, 252, 628, 688], "left_on": [171, 172, 252, 628, 629, 688], "right_on": [171, 172, 252, 628, 629, 688], "_right": [171, 172, 252, 628, 629, 688], "outer": [171, 252, 628, 688], "semi": [171, 252, 628, 688], "anti": [171, 252, 628, 688, 897, 898, 983], "cross": [171, 252, 628, 688], "join_asof": [171, 252, 628, 688], "stringcach": [171, 252, 602], "other_df": [171, 252], "by_left": [172, 252, 629, 688], "by_right": [172, 252, 629, 688], "asofjoinstrategi": [172, 252, 629, 688], "allow_parallel": [172, 252, 628, 629, 688], "force_parallel": [172, 252, 628, 629, 688], "asof": [172, 252, 629, 688], "asof_join": [172, 252], "search": [172, 252, 629, 688], "greater": [172, 252, 388, 389, 476, 505, 591, 629, 688, 909, 938, 983], "distanc": [172, 252, 629, 688, 827, 983], "plan": [172, 173, 252, 606, 614, 621, 628, 629, 643, 651, 669, 688], "gdp": [172, 252, 629, 688], "2016": [172, 252, 629, 688], "2017": [172, 252, 629, 688], "2018": [172, 252, 358, 629, 688, 796], "2019": [172, 252, 629, 688], "record": [172, 215, 252, 629, 688], "jan": [172, 252, 629, 688], "1st": [172, 252, 629, 688], "4164": [172, 252, 629, 688], "4411": [172, 252, 629, 688], "4566": [172, 252, 629, 688], "4696": [172, 252, 629, 688], "popul": [172, 252, 629, 688], "12th": [172, 252, 629, 688], "82": [172, 252, 629, 688], "66": [172, 252, 534, 591, 629, 688, 888, 983], "83": [172, 252, 629, 688], "52": [172, 229, 252, 465, 591, 629, 666, 688], "request": [173, 252], "describe_plan": [173, 252, 688], "unoptim": [173, 252, 688], "describe_optimized_plan": [173, 252, 688], "show_graph": [173, 252, 688], "un": [173, 252], "graphviz": [173, 252, 651, 688], "axi": [175, 176, 178, 180, 207, 252, 637, 688], "null_strategi": [176, 207, 252], "nullstrategi": [176, 207, 252], "spam": [176, 252, 490, 923], "id_var": [178, 252, 637, 688], "value_var": [178, 252, 637, 688], "variable_nam": [178, 252, 637, 688], "value_nam": [178, 252, 637, 688], "unpivot": [178, 252, 637, 688], "leav": [178, 252, 303, 637, 688], "massag": [178, 252, 637, 688], "measur": [178, 252, 637, 688], "merg": [179, 252, 638, 688], "caller": [179, 252, 303, 633, 638, 672, 688], "respons": [179, 252, 638, 688], "what": [182, 252, 965, 974, 983], "pack": [182, 252], "expr_unique_subset": [182, 252], "df_nuniqu": [182, 252], "df_agg_nuniqu": [182, 252], "offer": [185, 252, 444, 591, 640, 688], "fulli": [185, 196, 252], "cast_str_to_int": [185, 252, 640, 688], "col_nam": [185, 252, 419, 591, 640, 688], "tdf": [185, 252, 640, 688], "aggregate_funct": [186, 252], "pivotagg": [186, 252], "nodefault": [186, 252, 508, 941], "sort_column": [186, 252], "predefin": [186, 252], "predict": [186, 189, 225, 252], "transpos": [186, 252], "discoveri": [186, 252], "col1": [186, 223, 252, 688, 991], "col2": [186, 223, 252, 688, 991], "col3": [186, 252, 991], "tanh": [186, 252, 591, 983], "998347": [186, 252], "964028": [186, 252], "999954": [186, 252], "interpol": [188, 244, 252, 381, 423, 448, 460, 572, 591, 642, 682, 688, 876, 888, 983], "rollinginterpolationmethod": [188, 244, 252, 448, 460, 572, 591, 642, 682, 688, 876, 888, 983], "midpoint": [188, 244, 252, 448, 460, 572, 591, 642, 682, 688, 876, 888, 983], "old": [190, 252, 644, 688], "by_pred": [194, 252], "accord": [194, 252, 420, 591, 777], "never": [194, 252], "mutual": [194, 252], "exclus": [194, 252, 534, 591], "addition": [194, 252], "clariti": [194, 252], "anyth": [194, 252, 490, 923], "toomanyrowsreturnederror": [194, 252, 602], "norowsreturnederror": [194, 252, 602], "inherit": [194, 252], "rowserror": [194, 252, 602], "with_replac": [196, 252, 466, 591, 894, 983], "shuffl": [196, 234, 252, 466, 591, 672, 894, 983], "modul": [196, 252, 466, 472, 590, 591, 894, 905, 983], "more_expr": [198, 229, 252, 442, 535, 536, 540, 542, 544, 545, 551, 566, 569, 577, 580, 581, 591, 647, 666, 688], "named_expr": [198, 229, 252, 577, 580, 647, 666, 688], "threshold": [198, 252, 647, 688], "set_auto_structifi": [198, 229, 252, 647, 666, 688], "auto_structifi": [198, 229, 252, 647, 666, 688], "is_odd": [198, 252, 647, 688], "_is_odd": [198, 252, 647, 688], "shift_and_fil": [201, 252, 591, 688, 983], "shift": [202, 252, 284, 328, 443, 470, 544, 591, 650, 688, 715, 761, 871, 902, 983], "shrink": [203, 252, 471, 591, 903, 904, 983], "hold": [203, 252], "ddof": [206, 226, 252, 481, 532, 546, 571, 575, 576, 578, 579, 583, 591, 656, 664, 688, 913, 973, 983], "deviat": [206, 252, 374, 462, 481, 579, 591, 656, 688, 813, 913, 983], "degre": [206, 226, 252, 481, 532, 546, 571, 575, 576, 578, 579, 583, 591, 656, 664, 688, 913, 973, 983], "freedom": [206, 226, 252, 481, 532, 546, 571, 575, 576, 578, 579, 583, 591, 656, 664, 688, 913, 973, 983], "divisor": [206, 226, 252, 481, 532, 546, 571, 575, 576, 578, 579, 583, 591, 656, 664, 688, 913, 973, 983], "816497": [206, 252], "21": [207, 252, 560], "16a": [207, 252], "27b": [207, 252], "38c": [207, 252], "nth": [209, 252, 505, 522, 591, 659, 688, 938, 956, 983], "mostli": [210, 252, 382, 591], "categoricaltyp": [210, 252], "as_seri": [211, 252], "fruit": [211, 252, 446, 454, 487, 506, 518, 591, 920, 939], "car": [211, 252, 446, 454, 518, 591], "beetl": [211, 252, 446, 454, 518, 591], "audi": [211, 252, 446, 454, 518, 591], "300": [211, 252, 884, 885, 887, 983], "instantiat": [214, 252, 963, 983], "from_repr": [214, 252, 963, 983], "df_from_str_repr": [214, 252], "eval": [214, 252, 555, 963, 983], "correspond": [215, 252, 343, 449, 591, 777, 877, 983], "re": [215, 252, 351, 352, 789, 790], "ll": [215, 252], "u1": [215, 252], "f4": [215, 252], "view": [215, 252, 965, 983], "recarrai": [215, 252], "rec": [215, 252], "use_pyarrow_extension_arrai": [216, 252, 966, 983], "trigger": [216, 252, 966, 983], "sent": [216, 252, 965, 966, 983], "pandas_df1": [216, 252], "pandas_df2": [216, 252], "pandas_df2_pa": [216, 252], "na": [216, 252, 966, 983], "get_column": [217, 252, 581], "four": [218, 252], "five": [218, 252, 991], "bottom_k": [219, 252, 526, 591, 660, 688, 968, 983], "include_head": [220, 252], "header_nam": [220, 252], "column_nam": [220, 252], "perhap": [220, 252], "column_2": [220, 252], "name_gener": [220, 252], "base_nam": [220, 252], "my_column_": [220, 252], "my_column_0": [220, 252], "my_column_1": [220, 252], "my_column_2": [220, 252], "uniquekeepstrategi": [221, 252, 661, 688], "kept": [221, 252, 661, 688], "decompos": [222, 252, 662, 688], "t_a": [222, 252, 662, 688], "t_b": [222, 252, 662, 688], "t_c": [222, 252, 662, 688], "t_d": [222, 252, 662, 688], "womp": [222, 252, 662, 688], "t_": [222, 252, 662, 688], "t_struct": [222, 252, 662, 688], "step": [223, 252, 539], "unstackdirect": [223, 252], "much": [223, 252, 302, 327, 591, 733, 758, 983], "pivot": [223, 252], "phase": [223, 252], "subject": [223, 252], "ascii_uppercas": [223, 252], "h": [223, 252, 259, 362, 365, 471, 508, 510, 512, 591, 941, 943, 945], "col1_0": [223, 252], "col1_1": [223, 252], "col1_2": [223, 252], "col2_0": [223, 252], "col2_1": [223, 252], "col2_2": [223, 252], "syntact": [224, 252, 556, 557, 561, 572, 577, 663, 688, 912, 983], "sugar": [224, 252, 556, 557, 561, 572, 577, 663, 688, 912, 983], "coalesc": [224, 252, 508, 663, 688, 941], "400": [224, 252, 663, 688, 884, 885, 887, 983], "600": [224, 252, 663, 688], "700": [224, 252, 663, 688], "new_df": [224, 252, 663, 688], "time_column": [225, 252], "frequenc": [225, 252], "forward_fil": [225, 252, 323, 326, 591], "varianc": [226, 252, 375, 408, 464, 532, 583, 591, 664, 688, 814, 851, 892, 973, 983], "grow": [227, 252], "is_not": [229, 252, 591, 666, 688], "not_c": [229, 252, 666, 688], "diff": [229, 252, 338, 341, 345, 347, 349, 354, 361, 591, 666, 688, 772, 775, 782, 784, 787, 792, 799, 983], "_diff": [229, 252, 666, 688], "row_nr": [230, 252, 420, 591, 668, 688, 898, 983], "more_agg": [232, 670], "named_agg": [232, 670], "_sum": [232, 670], "_mean_squar": [232, 670], "b_sum": [232, 670], "c_mean_squar": [232, 670], "sub": [234, 591], "triangl": [234, 672], "group_df": [234, 672], "deem": [235, 321, 547, 591, 673], "nr": [237, 246, 675, 684], "maxim": [239, 274, 591, 677, 704, 983], "833333": [240, 678], "minim": [242, 275, 280, 471, 479, 591, 680, 705, 711, 862, 903, 983], "overview": [252, 591, 602, 688, 983, 991], "public": [252, 591, 602, 688, 983], "frameinittyp": [252, 688], "variou": [252, 591, 688, 983], "entri": [252, 688], "prevent": [252, 325, 326, 407, 519, 591, 688, 756, 757, 953, 983], "come": [252, 351, 352, 408, 591, 603, 687, 688, 789, 790, 851, 983], "behavior": [252, 266, 302, 537, 591, 733], "mydatafram": 252, "notic": [252, 688, 983], "df4": 252, "df5": 252, "df6": 252, "corr": [252, 571, 578], "drop_in_plac": 252, "drop_nul": [252, 330, 591, 688, 983], "estimated_s": [252, 983], "explod": [252, 384, 453, 591, 688, 881, 983], "find_idx_by_nam": 252, "fold": [252, 429, 542, 549, 550, 573], "frame_equ": [252, 359, 366], "groupby_rol": [252, 456, 457, 458, 459, 460, 462, 463, 464, 591, 623, 688], "hash_row": 252, "hstack": 252, "insert_at_idx": 252, "is_dupl": [252, 591, 983], "is_empti": [252, 983], "is_uniqu": [252, 591, 983], "iter_slic": 252, "melt": [252, 688], "merge_sort": [252, 688], "n_uniqu": [252, 591, 983], "pipe": [252, 591, 688], "quantil": [252, 460, 591, 688, 875, 888, 983], "replace_at_idx": 252, "shrink_to_fit": [252, 983], "take_everi": [252, 591, 688, 983], "to_dict": 252, "to_numpi": [252, 418, 591, 983], "to_panda": [252, 983], "to_struct": [252, 490], "unnest": [252, 490, 504, 505, 516, 688, 734, 937, 938], "unstack": 252, "updat": [252, 688], "upsampl": 252, "write_avro": 252, "write_databas": 252, "write_excel": 252, "write_json": [252, 643, 688], "write_parquet": 252, "cumprod": [259, 591, 983], "ghi": [259, 490, 591, 923], "94": [260, 591], "map_alia": [261, 446, 518, 591], "confus": [262, 401, 403, 591], "tt": [262, 591], "tf": [262, 264, 591], "ff": [262, 264, 591], "upcast": [265, 591], "skip_nul": [266, 591, 697, 983], "pass_nam": [266, 591], "applystrategi": [266, 591], "thread_loc": [266, 591], "unknown": [266, 420, 489, 564, 591, 922], "stage": [266, 591], "speed": [266, 591, 653, 688], "code": [266, 468, 591, 631, 688, 899, 983], "amount": [266, 591], "releas": [266, 591, 991], "gil": [266, 591], "discourag": [266, 591], "loop": [266, 591], "a_times_2": [266, 591], "approx": [267, 538, 591, 688], "hyperloglog": [267, 538, 591, 688], "algorithm": [267, 538, 591, 688], "cardin": [267, 538, 591, 688], "invers": [268, 269, 270, 271, 272, 273, 591, 698, 699, 700, 701, 702, 703, 983], "cosin": [268, 269, 319, 320, 418, 591, 698, 699, 752, 753, 983], "570796": [268, 270, 591, 698, 700, 983], "hyperbol": [269, 271, 273, 320, 475, 524, 591, 699, 701, 703, 753, 908, 958, 983], "sine": [270, 271, 418, 474, 475, 591, 700, 701, 907, 908, 983], "881374": [271, 591, 701, 983], "tangent": [272, 273, 523, 524, 591, 702, 703, 957, 958, 983], "785398": [272, 591, 702, 983], "arg_wher": [277, 591], "sublist": [279, 280, 282, 284, 287, 288, 289, 290, 291, 298, 301, 302, 303, 710, 711, 713, 715, 718, 719, 720, 721, 722, 729, 732, 733, 734, 838, 983], "membership": [282, 713], "listcol": 283, "number_of_two": 283, "null_behavior": [284, 328, 591, 715, 761, 983], "nullbehavior": [284, 328, 591, 715, 761, 983], "th": [284, 328, 476, 591, 715, 761, 909, 983], "against": [285, 688, 716, 990, 991], "blindli": [285, 716], "worth": [285, 716], "enough": [285, 476, 591, 716, 909, 983], "concat_list": [285, 555, 716], "rank": [285, 546, 555, 578, 591, 716, 983], "exprnamespac": 286, "reshap": [286, 591, 717, 983], "flat": [286, 453, 591, 717, 881, 983], "taken": [298, 502, 521, 591, 729, 935], "null_on_oob": [302, 733], "cheaper": [302, 733], "n_field_strategi": [303, 734], "tostructstrategi": [303, 734], "first_non_nul": [303, 734], "max_width": [303, 734], "field_0": [303, 734], "field_1": [303, 734], "field_n": [303, 734], "know": [303, 496, 929, 965, 974, 983], "incorrectli": 303, "pre": 303, "n0": 303, "n1": 303, "maintain": [304, 467, 528, 591, 652, 653, 688, 735, 895, 969, 983], "substr": [306, 309, 310, 483, 487, 498, 499, 503, 504, 505, 506, 736, 739, 740, 916, 920, 931, 932, 936, 937, 938, 939], "transferencod": [307, 308, 485, 486, 737, 738, 918, 919], "strict": [307, 313, 483, 485, 497, 508, 509, 510, 512, 591, 737, 742, 896, 916, 918, 930, 941, 942, 943, 945, 983], "hex": [307, 308, 485, 486, 497, 737, 738, 918, 919, 930], "base64": [307, 308, 485, 486, 737, 738, 918, 919], "complex": [311, 327, 526, 591, 741, 758, 968, 983], "frac": [311, 373, 374, 375, 476, 526, 591, 741, 812, 813, 814, 909, 968, 983], "due": [313, 358, 591, 742, 796, 983], "overflow": [313, 325, 326, 497, 519, 591, 742, 756, 757, 930, 953, 983], "categoricalord": [314, 744], "lexic": [314, 744], "foo_clip": [316, 317, 318, 591], "clip": [317, 318, 591, 749, 750, 983], "543081": [320, 591, 753, 983], "cumul": [322, 323, 324, 325, 326, 549, 550, 551, 591, 754, 755, 756, 757, 983], "a_revers": [322, 323, 324, 325, 326, 419, 454, 518, 591], "value_cummax": [323, 591], "value_cummax_all_fil": [323, 591], "value_cumsum": [326, 591], "value_cumsum_all_fil": [326, 591], "min_period": [327, 373, 374, 375, 455, 456, 457, 458, 459, 460, 462, 463, 464, 575, 576, 591, 758, 812, 813, 814, 883, 884, 885, 886, 887, 888, 890, 891, 892, 983], "slide": [327, 591, 758, 983], "realli": [327, 591, 758, 983], "visit": [327, 591, 758, 983], "drop_nan": [331, 591, 983], "lose": [332, 766], "2001": [332, 337, 339, 340, 342, 343, 348, 350, 355, 356, 357, 359, 360, 364, 366, 367, 368, 369, 370, 508, 766, 771, 773, 774, 776, 778, 779, 780, 781, 783, 785, 786, 788, 791, 793, 794, 795, 797, 798, 802, 804, 805, 806, 807, 808, 941], "time_unit_m": [332, 766], "time_unit_n": [332, 766], "naiv": [333, 767], "compon": [333, 360, 508, 510, 554, 767, 798, 941, 943], "resolv": 333, "tm": 333, "456000": [333, 767], "101000": 333, "456": [333, 767, 962, 983], "101": [333, 497, 930, 991], "d1": 333, "d2": 333, "d3": 333, "utc": [334, 358, 508, 510, 768, 796, 941, 943], "europ": [334, 358, 768, 796], "london": [334, 358, 768, 796], "gmt": [334, 358, 768, 796], "bst": [334, 358, 768, 796], "weekdai": [337, 356], "day_of_month": [337, 356, 368], "ordinal_dai": [337, 368], "day_of_year": [337, 356, 368], "days_diff": 338, "epochtimeunit": [339, 560, 773], "unix": [339, 560, 773], "epoch_n": [339, 773], "epoch_": [339, 773], "978307200000000": [339, 364, 773, 802], "978307200": [339, 773], "978393600000000": [339, 364, 773, 802], "978393600": [339, 773], "978480000000000": [339, 364, 773, 802], "978480000": [339, 773], "hours_diff": 341, "leap": [342, 355, 776, 793], "2000": [342, 344, 351, 352, 355, 776, 789, 790, 793], "2002": [342, 343, 355, 357, 370, 776, 793, 808], "iso": [343, 367, 368, 777, 805, 806], "2006": [343, 355, 793], "180": [343, 357, 370], "2004": [343, 355, 793], "2005": [343, 355, 793], "1_001": [344, 345, 347, 354], "002": [344, 345, 347, 354, 554, 782, 784, 792], "003": [344, 345, 347, 354], "3000": 344, "997": [344, 345, 347, 354], "997000": 344, "998": [344, 345, 347, 354], "998000": 344, "999": [344, 345, 347, 354, 991], "999000": 344, "microseconds_diff": 345, "milliseconds_diff": 347, "minutes_diff": 349, "1440": [349, 787], "think": [351, 352, 789, 790], "vectoris": [351, 352, 789, 790], "tseri": [351, 352, 789, 790], "monthend": [351, 789], "rollforward": [351, 789], "monthbegin": [352, 790], "rollback": [352, 790], "nanoseconds_diff": 354, "1000000": [354, 514, 792], "minu": [355, 793], "dictat": [355, 793], "date_plus_1i": [355, 793], "1y2mo": [355, 793], "date_min": 355, "1998": [355, 793], "1999": [355, 793], "2003": [355, 560, 793], "ordin": [356, 449, 591, 794, 877, 983], "366": [356, 794], "use_earliest": [358, 796], "convert_time_zon": [358, 796], "ambigu": [358, 796], "sai": [358, 796], "daylight": [358, 796], "earliest": [358, 796], "london_timezon": [358, 796], "amsterdam": [358, 796], "london_to_amsterdam": [358, 796], "cet": [358, 796], "cest": [358, 796], "dst": [358, 796], "ts_local": [358, 796], "brussel": [358, 796], "half": [359, 373, 374, 375, 591, 797, 812, 813, 814, 983], "225": [359, 366], "to_fram": [359, 366, 508, 897, 898, 937, 938, 941, 983], "10m": [359, 366, 797, 804], "milli": [360, 798], "micro": [360, 798], "456789": 360, "654321": 360, "111110": 360, "765431": 360, "sec": [360, 991], "11111": 360, "seconds_diff": 361, "to_str": [362, 800], "datetime_str": [362, 365], "timestamp_n": [364, 802], "timestamp_m": 364, "978307200000": 364, "978393600000": 364, "978480000000": 364, "strftime": [365, 803], "1mo_satur": 366, "53": [367, 805], "incorrect": [369, 468, 591, 672, 807, 899, 983], "time_unit_u": [369, 807], "32971": [369, 807], "32974": [369, 807], "32976": [369, 807], "718281828459045": [371, 413, 591, 810, 854, 983], "pk": [371, 591, 810, 983], "459148": [371, 591], "754888": [371, 591], "span": [373, 374, 375, 591, 812, 813, 814, 983], "half_lif": [373, 374, 375, 591, 812, 813, 814, 983], "adjust": [373, 374, 375, 476, 591, 812, 813, 814, 909, 983], "ignore_nul": [373, 374, 375, 591, 812, 813, 814, 974, 983], "exponenti": [373, 374, 375, 377, 445, 591, 812, 813, 814, 815, 983], "weight": [373, 374, 375, 455, 456, 457, 458, 459, 460, 462, 463, 464, 476, 591, 812, 813, 814, 883, 884, 885, 886, 887, 888, 890, 891, 892, 909, 983], "decai": [373, 374, 375, 591, 812, 813, 814, 983], "term": [373, 374, 375, 493, 496, 591, 812, 813, 814, 926, 929, 983], "mass": [373, 374, 375, 591, 812, 813, 814, 983], "gamma": [373, 374, 375, 591, 812, 813, 814, 983], "foral": [373, 374, 375, 591, 812, 813, 814, 983], "geq": [373, 374, 375, 591, 812, 813, 814, 983], "theta": [373, 374, 375, 591, 812, 813, 814, 983], "life": [373, 374, 375, 591, 812, 813, 814, 983], "exp": [373, 374, 375, 591, 812, 813, 814, 983], "ln": [373, 374, 375, 591, 812, 813, 814, 983], "smooth": [373, 374, 375, 591, 812, 813, 814, 983], "factor": [373, 374, 375, 525, 591, 812, 813, 814, 967, 983], "leq": [373, 374, 375, 591, 812, 813, 814, 983], "begin": [373, 374, 375, 489, 591, 812, 813, 814, 922, 983], "imbal": [373, 374, 375, 591, 812, 813, 814, 983], "ew": [373, 374, 375, 591, 812, 813, 814, 983], "w_i": [373, 374, 375, 591, 812, 813, 814, 983], "recurs": [373, 374, 375, 591, 812, 813, 814, 983], "y_0": [373, 374, 375, 591, 812, 813, 814, 983], "x_0": [373, 374, 375, 591, 812, 813, 814, 983], "y_t": [373, 374, 375, 591, 812, 813, 814, 983], "y_": [373, 374, 375, 591, 812, 813, 814, 983], "x_t": [373, 374, 375, 591, 812, 813, 814, 983], "observ": [373, 374, 375, 591, 812, 813, 814, 983], "x_2": [373, 374, 375, 591, 812, 813, 814, 983], "428571": [373, 591], "bia": [374, 375, 408, 461, 476, 591, 813, 814, 851, 889, 909, 983], "unbias": [374, 375, 591, 813, 814, 983], "963624": [374, 591, 813, 983], "928571": [375, 591, 814, 983], "wildcard": [376, 543, 549, 550, 558, 573, 591], "regex": [376, 426, 483, 484, 487, 489, 490, 498, 499, 506, 556, 581, 591, 916, 917, 920, 922, 923, 931, 932, 939], "aa": [376, 483, 556, 591, 916], "ba": [376, 556, 591], "cc": [376, 556, 591], "718282": [377, 591], "389056": [377, 591], "54": [377, 591, 991], "59815": [377, 591], "expand": [378, 425, 426, 452, 591, 816, 983], "exprlistnamespac": [378, 384, 453, 591], "exprstringnamespac": [378, 591], "pythonliter": [379, 566, 569, 591, 817, 859, 862, 983], "extrem": [379, 591, 817, 983], "group_col": [382, 533, 591], "g1": [382, 533, 591], "g2": [382, 533, 591], "lt": [382, 533, 591, 983], "gte": [382, 533, 591], "divis": [386, 527, 591], "truediv": [386, 591], "9774092659964970114": [390, 591], "13614470193936745724": [390, 591], "1101441246220388612": [390, 591], "11638928888656214026": [390, 591], "13382926553367784577": [390, 591], "cumsum": [393, 517, 591, 626, 688, 850, 983], "interpolationmethod": [394, 591, 830, 983], "regrid": [394, 591], "grid": [394, 591], "df_original_grid": [394, 591], "grid_point": [394, 591], "df_new_grid": [394, 591], "conflat": [395, 591], "finit": [397, 527, 546, 578, 591, 835, 983], "primit": [399, 591, 965, 983], "optional_memb": [399, 591, 838, 983], "infinit": [400, 527, 591, 839, 983], "_isnan": [401, 591], "b_isnan": [401, 591], "negat": [402, 591], "_is_not_nan": [403, 591], "b_is_not_nan": [403, 591], "_not_nul": [404, 591], "a_not_nul": [404, 591], "b_not_nul": [404, 591], "_isnul": [405, 591], "a_isnul": [405, 591], "b_isnul": [405, 591], "undo": [407, 431, 591], "duplicateerror": [407, 591, 602], "occurr": [407, 591, 827, 983], "333333": [407, 464, 591, 871, 892, 983], "fisher": [408, 476, 591, 851, 909, 983], "fourth": [408, 591, 851, 983], "subtract": [408, 517, 591, 851, 983], "distribut": [408, 476, 591, 851, 909, 983], "elimin": [408, 591, 851, 983], "bias": [408, 476, 591, 851, 909, 983], "scipi": [408, 476, 591, 851, 909, 983], "stat": [408, 476, 591, 851, 909, 983], "153061": [408, 591], "logarithm": [413, 414, 415, 591, 854, 855, 856, 983], "584963": [413, 591], "30103": [414, 591], "60206": [414, 591], "natur": [415, 591, 856, 983], "plu": [415, 591, 856, 983], "693147": [415, 591], "098612": [415, 591], "386294": [415, 591], "lowest": [416, 591], "9223372036854775808": [416, 591], "agg_list": [418, 591], "elementwis": [418, 455, 456, 457, 458, 459, 460, 462, 463, 464, 591, 883, 884, 885, 886, 887, 888, 890, 891, 892, 983], "third": [418, 591], "parti": [418, 591], "book": [418, 591], "map_dict": [418, 591, 983], "argmax": [418, 591], "_revers": [419, 454, 518, 591], "rsplit": [419, 591], "b_revers": [419, 454, 518, 591], "remap": [420, 591, 858, 983], "lookup": [420, 591, 858, 983], "country_code_dict": [420, 591], "ca": [420, 591], "canada": [420, 591], "de": [420, 591], "germani": [420, 591], "fr": [420, 591], "franc": [420, 591], "country_cod": [420, 591], "rest": [420, 591], "exprmetanamespac": [424, 427], "computeerror": [428, 497, 602, 930], "keep_nam": [431, 591], "modulu": [433, 591], "xlog2": [435, 445, 591], "poison": [437, 438, 591, 867, 868, 983], "nanmax": [437, 438, 591, 867, 868, 983], "wherea": [437, 438, 591, 625, 632, 688, 867, 868, 983], "inequ": [439, 591], "outcom": [442, 591], "_max": [442, 591], "c_max": [442, 591], "_min": [442, 591], "c_min": [442, 591], "recent": [443, 591, 871, 983], "percent": [443, 591, 871, 983], "090909": [443, 591], "extract_numb": [444, 591], "digit": [444, 465, 490, 514, 591, 893, 917, 923, 947, 983, 991], "r": [444, 484, 488, 489, 490, 498, 591, 917, 921, 922, 923, 931], "scale_negative_even": [444, 591], "expon": [445, 591, 983], "reverse_": [446, 591], "reverse_a": [446, 591], "reverse_fruit": [446, 591], "reverse_b": [446, 591], "reverse_car": [446, 591], "rankmethod": [449, 591, 877, 983], "ti": [449, 591, 877, 983], "competit": [449, 591, 877, 983], "highest": [449, 530, 546, 578, 591, 688, 877, 983], "64bit": [451, 591, 879, 983], "safe": [451, 508, 591, 879, 941, 965, 983], "coerc": [452, 591], "fruits_revers": [454, 518, 591], "cars_revers": [454, 518, 591], "window_s": [455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 575, 576, 591, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 983], "rolling_min": [455, 591, 883, 983], "rolling_max": [455, 591, 883, 983], "rolling_mean": [455, 591, 883, 983], "rolling_sum": [455, 591, 883, 983], "multipli": [455, 456, 457, 458, 459, 460, 462, 463, 464, 591, 883, 884, 885, 886, 887, 888, 890, 891, 892, 983], "358899": [455, 591], "041452": [455, 591], "567764": [455, 591], "travers": [456, 457, 459, 462, 463, 464, 591, 884, 885, 887, 890, 891, 892, 983], "vector": [456, 457, 459, 462, 463, 464, 591, 884, 885, 887, 890, 891, 892, 983], "5h": [456, 457, 458, 459, 460, 462, 463, 464, 591], "skew": [461, 591, 889, 983], "527525": [462, 591, 890, 983], "searchsortedsid": [467, 591, 895, 983], "leftmost": [467, 591, 895, 983], "rightmost": [467, 591, 895, 983], "six": [467, 591], "downstream": [468, 591, 899, 983], "extrema": [471, 591, 903, 983], "112": [471, 591, 991], "129": [471, 591], "i8": [471, 591, 761, 882, 971, 983], "8589934592": [471, 591], "1073741824": [471, 591], "content": [472, 531, 591, 905, 983], "175201": [475, 591, 908, 983], "about": [476, 483, 489, 490, 498, 591, 909, 916, 922, 923, 931, 983, 991], "unimod": [476, 591, 909, 983], "skewtest": [476, 591, 909, 983], "speak": [476, 591, 909, 983], "g_1": [476, 591, 909, 983], "m_3": [476, 591, 909, 983], "m_2": [476, 591, 909, 983], "m_i": [476, 591, 909, 983], "sum_": [476, 591, 909, 983], "texttt": [476, 591, 909, 983], "k_3": [476, 591, 909, 983], "k_2": [476, 591, 909, 983], "sqrt": [476, 591, 909, 983], "343622": [476, 591], "value1": [479, 591], "value2": [479, 591], "attain": [479, 591], "414214": [480, 591, 912, 983], "ends_with": [483, 506, 939], "behaviour": [483, 489, 490, 498, 527, 591, 916, 922, 923, 931], "sensit": [483, 490, 498, 916, 923, 931], "ilmsuxu": [483, 489, 490, 498, 916, 922, 923, 931], "default_match": 483, "insensitive_match": 483, "section": [483, 489, 490, 498, 916, 922, 923, 931], "crab": [483, 916], "dog": [483, 511, 513, 545, 916], "rab": [483, 916], "success": [484, 490, 917, 923], "overlap": [484, 490, 917, 923], "captur": [484, 489, 490, 917, 922, 923], "123": [484, 490, 499, 917, 923, 932, 962, 983], "bla": [484, 490, 917, 923], "asd": [484, 490, 917, 923], "678": [484, 490, 917, 923], "910t": [484, 490, 917, 923], "count_digit": 484, "666f6f": [486, 919], "626172": [486, 919], "mango": [487, 506, 920, 939], "go": [487, 920], "has_suffix": 487, "group_index": [489, 922], "nthose": [489, 922], "nodd": [489, 922], "nthe": [489, 922], "url": [489, 922], "vote": [489, 922], "ballon_dor": [489, 922], "404": [489, 922], "ref": [489, 922], "candid": [489, 922], "messi": [489, 922], "ronaldo": [489, 922], "did": [490, 923], "email": [490, 923], "real": [490, 923], "some_account": [490, 923], "somewher": [490, 923], "net": [490, 923], "jkl": [490, 923], "uvw": [490, 923], "co": [490, 591, 923, 983], "uk": [490, 923], "address": 490, "xi": [490, 923], "insensit": [490, 498, 916, 923, 931], "quantifi": [490, 923], "arr": [490, 555, 592, 965, 983, 984], "email_part": [490, 923], "extracted_nr": 490, "910": [490, 923], "json_path_match": [491, 924], "jsonpath": [491, 492, 924, 925], "json_path": [492, 925], "regardless": [492, 925], "json_val": [492, 925], "n_char": [493, 926], "caf\u00e9": [493, 496, 926, 929], "345": [493, 496, 926, 929], "\u6771\u4eac": [493, 496, 926, 929], "nchar": [493, 496], "fill_char": [494, 500, 927, 933], "justifi": [494, 500, 927, 933], "pad": [494, 500, 514, 927, 933, 947], "cow": [494, 500, 927, 933], "monkei": [494, 500, 927, 933], "hippopotamu": [494, 500, 927, 933], "strip": [495, 501, 928, 934], "tworld": [495, 507, 928, 940], "wod": [495, 501, 928, 934], "rld": [495, 928], "text": [496, 498, 499, 929, 991], "radix": [497, 930], "parseerror": [497, 930], "becom": [497, 930], "silent": [497, 930], "110": [497, 930], "010": [497, 930], "fa1e": [497, 930], "ff00": [497, 930], "cafe": [497, 930], "64030": [497, 930], "65280": [497, 930], "51966": [497, 930], "replace_al": [498, 931], "citi": 498, "philadelphia": 498, "season": 498, "spring": 498, "summer": 498, "autumn": 498, "winter": 498, "weather": [498, 931], "raini": [498, 931], "sunni": [498, 931], "cloudi": 498, "snowi": 498, "foggi": [498, 931], "123abc": [498, 931], "abc456": [498, 931], "abcabc": [499, 932], "123a123": [499, 932], "bc": [499, 581, 932], "trail": [501, 507, 934, 940], "worl": [501, 507, 934, 940], "subslic": [502, 935], "pear": [502, 935], "papaya": [502, 935], "dragonfruit": [502, 935], "s_slice": 502, "ear": [502, 935], "aya": [502, 935], "uit": [502, 935], "ya": [502, 935], "onf": [502, 935], "a_1": [504, 937, 961, 983], "d_4": [504, 937], "rename_field": [504, 505, 937, 938], "first_part": [504, 505, 937, 938], "second_part": [504, 505, 937, 938], "remaind": [505, 938], "app": [506, 939], "has_prefix": 506, "polarstemporaltyp": [508, 941], "tz_awar": [508, 941], "anywher": [508, 509, 510, 941, 942, 943], "toggl": [508, 941], "futur": [508, 941], "3f": [508, 510, 941, 943], "00z": [508, 510, 941, 943], "sun": [508, 941], "jul": [508, 941], "34": [508, 941], "_tz_awar": 510, "lowercas": [511, 944], "variant": [511, 513], "uppercas": [513, 946], "100000": 514, "0010": 514, "0001": 514, "00000": 514, "00001": 514, "cd": [515, 516], "struct_col": [515, 516], "www": 516, "xxx": 516, "yyi": 516, "zzz": 516, "obvious": 516, "structfieldnotfounderror": [516, 602], "761594": [524, 591, 958, 983], "replic": [525, 591, 967, 983], "vals_phys": [525, 591], "floordiv": [527, 591], "ieee": [527, 591], "754": [527, 591], "mathemat": [527, 555, 591], "undefin": [527, 591], "On": [527, 591], "operand": [527, 591], "infin": [527, 591], "value_count": [529, 591, 983], "9223372036854775807": [530, 591], "multithread": [531, 591], "binary_str": [534, 591], "zfill": [534, 591], "250": [534, 591, 885, 983, 991], "bin_x": [534, 591], "bin_i": [534, 591], "xor_xi": [534, 591], "bin_xor_xi": [534, 591], "00001010": [534, 591], "00000001": [534, 591], "00001011": [534, 591], "00001000": [534, 591], "00000010": [534, 591], "11111010": [534, 591], "00000011": [534, 591], "249": [534, 591], "11111001": [534, 591], "01000010": [534, 591], "00000100": [534, 591], "70": [534, 591], "01000110": [534, 591], "bitwis": [535, 536], "AND": 535, "returns_scalar": 537, "product_a": 537, "49": 537, "Be": 539, "more_nam": 543, "hamburg": 543, "lag": 544, "mimic": 544, "a_lag_": 544, "a_rol": 544, "plai": 545, "swim": 545, "walk": 545, "full_sent": 545, "correlationmethod": 546, "propagate_nan": [546, 578], "spearman": [546, 578], "larger": [546, 578, 652, 653, 688], "544705": [546, 571], "covari": [548, 576], "acc": [549, 550, 558, 573], "include_init": 549, "accumul": [549, 550, 558, 573], "fn": [549, 550, 558, 573], "new_valu": [549, 550, 558, 573], "cumreduc": 549, "999999": 553, "tbl_width_char": 554, "120": 554, "add_week": 554, "add_dai": 554, "add_second": 554, "add_milli": 554, "add_hour": 554, "a_b_doubl": 555, "f_string": 559, "placehold": 559, "hello_": 559, "_world": 559, "foo_": 559, "_bar_": 559, "foo_a_bar_1": 559, "foo_b_bar_2": 559, "foo_c_bar_3": 559, "epoch": 560, "timestep": 560, "1666683077": 560, "1666683099": 560, "39": 560, "12345": [560, 745, 822, 893, 983], "12346": 560, "agg_group": [561, 591], "favor": [563, 571, 578], "implod": [563, 591, 983], "allow_object": 564, "valueexcept": 564, "foo_bar": 564, "test_func": 565, "605551": 579, "605551275463989": 579, "my_struct": 580, "q": 580, "selector": 581, "statement": 584, "chain": 584, "isn": 584, "thens": 584, "elif": 584, "pick": 584, "sometim": 590, "and_": 591, "approx_uniqu": [591, 688], "arcco": [591, 983], "arccosh": [591, 983], "arcsin": [591, 983], "arcsinh": [591, 983], "arctan": [591, 983], "arctanh": [591, 983], "arg_max": [591, 983], "arg_min": [591, 983], "arg_sort": [591, 983], "arg_uniqu": [591, 983], "backward_fil": 591, "clip_max": [591, 983], "clip_min": [591, 983], "cosh": [591, 983], "cumcount": 591, "cummax": [591, 983], "cummin": [591, 983], "cumulative_ev": [591, 983], "entropi": [591, 983], "eq": [591, 983], "ewm_mean": [591, 983], "ewm_std": [591, 983], "ewm_var": [591, 983], "extend_const": [591, 983], "flatten": 591, "ge": [591, 983], "gt": [591, 983], "inspect": [591, 688], "is_between": [591, 983], "is_finit": [591, 983], "is_first": [591, 983], "is_in": [591, 983], "is_infinit": [591, 983], "is_nan": [591, 983], "is_not_nan": [591, 983], "is_not_nul": [591, 983], "kurtosi": [591, 983], "le": [591, 983], "log10": [591, 983], "log1p": [591, 983], "mod": 591, "mul": 591, "nan_max": [591, 983], "nan_min": [591, 983], "ne": [591, 983], "or_": 591, "pct_chang": [591, 983], "pow": [591, 983], "reinterpret": [591, 983], "repeat_bi": 591, "rolling_appli": [591, 983], "rolling_median": [591, 983], "rolling_quantil": [591, 983], "rolling_skew": [591, 983], "rolling_std": [591, 983], "rolling_var": [591, 983], "search_sort": [591, 983], "shrink_dtyp": [591, 983], "sin": [591, 983], "sinh": [591, 983], "sort_bi": 591, "tan": [591, 983], "to_phys": [591, 983], "unique_count": [591, 983], "xor": 591, "expos": 602, "registr": 602, "miscellan": 602, "arrowerror": 602, "columnnotfounderror": 602, "invalidoperationerror": 602, "nodataerror": 602, "polarspanicerror": 602, "schemaerror": 602, "schemafieldnotfounderror": 602, "shapeerror": 602, "parametr": 602, "build_info": 602, "get_index_typ": 602, "show_vers": 602, "threadpool_s": 602, "sqlcontext": [602, 990], "lf": [605, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 669, 688, 991], "hit": [606, 688], "node": [606, 626, 633, 637, 641, 644, 688], "huge": [609, 688], "saver": [609, 688], "purpos": [616, 688], "influenc": [616, 633, 688], "read_json": [621, 669, 688], "lazygroupbi": [622, 623, 624, 688], "other_lf": [628, 688], "validate_output_schema": [633, 688], "streamabl": [633, 637, 688], "past": [633, 688], "assum": [633, 672, 688], "paramount": [633, 688], "bug": [633, 672, 688], "elig": [633, 688], "invari": [633, 688], "upheld": [633, 688], "prune": [633, 688], "show_plot": [641, 688], "truncate_nod": [641, 688], "figsiz": [641, 651, 688], "gantt": [641, 688], "plot": [641, 651, 688], "groupby_partit": [641, 688], "470": [641, 688], "475": [641, 688], "1964": [641, 688], "from_json": [643, 688], "swap": [644, 688], "output_path": [651, 688], "raw_output": [651, 688], "figur": [651, 688], "persist": [652, 653, 688], "ram": [652, 653, 688], "slightli": [652, 653, 688], "my_larger_than_ram_fil": [652, 653, 688], "data_pagesize_limit": [653, 688], "290994": [656, 688], "118034": [656, 688], "433013": [656, 688], "1875": [664, 688], "extern": [667, 688], "lf_other": [667, 688], "afoo": [667, 688], "cfoo": [667, 688], "train_lf": [667, 688], "feature_0": [667, 688], "feature_1": [667, 688], "test_lf": [667, 688], "_train": [667, 688], "feature_0_train": [667, 688], "dataframescan": [669, 688], "output_schema": [669, 688], "lf2": 688, "lf3": 688, "lf4": 688, "lf5": 688, "lf6": 688, "explain": 688, "sink_ipc": 688, "sink_parquet": 688, "with_context": 688, "new_aliased_sr": [693, 983], "append_chunk": [696, 983], "super": [696, 983], "141593": [698, 983], "292432": [699, 983], "549306": [703, 983], "listnamespac": [709, 816, 881, 983], "field_2": 734, "n00": 734, "n01": 734, "n02": 734, "catnamespac": 743, "56789": [745, 822, 893, 983], "901234": [745, 822, 893, 983], "pi": [752, 907, 957, 983], "1232e": [752, 983], "quick": [760, 983, 991], "series_num": [760, 983], "581139": [760, 983], "series_str": [760, 983], "datetimenamespac": 765, "ser": [769, 770, 801], "replace_time_zon": [769, 770, 801], "kathmandu": [769, 770, 801], "0545": [769, 770, 801], "500m": [781, 783, 791, 798], "500000": 781, "2m": 786, "500000000": 791, "date_minus_1y_2mon": 793, "165": [797, 804], "series_equ": [797, 804, 983], "timestamp_u": 802, "978307200000000000": 802, "978393600000000000": 802, "978480000000000000": 802, "005": [810, 983], "06293300616044681": [810, 983], "65": [810, 983], "8568409950394724": [810, 983], "4000000": [811, 983], "814697265625": [811, 983], "stringnamespac": [816, 914, 983], "bitmask": [824, 983], "swiftli": [824, 983], "10734580197236529959": [825, 983], "3022416320763508302": [825, 983], "13756996518000038261": [825, 983], "bin_count": [827, 983], "a_count": [827, 983], "fall": [831, 983], "2147483648": [857, 983], "iso3166": [858, 983], "tur": [858, 983], "jpn": [858, 983], "nld": [858, 983], "country_lookup": [858, 983], "japan": [858, 983], "t\u00fcrkiy": [858, 983], "netherland": [858, 983], "unrecognis": [858, 983], "unspecifi": [858, 983], "country_nam": [858, 983], "166667": [871, 983], "142857": [871, 983], "peak": [872, 873, 983], "quanil": [875, 983], "nanstd": [883, 983], "858612": [883, 983], "200": [884, 885, 887, 983], "150": [885, 983], "350": [885, 983], "450": [885, 983], "381802": [889, 983], "dev": [890, 983], "57": [893, 983, 991], "frequent": [897, 898, 983], "mutat": [898, 983], "2246e": [907, 957, 983], "6331e16": [957, 983], "lib": [960, 983], "int64arrai": [960, 983], "a_2": [961, 983], "a_3": [961, 983], "s_from_str_repr": [963, 983], "zero_copy_onli": [965, 983], "writabl": [965, 983], "complet": [965, 983], "presenc": [965, 983], "immut": [965, 983], "127": [971, 983], "seriesview": [974, 983], "arraylik": 983, "dtype_if_empti": 983, "position": 983, "scenario": 983, "through": 983, "chunk_length": 983, "cut": 983, "get_chunk": 983, "has_valid": 983, "hist": 983, "is_boolean": 983, "is_float": 983, "is_integ": 983, "is_numer": [983, 991], "is_sort": 983, "is_tempor": 983, "is_utf8": 983, "new_from_index": 983, "peak_max": 983, "peak_min": 983, "power": 983, "qcut": 983, "set_at_idx": 983, "guid": 991, "easi": 991, "approxim": 991, "own": 991, "machin": 991, "xdist": 991, "vari": 991, "hardwar": 991, "setup": 991, "numeric_dtyp": 991, "null_probabililti": 991, "test_numer": 991, "col0": 991, "col4": 991, "29096": 991, "485": 991, "2147483647": 991, "8257e14": 991, "7508": 991, "37338": 991, "7264": 991, "321": 991, "16996": 991, "121": 991, "361": 991, "63204": 991, "1443e235": 991, "conform": 991, "ascii_lett": 991, "id_char": 991, "alphabet": 991, "price": 991, "min_valu": 991, "max_valu": 991, "test_price_calcul": 991, "a101": 991, "8nin": 991, "qhoo": 991, "714": 991, "544": 991, "i0e0": 991, "0000": 991, "colz": 991, "test_miscellan": 991, "143": 991, "235": 991, "87": 991, "186": 991, "174": 991, "179": 991, "213": 991, "221": 991, "86": 991, "255": 991}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [34, 0, 1, "", "DataType"], [35, 0, 1, "", "Date"], [36, 0, 1, "", "Datetime"], [37, 0, 1, "", "Decimal"], [38, 0, 1, "", "Duration"], [39, 0, 1, "", "Float32"], [40, 0, 1, "", "Float64"], [41, 0, 1, "", "Int16"], [42, 0, 1, "", "Int32"], [43, 0, 1, "", "Int64"], [44, 0, 1, "", "Int8"], [45, 0, 1, "", "List"], [46, 0, 1, "", "Null"], [47, 0, 1, "", "Object"], [990, 0, 1, "", "SQLContext"], [53, 0, 1, "", "StringCache"], [54, 0, 1, "", "Struct"], [55, 0, 1, "", "Time"], [56, 0, 1, "", "UInt16"], [57, 0, 1, "", "UInt32"], [58, 0, 1, "", "UInt64"], [59, 0, 1, "", "UInt8"], [60, 0, 1, "", "Unknown"], [61, 0, 1, "", "Utf8"], [62, 4, 1, "", "align_frames"], [535, 4, 1, "", "all"], [536, 4, 1, "", "any"], [537, 4, 1, "", "apply"], [538, 4, 1, "", "approx_unique"], [539, 4, 1, "", "arange"], [540, 4, 1, "", "arg_sort_by"], [67, 4, 1, "", "arg_where"], [541, 4, 1, "", "avg"], [68, 4, 1, "", "build_info"], [542, 4, 1, "", "coalesce"], [543, 4, 1, "", "col"], [69, 4, 1, "", "collect_all"], [70, 4, 1, "", "concat"], [544, 4, 1, "", "concat_list"], [545, 4, 1, "", "concat_str"], [546, 4, 1, "", "corr"], [547, 4, 1, "", "count"], [548, 4, 1, "", "cov"], [549, 4, 1, "", "cumfold"], [550, 4, 1, "", "cumreduce"], [551, 4, 1, "", "cumsum"], [71, 4, 1, "", "cut"], [552, 4, 1, "", "date"], [72, 4, 1, "", "date_range"], [553, 4, 1, "", "datetime"], [554, 4, 1, "", "duration"], [555, 4, 1, "", "element"], [73, 4, 1, "", "enable_string_cache"], [556, 4, 1, "", "exclude"], [557, 4, 1, "", "first"], [558, 4, 1, "", "fold"], [559, 4, 1, "", "format"], [88, 4, 1, "", "from_arrow"], [89, 4, 1, "", "from_dataframe"], [90, 4, 1, "", "from_dict"], [91, 4, 1, "", "from_dicts"], [560, 4, 1, "", "from_epoch"], [92, 4, 1, "", "from_numpy"], [93, 4, 1, "", "from_pandas"], [94, 4, 1, "", "from_records"], [95, 4, 1, "", "from_repr"], [96, 4, 1, "", "get_dummies"], [97, 4, 1, "", "get_index_type"], [561, 4, 1, "", "groups"], [562, 4, 1, "", "head"], [563, 4, 1, "", "list"], [564, 4, 1, "", "lit"], [565, 4, 1, "", "map"], [566, 4, 1, "", "max"], [567, 4, 1, "", "mean"], [568, 4, 1, "", "median"], [569, 4, 1, "", "min"], [570, 4, 1, "", "n_unique"], [99, 4, 1, "", "ones"], [571, 4, 1, "", "pearson_corr"], [572, 4, 1, "", "quantile"], [100, 4, 1, "", "read_avro"], [101, 4, 1, "", "read_csv"], [102, 4, 1, "", "read_csv_batched"], [103, 4, 1, "", "read_database"], [104, 4, 1, "", "read_delta"], [105, 4, 1, "", "read_excel"], [106, 4, 1, "", "read_ipc"], [107, 4, 1, "", "read_ipc_schema"], [108, 4, 1, "", "read_json"], [109, 4, 1, "", "read_ndjson"], [110, 4, 1, "", "read_parquet"], [111, 4, 1, "", "read_parquet_schema"], [573, 4, 1, "", "reduce"], [574, 4, 1, "", "repeat"], [575, 4, 1, "", "rolling_corr"], [576, 4, 1, "", "rolling_cov"], [112, 4, 1, "", "scan_csv"], [113, 4, 1, "", "scan_delta"], [114, 4, 1, "", "scan_ipc"], [115, 4, 1, "", "scan_ndjson"], [116, 4, 1, "", "scan_parquet"], [117, 4, 1, "", "scan_pyarrow_dataset"], [577, 4, 1, "", "select"], [118, 4, 1, "", "show_versions"], [578, 4, 1, "", "spearman_rank_corr"], [579, 4, 1, "", "std"], [580, 4, 1, "", "struct"], [581, 4, 1, "", "sum"], [582, 4, 1, "", "tail"], [128, 4, 1, "", "threadpool_size"], [583, 4, 1, "", "var"], [584, 4, 1, "", "when"], [129, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "activate_decimals"], [6, 1, 1, "", "load"], [7, 1, 1, "", "restore_defaults"], [8, 1, 1, "", "save"], [9, 1, 1, "", "set_ascii_tables"], [10, 1, 1, "", "set_fmt_float"], [11, 1, 1, "", "set_fmt_str_lengths"], [12, 1, 1, "", "set_streaming_chunk_size"], [13, 1, 1, "", "set_tbl_cell_alignment"], [14, 1, 1, "", "set_tbl_cols"], [15, 1, 1, "", "set_tbl_column_data_type_inline"], [16, 1, 1, "", "set_tbl_dataframe_shape_below"], [17, 1, 1, "", "set_tbl_formatting"], [18, 1, 1, "", "set_tbl_hide_column_data_types"], [19, 1, 1, "", "set_tbl_hide_column_names"], [20, 1, 1, "", "set_tbl_hide_dataframe_shape"], [21, 1, 1, "", "set_tbl_hide_dtype_separator"], [22, 1, 1, "", "set_tbl_rows"], [23, 1, 1, "", "set_tbl_width_chars"], [24, 1, 1, "", "set_verbose"], [25, 1, 1, "", "state"]], "polars.DataFrame": [[132, 1, 1, "", "__dataframe__"], [133, 1, 1, "", "apply"], [134, 1, 1, "", "bottom_k"], [135, 1, 1, "", "clear"], [136, 1, 1, "", "clone"], [137, 2, 1, "", "columns"], [138, 1, 1, "", "corr"], [139, 1, 1, "", "describe"], [140, 1, 1, "", "drop"], [141, 1, 1, "", "drop_in_place"], [142, 1, 1, "", "drop_nulls"], [143, 2, 1, "", "dtypes"], [144, 1, 1, "", "estimated_size"], [145, 1, 1, "", "explode"], [146, 1, 1, "", "extend"], [147, 1, 1, "", "fill_nan"], [148, 1, 1, "", "fill_null"], [149, 1, 1, "", "filter"], [150, 1, 1, "", "find_idx_by_name"], [151, 1, 1, "", "fold"], [152, 1, 1, "", "frame_equal"], [153, 1, 1, "", "get_column"], [154, 1, 1, "", "get_columns"], [155, 1, 1, "", "glimpse"], [156, 1, 1, "", "groupby"], [157, 1, 1, "", "groupby_dynamic"], [158, 1, 1, "", "groupby_rolling"], [159, 1, 1, "", "hash_rows"], [160, 1, 1, "", "head"], [161, 2, 1, "", "height"], [162, 1, 1, "", "hstack"], [163, 1, 1, "", "insert_at_idx"], [164, 1, 1, "", "interpolate"], [165, 1, 1, "", "is_duplicated"], [166, 1, 1, "", "is_empty"], [167, 1, 1, "", "is_unique"], [168, 1, 1, "", "item"], [169, 1, 1, "", "iter_rows"], [170, 1, 1, "", "iter_slices"], [171, 1, 1, "", "join"], [172, 1, 1, "", "join_asof"], [173, 1, 1, "", "lazy"], [174, 1, 1, "", "limit"], [175, 1, 1, "", "max"], [176, 1, 1, "", "mean"], [177, 1, 1, "", "median"], [178, 1, 1, "", "melt"], [179, 1, 1, "", "merge_sorted"], [180, 1, 1, "", "min"], [181, 1, 1, "", "n_chunks"], [182, 1, 1, "", "n_unique"], [183, 1, 1, "", "null_count"], [184, 1, 1, "", "partition_by"], [185, 1, 1, "", "pipe"], [186, 1, 1, "", "pivot"], [187, 1, 1, "", "product"], [188, 1, 1, "", "quantile"], [189, 1, 1, "", "rechunk"], [190, 1, 1, "", "rename"], [191, 1, 1, "", "replace"], [192, 1, 1, "", "replace_at_idx"], [193, 1, 1, "", "reverse"], [194, 1, 1, "", "row"], [195, 1, 1, "", "rows"], [196, 1, 1, "", "sample"], [197, 2, 1, "", "schema"], [198, 1, 1, "", "select"], [199, 1, 1, "", "set_sorted"], [200, 2, 1, "", "shape"], [201, 1, 1, "", "shift"], [202, 1, 1, "", "shift_and_fill"], [203, 1, 1, "", "shrink_to_fit"], [204, 1, 1, "", "slice"], [205, 1, 1, "", "sort"], [206, 1, 1, "", "std"], [207, 1, 1, "", "sum"], [208, 1, 1, "", "tail"], [209, 1, 1, "", "take_every"], [210, 1, 1, "", "to_arrow"], [211, 1, 1, "", "to_dict"], [212, 1, 1, "", "to_dicts"], [213, 1, 1, "", "to_dummies"], [214, 1, 1, "", "to_init_repr"], [215, 1, 1, "", "to_numpy"], [216, 1, 1, "", "to_pandas"], [217, 1, 1, "", "to_series"], [218, 1, 1, "", "to_struct"], [219, 1, 1, "", "top_k"], [220, 1, 1, "", "transpose"], [221, 1, 1, "", "unique"], [222, 1, 1, "", "unnest"], [223, 1, 1, "", "unstack"], [224, 1, 1, "", "update"], [225, 1, 1, "", "upsample"], [226, 1, 1, "", "var"], [227, 1, 1, "", "vstack"], [228, 2, 1, "", "width"], [229, 1, 1, "", "with_columns"], [230, 1, 1, "", "with_row_count"], [26, 1, 1, "", "write_avro"], [27, 1, 1, "", "write_csv"], [28, 1, 1, "", "write_database"], [29, 1, 1, "", "write_excel"], [30, 1, 1, "", "write_ipc"], [31, 1, 1, "", "write_json"], [32, 1, 1, "", "write_ndjson"], [33, 1, 1, "", "write_parquet"]], "polars.DataType": [[34, 1, 1, "", "__init__"]], "polars.Date": [[35, 1, 1, "", "__init__"]], "polars.Datetime": [[36, 1, 1, "", "__init__"]], "polars.Decimal": [[37, 1, 1, "", "__init__"]], "polars.Duration": [[38, 1, 1, "", "__init__"]], "polars.Expr": [[258, 1, 1, "", "abs"], [259, 1, 1, "", "add"], [260, 1, 1, "", "agg_groups"], [261, 1, 1, "", "alias"], [262, 1, 1, "", "all"], [263, 1, 1, "", "and_"], [264, 1, 1, "", "any"], [265, 1, 1, "", "append"], [266, 1, 1, "", "apply"], [267, 1, 1, "", "approx_unique"], [268, 1, 1, "", "arccos"], [269, 1, 1, "", "arccosh"], [270, 1, 1, "", "arcsin"], [271, 1, 1, "", "arcsinh"], [272, 1, 1, "", "arctan"], [273, 1, 1, "", "arctanh"], [274, 1, 1, "", "arg_max"], [275, 1, 1, "", "arg_min"], [276, 1, 1, "", "arg_sort"], [277, 1, 1, "", "arg_true"], [278, 1, 1, "", "arg_unique"], [305, 1, 1, "", "backward_fill"], [311, 1, 1, "", "bottom_k"], [312, 1, 1, "", "cache"], [313, 1, 1, "", "cast"], [315, 1, 1, "", "ceil"], [316, 1, 1, "", "clip"], [317, 1, 1, "", "clip_max"], [318, 1, 1, "", "clip_min"], [319, 1, 1, "", "cos"], [320, 1, 1, "", "cosh"], [321, 1, 1, "", "count"], [322, 1, 1, "", "cumcount"], [323, 1, 1, "", "cummax"], [324, 1, 1, "", "cummin"], [325, 1, 1, "", "cumprod"], [326, 1, 1, "", "cumsum"], [327, 1, 1, "", "cumulative_eval"], [328, 1, 1, "", "diff"], [329, 1, 1, "", "dot"], [330, 1, 1, "", "drop_nans"], [331, 1, 1, "", "drop_nulls"], [371, 1, 1, "", "entropy"], [372, 1, 1, "", "eq"], [373, 1, 1, "", "ewm_mean"], [374, 1, 1, "", "ewm_std"], [375, 1, 1, "", "ewm_var"], [376, 1, 1, "", "exclude"], [377, 1, 1, "", "exp"], [378, 1, 1, "", "explode"], [379, 1, 1, "", "extend_constant"], [380, 1, 1, "", "fill_nan"], [381, 1, 1, "", "fill_null"], [382, 1, 1, "", "filter"], [383, 1, 1, "", "first"], [384, 1, 1, "", "flatten"], [385, 1, 1, "", "floor"], [386, 1, 1, "", "floordiv"], [387, 1, 1, "", "forward_fill"], [388, 1, 1, "", "ge"], [389, 1, 1, "", "gt"], [390, 1, 1, "", "hash"], [391, 1, 1, "", "head"], [392, 1, 1, "", "implode"], [393, 1, 1, "", "inspect"], [394, 1, 1, "", "interpolate"], [395, 1, 1, "", "is_between"], [396, 1, 1, "", "is_duplicated"], [397, 1, 1, "", "is_finite"], [398, 1, 1, "", "is_first"], [399, 1, 1, "", "is_in"], [400, 1, 1, "", "is_infinite"], [401, 1, 1, "", "is_nan"], [402, 1, 1, "", "is_not"], [403, 1, 1, "", "is_not_nan"], [404, 1, 1, "", "is_not_null"], [405, 1, 1, "", "is_null"], [406, 1, 1, "", "is_unique"], [407, 1, 1, "", "keep_name"], [408, 1, 1, "", "kurtosis"], [409, 1, 1, "", "last"], [410, 1, 1, "", "le"], [411, 1, 1, "", "len"], [412, 1, 1, "", "limit"], [413, 1, 1, "", "log"], [414, 1, 1, "", "log10"], [415, 1, 1, "", "log1p"], [416, 1, 1, "", "lower_bound"], [417, 1, 1, "", "lt"], [418, 1, 1, "", "map"], [419, 1, 1, "", "map_alias"], [420, 1, 1, "", "map_dict"], [421, 1, 1, "", "max"], [422, 1, 1, "", "mean"], [423, 1, 1, "", "median"], [432, 1, 1, "", "min"], [433, 1, 1, "", "mod"], [434, 1, 1, "", "mode"], [435, 1, 1, "", "mul"], [436, 1, 1, "", "n_unique"], [437, 1, 1, "", "nan_max"], [438, 1, 1, "", "nan_min"], [439, 1, 1, "", "ne"], [440, 1, 1, "", "null_count"], [441, 1, 1, "", "or_"], [442, 1, 1, "", "over"], [443, 1, 1, "", "pct_change"], [444, 1, 1, "", "pipe"], [445, 1, 1, "", "pow"], [446, 1, 1, "", "prefix"], [447, 1, 1, "", "product"], [448, 1, 1, "", "quantile"], [449, 1, 1, "", "rank"], [450, 1, 1, "", "rechunk"], [451, 1, 1, "", "reinterpret"], [452, 1, 1, "", "repeat_by"], [453, 1, 1, "", "reshape"], [454, 1, 1, "", "reverse"], [455, 1, 1, "", "rolling_apply"], [456, 1, 1, "", "rolling_max"], [457, 1, 1, "", "rolling_mean"], [458, 1, 1, "", "rolling_median"], [459, 1, 1, "", "rolling_min"], [460, 1, 1, "", "rolling_quantile"], [461, 1, 1, "", "rolling_skew"], [462, 1, 1, "", "rolling_std"], [463, 1, 1, "", "rolling_sum"], [464, 1, 1, "", "rolling_var"], [465, 1, 1, "", "round"], [466, 1, 1, "", "sample"], [467, 1, 1, "", "search_sorted"], [468, 1, 1, "", "set_sorted"], [469, 1, 1, "", "shift"], [470, 1, 1, "", "shift_and_fill"], [471, 1, 1, "", "shrink_dtype"], [472, 1, 1, "", "shuffle"], [473, 1, 1, "", "sign"], [474, 1, 1, "", "sin"], [475, 1, 1, "", "sinh"], [476, 1, 1, "", "skew"], [477, 1, 1, "", "slice"], [478, 1, 1, "", "sort"], [479, 1, 1, "", "sort_by"], [480, 1, 1, "", "sqrt"], [481, 1, 1, "", "std"], [517, 1, 1, "", "sub"], [518, 1, 1, "", "suffix"], [519, 1, 1, "", "sum"], [520, 1, 1, "", "tail"], [521, 1, 1, "", "take"], [522, 1, 1, "", "take_every"], [523, 1, 1, "", "tan"], [524, 1, 1, "", "tanh"], [525, 1, 1, "", "to_physical"], [526, 1, 1, "", "top_k"], [527, 1, 1, "", "truediv"], [528, 1, 1, "", "unique"], [529, 1, 1, "", "unique_counts"], [530, 1, 1, "", "upper_bound"], [531, 1, 1, "", "value_counts"], [532, 1, 1, "", "var"], [533, 1, 1, "", "where"], [534, 1, 1, "", "xor"]], "polars.Expr.arr": [[279, 1, 1, "", "arg_max"], [280, 1, 1, "", "arg_min"], [281, 1, 1, "", "concat"], [282, 1, 1, "", "contains"], [283, 1, 1, "", "count_match"], [284, 1, 1, "", "diff"], [285, 1, 1, "", "eval"], [286, 1, 1, "", "explode"], [287, 1, 1, "", "first"], [288, 1, 1, "", "get"], [289, 1, 1, "", "head"], [290, 1, 1, "", "join"], [291, 1, 1, "", "last"], [292, 1, 1, "", "lengths"], [293, 1, 1, "", "max"], [294, 1, 1, "", "mean"], [295, 1, 1, "", "min"], [296, 1, 1, "", "reverse"], [297, 1, 1, "", "shift"], [298, 1, 1, "", "slice"], [299, 1, 1, "", "sort"], [300, 1, 1, "", "sum"], [301, 1, 1, "", "tail"], [302, 1, 1, "", "take"], [303, 1, 1, "", "to_struct"], [304, 1, 1, "", "unique"]], "polars.Expr.bin": [[306, 1, 1, "", "contains"], [307, 1, 1, "", "decode"], [308, 1, 1, "", "encode"], [309, 1, 1, "", "ends_with"], [310, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[314, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[332, 1, 1, "", "cast_time_unit"], [333, 1, 1, "", "combine"], [334, 1, 1, "", "convert_time_zone"], [335, 1, 1, "", "date"], [336, 1, 1, "", "datetime"], [337, 1, 1, "", "day"], [338, 1, 1, "", "days"], [339, 1, 1, "", "epoch"], [340, 1, 1, "", "hour"], [341, 1, 1, "", "hours"], [342, 1, 1, "", "is_leap_year"], [343, 1, 1, "", "iso_year"], [344, 1, 1, "", "microsecond"], [345, 1, 1, "", "microseconds"], [346, 1, 1, "", "millisecond"], [347, 1, 1, "", "milliseconds"], [348, 1, 1, "", "minute"], [349, 1, 1, "", "minutes"], [350, 1, 1, "", "month"], [351, 1, 1, "", "month_end"], [352, 1, 1, "", "month_start"], [353, 1, 1, "", "nanosecond"], [354, 1, 1, "", "nanoseconds"], [355, 1, 1, "", "offset_by"], [356, 1, 1, "", "ordinal_day"], [357, 1, 1, "", "quarter"], [358, 1, 1, "", "replace_time_zone"], [359, 1, 1, "", "round"], [360, 1, 1, "", "second"], [361, 1, 1, "", "seconds"], [362, 1, 1, "", "strftime"], [363, 1, 1, "", "time"], [364, 1, 1, "", "timestamp"], [365, 1, 1, "", "to_string"], [366, 1, 1, "", "truncate"], [367, 1, 1, "", "week"], [368, 1, 1, "", "weekday"], [369, 1, 1, "", "with_time_unit"], [370, 1, 1, "", "year"]], "polars.Expr.meta": [[424, 1, 1, "", "eq"], [425, 1, 1, "", "has_multiple_outputs"], [426, 1, 1, "", "is_regex_projection"], [427, 1, 1, "", "ne"], [428, 1, 1, "", "output_name"], [429, 1, 1, "", "pop"], [430, 1, 1, "", "root_names"], [431, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[482, 1, 1, "", "concat"], [483, 1, 1, "", "contains"], [484, 1, 1, "", "count_match"], [485, 1, 1, "", "decode"], [486, 1, 1, "", "encode"], [487, 1, 1, "", "ends_with"], [488, 1, 1, "", "explode"], [489, 1, 1, "", "extract"], [490, 1, 1, "", "extract_all"], [491, 1, 1, "", "json_extract"], [492, 1, 1, "", "json_path_match"], [493, 1, 1, "", "lengths"], [494, 1, 1, "", "ljust"], [495, 1, 1, "", "lstrip"], [496, 1, 1, "", "n_chars"], [497, 1, 1, "", "parse_int"], [498, 1, 1, "", "replace"], [499, 1, 1, "", "replace_all"], [500, 1, 1, "", "rjust"], [501, 1, 1, "", "rstrip"], [502, 1, 1, "", "slice"], [503, 1, 1, "", "split"], [504, 1, 1, "", "split_exact"], [505, 1, 1, "", "splitn"], [506, 1, 1, "", "starts_with"], [507, 1, 1, "", "strip"], [508, 1, 1, "", "strptime"], [509, 1, 1, "", "to_date"], [510, 1, 1, "", "to_datetime"], [511, 1, 1, "", "to_lowercase"], [512, 1, 1, "", "to_time"], [513, 1, 1, "", "to_uppercase"], [514, 1, 1, "", "zfill"]], "polars.Expr.struct": [[515, 1, 1, "", "field"], [516, 1, 1, "", "rename_fields"]], "polars.Float32": [[39, 1, 1, "", "__init__"]], "polars.Float64": [[40, 1, 1, "", "__init__"]], "polars.Int16": [[41, 1, 1, "", "__init__"]], "polars.Int32": [[42, 1, 1, "", "__init__"]], "polars.Int64": [[43, 1, 1, "", "__init__"]], "polars.Int8": [[44, 1, 1, "", "__init__"]], "polars.LazyFrame": [[605, 1, 1, "", "bottom_k"], [606, 1, 1, "", "cache"], [607, 1, 1, "", "clear"], [608, 1, 1, "", "clone"], [609, 1, 1, "", "collect"], [610, 2, 1, "", "columns"], [611, 1, 1, "", "drop"], [612, 1, 1, "", "drop_nulls"], [613, 2, 1, "", "dtypes"], [614, 1, 1, "", "explain"], [615, 1, 1, "", "explode"], [616, 1, 1, "", "fetch"], [617, 1, 1, "", "fill_nan"], [618, 1, 1, "", "fill_null"], [619, 1, 1, "", "filter"], [620, 1, 1, "", "first"], [621, 1, 1, "", "from_json"], [622, 1, 1, "", "groupby"], [623, 1, 1, "", "groupby_dynamic"], [624, 1, 1, "", "groupby_rolling"], [625, 1, 1, "", "head"], [626, 1, 1, "", "inspect"], [627, 1, 1, "", "interpolate"], [628, 1, 1, "", "join"], [629, 1, 1, "", "join_asof"], [630, 1, 1, "", "last"], [631, 1, 1, "", "lazy"], [632, 1, 1, "", "limit"], [633, 1, 1, "", "map"], [634, 1, 1, "", "max"], [635, 1, 1, "", "mean"], [636, 1, 1, "", "median"], [637, 1, 1, "", "melt"], [638, 1, 1, "", "merge_sorted"], [639, 1, 1, "", "min"], [640, 1, 1, "", "pipe"], [641, 1, 1, "", "profile"], [642, 1, 1, "", "quantile"], [643, 1, 1, "", "read_json"], [644, 1, 1, "", "rename"], [645, 1, 1, "", "reverse"], [646, 2, 1, "", "schema"], [647, 1, 1, "", "select"], [648, 1, 1, "", "set_sorted"], [649, 1, 1, "", "shift"], [650, 1, 1, "", "shift_and_fill"], [651, 1, 1, "", "show_graph"], [652, 1, 1, "", "sink_ipc"], [653, 1, 1, "", "sink_parquet"], [654, 1, 1, "", "slice"], [655, 1, 1, "", "sort"], [656, 1, 1, "", "std"], [657, 1, 1, "", "sum"], [658, 1, 1, "", "tail"], [659, 1, 1, "", "take_every"], [660, 1, 1, "", "top_k"], [661, 1, 1, "", "unique"], [662, 1, 1, "", "unnest"], [663, 1, 1, "", "update"], [664, 1, 1, "", "var"], [665, 2, 1, "", "width"], [666, 1, 1, "", "with_columns"], [667, 1, 1, "", "with_context"], [668, 1, 1, "", "with_row_count"], [669, 1, 1, "", "write_json"]], "polars.List": [[45, 1, 1, "", "__init__"]], "polars.Null": [[46, 1, 1, "", "__init__"]], "polars.Object": [[47, 1, 1, "", "__init__"]], "polars.SQLContext": [[48, 1, 1, "", "execute"], [49, 1, 1, "", "query"], [50, 1, 1, "", "register"], [51, 1, 1, "", "register_many"], [52, 1, 1, "", "unregister"]], "polars.Series": [[692, 1, 1, "", "abs"], [693, 1, 1, "", "alias"], [694, 1, 1, "", "all"], [695, 1, 1, "", "any"], [696, 1, 1, "", "append"], [697, 1, 1, "", "apply"], [698, 1, 1, "", "arccos"], [699, 1, 1, "", "arccosh"], [700, 1, 1, "", "arcsin"], [701, 1, 1, "", "arcsinh"], [702, 1, 1, "", "arctan"], [703, 1, 1, "", "arctanh"], [704, 1, 1, "", "arg_max"], [705, 1, 1, "", "arg_min"], [706, 1, 1, "", "arg_sort"], [707, 1, 1, "", "arg_true"], [708, 1, 1, "", "arg_unique"], [709, 3, 1, "", "arr"], [741, 1, 1, "", "bottom_k"], [742, 1, 1, "", "cast"], [743, 3, 1, "", "cat"], [745, 1, 1, "", "ceil"], [746, 1, 1, "", "chunk_lengths"], [747, 1, 1, "", "clear"], [748, 1, 1, "", "clip"], [749, 1, 1, "", "clip_max"], [750, 1, 1, "", "clip_min"], [751, 1, 1, "", "clone"], [752, 1, 1, "", "cos"], [753, 1, 1, "", "cosh"], [754, 1, 1, "", "cummax"], [755, 1, 1, "", "cummin"], [756, 1, 1, "", "cumprod"], [757, 1, 1, "", "cumsum"], [758, 1, 1, "", "cumulative_eval"], [759, 1, 1, "", "cut"], [760, 1, 1, "", "describe"], [761, 1, 1, "", "diff"], [762, 1, 1, "", "dot"], [763, 1, 1, "", "drop_nans"], [764, 1, 1, "", "drop_nulls"], [765, 3, 1, "", "dt"], [809, 3, 1, "", "dtype"], [810, 1, 1, "", "entropy"], [811, 1, 1, "", "estimated_size"], [812, 1, 1, "", "ewm_mean"], [813, 1, 1, "", "ewm_std"], [814, 1, 1, "", "ewm_var"], [815, 1, 1, "", "exp"], [816, 1, 1, "", "explode"], [817, 1, 1, "", "extend_constant"], [818, 1, 1, "", "fill_nan"], [819, 1, 1, "", "fill_null"], [820, 1, 1, "", "filter"], [821, 3, 1, "", "flags"], [822, 1, 1, "", "floor"], [823, 1, 1, "", "get_chunks"], [824, 1, 1, "", "has_validity"], [825, 1, 1, "", "hash"], [826, 1, 1, "", "head"], [827, 1, 1, "", "hist"], [828, 1, 1, "", "implode"], [829, 3, 1, "", "inner_dtype"], [830, 1, 1, "", "interpolate"], [831, 1, 1, "", "is_between"], [832, 1, 1, "", "is_boolean"], [833, 1, 1, "", "is_duplicated"], [834, 1, 1, "", "is_empty"], [835, 1, 1, "", "is_finite"], [836, 1, 1, "", "is_first"], [837, 1, 1, "", "is_float"], [838, 1, 1, "", "is_in"], [839, 1, 1, "", "is_infinite"], [840, 1, 1, "", "is_integer"], [841, 1, 1, "", "is_nan"], [842, 1, 1, "", "is_not_nan"], [843, 1, 1, "", "is_not_null"], [844, 1, 1, "", "is_null"], [845, 1, 1, "", "is_numeric"], [846, 1, 1, "", "is_sorted"], [847, 1, 1, "", "is_temporal"], [848, 1, 1, "", "is_unique"], [849, 1, 1, "", "is_utf8"], [850, 1, 1, "", "item"], [851, 1, 1, "", "kurtosis"], [852, 1, 1, "", "len"], [853, 1, 1, "", "limit"], [854, 1, 1, "", "log"], [855, 1, 1, "", "log10"], [856, 1, 1, "", "log1p"], [857, 1, 1, "", "lower_bound"], [858, 1, 1, "", "map_dict"], [859, 1, 1, "", "max"], [860, 1, 1, "", "mean"], [861, 1, 1, "", "median"], [862, 1, 1, "", "min"], [863, 1, 1, "", "mode"], [864, 1, 1, "", "n_chunks"], [865, 1, 1, "", "n_unique"], [866, 3, 1, "", "name"], [867, 1, 1, "", "nan_max"], [868, 1, 1, "", "nan_min"], [869, 1, 1, "", "new_from_index"], [870, 1, 1, "", "null_count"], [871, 1, 1, "", "pct_change"], [872, 1, 1, "", "peak_max"], [873, 1, 1, "", "peak_min"], [874, 1, 1, "", "product"], [875, 1, 1, "", "qcut"], [876, 1, 1, "", "quantile"], [877, 1, 1, "", "rank"], [878, 1, 1, "", "rechunk"], [879, 1, 1, "", "reinterpret"], [880, 1, 1, "", "rename"], [881, 1, 1, "", "reshape"], [882, 1, 1, "", "reverse"], [883, 1, 1, "", "rolling_apply"], [884, 1, 1, "", "rolling_max"], [885, 1, 1, "", "rolling_mean"], [886, 1, 1, "", "rolling_median"], [887, 1, 1, "", "rolling_min"], [888, 1, 1, "", "rolling_quantile"], [889, 1, 1, "", "rolling_skew"], [890, 1, 1, "", "rolling_std"], [891, 1, 1, "", "rolling_sum"], [892, 1, 1, "", "rolling_var"], [893, 1, 1, "", "round"], [894, 1, 1, "", "sample"], [895, 1, 1, "", "search_sorted"], [896, 1, 1, "", "series_equal"], [897, 1, 1, "", "set"], [898, 1, 1, "", "set_at_idx"], [899, 1, 1, "", "set_sorted"], [900, 3, 1, "", "shape"], [901, 1, 1, "", "shift"], [902, 1, 1, "", "shift_and_fill"], [903, 1, 1, "", "shrink_dtype"], [904, 1, 1, "", "shrink_to_fit"], [905, 1, 1, "", "shuffle"], [906, 1, 1, "", "sign"], [907, 1, 1, "", "sin"], [908, 1, 1, "", "sinh"], [909, 1, 1, "", "skew"], [910, 1, 1, "", "slice"], [911, 1, 1, "", "sort"], [912, 1, 1, "", "sqrt"], [913, 1, 1, "", "std"], [914, 3, 1, "", "str"], [953, 1, 1, "", "sum"], [954, 1, 1, "", "tail"], [955, 1, 1, "", "take"], [956, 1, 1, "", "take_every"], [957, 1, 1, "", "tan"], [958, 1, 1, "", "tanh"], [959, 3, 1, "", "time_unit"], [960, 1, 1, "", "to_arrow"], [961, 1, 1, "", "to_dummies"], [962, 1, 1, "", "to_frame"], [963, 1, 1, "", "to_init_repr"], [964, 1, 1, "", "to_list"], [965, 1, 1, "", "to_numpy"], [966, 1, 1, "", "to_pandas"], [967, 1, 1, "", "to_physical"], [968, 1, 1, "", "top_k"], [969, 1, 1, "", "unique"], [970, 1, 1, "", "unique_counts"], [971, 1, 1, "", "upper_bound"], [972, 1, 1, "", "value_counts"], [973, 1, 1, "", "var"], [974, 1, 1, "", "view"], [975, 1, 1, "", "zip_with"]], "polars.Series.arr": [[710, 1, 1, "", "arg_max"], [711, 1, 1, "", "arg_min"], [712, 1, 1, "", "concat"], [713, 1, 1, "", "contains"], [714, 1, 1, "", "count_match"], [715, 1, 1, "", "diff"], [716, 1, 1, "", "eval"], [717, 1, 1, "", "explode"], [718, 1, 1, "", "first"], [719, 1, 1, "", "get"], [720, 1, 1, "", "head"], [721, 1, 1, "", "join"], [722, 1, 1, "", "last"], [723, 1, 1, "", "lengths"], [724, 1, 1, "", "max"], [725, 1, 1, "", "mean"], [726, 1, 1, "", "min"], [727, 1, 1, "", "reverse"], [728, 1, 1, "", "shift"], [729, 1, 1, "", "slice"], [730, 1, 1, "", "sort"], [731, 1, 1, "", "sum"], [732, 1, 1, "", "tail"], [733, 1, 1, "", "take"], [734, 1, 1, "", "to_struct"], [735, 1, 1, "", "unique"]], "polars.Series.bin": [[736, 1, 1, "", "contains"], [737, 1, 1, "", "decode"], [738, 1, 1, "", "encode"], [739, 1, 1, "", "ends_with"], [740, 1, 1, "", "starts_with"]], "polars.Series.cat": [[744, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[766, 1, 1, "", "cast_time_unit"], [767, 1, 1, "", "combine"], [768, 1, 1, "", "convert_time_zone"], [769, 1, 1, "", "date"], [770, 1, 1, "", "datetime"], [771, 1, 1, "", "day"], [772, 1, 1, "", "days"], [773, 1, 1, "", "epoch"], [774, 1, 1, "", "hour"], [775, 1, 1, "", "hours"], [776, 1, 1, "", "is_leap_year"], [777, 1, 1, "", "iso_year"], [778, 1, 1, "", "max"], [779, 1, 1, "", "mean"], [780, 1, 1, "", "median"], [781, 1, 1, "", "microsecond"], [782, 1, 1, "", "microseconds"], [783, 1, 1, "", "millisecond"], [784, 1, 1, "", "milliseconds"], [785, 1, 1, "", "min"], [786, 1, 1, "", "minute"], [787, 1, 1, "", "minutes"], [788, 1, 1, "", "month"], [789, 1, 1, "", "month_end"], [790, 1, 1, "", "month_start"], [791, 1, 1, "", "nanosecond"], [792, 1, 1, "", "nanoseconds"], [793, 1, 1, "", "offset_by"], [794, 1, 1, "", "ordinal_day"], [795, 1, 1, "", "quarter"], [796, 1, 1, "", "replace_time_zone"], [797, 1, 1, "", "round"], [798, 1, 1, "", "second"], [799, 1, 1, "", "seconds"], [800, 1, 1, "", "strftime"], [801, 1, 1, "", "time"], [802, 1, 1, "", "timestamp"], [803, 1, 1, "", "to_string"], [804, 1, 1, "", "truncate"], [805, 1, 1, "", "week"], [806, 1, 1, "", "weekday"], [807, 1, 1, "", "with_time_unit"], [808, 1, 1, "", "year"]], "polars.Series.str": [[915, 1, 1, "", "concat"], [916, 1, 1, "", "contains"], [917, 1, 1, "", "count_match"], [918, 1, 1, "", "decode"], [919, 1, 1, "", "encode"], [920, 1, 1, "", "ends_with"], [921, 1, 1, "", "explode"], [922, 1, 1, "", "extract"], [923, 1, 1, "", "extract_all"], [924, 1, 1, "", "json_extract"], [925, 1, 1, "", "json_path_match"], [926, 1, 1, "", "lengths"], [927, 1, 1, "", "ljust"], [928, 1, 1, "", "lstrip"], [929, 1, 1, "", "n_chars"], [930, 1, 1, "", "parse_int"], [931, 1, 1, "", "replace"], [932, 1, 1, "", "replace_all"], [933, 1, 1, "", "rjust"], [934, 1, 1, "", "rstrip"], [935, 1, 1, "", "slice"], [936, 1, 1, "", "split"], [937, 1, 1, "", "split_exact"], [938, 1, 1, "", "splitn"], [939, 1, 1, "", "starts_with"], [940, 1, 1, "", "strip"], [941, 1, 1, "", "strptime"], [942, 1, 1, "", "to_date"], [943, 1, 1, "", "to_datetime"], [944, 1, 1, "", "to_lowercase"], [945, 1, 1, "", "to_time"], [946, 1, 1, "", "to_uppercase"], [947, 1, 1, "", "zfill"]], "polars.Series.struct": [[948, 1, 1, "", "field"], [949, 3, 1, "", "fields"], [950, 1, 1, "", "rename_fields"], [951, 3, 1, "", "schema"], [952, 1, 1, "", "unnest"]], "polars.StringCache": [[53, 1, 1, "", "__init__"]], "polars.Struct": [[54, 1, 1, "", "__init__"]], "polars.Time": [[55, 1, 1, "", "__init__"]], "polars.UInt16": [[56, 1, 1, "", "__init__"]], "polars.UInt32": [[57, 1, 1, "", "__init__"]], "polars.UInt64": [[58, 1, 1, "", "__init__"]], "polars.UInt8": [[59, 1, 1, "", "__init__"]], "polars.Unknown": [[60, 1, 1, "", "__init__"]], "polars.Utf8": [[61, 1, 1, "", "__init__"]], "polars.api": [[63, 4, 1, "", "register_dataframe_namespace"], [64, 4, 1, "", "register_expr_namespace"], [65, 4, 1, "", "register_lazyframe_namespace"], [66, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[231, 1, 1, "", "__iter__"], [232, 1, 1, "", "agg"], [233, 1, 1, "", "all"], [234, 1, 1, "", "apply"], [235, 1, 1, "", "count"], [236, 1, 1, "", "first"], [237, 1, 1, "", "head"], [238, 1, 1, "", "last"], [239, 1, 1, "", "max"], [240, 1, 1, "", "mean"], [241, 1, 1, "", "median"], [242, 1, 1, "", "min"], [243, 1, 1, "", "n_unique"], [244, 1, 1, "", "quantile"], [245, 1, 1, "", "sum"], [246, 1, 1, "", "tail"]], "polars.exceptions": [[74, 5, 1, "", "ArrowError"], [75, 5, 1, "", "ColumnNotFoundError"], [76, 5, 1, "", "ComputeError"], [77, 5, 1, "", "DuplicateError"], [78, 5, 1, "", "InvalidOperationError"], [79, 5, 1, "", "NoDataError"], [80, 5, 1, "", "NoRowsReturnedError"], [81, 5, 1, "", "PolarsPanicError"], [82, 5, 1, "", "RowsError"], [83, 5, 1, "", "SchemaError"], [84, 5, 1, "", "SchemaFieldNotFoundError"], [85, 5, 1, "", "ShapeError"], [86, 5, 1, "", "StructFieldNotFoundError"], [87, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[98, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[670, 1, 1, "", "agg"], [671, 1, 1, "", "all"], [672, 1, 1, "", "apply"], [673, 1, 1, "", "count"], [674, 1, 1, "", "first"], [675, 1, 1, "", "head"], [676, 1, 1, "", "last"], [677, 1, 1, "", "max"], [678, 1, 1, "", "mean"], [679, 1, 1, "", "median"], [680, 1, 1, "", "min"], [681, 1, 1, "", "n_unique"], [682, 1, 1, "", "quantile"], [683, 1, 1, "", "sum"], [684, 1, 1, "", "tail"]], "polars.testing": [[119, 4, 1, "", "assert_frame_equal"], [120, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[121, 0, 1, "", "column"], [122, 4, 1, "", "columns"], [123, 4, 1, "", "create_list_strategy"], [124, 4, 1, "", "dataframes"], [125, 4, 1, "", "load_profile"], [126, 4, 1, "", "series"], [127, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[121, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 146], "api": [1, 63, 64, 65, 66, 602], "provid": 1, "new": 1, "function": [1, 590, 601], "avail": 1, "registr": 1, "exampl": [1, 991], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 991], "binari": [2, 585, 596, 977], "boolean": [3, 586, 978], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 130], "activate_decim": 5, "load": [6, 130], "restore_default": 7, "save": [8, 130], "set_ascii_t": 9, "set_fmt_float": 10, "set_fmt_str_length": 11, "set_streaming_chunk_s": 12, "set_tbl_cell_align": 13, "set_tbl_col": 14, "set_tbl_column_data_type_inlin": 15, "set_tbl_dataframe_shape_below": 16, "set_tbl_format": 17, "set_tbl_hide_column_data_typ": 18, "set_tbl_hide_column_nam": 19, "set_tbl_hide_dataframe_shap": 20, "set_tbl_hide_dtype_separ": 21, "set_tbl_row": 22, "set_tbl_width_char": 23, "set_verbos": 24, "state": [25, 130], "datafram": [26, 27, 28, 29, 30, 31, 32, 33, 124, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252], "write_avro": 26, "write_csv": 27, "write_databas": 28, "write_excel": 29, "write_ipc": 30, "write_json": [31, 669], "write_ndjson": 32, "write_parquet": 33, "datatyp": 34, "date": [35, 335, 552, 769], "datetim": [36, 336, 553, 770], "decim": 37, "durat": [38, 554], "float32": 39, "float64": 40, "int16": 41, "int32": 42, "int64": 43, "int8": 44, "list": [45, 563, 592, 984], "null": 46, "object": 47, "sqlcontext": [48, 49, 50, 51, 52], "execut": 48, "queri": 49, "regist": 50, "register_mani": 51, "unregist": 52, "stringcach": [53, 601], "struct": [54, 515, 516, 580, 598, 948, 949, 950, 951, 952, 988], "time": [55, 363, 801], "uint16": 56, "uint32": 57, "uint64": 58, "uint8": 59, "unknown": 60, "utf8": 61, "align_fram": 62, "register_dataframe_namespac": 63, "register_expr_namespac": 64, "register_lazyframe_namespac": 65, "register_series_namespac": 66, "arg_wher": 67, "build_info": 68, "collect_al": 69, "concat": [70, 281, 482, 712, 915], "cut": [71, 759], "date_rang": 72, "enable_string_cach": 73, "except": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 256], "arrowerror": 74, "columnnotfounderror": 75, "computeerror": 76, "duplicateerror": 77, "invalidoperationerror": 78, "nodataerror": 79, "norowsreturnederror": 80, "polarspanicerror": 81, "rowserror": 82, "schemaerror": 83, "schemafieldnotfounderror": 84, "shapeerror": 85, "structfieldnotfounderror": 86, "toomanyrowsreturnederror": 87, "from_arrow": 88, "from_datafram": 89, "from_dict": [90, 91], "from_numpi": 92, "from_panda": 93, "from_record": 94, "from_repr": 95, "get_dummi": 96, "get_index_typ": 97, "io": 98, "csv": [98, 603], "batched_read": 98, "batchedcsvread": [98, 603], "next_batch": 98, "ones": 99, "read_avro": 100, "read_csv": 101, "read_csv_batch": 102, "read_databas": 103, "read_delta": 104, "read_excel": 105, "read_ipc": 106, "read_ipc_schema": 107, "read_json": [108, 643], "read_ndjson": 109, "read_parquet": 110, "read_parquet_schema": 111, "scan_csv": 112, "scan_delta": 113, "scan_ipc": 114, "scan_ndjson": 115, "scan_parquet": 116, "scan_pyarrow_dataset": 117, "show_vers": 118, "test": [119, 120, 121, 122, 123, 124, 125, 126, 127, 991], "assert_frame_equ": 119, "assert_series_equ": 120, "parametr": [121, 122, 123, 124, 125, 126, 127, 991], "column": [121, 122, 137, 588, 610], "create_list_strategi": 123, "load_profil": 125, "seri": [126, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 983], "set_profil": 127, "threadpool_s": 128, "zero": 129, "option": 130, "current": 130, "us": 130, "context": 130, "manag": 130, "aggreg": [131, 257, 604, 691], "__dataframe__": 132, "appli": [133, 234, 266, 537, 672, 697], "bottom_k": [134, 311, 605, 741], "clear": [135, 607, 747], "clone": [136, 608, 751], "corr": [138, 546], "describ": [139, 760], "drop": [140, 611], "drop_in_plac": 141, "drop_nul": [142, 331, 612, 764], "dtype": [143, 613, 809], "estimated_s": [144, 811], "explod": [145, 286, 378, 488, 615, 717, 816, 921], "fill_nan": [147, 380, 617, 818], "fill_nul": [148, 381, 618, 819], "filter": [149, 382, 619, 820], "find_idx_by_nam": 150, "fold": [151, 558], "frame_equ": 152, "get_column": [153, 154], "glimps": 155, "groupbi": [156, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 251, 622, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687], "groupby_dynam": [157, 623], "groupby_rol": [158, 624], "hash_row": 159, "head": [160, 237, 289, 391, 562, 625, 675, 720, 826], "height": 161, "hstack": 162, "insert_at_idx": 163, "interpol": [164, 394, 627, 830], "is_dupl": [165, 396, 833], "is_empti": [166, 834], "is_uniqu": [167, 406, 848], "item": [168, 850], "iter_row": 169, "iter_slic": 170, "join": [171, 290, 628, 721], "join_asof": [172, 629], "lazi": [173, 601, 631], "limit": [174, 412, 632, 853], "max": [175, 239, 293, 421, 566, 634, 677, 724, 778, 859], "mean": [176, 240, 294, 422, 567, 635, 678, 725, 779, 860], "median": [177, 241, 423, 568, 636, 679, 780, 861], "melt": [178, 637], "merge_sort": [179, 638], "min": [180, 242, 295, 432, 569, 639, 680, 726, 785, 862], "n_chunk": [181, 864], "n_uniqu": [182, 243, 436, 570, 681, 865], "null_count": [183, 440, 870], "partition_bi": 184, "pipe": [185, 444, 640], "pivot": 186, "product": [187, 447, 874], "quantil": [188, 244, 448, 572, 642, 682, 876], "rechunk": [189, 450, 878], "renam": [190, 644, 880], "replac": [191, 498, 931], "replace_at_idx": 192, "revers": [193, 296, 454, 645, 727, 882], "row": [194, 195], "sampl": [196, 466, 894], "schema": [197, 646, 951], "select": [198, 254, 577, 595, 647, 690, 986], "set_sort": [199, 468, 648, 899], "shape": [200, 900], "shift": [201, 297, 469, 649, 728, 901], "shift_and_fil": [202, 470, 650, 902], "shrink_to_fit": [203, 904], "slice": [204, 298, 477, 502, 654, 729, 910, 935], "sort": [205, 299, 478, 655, 730, 911], "std": [206, 481, 579, 656, 913], "sum": [207, 245, 300, 519, 581, 657, 683, 731, 953], "tail": [208, 246, 301, 520, 582, 658, 684, 732, 954], "take_everi": [209, 522, 659, 956], "to_arrow": [210, 960], "to_dict": [211, 212], "to_dummi": [213, 961], "to_init_repr": [214, 963], "to_numpi": [215, 965], "to_panda": [216, 966], "to_seri": 217, "to_struct": [218, 303, 734], "top_k": [219, 526, 660, 968], "transpos": 220, "uniqu": [221, 304, 528, 661, 735, 969], "unnest": [222, 662, 952], "unstack": 223, "updat": [224, 663], "upsampl": 225, "var": [226, 532, 583, 664, 973], "vstack": 227, "width": [228, 665], "with_column": [229, 666], "with_row_count": [230, 668], "__iter__": 231, "agg": [232, 670], "all": [233, 262, 535, 671, 694], "count": [235, 321, 547, 673], "first": [236, 287, 383, 557, 620, 674, 718], "last": [238, 291, 409, 630, 676, 722], "attribut": [247, 685, 976], "comput": [248, 589, 980], "descript": [249, 686, 981], "export": [250, 982], "miscellan": [253, 594, 601, 689, 985], "manipul": [254, 595, 690, 986], "data": 255, "type": 255, "numer": [255, 596], "tempor": [255, 599, 989], "nest": 255, "other": 255, "expr": [258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534], "ab": [258, 692], "add": 259, "agg_group": 260, "alia": [261, 693], "and_": 263, "ani": [264, 536, 695], "append": [265, 696], "approx_uniqu": [267, 538], "arcco": [268, 698], "arccosh": [269, 699], "arcsin": [270, 700], "arcsinh": [271, 701], "arctan": [272, 702], "arctanh": [273, 703], "arg_max": [274, 279, 704, 710], "arg_min": [275, 280, 705, 711], "arg_sort": [276, 706], "arg_tru": [277, 707], "arg_uniqu": [278, 708], "arr": [279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735], "contain": [282, 306, 483, 713, 736, 916], "count_match": [283, 484, 714, 917], "diff": [284, 328, 715, 761], "eval": [285, 716], "get": [288, 719], "length": [292, 493, 723, 926], "take": [302, 521, 733, 955], "backward_fil": 305, "bin": [306, 307, 308, 309, 310, 736, 737, 738, 739, 740], "decod": [307, 485, 737, 918], "encod": [308, 486, 738, 919], "ends_with": [309, 487, 739, 920], "starts_with": [310, 506, 740, 939], "cach": [312, 606], "cast": [313, 742], "cat": [314, 743, 744], "set_ord": [314, 744], "ceil": [315, 745], "clip": [316, 748], "clip_max": [317, 749], "clip_min": [318, 750], "co": [319, 752], "cosh": [320, 753], "cumcount": 322, "cummax": [323, 754], "cummin": [324, 755], "cumprod": [325, 756], "cumsum": [326, 551, 757], "cumulative_ev": [327, 758], "dot": [329, 762], "drop_nan": [330, 763], "dt": [332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808], "cast_time_unit": [332, 766], "combin": [333, 767], "convert_time_zon": [334, 768], "dai": [337, 338, 771, 772], "epoch": [339, 773], "hour": [340, 341, 774, 775], "is_leap_year": [342, 776], "iso_year": [343, 777], "microsecond": [344, 345, 781, 782], "millisecond": [346, 347, 783, 784], "minut": [348, 349, 786, 787], "month": [350, 788], "month_end": [351, 789], "month_start": [352, 790], "nanosecond": [353, 354, 791, 792], "offset_bi": [355, 793], "ordinal_dai": [356, 794], "quarter": [357, 795], "replace_time_zon": [358, 796], "round": [359, 465, 797, 893], "second": [360, 361, 798, 799], "strftime": [362, 800], "timestamp": [364, 802], "to_str": [365, 803], "truncat": [366, 804], "week": [367, 805], "weekdai": [368, 806], "with_time_unit": [369, 807], "year": [370, 808], "entropi": [371, 810], "eq": [372, 424], "ewm_mean": [373, 812], "ewm_std": [374, 813], "ewm_var": [375, 814], "exclud": [376, 556], "exp": [377, 815], "extend_const": [379, 817], "flatten": 384, "floor": [385, 822], "floordiv": 386, "forward_fil": 387, "ge": 388, "gt": 389, "hash": [390, 825], "implod": [392, 828], "inspect": [393, 626], "is_between": [395, 831], "is_finit": [397, 835], "is_first": [398, 836], "is_in": [399, 838], "is_infinit": [400, 839], "is_nan": [401, 841], "is_not": 402, "is_not_nan": [403, 842], "is_not_nul": [404, 843], "is_nul": [405, 844], "keep_nam": 407, "kurtosi": [408, 851], "le": 410, "len": [411, 852], "log": [413, 854], "log10": [414, 855], "log1p": [415, 856], "lower_bound": [416, 857], "lt": 417, "map": [418, 565, 633], "map_alia": 419, "map_dict": [420, 858], "meta": [424, 425, 426, 427, 428, 429, 430, 431, 593], "has_multiple_output": 425, "is_regex_project": 426, "ne": [427, 439], "output_nam": 428, "pop": 429, "root_nam": 430, "undo_alias": 431, "mod": 433, "mode": [434, 863], "mul": 435, "nan_max": [437, 867], "nan_min": [438, 868], "or_": 441, "over": 442, "pct_chang": [443, 871], "pow": 445, "prefix": 446, "rank": [449, 877], "reinterpret": [451, 879], "repeat_bi": 452, "reshap": [453, 881], "rolling_appli": [455, 883], "rolling_max": [456, 884], "rolling_mean": [457, 885], "rolling_median": [458, 886], "rolling_min": [459, 887], "rolling_quantil": [460, 888], "rolling_skew": [461, 889], "rolling_std": [462, 890], "rolling_sum": [463, 891], "rolling_var": [464, 892], "search_sort": [467, 895], "shrink_dtyp": [471, 903], "shuffl": [472, 905], "sign": [473, 906], "sin": [474, 907], "sinh": [475, 908], "skew": [476, 909], "sort_bi": 479, "sqrt": [480, 912], "str": [482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947], "extract": [489, 922], "extract_al": [490, 923], "json_extract": [491, 924], "json_path_match": [492, 925], "ljust": [494, 927], "lstrip": [495, 928], "n_char": [496, 929], "parse_int": [497, 930], "replace_al": [499, 932], "rjust": [500, 933], "rstrip": [501, 934], "split": [503, 936], "split_exact": [504, 937], "splitn": [505, 938], "strip": [507, 940], "strptime": [508, 941], "to_dat": [509, 942], "to_datetim": [510, 943], "to_lowercas": [511, 944], "to_tim": [512, 945], "to_uppercas": [513, 946], "zfill": [514, 947], "field": [515, 948, 949], "rename_field": [516, 950], "sub": 517, "suffix": 518, "tan": [523, 957], "tanh": [524, 958], "to_phys": [525, 967], "truediv": 527, "unique_count": [529, 970], "upper_bound": [530, 971], "value_count": [531, 972], "where": 533, "xor": 534, "arang": 539, "arg_sort_bi": 540, "avg": 541, "coalesc": 542, "col": 543, "concat_list": 544, "concat_str": 545, "cov": 548, "cumfold": 549, "cumreduc": 550, "element": 555, "format": 559, "from_epoch": 560, "group": 561, "lit": 564, "pearson_corr": 571, "reduc": 573, "repeat": 574, "rolling_corr": 575, "rolling_cov": 576, "spearman_rank_corr": 578, "when": 584, "categori": [587, 979], "name": [588, 866], "express": 591, "oper": 596, "conjunct": 596, "comparison": 596, "string": [597, 987], "window": 600, "convers": 601, "eager": 601, "parallel": 601, "refer": 602, "input": 603, "output": 603, "feather": 603, "ipc": 603, "parquet": 603, "databas": 603, "json": 603, "avro": 603, "excel": 603, "delta": 603, "lake": 603, "dataset": 603, "lazyfram": [605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 688], "collect": 609, "explain": 614, "fetch": 616, "from_json": 621, "profil": [641, 991], "show_graph": 651, "sink_ipc": 652, "sink_parquet": 653, "with_context": 667, "lazygroupbi": [670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684], "read": 689, "write": 689, "logic": 689, "plan": 689, "chunk_length": 746, "flag": 821, "get_chunk": 823, "has_valid": 824, "hist": 827, "inner_dtyp": 829, "is_boolean": 832, "is_float": 837, "is_integ": 840, "is_numer": 845, "is_sort": 846, "is_tempor": 847, "is_utf8": 849, "new_from_index": 869, "peak_max": 872, "peak_min": 873, "qcut": 875, "series_equ": 896, "set": 897, "set_at_idx": 898, "time_unit": 959, "to_fram": 962, "to_list": 964, "view": 974, "zip_with": 975, "sql": 990, "method": 990, "assert": 991, "primit": 991, "strategi": 991, "helper": 991, "util": 992}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.testing.parametric.dataframes": [[124, "polars-testing-parametric-dataframes"]], "polars.exceptions.TooManyRowsReturnedError": [[87, "polars-exceptions-toomanyrowsreturnederror"]], "polars.from_records": [[94, "polars-from-records"]], "polars.show_versions": [[118, "polars-show-versions"]], "Aggregation": [[131, "aggregation"], [691, "aggregation"], [604, "aggregation"], [257, "aggregation"]], "polars.exceptions.SchemaError": [[83, "polars-exceptions-schemaerror"]], "polars.scan_csv": [[112, "polars-scan-csv"]], "polars.from_dict": [[90, "polars-from-dict"]], "polars.exceptions.SchemaFieldNotFoundError": [[84, "polars-exceptions-schemafieldnotfounderror"]], "polars.DataFrame.apply": [[133, "polars-dataframe-apply"]], "polars.testing.parametric.series": [[126, "polars-testing-parametric-series"]], "polars.threadpool_size": [[128, "polars-threadpool-size"]], "polars.DataFrame.clone": [[136, "polars-dataframe-clone"]], "polars.enable_string_cache": [[73, "polars-enable-string-cache"]], "polars.testing.assert_series_equal": [[120, "polars-testing-assert-series-equal"]], "polars.from_pandas": [[93, "polars-from-pandas"]], "polars.read_excel": [[105, "polars-read-excel"]], "polars.from_arrow": [[88, "polars-from-arrow"]], "polars.exceptions.StructFieldNotFoundError": [[86, "polars-exceptions-structfieldnotfounderror"]], "polars.read_parquet_schema": [[111, "polars-read-parquet-schema"]], "polars.exceptions.ArrowError": [[74, "polars-exceptions-arrowerror"]], "polars.exceptions.ShapeError": [[85, "polars-exceptions-shapeerror"]], "polars.get_dummies": [[96, "polars-get-dummies"]], "polars.get_index_type": [[97, "polars-get-index-type"]], "polars.exceptions.RowsError": [[82, "polars-exceptions-rowserror"]], "polars.DataFrame.__dataframe__": [[132, "polars-dataframe-dataframe"]], "polars.read_csv": [[101, "polars-read-csv"]], "polars.testing.parametric.column": [[121, "polars-testing-parametric-column"]], "polars.read_ndjson": [[109, "polars-read-ndjson"]], "polars.exceptions.NoRowsReturnedError": [[80, "polars-exceptions-norowsreturnederror"]], "polars.DataFrame.clear": [[135, "polars-dataframe-clear"]], "polars.read_parquet": [[110, "polars-read-parquet"]], "polars.exceptions.ComputeError": [[76, "polars-exceptions-computeerror"]], "polars.testing.parametric.load_profile": [[125, "polars-testing-parametric-load-profile"]], "polars.ones": [[99, "polars-ones"]], "Config": [[130, "config"]], "Config options": [[130, "config-options"]], "Config load, save, and current state": [[130, "config-load-save-and-current-state"]], "Use as a context manager": [[130, "use-as-a-context-manager"]], "polars.testing.parametric.set_profile": [[127, "polars-testing-parametric-set-profile"]], "polars.concat": [[70, "polars-concat"]], "polars.from_dicts": [[91, "polars-from-dicts"]], "polars.exceptions.InvalidOperationError": [[78, "polars-exceptions-invalidoperationerror"]], "polars.from_numpy": [[92, "polars-from-numpy"]], "polars.DataFrame.bottom_k": [[134, "polars-dataframe-bottom-k"]], "polars.zeros": [[129, "polars-zeros"]], "polars.exceptions.DuplicateError": [[77, "polars-exceptions-duplicateerror"]], "polars.DataFrame.columns": [[137, "polars-dataframe-columns"]], "polars.date_range": [[72, "polars-date-range"]], "polars.read_database": [[103, "polars-read-database"]], "polars.read_json": [[108, "polars-read-json"]], "polars.scan_ipc": [[114, "polars-scan-ipc"]], "polars.DataFrame.corr": [[138, "polars-dataframe-corr"]], "polars.scan_parquet": [[116, "polars-scan-parquet"]], "polars.from_dataframe": [[89, "polars-from-dataframe"]], "polars.scan_delta": [[113, "polars-scan-delta"]], "polars.read_ipc": [[106, "polars-read-ipc"]], "polars.testing.assert_frame_equal": [[119, "polars-testing-assert-frame-equal"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[98, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.scan_pyarrow_dataset": [[117, "polars-scan-pyarrow-dataset"]], "polars.DataFrame.describe": [[139, "polars-dataframe-describe"]], "polars.testing.parametric.columns": [[122, "polars-testing-parametric-columns"]], "polars.cut": [[71, "polars-cut"]], "polars.from_repr": [[95, "polars-from-repr"]], "polars.testing.parametric.create_list_strategy": [[123, "polars-testing-parametric-create-list-strategy"]], "polars.exceptions.ColumnNotFoundError": [[75, "polars-exceptions-columnnotfounderror"]], "polars.exceptions.NoDataError": [[79, "polars-exceptions-nodataerror"]], "polars.read_ipc_schema": [[107, "polars-read-ipc-schema"]], "polars.read_delta": [[104, "polars-read-delta"]], "polars.scan_ndjson": [[115, "polars-scan-ndjson"]], "polars.read_avro": [[100, "polars-read-avro"]], "polars.read_csv_batched": [[102, "polars-read-csv-batched"]], "polars.exceptions.PolarsPanicError": [[81, "polars-exceptions-polarspanicerror"]], "polars.Struct": [[54, "polars-struct"]], "polars.DataFrame.write_parquet": [[33, "polars-dataframe-write-parquet"]], "polars.Decimal": [[37, "polars-decimal"]], "polars.Config.activate_decimals": [[5, "polars-config-activate-decimals"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.SQLContext.register": [[50, "polars-sqlcontext-register"]], "polars.Datetime": [[36, "polars-datetime"]], "polars.Int64": [[43, "polars-int64"]], "polars.SQLContext.execute": [[48, "polars-sqlcontext-execute"]], "polars.api.register_expr_namespace": [[64, "polars-api-register-expr-namespace"]], "polars.DataFrame.write_ipc": [[30, "polars-dataframe-write-ipc"]], "polars.SQLContext.register_many": [[51, "polars-sqlcontext-register-many"]], "polars.Duration": [[38, "polars-duration"]], "polars.Date": [[35, "polars-date"]], "polars.Config.set_tbl_formatting": [[17, "polars-config-set-tbl-formatting"]], "polars.Config.load": [[6, "polars-config-load"]], "polars.DataFrame.write_csv": [[27, "polars-dataframe-write-csv"]], "polars.UInt16": [[56, "polars-uint16"]], "polars.Binary": [[2, "polars-binary"]], "polars.Config.set_fmt_str_lengths": [[11, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_ascii_tables": [[9, "polars-config-set-ascii-tables"]], "polars.Config.set_tbl_rows": [[22, "polars-config-set-tbl-rows"]], "polars.Config.set_tbl_hide_dataframe_shape": [[20, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.DataFrame.write_excel": [[29, "polars-dataframe-write-excel"]], "polars.Unknown": [[60, "polars-unknown"]], "polars.Int16": [[41, "polars-int16"]], "polars.Config.set_tbl_cols": [[14, "polars-config-set-tbl-cols"]], "polars.Config.restore_defaults": [[7, "polars-config-restore-defaults"]], "polars.api.register_dataframe_namespace": [[63, "polars-api-register-dataframe-namespace"]], "polars.UInt64": [[58, "polars-uint64"]], "polars.SQLContext.unregister": [[52, "polars-sqlcontext-unregister"]], "polars.api.register_series_namespace": [[66, "polars-api-register-series-namespace"]], "polars.Config.set_streaming_chunk_size": [[12, "polars-config-set-streaming-chunk-size"]], "polars.api.register_lazyframe_namespace": [[65, "polars-api-register-lazyframe-namespace"]], "polars.Config.set_tbl_column_data_type_inline": [[15, "polars-config-set-tbl-column-data-type-inline"]], "polars.DataType": [[34, "polars-datatype"]], "polars.Config.set_fmt_float": [[10, "polars-config-set-fmt-float"]], "polars.collect_all": [[69, "polars-collect-all"]], "polars.Config.set_tbl_dataframe_shape_below": [[16, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Int32": [[42, "polars-int32"]], "polars.StringCache": [[53, "polars-stringcache"]], "polars.Config.save": [[8, "polars-config-save"]], "polars.DataFrame.write_database": [[28, "polars-dataframe-write-database"]], "polars.DataFrame.write_json": [[31, "polars-dataframe-write-json"]], "polars.Config.set_tbl_width_chars": [[23, "polars-config-set-tbl-width-chars"]], "polars.Config.state": [[25, "polars-config-state"]], "polars.build_info": [[68, "polars-build-info"]], "polars.UInt8": [[59, "polars-uint8"]], "polars.Object": [[47, "polars-object"]], "polars.Int8": [[44, "polars-int8"]], "polars.Config.set_tbl_cell_alignment": [[13, "polars-config-set-tbl-cell-alignment"]], "polars.Float32": [[39, "polars-float32"]], "polars.Config.set_tbl_hide_column_names": [[19, "polars-config-set-tbl-hide-column-names"]], "polars.List": [[45, "polars-list"]], "polars.Config.set_tbl_hide_dtype_separator": [[21, "polars-config-set-tbl-hide-dtype-separator"]], "polars.DataFrame.write_ndjson": [[32, "polars-dataframe-write-ndjson"]], "polars.Float64": [[40, "polars-float64"]], "polars.UInt32": [[57, "polars-uint32"]], "polars.Config.set_verbose": [[24, "polars-config-set-verbose"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Time": [[55, "polars-time"]], "polars.arg_where": [[67, "polars-arg-where"]], "polars.align_frames": [[62, "polars-align-frames"]], "polars.SQLContext.query": [[49, "polars-sqlcontext-query"]], "polars.Config.set_tbl_hide_column_data_types": [[18, "polars-config-set-tbl-hide-column-data-types"]], "polars.Null": [[46, "polars-null"]], "polars.Utf8": [[61, "polars-utf8"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [991, "examples"]], "polars.DataFrame.write_avro": [[26, "polars-dataframe-write-avro"]], "polars.Series.unique": [[969, "polars-series-unique"]], "polars.Series.str.strip": [[940, "polars-series-str-strip"]], "polars.Series.struct.fields": [[949, "polars-series-struct-fields"]], "polars.Series.sort": [[911, "polars-series-sort"]], "polars.Series.str.splitn": [[938, "polars-series-str-splitn"]], "polars.Series.tanh": [[958, "polars-series-tanh"]], "polars.Series.take": [[955, "polars-series-take"]], "polars.Series.str.to_lowercase": [[944, "polars-series-str-to-lowercase"]], "polars.Series.to_dummies": [[961, "polars-series-to-dummies"]], "polars.Series.to_pandas": [[966, "polars-series-to-pandas"]], "polars.Series.view": [[974, "polars-series-view"]], "polars.Series.str.count_match": [[917, "polars-series-str-count-match"]], "polars.Series.str.ends_with": [[920, "polars-series-str-ends-with"]], "polars.Series.str.lengths": [[926, "polars-series-str-lengths"]], "polars.Series.str.slice": [[935, "polars-series-str-slice"]], "Boolean": [[978, "boolean"], [586, "boolean"]], "polars.Series.str.extract": [[922, "polars-series-str-extract"]], "polars.Series.str.to_date": [[942, "polars-series-str-to-date"]], "polars.Series.str.explode": [[921, "polars-series-str-explode"]], "polars.Series.str.rjust": [[933, "polars-series-str-rjust"]], "polars.Series.struct.rename_fields": [[950, "polars-series-struct-rename-fields"]], "polars.Series.take_every": [[956, "polars-series-take-every"]], "polars.Series.str.n_chars": [[929, "polars-series-str-n-chars"]], "polars.Series.str.extract_all": [[923, "polars-series-str-extract-all"]], "polars.Series.str.starts_with": [[939, "polars-series-str-starts-with"]], "polars.Series.sqrt": [[912, "polars-series-sqrt"]], "polars.Series.str.decode": [[918, "polars-series-str-decode"]], "polars.Series.str.encode": [[919, "polars-series-str-encode"]], "polars.Series.str": [[914, "polars-series-str"]], "polars.Series.str.rstrip": [[934, "polars-series-str-rstrip"]], "polars.Series.str.to_time": [[945, "polars-series-str-to-time"]], "polars.Series.str.json_extract": [[924, "polars-series-str-json-extract"]], "polars.Series.to_numpy": [[965, "polars-series-to-numpy"]], "polars.Series.slice": [[910, "polars-series-slice"]], "polars.Series.to_physical": [[967, "polars-series-to-physical"]], "polars.Series.value_counts": [[972, "polars-series-value-counts"]], "polars.Series.unique_counts": [[970, "polars-series-unique-counts"]], "polars.Series.str.lstrip": [[928, "polars-series-str-lstrip"]], "polars.Series.to_init_repr": [[963, "polars-series-to-init-repr"]], "Attributes": [[976, "attributes"], [685, "attributes"], [247, "attributes"]], "polars.Series.to_frame": [[962, "polars-series-to-frame"]], "polars.Series.str.to_uppercase": [[946, "polars-series-str-to-uppercase"]], "polars.Series.str.replace_all": [[932, "polars-series-str-replace-all"]], "Binary": [[977, "binary"], [585, "binary"], [596, "binary"]], "polars.Series.std": [[913, "polars-series-std"]], "polars.Series.struct.field": [[948, "polars-series-struct-field"]], "polars.Series.tail": [[954, "polars-series-tail"]], "polars.Series.str.concat": [[915, "polars-series-str-concat"]], "polars.Series.str.split": [[936, "polars-series-str-split"]], "polars.Series.to_arrow": [[960, "polars-series-to-arrow"]], "polars.Series.zip_with": [[975, "polars-series-zip-with"]], "polars.Series.str.replace": [[931, "polars-series-str-replace"]], "polars.Series.str.split_exact": [[937, "polars-series-str-split-exact"]], "polars.Series.str.to_datetime": [[943, "polars-series-str-to-datetime"]], "polars.Series.str.json_path_match": [[925, "polars-series-str-json-path-match"]], "polars.Series.struct.schema": [[951, "polars-series-struct-schema"]], "polars.Series.top_k": [[968, "polars-series-top-k"]], "polars.Series.to_list": [[964, "polars-series-to-list"]], "polars.Series.tan": [[957, "polars-series-tan"]], "polars.Series.sum": [[953, "polars-series-sum"]], "polars.Series.str.zfill": [[947, "polars-series-str-zfill"]], "polars.Series.str.contains": [[916, "polars-series-str-contains"]], "polars.Series.str.ljust": [[927, "polars-series-str-ljust"]], "polars.Series.str.parse_int": [[930, "polars-series-str-parse-int"]], "polars.Series.struct.unnest": [[952, "polars-series-struct-unnest"]], "polars.Series.str.strptime": [[941, "polars-series-str-strptime"]], "polars.Series.var": [[973, "polars-series-var"]], "polars.Series.upper_bound": [[971, "polars-series-upper-bound"]], "Categories": [[979, "categories"], [587, "categories"]], "polars.Series.time_unit": [[959, "polars-series-time-unit"]], "polars.Series.rechunk": [[878, "polars-series-rechunk"]], "polars.Series.is_sorted": [[846, "polars-series-is-sorted"]], "polars.Series.is_unique": [[848, "polars-series-is-unique"]], "polars.Series.is_null": [[844, "polars-series-is-null"]], "polars.Series.kurtosis": [[851, "polars-series-kurtosis"]], "polars.Series.rolling_mean": [[885, "polars-series-rolling-mean"]], "polars.Series.peak_max": [[872, "polars-series-peak-max"]], "polars.Series.quantile": [[876, "polars-series-quantile"]], "polars.Series.reverse": [[882, "polars-series-reverse"]], "polars.Series.rolling_skew": [[889, "polars-series-rolling-skew"]], "polars.Series.nan_max": [[867, "polars-series-nan-max"]], "polars.Series.skew": [[909, "polars-series-skew"]], "polars.Series.mean": [[860, "polars-series-mean"]], "polars.Series.new_from_index": [[869, "polars-series-new-from-index"]], "polars.Series.is_numeric": [[845, "polars-series-is-numeric"]], "polars.Series.is_temporal": [[847, "polars-series-is-temporal"]], "polars.Series.rolling_quantile": [[888, "polars-series-rolling-quantile"]], "polars.Series.is_utf8": [[849, "polars-series-is-utf8"]], "polars.Series.shift": [[901, "polars-series-shift"]], "polars.Series.len": [[852, "polars-series-len"]], "polars.Series.map_dict": [[858, "polars-series-map-dict"]], "polars.Series.pct_change": [[871, "polars-series-pct-change"]], "polars.Series.lower_bound": [[857, "polars-series-lower-bound"]], "polars.Series.mode": [[863, "polars-series-mode"]], "polars.Series.reinterpret": [[879, "polars-series-reinterpret"]], "polars.Series.min": [[862, "polars-series-min"]], "polars.Series.round": [[893, "polars-series-round"]], "polars.Series.set": [[897, "polars-series-set"]], "polars.Series.set_sorted": [[899, "polars-series-set-sorted"]], "polars.Series.rolling_max": [[884, "polars-series-rolling-max"]], "polars.Series.max": [[859, "polars-series-max"]], "polars.Series.shift_and_fill": [[902, "polars-series-shift-and-fill"]], "polars.Series.shuffle": [[905, "polars-series-shuffle"]], "polars.Series.n_unique": [[865, "polars-series-n-unique"]], "polars.Series.reshape": [[881, "polars-series-reshape"]], "polars.Series.search_sorted": [[895, "polars-series-search-sorted"]], "polars.Series.series_equal": [[896, "polars-series-series-equal"]], "polars.Series.n_chunks": [[864, "polars-series-n-chunks"]], "polars.Series.shape": [[900, "polars-series-shape"]], "polars.Series.rolling_min": [[887, "polars-series-rolling-min"]], "polars.Series.log10": [[855, "polars-series-log10"]], "polars.Series.sinh": [[908, "polars-series-sinh"]], "polars.Series.sin": [[907, "polars-series-sin"]], "polars.Series.is_not_nan": [[842, "polars-series-is-not-nan"]], "polars.Series.shrink_to_fit": [[904, "polars-series-shrink-to-fit"]], "polars.Series.sign": [[906, "polars-series-sign"]], "polars.Series.product": [[874, "polars-series-product"]], "polars.Series.rolling_median": [[886, "polars-series-rolling-median"]], "polars.Series.is_not_null": [[843, "polars-series-is-not-null"]], "polars.Series.log": [[854, "polars-series-log"]], "polars.Series.log1p": [[856, "polars-series-log1p"]], "polars.Series.rank": [[877, "polars-series-rank"]], "polars.Series.nan_min": [[868, "polars-series-nan-min"]], "polars.Series.set_at_idx": [[898, "polars-series-set-at-idx"]], "polars.Series.limit": [[853, "polars-series-limit"]], "polars.Series.is_nan": [[841, "polars-series-is-nan"]], "polars.Series.rolling_std": [[890, "polars-series-rolling-std"]], "polars.Series.name": [[866, "polars-series-name"]], "polars.Series.qcut": [[875, "polars-series-qcut"]], "polars.Series.rename": [[880, "polars-series-rename"]], "polars.Series.sample": [[894, "polars-series-sample"]], "polars.Series.rolling_var": [[892, "polars-series-rolling-var"]], "polars.Series.rolling_apply": [[883, "polars-series-rolling-apply"]], "polars.Series.shrink_dtype": [[903, "polars-series-shrink-dtype"]], "polars.Series.null_count": [[870, "polars-series-null-count"]], "polars.Series.peak_min": [[873, "polars-series-peak-min"]], "polars.Series.is_integer": [[840, "polars-series-is-integer"]], "polars.Series.median": [[861, "polars-series-median"]], "polars.Series.item": [[850, "polars-series-item"]], "polars.Series.rolling_sum": [[891, "polars-series-rolling-sum"]], "polars.Series.fill_nan": [[818, "polars-series-fill-nan"]], "polars.Series.dt.nanosecond": [[791, "polars-series-dt-nanosecond"]], "polars.Series.head": [[826, "polars-series-head"]], "polars.Series.floor": [[822, "polars-series-floor"]], "polars.Series.hist": [[827, "polars-series-hist"]], "polars.Series.is_empty": [[834, "polars-series-is-empty"]], "polars.Series.dt.nanoseconds": [[792, "polars-series-dt-nanoseconds"]], "polars.Series.ewm_mean": [[812, "polars-series-ewm-mean"]], "polars.Series.flags": [[821, "polars-series-flags"]], "polars.Series.dt.minute": [[786, "polars-series-dt-minute"]], "polars.Series.dt.seconds": [[799, "polars-series-dt-seconds"]], "polars.Series.dt.second": [[798, "polars-series-dt-second"]], "polars.Series.filter": [[820, "polars-series-filter"]], "polars.Series.dt.to_string": [[803, "polars-series-dt-to-string"]], "polars.Series.is_boolean": [[832, "polars-series-is-boolean"]], "polars.Series.estimated_size": [[811, "polars-series-estimated-size"]], "polars.Series.dt.microseconds": [[782, "polars-series-dt-microseconds"]], "polars.Series.dt.time": [[801, "polars-series-dt-time"]], "polars.Series.dt.day": [[771, "polars-series-dt-day"]], "polars.Series.dt.week": [[805, "polars-series-dt-week"]], "polars.Series.dt.datetime": [[770, "polars-series-dt-datetime"]], "polars.Series.dt.iso_year": [[777, "polars-series-dt-iso-year"]], "polars.Series.dt.mean": [[779, "polars-series-dt-mean"]], "polars.Series.dt.median": [[780, "polars-series-dt-median"]], "polars.Series.entropy": [[810, "polars-series-entropy"]], "polars.Series.explode": [[816, "polars-series-explode"]], "polars.Series.dt.milliseconds": [[784, "polars-series-dt-milliseconds"]], "polars.Series.extend_constant": [[817, "polars-series-extend-constant"]], "polars.Series.has_validity": [[824, "polars-series-has-validity"]], "polars.Series.dt.truncate": [[804, "polars-series-dt-truncate"]], "polars.Series.dt.month_end": [[789, "polars-series-dt-month-end"]], "polars.Series.dt.month_start": [[790, "polars-series-dt-month-start"]], "polars.Series.dt.strftime": [[800, "polars-series-dt-strftime"]], "polars.Series.is_duplicated": [[833, "polars-series-is-duplicated"]], "polars.Series.dt.month": [[788, "polars-series-dt-month"]], "polars.Series.is_float": [[837, "polars-series-is-float"]], "polars.Series.ewm_std": [[813, "polars-series-ewm-std"]], "polars.Series.dt.round": [[797, "polars-series-dt-round"]], "polars.Series.dt.hours": [[775, "polars-series-dt-hours"]], "polars.Series.dt.min": [[785, "polars-series-dt-min"]], "polars.Series.dt.max": [[778, "polars-series-dt-max"]], "polars.Series.dt.replace_time_zone": [[796, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.with_time_unit": [[807, "polars-series-dt-with-time-unit"]], "polars.Series.hash": [[825, "polars-series-hash"]], "polars.Series.dt.offset_by": [[793, "polars-series-dt-offset-by"]], "polars.Series.exp": [[815, "polars-series-exp"]], "polars.Series.dt.days": [[772, "polars-series-dt-days"]], "polars.Series.dt.microsecond": [[781, "polars-series-dt-microsecond"]], "polars.Series.dt.quarter": [[795, "polars-series-dt-quarter"]], "polars.Series.dt.timestamp": [[802, "polars-series-dt-timestamp"]], "polars.Series.fill_null": [[819, "polars-series-fill-null"]], "polars.Series.is_between": [[831, "polars-series-is-between"]], "polars.Series.is_finite": [[835, "polars-series-is-finite"]], "polars.Series.dt.year": [[808, "polars-series-dt-year"]], "polars.Series.inner_dtype": [[829, "polars-series-inner-dtype"]], "polars.Series.is_infinite": [[839, "polars-series-is-infinite"]], "polars.Series.dtype": [[809, "polars-series-dtype"]], "polars.Series.get_chunks": [[823, "polars-series-get-chunks"]], "polars.Series.implode": [[828, "polars-series-implode"]], "polars.Series.dt.minutes": [[787, "polars-series-dt-minutes"]], "polars.Series.dt.ordinal_day": [[794, "polars-series-dt-ordinal-day"]], "polars.Series.dt.weekday": [[806, "polars-series-dt-weekday"]], "polars.Series.dt.is_leap_year": [[776, "polars-series-dt-is-leap-year"]], "polars.Series.dt.millisecond": [[783, "polars-series-dt-millisecond"]], "polars.Series.ewm_var": [[814, "polars-series-ewm-var"]], "polars.Series.interpolate": [[830, "polars-series-interpolate"]], "polars.Series.is_in": [[838, "polars-series-is-in"]], "polars.Series.dt.hour": [[774, "polars-series-dt-hour"]], "polars.Series.dt.epoch": [[773, "polars-series-dt-epoch"]], "polars.Series.is_first": [[836, "polars-series-is-first"]], "polars.Series.arr.sort": [[730, "polars-series-arr-sort"]], "polars.Series.arr.sum": [[731, "polars-series-arr-sum"]], "polars.Series.bin.contains": [[736, "polars-series-bin-contains"]], "polars.Series.arr.contains": [[713, "polars-series-arr-contains"]], "polars.Series.arr.shift": [[728, "polars-series-arr-shift"]], "polars.Series.ceil": [[745, "polars-series-ceil"]], "polars.Series.arr.get": [[719, "polars-series-arr-get"]], "polars.Series.describe": [[760, "polars-series-describe"]], "polars.Series.cosh": [[753, "polars-series-cosh"]], "polars.Series.arr.join": [[721, "polars-series-arr-join"]], "polars.Series.arr.lengths": [[723, "polars-series-arr-lengths"]], "polars.Series.arg_true": [[707, "polars-series-arg-true"]], "polars.Series.cos": [[752, "polars-series-cos"]], "polars.Series.cummin": [[755, "polars-series-cummin"]], "polars.Series.clip_min": [[750, "polars-series-clip-min"]], "polars.Series.dt": [[765, "polars-series-dt"]], "polars.Series.cast": [[742, "polars-series-cast"]], "polars.Series.arr.take": [[733, "polars-series-arr-take"]], "polars.Series.dt.convert_time_zone": [[768, "polars-series-dt-convert-time-zone"]], "polars.Series.clear": [[747, "polars-series-clear"]], "polars.Series.chunk_lengths": [[746, "polars-series-chunk-lengths"]], "polars.Series.bin.encode": [[738, "polars-series-bin-encode"]], "polars.Series.cumsum": [[757, "polars-series-cumsum"]], "polars.Series.arr.reverse": [[727, "polars-series-arr-reverse"]], "polars.Series.cumprod": [[756, "polars-series-cumprod"]], "polars.Series.arr.last": [[722, "polars-series-arr-last"]], "polars.Series.arctanh": [[703, "polars-series-arctanh"]], "polars.Series.arr": [[709, "polars-series-arr"]], "polars.Series.diff": [[761, "polars-series-diff"]], "polars.Series.arr.explode": [[717, "polars-series-arr-explode"]], "polars.Series.cummax": [[754, "polars-series-cummax"]], "polars.Series.dot": [[762, "polars-series-dot"]], "polars.Series.cumulative_eval": [[758, "polars-series-cumulative-eval"]], "polars.Series.dt.date": [[769, "polars-series-dt-date"]], "polars.Series.arr.tail": [[732, "polars-series-arr-tail"]], "polars.Series.arr.diff": [[715, "polars-series-arr-diff"]], "polars.Series.cat": [[743, "polars-series-cat"]], "polars.Series.arg_min": [[705, "polars-series-arg-min"]], "polars.Series.clip": [[748, "polars-series-clip"]], "polars.Series.cat.set_ordering": [[744, "polars-series-cat-set-ordering"]], "polars.Series.bin.ends_with": [[739, "polars-series-bin-ends-with"]], "polars.Series.arr.min": [[726, "polars-series-arr-min"]], "polars.Series.arr.arg_max": [[710, "polars-series-arr-arg-max"]], "polars.Series.arr.first": [[718, "polars-series-arr-first"]], "polars.Series.arg_sort": [[706, "polars-series-arg-sort"]], "polars.Series.drop_nulls": [[764, "polars-series-drop-nulls"]], "polars.Series.arr.mean": [[725, "polars-series-arr-mean"]], "polars.Series.bottom_k": [[741, "polars-series-bottom-k"]], "polars.Series.arr.max": [[724, "polars-series-arr-max"]], "polars.Series.arg_max": [[704, "polars-series-arg-max"]], "polars.Series.arr.count_match": [[714, "polars-series-arr-count-match"]], "polars.Series.arctan": [[702, "polars-series-arctan"]], "polars.Series.arr.head": [[720, "polars-series-arr-head"]], "polars.Series.arr.unique": [[735, "polars-series-arr-unique"]], "polars.Series.clone": [[751, "polars-series-clone"]], "polars.Series.clip_max": [[749, "polars-series-clip-max"]], "polars.Series.drop_nans": [[763, "polars-series-drop-nans"]], "polars.Series.arr.slice": [[729, "polars-series-arr-slice"]], "polars.Series.arcsinh": [[701, "polars-series-arcsinh"]], "polars.Series.arr.to_struct": [[734, "polars-series-arr-to-struct"]], "polars.Series.cut": [[759, "polars-series-cut"]], "polars.Series.dt.combine": [[767, "polars-series-dt-combine"]], "polars.Series.arr.eval": [[716, "polars-series-arr-eval"]], "polars.Series.arr.concat": [[712, "polars-series-arr-concat"]], "polars.Series.bin.decode": [[737, "polars-series-bin-decode"]], "polars.Series.dt.cast_time_unit": [[766, "polars-series-dt-cast-time-unit"]], "polars.Series.bin.starts_with": [[740, "polars-series-bin-starts-with"]], "polars.Series.arg_unique": [[708, "polars-series-arg-unique"]], "polars.Series.arr.arg_min": [[711, "polars-series-arr-arg-min"]], "polars.Series.arcsin": [[700, "polars-series-arcsin"]], "Utils": [[992, "utils"]], "Temporal": [[989, "temporal"], [599, "temporal"], [255, "temporal"]], "Descriptive": [[981, "descriptive"], [686, "descriptive"], [249, "descriptive"]], "Manipulation/selection": [[986, "manipulation-selection"], [690, "manipulation-selection"], [595, "manipulation-selection"], [254, "manipulation-selection"]], "Struct": [[988, "struct"], [598, "struct"]], "Computation": [[980, "computation"], [589, "computation"], [248, "computation"]], "Series": [[983, "series"]], "List": [[984, "list"], [592, "list"]], "String": [[987, "string"], [597, "string"]], "SQL": [[990, "sql"]], "Methods": [[990, "methods"]], "Export": [[982, "export"], [250, "export"]], "Miscellaneous": [[985, "miscellaneous"], [689, "miscellaneous"], [601, "miscellaneous"], [594, "miscellaneous"], [253, "miscellaneous"]], "Testing": [[991, "testing"]], "Asserts": [[991, "asserts"]], "Parametric testing": [[991, "parametric-testing"]], "Polars primitives": [[991, "polars-primitives"]], "Strategy helpers": [[991, "strategy-helpers"]], "Profiles": [[991, "profiles"]], "polars.LazyFrame.rename": [[644, "polars-lazyframe-rename"]], "LazyFrame": [[688, "lazyframe"]], "polars.LazyFrame.tail": [[658, "polars-lazyframe-tail"]], "polars.Series.alias": [[693, "polars-series-alias"]], "polars.LazyFrame.melt": [[637, "polars-lazyframe-melt"]], "polars.LazyFrame.median": [[636, "polars-lazyframe-median"]], "polars.LazyFrame.schema": [[646, "polars-lazyframe-schema"]], "polars.Series.apply": [[697, "polars-series-apply"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[684, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[673, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.LazyFrame.reverse": [[645, "polars-lazyframe-reverse"]], "polars.LazyFrame.sink_parquet": [[653, "polars-lazyframe-sink-parquet"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[674, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.LazyFrame.merge_sorted": [[638, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.pipe": [[640, "polars-lazyframe-pipe"]], "polars.Series.all": [[694, "polars-series-all"]], "polars.Series.any": [[695, "polars-series-any"]], "polars.LazyFrame.quantile": [[642, "polars-lazyframe-quantile"]], "polars.LazyFrame.take_every": [[659, "polars-lazyframe-take-every"]], "polars.LazyFrame.last": [[630, "polars-lazyframe-last"]], "polars.LazyFrame.map": [[633, "polars-lazyframe-map"]], "polars.LazyFrame.select": [[647, "polars-lazyframe-select"]], "polars.LazyFrame.unique": [[661, "polars-lazyframe-unique"]], "polars.LazyFrame.update": [[663, "polars-lazyframe-update"]], "polars.LazyFrame.with_context": [[667, "polars-lazyframe-with-context"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[670, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[677, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.Series.append": [[696, "polars-series-append"]], "polars.LazyFrame.show_graph": [[651, "polars-lazyframe-show-graph"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[682, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.Series.abs": [[692, "polars-series-abs"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[680, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.LazyFrame.write_json": [[669, "polars-lazyframe-write-json"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[679, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.LazyFrame.sink_ipc": [[652, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.unnest": [[662, "polars-lazyframe-unnest"]], "polars.LazyFrame.lazy": [[631, "polars-lazyframe-lazy"]], "polars.LazyFrame.var": [[664, "polars-lazyframe-var"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[683, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.LazyFrame.profile": [[641, "polars-lazyframe-profile"]], "polars.LazyFrame.top_k": [[660, "polars-lazyframe-top-k"]], "Read/write logical plan": [[689, "read-write-logical-plan"]], "polars.LazyFrame.slice": [[654, "polars-lazyframe-slice"]], "polars.LazyFrame.std": [[656, "polars-lazyframe-std"]], "polars.LazyFrame.limit": [[632, "polars-lazyframe-limit"]], "polars.LazyFrame.set_sorted": [[648, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.shift": [[649, "polars-lazyframe-shift"]], "polars.LazyFrame.read_json": [[643, "polars-lazyframe-read-json"]], "polars.LazyFrame.mean": [[635, "polars-lazyframe-mean"]], "polars.LazyFrame.with_columns": [[666, "polars-lazyframe-with-columns"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[675, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[671, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[672, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.LazyFrame.width": [[665, "polars-lazyframe-width"]], "polars.Series.arccos": [[698, "polars-series-arccos"]], "polars.LazyFrame.min": [[639, "polars-lazyframe-min"]], "polars.LazyFrame.with_row_count": [[668, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.sum": [[657, "polars-lazyframe-sum"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[681, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[676, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.LazyFrame.max": [[634, "polars-lazyframe-max"]], "polars.LazyFrame.sort": [[655, "polars-lazyframe-sort"]], "polars.LazyFrame.shift_and_fill": [[650, "polars-lazyframe-shift-and-fill"]], "polars.Series.arccosh": [[699, "polars-series-arccosh"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[678, "polars-lazyframe-groupby-lazygroupby-mean"]], "GroupBy": [[687, "groupby"], [251, "groupby"]], "polars.arg_sort_by": [[540, "polars-arg-sort-by"]], "polars.Expr.str.slice": [[502, "polars-expr-str-slice"]], "polars.apply": [[537, "polars-apply"]], "polars.cumfold": [[549, "polars-cumfold"]], "polars.Expr.str.ljust": [[494, "polars-expr-str-ljust"]], "polars.Expr.value_counts": [[531, "polars-expr-value-counts"]], "polars.Expr.str.replace": [[498, "polars-expr-str-replace"]], "polars.Expr.str.json_extract": [[491, "polars-expr-str-json-extract"]], "polars.Expr.str.to_time": [[512, "polars-expr-str-to-time"]], "polars.Expr.str.rjust": [[500, "polars-expr-str-rjust"]], "polars.Expr.struct.rename_fields": [[516, "polars-expr-struct-rename-fields"]], "polars.Expr.upper_bound": [[530, "polars-expr-upper-bound"]], "polars.Expr.unique": [[528, "polars-expr-unique"]], "polars.Expr.str.extract_all": [[490, "polars-expr-str-extract-all"]], "polars.Expr.str.to_lowercase": [[511, "polars-expr-str-to-lowercase"]], "polars.Expr.tail": [[520, "polars-expr-tail"]], "polars.coalesce": [[542, "polars-coalesce"]], "polars.Expr.str.parse_int": [[497, "polars-expr-str-parse-int"]], "polars.Expr.var": [[532, "polars-expr-var"]], "polars.Expr.sub": [[517, "polars-expr-sub"]], "polars.first": [[557, "polars-first"]], "polars.Expr.str.json_path_match": [[492, "polars-expr-str-json-path-match"]], "polars.arange": [[539, "polars-arange"]], "polars.Expr.struct.field": [[515, "polars-expr-struct-field"]], "polars.all": [[535, "polars-all"]], "polars.Expr.str.rstrip": [[501, "polars-expr-str-rstrip"]], "polars.Expr.str.starts_with": [[506, "polars-expr-str-starts-with"]], "polars.element": [[555, "polars-element"]], "polars.fold": [[558, "polars-fold"]], "polars.Expr.str.to_uppercase": [[513, "polars-expr-str-to-uppercase"]], "polars.any": [[536, "polars-any"]], "polars.format": [[559, "polars-format"]], "polars.datetime": [[553, "polars-datetime"]], "polars.Expr.str.zfill": [[514, "polars-expr-str-zfill"]], "polars.Expr.tanh": [[524, "polars-expr-tanh"]], "polars.Expr.truediv": [[527, "polars-expr-truediv"]], "polars.Expr.str.strip": [[507, "polars-expr-str-strip"]], "polars.Expr.str.lstrip": [[495, "polars-expr-str-lstrip"]], "polars.count": [[547, "polars-count"]], "polars.cumreduce": [[550, "polars-cumreduce"]], "polars.corr": [[546, "polars-corr"]], "polars.cov": [[548, "polars-cov"]], "polars.Expr.take": [[521, "polars-expr-take"]], "polars.Expr.top_k": [[526, "polars-expr-top-k"]], "polars.Expr.str.split": [[503, "polars-expr-str-split"]], "polars.Expr.suffix": [[518, "polars-expr-suffix"]], "polars.col": [[543, "polars-col"]], "polars.Expr.str.replace_all": [[499, "polars-expr-str-replace-all"]], "polars.date": [[552, "polars-date"]], "polars.Expr.where": [[533, "polars-expr-where"]], "polars.Expr.tan": [[523, "polars-expr-tan"]], "polars.Expr.xor": [[534, "polars-expr-xor"]], "polars.approx_unique": [[538, "polars-approx-unique"]], "polars.concat_str": [[545, "polars-concat-str"]], "polars.Expr.str.splitn": [[505, "polars-expr-str-splitn"]], "polars.Expr.str.strptime": [[508, "polars-expr-str-strptime"]], "polars.Expr.unique_counts": [[529, "polars-expr-unique-counts"]], "polars.concat_list": [[544, "polars-concat-list"]], "polars.cumsum": [[551, "polars-cumsum"]], "polars.duration": [[554, "polars-duration"]], "polars.Expr.str.lengths": [[493, "polars-expr-str-lengths"]], "polars.Expr.str.n_chars": [[496, "polars-expr-str-n-chars"]], "polars.Expr.sum": [[519, "polars-expr-sum"]], "polars.exclude": [[556, "polars-exclude"]], "polars.Expr.str.to_date": [[509, "polars-expr-str-to-date"]], "polars.Expr.take_every": [[522, "polars-expr-take-every"]], "polars.Expr.str.to_datetime": [[510, "polars-expr-str-to-datetime"]], "polars.avg": [[541, "polars-avg"]], "polars.Expr.to_physical": [[525, "polars-expr-to-physical"]], "polars.Expr.str.split_exact": [[504, "polars-expr-str-split-exact"]], "polars.Expr.mean": [[422, "polars-expr-mean"]], "polars.Expr.rolling_apply": [[455, "polars-expr-rolling-apply"]], "polars.Expr.ne": [[439, "polars-expr-ne"]], "polars.Expr.product": [[447, "polars-expr-product"]], "polars.Expr.sample": [[466, "polars-expr-sample"]], "polars.Expr.str.count_match": [[484, "polars-expr-str-count-match"]], "polars.Expr.nan_max": [[437, "polars-expr-nan-max"]], "polars.Expr.reverse": [[454, "polars-expr-reverse"]], "polars.Expr.rank": [[449, "polars-expr-rank"]], "polars.Expr.shuffle": [[472, "polars-expr-shuffle"]], "polars.Expr.over": [[442, "polars-expr-over"]], "polars.Expr.rolling_mean": [[457, "polars-expr-rolling-mean"]], "polars.Expr.median": [[423, "polars-expr-median"]], "polars.Expr.reshape": [[453, "polars-expr-reshape"]], "polars.Expr.round": [[465, "polars-expr-round"]], "polars.Expr.skew": [[476, "polars-expr-skew"]], "polars.Expr.meta.eq": [[424, "polars-expr-meta-eq"]], "polars.Expr.slice": [[477, "polars-expr-slice"]], "polars.Expr.pipe": [[444, "polars-expr-pipe"]], "polars.Expr.rolling_var": [[464, "polars-expr-rolling-var"]], "polars.Expr.sin": [[474, "polars-expr-sin"]], "polars.Expr.meta.is_regex_projection": [[426, "polars-expr-meta-is-regex-projection"]], "polars.Expr.sqrt": [[480, "polars-expr-sqrt"]], "polars.Expr.rolling_quantile": [[460, "polars-expr-rolling-quantile"]], "polars.Expr.meta.undo_aliases": [[431, "polars-expr-meta-undo-aliases"]], "polars.Expr.min": [[432, "polars-expr-min"]], "polars.Expr.mul": [[435, "polars-expr-mul"]], "polars.Expr.n_unique": [[436, "polars-expr-n-unique"]], "polars.Expr.nan_min": [[438, "polars-expr-nan-min"]], "polars.Expr.quantile": [[448, "polars-expr-quantile"]], "polars.Expr.meta.root_names": [[430, "polars-expr-meta-root-names"]], "polars.Expr.shift_and_fill": [[470, "polars-expr-shift-and-fill"]], "polars.Expr.rolling_min": [[459, "polars-expr-rolling-min"]], "polars.Expr.str.extract": [[489, "polars-expr-str-extract"]], "polars.Expr.str.encode": [[486, "polars-expr-str-encode"]], "polars.Expr.str.contains": [[483, "polars-expr-str-contains"]], "polars.Expr.reinterpret": [[451, "polars-expr-reinterpret"]], "polars.Expr.rolling_max": [[456, "polars-expr-rolling-max"]], "polars.Expr.pow": [[445, "polars-expr-pow"]], "polars.Expr.std": [[481, "polars-expr-std"]], "polars.Expr.shrink_dtype": [[471, "polars-expr-shrink-dtype"]], "polars.Expr.shift": [[469, "polars-expr-shift"]], "polars.Expr.str.concat": [[482, "polars-expr-str-concat"]], "polars.Expr.map_dict": [[420, "polars-expr-map-dict"]], "polars.Expr.rechunk": [[450, "polars-expr-rechunk"]], "polars.Expr.prefix": [[446, "polars-expr-prefix"]], "polars.Expr.search_sorted": [[467, "polars-expr-search-sorted"]], "polars.Expr.meta.output_name": [[428, "polars-expr-meta-output-name"]], "polars.Expr.max": [[421, "polars-expr-max"]], "polars.Expr.null_count": [[440, "polars-expr-null-count"]], "polars.Expr.str.ends_with": [[487, "polars-expr-str-ends-with"]], "polars.Expr.rolling_median": [[458, "polars-expr-rolling-median"]], "polars.Expr.sort_by": [[479, "polars-expr-sort-by"]], "polars.Expr.sign": [[473, "polars-expr-sign"]], "polars.Expr.sort": [[478, "polars-expr-sort"]], "polars.Expr.or_": [[441, "polars-expr-or"]], "polars.Expr.rolling_sum": [[463, "polars-expr-rolling-sum"]], "polars.Expr.rolling_std": [[462, "polars-expr-rolling-std"]], "polars.Expr.rolling_skew": [[461, "polars-expr-rolling-skew"]], "polars.Expr.meta.has_multiple_outputs": [[425, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.pct_change": [[443, "polars-expr-pct-change"]], "polars.Expr.repeat_by": [[452, "polars-expr-repeat-by"]], "polars.Expr.str.decode": [[485, "polars-expr-str-decode"]], "polars.Expr.str.explode": [[488, "polars-expr-str-explode"]], "polars.Expr.sinh": [[475, "polars-expr-sinh"]], "polars.Expr.mod": [[433, "polars-expr-mod"]], "polars.Expr.mode": [[434, "polars-expr-mode"]], "polars.Expr.meta.pop": [[429, "polars-expr-meta-pop"]], "polars.Expr.meta.ne": [[427, "polars-expr-meta-ne"]], "polars.Expr.set_sorted": [[468, "polars-expr-set-sorted"]], "polars.Expr.dt.quarter": [[357, "polars-expr-dt-quarter"]], "polars.Expr.dt.round": [[359, "polars-expr-dt-round"]], "polars.Expr.inspect": [[393, "polars-expr-inspect"]], "polars.Expr.is_not": [[402, "polars-expr-is-not"]], "polars.Expr.map": [[418, "polars-expr-map"]], "polars.Expr.log10": [[414, "polars-expr-log10"]], "polars.Expr.dt.seconds": [[361, "polars-expr-dt-seconds"]], "polars.Expr.dt.month_start": [[352, "polars-expr-dt-month-start"]], "polars.Expr.dt.to_string": [[365, "polars-expr-dt-to-string"]], "polars.Expr.dt.weekday": [[368, "polars-expr-dt-weekday"]], "polars.Expr.dt.month": [[350, "polars-expr-dt-month"]], "polars.Expr.exclude": [[376, "polars-expr-exclude"]], "polars.Expr.dt.nanosecond": [[353, "polars-expr-dt-nanosecond"]], "polars.Expr.extend_constant": [[379, "polars-expr-extend-constant"]], "polars.Expr.dt.offset_by": [[355, "polars-expr-dt-offset-by"]], "polars.Expr.ewm_std": [[374, "polars-expr-ewm-std"]], "polars.Expr.keep_name": [[407, "polars-expr-keep-name"]], "polars.Expr.is_unique": [[406, "polars-expr-is-unique"]], "polars.Expr.forward_fill": [[387, "polars-expr-forward-fill"]], "polars.Expr.is_infinite": [[400, "polars-expr-is-infinite"]], "polars.Expr.dt.ordinal_day": [[356, "polars-expr-dt-ordinal-day"]], "polars.Expr.is_finite": [[397, "polars-expr-is-finite"]], "polars.Expr.dt.timestamp": [[364, "polars-expr-dt-timestamp"]], "polars.Expr.fill_null": [[381, "polars-expr-fill-null"]], "polars.Expr.limit": [[412, "polars-expr-limit"]], "polars.Expr.log1p": [[415, "polars-expr-log1p"]], "polars.Expr.len": [[411, "polars-expr-len"]], "polars.Expr.map_alias": [[419, "polars-expr-map-alias"]], "polars.Expr.dt.time": [[363, "polars-expr-dt-time"]], "polars.Expr.is_not_null": [[404, "polars-expr-is-not-null"]], "polars.Expr.dt.month_end": [[351, "polars-expr-dt-month-end"]], "polars.Expr.dt.truncate": [[366, "polars-expr-dt-truncate"]], "polars.Expr.dt.strftime": [[362, "polars-expr-dt-strftime"]], "polars.Expr.explode": [[378, "polars-expr-explode"]], "polars.Expr.flatten": [[384, "polars-expr-flatten"]], "polars.Expr.head": [[391, "polars-expr-head"]], "polars.Expr.is_nan": [[401, "polars-expr-is-nan"]], "polars.Expr.dt.week": [[367, "polars-expr-dt-week"]], "polars.Expr.entropy": [[371, "polars-expr-entropy"]], "polars.Expr.eq": [[372, "polars-expr-eq"]], "polars.Expr.kurtosis": [[408, "polars-expr-kurtosis"]], "polars.Expr.last": [[409, "polars-expr-last"]], "polars.Expr.lt": [[417, "polars-expr-lt"]], "polars.Expr.dt.nanoseconds": [[354, "polars-expr-dt-nanoseconds"]], "polars.Expr.fill_nan": [[380, "polars-expr-fill-nan"]], "polars.Expr.ewm_var": [[375, "polars-expr-ewm-var"]], "polars.Expr.ewm_mean": [[373, "polars-expr-ewm-mean"]], "polars.Expr.gt": [[389, "polars-expr-gt"]], "polars.Expr.floordiv": [[386, "polars-expr-floordiv"]], "polars.Expr.is_not_nan": [[403, "polars-expr-is-not-nan"]], "polars.Expr.le": [[410, "polars-expr-le"]], "polars.Expr.implode": [[392, "polars-expr-implode"]], "polars.Expr.floor": [[385, "polars-expr-floor"]], "polars.Expr.dt.replace_time_zone": [[358, "polars-expr-dt-replace-time-zone"]], "polars.Expr.filter": [[382, "polars-expr-filter"]], "polars.Expr.is_between": [[395, "polars-expr-is-between"]], "polars.Expr.dt.with_time_unit": [[369, "polars-expr-dt-with-time-unit"]], "polars.Expr.hash": [[390, "polars-expr-hash"]], "polars.Expr.log": [[413, "polars-expr-log"]], "polars.Expr.interpolate": [[394, "polars-expr-interpolate"]], "polars.Expr.exp": [[377, "polars-expr-exp"]], "polars.Expr.is_first": [[398, "polars-expr-is-first"]], "polars.Expr.ge": [[388, "polars-expr-ge"]], "polars.Expr.first": [[383, "polars-expr-first"]], "polars.Expr.dt.second": [[360, "polars-expr-dt-second"]], "polars.Expr.is_duplicated": [[396, "polars-expr-is-duplicated"]], "polars.Expr.lower_bound": [[416, "polars-expr-lower-bound"]], "polars.Expr.is_null": [[405, "polars-expr-is-null"]], "polars.Expr.is_in": [[399, "polars-expr-is-in"]], "polars.Expr.dt.year": [[370, "polars-expr-dt-year"]], "polars.std": [[579, "polars-std"]], "polars.tail": [[582, "polars-tail"]], "polars.LazyFrame.bottom_k": [[605, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.fill_nan": [[617, "polars-lazyframe-fill-nan"]], "polars.rolling_cov": [[576, "polars-rolling-cov"]], "polars.LazyFrame.groupby": [[622, "polars-lazyframe-groupby"]], "polars.LazyFrame.interpolate": [[627, "polars-lazyframe-interpolate"]], "polars.LazyFrame.join_asof": [[629, "polars-lazyframe-join-asof"]], "Functions": [[601, "functions"], [590, "functions"]], "Conversion": [[601, "conversion"]], "Eager/Lazy functions": [[601, "eager-lazy-functions"]], "Parallelization": [[601, "parallelization"]], "StringCache": [[601, "stringcache"]], "polars.LazyFrame.first": [[620, "polars-lazyframe-first"]], "polars.min": [[569, "polars-min"]], "polars.head": [[562, "polars-head"]], "polars.quantile": [[572, "polars-quantile"]], "polars.LazyFrame.explain": [[614, "polars-lazyframe-explain"]], "polars.LazyFrame.inspect": [[626, "polars-lazyframe-inspect"]], "polars.max": [[566, "polars-max"]], "polars.LazyFrame.from_json": [[621, "polars-lazyframe-from-json"]], "polars.LazyFrame.explode": [[615, "polars-lazyframe-explode"]], "polars.LazyFrame.clone": [[608, "polars-lazyframe-clone"]], "polars.LazyFrame.groupby_rolling": [[624, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.join": [[628, "polars-lazyframe-join"]], "polars.LazyFrame.fetch": [[616, "polars-lazyframe-fetch"]], "polars.LazyFrame.drop_nulls": [[612, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.groupby_dynamic": [[623, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.clear": [[607, "polars-lazyframe-clear"]], "polars.map": [[565, "polars-map"]], "polars.lit": [[564, "polars-lit"]], "polars.median": [[568, "polars-median"]], "polars.spearman_rank_corr": [[578, "polars-spearman-rank-corr"]], "polars.LazyFrame.collect": [[609, "polars-lazyframe-collect"]], "polars.LazyFrame.head": [[625, "polars-lazyframe-head"]], "polars.LazyFrame.fill_null": [[618, "polars-lazyframe-fill-null"]], "polars.mean": [[567, "polars-mean"]], "polars.n_unique": [[570, "polars-n-unique"]], "polars.list": [[563, "polars-list"]], "Meta": [[593, "meta"]], "polars.groups": [[561, "polars-groups"]], "Input/output": [[603, "input-output"]], "CSV": [[603, "csv"]], "Feather/ IPC": [[603, "feather-ipc"]], "Parquet": [[603, "parquet"]], "Database": [[603, "database"]], "JSON": [[603, "json"]], "AVRO": [[603, "avro"]], "Excel": [[603, "excel"]], "Delta Lake": [[603, "delta-lake"]], "Datasets": [[603, "datasets"]], "BatchedCsvReader": [[603, "batchedcsvreader"]], "polars.repeat": [[574, "polars-repeat"]], "polars.LazyFrame.drop": [[611, "polars-lazyframe-drop"]], "polars.sum": [[581, "polars-sum"]], "polars.select": [[577, "polars-select"]], "polars.struct": [[580, "polars-struct"]], "polars.var": [[583, "polars-var"]], "polars.rolling_corr": [[575, "polars-rolling-corr"]], "Window": [[600, "window"]], "polars.pearson_corr": [[571, "polars-pearson-corr"]], "API reference": [[602, "api-reference"]], "polars.LazyFrame.dtypes": [[613, "polars-lazyframe-dtypes"]], "polars.LazyFrame.cache": [[606, "polars-lazyframe-cache"]], "polars.from_epoch": [[560, "polars-from-epoch"]], "polars.LazyFrame.columns": [[610, "polars-lazyframe-columns"]], "polars.LazyFrame.filter": [[619, "polars-lazyframe-filter"]], "polars.reduce": [[573, "polars-reduce"]], "Operators": [[596, "operators"]], "Conjunction": [[596, "conjunction"]], "Comparison": [[596, "comparison"]], "Numeric": [[596, "numeric"], [255, "numeric"]], "Expressions": [[591, "expressions"]], "polars.when": [[584, "polars-when"]], "Columns / names": [[588, "columns-names"]], "polars.Expr.cumcount": [[322, "polars-expr-cumcount"]], "polars.Expr.arr.count_match": [[283, "polars-expr-arr-count-match"]], "polars.Expr.dt.iso_year": [[343, "polars-expr-dt-iso-year"]], "polars.Expr.arr.tail": [[301, "polars-expr-arr-tail"]], "polars.Expr.count": [[321, "polars-expr-count"]], "polars.Expr.clip": [[316, "polars-expr-clip"]], "polars.Expr.dot": [[329, "polars-expr-dot"]], "polars.Expr.dt.is_leap_year": [[342, "polars-expr-dt-is-leap-year"]], "polars.Expr.arr.head": [[289, "polars-expr-arr-head"]], "polars.Expr.arr.min": [[295, "polars-expr-arr-min"]], "polars.Expr.arr.to_struct": [[303, "polars-expr-arr-to-struct"]], "polars.Expr.arr.arg_min": [[280, "polars-expr-arr-arg-min"]], "polars.Expr.cache": [[312, "polars-expr-cache"]], "polars.Expr.cat.set_ordering": [[314, "polars-expr-cat-set-ordering"]], "polars.Expr.cumsum": [[326, "polars-expr-cumsum"]], "polars.Expr.dt.millisecond": [[346, "polars-expr-dt-millisecond"]], "polars.Expr.bin.ends_with": [[309, "polars-expr-bin-ends-with"]], "polars.Expr.bottom_k": [[311, "polars-expr-bottom-k"]], "polars.Expr.dt.cast_time_unit": [[332, "polars-expr-dt-cast-time-unit"]], "polars.Expr.drop_nulls": [[331, "polars-expr-drop-nulls"]], "polars.Expr.clip_max": [[317, "polars-expr-clip-max"]], "polars.Expr.cosh": [[320, "polars-expr-cosh"]], "polars.Expr.dt.microsecond": [[344, "polars-expr-dt-microsecond"]], "polars.Expr.dt.hour": [[340, "polars-expr-dt-hour"]], "polars.Expr.bin.encode": [[308, "polars-expr-bin-encode"]], "polars.Expr.arr.first": [[287, "polars-expr-arr-first"]], "polars.Expr.ceil": [[315, "polars-expr-ceil"]], "polars.Expr.dt.date": [[335, "polars-expr-dt-date"]], "polars.Expr.dt.day": [[337, "polars-expr-dt-day"]], "polars.Expr.cos": [[319, "polars-expr-cos"]], "polars.Expr.arr.join": [[290, "polars-expr-arr-join"]], "polars.Expr.arr.sort": [[299, "polars-expr-arr-sort"]], "polars.Expr.dt.minute": [[348, "polars-expr-dt-minute"]], "polars.Expr.clip_min": [[318, "polars-expr-clip-min"]], "polars.Expr.arr.take": [[302, "polars-expr-arr-take"]], "polars.Expr.cummin": [[324, "polars-expr-cummin"]], "polars.Expr.dt.hours": [[341, "polars-expr-dt-hours"]], "polars.Expr.arr.concat": [[281, "polars-expr-arr-concat"]], "polars.Expr.dt.minutes": [[349, "polars-expr-dt-minutes"]], "polars.Expr.arr.reverse": [[296, "polars-expr-arr-reverse"]], "polars.Expr.arr.get": [[288, "polars-expr-arr-get"]], "polars.Expr.arr.mean": [[294, "polars-expr-arr-mean"]], "polars.Expr.cumprod": [[325, "polars-expr-cumprod"]], "polars.Expr.bin.contains": [[306, "polars-expr-bin-contains"]], "polars.Expr.dt.convert_time_zone": [[334, "polars-expr-dt-convert-time-zone"]], "polars.Expr.arr.slice": [[298, "polars-expr-arr-slice"]], "polars.Expr.bin.starts_with": [[310, "polars-expr-bin-starts-with"]], "polars.Expr.arr.sum": [[300, "polars-expr-arr-sum"]], "polars.Expr.cummax": [[323, "polars-expr-cummax"]], "polars.Expr.dt.days": [[338, "polars-expr-dt-days"]], "polars.Expr.drop_nans": [[330, "polars-expr-drop-nans"]], "polars.Expr.arr.diff": [[284, "polars-expr-arr-diff"]], "polars.Expr.dt.datetime": [[336, "polars-expr-dt-datetime"]], "polars.Expr.bin.decode": [[307, "polars-expr-bin-decode"]], "polars.Expr.arr.eval": [[285, "polars-expr-arr-eval"]], "polars.Expr.dt.combine": [[333, "polars-expr-dt-combine"]], "polars.Expr.arr.contains": [[282, "polars-expr-arr-contains"]], "polars.Expr.arr.explode": [[286, "polars-expr-arr-explode"]], "polars.Expr.dt.milliseconds": [[347, "polars-expr-dt-milliseconds"]], "polars.Expr.arr.unique": [[304, "polars-expr-arr-unique"]], "polars.Expr.cast": [[313, "polars-expr-cast"]], "polars.Expr.arr.lengths": [[292, "polars-expr-arr-lengths"]], "polars.Expr.arr.shift": [[297, "polars-expr-arr-shift"]], "polars.Expr.dt.epoch": [[339, "polars-expr-dt-epoch"]], "polars.Expr.backward_fill": [[305, "polars-expr-backward-fill"]], "polars.Expr.cumulative_eval": [[327, "polars-expr-cumulative-eval"]], "polars.Expr.arr.last": [[291, "polars-expr-arr-last"]], "polars.Expr.arr.max": [[293, "polars-expr-arr-max"]], "polars.Expr.diff": [[328, "polars-expr-diff"]], "polars.Expr.dt.microseconds": [[345, "polars-expr-dt-microseconds"]], "polars.DataFrame.item": [[168, "polars-dataframe-item"]], "polars.DataFrame.reverse": [[193, "polars-dataframe-reverse"]], "polars.DataFrame.slice": [[204, "polars-dataframe-slice"]], "polars.DataFrame.fill_nan": [[147, "polars-dataframe-fill-nan"]], "polars.DataFrame.is_empty": [[166, "polars-dataframe-is-empty"]], "polars.DataFrame.is_duplicated": [[165, "polars-dataframe-is-duplicated"]], "polars.DataFrame.iter_rows": [[169, "polars-dataframe-iter-rows"]], "polars.DataFrame.head": [[160, "polars-dataframe-head"]], "polars.DataFrame.rechunk": [[189, "polars-dataframe-rechunk"]], "polars.DataFrame.quantile": [[188, "polars-dataframe-quantile"]], "polars.DataFrame.tail": [[208, "polars-dataframe-tail"]], "polars.DataFrame.join": [[171, "polars-dataframe-join"]], "polars.DataFrame.get_columns": [[154, "polars-dataframe-get-columns"]], "polars.DataFrame.insert_at_idx": [[163, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.mean": [[176, "polars-dataframe-mean"]], "polars.DataFrame.min": [[180, "polars-dataframe-min"]], "polars.DataFrame.drop_nulls": [[142, "polars-dataframe-drop-nulls"]], "polars.DataFrame.partition_by": [[184, "polars-dataframe-partition-by"]], "polars.DataFrame.sample": [[196, "polars-dataframe-sample"]], "polars.DataFrame.hstack": [[162, "polars-dataframe-hstack"]], "polars.DataFrame.groupby_rolling": [[158, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.find_idx_by_name": [[150, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.frame_equal": [[152, "polars-dataframe-frame-equal"]], "polars.DataFrame.interpolate": [[164, "polars-dataframe-interpolate"]], "polars.DataFrame.n_unique": [[182, "polars-dataframe-n-unique"]], "polars.DataFrame.set_sorted": [[199, "polars-dataframe-set-sorted"]], "polars.DataFrame.n_chunks": [[181, "polars-dataframe-n-chunks"]], "polars.DataFrame.max": [[175, "polars-dataframe-max"]], "polars.DataFrame.sort": [[205, "polars-dataframe-sort"]], "polars.DataFrame.product": [[187, "polars-dataframe-product"]], "polars.DataFrame.fold": [[151, "polars-dataframe-fold"]], "polars.DataFrame.iter_slices": [[170, "polars-dataframe-iter-slices"]], "polars.DataFrame.sum": [[207, "polars-dataframe-sum"]], "polars.DataFrame.shrink_to_fit": [[203, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.groupby": [[156, "polars-dataframe-groupby"]], "polars.DataFrame.lazy": [[173, "polars-dataframe-lazy"]], "polars.DataFrame.merge_sorted": [[179, "polars-dataframe-merge-sorted"]], "polars.DataFrame.estimated_size": [[144, "polars-dataframe-estimated-size"]], "polars.DataFrame.std": [[206, "polars-dataframe-std"]], "polars.DataFrame.fill_null": [[148, "polars-dataframe-fill-null"]], "polars.DataFrame.glimpse": [[155, "polars-dataframe-glimpse"]], "polars.DataFrame.drop": [[140, "polars-dataframe-drop"]], "polars.DataFrame.explode": [[145, "polars-dataframe-explode"]], "polars.DataFrame.is_unique": [[167, "polars-dataframe-is-unique"]], "polars.DataFrame.schema": [[197, "polars-dataframe-schema"]], "polars.DataFrame.replace_at_idx": [[192, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.shift_and_fill": [[202, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.replace": [[191, "polars-dataframe-replace"]], "polars.DataFrame.pivot": [[186, "polars-dataframe-pivot"]], "polars.DataFrame.melt": [[178, "polars-dataframe-melt"]], "polars.DataFrame.hash_rows": [[159, "polars-dataframe-hash-rows"]], "polars.DataFrame.dtypes": [[143, "polars-dataframe-dtypes"]], "polars.DataFrame.row": [[194, "polars-dataframe-row"]], "polars.DataFrame.null_count": [[183, "polars-dataframe-null-count"]], "polars.DataFrame.select": [[198, "polars-dataframe-select"]], "polars.DataFrame.take_every": [[209, "polars-dataframe-take-every"]], "polars.DataFrame.rows": [[195, "polars-dataframe-rows"]], "polars.DataFrame.get_column": [[153, "polars-dataframe-get-column"]], "polars.DataFrame.filter": [[149, "polars-dataframe-filter"]], "polars.DataFrame.groupby_dynamic": [[157, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.height": [[161, "polars-dataframe-height"]], "polars.DataFrame.shift": [[201, "polars-dataframe-shift"]], "polars.DataFrame.extend": [[146, "polars-dataframe-extend"]], "polars.DataFrame.join_asof": [[172, "polars-dataframe-join-asof"]], "polars.DataFrame.limit": [[174, "polars-dataframe-limit"]], "polars.DataFrame.pipe": [[185, "polars-dataframe-pipe"]], "polars.DataFrame.median": [[177, "polars-dataframe-median"]], "polars.DataFrame.drop_in_place": [[141, "polars-dataframe-drop-in-place"]], "polars.DataFrame.shape": [[200, "polars-dataframe-shape"]], "polars.DataFrame.rename": [[190, "polars-dataframe-rename"]], "polars.Expr.arcsinh": [[271, "polars-expr-arcsinh"]], "polars.dataframe.groupby.GroupBy.count": [[235, "polars-dataframe-groupby-groupby-count"]], "Exceptions": [[256, "exceptions"]], "polars.DataFrame.unstack": [[223, "polars-dataframe-unstack"]], "polars.Expr.apply": [[266, "polars-expr-apply"]], "polars.dataframe.groupby.GroupBy.all": [[233, "polars-dataframe-groupby-groupby-all"]], "polars.dataframe.groupby.GroupBy.sum": [[245, "polars-dataframe-groupby-groupby-sum"]], "polars.Expr.arg_unique": [[278, "polars-expr-arg-unique"]], "polars.DataFrame.to_series": [[217, "polars-dataframe-to-series"]], "polars.DataFrame.to_arrow": [[210, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_dict": [[211, "polars-dataframe-to-dict"]], "polars.Expr.all": [[262, "polars-expr-all"]], "polars.Expr.arctan": [[272, "polars-expr-arctan"]], "polars.Expr.arr.arg_max": [[279, "polars-expr-arr-arg-max"]], "polars.DataFrame.width": [[228, "polars-dataframe-width"]], "polars.DataFrame.unnest": [[222, "polars-dataframe-unnest"]], "polars.DataFrame.update": [[224, "polars-dataframe-update"]], "polars.dataframe.groupby.GroupBy.apply": [[234, "polars-dataframe-groupby-groupby-apply"]], "polars.DataFrame.to_dicts": [[212, "polars-dataframe-to-dicts"]], "polars.dataframe.groupby.GroupBy.head": [[237, "polars-dataframe-groupby-groupby-head"]], "polars.dataframe.groupby.GroupBy.n_unique": [[243, "polars-dataframe-groupby-groupby-n-unique"]], "polars.dataframe.groupby.GroupBy.__iter__": [[231, "polars-dataframe-groupby-groupby-iter"]], "polars.DataFrame.var": [[226, "polars-dataframe-var"]], "polars.Expr.approx_unique": [[267, "polars-expr-approx-unique"]], "polars.DataFrame.transpose": [[220, "polars-dataframe-transpose"]], "polars.Expr.abs": [[258, "polars-expr-abs"]], "polars.dataframe.groupby.GroupBy.median": [[241, "polars-dataframe-groupby-groupby-median"]], "polars.Expr.alias": [[261, "polars-expr-alias"]], "polars.dataframe.groupby.GroupBy.last": [[238, "polars-dataframe-groupby-groupby-last"]], "polars.DataFrame.to_init_repr": [[214, "polars-dataframe-to-init-repr"]], "polars.Expr.arg_max": [[274, "polars-expr-arg-max"]], "polars.dataframe.groupby.GroupBy.tail": [[246, "polars-dataframe-groupby-groupby-tail"]], "polars.DataFrame.upsample": [[225, "polars-dataframe-upsample"]], "polars.Expr.arg_sort": [[276, "polars-expr-arg-sort"]], "polars.DataFrame.to_pandas": [[216, "polars-dataframe-to-pandas"]], "polars.DataFrame.top_k": [[219, "polars-dataframe-top-k"]], "polars.Expr.arccosh": [[269, "polars-expr-arccosh"]], "polars.Expr.add": [[259, "polars-expr-add"]], "polars.DataFrame.with_row_count": [[230, "polars-dataframe-with-row-count"]], "polars.Expr.any": [[264, "polars-expr-any"]], "polars.Expr.arccos": [[268, "polars-expr-arccos"]], "polars.Expr.arcsin": [[270, "polars-expr-arcsin"]], "polars.dataframe.groupby.GroupBy.first": [[236, "polars-dataframe-groupby-groupby-first"]], "polars.DataFrame.to_numpy": [[215, "polars-dataframe-to-numpy"]], "polars.DataFrame.vstack": [[227, "polars-dataframe-vstack"]], "polars.dataframe.groupby.GroupBy.quantile": [[244, "polars-dataframe-groupby-groupby-quantile"]], "polars.Expr.append": [[265, "polars-expr-append"]], "polars.dataframe.groupby.GroupBy.max": [[239, "polars-dataframe-groupby-groupby-max"]], "polars.DataFrame.unique": [[221, "polars-dataframe-unique"]], "polars.Expr.arg_min": [[275, "polars-expr-arg-min"]], "polars.Expr.and_": [[263, "polars-expr-and"]], "polars.DataFrame.with_columns": [[229, "polars-dataframe-with-columns"]], "Data types": [[255, "data-types"]], "Nested": [[255, "nested"]], "Other": [[255, "other"]], "polars.DataFrame.to_struct": [[218, "polars-dataframe-to-struct"]], "polars.dataframe.groupby.GroupBy.agg": [[232, "polars-dataframe-groupby-groupby-agg"]], "DataFrame": [[252, "dataframe"]], "polars.dataframe.groupby.GroupBy.mean": [[240, "polars-dataframe-groupby-groupby-mean"]], "polars.Expr.agg_groups": [[260, "polars-expr-agg-groups"]], "polars.Expr.arctanh": [[273, "polars-expr-arctanh"]], "polars.Expr.arg_true": [[277, "polars-expr-arg-true"]], "polars.DataFrame.to_dummies": [[213, "polars-dataframe-to-dummies"]], "polars.dataframe.groupby.GroupBy.min": [[242, "polars-dataframe-groupby-groupby-min"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[5, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[6, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[7, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[8, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[9, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[10, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[11, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[12, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[13, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[14, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[15, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[16, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[17, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[22, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[23, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[24, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[25, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[26, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[27, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[28, "polars.DataFrame.write_database"]], "write_excel() (polars.dataframe method)": [[29, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[30, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[31, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[32, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[33, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[34, "polars.DataType"]], "__init__() (polars.datatype method)": [[34, "polars.DataType.__init__"]], "date (class in polars)": [[35, "polars.Date"]], "__init__() (polars.date method)": [[35, "polars.Date.__init__"]], "datetime (class in polars)": [[36, "polars.Datetime"]], "__init__() (polars.datetime method)": [[36, "polars.Datetime.__init__"]], "decimal (class in polars)": [[37, "polars.Decimal"]], "__init__() (polars.decimal method)": [[37, "polars.Decimal.__init__"]], "duration (class in polars)": [[38, "polars.Duration"]], "__init__() (polars.duration method)": [[38, "polars.Duration.__init__"]], "float32 (class in polars)": [[39, "polars.Float32"]], "__init__() (polars.float32 method)": [[39, "polars.Float32.__init__"]], "float64 (class in polars)": [[40, "polars.Float64"]], "__init__() (polars.float64 method)": [[40, "polars.Float64.__init__"]], "int16 (class in polars)": [[41, "polars.Int16"]], "__init__() (polars.int16 method)": [[41, "polars.Int16.__init__"]], "int32 (class in polars)": [[42, "polars.Int32"]], "__init__() (polars.int32 method)": [[42, "polars.Int32.__init__"]], "int64 (class in polars)": [[43, "polars.Int64"]], "__init__() (polars.int64 method)": [[43, "polars.Int64.__init__"]], "int8 (class in polars)": [[44, "polars.Int8"]], "__init__() (polars.int8 method)": [[44, "polars.Int8.__init__"]], "list (class in polars)": [[45, "polars.List"]], "__init__() (polars.list method)": [[45, "polars.List.__init__"]], "null (class in polars)": [[46, "polars.Null"]], "__init__() (polars.null method)": [[46, "polars.Null.__init__"]], "object (class in polars)": [[47, "polars.Object"]], "__init__() (polars.object method)": [[47, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[48, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[49, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[50, "polars.SQLContext.register"]], "register_many() (polars.sqlcontext method)": [[51, "polars.SQLContext.register_many"]], "unregister() (polars.sqlcontext method)": [[52, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[53, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[53, "polars.StringCache.__init__"]], "struct (class in polars)": [[54, "polars.Struct"]], "__init__() (polars.struct method)": [[54, "polars.Struct.__init__"]], "time (class in polars)": [[55, "polars.Time"]], "__init__() (polars.time method)": [[55, "polars.Time.__init__"]], "uint16 (class in polars)": [[56, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[56, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[57, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[57, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[58, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[58, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[59, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[59, "polars.UInt8.__init__"]], "unknown (class in polars)": [[60, "polars.Unknown"]], "__init__() (polars.unknown method)": [[60, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[61, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[61, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[62, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[63, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[64, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[65, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[66, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[67, "polars.arg_where"]], "build_info() (in module polars)": [[68, "polars.build_info"]], "collect_all() (in module polars)": [[69, "polars.collect_all"]], "concat() (in module polars)": [[70, "polars.concat"]], "cut() (in module polars)": [[71, "polars.cut"]], "date_range() (in module polars)": [[72, "polars.date_range"]], "enable_string_cache() (in module polars)": [[73, "polars.enable_string_cache"]], "arrowerror": [[74, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[75, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[76, "polars.exceptions.ComputeError"]], "duplicateerror": [[77, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[78, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[79, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[80, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[81, "polars.exceptions.PolarsPanicError"]], "rowserror": [[82, "polars.exceptions.RowsError"]], "schemaerror": [[83, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[84, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[85, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[86, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[87, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[88, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[89, "polars.from_dataframe"]], "from_dict() (in module polars)": [[90, "polars.from_dict"]], "from_dicts() (in module polars)": [[91, "polars.from_dicts"]], "from_numpy() (in module polars)": [[92, "polars.from_numpy"]], "from_pandas() (in module polars)": [[93, "polars.from_pandas"]], "from_records() (in module polars)": [[94, "polars.from_records"]], "from_repr() (in module polars)": [[95, "polars.from_repr"]], "get_dummies() (in module polars)": [[96, "polars.get_dummies"]], "get_index_type() (in module polars)": [[97, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[98, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[99, "polars.ones"]], "read_avro() (in module polars)": [[100, "polars.read_avro"]], "read_csv() (in module polars)": [[101, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[102, "polars.read_csv_batched"]], "read_database() (in module polars)": [[103, "polars.read_database"]], "read_delta() (in module polars)": [[104, "polars.read_delta"]], "read_excel() (in module polars)": [[105, "polars.read_excel"]], "read_ipc() (in module polars)": [[106, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[107, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[108, "polars.read_json"]], "read_ndjson() (in module polars)": [[109, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[110, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[111, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[112, "polars.scan_csv"]], "scan_delta() (in module polars)": [[113, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[114, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[115, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[116, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[117, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[118, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[119, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[120, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[121, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[121, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[122, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[123, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[124, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[125, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[126, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[127, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[128, "polars.threadpool_size"]], "zeros() (in module polars)": [[129, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[132, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[133, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[134, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[135, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[136, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[137, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[138, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[139, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[140, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[141, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[142, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[143, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[144, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[145, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[146, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[147, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[148, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[149, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[150, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[151, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[152, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[153, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[154, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[155, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[156, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[157, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[158, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[159, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[160, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[161, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[162, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[163, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[164, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[165, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[166, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[167, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[168, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[169, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[170, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[171, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[172, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[173, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[174, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[175, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[176, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[177, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[178, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[179, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[180, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[181, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[182, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[183, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[184, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[185, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[186, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[187, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[188, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[189, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[190, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[191, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[192, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[193, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[194, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[195, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[196, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[197, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[198, "polars.DataFrame.select"]], "set_sorted() (polars.dataframe method)": [[199, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[200, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[201, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[202, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[203, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[204, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[205, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[206, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[207, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[208, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[209, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[210, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[211, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[212, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[213, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[214, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[215, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[216, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[217, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[218, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[219, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[220, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[221, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[222, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[223, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[224, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[225, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[226, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[227, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[228, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[229, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[230, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[231, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[232, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[241, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[242, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[243, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[244, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[245, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[246, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[258, "polars.Expr.abs"]], "add() (polars.expr method)": [[259, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[260, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[261, "polars.Expr.alias"]], "all() (polars.expr method)": [[262, "polars.Expr.all"]], "and_() (polars.expr method)": [[263, "polars.Expr.and_"]], "any() (polars.expr method)": [[264, "polars.Expr.any"]], "append() (polars.expr method)": [[265, "polars.Expr.append"]], "apply() (polars.expr method)": [[266, "polars.Expr.apply"]], "approx_unique() (polars.expr method)": [[267, "polars.Expr.approx_unique"]], "arccos() (polars.expr method)": [[268, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[269, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[270, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[271, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[272, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[273, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[274, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[275, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[276, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[277, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[278, "polars.Expr.arg_unique"]], "arg_max() (polars.expr.arr method)": [[279, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[280, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[281, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[282, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[283, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[284, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[285, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[286, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[287, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[288, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[289, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[290, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[291, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[292, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[293, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[294, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[295, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[296, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[297, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[298, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[299, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[300, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[301, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[302, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[303, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[304, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[305, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[306, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[307, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[308, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[309, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[310, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[311, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[312, "polars.Expr.cache"]], "cast() (polars.expr method)": [[313, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[314, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[315, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[316, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[317, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[318, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[319, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[320, "polars.Expr.cosh"]], "count() (polars.expr method)": [[321, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[322, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[323, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[324, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[325, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[326, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[327, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[328, "polars.Expr.diff"]], "dot() (polars.expr method)": [[329, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[330, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[331, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[332, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[333, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[334, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[335, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[336, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[337, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[338, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[339, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[340, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[341, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[342, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[343, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[344, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[345, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[346, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[347, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[348, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[349, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[350, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[351, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[352, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[353, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[354, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[355, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[356, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[357, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[358, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[359, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[360, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[361, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[362, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[363, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[364, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[365, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[366, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[367, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[368, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[369, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[370, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[371, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[372, "polars.Expr.eq"]], "ewm_mean() (polars.expr method)": [[373, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[374, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[375, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[376, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[377, "polars.Expr.exp"]], "explode() (polars.expr method)": [[378, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[379, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[380, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[381, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[382, "polars.Expr.filter"]], "first() (polars.expr method)": [[383, "polars.Expr.first"]], "flatten() (polars.expr method)": [[384, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[385, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[386, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[387, "polars.Expr.forward_fill"]], "ge() (polars.expr method)": [[388, "polars.Expr.ge"]], "gt() (polars.expr method)": [[389, "polars.Expr.gt"]], "hash() (polars.expr method)": [[390, "polars.Expr.hash"]], "head() (polars.expr method)": [[391, "polars.Expr.head"]], "implode() (polars.expr method)": [[392, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[393, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[394, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[395, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[396, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[397, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[398, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[399, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[400, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[401, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[402, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[403, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[404, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[405, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[406, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[407, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[408, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[409, "polars.Expr.last"]], "le() (polars.expr method)": [[410, "polars.Expr.le"]], "len() (polars.expr method)": [[411, "polars.Expr.len"]], "limit() (polars.expr method)": [[412, "polars.Expr.limit"]], "log() (polars.expr method)": [[413, "polars.Expr.log"]], "log10() (polars.expr method)": [[414, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[415, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[416, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[417, "polars.Expr.lt"]], "map() (polars.expr method)": [[418, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[419, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[420, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[421, "polars.Expr.max"]], "mean() (polars.expr method)": [[422, "polars.Expr.mean"]], "median() (polars.expr method)": [[423, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[424, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[425, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[426, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[427, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[428, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[429, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[430, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[431, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[432, "polars.Expr.min"]], "mod() (polars.expr method)": [[433, "polars.Expr.mod"]], "mode() (polars.expr method)": [[434, "polars.Expr.mode"]], "mul() (polars.expr method)": [[435, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[436, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[437, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[438, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[439, "polars.Expr.ne"]], "null_count() (polars.expr method)": [[440, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[441, "polars.Expr.or_"]], "over() (polars.expr method)": [[442, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[443, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[444, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[445, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[446, "polars.Expr.prefix"]], "product() (polars.expr method)": [[447, "polars.Expr.product"]], "quantile() (polars.expr method)": [[448, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[449, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[450, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[451, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[452, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[453, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[454, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[455, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[456, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[457, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[458, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[459, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[460, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[461, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[462, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[463, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[464, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[465, "polars.Expr.round"]], "sample() (polars.expr method)": [[466, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[467, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[468, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[469, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[470, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[471, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[472, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[473, "polars.Expr.sign"]], "sin() (polars.expr method)": [[474, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[475, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[476, "polars.Expr.skew"]], "slice() (polars.expr method)": [[477, "polars.Expr.slice"]], "sort() (polars.expr method)": [[478, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[479, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[480, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[481, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[482, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[483, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[484, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[485, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[486, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[487, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[488, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[489, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[490, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[491, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[492, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[493, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[494, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[495, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[496, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[497, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[498, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[499, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[500, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[501, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[502, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[503, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[504, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[505, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[506, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[507, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[508, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[509, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[510, "polars.Expr.str.to_datetime"]], "to_lowercase() (polars.expr.str method)": [[511, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[512, "polars.Expr.str.to_time"]], "to_uppercase() (polars.expr.str method)": [[513, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[514, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[515, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[516, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[517, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[518, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[519, "polars.Expr.sum"]], "tail() (polars.expr method)": [[520, "polars.Expr.tail"]], "take() (polars.expr method)": [[521, "polars.Expr.take"]], "take_every() (polars.expr method)": [[522, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[523, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[524, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[525, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[526, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[527, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[528, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[529, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[530, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[531, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[532, "polars.Expr.var"]], "where() (polars.expr method)": [[533, "polars.Expr.where"]], "xor() (polars.expr method)": [[534, "polars.Expr.xor"]], "all() (in module polars)": [[535, "polars.all"]], "any() (in module polars)": [[536, "polars.any"]], "apply() (in module polars)": [[537, "polars.apply"]], "approx_unique() (in module polars)": [[538, "polars.approx_unique"]], "arange() (in module polars)": [[539, "polars.arange"]], "arg_sort_by() (in module polars)": [[540, "polars.arg_sort_by"]], "avg() (in module polars)": [[541, "polars.avg"]], "coalesce() (in module polars)": [[542, "polars.coalesce"]], "col() (in module polars)": [[543, "polars.col"]], "concat_list() (in module polars)": [[544, "polars.concat_list"]], "concat_str() (in module polars)": [[545, "polars.concat_str"]], "corr() (in module polars)": [[546, "polars.corr"]], "count() (in module polars)": [[547, "polars.count"]], "cov() (in module polars)": [[548, "polars.cov"]], "cumfold() (in module polars)": [[549, "polars.cumfold"]], "cumreduce() (in module polars)": [[550, "polars.cumreduce"]], "cumsum() (in module polars)": [[551, "polars.cumsum"]], "date() (in module polars)": [[552, "polars.date"]], "datetime() (in module polars)": [[553, "polars.datetime"]], "duration() (in module polars)": [[554, "polars.duration"]], "element() (in module polars)": [[555, "polars.element"]], "exclude() (in module polars)": [[556, "polars.exclude"]], "first() (in module polars)": [[557, "polars.first"]], "fold() (in module polars)": [[558, "polars.fold"]], "format() (in module polars)": [[559, "polars.format"]], "from_epoch() (in module polars)": [[560, "polars.from_epoch"]], "groups() (in module polars)": [[561, "polars.groups"]], "head() (in module polars)": [[562, "polars.head"]], "list() (in module polars)": [[563, "polars.list"]], "lit() (in module polars)": [[564, "polars.lit"]], "map() (in module polars)": [[565, "polars.map"]], "max() (in module polars)": [[566, "polars.max"]], "mean() (in module polars)": [[567, "polars.mean"]], "median() (in module polars)": [[568, "polars.median"]], "min() (in module polars)": [[569, "polars.min"]], "n_unique() (in module polars)": [[570, "polars.n_unique"]], "pearson_corr() (in module polars)": [[571, "polars.pearson_corr"]], "quantile() (in module polars)": [[572, "polars.quantile"]], "reduce() (in module polars)": [[573, "polars.reduce"]], "repeat() (in module polars)": [[574, "polars.repeat"]], "rolling_corr() (in module polars)": [[575, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[576, "polars.rolling_cov"]], "select() (in module polars)": [[577, "polars.select"]], "spearman_rank_corr() (in module polars)": [[578, "polars.spearman_rank_corr"]], "std() (in module polars)": [[579, "polars.std"]], "struct() (in module polars)": [[580, "polars.struct"]], "sum() (in module polars)": [[581, "polars.sum"]], "tail() (in module polars)": [[582, "polars.tail"]], "var() (in module polars)": [[583, "polars.var"]], "when() (in module polars)": [[584, "polars.when"]], "bottom_k() (polars.lazyframe method)": [[605, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[606, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[607, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[608, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[609, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[610, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[611, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[612, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[613, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[614, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[615, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[616, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[617, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[618, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[619, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[620, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[621, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[622, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[623, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[624, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[625, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[626, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[627, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[628, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[629, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[630, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[631, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[632, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[633, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[634, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[635, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[636, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[637, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[638, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[639, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[640, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[641, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[642, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[643, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[644, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[645, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[646, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[647, "polars.LazyFrame.select"]], "set_sorted() (polars.lazyframe method)": [[648, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[649, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[650, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[651, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[652, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[653, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[654, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[655, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[656, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[657, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[658, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[659, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[660, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[661, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[662, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[663, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[664, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[665, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[666, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[667, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[668, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[669, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[670, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[671, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[672, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[673, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[674, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[675, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[676, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[677, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[678, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[679, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[680, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[681, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[682, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[683, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[684, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[692, "polars.Series.abs"]], "alias() (polars.series method)": [[693, "polars.Series.alias"]], "all() (polars.series method)": [[694, "polars.Series.all"]], "any() (polars.series method)": [[695, "polars.Series.any"]], "append() (polars.series method)": [[696, "polars.Series.append"]], "apply() (polars.series method)": [[697, "polars.Series.apply"]], "arccos() (polars.series method)": [[698, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[699, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[700, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[701, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[702, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[703, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[704, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[705, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[706, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[707, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[708, "polars.Series.arg_unique"]], "arr (polars.series attribute)": [[709, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[710, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[711, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[712, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[713, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[714, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[715, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[716, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[717, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[718, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[719, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[720, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[721, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[722, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[723, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[724, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[725, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[726, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[727, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[728, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[729, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[730, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[731, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[732, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[733, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[734, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[735, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[736, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[737, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[738, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[739, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[740, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[741, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[742, "polars.Series.cast"]], "cat (polars.series attribute)": [[743, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[744, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[745, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[746, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[747, "polars.Series.clear"]], "clip() (polars.series method)": [[748, "polars.Series.clip"]], "clip_max() (polars.series method)": [[749, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[750, "polars.Series.clip_min"]], "clone() (polars.series method)": [[751, "polars.Series.clone"]], "cos() (polars.series method)": [[752, "polars.Series.cos"]], "cosh() (polars.series method)": [[753, "polars.Series.cosh"]], "cummax() (polars.series method)": [[754, "polars.Series.cummax"]], "cummin() (polars.series method)": [[755, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[756, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[757, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[758, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[759, "polars.Series.cut"]], "describe() (polars.series method)": [[760, "polars.Series.describe"]], "diff() (polars.series method)": [[761, "polars.Series.diff"]], "dot() (polars.series method)": [[762, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[763, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[764, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[765, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[766, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[767, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[768, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[769, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[770, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[771, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[772, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[773, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[774, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[775, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[776, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[777, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[778, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[779, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[780, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[781, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[782, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[783, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[784, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[785, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[786, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[787, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[788, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[789, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[790, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[791, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[792, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[793, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[794, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[795, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[796, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[797, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[798, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[799, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[800, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[801, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[802, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[803, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[804, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[805, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[806, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[807, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[808, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[809, "polars.Series.dtype"]], "entropy() (polars.series method)": [[810, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[811, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[812, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[813, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[814, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[815, "polars.Series.exp"]], "explode() (polars.series method)": [[816, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[817, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[818, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[819, "polars.Series.fill_null"]], "filter() (polars.series method)": [[820, "polars.Series.filter"]], "flags (polars.series attribute)": [[821, "polars.Series.flags"]], "floor() (polars.series method)": [[822, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[823, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[824, "polars.Series.has_validity"]], "hash() (polars.series method)": [[825, "polars.Series.hash"]], "head() (polars.series method)": [[826, "polars.Series.head"]], "hist() (polars.series method)": [[827, "polars.Series.hist"]], "implode() (polars.series method)": [[828, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[829, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[830, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[831, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[832, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[833, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[834, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[835, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[836, "polars.Series.is_first"]], "is_float() (polars.series method)": [[837, "polars.Series.is_float"]], "is_in() (polars.series method)": [[838, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[839, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[840, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[841, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[842, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[843, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[844, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[845, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[846, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[847, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[848, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[849, "polars.Series.is_utf8"]], "item() (polars.series method)": [[850, "polars.Series.item"]], "kurtosis() (polars.series method)": [[851, "polars.Series.kurtosis"]], "len() (polars.series method)": [[852, "polars.Series.len"]], "limit() (polars.series method)": [[853, "polars.Series.limit"]], "log() (polars.series method)": [[854, "polars.Series.log"]], "log10() (polars.series method)": [[855, "polars.Series.log10"]], "log1p() (polars.series method)": [[856, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[857, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[858, "polars.Series.map_dict"]], "max() (polars.series method)": [[859, "polars.Series.max"]], "mean() (polars.series method)": [[860, "polars.Series.mean"]], "median() (polars.series method)": [[861, "polars.Series.median"]], "min() (polars.series method)": [[862, "polars.Series.min"]], "mode() (polars.series method)": [[863, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[864, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[865, "polars.Series.n_unique"]], "name (polars.series attribute)": [[866, "polars.Series.name"]], "nan_max() (polars.series method)": [[867, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[868, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[869, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[870, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[871, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[872, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[873, "polars.Series.peak_min"]], "product() (polars.series method)": [[874, "polars.Series.product"]], "qcut() (polars.series method)": [[875, "polars.Series.qcut"]], "quantile() (polars.series method)": [[876, "polars.Series.quantile"]], "rank() (polars.series method)": [[877, "polars.Series.rank"]], "rechunk() (polars.series method)": [[878, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[879, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[880, "polars.Series.rename"]], "reshape() (polars.series method)": [[881, "polars.Series.reshape"]], "reverse() (polars.series method)": [[882, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[883, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[884, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[885, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[886, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[887, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[888, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[889, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[890, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[891, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[892, "polars.Series.rolling_var"]], "round() (polars.series method)": [[893, "polars.Series.round"]], "sample() (polars.series method)": [[894, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[895, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[896, "polars.Series.series_equal"]], "set() (polars.series method)": [[897, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[898, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[899, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[900, "polars.Series.shape"]], "shift() (polars.series method)": [[901, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[902, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[903, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[904, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[905, "polars.Series.shuffle"]], "sign() (polars.series method)": [[906, "polars.Series.sign"]], "sin() (polars.series method)": [[907, "polars.Series.sin"]], "sinh() (polars.series method)": [[908, "polars.Series.sinh"]], "skew() (polars.series method)": [[909, "polars.Series.skew"]], "slice() (polars.series method)": [[910, "polars.Series.slice"]], "sort() (polars.series method)": [[911, "polars.Series.sort"]], "sqrt() (polars.series method)": [[912, "polars.Series.sqrt"]], "std() (polars.series method)": [[913, "polars.Series.std"]], "str (polars.series attribute)": [[914, "polars.Series.str"]], "concat() (polars.series.str method)": [[915, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[916, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[917, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[918, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[919, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[920, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[921, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[922, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[923, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[924, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[925, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[926, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[927, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[928, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[929, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[930, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[931, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[932, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[933, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[934, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[935, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[936, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[937, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[938, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[939, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[940, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[941, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[942, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[943, "polars.Series.str.to_datetime"]], "to_lowercase() (polars.series.str method)": [[944, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[945, "polars.Series.str.to_time"]], "to_uppercase() (polars.series.str method)": [[946, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[947, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[948, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[949, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[950, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[951, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[952, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[953, "polars.Series.sum"]], "tail() (polars.series method)": [[954, "polars.Series.tail"]], "take() (polars.series method)": [[955, "polars.Series.take"]], "take_every() (polars.series method)": [[956, "polars.Series.take_every"]], "tan() (polars.series method)": [[957, "polars.Series.tan"]], "tanh() (polars.series method)": [[958, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[959, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[960, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[961, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[962, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[963, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[964, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[965, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[966, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[967, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[968, "polars.Series.top_k"]], "unique() (polars.series method)": [[969, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[970, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[971, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[972, "polars.Series.value_counts"]], "var() (polars.series method)": [[973, "polars.Series.var"]], "view() (polars.series method)": [[974, "polars.Series.view"]], "zip_with() (polars.series method)": [[975, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[990, "polars.SQLContext"]]}})