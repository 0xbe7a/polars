Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.get_idx_type", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_match", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/strings", "reference/expressions/struct", "reference/expressions/timeseries", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_match", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/strings", "reference/series/struct", "reference/series/timeseries", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_idx_type.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_match.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/strings.rst", "reference/expressions/struct.rst", "reference/expressions/timeseries.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_match.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/strings.rst", "reference/series/struct.rst", "reference/series/timeseries.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.get_idx_type", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.internals.dataframe.groupby.GroupBy.__iter__", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.all", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.count_match", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "Meta", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.all", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.count", "polars.internals.lazyframe.groupby.LazyGroupBy.first", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.last", "polars.internals.lazyframe.groupby.LazyGroupBy.max", "polars.internals.lazyframe.groupby.LazyGroupBy.mean", "polars.internals.lazyframe.groupby.LazyGroupBy.median", "polars.internals.lazyframe.groupby.LazyGroupBy.min", "polars.internals.lazyframe.groupby.LazyGroupBy.n_unique", "polars.internals.lazyframe.groupby.LazyGroupBy.quantile", "polars.internals.lazyframe.groupby.LazyGroupBy.sum", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.count_match", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 83, 92, 110, 120, 123, 124, 221, 239, 251, 545, 621], "refer": [0, 27, 94, 95, 98, 128, 239, 411, 470, 545, 814, 878, 916], "input": [0, 57, 85, 94, 95, 98, 135, 146, 174, 188, 194, 216, 219, 239, 351, 385, 396, 405, 441, 493, 495, 497, 498, 500, 511, 512, 520, 521, 524, 533, 545, 554, 566, 573, 598, 605, 615, 619, 637, 794, 916], "output": [0, 25, 27, 29, 30, 67, 98, 114, 124, 147, 148, 159, 169, 176, 185, 188, 212, 216, 239, 247, 251, 387, 388, 395, 488, 493, 501, 520, 531, 545, 554, 574, 575, 584, 589, 598, 615, 618, 621, 637, 646, 904, 916], "seri": [0, 1, 20, 48, 58, 59, 60, 61, 62, 65, 66, 67, 82, 84, 87, 92, 113, 114, 116, 120, 124, 131, 139, 141, 143, 144, 149, 152, 153, 155, 157, 165, 166, 170, 181, 182, 196, 200, 205, 206, 220, 239, 250, 251, 252, 253, 254, 255, 256, 257, 260, 261, 263, 264, 265, 266, 271, 274, 275, 282, 283, 286, 287, 288, 291, 297, 298, 302, 303, 315, 317, 319, 322, 325, 327, 329, 332, 336, 337, 339, 342, 345, 353, 354, 360, 364, 366, 368, 369, 370, 371, 372, 374, 375, 376, 386, 387, 407, 411, 412, 413, 414, 415, 417, 429, 430, 433, 436, 437, 444, 459, 464, 470, 474, 479, 480, 481, 482, 487, 493, 494, 496, 499, 502, 504, 505, 506, 512, 513, 515, 517, 519, 520, 521, 522, 523, 524, 525, 528, 529, 530, 532, 533, 534, 535, 536, 537, 545, 554, 570, 615, 620, 637, 908, 910, 912, 915, 919, 920, 921], "datafram": [0, 1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 46, 48, 57, 58, 59, 60, 61, 62, 64, 65, 66, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 107, 108, 109, 112, 114, 115, 237, 238, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 284, 285, 288, 289, 290, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 545, 554, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 637, 645, 666, 684, 693, 708, 709, 859, 862, 874, 875, 885, 894, 895, 904, 916], "lazyfram": [0, 1, 45, 47, 57, 58, 59, 60, 61, 64, 65, 105, 106, 107, 108, 109, 110, 112, 116, 163, 175, 239, 288, 357, 545, 554, 636, 922], "express": [0, 62, 64, 67, 114, 116, 117, 124, 135, 137, 139, 146, 172, 176, 184, 188, 194, 216, 219, 221, 239, 247, 248, 250, 251, 261, 268, 270, 288, 299, 300, 301, 304, 310, 312, 316, 333, 351, 354, 357, 364, 366, 370, 373, 378, 381, 386, 387, 388, 389, 393, 394, 395, 396, 405, 407, 408, 409, 414, 428, 429, 430, 432, 434, 439, 441, 445, 453, 454, 470, 476, 479, 485, 487, 490, 494, 495, 497, 498, 500, 501, 503, 504, 505, 506, 510, 511, 512, 513, 514, 515, 519, 520, 521, 524, 526, 528, 529, 530, 531, 533, 534, 537, 544, 554, 560, 565, 566, 567, 570, 573, 592, 598, 600, 601, 602, 603, 605, 615, 616, 619, 621, 637, 664, 666, 697, 698, 699, 707, 716, 737, 759, 771, 832, 839, 853, 861, 862, 916], "extend": [0, 85, 239, 354, 545, 554, 645, 759, 916], "function": [0, 27, 58, 59, 60, 61, 66, 83, 94, 95, 98, 105, 115, 124, 128, 134, 141, 168, 175, 176, 204, 207, 210, 211, 221, 239, 248, 251, 288, 310, 337, 348, 349, 350, 387, 388, 389, 405, 417, 418, 419, 420, 421, 422, 424, 425, 426, 438, 483, 491, 493, 504, 505, 512, 513, 515, 520, 528, 545, 554, 584, 588, 591, 612, 621, 637, 646, 684, 707, 708, 741, 753, 754, 755, 756, 820, 834, 835, 841, 846, 898, 916], "data": [0, 1, 13, 16, 26, 27, 32, 48, 57, 58, 60, 65, 72, 73, 77, 79, 82, 83, 84, 85, 86, 87, 88, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 112, 113, 115, 116, 117, 123, 125, 126, 136, 145, 146, 147, 159, 160, 161, 163, 174, 175, 179, 184, 185, 192, 199, 203, 204, 216, 218, 237, 239, 296, 315, 338, 345, 365, 372, 374, 411, 427, 428, 438, 470, 483, 485, 498, 531, 545, 554, 558, 559, 567, 573, 574, 591, 602, 603, 615, 637, 645, 691, 696, 700, 713, 715, 749, 814, 830, 831, 841, 846, 878, 896, 897, 898, 899, 901, 906, 915, 916], "type": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 67, 72, 82, 84, 85, 86, 87, 88, 92, 94, 95, 97, 98, 105, 106, 111, 112, 113, 116, 119, 120, 124, 141, 145, 147, 148, 149, 160, 199, 203, 204, 206, 208, 239, 251, 275, 288, 296, 297, 299, 300, 301, 317, 319, 322, 325, 327, 329, 332, 336, 339, 351, 362, 368, 370, 371, 389, 414, 465, 466, 467, 470, 483, 493, 498, 507, 508, 509, 511, 512, 519, 545, 554, 560, 565, 567, 574, 575, 592, 601, 602, 603, 610, 637, 671, 684, 691, 693, 697, 698, 699, 717, 719, 722, 728, 730, 733, 736, 740, 743, 767, 841, 873, 874, 875, 896, 897, 899, 907, 916], "config": [0, 57, 188, 216, 239, 554, 598, 615, 637], "except": [0, 150, 162, 197, 239, 511, 554, 580, 637, 897, 906, 916], "test": [0, 98, 554, 576, 583, 637], "util": [0, 515, 554, 567, 637], "sql": [0, 26, 45, 96, 161, 239, 554], "These": [1, 27, 121, 239, 342, 544, 746], "allow": [1, 27, 48, 72, 83, 105, 107, 108, 109, 110, 116, 117, 123, 159, 162, 163, 184, 185, 186, 204, 218, 239, 333, 413, 428, 470, 545, 579, 580, 584, 602, 603, 616, 637, 737, 816, 831, 833, 878, 898, 916], "you": [1, 27, 31, 57, 82, 84, 85, 86, 88, 92, 94, 95, 98, 99, 103, 105, 112, 120, 124, 132, 136, 159, 162, 172, 184, 185, 201, 203, 207, 221, 239, 251, 270, 299, 300, 301, 357, 366, 387, 389, 413, 418, 419, 420, 421, 422, 424, 425, 426, 455, 458, 470, 494, 504, 513, 545, 560, 563, 576, 580, 583, 601, 603, 621, 637, 645, 666, 697, 698, 699, 771, 816, 863, 866, 878, 897, 906, 916], "regist": [1, 58, 59, 60, 61], "custom": [1, 27, 58, 59, 60, 61, 124, 221, 239, 251, 288, 387, 417, 493, 520, 545, 584, 621, 637, 646, 684, 820, 916], "dedic": [1, 83, 159, 185, 239], "namespac": [1, 238, 544, 554, 636], "underli": [1, 68, 75, 82, 84, 85, 86, 88, 103, 116, 117, 136, 159, 160, 185, 199, 239, 292, 315, 316, 318, 321, 323, 324, 326, 328, 330, 331, 334, 335, 336, 338, 343, 344, 345, 346, 413, 427, 445, 447, 545, 637, 645, 687, 715, 716, 718, 721, 723, 727, 729, 732, 734, 735, 738, 739, 740, 742, 747, 748, 749, 750, 816, 830, 841, 853, 855, 893, 897, 916], "polar": [1, 239, 544, 545, 554, 637, 916, 922, 923], "class": [1, 2, 3, 4, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 87, 114, 115, 203, 204, 239, 545, 554, 637, 896, 897, 916, 922], "without": [1, 66, 97, 100, 104, 106, 110, 210, 211, 239, 251, 310, 337, 389, 418, 419, 420, 421, 422, 424, 425, 426, 530, 545, 612, 637, 707, 708, 713, 741, 916], "requir": [1, 27, 31, 87, 112, 113, 128, 184, 204, 239, 348, 349, 350, 433, 470, 485, 545, 603, 637, 754, 755, 756, 840, 878, 897, 898, 901, 916], "subclass": [1, 239], "mixin": 1, "expr": [1, 57, 58, 59, 60, 61, 62, 65, 67, 135, 137, 139, 161, 162, 172, 176, 184, 188, 216, 239, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 545, 546, 549, 550, 551, 566, 568, 570, 579, 580, 593, 598, 600, 615, 637, 664, 666, 707, 716, 760, 771, 839, 853, 857, 876, 888, 916], "ar": [1, 9, 15, 27, 31, 48, 67, 74, 81, 82, 83, 84, 85, 86, 87, 88, 94, 95, 96, 97, 98, 99, 103, 105, 106, 107, 108, 110, 112, 113, 115, 116, 119, 121, 123, 124, 128, 132, 134, 137, 141, 146, 147, 148, 159, 162, 163, 168, 169, 174, 184, 185, 188, 194, 200, 204, 211, 212, 216, 219, 239, 248, 288, 306, 308, 309, 313, 314, 337, 342, 347, 348, 349, 350, 366, 368, 370, 371, 372, 374, 375, 376, 379, 389, 405, 411, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 435, 438, 440, 441, 455, 458, 459, 477, 494, 495, 497, 500, 501, 531, 533, 538, 539, 541, 544, 545, 546, 549, 550, 551, 554, 563, 568, 573, 574, 575, 576, 580, 583, 584, 588, 589, 592, 595, 598, 602, 603, 605, 612, 615, 616, 619, 637, 643, 645, 684, 705, 706, 741, 746, 752, 753, 754, 755, 756, 766, 771, 775, 778, 779, 780, 781, 782, 783, 790, 814, 818, 820, 826, 843, 846, 863, 866, 867, 886, 897, 898, 906, 908, 910, 912, 916, 919, 920, 921], "all": [1, 6, 12, 15, 20, 23, 27, 32, 64, 65, 67, 82, 85, 87, 88, 89, 94, 95, 97, 98, 99, 103, 105, 107, 108, 114, 115, 117, 132, 138, 150, 155, 157, 159, 160, 163, 168, 171, 172, 179, 184, 185, 193, 197, 202, 208, 210, 212, 239, 249, 250, 270, 275, 285, 288, 290, 304, 310, 314, 351, 361, 362, 365, 368, 371, 375, 376, 378, 381, 383, 387, 388, 400, 404, 408, 411, 416, 433, 439, 446, 452, 454, 457, 460, 461, 463, 469, 476, 488, 498, 511, 513, 528, 533, 545, 554, 560, 563, 565, 567, 569, 584, 588, 592, 601, 604, 610, 616, 637, 666, 671, 681, 684, 707, 713, 773, 787, 814, 847, 854, 860, 862, 865, 868, 869, 871, 877, 916], "support": [1, 27, 31, 65, 82, 83, 84, 85, 86, 87, 88, 96, 97, 98, 106, 114, 117, 121, 123, 159, 160, 185, 193, 194, 201, 204, 239, 283, 405, 439, 441, 464, 498, 545, 604, 605, 637, 679, 847, 872, 898, 916], "target": [1, 27, 63, 239, 451, 470, 859, 878], "thi": [1, 6, 23, 25, 27, 29, 31, 47, 48, 57, 64, 65, 66, 82, 84, 85, 86, 87, 88, 91, 92, 94, 95, 96, 97, 98, 99, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 123, 124, 128, 132, 133, 134, 136, 141, 146, 147, 148, 149, 153, 155, 157, 159, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 174, 177, 178, 179, 184, 185, 186, 188, 191, 193, 195, 196, 199, 201, 203, 204, 207, 208, 210, 211, 212, 213, 214, 216, 217, 221, 238, 239, 248, 250, 251, 260, 263, 270, 271, 275, 284, 288, 297, 304, 310, 315, 323, 333, 336, 337, 345, 353, 364, 365, 366, 370, 381, 386, 387, 389, 393, 394, 395, 396, 402, 403, 405, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 430, 432, 433, 434, 439, 440, 441, 456, 457, 462, 463, 469, 470, 473, 484, 485, 486, 487, 488, 491, 494, 499, 502, 504, 506, 512, 513, 515, 530, 534, 545, 554, 555, 557, 560, 563, 565, 567, 573, 574, 575, 577, 580, 584, 588, 589, 592, 595, 598, 600, 601, 602, 603, 604, 610, 612, 615, 616, 617, 618, 621, 636, 637, 645, 646, 655, 658, 666, 667, 671, 680, 693, 707, 708, 713, 715, 716, 723, 737, 740, 741, 749, 753, 758, 765, 766, 772, 777, 778, 784, 786, 788, 791, 795, 797, 798, 799, 800, 802, 803, 805, 806, 808, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 824, 827, 828, 829, 831, 834, 835, 836, 839, 840, 841, 842, 847, 848, 850, 864, 865, 870, 871, 877, 878, 881, 882, 885, 886, 893, 895, 896, 897, 898, 900, 901, 903, 905, 906, 916], "featur": [1, 31, 48, 63, 239], "i": [1, 12, 25, 27, 29, 30, 48, 57, 62, 63, 64, 65, 66, 67, 69, 71, 72, 74, 78, 80, 82, 83, 84, 85, 86, 87, 88, 91, 94, 95, 96, 97, 99, 103, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 123, 124, 132, 134, 142, 145, 146, 147, 148, 149, 153, 154, 156, 158, 159, 160, 162, 163, 166, 168, 169, 172, 174, 175, 176, 184, 185, 186, 193, 194, 196, 199, 204, 207, 208, 210, 211, 212, 221, 238, 239, 248, 249, 250, 251, 261, 270, 273, 283, 287, 288, 310, 316, 333, 337, 342, 348, 349, 350, 353, 362, 364, 366, 379, 387, 389, 396, 405, 411, 413, 415, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 434, 435, 438, 439, 440, 441, 445, 446, 451, 452, 454, 456, 457, 459, 462, 463, 464, 467, 469, 470, 473, 488, 492, 494, 498, 499, 502, 504, 505, 506, 513, 519, 530, 534, 545, 560, 563, 565, 567, 573, 574, 575, 578, 580, 582, 584, 588, 589, 592, 601, 602, 603, 604, 605, 610, 612, 618, 621, 637, 644, 645, 646, 666, 669, 679, 683, 707, 708, 716, 737, 741, 746, 753, 754, 755, 756, 758, 766, 767, 770, 772, 774, 784, 785, 786, 788, 789, 790, 814, 816, 818, 831, 832, 833, 834, 835, 836, 842, 843, 846, 847, 850, 853, 854, 859, 860, 862, 864, 865, 867, 870, 871, 872, 875, 877, 881, 893, 897, 898, 904, 905, 906, 916], "primarili": 1, "intend": 1, "us": [1, 8, 10, 12, 15, 20, 21, 25, 26, 27, 31, 48, 57, 66, 67, 82, 83, 85, 86, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 103, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 120, 124, 130, 132, 137, 138, 141, 146, 147, 148, 155, 157, 159, 160, 162, 166, 168, 171, 172, 175, 176, 184, 186, 188, 194, 196, 202, 204, 207, 208, 210, 211, 212, 216, 219, 221, 239, 246, 251, 261, 270, 288, 292, 293, 297, 310, 313, 314, 345, 347, 348, 349, 350, 356, 357, 365, 366, 379, 387, 389, 392, 405, 411, 413, 415, 418, 419, 420, 421, 422, 424, 425, 426, 428, 430, 433, 434, 438, 440, 441, 447, 448, 449, 455, 456, 462, 464, 466, 468, 470, 493, 494, 498, 500, 504, 506, 513, 515, 519, 521, 524, 529, 530, 533, 534, 544, 545, 554, 560, 562, 563, 568, 569, 573, 574, 575, 576, 580, 582, 583, 588, 598, 603, 605, 610, 612, 615, 619, 621, 637, 646, 666, 684, 687, 688, 693, 707, 749, 752, 754, 755, 756, 760, 761, 766, 771, 790, 796, 814, 816, 818, 831, 834, 835, 836, 840, 842, 846, 850, 855, 856, 863, 864, 870, 872, 874, 878, 888, 894, 896, 897, 898, 905, 906, 916], "librari": [1, 68, 75, 387, 545, 923], "author": 1, "domain": 1, "specif": [1, 23, 27, 82, 84, 86, 88, 94, 96, 97, 106, 116, 159, 239, 417, 470, 545, 637, 820, 878, 916], "capabl": [1, 27, 239], "which": [1, 15, 24, 25, 27, 28, 29, 30, 31, 57, 58, 59, 60, 61, 85, 94, 95, 96, 97, 98, 105, 106, 112, 132, 136, 147, 148, 208, 239, 248, 288, 354, 366, 368, 371, 372, 374, 375, 376, 396, 418, 419, 420, 421, 422, 424, 425, 426, 459, 545, 563, 565, 574, 575, 602, 603, 610, 618, 637, 645, 759, 771, 775, 779, 780, 781, 782, 783, 834, 867, 916], "mai": [1, 31, 65, 66, 82, 84, 85, 86, 88, 94, 97, 99, 106, 107, 110, 124, 134, 136, 162, 190, 191, 204, 210, 211, 239, 251, 282, 287, 288, 310, 315, 323, 337, 389, 418, 419, 420, 421, 422, 424, 425, 426, 431, 432, 470, 504, 505, 513, 528, 545, 580, 584, 599, 600, 603, 612, 617, 621, 637, 645, 678, 683, 707, 708, 715, 723, 741, 753, 838, 839, 878, 916], "exist": [1, 26, 27, 82, 97, 106, 116, 216, 239, 316, 615, 637, 716], "belong": [1, 147, 239, 574, 637], "core": [1, 204, 239], "cannot": [1, 83, 94, 95, 99, 112, 124, 186, 221, 239, 292, 389, 428, 447, 466, 475, 545, 601, 621, 637, 687, 831, 855, 874, 916], "overrid": [1, 27, 82, 84, 85, 86, 87, 88, 94, 114, 115, 117, 239, 637], "str": [1, 5, 7, 9, 11, 12, 15, 16, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 42, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 63, 66, 67, 82, 84, 85, 86, 88, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 114, 115, 116, 117, 127, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 143, 145, 146, 147, 148, 150, 152, 155, 157, 159, 161, 162, 164, 165, 166, 167, 168, 169, 170, 172, 174, 176, 178, 180, 181, 182, 183, 184, 185, 186, 190, 191, 193, 194, 195, 196, 197, 200, 201, 202, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 246, 247, 251, 266, 267, 268, 273, 274, 275, 283, 286, 288, 312, 317, 333, 336, 337, 340, 342, 351, 353, 355, 357, 359, 364, 366, 370, 373, 388, 389, 395, 397, 405, 408, 414, 416, 418, 419, 420, 421, 422, 424, 425, 426, 432, 433, 440, 441, 474, 475, 476, 479, 490, 491, 492, 493, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 536, 545, 549, 560, 561, 562, 563, 565, 566, 567, 570, 572, 573, 574, 575, 577, 579, 580, 588, 589, 592, 594, 595, 596, 600, 601, 602, 603, 604, 605, 610, 611, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 637, 642, 663, 664, 671, 684, 691, 708, 709, 717, 737, 740, 741, 744, 746, 758, 761, 771, 796, 797, 800, 805, 806, 817, 834, 835, 882, 884, 894, 895, 916, 919], "dt": [1, 57, 148, 239, 551, 575, 637, 921], "attempt": [1, 203, 239], "do": [1, 27, 57, 64, 105, 136, 162, 199, 207, 210, 239, 270, 310, 457, 463, 469, 491, 545, 560, 565, 580, 584, 592, 601, 602, 603, 637, 645, 666, 707, 865, 871, 877, 897, 906, 916], "so": [1, 48, 96, 105, 106, 145, 147, 148, 176, 239, 261, 273, 366, 457, 463, 469, 545, 574, 575, 637, 669, 865, 871, 877], "rais": [1, 11, 15, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 112, 113, 184, 239, 287, 292, 395, 407, 445, 447, 459, 470, 519, 545, 683, 687, 853, 855, 867, 878, 897, 906, 916], "an": [1, 26, 27, 58, 60, 61, 62, 64, 67, 68, 72, 73, 75, 82, 94, 95, 96, 97, 98, 103, 105, 107, 115, 116, 117, 124, 125, 126, 134, 137, 139, 141, 147, 148, 159, 160, 162, 172, 176, 182, 184, 199, 203, 210, 216, 221, 239, 247, 248, 251, 268, 270, 273, 287, 288, 292, 296, 299, 300, 301, 305, 306, 307, 308, 309, 310, 316, 345, 354, 357, 366, 378, 387, 388, 396, 409, 417, 418, 419, 420, 421, 422, 424, 425, 426, 445, 447, 452, 470, 479, 494, 498, 510, 515, 519, 528, 529, 530, 533, 545, 554, 558, 559, 560, 565, 567, 570, 574, 575, 580, 584, 592, 601, 615, 616, 621, 637, 664, 666, 669, 683, 687, 691, 696, 697, 698, 699, 700, 703, 704, 705, 706, 707, 716, 749, 753, 759, 771, 820, 821, 822, 823, 824, 825, 827, 828, 829, 834, 835, 853, 855, 860, 878, 897, 906, 916], "attributeerror": 1, "howev": [1, 85, 134, 239, 753, 916], "can": [1, 27, 57, 67, 73, 85, 94, 95, 98, 99, 103, 105, 107, 109, 110, 115, 116, 117, 124, 133, 141, 147, 155, 157, 172, 176, 188, 194, 207, 210, 216, 221, 239, 251, 270, 288, 306, 309, 310, 333, 342, 354, 365, 366, 400, 413, 418, 419, 420, 421, 422, 424, 425, 426, 430, 433, 435, 438, 441, 454, 457, 463, 469, 488, 491, 494, 495, 498, 506, 513, 515, 521, 534, 544, 545, 560, 565, 574, 598, 605, 615, 617, 621, 637, 646, 666, 684, 707, 737, 746, 759, 771, 801, 816, 834, 835, 836, 840, 843, 846, 862, 865, 871, 877, 916], "other": [1, 15, 27, 67, 94, 95, 98, 105, 112, 113, 132, 136, 142, 161, 162, 168, 169, 184, 188, 211, 216, 237, 239, 250, 261, 266, 299, 300, 301, 312, 370, 389, 441, 483, 497, 500, 533, 545, 554, 563, 579, 580, 588, 589, 598, 612, 615, 616, 637, 645, 662, 697, 698, 699, 711, 778, 833, 899, 907, 915, 916], "onli": [1, 15, 23, 48, 57, 63, 65, 94, 95, 97, 98, 99, 103, 105, 106, 107, 108, 109, 116, 117, 121, 124, 132, 159, 162, 166, 185, 196, 201, 239, 246, 251, 261, 298, 299, 300, 301, 333, 351, 360, 413, 486, 529, 545, 560, 563, 576, 580, 583, 637, 694, 697, 698, 699, 737, 764, 816, 893, 916], "gener": [1, 89, 96, 114, 115, 116, 117, 128, 176, 186, 202, 207, 239, 288, 428, 434, 545, 637, 684, 831, 842, 894, 916], "userwarn": 1, "pl": [1, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 27, 28, 29, 30, 31, 48, 57, 58, 59, 60, 61, 62, 65, 66, 67, 82, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 395, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 545, 555, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 670, 671, 673, 678, 679, 680, 682, 684, 691, 693, 694, 695, 696, 697, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 755, 756, 759, 760, 761, 762, 764, 767, 768, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 809, 810, 811, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 838, 842, 843, 844, 845, 847, 848, 849, 850, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 916], "register_expr_namespac": [1, 58, 60, 61], "greet": 1, "def": [1, 58, 59, 60, 61, 115, 116, 117, 175, 207, 239, 520, 545, 591, 637], "__init__": [1, 2, 3, 4, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 114], "self": [1, 58, 59, 60, 61, 64, 124, 125, 126, 128, 129, 130, 132, 135, 136, 137, 138, 139, 146, 147, 148, 150, 152, 153, 154, 161, 162, 164, 165, 166, 167, 168, 169, 170, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 290, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 545, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 637, 645, 795, 796, 834, 835, 848, 903, 907, 916], "_expr": [1, 59], "hello": [1, 457, 463, 469, 491, 671, 865, 871, 877], "return": [1, 23, 25, 29, 30, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 74, 76, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 103, 104, 105, 106, 120, 124, 125, 128, 131, 132, 133, 134, 135, 137, 138, 141, 145, 146, 150, 152, 158, 159, 160, 161, 163, 164, 171, 172, 174, 175, 176, 184, 185, 186, 197, 198, 204, 207, 208, 216, 218, 221, 224, 228, 233, 239, 248, 249, 252, 253, 254, 255, 256, 257, 260, 261, 263, 264, 265, 267, 271, 273, 274, 275, 286, 287, 291, 293, 302, 303, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 343, 344, 346, 353, 363, 366, 368, 369, 370, 371, 372, 374, 375, 376, 382, 386, 396, 400, 414, 415, 428, 429, 435, 436, 437, 444, 446, 448, 450, 451, 452, 454, 455, 456, 458, 459, 462, 464, 465, 466, 467, 473, 478, 479, 480, 481, 482, 484, 486, 487, 488, 492, 493, 494, 495, 498, 507, 508, 509, 515, 517, 519, 520, 529, 530, 533, 535, 537, 545, 558, 560, 563, 564, 565, 567, 576, 582, 583, 584, 591, 592, 601, 602, 603, 608, 609, 610, 615, 618, 624, 628, 633, 637, 642, 643, 644, 646, 653, 654, 656, 657, 660, 661, 663, 667, 669, 670, 671, 682, 683, 686, 688, 696, 708, 709, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 750, 753, 758, 766, 768, 773, 775, 776, 778, 779, 780, 781, 782, 783, 787, 789, 792, 795, 801, 818, 819, 831, 832, 833, 835, 843, 852, 853, 854, 856, 858, 859, 860, 862, 863, 864, 866, 867, 870, 872, 873, 874, 875, 878, 881, 887, 889, 900, 902, 903, 907, 916], "lit": [1, 92, 120, 291, 366, 378, 504, 506, 513, 534, 537, 545, 686, 761, 916], "alia": [1, 57, 59, 61, 147, 148, 164, 209, 216, 239, 251, 263, 268, 270, 299, 300, 301, 305, 306, 307, 308, 309, 311, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 327, 329, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 344, 345, 357, 359, 364, 366, 369, 370, 378, 381, 382, 389, 398, 406, 413, 429, 445, 446, 449, 452, 455, 458, 464, 466, 467, 468, 474, 475, 483, 484, 490, 493, 496, 497, 499, 500, 504, 505, 506, 509, 510, 513, 514, 520, 528, 529, 533, 534, 545, 574, 575, 577, 583, 611, 615, 637, 658, 666, 715, 717, 720, 737, 740, 745, 749, 792, 874, 875, 916], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 457, 463, 469, 671, 865, 871, 877], "select": [1, 26, 57, 58, 59, 60, 62, 93, 94, 95, 96, 97, 99, 103, 105, 110, 124, 158, 162, 172, 175, 184, 193, 205, 209, 212, 239, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 284, 285, 288, 289, 290, 298, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 358, 360, 361, 362, 364, 365, 367, 368, 370, 371, 373, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 390, 391, 392, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 454, 456, 457, 459, 462, 463, 465, 466, 467, 469, 471, 472, 474, 475, 476, 477, 480, 481, 482, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 504, 505, 506, 509, 511, 512, 513, 514, 515, 517, 521, 522, 523, 524, 525, 526, 528, 531, 532, 533, 534, 535, 536, 545, 561, 577, 580, 591, 604, 611, 616, 618, 637, 666, 684, 834, 835, 847, 859, 862, 888, 916], "shape": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 48, 57, 58, 59, 60, 61, 62, 65, 66, 67, 79, 82, 84, 85, 86, 87, 88, 89, 92, 105, 110, 116, 117, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 161, 162, 164, 165, 166, 167, 168, 170, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 186, 188, 190, 191, 193, 194, 195, 196, 197, 198, 200, 202, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 545, 558, 560, 562, 563, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 598, 599, 600, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 637, 645, 646, 647, 648, 649, 650, 651, 652, 655, 656, 657, 665, 666, 667, 670, 671, 673, 678, 679, 680, 682, 684, 691, 693, 694, 696, 697, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 755, 756, 759, 760, 761, 762, 764, 767, 768, 770, 771, 773, 775, 778, 779, 780, 781, 782, 783, 787, 789, 792, 795, 796, 801, 809, 810, 811, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 834, 835, 838, 842, 843, 844, 845, 847, 848, 849, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 885, 887, 888, 889, 890, 891, 894, 895, 899, 901, 902, 903, 904, 907, 916], "3": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 27, 28, 29, 30, 31, 48, 57, 58, 59, 60, 61, 62, 65, 66, 67, 82, 84, 85, 86, 87, 88, 89, 96, 98, 105, 110, 111, 112, 113, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 246, 247, 248, 251, 260, 261, 262, 263, 267, 268, 269, 270, 271, 272, 273, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 296, 297, 298, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 328, 330, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 377, 378, 379, 381, 383, 384, 385, 386, 388, 389, 400, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 440, 441, 442, 445, 448, 449, 451, 453, 455, 458, 464, 465, 466, 467, 468, 474, 475, 476, 478, 479, 480, 484, 486, 487, 488, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 510, 511, 512, 513, 514, 517, 519, 520, 521, 522, 523, 524, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 545, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 637, 642, 645, 646, 647, 649, 650, 651, 653, 654, 655, 656, 657, 665, 666, 667, 670, 673, 678, 679, 680, 682, 684, 691, 693, 694, 695, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 716, 717, 718, 719, 720, 721, 724, 725, 726, 728, 730, 731, 732, 734, 736, 738, 740, 741, 742, 745, 746, 748, 749, 753, 755, 756, 759, 760, 761, 762, 764, 767, 768, 770, 771, 773, 775, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 790, 791, 792, 795, 797, 798, 799, 800, 801, 802, 803, 809, 810, 811, 813, 814, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 838, 842, 844, 845, 846, 847, 848, 850, 856, 857, 859, 861, 863, 866, 872, 876, 885, 886, 887, 888, 889, 890, 891, 893, 894, 896, 897, 898, 901, 902, 903, 904, 905, 907, 916], "1": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 27, 28, 29, 30, 31, 48, 57, 58, 59, 60, 61, 62, 65, 66, 67, 82, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96, 97, 99, 105, 106, 110, 111, 112, 113, 114, 116, 117, 124, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 545, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 669, 670, 673, 678, 679, 680, 682, 684, 691, 693, 694, 695, 697, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 754, 755, 756, 759, 760, 761, 762, 764, 767, 768, 770, 771, 773, 775, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 789, 791, 792, 795, 797, 798, 799, 800, 801, 802, 803, 809, 810, 811, 813, 814, 817, 818, 819, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 859, 861, 862, 874, 875, 878, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 916], "2": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 27, 28, 29, 30, 31, 48, 57, 58, 59, 60, 61, 62, 65, 66, 82, 84, 85, 86, 87, 88, 89, 96, 105, 110, 111, 112, 113, 116, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 245, 246, 247, 249, 250, 251, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 316, 317, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 335, 336, 337, 338, 339, 340, 342, 345, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 400, 401, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 438, 439, 440, 441, 442, 444, 446, 449, 452, 453, 454, 455, 457, 458, 459, 460, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 490, 491, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 545, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 579, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 637, 642, 645, 646, 648, 652, 653, 654, 655, 656, 657, 665, 666, 667, 670, 671, 673, 678, 679, 680, 682, 684, 693, 694, 695, 696, 700, 701, 704, 705, 706, 707, 708, 709, 710, 711, 716, 721, 725, 726, 732, 734, 739, 741, 742, 746, 748, 750, 752, 753, 754, 755, 756, 759, 760, 761, 762, 764, 767, 768, 770, 771, 773, 775, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 791, 792, 793, 795, 797, 798, 799, 800, 801, 802, 803, 809, 810, 811, 813, 814, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 838, 842, 844, 846, 847, 848, 849, 850, 852, 854, 860, 861, 862, 865, 866, 867, 868, 869, 871, 874, 875, 877, 878, 885, 886, 887, 888, 889, 890, 893, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 907, 916], "column_0": [1, 82, 124, 207, 239], "register_dataframe_namespac": [1, 59, 60, 61], "split": [1, 58, 160, 239, 466, 467, 874, 875], "splitfram": [1, 58], "df": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 27, 28, 29, 30, 31, 58, 59, 62, 82, 83, 84, 85, 86, 87, 88, 89, 95, 105, 115, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 284, 285, 288, 289, 290, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 545, 559, 560, 561, 563, 565, 566, 567, 568, 569, 571, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 599, 600, 601, 604, 606, 607, 608, 610, 611, 612, 613, 617, 618, 621, 624, 633, 637, 666, 684, 693, 859, 862, 869, 874, 875, 895, 916], "_df": [1, 58], "by_alternate_row": 1, "list": [1, 27, 34, 57, 58, 60, 64, 66, 82, 84, 85, 86, 88, 91, 93, 94, 95, 96, 97, 99, 103, 105, 106, 115, 116, 117, 127, 130, 133, 134, 135, 139, 144, 146, 147, 152, 159, 171, 174, 184, 185, 188, 194, 200, 201, 207, 208, 209, 210, 216, 219, 220, 239, 246, 266, 269, 270, 271, 274, 275, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 353, 359, 387, 396, 397, 405, 414, 415, 417, 418, 419, 420, 421, 422, 424, 425, 426, 432, 440, 441, 452, 465, 474, 475, 479, 495, 498, 499, 506, 510, 521, 524, 533, 534, 545, 561, 562, 564, 566, 570, 573, 574, 588, 598, 605, 610, 611, 615, 616, 619, 620, 637, 659, 662, 665, 666, 667, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 695, 708, 753, 758, 762, 765, 778, 818, 820, 821, 822, 823, 824, 825, 827, 828, 829, 832, 860, 873, 888, 896, 916], "with_row_count": [1, 239, 389, 545, 637, 835, 916], "name": [1, 13, 17, 19, 26, 27, 29, 47, 58, 59, 60, 61, 66, 67, 71, 82, 84, 85, 86, 87, 88, 89, 93, 94, 95, 97, 98, 99, 100, 103, 104, 105, 107, 108, 109, 113, 114, 115, 116, 117, 124, 127, 130, 131, 132, 135, 140, 143, 145, 146, 159, 161, 162, 168, 174, 176, 180, 184, 185, 187, 188, 194, 200, 202, 206, 207, 208, 209, 210, 211, 216, 217, 218, 219, 239, 247, 251, 288, 337, 342, 351, 366, 378, 388, 395, 397, 405, 408, 441, 474, 475, 476, 491, 492, 495, 497, 498, 500, 501, 503, 506, 511, 517, 518, 521, 524, 526, 527, 529, 531, 533, 534, 535, 545, 561, 562, 563, 566, 573, 579, 580, 588, 595, 597, 598, 605, 610, 611, 612, 615, 617, 618, 619, 637, 642, 684, 696, 708, 741, 746, 817, 882, 884, 894, 895, 898, 916], "n": [1, 10, 12, 20, 30, 34, 35, 58, 59, 60, 61, 67, 91, 92, 94, 95, 105, 120, 124, 125, 136, 147, 150, 159, 160, 164, 185, 186, 197, 198, 201, 224, 233, 239, 269, 274, 286, 310, 311, 315, 316, 320, 341, 345, 354, 363, 382, 406, 414, 428, 438, 466, 467, 478, 480, 484, 515, 517, 529, 535, 545, 558, 560, 574, 576, 583, 608, 609, 624, 633, 637, 645, 665, 670, 682, 696, 707, 710, 715, 716, 720, 745, 749, 759, 768, 792, 809, 831, 846, 850, 874, 875, 887, 889, 900, 905, 916], "filter": [1, 58, 97, 105, 106, 110, 132, 155, 156, 157, 221, 239, 449, 468, 490, 494, 513, 545, 563, 567, 577, 621, 637, 834, 916], "col": [1, 25, 27, 57, 58, 59, 60, 62, 86, 88, 105, 115, 116, 124, 135, 139, 146, 147, 148, 156, 158, 172, 175, 184, 188, 194, 209, 216, 219, 239, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 284, 285, 288, 289, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 357, 358, 359, 360, 364, 365, 366, 367, 369, 370, 372, 373, 374, 377, 378, 379, 380, 384, 385, 386, 389, 390, 391, 392, 399, 401, 402, 403, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 493, 494, 497, 499, 500, 504, 505, 506, 509, 512, 513, 514, 515, 516, 521, 524, 527, 528, 534, 537, 545, 566, 570, 573, 574, 575, 577, 591, 598, 605, 611, 615, 616, 619, 637, 666, 684, 693, 737, 818, 834, 835, 859, 862, 878, 916], "0": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 27, 31, 57, 58, 59, 61, 62, 66, 89, 94, 95, 96, 98, 99, 103, 105, 107, 108, 109, 110, 111, 114, 115, 116, 117, 120, 124, 125, 126, 128, 129, 130, 133, 137, 138, 141, 142, 144, 145, 146, 147, 149, 153, 158, 159, 160, 161, 163, 165, 166, 167, 170, 171, 172, 173, 177, 178, 182, 186, 187, 188, 191, 193, 194, 195, 196, 202, 204, 205, 207, 210, 212, 213, 216, 217, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 239, 245, 246, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 265, 268, 270, 273, 279, 288, 296, 298, 300, 301, 302, 303, 305, 310, 313, 314, 321, 324, 325, 327, 328, 332, 338, 339, 348, 349, 350, 352, 353, 354, 355, 356, 360, 362, 365, 368, 371, 372, 374, 375, 376, 378, 379, 384, 385, 387, 389, 390, 391, 392, 399, 402, 403, 404, 406, 407, 410, 411, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 433, 435, 436, 437, 438, 442, 443, 451, 473, 477, 481, 482, 483, 489, 494, 495, 496, 497, 499, 501, 503, 504, 506, 510, 513, 522, 523, 526, 527, 528, 531, 534, 536, 537, 545, 558, 559, 562, 564, 568, 569, 573, 574, 579, 582, 587, 592, 593, 597, 598, 600, 601, 603, 605, 606, 613, 615, 616, 617, 619, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 637, 647, 648, 649, 650, 651, 652, 653, 655, 657, 658, 666, 669, 691, 694, 696, 701, 702, 707, 708, 709, 711, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 735, 736, 742, 743, 752, 754, 755, 756, 758, 760, 764, 767, 775, 777, 779, 780, 781, 782, 783, 789, 790, 795, 798, 799, 809, 813, 814, 820, 822, 823, 825, 826, 827, 829, 831, 843, 844, 845, 849, 850, 852, 859, 862, 881, 890, 891, 894, 898, 899, 903, 905, 906, 916], "drop": [1, 85, 124, 131, 132, 208, 216, 239, 269, 311, 313, 314, 545, 563, 610, 615, 637, 665, 710, 712, 713, 916], "aaa": [1, 27, 239, 474, 475], "bbb": [1, 27, 239, 474, 475], "ccc": [1, 27, 239, 474, 475], "ddd": [1, 27, 239, 474, 475], "eee": [1, 27, 239], "fff": 1, "column": [1, 12, 13, 16, 17, 19, 27, 29, 48, 57, 58, 65, 66, 67, 69, 71, 82, 84, 85, 86, 87, 88, 89, 93, 94, 95, 96, 97, 99, 100, 103, 104, 105, 106, 107, 108, 109, 112, 116, 123, 124, 130, 131, 132, 133, 135, 140, 143, 145, 146, 147, 148, 152, 153, 159, 161, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 187, 188, 194, 195, 196, 200, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 216, 217, 219, 239, 248, 249, 251, 260, 263, 266, 271, 284, 287, 288, 316, 318, 321, 323, 324, 326, 328, 330, 331, 334, 335, 338, 343, 344, 346, 351, 353, 357, 359, 366, 378, 389, 394, 395, 397, 405, 408, 412, 414, 415, 418, 419, 420, 421, 422, 424, 425, 426, 433, 440, 441, 450, 466, 467, 470, 476, 490, 491, 492, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 512, 513, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 532, 533, 534, 535, 536, 537, 545, 562, 563, 564, 566, 573, 574, 575, 579, 580, 584, 585, 586, 587, 588, 590, 591, 593, 595, 597, 598, 605, 606, 607, 610, 611, 612, 613, 615, 616, 617, 618, 619, 637, 643, 644, 662, 667, 680, 683, 708, 718, 721, 723, 727, 729, 732, 734, 735, 738, 739, 742, 747, 748, 750, 758, 818, 840, 858, 874, 875, 885, 894, 895, 916], "txt": 1, "utf8": [1, 8, 15, 48, 85, 94, 95, 105, 114, 133, 134, 135, 141, 187, 203, 239, 275, 353, 389, 444, 448, 451, 452, 454, 455, 464, 465, 466, 467, 470, 498, 500, 545, 564, 566, 597, 637, 671, 744, 758, 788, 852, 856, 859, 860, 862, 863, 872, 873, 874, 875, 878, 916], "register_lazyframe_namespac": [1, 58, 59, 61], "dtypeoper": [1, 60], "ldf": [1, 60, 558, 562, 573, 598, 602, 603, 605, 615, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 637], "_ldf": [1, 60], "upcast_integer_typ": [1, 60], "with_column": [1, 60, 148, 175, 239, 251, 261, 270, 296, 297, 299, 300, 301, 306, 309, 311, 362, 365, 366, 369, 372, 374, 375, 376, 378, 389, 405, 406, 449, 455, 458, 460, 461, 464, 466, 467, 468, 470, 473, 483, 493, 494, 497, 499, 500, 506, 510, 520, 534, 537, 545, 575, 591, 637, 666, 693, 878], "tp": [1, 60], "cast": [1, 59, 60, 82, 119, 141, 147, 148, 175, 204, 216, 239, 250, 297, 308, 309, 315, 389, 413, 453, 454, 473, 477, 483, 500, 545, 574, 575, 591, 615, 637, 693, 705, 706, 715, 816, 861, 862, 886, 895, 899, 916], "int64": [1, 29, 59, 60, 92, 94, 120, 133, 141, 147, 148, 175, 187, 199, 204, 239, 308, 309, 319, 322, 325, 327, 329, 332, 339, 351, 413, 453, 477, 483, 494, 498, 511, 533, 545, 564, 574, 575, 591, 597, 618, 637, 705, 706, 719, 722, 728, 730, 733, 736, 743, 816, 833, 886, 897, 898, 899, 916], "int8": [1, 60, 141, 239, 308, 309, 477, 545, 705, 706, 710, 819, 886, 903, 916], "int16": [1, 60, 308, 309, 477, 545, 705, 706, 886, 916], "int32": [1, 60, 85, 116, 117, 147, 148, 160, 239, 296, 323, 346, 483, 545, 574, 575, 637, 723, 750, 795, 899, 916], "b": [1, 24, 25, 28, 31, 48, 60, 65, 82, 84, 85, 86, 87, 88, 89, 98, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 152, 153, 155, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 247, 250, 251, 262, 266, 270, 275, 277, 290, 296, 297, 304, 312, 313, 314, 351, 355, 356, 357, 359, 361, 362, 365, 366, 368, 371, 372, 373, 374, 375, 376, 378, 381, 383, 388, 400, 404, 405, 408, 416, 433, 439, 441, 450, 453, 460, 476, 486, 488, 490, 491, 492, 493, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 510, 511, 512, 513, 514, 517, 520, 521, 522, 523, 524, 525, 526, 528, 531, 532, 533, 534, 535, 536, 545, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 579, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 616, 617, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 637, 645, 666, 693, 709, 711, 752, 753, 761, 771, 778, 788, 817, 833, 858, 861, 868, 885, 898, 902, 916], "4": [1, 12, 20, 24, 25, 27, 28, 31, 48, 57, 58, 59, 60, 61, 62, 65, 67, 82, 84, 85, 86, 87, 88, 89, 105, 111, 112, 113, 117, 124, 125, 126, 129, 132, 135, 136, 137, 138, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 168, 171, 172, 174, 175, 176, 177, 181, 185, 189, 194, 197, 198, 199, 200, 201, 202, 206, 207, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 245, 246, 250, 251, 262, 268, 269, 270, 271, 274, 282, 283, 286, 290, 296, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 316, 318, 322, 328, 329, 330, 334, 335, 337, 338, 339, 342, 343, 344, 346, 352, 355, 356, 359, 360, 361, 363, 364, 365, 366, 375, 376, 378, 381, 383, 385, 388, 389, 405, 407, 408, 410, 411, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 429, 431, 432, 435, 439, 440, 441, 442, 445, 455, 456, 458, 459, 462, 464, 466, 467, 470, 474, 475, 476, 478, 479, 480, 483, 484, 493, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 510, 512, 513, 517, 520, 521, 522, 523, 524, 525, 526, 531, 532, 533, 534, 535, 536, 537, 545, 558, 559, 560, 563, 565, 566, 567, 568, 569, 571, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 599, 600, 601, 604, 605, 606, 607, 608, 609, 611, 612, 613, 614, 615, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 637, 645, 648, 655, 665, 666, 667, 670, 678, 679, 682, 694, 695, 697, 707, 709, 711, 721, 722, 727, 729, 732, 733, 734, 735, 739, 741, 742, 743, 744, 746, 747, 748, 760, 761, 770, 771, 773, 778, 780, 781, 782, 783, 787, 796, 802, 809, 810, 811, 814, 818, 823, 825, 826, 827, 828, 829, 831, 833, 843, 847, 848, 853, 863, 864, 866, 867, 870, 872, 874, 875, 878, 885, 888, 889, 898, 899, 907, 916], "c": [1, 24, 25, 28, 31, 48, 58, 60, 85, 87, 98, 105, 115, 125, 126, 127, 129, 130, 131, 132, 133, 135, 139, 140, 141, 142, 144, 145, 146, 147, 150, 152, 153, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 180, 182, 183, 184, 186, 187, 188, 190, 191, 193, 194, 195, 196, 197, 199, 203, 204, 205, 207, 210, 211, 213, 214, 216, 219, 222, 223, 224, 225, 226, 227, 229, 232, 233, 239, 251, 266, 275, 277, 366, 378, 405, 433, 466, 470, 486, 488, 491, 492, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 512, 513, 514, 517, 520, 521, 522, 523, 524, 525, 526, 531, 532, 534, 535, 536, 545, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 570, 573, 574, 579, 582, 588, 592, 595, 596, 597, 598, 601, 604, 605, 612, 615, 616, 619, 622, 623, 624, 625, 626, 627, 629, 632, 633, 637, 709, 771, 788, 874, 878, 902, 916], "5": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 28, 31, 57, 58, 60, 61, 62, 65, 66, 82, 85, 86, 87, 88, 91, 92, 95, 111, 116, 117, 120, 124, 125, 126, 129, 135, 136, 137, 138, 141, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 156, 158, 159, 162, 163, 164, 166, 168, 171, 172, 174, 176, 177, 178, 181, 185, 189, 194, 197, 198, 199, 200, 201, 206, 210, 212, 215, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 246, 263, 268, 270, 271, 274, 279, 285, 286, 296, 297, 298, 299, 300, 301, 310, 311, 312, 316, 317, 319, 336, 338, 339, 340, 343, 350, 351, 354, 360, 363, 366, 369, 372, 374, 375, 376, 378, 383, 405, 406, 408, 410, 411, 415, 416, 417, 418, 419, 421, 425, 427, 429, 435, 441, 446, 454, 455, 458, 459, 473, 476, 478, 480, 484, 493, 496, 497, 499, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 517, 520, 521, 522, 523, 524, 525, 526, 528, 531, 532, 534, 535, 536, 545, 558, 559, 560, 565, 566, 567, 568, 569, 571, 573, 574, 575, 576, 578, 580, 581, 582, 583, 586, 587, 588, 592, 599, 600, 601, 604, 605, 606, 607, 608, 609, 614, 615, 617, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 637, 645, 648, 652, 655, 658, 666, 667, 670, 673, 682, 693, 695, 697, 703, 707, 708, 709, 710, 711, 716, 717, 718, 719, 740, 742, 743, 747, 748, 756, 759, 770, 771, 795, 802, 809, 810, 811, 813, 814, 818, 820, 821, 822, 824, 825, 828, 831, 833, 843, 849, 854, 862, 863, 867, 900, 903, 907, 916], "6": [1, 24, 25, 27, 28, 29, 30, 31, 58, 60, 65, 82, 85, 86, 87, 88, 89, 124, 127, 130, 131, 132, 133, 135, 136, 139, 140, 142, 143, 144, 145, 147, 148, 150, 152, 153, 154, 156, 158, 159, 161, 164, 165, 166, 167, 168, 170, 173, 176, 177, 178, 180, 181, 182, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 216, 217, 224, 232, 233, 239, 251, 271, 290, 296, 308, 309, 312, 316, 333, 335, 338, 347, 355, 356, 361, 363, 365, 383, 409, 411, 412, 415, 418, 419, 420, 421, 422, 424, 425, 426, 429, 441, 446, 450, 455, 458, 459, 478, 480, 491, 493, 504, 505, 506, 510, 513, 520, 534, 545, 560, 561, 562, 563, 564, 565, 566, 567, 570, 571, 574, 575, 576, 578, 579, 581, 583, 584, 588, 592, 595, 597, 598, 599, 600, 601, 604, 605, 608, 609, 611, 612, 614, 615, 617, 618, 624, 632, 633, 637, 645, 667, 695, 701, 705, 706, 709, 711, 737, 748, 802, 814, 818, 823, 825, 826, 827, 829, 833, 854, 858, 863, 867, 886, 916], "7": [1, 24, 25, 27, 28, 29, 30, 31, 58, 60, 65, 67, 127, 128, 129, 130, 131, 133, 135, 139, 140, 142, 147, 148, 150, 152, 154, 161, 165, 166, 167, 170, 173, 178, 180, 182, 184, 186, 187, 188, 190, 191, 193, 195, 196, 197, 198, 203, 204, 205, 210, 211, 212, 213, 214, 239, 309, 316, 318, 334, 336, 337, 342, 344, 346, 352, 363, 365, 415, 419, 425, 441, 478, 480, 493, 504, 505, 513, 520, 534, 545, 561, 562, 564, 566, 570, 574, 575, 576, 578, 579, 583, 593, 595, 597, 598, 608, 609, 612, 618, 637, 652, 716, 718, 723, 741, 746, 748, 818, 828, 916], "float32": [1, 25, 60, 141, 239, 637, 774, 795, 916], "lazi": [1, 60, 65, 67, 92, 105, 116, 120, 162, 175, 239, 251, 288, 494, 515, 545, 554, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 637], "i16": [1, 60, 433, 545], "i32": [1, 60, 85, 116, 188, 239, 296, 323, 346, 433, 459, 537, 545, 598, 637, 723, 750, 795, 867, 916], "f32": [1, 60, 239, 270, 411, 433, 510, 545, 637, 666, 795, 814, 916], "i64": [1, 12, 16, 58, 59, 60, 61, 65, 82, 84, 85, 86, 87, 88, 92, 105, 117, 120, 124, 125, 126, 127, 130, 132, 133, 135, 136, 138, 139, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 155, 157, 158, 161, 162, 164, 165, 168, 170, 174, 175, 176, 177, 180, 181, 182, 183, 186, 188, 190, 191, 193, 194, 196, 197, 198, 200, 205, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 229, 232, 233, 239, 247, 250, 251, 269, 270, 271, 272, 273, 274, 276, 278, 280, 281, 282, 283, 284, 285, 286, 289, 290, 297, 299, 300, 301, 306, 307, 308, 309, 311, 312, 319, 320, 322, 325, 327, 329, 332, 339, 341, 351, 354, 356, 357, 358, 359, 361, 363, 364, 365, 366, 369, 372, 374, 375, 376, 378, 380, 383, 386, 387, 388, 400, 405, 406, 408, 409, 412, 413, 415, 416, 428, 430, 431, 433, 434, 435, 439, 440, 441, 460, 461, 474, 475, 476, 477, 478, 479, 480, 484, 485, 487, 490, 491, 493, 497, 498, 500, 504, 505, 506, 510, 511, 512, 513, 517, 520, 521, 524, 528, 530, 534, 535, 537, 545, 558, 560, 562, 563, 566, 567, 569, 570, 571, 573, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 588, 590, 591, 592, 595, 596, 598, 599, 600, 604, 605, 607, 608, 609, 610, 611, 612, 615, 617, 619, 620, 621, 623, 624, 625, 626, 629, 632, 633, 637, 645, 646, 665, 666, 667, 670, 678, 679, 680, 682, 693, 697, 700, 703, 704, 705, 706, 709, 719, 720, 722, 728, 730, 733, 736, 740, 743, 745, 759, 761, 762, 768, 770, 778, 792, 801, 817, 818, 821, 824, 828, 831, 834, 835, 838, 842, 843, 847, 848, 885, 887, 888, 889, 895, 901, 904, 907, 916], "register_series_namespac": [1, 58, 59, 60], "math": [1, 61, 701, 844, 890, 916], "mathshortcut": [1, 61], "": [1, 25, 27, 61, 66, 89, 94, 95, 117, 130, 132, 134, 135, 146, 147, 153, 161, 162, 174, 176, 181, 182, 188, 194, 198, 202, 208, 209, 210, 239, 274, 275, 282, 283, 286, 320, 340, 351, 379, 396, 400, 402, 403, 405, 406, 413, 417, 441, 455, 456, 458, 462, 464, 465, 467, 470, 473, 474, 475, 495, 498, 501, 506, 509, 511, 514, 515, 521, 524, 526, 533, 534, 545, 562, 563, 566, 573, 574, 580, 598, 605, 609, 610, 611, 621, 637, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 667, 670, 671, 673, 678, 679, 680, 682, 691, 694, 695, 696, 697, 700, 701, 702, 703, 704, 705, 706, 707, 710, 711, 716, 720, 740, 741, 746, 753, 755, 756, 759, 760, 761, 762, 764, 767, 768, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 809, 810, 811, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 838, 842, 843, 844, 845, 847, 848, 850, 853, 854, 856, 857, 858, 860, 861, 863, 864, 865, 866, 867, 868, 870, 871, 872, 875, 876, 877, 878, 881, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 899, 901, 902, 903, 904, 905, 906, 916], "_": [1, 57, 61, 89, 176, 202, 239, 466, 874, 894, 916], "squar": [1, 61, 221, 379, 442, 545, 621, 790, 849, 916], "cube": [1, 61], "s2": [1, 113, 141, 239, 645, 695, 711, 778, 802, 833, 898, 907, 916], "renam": [1, 85, 94, 95, 188, 216, 219, 239, 247, 388, 398, 475, 530, 533, 545, 598, 615, 619, 637, 796, 884, 895, 916], "n2": 1, "in_plac": [1, 152, 192, 214, 239, 815, 817, 841, 848, 916], "true": [1, 8, 11, 13, 14, 16, 17, 18, 19, 20, 22, 23, 25, 27, 29, 31, 62, 64, 65, 67, 82, 83, 87, 91, 94, 95, 97, 98, 99, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 121, 123, 125, 126, 129, 138, 141, 142, 144, 145, 146, 147, 153, 155, 156, 157, 159, 162, 163, 166, 171, 172, 174, 176, 177, 184, 185, 186, 188, 194, 200, 204, 207, 208, 209, 210, 212, 216, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 239, 246, 248, 249, 250, 251, 261, 267, 284, 287, 292, 296, 305, 306, 307, 308, 309, 337, 338, 342, 347, 348, 349, 350, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 413, 423, 428, 433, 438, 440, 441, 445, 447, 449, 453, 454, 459, 465, 466, 468, 470, 474, 475, 479, 484, 485, 488, 492, 493, 494, 495, 501, 502, 513, 529, 531, 533, 537, 545, 558, 559, 560, 565, 567, 569, 573, 574, 579, 580, 582, 584, 592, 598, 601, 602, 603, 605, 610, 611, 615, 620, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 637, 643, 644, 645, 646, 656, 680, 683, 687, 691, 695, 696, 741, 742, 746, 752, 754, 755, 756, 762, 766, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 790, 802, 810, 811, 816, 826, 833, 846, 848, 853, 855, 857, 861, 862, 867, 873, 874, 876, 878, 897, 898, 900, 906, 907, 916], "s3": [1, 97, 106, 110, 916], "n3": 1, "8": [1, 24, 25, 28, 29, 30, 31, 41, 54, 56, 57, 58, 60, 61, 65, 66, 89, 111, 115, 116, 124, 127, 128, 129, 130, 131, 132, 133, 135, 139, 140, 142, 145, 150, 152, 161, 165, 166, 167, 170, 178, 180, 182, 184, 186, 187, 188, 190, 191, 193, 195, 196, 197, 198, 203, 204, 205, 210, 211, 213, 214, 216, 239, 250, 262, 269, 270, 304, 306, 309, 310, 313, 314, 316, 365, 381, 407, 408, 415, 416, 419, 420, 422, 424, 426, 433, 439, 441, 456, 462, 470, 476, 480, 496, 501, 502, 503, 505, 506, 510, 512, 517, 520, 521, 522, 523, 524, 525, 526, 531, 532, 534, 535, 536, 545, 561, 562, 563, 564, 566, 570, 576, 579, 583, 584, 592, 595, 597, 598, 608, 609, 612, 615, 618, 637, 665, 666, 707, 723, 809, 818, 820, 823, 825, 826, 827, 829, 864, 870, 878, 916], "9": [1, 24, 25, 28, 31, 57, 65, 124, 128, 141, 148, 150, 154, 188, 197, 210, 211, 214, 216, 232, 239, 250, 262, 269, 281, 284, 304, 306, 309, 313, 314, 316, 318, 334, 343, 344, 365, 370, 378, 381, 415, 417, 419, 425, 435, 439, 480, 493, 499, 504, 505, 545, 575, 576, 578, 583, 598, 608, 612, 615, 632, 637, 665, 680, 718, 727, 729, 735, 741, 742, 746, 747, 778, 818, 820, 828, 830, 843, 916], "27": [1, 61, 232, 309, 323, 335, 346, 407, 545, 632], "16": [1, 27, 38, 51, 59, 66, 89, 111, 147, 148, 216, 239, 263, 306, 309, 353, 365, 419, 459, 493, 504, 509, 510, 513, 526, 531, 545, 574, 575, 601, 615, 637, 658, 741, 746, 758, 809, 844, 867, 890, 916], "64": [1, 31, 37, 40, 53, 59, 61, 239, 407, 545, 603, 637, 809, 916], "25": [1, 27, 61, 67, 147, 148, 162, 212, 216, 239, 311, 323, 337, 342, 346, 515, 545, 574, 575, 580, 586, 613, 615, 637, 710, 741, 746, 752, 809, 916], "125": [1, 27, 61, 239, 809, 916], "arg": [2, 3, 4, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 175, 204, 239, 495, 514, 545, 591, 637, 646, 897, 898, 916], "ani": [2, 3, 4, 6, 25, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 49, 50, 51, 52, 53, 54, 55, 56, 63, 82, 83, 84, 85, 86, 87, 88, 94, 95, 97, 98, 99, 103, 105, 106, 107, 109, 114, 116, 117, 121, 124, 128, 132, 136, 138, 139, 141, 158, 159, 160, 174, 175, 184, 185, 200, 201, 203, 204, 210, 239, 251, 266, 270, 296, 338, 356, 370, 387, 389, 398, 415, 417, 429, 432, 459, 470, 479, 493, 501, 512, 519, 531, 545, 563, 569, 591, 637, 645, 646, 662, 666, 711, 742, 761, 778, 789, 796, 818, 820, 832, 835, 867, 878, 888, 896, 897, 898, 916], "kwarg": [2, 3, 4, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 128, 175, 204, 239, 545, 591, 637, 897, 898, 916], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 545, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 637, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 916, 922], "method": [2, 3, 4, 6, 24, 28, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 83, 94, 95, 98, 114, 132, 146, 154, 159, 172, 178, 184, 185, 208, 216, 231, 239, 248, 354, 365, 410, 411, 418, 419, 420, 421, 422, 424, 425, 426, 486, 501, 526, 527, 531, 538, 539, 541, 545, 546, 549, 550, 551, 554, 563, 578, 593, 610, 615, 631, 637, 646, 759, 770, 813, 814, 825, 899, 908, 910, 912, 916, 919, 920, 921], "A": [4, 25, 27, 45, 64, 67, 94, 95, 96, 103, 105, 106, 141, 147, 162, 176, 185, 200, 210, 211, 212, 216, 239, 245, 288, 316, 319, 322, 325, 327, 329, 332, 339, 354, 368, 371, 372, 374, 387, 388, 396, 408, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 445, 446, 451, 452, 454, 473, 476, 499, 510, 514, 545, 574, 580, 595, 612, 615, 637, 684, 716, 719, 722, 728, 730, 733, 736, 743, 759, 820, 821, 822, 824, 827, 828, 829, 853, 854, 859, 860, 862, 868, 869, 878, 881, 916], "encod": [4, 56, 94, 95, 105, 292, 447, 687, 855], "set": [4, 5, 6, 7, 8, 10, 11, 12, 15, 20, 21, 23, 25, 27, 29, 30, 58, 62, 67, 83, 85, 88, 89, 94, 95, 98, 99, 103, 105, 107, 108, 109, 112, 113, 115, 116, 117, 121, 123, 127, 132, 146, 149, 159, 162, 168, 186, 188, 193, 202, 207, 208, 210, 216, 239, 251, 283, 287, 288, 345, 362, 370, 389, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 434, 438, 439, 457, 463, 464, 469, 494, 529, 533, 545, 561, 563, 565, 573, 579, 580, 584, 588, 598, 602, 603, 604, 610, 615, 618, 621, 637, 645, 646, 679, 683, 684, 749, 767, 778, 796, 820, 821, 822, 823, 824, 825, 827, 828, 829, 831, 835, 842, 846, 847, 865, 871, 872, 877, 897, 916], "string": [4, 5, 7, 10, 11, 15, 25, 27, 29, 30, 34, 48, 56, 67, 94, 95, 105, 114, 115, 117, 119, 141, 145, 146, 147, 148, 162, 188, 194, 210, 212, 216, 219, 239, 275, 294, 297, 333, 337, 342, 353, 359, 366, 389, 405, 418, 419, 420, 421, 422, 424, 425, 426, 441, 444, 445, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 495, 497, 500, 514, 521, 524, 533, 545, 565, 572, 573, 574, 575, 580, 598, 605, 615, 618, 619, 637, 671, 689, 693, 737, 741, 746, 758, 771, 851, 852, 853, 857, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 916], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 572, 594, 637], "cfg": [5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 121, 188, 216, 239, 598, 615, 637], "previous": 5, "save": [5, 554], "share": [5, 48, 134, 239, 753, 916], "option": [5, 6, 7, 27, 57, 67, 89, 94, 97, 98, 99, 103, 106, 107, 109, 111, 114, 115, 116, 117, 162, 168, 172, 200, 207, 239, 379, 417, 418, 419, 420, 421, 422, 424, 425, 426, 438, 464, 491, 519, 533, 545, 554, 579, 580, 588, 637, 786, 790, 820, 821, 822, 823, 824, 825, 827, 828, 829, 835, 846, 872, 895, 916], "paramet": [5, 9, 10, 11, 12, 15, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 42, 45, 47, 49, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 120, 123, 124, 125, 128, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 159, 160, 161, 162, 164, 166, 168, 169, 171, 172, 174, 175, 176, 178, 180, 181, 182, 184, 185, 186, 188, 190, 191, 193, 194, 195, 196, 197, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 219, 221, 224, 231, 233, 239, 247, 250, 251, 260, 263, 266, 267, 268, 269, 270, 273, 274, 275, 282, 283, 284, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 320, 333, 336, 337, 341, 342, 345, 347, 348, 349, 350, 351, 354, 356, 357, 361, 362, 363, 365, 366, 370, 379, 382, 384, 387, 388, 389, 405, 406, 410, 411, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 478, 479, 484, 485, 488, 489, 490, 491, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 513, 514, 515, 517, 519, 520, 521, 526, 527, 528, 529, 530, 531, 533, 534, 535, 545, 558, 560, 562, 563, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 579, 580, 583, 584, 588, 589, 591, 592, 593, 594, 595, 598, 599, 600, 601, 602, 603, 604, 605, 608, 610, 611, 612, 615, 616, 617, 618, 619, 621, 624, 631, 633, 637, 642, 645, 646, 655, 658, 662, 663, 664, 665, 666, 669, 670, 671, 678, 679, 680, 682, 683, 684, 686, 687, 688, 689, 690, 691, 693, 696, 697, 698, 699, 703, 704, 705, 706, 707, 708, 710, 711, 715, 716, 717, 720, 737, 740, 741, 745, 746, 749, 752, 753, 754, 755, 756, 759, 760, 761, 762, 767, 768, 770, 771, 785, 786, 790, 792, 796, 809, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 842, 846, 847, 848, 850, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 881, 882, 884, 887, 888, 894, 895, 896, 897, 898, 900, 901, 904, 905, 906, 907, 916], "json": [5, 7, 29, 30, 101, 102, 108, 239, 453, 454, 554, 572, 594, 618, 637, 861, 862], "produc": [5, 116, 117, 268, 395, 520, 584, 637, 664], "reset": [6, 121], "default": [6, 23, 24, 25, 27, 28, 29, 30, 31, 62, 82, 84, 85, 86, 87, 88, 89, 92, 94, 95, 103, 105, 114, 115, 116, 117, 120, 132, 134, 146, 148, 149, 159, 162, 168, 174, 176, 184, 185, 186, 202, 208, 210, 217, 239, 283, 287, 288, 297, 347, 348, 349, 350, 362, 384, 389, 402, 403, 406, 411, 428, 434, 451, 457, 459, 463, 464, 469, 470, 494, 501, 515, 519, 529, 531, 533, 545, 563, 565, 573, 575, 580, 588, 603, 610, 618, 637, 679, 683, 684, 693, 752, 753, 754, 755, 756, 767, 796, 805, 806, 809, 814, 831, 842, 850, 859, 865, 867, 871, 872, 877, 905, 916], "state": [6, 64, 75, 504, 554, 560, 565, 567, 592, 601, 637], "note": [6, 15, 27, 57, 67, 82, 83, 84, 86, 88, 92, 94, 96, 97, 103, 106, 115, 116, 117, 120, 121, 123, 124, 128, 137, 147, 148, 159, 161, 162, 172, 175, 184, 185, 201, 203, 207, 211, 212, 216, 239, 251, 270, 287, 308, 309, 313, 314, 333, 337, 342, 366, 372, 374, 418, 419, 420, 421, 422, 424, 425, 426, 438, 455, 457, 458, 463, 469, 470, 477, 504, 513, 528, 545, 560, 567, 568, 574, 575, 576, 580, 583, 595, 601, 612, 615, 637, 666, 683, 705, 706, 737, 746, 834, 835, 841, 846, 863, 865, 866, 871, 877, 886, 916], "oper": [6, 27, 48, 65, 72, 73, 82, 84, 85, 86, 87, 88, 94, 103, 124, 136, 141, 146, 153, 163, 169, 172, 174, 175, 179, 199, 203, 204, 207, 210, 218, 219, 239, 246, 288, 305, 306, 307, 308, 309, 310, 378, 398, 413, 491, 492, 500, 510, 545, 567, 573, 576, 579, 583, 589, 619, 637, 645, 703, 704, 705, 706, 707, 816, 893, 896, 897, 898, 906, 916], "remov": [6, 130, 211, 239, 251, 263, 351, 353, 457, 463, 469, 511, 526, 531, 545, 562, 612, 637, 658, 758, 865, 871, 877, 916], "from": [6, 25, 27, 57, 67, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 105, 106, 107, 108, 109, 112, 113, 114, 115, 116, 117, 129, 130, 134, 136, 145, 147, 148, 159, 160, 162, 163, 168, 180, 184, 186, 188, 207, 208, 210, 212, 239, 305, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 351, 365, 379, 402, 403, 406, 428, 451, 453, 459, 470, 486, 488, 497, 507, 508, 509, 519, 531, 544, 545, 562, 567, 572, 574, 575, 580, 588, 594, 595, 598, 610, 616, 637, 645, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 753, 786, 790, 805, 806, 807, 809, 831, 859, 861, 867, 904, 907, 916], "environ": [6, 23], "local": [6, 97, 106, 810, 811, 916], "non": [6, 27, 57, 87, 160, 168, 188, 211, 216, 239, 406, 417, 418, 419, 420, 421, 422, 424, 425, 426, 446, 452, 497, 500, 533, 545, 588, 598, 612, 615, 637, 684, 809, 820, 821, 822, 823, 824, 825, 827, 828, 829, 854, 860, 897, 916], "env": 6, "back": [6, 57, 136, 204, 239, 405, 545, 645, 898, 916], "valu": [6, 9, 10, 23, 25, 27, 29, 42, 43, 55, 57, 65, 66, 85, 87, 94, 95, 96, 105, 110, 112, 113, 114, 115, 116, 117, 119, 121, 123, 124, 132, 136, 137, 138, 142, 145, 147, 148, 149, 150, 154, 159, 165, 166, 167, 168, 170, 172, 174, 176, 177, 178, 180, 184, 185, 186, 190, 191, 194, 195, 196, 197, 200, 201, 204, 210, 211, 212, 213, 222, 223, 225, 226, 227, 229, 230, 239, 245, 246, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 268, 269, 272, 273, 274, 276, 278, 279, 280, 282, 285, 286, 288, 289, 290, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 306, 309, 310, 311, 313, 314, 316, 318, 330, 334, 343, 348, 349, 350, 352, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 371, 372, 374, 375, 376, 377, 380, 381, 385, 386, 387, 389, 390, 391, 392, 399, 400, 401, 402, 403, 404, 406, 410, 411, 414, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 429, 430, 431, 432, 435, 436, 437, 438, 440, 442, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 460, 461, 464, 466, 467, 468, 473, 477, 479, 480, 481, 482, 484, 485, 486, 487, 488, 492, 497, 500, 502, 504, 505, 506, 512, 513, 519, 521, 522, 523, 524, 525, 528, 529, 534, 537, 545, 563, 568, 569, 574, 575, 577, 578, 585, 586, 587, 588, 590, 593, 595, 599, 600, 605, 606, 607, 612, 613, 618, 622, 623, 625, 626, 627, 629, 630, 637, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 660, 661, 664, 665, 668, 669, 670, 672, 674, 675, 676, 678, 682, 685, 687, 688, 689, 690, 693, 694, 697, 698, 699, 701, 702, 707, 708, 709, 710, 712, 713, 716, 718, 734, 738, 747, 753, 754, 755, 756, 759, 760, 761, 764, 766, 767, 770, 771, 773, 775, 776, 778, 779, 780, 781, 782, 783, 787, 796, 797, 798, 800, 801, 803, 805, 806, 807, 808, 809, 812, 813, 814, 820, 821, 822, 823, 824, 825, 827, 828, 829, 831, 832, 833, 834, 835, 838, 839, 843, 844, 845, 846, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 866, 868, 869, 872, 874, 875, 876, 881, 886, 888, 889, 890, 891, 898, 899, 902, 904, 906, 907, 916], "exampl": [6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 48, 57, 58, 59, 60, 61, 62, 65, 66, 67, 82, 84, 85, 86, 87, 88, 89, 91, 92, 95, 96, 97, 98, 105, 106, 110, 111, 112, 113, 114, 115, 116, 117, 120, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 509, 510, 511, 512, 513, 514, 515, 517, 519, 520, 521, 522, 523, 524, 525, 526, 528, 530, 531, 532, 533, 534, 535, 536, 537, 545, 554, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 637, 642, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 665, 666, 667, 670, 671, 673, 678, 679, 680, 682, 684, 691, 693, 694, 695, 696, 697, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 759, 760, 761, 762, 764, 767, 768, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 809, 810, 811, 813, 814, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 838, 842, 843, 844, 845, 847, 848, 850, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 906, 907, 916], "current": [7, 23, 83, 96, 123, 125, 126, 239, 288, 337, 406, 545, 554, 558, 559, 637, 696, 700, 741, 809, 916], "activ": [8, 13, 14, 16, 17, 18, 19, 22, 270, 666], "bool": [8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 29, 31, 42, 57, 62, 64, 65, 82, 83, 87, 94, 95, 99, 103, 105, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 119, 123, 125, 126, 138, 139, 141, 142, 144, 145, 146, 147, 152, 153, 155, 156, 157, 162, 174, 176, 186, 192, 194, 200, 204, 207, 208, 209, 212, 214, 216, 223, 225, 226, 229, 239, 248, 249, 250, 251, 260, 263, 267, 268, 270, 284, 287, 292, 296, 305, 306, 307, 308, 309, 310, 338, 347, 348, 349, 350, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 387, 393, 394, 411, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 430, 432, 433, 438, 440, 441, 445, 447, 449, 459, 460, 461, 465, 466, 468, 470, 475, 484, 485, 488, 492, 493, 494, 495, 501, 504, 519, 529, 531, 533, 537, 545, 558, 560, 565, 567, 569, 570, 573, 574, 579, 580, 584, 592, 601, 602, 603, 605, 610, 611, 615, 623, 625, 626, 629, 637, 643, 644, 645, 646, 655, 658, 663, 664, 666, 680, 683, 687, 691, 696, 703, 704, 705, 706, 707, 742, 752, 754, 755, 756, 762, 766, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 810, 811, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 835, 836, 841, 846, 848, 853, 855, 857, 867, 868, 869, 873, 874, 876, 878, 896, 897, 898, 900, 901, 904, 906, 916], "ascii": [8, 15, 456, 458, 462, 473, 864, 866, 870, 881], "charact": [8, 10, 15, 21, 25, 94, 95, 105, 239, 333, 450, 455, 456, 457, 462, 463, 465, 466, 469, 473, 592, 637, 737, 858, 863, 864, 865, 870, 871, 873, 874, 877, 881], "print": [8, 10, 12, 14, 20, 95, 111, 133, 145, 146, 160, 163, 218, 239, 364, 545, 577, 637, 778, 820, 916], "tabl": [8, 11, 12, 14, 15, 16, 17, 18, 20, 21, 26, 27, 47, 82, 94, 95, 97, 105, 106, 176, 199, 204, 210, 211, 239, 612, 637, 898, 916], "outlin": 8, "fals": [8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 23, 27, 29, 31, 57, 62, 64, 67, 83, 87, 94, 95, 98, 99, 103, 105, 108, 109, 112, 113, 114, 115, 116, 117, 123, 125, 126, 129, 141, 142, 144, 145, 146, 147, 152, 153, 155, 156, 157, 159, 162, 163, 166, 171, 172, 174, 176, 177, 184, 185, 186, 192, 194, 200, 204, 207, 212, 214, 216, 222, 223, 225, 226, 227, 229, 232, 239, 248, 249, 251, 260, 263, 267, 270, 284, 287, 305, 306, 307, 308, 309, 310, 338, 347, 348, 349, 350, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 387, 411, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 430, 433, 438, 440, 441, 445, 449, 453, 459, 460, 461, 465, 466, 468, 470, 484, 485, 488, 492, 494, 495, 501, 504, 519, 529, 531, 533, 537, 545, 558, 559, 560, 565, 567, 573, 574, 579, 580, 582, 584, 592, 601, 602, 603, 605, 615, 622, 623, 625, 626, 627, 629, 632, 637, 645, 655, 658, 666, 680, 683, 691, 695, 696, 703, 704, 705, 706, 707, 742, 752, 754, 755, 756, 762, 771, 772, 773, 775, 778, 779, 780, 781, 782, 783, 785, 786, 787, 790, 802, 810, 811, 814, 815, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 836, 841, 846, 848, 853, 857, 861, 867, 868, 869, 873, 874, 876, 878, 896, 897, 898, 900, 901, 904, 906, 907, 916], "revert": 8, "abc": [8, 13, 14, 16, 17, 18, 19, 20, 460, 868], "xyz": [8, 13, 14, 16, 17, 18, 19, 20, 446, 452, 854, 860, 895, 916], "f64": [8, 11, 13, 14, 16, 17, 18, 19, 20, 57, 59, 61, 66, 85, 110, 116, 125, 126, 128, 129, 130, 132, 133, 137, 138, 141, 144, 145, 146, 153, 161, 162, 166, 167, 177, 178, 193, 194, 195, 213, 216, 219, 223, 225, 226, 227, 228, 229, 231, 232, 239, 245, 252, 253, 254, 255, 256, 257, 279, 296, 298, 302, 303, 310, 313, 314, 338, 347, 348, 349, 350, 351, 352, 360, 365, 372, 374, 375, 376, 378, 379, 384, 385, 390, 391, 392, 399, 402, 403, 406, 407, 410, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 436, 437, 438, 442, 443, 481, 482, 489, 496, 497, 499, 501, 503, 511, 522, 523, 526, 531, 532, 536, 545, 558, 562, 563, 568, 569, 573, 579, 580, 586, 587, 593, 605, 606, 613, 615, 616, 619, 623, 625, 626, 627, 628, 629, 631, 632, 637, 647, 648, 649, 650, 651, 652, 694, 701, 702, 707, 708, 709, 742, 755, 756, 760, 764, 809, 820, 822, 823, 825, 826, 827, 829, 830, 844, 845, 849, 890, 891, 903, 916], "fmt": [9, 27, 239, 340, 364, 470, 514, 545, 577, 637, 744, 878], "mix": [9, 470, 709, 878, 916], "control": [9, 27, 115, 239, 565, 637], "how": [9, 27, 48, 65, 85, 88, 96, 132, 161, 210, 211, 239, 268, 269, 297, 311, 365, 405, 414, 545, 563, 579, 612, 637, 664, 665, 693, 710, 916], "float": [9, 27, 36, 37, 42, 66, 110, 112, 113, 114, 116, 117, 134, 137, 162, 178, 186, 191, 231, 239, 267, 268, 298, 299, 300, 301, 313, 314, 338, 347, 348, 349, 350, 355, 360, 365, 366, 368, 371, 372, 374, 375, 376, 384, 390, 399, 402, 403, 407, 410, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 432, 496, 506, 521, 522, 523, 524, 527, 529, 532, 534, 536, 545, 568, 580, 593, 600, 601, 631, 637, 663, 664, 691, 694, 697, 698, 699, 708, 711, 742, 752, 753, 754, 755, 756, 760, 764, 771, 777, 790, 793, 797, 798, 799, 800, 805, 806, 812, 813, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 834, 835, 846, 850, 886, 905, 916], "point": [9, 27, 36, 37, 106, 116, 117, 137, 147, 163, 239, 298, 313, 314, 338, 355, 360, 372, 374, 427, 428, 545, 568, 574, 584, 595, 637, 694, 742, 760, 764, 777, 830, 831, 916], "displai": [9, 14, 18, 27, 239], "full": [9, 27, 34, 63, 94, 95, 97, 105, 106, 239, 584, 637], "format": [9, 11, 15, 25, 27, 93, 94, 95, 105, 110, 135, 145, 159, 168, 185, 201, 237, 239, 337, 340, 459, 470, 492, 566, 572, 588, 618, 637, 744, 867, 878, 915], "number": [9, 10, 12, 20, 21, 25, 27, 31, 57, 76, 82, 84, 86, 88, 91, 92, 94, 95, 98, 105, 108, 115, 116, 120, 125, 134, 135, 137, 138, 150, 159, 160, 163, 164, 171, 172, 186, 190, 191, 197, 210, 222, 224, 233, 239, 261, 269, 274, 282, 286, 288, 290, 304, 310, 311, 321, 323, 328, 330, 338, 343, 344, 346, 348, 349, 350, 354, 356, 361, 363, 372, 374, 381, 382, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 431, 432, 434, 455, 458, 466, 467, 478, 484, 501, 502, 517, 531, 535, 545, 558, 566, 567, 568, 569, 576, 583, 592, 599, 600, 603, 608, 622, 624, 633, 637, 665, 670, 678, 682, 684, 696, 707, 710, 721, 723, 732, 734, 742, 747, 748, 750, 753, 754, 755, 756, 759, 761, 768, 777, 792, 802, 803, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 838, 839, 842, 850, 863, 866, 874, 875, 887, 900, 905, 916], "int": [10, 12, 20, 21, 25, 27, 31, 42, 59, 85, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 105, 106, 107, 108, 109, 114, 115, 116, 117, 118, 120, 124, 125, 134, 137, 138, 140, 149, 150, 151, 153, 159, 160, 162, 164, 165, 166, 170, 171, 172, 182, 184, 186, 189, 190, 191, 193, 195, 196, 197, 198, 205, 210, 213, 215, 217, 224, 233, 239, 267, 268, 269, 273, 274, 282, 283, 286, 287, 288, 290, 299, 300, 301, 310, 311, 348, 349, 350, 354, 355, 356, 361, 362, 363, 366, 382, 406, 407, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 434, 439, 443, 451, 456, 459, 462, 464, 466, 467, 473, 478, 479, 480, 484, 489, 494, 501, 502, 506, 507, 508, 509, 515, 517, 521, 523, 524, 525, 526, 529, 531, 532, 533, 534, 535, 536, 545, 558, 567, 568, 569, 576, 580, 583, 592, 599, 600, 603, 604, 606, 608, 609, 613, 614, 617, 624, 633, 637, 653, 654, 663, 664, 665, 669, 670, 678, 679, 682, 683, 684, 691, 695, 696, 697, 698, 699, 707, 710, 753, 754, 755, 756, 759, 760, 761, 767, 768, 771, 791, 792, 797, 798, 800, 802, 803, 805, 806, 807, 808, 809, 812, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 838, 839, 842, 847, 850, 859, 864, 867, 870, 872, 874, 875, 881, 886, 887, 888, 889, 900, 905, 916], "liter": [11, 15, 62, 67, 98, 117, 145, 159, 165, 166, 170, 171, 174, 184, 185, 188, 196, 200, 216, 239, 248, 249, 316, 354, 366, 378, 412, 445, 460, 461, 494, 497, 500, 507, 508, 519, 529, 533, 537, 545, 569, 598, 615, 637, 643, 644, 716, 759, 771, 834, 835, 853, 868, 869, 916], "left": [11, 67, 112, 113, 147, 148, 161, 162, 211, 239, 348, 349, 350, 365, 366, 418, 419, 420, 421, 422, 424, 425, 426, 429, 456, 473, 483, 497, 504, 505, 513, 528, 545, 574, 575, 579, 580, 612, 637, 754, 755, 756, 771, 832, 864, 881, 899, 916], "center": [11, 348, 349, 350, 417, 418, 419, 420, 421, 422, 424, 425, 426, 545, 754, 755, 756, 820, 821, 822, 823, 824, 825, 827, 828, 829, 916], "right": [11, 13, 27, 67, 94, 95, 112, 113, 147, 148, 161, 162, 239, 348, 349, 350, 366, 418, 419, 420, 421, 422, 424, 425, 426, 429, 438, 462, 497, 545, 574, 575, 579, 580, 637, 754, 755, 756, 771, 832, 846, 870, 916], "cell": 11, "align": [11, 57, 473, 881], "keyerror": [11, 15], "recognis": [11, 15, 27, 114, 239], "column_abc": 11, "column_xyz": 11, "If": [12, 25, 27, 29, 30, 31, 48, 62, 63, 66, 67, 82, 83, 84, 85, 86, 87, 88, 89, 94, 95, 97, 98, 99, 103, 105, 106, 107, 108, 109, 123, 124, 132, 136, 145, 147, 148, 159, 162, 168, 172, 185, 186, 193, 201, 202, 203, 207, 208, 210, 211, 239, 251, 283, 288, 299, 300, 301, 316, 357, 379, 387, 389, 413, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 434, 438, 439, 453, 455, 457, 458, 463, 464, 465, 466, 467, 469, 470, 484, 491, 493, 494, 501, 502, 504, 513, 519, 529, 531, 533, 545, 563, 565, 574, 575, 579, 580, 584, 588, 595, 603, 604, 610, 612, 618, 621, 637, 645, 646, 679, 697, 698, 699, 708, 716, 766, 790, 816, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 836, 842, 846, 847, 861, 863, 865, 866, 871, 872, 873, 874, 875, 877, 878, 893, 897, 900, 906, 916], "rang": [12, 66, 67, 96, 134, 147, 160, 239, 318, 330, 334, 335, 337, 342, 343, 365, 494, 499, 507, 508, 545, 574, 637, 708, 718, 734, 738, 739, 741, 746, 747, 753, 809, 916], "100": [12, 27, 85, 88, 94, 95, 105, 108, 239, 473, 494, 637, 821, 822, 824, 916], "98": [12, 153, 239, 440, 479, 484, 545], "99": [12, 137, 138, 153, 156, 239, 246, 354, 356, 440, 479, 484, 545, 568, 569, 637, 752, 759, 916], "10": [12, 24, 25, 27, 28, 31, 57, 65, 66, 67, 96, 105, 111, 116, 117, 126, 136, 144, 147, 148, 150, 152, 153, 154, 171, 175, 177, 181, 182, 188, 197, 216, 219, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 239, 250, 258, 259, 260, 262, 263, 269, 274, 282, 283, 286, 299, 304, 306, 309, 311, 313, 314, 316, 337, 342, 345, 362, 363, 365, 370, 378, 381, 382, 385, 406, 419, 439, 473, 478, 497, 504, 510, 513, 515, 517, 520, 526, 531, 535, 545, 560, 574, 575, 576, 578, 583, 591, 592, 598, 603, 607, 608, 615, 619, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 637, 646, 665, 670, 678, 679, 682, 697, 708, 710, 716, 746, 749, 752, 768, 778, 792, 794, 809, 834, 835, 887, 916], "95": [12, 246, 545], "96": [12, 246, 545], "97": [12, 153, 239, 246, 545], "move": [13, 348, 349, 350, 418, 419, 421, 425, 545, 754, 755, 756, 821, 822, 824, 828, 916], "inlin": 13, "parenthes": 13, "below": [14, 97, 106, 132, 239, 365, 537, 545, 563, 637], "when": [14, 18, 27, 31, 48, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 89, 94, 95, 96, 99, 103, 105, 106, 107, 108, 116, 117, 119, 124, 133, 134, 136, 138, 141, 147, 175, 184, 188, 194, 202, 208, 239, 299, 300, 301, 348, 349, 350, 356, 387, 389, 396, 440, 441, 457, 463, 469, 470, 495, 504, 513, 545, 569, 574, 584, 598, 603, 605, 610, 637, 645, 697, 698, 699, 753, 754, 755, 756, 761, 796, 834, 835, 865, 871, 877, 894, 916], "ascii_ful": 15, "ascii_full_condens": 15, "ascii_no_bord": 15, "ascii_borders_onli": 15, "ascii_borders_only_condens": 15, "ascii_horizontal_onli": 15, "ascii_markdown": 15, "utf8_ful": [15, 57], "utf8_full_condens": 15, "utf8_no_bord": 15, "utf8_borders_onli": 15, "utf8_horizontal_onli": 15, "noth": [15, 446, 451, 452, 454, 854, 859, 860, 862], "none": [15, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 42, 43, 47, 57, 66, 67, 82, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 120, 124, 125, 129, 132, 137, 138, 145, 147, 148, 149, 154, 161, 162, 163, 166, 168, 172, 173, 184, 186, 188, 191, 193, 194, 200, 202, 204, 207, 208, 209, 210, 211, 212, 216, 219, 239, 247, 250, 251, 262, 273, 283, 288, 290, 299, 300, 301, 304, 306, 309, 313, 314, 336, 337, 342, 348, 349, 350, 351, 354, 355, 356, 361, 362, 365, 366, 372, 373, 374, 375, 376, 381, 387, 389, 404, 406, 412, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 432, 433, 434, 435, 439, 440, 444, 445, 448, 449, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 466, 467, 468, 469, 470, 473, 474, 475, 483, 491, 493, 494, 497, 500, 502, 508, 509, 511, 512, 519, 520, 529, 530, 532, 533, 536, 545, 558, 559, 563, 568, 569, 574, 575, 578, 579, 580, 582, 584, 588, 598, 600, 601, 602, 603, 604, 605, 610, 611, 612, 615, 616, 618, 619, 621, 637, 646, 653, 654, 669, 679, 684, 696, 697, 708, 709, 711, 724, 725, 726, 731, 740, 741, 746, 751, 752, 754, 755, 756, 759, 760, 761, 763, 766, 767, 769, 770, 771, 782, 783, 786, 790, 796, 797, 798, 799, 800, 804, 813, 820, 821, 822, 823, 824, 825, 827, 828, 829, 831, 837, 839, 842, 843, 846, 847, 850, 852, 853, 856, 857, 861, 862, 863, 864, 865, 866, 867, 870, 871, 872, 874, 875, 876, 877, 878, 892, 895, 898, 899, 905, 906, 916], "rounded_corn": 15, "style": [15, 27, 176, 239], "border": 15, "line": [15, 27, 94, 95, 98, 105, 145, 155, 157, 239], "includ": [15, 23, 25, 27, 63, 97, 106, 116, 134, 147, 207, 210, 239, 338, 366, 465, 466, 504, 545, 574, 637, 742, 753, 771, 873, 874, 906, 916], "row": [15, 20, 25, 27, 29, 31, 57, 58, 60, 74, 76, 81, 85, 86, 88, 94, 95, 98, 99, 103, 105, 107, 108, 109, 112, 115, 116, 124, 125, 132, 136, 139, 141, 145, 147, 149, 150, 155, 157, 159, 160, 162, 163, 164, 168, 172, 186, 193, 197, 198, 201, 208, 210, 211, 217, 221, 224, 233, 239, 251, 261, 271, 353, 363, 382, 406, 415, 439, 450, 478, 495, 504, 505, 513, 517, 521, 524, 528, 535, 545, 558, 560, 563, 567, 570, 571, 574, 576, 580, 581, 583, 584, 588, 603, 604, 608, 609, 610, 612, 617, 621, 624, 633, 637, 645, 667, 758, 768, 792, 809, 818, 847, 858, 887, 916], "divid": [15, 337, 342, 348, 349, 350, 379, 545, 741, 746, 754, 755, 756, 790, 916], "same": [15, 27, 48, 57, 64, 99, 115, 124, 130, 146, 194, 208, 216, 219, 221, 239, 245, 250, 353, 405, 417, 418, 419, 420, 421, 422, 424, 425, 426, 441, 475, 498, 545, 562, 573, 584, 605, 610, 615, 619, 621, 637, 641, 645, 646, 716, 758, 820, 821, 822, 823, 824, 825, 827, 828, 829, 907, 916], "dens": [15, 145, 239, 411, 545, 814, 916], "space": 15, "horizont": [15, 65, 141, 152, 210, 239, 500, 504, 505, 506, 510, 513, 521, 524, 528, 534], "markdown": 15, "compat": [15, 27, 31, 96, 106, 239, 603, 637], "No": 15, "appli": [15, 25, 27, 65, 105, 114, 116, 117, 141, 175, 239, 318, 321, 323, 324, 326, 328, 330, 331, 334, 335, 338, 343, 344, 346, 349, 350, 387, 417, 418, 419, 421, 425, 470, 491, 494, 504, 505, 513, 520, 528, 545, 576, 583, 584, 591, 637, 718, 721, 723, 727, 729, 732, 734, 735, 738, 739, 742, 747, 748, 750, 755, 756, 820, 821, 822, 824, 828, 878, 916], "round": [15, 27, 59, 239, 298, 360, 481, 545, 694, 764, 916], "corner": 15, "op": [15, 117, 239, 414, 545, 637, 916], "The": [15, 26, 27, 31, 42, 49, 57, 63, 82, 84, 85, 86, 88, 91, 94, 96, 103, 105, 106, 124, 131, 133, 145, 146, 147, 148, 149, 154, 159, 162, 169, 174, 184, 185, 188, 209, 212, 216, 219, 221, 239, 287, 288, 290, 291, 292, 293, 318, 330, 333, 334, 337, 342, 343, 351, 354, 361, 362, 387, 405, 411, 414, 417, 418, 419, 420, 421, 422, 424, 425, 426, 435, 438, 444, 447, 448, 453, 455, 456, 457, 462, 463, 469, 473, 498, 511, 515, 530, 533, 538, 539, 541, 545, 546, 549, 550, 551, 574, 575, 576, 578, 580, 583, 584, 589, 592, 598, 603, 611, 615, 619, 621, 637, 683, 686, 687, 688, 696, 718, 734, 737, 738, 741, 746, 747, 759, 767, 770, 814, 820, 821, 822, 823, 824, 825, 827, 828, 829, 843, 846, 852, 855, 856, 861, 863, 864, 865, 870, 871, 877, 881, 908, 910, 912, 916, 919, 920, 921], "one": [15, 26, 27, 57, 74, 82, 84, 85, 86, 87, 88, 117, 138, 139, 145, 146, 147, 148, 159, 168, 176, 184, 185, 206, 220, 239, 246, 356, 378, 417, 440, 479, 491, 521, 524, 534, 545, 569, 570, 573, 574, 575, 588, 616, 620, 637, 645, 761, 786, 820, 882, 916], "more": [15, 27, 29, 31, 57, 81, 82, 83, 84, 85, 86, 87, 88, 97, 103, 106, 116, 117, 124, 128, 159, 163, 168, 172, 184, 185, 186, 208, 221, 239, 251, 299, 300, 301, 378, 379, 387, 428, 438, 485, 521, 524, 534, 545, 588, 603, 610, 621, 637, 646, 697, 698, 699, 786, 790, 831, 846, 901, 916, 923], "semigraph": 15, "box": [15, 124, 239], "draw": [15, 20, 21], "found": [15, 25, 69, 78, 80, 85, 133, 211, 239, 429, 454, 470, 545, 612, 637, 832, 862, 916], "unicod": 15, "block": [15, 595, 617, 637, 834, 835, 916], "http": [15, 27, 83, 96, 123, 128, 239, 451, 859, 923], "en": 15, "wikipedia": 15, "org": [15, 83, 96, 123, 128, 239], "wiki": 15, "drawing_charact": 15, "box_draw": 15, "hide": [16, 17, 18, 19, 27, 239], "etc": [16, 27, 82, 94, 97, 99, 103, 106, 107, 109, 239, 494, 834, 835, 916], "inform": [18, 63, 97, 106, 128, 239, 299, 300, 301, 379, 438, 545, 592, 637, 697, 698, 699, 790, 846, 916], "separ": [19, 25, 89, 174, 176, 202, 207, 209, 239, 251, 271, 275, 450, 500, 504, 505, 545, 611, 637, 667, 671, 858, 885, 894, 916], "between": [19, 65, 114, 115, 116, 117, 178, 231, 239, 275, 296, 312, 366, 406, 410, 422, 444, 501, 503, 526, 527, 531, 545, 593, 631, 637, 671, 691, 711, 771, 809, 813, 825, 852, 916], "set_tbl_column_data_type_inlin": 19, "max": [20, 27, 31, 116, 117, 129, 138, 146, 147, 148, 176, 239, 299, 300, 306, 356, 405, 411, 418, 430, 467, 545, 569, 573, 574, 575, 603, 637, 684, 697, 698, 703, 709, 761, 814, 821, 836, 875, 916], "both": [20, 25, 48, 67, 96, 147, 148, 161, 162, 169, 184, 239, 250, 366, 418, 419, 420, 421, 422, 424, 425, 426, 545, 574, 575, 579, 580, 589, 637, 771, 916], "element": [20, 92, 117, 120, 251, 252, 253, 254, 255, 256, 257, 268, 270, 271, 302, 303, 305, 306, 307, 308, 309, 310, 352, 362, 370, 385, 406, 411, 414, 429, 435, 436, 437, 442, 466, 467, 481, 482, 484, 545, 646, 647, 648, 649, 650, 651, 652, 664, 666, 667, 696, 701, 702, 703, 704, 705, 706, 707, 757, 762, 778, 794, 809, 814, 832, 843, 844, 845, 849, 850, 874, 875, 890, 891, 900, 901, 905, 916], "width": [21, 27, 94, 95, 239, 456, 462, 473, 637, 864, 870, 881], "char": [21, 48, 458, 866], "enabl": [22, 188, 216, 239, 430, 545, 598, 615, 637, 836, 916], "addit": [22, 27, 85, 97, 106, 114, 115, 130, 135, 146, 174, 188, 194, 209, 216, 219, 239, 351, 354, 405, 441, 497, 498, 511, 530, 533, 545, 562, 566, 573, 598, 605, 611, 615, 619, 637, 759, 916], "verbos": 22, "debug": [22, 560, 567, 584, 637], "log": [22, 59, 347, 484, 545, 752, 900, 916], "if_set": 23, "dict": [23, 27, 31, 58, 60, 63, 82, 84, 85, 86, 87, 88, 94, 95, 97, 98, 99, 100, 103, 104, 105, 106, 107, 109, 116, 159, 174, 180, 184, 185, 187, 200, 201, 239, 389, 545, 595, 597, 637, 796, 916], "show": [23, 132, 145, 163, 173, 239, 563, 592, 601, 637], "variabl": [23, 89, 168, 202, 239, 588, 637, 894, 916], "chang": [23, 57, 66, 94, 95, 110, 210, 211, 212, 239, 251, 310, 311, 337, 389, 406, 418, 419, 420, 421, 422, 424, 425, 426, 545, 612, 637, 707, 708, 740, 741, 809, 841, 916], "restrict": [23, 467, 875], "dictionari": [23, 27, 82, 84, 85, 86, 88, 94, 95, 100, 104, 105, 159, 174, 184, 185, 200, 201, 239, 389, 545, 637, 709, 796, 916], "those": [23, 27, 94, 239, 411, 545, 814, 916], "_have_": 23, "been": [23, 27, 66, 89, 239, 411, 545, 814, 916], "set_stat": 23, "all_stat": 23, "file": [24, 25, 28, 29, 30, 31, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 136, 239, 567, 594, 602, 603, 618, 637, 645, 916], "binaryio": [24, 28, 93, 94, 98, 99, 100, 103, 104, 239], "bytesio": [24, 25, 27, 28, 31, 93, 94, 95, 98, 99, 103, 239], "path": [24, 25, 27, 28, 29, 30, 31, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 239, 430, 454, 545, 594, 602, 603, 618, 637, 836, 862, 916], "compress": [24, 28, 31, 239, 602, 603, 637], "avrocompress": [24, 239], "uncompress": [24, 28, 31, 99, 107, 239, 603, 637], "write": [24, 25, 26, 27, 28, 29, 31, 95, 99, 239, 299, 300, 301, 545, 582, 601, 603, 618, 637, 697, 698, 699, 916], "apach": [24, 31, 93, 96, 239], "avro": [24, 93, 239, 554], "should": [24, 25, 27, 28, 29, 30, 31, 82, 84, 86, 88, 89, 92, 97, 114, 115, 117, 120, 123, 124, 130, 147, 159, 162, 184, 185, 201, 202, 209, 221, 239, 246, 251, 270, 297, 310, 345, 351, 372, 374, 417, 418, 419, 420, 421, 422, 424, 425, 426, 429, 438, 498, 511, 519, 545, 562, 574, 579, 580, 584, 601, 602, 603, 611, 618, 621, 637, 646, 666, 693, 707, 749, 820, 821, 822, 823, 824, 825, 827, 828, 829, 832, 846, 916], "written": [24, 25, 27, 28, 29, 30, 31, 239, 602, 603, 618, 637], "snappi": [24, 31, 239, 603, 637], "deflat": [24, 239], "import": [24, 25, 27, 28, 31, 34, 57, 67, 82, 86, 87, 105, 106, 110, 112, 113, 114, 115, 116, 117, 129, 145, 147, 160, 162, 188, 204, 210, 212, 239, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 509, 519, 574, 580, 584, 598, 637, 701, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 775, 779, 780, 781, 786, 820, 844, 890, 916], "pathlib": [24, 25, 28, 31, 105, 108, 239, 602, 603, 637], "foo": [24, 25, 28, 29, 30, 31, 89, 124, 127, 128, 130, 131, 132, 133, 136, 139, 140, 141, 142, 143, 144, 149, 150, 151, 152, 153, 154, 156, 161, 164, 165, 166, 167, 170, 173, 176, 178, 180, 181, 182, 184, 186, 187, 188, 189, 190, 191, 193, 195, 196, 197, 199, 201, 202, 203, 204, 205, 207, 208, 209, 213, 214, 215, 218, 239, 247, 267, 272, 273, 276, 277, 299, 300, 301, 333, 363, 364, 407, 415, 431, 432, 444, 446, 448, 450, 452, 457, 463, 465, 467, 469, 471, 472, 478, 480, 491, 494, 496, 498, 501, 502, 503, 512, 516, 517, 519, 521, 522, 523, 524, 525, 526, 527, 530, 531, 532, 535, 536, 537, 545, 561, 562, 563, 564, 570, 577, 578, 579, 595, 597, 598, 610, 611, 614, 616, 618, 637, 671, 697, 737, 818, 854, 856, 858, 860, 875, 916], "bar": [24, 25, 28, 29, 30, 31, 89, 124, 127, 128, 130, 131, 132, 133, 136, 139, 140, 141, 142, 143, 144, 150, 152, 153, 154, 156, 161, 164, 165, 166, 167, 170, 173, 176, 178, 180, 181, 182, 184, 186, 187, 188, 190, 191, 193, 195, 196, 197, 199, 201, 202, 203, 204, 205, 208, 209, 213, 214, 218, 239, 247, 277, 364, 438, 448, 450, 465, 467, 491, 496, 498, 501, 502, 503, 512, 517, 521, 522, 523, 524, 525, 526, 530, 531, 532, 535, 536, 537, 545, 561, 562, 563, 564, 570, 577, 578, 579, 595, 597, 598, 610, 611, 614, 618, 637, 671, 846, 856, 858, 875, 916], "ham": [24, 25, 28, 31, 89, 127, 128, 130, 131, 132, 133, 139, 140, 142, 149, 150, 152, 161, 165, 166, 167, 170, 173, 178, 180, 182, 184, 186, 187, 188, 190, 191, 193, 195, 196, 197, 202, 203, 204, 205, 208, 213, 214, 239, 498, 561, 562, 563, 564, 570, 579, 595, 597, 598, 610, 616, 637], "d": [24, 25, 28, 31, 48, 65, 85, 110, 129, 145, 149, 150, 153, 161, 164, 197, 199, 210, 214, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 239, 320, 340, 366, 433, 446, 452, 466, 470, 497, 515, 545, 579, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 637, 720, 744, 771, 854, 860, 874, 878, 916], "e": [24, 25, 28, 31, 48, 83, 94, 95, 98, 99, 103, 107, 109, 129, 145, 150, 164, 197, 199, 210, 239, 251, 347, 351, 366, 384, 389, 433, 438, 511, 545, 582, 595, 637, 752, 771, 833, 846, 897, 916], "dirpath": [24, 25, 28, 31, 105, 239], "new_fil": [24, 25, 28, 31, 239], "has_head": [25, 27, 94, 95, 98, 105, 239], "sep": [25, 91, 94, 95, 105, 239], "quot": [25, 94, 95, 105, 239], "batch_siz": [25, 94, 95, 108, 239], "1024": [25, 31, 94, 95, 108, 239, 603, 637], "datetime_format": [25, 239], "date_format": [25, 239, 340], "time_format": [25, 239], "float_precis": [25, 27, 239], "null_valu": [25, 94, 95, 105, 239], "comma": [25, 239], "csv": [25, 94, 95, 98, 105, 239, 554, 602, 603, 637], "result": [25, 29, 30, 57, 82, 86, 88, 96, 97, 105, 107, 109, 110, 117, 136, 147, 158, 172, 191, 204, 219, 239, 348, 349, 350, 354, 379, 405, 415, 417, 418, 419, 420, 421, 422, 424, 425, 426, 430, 432, 465, 466, 494, 504, 505, 506, 520, 534, 545, 557, 574, 584, 592, 600, 602, 603, 618, 619, 637, 645, 754, 755, 756, 790, 818, 820, 821, 822, 823, 824, 825, 827, 828, 829, 836, 839, 873, 874, 897, 916], "instead": [25, 29, 30, 62, 92, 94, 103, 116, 120, 124, 147, 159, 172, 174, 184, 185, 188, 204, 216, 239, 260, 263, 455, 457, 463, 469, 494, 529, 533, 545, 568, 574, 598, 615, 618, 637, 655, 658, 834, 835, 863, 865, 871, 877, 898, 916], "whether": [25, 67, 86, 88, 117, 239, 393, 394, 430, 545, 584, 637], "header": [25, 27, 31, 94, 95, 98, 105, 133, 176, 207, 239, 603, 637], "field": [25, 49, 78, 80, 85, 209, 239, 288, 389, 453, 466, 467, 475, 504, 505, 520, 533, 545, 611, 637, 684, 874, 875, 884, 885], "symbol": [25, 239], "byte": [25, 42, 94, 95, 98, 99, 100, 103, 104, 105, 134, 239, 291, 294, 295, 455, 458, 603, 637, 686, 689, 690, 753, 863, 866, 916], "process": [25, 239, 602, 603, 637], "per": [25, 27, 115, 116, 145, 172, 173, 194, 228, 230, 231, 239, 251, 270, 273, 287, 441, 495, 545, 605, 628, 630, 631, 637, 666, 669, 683], "thread": [25, 91, 94, 95, 96, 118, 239, 251, 270, 545, 666], "specifi": [25, 27, 57, 67, 69, 78, 80, 82, 116, 130, 134, 135, 138, 146, 174, 184, 188, 194, 209, 216, 219, 239, 348, 349, 350, 351, 356, 389, 405, 414, 441, 456, 462, 495, 497, 498, 511, 530, 533, 545, 562, 566, 569, 573, 598, 605, 611, 615, 619, 637, 753, 754, 755, 756, 761, 864, 870, 916], "defin": [25, 27, 34, 67, 114, 115, 116, 124, 147, 148, 172, 175, 221, 239, 251, 287, 366, 418, 419, 420, 421, 422, 424, 425, 426, 493, 519, 533, 545, 574, 575, 591, 621, 637, 646, 683, 771, 916], "chrono": [25, 239, 340, 470, 744, 878], "rust": [25, 31, 75, 99, 103, 124, 221, 239, 621], "crate": [25, 239], "fraction": [25, 112, 113, 186, 239, 338, 406, 428, 470, 545, 742, 809, 831, 916], "second": [25, 67, 147, 148, 162, 212, 239, 333, 337, 342, 418, 419, 420, 421, 422, 424, 425, 426, 470, 508, 509, 545, 574, 575, 580, 637, 737, 741, 746], "precis": [25, 27, 159, 185, 201, 239, 315, 470, 715], "infer": [25, 82, 84, 85, 86, 87, 88, 94, 95, 98, 105, 108, 114, 124, 239, 415, 453, 470, 545, 637, 818, 861, 916], "maximum": [25, 94, 95, 105, 115, 116, 117, 165, 239, 264, 299, 300, 390, 402, 411, 521, 545, 585, 637, 660, 697, 698, 724, 797, 805, 810, 814, 916], "timeunit": [25, 34, 35, 67, 239, 315, 316, 341, 345, 715, 716, 745, 749], "frame": [25, 26, 27, 57, 85, 112, 116, 124, 125, 159, 160, 169, 172, 175, 184, 185, 204, 210, 239, 558, 589, 591, 637, 696, 916], "datetim": [25, 27, 42, 57, 67, 129, 145, 147, 148, 160, 162, 212, 239, 267, 268, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 366, 418, 419, 420, 421, 422, 424, 425, 426, 470, 483, 509, 515, 519, 524, 545, 574, 575, 580, 637, 663, 664, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 771, 786, 797, 800, 805, 806, 835, 878, 899, 916], "decim": [25, 27, 42, 239, 427, 545, 830, 916], "place": [25, 131, 152, 153, 181, 190, 191, 194, 214, 239, 260, 263, 275, 282, 431, 432, 440, 545, 599, 600, 605, 637, 655, 658, 671, 678, 815, 817, 838, 839, 848, 916], "float64": [25, 85, 92, 94, 116, 120, 133, 134, 141, 187, 204, 216, 239, 252, 253, 254, 255, 256, 257, 296, 302, 303, 338, 351, 372, 374, 436, 437, 481, 482, 498, 511, 545, 564, 597, 615, 637, 742, 898, 903, 916], "datatyp": [25, 27, 29, 42, 49, 55, 82, 84, 85, 86, 88, 90, 92, 98, 100, 104, 117, 120, 133, 135, 141, 187, 188, 239, 271, 296, 351, 433, 450, 470, 483, 498, 511, 545, 554, 566, 597, 598, 618, 637, 646, 667, 691, 709, 784, 786, 788, 840, 858, 878, 899, 916], "repres": [25, 43, 55, 67, 82, 84, 86, 87, 88, 239, 372, 374, 498, 511, 519, 545, 835, 850, 905, 916], "null": [25, 57, 65, 85, 94, 95, 105, 110, 123, 125, 129, 132, 138, 141, 142, 154, 161, 166, 167, 173, 178, 190, 191, 194, 195, 196, 200, 204, 209, 211, 213, 216, 239, 247, 250, 251, 260, 263, 269, 272, 273, 276, 282, 287, 288, 290, 292, 299, 300, 301, 304, 306, 309, 311, 313, 314, 319, 322, 325, 327, 329, 332, 339, 348, 349, 350, 351, 354, 355, 356, 357, 361, 365, 372, 373, 374, 375, 376, 381, 389, 404, 406, 412, 417, 418, 419, 420, 421, 422, 424, 425, 426, 431, 432, 433, 435, 440, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 458, 459, 462, 464, 466, 467, 468, 473, 474, 475, 483, 490, 491, 497, 499, 500, 511, 519, 533, 545, 558, 563, 569, 578, 579, 599, 600, 605, 611, 612, 615, 616, 618, 637, 646, 655, 658, 665, 678, 683, 684, 687, 696, 697, 710, 713, 719, 722, 728, 730, 733, 736, 743, 754, 755, 756, 759, 761, 766, 782, 783, 808, 809, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 833, 838, 839, 843, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 866, 867, 870, 872, 874, 875, 876, 897, 898, 899, 906, 916], "empti": [25, 73, 85, 94, 95, 98, 105, 125, 126, 156, 168, 239, 530, 558, 559, 588, 637, 696, 700, 774, 916], "table_nam": [26, 27, 239], "connection_uri": [26, 96, 239], "if_exist": [26, 239], "dbwritemod": [26, 239], "fail": [26, 83, 97, 99, 106, 123, 208, 239, 261, 288, 470, 545, 610, 637, 646, 878, 916], "engin": [26, 96, 124, 221, 239, 584, 621, 637], "dbwriteengin": [26, 239], "sqlalchemi": [26, 239], "databas": [26, 96, 239, 554], "append": [26, 116, 136, 161, 162, 239, 412, 545, 579, 580, 637, 916], "creat": [26, 27, 66, 67, 82, 86, 88, 106, 115, 116, 117, 125, 126, 147, 148, 173, 176, 212, 216, 239, 316, 337, 342, 412, 464, 488, 494, 499, 507, 508, 509, 545, 558, 559, 565, 574, 575, 615, 637, 696, 700, 708, 713, 716, 741, 746, 807, 815, 872, 897, 916], "connect": [26, 94, 96, 99, 103, 107, 109, 110, 239, 555], "uri": [26, 96, 97, 106, 239], "postgresql": [26, 96, 239, 405, 545], "usernam": [26, 94, 96, 99, 103, 107, 109, 239], "password": [26, 94, 96, 99, 103, 107, 109, 239], "server": [26, 96, 239], "port": [26, 94, 96, 99, 103, 107, 109, 239], "replac": [26, 94, 95, 105, 137, 138, 182, 207, 216, 239, 316, 336, 389, 461, 545, 568, 615, 637, 716, 740, 796, 834, 835, 869, 916], "insert": [26, 94, 95, 99, 103, 105, 107, 108, 109, 153, 181, 207, 209, 239, 429, 444, 473, 545, 611, 637, 832, 852, 881, 916], "mode": [26, 239, 529, 545, 637, 916], "new": [26, 27, 92, 120, 121, 124, 132, 152, 153, 172, 173, 180, 181, 198, 209, 210, 216, 239, 247, 316, 353, 365, 388, 460, 461, 466, 467, 474, 475, 480, 545, 554, 563, 595, 609, 611, 615, 621, 637, 642, 646, 713, 716, 758, 807, 817, 868, 869, 874, 875, 882, 884, 889, 895, 907, 916], "overwrit": [26, 82, 84, 85, 86, 88, 94, 95, 105, 123, 239, 567, 637], "alreadi": [26, 239, 270, 310, 545, 666, 707, 916], "adbc": [26, 96, 239], "workbook": [27, 239], "worksheet": [27, 239], "posit": [27, 130, 135, 146, 174, 188, 194, 209, 216, 219, 239, 348, 349, 350, 351, 405, 441, 459, 497, 498, 511, 530, 545, 562, 566, 573, 598, 605, 611, 615, 619, 637, 754, 755, 756, 867, 916], "tupl": [27, 42, 96, 124, 159, 184, 185, 189, 218, 239, 415, 545, 592, 601, 637, 818, 916], "a1": [27, 58, 60, 239], "table_styl": [27, 239], "column_width": [27, 239], "column_tot": [27, 239], "sequenc": [27, 49, 57, 64, 82, 84, 85, 86, 88, 89, 91, 94, 95, 115, 116, 117, 130, 132, 135, 136, 161, 162, 168, 172, 175, 176, 194, 202, 207, 208, 209, 210, 211, 212, 239, 370, 387, 441, 475, 491, 492, 493, 495, 499, 504, 505, 506, 513, 515, 520, 521, 524, 528, 534, 545, 562, 563, 566, 579, 580, 591, 605, 610, 611, 612, 637, 645, 711, 778, 835, 884, 916], "column_format": [27, 239], "conditional_format": [27, 239], "dtype_format": [27, 239], "oneormoredatatyp": [27, 115, 239, 786, 916], "sparklin": [27, 239], "autofilt": [27, 239], "autofit": [27, 239], "hidden_column": [27, 239], "hide_gridlin": [27, 239], "excel": [27, 98, 239, 554], "object": [27, 31, 67, 83, 84, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 115, 116, 117, 123, 146, 163, 204, 239, 519, 554, 559, 577, 582, 594, 637, 659, 692, 714, 851, 893, 916], "open": [27, 94, 95, 98, 99, 103, 107, 109, 239], "xlsxwriter": [27, 239], "ha": [27, 57, 66, 89, 106, 123, 212, 239, 251, 310, 378, 396, 484, 493, 545, 621, 696, 707, 766, 777, 900, 916], "close": [27, 67, 147, 148, 239, 366, 418, 419, 420, 421, 422, 424, 425, 426, 438, 545, 574, 575, 637, 771, 846, 916], "xlsx": [27, 98, 239], "work": [27, 95, 98, 148, 181, 239, 251, 270, 298, 299, 300, 301, 351, 360, 405, 458, 485, 545, 575, 637, 666, 694, 697, 698, 699, 764, 866, 901, 916], "directori": [27, 103, 239], "sheet1": [27, 239], "valid": [27, 99, 103, 117, 121, 134, 239, 310, 445, 446, 451, 452, 454, 545, 707, 753, 766, 853, 854, 859, 860, 862, 868, 869, 916], "notat": [27, 239], "eg": [27, 239, 337, 470], "integ": [27, 38, 39, 40, 41, 51, 52, 53, 54, 115, 116, 147, 148, 239, 298, 338, 360, 413, 418, 419, 420, 421, 422, 423, 424, 425, 426, 459, 494, 515, 519, 545, 574, 575, 637, 653, 654, 694, 742, 764, 816, 826, 835, 867, 916], "medium": [27, 239], "contain": [27, 57, 63, 84, 87, 97, 106, 112, 132, 160, 172, 176, 239, 251, 370, 389, 446, 449, 451, 452, 454, 467, 468, 545, 563, 592, 637, 796, 802, 854, 857, 859, 860, 862, 875, 876, 893, 916], "follow": [27, 63, 94, 95, 97, 105, 106, 124, 147, 148, 162, 175, 212, 239, 251, 333, 337, 342, 411, 418, 419, 420, 421, 422, 424, 425, 426, 475, 493, 538, 539, 541, 545, 546, 549, 550, 551, 574, 575, 580, 591, 637, 737, 741, 746, 814, 834, 835, 908, 910, 912, 916, 919, 920, 921, 923], "kei": [27, 57, 63, 147, 162, 169, 174, 176, 180, 183, 239, 574, 580, 589, 595, 596, 637], "first_column": [27, 239], "last_column": [27, 239], "banded_column": [27, 239], "banded_row": [27, 239], "sheet": [27, 98, 239], "formula": [27, 239, 347, 545, 752, 916], "chart": [27, 239, 592, 637], "subsequ": [27, 179, 204, 239, 565, 637], "pixel": [27, 239], "unit": [27, 34, 35, 67, 116, 117, 134, 239, 315, 316, 320, 341, 345, 386, 396, 487, 515, 545, 592, 637, 715, 716, 720, 745, 749, 753, 795, 903, 916], "add": [27, 47, 95, 124, 136, 147, 216, 217, 239, 408, 476, 509, 513, 537, 545, 574, 579, 615, 616, 617, 637, 645, 916], "total": [27, 134, 239, 753, 916], "numer": [27, 162, 239, 299, 300, 301, 366, 414, 433, 545, 554, 580, 637, 697, 698, 699, 771, 784, 833, 840, 916], "have": [27, 57, 83, 94, 95, 98, 116, 117, 119, 136, 159, 179, 185, 201, 239, 310, 348, 349, 350, 396, 411, 470, 545, 601, 617, 637, 645, 707, 740, 754, 755, 756, 766, 814, 878, 916], "associ": [27, 57, 239], "sum": [27, 57, 134, 141, 146, 148, 158, 176, 219, 239, 251, 288, 308, 309, 347, 357, 418, 419, 421, 424, 425, 426, 490, 491, 504, 506, 513, 521, 524, 528, 545, 560, 565, 567, 573, 575, 592, 601, 619, 637, 705, 706, 752, 753, 821, 822, 824, 827, 828, 829, 916], "given": [27, 45, 47, 57, 66, 67, 82, 84, 85, 86, 88, 92, 94, 95, 105, 114, 115, 116, 117, 120, 124, 134, 135, 174, 175, 184, 190, 191, 194, 211, 239, 267, 282, 317, 341, 347, 366, 384, 405, 411, 414, 415, 418, 419, 421, 424, 425, 426, 429, 431, 432, 452, 470, 475, 484, 491, 511, 545, 566, 584, 591, 599, 600, 605, 612, 621, 637, 646, 663, 678, 708, 717, 745, 752, 753, 771, 793, 795, 807, 814, 818, 821, 822, 824, 827, 828, 829, 832, 838, 839, 860, 878, 900, 903, 907, 916], "colnam": [27, 116, 133, 239, 388, 545, 564, 637], "For": [27, 96, 97, 98, 106, 136, 148, 161, 162, 221, 239, 288, 296, 348, 349, 350, 396, 413, 438, 504, 513, 514, 545, 575, 580, 621, 637, 645, 754, 755, 756, 816, 846, 897, 916], "pass": [27, 31, 57, 67, 84, 98, 106, 115, 116, 117, 128, 130, 146, 174, 175, 188, 194, 216, 219, 239, 251, 320, 336, 354, 364, 405, 441, 457, 463, 469, 495, 498, 515, 533, 545, 562, 573, 577, 584, 591, 598, 601, 605, 615, 619, 637, 646, 720, 740, 759, 865, 871, 877, 916], "fn": [27, 239, 504, 505, 513, 528], "averag": [27, 239, 348, 349, 350, 411, 545, 754, 755, 756, 814, 916], "count_num": [27, 239], "count": [27, 94, 95, 99, 103, 105, 107, 108, 109, 129, 147, 148, 162, 172, 173, 176, 207, 211, 212, 217, 221, 230, 239, 268, 305, 333, 381, 401, 404, 418, 419, 420, 421, 422, 424, 425, 426, 446, 486, 488, 525, 545, 574, 575, 580, 612, 617, 621, 630, 637, 664, 709, 737, 803, 808, 854, 902, 904, 916], "min": [27, 31, 116, 117, 129, 138, 147, 148, 176, 239, 299, 301, 307, 356, 405, 411, 421, 530, 545, 569, 574, 575, 603, 637, 697, 699, 704, 709, 761, 814, 824, 916], "std_dev": [27, 239], "var": [27, 239, 545, 637, 916], "match": [27, 65, 76, 82, 84, 85, 86, 88, 112, 113, 138, 162, 184, 239, 394, 445, 446, 449, 452, 453, 454, 457, 460, 461, 463, 468, 469, 470, 498, 569, 580, 637, 786, 853, 854, 857, 860, 861, 862, 865, 868, 869, 871, 876, 877, 878, 916], "particular": [27, 94, 99, 103, 107, 109, 134, 239, 753, 916], "dd": [27, 239], "mm": [27, 239], "yyyi": [27, 239], "00": [27, 67, 147, 162, 212, 239, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 470, 509, 574, 580, 637, 715, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 878], "0_": [27, 239], "red": [27, 48, 221, 239, 621], "here": [27, 82, 84, 85, 86, 88, 96, 97, 106, 115, 116, 117, 239, 454, 637, 862], "condit": [27, 62, 132, 139, 184, 239, 449, 468, 513, 563, 570, 637], "suppli": [27, 82, 84, 85, 86, 88, 184, 239, 637], "typenam": [27, 239], "3_color_scal": [27, 239], "data_bar": [27, 239], "definit": [27, 239, 379, 545, 790, 916], "complet": [27, 239, 897, 916], "flexibl": [27, 239], "icon": [27, 239], "dtype": [27, 60, 82, 84, 86, 88, 92, 94, 95, 105, 114, 115, 116, 117, 120, 123, 147, 148, 162, 204, 239, 251, 252, 253, 254, 255, 256, 257, 260, 263, 264, 265, 266, 275, 287, 296, 299, 300, 301, 302, 303, 308, 309, 319, 322, 325, 327, 329, 332, 339, 345, 351, 353, 386, 387, 413, 414, 418, 419, 420, 421, 422, 424, 425, 426, 433, 436, 437, 444, 453, 464, 477, 479, 481, 482, 483, 487, 488, 493, 494, 499, 502, 511, 515, 519, 520, 533, 545, 574, 575, 580, 637, 660, 661, 662, 671, 683, 691, 696, 697, 698, 699, 705, 706, 710, 719, 722, 728, 730, 733, 736, 743, 749, 753, 758, 774, 786, 795, 819, 833, 840, 852, 861, 872, 878, 886, 897, 898, 899, 903, 916], "overridden": [27, 82, 84, 86, 88, 239, 637], "basi": [27, 116, 239], "It": [27, 67, 124, 169, 175, 221, 239, 251, 288, 395, 545, 584, 589, 621, 637, 834, 835, 916], "also": [27, 67, 85, 116, 117, 133, 146, 147, 148, 169, 172, 188, 194, 216, 239, 306, 309, 336, 365, 366, 411, 418, 419, 420, 421, 422, 424, 425, 426, 441, 504, 505, 513, 515, 528, 544, 545, 573, 574, 575, 589, 598, 605, 615, 616, 637, 740, 771, 814, 916], "group": [27, 31, 95, 146, 147, 148, 160, 172, 174, 176, 210, 212, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 246, 251, 270, 359, 405, 440, 441, 451, 479, 493, 545, 573, 574, 575, 603, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 637, 666, 859], "float_dtyp": [27, 239], "simplifi": [27, 64, 239, 560, 565, 567, 592, 601, 602, 603, 637], "uniform": [27, 239], "param": [27, 82, 84, 85, 86, 88, 94, 95, 105, 116, 117, 184, 239, 637], "marker": [27, 239], "compliant": [27, 239], "case": [27, 57, 82, 84, 85, 86, 88, 109, 124, 136, 147, 148, 159, 239, 387, 395, 396, 537, 545, 574, 575, 637, 645, 916], "three": [27, 206, 239, 429, 545], "avail": [27, 91, 97, 106, 115, 238, 239, 411, 538, 539, 541, 544, 545, 546, 549, 550, 551, 554, 555, 567, 636, 637, 814, 908, 910, 912, 916, 919, 920, 921], "insert_befor": [27, 239], "insert_aft": [27, 239], "respect": [27, 239], "direct": [27, 96, 103, 109, 210, 239], "ad": [27, 85, 123, 147, 207, 216, 239, 250, 354, 504, 505, 545, 574, 615, 637, 759, 916], "end": [27, 94, 95, 103, 105, 147, 239, 283, 294, 337, 351, 366, 445, 449, 464, 468, 498, 511, 545, 574, 576, 583, 592, 637, 679, 689, 741, 771, 857, 872, 876, 916], "order": [27, 57, 85, 112, 146, 147, 148, 174, 175, 176, 186, 194, 208, 212, 239, 260, 263, 284, 297, 411, 428, 429, 430, 440, 441, 475, 485, 486, 495, 545, 573, 574, 575, 602, 603, 605, 610, 637, 655, 658, 680, 693, 785, 814, 819, 831, 832, 836, 848, 884, 901, 902, 916], "thei": [27, 85, 112, 121, 163, 239, 417, 545, 820, 916], "far": [27, 239], "pure": [27, 239], "actual": [27, 85, 98, 116, 117, 239, 841, 916], "indic": [27, 62, 89, 93, 94, 95, 99, 103, 105, 114, 115, 117, 147, 148, 202, 239, 261, 287, 368, 371, 372, 374, 375, 376, 418, 419, 420, 421, 422, 424, 425, 426, 429, 435, 479, 495, 545, 574, 575, 637, 683, 775, 779, 780, 781, 782, 783, 832, 843, 888, 894, 916], "provid": [27, 94, 95, 96, 97, 105, 106, 116, 117, 239, 288, 292, 293, 447, 448, 451, 453, 454, 515, 554, 602, 603, 637, 687, 688, 855, 856, 859, 861, 862, 923], "calcul": [27, 57, 147, 239, 269, 311, 348, 349, 350, 379, 386, 423, 438, 487, 493, 545, 574, 637, 665, 710, 754, 755, 756, 790, 826, 846, 850, 905, 916], "individu": [27, 116, 148, 239, 251, 452, 545, 575, 603, 637, 695, 860, 916], "gridlin": [27, 239], "take": [27, 116, 141, 169, 175, 198, 239, 333, 480, 510, 512, 545, 589, 609, 637, 737, 889, 907, 916], "care": [27, 239, 251, 430, 545, 836, 916], "where": [27, 62, 96, 132, 136, 159, 168, 185, 239, 261, 344, 347, 429, 438, 501, 531, 537, 545, 588, 637, 645, 656, 748, 752, 832, 846, 850, 905, 907, 916], "see": [27, 96, 97, 98, 106, 112, 113, 116, 117, 128, 161, 175, 239, 299, 300, 301, 340, 356, 365, 379, 387, 438, 528, 545, 697, 698, 699, 744, 790, 846, 916, 923], "readthedoc": [27, 239, 923], "io": [27, 239, 923], "working_with_conditional_format": [27, 239], "html": [27, 83, 96, 123, 128, 239], "similarli": [27, 85, 239], "well": [27, 135, 176, 239, 366, 545, 566, 637, 771, 916], "mandatori": [27, 239], "adjac": [27, 239], "each": [27, 57, 95, 108, 112, 113, 115, 124, 145, 146, 160, 162, 174, 204, 209, 218, 219, 221, 222, 224, 233, 239, 251, 274, 286, 337, 342, 411, 452, 466, 467, 493, 500, 533, 545, 580, 592, 611, 619, 621, 622, 624, 633, 637, 670, 682, 695, 741, 746, 814, 860, 874, 875, 885, 916], "two": [27, 84, 86, 88, 96, 141, 168, 169, 176, 206, 220, 221, 239, 246, 312, 316, 440, 479, 491, 501, 503, 526, 531, 545, 588, 589, 620, 621, 637, 711, 716, 916], "help": [27, 239, 567, 637], "appear": [27, 85, 112, 239, 486, 545, 902, 916], "working_with_sparklin": [27, 239], "random": [27, 115, 116, 117, 149, 186, 239, 362, 411, 428, 434, 545, 767, 814, 831, 842, 916], "date": [27, 34, 42, 57, 67, 94, 95, 96, 105, 110, 129, 145, 147, 148, 160, 162, 239, 267, 268, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 366, 418, 419, 420, 421, 422, 424, 425, 426, 470, 483, 515, 524, 545, 554, 574, 575, 580, 637, 663, 664, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 771, 786, 797, 800, 805, 806, 835, 878, 899, 916], "dtm": [27, 239, 316, 716], "2023": [27, 160, 239, 316, 716], "num": [27, 206, 239, 366, 369, 473, 545, 771, 916], "500": [27, 159, 211, 239, 567, 612, 637, 727, 729, 735, 742, 821, 822, 824, 916], "val": [27, 183, 239, 297, 483, 545, 596, 637, 693], "10_000": [27, 239], "20_000": [27, 239], "30_000": [27, 239], "simpl": [27, 172, 239], "export": [27, 159, 160, 185, 201, 239, 518], "locat": [27, 136, 182, 205, 209, 239, 429, 545, 611, 637, 645, 832, 835, 888, 916], "u": [27, 34, 35, 67, 159, 185, 201, 239, 315, 316, 320, 341, 345, 470, 515, 529, 715, 716, 720, 745, 749], "increas": [27, 94, 103, 239, 310, 545, 707, 916], "singl": [27, 57, 65, 94, 95, 96, 103, 105, 115, 130, 131, 132, 136, 143, 174, 184, 194, 239, 251, 268, 287, 333, 357, 387, 412, 415, 441, 444, 490, 493, 495, 498, 500, 520, 529, 545, 562, 563, 605, 637, 645, 664, 683, 737, 815, 818, 852, 893, 916], "b4": [27, 239], "light": [27, 239], "twice": [27, 98, 239], "differ": [27, 94, 110, 112, 136, 147, 148, 159, 185, 201, 207, 239, 269, 311, 318, 333, 334, 336, 343, 389, 402, 403, 470, 486, 512, 515, 521, 524, 545, 565, 574, 575, 637, 645, 665, 710, 718, 737, 738, 740, 747, 805, 806, 833, 878, 916], "titl": [27, 239], "integr": [27, 239], "multi_fram": [27, 239], "wb": [27, 239], "basic": [27, 239], "coordin": [27, 239], "advanc": [27, 239], "len": [27, 66, 115, 116, 160, 239, 305, 415, 456, 462, 473, 545, 708, 818, 864, 870, 881, 916], "min_color": [27, 239], "76933c": [27, 239], "mid_color": [27, 239], "c4d79b": [27, 239], "max_color": [27, 239], "ebf1d": [27, 239], "data_bar_2010": [27, 239], "bar_color": [27, 239], "9bbb59": [27, 239], "bar_negative_color_sam": [27, 239], "bar_negative_border_color_sam": [27, 239], "000": [27, 239], "white": [27, 239], "some": [27, 85, 94, 95, 105, 132, 239, 563, 637, 778, 916], "w": [27, 239, 451, 859], "get_worksheet_by_nam": [27, 239], "fmt_titl": [27, 239], "add_format": [27, 239], "font_color": [27, 239], "4f6228": [27, 239], "font_siz": [27, 239], "12": [27, 57, 66, 67, 147, 148, 162, 212, 239, 308, 316, 321, 323, 330, 335, 337, 342, 346, 406, 433, 505, 507, 508, 520, 545, 574, 575, 576, 580, 583, 601, 608, 637, 646, 708, 716, 734, 741, 746, 830, 916], "ital": [27, 239], "bold": [27, 239], "customis": [27, 239], "trend": [27, 239], "win_loss": [27, 239], "hidden": [27, 239], "id": [27, 106, 221, 239, 460, 461, 486, 488, 545, 621, 902, 916], "q1": [27, 239], "55": [27, 59, 239], "20": [27, 136, 152, 153, 175, 177, 181, 182, 239, 258, 259, 260, 263, 311, 337, 342, 362, 365, 515, 519, 545, 591, 637, 710, 746, 916], "35": [27, 117, 239, 311, 545, 710, 916], "q2": [27, 239], "30": [27, 66, 136, 147, 152, 175, 181, 182, 200, 216, 239, 258, 259, 260, 263, 311, 316, 319, 323, 335, 337, 342, 346, 362, 433, 545, 574, 591, 615, 637, 708, 710, 716, 719, 741, 746, 916], "15": [27, 124, 147, 148, 153, 239, 310, 311, 337, 342, 353, 505, 545, 574, 575, 637, 707, 710, 741, 746, 758, 916], "60": [27, 136, 239, 338, 339, 470, 738, 742, 743, 878], "q3": [27, 239], "50": [27, 136, 239, 299, 300, 301, 337, 342, 545, 697, 746, 916], "40": [27, 136, 175, 239, 337, 342, 362, 545, 591, 637, 723, 746], "80": [27, 239], "q4": [27, 239], "75": [27, 239], "integer_dtyp": [27, 188, 239, 598, 637], "just": [27, 96, 105, 168, 239, 588, 637], "ipccompress": [28, 239], "arrow": [28, 68, 82, 96, 99, 107, 199, 239, 602, 637, 893, 897, 916], "ipc": [28, 99, 100, 107, 110, 239, 554], "binari": [28, 239, 291, 293, 294, 295, 492, 686, 688, 689, 690], "stream": [28, 64, 239, 560, 565, 567, 584, 592, 601, 602, 603, 637], "feather": [28, 99, 107, 239, 554], "lz4": [28, 31, 239, 602, 603, 637], "zstd": [28, 31, 239, 602, 603, 637], "pretti": [29, 239], "row_ori": [29, 239], "iobas": [29, 30, 101, 102, 239, 594, 618, 637], "serial": [29, 30, 239], "represent": [29, 30, 239, 297, 318, 321, 323, 324, 326, 328, 330, 331, 334, 335, 338, 343, 344, 346, 483, 545, 565, 582, 637, 693, 718, 721, 723, 727, 729, 732, 734, 735, 738, 739, 742, 747, 748, 750, 899, 916], "orient": [29, 58, 60, 86, 88, 239, 637], "slower": [29, 86, 88, 124, 146, 174, 212, 221, 239, 573, 621, 637], "common": [29, 239], "write_ndjson": [29, 239], "newlin": [30, 102, 108, 239], "delimit": [30, 89, 94, 95, 102, 105, 108, 176, 202, 239, 444, 852, 894, 916], "parquetcompress": [31, 239], "compression_level": [31, 239, 603, 637], "statist": [31, 94, 95, 103, 109, 129, 239, 349, 350, 379, 418, 419, 420, 421, 422, 423, 424, 425, 426, 438, 545, 603, 637, 709, 755, 756, 790, 826, 846, 916], "row_group_s": [31, 239, 603, 637], "use_pyarrow": [31, 94, 99, 103, 239, 603, 637, 896, 897, 916], "pyarrow_opt": [31, 97, 103, 106, 239], "parquet": [31, 103, 104, 109, 239, 554, 603, 637], "gzip": [31, 239, 603, 637], "lzo": [31, 239, 603, 637], "brotli": [31, 239, 603, 637], "choos": [31, 239, 602, 603, 637], "good": [31, 159, 239, 602, 603, 637], "perform": [31, 73, 83, 94, 95, 99, 103, 105, 107, 108, 109, 123, 124, 147, 148, 162, 179, 221, 239, 251, 405, 545, 574, 575, 580, 602, 603, 617, 621, 637], "fast": [31, 239, 354, 430, 545, 602, 603, 637, 759, 836, 916], "decompress": [31, 239, 602, 603, 637], "backward": [31, 138, 162, 239, 290, 356, 545, 569, 580, 603, 637, 761, 916], "guarante": [31, 83, 94, 95, 239, 567, 603, 637], "deal": [31, 239, 411, 470, 545, 603, 637, 814, 878, 916], "older": [31, 239, 603, 637], "reader": [31, 91, 94, 95, 99, 103, 239, 555, 603, 637], "level": [31, 105, 107, 108, 109, 116, 124, 141, 172, 239, 357, 545, 576, 583, 603, 637], "higher": [31, 178, 231, 239, 410, 422, 527, 545, 593, 603, 631, 637, 813, 825, 916], "mean": [31, 94, 95, 99, 103, 105, 129, 138, 146, 176, 219, 239, 353, 356, 419, 438, 451, 496, 545, 569, 573, 584, 603, 619, 637, 709, 758, 761, 766, 822, 846, 859, 916], "smaller": [31, 134, 239, 567, 603, 637, 753, 916], "disk": [31, 99, 239, 601, 602, 603, 637], "11": [31, 148, 239, 313, 314, 323, 333, 337, 342, 365, 406, 425, 439, 473, 498, 534, 545, 560, 575, 576, 583, 592, 603, 608, 637, 646, 737, 741, 746, 820, 916], "22": [31, 239, 337, 342, 345, 470, 498, 603, 637, 741, 746, 749, 878], "extra": [31, 94, 97, 98, 99, 103, 106, 107, 109, 136, 239, 603, 637, 645, 916], "comput": [31, 64, 65, 70, 134, 146, 162, 204, 208, 219, 231, 239, 245, 252, 253, 254, 255, 256, 257, 278, 279, 280, 302, 303, 305, 306, 307, 308, 309, 312, 347, 352, 379, 384, 385, 400, 405, 406, 409, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 435, 436, 437, 438, 442, 481, 482, 495, 501, 503, 510, 526, 531, 545, 573, 577, 579, 580, 603, 610, 616, 619, 631, 637, 641, 647, 648, 649, 650, 651, 652, 674, 675, 676, 701, 702, 703, 704, 705, 706, 711, 752, 753, 757, 790, 793, 794, 801, 809, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 843, 844, 845, 846, 849, 890, 891, 898, 916], "size": [31, 94, 95, 115, 116, 117, 118, 134, 147, 210, 239, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 494, 545, 574, 603, 637, 753, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 916], "chunk": [31, 91, 94, 95, 103, 105, 107, 108, 109, 116, 117, 136, 160, 171, 239, 250, 412, 545, 603, 637, 645, 695, 765, 802, 815, 893, 916], "reduc": [31, 94, 95, 103, 105, 107, 108, 109, 226, 227, 229, 232, 239, 433, 513, 545, 603, 626, 627, 629, 632, 637, 798, 812, 840, 886, 916], "memori": [31, 65, 82, 83, 86, 87, 88, 94, 95, 99, 103, 105, 107, 108, 109, 123, 124, 136, 192, 221, 239, 412, 433, 545, 603, 621, 637, 645, 815, 840, 841, 916], "pressur": [31, 103, 108, 109, 239, 433, 545, 603, 637, 840, 916], "improv": [31, 99, 107, 239, 603, 637], "speed": [31, 239, 251, 545, 603, 637], "minimum": [31, 115, 116, 117, 141, 170, 239, 299, 301, 348, 349, 350, 399, 403, 411, 524, 545, 590, 603, 637, 697, 699, 731, 754, 755, 756, 806, 811, 814, 916], "implement": [31, 83, 106, 123, 124, 221, 239, 251, 545, 621, 834, 835, 916], "v": [31, 66, 134, 239, 429, 545, 708, 832, 916], "At": [31, 239], "moment": [31, 128, 239, 379, 438, 545, 790, 846, 916], "argument": [31, 94, 97, 103, 106, 128, 130, 135, 146, 147, 148, 166, 174, 175, 176, 188, 194, 196, 204, 209, 212, 216, 219, 239, 337, 342, 351, 366, 405, 418, 419, 420, 421, 422, 424, 425, 426, 441, 457, 463, 469, 497, 498, 511, 530, 533, 545, 562, 566, 573, 574, 575, 591, 598, 605, 611, 615, 619, 637, 741, 746, 771, 865, 871, 877, 898, 916], "pyarrow": [31, 82, 87, 94, 97, 99, 103, 106, 110, 111, 160, 199, 203, 204, 239, 555, 893, 896, 897, 898, 916], "write_t": [31, 239], "base": [32, 132, 139, 147, 148, 239, 347, 348, 349, 350, 384, 385, 459, 521, 524, 545, 554, 563, 570, 574, 575, 637, 752, 754, 755, 756, 793, 794, 867, 907, 916], "calendar": [33, 34, 147, 148, 162, 212, 239, 323, 333, 337, 342, 346, 418, 419, 420, 421, 422, 424, 425, 426, 545, 574, 575, 580, 637, 723, 737, 741, 746, 750], "time": [34, 35, 42, 63, 64, 67, 105, 136, 147, 148, 162, 212, 239, 266, 267, 268, 288, 315, 316, 317, 320, 333, 336, 341, 345, 366, 470, 483, 484, 499, 500, 507, 508, 509, 515, 529, 545, 554, 560, 574, 575, 580, 592, 637, 645, 662, 664, 715, 716, 717, 720, 737, 740, 745, 749, 771, 878, 899, 900, 916], "time_unit": [34, 35, 67, 345, 749], "time_zon": [34, 67, 317, 336, 717, 740], "m": [34, 35, 67, 315, 316, 320, 340, 341, 345, 470, 509, 515, 715, 716, 720, 744, 745, 749, 878], "timezon": [34, 67, 470, 878], "zoneinfo": 34, "run": [34, 64, 124, 163, 221, 239, 251, 270, 310, 530, 545, 560, 565, 567, 584, 592, 601, 602, 603, 621, 637, 666, 707, 916, 922], "available_timezon": 34, "attribut": [34, 35, 42, 114, 239, 538, 539, 541, 546, 549, 550, 551, 637, 908, 910, 912, 919, 920, 921], "delta": [35, 97, 106, 501, 526, 531, 554, 850, 905, 916], "32": [36, 39, 52, 59, 111, 148, 158, 239, 433, 545, 575, 637, 711, 738, 809, 825, 916], "bit": [36, 37, 38, 39, 40, 41, 51, 52, 53, 54, 413, 445, 545, 816, 853, 916], "sign": [38, 39, 40, 41, 333, 413, 473, 545, 737, 816, 881, 916], "inner": [42, 48, 161, 211, 239, 275, 312, 545, 579, 612, 618, 637, 671, 711, 916], "union": [42, 49, 57, 64, 65, 89, 90, 172, 174, 239, 491, 492, 499, 505, 506, 515, 521, 524, 528, 534, 560, 565, 567, 592, 601, 637, 711, 778, 835, 916], "datatypeclass": [42, 49, 90], "timedelta": [42, 67, 147, 148, 212, 239, 318, 320, 321, 323, 328, 330, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 346, 418, 419, 420, 421, 422, 424, 425, 426, 545, 574, 575, 637, 724, 726, 731, 737, 741, 746, 797, 800, 805, 806, 916], "nest": [42, 48, 134, 239, 554, 753, 916], "arrai": [42, 82, 86, 94, 95, 103, 134, 199, 203, 204, 239, 266, 277, 278, 279, 280, 281, 284, 285, 293, 299, 300, 301, 305, 306, 307, 308, 309, 385, 418, 419, 421, 424, 425, 426, 430, 446, 448, 451, 452, 454, 499, 510, 545, 637, 662, 673, 674, 675, 676, 677, 680, 681, 688, 697, 698, 699, 703, 704, 705, 706, 711, 753, 794, 821, 822, 824, 827, 828, 829, 836, 841, 854, 856, 859, 860, 862, 893, 897, 898, 906, 916], "within": [42, 112, 113, 162, 239, 580, 637], "wrap": [44, 106, 366, 545], "arbitrari": [44, 116], "python": [44, 67, 94, 95, 111, 124, 159, 185, 201, 221, 239, 251, 316, 387, 493, 545, 621, 646, 716, 724, 725, 726, 731, 896, 916], "queri": [45, 64, 96, 99, 105, 107, 108, 109, 136, 163, 175, 239, 288, 389, 454, 545, 560, 565, 567, 576, 583, 592, 601, 617, 621, 637, 645, 862, 916, 922], "pars": [45, 94, 95, 98, 105, 107, 108, 146, 188, 194, 216, 219, 239, 405, 441, 453, 459, 470, 495, 497, 500, 515, 533, 545, 573, 598, 605, 615, 619, 637, 861, 867, 878], "transform": [45, 124, 239, 387, 471, 472, 545], "lf": [47, 564, 570, 597, 614, 637], "under": [47, 58, 59, 60, 61, 538, 539, 541, 546, 549, 550, 551, 908, 910, 912, 919, 920, 921], "context": [48, 172, 239, 246, 251, 270, 357, 395, 440, 441, 488, 493, 502, 512, 515, 530, 544, 545, 554, 616, 637, 666], "manag": [48, 554], "categor": [48, 89, 119, 161, 202, 239, 297, 389, 483, 545, 692, 693, 899, 916], "temporarili": [48, 147, 148, 239, 574, 575, 637], "cach": [48, 64, 99, 105, 107, 109, 119, 389, 418, 419, 420, 421, 422, 424, 425, 426, 470, 545, 560, 565, 567, 592, 601, 637, 878], "categori": [48, 66, 119, 297, 693, 708, 916], "until": [48, 163, 239], "finish": [48, 70, 136, 239, 645, 916], "global": [48, 116, 119, 389, 545], "invalid": [48, 94, 95, 105, 453, 454, 459, 861, 862, 867], "outermost": 48, "exit": [48, 121], "df1": [48, 57, 65, 112, 136, 142, 204, 214, 239], "color": [48, 221, 621], "green": [48, 221, 621], "blue": 48, "orang": [48, 127, 222, 223, 225, 226, 227, 229, 231, 232, 239, 622, 623, 625, 626, 627, 629, 631, 632], "uint8": [48, 114, 308, 309, 477, 545, 705, 706, 886, 916], "df2": [48, 57, 65, 112, 136, 142, 204, 214, 239], "yellow": 48, "black": [48, 124, 239], "join": [48, 57, 64, 162, 211, 239, 365, 405, 545, 560, 565, 567, 580, 592, 601, 612, 616, 637], "succe": [48, 94, 95, 105], "df_join": 48, "cat": [48, 66, 445, 471, 472, 483, 500, 541, 545, 708, 853, 912, 916], "u8": [48, 89, 202, 239, 894, 916], "map": [49, 84, 85, 94, 95, 99, 100, 103, 104, 105, 107, 124, 133, 159, 180, 184, 185, 200, 239, 337, 342, 388, 389, 488, 493, 545, 564, 595, 637, 741, 746, 796, 916], "composit": 49, "make": [49, 65, 82, 87, 94, 95, 96, 99, 103, 107, 109, 147, 148, 169, 172, 179, 212, 239, 349, 350, 414, 466, 473, 545, 574, 575, 589, 637, 755, 756, 874, 881, 916], "up": [49, 96, 159, 162, 185, 201, 239, 251, 298, 473, 545, 579, 580, 584, 637, 694, 881, 916], "dai": [50, 67, 147, 148, 160, 162, 212, 239, 320, 323, 330, 333, 334, 335, 337, 341, 342, 343, 344, 346, 418, 419, 420, 421, 422, 424, 425, 426, 507, 508, 509, 545, 574, 575, 580, 637, 737, 738, 741, 746, 748], "unsign": [51, 52, 53, 54, 413, 545, 816, 916], "could": [55, 70, 132, 147, 239, 296, 504, 513, 545, 563, 574, 637, 691, 916], "determin": [55, 57, 65, 85, 88, 94, 95, 98, 103, 109, 124, 141, 147, 148, 159, 160, 207, 212, 239, 288, 297, 395, 414, 418, 419, 420, 421, 422, 424, 425, 426, 438, 545, 574, 575, 637, 684, 693, 846, 916], "static": [55, 621], "utf": 56, "intern": [57, 62, 159, 184, 200, 239, 359, 494, 506, 515, 521, 524, 529, 533, 534, 545, 659, 692, 714, 832, 851, 916], "descend": [57, 194, 239, 260, 263, 284, 411, 430, 440, 441, 484, 495, 545, 605, 637, 655, 658, 680, 785, 814, 836, 848, 900, 916], "uniqu": [57, 114, 115, 117, 157, 172, 230, 239, 262, 369, 377, 401, 470, 486, 488, 525, 545, 630, 637, 657, 709, 776, 787, 803, 878, 902, 904, 916], "inject": 57, "fill": [57, 65, 92, 120, 137, 138, 191, 210, 239, 290, 306, 309, 355, 356, 361, 365, 418, 419, 421, 424, 425, 426, 432, 456, 462, 473, 514, 545, 568, 569, 600, 616, 637, 760, 761, 807, 821, 822, 824, 827, 828, 829, 839, 864, 870, 881, 916], "sort": [57, 58, 112, 147, 148, 162, 169, 175, 176, 212, 224, 233, 239, 260, 263, 297, 357, 430, 441, 488, 490, 495, 545, 565, 574, 575, 580, 589, 591, 592, 601, 624, 633, 637, 655, 658, 693, 785, 836, 901, 904, 916], "origin": [57, 94, 95, 208, 239, 336, 378, 389, 405, 413, 446, 451, 452, 454, 456, 462, 473, 545, 610, 637, 740, 796, 854, 859, 860, 862, 864, 870, 881, 916], "unless": [57, 84, 204, 239, 637, 898, 906, 916], "final": [57, 109, 348, 349, 350, 545, 567, 637, 754, 755, 756, 916], "doe": [57, 76, 82, 84, 85, 86, 88, 94, 95, 97, 98, 105, 106, 110, 112, 113, 136, 160, 184, 185, 216, 239, 345, 389, 486, 512, 545, 567, 584, 615, 637, 645, 749, 766, 796, 841, 906, 916], "receiv": [57, 124, 175, 239, 545, 591, 637], "now": [57, 148, 239, 575, 637], "whose": [57, 162, 176, 239, 351, 511, 545, 580, 637], "post": 57, "constrain": 57, "newli": 57, "boolean": [57, 62, 139, 141, 194, 239, 248, 249, 267, 291, 357, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 441, 453, 490, 495, 533, 545, 570, 605, 637, 643, 644, 656, 663, 686, 762, 771, 772, 773, 775, 776, 778, 779, 780, 781, 782, 783, 787, 810, 811, 834, 853, 907, 916], "2022": [57, 67, 111, 129, 145, 239, 316, 470, 509, 515, 716, 723, 878], "x": [57, 94, 95, 96, 105, 115, 116, 134, 152, 155, 157, 161, 168, 239, 251, 266, 275, 362, 387, 414, 435, 438, 466, 483, 493, 504, 505, 506, 513, 520, 528, 534, 545, 579, 584, 588, 604, 637, 642, 646, 761, 788, 843, 846, 874, 899, 916], "y": [57, 115, 116, 134, 155, 157, 161, 168, 239, 266, 275, 340, 414, 470, 506, 534, 545, 579, 588, 604, 637, 642, 744, 878, 916], "df3": [57, 239], "set_tbl_format": 57, "09": [57, 148, 239, 316, 323, 575, 637, 718], "01": [57, 67, 129, 145, 147, 148, 212, 239, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 470, 509, 574, 575, 637, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 878], "02": [57, 67, 145, 147, 148, 212, 239, 315, 316, 320, 321, 322, 328, 329, 330, 338, 339, 341, 343, 345, 427, 470, 509, 545, 574, 575, 637, 715, 716, 720, 721, 722, 724, 725, 726, 727, 729, 731, 732, 733, 734, 735, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 878], "03": [57, 67, 147, 148, 212, 239, 315, 316, 317, 319, 320, 322, 329, 330, 336, 337, 338, 339, 340, 341, 342, 343, 345, 574, 575, 637, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 729, 731, 733, 734, 735, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749], "af1": 57, "af2": 57, "af3": 57, "keep": [57, 94, 95, 105, 208, 211, 212, 239, 378, 389, 497, 545, 610, 612, 637, 796, 916], "easili": [57, 188, 216, 219, 239, 498, 533, 598, 615, 619, 637], "wise": [57, 141, 239, 252, 253, 254, 255, 256, 257, 302, 303, 352, 385, 435, 436, 437, 481, 482, 504, 505, 513, 528, 545, 647, 648, 649, 650, 651, 652, 701, 702, 757, 794, 843, 844, 845, 890, 891, 916], "dot": [57, 545, 601, 637, 916], "product": [57, 128, 239, 308, 312, 493, 545, 705, 711, 916], "fill_nul": [57, 137, 239, 470, 545, 568, 616, 637, 878, 916], "167": 57, "47": 57, "callabl": [58, 59, 60, 61, 105, 124, 141, 175, 221, 239, 251, 288, 387, 388, 417, 493, 504, 505, 513, 520, 528, 545, 584, 591, 621, 637, 646, 684, 820, 916], "decor": [58, 59, 60, 61, 116, 117], "access": [58, 59, 60, 61, 159, 184, 185, 239, 389, 545, 616, 637], "by_first_letter_of_column_nam": 58, "f": [58, 95, 106, 129, 145, 160, 164, 199, 207, 210, 239, 251, 288, 433, 450, 470, 493, 499, 504, 505, 513, 520, 528, 545, 684, 858, 878], "fromkei": [58, 60], "by_first_letter_of_column_valu": 58, "starts_with": [58, 445, 449, 857], "slice": [58, 64, 134, 150, 160, 197, 239, 274, 286, 417, 418, 419, 420, 421, 422, 424, 425, 426, 545, 560, 565, 567, 584, 592, 601, 602, 603, 637, 670, 682, 753, 820, 821, 822, 823, 824, 825, 827, 828, 829, 916], "to_seri": [58, 62, 239, 288, 684], "xx": [58, 60], "xy": [58, 60], "yy": [58, 60], "yz": [58, 60], "schema": [58, 59, 60, 65, 77, 78, 80, 82, 84, 85, 86, 88, 94, 95, 100, 104, 105, 108, 115, 116, 124, 125, 126, 133, 134, 169, 172, 239, 288, 395, 533, 558, 559, 564, 584, 589, 618, 621, 637, 700, 916], "a2": [58, 60], "b1": [58, 60], "b2": [58, 60], "pow_n": 59, "powersofn": 59, "next": [59, 290, 411, 545, 814, 916], "p": [59, 175, 239, 533, 545, 591, 637], "ceil": [59, 545, 916], "previou": [59, 121, 406, 475, 545, 809, 916], "floor": [59, 545, 916], "nearest": [59, 162, 178, 231, 239, 298, 360, 410, 422, 527, 545, 580, 593, 631, 637, 694, 764, 770, 813, 825, 916], "24": [59, 124, 134, 148, 239, 308, 310, 322, 545, 575, 637, 707, 722, 916], "001": [59, 324, 325, 327, 332, 509, 728, 730, 736], "next_pow2": 59, "prev_pow2": 59, "nearest_pow2": 59, "128": [59, 809, 916], "split_by_column_dtyp": 60, "collect": [60, 64, 106, 110, 163, 199, 239, 251, 494, 499, 515, 533, 545, 562, 563, 566, 567, 568, 569, 570, 571, 573, 574, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 590, 591, 593, 595, 596, 598, 599, 600, 604, 605, 606, 607, 608, 609, 610, 611, 613, 615, 616, 617, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 637], "31": [61, 111, 316, 318, 319, 330, 343, 470, 507, 508, 515, 716, 718, 719, 878], "42": [61, 148, 149, 239, 575, 637, 767, 916], "961": 61, "1764": 61, "4160": 61, "eager": [62, 147, 210, 239, 494, 515, 519, 529, 533, 544, 554, 574, 637], "evalu": [62, 137, 139, 162, 239, 261, 310, 364, 366, 370, 389, 492, 494, 510, 529, 533, 545, 570, 577, 579, 580, 637, 656, 707, 907, 916], "immedi": [62, 411, 494, 529, 533, 545, 814, 916], "arg_tru": [62, 545, 916], "u32": [62, 147, 173, 217, 222, 230, 232, 239, 246, 258, 259, 260, 261, 262, 263, 264, 265, 268, 277, 304, 305, 318, 321, 324, 328, 330, 334, 335, 338, 343, 344, 381, 389, 401, 404, 411, 429, 446, 455, 458, 483, 486, 495, 502, 525, 545, 574, 617, 622, 630, 632, 637, 655, 656, 657, 673, 691, 718, 721, 727, 729, 732, 734, 735, 738, 739, 742, 747, 748, 814, 854, 863, 866, 899, 902, 904, 916], "build": [63, 83], "wa": 63, "compil": [63, 264, 265, 660, 661], "gate": 63, "info": [63, 97, 106, 111], "otherwis": [63, 169, 188, 239, 292, 299, 300, 301, 348, 349, 350, 413, 445, 447, 537, 545, 589, 598, 637, 646, 687, 697, 698, 699, 754, 755, 756, 816, 834, 835, 853, 855, 916], "version": [63, 66, 89, 97, 106, 111, 263, 353, 526, 528, 531, 545, 658, 758, 916], "depend": [63, 111, 251, 264, 265, 395, 411, 493, 512, 515, 545, 660, 661, 814, 916], "host": [63, 94, 99, 103, 107, 109], "git": 63, "lazy_fram": 64, "type_coercion": [64, 560, 565, 567, 592, 601, 602, 603, 637], "predicate_pushdown": [64, 560, 565, 567, 584, 592, 601, 602, 603, 637], "projection_pushdown": [64, 560, 565, 567, 584, 592, 601, 602, 603, 637], "simplify_express": [64, 560, 565, 567, 592, 601, 602, 603, 637], "no_optim": [64, 560, 567, 584, 592, 602, 603, 637], "slice_pushdown": [64, 560, 565, 567, 584, 592, 601, 602, 603, 637], "common_subplan_elimin": [64, 560, 565, 567, 592, 601, 637], "multipl": [64, 65, 94, 95, 105, 107, 108, 109, 115, 117, 130, 134, 136, 139, 146, 147, 152, 160, 174, 176, 188, 194, 216, 219, 239, 287, 393, 396, 400, 405, 415, 418, 419, 420, 421, 422, 424, 425, 426, 441, 495, 498, 504, 505, 513, 520, 528, 537, 545, 562, 570, 573, 574, 598, 605, 615, 619, 637, 645, 683, 753, 801, 818, 916], "graph": [64, 163, 239, 577, 616, 637], "parallel": [64, 65, 91, 96, 103, 109, 147, 162, 163, 175, 239, 270, 310, 545, 554, 574, 579, 580, 637, 666, 707, 916], "threadpool": 64, "coercion": [64, 414, 545, 560, 565, 567, 592, 601, 602, 603, 637], "optim": [64, 103, 105, 107, 108, 109, 159, 163, 175, 179, 185, 239, 560, 565, 567, 584, 592, 601, 602, 603, 617, 637], "predic": [64, 105, 107, 108, 109, 110, 139, 184, 239, 357, 490, 513, 537, 545, 560, 565, 567, 570, 584, 592, 595, 601, 602, 603, 617, 637, 762, 834, 835, 916], "pushdown": [64, 560, 565, 567, 584, 592, 595, 601, 602, 603, 617, 637, 834, 835, 916], "project": [64, 105, 106, 107, 108, 109, 251, 440, 441, 545, 560, 565, 567, 584, 592, 595, 601, 602, 603, 618, 637], "turn": [64, 94, 95, 105, 119, 488, 545, 560, 565, 567, 584, 592, 602, 603, 637], "off": [64, 94, 95, 105, 119, 488, 545, 560, 565, 567, 584, 592, 602, 603, 637], "Will": [64, 207, 239, 521, 524, 560, 565, 567, 592, 601, 637, 916], "try": [64, 77, 79, 94, 95, 98, 99, 103, 105, 107, 109, 560, 565, 567, 592, 601, 637], "branch": [64, 560, 565, 567, 592, 601, 637], "subplan": [64, 560, 565, 567, 592, 601, 637], "occur": [64, 268, 400, 411, 545, 560, 565, 567, 592, 601, 637, 664, 801, 814, 916], "part": [64, 82, 466, 467, 560, 565, 567, 592, 601, 616, 637, 718, 721, 727, 729, 732, 734, 735, 742, 750, 874, 875], "fashion": [64, 161, 239, 560, 565, 567, 592, 601, 637], "alpha": [64, 251, 348, 349, 350, 545, 560, 565, 567, 592, 601, 637, 754, 755, 756, 916], "item": [65, 95, 186, 239, 267, 273, 275, 353, 428, 467, 545, 663, 669, 671, 758, 831, 875, 916], "iter": [65, 146, 147, 148, 159, 160, 174, 184, 185, 188, 194, 207, 216, 218, 219, 239, 310, 351, 405, 441, 495, 497, 498, 500, 511, 530, 533, 545, 573, 574, 575, 598, 605, 615, 619, 637, 707, 916], "rechunk": [65, 82, 87, 94, 95, 99, 103, 105, 107, 108, 109, 136, 239, 545, 645, 695, 802, 916], "concatmethod": 65, "vertic": [65, 136, 210, 214, 239, 444, 521, 852], "aggreg": [65, 94, 95, 103, 141, 147, 165, 166, 167, 170, 172, 176, 177, 178, 195, 196, 210, 213, 219, 220, 223, 225, 239, 246, 357, 383, 387, 405, 417, 418, 419, 420, 421, 422, 424, 425, 426, 488, 504, 505, 506, 513, 518, 521, 524, 528, 534, 545, 574, 584, 585, 586, 587, 590, 593, 606, 607, 613, 619, 620, 623, 625, 637, 820, 821, 822, 824, 827, 828, 829, 916], "concaten": [65, 141, 175, 239, 500, 545, 591, 637, 695, 802, 916], "sure": [65, 82, 87, 94, 95, 96, 99, 103, 179, 239, 494], "contigu": [65, 82, 87, 94, 95, 99, 103, 105, 107, 108, 109, 179, 239], "diagon": [65, 207, 239], "strategi": [65, 94, 114, 115, 116, 117, 138, 147, 161, 162, 171, 239, 251, 288, 356, 545, 569, 574, 579, 580, 637, 684, 761, 916], "vstack": [65, 136, 239], "find": [65, 140, 239, 429, 545, 832, 916], "miss": [65, 82, 94, 95, 105, 137, 239, 290, 348, 349, 350, 361, 365, 372, 374, 531, 545, 568, 637, 754, 755, 756, 906, 916], "stack": [65, 152, 214, 239], "length": [65, 66, 92, 115, 120, 147, 148, 193, 239, 283, 310, 337, 342, 396, 417, 418, 419, 420, 421, 422, 424, 425, 426, 439, 456, 458, 462, 464, 473, 494, 545, 574, 575, 592, 604, 637, 679, 684, 695, 707, 708, 716, 741, 746, 791, 807, 820, 821, 822, 823, 824, 825, 827, 828, 829, 847, 864, 866, 870, 872, 881, 916], "don": [65, 210, 239, 251, 270, 310, 493, 545, 666, 707, 833, 906, 916], "t": [65, 98, 105, 124, 175, 210, 239, 251, 270, 310, 347, 348, 349, 350, 457, 463, 469, 470, 493, 537, 545, 591, 637, 666, 707, 752, 754, 755, 756, 833, 865, 871, 877, 878, 906, 916], "relev": 65, "execut": [65, 163, 239, 270, 557, 584, 592, 637, 666], "df_h1": 65, "l1": 65, "l2": 65, "df_h2": 65, "r1": 65, "r2": 65, "r3": 65, "df_d1": 65, "df_d2": 65, "bin": [66, 459, 539, 708, 867, 910, 916], "label": [66, 82, 417, 418, 419, 420, 421, 422, 424, 425, 426, 545, 592, 637, 708, 820, 821, 822, 823, 824, 825, 827, 828, 829, 916], "break_point_label": [66, 708, 916], "break_point": [66, 708, 916], "category_label": [66, 708, 916], "discret": [66, 269, 311, 347, 545, 665, 708, 710, 752, 916], "deprec": [66, 89, 263, 353, 526, 531, 545, 637, 658, 758, 916], "sinc": [66, 89, 97, 106, 263, 320, 353, 515, 526, 531, 545, 658, 720, 758, 916], "assign": [66, 115, 147, 239, 411, 466, 467, 545, 574, 637, 708, 814, 874, 875, 916], "must": [66, 82, 83, 84, 97, 106, 135, 147, 148, 162, 169, 184, 239, 288, 387, 418, 419, 420, 421, 422, 424, 425, 426, 545, 566, 574, 575, 580, 584, 589, 637, 708, 916], "breakpoint": [66, 708, 916], "experiment": [66, 110, 188, 210, 211, 216, 239, 310, 337, 389, 418, 419, 420, 421, 422, 424, 425, 426, 545, 598, 612, 615, 637, 707, 708, 741, 916], "being": [66, 94, 95, 105, 110, 210, 211, 239, 251, 310, 337, 389, 418, 419, 420, 421, 422, 424, 425, 426, 510, 537, 545, 612, 637, 707, 708, 741, 916], "consid": [66, 94, 95, 105, 110, 132, 142, 168, 208, 210, 211, 239, 299, 300, 301, 310, 337, 389, 418, 419, 420, 421, 422, 424, 425, 426, 504, 513, 545, 563, 576, 583, 588, 610, 612, 637, 697, 698, 699, 707, 708, 741, 833, 834, 835, 916], "break": [66, 110, 210, 211, 239, 251, 310, 337, 389, 418, 419, 420, 421, 422, 424, 425, 426, 545, 612, 637, 707, 708, 741, 916], "inf": [66, 116, 117, 257, 368, 371, 545, 652, 708, 775, 779, 795, 809, 903, 916], "low": [67, 147, 239, 338, 494, 574, 637], "high": [67, 147, 239, 338, 494, 574, 637], "pli": [67, 165, 166, 170, 196, 239], "interv": [67, 147, 148, 212, 239, 337, 338, 342, 366, 418, 419, 420, 421, 422, 424, 425, 426, 545, 574, 575, 637, 718, 720, 721, 727, 729, 732, 734, 735, 738, 739, 741, 742, 744, 745, 746, 747, 748, 750, 771, 916], "1d": [67, 147, 148, 162, 212, 239, 315, 322, 329, 333, 337, 342, 345, 418, 419, 420, 421, 422, 424, 425, 426, 545, 574, 575, 580, 637, 715, 720, 722, 724, 725, 726, 731, 733, 737, 741, 744, 745, 746, 748, 749], "closedinterv": [67, 147, 148, 239, 366, 418, 419, 420, 421, 422, 424, 425, 426, 545, 574, 575, 637, 771, 916], "lower": [67, 105, 147, 178, 231, 239, 366, 386, 410, 413, 422, 494, 527, 545, 567, 574, 593, 631, 637, 771, 795, 813, 816, 825, 903, 916], "bound": [67, 94, 95, 134, 147, 239, 273, 287, 366, 386, 487, 494, 545, 574, 637, 669, 683, 753, 771, 795, 903, 916], "upper": [67, 94, 95, 134, 147, 239, 366, 487, 494, 545, 574, 637, 753, 771, 795, 903, 916], "period": [67, 147, 148, 190, 191, 239, 282, 337, 342, 348, 349, 350, 406, 431, 432, 545, 574, 575, 599, 600, 637, 678, 741, 746, 754, 755, 756, 809, 838, 839, 916], "like": [67, 83, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 155, 157, 161, 239, 270, 398, 411, 521, 524, 534, 545, 567, 594, 637, 666, 814, 916], "durat": [67, 162, 212, 239, 319, 322, 325, 327, 329, 332, 339, 345, 483, 545, 580, 637, 719, 722, 728, 730, 733, 736, 743, 749, 899, 916], "3d12h4m25": [67, 147, 148, 162, 212, 239, 337, 342, 574, 575, 580, 637, 741, 746], "hour": [67, 147, 148, 162, 212, 239, 333, 337, 342, 418, 419, 420, 421, 422, 424, 425, 426, 508, 509, 545, 574, 575, 580, 637, 737, 741, 746], "minut": [67, 147, 148, 162, 212, 239, 333, 337, 342, 418, 419, 420, 421, 422, 424, 425, 426, 508, 509, 545, 574, 575, 580, 637, 737, 741, 746], "tempor": [67, 147, 148, 159, 185, 201, 239, 366, 418, 419, 420, 421, 422, 424, 425, 426, 545, 574, 575, 637, 771, 786, 916], "window": [67, 147, 148, 239, 310, 337, 342, 348, 349, 350, 405, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 499, 545, 574, 575, 637, 707, 741, 746, 754, 755, 756, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 916], "granular": 67, "finer": 67, "than": [67, 81, 86, 88, 94, 95, 110, 116, 117, 124, 145, 146, 159, 162, 174, 184, 185, 186, 210, 221, 239, 378, 428, 438, 456, 462, 467, 473, 501, 521, 524, 531, 534, 545, 573, 580, 602, 603, 621, 637, 831, 846, 864, 870, 875, 881, 916], "permut": 67, "1mo": [67, 147, 148, 162, 212, 239, 317, 319, 333, 336, 337, 340, 342, 418, 419, 420, 421, 422, 424, 425, 426, 545, 574, 575, 580, 637, 717, 719, 734, 737, 738, 739, 740, 741, 746, 747], "dtrang": 67, "1985": 67, "04": [67, 110, 147, 212, 239, 316, 317, 318, 319, 322, 328, 329, 330, 334, 336, 337, 338, 339, 340, 343, 344, 345, 470, 509, 574, 637, 717, 719, 722, 727, 729, 732, 733, 734, 735, 739, 740, 742, 743, 744, 747, 748, 749, 878], "05": [67, 110, 112, 113, 162, 212, 239, 316, 317, 319, 336, 338, 340, 580, 637, 716, 717, 718, 719, 740, 741, 746, 748], "07": [67, 316, 318, 334, 336, 337, 342, 344, 470, 515, 716, 718, 748, 878], "08": [67, 112, 113, 148, 239, 316, 337, 470, 509, 575, 637, 741, 746, 878], "zone": [67, 317, 336, 717, 740], "america": [67, 740], "new_york": [67, 740], "\u03bc": [67, 147, 148, 162, 212, 239, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 470, 515, 574, 575, 580, 637, 715, 716, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 878], "est": [67, 740], "encount": [68, 147, 239, 402, 403, 453, 454, 501, 504, 513, 531, 545, 574, 637, 805, 806, 861, 862, 916], "error": [68, 94, 95, 105, 184, 239, 275, 287, 292, 296, 378, 445, 447, 453, 454, 470, 545, 621, 671, 683, 687, 691, 853, 855, 861, 862, 878, 916], "duplic": [71, 155, 161, 162, 208, 239, 367, 545, 579, 580, 610, 637, 773, 916], "certain": [72, 97, 106, 153, 212, 239, 498, 560, 592, 602, 603, 637, 916], "structur": [73, 77, 79, 136, 175, 239, 545, 591, 637, 645, 916], "least": [74, 116, 406, 488, 545, 809, 904, 916], "expect": [74, 76, 81, 251, 493, 545, 582, 584, 637], "unexpect": [75, 239], "caus": [75, 83, 94, 95, 105, 123, 136, 239, 645, 916], "panic": 75, "combin": [77, 79, 147, 148, 149, 162, 212, 239, 261, 342, 457, 463, 469, 545, 574, 575, 580, 601, 637, 746, 865, 871, 877], "mismatch": 77, "incompat": 79, "pa": [82, 106, 110], "chunkedarrai": [82, 171, 239, 711, 916], "schema_overrid": [82, 84, 85, 86, 87, 88, 160, 239, 637], "schemadict": [82, 84, 85, 86, 87, 88, 105, 187, 239, 533, 584, 597, 621, 637], "zero": [82, 83, 93, 94, 95, 99, 103, 123, 125, 138, 159, 184, 199, 204, 239, 355, 356, 429, 438, 473, 545, 558, 569, 637, 684, 696, 761, 846, 881, 893, 897, 898, 916], "copi": [82, 83, 123, 125, 126, 160, 199, 204, 216, 239, 354, 473, 545, 558, 559, 615, 637, 642, 696, 700, 713, 759, 881, 893, 897, 898, 916], "most": [82, 396, 400, 406, 467, 488, 545, 801, 809, 875, 904, 916], "closest": 82, "dimens": [82, 84, 86, 88, 239, 415, 545, 637, 818, 916], "column_1": [82, 124, 207, 239], "pair": [82, 84, 85, 86, 88, 180, 239, 595, 637], "declar": [82, 84, 85, 86, 88, 239, 637], "sever": [82, 84, 85, 86, 88, 239, 637], "wai": [82, 84, 85, 86, 88, 130, 146, 160, 175, 194, 219, 239, 405, 441, 498, 545, 562, 573, 591, 605, 619, 637], "As": [82, 84, 85, 86, 88, 98, 239, 529, 637], "auto": [82, 84, 85, 86, 88, 103, 109, 207, 239, 637], "automat": [82, 84, 85, 86, 88, 94, 95, 96, 105, 116, 117, 188, 216, 239, 457, 463, 469, 470, 598, 615, 637, 865, 871, 877, 878, 916], "equival": [82, 84, 85, 86, 88, 97, 158, 172, 239, 458, 637, 789, 866, 879, 880, 916], "form": [82, 84, 85, 86, 88, 159, 185, 210, 239, 406, 545, 637, 809, 916], "them": [82, 84, 85, 86, 88, 136, 147, 148, 162, 169, 212, 239, 275, 366, 402, 403, 499, 545, 574, 575, 580, 589, 637, 645, 671, 805, 806, 916], "construct": [82, 84, 85, 86, 87, 88, 239, 389, 545, 572, 594, 637, 916], "allow_copi": [83, 123], "interchang": [83, 123], "protocol": [83, 96, 123], "__dataframe__": 83, "convers": [83, 123, 160, 204, 239, 470, 554, 878, 896, 897, 898, 916], "detail": [83, 96, 112, 113, 123, 239, 637, 923], "latest": [83, 97, 106, 123, 361, 396, 545], "index": [83, 87, 90, 96, 111, 123, 140, 147, 148, 153, 162, 176, 182, 184, 193, 205, 212, 217, 239, 246, 258, 259, 260, 262, 263, 264, 265, 273, 283, 287, 333, 418, 419, 420, 421, 422, 424, 425, 426, 429, 439, 451, 464, 479, 545, 574, 575, 580, 604, 617, 637, 653, 654, 655, 656, 657, 658, 660, 661, 669, 679, 683, 737, 807, 832, 835, 847, 859, 872, 888, 916], "throw": [83, 296, 453, 454, 545, 691, 861, 862, 916], "runtimeerror": 83, "from_panda": [83, 98], "from_arrow": 83, "effici": [83, 160, 239], "schemadefinit": [84, 85, 86, 88, 239, 637], "clone": [84, 85, 86, 87, 88, 125, 203, 204, 239, 558, 637, 696, 896, 897, 898, 906, 916], "dimension": [84, 86, 88, 239, 637, 916], "infer_schema_length": [85, 88, 94, 95, 98, 105, 108, 239, 637], "mani": [85, 88, 96, 136, 239, 645, 916], "scan": [85, 88, 94, 95, 103, 105, 106, 107, 108, 109, 110, 567, 576, 583, 637], "slow": [85, 88, 94, 95, 105, 251, 310, 545, 707, 916], "NOT": [85, 112, 113], "typic": 85, "clearer": 85, "after": [85, 93, 94, 95, 99, 103, 105, 107, 108, 109, 136, 209, 238, 239, 351, 389, 411, 473, 545, 611, 637, 645, 740, 796, 814, 881, 916], "load": [85, 87, 97, 106, 239, 554, 576, 583, 637], "want": [85, 124, 136, 172, 239, 299, 300, 301, 357, 387, 389, 418, 419, 420, 421, 422, 424, 425, 426, 504, 513, 545, 560, 576, 583, 637, 645, 697, 698, 699, 897, 916], "_partial_": [85, 239, 637], "omit": [85, 115, 116, 117, 172, 239], "partial": 85, "present": [85, 112, 116, 370, 545, 906, 916], "np": [86, 139, 239, 479, 545, 637, 775, 779, 780, 781, 820, 916], "ndarrai": [86, 139, 203, 239, 479, 545, 637, 711, 832, 835, 888, 897, 916], "numpi": [86, 111, 128, 203, 204, 239, 402, 403, 545, 637, 775, 779, 780, 781, 805, 806, 820, 832, 888, 897, 898, 906, 916], "columnar": [86, 88, 159, 185, 239], "interpret": [86, 88, 94, 95, 105, 239, 637], "yield": [86, 88, 94, 95, 105, 134, 136, 207, 239, 637, 645, 753, 916], "conclus": [86, 88, 239, 637], "pd": [87, 98, 483, 545, 899, 916], "nan_to_nul": [87, 239, 637, 916], "include_index": 87, "datetimeindex": [87, 711, 916], "panda": [87, 98, 111, 204, 239, 483, 545, 637, 898, 899, 916], "instal": [87, 94, 95, 96, 99, 103, 106, 111, 128, 203, 204, 239, 601, 637, 898, 916], "nan": [87, 112, 113, 116, 123, 137, 204, 239, 313, 314, 355, 365, 372, 374, 375, 376, 390, 399, 402, 403, 501, 531, 545, 568, 637, 648, 652, 712, 760, 780, 781, 805, 806, 820, 898, 916], "convert": [87, 89, 97, 98, 106, 123, 200, 201, 202, 203, 206, 239, 288, 317, 459, 470, 637, 684, 717, 867, 878, 885, 896, 897, 898, 906, 916], "pd_df": 87, "pd_seri": 87, "dummi": [89, 202, 239, 894, 916], "to_dummi": [89, 239, 916], "foo_1": [89, 202, 239], "foo_2": [89, 202, 239], "bar_3": [89, 202, 239], "bar_4": [89, 202, 239], "ham_a": [89, 202, 239], "ham_b": [89, 202, 239], "get": [90, 100, 104, 118, 127, 133, 143, 144, 147, 148, 150, 151, 155, 157, 164, 171, 184, 187, 189, 193, 197, 215, 224, 233, 239, 246, 258, 259, 260, 262, 263, 272, 276, 277, 289, 305, 306, 307, 308, 309, 320, 358, 363, 367, 369, 377, 380, 382, 390, 391, 392, 395, 397, 399, 402, 403, 410, 439, 443, 455, 458, 477, 478, 485, 489, 512, 517, 521, 522, 523, 524, 532, 535, 536, 545, 561, 564, 571, 574, 575, 576, 581, 583, 597, 604, 608, 614, 624, 633, 637, 653, 654, 655, 656, 657, 658, 668, 672, 673, 685, 695, 703, 704, 705, 706, 720, 765, 768, 771, 773, 776, 787, 792, 797, 799, 800, 802, 805, 806, 810, 811, 813, 847, 850, 863, 866, 887, 893, 894, 901, 905, 906, 916], "uint32": [90, 111, 134, 239, 260, 263, 264, 265, 277, 318, 321, 324, 326, 328, 330, 331, 334, 335, 338, 343, 344, 414, 446, 455, 458, 479, 483, 545, 656, 660, 661, 673, 691, 718, 721, 727, 729, 732, 734, 735, 738, 739, 742, 747, 748, 753, 833, 854, 899, 916], "regular": [90, 159, 184, 185, 212, 239, 351, 498, 511, 521, 524, 534, 545], "uint64": [90, 149, 239, 264, 265, 362, 413, 545, 660, 661, 767, 816, 916], "bigidx": 90, "read": [91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 136, 239, 387, 545, 567, 572, 594, 637, 645, 916], "over": [91, 94, 95, 97, 105, 116, 124, 136, 159, 160, 184, 185, 207, 218, 221, 239, 251, 310, 356, 365, 387, 388, 417, 418, 419, 420, 421, 422, 424, 425, 426, 493, 504, 505, 513, 520, 528, 545, 621, 645, 646, 707, 820, 821, 822, 824, 828, 916], "fetch": [91, 105, 163, 239, 558, 560, 576, 583, 637], "ideal": 91, "read_csv_batch": [91, 555], "tpch": [91, 95], "tables_scale_100": [91, 95], "lineitem": [91, 95, 96], "tbl": [91, 95], "try_parse_d": [91, 94, 95, 105], "polarsdatatyp": [92, 94, 95, 100, 104, 114, 116, 117, 120, 124, 133, 239, 251, 296, 351, 387, 453, 493, 494, 498, 511, 519, 520, 545, 564, 637, 646, 691, 861, 916], "In": [92, 97, 106, 109, 116, 117, 120, 124, 134, 136, 147, 148, 172, 239, 251, 395, 545, 574, 575, 637, 645, 753, 815, 916], "probabl": [92, 120, 347, 545, 752, 916], "n_row": [93, 94, 95, 99, 103, 105, 107, 108, 109, 160, 239, 567, 637], "accept": [93, 94, 95, 97, 99, 103, 135, 146, 188, 194, 216, 219, 239, 351, 405, 441, 495, 497, 498, 500, 511, 533, 545, 566, 573, 598, 605, 615, 619, 637], "start": [93, 94, 95, 99, 103, 105, 107, 108, 109, 146, 147, 163, 193, 212, 217, 239, 283, 295, 318, 320, 321, 323, 328, 330, 334, 335, 337, 338, 341, 342, 343, 344, 346, 351, 366, 439, 445, 449, 464, 468, 498, 504, 511, 513, 537, 545, 573, 574, 592, 604, 617, 637, 679, 690, 715, 717, 718, 720, 721, 727, 729, 732, 734, 735, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 771, 847, 857, 872, 876, 916], "stop": [93, 94, 95, 99, 103, 105, 107, 108, 109, 318, 320, 321, 323, 328, 330, 334, 335, 337, 338, 341, 342, 343, 344, 346, 715, 717, 718, 720, 721, 727, 729, 732, 734, 735, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750], "textio": 94, "new_column": [94, 95, 98], "comment_char": [94, 95, 105], "quote_char": [94, 95, 105], "skip_row": [94, 95, 105], "missing_utf8_is_empty_str": [94, 95, 105], "ignore_error": [94, 95, 105], "n_thread": [94, 95], "8192": 94, "csvencod": [94, 95, 105], "low_memori": [94, 95, 103, 105, 108, 109], "storage_opt": [94, 97, 99, 103, 106, 107, 109], "skip_rows_after_head": [94, 95, 105], "row_count_nam": [94, 95, 99, 103, 105, 107, 108, 109], "row_count_offset": [94, 95, 99, 103, 105, 107, 108, 109], "sample_s": [94, 95], "eol_char": [94, 95, 105], "By": [94, 95, 98, 105, 162, 239, 459, 519, 580, 637, 850, 867, 897, 905, 916], "we": [94, 95, 98, 105, 162, 239, 270, 459, 519, 537, 580, 584, 637, 646, 666, 867, 916], "handler": [94, 95, 98], "g": [94, 95, 97, 98, 99, 103, 106, 107, 109, 210, 239, 251, 351, 433, 511, 545, 595, 637, 833, 897, 916], "via": [94, 95, 98, 105, 107, 108, 109, 159, 185, 239, 251, 545], "builtin": [94, 95, 98], "stringio": [94, 95], "fsspec": [94, 95, 99, 103, 106, 107, 109, 111], "remot": [94, 95, 99, 103], "first": [94, 95, 98, 105, 108, 124, 145, 147, 150, 162, 164, 171, 175, 176, 197, 207, 208, 212, 224, 239, 260, 262, 263, 270, 273, 274, 310, 333, 337, 363, 369, 382, 389, 429, 451, 453, 454, 460, 461, 497, 504, 513, 517, 545, 560, 574, 576, 580, 583, 591, 610, 616, 624, 637, 655, 658, 666, 669, 670, 684, 707, 709, 737, 741, 768, 776, 792, 832, 859, 861, 862, 868, 869, 916], "dataset": [94, 95, 105, 110, 379, 545, 554, 584, 637, 790, 916], "autogener": [94, 95, 105], "column_x": [94, 95, 105], "enumer": [94, 95, 105, 160, 239], "everi": [94, 95, 105, 147, 198, 201, 212, 239, 264, 265, 269, 271, 273, 274, 283, 286, 305, 306, 307, 308, 309, 310, 337, 342, 353, 450, 480, 504, 505, 545, 567, 574, 609, 637, 660, 661, 665, 667, 669, 670, 679, 682, 703, 704, 705, 706, 707, 741, 746, 758, 858, 889, 916], "shorter": [94, 95], "remain": [94, 95, 105, 134, 239, 251, 466, 467, 545, 584, 637, 753, 874, 875, 916], "comment": [94, 95, 105], "instanc": [94, 95, 105, 116, 117, 136, 141, 239, 288, 296, 396, 418, 419, 420, 421, 422, 424, 425, 426, 504, 513, 545, 584, 617, 637, 645, 691, 916], "special": [94, 95, 105, 646, 916], "handl": [94, 95, 105, 110, 269, 311, 473, 545, 665, 710, 881, 916], "escap": [94, 95, 105], "dure": [94, 95, 105, 121, 136, 239, 645, 916], "equal": [94, 95, 105, 112, 113, 119, 142, 147, 162, 169, 239, 417, 418, 419, 420, 421, 422, 424, 425, 426, 455, 456, 462, 473, 494, 545, 574, 580, 589, 637, 820, 821, 822, 823, 824, 825, 827, 828, 829, 833, 863, 864, 870, 881, 916], "would": [94, 95, 105, 260, 263, 273, 395, 411, 495, 545, 584, 637, 655, 658, 669, 814, 897, 916], "prefer": [94, 95, 97, 105, 124, 136, 159, 184, 185, 221, 239, 251, 417, 545, 621, 637, 645, 820, 916], "treat": [94, 95, 105, 445, 460, 461, 853, 868, 869], "befor": [94, 105, 121, 136, 147, 162, 209, 239, 308, 309, 310, 389, 406, 417, 418, 419, 420, 421, 422, 424, 425, 426, 473, 477, 545, 574, 577, 580, 611, 637, 645, 705, 706, 707, 796, 809, 820, 821, 822, 823, 824, 825, 827, 828, 829, 881, 886, 916], "10000": [94, 160, 239, 473], "check": [94, 95, 105, 112, 113, 142, 156, 158, 239, 248, 249, 267, 291, 294, 295, 366, 370, 445, 449, 468, 545, 584, 637, 643, 644, 663, 686, 689, 690, 772, 774, 777, 778, 784, 785, 786, 788, 789, 833, 853, 857, 876, 916], "might": [94, 95, 105, 251, 395, 486, 545, 898, 916], "issu": [94, 95, 98, 105, 308, 309, 477, 545, 705, 706, 886, 916], "alwai": [94, 124, 221, 239, 395, 584, 621, 637], "physic": [94, 95, 162, 239, 297, 483, 545, 557, 579, 580, 637, 693, 899, 916], "cpu": [94, 95], "your": [94, 95, 112, 113, 159, 188, 216, 219, 239, 251, 545, 560, 576, 583, 584, 598, 615, 619, 637], "system": [94, 95], "wrongli": 94, "done": [94, 95, 105, 110, 145, 162, 239, 250, 296, 456, 462, 545, 580, 637, 691, 864, 870, 916], "buffer": [94, 95, 134, 159, 239, 753, 916], "onc": [94, 95, 98, 123, 186, 219, 239, 428, 545, 557, 619, 637, 831, 916], "modifi": [94, 95, 105, 121, 152, 159, 214, 239, 261, 336, 345, 545, 740, 749, 817, 879, 880, 916], "multi": [94, 95, 351, 545], "lossi": [94, 95, 105], "decod": [94, 95], "im": [94, 95], "usag": [94, 95, 105, 116, 117, 192, 239, 841, 916], "expens": [94, 95, 103, 105, 108, 109, 159, 184, 185, 207, 208, 239, 251, 545, 610, 637, 645, 916], "nativ": [94, 99, 103, 124, 159, 185, 201, 221, 239, 251, 545, 621], "parser": 94, "even": 94, "possibl": [94, 124, 159, 185, 221, 239, 251, 386, 395, 467, 487, 545, 621, 875, 916], "regard": [94, 501, 531], "sens": [94, 99, 103, 107, 109, 147, 148, 169, 212, 239, 574, 575, 589, 637], "storag": [94, 97, 99, 103, 106, 107, 109], "skip": [94, 95, 98, 103, 105, 109, 210, 239, 646, 916], "offset": [94, 95, 99, 103, 105, 107, 108, 109, 147, 148, 193, 212, 217, 239, 283, 333, 337, 342, 439, 464, 470, 545, 574, 575, 604, 617, 637, 679, 737, 741, 746, 847, 872, 878, 916], "row_count": [94, 95, 99, 103, 105, 107, 108, 109], "sampl": [94, 95, 221, 239, 438, 545, 621, 846, 916], "estim": [94, 95, 134, 239, 349, 350, 379, 545, 753, 755, 756, 790, 916], "alloc": [94, 95, 134, 179, 239, 753, 916], "need": [94, 95, 98, 112, 113, 147, 148, 192, 203, 239, 288, 389, 433, 455, 545, 574, 575, 637, 840, 863, 916], "scan_csv": [94, 95, 602, 603, 637], "lazili": [94, 95, 105, 106, 107, 108, 109, 389, 545], "glob": [94, 95, 105, 107, 108, 109], "pattern": [94, 95, 105, 107, 108, 109, 159, 239, 394, 445, 446, 451, 452, 460, 461, 834, 835, 853, 854, 859, 860, 868, 869, 916], "store": [94, 103, 136, 159, 185, 239, 645, 916], "continu": [94, 103, 438, 545, 846, 916], "benchmark": [94, 103], "50000": 95, "batchedcsvread": [95, 554], "batch": [95, 108, 584, 637], "upon": 95, "creation": 95, "gather": 95, "next_batch": 95, "call": [95, 116, 117, 146, 163, 238, 239, 251, 306, 309, 545, 555, 573, 636, 637, 646, 916], "big": 95, "interest": 95, "seen_group": 95, "big_fil": 95, "while": [95, 97, 98, 106, 116, 117, 159, 168, 207, 239, 588, 637], "df_current_batch": 95, "concat": [95, 499, 695, 802, 916], "partition_df": 95, "partition_bi": [95, 160, 239], "as_dict": [95, 174, 239], "fh": 95, "write_csv": [95, 105, 239], "els": 95, "partition_on": 96, "partition_rang": 96, "partition_num": 96, "dbreadengin": 96, "connectorx": [96, 111], "raw": 96, "partit": [96, 97, 103, 106, 110, 160, 174, 239], "backend": [96, 97, 106], "transfer": 96, "document": [96, 98, 454, 470, 862, 878], "redshift": 96, "mysql": 96, "mariadb": 96, "clickhous": 96, "oracl": 96, "bigqueri": 96, "pleas": [96, 106], "doc": [96, 128, 239], "github": 96, "com": [96, 348, 349, 350, 451, 545, 754, 755, 756, 859, 916], "sfu": 96, "db": 96, "connector": 96, "destin": 96, "sqlite": 96, "develop": [96, 116, 117], "flight_sql": 96, "further": [96, 898, 916], "wide": [96, 145, 168, 210, 239, 588, 637], "adopt": 96, "significantli": 96, "better": [96, 124, 221, 239, 251, 488, 545, 621, 834, 835, 916], "driver": 96, "cpp": 96, "partition_col": 96, "explicitli": [96, 115, 116, 533], "table_uri": [97, 106], "delta_table_opt": [97, 106], "lake": [97, 106, 554], "root": [97, 106, 378, 388, 397, 408, 442, 476, 544, 545, 849, 916], "filesystem": [97, 106], "absolut": [97, 106, 112, 113, 184, 239, 245, 348, 349, 350, 545, 641, 754, 755, 756, 916], "rel": [97, 106, 112, 113, 333, 348, 349, 350, 545, 737, 754, 755, 756, 916], "But": [97, 106], "gc": [97, 106], "azur": [97, 106], "thu": [97, 105, 106, 136, 239, 501, 531, 645, 916], "deltalak": [97, 106], "cloud": [97, 106, 110], "configur": [97, 106], "authent": [97, 106], "keyword": [97, 103, 106, 128, 175, 184, 188, 216, 219, 239, 530, 533, 545, 591, 598, 615, 619, 637, 916], "table_path": [97, 106], "avoid": 97, "year": [97, 106, 147, 148, 162, 212, 239, 323, 333, 334, 337, 342, 343, 418, 419, 420, 421, 422, 424, 425, 426, 507, 508, 545, 574, 575, 580, 637, 723, 737, 738, 741, 746, 747], "2021": [97, 106, 129, 145, 147, 212, 239, 470, 519, 574, 637, 723, 786, 878, 916], "aw": [97, 106], "bucket": [97, 106, 337, 342, 741, 746], "aws_access_key_id": [97, 106], "the_aws_access_key_id": [97, 106], "aws_secret_access_kei": [97, 106], "the_aws_secret_access_kei": [97, 106], "googl": [97, 106], "service_account": [97, 106], "service_account_json_absolute_path": [97, 106], "az": [97, 106], "adl": [97, 106], "abf": [97, 106], "azure_storage_account_nam": [97, 106], "azure_storage_account_kei": [97, 106], "without_fil": [97, 106], "track": [97, 106, 124, 239], "sheet_id": 98, "sheet_nam": 98, "xlsx2csv_option": 98, "read_csv_opt": 98, "xlsx2csv": [98, 111], "read_csv": [98, 105], "skip_empty_lin": 98, "my": [98, 106, 110], "datasheet": 98, "excel_fil": 98, "correct": [98, 349, 350, 379, 423, 438, 545, 584, 637, 755, 756, 790, 826, 846, 916], "look": [98, 288, 291, 686], "fix": [98, 115, 116, 345, 418, 419, 420, 421, 422, 424, 425, 426, 545, 749], "whole": [98, 440, 441, 451, 545, 637, 859], "With": 98, "1000": [98, 134, 239, 324, 325, 473, 728], "spreadsheet": [98, 176, 239], "xl": 98, "xlsm": 98, "xlsb": 98, "odf": 98, "od": [98, 469, 877], "odt": 98, "memory_map": [99, 103, 107], "v2": [99, 107], "greatli": [99, 107], "repeat": [99, 107, 412, 414, 545], "o": [99, 107, 310, 450, 484, 545, 707, 858, 900, 916], "page": [99, 103, 107, 109, 239, 545, 554, 603, 637, 916], "give": [99, 103, 107, 108, 109, 168, 239, 320, 379, 414, 545, 554, 588, 637, 720, 790, 916], "That": [99, 584, 637], "filenam": 99, "my_fil": 99, "write_ipc": [99, 239], "read_ndjson": 101, "parallelstrategi": [103, 109], "use_statist": [103, 109], "awar": [103, 159, 185, 201, 239, 470, 878], "stabl": [103, 128, 186, 239], "row_group": [103, 109], "read_tabl": 103, "with_column_nam": 105, "push": [105, 107, 108, 109, 110], "down": [105, 107, 108, 109, 110, 360, 545, 764, 916], "therebi": [105, 107, 108, 109], "potenti": [105, 107, 108, 109], "overhead": [105, 107, 108, 109], "updat": [105, 239, 637], "realloc": [105, 107, 108, 136, 239, 645, 916], "my_long_fil": 105, "doesn": [105, 347, 545, 752, 906, 916], "thing": [105, 491, 512], "less": [105, 162, 239, 456, 462, 467, 473, 580, 637, 864, 870, 875, 881], "limit": [105, 138, 239, 290, 299, 300, 301, 356, 361, 545, 569, 576, 603, 637, 697, 698, 699, 761, 916], "breezah": 105, "languag": [105, 147, 148, 162, 212, 239, 333, 337, 342, 418, 419, 420, 421, 422, 424, 425, 426, 545, 574, 575, 580, 637, 737, 741, 746], "terribl": 105, "mydf": 105, "lambda": [105, 124, 141, 175, 221, 239, 251, 288, 348, 349, 350, 387, 388, 417, 493, 504, 505, 506, 513, 520, 528, 534, 545, 584, 591, 621, 637, 646, 684, 754, 755, 756, 916], "raw_filesystem": 106, "adjust": [106, 348, 349, 350, 438, 545, 754, 755, 756, 846, 916], "subtreefilesystem": 106, "reli": 106, "mention": 106, "ensur": [106, 116, 117, 119, 146, 174, 184, 239, 366, 488, 545, 573, 584, 637, 897, 904, 916], "gcsf": 106, "pyfilesystem": 106, "fsspechandl": 106, "gcsfilesystem": 106, "token": 106, "pa_f": 106, "adlf": 106, "azureblobfilesystem": 106, "account_nam": 106, "account_kei": 106, "allow_pyarrow_filt": 110, "lead": [110, 239, 430, 457, 469, 473, 479, 488, 501, 521, 524, 531, 545, 584, 621, 637, 836, 865, 877, 881, 916], "comparison": 110, "dset": 110, "folder": 110, "1970": 110, "out": [111, 148, 239, 273, 287, 292, 368, 371, 445, 447, 545, 575, 602, 603, 637, 669, 683, 687, 853, 855], "stdout": [111, 145, 239], "14": [111, 124, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 239, 323, 365, 545, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 741], "platform": 111, "linux": 111, "microsoft": 111, "standard": [111, 195, 239, 323, 349, 424, 438, 443, 454, 532, 545, 606, 637, 723, 755, 846, 850, 862, 916], "wsl2": 111, "x86_64": 111, "glibc2": 111, "main": 111, "jul": [111, 470, 878], "56": [111, 481, 545], "gcc": 111, "20210110": 111, "23": [111, 147, 148, 239, 316, 321, 337, 508, 574, 575, 637, 716, 721], "check_dtyp": [112, 113], "check_exact": [112, 113], "rtol": [112, 113], "1e": [112, 113], "atol": [112, 113], "nans_compare_equ": [112, 113], "check_column_ord": 112, "check_row_ord": 112, "assertionerror": [112, 113], "compar": [112, 113, 142, 239, 492, 833, 916], "exactli": [112, 113, 116, 117, 466, 467, 841, 874, 875, 916], "toler": [112, 113, 162, 239, 580, 637], "inexact": [112, 113], "assert": [112, 113, 115, 116, 117, 148, 239, 554, 575, 637, 766, 916], "irrespect": 112, "unsort": 112, "check_nam": 113, "s1": [113, 141, 239, 898, 907, 916], "searchstrategi": [114, 116, 117], "null_prob": [114, 116, 117], "percentag": [114, 116, 117, 406, 545, 809, 916], "chanc": [114, 116, 117], "flag": [114, 430, 545, 565, 584, 637, 836, 916], "hypothesi": [114, 115, 116, 117, 923], "sampled_from": 114, "unique_small_int": 114, "ccy": 114, "gbp": 114, "eur": [114, 129, 145, 239], "jpy": 114, "min_col": [115, 116], "max_col": [115, 116], "suitabl": [115, 429, 545, 832, 916], "standalon": [115, 116], "itself": [115, 582, 637], "explicit": [115, 494, 528], "mincol": 115, "exact": [115, 116, 117, 192, 239, 470, 878], "especi": 115, "punctuat": 115, "test_special_char_colname_init": 115, "z": [115, 116, 134, 155, 157, 161, 168, 239, 266, 297, 362, 414, 470, 545, 579, 588, 604, 637, 693, 761, 878, 916], "test_unique_xyz": 115, "assert_someth": 115, "min_siz": [116, 117], "max_siz": [116, 117], "include_col": 116, "allow_infin": [116, 117], "allowed_dtyp": [116, 117], "excluded_dtyp": [116, 117], "describ": [116, 145, 239, 916], "desir": 116, "ignor": [116, 117, 166, 196, 239, 269, 311, 336, 348, 349, 350, 402, 403, 545, 665, 710, 740, 754, 755, 756, 805, 806, 916], "n_chunk": [116, 117, 239, 916], "randomis": 116, "onto": 116, "independ": [116, 117], "either": [116, 148, 163, 166, 174, 184, 196, 239, 575, 582, 637], "pct": 116, "preced": 116, "disallow": [116, 117], "exclud": [116, 117, 306, 309, 366, 498, 531, 545, 771, 786, 916], "deploi": [116, 117], "characterist": [116, 117], "directli": [116, 117, 348, 349, 350, 545, 637, 754, 755, 756, 916], "concret": [116, 117], "test_repr": [116, 117], "isinst": [116, 117, 239], "repr": [116, 117], "known": [116, 621], "df_strategi": 116, "15836": 116, "1755e": 116, "38": 116, "575050513": 116, "constructor": 117, "max_data_s": 117, "distinct": [117, 174, 239, 289, 411, 507, 508, 509, 545, 685, 814, 916], "54666": 117, "6414": 117, "63290": 117, "pool": 118, "toggl": [119, 470, 878], "scope": 121, "lifetim": 121, "initi": [121, 504, 513], "whatev": 121, "were": 121, "enter": 121, "set_verbos": 121, "do_various_th": 121, "restor": 121, "nan_as_nul": 123, "_pyarrowdatafram": 123, "effect": [123, 141, 239, 251, 545, 617, 637], "nullabl": 123, "extens": [123, 204, 239, 898, 916], "propag": [123, 166, 196, 239, 402, 403, 545, 805, 806, 916], "return_dtyp": [124, 239, 251, 387, 493, 520, 545, 646, 916], "inference_s": [124, 239], "256": [124, 239, 809, 916], "user": [124, 175, 221, 239, 251, 430, 493, 545, 591, 621, 637, 646, 836, 916], "udf": [124, 175, 221, 239, 251, 493, 545, 591, 621, 637, 646, 916], "logic": [124, 221, 239, 483, 545, 572, 579, 594, 618, 621, 637, 899, 916], "almost": [124, 221, 239, 621], "_significantly_": [124, 221, 239, 621], "intens": [124, 221, 239, 621], "becaus": [124, 134, 147, 163, 210, 221, 239, 270, 574, 621, 637, 646, 666, 753, 916], "forc": [124, 162, 221, 239, 579, 580, 621, 637], "materi": [124, 221, 239, 592, 621, 637], "parallelis": [124, 221, 239, 621], "optimis": [124, 221, 239, 621, 637, 834, 835, 916], "wherev": [124, 221, 239, 251, 545, 621], "strongli": [124, 184, 221, 239, 251, 545, 621], "achiev": [124, 221, 239, 251, 545, 621], "best": [124, 221, 239, 251, 545, 621], "tri": [124, 239], "arbitrarili": [124, 239], "rearrang": [124, 239], "preserv": [124, 204, 239, 435, 545, 843, 898, 916], "syntax": [124, 172, 239, 601, 637, 916], "scalar": [124, 158, 239, 429, 493, 545, 789, 832, 916], "ident": [125, 126, 239, 558, 559, 637, 696, 700, 916], "cheap": [125, 126, 239, 558, 559, 637, 645, 696, 700, 916], "deepcopi": [125, 126, 239, 558, 559, 637, 696, 700, 916], "13": [125, 126, 137, 138, 144, 148, 153, 163, 171, 216, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 239, 417, 419, 499, 504, 513, 536, 545, 558, 559, 568, 569, 575, 582, 615, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 637, 646, 741, 746, 747, 916], "clear": [126, 239, 559, 637, 700, 916], "properti": [127, 133, 151, 187, 189, 215, 239, 554, 561, 564, 597, 614, 637], "appl": [127, 152, 161, 180, 182, 200, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 239, 408, 416, 449, 468, 476, 545, 579, 595, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 637, 857, 876], "banana": [127, 200, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 239, 408, 416, 476, 545, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632], "pearson": [128, 239, 379, 438, 501, 526, 545, 790, 846, 916], "correl": [128, 239, 501, 526, 531], "coeffici": [128, 239, 438, 545, 846, 916], "corrcoef": [128, 239], "summari": [129, 239, 709, 916], "glimps": [129, 150, 239], "usd": [129, 145, 239], "2020": [129, 145, 148, 239, 317, 319, 322, 324, 325, 327, 329, 332, 336, 339, 340, 470, 575, 637, 717, 719, 722, 728, 730, 733, 736, 740, 743, 878], "null_count": [129, 132, 239, 310, 545, 707, 709, 916], "266667": [129, 239], "666667": [129, 166, 213, 227, 239, 348, 545, 613, 627, 637], "std": [129, 239, 417, 545, 637, 709, 827, 916], "101514": [129, 239], "707107": [129, 239, 349, 545, 755, 916], "57735": [129, 239], "median": [129, 176, 239, 420, 545, 616, 637, 823, 916], "more_column": [130, 135, 209, 239, 351, 511, 545, 562, 566, 611, 637], "Or": [130, 146, 147, 148, 162, 194, 212, 219, 239, 405, 441, 498, 537, 545, 562, 573, 574, 575, 580, 605, 619, 637], "subset": [132, 172, 208, 239, 563, 610, 637], "snippet": [132, 239, 563, 637], "is_nul": [132, 239, 545, 563, 637, 916], "height": [132, 239], "sizeunit": [134, 239, 753, 916], "heap": [134, 239, 753, 916], "its": [134, 239, 316, 337, 342, 716, 741, 746, 753, 916], "bitmap": [134, 239, 753, 916], "therefor": [134, 239, 288, 753, 916], "structarrai": [134, 239, 753, 916], "constant": [134, 148, 239, 354, 545, 575, 637, 753, 759, 916], "unchang": [134, 239, 251, 483, 545, 584, 621, 637, 753, 899, 916], "visibl": [134, 239, 753, 916], "capac": [134, 192, 239, 753, 841, 916], "ffi": [134, 239, 753, 916], "kb": [134, 239, 753, 916], "mb": [134, 239, 753, 916], "gb": [134, 239, 753, 916], "tb": [134, 239, 753, 916], "scale": [134, 239, 753, 916], "revers": [134, 239, 284, 305, 306, 307, 308, 309, 388, 408, 476, 545, 637, 703, 704, 705, 706, 916], "1_000_000": [134, 239, 753, 916], "25888898": [134, 239], "689577102661133": [134, 239], "long": [135, 168, 210, 239, 566, 588, 637], "letter": [135, 224, 233, 239, 351, 511, 545, 566, 624, 633, 637], "faster": [136, 210, 239, 251, 417, 458, 486, 545, 602, 603, 637, 645, 646, 820, 866, 916], "onlin": [136, 239, 645, 916], "rerun": [136, 239, 645, 916], "latter": [136, 239, 645, 916], "fill_valu": [137, 191, 210, 239, 355, 432, 545, 568, 600, 637, 760, 839, 916], "Not": [137, 239, 372, 374, 389, 545, 568, 637], "To": [137, 239, 313, 314, 356, 521, 524, 534, 545, 568, 637], "fillnullstrategi": [138, 239, 356, 545, 569, 637, 761, 916], "matches_supertyp": [138, 239, 569, 637], "forward": [138, 162, 239, 356, 361, 545, 569, 580, 637, 761, 916], "consecut": [138, 239, 290, 356, 361, 444, 545, 569, 637, 761, 852, 916], "supertyp": [138, 239, 250, 545, 569, 637], "fill_nan": [138, 239, 545, 637, 916], "OR": [139, 239, 492, 570, 637], "reduct": [141, 239], "supercast": [141, 239], "similar": [141, 162, 239, 405, 545, 580, 637], "parent": [141, 239], "rule": [141, 239, 340, 744], "arithmet": [141, 239], "zip_with": [141, 239, 916], "foo11": [141, 239], "bar22": [141, 239], "null_equ": [142, 239, 833, 916], "retriev": [143, 239, 264, 265, 474, 660, 661, 882], "return_as_str": [145, 239], "preview": [145, 239], "nice": [145, 239], "few": [145, 239], "rather": [145, 162, 239, 473, 580, 637, 881], "head": [145, 164, 197, 239, 250, 382, 545, 583, 637, 792, 916], "tail": [145, 150, 239, 250, 438, 545, 637, 846, 916], "intoexpr": [146, 147, 148, 188, 194, 216, 219, 239, 405, 441, 495, 497, 500, 504, 513, 530, 533, 545, 573, 574, 575, 598, 605, 619, 637], "more_bi": [146, 174, 194, 239, 441, 545, 573, 605, 637], "maintain_ord": [146, 174, 176, 208, 212, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 239, 246, 251, 479, 485, 502, 545, 560, 565, 567, 573, 592, 601, 602, 603, 610, 620, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 637, 901, 916], "consist": [146, 174, 239, 470, 573, 637, 878], "agg": [146, 147, 148, 239, 246, 251, 357, 359, 440, 441, 479, 490, 502, 545, 560, 565, 567, 573, 574, 575, 592, 601, 637], "anoth": [146, 239, 287, 310, 315, 545, 573, 616, 637, 646, 683, 707, 715, 833, 916], "index_column": [147, 148, 239, 574, 575, 637], "truncat": [147, 239, 574, 592, 637], "include_boundari": [147, 239, 574, 637], "start_bi": [147, 239, 574, 637], "startbi": [147, 239, 574, 637], "dynamicgroupbi": [147, 239], "normal": [147, 239, 347, 379, 438, 545, 574, 637, 752, 790, 846, 916], "groupbi": [147, 148, 172, 239, 246, 251, 270, 310, 357, 359, 405, 440, 441, 479, 490, 493, 502, 545, 560, 565, 567, 574, 575, 592, 601, 637, 666, 707, 916], "member": [147, 239, 574, 637, 778, 916], "seen": [147, 239, 290, 361, 545, 574, 637], "roll": [147, 148, 239, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 499, 545, 574, 575, 637, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 916], "slot": [147, 239, 269, 310, 311, 545, 574, 637, 665, 707, 710, 916], "1n": [147, 148, 162, 212, 239, 333, 337, 342, 418, 419, 420, 421, 422, 424, 425, 426, 545, 574, 575, 580, 637, 737, 741, 746], "nanosecond": [147, 148, 162, 212, 239, 333, 337, 338, 342, 418, 419, 420, 421, 422, 424, 425, 426, 509, 545, 574, 575, 580, 637, 737, 741, 742, 746], "1u": [147, 148, 162, 212, 239, 333, 337, 342, 418, 419, 420, 421, 422, 424, 425, 426, 545, 574, 575, 580, 637, 737, 741, 746], "microsecond": [147, 148, 162, 212, 239, 333, 337, 338, 342, 418, 419, 420, 421, 422, 424, 425, 426, 508, 509, 545, 574, 575, 580, 592, 637, 737, 741, 746], "1m": [147, 148, 162, 212, 239, 324, 325, 327, 332, 333, 337, 339, 342, 418, 419, 420, 421, 422, 424, 425, 426, 545, 574, 575, 580, 637, 728, 730, 736, 737, 741, 743, 746], "millisecond": [147, 148, 162, 212, 239, 333, 337, 342, 418, 419, 420, 421, 422, 424, 425, 426, 509, 545, 574, 575, 580, 637, 737, 741, 746], "1h": [147, 148, 162, 212, 239, 333, 337, 342, 418, 419, 420, 421, 422, 424, 425, 426, 545, 574, 575, 580, 637, 721, 737, 741, 746], "1w": [147, 148, 162, 212, 239, 333, 337, 342, 418, 419, 420, 421, 422, 424, 425, 426, 545, 574, 575, 580, 637, 737, 741, 746], "week": [147, 148, 162, 212, 239, 333, 337, 342, 344, 418, 419, 420, 421, 422, 424, 425, 426, 509, 545, 574, 575, 580, 637, 737, 741, 746, 748], "month": [147, 148, 162, 212, 239, 318, 333, 337, 342, 418, 419, 420, 421, 422, 424, 425, 426, 507, 508, 545, 574, 575, 580, 637, 718, 737, 741, 746], "1y": [147, 148, 162, 212, 239, 333, 337, 342, 418, 419, 420, 421, 422, 424, 425, 426, 545, 574, 575, 580, 637, 737, 741, 746, 750], "1i": [147, 148, 162, 212, 239, 333, 418, 419, 420, 421, 422, 424, 425, 426, 545, 574, 575, 580, 637, 737], "10i": [147, 148, 239, 574, 575, 637], "ascend": [147, 148, 239, 574, 575, 637], "often": [147, 148, 239, 268, 414, 545, 574, 575, 637, 664], "dynam": [147, 239, 418, 419, 420, 421, 422, 424, 425, 426, 545, 574, 637], "matter": [147, 148, 159, 185, 201, 239, 574, 575, 637], "neg": [147, 150, 190, 191, 193, 197, 239, 282, 283, 431, 432, 439, 464, 545, 574, 599, 600, 604, 617, 637, 678, 679, 838, 839, 847, 872, 916], "_lower_bound": [147, 239, 574, 637], "_upper_bound": [147, 239, 574, 637], "impact": [147, 239, 574, 637], "harder": [147, 239, 574, 637], "side": [147, 148, 239, 366, 418, 419, 420, 421, 422, 424, 425, 426, 429, 545, 574, 575, 637, 771, 832, 916], "inclus": [147, 148, 239, 366, 418, 419, 420, 421, 422, 424, 425, 426, 465, 466, 545, 574, 575, 637, 771, 873, 874, 916], "datapoint": [147, 239, 574, 637], "mondai": [147, 239, 344, 574, 637, 748], "date_rang": [147, 212, 239, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 574, 637, 715, 717, 718, 719, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750], "30m": [147, 239, 337, 342, 574, 637, 741, 746], "time_min": [147, 239, 574, 637], "time_max": [147, 239, 574, 637], "boundari": [147, 239, 299, 300, 301, 545, 574, 637, 697, 698, 699, 916], "time_count": [147, 239, 574, 637], "_lower_boundari": [147, 239, 574, 637], "_upper_boundari": [147, 239, 574, 637], "lower_bound": [147, 239, 545, 574, 637, 903, 916], "upper_bound": [147, 239, 288, 545, 574, 637, 795, 916], "time_agg_list": [147, 239, 574, 637], "idx": [147, 160, 239, 288, 574, 637, 684, 835, 916], "arang": [147, 210, 221, 239, 574, 621, 637], "2i": [147, 239, 574, 637], "3i": [147, 239, 574, 637], "a_agg_list": [147, 239, 574, 637], "rollinggroupbi": [148, 239], "dynamic_groupbi": [148, 239, 575, 637], "groupby_dynam": [148, 239, 575, 637], "45": [148, 239, 316, 337, 342, 446, 452, 575, 637, 716, 741, 746, 854, 860], "48": [148, 239, 575, 637], "18": [148, 239, 309, 337, 342, 345, 365, 378, 545, 575, 592, 637, 749], "19": [148, 162, 239, 337, 575, 580, 637, 741, 746], "43": [148, 239, 309, 545, 575, 637], "strptime": [148, 239, 340, 575, 637, 744], "2d": [148, 203, 239, 575, 637, 718], "sum_a": [148, 239, 575, 637], "min_a": [148, 239, 575, 637], "max_a": [148, 239, 575, 637], "to_list": [148, 239, 288, 575, 637, 684, 916], "seed": [149, 186, 239, 362, 428, 434, 545, 767, 831, 842, 916], "seed_1": [149, 239, 362, 545, 767, 916], "seed_2": [149, 239, 362, 545, 767, 916], "seed_3": [149, 239, 362, 545, 767, 916], "hash": [149, 239, 545, 916], "u64": [149, 239, 362, 413, 545, 592, 637, 767, 916], "10783150408545073287": [149, 239], "1438741209321515184": [149, 239], "10047419486152048166": [149, 239], "2047317070637311557": [149, 239], "last": [150, 162, 176, 194, 197, 208, 233, 239, 260, 263, 273, 286, 310, 318, 334, 343, 440, 467, 478, 535, 545, 580, 605, 608, 610, 633, 637, 655, 658, 669, 682, 707, 718, 738, 747, 875, 887, 916], "_except_": [150, 197, 239], "ab": [150, 197, 216, 239, 474, 475, 521, 524, 545, 615, 637, 916], "grown": [152, 239], "baz": [153, 154, 176, 209, 239, 465, 467, 578, 611, 637, 875], "intermedi": [154, 239, 578, 637, 770, 916], "linear": [154, 178, 231, 239, 266, 365, 392, 410, 422, 499, 500, 527, 545, 578, 593, 631, 637, 662, 770, 813, 825, 916], "mask": [155, 157, 239, 267, 291, 292, 367, 369, 377, 445, 447, 545, 663, 686, 687, 762, 771, 773, 776, 787, 810, 811, 834, 853, 855, 907, 916], "visual": [155, 157, 239], "buffer_s": [159, 239], "veri": [159, 207, 239, 251, 545, 559, 637, 700, 916], "fit": [159, 192, 210, 239, 433, 545, 840, 841, 916], "speedup": [159, 239], "signific": [159, 239, 251, 545], "4x": [159, 239], "disabl": [159, 239], "materialis": [159, 160, 184, 185, 239], "iter_row": [160, 184, 185, 239], "17_500": [160, 239], "klmnoopqrstuvwxyz": [160, 239], "__name__": [160, 239], "7500": [160, 239], "recordbatch": [160, 239], "15_000": [160, 239], "record_batch": [160, 239], "to_arrow": [160, 239, 916], "to_batch": [160, 239], "date32": [160, 239], "large_str": [160, 199, 204, 239], "15000": [160, 239], "2500": [160, 239], "left_on": [161, 162, 239, 579, 580, 637], "right_on": [161, 162, 239, 579, 580, 637], "joinstrategi": [161, 239, 579, 637], "suffix": [161, 162, 188, 216, 219, 239, 294, 372, 374, 375, 376, 405, 416, 449, 545, 579, 580, 598, 615, 616, 619, 637, 689, 857], "_right": [161, 162, 239, 579, 580, 637], "outer": [161, 239, 579, 637], "semi": [161, 239, 579, 637], "anti": [161, 239, 579, 637, 834, 835, 916], "cross": [161, 239, 579, 637], "join_asof": [161, 239, 579, 637], "stringcach": [161, 239, 554], "other_df": [161, 239, 579, 637], "by_left": [162, 239, 580, 637], "by_right": [162, 239, 580, 637], "asofjoinstrategi": [162, 239, 580, 637], "allow_parallel": [162, 239, 579, 580, 637], "force_parallel": [162, 239, 579, 580, 637], "asof": [162, 239, 580, 637], "asof_join": [162, 239], "search": [162, 239, 580, 637], "greater": [162, 239, 438, 467, 545, 580, 637, 846, 875, 916], "distanc": [162, 239, 580, 637], "plan": [162, 163, 239, 557, 565, 572, 579, 580, 594, 601, 618, 637], "gdp": [162, 239, 580, 637], "2016": [162, 239, 580, 637], "2017": [162, 239, 580, 637], "2018": [162, 239, 580, 637], "2019": [162, 239, 580, 637], "record": [162, 239, 580, 637], "jan": [162, 239, 580, 637], "1st": [162, 239, 580, 637], "4164": [162, 239, 580, 637], "4411": [162, 239, 580, 637], "4566": [162, 239, 580, 637], "4696": [162, 239, 580, 637], "popul": [162, 239, 580, 637], "12th": [162, 239, 580, 637], "82": [162, 239, 580, 637], "66": [162, 239, 580, 637, 825, 916], "83": [162, 239, 580, 637], "52": [162, 216, 239, 427, 545, 580, 615, 637], "request": [163, 239], "small": [163, 239, 337, 567, 637], "describe_plan": [163, 239, 637], "unoptim": [163, 239, 637], "describe_optimized_plan": [163, 239, 637], "show_graph": [163, 239, 637], "un": [163, 239], "graphviz": [163, 239, 601, 637], "advis": [163, 239], "axi": [165, 166, 168, 170, 196, 239, 588, 637], "null_strategi": [166, 196, 239], "nullstrategi": [166, 196, 239], "spam": [166, 239], "id_var": [168, 239, 588, 637], "value_var": [168, 239, 588, 637], "variable_nam": [168, 239, 588, 637], "value_nam": [168, 239, 588, 637], "unpivot": [168, 239, 588, 637], "leav": [168, 239, 588, 637], "identifi": [168, 174, 208, 239, 588, 610, 637], "massag": [168, 239, 588, 637], "measur": [168, 239, 588, 637], "merg": [169, 239, 589, 637], "caller": [169, 239, 288, 584, 589, 621, 637], "respons": [169, 239, 589, 637], "One": [172, 176, 239, 916], "what": [172, 239, 897, 906, 916], "struct": [172, 188, 206, 209, 216, 239, 288, 389, 453, 466, 467, 488, 504, 505, 506, 520, 545, 598, 611, 615, 637, 684, 861, 874, 875], "pack": [172, 239], "expr_unique_subset": [172, 239], "df_nuniqu": [172, 239], "df_agg_nuniqu": [172, 239], "func": [175, 239, 591, 637], "offer": [175, 239, 545, 591, 637], "recommend": [175, 239], "fulli": [175, 186, 239], "advantag": [175, 239], "cast_str_to_int": [175, 239, 591, 637], "col_nam": [175, 239, 591, 637], "tdf": [175, 239, 591, 637], "aggregate_funct": [176, 239], "pivotagg": [176, 239], "sort_column": [176, 239], "predefin": [176, 239], "predict": [176, 179, 212, 239], "transpos": [176, 239], "discoveri": [176, 239], "interpol": [178, 231, 239, 356, 392, 410, 422, 527, 545, 593, 631, 637, 813, 825, 916], "rollinginterpolationmethod": [178, 231, 239, 410, 422, 527, 545, 593, 631, 637, 813, 825, 916], "midpoint": [178, 231, 239, 410, 422, 527, 545, 593, 631, 637, 813, 825, 916], "old": [180, 239, 595, 637], "new_col": [181, 239], "by_pred": [184, 239], "accord": [184, 239, 389, 545, 723], "never": [184, 239], "mutual": [184, 239], "exclus": [184, 239], "addition": [184, 239], "clariti": [184, 239], "anyth": [184, 239], "toomanyrowsreturn": [184, 239, 554], "norowsreturn": [184, 239, 554], "inherit": [184, 239], "rowsexcept": [184, 239, 554], "frac": [186, 239, 348, 349, 350, 428, 438, 484, 545, 754, 755, 756, 831, 846, 900, 916], "with_replac": [186, 239, 428, 545, 831, 916], "shuffl": [186, 221, 239, 428, 545, 621, 831, 916], "neither": [186, 239], "nor": [186, 239], "modul": [186, 239, 428, 434, 544, 545, 831, 842, 916], "more_expr": [188, 216, 239, 405, 497, 530, 545, 598, 615, 637], "named_expr": [188, 216, 239, 530, 533, 598, 615, 637], "threshold": [188, 239, 598, 637], "instanti": [188, 216, 239, 598, 615, 637], "set_auto_structifi": [188, 216, 239, 598, 615, 637], "is_odd": [188, 239, 598, 637], "_is_odd": [188, 239, 598, 637], "shift_and_fil": [190, 239, 545, 637, 916], "shift": [191, 239, 269, 311, 406, 432, 499, 545, 600, 637, 665, 710, 809, 839, 916], "shrink": [192, 239, 433, 545, 840, 841, 916], "hold": [192, 239], "nulls_last": [194, 239, 260, 263, 440, 545, 605, 637, 655, 658, 916], "ddof": [195, 213, 239, 443, 489, 501, 526, 531, 532, 536, 545, 606, 613, 637, 850, 905, 916], "deviat": [195, 239, 349, 424, 443, 532, 545, 606, 637, 755, 850, 916], "degre": [195, 213, 239, 443, 489, 501, 526, 531, 545, 850, 905, 916], "freedom": [195, 213, 239, 443, 489, 501, 526, 531, 545, 850, 905, 916], "816497": [195, 239], "21": [196, 239, 515], "16a": [196, 239], "27b": [196, 239], "38c": [196, 239], "nth": [198, 239, 467, 480, 545, 609, 637, 875, 889, 916], "mostli": [199, 239, 357, 545], "categoricaltyp": [199, 239], "as_seri": [200, 239], "fruit": [200, 239, 408, 416, 449, 468, 476, 545, 857, 876], "car": [200, 239, 408, 416, 476, 545], "beetl": [200, 239, 408, 416, 476, 545], "audi": [200, 239, 408, 416, 476, 545], "28": [200, 239, 345, 749], "300": [200, 239, 821, 822, 824, 916], "re": [203, 239, 518], "ll": [203, 239], "numpy_arrai": [203, 239], "use_pyarrow_extension_arrai": [204, 239, 898, 916], "trigger": [204, 239, 898, 916], "sent": [204, 239, 897, 898, 916], "pandas_df1": [204, 239], "pandas_df2": [204, 239], "pandas_df2_pa": [204, 239], "na": [204, 239, 898, 916], "four": [206, 239], "five": [206, 239], "include_head": [207, 239], "header_nam": [207, 239], "column_nam": [207, 239], "perhap": [207, 239], "column_2": [207, 239], "name_gener": [207, 239, 288, 684], "base_nam": [207, 239], "my_column_": [207, 239], "my_column_0": [207, 239], "my_column_1": [207, 239], "my_column_2": [207, 239], "uniquekeepstrategi": [208, 239, 610, 637], "decompos": [209, 239, 611, 637], "t_a": [209, 239, 611, 637], "t_b": [209, 239, 611, 637], "t_c": [209, 239, 611, 637], "t_d": [209, 239, 611, 637], "womp": [209, 239, 611, 637], "t_": [209, 239, 611, 637], "t_struct": [209, 239, 611, 637], "step": [210, 239, 494], "unstackdirect": [210, 239], "much": [210, 239, 287, 310, 545, 683, 707, 916], "pivot": [210, 239], "phase": [210, 239], "subject": [210, 239], "ascii_uppercas": [210, 239], "col1": [210, 239, 637], "col2": [210, 239, 637], "h": [210, 239, 340, 433, 470, 545, 878], "col1_0": [210, 239], "col1_1": [210, 239], "col1_2": [210, 239], "col2_0": [210, 239], "col2_1": [210, 239], "col2_2": [210, 239], "syntact": [211, 239, 506, 511, 512, 516, 527, 530, 534, 612, 637, 849, 916], "sugar": [211, 239, 506, 511, 512, 516, 527, 530, 534, 612, 637, 849, 916], "coalesc": [211, 239, 612, 637], "400": [211, 239, 612, 637, 821, 822, 824, 916], "600": [211, 239, 612, 637], "700": [211, 239, 612, 637], "new_df": [211, 239, 612, 637], "time_column": [212, 239], "frequenc": [212, 239], "forward_fil": [212, 239, 306, 309, 545], "06": [212, 239, 316, 323, 335, 336, 346, 741, 748], "varianc": [213, 239, 350, 379, 426, 489, 536, 545, 613, 637, 756, 790, 829, 905, 916], "grow": [214, 239], "is_not": [216, 239, 545, 615, 637], "not_c": [216, 239, 615, 637], "diff": [216, 239, 319, 322, 325, 327, 329, 332, 339, 545, 615, 637, 719, 722, 728, 730, 733, 736, 743, 916], "_diff": [216, 239, 615, 637], "row_nr": [217, 239, 389, 545, 617, 637, 835, 916], "more_agg": [219, 619], "named_agg": [219, 619], "_sum": [219, 619], "_mean_squar": [219, 619], "b_sum": [219, 619], "c_mean_squar": [219, 619], "17": [219, 427, 515, 545, 619, 701, 741, 916], "sub": [221, 294, 295, 449, 468, 689, 690, 857, 876], "triangl": [221, 621], "group_df": [221, 621], "nr": [224, 233, 624, 633], "maxim": [226, 258, 545, 626, 653, 916], "833333": [227, 627], "minim": [229, 259, 265, 433, 545, 629, 654, 661, 800, 840, 916], "overview": [239, 545, 554, 637, 916], "public": [239, 545, 554, 637, 916], "frameinittyp": [239, 637], "variou": [239, 545, 637, 916], "entri": [239, 637], "prevent": [239, 308, 309, 378, 477, 545, 637, 705, 706, 886, 916], "come": [239, 379, 545, 555, 636, 637, 790, 916], "behavior": [239, 251, 287, 493, 521, 524, 545, 683], "mydatafram": 239, "notic": [239, 637, 916], "df4": 239, "df5": 239, "df6": 239, "corr": [239, 526, 531], "drop_in_plac": 239, "drop_nul": [239, 313, 545, 637, 916], "estimated_s": [239, 916], "explod": [239, 359, 415, 545, 637, 818, 916], "find_idx_by_nam": 239, "fold": [239, 396, 497, 504, 505, 528, 534], "frame_equ": [239, 337, 342], "get_column": [239, 534], "groupby_rol": [239, 418, 419, 420, 421, 422, 424, 425, 426, 545, 574, 637], "hash_row": 239, "hstack": 239, "insert_at_idx": 239, "is_dupl": [239, 545, 916], "is_empti": [239, 916], "is_uniqu": [239, 545, 916], "iter_slic": 239, "melt": [239, 637], "merge_sort": [239, 637], "n_uniqu": [239, 545, 916], "pipe": [239, 545, 637], "quantil": [239, 422, 545, 637, 825, 916], "replace_at_idx": 239, "shrink_to_fit": [239, 916], "take_everi": [239, 545, 637, 916], "to_dict": 239, "to_numpi": [239, 387, 545, 916], "to_panda": [239, 916], "to_struct": 239, "unnest": [239, 466, 467, 475, 637, 874, 875], "unstack": 239, "upsampl": 239, "write_avro": 239, "write_databas": 239, "write_excel": 239, "write_json": [239, 594, 637], "write_parquet": 239, "94": [246, 545], "confus": [248, 372, 374, 545], "tt": [248, 545], "tf": [248, 249, 545], "ff": [248, 249, 545], "upcast": [250, 545], "skip_nul": [251, 545, 646, 916], "pass_nam": [251, 545], "applystrategi": [251, 545], "thread_loc": [251, 545], "assum": [251, 545, 584, 621, 637], "stage": [251, 545], "considd": [251, 545], "code": [251, 430, 545, 582, 637, 836, 916], "amount": [251, 545], "releas": [251, 545], "gil": [251, 545], "discourag": [251, 545], "loop": [251, 545], "a_times_2": [251, 545], "invers": [252, 253, 254, 255, 256, 257, 545, 647, 648, 649, 650, 651, 652, 916], "cosin": [252, 253, 302, 303, 387, 545, 647, 648, 701, 702, 916], "570796": [252, 254, 545, 647, 649, 916], "hyperbol": [253, 255, 257, 303, 437, 482, 545, 648, 650, 652, 702, 845, 891, 916], "sine": [254, 255, 387, 436, 437, 545, 649, 650, 844, 845, 916], "881374": [255, 545, 650, 916], "tangent": [256, 257, 481, 482, 545, 651, 652, 890, 891, 916], "785398": [256, 545, 651, 916], "arg_wher": [261, 545], "arg_sort": [263, 545, 658, 916], "favour": [263, 353, 545, 658, 758, 916], "sublist": [264, 265, 267, 269, 272, 273, 274, 275, 276, 283, 286, 287, 660, 661, 663, 665, 668, 669, 670, 671, 672, 679, 682, 683, 684, 778, 916], "membership": [267, 663], "listcol": 268, "number_of_two": 268, "null_behavior": [269, 311, 545, 665, 710, 916], "nullbehavior": [269, 311, 545, 665, 710, 916], "th": [269, 311, 438, 545, 665, 710, 846, 916], "against": [270, 637, 666, 922], "blindli": [270, 666], "worth": [270, 666], "enough": [270, 438, 545, 666, 846, 916], "concat_list": [270, 510, 666], "rank": [270, 501, 510, 531, 545, 666, 916], "exprnamespac": 271, "reshap": [271, 545, 667, 916], "flat": [271, 415, 545, 667, 818, 916], "taken": [283, 464, 479, 545, 679, 872], "null_on_oob": [287, 683], "cheaper": [287, 683], "n_field_strategi": [288, 684], "tostructstrategi": [288, 684], "first_non_nul": [288, 684], "max_width": [288, 684], "field_0": [288, 684], "field_1": [288, 684], "field_n": [288, 684], "know": [288, 458, 866, 897, 906, 916], "incorrectli": 288, "downstream": [288, 430, 545, 836, 916], "advic": 288, "col_name_": [288, 684], "col_name_0": [288, 684], "col_name_1": [288, 684], "col_name_2": [288, 684], "substr": [291, 294, 295, 445, 449, 460, 461, 465, 466, 467, 468, 686, 689, 690, 853, 857, 868, 869, 873, 874, 875, 876], "transferencod": [292, 293, 447, 448, 687, 688, 855, 856], "strict": [292, 296, 445, 447, 459, 470, 545, 687, 691, 833, 853, 855, 867, 878, 916], "hex": [292, 293, 447, 448, 459, 687, 688, 855, 856, 867], "base64": [292, 293, 447, 448, 687, 688, 855, 856], "prefix": [295, 468, 473, 545, 690, 876, 881], "due": [296, 545, 691, 916], "overflow": [296, 308, 309, 459, 477, 545, 691, 705, 706, 867, 886, 916], "categoricalord": [297, 693], "lexic": [297, 693], "k": [297, 379, 484, 545, 693, 790, 900, 916], "min_val": [299, 301, 545, 697, 699, 916], "max_val": [299, 300, 545, 697, 698, 916], "foo_clip": [299, 300, 301, 545], "clip": [300, 301, 545, 698, 699, 916], "543081": [303, 545, 702, 916], "cumul": [305, 306, 307, 308, 309, 504, 505, 506, 545, 703, 704, 705, 706, 916], "a_revers": [305, 306, 307, 308, 309, 388, 416, 476, 545], "value_cummax": [306, 545], "value_cummax_all_fil": [306, 545], "uint16": [308, 309, 477, 545, 705, 706, 886, 916], "value_cumsum": [309, 545], "value_cumsum_all_fil": [309, 545], "min_period": [310, 348, 349, 350, 417, 418, 419, 420, 421, 422, 424, 425, 426, 545, 707, 754, 755, 756, 820, 821, 822, 823, 824, 825, 827, 828, 829, 916], "slide": [310, 545, 707, 916], "realli": [310, 545, 707, 916], "complex": [310, 484, 545, 707, 900, 916], "visit": [310, 545, 707, 916], "44": [312, 545], "drop_nan": [314, 545, 916], "tu": [315, 316, 320, 341, 345, 715, 716, 720, 740, 745, 749], "lose": [315, 715], "2001": [315, 318, 320, 321, 323, 328, 330, 333, 334, 335, 337, 338, 341, 342, 343, 344, 345, 346, 470, 715, 718, 720, 721, 724, 725, 726, 727, 729, 731, 732, 734, 735, 737, 738, 739, 741, 742, 744, 745, 746, 747, 748, 749, 750, 878], "tu_m": [315, 715], "tu_n": [315, 715], "tm": [316, 716], "naiv": [316, 716], "compon": [316, 338, 470, 507, 508, 509, 716, 742], "resolv": 316, "59": [316, 328, 338, 508, 716, 732, 742], "456000": [316, 716], "101000": 316, "456": [316, 716, 895, 916], "101": [316, 459, 867], "d1": 316, "d2": 316, "d3": 316, "utc": [317, 336, 470, 717, 740, 878], "tz": [317, 336, 717, 740], "europ": [317, 336, 717, 740], "london": [317, 336, 717, 740], "gmt": [317, 336, 717, 740], "bst": [317, 336, 717, 740], "extract": [318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 338, 339, 343, 344, 346, 452, 453, 454, 545, 718, 719, 721, 722, 723, 727, 728, 729, 730, 732, 733, 734, 735, 736, 738, 739, 742, 743, 747, 748, 750, 860, 861, 862], "weekdai": [318, 334], "day_of_month": [318, 334, 344], "ordinal_dai": [318, 344], "day_of_year": [318, 334, 344], "days_diff": 319, "epochtimeunit": [320, 515, 720], "unix": [320, 515, 720], "epoch_n": [320, 720], "epoch_": [320, 720], "978307200000000": [320, 341, 720, 745], "978307200": [320, 720], "978393600000000": [320, 341, 720, 745], "978393600": [320, 720], "978480000000000": [320, 341, 720, 745], "978480000": [320, 720], "hours_diff": 322, "iso": [323, 343, 344, 723, 747, 748], "correspond": [323, 411, 545, 723, 814, 916], "2006": [323, 333, 737], "180": [323, 335, 346], "2002": [323, 333, 335, 346, 737, 750], "2004": [323, 333, 737], "2005": [323, 333, 737], "1001": [324, 325, 327, 332], "002": [324, 325, 327, 332, 509, 728, 730, 736], "2000": [324, 333, 737], "003": [324, 325, 327, 332], "3000": 324, "997": [324, 325, 327, 332], "997000": 324, "998": [324, 325, 327, 332], "998000": 324, "999": [324, 325, 327, 332], "999000": 324, "microseconds_diff": 325, "milliseconds_diff": 327, "minutes_diff": 329, "1440": [329, 733], "nanoseconds_diff": 332, "1000000": [332, 473, 736], "leap": [333, 737], "account": [333, 348, 349, 350, 545, 737, 754, 755, 756, 916], "minu": [333, 737], "dictat": [333, 737], "date_plus_1i": [333, 737], "1y2mo": [333, 737], "date_min": 333, "1998": [333, 737], "1999": [333, 737], "2003": [333, 515, 737], "ordin": [334, 411, 545, 738, 814, 916], "366": [334, 738], "convert_time_zon": [336, 740], "timestamp": [336, 515, 740], "unset": [336, 740], "london_timezon": 336, "amsterdam": 336, "london_to_amsterdam": 336, "cet": 336, "cest": 336, "half": [337, 348, 349, 350, 545, 741, 754, 755, 756, 916], "225": [337, 342], "to_fram": [337, 342, 470, 834, 835, 874, 875, 878, 916], "10m": [337, 342, 741, 746], "milli": [338, 742], "micro": [338, 742], "456789": 338, "654321": 338, "111110": 338, "765431": 338, "sec": 338, "11111": 338, "seconds_diff": 339, "timestamp_n": [341, 745], "timestamp_m": 341, "978307200000": 341, "978393600000": 341, "978480000000": 341, "53": [343, 747], "sundai": [344, 748], "incorrect": [345, 430, 545, 621, 749, 836, 916], "tu_u": [345, 749], "32971": [345, 749], "32974": [345, 749], "32976": [345, 749], "718281828459045": [347, 384, 545, 752, 793, 916], "pk": [347, 545, 752, 916], "459148": [347, 545], "754888": [347, 545], "span": [348, 349, 350, 545, 754, 755, 756, 916], "half_lif": [348, 349, 350, 545, 754, 755, 756, 916], "ignore_nul": [348, 349, 350, 545, 754, 755, 756, 906, 916], "exponenti": [348, 349, 350, 352, 545, 754, 755, 756, 757, 916], "weight": [348, 349, 350, 417, 418, 419, 420, 421, 422, 424, 425, 426, 438, 545, 754, 755, 756, 820, 821, 822, 823, 824, 825, 827, 828, 829, 846, 916], "decai": [348, 349, 350, 545, 754, 755, 756, 916], "term": [348, 349, 350, 455, 458, 545, 754, 755, 756, 863, 866, 916], "mass": [348, 349, 350, 545, 754, 755, 756, 916], "gamma": [348, 349, 350, 545, 754, 755, 756, 916], "foral": [348, 349, 350, 545, 754, 755, 756, 916], "geq": [348, 349, 350, 545, 754, 755, 756, 916], "theta": [348, 349, 350, 545, 754, 755, 756, 916], "life": [348, 349, 350, 545, 754, 755, 756, 916], "exp": [348, 349, 350, 545, 754, 755, 756, 916], "ln": [348, 349, 350, 545, 754, 755, 756, 916], "smooth": [348, 349, 350, 545, 754, 755, 756, 916], "factor": [348, 349, 350, 483, 545, 754, 755, 756, 899, 916], "leq": [348, 349, 350, 545, 754, 755, 756, 916], "begin": [348, 349, 350, 451, 545, 754, 755, 756, 859, 916], "imbal": [348, 349, 350, 545, 754, 755, 756, 916], "ew": [348, 349, 350, 545, 754, 755, 756, 916], "w_i": [348, 349, 350, 545, 754, 755, 756, 916], "recurs": [348, 349, 350, 545, 754, 755, 756, 916], "y_0": [348, 349, 350, 545, 754, 755, 756, 916], "x_0": [348, 349, 350, 545, 754, 755, 756, 916], "y_t": [348, 349, 350, 545, 754, 755, 756, 916], "y_": [348, 349, 350, 545, 754, 755, 756, 916], "x_t": [348, 349, 350, 545, 754, 755, 756, 916], "observ": [348, 349, 350, 545, 754, 755, 756, 916], "x_2": [348, 349, 350, 545, 754, 755, 756, 916], "428571": [348, 545], "bia": [349, 350, 379, 423, 438, 545, 755, 756, 790, 826, 846, 916], "unbias": [349, 350, 545, 755, 756, 916], "963624": [349, 545, 755, 916], "928571": [350, 545, 756, 916], "wildcard": [351, 491, 498, 504, 505, 513, 528, 545], "regex": [351, 394, 445, 446, 449, 451, 452, 460, 461, 468, 511, 521, 524, 534, 545, 853, 854, 857, 859, 860, 868, 869, 876], "aa": [351, 511, 545], "ba": [351, 511, 545], "cc": [351, 511, 545], "718282": [352, 545], "389056": [352, 545], "54": [352, 545], "59815": [352, 545], "expand": [353, 393, 394, 414, 545, 758, 916], "arr": [353, 510, 538, 545, 758, 897, 908, 916], "exprlistnamespac": [353, 359, 415, 545], "exprstringnamespac": [353, 545], "pythonliter": [354, 545, 615, 637, 759, 916], "extrem": [354, 545, 759, 916], "group_col": [357, 490, 545], "g1": [357, 490, 545], "g2": [357, 490, 545], "lt": [357, 490, 545, 916], "gte": [357, 490, 545], "9774092659964970114": [362, 545], "13614470193936745724": [362, 545], "1101441246220388612": [362, 545], "11638928888656214026": [362, 545], "13382926553367784577": [362, 545], "cumsum": [364, 545, 577, 637, 916], "interpolationmethod": [365, 545, 770, 916], "regrid": [365, 545], "grid": [365, 545], "df_original_grid": [365, 545], "grid_point": [365, 545], "df_new_grid": [365, 545], "conflat": [366, 545], "finit": [368, 501, 531, 545, 775, 916], "primit": [370, 545, 897, 916], "optional_memb": [370, 545, 778, 916], "infinit": [371, 545, 779, 916], "_isnan": [372, 545], "b_isnan": [372, 545], "negat": [373, 545], "_is_not_nan": [374, 545], "b_is_not_nan": [374, 545], "_not_nul": [375, 545], "a_not_nul": [375, 545], "b_not_nul": [375, 545], "_isnul": [376, 545], "a_isnul": [376, 545], "b_isnul": [376, 545], "undo": [378, 398, 545], "duplicateerror": [378, 545, 554], "occurr": [378, 545], "333333": [378, 426, 545, 809, 829, 916], "fisher": [379, 438, 545, 790, 846, 916], "fourth": [379, 545, 790, 916], "central": [379, 438, 545, 790, 846, 916], "subtract": [379, 545, 790, 916], "distribut": [379, 438, 545, 790, 846, 916], "elimin": [379, 545, 790, 916], "bias": [379, 438, 545, 790, 846, 916], "scipi": [379, 438, 545, 790, 846, 916], "stat": [379, 438, 545, 790, 846, 916], "153061": [379, 545], "logarithm": [384, 385, 545, 793, 794, 916], "584963": [384, 545], "30103": [385, 545], "60206": [385, 545], "lowest": [386, 545], "9223372036854775808": [386, 545], "agg_list": [387, 545], "elementwis": [387, 417, 418, 419, 420, 421, 422, 424, 425, 426, 491, 492, 545, 820, 821, 822, 823, 824, 825, 827, 828, 829, 916], "third": [387, 545], "parti": [387, 545], "book": [387, 545], "argmax": [387, 545], "_revers": [388, 416, 476, 545], "b_revers": [388, 416, 476, 545], "remap": [389, 545, 796, 916], "lookup": [389, 545, 796, 916], "country_code_dict": [389, 545], "ca": [389, 545], "canada": [389, 545], "de": [389, 545], "germani": [389, 545], "fr": [389, 545], "franc": [389, 545], "country_cod": [389, 545], "unknown": [389, 519, 545], "rest": [389, 545], "computeerror": [395, 459, 554, 867], "keep_nam": [398, 545], "poison": [402, 403, 545, 805, 806, 916], "nanmax": [402, 403, 545, 805, 806, 916], "wherea": [402, 403, 545, 576, 583, 637, 805, 806, 916], "outcom": [405, 545], "_max": [405, 545], "c_max": [405, 545], "_min": [405, 545], "c_min": [405, 545], "recent": [406, 545, 809, 916], "percent": [406, 545, 809, 916], "090909": [406, 545], "expon": [407, 545], "power": [407, 545], "reverse_": [408, 545], "reverse_a": [408, 545], "reverse_fruit": [408, 545], "reverse_b": [408, 545], "reverse_car": [408, 545], "rankmethod": [411, 545, 814, 916], "ti": [411, 545, 814, 916], "appropri": [411, 545, 814, 916], "competit": [411, 545, 814, 916], "highest": [411, 487, 501, 531, 545, 637, 814, 916], "64bit": [413, 545, 816, 916], "safe": [413, 545, 816, 897, 916], "coerc": [414, 545], "dim": [415, 545, 818, 916], "fruits_revers": [416, 476, 545], "cars_revers": [416, 476, 545], "window_s": [417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 545, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 916], "rolling_min": [417, 545, 820, 916], "rolling_max": [417, 545, 820, 916], "rolling_mean": [417, 545, 820, 916], "rolling_sum": [417, 545, 820, 916], "multipli": [417, 418, 419, 420, 421, 422, 424, 425, 426, 545, 820, 821, 822, 823, 824, 825, 827, 828, 829, 916], "358899": [417, 545], "041452": [417, 545], "567764": [417, 545], "travers": [418, 419, 421, 424, 425, 426, 545, 821, 822, 824, 827, 828, 829, 916], "vector": [418, 419, 421, 424, 425, 426, 545, 821, 822, 824, 827, 828, 829, 916], "5h": [418, 419, 420, 421, 422, 424, 425, 426, 545], "33": [422, 427, 498, 545, 825, 916], "skew": [423, 545, 826, 916], "527525": [424, 545, 827, 916], "digit": [427, 473, 545, 830, 854, 881, 916], "searchsortedsid": [429, 545, 832, 916], "maintain": [429, 485, 545, 602, 603, 637, 832, 901, 916], "leftmost": [429, 545, 832, 916], "rightmost": [429, 545, 832, 916], "six": [429, 545], "extrema": [433, 545, 840, 916], "112": [433, 545], "129": [433, 545], "i8": [433, 545, 710, 819, 903, 916], "8589934592": [433, 545], "1073741824": [433, 545], "content": [434, 488, 545, 842, 916], "175201": [437, 545, 845, 916], "about": [438, 545, 846, 916], "unimod": [438, 545, 846, 916], "skewtest": [438, 545, 846, 916], "speak": [438, 545, 846, 916], "g_1": [438, 545, 846, 916], "m_3": [438, 545, 846, 916], "m_2": [438, 545, 846, 916], "m_i": [438, 545, 846, 916], "sum_": [438, 545, 846, 916], "texttt": [438, 545, 846, 916], "k_3": [438, 545, 846, 916], "k_2": [438, 545, 846, 916], "sqrt": [438, 545, 846, 916], "343622": [438, 545], "value1": [441, 545], "value2": [441, 545], "414214": [442, 545, 849, 916], "ends_with": [445, 468, 876], "crab": [445, 853], "dog": [445, 471, 472, 500, 853], "rab": [445, 853], "success": [446, 452, 854, 860], "overlap": [446, 452, 854, 860], "captur": [446, 451, 452, 854, 859, 860], "123": [446, 452, 461, 854, 860, 869, 895, 916], "bla": [446, 452, 854, 860], "asd": [446, 452, 854, 860], "678": [446, 452, 854, 860], "910t": [446, 452, 854, 860], "r": [446, 450, 451, 452, 460, 545, 854, 858, 859, 860, 868], "count_digit": 446, "666f6f": [448, 856], "626172": [448, 856], "mango": [449, 468, 857, 876], "go": [449, 857], "has_suffix": 449, "group_index": [451, 859], "vote": [451, 859], "ballon_dor": [451, 859], "candid": [451, 859], "messi": [451, 859], "ref": [451, 859], "candidat": [451, 859], "jorginho": [451, 859], "ronaldo": [451, 859], "extracted_nr": 452, "910": [452, 860], "json_path_match": [453, 861], "jsonpath": [453, 454, 861, 862], "json_path": [454, 862], "regardless": [454, 862], "json_val": [454, 862], "n_char": [455, 863], "caf\u00e9": [455, 458, 863, 866], "345": [455, 458, 863, 866], "\u6771\u4eac": [455, 458, 863, 866], "nchar": [455, 458], "fillchar": [456, 462, 864, 870], "justifi": [456, 462, 864, 870], "pad": [456, 462, 473, 864, 870, 881], "cow": [456, 462, 864, 870], "monkei": [456, 462, 864, 870], "hippopotamu": [456, 462, 864, 870], "strip": [457, 463, 865, 871], "whitespac": [457, 463, 469, 865, 871, 877], "tworld": [457, 469, 865, 877], "wod": [457, 463, 865, 871], "rld": [457, 865], "text": [458, 460, 461, 866], "radix": [459, 867], "parseerror": [459, 867], "becom": [459, 867], "defult": [459, 867], "silent": [459, 867], "110": [459, 867], "010": [459, 867], "fa1e": [459, 867], "ff00": [459, 867], "cafe": [459, 867], "64030": [459, 867], "65280": [459, 867], "51966": [459, 867], "replace_al": [460, 868], "123abc": [460, 868], "abc456": [460, 868], "abcabc": [461, 869], "123a123": [461, 869], "bc": [461, 534, 869], "trail": [463, 469, 871, 877], "worl": [463, 469, 871, 877], "subslic": [464, 872], "pear": [464, 872], "papaya": [464, 872], "dragonfruit": [464, 872], "s_slice": 464, "ear": [464, 872], "aya": [464, 872], "uit": [464, 872], "ya": [464, 872], "onf": [464, 872], "a_1": [466, 874, 894, 916], "d_4": [466, 874], "rename_field": [466, 467, 874, 875], "first_part": [466, 467, 874, 875], "second_part": [466, 467, 874, 875], "remaind": [467, 875], "app": [468, 876], "has_prefix": 468, "polarstemporaltyp": [470, 878], "tz_awar": [470, 878], "strftime": [470, 878], "anywher": [470, 878], "3f": 470, "00z": [470, 878], "sun": [470, 878], "34": [470, 878], "lowercas": [471, 879], "variant": [471, 472], "uppercas": [472, 880], "100000": 473, "0010": 473, "0001": 473, "00000": 473, "00001": 473, "cd": [474, 475], "struct_col": [474, 475], "www": 475, "xxx": 475, "yyi": 475, "zzz": 475, "obvious": 475, "referenc": 475, "structfieldnotfounderror": [475, 554], "761594": [482, 545, 891, 916], "replic": [483, 545, 899, 916], "vals_phys": [483, 545], "largest": [484, 545, 900, 916], "smallest": [484, 545, 900, 916], "bottom_k": [484, 545], "value_count": [486, 545, 916], "9223372036854775807": [487, 545], "multithread": [488, 545], "columnwis": [491, 492], "AND": 491, "bitwis": [491, 492], "returns_scalar": 493, "product_a": 493, "49": 493, "Be": 494, "more_nam": 498, "hamburg": 498, "lag": 499, "mimic": 499, "a_lag_": 499, "a_rol": 499, "plai": 500, "swim": 500, "walk": 500, "full_sent": 500, "correlationmethod": 501, "propagate_nan": [501, 531], "spearman": [501, 531], "larger": [501, 531, 602, 603, 637], "544705": [501, 526], "covari": 503, "acc": [504, 505, 513, 528], "include_init": 504, "accumul": [504, 505, 513, 528], "new_valu": [504, 505, 513, 528], "simpli": [504, 513], "cumreduc": 504, "across": [506, 534], "cumfold": 506, "999999": 508, "add_week": 509, "add_dai": 509, "add_second": 509, "add_millisecond": 509, "add_hour": 509, "add_millisec": 509, "ond": 509, "eval": 510, "mathemat": 510, "a_b_doubl": 510, "fstring": 514, "placehold": 514, "hello_": 514, "_world": 514, "foo_": 514, "_bar_": 514, "foo_a_bar_1": 514, "foo_b_bar_2": 514, "foo_c_bar_3": 514, "epoch": [515, 740], "timestep": 515, "1666683077": 515, "1666683099": 515, "39": 515, "12345": [515, 694, 764, 830, 916], "12346": 515, "agg_group": [516, 545], "allow_object": 519, "valueexcept": 519, "test_func": 520, "selector": [521, 524, 534], "favor": [526, 531], "605551": 532, "605551275463989": 532, "my_struct": 533, "q": 533, "isn": 537, "thens": 537, "chain": 537, "sometim": 544, "arcco": [545, 916], "arccosh": [545, 916], "arcsin": [545, 916], "arcsinh": [545, 916], "arctan": [545, 916], "arctanh": [545, 916], "arg_max": [545, 916], "arg_min": [545, 916], "arg_uniqu": [545, 916], "argsort": [545, 916], "backward_fil": 545, "clip_max": [545, 916], "clip_min": [545, 916], "co": [545, 916], "cosh": [545, 916], "cumcount": 545, "cummax": [545, 916], "cummin": [545, 916], "cumprod": [545, 916], "cumulative_ev": [545, 916], "entropi": [545, 916], "ewm_mean": [545, 916], "ewm_std": [545, 916], "ewm_var": [545, 916], "extend_const": [545, 916], "flatten": 545, "inspect": [545, 637], "is_between": [545, 916], "is_finit": [545, 916], "is_first": [545, 916], "is_in": [545, 916], "is_infinit": [545, 916], "is_nan": [545, 916], "is_not_nan": [545, 916], "is_not_nul": [545, 916], "kurtosi": [545, 916], "log10": [545, 916], "map_alia": 545, "map_dict": [545, 916], "nan_max": [545, 916], "nan_min": [545, 916], "pct_chang": [545, 916], "extract_numb": 545, "pow": 545, "reinterpret": [545, 916], "repeat_bi": 545, "rolling_appli": [545, 916], "rolling_median": [545, 916], "rolling_quantil": [545, 916], "rolling_skew": [545, 916], "rolling_std": [545, 916], "rolling_var": [545, 916], "search_sort": [545, 916], "set_sort": [545, 916], "shrink_dtyp": [545, 916], "sin": [545, 916], "sinh": [545, 916], "sort_bi": 545, "tan": [545, 916], "tanh": [545, 916], "to_phys": [545, 916], "top_k": [545, 916], "unique_count": [545, 916], "expos": 554, "registr": 554, "miscellan": 554, "arrowerror": 554, "columnnotfounderror": 554, "invalidoperationerror": 554, "nodataerror": 554, "panicexcept": 554, "schemaerror": 554, "schemafieldnotfounderror": 554, "shapeerror": 554, "build_info": 554, "show_vers": 554, "sqlcontext": [554, 922], "hit": [557, 637], "node": [557, 577, 584, 592, 595, 637], "huge": [560, 637], "saver": [560, 637], "purpos": [567, 637], "influenc": [567, 584, 637], "read_json": [572, 618, 637], "lazygroupbi": [573, 574, 575, 637], "validate_output_schema": [584, 637], "streamabl": [584, 637], "past": [584, 637], "paramount": [584, 637], "hard": [584, 637], "bug": [584, 621, 637], "elig": [584, 637], "ot": [584, 637], "exectut": [584, 637], "invari": [584, 637], "upheld": [584, 637], "prune": [584, 637], "show_plot": [592, 637], "truncate_nod": [592, 637], "figsiz": [592, 601, 637], "gantt": [592, 637], "matplotlib": [592, 601, 637], "plot": [592, 601, 637], "groupby_partit": [592, 637], "470": [592, 637], "475": [592, 637], "1964": [592, 637], "from_json": [594, 637], "swap": [595, 637], "output_path": [601, 637], "raw_output": [601, 637], "figur": [601, 637], "persist": [602, 603, 637], "ram": [602, 603, 637], "slightli": [602, 603, 637], "my_larger_than_ram_fil": [602, 603, 637], "data_pagesize_limit": [603, 637], "290994": [606, 637], "118034": [606, 637], "433013": [606, 637], "1875": [613, 637], "polarsexprtyp": [615, 637], "extern": [616, 637], "df_a": [616, 637], "df_other": [616, 637], "afoo": [616, 637], "cfoo": [616, 637], "train_df": [616, 637], "feature_0": [616, 637], "feature_1": [616, 637], "test_df": [616, 637], "_train": [616, 637], "feature_0_train": [616, 637], "dataframescan": [618, 637], "output_schema": [618, 637], "initialis": 637, "ldf2": 637, "ldf3": 637, "ldf4": 637, "ldf5": 637, "ldf6": 637, "explain": 637, "profil": 637, "sink_ipc": 637, "sink_parquet": 637, "with_context": 637, "sr": [642, 916], "new_aliased_sr": [642, 916], "append_chunk": [645, 916], "super": [645, 916], "141593": [647, 916], "292432": [648, 916], "549306": [652, 916], "listnamespac": [659, 758, 818, 916], "catnamespac": 692, "56789": [694, 764, 830, 916], "901234": [694, 764, 830, 916], "pi": [701, 844, 890, 916], "1232e": [701, 916], "quick": [709, 916], "series_num": [709, 916], "581139": [709, 916], "series_str": [709, 916], "datetimenamespac": 714, "500m": [727, 729, 735, 742], "500000": 727, "2m": 732, "500000000": 735, "date_minus_1y_2mon": 737, "1583020800": 740, "1585699200": 740, "1588291200": 740, "nyc": 740, "edt": 740, "1583038800": 740, "1585717200": 740, "1588309200": 740, "165": [741, 746], "series_equ": [741, 746, 916], "timestamp_u": 745, "978307200000000000": 745, "978393600000000000": 745, "978480000000000000": 745, "005": [752, 916], "06293300616044681": [752, 916], "65": [752, 916], "8568409950394724": [752, 916], "4000000": [753, 916], "814697265625": [753, 916], "stringnamespac": [758, 851, 916], "bitmask": [766, 916], "swiftli": [766, 916], "10734580197236529959": [767, 916], "3022416320763508302": [767, 916], "13756996518000038261": [767, 916], "fall": [771, 916], "2147483648": [795, 916], "iso3166": [796, 916], "tur": [796, 916], "jpn": [796, 916], "nld": [796, 916], "country_lookup": [796, 916], "japan": [796, 916], "t\u00fcrkiy": [796, 916], "netherland": [796, 916], "unrecognis": [796, 916], "unspecifi": [796, 916], "country_nam": [796, 916], "166667": [809, 916], "142857": [809, 916], "512": [809, 916], "peak": [810, 811, 916], "nanstd": [820, 916], "858612": [820, 916], "200": [821, 822, 824, 916], "150": [822, 916], "250": [822, 916], "350": [822, 916], "450": [822, 916], "381802": [826, 916], "dev": [827, 916], "57": [830, 916], "frequent": [834, 835, 916], "mutat": [835, 916], "2246e": [844, 890, 916], "divisor": [850, 905, 916], "6331e16": [890, 916], "lib": [893, 916], "int64arrai": [893, 916], "a_2": [894, 916], "a_3": [894, 916], "zero_copy_onli": [897, 916], "writabl": [897, 916], "view": [897, 916], "presenc": [897, 916], "immut": [897, 916], "made": [897, 916], "127": [903, 916], "seriesview": [906, 916], "arraylik": 916, "dtype_if_empti": 916, "position": 916, "scenario": 916, "through": 916, "chunk_length": 916, "cut": 916, "eq": 916, "ge": 916, "get_chunk": 916, "gt": 916, "has_valid": 916, "is_boolean": 916, "is_float": 916, "is_numer": 916, "is_sort": 916, "is_tempor": 916, "is_utf8": 916, "le": 916, "ne": 916, "new_from_index": 916, "peak_max": 916, "peak_min": 916, "set_at_idx": 916}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [32, 0, 1, "", "DataType"], [33, 0, 1, "", "Date"], [34, 0, 1, "", "Datetime"], [35, 0, 1, "", "Duration"], [36, 0, 1, "", "Float32"], [37, 0, 1, "", "Float64"], [38, 0, 1, "", "Int16"], [39, 0, 1, "", "Int32"], [40, 0, 1, "", "Int64"], [41, 0, 1, "", "Int8"], [42, 0, 1, "", "List"], [43, 0, 1, "", "Null"], [44, 0, 1, "", "Object"], [922, 0, 1, "", "SQLContext"], [48, 0, 1, "", "StringCache"], [49, 0, 1, "", "Struct"], [50, 0, 1, "", "Time"], [51, 0, 1, "", "UInt16"], [52, 0, 1, "", "UInt32"], [53, 0, 1, "", "UInt64"], [54, 0, 1, "", "UInt8"], [55, 0, 1, "", "Unknown"], [56, 0, 1, "", "Utf8"], [57, 4, 1, "", "align_frames"], [491, 4, 1, "", "all"], [492, 4, 1, "", "any"], [493, 4, 1, "", "apply"], [494, 4, 1, "", "arange"], [495, 4, 1, "", "arg_sort_by"], [62, 4, 1, "", "arg_where"], [496, 4, 1, "", "avg"], [63, 4, 1, "", "build_info"], [497, 4, 1, "", "coalesce"], [498, 4, 1, "", "col"], [64, 4, 1, "", "collect_all"], [65, 4, 1, "", "concat"], [499, 4, 1, "", "concat_list"], [500, 4, 1, "", "concat_str"], [501, 4, 1, "", "corr"], [502, 4, 1, "", "count"], [503, 4, 1, "", "cov"], [504, 4, 1, "", "cumfold"], [505, 4, 1, "", "cumreduce"], [506, 4, 1, "", "cumsum"], [66, 4, 1, "", "cut"], [507, 4, 1, "", "date"], [67, 4, 1, "", "date_range"], [508, 4, 1, "", "datetime"], [509, 4, 1, "", "duration"], [510, 4, 1, "", "element"], [511, 4, 1, "", "exclude"], [512, 4, 1, "", "first"], [513, 4, 1, "", "fold"], [514, 4, 1, "", "format"], [82, 4, 1, "", "from_arrow"], [83, 4, 1, "", "from_dataframe"], [84, 4, 1, "", "from_dict"], [85, 4, 1, "", "from_dicts"], [515, 4, 1, "", "from_epoch"], [86, 4, 1, "", "from_numpy"], [87, 4, 1, "", "from_pandas"], [88, 4, 1, "", "from_records"], [89, 4, 1, "", "get_dummies"], [90, 4, 1, "", "get_idx_type"], [516, 4, 1, "", "groups"], [517, 4, 1, "", "head"], [518, 4, 1, "", "list"], [519, 4, 1, "", "lit"], [520, 4, 1, "", "map"], [521, 4, 1, "", "max"], [522, 4, 1, "", "mean"], [523, 4, 1, "", "median"], [524, 4, 1, "", "min"], [525, 4, 1, "", "n_unique"], [92, 4, 1, "", "ones"], [526, 4, 1, "", "pearson_corr"], [527, 4, 1, "", "quantile"], [93, 4, 1, "", "read_avro"], [94, 4, 1, "", "read_csv"], [95, 4, 1, "", "read_csv_batched"], [96, 4, 1, "", "read_database"], [97, 4, 1, "", "read_delta"], [98, 4, 1, "", "read_excel"], [99, 4, 1, "", "read_ipc"], [100, 4, 1, "", "read_ipc_schema"], [101, 4, 1, "", "read_json"], [102, 4, 1, "", "read_ndjson"], [103, 4, 1, "", "read_parquet"], [104, 4, 1, "", "read_parquet_schema"], [528, 4, 1, "", "reduce"], [529, 4, 1, "", "repeat"], [105, 4, 1, "", "scan_csv"], [106, 4, 1, "", "scan_delta"], [107, 4, 1, "", "scan_ipc"], [108, 4, 1, "", "scan_ndjson"], [109, 4, 1, "", "scan_parquet"], [110, 4, 1, "", "scan_pyarrow_dataset"], [530, 4, 1, "", "select"], [111, 4, 1, "", "show_versions"], [531, 4, 1, "", "spearman_rank_corr"], [532, 4, 1, "", "std"], [533, 4, 1, "", "struct"], [534, 4, 1, "", "sum"], [535, 4, 1, "", "tail"], [118, 4, 1, "", "threadpool_size"], [119, 4, 1, "", "toggle_string_cache"], [536, 4, 1, "", "var"], [537, 4, 1, "", "when"], [120, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "load"], [6, 1, 1, "", "restore_defaults"], [7, 1, 1, "", "save"], [8, 1, 1, "", "set_ascii_tables"], [9, 1, 1, "", "set_fmt_float"], [10, 1, 1, "", "set_fmt_str_lengths"], [11, 1, 1, "", "set_tbl_cell_alignment"], [12, 1, 1, "", "set_tbl_cols"], [13, 1, 1, "", "set_tbl_column_data_type_inline"], [14, 1, 1, "", "set_tbl_dataframe_shape_below"], [15, 1, 1, "", "set_tbl_formatting"], [16, 1, 1, "", "set_tbl_hide_column_data_types"], [17, 1, 1, "", "set_tbl_hide_column_names"], [18, 1, 1, "", "set_tbl_hide_dataframe_shape"], [19, 1, 1, "", "set_tbl_hide_dtype_separator"], [20, 1, 1, "", "set_tbl_rows"], [21, 1, 1, "", "set_tbl_width_chars"], [22, 1, 1, "", "set_verbose"], [23, 1, 1, "", "state"]], "polars.DataFrame": [[123, 1, 1, "", "__dataframe__"], [124, 1, 1, "", "apply"], [125, 1, 1, "", "clear"], [126, 1, 1, "", "clone"], [127, 2, 1, "", "columns"], [128, 1, 1, "", "corr"], [129, 1, 1, "", "describe"], [130, 1, 1, "", "drop"], [131, 1, 1, "", "drop_in_place"], [132, 1, 1, "", "drop_nulls"], [133, 2, 1, "", "dtypes"], [134, 1, 1, "", "estimated_size"], [135, 1, 1, "", "explode"], [136, 1, 1, "", "extend"], [137, 1, 1, "", "fill_nan"], [138, 1, 1, "", "fill_null"], [139, 1, 1, "", "filter"], [140, 1, 1, "", "find_idx_by_name"], [141, 1, 1, "", "fold"], [142, 1, 1, "", "frame_equal"], [143, 1, 1, "", "get_column"], [144, 1, 1, "", "get_columns"], [145, 1, 1, "", "glimpse"], [146, 1, 1, "", "groupby"], [147, 1, 1, "", "groupby_dynamic"], [148, 1, 1, "", "groupby_rolling"], [149, 1, 1, "", "hash_rows"], [150, 1, 1, "", "head"], [151, 2, 1, "", "height"], [152, 1, 1, "", "hstack"], [153, 1, 1, "", "insert_at_idx"], [154, 1, 1, "", "interpolate"], [155, 1, 1, "", "is_duplicated"], [156, 1, 1, "", "is_empty"], [157, 1, 1, "", "is_unique"], [158, 1, 1, "", "item"], [159, 1, 1, "", "iter_rows"], [160, 1, 1, "", "iter_slices"], [161, 1, 1, "", "join"], [162, 1, 1, "", "join_asof"], [163, 1, 1, "", "lazy"], [164, 1, 1, "", "limit"], [165, 1, 1, "", "max"], [166, 1, 1, "", "mean"], [167, 1, 1, "", "median"], [168, 1, 1, "", "melt"], [169, 1, 1, "", "merge_sorted"], [170, 1, 1, "", "min"], [171, 1, 1, "", "n_chunks"], [172, 1, 1, "", "n_unique"], [173, 1, 1, "", "null_count"], [174, 1, 1, "", "partition_by"], [175, 1, 1, "", "pipe"], [176, 1, 1, "", "pivot"], [177, 1, 1, "", "product"], [178, 1, 1, "", "quantile"], [179, 1, 1, "", "rechunk"], [180, 1, 1, "", "rename"], [181, 1, 1, "", "replace"], [182, 1, 1, "", "replace_at_idx"], [183, 1, 1, "", "reverse"], [184, 1, 1, "", "row"], [185, 1, 1, "", "rows"], [186, 1, 1, "", "sample"], [187, 2, 1, "", "schema"], [188, 1, 1, "", "select"], [189, 2, 1, "", "shape"], [190, 1, 1, "", "shift"], [191, 1, 1, "", "shift_and_fill"], [192, 1, 1, "", "shrink_to_fit"], [193, 1, 1, "", "slice"], [194, 1, 1, "", "sort"], [195, 1, 1, "", "std"], [196, 1, 1, "", "sum"], [197, 1, 1, "", "tail"], [198, 1, 1, "", "take_every"], [199, 1, 1, "", "to_arrow"], [200, 1, 1, "", "to_dict"], [201, 1, 1, "", "to_dicts"], [202, 1, 1, "", "to_dummies"], [203, 1, 1, "", "to_numpy"], [204, 1, 1, "", "to_pandas"], [205, 1, 1, "", "to_series"], [206, 1, 1, "", "to_struct"], [207, 1, 1, "", "transpose"], [208, 1, 1, "", "unique"], [209, 1, 1, "", "unnest"], [210, 1, 1, "", "unstack"], [211, 1, 1, "", "update"], [212, 1, 1, "", "upsample"], [213, 1, 1, "", "var"], [214, 1, 1, "", "vstack"], [215, 2, 1, "", "width"], [216, 1, 1, "", "with_columns"], [217, 1, 1, "", "with_row_count"], [24, 1, 1, "", "write_avro"], [25, 1, 1, "", "write_csv"], [26, 1, 1, "", "write_database"], [27, 1, 1, "", "write_excel"], [28, 1, 1, "", "write_ipc"], [29, 1, 1, "", "write_json"], [30, 1, 1, "", "write_ndjson"], [31, 1, 1, "", "write_parquet"]], "polars.DataType": [[32, 1, 1, "", "__init__"]], "polars.Date": [[33, 1, 1, "", "__init__"]], "polars.Datetime": [[34, 1, 1, "", "__init__"]], "polars.Duration": [[35, 1, 1, "", "__init__"]], "polars.Expr": [[245, 1, 1, "", "abs"], [246, 1, 1, "", "agg_groups"], [247, 1, 1, "", "alias"], [248, 1, 1, "", "all"], [249, 1, 1, "", "any"], [250, 1, 1, "", "append"], [251, 1, 1, "", "apply"], [252, 1, 1, "", "arccos"], [253, 1, 1, "", "arccosh"], [254, 1, 1, "", "arcsin"], [255, 1, 1, "", "arcsinh"], [256, 1, 1, "", "arctan"], [257, 1, 1, "", "arctanh"], [258, 1, 1, "", "arg_max"], [259, 1, 1, "", "arg_min"], [260, 1, 1, "", "arg_sort"], [261, 1, 1, "", "arg_true"], [262, 1, 1, "", "arg_unique"], [263, 1, 1, "", "argsort"], [290, 1, 1, "", "backward_fill"], [296, 1, 1, "", "cast"], [298, 1, 1, "", "ceil"], [299, 1, 1, "", "clip"], [300, 1, 1, "", "clip_max"], [301, 1, 1, "", "clip_min"], [302, 1, 1, "", "cos"], [303, 1, 1, "", "cosh"], [304, 1, 1, "", "count"], [305, 1, 1, "", "cumcount"], [306, 1, 1, "", "cummax"], [307, 1, 1, "", "cummin"], [308, 1, 1, "", "cumprod"], [309, 1, 1, "", "cumsum"], [310, 1, 1, "", "cumulative_eval"], [311, 1, 1, "", "diff"], [312, 1, 1, "", "dot"], [313, 1, 1, "", "drop_nans"], [314, 1, 1, "", "drop_nulls"], [347, 1, 1, "", "entropy"], [348, 1, 1, "", "ewm_mean"], [349, 1, 1, "", "ewm_std"], [350, 1, 1, "", "ewm_var"], [351, 1, 1, "", "exclude"], [352, 1, 1, "", "exp"], [353, 1, 1, "", "explode"], [354, 1, 1, "", "extend_constant"], [355, 1, 1, "", "fill_nan"], [356, 1, 1, "", "fill_null"], [357, 1, 1, "", "filter"], [358, 1, 1, "", "first"], [359, 1, 1, "", "flatten"], [360, 1, 1, "", "floor"], [361, 1, 1, "", "forward_fill"], [362, 1, 1, "", "hash"], [363, 1, 1, "", "head"], [364, 1, 1, "", "inspect"], [365, 1, 1, "", "interpolate"], [366, 1, 1, "", "is_between"], [367, 1, 1, "", "is_duplicated"], [368, 1, 1, "", "is_finite"], [369, 1, 1, "", "is_first"], [370, 1, 1, "", "is_in"], [371, 1, 1, "", "is_infinite"], [372, 1, 1, "", "is_nan"], [373, 1, 1, "", "is_not"], [374, 1, 1, "", "is_not_nan"], [375, 1, 1, "", "is_not_null"], [376, 1, 1, "", "is_null"], [377, 1, 1, "", "is_unique"], [378, 1, 1, "", "keep_name"], [379, 1, 1, "", "kurtosis"], [380, 1, 1, "", "last"], [381, 1, 1, "", "len"], [382, 1, 1, "", "limit"], [383, 1, 1, "", "list"], [384, 1, 1, "", "log"], [385, 1, 1, "", "log10"], [386, 1, 1, "", "lower_bound"], [387, 1, 1, "", "map"], [388, 1, 1, "", "map_alias"], [389, 1, 1, "", "map_dict"], [390, 1, 1, "", "max"], [391, 1, 1, "", "mean"], [392, 1, 1, "", "median"], [399, 1, 1, "", "min"], [400, 1, 1, "", "mode"], [401, 1, 1, "", "n_unique"], [402, 1, 1, "", "nan_max"], [403, 1, 1, "", "nan_min"], [404, 1, 1, "", "null_count"], [405, 1, 1, "", "over"], [406, 1, 1, "", "pct_change"], [407, 1, 1, "", "pow"], [408, 1, 1, "", "prefix"], [409, 1, 1, "", "product"], [410, 1, 1, "", "quantile"], [411, 1, 1, "", "rank"], [412, 1, 1, "", "rechunk"], [413, 1, 1, "", "reinterpret"], [414, 1, 1, "", "repeat_by"], [415, 1, 1, "", "reshape"], [416, 1, 1, "", "reverse"], [417, 1, 1, "", "rolling_apply"], [418, 1, 1, "", "rolling_max"], [419, 1, 1, "", "rolling_mean"], [420, 1, 1, "", "rolling_median"], [421, 1, 1, "", "rolling_min"], [422, 1, 1, "", "rolling_quantile"], [423, 1, 1, "", "rolling_skew"], [424, 1, 1, "", "rolling_std"], [425, 1, 1, "", "rolling_sum"], [426, 1, 1, "", "rolling_var"], [427, 1, 1, "", "round"], [428, 1, 1, "", "sample"], [429, 1, 1, "", "search_sorted"], [430, 1, 1, "", "set_sorted"], [431, 1, 1, "", "shift"], [432, 1, 1, "", "shift_and_fill"], [433, 1, 1, "", "shrink_dtype"], [434, 1, 1, "", "shuffle"], [435, 1, 1, "", "sign"], [436, 1, 1, "", "sin"], [437, 1, 1, "", "sinh"], [438, 1, 1, "", "skew"], [439, 1, 1, "", "slice"], [440, 1, 1, "", "sort"], [441, 1, 1, "", "sort_by"], [442, 1, 1, "", "sqrt"], [443, 1, 1, "", "std"], [476, 1, 1, "", "suffix"], [477, 1, 1, "", "sum"], [478, 1, 1, "", "tail"], [479, 1, 1, "", "take"], [480, 1, 1, "", "take_every"], [481, 1, 1, "", "tan"], [482, 1, 1, "", "tanh"], [483, 1, 1, "", "to_physical"], [484, 1, 1, "", "top_k"], [485, 1, 1, "", "unique"], [486, 1, 1, "", "unique_counts"], [487, 1, 1, "", "upper_bound"], [488, 1, 1, "", "value_counts"], [489, 1, 1, "", "var"], [490, 1, 1, "", "where"]], "polars.Expr.arr": [[264, 1, 1, "", "arg_max"], [265, 1, 1, "", "arg_min"], [266, 1, 1, "", "concat"], [267, 1, 1, "", "contains"], [268, 1, 1, "", "count_match"], [269, 1, 1, "", "diff"], [270, 1, 1, "", "eval"], [271, 1, 1, "", "explode"], [272, 1, 1, "", "first"], [273, 1, 1, "", "get"], [274, 1, 1, "", "head"], [275, 1, 1, "", "join"], [276, 1, 1, "", "last"], [277, 1, 1, "", "lengths"], [278, 1, 1, "", "max"], [279, 1, 1, "", "mean"], [280, 1, 1, "", "min"], [281, 1, 1, "", "reverse"], [282, 1, 1, "", "shift"], [283, 1, 1, "", "slice"], [284, 1, 1, "", "sort"], [285, 1, 1, "", "sum"], [286, 1, 1, "", "tail"], [287, 1, 1, "", "take"], [288, 1, 1, "", "to_struct"], [289, 1, 1, "", "unique"]], "polars.Expr.bin": [[291, 1, 1, "", "contains"], [292, 1, 1, "", "decode"], [293, 1, 1, "", "encode"], [294, 1, 1, "", "ends_with"], [295, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[297, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[315, 1, 1, "", "cast_time_unit"], [316, 1, 1, "", "combine"], [317, 1, 1, "", "convert_time_zone"], [318, 1, 1, "", "day"], [319, 1, 1, "", "days"], [320, 1, 1, "", "epoch"], [321, 1, 1, "", "hour"], [322, 1, 1, "", "hours"], [323, 1, 1, "", "iso_year"], [324, 1, 1, "", "microsecond"], [325, 1, 1, "", "microseconds"], [326, 1, 1, "", "millisecond"], [327, 1, 1, "", "milliseconds"], [328, 1, 1, "", "minute"], [329, 1, 1, "", "minutes"], [330, 1, 1, "", "month"], [331, 1, 1, "", "nanosecond"], [332, 1, 1, "", "nanoseconds"], [333, 1, 1, "", "offset_by"], [334, 1, 1, "", "ordinal_day"], [335, 1, 1, "", "quarter"], [336, 1, 1, "", "replace_time_zone"], [337, 1, 1, "", "round"], [338, 1, 1, "", "second"], [339, 1, 1, "", "seconds"], [340, 1, 1, "", "strftime"], [341, 1, 1, "", "timestamp"], [342, 1, 1, "", "truncate"], [343, 1, 1, "", "week"], [344, 1, 1, "", "weekday"], [345, 1, 1, "", "with_time_unit"], [346, 1, 1, "", "year"]], "polars.Expr.meta": [[393, 1, 1, "", "has_multiple_outputs"], [394, 1, 1, "", "is_regex_projection"], [395, 1, 1, "", "output_name"], [396, 1, 1, "", "pop"], [397, 1, 1, "", "root_names"], [398, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[444, 1, 1, "", "concat"], [445, 1, 1, "", "contains"], [446, 1, 1, "", "count_match"], [447, 1, 1, "", "decode"], [448, 1, 1, "", "encode"], [449, 1, 1, "", "ends_with"], [450, 1, 1, "", "explode"], [451, 1, 1, "", "extract"], [452, 1, 1, "", "extract_all"], [453, 1, 1, "", "json_extract"], [454, 1, 1, "", "json_path_match"], [455, 1, 1, "", "lengths"], [456, 1, 1, "", "ljust"], [457, 1, 1, "", "lstrip"], [458, 1, 1, "", "n_chars"], [459, 1, 1, "", "parse_int"], [460, 1, 1, "", "replace"], [461, 1, 1, "", "replace_all"], [462, 1, 1, "", "rjust"], [463, 1, 1, "", "rstrip"], [464, 1, 1, "", "slice"], [465, 1, 1, "", "split"], [466, 1, 1, "", "split_exact"], [467, 1, 1, "", "splitn"], [468, 1, 1, "", "starts_with"], [469, 1, 1, "", "strip"], [470, 1, 1, "", "strptime"], [471, 1, 1, "", "to_lowercase"], [472, 1, 1, "", "to_uppercase"], [473, 1, 1, "", "zfill"]], "polars.Expr.struct": [[474, 1, 1, "", "field"], [475, 1, 1, "", "rename_fields"]], "polars.Float32": [[36, 1, 1, "", "__init__"]], "polars.Float64": [[37, 1, 1, "", "__init__"]], "polars.Int16": [[38, 1, 1, "", "__init__"]], "polars.Int32": [[39, 1, 1, "", "__init__"]], "polars.Int64": [[40, 1, 1, "", "__init__"]], "polars.Int8": [[41, 1, 1, "", "__init__"]], "polars.LazyFrame": [[557, 1, 1, "", "cache"], [558, 1, 1, "", "clear"], [559, 1, 1, "", "clone"], [560, 1, 1, "", "collect"], [561, 2, 1, "", "columns"], [562, 1, 1, "", "drop"], [563, 1, 1, "", "drop_nulls"], [564, 2, 1, "", "dtypes"], [565, 1, 1, "", "explain"], [566, 1, 1, "", "explode"], [567, 1, 1, "", "fetch"], [568, 1, 1, "", "fill_nan"], [569, 1, 1, "", "fill_null"], [570, 1, 1, "", "filter"], [571, 1, 1, "", "first"], [572, 1, 1, "", "from_json"], [573, 1, 1, "", "groupby"], [574, 1, 1, "", "groupby_dynamic"], [575, 1, 1, "", "groupby_rolling"], [576, 1, 1, "", "head"], [577, 1, 1, "", "inspect"], [578, 1, 1, "", "interpolate"], [579, 1, 1, "", "join"], [580, 1, 1, "", "join_asof"], [581, 1, 1, "", "last"], [582, 1, 1, "", "lazy"], [583, 1, 1, "", "limit"], [584, 1, 1, "", "map"], [585, 1, 1, "", "max"], [586, 1, 1, "", "mean"], [587, 1, 1, "", "median"], [588, 1, 1, "", "melt"], [589, 1, 1, "", "merge_sorted"], [590, 1, 1, "", "min"], [591, 1, 1, "", "pipe"], [592, 1, 1, "", "profile"], [593, 1, 1, "", "quantile"], [594, 1, 1, "", "read_json"], [595, 1, 1, "", "rename"], [596, 1, 1, "", "reverse"], [597, 2, 1, "", "schema"], [598, 1, 1, "", "select"], [599, 1, 1, "", "shift"], [600, 1, 1, "", "shift_and_fill"], [601, 1, 1, "", "show_graph"], [602, 1, 1, "", "sink_ipc"], [603, 1, 1, "", "sink_parquet"], [604, 1, 1, "", "slice"], [605, 1, 1, "", "sort"], [606, 1, 1, "", "std"], [607, 1, 1, "", "sum"], [608, 1, 1, "", "tail"], [609, 1, 1, "", "take_every"], [610, 1, 1, "", "unique"], [611, 1, 1, "", "unnest"], [612, 1, 1, "", "update"], [613, 1, 1, "", "var"], [614, 2, 1, "", "width"], [615, 1, 1, "", "with_columns"], [616, 1, 1, "", "with_context"], [617, 1, 1, "", "with_row_count"], [618, 1, 1, "", "write_json"]], "polars.List": [[42, 1, 1, "", "__init__"]], "polars.Null": [[43, 1, 1, "", "__init__"]], "polars.Object": [[44, 1, 1, "", "__init__"]], "polars.SQLContext": [[45, 1, 1, "", "execute"], [46, 1, 1, "", "query"], [47, 1, 1, "", "register"]], "polars.Series": [[641, 1, 1, "", "abs"], [642, 1, 1, "", "alias"], [643, 1, 1, "", "all"], [644, 1, 1, "", "any"], [645, 1, 1, "", "append"], [646, 1, 1, "", "apply"], [647, 1, 1, "", "arccos"], [648, 1, 1, "", "arccosh"], [649, 1, 1, "", "arcsin"], [650, 1, 1, "", "arcsinh"], [651, 1, 1, "", "arctan"], [652, 1, 1, "", "arctanh"], [653, 1, 1, "", "arg_max"], [654, 1, 1, "", "arg_min"], [655, 1, 1, "", "arg_sort"], [656, 1, 1, "", "arg_true"], [657, 1, 1, "", "arg_unique"], [658, 1, 1, "", "argsort"], [659, 3, 1, "", "arr"], [691, 1, 1, "", "cast"], [692, 3, 1, "", "cat"], [694, 1, 1, "", "ceil"], [695, 1, 1, "", "chunk_lengths"], [696, 1, 1, "", "clear"], [697, 1, 1, "", "clip"], [698, 1, 1, "", "clip_max"], [699, 1, 1, "", "clip_min"], [700, 1, 1, "", "clone"], [701, 1, 1, "", "cos"], [702, 1, 1, "", "cosh"], [703, 1, 1, "", "cummax"], [704, 1, 1, "", "cummin"], [705, 1, 1, "", "cumprod"], [706, 1, 1, "", "cumsum"], [707, 1, 1, "", "cumulative_eval"], [708, 1, 1, "", "cut"], [709, 1, 1, "", "describe"], [710, 1, 1, "", "diff"], [711, 1, 1, "", "dot"], [712, 1, 1, "", "drop_nans"], [713, 1, 1, "", "drop_nulls"], [714, 3, 1, "", "dt"], [751, 3, 1, "", "dtype"], [752, 1, 1, "", "entropy"], [753, 1, 1, "", "estimated_size"], [754, 1, 1, "", "ewm_mean"], [755, 1, 1, "", "ewm_std"], [756, 1, 1, "", "ewm_var"], [757, 1, 1, "", "exp"], [758, 1, 1, "", "explode"], [759, 1, 1, "", "extend_constant"], [760, 1, 1, "", "fill_nan"], [761, 1, 1, "", "fill_null"], [762, 1, 1, "", "filter"], [763, 3, 1, "", "flags"], [764, 1, 1, "", "floor"], [765, 1, 1, "", "get_chunks"], [766, 1, 1, "", "has_validity"], [767, 1, 1, "", "hash"], [768, 1, 1, "", "head"], [769, 3, 1, "", "inner_dtype"], [770, 1, 1, "", "interpolate"], [771, 1, 1, "", "is_between"], [772, 1, 1, "", "is_boolean"], [773, 1, 1, "", "is_duplicated"], [774, 1, 1, "", "is_empty"], [775, 1, 1, "", "is_finite"], [776, 1, 1, "", "is_first"], [777, 1, 1, "", "is_float"], [778, 1, 1, "", "is_in"], [779, 1, 1, "", "is_infinite"], [780, 1, 1, "", "is_nan"], [781, 1, 1, "", "is_not_nan"], [782, 1, 1, "", "is_not_null"], [783, 1, 1, "", "is_null"], [784, 1, 1, "", "is_numeric"], [785, 1, 1, "", "is_sorted"], [786, 1, 1, "", "is_temporal"], [787, 1, 1, "", "is_unique"], [788, 1, 1, "", "is_utf8"], [789, 1, 1, "", "item"], [790, 1, 1, "", "kurtosis"], [791, 1, 1, "", "len"], [792, 1, 1, "", "limit"], [793, 1, 1, "", "log"], [794, 1, 1, "", "log10"], [795, 1, 1, "", "lower_bound"], [796, 1, 1, "", "map_dict"], [797, 1, 1, "", "max"], [798, 1, 1, "", "mean"], [799, 1, 1, "", "median"], [800, 1, 1, "", "min"], [801, 1, 1, "", "mode"], [802, 1, 1, "", "n_chunks"], [803, 1, 1, "", "n_unique"], [804, 3, 1, "", "name"], [805, 1, 1, "", "nan_max"], [806, 1, 1, "", "nan_min"], [807, 1, 1, "", "new_from_index"], [808, 1, 1, "", "null_count"], [809, 1, 1, "", "pct_change"], [810, 1, 1, "", "peak_max"], [811, 1, 1, "", "peak_min"], [812, 1, 1, "", "product"], [813, 1, 1, "", "quantile"], [814, 1, 1, "", "rank"], [815, 1, 1, "", "rechunk"], [816, 1, 1, "", "reinterpret"], [817, 1, 1, "", "rename"], [818, 1, 1, "", "reshape"], [819, 1, 1, "", "reverse"], [820, 1, 1, "", "rolling_apply"], [821, 1, 1, "", "rolling_max"], [822, 1, 1, "", "rolling_mean"], [823, 1, 1, "", "rolling_median"], [824, 1, 1, "", "rolling_min"], [825, 1, 1, "", "rolling_quantile"], [826, 1, 1, "", "rolling_skew"], [827, 1, 1, "", "rolling_std"], [828, 1, 1, "", "rolling_sum"], [829, 1, 1, "", "rolling_var"], [830, 1, 1, "", "round"], [831, 1, 1, "", "sample"], [832, 1, 1, "", "search_sorted"], [833, 1, 1, "", "series_equal"], [834, 1, 1, "", "set"], [835, 1, 1, "", "set_at_idx"], [836, 1, 1, "", "set_sorted"], [837, 3, 1, "", "shape"], [838, 1, 1, "", "shift"], [839, 1, 1, "", "shift_and_fill"], [840, 1, 1, "", "shrink_dtype"], [841, 1, 1, "", "shrink_to_fit"], [842, 1, 1, "", "shuffle"], [843, 1, 1, "", "sign"], [844, 1, 1, "", "sin"], [845, 1, 1, "", "sinh"], [846, 1, 1, "", "skew"], [847, 1, 1, "", "slice"], [848, 1, 1, "", "sort"], [849, 1, 1, "", "sqrt"], [850, 1, 1, "", "std"], [851, 3, 1, "", "str"], [886, 1, 1, "", "sum"], [887, 1, 1, "", "tail"], [888, 1, 1, "", "take"], [889, 1, 1, "", "take_every"], [890, 1, 1, "", "tan"], [891, 1, 1, "", "tanh"], [892, 3, 1, "", "time_unit"], [893, 1, 1, "", "to_arrow"], [894, 1, 1, "", "to_dummies"], [895, 1, 1, "", "to_frame"], [896, 1, 1, "", "to_list"], [897, 1, 1, "", "to_numpy"], [898, 1, 1, "", "to_pandas"], [899, 1, 1, "", "to_physical"], [900, 1, 1, "", "top_k"], [901, 1, 1, "", "unique"], [902, 1, 1, "", "unique_counts"], [903, 1, 1, "", "upper_bound"], [904, 1, 1, "", "value_counts"], [905, 1, 1, "", "var"], [906, 1, 1, "", "view"], [907, 1, 1, "", "zip_with"]], "polars.Series.arr": [[660, 1, 1, "", "arg_max"], [661, 1, 1, "", "arg_min"], [662, 1, 1, "", "concat"], [663, 1, 1, "", "contains"], [664, 1, 1, "", "count_match"], [665, 1, 1, "", "diff"], [666, 1, 1, "", "eval"], [667, 1, 1, "", "explode"], [668, 1, 1, "", "first"], [669, 1, 1, "", "get"], [670, 1, 1, "", "head"], [671, 1, 1, "", "join"], [672, 1, 1, "", "last"], [673, 1, 1, "", "lengths"], [674, 1, 1, "", "max"], [675, 1, 1, "", "mean"], [676, 1, 1, "", "min"], [677, 1, 1, "", "reverse"], [678, 1, 1, "", "shift"], [679, 1, 1, "", "slice"], [680, 1, 1, "", "sort"], [681, 1, 1, "", "sum"], [682, 1, 1, "", "tail"], [683, 1, 1, "", "take"], [684, 1, 1, "", "to_struct"], [685, 1, 1, "", "unique"]], "polars.Series.bin": [[686, 1, 1, "", "contains"], [687, 1, 1, "", "decode"], [688, 1, 1, "", "encode"], [689, 1, 1, "", "ends_with"], [690, 1, 1, "", "starts_with"]], "polars.Series.cat": [[693, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[715, 1, 1, "", "cast_time_unit"], [716, 1, 1, "", "combine"], [717, 1, 1, "", "convert_time_zone"], [718, 1, 1, "", "day"], [719, 1, 1, "", "days"], [720, 1, 1, "", "epoch"], [721, 1, 1, "", "hour"], [722, 1, 1, "", "hours"], [723, 1, 1, "", "iso_year"], [724, 1, 1, "", "max"], [725, 1, 1, "", "mean"], [726, 1, 1, "", "median"], [727, 1, 1, "", "microsecond"], [728, 1, 1, "", "microseconds"], [729, 1, 1, "", "millisecond"], [730, 1, 1, "", "milliseconds"], [731, 1, 1, "", "min"], [732, 1, 1, "", "minute"], [733, 1, 1, "", "minutes"], [734, 1, 1, "", "month"], [735, 1, 1, "", "nanosecond"], [736, 1, 1, "", "nanoseconds"], [737, 1, 1, "", "offset_by"], [738, 1, 1, "", "ordinal_day"], [739, 1, 1, "", "quarter"], [740, 1, 1, "", "replace_time_zone"], [741, 1, 1, "", "round"], [742, 1, 1, "", "second"], [743, 1, 1, "", "seconds"], [744, 1, 1, "", "strftime"], [745, 1, 1, "", "timestamp"], [746, 1, 1, "", "truncate"], [747, 1, 1, "", "week"], [748, 1, 1, "", "weekday"], [749, 1, 1, "", "with_time_unit"], [750, 1, 1, "", "year"]], "polars.Series.str": [[852, 1, 1, "", "concat"], [853, 1, 1, "", "contains"], [854, 1, 1, "", "count_match"], [855, 1, 1, "", "decode"], [856, 1, 1, "", "encode"], [857, 1, 1, "", "ends_with"], [858, 1, 1, "", "explode"], [859, 1, 1, "", "extract"], [860, 1, 1, "", "extract_all"], [861, 1, 1, "", "json_extract"], [862, 1, 1, "", "json_path_match"], [863, 1, 1, "", "lengths"], [864, 1, 1, "", "ljust"], [865, 1, 1, "", "lstrip"], [866, 1, 1, "", "n_chars"], [867, 1, 1, "", "parse_int"], [868, 1, 1, "", "replace"], [869, 1, 1, "", "replace_all"], [870, 1, 1, "", "rjust"], [871, 1, 1, "", "rstrip"], [872, 1, 1, "", "slice"], [873, 1, 1, "", "split"], [874, 1, 1, "", "split_exact"], [875, 1, 1, "", "splitn"], [876, 1, 1, "", "starts_with"], [877, 1, 1, "", "strip"], [878, 1, 1, "", "strptime"], [879, 1, 1, "", "to_lowercase"], [880, 1, 1, "", "to_uppercase"], [881, 1, 1, "", "zfill"]], "polars.Series.struct": [[882, 1, 1, "", "field"], [883, 3, 1, "", "fields"], [884, 1, 1, "", "rename_fields"], [885, 1, 1, "", "unnest"]], "polars.StringCache": [[48, 1, 1, "", "__init__"]], "polars.Struct": [[49, 1, 1, "", "__init__"]], "polars.Time": [[50, 1, 1, "", "__init__"]], "polars.UInt16": [[51, 1, 1, "", "__init__"]], "polars.UInt32": [[52, 1, 1, "", "__init__"]], "polars.UInt64": [[53, 1, 1, "", "__init__"]], "polars.UInt8": [[54, 1, 1, "", "__init__"]], "polars.Unknown": [[55, 1, 1, "", "__init__"]], "polars.Utf8": [[56, 1, 1, "", "__init__"]], "polars.api": [[58, 4, 1, "", "register_dataframe_namespace"], [59, 4, 1, "", "register_expr_namespace"], [60, 4, 1, "", "register_lazyframe_namespace"], [61, 4, 1, "", "register_series_namespace"]], "polars.exceptions": [[68, 5, 1, "", "ArrowError"], [69, 5, 1, "", "ColumnNotFoundError"], [70, 5, 1, "", "ComputeError"], [71, 5, 1, "", "DuplicateError"], [72, 5, 1, "", "InvalidOperationError"], [73, 5, 1, "", "NoDataError"], [74, 5, 1, "", "NoRowsReturned"], [75, 5, 1, "", "PanicException"], [76, 5, 1, "", "RowsException"], [77, 5, 1, "", "SchemaError"], [78, 5, 1, "", "SchemaFieldNotFoundError"], [79, 5, 1, "", "ShapeError"], [80, 5, 1, "", "StructFieldNotFoundError"], [81, 5, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[91, 1, 1, "", "next_batches"]], "polars.internals.dataframe.groupby.GroupBy": [[218, 1, 1, "", "__iter__"], [219, 1, 1, "", "agg"], [220, 1, 1, "", "all"], [221, 1, 1, "", "apply"], [222, 1, 1, "", "count"], [223, 1, 1, "", "first"], [224, 1, 1, "", "head"], [225, 1, 1, "", "last"], [226, 1, 1, "", "max"], [227, 1, 1, "", "mean"], [228, 1, 1, "", "median"], [229, 1, 1, "", "min"], [230, 1, 1, "", "n_unique"], [231, 1, 1, "", "quantile"], [232, 1, 1, "", "sum"], [233, 1, 1, "", "tail"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[619, 1, 1, "", "agg"], [620, 1, 1, "", "all"], [621, 1, 1, "", "apply"], [622, 1, 1, "", "count"], [623, 1, 1, "", "first"], [624, 1, 1, "", "head"], [625, 1, 1, "", "last"], [626, 1, 1, "", "max"], [627, 1, 1, "", "mean"], [628, 1, 1, "", "median"], [629, 1, 1, "", "min"], [630, 1, 1, "", "n_unique"], [631, 1, 1, "", "quantile"], [632, 1, 1, "", "sum"], [633, 1, 1, "", "tail"]], "polars.testing": [[112, 4, 1, "", "assert_frame_equal"], [113, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[114, 0, 1, "", "column"], [115, 4, 1, "", "columns"], [116, 4, 1, "", "dataframes"], [117, 4, 1, "", "series"]], "polars.testing.parametric.column": [[114, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 136], "api": [1, 58, 59, 60, 61, 554], "provid": 1, "new": 1, "function": [1, 242, 544, 553], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907], "binari": [2, 539, 910], "boolean": [3, 540, 911], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 121], "load": [5, 121], "restore_default": 6, "save": [7, 121], "set_ascii_t": 8, "set_fmt_float": 9, "set_fmt_str_length": 10, "set_tbl_cell_align": 11, "set_tbl_col": 12, "set_tbl_column_data_type_inlin": 13, "set_tbl_dataframe_shape_below": 14, "set_tbl_format": 15, "set_tbl_hide_column_data_typ": 16, "set_tbl_hide_column_nam": 17, "set_tbl_hide_dataframe_shap": 18, "set_tbl_hide_dtype_separ": 19, "set_tbl_row": 20, "set_tbl_width_char": 21, "set_verbos": 22, "state": [23, 121], "datafram": [24, 25, 26, 27, 28, 29, 30, 31, 116, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239], "write_avro": 24, "write_csv": 25, "write_databas": 26, "write_excel": 27, "write_ipc": 28, "write_json": [29, 618], "write_ndjson": 30, "write_parquet": 31, "datatyp": 32, "date": [33, 242, 507], "datetim": [34, 508], "durat": [35, 509], "float32": 36, "float64": 37, "int16": 38, "int32": 39, "int64": 40, "int8": 41, "list": [42, 383, 518], "null": 43, "object": 44, "sqlcontext": [45, 46, 47], "execut": 45, "queri": 46, "regist": 47, "stringcach": [48, 553], "struct": [49, 474, 475, 533, 550, 882, 883, 884, 885, 920], "time": [50, 242], "uint16": 51, "uint32": 52, "uint64": 53, "uint8": 54, "unknown": 55, "utf8": 56, "align_fram": 57, "register_dataframe_namespac": 58, "register_expr_namespac": 59, "register_lazyframe_namespac": 60, "register_series_namespac": 61, "arg_wher": 62, "build_info": 63, "collect_al": 64, "concat": [65, 266, 444, 662, 852], "cut": [66, 708], "date_rang": 67, "except": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 243], "arrowerror": 68, "columnnotfounderror": 69, "computeerror": 70, "duplicateerror": 71, "invalidoperationerror": 72, "nodataerror": 73, "norowsreturn": 74, "panicexcept": 75, "rowsexcept": 76, "schemaerror": 77, "schemafieldnotfounderror": 78, "shapeerror": 79, "structfieldnotfounderror": 80, "toomanyrowsreturn": 81, "from_arrow": 82, "from_datafram": 83, "from_dict": [84, 85], "from_numpi": 86, "from_panda": 87, "from_record": 88, "get_dummi": 89, "get_idx_typ": 90, "intern": [91, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633], "batch": 91, "batchedcsvread": [91, 555], "next_batch": 91, "ones": 92, "read_avro": 93, "read_csv": 94, "read_csv_batch": 95, "read_databas": 96, "read_delta": 97, "read_excel": 98, "read_ipc": 99, "read_ipc_schema": 100, "read_json": [101, 594], "read_ndjson": 102, "read_parquet": 103, "read_parquet_schema": 104, "scan_csv": 105, "scan_delta": 106, "scan_ipc": 107, "scan_ndjson": 108, "scan_parquet": 109, "scan_pyarrow_dataset": 110, "show_vers": 111, "test": [112, 113, 114, 115, 116, 117, 923], "assert_frame_equ": 112, "assert_series_equ": 113, "parametr": [114, 115, 116, 117], "column": [114, 115, 127, 542, 561], "seri": [117, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 916], "threadpool_s": 118, "toggle_string_cach": 119, "zero": 120, "option": 121, "current": 121, "us": 121, "context": 121, "manag": 121, "aggreg": [122, 244, 556, 640], "__dataframe__": 123, "appli": [124, 221, 251, 493, 621, 646], "clear": [125, 558, 696], "clone": [126, 559, 700], "corr": [128, 501], "describ": [129, 709], "drop": [130, 562], "drop_in_plac": 131, "drop_nul": [132, 314, 563, 713], "dtype": [133, 564, 751], "estimated_s": [134, 753], "explod": [135, 271, 353, 450, 566, 667, 758, 858], "fill_nan": [137, 355, 568, 760], "fill_nul": [138, 356, 569, 761], "filter": [139, 357, 570, 762], "find_idx_by_nam": 140, "fold": [141, 513], "frame_equ": 142, "get_column": [143, 144], "glimps": 145, "groupbi": [146, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 238, 573, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636], "groupby_dynam": [147, 574], "groupby_rol": [148, 575], "hash_row": 149, "head": [150, 224, 274, 363, 517, 576, 624, 670, 768], "height": 151, "hstack": 152, "insert_at_idx": 153, "interpol": [154, 365, 578, 770], "is_dupl": [155, 367, 773], "is_empti": [156, 774], "is_uniqu": [157, 377, 787], "item": [158, 789], "iter_row": 159, "iter_slic": 160, "join": [161, 275, 579, 671], "join_asof": [162, 580], "lazi": [163, 553, 582], "limit": [164, 382, 583, 792], "max": [165, 226, 278, 390, 521, 585, 626, 674, 724, 797], "mean": [166, 227, 279, 391, 522, 586, 627, 675, 725, 798], "median": [167, 228, 392, 523, 587, 628, 726, 799], "melt": [168, 588], "merge_sort": [169, 589], "min": [170, 229, 280, 399, 524, 590, 629, 676, 731, 800], "n_chunk": [171, 802], "n_uniqu": [172, 230, 401, 525, 630, 803], "null_count": [173, 404, 808], "partition_bi": 174, "pipe": [175, 591], "pivot": 176, "product": [177, 409, 812], "quantil": [178, 231, 410, 527, 593, 631, 813], "rechunk": [179, 412, 815], "renam": [180, 595, 817], "replac": [181, 460, 868], "replace_at_idx": 182, "revers": [183, 281, 416, 596, 677, 819], "row": [184, 185], "sampl": [186, 428, 831], "schema": [187, 597], "select": [188, 241, 530, 548, 598, 639, 918], "shape": [189, 837], "shift": [190, 282, 431, 599, 678, 838], "shift_and_fil": [191, 432, 600, 839], "shrink_to_fit": [192, 841], "slice": [193, 283, 439, 464, 604, 679, 847, 872], "sort": [194, 284, 440, 605, 680, 848], "std": [195, 443, 532, 606, 850], "sum": [196, 232, 285, 477, 534, 607, 632, 681, 886], "tail": [197, 233, 286, 478, 535, 608, 633, 682, 887], "take_everi": [198, 480, 609, 889], "to_arrow": [199, 893], "to_dict": [200, 201], "to_dummi": [202, 894], "to_numpi": [203, 897], "to_panda": [204, 898], "to_seri": 205, "to_struct": [206, 288, 684], "transpos": 207, "uniqu": [208, 289, 485, 610, 685, 901], "unnest": [209, 611, 885], "unstack": 210, "updat": [211, 612], "upsampl": 212, "var": [213, 489, 536, 613, 905], "vstack": 214, "width": [215, 614], "with_column": [216, 615], "with_row_count": [217, 617], "__iter__": 218, "agg": [219, 619], "all": [220, 248, 491, 620, 643], "count": [222, 304, 502, 622], "first": [223, 272, 358, 512, 571, 623, 668], "last": [225, 276, 380, 581, 625, 672], "attribut": [234, 634, 909], "comput": [235, 543, 913], "descript": [236, 635, 914], "export": [237, 915], "miscellan": [240, 547, 553, 638, 917], "manipul": [241, 548, 639, 918], "data": 242, "type": 242, "numer": 242, "nest": 242, "other": 242, "expr": [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490], "ab": [245, 641], "agg_group": 246, "alia": [247, 642], "ani": [249, 492, 644], "append": [250, 645], "arcco": [252, 647], "arccosh": [253, 648], "arcsin": [254, 649], "arcsinh": [255, 650], "arctan": [256, 651], "arctanh": [257, 652], "arg_max": [258, 264, 653, 660], "arg_min": [259, 265, 654, 661], "arg_sort": [260, 655], "arg_tru": [261, 656], "arg_uniqu": [262, 657], "argsort": [263, 658], "arr": [264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685], "contain": [267, 291, 445, 663, 686, 853], "count_match": [268, 446, 664, 854], "diff": [269, 311, 665, 710], "eval": [270, 666], "get": [273, 669], "length": [277, 455, 673, 863], "take": [287, 479, 683, 888], "backward_fil": 290, "bin": [291, 292, 293, 294, 295, 686, 687, 688, 689, 690], "decod": [292, 447, 687, 855], "encod": [293, 448, 688, 856], "ends_with": [294, 449, 689, 857], "starts_with": [295, 468, 690, 876], "cast": [296, 691], "cat": [297, 692, 693], "set_ord": [297, 693], "ceil": [298, 694], "clip": [299, 697], "clip_max": [300, 698], "clip_min": [301, 699], "co": [302, 701], "cosh": [303, 702], "cumcount": 305, "cummax": [306, 703], "cummin": [307, 704], "cumprod": [308, 705], "cumsum": [309, 506, 706], "cumulative_ev": [310, 707], "dot": [312, 711], "drop_nan": [313, 712], "dt": [315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750], "cast_time_unit": [315, 715], "combin": [316, 716], "convert_time_zon": [317, 717], "dai": [318, 319, 718, 719], "epoch": [320, 720], "hour": [321, 322, 721, 722], "iso_year": [323, 723], "microsecond": [324, 325, 727, 728], "millisecond": [326, 327, 729, 730], "minut": [328, 329, 732, 733], "month": [330, 734], "nanosecond": [331, 332, 735, 736], "offset_bi": [333, 737], "ordinal_dai": [334, 738], "quarter": [335, 739], "replace_time_zon": [336, 740], "round": [337, 427, 741, 830], "second": [338, 339, 742, 743], "strftime": [340, 744], "timestamp": [341, 745], "truncat": [342, 746], "week": [343, 747], "weekdai": [344, 748], "with_time_unit": [345, 749], "year": [346, 750], "entropi": [347, 752], "ewm_mean": [348, 754], "ewm_std": [349, 755], "ewm_var": [350, 756], "exclud": [351, 511], "exp": [352, 757], "extend_const": [354, 759], "flatten": 359, "floor": [360, 764], "forward_fil": 361, "hash": [362, 767], "inspect": [364, 577], "is_between": [366, 771], "is_finit": [368, 775], "is_first": [369, 776], "is_in": [370, 778], "is_infinit": [371, 779], "is_nan": [372, 780], "is_not": 373, "is_not_nan": [374, 781], "is_not_nul": [375, 782], "is_nul": [376, 783], "keep_nam": 378, "kurtosi": [379, 790], "len": [381, 791], "log": [384, 793], "log10": [385, 794], "lower_bound": [386, 795], "map": [387, 520, 584], "map_alia": 388, "map_dict": [389, 796], "meta": [393, 394, 395, 396, 397, 398, 546], "has_multiple_output": 393, "is_regex_project": 394, "output_nam": 395, "pop": 396, "root_nam": 397, "undo_alias": 398, "mode": [400, 801], "nan_max": [402, 805], "nan_min": [403, 806], "over": 405, "pct_chang": [406, 809], "pow": 407, "prefix": 408, "rank": [411, 814], "reinterpret": [413, 816], "repeat_bi": 414, "reshap": [415, 818], "rolling_appli": [417, 820], "rolling_max": [418, 821], "rolling_mean": [419, 822], "rolling_median": [420, 823], "rolling_min": [421, 824], "rolling_quantil": [422, 825], "rolling_skew": [423, 826], "rolling_std": [424, 827], "rolling_sum": [425, 828], "rolling_var": [426, 829], "search_sort": [429, 832], "set_sort": [430, 836], "shrink_dtyp": [433, 840], "shuffl": [434, 842], "sign": [435, 843], "sin": [436, 844], "sinh": [437, 845], "skew": [438, 846], "sort_bi": 441, "sqrt": [442, 849], "str": [444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881], "extract": [451, 859], "extract_al": [452, 860], "json_extract": [453, 861], "json_path_match": [454, 862], "ljust": [456, 864], "lstrip": [457, 865], "n_char": [458, 866], "parse_int": [459, 867], "replace_al": [461, 869], "rjust": [462, 870], "rstrip": [463, 871], "split": [465, 873], "split_exact": [466, 874], "splitn": [467, 875], "strip": [469, 877], "strptime": [470, 878], "to_lowercas": [471, 879], "to_uppercas": [472, 880], "zfill": [473, 881], "field": [474, 882, 883], "rename_field": [475, 884], "suffix": 476, "tan": [481, 890], "tanh": [482, 891], "to_phys": [483, 899], "top_k": [484, 900], "unique_count": [486, 902], "upper_bound": [487, 903], "value_count": [488, 904], "where": 490, "arang": 494, "arg_sort_bi": 495, "avg": 496, "coalesc": 497, "col": 498, "concat_list": 499, "concat_str": 500, "cov": 503, "cumfold": 504, "cumreduc": 505, "element": 510, "format": 514, "from_epoch": 515, "group": 516, "lit": 519, "pearson_corr": 526, "reduc": 528, "repeat": 529, "spearman_rank_corr": 531, "when": 537, "arrai": [538, 908], "categori": [541, 912], "name": [542, 804], "express": 545, "string": [549, 919], "tempor": [551, 921], "window": 552, "convers": 553, "eager": 553, "parallel": 553, "refer": 554, "input": 555, "output": 555, "csv": 555, "feather": 555, "ipc": 555, "parquet": 555, "databas": 555, "json": 555, "avro": 555, "excel": 555, "delta": 555, "lake": 555, "dataset": 555, "lazyfram": [557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 637], "cach": 557, "collect": 560, "explain": 565, "fetch": 567, "from_json": 572, "profil": 592, "show_graph": 601, "sink_ipc": 602, "sink_parquet": 603, "with_context": 616, "lazygroupbi": [619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633], "read": 638, "write": 638, "logic": 638, "plan": 638, "chunk_length": 695, "flag": 763, "get_chunk": 765, "has_valid": 766, "inner_dtyp": 769, "is_boolean": 772, "is_float": 777, "is_numer": 784, "is_sort": 785, "is_tempor": 786, "is_utf8": 788, "new_from_index": 807, "peak_max": 810, "peak_min": 811, "series_equ": 833, "set": 834, "set_at_idx": 835, "time_unit": 892, "to_fram": 895, "to_list": 896, "view": 906, "zip_with": 907, "sql": 922, "method": 922, "assert": 923, "properti": 923, "base": 923, "strategi": 923, "helper": 923, "util": 924}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.from_pandas": [[87, "polars-from-pandas"]], "polars.DataFrame.columns": [[127, "polars-dataframe-columns"]], "polars.exceptions.NoDataError": [[73, "polars-exceptions-nodataerror"]], "polars.exceptions.NoRowsReturned": [[74, "polars-exceptions-norowsreturned"]], "polars.from_dataframe": [[83, "polars-from-dataframe"]], "polars.get_dummies": [[89, "polars-get-dummies"]], "polars.testing.parametric.column": [[114, "polars-testing-parametric-column"]], "Aggregation": [[122, "aggregation"], [640, "aggregation"], [556, "aggregation"], [244, "aggregation"]], "polars.DataFrame.__dataframe__": [[123, "polars-dataframe-dataframe"]], "polars.DataFrame.drop_in_place": [[131, "polars-dataframe-drop-in-place"]], "polars.DataFrame.estimated_size": [[134, "polars-dataframe-estimated-size"]], "Config": [[121, "config"]], "Config options": [[121, "config-options"]], "Config load, save, and current state": [[121, "config-load-save-and-current-state"]], "Use as a context manager": [[121, "use-as-a-context-manager"]], "polars.from_dicts": [[85, "polars-from-dicts"]], "polars.read_excel": [[98, "polars-read-excel"]], "polars.testing.parametric.series": [[117, "polars-testing-parametric-series"]], "polars.read_delta": [[97, "polars-read-delta"]], "polars.from_records": [[88, "polars-from-records"]], "polars.read_parquet_schema": [[104, "polars-read-parquet-schema"]], "polars.from_dict": [[84, "polars-from-dict"]], "polars.scan_ipc": [[107, "polars-scan-ipc"]], "polars.scan_csv": [[105, "polars-scan-csv"]], "polars.testing.assert_frame_equal": [[112, "polars-testing-assert-frame-equal"]], "polars.read_ipc_schema": [[100, "polars-read-ipc-schema"]], "polars.exceptions.SchemaError": [[77, "polars-exceptions-schemaerror"]], "polars.exceptions.SchemaFieldNotFoundError": [[78, "polars-exceptions-schemafieldnotfounderror"]], "polars.read_ndjson": [[102, "polars-read-ndjson"]], "polars.exceptions.StructFieldNotFoundError": [[80, "polars-exceptions-structfieldnotfounderror"]], "polars.read_database": [[96, "polars-read-database"]], "polars.DataFrame.corr": [[128, "polars-dataframe-corr"]], "polars.DataFrame.drop_nulls": [[132, "polars-dataframe-drop-nulls"]], "polars.testing.parametric.columns": [[115, "polars-testing-parametric-columns"]], "polars.read_json": [[101, "polars-read-json"]], "polars.exceptions.ComputeError": [[70, "polars-exceptions-computeerror"]], "polars.testing.assert_series_equal": [[113, "polars-testing-assert-series-equal"]], "polars.exceptions.InvalidOperationError": [[72, "polars-exceptions-invalidoperationerror"]], "polars.read_avro": [[93, "polars-read-avro"]], "polars.DataFrame.explode": [[135, "polars-dataframe-explode"]], "polars.from_arrow": [[82, "polars-from-arrow"]], "polars.scan_parquet": [[109, "polars-scan-parquet"]], "polars.testing.parametric.dataframes": [[116, "polars-testing-parametric-dataframes"]], "polars.exceptions.DuplicateError": [[71, "polars-exceptions-duplicateerror"]], "polars.zeros": [[120, "polars-zeros"]], "polars.read_csv": [[94, "polars-read-csv"]], "polars.scan_pyarrow_dataset": [[110, "polars-scan-pyarrow-dataset"]], "polars.DataFrame.dtypes": [[133, "polars-dataframe-dtypes"]], "polars.read_csv_batched": [[95, "polars-read-csv-batched"]], "polars.DataFrame.clear": [[125, "polars-dataframe-clear"]], "polars.DataFrame.clone": [[126, "polars-dataframe-clone"]], "polars.get_idx_type": [[90, "polars-get-idx-type"]], "polars.DataFrame.apply": [[124, "polars-dataframe-apply"]], "polars.from_numpy": [[86, "polars-from-numpy"]], "polars.DataFrame.describe": [[129, "polars-dataframe-describe"]], "polars.DataFrame.drop": [[130, "polars-dataframe-drop"]], "polars.ones": [[92, "polars-ones"]], "polars.toggle_string_cache": [[119, "polars-toggle-string-cache"]], "polars.read_ipc": [[99, "polars-read-ipc"]], "polars.exceptions.RowsException": [[76, "polars-exceptions-rowsexception"]], "polars.scan_ndjson": [[108, "polars-scan-ndjson"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[91, "polars-internals-batched-batchedcsvreader-next-batches"]], "polars.threadpool_size": [[118, "polars-threadpool-size"]], "polars.show_versions": [[111, "polars-show-versions"]], "polars.exceptions.ShapeError": [[79, "polars-exceptions-shapeerror"]], "polars.exceptions.TooManyRowsReturned": [[81, "polars-exceptions-toomanyrowsreturned"]], "polars.exceptions.ArrowError": [[68, "polars-exceptions-arrowerror"]], "polars.exceptions.PanicException": [[75, "polars-exceptions-panicexception"]], "polars.read_parquet": [[103, "polars-read-parquet"]], "polars.exceptions.ColumnNotFoundError": [[69, "polars-exceptions-columnnotfounderror"]], "polars.scan_delta": [[106, "polars-scan-delta"]], "polars.SQLContext.execute": [[45, "polars-sqlcontext-execute"]], "polars.Config.set_tbl_hide_column_data_types": [[16, "polars-config-set-tbl-hide-column-data-types"]], "polars.align_frames": [[57, "polars-align-frames"]], "polars.DataFrame.write_excel": [[27, "polars-dataframe-write-excel"]], "polars.Unknown": [[55, "polars-unknown"]], "polars.Float32": [[36, "polars-float32"]], "polars.DataType": [[32, "polars-datatype"]], "polars.Null": [[43, "polars-null"]], "polars.Config.set_tbl_width_chars": [[21, "polars-config-set-tbl-width-chars"]], "polars.Config.set_tbl_dataframe_shape_below": [[14, "polars-config-set-tbl-dataframe-shape-below"]], "polars.api.register_expr_namespace": [[59, "polars-api-register-expr-namespace"]], "polars.Int8": [[41, "polars-int8"]], "polars.Config.set_tbl_formatting": [[15, "polars-config-set-tbl-formatting"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.Config.state": [[23, "polars-config-state"]], "polars.UInt64": [[53, "polars-uint64"]], "polars.arg_where": [[62, "polars-arg-where"]], "polars.build_info": [[63, "polars-build-info"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.DataFrame.write_json": [[29, "polars-dataframe-write-json"]], "polars.Datetime": [[34, "polars-datetime"]], "polars.SQLContext.query": [[46, "polars-sqlcontext-query"]], "polars.Config.set_tbl_cell_alignment": [[11, "polars-config-set-tbl-cell-alignment"]], "polars.Config.load": [[5, "polars-config-load"]], "polars.DataFrame.write_ipc": [[28, "polars-dataframe-write-ipc"]], "polars.Config.set_fmt_float": [[9, "polars-config-set-fmt-float"]], "polars.List": [[42, "polars-list"]], "polars.SQLContext.register": [[47, "polars-sqlcontext-register"]], "polars.api.register_series_namespace": [[61, "polars-api-register-series-namespace"]], "polars.Config.restore_defaults": [[6, "polars-config-restore-defaults"]], "polars.Date": [[33, "polars-date"]], "polars.concat": [[65, "polars-concat"]], "polars.Config.set_tbl_hide_dataframe_shape": [[18, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.save": [[7, "polars-config-save"]], "polars.Duration": [[35, "polars-duration"]], "polars.Utf8": [[56, "polars-utf8"]], "polars.Config.set_verbose": [[22, "polars-config-set-verbose"]], "polars.DataFrame.write_database": [[26, "polars-dataframe-write-database"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Float64": [[37, "polars-float64"]], "polars.api.register_dataframe_namespace": [[58, "polars-api-register-dataframe-namespace"]], "polars.Struct": [[49, "polars-struct"]], "polars.cut": [[66, "polars-cut"]], "polars.Config.set_fmt_str_lengths": [[10, "polars-config-set-fmt-str-lengths"]], "polars.DataFrame.write_csv": [[25, "polars-dataframe-write-csv"]], "polars.Binary": [[2, "polars-binary"]], "polars.Config.set_ascii_tables": [[8, "polars-config-set-ascii-tables"]], "polars.Object": [[44, "polars-object"]], "polars.UInt8": [[54, "polars-uint8"]], "polars.Config.set_tbl_hide_column_names": [[17, "polars-config-set-tbl-hide-column-names"]], "polars.api.register_lazyframe_namespace": [[60, "polars-api-register-lazyframe-namespace"]], "polars.date_range": [[67, "polars-date-range"]], "polars.DataFrame.write_avro": [[24, "polars-dataframe-write-avro"]], "polars.Time": [[50, "polars-time"]], "polars.UInt16": [[51, "polars-uint16"]], "polars.UInt32": [[52, "polars-uint32"]], "polars.Int32": [[39, "polars-int32"]], "polars.Config.set_tbl_cols": [[12, "polars-config-set-tbl-cols"]], "polars.collect_all": [[64, "polars-collect-all"]], "polars.StringCache": [[48, "polars-stringcache"]], "polars.Config.set_tbl_column_data_type_inline": [[13, "polars-config-set-tbl-column-data-type-inline"]], "polars.DataFrame.write_ndjson": [[30, "polars-dataframe-write-ndjson"]], "polars.Int64": [[40, "polars-int64"]], "polars.Int16": [[38, "polars-int16"]], "polars.Config.set_tbl_rows": [[20, "polars-config-set-tbl-rows"]], "polars.DataFrame.write_parquet": [[31, "polars-dataframe-write-parquet"]], "polars.Config.set_tbl_hide_dtype_separator": [[19, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Series.rolling_quantile": [[825, "polars-series-rolling-quantile"]], "polars.Series.str.n_chars": [[866, "polars-series-str-n-chars"]], "polars.Series.sqrt": [[849, "polars-series-sqrt"]], "polars.Series.str.split": [[873, "polars-series-str-split"]], "polars.Series.sort": [[848, "polars-series-sort"]], "polars.Series.search_sorted": [[832, "polars-series-search-sorted"]], "polars.Series.rolling_apply": [[820, "polars-series-rolling-apply"]], "polars.Series.series_equal": [[833, "polars-series-series-equal"]], "polars.Series.str.replace": [[868, "polars-series-str-replace"]], "polars.Series.struct.field": [[882, "polars-series-struct-field"]], "polars.Series.str.encode": [[856, "polars-series-str-encode"]], "polars.Series.str.split_exact": [[874, "polars-series-str-split-exact"]], "polars.Series.str.lstrip": [[865, "polars-series-str-lstrip"]], "polars.Series.shift": [[838, "polars-series-shift"]], "polars.Series.shrink_dtype": [[840, "polars-series-shrink-dtype"]], "polars.Series.str.decode": [[855, "polars-series-str-decode"]], "polars.Series.str.extract": [[859, "polars-series-str-extract"]], "polars.Series.sin": [[844, "polars-series-sin"]], "polars.Series.str.ljust": [[864, "polars-series-str-ljust"]], "polars.Series.reshape": [[818, "polars-series-reshape"]], "polars.Series.shape": [[837, "polars-series-shape"]], "polars.Series.str.ends_with": [[857, "polars-series-str-ends-with"]], "polars.Series.rolling_min": [[824, "polars-series-rolling-min"]], "polars.Series.reverse": [[819, "polars-series-reverse"]], "polars.Series.sign": [[843, "polars-series-sign"]], "polars.Series.shrink_to_fit": [[841, "polars-series-shrink-to-fit"]], "polars.Series.str.rjust": [[870, "polars-series-str-rjust"]], "polars.Series.str.slice": [[872, "polars-series-str-slice"]], "polars.Series.sinh": [[845, "polars-series-sinh"]], "polars.Series.set": [[834, "polars-series-set"]], "polars.Series.rolling_mean": [[822, "polars-series-rolling-mean"]], "polars.Series.str.strptime": [[878, "polars-series-str-strptime"]], "polars.Series.str.rstrip": [[871, "polars-series-str-rstrip"]], "polars.Series.str.to_lowercase": [[879, "polars-series-str-to-lowercase"]], "polars.Series.shift_and_fill": [[839, "polars-series-shift-and-fill"]], "polars.Series.str.json_path_match": [[862, "polars-series-str-json-path-match"]], "polars.Series.str.concat": [[852, "polars-series-str-concat"]], "polars.Series.str.lengths": [[863, "polars-series-str-lengths"]], "polars.Series.str.contains": [[853, "polars-series-str-contains"]], "polars.Series.rolling_sum": [[828, "polars-series-rolling-sum"]], "polars.Series.reinterpret": [[816, "polars-series-reinterpret"]], "polars.Series.str.extract_all": [[860, "polars-series-str-extract-all"]], "polars.Series.set_sorted": [[836, "polars-series-set-sorted"]], "polars.Series.shuffle": [[842, "polars-series-shuffle"]], "polars.Series.str.splitn": [[875, "polars-series-str-splitn"]], "polars.Series.str.to_uppercase": [[880, "polars-series-str-to-uppercase"]], "polars.Series.skew": [[846, "polars-series-skew"]], "polars.Series.str.explode": [[858, "polars-series-str-explode"]], "polars.Series.str.zfill": [[881, "polars-series-str-zfill"]], "polars.Series.round": [[830, "polars-series-round"]], "polars.Series.str.replace_all": [[869, "polars-series-str-replace-all"]], "polars.Series.str.starts_with": [[876, "polars-series-str-starts-with"]], "polars.Series.rolling_var": [[829, "polars-series-rolling-var"]], "polars.Series.str.parse_int": [[867, "polars-series-str-parse-int"]], "polars.Series.str": [[851, "polars-series-str"]], "polars.Series.slice": [[847, "polars-series-slice"]], "polars.Series.rename": [[817, "polars-series-rename"]], "polars.Series.str.strip": [[877, "polars-series-str-strip"]], "polars.Series.rolling_max": [[821, "polars-series-rolling-max"]], "polars.Series.rolling_std": [[827, "polars-series-rolling-std"]], "polars.Series.str.count_match": [[854, "polars-series-str-count-match"]], "polars.Series.struct.fields": [[883, "polars-series-struct-fields"]], "polars.Series.std": [[850, "polars-series-std"]], "polars.Series.str.json_extract": [[861, "polars-series-str-json-extract"]], "polars.Series.rolling_median": [[823, "polars-series-rolling-median"]], "polars.Series.set_at_idx": [[835, "polars-series-set-at-idx"]], "polars.Series.rolling_skew": [[826, "polars-series-rolling-skew"]], "polars.Series.sample": [[831, "polars-series-sample"]], "polars.Series.floor": [[764, "polars-series-floor"]], "polars.Series.is_unique": [[787, "polars-series-is-unique"]], "polars.Series.head": [[768, "polars-series-head"]], "polars.Series.rechunk": [[815, "polars-series-rechunk"]], "polars.Series.ewm_std": [[755, "polars-series-ewm-std"]], "polars.Series.fill_null": [[761, "polars-series-fill-null"]], "polars.Series.is_first": [[776, "polars-series-is-first"]], "polars.Series.n_unique": [[803, "polars-series-n-unique"]], "polars.Series.nan_min": [[806, "polars-series-nan-min"]], "polars.Series.new_from_index": [[807, "polars-series-new-from-index"]], "polars.Series.quantile": [[813, "polars-series-quantile"]], "polars.Series.is_infinite": [[779, "polars-series-is-infinite"]], "polars.Series.dt.year": [[750, "polars-series-dt-year"]], "polars.Series.len": [[791, "polars-series-len"]], "polars.Series.hash": [[767, "polars-series-hash"]], "polars.Series.is_null": [[783, "polars-series-is-null"]], "polars.Series.is_float": [[777, "polars-series-is-float"]], "polars.Series.is_not_null": [[782, "polars-series-is-not-null"]], "polars.Series.is_finite": [[775, "polars-series-is-finite"]], "polars.Series.is_in": [[778, "polars-series-is-in"]], "polars.Series.is_sorted": [[785, "polars-series-is-sorted"]], "polars.Series.is_boolean": [[772, "polars-series-is-boolean"]], "polars.Series.fill_nan": [[760, "polars-series-fill-nan"]], "polars.Series.item": [[789, "polars-series-item"]], "polars.Series.log": [[793, "polars-series-log"]], "polars.Series.max": [[797, "polars-series-max"]], "polars.Series.null_count": [[808, "polars-series-null-count"]], "polars.Series.peak_min": [[811, "polars-series-peak-min"]], "polars.Series.inner_dtype": [[769, "polars-series-inner-dtype"]], "polars.Series.ewm_mean": [[754, "polars-series-ewm-mean"]], "polars.Series.get_chunks": [[765, "polars-series-get-chunks"]], "polars.Series.kurtosis": [[790, "polars-series-kurtosis"]], "polars.Series.product": [[812, "polars-series-product"]], "polars.Series.exp": [[757, "polars-series-exp"]], "polars.Series.limit": [[792, "polars-series-limit"]], "polars.Series.explode": [[758, "polars-series-explode"]], "polars.Series.estimated_size": [[753, "polars-series-estimated-size"]], "polars.Series.is_between": [[771, "polars-series-is-between"]], "polars.Series.is_utf8": [[788, "polars-series-is-utf8"]], "polars.Series.interpolate": [[770, "polars-series-interpolate"]], "polars.Series.is_empty": [[774, "polars-series-is-empty"]], "polars.Series.is_numeric": [[784, "polars-series-is-numeric"]], "polars.Series.log10": [[794, "polars-series-log10"]], "polars.Series.dtype": [[751, "polars-series-dtype"]], "polars.Series.flags": [[763, "polars-series-flags"]], "polars.Series.peak_max": [[810, "polars-series-peak-max"]], "polars.Series.median": [[799, "polars-series-median"]], "polars.Series.n_chunks": [[802, "polars-series-n-chunks"]], "polars.Series.nan_max": [[805, "polars-series-nan-max"]], "polars.Series.dt.weekday": [[748, "polars-series-dt-weekday"]], "polars.Series.mode": [[801, "polars-series-mode"]], "polars.Series.extend_constant": [[759, "polars-series-extend-constant"]], "polars.Series.ewm_var": [[756, "polars-series-ewm-var"]], "polars.Series.mean": [[798, "polars-series-mean"]], "polars.Series.lower_bound": [[795, "polars-series-lower-bound"]], "polars.Series.is_temporal": [[786, "polars-series-is-temporal"]], "polars.Series.is_duplicated": [[773, "polars-series-is-duplicated"]], "polars.Series.min": [[800, "polars-series-min"]], "polars.Series.has_validity": [[766, "polars-series-has-validity"]], "polars.Series.filter": [[762, "polars-series-filter"]], "polars.Series.is_not_nan": [[781, "polars-series-is-not-nan"]], "polars.Series.entropy": [[752, "polars-series-entropy"]], "polars.Series.map_dict": [[796, "polars-series-map-dict"]], "polars.Series.is_nan": [[780, "polars-series-is-nan"]], "polars.Series.rank": [[814, "polars-series-rank"]], "polars.Series.name": [[804, "polars-series-name"]], "polars.Series.pct_change": [[809, "polars-series-pct-change"]], "polars.Series.dt.with_time_unit": [[749, "polars-series-dt-with-time-unit"]], "polars.Series.dt.strftime": [[744, "polars-series-dt-strftime"]], "polars.Series.bin.ends_with": [[689, "polars-series-bin-ends-with"]], "polars.Series.arr.sort": [[680, "polars-series-arr-sort"]], "polars.Series.drop_nans": [[712, "polars-series-drop-nans"]], "polars.Series.cummin": [[704, "polars-series-cummin"]], "polars.Series.describe": [[709, "polars-series-describe"]], "polars.Series.arr.unique": [[685, "polars-series-arr-unique"]], "polars.Series.dt.quarter": [[739, "polars-series-dt-quarter"]], "polars.Series.chunk_lengths": [[695, "polars-series-chunk-lengths"]], "polars.Series.dt.combine": [[716, "polars-series-dt-combine"]], "polars.Series.cosh": [[702, "polars-series-cosh"]], "polars.Series.dt.epoch": [[720, "polars-series-dt-epoch"]], "polars.Series.dt.nanoseconds": [[736, "polars-series-dt-nanoseconds"]], "polars.Series.bin.contains": [[686, "polars-series-bin-contains"]], "polars.Series.dt.hours": [[722, "polars-series-dt-hours"]], "polars.Series.dt.truncate": [[746, "polars-series-dt-truncate"]], "polars.Series.clear": [[696, "polars-series-clear"]], "polars.Series.arr.tail": [[682, "polars-series-arr-tail"]], "polars.Series.dt.offset_by": [[737, "polars-series-dt-offset-by"]], "polars.Series.clip_max": [[698, "polars-series-clip-max"]], "polars.Series.dt.days": [[719, "polars-series-dt-days"]], "polars.Series.dt.cast_time_unit": [[715, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.min": [[731, "polars-series-dt-min"]], "polars.Series.cut": [[708, "polars-series-cut"]], "polars.Series.arr.take": [[683, "polars-series-arr-take"]], "polars.Series.dt.microsecond": [[727, "polars-series-dt-microsecond"]], "polars.Series.dt.minute": [[732, "polars-series-dt-minute"]], "polars.Series.cummax": [[703, "polars-series-cummax"]], "polars.Series.dt.second": [[742, "polars-series-dt-second"]], "polars.Series.dt.convert_time_zone": [[717, "polars-series-dt-convert-time-zone"]], "polars.Series.dt.nanosecond": [[735, "polars-series-dt-nanosecond"]], "polars.Series.cat.set_ordering": [[693, "polars-series-cat-set-ordering"]], "polars.Series.dt.mean": [[725, "polars-series-dt-mean"]], "polars.Series.dt.microseconds": [[728, "polars-series-dt-microseconds"]], "polars.Series.arr.sum": [[681, "polars-series-arr-sum"]], "polars.Series.clip": [[697, "polars-series-clip"]], "polars.Series.cumprod": [[705, "polars-series-cumprod"]], "polars.Series.dt.day": [[718, "polars-series-dt-day"]], "polars.Series.dt.median": [[726, "polars-series-dt-median"]], "polars.Series.dt.iso_year": [[723, "polars-series-dt-iso-year"]], "polars.Series.dt.millisecond": [[729, "polars-series-dt-millisecond"]], "polars.Series.dt.ordinal_day": [[738, "polars-series-dt-ordinal-day"]], "polars.Series.dt.minutes": [[733, "polars-series-dt-minutes"]], "polars.Series.clip_min": [[699, "polars-series-clip-min"]], "polars.Series.cumsum": [[706, "polars-series-cumsum"]], "polars.Series.cos": [[701, "polars-series-cos"]], "polars.Series.arr.to_struct": [[684, "polars-series-arr-to-struct"]], "polars.Series.dt.month": [[734, "polars-series-dt-month"]], "polars.Series.dt.timestamp": [[745, "polars-series-dt-timestamp"]], "polars.Series.dt.seconds": [[743, "polars-series-dt-seconds"]], "polars.Series.bin.starts_with": [[690, "polars-series-bin-starts-with"]], "polars.Series.drop_nulls": [[713, "polars-series-drop-nulls"]], "polars.Series.cast": [[691, "polars-series-cast"]], "polars.Series.dot": [[711, "polars-series-dot"]], "polars.Series.dt.week": [[747, "polars-series-dt-week"]], "polars.Series.cumulative_eval": [[707, "polars-series-cumulative-eval"]], "polars.Series.diff": [[710, "polars-series-diff"]], "polars.Series.dt.max": [[724, "polars-series-dt-max"]], "polars.Series.dt.milliseconds": [[730, "polars-series-dt-milliseconds"]], "polars.Series.dt": [[714, "polars-series-dt"]], "polars.Series.dt.hour": [[721, "polars-series-dt-hour"]], "polars.Series.dt.replace_time_zone": [[740, "polars-series-dt-replace-time-zone"]], "polars.Series.bin.decode": [[687, "polars-series-bin-decode"]], "polars.Series.dt.round": [[741, "polars-series-dt-round"]], "polars.Series.clone": [[700, "polars-series-clone"]], "polars.Series.bin.encode": [[688, "polars-series-bin-encode"]], "polars.Series.cat": [[692, "polars-series-cat"]], "polars.Series.ceil": [[694, "polars-series-ceil"]], "Categories": [[912, "categories"], [541, "categories"]], "Computation": [[913, "computation"], [543, "computation"], [235, "computation"]], "Manipulation/selection": [[918, "manipulation-selection"], [639, "manipulation-selection"], [548, "manipulation-selection"], [241, "manipulation-selection"]], "polars.Series.unique": [[901, "polars-series-unique"]], "Boolean": [[911, "boolean"], [540, "boolean"]], "Miscellaneous": [[917, "miscellaneous"], [638, "miscellaneous"], [547, "miscellaneous"], [553, "miscellaneous"], [240, "miscellaneous"]], "polars.Series.tanh": [[891, "polars-series-tanh"]], "Temporal": [[921, "temporal"], [551, "temporal"]], "polars.Series.zip_with": [[907, "polars-series-zip-with"]], "Testing": [[923, "testing"]], "Asserts": [[923, "asserts"]], "Property-based testing": [[923, "property-based-testing"]], "Strategies": [[923, "strategies"]], "Strategy helpers": [[923, "strategy-helpers"]], "polars.Series.to_frame": [[895, "polars-series-to-frame"]], "polars.Series.time_unit": [[892, "polars-series-time-unit"]], "polars.Series.take": [[888, "polars-series-take"]], "Struct": [[920, "struct"], [550, "struct"]], "Strings": [[919, "strings"], [549, "strings"]], "polars.Series.to_list": [[896, "polars-series-to-list"]], "polars.Series.unique_counts": [[902, "polars-series-unique-counts"]], "Binary": [[910, "binary"], [539, "binary"]], "Series": [[916, "series"]], "polars.Series.sum": [[886, "polars-series-sum"]], "SQL": [[922, "sql"]], "Methods": [[922, "methods"]], "polars.Series.to_physical": [[899, "polars-series-to-physical"]], "polars.Series.tan": [[890, "polars-series-tan"]], "Attributes": [[909, "attributes"], [634, "attributes"], [234, "attributes"]], "Utils": [[924, "utils"]], "polars.Series.top_k": [[900, "polars-series-top-k"]], "polars.Series.upper_bound": [[903, "polars-series-upper-bound"]], "polars.Series.struct.rename_fields": [[884, "polars-series-struct-rename-fields"]], "polars.Series.tail": [[887, "polars-series-tail"]], "polars.Series.value_counts": [[904, "polars-series-value-counts"]], "polars.Series.to_arrow": [[893, "polars-series-to-arrow"]], "polars.Series.var": [[905, "polars-series-var"]], "Descriptive": [[914, "descriptive"], [635, "descriptive"], [236, "descriptive"]], "polars.Series.to_pandas": [[898, "polars-series-to-pandas"]], "Export": [[915, "export"], [237, "export"]], "polars.Series.struct.unnest": [[885, "polars-series-struct-unnest"]], "polars.Series.to_dummies": [[894, "polars-series-to-dummies"]], "polars.Series.take_every": [[889, "polars-series-take-every"]], "Array": [[908, "array"], [538, "array"]], "polars.Series.view": [[906, "polars-series-view"]], "polars.Series.to_numpy": [[897, "polars-series-to-numpy"]], "polars.Series.arr.explode": [[667, "polars-series-arr-explode"]], "polars.Series.arr.mean": [[675, "polars-series-arr-mean"]], "polars.internals.lazyframe.groupby.LazyGroupBy.sum": [[632, "polars-internals-lazyframe-groupby-lazygroupby-sum"]], "polars.Series.arccos": [[647, "polars-series-arccos"]], "polars.Series.apply": [[646, "polars-series-apply"]], "polars.Series.arctanh": [[652, "polars-series-arctanh"]], "LazyFrame": [[637, "lazyframe"]], "polars.internals.lazyframe.groupby.LazyGroupBy.n_unique": [[630, "polars-internals-lazyframe-groupby-lazygroupby-n-unique"]], "polars.Series.any": [[644, "polars-series-any"]], "polars.Series.arr.arg_min": [[661, "polars-series-arr-arg-min"]], "polars.Series.arr.max": [[674, "polars-series-arr-max"]], "polars.internals.lazyframe.groupby.LazyGroupBy.all": [[620, "polars-internals-lazyframe-groupby-lazygroupby-all"]], "polars.Series.arcsinh": [[650, "polars-series-arcsinh"]], "polars.Series.arr.arg_max": [[660, "polars-series-arr-arg-max"]], "polars.Series.arg_max": [[653, "polars-series-arg-max"]], "polars.Series.arr.contains": [[663, "polars-series-arr-contains"]], "polars.Series.arctan": [[651, "polars-series-arctan"]], "polars.LazyFrame.with_row_count": [[617, "polars-lazyframe-with-row-count"]], "polars.internals.lazyframe.groupby.LazyGroupBy.median": [[628, "polars-internals-lazyframe-groupby-lazygroupby-median"]], "polars.Series.arr.reverse": [[677, "polars-series-arr-reverse"]], "polars.internals.lazyframe.groupby.LazyGroupBy.count": [[622, "polars-internals-lazyframe-groupby-lazygroupby-count"]], "polars.Series.arr.concat": [[662, "polars-series-arr-concat"]], "polars.Series.arr.head": [[670, "polars-series-arr-head"]], "polars.LazyFrame.with_context": [[616, "polars-lazyframe-with-context"]], "polars.LazyFrame.update": [[612, "polars-lazyframe-update"]], "polars.Series.arr.count_match": [[664, "polars-series-arr-count-match"]], "polars.Series.all": [[643, "polars-series-all"]], "polars.LazyFrame.width": [[614, "polars-lazyframe-width"]], "polars.internals.lazyframe.groupby.LazyGroupBy.max": [[626, "polars-internals-lazyframe-groupby-lazygroupby-max"]], "polars.Series.arr.last": [[672, "polars-series-arr-last"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[633, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.arg_sort": [[655, "polars-series-arg-sort"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[619, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.internals.lazyframe.groupby.LazyGroupBy.min": [[629, "polars-internals-lazyframe-groupby-lazygroupby-min"]], "polars.internals.lazyframe.groupby.LazyGroupBy.first": [[623, "polars-internals-lazyframe-groupby-lazygroupby-first"]], "polars.Series.abs": [[641, "polars-series-abs"]], "polars.LazyFrame.with_columns": [[615, "polars-lazyframe-with-columns"]], "polars.Series.arr.eval": [[666, "polars-series-arr-eval"]], "polars.Series.argsort": [[658, "polars-series-argsort"]], "polars.Series.arr": [[659, "polars-series-arr"]], "polars.Series.append": [[645, "polars-series-append"]], "polars.Series.arr.shift": [[678, "polars-series-arr-shift"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[621, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.Series.arr.min": [[676, "polars-series-arr-min"]], "polars.Series.arr.join": [[671, "polars-series-arr-join"]], "polars.LazyFrame.write_json": [[618, "polars-lazyframe-write-json"]], "polars.Series.arr.first": [[668, "polars-series-arr-first"]], "polars.Series.arr.slice": [[679, "polars-series-arr-slice"]], "polars.internals.lazyframe.groupby.LazyGroupBy.quantile": [[631, "polars-internals-lazyframe-groupby-lazygroupby-quantile"]], "polars.Series.arg_unique": [[657, "polars-series-arg-unique"]], "polars.Series.arg_min": [[654, "polars-series-arg-min"]], "GroupBy": [[636, "groupby"], [238, "groupby"]], "polars.Series.arr.get": [[669, "polars-series-arr-get"]], "polars.LazyFrame.var": [[613, "polars-lazyframe-var"]], "Read/write logical plan": [[638, "read-write-logical-plan"]], "polars.Series.arcsin": [[649, "polars-series-arcsin"]], "polars.internals.lazyframe.groupby.LazyGroupBy.last": [[625, "polars-internals-lazyframe-groupby-lazygroupby-last"]], "polars.Series.alias": [[642, "polars-series-alias"]], "polars.internals.lazyframe.groupby.LazyGroupBy.mean": [[627, "polars-internals-lazyframe-groupby-lazygroupby-mean"]], "polars.Series.arg_true": [[656, "polars-series-arg-true"]], "polars.Series.arr.diff": [[665, "polars-series-arr-diff"]], "polars.Series.arr.lengths": [[673, "polars-series-arr-lengths"]], "polars.Series.arccosh": [[648, "polars-series-arccosh"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[624, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "polars.corr": [[501, "polars-corr"]], "polars.tail": [[535, "polars-tail"]], "polars.n_unique": [[525, "polars-n-unique"]], "polars.Expr.upper_bound": [[487, "polars-expr-upper-bound"]], "polars.from_epoch": [[515, "polars-from-epoch"]], "polars.Expr.to_physical": [[483, "polars-expr-to-physical"]], "polars.cov": [[503, "polars-cov"]], "polars.arange": [[494, "polars-arange"]], "polars.any": [[492, "polars-any"]], "polars.Expr.where": [[490, "polars-expr-where"]], "polars.sum": [[534, "polars-sum"]], "polars.Expr.value_counts": [[488, "polars-expr-value-counts"]], "polars.Expr.tail": [[478, "polars-expr-tail"]], "polars.reduce": [[528, "polars-reduce"]], "polars.groups": [[516, "polars-groups"]], "polars.struct": [[533, "polars-struct"]], "polars.quantile": [[527, "polars-quantile"]], "polars.exclude": [[511, "polars-exclude"]], "polars.duration": [[509, "polars-duration"]], "polars.map": [[520, "polars-map"]], "polars.median": [[523, "polars-median"]], "Columns / names": [[542, "columns-names"]], "polars.select": [[530, "polars-select"]], "polars.all": [[491, "polars-all"]], "polars.col": [[498, "polars-col"]], "polars.when": [[537, "polars-when"]], "polars.lit": [[519, "polars-lit"]], "polars.cumfold": [[504, "polars-cumfold"]], "polars.Expr.suffix": [[476, "polars-expr-suffix"]], "polars.element": [[510, "polars-element"]], "polars.repeat": [[529, "polars-repeat"]], "polars.Expr.take": [[479, "polars-expr-take"]], "polars.date": [[507, "polars-date"]], "polars.spearman_rank_corr": [[531, "polars-spearman-rank-corr"]], "polars.std": [[532, "polars-std"]], "polars.cumsum": [[506, "polars-cumsum"]], "polars.Expr.sum": [[477, "polars-expr-sum"]], "polars.Expr.tan": [[481, "polars-expr-tan"]], "polars.Expr.tanh": [[482, "polars-expr-tanh"]], "polars.Expr.var": [[489, "polars-expr-var"]], "polars.Expr.unique_counts": [[486, "polars-expr-unique-counts"]], "polars.datetime": [[508, "polars-datetime"]], "polars.Expr.take_every": [[480, "polars-expr-take-every"]], "polars.concat_list": [[499, "polars-concat-list"]], "polars.cumreduce": [[505, "polars-cumreduce"]], "polars.coalesce": [[497, "polars-coalesce"]], "polars.max": [[521, "polars-max"]], "polars.var": [[536, "polars-var"]], "polars.arg_sort_by": [[495, "polars-arg-sort-by"]], "polars.Expr.top_k": [[484, "polars-expr-top-k"]], "polars.mean": [[522, "polars-mean"]], "polars.first": [[512, "polars-first"]], "polars.avg": [[496, "polars-avg"]], "polars.count": [[502, "polars-count"]], "polars.fold": [[513, "polars-fold"]], "polars.format": [[514, "polars-format"]], "polars.list": [[518, "polars-list"]], "polars.min": [[524, "polars-min"]], "polars.pearson_corr": [[526, "polars-pearson-corr"]], "polars.concat_str": [[500, "polars-concat-str"]], "polars.apply": [[493, "polars-apply"]], "polars.head": [[517, "polars-head"]], "polars.Expr.unique": [[485, "polars-expr-unique"]], "polars.Expr.str.split_exact": [[466, "polars-expr-str-split-exact"]], "polars.Expr.sin": [[436, "polars-expr-sin"]], "polars.Expr.str.extract_all": [[452, "polars-expr-str-extract-all"]], "polars.Expr.rechunk": [[412, "polars-expr-rechunk"]], "polars.Expr.str.to_uppercase": [[472, "polars-expr-str-to-uppercase"]], "polars.Expr.rolling_sum": [[425, "polars-expr-rolling-sum"]], "polars.Expr.sort": [[440, "polars-expr-sort"]], "polars.Expr.str.json_path_match": [[454, "polars-expr-str-json-path-match"]], "polars.Expr.rolling_median": [[420, "polars-expr-rolling-median"]], "polars.Expr.str.strptime": [[470, "polars-expr-str-strptime"]], "polars.Expr.shift_and_fill": [[432, "polars-expr-shift-and-fill"]], "polars.Expr.str.rjust": [[462, "polars-expr-str-rjust"]], "polars.Expr.str.json_extract": [[453, "polars-expr-str-json-extract"]], "polars.Expr.rank": [[411, "polars-expr-rank"]], "polars.Expr.shuffle": [[434, "polars-expr-shuffle"]], "polars.Expr.set_sorted": [[430, "polars-expr-set-sorted"]], "polars.Expr.str.parse_int": [[459, "polars-expr-str-parse-int"]], "polars.Expr.slice": [[439, "polars-expr-slice"]], "polars.Expr.str.explode": [[450, "polars-expr-str-explode"]], "polars.Expr.str.to_lowercase": [[471, "polars-expr-str-to-lowercase"]], "polars.Expr.rolling_mean": [[419, "polars-expr-rolling-mean"]], "polars.Expr.str.starts_with": [[468, "polars-expr-str-starts-with"]], "polars.Expr.shift": [[431, "polars-expr-shift"]], "polars.Expr.reinterpret": [[413, "polars-expr-reinterpret"]], "polars.Expr.repeat_by": [[414, "polars-expr-repeat-by"]], "polars.Expr.shrink_dtype": [[433, "polars-expr-shrink-dtype"]], "polars.Expr.str.lengths": [[455, "polars-expr-str-lengths"]], "polars.Expr.str.strip": [[469, "polars-expr-str-strip"]], "polars.Expr.round": [[427, "polars-expr-round"]], "polars.Expr.str.slice": [[464, "polars-expr-str-slice"]], "polars.Expr.quantile": [[410, "polars-expr-quantile"]], "polars.Expr.rolling_quantile": [[422, "polars-expr-rolling-quantile"]], "polars.Expr.str.extract": [[451, "polars-expr-str-extract"]], "polars.Expr.str.rstrip": [[463, "polars-expr-str-rstrip"]], "polars.Expr.product": [[409, "polars-expr-product"]], "polars.Expr.sample": [[428, "polars-expr-sample"]], "polars.Expr.rolling_max": [[418, "polars-expr-rolling-max"]], "polars.Expr.sinh": [[437, "polars-expr-sinh"]], "polars.Expr.reshape": [[415, "polars-expr-reshape"]], "polars.Expr.str.lstrip": [[457, "polars-expr-str-lstrip"]], "polars.Expr.str.split": [[465, "polars-expr-str-split"]], "polars.Expr.str.concat": [[444, "polars-expr-str-concat"]], "polars.Expr.reverse": [[416, "polars-expr-reverse"]], "polars.Expr.sort_by": [[441, "polars-expr-sort-by"]], "polars.Expr.str.replace": [[460, "polars-expr-str-replace"]], "polars.Expr.str.decode": [[447, "polars-expr-str-decode"]], "polars.Expr.sqrt": [[442, "polars-expr-sqrt"]], "polars.Expr.rolling_skew": [[423, "polars-expr-rolling-skew"]], "polars.Expr.str.encode": [[448, "polars-expr-str-encode"]], "polars.Expr.str.ljust": [[456, "polars-expr-str-ljust"]], "polars.Expr.rolling_var": [[426, "polars-expr-rolling-var"]], "polars.Expr.rolling_std": [[424, "polars-expr-rolling-std"]], "polars.Expr.str.n_chars": [[458, "polars-expr-str-n-chars"]], "polars.Expr.str.ends_with": [[449, "polars-expr-str-ends-with"]], "polars.Expr.std": [[443, "polars-expr-std"]], "polars.Expr.str.splitn": [[467, "polars-expr-str-splitn"]], "polars.Expr.struct.field": [[474, "polars-expr-struct-field"]], "polars.Expr.str.count_match": [[446, "polars-expr-str-count-match"]], "polars.Expr.str.replace_all": [[461, "polars-expr-str-replace-all"]], "polars.Expr.struct.rename_fields": [[475, "polars-expr-struct-rename-fields"]], "polars.Expr.str.zfill": [[473, "polars-expr-str-zfill"]], "polars.Expr.skew": [[438, "polars-expr-skew"]], "polars.Expr.str.contains": [[445, "polars-expr-str-contains"]], "polars.Expr.rolling_apply": [[417, "polars-expr-rolling-apply"]], "polars.Expr.prefix": [[408, "polars-expr-prefix"]], "polars.Expr.sign": [[435, "polars-expr-sign"]], "polars.Expr.rolling_min": [[421, "polars-expr-rolling-min"]], "polars.Expr.search_sorted": [[429, "polars-expr-search-sorted"]], "polars.LazyFrame.select": [[598, "polars-lazyframe-select"]], "polars.LazyFrame.std": [[606, "polars-lazyframe-std"]], "Window": [[552, "window"]], "polars.LazyFrame.pipe": [[591, "polars-lazyframe-pipe"]], "polars.LazyFrame.clear": [[558, "polars-lazyframe-clear"]], "polars.LazyFrame.median": [[587, "polars-lazyframe-median"]], "polars.LazyFrame.melt": [[588, "polars-lazyframe-melt"]], "polars.LazyFrame.groupby_dynamic": [[574, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.last": [[581, "polars-lazyframe-last"]], "polars.LazyFrame.unnest": [[611, "polars-lazyframe-unnest"]], "polars.LazyFrame.filter": [[570, "polars-lazyframe-filter"]], "polars.LazyFrame.max": [[585, "polars-lazyframe-max"]], "Meta": [[546, "meta"]], "polars.LazyFrame.groupby_rolling": [[575, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.quantile": [[593, "polars-lazyframe-quantile"]], "polars.LazyFrame.rename": [[595, "polars-lazyframe-rename"]], "polars.LazyFrame.sort": [[605, "polars-lazyframe-sort"]], "polars.LazyFrame.schema": [[597, "polars-lazyframe-schema"]], "polars.LazyFrame.inspect": [[577, "polars-lazyframe-inspect"]], "polars.LazyFrame.cache": [[557, "polars-lazyframe-cache"]], "polars.LazyFrame.unique": [[610, "polars-lazyframe-unique"]], "polars.LazyFrame.drop_nulls": [[563, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.interpolate": [[578, "polars-lazyframe-interpolate"]], "polars.LazyFrame.profile": [[592, "polars-lazyframe-profile"]], "polars.LazyFrame.fill_nan": [[568, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.head": [[576, "polars-lazyframe-head"]], "polars.LazyFrame.drop": [[562, "polars-lazyframe-drop"]], "polars.LazyFrame.shift_and_fill": [[600, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.mean": [[586, "polars-lazyframe-mean"]], "polars.LazyFrame.show_graph": [[601, "polars-lazyframe-show-graph"]], "polars.LazyFrame.take_every": [[609, "polars-lazyframe-take-every"]], "polars.LazyFrame.join_asof": [[580, "polars-lazyframe-join-asof"]], "polars.LazyFrame.sink_ipc": [[602, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.sum": [[607, "polars-lazyframe-sum"]], "API reference": [[554, "api-reference"]], "polars.LazyFrame.merge_sorted": [[589, "polars-lazyframe-merge-sorted"]], "Functions": [[553, "functions"], [544, "functions"], [242, "functions"]], "Conversion": [[553, "conversion"]], "Eager/Lazy functions": [[553, "eager-lazy-functions"]], "Parallelization": [[553, "parallelization"]], "StringCache": [[553, "stringcache"]], "polars.LazyFrame.lazy": [[582, "polars-lazyframe-lazy"]], "polars.LazyFrame.groupby": [[573, "polars-lazyframe-groupby"]], "polars.LazyFrame.explode": [[566, "polars-lazyframe-explode"]], "polars.LazyFrame.min": [[590, "polars-lazyframe-min"]], "polars.LazyFrame.first": [[571, "polars-lazyframe-first"]], "polars.LazyFrame.read_json": [[594, "polars-lazyframe-read-json"]], "polars.LazyFrame.dtypes": [[564, "polars-lazyframe-dtypes"]], "polars.LazyFrame.fill_null": [[569, "polars-lazyframe-fill-null"]], "polars.LazyFrame.reverse": [[596, "polars-lazyframe-reverse"]], "polars.LazyFrame.shift": [[599, "polars-lazyframe-shift"]], "polars.LazyFrame.limit": [[583, "polars-lazyframe-limit"]], "polars.LazyFrame.sink_parquet": [[603, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.join": [[579, "polars-lazyframe-join"]], "polars.LazyFrame.explain": [[565, "polars-lazyframe-explain"]], "polars.LazyFrame.collect": [[560, "polars-lazyframe-collect"]], "polars.LazyFrame.map": [[584, "polars-lazyframe-map"]], "polars.LazyFrame.columns": [[561, "polars-lazyframe-columns"]], "Expressions": [[545, "expressions"]], "polars.LazyFrame.fetch": [[567, "polars-lazyframe-fetch"]], "polars.LazyFrame.from_json": [[572, "polars-lazyframe-from-json"]], "polars.LazyFrame.tail": [[608, "polars-lazyframe-tail"]], "polars.LazyFrame.slice": [[604, "polars-lazyframe-slice"]], "Input/output": [[555, "input-output"]], "CSV": [[555, "csv"]], "Feather/ IPC": [[555, "feather-ipc"]], "Parquet": [[555, "parquet"]], "Database": [[555, "database"]], "JSON": [[555, "json"]], "AVRO": [[555, "avro"]], "Excel": [[555, "excel"]], "Delta Lake": [[555, "delta-lake"]], "Datasets": [[555, "datasets"]], "BatchedCsvReader": [[555, "batchedcsvreader"]], "polars.LazyFrame.clone": [[559, "polars-lazyframe-clone"]], "polars.Expr.list": [[383, "polars-expr-list"]], "polars.Expr.map": [[387, "polars-expr-map"]], "polars.Expr.ewm_var": [[350, "polars-expr-ewm-var"]], "polars.Expr.is_duplicated": [[367, "polars-expr-is-duplicated"]], "polars.Expr.dt.truncate": [[342, "polars-expr-dt-truncate"]], "polars.Expr.is_not_nan": [[374, "polars-expr-is-not-nan"]], "polars.Expr.forward_fill": [[361, "polars-expr-forward-fill"]], "polars.Expr.is_between": [[366, "polars-expr-is-between"]], "polars.Expr.max": [[390, "polars-expr-max"]], "polars.Expr.mean": [[391, "polars-expr-mean"]], "polars.Expr.meta.output_name": [[395, "polars-expr-meta-output-name"]], "polars.Expr.ewm_std": [[349, "polars-expr-ewm-std"]], "polars.Expr.explode": [[353, "polars-expr-explode"]], "polars.Expr.is_unique": [[377, "polars-expr-is-unique"]], "polars.Expr.is_in": [[370, "polars-expr-is-in"]], "polars.Expr.last": [[380, "polars-expr-last"]], "polars.Expr.meta.is_regex_projection": [[394, "polars-expr-meta-is-regex-projection"]], "polars.Expr.flatten": [[359, "polars-expr-flatten"]], "polars.Expr.is_not": [[373, "polars-expr-is-not"]], "polars.Expr.meta.root_names": [[397, "polars-expr-meta-root-names"]], "polars.Expr.dt.with_time_unit": [[345, "polars-expr-dt-with-time-unit"]], "polars.Expr.limit": [[382, "polars-expr-limit"]], "polars.Expr.n_unique": [[401, "polars-expr-n-unique"]], "polars.Expr.keep_name": [[378, "polars-expr-keep-name"]], "polars.Expr.is_not_null": [[375, "polars-expr-is-not-null"]], "polars.Expr.extend_constant": [[354, "polars-expr-extend-constant"]], "polars.Expr.is_first": [[369, "polars-expr-is-first"]], "polars.Expr.ewm_mean": [[348, "polars-expr-ewm-mean"]], "polars.Expr.null_count": [[404, "polars-expr-null-count"]], "polars.Expr.exp": [[352, "polars-expr-exp"]], "polars.Expr.meta.pop": [[396, "polars-expr-meta-pop"]], "polars.Expr.interpolate": [[365, "polars-expr-interpolate"]], "polars.Expr.kurtosis": [[379, "polars-expr-kurtosis"]], "polars.Expr.median": [[392, "polars-expr-median"]], "polars.Expr.dt.strftime": [[340, "polars-expr-dt-strftime"]], "polars.Expr.log10": [[385, "polars-expr-log10"]], "polars.Expr.entropy": [[347, "polars-expr-entropy"]], "polars.Expr.head": [[363, "polars-expr-head"]], "polars.Expr.pct_change": [[406, "polars-expr-pct-change"]], "polars.Expr.dt.year": [[346, "polars-expr-dt-year"]], "polars.Expr.is_finite": [[368, "polars-expr-is-finite"]], "polars.Expr.fill_nan": [[355, "polars-expr-fill-nan"]], "polars.Expr.len": [[381, "polars-expr-len"]], "polars.Expr.dt.week": [[343, "polars-expr-dt-week"]], "polars.Expr.meta.undo_aliases": [[398, "polars-expr-meta-undo-aliases"]], "polars.Expr.is_null": [[376, "polars-expr-is-null"]], "polars.Expr.nan_min": [[403, "polars-expr-nan-min"]], "polars.Expr.exclude": [[351, "polars-expr-exclude"]], "polars.Expr.log": [[384, "polars-expr-log"]], "polars.Expr.lower_bound": [[386, "polars-expr-lower-bound"]], "polars.Expr.filter": [[357, "polars-expr-filter"]], "polars.Expr.over": [[405, "polars-expr-over"]], "polars.Expr.map_alias": [[388, "polars-expr-map-alias"]], "polars.Expr.dt.timestamp": [[341, "polars-expr-dt-timestamp"]], "polars.Expr.meta.has_multiple_outputs": [[393, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.dt.weekday": [[344, "polars-expr-dt-weekday"]], "polars.Expr.pow": [[407, "polars-expr-pow"]], "polars.Expr.floor": [[360, "polars-expr-floor"]], "polars.Expr.min": [[399, "polars-expr-min"]], "polars.Expr.nan_max": [[402, "polars-expr-nan-max"]], "polars.Expr.inspect": [[364, "polars-expr-inspect"]], "polars.Expr.is_infinite": [[371, "polars-expr-is-infinite"]], "polars.Expr.is_nan": [[372, "polars-expr-is-nan"]], "polars.Expr.mode": [[400, "polars-expr-mode"]], "polars.Expr.fill_null": [[356, "polars-expr-fill-null"]], "polars.Expr.first": [[358, "polars-expr-first"]], "polars.Expr.map_dict": [[389, "polars-expr-map-dict"]], "polars.Expr.hash": [[362, "polars-expr-hash"]], "polars.Expr.arr.reverse": [[281, "polars-expr-arr-reverse"]], "polars.Expr.bin.ends_with": [[294, "polars-expr-bin-ends-with"]], "polars.Expr.clip_max": [[300, "polars-expr-clip-max"]], "polars.Expr.dt.ordinal_day": [[334, "polars-expr-dt-ordinal-day"]], "polars.Expr.arr.max": [[278, "polars-expr-arr-max"]], "polars.Expr.dt.nanoseconds": [[332, "polars-expr-dt-nanoseconds"]], "polars.Expr.drop_nulls": [[314, "polars-expr-drop-nulls"]], "polars.Expr.dt.quarter": [[335, "polars-expr-dt-quarter"]], "polars.Expr.dot": [[312, "polars-expr-dot"]], "polars.Expr.dt.iso_year": [[323, "polars-expr-dt-iso-year"]], "polars.Expr.arr.sum": [[285, "polars-expr-arr-sum"]], "polars.Expr.cumsum": [[309, "polars-expr-cumsum"]], "polars.Expr.dt.cast_time_unit": [[315, "polars-expr-dt-cast-time-unit"]], "polars.Expr.arr.shift": [[282, "polars-expr-arr-shift"]], "polars.Expr.dt.minute": [[328, "polars-expr-dt-minute"]], "polars.Expr.arr.mean": [[279, "polars-expr-arr-mean"]], "polars.Expr.clip": [[299, "polars-expr-clip"]], "polars.Expr.cummax": [[306, "polars-expr-cummax"]], "polars.Expr.dt.seconds": [[339, "polars-expr-dt-seconds"]], "polars.Expr.bin.starts_with": [[295, "polars-expr-bin-starts-with"]], "polars.Expr.dt.epoch": [[320, "polars-expr-dt-epoch"]], "polars.Expr.dt.second": [[338, "polars-expr-dt-second"]], "polars.Expr.bin.contains": [[291, "polars-expr-bin-contains"]], "polars.Expr.ceil": [[298, "polars-expr-ceil"]], "polars.Expr.cat.set_ordering": [[297, "polars-expr-cat-set-ordering"]], "polars.Expr.arr.sort": [[284, "polars-expr-arr-sort"]], "polars.Expr.dt.combine": [[316, "polars-expr-dt-combine"]], "polars.Expr.arr.last": [[276, "polars-expr-arr-last"]], "polars.Expr.arr.lengths": [[277, "polars-expr-arr-lengths"]], "polars.Expr.dt.milliseconds": [[327, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.millisecond": [[326, "polars-expr-dt-millisecond"]], "polars.Expr.dt.microsecond": [[324, "polars-expr-dt-microsecond"]], "polars.Expr.arr.take": [[287, "polars-expr-arr-take"]], "polars.Expr.cast": [[296, "polars-expr-cast"]], "polars.Expr.dt.convert_time_zone": [[317, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.nanosecond": [[331, "polars-expr-dt-nanosecond"]], "polars.Expr.arr.get": [[273, "polars-expr-arr-get"]], "polars.Expr.cosh": [[303, "polars-expr-cosh"]], "polars.Expr.dt.round": [[337, "polars-expr-dt-round"]], "polars.Expr.diff": [[311, "polars-expr-diff"]], "polars.Expr.arr.min": [[280, "polars-expr-arr-min"]], "polars.Expr.count": [[304, "polars-expr-count"]], "polars.Expr.drop_nans": [[313, "polars-expr-drop-nans"]], "polars.Expr.backward_fill": [[290, "polars-expr-backward-fill"]], "polars.Expr.dt.month": [[330, "polars-expr-dt-month"]], "polars.Expr.arr.slice": [[283, "polars-expr-arr-slice"]], "polars.Expr.cumprod": [[308, "polars-expr-cumprod"]], "polars.Expr.cumcount": [[305, "polars-expr-cumcount"]], "polars.Expr.dt.minutes": [[329, "polars-expr-dt-minutes"]], "polars.Expr.bin.decode": [[292, "polars-expr-bin-decode"]], "polars.Expr.dt.day": [[318, "polars-expr-dt-day"]], "polars.Expr.arr.unique": [[289, "polars-expr-arr-unique"]], "polars.Expr.cos": [[302, "polars-expr-cos"]], "polars.Expr.dt.offset_by": [[333, "polars-expr-dt-offset-by"]], "polars.Expr.clip_min": [[301, "polars-expr-clip-min"]], "polars.Expr.dt.replace_time_zone": [[336, "polars-expr-dt-replace-time-zone"]], "polars.Expr.arr.to_struct": [[288, "polars-expr-arr-to-struct"]], "polars.Expr.arr.head": [[274, "polars-expr-arr-head"]], "polars.Expr.arr.first": [[272, "polars-expr-arr-first"]], "polars.Expr.dt.days": [[319, "polars-expr-dt-days"]], "polars.Expr.bin.encode": [[293, "polars-expr-bin-encode"]], "polars.Expr.dt.hours": [[322, "polars-expr-dt-hours"]], "polars.Expr.cummin": [[307, "polars-expr-cummin"]], "polars.Expr.arr.join": [[275, "polars-expr-arr-join"]], "polars.Expr.dt.microseconds": [[325, "polars-expr-dt-microseconds"]], "polars.Expr.arr.tail": [[286, "polars-expr-arr-tail"]], "polars.Expr.cumulative_eval": [[310, "polars-expr-cumulative-eval"]], "polars.Expr.dt.hour": [[321, "polars-expr-dt-hour"]], "polars.DataFrame.min": [[170, "polars-dataframe-min"]], "polars.DataFrame.sort": [[194, "polars-dataframe-sort"]], "polars.DataFrame.mean": [[166, "polars-dataframe-mean"]], "polars.DataFrame.groupby_rolling": [[148, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.iter_slices": [[160, "polars-dataframe-iter-slices"]], "polars.DataFrame.to_dummies": [[202, "polars-dataframe-to-dummies"]], "polars.DataFrame.insert_at_idx": [[153, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.slice": [[193, "polars-dataframe-slice"]], "polars.DataFrame.tail": [[197, "polars-dataframe-tail"]], "polars.DataFrame.replace_at_idx": [[182, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.frame_equal": [[142, "polars-dataframe-frame-equal"]], "polars.DataFrame.height": [[151, "polars-dataframe-height"]], "polars.DataFrame.extend": [[136, "polars-dataframe-extend"]], "polars.DataFrame.shift_and_fill": [[191, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.pivot": [[176, "polars-dataframe-pivot"]], "polars.DataFrame.groupby": [[146, "polars-dataframe-groupby"]], "polars.DataFrame.fill_nan": [[137, "polars-dataframe-fill-nan"]], "polars.DataFrame.to_arrow": [[199, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_dicts": [[201, "polars-dataframe-to-dicts"]], "polars.DataFrame.replace": [[181, "polars-dataframe-replace"]], "polars.DataFrame.get_columns": [[144, "polars-dataframe-get-columns"]], "polars.DataFrame.sum": [[196, "polars-dataframe-sum"]], "polars.DataFrame.rechunk": [[179, "polars-dataframe-rechunk"]], "polars.DataFrame.filter": [[139, "polars-dataframe-filter"]], "polars.DataFrame.reverse": [[183, "polars-dataframe-reverse"]], "polars.DataFrame.merge_sorted": [[169, "polars-dataframe-merge-sorted"]], "polars.DataFrame.product": [[177, "polars-dataframe-product"]], "polars.DataFrame.hash_rows": [[149, "polars-dataframe-hash-rows"]], "polars.DataFrame.groupby_dynamic": [[147, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.schema": [[187, "polars-dataframe-schema"]], "polars.DataFrame.std": [[195, "polars-dataframe-std"]], "polars.DataFrame.limit": [[164, "polars-dataframe-limit"]], "polars.DataFrame.get_column": [[143, "polars-dataframe-get-column"]], "polars.DataFrame.pipe": [[175, "polars-dataframe-pipe"]], "polars.DataFrame.row": [[184, "polars-dataframe-row"]], "polars.DataFrame.shrink_to_fit": [[192, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.is_empty": [[156, "polars-dataframe-is-empty"]], "polars.DataFrame.item": [[158, "polars-dataframe-item"]], "polars.DataFrame.join_asof": [[162, "polars-dataframe-join-asof"]], "polars.DataFrame.rows": [[185, "polars-dataframe-rows"]], "polars.DataFrame.join": [[161, "polars-dataframe-join"]], "polars.DataFrame.take_every": [[198, "polars-dataframe-take-every"]], "polars.DataFrame.melt": [[168, "polars-dataframe-melt"]], "polars.DataFrame.quantile": [[178, "polars-dataframe-quantile"]], "polars.DataFrame.n_chunks": [[171, "polars-dataframe-n-chunks"]], "polars.DataFrame.n_unique": [[172, "polars-dataframe-n-unique"]], "polars.DataFrame.glimpse": [[145, "polars-dataframe-glimpse"]], "polars.DataFrame.fill_null": [[138, "polars-dataframe-fill-null"]], "polars.DataFrame.find_idx_by_name": [[140, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.median": [[167, "polars-dataframe-median"]], "polars.DataFrame.fold": [[141, "polars-dataframe-fold"]], "polars.DataFrame.interpolate": [[154, "polars-dataframe-interpolate"]], "polars.DataFrame.head": [[150, "polars-dataframe-head"]], "polars.DataFrame.iter_rows": [[159, "polars-dataframe-iter-rows"]], "polars.DataFrame.null_count": [[173, "polars-dataframe-null-count"]], "polars.DataFrame.partition_by": [[174, "polars-dataframe-partition-by"]], "polars.DataFrame.is_unique": [[157, "polars-dataframe-is-unique"]], "polars.DataFrame.select": [[188, "polars-dataframe-select"]], "polars.DataFrame.shape": [[189, "polars-dataframe-shape"]], "polars.DataFrame.hstack": [[152, "polars-dataframe-hstack"]], "polars.DataFrame.shift": [[190, "polars-dataframe-shift"]], "polars.DataFrame.max": [[165, "polars-dataframe-max"]], "polars.DataFrame.sample": [[186, "polars-dataframe-sample"]], "polars.DataFrame.to_numpy": [[203, "polars-dataframe-to-numpy"]], "polars.DataFrame.lazy": [[163, "polars-dataframe-lazy"]], "polars.DataFrame.rename": [[180, "polars-dataframe-rename"]], "polars.DataFrame.to_dict": [[200, "polars-dataframe-to-dict"]], "polars.DataFrame.is_duplicated": [[155, "polars-dataframe-is-duplicated"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[227, "polars-internals-dataframe-groupby-groupby-mean"]], "polars.Expr.arr.contains": [[267, "polars-expr-arr-contains"]], "polars.internals.dataframe.groupby.GroupBy.all": [[220, "polars-internals-dataframe-groupby-groupby-all"]], "polars.Expr.agg_groups": [[246, "polars-expr-agg-groups"]], "polars.DataFrame.update": [[211, "polars-dataframe-update"]], "polars.Expr.arr.eval": [[270, "polars-expr-arr-eval"]], "polars.DataFrame.to_series": [[205, "polars-dataframe-to-series"]], "polars.internals.dataframe.groupby.GroupBy.first": [[223, "polars-internals-dataframe-groupby-groupby-first"]], "polars.Expr.arr.arg_max": [[264, "polars-expr-arr-arg-max"]], "polars.DataFrame.vstack": [[214, "polars-dataframe-vstack"]], "polars.DataFrame.unstack": [[210, "polars-dataframe-unstack"]], "polars.Expr.arcsin": [[254, "polars-expr-arcsin"]], "Data types": [[242, "data-types"]], "Numeric": [[242, "numeric"]], "Date / Time": [[242, "date-time"]], "Nested": [[242, "nested"]], "Other": [[242, "other"]], "polars.Expr.arr.explode": [[271, "polars-expr-arr-explode"]], "polars.Expr.any": [[249, "polars-expr-any"]], "polars.DataFrame.unique": [[208, "polars-dataframe-unique"]], "polars.Expr.append": [[250, "polars-expr-append"]], "polars.Expr.arr.count_match": [[268, "polars-expr-arr-count-match"]], "polars.DataFrame.to_struct": [[206, "polars-dataframe-to-struct"]], "polars.internals.dataframe.groupby.GroupBy.last": [[225, "polars-internals-dataframe-groupby-groupby-last"]], "polars.DataFrame.to_pandas": [[204, "polars-dataframe-to-pandas"]], "polars.Expr.arg_max": [[258, "polars-expr-arg-max"]], "polars.Expr.arr.arg_min": [[265, "polars-expr-arr-arg-min"]], "polars.DataFrame.unnest": [[209, "polars-dataframe-unnest"]], "polars.DataFrame.with_row_count": [[217, "polars-dataframe-with-row-count"]], "Exceptions": [[243, "exceptions"]], "polars.Expr.arcsinh": [[255, "polars-expr-arcsinh"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[221, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.Expr.argsort": [[263, "polars-expr-argsort"]], "polars.DataFrame.upsample": [[212, "polars-dataframe-upsample"]], "polars.DataFrame.width": [[215, "polars-dataframe-width"]], "polars.Expr.abs": [[245, "polars-expr-abs"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[219, "polars-internals-dataframe-groupby-groupby-agg"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[231, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.DataFrame.transpose": [[207, "polars-dataframe-transpose"]], "polars.internals.dataframe.groupby.GroupBy.min": [[229, "polars-internals-dataframe-groupby-groupby-min"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[230, "polars-internals-dataframe-groupby-groupby-n-unique"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[232, "polars-internals-dataframe-groupby-groupby-sum"]], "polars.Expr.arg_min": [[259, "polars-expr-arg-min"]], "polars.Expr.arr.diff": [[269, "polars-expr-arr-diff"]], "polars.Expr.arctan": [[256, "polars-expr-arctan"]], "polars.DataFrame.with_columns": [[216, "polars-dataframe-with-columns"]], "polars.internals.dataframe.groupby.GroupBy.median": [[228, "polars-internals-dataframe-groupby-groupby-median"]], "polars.Expr.arccosh": [[253, "polars-expr-arccosh"]], "polars.Expr.arg_unique": [[262, "polars-expr-arg-unique"]], "polars.internals.dataframe.groupby.GroupBy.head": [[224, "polars-internals-dataframe-groupby-groupby-head"]], "polars.internals.dataframe.groupby.GroupBy.max": [[226, "polars-internals-dataframe-groupby-groupby-max"]], "DataFrame": [[239, "dataframe"]], "polars.Expr.alias": [[247, "polars-expr-alias"]], "polars.Expr.arr.concat": [[266, "polars-expr-arr-concat"]], "polars.Expr.arccos": [[252, "polars-expr-arccos"]], "polars.Expr.arg_sort": [[260, "polars-expr-arg-sort"]], "polars.internals.dataframe.groupby.GroupBy.__iter__": [[218, "polars-internals-dataframe-groupby-groupby-iter"]], "polars.DataFrame.var": [[213, "polars-dataframe-var"]], "polars.internals.dataframe.groupby.GroupBy.count": [[222, "polars-internals-dataframe-groupby-groupby-count"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[233, "polars-internals-dataframe-groupby-groupby-tail"]], "polars.Expr.arg_true": [[261, "polars-expr-arg-true"]], "polars.Expr.arctanh": [[257, "polars-expr-arctanh"]], "polars.Expr.apply": [[251, "polars-expr-apply"]], "polars.Expr.all": [[248, "polars-expr-all"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "load() (polars.config class method)": [[5, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[6, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[7, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[8, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[9, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[10, "polars.Config.set_fmt_str_lengths"]], "set_tbl_cell_alignment() (polars.config class method)": [[11, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[12, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[13, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[14, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[15, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[16, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[17, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[20, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[21, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[22, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[23, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[24, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[25, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[26, "polars.DataFrame.write_database"]], "write_excel() (polars.dataframe method)": [[27, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[28, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[29, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[30, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[31, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[32, "polars.DataType"]], "__init__() (polars.datatype method)": [[32, "polars.DataType.__init__"]], "date (class in polars)": [[33, "polars.Date"]], "__init__() (polars.date method)": [[33, "polars.Date.__init__"]], "datetime (class in polars)": [[34, "polars.Datetime"]], "__init__() (polars.datetime method)": [[34, "polars.Datetime.__init__"]], "duration (class in polars)": [[35, "polars.Duration"]], "__init__() (polars.duration method)": [[35, "polars.Duration.__init__"]], "float32 (class in polars)": [[36, "polars.Float32"]], "__init__() (polars.float32 method)": [[36, "polars.Float32.__init__"]], "float64 (class in polars)": [[37, "polars.Float64"]], "__init__() (polars.float64 method)": [[37, "polars.Float64.__init__"]], "int16 (class in polars)": [[38, "polars.Int16"]], "__init__() (polars.int16 method)": [[38, "polars.Int16.__init__"]], "int32 (class in polars)": [[39, "polars.Int32"]], "__init__() (polars.int32 method)": [[39, "polars.Int32.__init__"]], "int64 (class in polars)": [[40, "polars.Int64"]], "__init__() (polars.int64 method)": [[40, "polars.Int64.__init__"]], "int8 (class in polars)": [[41, "polars.Int8"]], "__init__() (polars.int8 method)": [[41, "polars.Int8.__init__"]], "list (class in polars)": [[42, "polars.List"]], "__init__() (polars.list method)": [[42, "polars.List.__init__"]], "null (class in polars)": [[43, "polars.Null"]], "__init__() (polars.null method)": [[43, "polars.Null.__init__"]], "object (class in polars)": [[44, "polars.Object"]], "__init__() (polars.object method)": [[44, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[45, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[46, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[47, "polars.SQLContext.register"]], "stringcache (class in polars)": [[48, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[48, "polars.StringCache.__init__"]], "struct (class in polars)": [[49, "polars.Struct"]], "__init__() (polars.struct method)": [[49, "polars.Struct.__init__"]], "time (class in polars)": [[50, "polars.Time"]], "__init__() (polars.time method)": [[50, "polars.Time.__init__"]], "uint16 (class in polars)": [[51, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[51, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[52, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[52, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[53, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[53, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[54, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[54, "polars.UInt8.__init__"]], "unknown (class in polars)": [[55, "polars.Unknown"]], "__init__() (polars.unknown method)": [[55, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[56, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[56, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[57, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[58, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[59, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[60, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[61, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[62, "polars.arg_where"]], "build_info() (in module polars)": [[63, "polars.build_info"]], "collect_all() (in module polars)": [[64, "polars.collect_all"]], "concat() (in module polars)": [[65, "polars.concat"]], "cut() (in module polars)": [[66, "polars.cut"]], "date_range() (in module polars)": [[67, "polars.date_range"]], "arrowerror": [[68, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[69, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[70, "polars.exceptions.ComputeError"]], "duplicateerror": [[71, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[72, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[73, "polars.exceptions.NoDataError"]], "norowsreturned": [[74, "polars.exceptions.NoRowsReturned"]], "panicexception": [[75, "polars.exceptions.PanicException"]], "rowsexception": [[76, "polars.exceptions.RowsException"]], "schemaerror": [[77, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[78, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[79, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[80, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturned": [[81, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[82, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[83, "polars.from_dataframe"]], "from_dict() (in module polars)": [[84, "polars.from_dict"]], "from_dicts() (in module polars)": [[85, "polars.from_dicts"]], "from_numpy() (in module polars)": [[86, "polars.from_numpy"]], "from_pandas() (in module polars)": [[87, "polars.from_pandas"]], "from_records() (in module polars)": [[88, "polars.from_records"]], "get_dummies() (in module polars)": [[89, "polars.get_dummies"]], "get_idx_type() (in module polars)": [[90, "polars.get_idx_type"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[91, "polars.internals.batched.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[92, "polars.ones"]], "read_avro() (in module polars)": [[93, "polars.read_avro"]], "read_csv() (in module polars)": [[94, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[95, "polars.read_csv_batched"]], "read_database() (in module polars)": [[96, "polars.read_database"]], "read_delta() (in module polars)": [[97, "polars.read_delta"]], "read_excel() (in module polars)": [[98, "polars.read_excel"]], "read_ipc() (in module polars)": [[99, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[100, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[101, "polars.read_json"]], "read_ndjson() (in module polars)": [[102, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[103, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[104, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[105, "polars.scan_csv"]], "scan_delta() (in module polars)": [[106, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[107, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[108, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[109, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[110, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[111, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[112, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[113, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[114, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[114, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[115, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[116, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[117, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[118, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[119, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[120, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[123, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[124, "polars.DataFrame.apply"]], "clear() (polars.dataframe method)": [[125, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[126, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[127, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[128, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[129, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[130, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[131, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[132, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[133, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[134, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[135, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[136, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[137, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[138, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[139, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[140, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[141, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[142, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[143, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[144, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[145, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[146, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[147, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[148, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[149, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[150, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[151, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[152, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[153, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[154, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[155, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[156, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[157, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[158, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[159, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[160, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[161, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[162, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[163, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[164, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[165, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[166, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[167, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[168, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[169, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[170, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[171, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[172, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[173, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[174, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[175, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[176, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[177, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[178, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[179, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[180, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[181, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[182, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[183, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[184, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[185, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[186, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[187, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[188, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[189, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[190, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[191, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[192, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[193, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[194, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[195, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[196, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[197, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[198, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[199, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[200, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[201, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[202, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[203, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[204, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[205, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[206, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[207, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[208, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[209, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[210, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[211, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[212, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[213, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[214, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[215, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[216, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[217, "polars.DataFrame.with_row_count"]], "__iter__() (polars.internals.dataframe.groupby.groupby method)": [[218, "polars.internals.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[219, "polars.internals.dataframe.groupby.GroupBy.agg"]], "all() (polars.internals.dataframe.groupby.groupby method)": [[220, "polars.internals.dataframe.groupby.GroupBy.all"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[221, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[222, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[223, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[224, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[225, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[226, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[227, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[228, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[229, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[230, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[231, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[232, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[233, "polars.internals.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[245, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[246, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[247, "polars.Expr.alias"]], "all() (polars.expr method)": [[248, "polars.Expr.all"]], "any() (polars.expr method)": [[249, "polars.Expr.any"]], "append() (polars.expr method)": [[250, "polars.Expr.append"]], "apply() (polars.expr method)": [[251, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[252, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[253, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[254, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[255, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[256, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[257, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[258, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[259, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[260, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[261, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[262, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[263, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[264, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[265, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[266, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[267, "polars.Expr.arr.contains"]], "count_match() (polars.expr.arr method)": [[268, "polars.Expr.arr.count_match"]], "diff() (polars.expr.arr method)": [[269, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[270, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[271, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[272, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[273, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[274, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[275, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[276, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[277, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[278, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[279, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[280, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[281, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[282, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[283, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[284, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[285, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[286, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[287, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[288, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[289, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[290, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[291, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[292, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[293, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[294, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[295, "polars.Expr.bin.starts_with"]], "cast() (polars.expr method)": [[296, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[297, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[298, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[299, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[300, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[301, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[302, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[303, "polars.Expr.cosh"]], "count() (polars.expr method)": [[304, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[305, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[306, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[307, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[308, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[309, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[310, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[311, "polars.Expr.diff"]], "dot() (polars.expr method)": [[312, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[313, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[314, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[315, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[316, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[317, "polars.Expr.dt.convert_time_zone"]], "day() (polars.expr.dt method)": [[318, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[319, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[320, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[321, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[322, "polars.Expr.dt.hours"]], "iso_year() (polars.expr.dt method)": [[323, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[324, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[325, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[326, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[327, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[328, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[329, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[330, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[331, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[332, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[333, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[334, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[335, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[336, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[337, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[338, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[339, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[340, "polars.Expr.dt.strftime"]], "timestamp() (polars.expr.dt method)": [[341, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[342, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[343, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[344, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[345, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[346, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[347, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[348, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[349, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[350, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[351, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[352, "polars.Expr.exp"]], "explode() (polars.expr method)": [[353, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[354, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[355, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[356, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[357, "polars.Expr.filter"]], "first() (polars.expr method)": [[358, "polars.Expr.first"]], "flatten() (polars.expr method)": [[359, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[360, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[361, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[362, "polars.Expr.hash"]], "head() (polars.expr method)": [[363, "polars.Expr.head"]], "inspect() (polars.expr method)": [[364, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[365, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[366, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[367, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[368, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[369, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[370, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[371, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[372, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[373, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[374, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[375, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[376, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[377, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[378, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[379, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[380, "polars.Expr.last"]], "len() (polars.expr method)": [[381, "polars.Expr.len"]], "limit() (polars.expr method)": [[382, "polars.Expr.limit"]], "list() (polars.expr method)": [[383, "polars.Expr.list"]], "log() (polars.expr method)": [[384, "polars.Expr.log"]], "log10() (polars.expr method)": [[385, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[386, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[387, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[388, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[389, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[390, "polars.Expr.max"]], "mean() (polars.expr method)": [[391, "polars.Expr.mean"]], "median() (polars.expr method)": [[392, "polars.Expr.median"]], "has_multiple_outputs() (polars.expr.meta method)": [[393, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[394, "polars.Expr.meta.is_regex_projection"]], "output_name() (polars.expr.meta method)": [[395, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[396, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[397, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[398, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[399, "polars.Expr.min"]], "mode() (polars.expr method)": [[400, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[401, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[402, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[403, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[404, "polars.Expr.null_count"]], "over() (polars.expr method)": [[405, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[406, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[407, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[408, "polars.Expr.prefix"]], "product() (polars.expr method)": [[409, "polars.Expr.product"]], "quantile() (polars.expr method)": [[410, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[411, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[412, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[413, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[414, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[415, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[416, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[417, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[418, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[419, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[420, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[421, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[422, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[423, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[424, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[425, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[426, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[427, "polars.Expr.round"]], "sample() (polars.expr method)": [[428, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[429, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[430, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[431, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[432, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[433, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[434, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[435, "polars.Expr.sign"]], "sin() (polars.expr method)": [[436, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[437, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[438, "polars.Expr.skew"]], "slice() (polars.expr method)": [[439, "polars.Expr.slice"]], "sort() (polars.expr method)": [[440, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[441, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[442, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[443, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[444, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[445, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[446, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[447, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[448, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[449, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[450, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[451, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[452, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[453, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[454, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[455, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[456, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[457, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[458, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[459, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[460, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[461, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[462, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[463, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[464, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[465, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[466, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[467, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[468, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[469, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[470, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[471, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[472, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[473, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[474, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[475, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[476, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[477, "polars.Expr.sum"]], "tail() (polars.expr method)": [[478, "polars.Expr.tail"]], "take() (polars.expr method)": [[479, "polars.Expr.take"]], "take_every() (polars.expr method)": [[480, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[481, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[482, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[483, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[484, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[485, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[486, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[487, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[488, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[489, "polars.Expr.var"]], "where() (polars.expr method)": [[490, "polars.Expr.where"]], "all() (in module polars)": [[491, "polars.all"]], "any() (in module polars)": [[492, "polars.any"]], "apply() (in module polars)": [[493, "polars.apply"]], "arange() (in module polars)": [[494, "polars.arange"]], "arg_sort_by() (in module polars)": [[495, "polars.arg_sort_by"]], "avg() (in module polars)": [[496, "polars.avg"]], "coalesce() (in module polars)": [[497, "polars.coalesce"]], "col() (in module polars)": [[498, "polars.col"]], "concat_list() (in module polars)": [[499, "polars.concat_list"]], "concat_str() (in module polars)": [[500, "polars.concat_str"]], "corr() (in module polars)": [[501, "polars.corr"]], "count() (in module polars)": [[502, "polars.count"]], "cov() (in module polars)": [[503, "polars.cov"]], "cumfold() (in module polars)": [[504, "polars.cumfold"]], "cumreduce() (in module polars)": [[505, "polars.cumreduce"]], "cumsum() (in module polars)": [[506, "polars.cumsum"]], "date() (in module polars)": [[507, "polars.date"]], "datetime() (in module polars)": [[508, "polars.datetime"]], "duration() (in module polars)": [[509, "polars.duration"]], "element() (in module polars)": [[510, "polars.element"]], "exclude() (in module polars)": [[511, "polars.exclude"]], "first() (in module polars)": [[512, "polars.first"]], "fold() (in module polars)": [[513, "polars.fold"]], "format() (in module polars)": [[514, "polars.format"]], "from_epoch() (in module polars)": [[515, "polars.from_epoch"]], "groups() (in module polars)": [[516, "polars.groups"]], "head() (in module polars)": [[517, "polars.head"]], "list() (in module polars)": [[518, "polars.list"]], "lit() (in module polars)": [[519, "polars.lit"]], "map() (in module polars)": [[520, "polars.map"]], "max() (in module polars)": [[521, "polars.max"]], "mean() (in module polars)": [[522, "polars.mean"]], "median() (in module polars)": [[523, "polars.median"]], "min() (in module polars)": [[524, "polars.min"]], "n_unique() (in module polars)": [[525, "polars.n_unique"]], "pearson_corr() (in module polars)": [[526, "polars.pearson_corr"]], "quantile() (in module polars)": [[527, "polars.quantile"]], "reduce() (in module polars)": [[528, "polars.reduce"]], "repeat() (in module polars)": [[529, "polars.repeat"]], "select() (in module polars)": [[530, "polars.select"]], "spearman_rank_corr() (in module polars)": [[531, "polars.spearman_rank_corr"]], "std() (in module polars)": [[532, "polars.std"]], "struct() (in module polars)": [[533, "polars.struct"]], "sum() (in module polars)": [[534, "polars.sum"]], "tail() (in module polars)": [[535, "polars.tail"]], "var() (in module polars)": [[536, "polars.var"]], "when() (in module polars)": [[537, "polars.when"]], "cache() (polars.lazyframe method)": [[557, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[558, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[559, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[560, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[561, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[562, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[563, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[564, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[565, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[566, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[567, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[568, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[569, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[570, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[571, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[572, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[573, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[574, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[575, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[576, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[577, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[578, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[579, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[580, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[581, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[582, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[583, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[584, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[585, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[586, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[587, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[588, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[589, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[590, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[591, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[592, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[593, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[594, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[595, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[596, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[597, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[598, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[599, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[600, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[601, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[602, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[603, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[604, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[605, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[606, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[607, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[608, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[609, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[610, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[611, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[612, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[613, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[614, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[615, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[616, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[617, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[618, "polars.LazyFrame.write_json"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[619, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.internals.lazyframe.groupby.lazygroupby method)": [[620, "polars.internals.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[621, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.internals.lazyframe.groupby.lazygroupby method)": [[622, "polars.internals.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.internals.lazyframe.groupby.lazygroupby method)": [[623, "polars.internals.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[624, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.internals.lazyframe.groupby.lazygroupby method)": [[625, "polars.internals.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.internals.lazyframe.groupby.lazygroupby method)": [[626, "polars.internals.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.internals.lazyframe.groupby.lazygroupby method)": [[627, "polars.internals.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.internals.lazyframe.groupby.lazygroupby method)": [[628, "polars.internals.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.internals.lazyframe.groupby.lazygroupby method)": [[629, "polars.internals.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.internals.lazyframe.groupby.lazygroupby method)": [[630, "polars.internals.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.internals.lazyframe.groupby.lazygroupby method)": [[631, "polars.internals.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.internals.lazyframe.groupby.lazygroupby method)": [[632, "polars.internals.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[633, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[641, "polars.Series.abs"]], "alias() (polars.series method)": [[642, "polars.Series.alias"]], "all() (polars.series method)": [[643, "polars.Series.all"]], "any() (polars.series method)": [[644, "polars.Series.any"]], "append() (polars.series method)": [[645, "polars.Series.append"]], "apply() (polars.series method)": [[646, "polars.Series.apply"]], "arccos() (polars.series method)": [[647, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[648, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[649, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[650, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[651, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[652, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[653, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[654, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[655, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[656, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[657, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[658, "polars.Series.argsort"]], "arr (polars.series attribute)": [[659, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[660, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[661, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[662, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[663, "polars.Series.arr.contains"]], "count_match() (polars.series.arr method)": [[664, "polars.Series.arr.count_match"]], "diff() (polars.series.arr method)": [[665, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[666, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[667, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[668, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[669, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[670, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[671, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[672, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[673, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[674, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[675, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[676, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[677, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[678, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[679, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[680, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[681, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[682, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[683, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[684, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[685, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[686, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[687, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[688, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[689, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[690, "polars.Series.bin.starts_with"]], "cast() (polars.series method)": [[691, "polars.Series.cast"]], "cat (polars.series attribute)": [[692, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[693, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[694, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[695, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[696, "polars.Series.clear"]], "clip() (polars.series method)": [[697, "polars.Series.clip"]], "clip_max() (polars.series method)": [[698, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[699, "polars.Series.clip_min"]], "clone() (polars.series method)": [[700, "polars.Series.clone"]], "cos() (polars.series method)": [[701, "polars.Series.cos"]], "cosh() (polars.series method)": [[702, "polars.Series.cosh"]], "cummax() (polars.series method)": [[703, "polars.Series.cummax"]], "cummin() (polars.series method)": [[704, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[705, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[706, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[707, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[708, "polars.Series.cut"]], "describe() (polars.series method)": [[709, "polars.Series.describe"]], "diff() (polars.series method)": [[710, "polars.Series.diff"]], "dot() (polars.series method)": [[711, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[712, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[713, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[714, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[715, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[716, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[717, "polars.Series.dt.convert_time_zone"]], "day() (polars.series.dt method)": [[718, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[719, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[720, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[721, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[722, "polars.Series.dt.hours"]], "iso_year() (polars.series.dt method)": [[723, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[724, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[725, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[726, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[727, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[728, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[729, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[730, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[731, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[732, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[733, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[734, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[735, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[736, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[737, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[738, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[739, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[740, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[741, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[742, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[743, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[744, "polars.Series.dt.strftime"]], "timestamp() (polars.series.dt method)": [[745, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[746, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[747, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[748, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[749, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[750, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[751, "polars.Series.dtype"]], "entropy() (polars.series method)": [[752, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[753, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[754, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[755, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[756, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[757, "polars.Series.exp"]], "explode() (polars.series method)": [[758, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[759, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[760, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[761, "polars.Series.fill_null"]], "filter() (polars.series method)": [[762, "polars.Series.filter"]], "flags (polars.series attribute)": [[763, "polars.Series.flags"]], "floor() (polars.series method)": [[764, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[765, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[766, "polars.Series.has_validity"]], "hash() (polars.series method)": [[767, "polars.Series.hash"]], "head() (polars.series method)": [[768, "polars.Series.head"]], "inner_dtype (polars.series attribute)": [[769, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[770, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[771, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[772, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[773, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[774, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[775, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[776, "polars.Series.is_first"]], "is_float() (polars.series method)": [[777, "polars.Series.is_float"]], "is_in() (polars.series method)": [[778, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[779, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[780, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[781, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[782, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[783, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[784, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[785, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[786, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[787, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[788, "polars.Series.is_utf8"]], "item() (polars.series method)": [[789, "polars.Series.item"]], "kurtosis() (polars.series method)": [[790, "polars.Series.kurtosis"]], "len() (polars.series method)": [[791, "polars.Series.len"]], "limit() (polars.series method)": [[792, "polars.Series.limit"]], "log() (polars.series method)": [[793, "polars.Series.log"]], "log10() (polars.series method)": [[794, "polars.Series.log10"]], "lower_bound() (polars.series method)": [[795, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[796, "polars.Series.map_dict"]], "max() (polars.series method)": [[797, "polars.Series.max"]], "mean() (polars.series method)": [[798, "polars.Series.mean"]], "median() (polars.series method)": [[799, "polars.Series.median"]], "min() (polars.series method)": [[800, "polars.Series.min"]], "mode() (polars.series method)": [[801, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[802, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[803, "polars.Series.n_unique"]], "name (polars.series attribute)": [[804, "polars.Series.name"]], "nan_max() (polars.series method)": [[805, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[806, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[807, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[808, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[809, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[810, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[811, "polars.Series.peak_min"]], "product() (polars.series method)": [[812, "polars.Series.product"]], "quantile() (polars.series method)": [[813, "polars.Series.quantile"]], "rank() (polars.series method)": [[814, "polars.Series.rank"]], "rechunk() (polars.series method)": [[815, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[816, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[817, "polars.Series.rename"]], "reshape() (polars.series method)": [[818, "polars.Series.reshape"]], "reverse() (polars.series method)": [[819, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[820, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[821, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[822, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[823, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[824, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[825, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[826, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[827, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[828, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[829, "polars.Series.rolling_var"]], "round() (polars.series method)": [[830, "polars.Series.round"]], "sample() (polars.series method)": [[831, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[832, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[833, "polars.Series.series_equal"]], "set() (polars.series method)": [[834, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[835, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[836, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[837, "polars.Series.shape"]], "shift() (polars.series method)": [[838, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[839, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[840, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[841, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[842, "polars.Series.shuffle"]], "sign() (polars.series method)": [[843, "polars.Series.sign"]], "sin() (polars.series method)": [[844, "polars.Series.sin"]], "sinh() (polars.series method)": [[845, "polars.Series.sinh"]], "skew() (polars.series method)": [[846, "polars.Series.skew"]], "slice() (polars.series method)": [[847, "polars.Series.slice"]], "sort() (polars.series method)": [[848, "polars.Series.sort"]], "sqrt() (polars.series method)": [[849, "polars.Series.sqrt"]], "std() (polars.series method)": [[850, "polars.Series.std"]], "str (polars.series attribute)": [[851, "polars.Series.str"]], "concat() (polars.series.str method)": [[852, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[853, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[854, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[855, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[856, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[857, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[858, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[859, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[860, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[861, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[862, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[863, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[864, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[865, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[866, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[867, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[868, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[869, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[870, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[871, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[872, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[873, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[874, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[875, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[876, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[877, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[878, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[879, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[880, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[881, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[882, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[883, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[884, "polars.Series.struct.rename_fields"]], "unnest() (polars.series.struct method)": [[885, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[886, "polars.Series.sum"]], "tail() (polars.series method)": [[887, "polars.Series.tail"]], "take() (polars.series method)": [[888, "polars.Series.take"]], "take_every() (polars.series method)": [[889, "polars.Series.take_every"]], "tan() (polars.series method)": [[890, "polars.Series.tan"]], "tanh() (polars.series method)": [[891, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[892, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[893, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[894, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[895, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[896, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[897, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[898, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[899, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[900, "polars.Series.top_k"]], "unique() (polars.series method)": [[901, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[902, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[903, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[904, "polars.Series.value_counts"]], "var() (polars.series method)": [[905, "polars.Series.var"]], "view() (polars.series method)": [[906, "polars.Series.view"]], "zip_with() (polars.series method)": [[907, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[922, "polars.SQLContext"]]}})